
FC_v2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fe00  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002638  0801ffb0  0801ffb0  0002ffb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080225e8  080225e8  00040434  2**0
                  CONTENTS
  4 .ARM          00000008  080225e8  080225e8  000325e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080225f0  080225f0  00040434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080225f0  080225f0  000325f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080225f8  080225f8  000325f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000434  20000000  080225fc  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040434  2**0
                  CONTENTS
 10 .bss          0000892c  20000434  20000434  00040434  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20008d60  20008d60  00040434  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040434  2**0
                  CONTENTS, READONLY
 13 .debug_info   000729aa  00000000  00000000  00040464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b1f0  00000000  00000000  000b2e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003ee0  00000000  00000000  000be000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003b78  00000000  00000000  000c1ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00039c89  00000000  00000000  000c5a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004be67  00000000  00000000  000ff6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001153ac  00000000  00000000  0014b548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002608f4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00012834  00000000  00000000  00260948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  0027317c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  00273248  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000434 	.word	0x20000434
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801ff98 	.word	0x0801ff98

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000438 	.word	0x20000438
 80001ec:	0801ff98 	.word	0x0801ff98

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9ef 	b.w	80010c8 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a4 	b.w	80010c8 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	468c      	mov	ip, r1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8083 	bne.w	8000f1a <__udivmoddi4+0x116>
 8000e14:	428a      	cmp	r2, r1
 8000e16:	4617      	mov	r7, r2
 8000e18:	d947      	bls.n	8000eaa <__udivmoddi4+0xa6>
 8000e1a:	fab2 f282 	clz	r2, r2
 8000e1e:	b142      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e20:	f1c2 0020 	rsb	r0, r2, #32
 8000e24:	fa24 f000 	lsr.w	r0, r4, r0
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4097      	lsls	r7, r2
 8000e2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e30:	4094      	lsls	r4, r2
 8000e32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e36:	0c23      	lsrs	r3, r4, #16
 8000e38:	fbbc f6f8 	udiv	r6, ip, r8
 8000e3c:	fa1f fe87 	uxth.w	lr, r7
 8000e40:	fb08 c116 	mls	r1, r8, r6, ip
 8000e44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e48:	fb06 f10e 	mul.w	r1, r6, lr
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x60>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e56:	f080 8119 	bcs.w	800108c <__udivmoddi4+0x288>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 8116 	bls.w	800108c <__udivmoddi4+0x288>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e78:	45a6      	cmp	lr, r4
 8000e7a:	d909      	bls.n	8000e90 <__udivmoddi4+0x8c>
 8000e7c:	193c      	adds	r4, r7, r4
 8000e7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e82:	f080 8105 	bcs.w	8001090 <__udivmoddi4+0x28c>
 8000e86:	45a6      	cmp	lr, r4
 8000e88:	f240 8102 	bls.w	8001090 <__udivmoddi4+0x28c>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	443c      	add	r4, r7
 8000e90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e94:	eba4 040e 	sub.w	r4, r4, lr
 8000e98:	2600      	movs	r6, #0
 8000e9a:	b11d      	cbz	r5, 8000ea4 <__udivmoddi4+0xa0>
 8000e9c:	40d4      	lsrs	r4, r2
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	b902      	cbnz	r2, 8000eae <__udivmoddi4+0xaa>
 8000eac:	deff      	udf	#255	; 0xff
 8000eae:	fab2 f282 	clz	r2, r2
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	d150      	bne.n	8000f58 <__udivmoddi4+0x154>
 8000eb6:	1bcb      	subs	r3, r1, r7
 8000eb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebc:	fa1f f887 	uxth.w	r8, r7
 8000ec0:	2601      	movs	r6, #1
 8000ec2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ec6:	0c21      	lsrs	r1, r4, #16
 8000ec8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0xe4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0xe2>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	f200 80e9 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000ee6:	4684      	mov	ip, r0
 8000ee8:	1ac9      	subs	r1, r1, r3
 8000eea:	b2a3      	uxth	r3, r4
 8000eec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ef8:	fb08 f800 	mul.w	r8, r8, r0
 8000efc:	45a0      	cmp	r8, r4
 8000efe:	d907      	bls.n	8000f10 <__udivmoddi4+0x10c>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x10a>
 8000f08:	45a0      	cmp	r8, r4
 8000f0a:	f200 80d9 	bhi.w	80010c0 <__udivmoddi4+0x2bc>
 8000f0e:	4618      	mov	r0, r3
 8000f10:	eba4 0408 	sub.w	r4, r4, r8
 8000f14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f18:	e7bf      	b.n	8000e9a <__udivmoddi4+0x96>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d909      	bls.n	8000f32 <__udivmoddi4+0x12e>
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	f000 80b1 	beq.w	8001086 <__udivmoddi4+0x282>
 8000f24:	2600      	movs	r6, #0
 8000f26:	e9c5 0100 	strd	r0, r1, [r5]
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	4631      	mov	r1, r6
 8000f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f32:	fab3 f683 	clz	r6, r3
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	d14a      	bne.n	8000fd0 <__udivmoddi4+0x1cc>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d302      	bcc.n	8000f44 <__udivmoddi4+0x140>
 8000f3e:	4282      	cmp	r2, r0
 8000f40:	f200 80b8 	bhi.w	80010b4 <__udivmoddi4+0x2b0>
 8000f44:	1a84      	subs	r4, r0, r2
 8000f46:	eb61 0103 	sbc.w	r1, r1, r3
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	468c      	mov	ip, r1
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	d0a8      	beq.n	8000ea4 <__udivmoddi4+0xa0>
 8000f52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f56:	e7a5      	b.n	8000ea4 <__udivmoddi4+0xa0>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f60:	4097      	lsls	r7, r2
 8000f62:	fa01 f002 	lsl.w	r0, r1, r2
 8000f66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6a:	40d9      	lsrs	r1, r3
 8000f6c:	4330      	orrs	r0, r6
 8000f6e:	0c03      	lsrs	r3, r0, #16
 8000f70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f74:	fa1f f887 	uxth.w	r8, r7
 8000f78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f80:	fb06 f108 	mul.w	r1, r6, r8
 8000f84:	4299      	cmp	r1, r3
 8000f86:	fa04 f402 	lsl.w	r4, r4, r2
 8000f8a:	d909      	bls.n	8000fa0 <__udivmoddi4+0x19c>
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f92:	f080 808d 	bcs.w	80010b0 <__udivmoddi4+0x2ac>
 8000f96:	4299      	cmp	r1, r3
 8000f98:	f240 808a 	bls.w	80010b0 <__udivmoddi4+0x2ac>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	443b      	add	r3, r7
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b281      	uxth	r1, r0
 8000fa4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fa8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb0:	fb00 f308 	mul.w	r3, r0, r8
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	d907      	bls.n	8000fc8 <__udivmoddi4+0x1c4>
 8000fb8:	1879      	adds	r1, r7, r1
 8000fba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fbe:	d273      	bcs.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	d971      	bls.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	4439      	add	r1, r7
 8000fc8:	1acb      	subs	r3, r1, r3
 8000fca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fce:	e778      	b.n	8000ec2 <__udivmoddi4+0xbe>
 8000fd0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fd4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fd8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fdc:	431c      	orrs	r4, r3
 8000fde:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fe2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fe6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fee:	431f      	orrs	r7, r3
 8000ff0:	0c3b      	lsrs	r3, r7, #16
 8000ff2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff6:	fa1f f884 	uxth.w	r8, r4
 8000ffa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001002:	fb09 fa08 	mul.w	sl, r9, r8
 8001006:	458a      	cmp	sl, r1
 8001008:	fa02 f206 	lsl.w	r2, r2, r6
 800100c:	fa00 f306 	lsl.w	r3, r0, r6
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x220>
 8001012:	1861      	adds	r1, r4, r1
 8001014:	f109 30ff 	add.w	r0, r9, #4294967295
 8001018:	d248      	bcs.n	80010ac <__udivmoddi4+0x2a8>
 800101a:	458a      	cmp	sl, r1
 800101c:	d946      	bls.n	80010ac <__udivmoddi4+0x2a8>
 800101e:	f1a9 0902 	sub.w	r9, r9, #2
 8001022:	4421      	add	r1, r4
 8001024:	eba1 010a 	sub.w	r1, r1, sl
 8001028:	b2bf      	uxth	r7, r7
 800102a:	fbb1 f0fe 	udiv	r0, r1, lr
 800102e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001032:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001036:	fb00 f808 	mul.w	r8, r0, r8
 800103a:	45b8      	cmp	r8, r7
 800103c:	d907      	bls.n	800104e <__udivmoddi4+0x24a>
 800103e:	19e7      	adds	r7, r4, r7
 8001040:	f100 31ff 	add.w	r1, r0, #4294967295
 8001044:	d22e      	bcs.n	80010a4 <__udivmoddi4+0x2a0>
 8001046:	45b8      	cmp	r8, r7
 8001048:	d92c      	bls.n	80010a4 <__udivmoddi4+0x2a0>
 800104a:	3802      	subs	r0, #2
 800104c:	4427      	add	r7, r4
 800104e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001052:	eba7 0708 	sub.w	r7, r7, r8
 8001056:	fba0 8902 	umull	r8, r9, r0, r2
 800105a:	454f      	cmp	r7, r9
 800105c:	46c6      	mov	lr, r8
 800105e:	4649      	mov	r1, r9
 8001060:	d31a      	bcc.n	8001098 <__udivmoddi4+0x294>
 8001062:	d017      	beq.n	8001094 <__udivmoddi4+0x290>
 8001064:	b15d      	cbz	r5, 800107e <__udivmoddi4+0x27a>
 8001066:	ebb3 020e 	subs.w	r2, r3, lr
 800106a:	eb67 0701 	sbc.w	r7, r7, r1
 800106e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001072:	40f2      	lsrs	r2, r6
 8001074:	ea4c 0202 	orr.w	r2, ip, r2
 8001078:	40f7      	lsrs	r7, r6
 800107a:	e9c5 2700 	strd	r2, r7, [r5]
 800107e:	2600      	movs	r6, #0
 8001080:	4631      	mov	r1, r6
 8001082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e70b      	b.n	8000ea4 <__udivmoddi4+0xa0>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e9      	b.n	8000e64 <__udivmoddi4+0x60>
 8001090:	4618      	mov	r0, r3
 8001092:	e6fd      	b.n	8000e90 <__udivmoddi4+0x8c>
 8001094:	4543      	cmp	r3, r8
 8001096:	d2e5      	bcs.n	8001064 <__udivmoddi4+0x260>
 8001098:	ebb8 0e02 	subs.w	lr, r8, r2
 800109c:	eb69 0104 	sbc.w	r1, r9, r4
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7df      	b.n	8001064 <__udivmoddi4+0x260>
 80010a4:	4608      	mov	r0, r1
 80010a6:	e7d2      	b.n	800104e <__udivmoddi4+0x24a>
 80010a8:	4660      	mov	r0, ip
 80010aa:	e78d      	b.n	8000fc8 <__udivmoddi4+0x1c4>
 80010ac:	4681      	mov	r9, r0
 80010ae:	e7b9      	b.n	8001024 <__udivmoddi4+0x220>
 80010b0:	4666      	mov	r6, ip
 80010b2:	e775      	b.n	8000fa0 <__udivmoddi4+0x19c>
 80010b4:	4630      	mov	r0, r6
 80010b6:	e74a      	b.n	8000f4e <__udivmoddi4+0x14a>
 80010b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010bc:	4439      	add	r1, r7
 80010be:	e713      	b.n	8000ee8 <__udivmoddi4+0xe4>
 80010c0:	3802      	subs	r0, #2
 80010c2:	443c      	add	r4, r7
 80010c4:	e724      	b.n	8000f10 <__udivmoddi4+0x10c>
 80010c6:	bf00      	nop

080010c8 <__aeabi_idiv0>:
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <println>:

#include <MRT_helpers.h>
#include <MRT_setup.h>
#include <tim.h>

void println(char* s){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff f895 	bl	8000204 <strlen>
 80010da:	4603      	mov	r3, r0
 80010dc:	b29a      	uxth	r2, r3
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4806      	ldr	r0, [pc, #24]	; (8001100 <println+0x34>)
 80010e6:	f00e fb14 	bl	800f712 <HAL_UART_Transmit>
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	2202      	movs	r2, #2
 80010f0:	4904      	ldr	r1, [pc, #16]	; (8001104 <println+0x38>)
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <println+0x34>)
 80010f4:	f00e fb0d 	bl	800f712 <HAL_UART_Transmit>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200061f4 	.word	0x200061f4
 8001104:	0801ffb0 	.word	0x0801ffb0

08001108 <print>:

void print(char* s){
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff f877 	bl	8000204 <strlen>
 8001116:	4603      	mov	r3, r0
 8001118:	b29a      	uxth	r2, r3
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	4803      	ldr	r0, [pc, #12]	; (8001130 <print+0x28>)
 8001122:	f00e faf6 	bl	800f712 <HAL_UART_Transmit>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200061f4 	.word	0x200061f4

08001134 <tone_freq>:

// buzz at particular frequency
void tone_freq(uint32_t duration, uint32_t repeats, uint32_t freq) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
	// TIM2 base frequency is 90 MHz, PSC = 90-1
	// can calculate required ARR value
	TIM2->ARR = 1000000 / freq;
 8001140:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001144:	491c      	ldr	r1, [pc, #112]	; (80011b8 <tone_freq+0x84>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	fbb1 f3f3 	udiv	r3, r1, r3
 800114c:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->EGR |= TIM_EGR_UG;
 800114e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6153      	str	r3, [r2, #20]

	for (uint32_t i = 0; i < repeats; i++) {
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	e01f      	b.n	80011a4 <tone_freq+0x70>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001164:	2108      	movs	r1, #8
 8001166:	4815      	ldr	r0, [pc, #84]	; (80011bc <tone_freq+0x88>)
 8001168:	f00d faf4 	bl	800e754 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, SET);
 800116c:	2201      	movs	r2, #1
 800116e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001172:	4813      	ldr	r0, [pc, #76]	; (80011c0 <tone_freq+0x8c>)
 8001174:	f008 fe54 	bl	8009e20 <HAL_GPIO_WritePin>
		HAL_Delay(duration);
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f008 f8e3 	bl	8009344 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800117e:	2108      	movs	r1, #8
 8001180:	480e      	ldr	r0, [pc, #56]	; (80011bc <tone_freq+0x88>)
 8001182:	f00d fbaf 	bl	800e8e4 <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 7100 	mov.w	r1, #512	; 0x200
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <tone_freq+0x8c>)
 800118e:	f008 fe47 	bl	8009e20 <HAL_GPIO_WritePin>
		if (repeats > 1)
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d902      	bls.n	800119e <tone_freq+0x6a>
			HAL_Delay(duration);
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f008 f8d3 	bl	8009344 <HAL_Delay>
	for (uint32_t i = 0; i < repeats; i++) {
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	3301      	adds	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d3db      	bcc.n	8001164 <tone_freq+0x30>
	}
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	000f4240 	.word	0x000f4240
 80011bc:	20006168 	.word	0x20006168
 80011c0:	40020400 	.word	0x40020400

080011c4 <buzz_success>:
void buzz_success(void) { tone_freq(BUZZ_SUCCESS_DURATION, BUZZ_SUCCESS_REPEATS, BUZZ_SUCCESS_FREQ); }
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	f240 4216 	movw	r2, #1046	; 0x416
 80011cc:	2102      	movs	r1, #2
 80011ce:	204b      	movs	r0, #75	; 0x4b
 80011d0:	f7ff ffb0 	bl	8001134 <tone_freq>
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <buzz_startup_success>:
void buzz_failure(void) { tone_freq(BUZZ_FAILURE_DURATION, BUZZ_FAILURE_REPEATS, BUZZ_FAILURE_FREQ); }
void buzz_startup_success(void) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 80011de:	2300      	movs	r3, #0
 80011e0:	71fb      	strb	r3, [r7, #7]
 80011e2:	e008      	b.n	80011f6 <buzz_startup_success+0x1e>
		buzz_success();
 80011e4:	f7ff ffee 	bl	80011c4 <buzz_success>
		HAL_Delay(1000);
 80011e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ec:	f008 f8aa 	bl	8009344 <HAL_Delay>
	for (uint8_t i = 0; i < 3; i++) {
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	3301      	adds	r3, #1
 80011f4:	71fb      	strb	r3, [r7, #7]
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d9f3      	bls.n	80011e4 <buzz_startup_success+0xc>
	}
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <MRT_Init>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_Init(void){
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Init********/\r\n");
 800120c:	480a      	ldr	r0, [pc, #40]	; (8001238 <MRT_Init+0x30>)
 800120e:	f7ff ff7b 	bl	8001108 <print>
	print((char*) "IWDG Init...");
	MX_IWDG_Init();
	print((char*) "OK\r\n");
	#endif

	MRT_Reinitialize_Peripherals();
 8001212:	f000 f91f 	bl	8001454 <MRT_Reinitialize_Peripherals>
	MRT_external_flash_Init();
 8001216:	f001 fd31 	bl	8002c7c <MRT_external_flash_Init>
	MRT_reset_info();
 800121a:	f000 f823 	bl	8001264 <MRT_reset_info>

	//RTC
	HAL_IWDG_Refresh(&hiwdg);
	MRT_rtc_Init();
 800121e:	f000 ff43 	bl	80020a8 <MRT_rtc_Init>

		//SD card
		#if SD_CARD_
			HAL_IWDG_Refresh(&hiwdg);

			sd_init_dynamic_filename("FC", "", filename);
 8001222:	4a06      	ldr	r2, [pc, #24]	; (800123c <MRT_Init+0x34>)
 8001224:	4906      	ldr	r1, [pc, #24]	; (8001240 <MRT_Init+0x38>)
 8001226:	4807      	ldr	r0, [pc, #28]	; (8001244 <MRT_Init+0x3c>)
 8001228:	f001 fea2 	bl	8002f70 <sd_init_dynamic_filename>
		  checkForI2CDevices(huart8,hi2c1);
		  checkForI2CDevices(huart8,hi2c2);
		  checkForI2CDevices(huart8,hi2c3);
		#endif

		MRT_i2c_sensors_Init();
 800122c:	f002 ff40 	bl	80040b0 <MRT_i2c_sensors_Init>
	#endif


	//Telemetry
	#if TELEMETRY_THREAD
		MRT_TELEMETRY_Init();
 8001230:	f008 f824 	bl	800927c <MRT_TELEMETRY_Init>
	#endif

	#if FORCED_EJECTION_STAGE
		  ejection_stage_flag = FORCED_STAGE;
	#endif
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	0801ffb4 	.word	0x0801ffb4
 800123c:	200068ac 	.word	0x200068ac
 8001240:	0801ffd8 	.word	0x0801ffd8
 8001244:	0801ffdc 	.word	0x0801ffdc

08001248 <MRT_Deinit>:




void MRT_Deinit(void){
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Deinit********/\r\n");
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <MRT_Deinit+0x18>)
 800124e:	f7ff ff5b 	bl	8001108 <print>

	MRT_Reinitialize_Peripherals();
 8001252:	f000 f8ff 	bl	8001454 <MRT_Reinitialize_Peripherals>
	#endif


	//Sensors
	#if SENSORS_THREAD
		MRT_i2c_sensors_Deinit();
 8001256:	f002 ff5b 	bl	8004110 <MRT_i2c_sensors_Deinit>
	#endif

    //TODO
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	0801ffe0 	.word	0x0801ffe0

08001264 <MRT_reset_info>:

//**************************************************//
//PRIVATE FUNCTIONS


void MRT_reset_info(void){
 8001264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001266:	b0a7      	sub	sp, #156	; 0x9c
 8001268:	af04      	add	r7, sp, #16

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i\r\n",reset_flag, wu_flag, iwdg_flag, prev_hours, prev_min, prev_sec);
 800126a:	4b62      	ldr	r3, [pc, #392]	; (80013f4 <MRT_reset_info+0x190>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	461d      	mov	r5, r3
 8001270:	4b61      	ldr	r3, [pc, #388]	; (80013f8 <MRT_reset_info+0x194>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461e      	mov	r6, r3
 8001276:	4b61      	ldr	r3, [pc, #388]	; (80013fc <MRT_reset_info+0x198>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	4b60      	ldr	r3, [pc, #384]	; (8001400 <MRT_reset_info+0x19c>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4619      	mov	r1, r3
 8001282:	4b60      	ldr	r3, [pc, #384]	; (8001404 <MRT_reset_info+0x1a0>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	461c      	mov	r4, r3
 8001288:	4b5f      	ldr	r3, [pc, #380]	; (8001408 <MRT_reset_info+0x1a4>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	f107 0020 	add.w	r0, r7, #32
 8001290:	9303      	str	r3, [sp, #12]
 8001292:	9402      	str	r4, [sp, #8]
 8001294:	9101      	str	r1, [sp, #4]
 8001296:	9200      	str	r2, [sp, #0]
 8001298:	4633      	mov	r3, r6
 800129a:	462a      	mov	r2, r5
 800129c:	495b      	ldr	r1, [pc, #364]	; (800140c <MRT_reset_info+0x1a8>)
 800129e:	f01a fa75 	bl	801b78c <siprintf>
	  print(buffer);
 80012a2:	f107 0320 	add.w	r3, r7, #32
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff2e 	bl	8001108 <print>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 80012ac:	4b53      	ldr	r3, [pc, #332]	; (80013fc <MRT_reset_info+0x198>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d11a      	bne.n	80012ea <MRT_reset_info+0x86>
		  print((char*) "Deactivating IWDG\r\n");
 80012b4:	4856      	ldr	r0, [pc, #344]	; (8001410 <MRT_reset_info+0x1ac>)
 80012b6:	f7ff ff27 	bl	8001108 <print>

		  iwdg_flag = 0; //Flip flag
 80012ba:	4b50      	ldr	r3, [pc, #320]	; (80013fc <MRT_reset_info+0x198>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
		  flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 80012c0:	4b4e      	ldr	r3, [pc, #312]	; (80013fc <MRT_reset_info+0x198>)
 80012c2:	781a      	ldrb	r2, [r3, #0]
 80012c4:	4b53      	ldr	r3, [pc, #332]	; (8001414 <MRT_reset_info+0x1b0>)
 80012c6:	709a      	strb	r2, [r3, #2]
		  W25qxx_EraseSector(1);
 80012c8:	2001      	movs	r0, #1
 80012ca:	f002 fab9 	bl	8003840 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80012ce:	2305      	movs	r3, #5
 80012d0:	2200      	movs	r2, #0
 80012d2:	2101      	movs	r1, #1
 80012d4:	484f      	ldr	r0, [pc, #316]	; (8001414 <MRT_reset_info+0x1b0>)
 80012d6:	f002 fbfd 	bl	8003ad4 <W25qxx_WriteSector>

		  HAL_Delay(1000);
 80012da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012de:	f008 f831 	bl	8009344 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 80012e2:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 80012e6:	f000 ffa7 	bl	8002238 <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag>0){
 80012ea:	4b43      	ldr	r3, [pc, #268]	; (80013f8 <MRT_reset_info+0x194>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d02b      	beq.n	800134a <MRT_reset_info+0xe6>
		  char buf[30];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 80012f2:	4b41      	ldr	r3, [pc, #260]	; (80013f8 <MRT_reset_info+0x194>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	463b      	mov	r3, r7
 80012fa:	4947      	ldr	r1, [pc, #284]	; (8001418 <MRT_reset_info+0x1b4>)
 80012fc:	4618      	mov	r0, r3
 80012fe:	f01a fa45 	bl	801b78c <siprintf>
		  print(buf);
 8001302:	463b      	mov	r3, r7
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff feff 	bl	8001108 <print>

		  print((char*) "Resetting RTC time\r\n");
 800130a:	4844      	ldr	r0, [pc, #272]	; (800141c <MRT_reset_info+0x1b8>)
 800130c:	f7ff fefc 	bl	8001108 <print>

		  //Clear RTC time (last recorded)
		  W25qxx_EraseSector(2);
 8001310:	2002      	movs	r0, #2
 8001312:	f002 fa95 	bl	8003840 <W25qxx_EraseSector>
		  W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 8001316:	2303      	movs	r3, #3
 8001318:	2200      	movs	r2, #0
 800131a:	2102      	movs	r1, #2
 800131c:	4840      	ldr	r0, [pc, #256]	; (8001420 <MRT_reset_info+0x1bc>)
 800131e:	f002 fbd9 	bl	8003ad4 <W25qxx_WriteSector>

		  //Update variables (to 0)
		  for (int i = 0; i < 3; i++){
 8001322:	2300      	movs	r3, #0
 8001324:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001328:	e00b      	b.n	8001342 <MRT_reset_info+0xde>
			  *flash_time[i] = 0x0;
 800132a:	4a3e      	ldr	r2, [pc, #248]	; (8001424 <MRT_reset_info+0x1c0>)
 800132c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 3; i++){
 8001338:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800133c:	3301      	adds	r3, #1
 800133e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001342:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001346:	2b02      	cmp	r3, #2
 8001348:	ddef      	ble.n	800132a <MRT_reset_info+0xc6>

	  }


	  //Check if we start from the beginning
	  if (reset_flag==0){
 800134a:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <MRT_reset_info+0x190>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d112      	bne.n	8001378 <MRT_reset_info+0x114>
		  print((char*) "FC restarted\r\n");
 8001352:	4835      	ldr	r0, [pc, #212]	; (8001428 <MRT_reset_info+0x1c4>)
 8001354:	f7ff fed8 	bl	8001108 <print>

		  reset_flag = 1; //Flip flag
 8001358:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <MRT_reset_info+0x190>)
 800135a:	2201      	movs	r2, #1
 800135c:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
	      flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <MRT_reset_info+0x190>)
 8001360:	781a      	ldrb	r2, [r3, #0]
 8001362:	4b2c      	ldr	r3, [pc, #176]	; (8001414 <MRT_reset_info+0x1b0>)
 8001364:	701a      	strb	r2, [r3, #0]
		  W25qxx_EraseSector(1);
 8001366:	2001      	movs	r0, #1
 8001368:	f002 fa6a 	bl	8003840 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 800136c:	2305      	movs	r3, #5
 800136e:	2200      	movs	r2, #0
 8001370:	2101      	movs	r1, #1
 8001372:	4828      	ldr	r0, [pc, #160]	; (8001414 <MRT_reset_info+0x1b0>)
 8001374:	f002 fbae 	bl	8003ad4 <W25qxx_WriteSector>
	  }


	  //Check if before or after apogee
	  if (apogee_flag == 0){
 8001378:	4b2c      	ldr	r3, [pc, #176]	; (800142c <MRT_reset_info+0x1c8>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d103      	bne.n	8001388 <MRT_reset_info+0x124>
		  print((char*) "Pre-apogee\r\n");
 8001380:	482b      	ldr	r0, [pc, #172]	; (8001430 <MRT_reset_info+0x1cc>)
 8001382:	f7ff fec1 	bl	8001108 <print>
 8001386:	e006      	b.n	8001396 <MRT_reset_info+0x132>
	  }
	  else if(apogee_flag==1){
 8001388:	4b28      	ldr	r3, [pc, #160]	; (800142c <MRT_reset_info+0x1c8>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d102      	bne.n	8001396 <MRT_reset_info+0x132>
		  print((char*) "Post-apogee\r\n");
 8001390:	4828      	ldr	r0, [pc, #160]	; (8001434 <MRT_reset_info+0x1d0>)
 8001392:	f7ff feb9 	bl	8001108 <print>
	  }


	  //Check ejection stage
	  print((char*)"Ejection Stage: ");
 8001396:	4828      	ldr	r0, [pc, #160]	; (8001438 <MRT_reset_info+0x1d4>)
 8001398:	f7ff feb6 	bl	8001108 <print>
	  if (ejection_state_flag==0){
 800139c:	4b27      	ldr	r3, [pc, #156]	; (800143c <MRT_reset_info+0x1d8>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d103      	bne.n	80013ac <MRT_reset_info+0x148>
		  print((char*)"Pad\r\n");
 80013a4:	4826      	ldr	r0, [pc, #152]	; (8001440 <MRT_reset_info+0x1dc>)
 80013a6:	f7ff feaf 	bl	8001108 <print>
		  print((char*)"Main descent\r\n");
	  }
	  else if(ejection_state_flag==4){
		  print((char*)"Landed\r\n");
	  }
}
 80013aa:	e01e      	b.n	80013ea <MRT_reset_info+0x186>
	  else if(ejection_state_flag==1){
 80013ac:	4b23      	ldr	r3, [pc, #140]	; (800143c <MRT_reset_info+0x1d8>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d103      	bne.n	80013bc <MRT_reset_info+0x158>
		  print((char*)"Boost\r\n");
 80013b4:	4823      	ldr	r0, [pc, #140]	; (8001444 <MRT_reset_info+0x1e0>)
 80013b6:	f7ff fea7 	bl	8001108 <print>
}
 80013ba:	e016      	b.n	80013ea <MRT_reset_info+0x186>
	  else if(ejection_state_flag==2){
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <MRT_reset_info+0x1d8>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d103      	bne.n	80013cc <MRT_reset_info+0x168>
		  print((char*)"Drogue descent\r\n");
 80013c4:	4820      	ldr	r0, [pc, #128]	; (8001448 <MRT_reset_info+0x1e4>)
 80013c6:	f7ff fe9f 	bl	8001108 <print>
}
 80013ca:	e00e      	b.n	80013ea <MRT_reset_info+0x186>
	  else if(ejection_state_flag==3){
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <MRT_reset_info+0x1d8>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d103      	bne.n	80013dc <MRT_reset_info+0x178>
		  print((char*)"Main descent\r\n");
 80013d4:	481d      	ldr	r0, [pc, #116]	; (800144c <MRT_reset_info+0x1e8>)
 80013d6:	f7ff fe97 	bl	8001108 <print>
}
 80013da:	e006      	b.n	80013ea <MRT_reset_info+0x186>
	  else if(ejection_state_flag==4){
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <MRT_reset_info+0x1d8>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	d102      	bne.n	80013ea <MRT_reset_info+0x186>
		  print((char*)"Landed\r\n");
 80013e4:	481a      	ldr	r0, [pc, #104]	; (8001450 <MRT_reset_info+0x1ec>)
 80013e6:	f7ff fe8f 	bl	8001108 <print>
}
 80013ea:	bf00      	nop
 80013ec:	378c      	adds	r7, #140	; 0x8c
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000047c 	.word	0x2000047c
 80013f8:	2000047d 	.word	0x2000047d
 80013fc:	2000047e 	.word	0x2000047e
 8001400:	20000481 	.word	0x20000481
 8001404:	20000482 	.word	0x20000482
 8001408:	20000483 	.word	0x20000483
 800140c:	08020004 	.word	0x08020004
 8001410:	08020044 	.word	0x08020044
 8001414:	20006284 	.word	0x20006284
 8001418:	08020058 	.word	0x08020058
 800141c:	08020068 	.word	0x08020068
 8001420:	20000488 	.word	0x20000488
 8001424:	20000054 	.word	0x20000054
 8001428:	08020080 	.word	0x08020080
 800142c:	2000047f 	.word	0x2000047f
 8001430:	08020090 	.word	0x08020090
 8001434:	080200a0 	.word	0x080200a0
 8001438:	080200b0 	.word	0x080200b0
 800143c:	20000480 	.word	0x20000480
 8001440:	080200c4 	.word	0x080200c4
 8001444:	080200cc 	.word	0x080200cc
 8001448:	080200d4 	.word	0x080200d4
 800144c:	080200e8 	.word	0x080200e8
 8001450:	080200f8 	.word	0x080200f8

08001454 <MRT_Reinitialize_Peripherals>:


void MRT_Reinitialize_Peripherals(void){
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	  /*
	   * Reinitialize all peripherals
	   */

	  print((char*)"Reinitializing Peripherals...");
 8001458:	482f      	ldr	r0, [pc, #188]	; (8001518 <MRT_Reinitialize_Peripherals+0xc4>)
 800145a:	f7ff fe55 	bl	8001108 <print>

	  // reset LEDs
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	2102      	movs	r1, #2
 8001462:	482e      	ldr	r0, [pc, #184]	; (800151c <MRT_Reinitialize_Peripherals+0xc8>)
 8001464:	f008 fcdc 	bl	8009e20 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	2104      	movs	r1, #4
 800146c:	482b      	ldr	r0, [pc, #172]	; (800151c <MRT_Reinitialize_Peripherals+0xc8>)
 800146e:	f008 fcd7 	bl	8009e20 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	2108      	movs	r1, #8
 8001476:	4829      	ldr	r0, [pc, #164]	; (800151c <MRT_Reinitialize_Peripherals+0xc8>)
 8001478:	f008 fcd2 	bl	8009e20 <HAL_GPIO_WritePin>

	  // reset recovery pyro pins
	  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 800147c:	2201      	movs	r2, #1
 800147e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001482:	4827      	ldr	r0, [pc, #156]	; (8001520 <MRT_Reinitialize_Peripherals+0xcc>)
 8001484:	f008 fccc 	bl	8009e20 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 8001488:	2200      	movs	r2, #0
 800148a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800148e:	4824      	ldr	r0, [pc, #144]	; (8001520 <MRT_Reinitialize_Peripherals+0xcc>)
 8001490:	f008 fcc6 	bl	8009e20 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 8001494:	2200      	movs	r2, #0
 8001496:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800149a:	4821      	ldr	r0, [pc, #132]	; (8001520 <MRT_Reinitialize_Peripherals+0xcc>)
 800149c:	f008 fcc0 	bl	8009e20 <HAL_GPIO_WritePin>

	  // reset prop pyro pins
	  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 80014a0:	2201      	movs	r2, #1
 80014a2:	2102      	movs	r1, #2
 80014a4:	481e      	ldr	r0, [pc, #120]	; (8001520 <MRT_Reinitialize_Peripherals+0xcc>)
 80014a6:	f008 fcbb 	bl	8009e20 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80014aa:	2200      	movs	r2, #0
 80014ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014b0:	481c      	ldr	r0, [pc, #112]	; (8001524 <MRT_Reinitialize_Peripherals+0xd0>)
 80014b2:	f008 fcb5 	bl	8009e20 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80014b6:	2200      	movs	r2, #0
 80014b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014bc:	4819      	ldr	r0, [pc, #100]	; (8001524 <MRT_Reinitialize_Peripherals+0xd0>)
 80014be:	f008 fcaf 	bl	8009e20 <HAL_GPIO_WritePin>

	  // reset 12 V buck converter enable pin (disable converter)
	  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80014c2:	2200      	movs	r2, #0
 80014c4:	2104      	movs	r1, #4
 80014c6:	4818      	ldr	r0, [pc, #96]	; (8001528 <MRT_Reinitialize_Peripherals+0xd4>)
 80014c8:	f008 fcaa 	bl	8009e20 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
	  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


	  // reset payload EN signal
	  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80014cc:	2200      	movs	r2, #0
 80014ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014d2:	4815      	ldr	r0, [pc, #84]	; (8001528 <MRT_Reinitialize_Peripherals+0xd4>)
 80014d4:	f008 fca4 	bl	8009e20 <HAL_GPIO_WritePin>

	  // set CS pin for thermocouple chip high
	  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

	  // set power off for VR
	  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80014d8:	2200      	movs	r2, #0
 80014da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014de:	4810      	ldr	r0, [pc, #64]	; (8001520 <MRT_Reinitialize_Peripherals+0xcc>)
 80014e0:	f008 fc9e 	bl	8009e20 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 80014e4:	2200      	movs	r2, #0
 80014e6:	2180      	movs	r1, #128	; 0x80
 80014e8:	4810      	ldr	r0, [pc, #64]	; (800152c <MRT_Reinitialize_Peripherals+0xd8>)
 80014ea:	f008 fc99 	bl	8009e20 <HAL_GPIO_WritePin>

	  // FLASH set CS, WP and IO3 pins high
	  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 80014ee:	2201      	movs	r2, #1
 80014f0:	2140      	movs	r1, #64	; 0x40
 80014f2:	480e      	ldr	r0, [pc, #56]	; (800152c <MRT_Reinitialize_Peripherals+0xd8>)
 80014f4:	f008 fc94 	bl	8009e20 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 80014f8:	2201      	movs	r2, #1
 80014fa:	2120      	movs	r1, #32
 80014fc:	480b      	ldr	r0, [pc, #44]	; (800152c <MRT_Reinitialize_Peripherals+0xd8>)
 80014fe:	f008 fc8f 	bl	8009e20 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 8001502:	2201      	movs	r2, #1
 8001504:	2110      	movs	r1, #16
 8001506:	4809      	ldr	r0, [pc, #36]	; (800152c <MRT_Reinitialize_Peripherals+0xd8>)
 8001508:	f008 fc8a 	bl	8009e20 <HAL_GPIO_WritePin>

	  print((char*)"OK\r\n");
 800150c:	4808      	ldr	r0, [pc, #32]	; (8001530 <MRT_Reinitialize_Peripherals+0xdc>)
 800150e:	f7ff fdfb 	bl	8001108 <print>
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	08020104 	.word	0x08020104
 800151c:	40020800 	.word	0x40020800
 8001520:	40021800 	.word	0x40021800
 8001524:	40021400 	.word	0x40021400
 8001528:	40021000 	.word	0x40021000
 800152c:	40020c00 	.word	0x40020c00
 8001530:	08020124 	.word	0x08020124

08001534 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800153a:	463b      	mov	r3, r7
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001546:	4b21      	ldr	r3, [pc, #132]	; (80015cc <MX_ADC1_Init+0x98>)
 8001548:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <MX_ADC1_Init+0x9c>)
 800154a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800154c:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <MX_ADC1_Init+0x98>)
 800154e:	2200      	movs	r2, #0
 8001550:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001552:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <MX_ADC1_Init+0x98>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001558:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <MX_ADC1_Init+0x98>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800155e:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <MX_ADC1_Init+0x98>)
 8001560:	2200      	movs	r2, #0
 8001562:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <MX_ADC1_Init+0x98>)
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800156c:	4b17      	ldr	r3, [pc, #92]	; (80015cc <MX_ADC1_Init+0x98>)
 800156e:	2200      	movs	r2, #0
 8001570:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001572:	4b16      	ldr	r3, [pc, #88]	; (80015cc <MX_ADC1_Init+0x98>)
 8001574:	4a17      	ldr	r2, [pc, #92]	; (80015d4 <MX_ADC1_Init+0xa0>)
 8001576:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <MX_ADC1_Init+0x98>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800157e:	4b13      	ldr	r3, [pc, #76]	; (80015cc <MX_ADC1_Init+0x98>)
 8001580:	2201      	movs	r2, #1
 8001582:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_ADC1_Init+0x98>)
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <MX_ADC1_Init+0x98>)
 800158e:	2201      	movs	r2, #1
 8001590:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001592:	480e      	ldr	r0, [pc, #56]	; (80015cc <MX_ADC1_Init+0x98>)
 8001594:	f007 fefa 	bl	800938c <HAL_ADC_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800159e:	f000 fcbf 	bl	8001f20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80015a2:	2306      	movs	r3, #6
 80015a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015a6:	2301      	movs	r3, #1
 80015a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ae:	463b      	mov	r3, r7
 80015b0:	4619      	mov	r1, r3
 80015b2:	4806      	ldr	r0, [pc, #24]	; (80015cc <MX_ADC1_Init+0x98>)
 80015b4:	f007 ff2e 	bl	8009414 <HAL_ADC_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80015be:	f000 fcaf 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20005ef0 	.word	0x20005ef0
 80015d0:	40012000 	.word	0x40012000
 80015d4:	0f000001 	.word	0x0f000001

080015d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a17      	ldr	r2, [pc, #92]	; (8001654 <HAL_ADC_MspInit+0x7c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d127      	bne.n	800164a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <HAL_ADC_MspInit+0x80>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	4a15      	ldr	r2, [pc, #84]	; (8001658 <HAL_ADC_MspInit+0x80>)
 8001604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001608:	6453      	str	r3, [r2, #68]	; 0x44
 800160a:	4b13      	ldr	r3, [pc, #76]	; (8001658 <HAL_ADC_MspInit+0x80>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <HAL_ADC_MspInit+0x80>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <HAL_ADC_MspInit+0x80>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <HAL_ADC_MspInit+0x80>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 8001632:	2340      	movs	r3, #64	; 0x40
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001636:	2303      	movs	r3, #3
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <HAL_ADC_MspInit+0x84>)
 8001646:	f008 fa27 	bl	8009a98 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800164a:	bf00      	nop
 800164c:	3728      	adds	r7, #40	; 0x28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40012000 	.word	0x40012000
 8001658:	40023800 	.word	0x40023800
 800165c:	40020000 	.word	0x40020000

08001660 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	println("FREERTOS Init");
 8001664:	4821      	ldr	r0, [pc, #132]	; (80016ec <MX_FREERTOS_Init+0x8c>)
 8001666:	f7ff fd31 	bl	80010cc <println>
	print("\tInitializing the kernel...");
 800166a:	4821      	ldr	r0, [pc, #132]	; (80016f0 <MX_FREERTOS_Init+0x90>)
 800166c:	f7ff fd4c 	bl	8001108 <print>
	osKernelInitialize();
 8001670:	f014 faf0 	bl	8015c54 <osKernelInitialize>
	println("OK");
 8001674:	481f      	ldr	r0, [pc, #124]	; (80016f4 <MX_FREERTOS_Init+0x94>)
 8001676:	f7ff fd29 	bl	80010cc <println>

	print("\tCreating the threads...");
 800167a:	481f      	ldr	r0, [pc, #124]	; (80016f8 <MX_FREERTOS_Init+0x98>)
 800167c:	f7ff fd44 	bl	8001108 <print>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 8001680:	4a1e      	ldr	r2, [pc, #120]	; (80016fc <MX_FREERTOS_Init+0x9c>)
 8001682:	2100      	movs	r1, #0
 8001684:	481e      	ldr	r0, [pc, #120]	; (8001700 <MX_FREERTOS_Init+0xa0>)
 8001686:	f014 fb2f 	bl	8015ce8 <osThreadNew>
 800168a:	4603      	mov	r3, r0
 800168c:	4a1d      	ldr	r2, [pc, #116]	; (8001704 <MX_FREERTOS_Init+0xa4>)
 800168e:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 8001690:	4a1d      	ldr	r2, [pc, #116]	; (8001708 <MX_FREERTOS_Init+0xa8>)
 8001692:	2100      	movs	r1, #0
 8001694:	481d      	ldr	r0, [pc, #116]	; (800170c <MX_FREERTOS_Init+0xac>)
 8001696:	f014 fb27 	bl	8015ce8 <osThreadNew>
 800169a:	4603      	mov	r3, r0
 800169c:	4a1c      	ldr	r2, [pc, #112]	; (8001710 <MX_FREERTOS_Init+0xb0>)
 800169e:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 80016a0:	4a1c      	ldr	r2, [pc, #112]	; (8001714 <MX_FREERTOS_Init+0xb4>)
 80016a2:	2100      	movs	r1, #0
 80016a4:	481c      	ldr	r0, [pc, #112]	; (8001718 <MX_FREERTOS_Init+0xb8>)
 80016a6:	f014 fb1f 	bl	8015ce8 <osThreadNew>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4a1b      	ldr	r2, [pc, #108]	; (800171c <MX_FREERTOS_Init+0xbc>)
 80016ae:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 80016b0:	4a1b      	ldr	r2, [pc, #108]	; (8001720 <MX_FREERTOS_Init+0xc0>)
 80016b2:	2100      	movs	r1, #0
 80016b4:	481b      	ldr	r0, [pc, #108]	; (8001724 <MX_FREERTOS_Init+0xc4>)
 80016b6:	f014 fb17 	bl	8015ce8 <osThreadNew>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4a1a      	ldr	r2, [pc, #104]	; (8001728 <MX_FREERTOS_Init+0xc8>)
 80016be:	6013      	str	r3, [r2, #0]

  /* creation of WatchDog */
  WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 80016c0:	4a1a      	ldr	r2, [pc, #104]	; (800172c <MX_FREERTOS_Init+0xcc>)
 80016c2:	2100      	movs	r1, #0
 80016c4:	481a      	ldr	r0, [pc, #104]	; (8001730 <MX_FREERTOS_Init+0xd0>)
 80016c6:	f014 fb0f 	bl	8015ce8 <osThreadNew>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4a19      	ldr	r2, [pc, #100]	; (8001734 <MX_FREERTOS_Init+0xd4>)
 80016ce:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion4 */
  Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 80016d0:	4a19      	ldr	r2, [pc, #100]	; (8001738 <MX_FREERTOS_Init+0xd8>)
 80016d2:	2100      	movs	r1, #0
 80016d4:	4819      	ldr	r0, [pc, #100]	; (800173c <MX_FREERTOS_Init+0xdc>)
 80016d6:	f014 fb07 	bl	8015ce8 <osThreadNew>
 80016da:	4603      	mov	r3, r0
 80016dc:	4a18      	ldr	r2, [pc, #96]	; (8001740 <MX_FREERTOS_Init+0xe0>)
 80016de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  println("OK");
 80016e0:	4804      	ldr	r0, [pc, #16]	; (80016f4 <MX_FREERTOS_Init+0x94>)
 80016e2:	f7ff fcf3 	bl	80010cc <println>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	08020170 	.word	0x08020170
 80016f0:	08020180 	.word	0x08020180
 80016f4:	0802019c 	.word	0x0802019c
 80016f8:	080201a0 	.word	0x080201a0
 80016fc:	08021d94 	.word	0x08021d94
 8001700:	08001745 	.word	0x08001745
 8001704:	20005f3c 	.word	0x20005f3c
 8001708:	08021db8 	.word	0x08021db8
 800170c:	08001759 	.word	0x08001759
 8001710:	20005f40 	.word	0x20005f40
 8001714:	08021ddc 	.word	0x08021ddc
 8001718:	08001769 	.word	0x08001769
 800171c:	20005f44 	.word	0x20005f44
 8001720:	08021e00 	.word	0x08021e00
 8001724:	08001779 	.word	0x08001779
 8001728:	20005f48 	.word	0x20005f48
 800172c:	08021e24 	.word	0x08021e24
 8001730:	08001789 	.word	0x08001789
 8001734:	20005f38 	.word	0x20005f38
 8001738:	08021e48 	.word	0x08021e48
 800173c:	08001799 	.word	0x08001799
 8001740:	20005f4c 	.word	0x20005f4c

08001744 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800174c:	f017 fd5e 	bl	801920c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartMemory0 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001750:	2001      	movs	r0, #1
 8001752:	f014 fb5b 	bl	8015e0c <osDelay>
 8001756:	e7fb      	b.n	8001750 <StartMemory0+0xc>

08001758 <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEjection1 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001760:	2001      	movs	r0, #1
 8001762:	f014 fb53 	bl	8015e0c <osDelay>
 8001766:	e7fb      	b.n	8001760 <StartEjection1+0x8>

08001768 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetry2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001770:	2001      	movs	r0, #1
 8001772:	f014 fb4b 	bl	8015e0c <osDelay>
 8001776:	e7fb      	b.n	8001770 <StartTelemetry2+0x8>

08001778 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001780:	2001      	movs	r0, #1
 8001782:	f014 fb43 	bl	8015e0c <osDelay>
 8001786:	e7fb      	b.n	8001780 <StartSensors3+0x8>

08001788 <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	HAL_IWDG_Refresh(&hiwdg);
    osDelay(1);
 8001790:	2001      	movs	r0, #1
 8001792:	f014 fb3b 	bl	8015e0c <osDelay>
	HAL_IWDG_Refresh(&hiwdg);
 8001796:	e7fb      	b.n	8001790 <StartWatchDog+0x8>

08001798 <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80017a0:	2001      	movs	r0, #1
 80017a2:	f014 fb33 	bl	8015e0c <osDelay>
 80017a6:	e7fb      	b.n	80017a0 <StartPropulsion4+0x8>

080017a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08e      	sub	sp, #56	; 0x38
 80017ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
 80017bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	623b      	str	r3, [r7, #32]
 80017c2:	4bb5      	ldr	r3, [pc, #724]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4ab4      	ldr	r2, [pc, #720]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 80017c8:	f043 0310 	orr.w	r3, r3, #16
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4bb2      	ldr	r3, [pc, #712]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0310 	and.w	r3, r3, #16
 80017d6:	623b      	str	r3, [r7, #32]
 80017d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
 80017de:	4bae      	ldr	r3, [pc, #696]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4aad      	ldr	r2, [pc, #692]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4bab      	ldr	r3, [pc, #684]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	61fb      	str	r3, [r7, #28]
 80017f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	61bb      	str	r3, [r7, #24]
 80017fa:	4ba7      	ldr	r3, [pc, #668]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4aa6      	ldr	r2, [pc, #664]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 8001800:	f043 0320 	orr.w	r3, r3, #32
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4ba4      	ldr	r3, [pc, #656]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0320 	and.w	r3, r3, #32
 800180e:	61bb      	str	r3, [r7, #24]
 8001810:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	4ba0      	ldr	r3, [pc, #640]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a9f      	ldr	r2, [pc, #636]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 800181c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b9d      	ldr	r3, [pc, #628]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	4b99      	ldr	r3, [pc, #612]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a98      	ldr	r2, [pc, #608]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b96      	ldr	r3, [pc, #600]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b92      	ldr	r3, [pc, #584]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a91      	ldr	r2, [pc, #580]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b8f      	ldr	r3, [pc, #572]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	4b8b      	ldr	r3, [pc, #556]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a8a      	ldr	r2, [pc, #552]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 8001870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b88      	ldr	r3, [pc, #544]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	4b84      	ldr	r3, [pc, #528]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a83      	ldr	r2, [pc, #524]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 800188c:	f043 0308 	orr.w	r3, r3, #8
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b81      	ldr	r3, [pc, #516]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	f248 4184 	movw	r1, #33924	; 0x8484
 80018a4:	487d      	ldr	r0, [pc, #500]	; (8001a9c <MX_GPIO_Init+0x2f4>)
 80018a6:	f008 fabb 	bl	8009e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 80018b0:	487b      	ldr	r0, [pc, #492]	; (8001aa0 <MX_GPIO_Init+0x2f8>)
 80018b2:	f008 fab5 	bl	8009e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80018bc:	4879      	ldr	r0, [pc, #484]	; (8001aa4 <MX_GPIO_Init+0x2fc>)
 80018be:	f008 faaf 	bl	8009e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2108      	movs	r1, #8
 80018c6:	4878      	ldr	r0, [pc, #480]	; (8001aa8 <MX_GPIO_Init+0x300>)
 80018c8:	f008 faaa 	bl	8009e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 80018cc:	2200      	movs	r2, #0
 80018ce:	f645 2126 	movw	r1, #23078	; 0x5a26
 80018d2:	4876      	ldr	r0, [pc, #472]	; (8001aac <MX_GPIO_Init+0x304>)
 80018d4:	f008 faa4 	bl	8009e20 <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 80018de:	4874      	ldr	r0, [pc, #464]	; (8001ab0 <MX_GPIO_Init+0x308>)
 80018e0:	f008 fa9e 	bl	8009e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80018e4:	2200      	movs	r2, #0
 80018e6:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 80018ea:	4872      	ldr	r0, [pc, #456]	; (8001ab4 <MX_GPIO_Init+0x30c>)
 80018ec:	f008 fa98 	bl	8009e20 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 80018f0:	f248 4384 	movw	r3, #33924	; 0x8484
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f6:	2301      	movs	r3, #1
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001906:	4619      	mov	r1, r3
 8001908:	4864      	ldr	r0, [pc, #400]	; (8001a9c <MX_GPIO_Init+0x2f4>)
 800190a:	f008 f8c5 	bl	8009a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800190e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001914:	2301      	movs	r3, #1
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001918:	2301      	movs	r3, #1
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191c:	2300      	movs	r3, #0
 800191e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001924:	4619      	mov	r1, r3
 8001926:	485e      	ldr	r0, [pc, #376]	; (8001aa0 <MX_GPIO_Init+0x2f8>)
 8001928:	f008 f8b6 	bl	8009a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 800192c:	2301      	movs	r3, #1
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001930:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001934:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 800193a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193e:	4619      	mov	r1, r3
 8001940:	4858      	ldr	r0, [pc, #352]	; (8001aa4 <MX_GPIO_Init+0x2fc>)
 8001942:	f008 f8a9 	bl	8009a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 8001946:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194c:	2301      	movs	r3, #1
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800195c:	4619      	mov	r1, r3
 800195e:	4851      	ldr	r0, [pc, #324]	; (8001aa4 <MX_GPIO_Init+0x2fc>)
 8001960:	f008 f89a 	bl	8009a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8001964:	2308      	movs	r3, #8
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001968:	2301      	movs	r3, #1
 800196a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001970:	2300      	movs	r3, #0
 8001972:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8001974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001978:	4619      	mov	r1, r3
 800197a:	484b      	ldr	r0, [pc, #300]	; (8001aa8 <MX_GPIO_Init+0x300>)
 800197c:	f008 f88c 	bl	8009a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8001980:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001986:	2300      	movs	r3, #0
 8001988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800198e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001992:	4619      	mov	r1, r3
 8001994:	4843      	ldr	r0, [pc, #268]	; (8001aa4 <MX_GPIO_Init+0x2fc>)
 8001996:	f008 f87f 	bl	8009a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 800199a:	2302      	movs	r3, #2
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199e:	2300      	movs	r3, #0
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 80019a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019aa:	4619      	mov	r1, r3
 80019ac:	4840      	ldr	r0, [pc, #256]	; (8001ab0 <MX_GPIO_Init+0x308>)
 80019ae:	f008 f873 	bl	8009a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 80019b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 80019c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c4:	4619      	mov	r1, r3
 80019c6:	4836      	ldr	r0, [pc, #216]	; (8001aa0 <MX_GPIO_Init+0x2f8>)
 80019c8:	f008 f866 	bl	8009a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 80019cc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d2:	2301      	movs	r3, #1
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e2:	4619      	mov	r1, r3
 80019e4:	482e      	ldr	r0, [pc, #184]	; (8001aa0 <MX_GPIO_Init+0x2f8>)
 80019e6:	f008 f857 	bl	8009a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 80019ea:	f242 4319 	movw	r3, #9241	; 0x2419
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fc:	4619      	mov	r1, r3
 80019fe:	482b      	ldr	r0, [pc, #172]	; (8001aac <MX_GPIO_Init+0x304>)
 8001a00:	f008 f84a 	bl	8009a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8001a04:	f645 2326 	movw	r3, #23078	; 0x5a26
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4823      	ldr	r0, [pc, #140]	; (8001aac <MX_GPIO_Init+0x304>)
 8001a1e:	f008 f83b 	bl	8009a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8001a22:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a34:	4619      	mov	r1, r3
 8001a36:	4819      	ldr	r0, [pc, #100]	; (8001a9c <MX_GPIO_Init+0x2f4>)
 8001a38:	f008 f82e 	bl	8009a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB8 PBPin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin;
 8001a3c:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a42:	2301      	movs	r3, #1
 8001a44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a52:	4619      	mov	r1, r3
 8001a54:	4816      	ldr	r0, [pc, #88]	; (8001ab0 <MX_GPIO_Init+0x308>)
 8001a56:	f008 f81f 	bl	8009a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001a5a:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a60:	2301      	movs	r3, #1
 8001a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a70:	4619      	mov	r1, r3
 8001a72:	4810      	ldr	r0, [pc, #64]	; (8001ab4 <MX_GPIO_Init+0x30c>)
 8001a74:	f008 f810 	bl	8009a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8001a78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8001a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4809      	ldr	r0, [pc, #36]	; (8001ab4 <MX_GPIO_Init+0x30c>)
 8001a8e:	f008 f803 	bl	8009a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 8001a92:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001a96:	e00f      	b.n	8001ab8 <MX_GPIO_Init+0x310>
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40021400 	.word	0x40021400
 8001aa4:	40020800 	.word	0x40020800
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	40021800 	.word	0x40021800
 8001ab0:	40020400 	.word	0x40020400
 8001ab4:	40020c00 	.word	0x40020c00
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4807      	ldr	r0, [pc, #28]	; (8001ae8 <MX_GPIO_Init+0x340>)
 8001acc:	f007 ffe4 	bl	8009a98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2105      	movs	r1, #5
 8001ad4:	2006      	movs	r0, #6
 8001ad6:	f007 ffa7 	bl	8009a28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ada:	2006      	movs	r0, #6
 8001adc:	f007 ffc0 	bl	8009a60 <HAL_NVIC_EnableIRQ>

}
 8001ae0:	bf00      	nop
 8001ae2:	3738      	adds	r7, #56	; 0x38
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40021800 	.word	0x40021800

08001aec <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <MX_I2C2_Init+0x74>)
 8001af2:	4a1c      	ldr	r2, [pc, #112]	; (8001b64 <MX_I2C2_Init+0x78>)
 8001af4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001af6:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <MX_I2C2_Init+0x74>)
 8001af8:	4a1b      	ldr	r2, [pc, #108]	; (8001b68 <MX_I2C2_Init+0x7c>)
 8001afa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001afc:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <MX_I2C2_Init+0x74>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b02:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <MX_I2C2_Init+0x74>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b08:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <MX_I2C2_Init+0x74>)
 8001b0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b0e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b10:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <MX_I2C2_Init+0x74>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <MX_I2C2_Init+0x74>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b1c:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <MX_I2C2_Init+0x74>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <MX_I2C2_Init+0x74>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b28:	480d      	ldr	r0, [pc, #52]	; (8001b60 <MX_I2C2_Init+0x74>)
 8001b2a:	f008 f9ab 	bl	8009e84 <HAL_I2C_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b34:	f000 f9f4 	bl	8001f20 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4809      	ldr	r0, [pc, #36]	; (8001b60 <MX_I2C2_Init+0x74>)
 8001b3c:	f009 f997 	bl	800ae6e <HAL_I2CEx_ConfigAnalogFilter>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001b46:	f000 f9eb 	bl	8001f20 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4804      	ldr	r0, [pc, #16]	; (8001b60 <MX_I2C2_Init+0x74>)
 8001b4e:	f009 f9ca 	bl	800aee6 <HAL_I2CEx_ConfigDigitalFilter>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001b58:	f000 f9e2 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20005fa4 	.word	0x20005fa4
 8001b64:	40005800 	.word	0x40005800
 8001b68:	000186a0 	.word	0x000186a0

08001b6c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <MX_I2C3_Init+0x74>)
 8001b72:	4a1c      	ldr	r2, [pc, #112]	; (8001be4 <MX_I2C3_Init+0x78>)
 8001b74:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001b76:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <MX_I2C3_Init+0x74>)
 8001b78:	4a1b      	ldr	r2, [pc, #108]	; (8001be8 <MX_I2C3_Init+0x7c>)
 8001b7a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b7c:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <MX_I2C3_Init+0x74>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001b82:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <MX_I2C3_Init+0x74>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b88:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <MX_I2C3_Init+0x74>)
 8001b8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b8e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b90:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <MX_I2C3_Init+0x74>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001b96:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <MX_I2C3_Init+0x74>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b9c:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <MX_I2C3_Init+0x74>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <MX_I2C3_Init+0x74>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001ba8:	480d      	ldr	r0, [pc, #52]	; (8001be0 <MX_I2C3_Init+0x74>)
 8001baa:	f008 f96b 	bl	8009e84 <HAL_I2C_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001bb4:	f000 f9b4 	bl	8001f20 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4809      	ldr	r0, [pc, #36]	; (8001be0 <MX_I2C3_Init+0x74>)
 8001bbc:	f009 f957 	bl	800ae6e <HAL_I2CEx_ConfigAnalogFilter>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001bc6:	f000 f9ab 	bl	8001f20 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4804      	ldr	r0, [pc, #16]	; (8001be0 <MX_I2C3_Init+0x74>)
 8001bce:	f009 f98a 	bl	800aee6 <HAL_I2CEx_ConfigDigitalFilter>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001bd8:	f000 f9a2 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20005f50 	.word	0x20005f50
 8001be4:	40005c00 	.word	0x40005c00
 8001be8:	000186a0 	.word	0x000186a0

08001bec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08c      	sub	sp, #48	; 0x30
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a42      	ldr	r2, [pc, #264]	; (8001d14 <HAL_I2C_MspInit+0x128>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d12d      	bne.n	8001c6a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61bb      	str	r3, [r7, #24]
 8001c12:	4b41      	ldr	r3, [pc, #260]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a40      	ldr	r2, [pc, #256]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b3e      	ldr	r3, [pc, #248]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	61bb      	str	r3, [r7, #24]
 8001c28:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c30:	2312      	movs	r3, #18
 8001c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c34:	2301      	movs	r3, #1
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c3c:	2304      	movs	r3, #4
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	4619      	mov	r1, r3
 8001c46:	4835      	ldr	r0, [pc, #212]	; (8001d1c <HAL_I2C_MspInit+0x130>)
 8001c48:	f007 ff26 	bl	8009a98 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	4b31      	ldr	r3, [pc, #196]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	4a30      	ldr	r2, [pc, #192]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001c56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5c:	4b2e      	ldr	r3, [pc, #184]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001c68:	e050      	b.n	8001d0c <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a2c      	ldr	r2, [pc, #176]	; (8001d20 <HAL_I2C_MspInit+0x134>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d14b      	bne.n	8001d0c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c74:	2300      	movs	r3, #0
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	4b27      	ldr	r3, [pc, #156]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	4a26      	ldr	r2, [pc, #152]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001c7e:	f043 0304 	orr.w	r3, r3, #4
 8001c82:	6313      	str	r3, [r2, #48]	; 0x30
 8001c84:	4b24      	ldr	r3, [pc, #144]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	4b20      	ldr	r3, [pc, #128]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c98:	4a1f      	ldr	r2, [pc, #124]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca0:	4b1d      	ldr	r3, [pc, #116]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cb2:	2312      	movs	r3, #18
 8001cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc2:	f107 031c 	add.w	r3, r7, #28
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4816      	ldr	r0, [pc, #88]	; (8001d24 <HAL_I2C_MspInit+0x138>)
 8001cca:	f007 fee5 	bl	8009a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cd4:	2312      	movs	r3, #18
 8001cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce4:	f107 031c 	add.w	r3, r7, #28
 8001ce8:	4619      	mov	r1, r3
 8001cea:	480f      	ldr	r0, [pc, #60]	; (8001d28 <HAL_I2C_MspInit+0x13c>)
 8001cec:	f007 fed4 	bl	8009a98 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001cfa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
}
 8001d0c:	bf00      	nop
 8001d0e:	3730      	adds	r7, #48	; 0x30
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40005800 	.word	0x40005800
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40020400 	.word	0x40020400
 8001d20:	40005c00 	.word	0x40005c00
 8001d24:	40020800 	.word	0x40020800
 8001d28:	40020000 	.word	0x40020000

08001d2c <main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main(void){
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
	MRT_STM_Init();
 8001d30:	f000 f88e 	bl	8001e50 <MRT_STM_Init>
	println("\r\n\r\nSTM Init...OK");
 8001d34:	480c      	ldr	r0, [pc, #48]	; (8001d68 <main+0x3c>)
 8001d36:	f7ff f9c9 	bl	80010cc <println>

	MRT_Init();
 8001d3a:	f7ff fa65 	bl	8001208 <MRT_Init>

	println("\r\n\r\n/****Starting FC****/\r\n\r\n");
 8001d3e:	480b      	ldr	r0, [pc, #44]	; (8001d6c <main+0x40>)
 8001d40:	f7ff f9c4 	bl	80010cc <println>
	HAL_IWDG_Refresh(&hiwdg);
	buzz_startup_success();
 8001d44:	f7ff fa48 	bl	80011d8 <buzz_startup_success>

	MRT_waitForLaunch();
 8001d48:	f000 f8a4 	bl	8001e94 <MRT_waitForLaunch>
	//if (DEBUG) TESTING_LOOP(); //TODO remove

	//TODO I2C SENSORS (lsm and lps) SOMETIMES DON'T WANT TO WORK ANYMORE -> NEED TO RESET THE POWER (Enter quick standByMode?)

	//Initialize the os
	MX_FREERTOS_Init();
 8001d4c:	f7ff fc88 	bl	8001660 <MX_FREERTOS_Init>

	//Starting the os
	println("\r\n/****Starting the OS****/\r\n");
 8001d50:	4807      	ldr	r0, [pc, #28]	; (8001d70 <main+0x44>)
 8001d52:	f7ff f9bb 	bl	80010cc <println>
	osKernelStart();
 8001d56:	f013 ffa1 	bl	8015c9c <osKernelStart>

	println("SOMETHING WENT HORRIBLY WRONG, WAITING FOR WATCH DOG RESET");
 8001d5a:	4806      	ldr	r0, [pc, #24]	; (8001d74 <main+0x48>)
 8001d5c:	f7ff f9b6 	bl	80010cc <println>
	HAL_IWDG_Refresh(&hiwdg);
	MRT_Deinit();
 8001d60:	f7ff fa72 	bl	8001248 <MRT_Deinit>
	while (1){}
 8001d64:	e7fe      	b.n	8001d64 <main+0x38>
 8001d66:	bf00      	nop
 8001d68:	080201bc 	.word	0x080201bc
 8001d6c:	080201d0 	.word	0x080201d0
 8001d70:	080201f0 	.word	0x080201f0
 8001d74:	08020210 	.word	0x08020210

08001d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b094      	sub	sp, #80	; 0x50
 8001d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d7e:	f107 0320 	add.w	r3, r7, #32
 8001d82:	2230      	movs	r2, #48	; 0x30
 8001d84:	2100      	movs	r1, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f018 fa04 	bl	801a194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d8c:	f107 030c 	add.w	r3, r7, #12
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <SystemClock_Config+0xd0>)
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	4a28      	ldr	r2, [pc, #160]	; (8001e48 <SystemClock_Config+0xd0>)
 8001da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001daa:	6413      	str	r3, [r2, #64]	; 0x40
 8001dac:	4b26      	ldr	r3, [pc, #152]	; (8001e48 <SystemClock_Config+0xd0>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001db8:	2300      	movs	r3, #0
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <SystemClock_Config+0xd4>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001dc4:	4a21      	ldr	r2, [pc, #132]	; (8001e4c <SystemClock_Config+0xd4>)
 8001dc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	4b1f      	ldr	r3, [pc, #124]	; (8001e4c <SystemClock_Config+0xd4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dd4:	607b      	str	r3, [r7, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001dd8:	2309      	movs	r3, #9
 8001dda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ddc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001de2:	2301      	movs	r3, #1
 8001de4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001de6:	2302      	movs	r3, #2
 8001de8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001df0:	2308      	movs	r3, #8
 8001df2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001df4:	2348      	movs	r3, #72	; 0x48
 8001df6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e00:	f107 0320 	add.w	r3, r7, #32
 8001e04:	4618      	mov	r0, r3
 8001e06:	f00a fa6f 	bl	800c2e8 <HAL_RCC_OscConfig>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001e10:	f000 f886 	bl	8001f20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e14:	230f      	movs	r3, #15
 8001e16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e2a:	f107 030c 	add.w	r3, r7, #12
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4618      	mov	r0, r3
 8001e32:	f00a fcd1 	bl	800c7d8 <HAL_RCC_ClockConfig>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001e3c:	f000 f870 	bl	8001f20 <Error_Handler>
  }
}
 8001e40:	bf00      	nop
 8001e42:	3750      	adds	r7, #80	; 0x50
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40007000 	.word	0x40007000

08001e50 <MRT_STM_Init>:

/* USER CODE BEGIN 4 */

void MRT_STM_Init(void){
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
	HAL_Init();
 8001e54:	f007 fa34 	bl	80092c0 <HAL_Init>
	SystemClock_Config();
 8001e58:	f7ff ff8e 	bl	8001d78 <SystemClock_Config>

	MX_GPIO_Init();
 8001e5c:	f7ff fca4 	bl	80017a8 <MX_GPIO_Init>
	MX_ADC1_Init();
 8001e60:	f7ff fb68 	bl	8001534 <MX_ADC1_Init>
	MX_I2C2_Init();
 8001e64:	f7ff fe42 	bl	8001aec <MX_I2C2_Init>
	MX_I2C3_Init();
 8001e68:	f7ff fe80 	bl	8001b6c <MX_I2C3_Init>
	MX_SPI2_Init();
 8001e6c:	f000 faa4 	bl	80023b8 <MX_SPI2_Init>
	MX_SPI4_Init();
 8001e70:	f000 fad8 	bl	8002424 <MX_SPI4_Init>
	MX_SPI5_Init();
 8001e74:	f000 fb0c 	bl	8002490 <MX_SPI5_Init>
	MX_TIM2_Init();
 8001e78:	f000 fcd6 	bl	8002828 <MX_TIM2_Init>
	MX_UART8_Init();
 8001e7c:	f000 fda2 	bl	80029c4 <MX_UART8_Init>
	MX_USART3_UART_Init();
 8001e80:	f000 fdca 	bl	8002a18 <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 8001e84:	f000 fdf2 	bl	8002a6c <MX_USART6_UART_Init>
	MX_RTC_Init();
 8001e88:	f000 f850 	bl	8001f2c <MX_RTC_Init>
	//MX_IWDG_Init(); TODO ADDED IN MRT_Init()
	MX_FATFS_Init();
 8001e8c:	f00f fb26 	bl	80114dc <MX_FATFS_Init>
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <MRT_waitForLaunch>:

void MRT_waitForLaunch(void){
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0

	println("Waiting for launch command from ground station\r\n");
 8001e98:	4813      	ldr	r0, [pc, #76]	; (8001ee8 <MRT_waitForLaunch+0x54>)
 8001e9a:	f7ff f917 	bl	80010cc <println>

	char buffer[RADIO_BUFFER_SIZE];

	//Poll propulsion until launch command sent
	while((XTEND_ || SRADIO_) && ejection_state_flag == 0 && wu_flag == 0){
 8001e9e:	bf00      	nop
		HAL_Delay(1000/PRE_APOGEE_SEND_FREQ);
	}


	//Send acknowledgement
	MRT_radio_tx((char*) "LAUNCH COMMAND RECEIVED"); //TODO CHECK AT WHAT JASPER DID
 8001ea0:	4812      	ldr	r0, [pc, #72]	; (8001eec <MRT_waitForLaunch+0x58>)
 8001ea2:	f007 f9cd 	bl	8009240 <MRT_radio_tx>

	//Update ejection state and save it
	if (ejection_state_flag < 1){
 8001ea6:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <MRT_waitForLaunch+0x5c>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d11a      	bne.n	8001ee4 <MRT_waitForLaunch+0x50>
		ejection_state_flag = 1;
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <MRT_waitForLaunch+0x5c>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]

		flash_flags_buffer[EJECTION_STATE_FLAG_OFFSET] = ejection_state_flag;
 8001eb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <MRT_waitForLaunch+0x5c>)
 8001eb6:	781a      	ldrb	r2, [r3, #0]
 8001eb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <MRT_waitForLaunch+0x60>)
 8001eba:	711a      	strb	r2, [r3, #4]
		if (ejection_state_flag == 2){
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <MRT_waitForLaunch+0x5c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d106      	bne.n	8001ed2 <MRT_waitForLaunch+0x3e>
			apogee_flag = 1;
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <MRT_waitForLaunch+0x64>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	701a      	strb	r2, [r3, #0]
			flash_flags_buffer[APOGEE_FLAG_OFFSET] = apogee_flag;
 8001eca:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <MRT_waitForLaunch+0x64>)
 8001ecc:	781a      	ldrb	r2, [r3, #0]
 8001ece:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <MRT_waitForLaunch+0x60>)
 8001ed0:	70da      	strb	r2, [r3, #3]
		}
		W25qxx_EraseSector(1);
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	f001 fcb4 	bl	8003840 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8001ed8:	2305      	movs	r3, #5
 8001eda:	2200      	movs	r2, #0
 8001edc:	2101      	movs	r1, #1
 8001ede:	4805      	ldr	r0, [pc, #20]	; (8001ef4 <MRT_waitForLaunch+0x60>)
 8001ee0:	f001 fdf8 	bl	8003ad4 <W25qxx_WriteSector>
	}
}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	0802024c 	.word	0x0802024c
 8001eec:	08020280 	.word	0x08020280
 8001ef0:	20000480 	.word	0x20000480
 8001ef4:	20006284 	.word	0x20006284
 8001ef8:	2000047f 	.word	0x2000047f

08001efc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a04      	ldr	r2, [pc, #16]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d101      	bne.n	8001f12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f0e:	f007 f9f9 	bl	8009304 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40001000 	.word	0x40001000

08001f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f24:	b672      	cpsid	i
}
 8001f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f28:	e7fe      	b.n	8001f28 <Error_Handler+0x8>
	...

08001f2c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b090      	sub	sp, #64	; 0x40
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001f32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
 8001f3c:	609a      	str	r2, [r3, #8]
 8001f3e:	60da      	str	r2, [r3, #12]
 8001f40:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001f42:	2300      	movs	r3, #0
 8001f44:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001f46:	463b      	mov	r3, r7
 8001f48:	2228      	movs	r2, #40	; 0x28
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f018 f921 	bl	801a194 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f52:	4b3a      	ldr	r3, [pc, #232]	; (800203c <MX_RTC_Init+0x110>)
 8001f54:	4a3a      	ldr	r2, [pc, #232]	; (8002040 <MX_RTC_Init+0x114>)
 8001f56:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f58:	4b38      	ldr	r3, [pc, #224]	; (800203c <MX_RTC_Init+0x110>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001f5e:	4b37      	ldr	r3, [pc, #220]	; (800203c <MX_RTC_Init+0x110>)
 8001f60:	227f      	movs	r2, #127	; 0x7f
 8001f62:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001f64:	4b35      	ldr	r3, [pc, #212]	; (800203c <MX_RTC_Init+0x110>)
 8001f66:	22ff      	movs	r2, #255	; 0xff
 8001f68:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f6a:	4b34      	ldr	r3, [pc, #208]	; (800203c <MX_RTC_Init+0x110>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f70:	4b32      	ldr	r3, [pc, #200]	; (800203c <MX_RTC_Init+0x110>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f76:	4b31      	ldr	r3, [pc, #196]	; (800203c <MX_RTC_Init+0x110>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f7c:	482f      	ldr	r0, [pc, #188]	; (800203c <MX_RTC_Init+0x110>)
 8001f7e:	f00b f815 	bl	800cfac <HAL_RTC_Init>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001f88:	f7ff ffca 	bl	8001f20 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001fa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001faa:	2201      	movs	r2, #1
 8001fac:	4619      	mov	r1, r3
 8001fae:	4823      	ldr	r0, [pc, #140]	; (800203c <MX_RTC_Init+0x110>)
 8001fb0:	f00b f88d 	bl	800d0ce <HAL_RTC_SetTime>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001fba:	f7ff ffb1 	bl	8001f20 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001fd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fda:	2201      	movs	r2, #1
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4817      	ldr	r0, [pc, #92]	; (800203c <MX_RTC_Init+0x110>)
 8001fe0:	f00b f932 	bl	800d248 <HAL_RTC_SetDate>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001fea:	f7ff ff99 	bl	8001f20 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800200a:	2300      	movs	r3, #0
 800200c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002012:	2301      	movs	r3, #1
 8002014:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002018:	f44f 7380 	mov.w	r3, #256	; 0x100
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800201e:	463b      	mov	r3, r7
 8002020:	2201      	movs	r2, #1
 8002022:	4619      	mov	r1, r3
 8002024:	4805      	ldr	r0, [pc, #20]	; (800203c <MX_RTC_Init+0x110>)
 8002026:	f00b f9b7 	bl	800d398 <HAL_RTC_SetAlarm_IT>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002030:	f7ff ff76 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002034:	bf00      	nop
 8002036:	3740      	adds	r7, #64	; 0x40
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20005ff8 	.word	0x20005ff8
 8002040:	40002800 	.word	0x40002800

08002044 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08e      	sub	sp, #56	; 0x38
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800204c:	f107 0308 	add.w	r3, r7, #8
 8002050:	2230      	movs	r2, #48	; 0x30
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f018 f89d 	bl	801a194 <memset>
  if(rtcHandle->Instance==RTC)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a10      	ldr	r2, [pc, #64]	; (80020a0 <HAL_RTC_MspInit+0x5c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d119      	bne.n	8002098 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002064:	2320      	movs	r3, #32
 8002066:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002068:	f44f 7300 	mov.w	r3, #512	; 0x200
 800206c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800206e:	f107 0308 	add.w	r3, r7, #8
 8002072:	4618      	mov	r0, r3
 8002074:	f00a fddc 	bl	800cc30 <HAL_RCCEx_PeriphCLKConfig>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800207e:	f7ff ff4f 	bl	8001f20 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HAL_RTC_MspInit+0x60>)
 8002084:	2201      	movs	r2, #1
 8002086:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8002088:	2200      	movs	r2, #0
 800208a:	2105      	movs	r1, #5
 800208c:	2029      	movs	r0, #41	; 0x29
 800208e:	f007 fccb 	bl	8009a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002092:	2029      	movs	r0, #41	; 0x29
 8002094:	f007 fce4 	bl	8009a60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002098:	bf00      	nop
 800209a:	3738      	adds	r7, #56	; 0x38
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40002800 	.word	0x40002800
 80020a4:	42470e3c 	.word	0x42470e3c

080020a8 <MRT_rtc_Init>:


//**************************************************//
//FUNCTIONS

void MRT_rtc_Init(void){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
	println("\r\nMRT RTC Init");
 80020ac:	4816      	ldr	r0, [pc, #88]	; (8002108 <MRT_rtc_Init+0x60>)
 80020ae:	f7ff f80d 	bl	80010cc <println>

	print("\tSetting RTC to previous time...");
 80020b2:	4816      	ldr	r0, [pc, #88]	; (800210c <MRT_rtc_Init+0x64>)
 80020b4:	f7ff f828 	bl	8001108 <print>
	MRT_set_rtc(prev_hours,prev_min,prev_sec);
 80020b8:	4b15      	ldr	r3, [pc, #84]	; (8002110 <MRT_rtc_Init+0x68>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	4a15      	ldr	r2, [pc, #84]	; (8002114 <MRT_rtc_Init+0x6c>)
 80020be:	7811      	ldrb	r1, [r2, #0]
 80020c0:	4a15      	ldr	r2, [pc, #84]	; (8002118 <MRT_rtc_Init+0x70>)
 80020c2:	7812      	ldrb	r2, [r2, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 f8eb 	bl	80022a0 <MRT_set_rtc>
	println("OK");
 80020ca:	4814      	ldr	r0, [pc, #80]	; (800211c <MRT_rtc_Init+0x74>)
 80020cc:	f7fe fffe 	bl	80010cc <println>

	#if ALARM_A_ACTIVE
		print("\tSetting alarmA...");
 80020d0:	4813      	ldr	r0, [pc, #76]	; (8002120 <MRT_rtc_Init+0x78>)
 80020d2:	f7ff f819 	bl	8001108 <print>
		HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 80020d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80020da:	f007 f933 	bl	8009344 <HAL_Delay>
		if (wu_flag == 0){
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <MRT_rtc_Init+0x7c>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d105      	bne.n	80020f2 <MRT_rtc_Init+0x4a>
			MRT_set_alarmA(PRE_WHEN_SLEEP_TIME_HOURS, PRE_WHEN_SLEEP_TIME_MIN, PRE_WHEN_SLEEP_TIME_SEC);
 80020e6:	2200      	movs	r2, #0
 80020e8:	211e      	movs	r1, #30
 80020ea:	2004      	movs	r0, #4
 80020ec:	f000 f91e 	bl	800232c <MRT_set_alarmA>
 80020f0:	e004      	b.n	80020fc <MRT_rtc_Init+0x54>
		}
		else{
			MRT_set_alarmA(POST_WHEN_SLEEP_TIME_HOURS, POST_WHEN_SLEEP_TIME_MIN, POST_WHEN_SLEEP_TIME_SEC);
 80020f2:	2200      	movs	r2, #0
 80020f4:	2100      	movs	r1, #0
 80020f6:	200e      	movs	r0, #14
 80020f8:	f000 f918 	bl	800232c <MRT_set_alarmA>
		}
		println("OK");
 80020fc:	4807      	ldr	r0, [pc, #28]	; (800211c <MRT_rtc_Init+0x74>)
 80020fe:	f7fe ffe5 	bl	80010cc <println>
	#endif
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	08020298 	.word	0x08020298
 800210c:	080202a8 	.word	0x080202a8
 8002110:	20000481 	.word	0x20000481
 8002114:	20000482 	.word	0x20000482
 8002118:	20000483 	.word	0x20000483
 800211c:	080202cc 	.word	0x080202cc
 8002120:	080202d0 	.word	0x080202d0
 8002124:	2000047d 	.word	0x2000047d

08002128 <MRT_check_for_wake_up>:


void MRT_check_for_wake_up(void){
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 800212c:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <MRT_check_for_wake_up+0x40>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b02      	cmp	r3, #2
 8002136:	d112      	bne.n	800215e <MRT_check_for_wake_up+0x36>
	{

		wu_flag = 1;
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <MRT_check_for_wake_up+0x44>)
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 800213e:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <MRT_check_for_wake_up+0x40>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a09      	ldr	r2, [pc, #36]	; (8002168 <MRT_check_for_wake_up+0x40>)
 8002144:	f043 0308 	orr.w	r3, r3, #8
 8002148:	6013      	str	r3, [r2, #0]

		println("Wakeup from STANDBY MODE");
 800214a:	4809      	ldr	r0, [pc, #36]	; (8002170 <MRT_check_for_wake_up+0x48>)
 800214c:	f7fe ffbe 	bl	80010cc <println>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8002150:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002154:	f00a f89c 	bl	800c290 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc); //TODO hrtc from rtc.h (should we pass it as an argument instead?)
 8002158:	4806      	ldr	r0, [pc, #24]	; (8002174 <MRT_check_for_wake_up+0x4c>)
 800215a:	f00b fbd7 	bl	800d90c <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_clear_alarms_flags();
 800215e:	f000 f80b 	bl	8002178 <MRT_clear_alarms_flags>
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40007000 	.word	0x40007000
 800216c:	2000047d 	.word	0x2000047d
 8002170:	080202e4 	.word	0x080202e4
 8002174:	20005ff8 	.word	0x20005ff8

08002178 <MRT_clear_alarms_flags>:



void MRT_clear_alarms_flags(void){
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	print("Clearing the flags\r\n");
 800217c:	482a      	ldr	r0, [pc, #168]	; (8002228 <MRT_clear_alarms_flags+0xb0>)
 800217e:	f7fe ffc3 	bl	8001108 <print>

	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002182:	4b2a      	ldr	r3, [pc, #168]	; (800222c <MRT_clear_alarms_flags+0xb4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	22ca      	movs	r2, #202	; 0xca
 8002188:	625a      	str	r2, [r3, #36]	; 0x24
 800218a:	4b28      	ldr	r3, [pc, #160]	; (800222c <MRT_clear_alarms_flags+0xb4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2253      	movs	r2, #83	; 0x53
 8002190:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8002192:	e008      	b.n	80021a6 <MRT_clear_alarms_flags+0x2e>
		//print("Clearing alarm A flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002194:	4b25      	ldr	r3, [pc, #148]	; (800222c <MRT_clear_alarms_flags+0xb4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	b2da      	uxtb	r2, r3
 800219c:	4b23      	ldr	r3, [pc, #140]	; (800222c <MRT_clear_alarms_flags+0xb4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80021a4:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 80021a6:	4b21      	ldr	r3, [pc, #132]	; (800222c <MRT_clear_alarms_flags+0xb4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1ef      	bne.n	8002194 <MRT_clear_alarms_flags+0x1c>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 80021b4:	4b1d      	ldr	r3, [pc, #116]	; (800222c <MRT_clear_alarms_flags+0xb4>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	22ff      	movs	r2, #255	; 0xff
 80021ba:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80021bc:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <MRT_clear_alarms_flags+0xb8>)
 80021be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021c2:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 80021c4:	4b19      	ldr	r3, [pc, #100]	; (800222c <MRT_clear_alarms_flags+0xb4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	22ca      	movs	r2, #202	; 0xca
 80021ca:	625a      	str	r2, [r3, #36]	; 0x24
 80021cc:	4b17      	ldr	r3, [pc, #92]	; (800222c <MRT_clear_alarms_flags+0xb4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2253      	movs	r2, #83	; 0x53
 80021d2:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 80021d4:	e008      	b.n	80021e8 <MRT_clear_alarms_flags+0x70>
		//print("Clearing alarm B flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <MRT_clear_alarms_flags+0xb4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4b13      	ldr	r3, [pc, #76]	; (800222c <MRT_clear_alarms_flags+0xb4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f462 7220 	orn	r2, r2, #640	; 0x280
 80021e6:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 80021e8:	4b10      	ldr	r3, [pc, #64]	; (800222c <MRT_clear_alarms_flags+0xb4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1ef      	bne.n	80021d6 <MRT_clear_alarms_flags+0x5e>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 80021f6:	4b0d      	ldr	r3, [pc, #52]	; (800222c <MRT_clear_alarms_flags+0xb4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	22ff      	movs	r2, #255	; 0xff
 80021fc:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80021fe:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <MRT_clear_alarms_flags+0xb8>)
 8002200:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002204:	615a      	str	r2, [r3, #20]

	/* Clear the WU FLAG */
	//print("Clearing wake up flag\r\n");
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002206:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <MRT_clear_alarms_flags+0xbc>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <MRT_clear_alarms_flags+0xbc>)
 800220c:	f043 0304 	orr.w	r3, r3, #4
 8002210:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//print("Clearing RTC wake up flag\r\n");
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <MRT_clear_alarms_flags+0xb4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	b2da      	uxtb	r2, r3
 800221a:	4b04      	ldr	r3, [pc, #16]	; (800222c <MRT_clear_alarms_flags+0xb4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002222:	60da      	str	r2, [r3, #12]
}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}
 8002228:	08020300 	.word	0x08020300
 800222c:	20005ff8 	.word	0x20005ff8
 8002230:	40013c00 	.word	0x40013c00
 8002234:	40007000 	.word	0x40007000

08002238 <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode(uint32_t seconds){
 8002238:	b580      	push	{r7, lr}
 800223a:	b08c      	sub	sp, #48	; 0x30
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
	print("\r\n/*****StandByMode*****/\r\n");
 8002240:	4813      	ldr	r0, [pc, #76]	; (8002290 <MRT_StandByMode+0x58>)
 8002242:	f7fe ff61 	bl	8001108 <print>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8002246:	f44f 7080 	mov.w	r0, #256	; 0x100
 800224a:	f00a f80f 	bl	800c26c <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_clear_alarms_flags();
 800224e:	f7ff ff93 	bl	8002178 <MRT_clear_alarms_flags>

	//Setup RTC wake up timer
	println("Setting up RTCW");
 8002252:	4810      	ldr	r0, [pc, #64]	; (8002294 <MRT_StandByMode+0x5c>)
 8002254:	f7fe ff3a 	bl	80010cc <println>
	  Error_Handler();
	}
	*/

	char msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds",(int) seconds);
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	f107 030c 	add.w	r3, r7, #12
 800225e:	490e      	ldr	r1, [pc, #56]	; (8002298 <MRT_StandByMode+0x60>)
 8002260:	4618      	mov	r0, r3
 8002262:	f019 fa93 	bl	801b78c <siprintf>
	println(msg);
 8002266:	f107 030c 	add.w	r3, r7, #12
 800226a:	4618      	mov	r0, r3
 800226c:	f7fe ff2e 	bl	80010cc <println>

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8002270:	2204      	movs	r2, #4
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4809      	ldr	r0, [pc, #36]	; (800229c <MRT_StandByMode+0x64>)
 8002276:	f00b fa89 	bl	800d78c <HAL_RTCEx_SetWakeUpTimer_IT>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MRT_StandByMode+0x4c>
	{
	  Error_Handler();
 8002280:	f7ff fe4e 	bl	8001f20 <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 8002284:	f00a f818 	bl	800c2b8 <HAL_PWR_EnterSTANDBYMode>
}
 8002288:	bf00      	nop
 800228a:	3730      	adds	r7, #48	; 0x30
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	08020318 	.word	0x08020318
 8002294:	08020334 	.word	0x08020334
 8002298:	08020344 	.word	0x08020344
 800229c:	20005ff8 	.word	0x20005ff8

080022a0 <MRT_set_rtc>:




void MRT_set_rtc(uint8_t h, uint8_t m, uint8_t s){
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
 80022aa:	460b      	mov	r3, r1
 80022ac:	71bb      	strb	r3, [r7, #6]
 80022ae:	4613      	mov	r3, r2
 80022b0:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  RTC_TimeTypeDef sTime;

	  sTime.Hours = int_to_hex_table[h];
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	4a1a      	ldr	r2, [pc, #104]	; (8002320 <MRT_set_rtc+0x80>)
 80022b6:	5cd3      	ldrb	r3, [r2, r3]
 80022b8:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 80022ba:	79bb      	ldrb	r3, [r7, #6]
 80022bc:	4a18      	ldr	r2, [pc, #96]	; (8002320 <MRT_set_rtc+0x80>)
 80022be:	5cd3      	ldrb	r3, [r2, r3]
 80022c0:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 80022c2:	797b      	ldrb	r3, [r7, #5]
 80022c4:	4a16      	ldr	r2, [pc, #88]	; (8002320 <MRT_set_rtc+0x80>)
 80022c6:	5cd3      	ldrb	r3, [r2, r3]
 80022c8:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80022d2:	f107 030c 	add.w	r3, r7, #12
 80022d6:	2201      	movs	r2, #1
 80022d8:	4619      	mov	r1, r3
 80022da:	4812      	ldr	r0, [pc, #72]	; (8002324 <MRT_set_rtc+0x84>)
 80022dc:	f00a fef7 	bl	800d0ce <HAL_RTC_SetTime>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MRT_set_rtc+0x4a>
	  {
	    Error_Handler();
 80022e6:	f7ff fe1b 	bl	8001f20 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80022ea:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <MRT_set_rtc+0x88>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 80022f0:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <MRT_set_rtc+0x88>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 80022f6:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <MRT_set_rtc+0x88>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 80022fc:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <MRT_set_rtc+0x88>)
 80022fe:	2200      	movs	r2, #0
 8002300:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002302:	2201      	movs	r2, #1
 8002304:	4908      	ldr	r1, [pc, #32]	; (8002328 <MRT_set_rtc+0x88>)
 8002306:	4807      	ldr	r0, [pc, #28]	; (8002324 <MRT_set_rtc+0x84>)
 8002308:	f00a ff9e 	bl	800d248 <HAL_RTC_SetDate>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MRT_set_rtc+0x76>
	  {
	    Error_Handler();
 8002312:	f7ff fe05 	bl	8001f20 <Error_Handler>
	  }
}
 8002316:	bf00      	nop
 8002318:	3720      	adds	r7, #32
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000000 	.word	0x20000000
 8002324:	20005ff8 	.word	0x20005ff8
 8002328:	20000450 	.word	0x20000450

0800232c <MRT_set_alarmA>:



void MRT_set_alarmA(uint8_t h, uint8_t m, uint8_t s){
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	71fb      	strb	r3, [r7, #7]
 8002336:	460b      	mov	r3, r1
 8002338:	71bb      	strb	r3, [r7, #6]
 800233a:	4613      	mov	r3, r2
 800233c:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	4a1a      	ldr	r2, [pc, #104]	; (80023ac <MRT_set_alarmA+0x80>)
 8002342:	5cd2      	ldrb	r2, [r2, r3]
 8002344:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <MRT_set_alarmA+0x84>)
 8002346:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8002348:	79bb      	ldrb	r3, [r7, #6]
 800234a:	4a18      	ldr	r2, [pc, #96]	; (80023ac <MRT_set_alarmA+0x80>)
 800234c:	5cd2      	ldrb	r2, [r2, r3]
 800234e:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <MRT_set_alarmA+0x84>)
 8002350:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 8002352:	797b      	ldrb	r3, [r7, #5]
 8002354:	4a15      	ldr	r2, [pc, #84]	; (80023ac <MRT_set_alarmA+0x80>)
 8002356:	5cd2      	ldrb	r2, [r2, r3]
 8002358:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <MRT_set_alarmA+0x84>)
 800235a:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <MRT_set_alarmA+0x84>)
 800235e:	2200      	movs	r2, #0
 8002360:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002362:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <MRT_set_alarmA+0x84>)
 8002364:	2200      	movs	r2, #0
 8002366:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002368:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <MRT_set_alarmA+0x84>)
 800236a:	2200      	movs	r2, #0
 800236c:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800236e:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <MRT_set_alarmA+0x84>)
 8002370:	2200      	movs	r2, #0
 8002372:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002374:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <MRT_set_alarmA+0x84>)
 8002376:	2200      	movs	r2, #0
 8002378:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800237a:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <MRT_set_alarmA+0x84>)
 800237c:	2200      	movs	r2, #0
 800237e:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <MRT_set_alarmA+0x84>)
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8002388:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <MRT_set_alarmA+0x84>)
 800238a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800238e:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002390:	2201      	movs	r2, #1
 8002392:	4907      	ldr	r1, [pc, #28]	; (80023b0 <MRT_set_alarmA+0x84>)
 8002394:	4807      	ldr	r0, [pc, #28]	; (80023b4 <MRT_set_alarmA+0x88>)
 8002396:	f00a ffff 	bl	800d398 <HAL_RTC_SetAlarm_IT>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MRT_set_alarmA+0x78>
	  {
	    Error_Handler();
 80023a0:	f7ff fdbe 	bl	8001f20 <Error_Handler>
	  }
}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20000000 	.word	0x20000000
 80023b0:	20000454 	.word	0x20000454
 80023b4:	20005ff8 	.word	0x20005ff8

080023b8 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80023bc:	4b17      	ldr	r3, [pc, #92]	; (800241c <MX_SPI2_Init+0x64>)
 80023be:	4a18      	ldr	r2, [pc, #96]	; (8002420 <MX_SPI2_Init+0x68>)
 80023c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80023c2:	4b16      	ldr	r3, [pc, #88]	; (800241c <MX_SPI2_Init+0x64>)
 80023c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <MX_SPI2_Init+0x64>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80023d0:	4b12      	ldr	r3, [pc, #72]	; (800241c <MX_SPI2_Init+0x64>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023d6:	4b11      	ldr	r3, [pc, #68]	; (800241c <MX_SPI2_Init+0x64>)
 80023d8:	2200      	movs	r2, #0
 80023da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023dc:	4b0f      	ldr	r3, [pc, #60]	; (800241c <MX_SPI2_Init+0x64>)
 80023de:	2200      	movs	r2, #0
 80023e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <MX_SPI2_Init+0x64>)
 80023e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023ea:	4b0c      	ldr	r3, [pc, #48]	; (800241c <MX_SPI2_Init+0x64>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023f0:	4b0a      	ldr	r3, [pc, #40]	; (800241c <MX_SPI2_Init+0x64>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <MX_SPI2_Init+0x64>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023fc:	4b07      	ldr	r3, [pc, #28]	; (800241c <MX_SPI2_Init+0x64>)
 80023fe:	2200      	movs	r2, #0
 8002400:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <MX_SPI2_Init+0x64>)
 8002404:	220a      	movs	r2, #10
 8002406:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002408:	4804      	ldr	r0, [pc, #16]	; (800241c <MX_SPI2_Init+0x64>)
 800240a:	f00b fae1 	bl	800d9d0 <HAL_SPI_Init>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002414:	f7ff fd84 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20006018 	.word	0x20006018
 8002420:	40003800 	.word	0x40003800

08002424 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002428:	4b17      	ldr	r3, [pc, #92]	; (8002488 <MX_SPI4_Init+0x64>)
 800242a:	4a18      	ldr	r2, [pc, #96]	; (800248c <MX_SPI4_Init+0x68>)
 800242c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800242e:	4b16      	ldr	r3, [pc, #88]	; (8002488 <MX_SPI4_Init+0x64>)
 8002430:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002434:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002436:	4b14      	ldr	r3, [pc, #80]	; (8002488 <MX_SPI4_Init+0x64>)
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800243c:	4b12      	ldr	r3, [pc, #72]	; (8002488 <MX_SPI4_Init+0x64>)
 800243e:	2200      	movs	r2, #0
 8002440:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002442:	4b11      	ldr	r3, [pc, #68]	; (8002488 <MX_SPI4_Init+0x64>)
 8002444:	2200      	movs	r2, #0
 8002446:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002448:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <MX_SPI4_Init+0x64>)
 800244a:	2200      	movs	r2, #0
 800244c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800244e:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <MX_SPI4_Init+0x64>)
 8002450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002454:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002456:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <MX_SPI4_Init+0x64>)
 8002458:	2200      	movs	r2, #0
 800245a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800245c:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <MX_SPI4_Init+0x64>)
 800245e:	2200      	movs	r2, #0
 8002460:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002462:	4b09      	ldr	r3, [pc, #36]	; (8002488 <MX_SPI4_Init+0x64>)
 8002464:	2200      	movs	r2, #0
 8002466:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002468:	4b07      	ldr	r3, [pc, #28]	; (8002488 <MX_SPI4_Init+0x64>)
 800246a:	2200      	movs	r2, #0
 800246c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <MX_SPI4_Init+0x64>)
 8002470:	220a      	movs	r2, #10
 8002472:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002474:	4804      	ldr	r0, [pc, #16]	; (8002488 <MX_SPI4_Init+0x64>)
 8002476:	f00b faab 	bl	800d9d0 <HAL_SPI_Init>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8002480:	f7ff fd4e 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002484:	bf00      	nop
 8002486:	bd80      	pop	{r7, pc}
 8002488:	200060c8 	.word	0x200060c8
 800248c:	40013400 	.word	0x40013400

08002490 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8002494:	4b17      	ldr	r3, [pc, #92]	; (80024f4 <MX_SPI5_Init+0x64>)
 8002496:	4a18      	ldr	r2, [pc, #96]	; (80024f8 <MX_SPI5_Init+0x68>)
 8002498:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800249a:	4b16      	ldr	r3, [pc, #88]	; (80024f4 <MX_SPI5_Init+0x64>)
 800249c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024a0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80024a2:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <MX_SPI5_Init+0x64>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80024a8:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <MX_SPI5_Init+0x64>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024ae:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <MX_SPI5_Init+0x64>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024b4:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <MX_SPI5_Init+0x64>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <MX_SPI5_Init+0x64>)
 80024bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024c0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024c2:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <MX_SPI5_Init+0x64>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024c8:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <MX_SPI5_Init+0x64>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <MX_SPI5_Init+0x64>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024d4:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <MX_SPI5_Init+0x64>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80024da:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <MX_SPI5_Init+0x64>)
 80024dc:	220a      	movs	r2, #10
 80024de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80024e0:	4804      	ldr	r0, [pc, #16]	; (80024f4 <MX_SPI5_Init+0x64>)
 80024e2:	f00b fa75 	bl	800d9d0 <HAL_SPI_Init>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80024ec:	f7ff fd18 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20006070 	.word	0x20006070
 80024f8:	40015000 	.word	0x40015000

080024fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08e      	sub	sp, #56	; 0x38
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a4c      	ldr	r2, [pc, #304]	; (800264c <HAL_SPI_MspInit+0x150>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d12d      	bne.n	800257a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	623b      	str	r3, [r7, #32]
 8002522:	4b4b      	ldr	r3, [pc, #300]	; (8002650 <HAL_SPI_MspInit+0x154>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	4a4a      	ldr	r2, [pc, #296]	; (8002650 <HAL_SPI_MspInit+0x154>)
 8002528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800252c:	6413      	str	r3, [r2, #64]	; 0x40
 800252e:	4b48      	ldr	r3, [pc, #288]	; (8002650 <HAL_SPI_MspInit+0x154>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002536:	623b      	str	r3, [r7, #32]
 8002538:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
 800253e:	4b44      	ldr	r3, [pc, #272]	; (8002650 <HAL_SPI_MspInit+0x154>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	4a43      	ldr	r2, [pc, #268]	; (8002650 <HAL_SPI_MspInit+0x154>)
 8002544:	f043 0302 	orr.w	r3, r3, #2
 8002548:	6313      	str	r3, [r2, #48]	; 0x30
 800254a:	4b41      	ldr	r3, [pc, #260]	; (8002650 <HAL_SPI_MspInit+0x154>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	61fb      	str	r3, [r7, #28]
 8002554:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002556:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255c:	2302      	movs	r3, #2
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002564:	2303      	movs	r3, #3
 8002566:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002568:	2305      	movs	r3, #5
 800256a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002570:	4619      	mov	r1, r3
 8002572:	4838      	ldr	r0, [pc, #224]	; (8002654 <HAL_SPI_MspInit+0x158>)
 8002574:	f007 fa90 	bl	8009a98 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8002578:	e064      	b.n	8002644 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI4)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a36      	ldr	r2, [pc, #216]	; (8002658 <HAL_SPI_MspInit+0x15c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d12d      	bne.n	80025e0 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002584:	2300      	movs	r3, #0
 8002586:	61bb      	str	r3, [r7, #24]
 8002588:	4b31      	ldr	r3, [pc, #196]	; (8002650 <HAL_SPI_MspInit+0x154>)
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	4a30      	ldr	r2, [pc, #192]	; (8002650 <HAL_SPI_MspInit+0x154>)
 800258e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002592:	6453      	str	r3, [r2, #68]	; 0x44
 8002594:	4b2e      	ldr	r3, [pc, #184]	; (8002650 <HAL_SPI_MspInit+0x154>)
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002598:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800259c:	61bb      	str	r3, [r7, #24]
 800259e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	4b2a      	ldr	r3, [pc, #168]	; (8002650 <HAL_SPI_MspInit+0x154>)
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	4a29      	ldr	r2, [pc, #164]	; (8002650 <HAL_SPI_MspInit+0x154>)
 80025aa:	f043 0310 	orr.w	r3, r3, #16
 80025ae:	6313      	str	r3, [r2, #48]	; 0x30
 80025b0:	4b27      	ldr	r3, [pc, #156]	; (8002650 <HAL_SPI_MspInit+0x154>)
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	f003 0310 	and.w	r3, r3, #16
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80025bc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c2:	2302      	movs	r3, #2
 80025c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ca:	2303      	movs	r3, #3
 80025cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80025ce:	2305      	movs	r3, #5
 80025d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d6:	4619      	mov	r1, r3
 80025d8:	4820      	ldr	r0, [pc, #128]	; (800265c <HAL_SPI_MspInit+0x160>)
 80025da:	f007 fa5d 	bl	8009a98 <HAL_GPIO_Init>
}
 80025de:	e031      	b.n	8002644 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI5)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a1e      	ldr	r2, [pc, #120]	; (8002660 <HAL_SPI_MspInit+0x164>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d12c      	bne.n	8002644 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	4b18      	ldr	r3, [pc, #96]	; (8002650 <HAL_SPI_MspInit+0x154>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	4a17      	ldr	r2, [pc, #92]	; (8002650 <HAL_SPI_MspInit+0x154>)
 80025f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025f8:	6453      	str	r3, [r2, #68]	; 0x44
 80025fa:	4b15      	ldr	r3, [pc, #84]	; (8002650 <HAL_SPI_MspInit+0x154>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	4b11      	ldr	r3, [pc, #68]	; (8002650 <HAL_SPI_MspInit+0x154>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	4a10      	ldr	r2, [pc, #64]	; (8002650 <HAL_SPI_MspInit+0x154>)
 8002610:	f043 0320 	orr.w	r3, r3, #32
 8002614:	6313      	str	r3, [r2, #48]	; 0x30
 8002616:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <HAL_SPI_MspInit+0x154>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f003 0320 	and.w	r3, r3, #32
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002622:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002628:	2302      	movs	r3, #2
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800262c:	2301      	movs	r3, #1
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002630:	2303      	movs	r3, #3
 8002632:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002634:	2305      	movs	r3, #5
 8002636:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800263c:	4619      	mov	r1, r3
 800263e:	4809      	ldr	r0, [pc, #36]	; (8002664 <HAL_SPI_MspInit+0x168>)
 8002640:	f007 fa2a 	bl	8009a98 <HAL_GPIO_Init>
}
 8002644:	bf00      	nop
 8002646:	3738      	adds	r7, #56	; 0x38
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40003800 	.word	0x40003800
 8002650:	40023800 	.word	0x40023800
 8002654:	40020400 	.word	0x40020400
 8002658:	40013400 	.word	0x40013400
 800265c:	40021000 	.word	0x40021000
 8002660:	40015000 	.word	0x40015000
 8002664:	40021400 	.word	0x40021400

08002668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	4b12      	ldr	r3, [pc, #72]	; (80026bc <HAL_MspInit+0x54>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	4a11      	ldr	r2, [pc, #68]	; (80026bc <HAL_MspInit+0x54>)
 8002678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800267c:	6453      	str	r3, [r2, #68]	; 0x44
 800267e:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <HAL_MspInit+0x54>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002686:	607b      	str	r3, [r7, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	603b      	str	r3, [r7, #0]
 800268e:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_MspInit+0x54>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <HAL_MspInit+0x54>)
 8002694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002698:	6413      	str	r3, [r2, #64]	; 0x40
 800269a:	4b08      	ldr	r3, [pc, #32]	; (80026bc <HAL_MspInit+0x54>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a2:	603b      	str	r3, [r7, #0]
 80026a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026a6:	2200      	movs	r2, #0
 80026a8:	210f      	movs	r1, #15
 80026aa:	f06f 0001 	mvn.w	r0, #1
 80026ae:	f007 f9bb 	bl	8009a28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800

080026c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08c      	sub	sp, #48	; 0x30
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80026d0:	2200      	movs	r2, #0
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	2036      	movs	r0, #54	; 0x36
 80026d6:	f007 f9a7 	bl	8009a28 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026da:	2036      	movs	r0, #54	; 0x36
 80026dc:	f007 f9c0 	bl	8009a60 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80026e0:	2300      	movs	r3, #0
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <HAL_InitTick+0xa4>)
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	4a1e      	ldr	r2, [pc, #120]	; (8002764 <HAL_InitTick+0xa4>)
 80026ea:	f043 0310 	orr.w	r3, r3, #16
 80026ee:	6413      	str	r3, [r2, #64]	; 0x40
 80026f0:	4b1c      	ldr	r3, [pc, #112]	; (8002764 <HAL_InitTick+0xa4>)
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026fc:	f107 0210 	add.w	r2, r7, #16
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	4611      	mov	r1, r2
 8002706:	4618      	mov	r0, r3
 8002708:	f00a fa60 	bl	800cbcc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800270c:	f00a fa36 	bl	800cb7c <HAL_RCC_GetPCLK1Freq>
 8002710:	4603      	mov	r3, r0
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002718:	4a13      	ldr	r2, [pc, #76]	; (8002768 <HAL_InitTick+0xa8>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	0c9b      	lsrs	r3, r3, #18
 8002720:	3b01      	subs	r3, #1
 8002722:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002724:	4b11      	ldr	r3, [pc, #68]	; (800276c <HAL_InitTick+0xac>)
 8002726:	4a12      	ldr	r2, [pc, #72]	; (8002770 <HAL_InitTick+0xb0>)
 8002728:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <HAL_InitTick+0xac>)
 800272c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002730:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002732:	4a0e      	ldr	r2, [pc, #56]	; (800276c <HAL_InitTick+0xac>)
 8002734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002736:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <HAL_InitTick+0xac>)
 800273a:	2200      	movs	r2, #0
 800273c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_InitTick+0xac>)
 8002740:	2200      	movs	r2, #0
 8002742:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002744:	4809      	ldr	r0, [pc, #36]	; (800276c <HAL_InitTick+0xac>)
 8002746:	f00b feeb 	bl	800e520 <HAL_TIM_Base_Init>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d104      	bne.n	800275a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002750:	4806      	ldr	r0, [pc, #24]	; (800276c <HAL_InitTick+0xac>)
 8002752:	f00b ff35 	bl	800e5c0 <HAL_TIM_Base_Start_IT>
 8002756:	4603      	mov	r3, r0
 8002758:	e000      	b.n	800275c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
}
 800275c:	4618      	mov	r0, r3
 800275e:	3730      	adds	r7, #48	; 0x30
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40023800 	.word	0x40023800
 8002768:	431bde83 	.word	0x431bde83
 800276c:	20006120 	.word	0x20006120
 8002770:	40001000 	.word	0x40001000

08002774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002778:	e7fe      	b.n	8002778 <NMI_Handler+0x4>

0800277a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800277e:	e7fe      	b.n	800277e <HardFault_Handler+0x4>

08002780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002784:	e7fe      	b.n	8002784 <MemManage_Handler+0x4>

08002786 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002786:	b480      	push	{r7}
 8002788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800278a:	e7fe      	b.n	800278a <BusFault_Handler+0x4>

0800278c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002790:	e7fe      	b.n	8002790 <UsageFault_Handler+0x4>

08002792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80027a4:	2001      	movs	r0, #1
 80027a6:	f007 fb55 	bl	8009e54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80027b4:	4802      	ldr	r0, [pc, #8]	; (80027c0 <RTC_Alarm_IRQHandler+0x10>)
 80027b6:	f00a ff27 	bl	800d608 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20005ff8 	.word	0x20005ff8

080027c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027c8:	4802      	ldr	r0, [pc, #8]	; (80027d4 <TIM6_DAC_IRQHandler+0x10>)
 80027ca:	f00c f8fb 	bl	800e9c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20006120 	.word	0x20006120

080027d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80027dc:	4802      	ldr	r0, [pc, #8]	; (80027e8 <OTG_FS_IRQHandler+0x10>)
 80027de:	f008 fd11 	bl	800b204 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20008948 	.word	0x20008948

080027ec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	80fb      	strh	r3, [r7, #6]

}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002808:	4b06      	ldr	r3, [pc, #24]	; (8002824 <SystemInit+0x20>)
 800280a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280e:	4a05      	ldr	r2, [pc, #20]	; (8002824 <SystemInit+0x20>)
 8002810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08e      	sub	sp, #56	; 0x38
 800282c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800282e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	605a      	str	r2, [r3, #4]
 8002838:	609a      	str	r2, [r3, #8]
 800283a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800283c:	f107 0320 	add.w	r3, r7, #32
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002846:	1d3b      	adds	r3, r7, #4
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	60da      	str	r2, [r3, #12]
 8002852:	611a      	str	r2, [r3, #16]
 8002854:	615a      	str	r2, [r3, #20]
 8002856:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002858:	4b2d      	ldr	r3, [pc, #180]	; (8002910 <MX_TIM2_Init+0xe8>)
 800285a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800285e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8002860:	4b2b      	ldr	r3, [pc, #172]	; (8002910 <MX_TIM2_Init+0xe8>)
 8002862:	2259      	movs	r2, #89	; 0x59
 8002864:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002866:	4b2a      	ldr	r3, [pc, #168]	; (8002910 <MX_TIM2_Init+0xe8>)
 8002868:	2200      	movs	r2, #0
 800286a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 800286c:	4b28      	ldr	r3, [pc, #160]	; (8002910 <MX_TIM2_Init+0xe8>)
 800286e:	f240 128f 	movw	r2, #399	; 0x18f
 8002872:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002874:	4b26      	ldr	r3, [pc, #152]	; (8002910 <MX_TIM2_Init+0xe8>)
 8002876:	2200      	movs	r2, #0
 8002878:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800287a:	4b25      	ldr	r3, [pc, #148]	; (8002910 <MX_TIM2_Init+0xe8>)
 800287c:	2200      	movs	r2, #0
 800287e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002880:	4823      	ldr	r0, [pc, #140]	; (8002910 <MX_TIM2_Init+0xe8>)
 8002882:	f00b fe4d 	bl	800e520 <HAL_TIM_Base_Init>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800288c:	f7ff fb48 	bl	8001f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002896:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800289a:	4619      	mov	r1, r3
 800289c:	481c      	ldr	r0, [pc, #112]	; (8002910 <MX_TIM2_Init+0xe8>)
 800289e:	f00c fa5b 	bl	800ed58 <HAL_TIM_ConfigClockSource>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80028a8:	f7ff fb3a 	bl	8001f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80028ac:	4818      	ldr	r0, [pc, #96]	; (8002910 <MX_TIM2_Init+0xe8>)
 80028ae:	f00b fef7 	bl	800e6a0 <HAL_TIM_PWM_Init>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80028b8:	f7ff fb32 	bl	8001f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80028bc:	2320      	movs	r3, #32
 80028be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028c0:	2300      	movs	r3, #0
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028c4:	f107 0320 	add.w	r3, r7, #32
 80028c8:	4619      	mov	r1, r3
 80028ca:	4811      	ldr	r0, [pc, #68]	; (8002910 <MX_TIM2_Init+0xe8>)
 80028cc:	f00c fe44 	bl	800f558 <HAL_TIMEx_MasterConfigSynchronization>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80028d6:	f7ff fb23 	bl	8001f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028da:	2360      	movs	r3, #96	; 0x60
 80028dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80028de:	2364      	movs	r3, #100	; 0x64
 80028e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028ea:	1d3b      	adds	r3, r7, #4
 80028ec:	2208      	movs	r2, #8
 80028ee:	4619      	mov	r1, r3
 80028f0:	4807      	ldr	r0, [pc, #28]	; (8002910 <MX_TIM2_Init+0xe8>)
 80028f2:	f00c f96f 	bl	800ebd4 <HAL_TIM_PWM_ConfigChannel>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80028fc:	f7ff fb10 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002900:	4803      	ldr	r0, [pc, #12]	; (8002910 <MX_TIM2_Init+0xe8>)
 8002902:	f000 f827 	bl	8002954 <HAL_TIM_MspPostInit>

}
 8002906:	bf00      	nop
 8002908:	3738      	adds	r7, #56	; 0x38
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20006168 	.word	0x20006168

08002914 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002924:	d10d      	bne.n	8002942 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_TIM_Base_MspInit+0x3c>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	4a08      	ldr	r2, [pc, #32]	; (8002950 <HAL_TIM_Base_MspInit+0x3c>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	6413      	str	r3, [r2, #64]	; 0x40
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_TIM_Base_MspInit+0x3c>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002942:	bf00      	nop
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800

08002954 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	f107 030c 	add.w	r3, r7, #12
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002974:	d11d      	bne.n	80029b2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <HAL_TIM_MspPostInit+0x68>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a0f      	ldr	r2, [pc, #60]	; (80029bc <HAL_TIM_MspPostInit+0x68>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <HAL_TIM_MspPostInit+0x68>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8002992:	2304      	movs	r3, #4
 8002994:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002996:	2302      	movs	r3, #2
 8002998:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299e:	2300      	movs	r3, #0
 80029a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029a2:	2301      	movs	r3, #1
 80029a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80029a6:	f107 030c 	add.w	r3, r7, #12
 80029aa:	4619      	mov	r1, r3
 80029ac:	4804      	ldr	r0, [pc, #16]	; (80029c0 <HAL_TIM_MspPostInit+0x6c>)
 80029ae:	f007 f873 	bl	8009a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80029b2:	bf00      	nop
 80029b4:	3720      	adds	r7, #32
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40020000 	.word	0x40020000

080029c4 <MX_UART8_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART8 init function */
void MX_UART8_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80029c8:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <MX_UART8_Init+0x4c>)
 80029ca:	4a12      	ldr	r2, [pc, #72]	; (8002a14 <MX_UART8_Init+0x50>)
 80029cc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <MX_UART8_Init+0x4c>)
 80029d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029d4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80029d6:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <MX_UART8_Init+0x4c>)
 80029d8:	2200      	movs	r2, #0
 80029da:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80029dc:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <MX_UART8_Init+0x4c>)
 80029de:	2200      	movs	r2, #0
 80029e0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80029e2:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <MX_UART8_Init+0x4c>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80029e8:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <MX_UART8_Init+0x4c>)
 80029ea:	220c      	movs	r2, #12
 80029ec:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ee:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <MX_UART8_Init+0x4c>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <MX_UART8_Init+0x4c>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80029fa:	4805      	ldr	r0, [pc, #20]	; (8002a10 <MX_UART8_Init+0x4c>)
 80029fc:	f00c fe3c 	bl	800f678 <HAL_UART_Init>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8002a06:	f7ff fa8b 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	200061f4 	.word	0x200061f4
 8002a14:	40007c00 	.word	0x40007c00

08002a18 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a1c:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <MX_USART3_UART_Init+0x4c>)
 8002a1e:	4a12      	ldr	r2, [pc, #72]	; (8002a68 <MX_USART3_UART_Init+0x50>)
 8002a20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002a22:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <MX_USART3_UART_Init+0x4c>)
 8002a24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a2a:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <MX_USART3_UART_Init+0x4c>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <MX_USART3_UART_Init+0x4c>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a36:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <MX_USART3_UART_Init+0x4c>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a3c:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <MX_USART3_UART_Init+0x4c>)
 8002a3e:	220c      	movs	r2, #12
 8002a40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a42:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <MX_USART3_UART_Init+0x4c>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <MX_USART3_UART_Init+0x4c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a4e:	4805      	ldr	r0, [pc, #20]	; (8002a64 <MX_USART3_UART_Init+0x4c>)
 8002a50:	f00c fe12 	bl	800f678 <HAL_UART_Init>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002a5a:	f7ff fa61 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	200061b0 	.word	0x200061b0
 8002a68:	40004800 	.word	0x40004800

08002a6c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <MX_USART6_UART_Init+0x4c>)
 8002a72:	4a12      	ldr	r2, [pc, #72]	; (8002abc <MX_USART6_UART_Init+0x50>)
 8002a74:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002a76:	4b10      	ldr	r3, [pc, #64]	; (8002ab8 <MX_USART6_UART_Init+0x4c>)
 8002a78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a7c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002a7e:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <MX_USART6_UART_Init+0x4c>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002a84:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <MX_USART6_UART_Init+0x4c>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <MX_USART6_UART_Init+0x4c>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002a90:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <MX_USART6_UART_Init+0x4c>)
 8002a92:	220c      	movs	r2, #12
 8002a94:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a96:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <MX_USART6_UART_Init+0x4c>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a9c:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <MX_USART6_UART_Init+0x4c>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002aa2:	4805      	ldr	r0, [pc, #20]	; (8002ab8 <MX_USART6_UART_Init+0x4c>)
 8002aa4:	f00c fde8 	bl	800f678 <HAL_UART_Init>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002aae:	f7ff fa37 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20006238 	.word	0x20006238
 8002abc:	40011400 	.word	0x40011400

08002ac0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08e      	sub	sp, #56	; 0x38
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	60da      	str	r2, [r3, #12]
 8002ad6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a4b      	ldr	r2, [pc, #300]	; (8002c0c <HAL_UART_MspInit+0x14c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d12c      	bne.n	8002b3c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	623b      	str	r3, [r7, #32]
 8002ae6:	4b4a      	ldr	r3, [pc, #296]	; (8002c10 <HAL_UART_MspInit+0x150>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	4a49      	ldr	r2, [pc, #292]	; (8002c10 <HAL_UART_MspInit+0x150>)
 8002aec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002af0:	6413      	str	r3, [r2, #64]	; 0x40
 8002af2:	4b47      	ldr	r3, [pc, #284]	; (8002c10 <HAL_UART_MspInit+0x150>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002afa:	623b      	str	r3, [r7, #32]
 8002afc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	4b43      	ldr	r3, [pc, #268]	; (8002c10 <HAL_UART_MspInit+0x150>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	4a42      	ldr	r2, [pc, #264]	; (8002c10 <HAL_UART_MspInit+0x150>)
 8002b08:	f043 0310 	orr.w	r3, r3, #16
 8002b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0e:	4b40      	ldr	r3, [pc, #256]	; (8002c10 <HAL_UART_MspInit+0x150>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	61fb      	str	r3, [r7, #28]
 8002b18:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b26:	2303      	movs	r3, #3
 8002b28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002b2a:	2308      	movs	r3, #8
 8002b2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b32:	4619      	mov	r1, r3
 8002b34:	4837      	ldr	r0, [pc, #220]	; (8002c14 <HAL_UART_MspInit+0x154>)
 8002b36:	f006 ffaf 	bl	8009a98 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002b3a:	e063      	b.n	8002c04 <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART3)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a35      	ldr	r2, [pc, #212]	; (8002c18 <HAL_UART_MspInit+0x158>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d12d      	bne.n	8002ba2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	61bb      	str	r3, [r7, #24]
 8002b4a:	4b31      	ldr	r3, [pc, #196]	; (8002c10 <HAL_UART_MspInit+0x150>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	4a30      	ldr	r2, [pc, #192]	; (8002c10 <HAL_UART_MspInit+0x150>)
 8002b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b54:	6413      	str	r3, [r2, #64]	; 0x40
 8002b56:	4b2e      	ldr	r3, [pc, #184]	; (8002c10 <HAL_UART_MspInit+0x150>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b5e:	61bb      	str	r3, [r7, #24]
 8002b60:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	4b2a      	ldr	r3, [pc, #168]	; (8002c10 <HAL_UART_MspInit+0x150>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	4a29      	ldr	r2, [pc, #164]	; (8002c10 <HAL_UART_MspInit+0x150>)
 8002b6c:	f043 0308 	orr.w	r3, r3, #8
 8002b70:	6313      	str	r3, [r2, #48]	; 0x30
 8002b72:	4b27      	ldr	r3, [pc, #156]	; (8002c10 <HAL_UART_MspInit+0x150>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8002b7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b84:	2302      	movs	r3, #2
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b90:	2307      	movs	r3, #7
 8002b92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4820      	ldr	r0, [pc, #128]	; (8002c1c <HAL_UART_MspInit+0x15c>)
 8002b9c:	f006 ff7c 	bl	8009a98 <HAL_GPIO_Init>
}
 8002ba0:	e030      	b.n	8002c04 <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART6)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a1e      	ldr	r2, [pc, #120]	; (8002c20 <HAL_UART_MspInit+0x160>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d12b      	bne.n	8002c04 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002bac:	2300      	movs	r3, #0
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <HAL_UART_MspInit+0x150>)
 8002bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb4:	4a16      	ldr	r2, [pc, #88]	; (8002c10 <HAL_UART_MspInit+0x150>)
 8002bb6:	f043 0320 	orr.w	r3, r3, #32
 8002bba:	6453      	str	r3, [r2, #68]	; 0x44
 8002bbc:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <HAL_UART_MspInit+0x150>)
 8002bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc0:	f003 0320 	and.w	r3, r3, #32
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <HAL_UART_MspInit+0x150>)
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	4a0f      	ldr	r2, [pc, #60]	; (8002c10 <HAL_UART_MspInit+0x150>)
 8002bd2:	f043 0304 	orr.w	r3, r3, #4
 8002bd6:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd8:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <HAL_UART_MspInit+0x150>)
 8002bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8002be4:	23c0      	movs	r3, #192	; 0xc0
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be8:	2302      	movs	r3, #2
 8002bea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002bf4:	2308      	movs	r3, #8
 8002bf6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4809      	ldr	r0, [pc, #36]	; (8002c24 <HAL_UART_MspInit+0x164>)
 8002c00:	f006 ff4a 	bl	8009a98 <HAL_GPIO_Init>
}
 8002c04:	bf00      	nop
 8002c06:	3738      	adds	r7, #56	; 0x38
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40007c00 	.word	0x40007c00
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40004800 	.word	0x40004800
 8002c1c:	40020c00 	.word	0x40020c00
 8002c20:	40011400 	.word	0x40011400
 8002c24:	40020800 	.word	0x40020800

08002c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c2e:	e003      	b.n	8002c38 <LoopCopyDataInit>

08002c30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c36:	3104      	adds	r1, #4

08002c38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c38:	480b      	ldr	r0, [pc, #44]	; (8002c68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c40:	d3f6      	bcc.n	8002c30 <CopyDataInit>
  ldr  r2, =_sbss
 8002c42:	4a0b      	ldr	r2, [pc, #44]	; (8002c70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c44:	e002      	b.n	8002c4c <LoopFillZerobss>

08002c46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c48:	f842 3b04 	str.w	r3, [r2], #4

08002c4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c4c:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c50:	d3f9      	bcc.n	8002c46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c52:	f7ff fdd7 	bl	8002804 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c56:	f017 f91f 	bl	8019e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c5a:	f7ff f867 	bl	8001d2c <main>
  bx  lr    
 8002c5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c60:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002c64:	080225fc 	.word	0x080225fc
  ldr  r0, =_sdata
 8002c68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c6c:	20000434 	.word	0x20000434
  ldr  r2, =_sbss
 8002c70:	20000434 	.word	0x20000434
  ldr  r3, = _ebss
 8002c74:	20008d60 	.word	0x20008d60

08002c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c78:	e7fe      	b.n	8002c78 <ADC_IRQHandler>
	...

08002c7c <MRT_external_flash_Init>:


//**************************************************//
//FUNCTIONS

void MRT_external_flash_Init(void){
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0

	for (int i = 0; i < NB_OF_FLAGS; i++){
 8002c82:	2300      	movs	r3, #0
 8002c84:	607b      	str	r3, [r7, #4]
 8002c86:	e007      	b.n	8002c98 <MRT_external_flash_Init+0x1c>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 8002c88:	4a0e      	ldr	r2, [pc, #56]	; (8002cc4 <MRT_external_flash_Init+0x48>)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	2200      	movs	r2, #0
 8002c90:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3301      	adds	r3, #1
 8002c96:	607b      	str	r3, [r7, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	ddf4      	ble.n	8002c88 <MRT_external_flash_Init+0xc>
	}

	if (!W25qxx_Init()) {
 8002c9e:	f000 fc7d 	bl	800359c <W25qxx_Init>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	f083 0301 	eor.w	r3, r3, #1
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <MRT_external_flash_Init+0x36>
		Error_Handler(); // hangs and blinks LEDF
 8002cae:	f7ff f937 	bl	8001f20 <Error_Handler>
	}
	MRT_check_for_wake_up(); //Needs to be called before getFlags() and after the W25xx_Init()
 8002cb2:	f7ff fa39 	bl	8002128 <MRT_check_for_wake_up>
	MRT_get_flags();
 8002cb6:	f000 f807 	bl	8002cc8 <MRT_get_flags>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	2000627c 	.word	0x2000627c

08002cc8 <MRT_get_flags>:




void MRT_get_flags(void){
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0

	//Retrieve flags
	W25qxx_ReadSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002ccc:	2305      	movs	r3, #5
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	4874      	ldr	r0, [pc, #464]	; (8002ea4 <MRT_get_flags+0x1dc>)
 8002cd4:	f001 f83c 	bl	8003d50 <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(flash_time_buffer, 2, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8002cd8:	2304      	movs	r3, #4
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2102      	movs	r1, #2
 8002cde:	4872      	ldr	r0, [pc, #456]	; (8002ea8 <MRT_get_flags+0x1e0>)
 8002ce0:	f001 f836 	bl	8003d50 <W25qxx_ReadSector>

	//If RTC detected a wake up, update the flash memory
	if (wu_flag == 1){
 8002ce4:	4b71      	ldr	r3, [pc, #452]	; (8002eac <MRT_get_flags+0x1e4>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d10e      	bne.n	8002d0a <MRT_get_flags+0x42>
		//Write the new number of wake up to external flash
		flash_flags_buffer[WU_FLAG_OFFSET] = flash_flags_buffer[WU_FLAG_OFFSET] + 1; //Update number of wake up
 8002cec:	4b6d      	ldr	r3, [pc, #436]	; (8002ea4 <MRT_get_flags+0x1dc>)
 8002cee:	785b      	ldrb	r3, [r3, #1]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	4b6b      	ldr	r3, [pc, #428]	; (8002ea4 <MRT_get_flags+0x1dc>)
 8002cf6:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	f000 fda1 	bl	8003840 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002cfe:	2305      	movs	r3, #5
 8002d00:	2200      	movs	r2, #0
 8002d02:	2101      	movs	r1, #1
 8002d04:	4867      	ldr	r0, [pc, #412]	; (8002ea4 <MRT_get_flags+0x1dc>)
 8002d06:	f000 fee5 	bl	8003ad4 <W25qxx_WriteSector>
	}

	//Assign each value read to their variable
	 MRT_update_flags_values();
 8002d0a:	f000 f8e1 	bl	8002ed0 <MRT_update_flags_values>


	//Check flags values
	//Reset flag
	if (reset_flag != 0 && reset_flag !=1){ //If random value (none was written)
 8002d0e:	4b68      	ldr	r3, [pc, #416]	; (8002eb0 <MRT_get_flags+0x1e8>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d013      	beq.n	8002d3e <MRT_get_flags+0x76>
 8002d16:	4b66      	ldr	r3, [pc, #408]	; (8002eb0 <MRT_get_flags+0x1e8>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d00f      	beq.n	8002d3e <MRT_get_flags+0x76>
		reset_flag = 0;
 8002d1e:	4b64      	ldr	r3, [pc, #400]	; (8002eb0 <MRT_get_flags+0x1e8>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8002d24:	4b62      	ldr	r3, [pc, #392]	; (8002eb0 <MRT_get_flags+0x1e8>)
 8002d26:	781a      	ldrb	r2, [r3, #0]
 8002d28:	4b5e      	ldr	r3, [pc, #376]	; (8002ea4 <MRT_get_flags+0x1dc>)
 8002d2a:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(1);
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	f000 fd87 	bl	8003840 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002d32:	2305      	movs	r3, #5
 8002d34:	2200      	movs	r2, #0
 8002d36:	2101      	movs	r1, #1
 8002d38:	485a      	ldr	r0, [pc, #360]	; (8002ea4 <MRT_get_flags+0x1dc>)
 8002d3a:	f000 fecb 	bl	8003ad4 <W25qxx_WriteSector>
	}

	//Wake up flag
	if (wu_flag != 0 && wu_flag !=1 && wu_flag !=2){ //If random value (none was written)
 8002d3e:	4b5b      	ldr	r3, [pc, #364]	; (8002eac <MRT_get_flags+0x1e4>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d017      	beq.n	8002d76 <MRT_get_flags+0xae>
 8002d46:	4b59      	ldr	r3, [pc, #356]	; (8002eac <MRT_get_flags+0x1e4>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d013      	beq.n	8002d76 <MRT_get_flags+0xae>
 8002d4e:	4b57      	ldr	r3, [pc, #348]	; (8002eac <MRT_get_flags+0x1e4>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d00f      	beq.n	8002d76 <MRT_get_flags+0xae>
		wu_flag = 0;
 8002d56:	4b55      	ldr	r3, [pc, #340]	; (8002eac <MRT_get_flags+0x1e4>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[WU_FLAG_OFFSET] = wu_flag;
 8002d5c:	4b53      	ldr	r3, [pc, #332]	; (8002eac <MRT_get_flags+0x1e4>)
 8002d5e:	781a      	ldrb	r2, [r3, #0]
 8002d60:	4b50      	ldr	r3, [pc, #320]	; (8002ea4 <MRT_get_flags+0x1dc>)
 8002d62:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 8002d64:	2001      	movs	r0, #1
 8002d66:	f000 fd6b 	bl	8003840 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002d6a:	2305      	movs	r3, #5
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2101      	movs	r1, #1
 8002d70:	484c      	ldr	r0, [pc, #304]	; (8002ea4 <MRT_get_flags+0x1dc>)
 8002d72:	f000 feaf 	bl	8003ad4 <W25qxx_WriteSector>
	}

	//IWDG flag
	if (iwdg_flag != 0 && iwdg_flag !=1){ //If random value (none was written)
 8002d76:	4b4f      	ldr	r3, [pc, #316]	; (8002eb4 <MRT_get_flags+0x1ec>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d013      	beq.n	8002da6 <MRT_get_flags+0xde>
 8002d7e:	4b4d      	ldr	r3, [pc, #308]	; (8002eb4 <MRT_get_flags+0x1ec>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d00f      	beq.n	8002da6 <MRT_get_flags+0xde>
		iwdg_flag = 0;
 8002d86:	4b4b      	ldr	r3, [pc, #300]	; (8002eb4 <MRT_get_flags+0x1ec>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8002d8c:	4b49      	ldr	r3, [pc, #292]	; (8002eb4 <MRT_get_flags+0x1ec>)
 8002d8e:	781a      	ldrb	r2, [r3, #0]
 8002d90:	4b44      	ldr	r3, [pc, #272]	; (8002ea4 <MRT_get_flags+0x1dc>)
 8002d92:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 8002d94:	2001      	movs	r0, #1
 8002d96:	f000 fd53 	bl	8003840 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002d9a:	2305      	movs	r3, #5
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2101      	movs	r1, #1
 8002da0:	4840      	ldr	r0, [pc, #256]	; (8002ea4 <MRT_get_flags+0x1dc>)
 8002da2:	f000 fe97 	bl	8003ad4 <W25qxx_WriteSector>
	}

	//Apogee flag
	if (apogee_flag != 0 && apogee_flag !=1){ //If random value (none was written)
 8002da6:	4b44      	ldr	r3, [pc, #272]	; (8002eb8 <MRT_get_flags+0x1f0>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d013      	beq.n	8002dd6 <MRT_get_flags+0x10e>
 8002dae:	4b42      	ldr	r3, [pc, #264]	; (8002eb8 <MRT_get_flags+0x1f0>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d00f      	beq.n	8002dd6 <MRT_get_flags+0x10e>
		apogee_flag = 0;
 8002db6:	4b40      	ldr	r3, [pc, #256]	; (8002eb8 <MRT_get_flags+0x1f0>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[APOGEE_FLAG_OFFSET] = apogee_flag;
 8002dbc:	4b3e      	ldr	r3, [pc, #248]	; (8002eb8 <MRT_get_flags+0x1f0>)
 8002dbe:	781a      	ldrb	r2, [r3, #0]
 8002dc0:	4b38      	ldr	r3, [pc, #224]	; (8002ea4 <MRT_get_flags+0x1dc>)
 8002dc2:	70da      	strb	r2, [r3, #3]
		W25qxx_EraseSector(1);
 8002dc4:	2001      	movs	r0, #1
 8002dc6:	f000 fd3b 	bl	8003840 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002dca:	2305      	movs	r3, #5
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2101      	movs	r1, #1
 8002dd0:	4834      	ldr	r0, [pc, #208]	; (8002ea4 <MRT_get_flags+0x1dc>)
 8002dd2:	f000 fe7f 	bl	8003ad4 <W25qxx_WriteSector>
	}

	//Ejection state flag
	if (!(ejection_state_flag >= 0 && ejection_state_flag <=4)){ //If random value (none was written)
 8002dd6:	4b39      	ldr	r3, [pc, #228]	; (8002ebc <MRT_get_flags+0x1f4>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d90f      	bls.n	8002dfe <MRT_get_flags+0x136>
		ejection_state_flag = 0;
 8002dde:	4b37      	ldr	r3, [pc, #220]	; (8002ebc <MRT_get_flags+0x1f4>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[EJECTION_STATE_FLAG_OFFSET] = ejection_state_flag;
 8002de4:	4b35      	ldr	r3, [pc, #212]	; (8002ebc <MRT_get_flags+0x1f4>)
 8002de6:	781a      	ldrb	r2, [r3, #0]
 8002de8:	4b2e      	ldr	r3, [pc, #184]	; (8002ea4 <MRT_get_flags+0x1dc>)
 8002dea:	711a      	strb	r2, [r3, #4]
		W25qxx_EraseSector(1);
 8002dec:	2001      	movs	r0, #1
 8002dee:	f000 fd27 	bl	8003840 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002df2:	2305      	movs	r3, #5
 8002df4:	2200      	movs	r2, #0
 8002df6:	2101      	movs	r1, #1
 8002df8:	482a      	ldr	r0, [pc, #168]	; (8002ea4 <MRT_get_flags+0x1dc>)
 8002dfa:	f000 fe6b 	bl	8003ad4 <W25qxx_WriteSector>
	}


	//Check RTC time values
	//Hours
	if (!(prev_hours >= 0 && prev_hours < 24)){ //If random value (none was written)
 8002dfe:	4b30      	ldr	r3, [pc, #192]	; (8002ec0 <MRT_get_flags+0x1f8>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b17      	cmp	r3, #23
 8002e04:	d90f      	bls.n	8002e26 <MRT_get_flags+0x15e>
		prev_hours = 0;
 8002e06:	4b2e      	ldr	r3, [pc, #184]	; (8002ec0 <MRT_get_flags+0x1f8>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_HOURS_OFFSET] = prev_hours;
 8002e0c:	4b2c      	ldr	r3, [pc, #176]	; (8002ec0 <MRT_get_flags+0x1f8>)
 8002e0e:	781a      	ldrb	r2, [r3, #0]
 8002e10:	4b25      	ldr	r3, [pc, #148]	; (8002ea8 <MRT_get_flags+0x1e0>)
 8002e12:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(2);
 8002e14:	2002      	movs	r0, #2
 8002e16:	f000 fd13 	bl	8003840 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8002e1a:	2304      	movs	r3, #4
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2102      	movs	r1, #2
 8002e20:	4821      	ldr	r0, [pc, #132]	; (8002ea8 <MRT_get_flags+0x1e0>)
 8002e22:	f000 fe57 	bl	8003ad4 <W25qxx_WriteSector>
	}

	//Minutes
	if (!(prev_min >= 0 && prev_min < 60)){ //If random value (none was written)
 8002e26:	4b27      	ldr	r3, [pc, #156]	; (8002ec4 <MRT_get_flags+0x1fc>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b3b      	cmp	r3, #59	; 0x3b
 8002e2c:	d90f      	bls.n	8002e4e <MRT_get_flags+0x186>
		prev_min = 0;
 8002e2e:	4b25      	ldr	r3, [pc, #148]	; (8002ec4 <MRT_get_flags+0x1fc>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_MIN_OFFSET] = prev_min;
 8002e34:	4b23      	ldr	r3, [pc, #140]	; (8002ec4 <MRT_get_flags+0x1fc>)
 8002e36:	781a      	ldrb	r2, [r3, #0]
 8002e38:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <MRT_get_flags+0x1e0>)
 8002e3a:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(2);
 8002e3c:	2002      	movs	r0, #2
 8002e3e:	f000 fcff 	bl	8003840 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8002e42:	2304      	movs	r3, #4
 8002e44:	2200      	movs	r2, #0
 8002e46:	2102      	movs	r1, #2
 8002e48:	4817      	ldr	r0, [pc, #92]	; (8002ea8 <MRT_get_flags+0x1e0>)
 8002e4a:	f000 fe43 	bl	8003ad4 <W25qxx_WriteSector>
	}

	//Seconds
	if (!(prev_sec >= 0 && prev_sec < 60)){ //If random value (none was written)
 8002e4e:	4b1e      	ldr	r3, [pc, #120]	; (8002ec8 <MRT_get_flags+0x200>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b3b      	cmp	r3, #59	; 0x3b
 8002e54:	d90f      	bls.n	8002e76 <MRT_get_flags+0x1ae>
		prev_sec = 0;
 8002e56:	4b1c      	ldr	r3, [pc, #112]	; (8002ec8 <MRT_get_flags+0x200>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_SEC_OFFSET] = prev_sec;
 8002e5c:	4b1a      	ldr	r3, [pc, #104]	; (8002ec8 <MRT_get_flags+0x200>)
 8002e5e:	781a      	ldrb	r2, [r3, #0]
 8002e60:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <MRT_get_flags+0x1e0>)
 8002e62:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(2);
 8002e64:	2002      	movs	r0, #2
 8002e66:	f000 fceb 	bl	8003840 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8002e6a:	2304      	movs	r3, #4
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2102      	movs	r1, #2
 8002e70:	480d      	ldr	r0, [pc, #52]	; (8002ea8 <MRT_get_flags+0x1e0>)
 8002e72:	f000 fe2f 	bl	8003ad4 <W25qxx_WriteSector>
	}

	//Sub-Seconds
	if (!(prev_subsec >= 0 && prev_subsec < 240)){ //If random value (none was written)
 8002e76:	4b15      	ldr	r3, [pc, #84]	; (8002ecc <MRT_get_flags+0x204>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2bef      	cmp	r3, #239	; 0xef
 8002e7c:	d90f      	bls.n	8002e9e <MRT_get_flags+0x1d6>
		prev_subsec = 0;
 8002e7e:	4b13      	ldr	r3, [pc, #76]	; (8002ecc <MRT_get_flags+0x204>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_SEC_OFFSET] = prev_subsec;
 8002e84:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <MRT_get_flags+0x204>)
 8002e86:	781a      	ldrb	r2, [r3, #0]
 8002e88:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <MRT_get_flags+0x1e0>)
 8002e8a:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(2);
 8002e8c:	2002      	movs	r0, #2
 8002e8e:	f000 fcd7 	bl	8003840 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8002e92:	2304      	movs	r3, #4
 8002e94:	2200      	movs	r2, #0
 8002e96:	2102      	movs	r1, #2
 8002e98:	4803      	ldr	r0, [pc, #12]	; (8002ea8 <MRT_get_flags+0x1e0>)
 8002e9a:	f000 fe1b 	bl	8003ad4 <W25qxx_WriteSector>
	}
}
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20006284 	.word	0x20006284
 8002ea8:	2000628c 	.word	0x2000628c
 8002eac:	2000047d 	.word	0x2000047d
 8002eb0:	2000047c 	.word	0x2000047c
 8002eb4:	2000047e 	.word	0x2000047e
 8002eb8:	2000047f 	.word	0x2000047f
 8002ebc:	20000480 	.word	0x20000480
 8002ec0:	20000481 	.word	0x20000481
 8002ec4:	20000482 	.word	0x20000482
 8002ec8:	20000483 	.word	0x20000483
 8002ecc:	20000484 	.word	0x20000484

08002ed0 <MRT_update_flags_values>:
		flash_time_buffer[i] = *flash_time[i];
	}
}


void MRT_update_flags_values(void){
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	607b      	str	r3, [r7, #4]
 8002eda:	e00b      	b.n	8002ef4 <MRT_update_flags_values+0x24>
		*flash_flags[i] = flash_flags_buffer[i];
 8002edc:	4a13      	ldr	r2, [pc, #76]	; (8002f2c <MRT_update_flags_values+0x5c>)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee4:	4912      	ldr	r1, [pc, #72]	; (8002f30 <MRT_update_flags_values+0x60>)
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	440a      	add	r2, r1
 8002eea:	7812      	ldrb	r2, [r2, #0]
 8002eec:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	607b      	str	r3, [r7, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	ddf0      	ble.n	8002edc <MRT_update_flags_values+0xc>
	}
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8002efa:	2300      	movs	r3, #0
 8002efc:	603b      	str	r3, [r7, #0]
 8002efe:	e00b      	b.n	8002f18 <MRT_update_flags_values+0x48>
		*flash_time[i] = flash_time_buffer[i];
 8002f00:	4a0c      	ldr	r2, [pc, #48]	; (8002f34 <MRT_update_flags_values+0x64>)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f08:	490b      	ldr	r1, [pc, #44]	; (8002f38 <MRT_update_flags_values+0x68>)
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	440a      	add	r2, r1
 8002f0e:	7812      	ldrb	r2, [r2, #0]
 8002f10:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	3301      	adds	r3, #1
 8002f16:	603b      	str	r3, [r7, #0]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	ddf0      	ble.n	8002f00 <MRT_update_flags_values+0x30>
	}
}
 8002f1e:	bf00      	nop
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	20000040 	.word	0x20000040
 8002f30:	20006284 	.word	0x20006284
 8002f34:	20000054 	.word	0x20000054
 8002f38:	2000628c 	.word	0x2000628c

08002f3c <myprintf>:


uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value);
void str2upper(char* string, char* upper);

void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 8002f3c:	b40f      	push	{r0, r1, r2, r3}
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8002f44:	f107 0314 	add.w	r3, r7, #20
 8002f48:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f52:	4806      	ldr	r0, [pc, #24]	; (8002f6c <myprintf+0x30>)
 8002f54:	f019 fed6 	bl	801cd04 <vsniprintf>
  va_end(args);

  //CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
  //HAL_UART_Transmit(&DEBUG_UART, (uint8_t*)buffer, strlen(buffer), -1);
  print(buffer);
 8002f58:	4804      	ldr	r0, [pc, #16]	; (8002f6c <myprintf+0x30>)
 8002f5a:	f7fe f8d5 	bl	8001108 <print>
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f68:	b004      	add	sp, #16
 8002f6a:	4770      	bx	lr
 8002f6c:	2000048c 	.word	0x2000048c

08002f70 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08a      	sub	sp, #40	; 0x28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	4932      	ldr	r1, [pc, #200]	; (8003048 <sd_init_dynamic_filename+0xd8>)
 8002f80:	4832      	ldr	r0, [pc, #200]	; (800304c <sd_init_dynamic_filename+0xdc>)
 8002f82:	f011 fdc1 	bl	8014b08 <f_mount>
 8002f86:	4603      	mov	r3, r0
 8002f88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 8002f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8002f94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f98:	4619      	mov	r1, r3
 8002f9a:	482d      	ldr	r0, [pc, #180]	; (8003050 <sd_init_dynamic_filename+0xe0>)
 8002f9c:	f7ff ffce 	bl	8002f3c <myprintf>
		return fres;
 8002fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fa4:	e04b      	b.n	800303e <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 8002faa:	f107 0320 	add.w	r3, r7, #32
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68f9      	ldr	r1, [r7, #12]
 8002fb2:	4825      	ldr	r0, [pc, #148]	; (8003048 <sd_init_dynamic_filename+0xd8>)
 8002fb4:	f000 f884 	bl	80030c0 <scan_files>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	f107 0310 	add.w	r3, r7, #16
 8002fc6:	4923      	ldr	r1, [pc, #140]	; (8003054 <sd_init_dynamic_filename+0xe4>)
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f018 fbdf 	bl	801b78c <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 8002fce:	f107 0310 	add.w	r3, r7, #16
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f018 fc77 	bl	801b8c8 <strcpy>
 8002fda:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8002fdc:	f107 0310 	add.w	r3, r7, #16
 8002fe0:	221a      	movs	r2, #26
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	481c      	ldr	r0, [pc, #112]	; (8003058 <sd_init_dynamic_filename+0xe8>)
 8002fe6:	f011 fdf3 	bl	8014bd0 <f_open>
 8002fea:	4603      	mov	r3, r0
 8002fec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8002ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d11a      	bne.n	800302e <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8002ff8:	4818      	ldr	r0, [pc, #96]	; (800305c <sd_init_dynamic_filename+0xec>)
 8002ffa:	f7ff ff9f 	bl	8002f3c <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8002ffe:	4b16      	ldr	r3, [pc, #88]	; (8003058 <sd_init_dynamic_filename+0xe8>)
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	4619      	mov	r1, r3
 8003004:	4814      	ldr	r0, [pc, #80]	; (8003058 <sd_init_dynamic_filename+0xe8>)
 8003006:	f012 fa04 	bl	8015412 <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 800300a:	4915      	ldr	r1, [pc, #84]	; (8003060 <sd_init_dynamic_filename+0xf0>)
 800300c:	4815      	ldr	r0, [pc, #84]	; (8003064 <sd_init_dynamic_filename+0xf4>)
 800300e:	f018 fbbd 	bl	801b78c <siprintf>
	sd_write(&fil, msg_buffer);
 8003012:	4914      	ldr	r1, [pc, #80]	; (8003064 <sd_init_dynamic_filename+0xf4>)
 8003014:	4810      	ldr	r0, [pc, #64]	; (8003058 <sd_init_dynamic_filename+0xe8>)
 8003016:	f000 f829 	bl	800306c <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 800301a:	68b9      	ldr	r1, [r7, #8]
 800301c:	480e      	ldr	r0, [pc, #56]	; (8003058 <sd_init_dynamic_filename+0xe8>)
 800301e:	f000 f825 	bl	800306c <sd_write>
	f_close(&fil);
 8003022:	480d      	ldr	r0, [pc, #52]	; (8003058 <sd_init_dynamic_filename+0xe8>)
 8003024:	f012 f9c6 	bl	80153b4 <f_close>

	return fres;
 8003028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800302c:	e007      	b.n	800303e <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 800302e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003032:	4619      	mov	r1, r3
 8003034:	480c      	ldr	r0, [pc, #48]	; (8003068 <sd_init_dynamic_filename+0xf8>)
 8003036:	f7ff ff81 	bl	8002f3c <myprintf>
		return fres;
 800303a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800303e:	4618      	mov	r0, r3
 8003040:	3728      	adds	r7, #40	; 0x28
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	08020364 	.word	0x08020364
 800304c:	20006290 	.word	0x20006290
 8003050:	08020368 	.word	0x08020368
 8003054:	080203e4 	.word	0x080203e4
 8003058:	20006ca8 	.word	0x20006ca8
 800305c:	08020380 	.word	0x08020380
 8003060:	080203c4 	.word	0x080203c4
 8003064:	200064c4 	.word	0x200064c4
 8003068:	080203b0 	.word	0x080203b0

0800306c <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8003076:	6838      	ldr	r0, [r7, #0]
 8003078:	f7fd f8c4 	bl	8000204 <strlen>
 800307c:	4602      	mov	r2, r0
 800307e:	f107 0308 	add.w	r3, r7, #8
 8003082:	6839      	ldr	r1, [r7, #0]
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f011 ff68 	bl	8014f5a <f_write>
 800308a:	4603      	mov	r3, r0
 800308c:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d107      	bne.n	80030a4 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4619      	mov	r1, r3
 8003098:	4807      	ldr	r0, [pc, #28]	; (80030b8 <sd_write+0x4c>)
 800309a:	f7ff ff4f 	bl	8002f3c <myprintf>
		return bytesWrote;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	b25b      	sxtb	r3, r3
 80030a2:	e004      	b.n	80030ae <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 80030a4:	4805      	ldr	r0, [pc, #20]	; (80030bc <sd_write+0x50>)
 80030a6:	f7ff ff49 	bl	8002f3c <myprintf>
		return -1;
 80030aa:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	080203f0 	.word	0x080203f0
 80030bc:	08020414 	.word	0x08020414

080030c0 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 80030c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030c2:	b099      	sub	sp, #100	; 0x64
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
 80030cc:	466b      	mov	r3, sp
 80030ce:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 80030d0:	68b8      	ldr	r0, [r7, #8]
 80030d2:	f7fd f897 	bl	8000204 <strlen>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 80030dc:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 80030e0:	4623      	mov	r3, r4
 80030e2:	3b01      	subs	r3, #1
 80030e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80030e6:	b2e0      	uxtb	r0, r4
 80030e8:	f04f 0100 	mov.w	r1, #0
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	00cb      	lsls	r3, r1, #3
 80030f6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80030fa:	00c2      	lsls	r2, r0, #3
 80030fc:	b2e0      	uxtb	r0, r4
 80030fe:	f04f 0100 	mov.w	r1, #0
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	00cb      	lsls	r3, r1, #3
 800310c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003110:	00c2      	lsls	r2, r0, #3
 8003112:	4623      	mov	r3, r4
 8003114:	3307      	adds	r3, #7
 8003116:	08db      	lsrs	r3, r3, #3
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	ebad 0d03 	sub.w	sp, sp, r3
 800311e:	466b      	mov	r3, sp
 8003120:	3300      	adds	r3, #0
 8003122:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 8003124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003126:	4619      	mov	r1, r3
 8003128:	68b8      	ldr	r0, [r7, #8]
 800312a:	f000 f8ff 	bl	800332c <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 8003138:	f107 0318 	add.w	r3, r7, #24
 800313c:	68f9      	ldr	r1, [r7, #12]
 800313e:	4618      	mov	r0, r3
 8003140:	f012 fbba 	bl	80158b8 <f_opendir>
 8003144:	4603      	mov	r3, r0
 8003146:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 800314a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800314e:	2b00      	cmp	r3, #0
 8003150:	d16c      	bne.n	800322c <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8003152:	f107 0318 	add.w	r3, r7, #24
 8003156:	4939      	ldr	r1, [pc, #228]	; (800323c <scan_files+0x17c>)
 8003158:	4618      	mov	r0, r3
 800315a:	f012 fc51 	bl	8015a00 <f_readdir>
 800315e:	4603      	mov	r3, r0
 8003160:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8003164:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003168:	2b00      	cmp	r3, #0
 800316a:	d15a      	bne.n	8003222 <scan_files+0x162>
 800316c:	4b33      	ldr	r3, [pc, #204]	; (800323c <scan_files+0x17c>)
 800316e:	7a5b      	ldrb	r3, [r3, #9]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d056      	beq.n	8003222 <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8003174:	4b31      	ldr	r3, [pc, #196]	; (800323c <scan_files+0x17c>)
 8003176:	7a1b      	ldrb	r3, [r3, #8]
 8003178:	f003 0310 	and.w	r3, r3, #16
 800317c:	2b00      	cmp	r3, #0
 800317e:	d14e      	bne.n	800321e <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8003180:	466b      	mov	r3, sp
 8003182:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8003184:	482e      	ldr	r0, [pc, #184]	; (8003240 <scan_files+0x180>)
 8003186:	f7fd f83d 	bl	8000204 <strlen>
 800318a:	4604      	mov	r4, r0
 800318c:	4623      	mov	r3, r4
 800318e:	3b01      	subs	r3, #1
 8003190:	653b      	str	r3, [r7, #80]	; 0x50
 8003192:	4620      	mov	r0, r4
 8003194:	f04f 0100 	mov.w	r1, #0
 8003198:	f04f 0200 	mov.w	r2, #0
 800319c:	f04f 0300 	mov.w	r3, #0
 80031a0:	00cb      	lsls	r3, r1, #3
 80031a2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80031a6:	00c2      	lsls	r2, r0, #3
 80031a8:	4620      	mov	r0, r4
 80031aa:	f04f 0100 	mov.w	r1, #0
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	00cb      	lsls	r3, r1, #3
 80031b8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80031bc:	00c2      	lsls	r2, r0, #3
 80031be:	1de3      	adds	r3, r4, #7
 80031c0:	08db      	lsrs	r3, r3, #3
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	ebad 0d03 	sub.w	sp, sp, r3
 80031c8:	466b      	mov	r3, sp
 80031ca:	3300      	adds	r3, #0
 80031cc:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 80031ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d0:	4619      	mov	r1, r3
 80031d2:	481b      	ldr	r0, [pc, #108]	; (8003240 <scan_files+0x180>)
 80031d4:	f000 f8aa 	bl	800332c <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 80031d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031da:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80031de:	4619      	mov	r1, r3
 80031e0:	4817      	ldr	r0, [pc, #92]	; (8003240 <scan_files+0x180>)
 80031e2:	f018 fb79 	bl	801b8d8 <strncmp>
 80031e6:	4603      	mov	r3, r0
 80031e8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 80031ec:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d112      	bne.n	800321a <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 80031f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031f6:	f107 0214 	add.w	r2, r7, #20
 80031fa:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 f820 	bl	8003244 <extract_filename_suffix>
 8003204:	4603      	mov	r3, r0
 8003206:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	429a      	cmp	r2, r3
 8003212:	d202      	bcs.n	800321a <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	46b5      	mov	sp, r6
 800321c:	e799      	b.n	8003152 <scan_files+0x92>
            	continue; // don't enter directory
 800321e:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8003220:	e797      	b.n	8003152 <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 8003222:	f107 0318 	add.w	r3, r7, #24
 8003226:	4618      	mov	r0, r3
 8003228:	f012 fbbf 	bl	80159aa <f_closedir>
    }

    return res;
 800322c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003230:	46ad      	mov	sp, r5
}
 8003232:	4618      	mov	r0, r3
 8003234:	3764      	adds	r7, #100	; 0x64
 8003236:	46bd      	mov	sp, r7
 8003238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800323a:	bf00      	nop
 800323c:	2000058c 	.word	0x2000058c
 8003240:	20000595 	.word	0x20000595

08003244 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 8003244:	b5b0      	push	{r4, r5, r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	460b      	mov	r3, r1
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	72fb      	strb	r3, [r7, #11]
 8003252:	466b      	mov	r3, sp
 8003254:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f7fc ffd4 	bl	8000204 <strlen>
 800325c:	4603      	mov	r3, r0
 800325e:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 8003260:	2308      	movs	r3, #8
 8003262:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 8003264:	7f7c      	ldrb	r4, [r7, #29]
 8003266:	4623      	mov	r3, r4
 8003268:	3b01      	subs	r3, #1
 800326a:	61bb      	str	r3, [r7, #24]
 800326c:	b2e0      	uxtb	r0, r4
 800326e:	f04f 0100 	mov.w	r1, #0
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	00cb      	lsls	r3, r1, #3
 800327c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003280:	00c2      	lsls	r2, r0, #3
 8003282:	b2e0      	uxtb	r0, r4
 8003284:	f04f 0100 	mov.w	r1, #0
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	00cb      	lsls	r3, r1, #3
 8003292:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003296:	00c2      	lsls	r2, r0, #3
 8003298:	4623      	mov	r3, r4
 800329a:	3307      	adds	r3, #7
 800329c:	08db      	lsrs	r3, r3, #3
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	ebad 0d03 	sub.w	sp, sp, r3
 80032a4:	466b      	mov	r3, sp
 80032a6:	3300      	adds	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 80032aa:	2300      	movs	r3, #0
 80032ac:	77fb      	strb	r3, [r7, #31]
 80032ae:	e014      	b.n	80032da <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 80032b0:	7afb      	ldrb	r3, [r7, #11]
 80032b2:	1e5a      	subs	r2, r3, #1
 80032b4:	7ffb      	ldrb	r3, [r7, #31]
 80032b6:	441a      	add	r2, r3
 80032b8:	7fbb      	ldrb	r3, [r7, #30]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	429a      	cmp	r2, r3
 80032be:	da11      	bge.n	80032e4 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 80032c0:	7afa      	ldrb	r2, [r7, #11]
 80032c2:	7ffb      	ldrb	r3, [r7, #31]
 80032c4:	4413      	add	r3, r2
 80032c6:	461a      	mov	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	441a      	add	r2, r3
 80032cc:	7ffb      	ldrb	r3, [r7, #31]
 80032ce:	7811      	ldrb	r1, [r2, #0]
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 80032d4:	7ffb      	ldrb	r3, [r7, #31]
 80032d6:	3301      	adds	r3, #1
 80032d8:	77fb      	strb	r3, [r7, #31]
 80032da:	7ffa      	ldrb	r2, [r7, #31]
 80032dc:	7f7b      	ldrb	r3, [r7, #29]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d3e6      	bcc.n	80032b0 <extract_filename_suffix+0x6c>
 80032e2:	e000      	b.n	80032e6 <extract_filename_suffix+0xa2>
		}
		else break;
 80032e4:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f107 0110 	add.w	r1, r7, #16
 80032ec:	220a      	movs	r2, #10
 80032ee:	4618      	mov	r0, r3
 80032f0:	f019 fa14 	bl	801c71c <strtol>
 80032f4:	4603      	mov	r3, r0
 80032f6:	461a      	mov	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	429a      	cmp	r2, r3
 8003302:	d00a      	beq.n	800331a <extract_filename_suffix+0xd6>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800330c:	d005      	beq.n	800331a <extract_filename_suffix+0xd6>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003316:	4293      	cmp	r3, r2
 8003318:	d101      	bne.n	800331e <extract_filename_suffix+0xda>
	{
		return 1;
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <extract_filename_suffix+0xdc>
	}

	return 0;
 800331e:	2300      	movs	r3, #0
 8003320:	46ad      	mov	sp, r5
}
 8003322:	4618      	mov	r0, r3
 8003324:	3720      	adds	r7, #32
 8003326:	46bd      	mov	sp, r7
 8003328:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800332c <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 800332c:	b590      	push	{r4, r7, lr}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8003336:	2300      	movs	r3, #0
 8003338:	73fb      	strb	r3, [r7, #15]
 800333a:	e019      	b.n	8003370 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	4413      	add	r3, r2
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	73bb      	strb	r3, [r7, #14]
 8003346:	7bbb      	ldrb	r3, [r7, #14]
 8003348:	3301      	adds	r3, #1
 800334a:	4a0f      	ldr	r2, [pc, #60]	; (8003388 <str2upper+0x5c>)
 800334c:	4413      	add	r3, r2
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d102      	bne.n	800335e <str2upper+0x32>
 8003358:	7bbb      	ldrb	r3, [r7, #14]
 800335a:	3b20      	subs	r3, #32
 800335c:	e000      	b.n	8003360 <str2upper+0x34>
 800335e:	7bbb      	ldrb	r3, [r7, #14]
 8003360:	7bfa      	ldrb	r2, [r7, #15]
 8003362:	6839      	ldr	r1, [r7, #0]
 8003364:	440a      	add	r2, r1
 8003366:	b2db      	uxtb	r3, r3
 8003368:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	3301      	adds	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
 8003370:	7bfc      	ldrb	r4, [r7, #15]
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fc ff46 	bl	8000204 <strlen>
 8003378:	4603      	mov	r3, r0
 800337a:	429c      	cmp	r4, r3
 800337c:	d3de      	bcc.n	800333c <str2upper+0x10>
	}
}
 800337e:	bf00      	nop
 8003380:	bf00      	nop
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	bd90      	pop	{r4, r7, pc}
 8003388:	08021f60 	.word	0x08021f60

0800338c <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af02      	add	r7, sp, #8
 8003392:	4603      	mov	r3, r0
 8003394:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8003396:	f107 020f 	add.w	r2, r7, #15
 800339a:	1df9      	adds	r1, r7, #7
 800339c:	2364      	movs	r3, #100	; 0x64
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	2301      	movs	r3, #1
 80033a2:	4804      	ldr	r0, [pc, #16]	; (80033b4 <W25qxx_Spi+0x28>)
 80033a4:	f00a fdea 	bl	800df7c <HAL_SPI_TransmitReceive>
	return ret;
 80033a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20006070 	.word	0x20006070

080033b8 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	2300      	movs	r3, #0
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	2300      	movs	r3, #0
 80033c8:	607b      	str	r3, [r7, #4]
 80033ca:	2300      	movs	r3, #0
 80033cc:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80033ce:	2200      	movs	r2, #0
 80033d0:	2140      	movs	r1, #64	; 0x40
 80033d2:	4813      	ldr	r0, [pc, #76]	; (8003420 <W25qxx_ReadID+0x68>)
 80033d4:	f006 fd24 	bl	8009e20 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 80033d8:	209f      	movs	r0, #159	; 0x9f
 80033da:	f7ff ffd7 	bl	800338c <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80033de:	20a5      	movs	r0, #165	; 0xa5
 80033e0:	f7ff ffd4 	bl	800338c <W25qxx_Spi>
 80033e4:	4603      	mov	r3, r0
 80033e6:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80033e8:	20a5      	movs	r0, #165	; 0xa5
 80033ea:	f7ff ffcf 	bl	800338c <W25qxx_Spi>
 80033ee:	4603      	mov	r3, r0
 80033f0:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80033f2:	20a5      	movs	r0, #165	; 0xa5
 80033f4:	f7ff ffca 	bl	800338c <W25qxx_Spi>
 80033f8:	4603      	mov	r3, r0
 80033fa:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80033fc:	2201      	movs	r2, #1
 80033fe:	2140      	movs	r1, #64	; 0x40
 8003400:	4807      	ldr	r0, [pc, #28]	; (8003420 <W25qxx_ReadID+0x68>)
 8003402:	f006 fd0d 	bl	8009e20 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	041a      	lsls	r2, r3, #16
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	021b      	lsls	r3, r3, #8
 800340e:	4313      	orrs	r3, r2
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]
	return Temp;
 8003416:	68fb      	ldr	r3, [r7, #12]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40020c00 	.word	0x40020c00

08003424 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8003424:	b590      	push	{r4, r7, lr}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800342a:	2200      	movs	r2, #0
 800342c:	2140      	movs	r1, #64	; 0x40
 800342e:	4816      	ldr	r0, [pc, #88]	; (8003488 <W25qxx_ReadUniqID+0x64>)
 8003430:	f006 fcf6 	bl	8009e20 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8003434:	204b      	movs	r0, #75	; 0x4b
 8003436:	f7ff ffa9 	bl	800338c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800343a:	2300      	movs	r3, #0
 800343c:	71fb      	strb	r3, [r7, #7]
 800343e:	e005      	b.n	800344c <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003440:	20a5      	movs	r0, #165	; 0xa5
 8003442:	f7ff ffa3 	bl	800338c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	3301      	adds	r3, #1
 800344a:	71fb      	strb	r3, [r7, #7]
 800344c:	79fb      	ldrb	r3, [r7, #7]
 800344e:	2b03      	cmp	r3, #3
 8003450:	d9f6      	bls.n	8003440 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8003452:	2300      	movs	r3, #0
 8003454:	71bb      	strb	r3, [r7, #6]
 8003456:	e00b      	b.n	8003470 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003458:	79bc      	ldrb	r4, [r7, #6]
 800345a:	20a5      	movs	r0, #165	; 0xa5
 800345c:	f7ff ff96 	bl	800338c <W25qxx_Spi>
 8003460:	4603      	mov	r3, r0
 8003462:	461a      	mov	r2, r3
 8003464:	4b09      	ldr	r3, [pc, #36]	; (800348c <W25qxx_ReadUniqID+0x68>)
 8003466:	4423      	add	r3, r4
 8003468:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 800346a:	79bb      	ldrb	r3, [r7, #6]
 800346c:	3301      	adds	r3, #1
 800346e:	71bb      	strb	r3, [r7, #6]
 8003470:	79bb      	ldrb	r3, [r7, #6]
 8003472:	2b07      	cmp	r3, #7
 8003474:	d9f0      	bls.n	8003458 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003476:	2201      	movs	r2, #1
 8003478:	2140      	movs	r1, #64	; 0x40
 800347a:	4803      	ldr	r0, [pc, #12]	; (8003488 <W25qxx_ReadUniqID+0x64>)
 800347c:	f006 fcd0 	bl	8009e20 <HAL_GPIO_WritePin>
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	bd90      	pop	{r4, r7, pc}
 8003488:	40020c00 	.word	0x40020c00
 800348c:	20006ed8 	.word	0x20006ed8

08003490 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003494:	2200      	movs	r2, #0
 8003496:	2140      	movs	r1, #64	; 0x40
 8003498:	4807      	ldr	r0, [pc, #28]	; (80034b8 <W25qxx_WriteEnable+0x28>)
 800349a:	f006 fcc1 	bl	8009e20 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 800349e:	2006      	movs	r0, #6
 80034a0:	f7ff ff74 	bl	800338c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80034a4:	2201      	movs	r2, #1
 80034a6:	2140      	movs	r1, #64	; 0x40
 80034a8:	4803      	ldr	r0, [pc, #12]	; (80034b8 <W25qxx_WriteEnable+0x28>)
 80034aa:	f006 fcb9 	bl	8009e20 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80034ae:	2001      	movs	r0, #1
 80034b0:	f012 fcac 	bl	8015e0c <osDelay>
}
 80034b4:	bf00      	nop
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40020c00 	.word	0x40020c00

080034bc <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80034ca:	2200      	movs	r2, #0
 80034cc:	2140      	movs	r1, #64	; 0x40
 80034ce:	481c      	ldr	r0, [pc, #112]	; (8003540 <W25qxx_ReadStatusRegister+0x84>)
 80034d0:	f006 fca6 	bl	8009e20 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d10c      	bne.n	80034f4 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 80034da:	2005      	movs	r0, #5
 80034dc:	f7ff ff56 	bl	800338c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80034e0:	20a5      	movs	r0, #165	; 0xa5
 80034e2:	f7ff ff53 	bl	800338c <W25qxx_Spi>
 80034e6:	4603      	mov	r3, r0
 80034e8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80034ea:	4a16      	ldr	r2, [pc, #88]	; (8003544 <W25qxx_ReadStatusRegister+0x88>)
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
 80034ee:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80034f2:	e01b      	b.n	800352c <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d10c      	bne.n	8003514 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 80034fa:	2035      	movs	r0, #53	; 0x35
 80034fc:	f7ff ff46 	bl	800338c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003500:	20a5      	movs	r0, #165	; 0xa5
 8003502:	f7ff ff43 	bl	800338c <W25qxx_Spi>
 8003506:	4603      	mov	r3, r0
 8003508:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 800350a:	4a0e      	ldr	r2, [pc, #56]	; (8003544 <W25qxx_ReadStatusRegister+0x88>)
 800350c:	7bfb      	ldrb	r3, [r7, #15]
 800350e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8003512:	e00b      	b.n	800352c <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8003514:	2015      	movs	r0, #21
 8003516:	f7ff ff39 	bl	800338c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800351a:	20a5      	movs	r0, #165	; 0xa5
 800351c:	f7ff ff36 	bl	800338c <W25qxx_Spi>
 8003520:	4603      	mov	r3, r0
 8003522:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8003524:	4a07      	ldr	r2, [pc, #28]	; (8003544 <W25qxx_ReadStatusRegister+0x88>)
 8003526:	7bfb      	ldrb	r3, [r7, #15]
 8003528:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800352c:	2201      	movs	r2, #1
 800352e:	2140      	movs	r1, #64	; 0x40
 8003530:	4803      	ldr	r0, [pc, #12]	; (8003540 <W25qxx_ReadStatusRegister+0x84>)
 8003532:	f006 fc75 	bl	8009e20 <HAL_GPIO_WritePin>
	return status;
 8003536:	7bfb      	ldrb	r3, [r7, #15]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40020c00 	.word	0x40020c00
 8003544:	20006ed8 	.word	0x20006ed8

08003548 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 800354c:	2001      	movs	r0, #1
 800354e:	f012 fc5d 	bl	8015e0c <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003552:	2200      	movs	r2, #0
 8003554:	2140      	movs	r1, #64	; 0x40
 8003556:	480f      	ldr	r0, [pc, #60]	; (8003594 <W25qxx_WaitForWriteEnd+0x4c>)
 8003558:	f006 fc62 	bl	8009e20 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 800355c:	2005      	movs	r0, #5
 800355e:	f7ff ff15 	bl	800338c <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003562:	20a5      	movs	r0, #165	; 0xa5
 8003564:	f7ff ff12 	bl	800338c <W25qxx_Spi>
 8003568:	4603      	mov	r3, r0
 800356a:	461a      	mov	r2, r3
 800356c:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <W25qxx_WaitForWriteEnd+0x50>)
 800356e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8003572:	2001      	movs	r0, #1
 8003574:	f012 fc4a 	bl	8015e0c <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003578:	4b07      	ldr	r3, [pc, #28]	; (8003598 <W25qxx_WaitForWriteEnd+0x50>)
 800357a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1ed      	bne.n	8003562 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003586:	2201      	movs	r2, #1
 8003588:	2140      	movs	r1, #64	; 0x40
 800358a:	4802      	ldr	r0, [pc, #8]	; (8003594 <W25qxx_WaitForWriteEnd+0x4c>)
 800358c:	f006 fc48 	bl	8009e20 <HAL_GPIO_WritePin>
}
 8003590:	bf00      	nop
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40020c00 	.word	0x40020c00
 8003598:	20006ed8 	.word	0x20006ed8

0800359c <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 80035a2:	4b90      	ldr	r3, [pc, #576]	; (80037e4 <W25qxx_Init+0x248>)
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 80035aa:	e002      	b.n	80035b2 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 80035ac:	2001      	movs	r0, #1
 80035ae:	f012 fc2d 	bl	8015e0c <osDelay>
	while (HAL_GetTick() < 100)
 80035b2:	f005 febb 	bl	800932c <HAL_GetTick>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b63      	cmp	r3, #99	; 0x63
 80035ba:	d9f7      	bls.n	80035ac <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80035bc:	2201      	movs	r2, #1
 80035be:	2140      	movs	r1, #64	; 0x40
 80035c0:	4889      	ldr	r0, [pc, #548]	; (80037e8 <W25qxx_Init+0x24c>)
 80035c2:	f006 fc2d 	bl	8009e20 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 80035c6:	2064      	movs	r0, #100	; 0x64
 80035c8:	f012 fc20 	bl	8015e0c <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 80035cc:	4887      	ldr	r0, [pc, #540]	; (80037ec <W25qxx_Init+0x250>)
 80035ce:	f018 f811 	bl	801b5f4 <puts>
#endif
	id = W25qxx_ReadID();
 80035d2:	f7ff fef1 	bl	80033b8 <W25qxx_ReadID>
 80035d6:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	4885      	ldr	r0, [pc, #532]	; (80037f0 <W25qxx_Init+0x254>)
 80035dc:	f017 ff84 	bl	801b4e8 <iprintf>
#endif
	switch (id & 0x000000FF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	3b11      	subs	r3, #17
 80035e6:	2b0f      	cmp	r3, #15
 80035e8:	f200 808b 	bhi.w	8003702 <W25qxx_Init+0x166>
 80035ec:	a201      	add	r2, pc, #4	; (adr r2, 80035f4 <W25qxx_Init+0x58>)
 80035ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f2:	bf00      	nop
 80035f4:	080036ef 	.word	0x080036ef
 80035f8:	080036db 	.word	0x080036db
 80035fc:	080036c7 	.word	0x080036c7
 8003600:	080036b3 	.word	0x080036b3
 8003604:	0800369f 	.word	0x0800369f
 8003608:	0800368b 	.word	0x0800368b
 800360c:	08003677 	.word	0x08003677
 8003610:	08003661 	.word	0x08003661
 8003614:	0800364b 	.word	0x0800364b
 8003618:	08003703 	.word	0x08003703
 800361c:	08003703 	.word	0x08003703
 8003620:	08003703 	.word	0x08003703
 8003624:	08003703 	.word	0x08003703
 8003628:	08003703 	.word	0x08003703
 800362c:	08003703 	.word	0x08003703
 8003630:	08003635 	.word	0x08003635
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8003634:	4b6b      	ldr	r3, [pc, #428]	; (80037e4 <W25qxx_Init+0x248>)
 8003636:	220a      	movs	r2, #10
 8003638:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800363a:	4b6a      	ldr	r3, [pc, #424]	; (80037e4 <W25qxx_Init+0x248>)
 800363c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003640:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 8003642:	486c      	ldr	r0, [pc, #432]	; (80037f4 <W25qxx_Init+0x258>)
 8003644:	f017 ffd6 	bl	801b5f4 <puts>
#endif
		break;
 8003648:	e064      	b.n	8003714 <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 800364a:	4b66      	ldr	r3, [pc, #408]	; (80037e4 <W25qxx_Init+0x248>)
 800364c:	2209      	movs	r2, #9
 800364e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8003650:	4b64      	ldr	r3, [pc, #400]	; (80037e4 <W25qxx_Init+0x248>)
 8003652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003656:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8003658:	4867      	ldr	r0, [pc, #412]	; (80037f8 <W25qxx_Init+0x25c>)
 800365a:	f017 ffcb 	bl	801b5f4 <puts>
#endif
		break;
 800365e:	e059      	b.n	8003714 <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8003660:	4b60      	ldr	r3, [pc, #384]	; (80037e4 <W25qxx_Init+0x248>)
 8003662:	2208      	movs	r2, #8
 8003664:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8003666:	4b5f      	ldr	r3, [pc, #380]	; (80037e4 <W25qxx_Init+0x248>)
 8003668:	f44f 7280 	mov.w	r2, #256	; 0x100
 800366c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 800366e:	4863      	ldr	r0, [pc, #396]	; (80037fc <W25qxx_Init+0x260>)
 8003670:	f017 ffc0 	bl	801b5f4 <puts>
#endif
		break;
 8003674:	e04e      	b.n	8003714 <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8003676:	4b5b      	ldr	r3, [pc, #364]	; (80037e4 <W25qxx_Init+0x248>)
 8003678:	2207      	movs	r2, #7
 800367a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 800367c:	4b59      	ldr	r3, [pc, #356]	; (80037e4 <W25qxx_Init+0x248>)
 800367e:	2280      	movs	r2, #128	; 0x80
 8003680:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 8003682:	485f      	ldr	r0, [pc, #380]	; (8003800 <W25qxx_Init+0x264>)
 8003684:	f017 ffb6 	bl	801b5f4 <puts>
#endif
		break;
 8003688:	e044      	b.n	8003714 <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 800368a:	4b56      	ldr	r3, [pc, #344]	; (80037e4 <W25qxx_Init+0x248>)
 800368c:	2206      	movs	r2, #6
 800368e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8003690:	4b54      	ldr	r3, [pc, #336]	; (80037e4 <W25qxx_Init+0x248>)
 8003692:	2240      	movs	r2, #64	; 0x40
 8003694:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 8003696:	485b      	ldr	r0, [pc, #364]	; (8003804 <W25qxx_Init+0x268>)
 8003698:	f017 ffac 	bl	801b5f4 <puts>
#endif
		break;
 800369c:	e03a      	b.n	8003714 <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 800369e:	4b51      	ldr	r3, [pc, #324]	; (80037e4 <W25qxx_Init+0x248>)
 80036a0:	2205      	movs	r2, #5
 80036a2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 80036a4:	4b4f      	ldr	r3, [pc, #316]	; (80037e4 <W25qxx_Init+0x248>)
 80036a6:	2220      	movs	r2, #32
 80036a8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 80036aa:	4857      	ldr	r0, [pc, #348]	; (8003808 <W25qxx_Init+0x26c>)
 80036ac:	f017 ffa2 	bl	801b5f4 <puts>
#endif
		break;
 80036b0:	e030      	b.n	8003714 <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 80036b2:	4b4c      	ldr	r3, [pc, #304]	; (80037e4 <W25qxx_Init+0x248>)
 80036b4:	2204      	movs	r2, #4
 80036b6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 80036b8:	4b4a      	ldr	r3, [pc, #296]	; (80037e4 <W25qxx_Init+0x248>)
 80036ba:	2210      	movs	r2, #16
 80036bc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 80036be:	4853      	ldr	r0, [pc, #332]	; (800380c <W25qxx_Init+0x270>)
 80036c0:	f017 ff98 	bl	801b5f4 <puts>
#endif
		break;
 80036c4:	e026      	b.n	8003714 <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 80036c6:	4b47      	ldr	r3, [pc, #284]	; (80037e4 <W25qxx_Init+0x248>)
 80036c8:	2203      	movs	r2, #3
 80036ca:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 80036cc:	4b45      	ldr	r3, [pc, #276]	; (80037e4 <W25qxx_Init+0x248>)
 80036ce:	2208      	movs	r2, #8
 80036d0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 80036d2:	484f      	ldr	r0, [pc, #316]	; (8003810 <W25qxx_Init+0x274>)
 80036d4:	f017 ff8e 	bl	801b5f4 <puts>
#endif
		break;
 80036d8:	e01c      	b.n	8003714 <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 80036da:	4b42      	ldr	r3, [pc, #264]	; (80037e4 <W25qxx_Init+0x248>)
 80036dc:	2202      	movs	r2, #2
 80036de:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 80036e0:	4b40      	ldr	r3, [pc, #256]	; (80037e4 <W25qxx_Init+0x248>)
 80036e2:	2204      	movs	r2, #4
 80036e4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 80036e6:	484b      	ldr	r0, [pc, #300]	; (8003814 <W25qxx_Init+0x278>)
 80036e8:	f017 ff84 	bl	801b5f4 <puts>
#endif
		break;
 80036ec:	e012      	b.n	8003714 <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 80036ee:	4b3d      	ldr	r3, [pc, #244]	; (80037e4 <W25qxx_Init+0x248>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 80036f4:	4b3b      	ldr	r3, [pc, #236]	; (80037e4 <W25qxx_Init+0x248>)
 80036f6:	2202      	movs	r2, #2
 80036f8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 80036fa:	4847      	ldr	r0, [pc, #284]	; (8003818 <W25qxx_Init+0x27c>)
 80036fc:	f017 ff7a 	bl	801b5f4 <puts>
#endif
		break;
 8003700:	e008      	b.n	8003714 <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 8003702:	4846      	ldr	r0, [pc, #280]	; (800381c <W25qxx_Init+0x280>)
 8003704:	f017 ff76 	bl	801b5f4 <puts>
#endif
		w25qxx.Lock = 0;
 8003708:	4b36      	ldr	r3, [pc, #216]	; (80037e4 <W25qxx_Init+0x248>)
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8003710:	2300      	movs	r3, #0
 8003712:	e063      	b.n	80037dc <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 8003714:	4b33      	ldr	r3, [pc, #204]	; (80037e4 <W25qxx_Init+0x248>)
 8003716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800371a:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800371c:	4b31      	ldr	r3, [pc, #196]	; (80037e4 <W25qxx_Init+0x248>)
 800371e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003722:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8003724:	4b2f      	ldr	r3, [pc, #188]	; (80037e4 <W25qxx_Init+0x248>)
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	4a2e      	ldr	r2, [pc, #184]	; (80037e4 <W25qxx_Init+0x248>)
 800372c:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800372e:	4b2d      	ldr	r3, [pc, #180]	; (80037e4 <W25qxx_Init+0x248>)
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	4a2c      	ldr	r2, [pc, #176]	; (80037e4 <W25qxx_Init+0x248>)
 8003734:	6912      	ldr	r2, [r2, #16]
 8003736:	fb02 f303 	mul.w	r3, r2, r3
 800373a:	4a2a      	ldr	r2, [pc, #168]	; (80037e4 <W25qxx_Init+0x248>)
 800373c:	8952      	ldrh	r2, [r2, #10]
 800373e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003742:	4a28      	ldr	r2, [pc, #160]	; (80037e4 <W25qxx_Init+0x248>)
 8003744:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8003746:	4b27      	ldr	r3, [pc, #156]	; (80037e4 <W25qxx_Init+0x248>)
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	4a25      	ldr	r2, [pc, #148]	; (80037e4 <W25qxx_Init+0x248>)
 800374e:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8003750:	4b24      	ldr	r3, [pc, #144]	; (80037e4 <W25qxx_Init+0x248>)
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	4a23      	ldr	r2, [pc, #140]	; (80037e4 <W25qxx_Init+0x248>)
 8003756:	6912      	ldr	r2, [r2, #16]
 8003758:	fb02 f303 	mul.w	r3, r2, r3
 800375c:	0a9b      	lsrs	r3, r3, #10
 800375e:	4a21      	ldr	r2, [pc, #132]	; (80037e4 <W25qxx_Init+0x248>)
 8003760:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8003762:	f7ff fe5f 	bl	8003424 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8003766:	2001      	movs	r0, #1
 8003768:	f7ff fea8 	bl	80034bc <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800376c:	2002      	movs	r0, #2
 800376e:	f7ff fea5 	bl	80034bc <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8003772:	2003      	movs	r0, #3
 8003774:	f7ff fea2 	bl	80034bc <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 8003778:	4b1a      	ldr	r3, [pc, #104]	; (80037e4 <W25qxx_Init+0x248>)
 800377a:	895b      	ldrh	r3, [r3, #10]
 800377c:	4619      	mov	r1, r3
 800377e:	4828      	ldr	r0, [pc, #160]	; (8003820 <W25qxx_Init+0x284>)
 8003780:	f017 feb2 	bl	801b4e8 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 8003784:	4b17      	ldr	r3, [pc, #92]	; (80037e4 <W25qxx_Init+0x248>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	4619      	mov	r1, r3
 800378a:	4826      	ldr	r0, [pc, #152]	; (8003824 <W25qxx_Init+0x288>)
 800378c:	f017 feac 	bl	801b4e8 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 8003790:	4b14      	ldr	r3, [pc, #80]	; (80037e4 <W25qxx_Init+0x248>)
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	4619      	mov	r1, r3
 8003796:	4824      	ldr	r0, [pc, #144]	; (8003828 <W25qxx_Init+0x28c>)
 8003798:	f017 fea6 	bl	801b4e8 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 800379c:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <W25qxx_Init+0x248>)
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	4619      	mov	r1, r3
 80037a2:	4822      	ldr	r0, [pc, #136]	; (800382c <W25qxx_Init+0x290>)
 80037a4:	f017 fea0 	bl	801b4e8 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 80037a8:	4b0e      	ldr	r3, [pc, #56]	; (80037e4 <W25qxx_Init+0x248>)
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	4619      	mov	r1, r3
 80037ae:	4820      	ldr	r0, [pc, #128]	; (8003830 <W25qxx_Init+0x294>)
 80037b0:	f017 fe9a 	bl	801b4e8 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <W25qxx_Init+0x248>)
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	4619      	mov	r1, r3
 80037ba:	481e      	ldr	r0, [pc, #120]	; (8003834 <W25qxx_Init+0x298>)
 80037bc:	f017 fe94 	bl	801b4e8 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 80037c0:	4b08      	ldr	r3, [pc, #32]	; (80037e4 <W25qxx_Init+0x248>)
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	4619      	mov	r1, r3
 80037c6:	481c      	ldr	r0, [pc, #112]	; (8003838 <W25qxx_Init+0x29c>)
 80037c8:	f017 fe8e 	bl	801b4e8 <iprintf>
	printf("w25qxx Init Done\r\n");
 80037cc:	481b      	ldr	r0, [pc, #108]	; (800383c <W25qxx_Init+0x2a0>)
 80037ce:	f017 ff11 	bl	801b5f4 <puts>
#endif
	w25qxx.Lock = 0;
 80037d2:	4b04      	ldr	r3, [pc, #16]	; (80037e4 <W25qxx_Init+0x248>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 80037da:	2301      	movs	r3, #1
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	20006ed8 	.word	0x20006ed8
 80037e8:	40020c00 	.word	0x40020c00
 80037ec:	0802042c 	.word	0x0802042c
 80037f0:	08020444 	.word	0x08020444
 80037f4:	08020458 	.word	0x08020458
 80037f8:	08020470 	.word	0x08020470
 80037fc:	08020488 	.word	0x08020488
 8003800:	080204a0 	.word	0x080204a0
 8003804:	080204b8 	.word	0x080204b8
 8003808:	080204d0 	.word	0x080204d0
 800380c:	080204e8 	.word	0x080204e8
 8003810:	08020500 	.word	0x08020500
 8003814:	08020518 	.word	0x08020518
 8003818:	08020530 	.word	0x08020530
 800381c:	08020548 	.word	0x08020548
 8003820:	0802055c 	.word	0x0802055c
 8003824:	0802057c 	.word	0x0802057c
 8003828:	08020594 	.word	0x08020594
 800382c:	080205b4 	.word	0x080205b4
 8003830:	080205d0 	.word	0x080205d0
 8003834:	080205f0 	.word	0x080205f0
 8003838:	0802060c 	.word	0x0802060c
 800383c:	0802062c 	.word	0x0802062c

08003840 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8003848:	e002      	b.n	8003850 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 800384a:	2001      	movs	r0, #1
 800384c:	f012 fade 	bl	8015e0c <osDelay>
	while (w25qxx.Lock == 1)
 8003850:	4b2d      	ldr	r3, [pc, #180]	; (8003908 <W25qxx_EraseSector+0xc8>)
 8003852:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003856:	2b01      	cmp	r3, #1
 8003858:	d0f7      	beq.n	800384a <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 800385a:	4b2b      	ldr	r3, [pc, #172]	; (8003908 <W25qxx_EraseSector+0xc8>)
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 8003862:	f005 fd63 	bl	800932c <HAL_GetTick>
 8003866:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	4828      	ldr	r0, [pc, #160]	; (800390c <W25qxx_EraseSector+0xcc>)
 800386c:	f017 fe3c 	bl	801b4e8 <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 8003870:	f7ff fe6a 	bl	8003548 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8003874:	4b24      	ldr	r3, [pc, #144]	; (8003908 <W25qxx_EraseSector+0xc8>)
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	fb02 f303 	mul.w	r3, r2, r3
 800387e:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8003880:	f7ff fe06 	bl	8003490 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003884:	2200      	movs	r2, #0
 8003886:	2140      	movs	r1, #64	; 0x40
 8003888:	4821      	ldr	r0, [pc, #132]	; (8003910 <W25qxx_EraseSector+0xd0>)
 800388a:	f006 fac9 	bl	8009e20 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800388e:	4b1e      	ldr	r3, [pc, #120]	; (8003908 <W25qxx_EraseSector+0xc8>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b08      	cmp	r3, #8
 8003894:	d909      	bls.n	80038aa <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 8003896:	2021      	movs	r0, #33	; 0x21
 8003898:	f7ff fd78 	bl	800338c <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	0e1b      	lsrs	r3, r3, #24
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff fd72 	bl	800338c <W25qxx_Spi>
 80038a8:	e002      	b.n	80038b0 <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 80038aa:	2020      	movs	r0, #32
 80038ac:	f7ff fd6e 	bl	800338c <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	0c1b      	lsrs	r3, r3, #16
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff fd68 	bl	800338c <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	0a1b      	lsrs	r3, r3, #8
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff fd62 	bl	800338c <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff fd5d 	bl	800338c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80038d2:	2201      	movs	r2, #1
 80038d4:	2140      	movs	r1, #64	; 0x40
 80038d6:	480e      	ldr	r0, [pc, #56]	; (8003910 <W25qxx_EraseSector+0xd0>)
 80038d8:	f006 faa2 	bl	8009e20 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80038dc:	f7ff fe34 	bl	8003548 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 80038e0:	f005 fd24 	bl	800932c <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	4619      	mov	r1, r3
 80038ec:	4809      	ldr	r0, [pc, #36]	; (8003914 <W25qxx_EraseSector+0xd4>)
 80038ee:	f017 fdfb 	bl	801b4e8 <iprintf>
#endif
	W25qxx_Delay(1);
 80038f2:	2001      	movs	r0, #1
 80038f4:	f012 fa8a 	bl	8015e0c <osDelay>
	w25qxx.Lock = 0;
 80038f8:	4b03      	ldr	r3, [pc, #12]	; (8003908 <W25qxx_EraseSector+0xc8>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003900:	bf00      	nop
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	20006ed8 	.word	0x20006ed8
 800390c:	08020684 	.word	0x08020684
 8003910:	40020c00 	.word	0x40020c00
 8003914:	080206a8 	.word	0x080206a8

08003918 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8003920:	4b07      	ldr	r3, [pc, #28]	; (8003940 <W25qxx_SectorToPage+0x28>)
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	fb02 f303 	mul.w	r3, r2, r3
 800392a:	4a05      	ldr	r2, [pc, #20]	; (8003940 <W25qxx_SectorToPage+0x28>)
 800392c:	8952      	ldrh	r2, [r2, #10]
 800392e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8003932:	4618      	mov	r0, r3
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	20006ed8 	.word	0x20006ed8

08003944 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8003952:	e002      	b.n	800395a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8003954:	2001      	movs	r0, #1
 8003956:	f012 fa59 	bl	8015e0c <osDelay>
	while (w25qxx.Lock == 1)
 800395a:	4b57      	ldr	r3, [pc, #348]	; (8003ab8 <W25qxx_WritePage+0x174>)
 800395c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003960:	2b01      	cmp	r3, #1
 8003962:	d0f7      	beq.n	8003954 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8003964:	4b54      	ldr	r3, [pc, #336]	; (8003ab8 <W25qxx_WritePage+0x174>)
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4413      	add	r3, r2
 8003972:	4a51      	ldr	r2, [pc, #324]	; (8003ab8 <W25qxx_WritePage+0x174>)
 8003974:	8952      	ldrh	r2, [r2, #10]
 8003976:	4293      	cmp	r3, r2
 8003978:	d802      	bhi.n	8003980 <W25qxx_WritePage+0x3c>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d105      	bne.n	800398c <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003980:	4b4d      	ldr	r3, [pc, #308]	; (8003ab8 <W25qxx_WritePage+0x174>)
 8003982:	895b      	ldrh	r3, [r3, #10]
 8003984:	461a      	mov	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	4413      	add	r3, r2
 8003992:	4a49      	ldr	r2, [pc, #292]	; (8003ab8 <W25qxx_WritePage+0x174>)
 8003994:	8952      	ldrh	r2, [r2, #10]
 8003996:	4293      	cmp	r3, r2
 8003998:	d905      	bls.n	80039a6 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800399a:	4b47      	ldr	r3, [pc, #284]	; (8003ab8 <W25qxx_WritePage+0x174>)
 800399c:	895b      	ldrh	r3, [r3, #10]
 800399e:	461a      	mov	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	68b9      	ldr	r1, [r7, #8]
 80039ac:	4843      	ldr	r0, [pc, #268]	; (8003abc <W25qxx_WritePage+0x178>)
 80039ae:	f017 fd9b 	bl	801b4e8 <iprintf>
	W25qxx_Delay(100);
 80039b2:	2064      	movs	r0, #100	; 0x64
 80039b4:	f012 fa2a 	bl	8015e0c <osDelay>
	uint32_t StartTime = HAL_GetTick();
 80039b8:	f005 fcb8 	bl	800932c <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 80039be:	f7ff fdc3 	bl	8003548 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 80039c2:	f7ff fd65 	bl	8003490 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80039c6:	2200      	movs	r2, #0
 80039c8:	2140      	movs	r1, #64	; 0x40
 80039ca:	483d      	ldr	r0, [pc, #244]	; (8003ac0 <W25qxx_WritePage+0x17c>)
 80039cc:	f006 fa28 	bl	8009e20 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 80039d0:	4b39      	ldr	r3, [pc, #228]	; (8003ab8 <W25qxx_WritePage+0x174>)
 80039d2:	895b      	ldrh	r3, [r3, #10]
 80039d4:	461a      	mov	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	fb03 f302 	mul.w	r3, r3, r2
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	4413      	add	r3, r2
 80039e0:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 80039e2:	4b35      	ldr	r3, [pc, #212]	; (8003ab8 <W25qxx_WritePage+0x174>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d909      	bls.n	80039fe <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 80039ea:	2012      	movs	r0, #18
 80039ec:	f7ff fcce 	bl	800338c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	0e1b      	lsrs	r3, r3, #24
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff fcc8 	bl	800338c <W25qxx_Spi>
 80039fc:	e002      	b.n	8003a04 <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 80039fe:	2002      	movs	r0, #2
 8003a00:	f7ff fcc4 	bl	800338c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	0c1b      	lsrs	r3, r3, #16
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff fcbe 	bl	800338c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	0a1b      	lsrs	r3, r3, #8
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff fcb8 	bl	800338c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fcb3 	bl	800338c <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	2364      	movs	r3, #100	; 0x64
 8003a2c:	68f9      	ldr	r1, [r7, #12]
 8003a2e:	4825      	ldr	r0, [pc, #148]	; (8003ac4 <W25qxx_WritePage+0x180>)
 8003a30:	f00a f857 	bl	800dae2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003a34:	2201      	movs	r2, #1
 8003a36:	2140      	movs	r1, #64	; 0x40
 8003a38:	4821      	ldr	r0, [pc, #132]	; (8003ac0 <W25qxx_WritePage+0x17c>)
 8003a3a:	f006 f9f1 	bl	8009e20 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8003a3e:	f7ff fd83 	bl	8003548 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8003a42:	f005 fc73 	bl	800932c <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	e018      	b.n	8003a86 <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d108      	bne.n	8003a70 <W25qxx_WritePage+0x12c>
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d905      	bls.n	8003a70 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 8003a64:	4818      	ldr	r0, [pc, #96]	; (8003ac8 <W25qxx_WritePage+0x184>)
 8003a66:	f017 fdc5 	bl	801b5f4 <puts>
			W25qxx_Delay(10);
 8003a6a:	200a      	movs	r0, #10
 8003a6c:	f012 f9ce 	bl	8015e0c <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	4413      	add	r3, r2
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4814      	ldr	r0, [pc, #80]	; (8003acc <W25qxx_WritePage+0x188>)
 8003a7c:	f017 fd34 	bl	801b4e8 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	3301      	adds	r3, #1
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d3e2      	bcc.n	8003a54 <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 8003a8e:	480e      	ldr	r0, [pc, #56]	; (8003ac8 <W25qxx_WritePage+0x184>)
 8003a90:	f017 fdb0 	bl	801b5f4 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 8003a94:	6939      	ldr	r1, [r7, #16]
 8003a96:	480e      	ldr	r0, [pc, #56]	; (8003ad0 <W25qxx_WritePage+0x18c>)
 8003a98:	f017 fd26 	bl	801b4e8 <iprintf>
	W25qxx_Delay(100);
 8003a9c:	2064      	movs	r0, #100	; 0x64
 8003a9e:	f012 f9b5 	bl	8015e0c <osDelay>
#endif
	W25qxx_Delay(1);
 8003aa2:	2001      	movs	r0, #1
 8003aa4:	f012 f9b2 	bl	8015e0c <osDelay>
	w25qxx.Lock = 0;
 8003aa8:	4b03      	ldr	r3, [pc, #12]	; (8003ab8 <W25qxx_WritePage+0x174>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003ab0:	bf00      	nop
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20006ed8 	.word	0x20006ed8
 8003abc:	0802090c 	.word	0x0802090c
 8003ac0:	40020c00 	.word	0x40020c00
 8003ac4:	20006070 	.word	0x20006070
 8003ac8:	08020948 	.word	0x08020948
 8003acc:	0802094c 	.word	0x0802094c
 8003ad0:	08020954 	.word	0x08020954

08003ad4 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8003ae2:	4b36      	ldr	r3, [pc, #216]	; (8003bbc <W25qxx_WriteSector+0xe8>)
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d802      	bhi.n	8003af2 <W25qxx_WriteSector+0x1e>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d102      	bne.n	8003af8 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8003af2:	4b32      	ldr	r3, [pc, #200]	; (8003bbc <W25qxx_WriteSector+0xe8>)
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	68b9      	ldr	r1, [r7, #8]
 8003afe:	4830      	ldr	r0, [pc, #192]	; (8003bc0 <W25qxx_WriteSector+0xec>)
 8003b00:	f017 fcf2 	bl	801b4e8 <iprintf>
	W25qxx_Delay(100);
 8003b04:	2064      	movs	r0, #100	; 0x64
 8003b06:	f012 f981 	bl	8015e0c <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8003b0a:	4b2c      	ldr	r3, [pc, #176]	; (8003bbc <W25qxx_WriteSector+0xe8>)
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d306      	bcc.n	8003b22 <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 8003b14:	482b      	ldr	r0, [pc, #172]	; (8003bc4 <W25qxx_WriteSector+0xf0>)
 8003b16:	f017 fd6d 	bl	801b5f4 <puts>
		W25qxx_Delay(100);
 8003b1a:	2064      	movs	r0, #100	; 0x64
 8003b1c:	f012 f976 	bl	8015e0c <osDelay>
#endif
		return;
 8003b20:	e048      	b.n	8003bb4 <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	441a      	add	r2, r3
 8003b28:	4b24      	ldr	r3, [pc, #144]	; (8003bbc <W25qxx_WriteSector+0xe8>)
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d905      	bls.n	8003b3c <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8003b30:	4b22      	ldr	r3, [pc, #136]	; (8003bbc <W25qxx_WriteSector+0xe8>)
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	61bb      	str	r3, [r7, #24]
 8003b3a:	e001      	b.n	8003b40 <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8003b40:	68b8      	ldr	r0, [r7, #8]
 8003b42:	f7ff fee9 	bl	8003918 <W25qxx_SectorToPage>
 8003b46:	4602      	mov	r2, r0
 8003b48:	4b1c      	ldr	r3, [pc, #112]	; (8003bbc <W25qxx_WriteSector+0xe8>)
 8003b4a:	895b      	ldrh	r3, [r3, #10]
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b54:	4413      	add	r3, r2
 8003b56:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8003b58:	4b18      	ldr	r3, [pc, #96]	; (8003bbc <W25qxx_WriteSector+0xe8>)
 8003b5a:	895b      	ldrh	r3, [r3, #10]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b64:	fb02 f201 	mul.w	r2, r2, r1
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	69f9      	ldr	r1, [r7, #28]
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f7ff fee6 	bl	8003944 <W25qxx_WritePage>
		StartPage++;
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8003b7e:	4b0f      	ldr	r3, [pc, #60]	; (8003bbc <W25qxx_WriteSector+0xe8>)
 8003b80:	895b      	ldrh	r3, [r3, #10]
 8003b82:	461a      	mov	r2, r3
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	1a9a      	subs	r2, r3, r2
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8003b8e:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <W25qxx_WriteSector+0xe8>)
 8003b90:	895b      	ldrh	r3, [r3, #10]
 8003b92:	461a      	mov	r2, r3
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	dce1      	bgt.n	8003b6c <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 8003ba8:	4807      	ldr	r0, [pc, #28]	; (8003bc8 <W25qxx_WriteSector+0xf4>)
 8003baa:	f017 fd23 	bl	801b5f4 <puts>
	W25qxx_Delay(100);
 8003bae:	2064      	movs	r0, #100	; 0x64
 8003bb0:	f012 f92c 	bl	8015e0c <osDelay>
#endif
}
 8003bb4:	3720      	adds	r7, #32
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	20006ed8 	.word	0x20006ed8
 8003bc0:	08020978 	.word	0x08020978
 8003bc4:	080209b8 	.word	0x080209b8
 8003bc8:	080209d8 	.word	0x080209d8

08003bcc <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8003bda:	e002      	b.n	8003be2 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8003bdc:	2001      	movs	r0, #1
 8003bde:	f012 f915 	bl	8015e0c <osDelay>
	while (w25qxx.Lock == 1)
 8003be2:	4b54      	ldr	r3, [pc, #336]	; (8003d34 <W25qxx_ReadPage+0x168>)
 8003be4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d0f7      	beq.n	8003bdc <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8003bec:	4b51      	ldr	r3, [pc, #324]	; (8003d34 <W25qxx_ReadPage+0x168>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8003bf4:	4b4f      	ldr	r3, [pc, #316]	; (8003d34 <W25qxx_ReadPage+0x168>)
 8003bf6:	895b      	ldrh	r3, [r3, #10]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d802      	bhi.n	8003c06 <W25qxx_ReadPage+0x3a>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d102      	bne.n	8003c0c <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8003c06:	4b4b      	ldr	r3, [pc, #300]	; (8003d34 <W25qxx_ReadPage+0x168>)
 8003c08:	895b      	ldrh	r3, [r3, #10]
 8003c0a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	4413      	add	r3, r2
 8003c12:	4a48      	ldr	r2, [pc, #288]	; (8003d34 <W25qxx_ReadPage+0x168>)
 8003c14:	8952      	ldrh	r2, [r2, #10]
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d905      	bls.n	8003c26 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003c1a:	4b46      	ldr	r3, [pc, #280]	; (8003d34 <W25qxx_ReadPage+0x168>)
 8003c1c:	895b      	ldrh	r3, [r3, #10]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	68b9      	ldr	r1, [r7, #8]
 8003c2c:	4842      	ldr	r0, [pc, #264]	; (8003d38 <W25qxx_ReadPage+0x16c>)
 8003c2e:	f017 fc5b 	bl	801b4e8 <iprintf>
	W25qxx_Delay(100);
 8003c32:	2064      	movs	r0, #100	; 0x64
 8003c34:	f012 f8ea 	bl	8015e0c <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8003c38:	f005 fb78 	bl	800932c <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8003c3e:	4b3d      	ldr	r3, [pc, #244]	; (8003d34 <W25qxx_ReadPage+0x168>)
 8003c40:	895b      	ldrh	r3, [r3, #10]
 8003c42:	461a      	mov	r2, r3
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	fb03 f302 	mul.w	r3, r3, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003c50:	2200      	movs	r2, #0
 8003c52:	2140      	movs	r1, #64	; 0x40
 8003c54:	4839      	ldr	r0, [pc, #228]	; (8003d3c <W25qxx_ReadPage+0x170>)
 8003c56:	f006 f8e3 	bl	8009e20 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8003c5a:	4b36      	ldr	r3, [pc, #216]	; (8003d34 <W25qxx_ReadPage+0x168>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d909      	bls.n	8003c76 <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 8003c62:	200c      	movs	r0, #12
 8003c64:	f7ff fb92 	bl	800338c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	0e1b      	lsrs	r3, r3, #24
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff fb8c 	bl	800338c <W25qxx_Spi>
 8003c74:	e002      	b.n	8003c7c <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8003c76:	200b      	movs	r0, #11
 8003c78:	f7ff fb88 	bl	800338c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	0c1b      	lsrs	r3, r3, #16
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff fb82 	bl	800338c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	0a1b      	lsrs	r3, r3, #8
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff fb7c 	bl	800338c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff fb77 	bl	800338c <W25qxx_Spi>
	W25qxx_Spi(0);
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	f7ff fb74 	bl	800338c <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	2364      	movs	r3, #100	; 0x64
 8003caa:	68f9      	ldr	r1, [r7, #12]
 8003cac:	4824      	ldr	r0, [pc, #144]	; (8003d40 <W25qxx_ReadPage+0x174>)
 8003cae:	f00a f854 	bl	800dd5a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	2140      	movs	r1, #64	; 0x40
 8003cb6:	4821      	ldr	r0, [pc, #132]	; (8003d3c <W25qxx_ReadPage+0x170>)
 8003cb8:	f006 f8b2 	bl	8009e20 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8003cbc:	f005 fb36 	bl	800932c <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	e018      	b.n	8003d00 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d108      	bne.n	8003cea <W25qxx_ReadPage+0x11e>
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d905      	bls.n	8003cea <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 8003cde:	4819      	ldr	r0, [pc, #100]	; (8003d44 <W25qxx_ReadPage+0x178>)
 8003ce0:	f017 fc88 	bl	801b5f4 <puts>
			W25qxx_Delay(10);
 8003ce4:	200a      	movs	r0, #10
 8003ce6:	f012 f891 	bl	8015e0c <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	4413      	add	r3, r2
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4814      	ldr	r0, [pc, #80]	; (8003d48 <W25qxx_ReadPage+0x17c>)
 8003cf6:	f017 fbf7 	bl	801b4e8 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d3e2      	bcc.n	8003cce <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 8003d08:	480e      	ldr	r0, [pc, #56]	; (8003d44 <W25qxx_ReadPage+0x178>)
 8003d0a:	f017 fc73 	bl	801b5f4 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 8003d0e:	6939      	ldr	r1, [r7, #16]
 8003d10:	480e      	ldr	r0, [pc, #56]	; (8003d4c <W25qxx_ReadPage+0x180>)
 8003d12:	f017 fbe9 	bl	801b4e8 <iprintf>
	W25qxx_Delay(100);
 8003d16:	2064      	movs	r0, #100	; 0x64
 8003d18:	f012 f878 	bl	8015e0c <osDelay>
#endif
	W25qxx_Delay(1);
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	f012 f875 	bl	8015e0c <osDelay>
	w25qxx.Lock = 0;
 8003d22:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <W25qxx_ReadPage+0x168>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003d2a:	bf00      	nop
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20006ed8 	.word	0x20006ed8
 8003d38:	08020b24 	.word	0x08020b24
 8003d3c:	40020c00 	.word	0x40020c00
 8003d40:	20006070 	.word	0x20006070
 8003d44:	08020948 	.word	0x08020948
 8003d48:	0802094c 	.word	0x0802094c
 8003d4c:	08020b60 	.word	0x08020b60

08003d50 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8003d5e:	4b36      	ldr	r3, [pc, #216]	; (8003e38 <W25qxx_ReadSector+0xe8>)
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d802      	bhi.n	8003d6e <W25qxx_ReadSector+0x1e>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d102      	bne.n	8003d74 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8003d6e:	4b32      	ldr	r3, [pc, #200]	; (8003e38 <W25qxx_ReadSector+0xe8>)
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	68b9      	ldr	r1, [r7, #8]
 8003d7a:	4830      	ldr	r0, [pc, #192]	; (8003e3c <W25qxx_ReadSector+0xec>)
 8003d7c:	f017 fbb4 	bl	801b4e8 <iprintf>
	W25qxx_Delay(100);
 8003d80:	2064      	movs	r0, #100	; 0x64
 8003d82:	f012 f843 	bl	8015e0c <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8003d86:	4b2c      	ldr	r3, [pc, #176]	; (8003e38 <W25qxx_ReadSector+0xe8>)
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d306      	bcc.n	8003d9e <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 8003d90:	482b      	ldr	r0, [pc, #172]	; (8003e40 <W25qxx_ReadSector+0xf0>)
 8003d92:	f017 fc2f 	bl	801b5f4 <puts>
		W25qxx_Delay(100);
 8003d96:	2064      	movs	r0, #100	; 0x64
 8003d98:	f012 f838 	bl	8015e0c <osDelay>
#endif
		return;
 8003d9c:	e048      	b.n	8003e30 <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	441a      	add	r2, r3
 8003da4:	4b24      	ldr	r3, [pc, #144]	; (8003e38 <W25qxx_ReadSector+0xe8>)
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d905      	bls.n	8003db8 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8003dac:	4b22      	ldr	r3, [pc, #136]	; (8003e38 <W25qxx_ReadSector+0xe8>)
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	61bb      	str	r3, [r7, #24]
 8003db6:	e001      	b.n	8003dbc <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8003dbc:	68b8      	ldr	r0, [r7, #8]
 8003dbe:	f7ff fdab 	bl	8003918 <W25qxx_SectorToPage>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	4b1c      	ldr	r3, [pc, #112]	; (8003e38 <W25qxx_ReadSector+0xe8>)
 8003dc6:	895b      	ldrh	r3, [r3, #10]
 8003dc8:	4619      	mov	r1, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dd0:	4413      	add	r3, r2
 8003dd2:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8003dd4:	4b18      	ldr	r3, [pc, #96]	; (8003e38 <W25qxx_ReadSector+0xe8>)
 8003dd6:	895b      	ldrh	r3, [r3, #10]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	fbb3 f1f2 	udiv	r1, r3, r2
 8003de0:	fb02 f201 	mul.w	r2, r2, r1
 8003de4:	1a9b      	subs	r3, r3, r2
 8003de6:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	69f9      	ldr	r1, [r7, #28]
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f7ff feec 	bl	8003bcc <W25qxx_ReadPage>
		StartPage++;
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	3301      	adds	r3, #1
 8003df8:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8003dfa:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <W25qxx_ReadSector+0xe8>)
 8003dfc:	895b      	ldrh	r3, [r3, #10]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	1a9a      	subs	r2, r3, r2
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	4413      	add	r3, r2
 8003e08:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8003e0a:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <W25qxx_ReadSector+0xe8>)
 8003e0c:	895b      	ldrh	r3, [r3, #10]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	4413      	add	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	dce1      	bgt.n	8003de8 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 8003e24:	4807      	ldr	r0, [pc, #28]	; (8003e44 <W25qxx_ReadSector+0xf4>)
 8003e26:	f017 fbe5 	bl	801b5f4 <puts>
	W25qxx_Delay(100);
 8003e2a:	2064      	movs	r0, #100	; 0x64
 8003e2c:	f011 ffee 	bl	8015e0c <osDelay>
#endif
}
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	20006ed8 	.word	0x20006ed8
 8003e3c:	08020b84 	.word	0x08020b84
 8003e40:	08020bc4 	.word	0x08020bc4
 8003e44:	08020be4 	.word	0x08020be4

08003e48 <MRT_LSM6DSR_Constructor>:


//**************************************************//
/*****LSM6DSR STATIC FUNCTIONS*****/

void MRT_LSM6DSR_Constructor(){
 8003e48:	b598      	push	{r3, r4, r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
	if (lsm6dsr==NULL){
 8003e4c:	4b08      	ldr	r3, [pc, #32]	; (8003e70 <MRT_LSM6DSR_Constructor+0x28>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10b      	bne.n	8003e6c <MRT_LSM6DSR_Constructor+0x24>
		lsm6dsr = new LSM6DSR(&LSM6DSR_I2C, (uint8_t) MRT_LSM6DSR_ADDRESS);
 8003e54:	203c      	movs	r0, #60	; 0x3c
 8003e56:	f015 fedb 	bl	8019c10 <_Znwj>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	461c      	mov	r4, r3
 8003e5e:	226a      	movs	r2, #106	; 0x6a
 8003e60:	4904      	ldr	r1, [pc, #16]	; (8003e74 <MRT_LSM6DSR_Constructor+0x2c>)
 8003e62:	4620      	mov	r0, r4
 8003e64:	f000 f95c 	bl	8004120 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>
 8003e68:	4b01      	ldr	r3, [pc, #4]	; (8003e70 <MRT_LSM6DSR_Constructor+0x28>)
 8003e6a:	601c      	str	r4, [r3, #0]
	}
}
 8003e6c:	bf00      	nop
 8003e6e:	bd98      	pop	{r3, r4, r7, pc}
 8003e70:	200005a4 	.word	0x200005a4
 8003e74:	20005f50 	.word	0x20005f50

08003e78 <MRT_LSM6DSR_Destructor>:

void MRT_LSM6DSR_Destructor(){
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
	if (lsm6dsr!=NULL){
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <MRT_LSM6DSR_Destructor+0x1c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <MRT_LSM6DSR_Destructor+0x12>
		lsm6dsr = NULL;
 8003e84:	4b03      	ldr	r3, [pc, #12]	; (8003e94 <MRT_LSM6DSR_Destructor+0x1c>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]
	}
}
 8003e8a:	bf00      	nop
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	200005a4 	.word	0x200005a4

08003e98 <MRT_LSM6DSR_getAcceleration>:

void MRT_LSM6DSR_getAcceleration(void){
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
	lsm6dsr->getAcceleration();
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <MRT_LSM6DSR_getAcceleration+0x30>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 f9e9 	bl	8004278 <_ZN7LSM6DSR15getAccelerationEv>
	hlsm6dsr.acceleration_mg[0] = lsm6dsr->acceleration_mg[0];
 8003ea6:	4b08      	ldr	r3, [pc, #32]	; (8003ec8 <MRT_LSM6DSR_getAcceleration+0x30>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a07      	ldr	r2, [pc, #28]	; (8003ecc <MRT_LSM6DSR_getAcceleration+0x34>)
 8003eae:	6013      	str	r3, [r2, #0]
	hlsm6dsr.acceleration_mg[1] = lsm6dsr->acceleration_mg[1];
 8003eb0:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <MRT_LSM6DSR_getAcceleration+0x30>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	4a05      	ldr	r2, [pc, #20]	; (8003ecc <MRT_LSM6DSR_getAcceleration+0x34>)
 8003eb8:	6053      	str	r3, [r2, #4]
	hlsm6dsr.acceleration_mg[2] = lsm6dsr->acceleration_mg[2];
 8003eba:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <MRT_LSM6DSR_getAcceleration+0x30>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4a02      	ldr	r2, [pc, #8]	; (8003ecc <MRT_LSM6DSR_getAcceleration+0x34>)
 8003ec2:	6093      	str	r3, [r2, #8]
}
 8003ec4:	bf00      	nop
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	200005a4 	.word	0x200005a4
 8003ecc:	200005ac 	.word	0x200005ac

08003ed0 <MRT_LSM6DSR_getAngularRate>:
void MRT_LSM6DSR_getAngularRate(void){
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
	lsm6dsr->getAngularRate();
 8003ed4:	4b0a      	ldr	r3, [pc, #40]	; (8003f00 <MRT_LSM6DSR_getAngularRate+0x30>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 fa45 	bl	8004368 <_ZN7LSM6DSR14getAngularRateEv>
	hlsm6dsr.angular_rate_mdps[0] = lsm6dsr->angular_rate_mdps[0];
 8003ede:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <MRT_LSM6DSR_getAngularRate+0x30>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	4a07      	ldr	r2, [pc, #28]	; (8003f04 <MRT_LSM6DSR_getAngularRate+0x34>)
 8003ee6:	60d3      	str	r3, [r2, #12]
	hlsm6dsr.angular_rate_mdps[1] = lsm6dsr->angular_rate_mdps[1];
 8003ee8:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <MRT_LSM6DSR_getAngularRate+0x30>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	4a05      	ldr	r2, [pc, #20]	; (8003f04 <MRT_LSM6DSR_getAngularRate+0x34>)
 8003ef0:	6113      	str	r3, [r2, #16]
	hlsm6dsr.angular_rate_mdps[2] = lsm6dsr->angular_rate_mdps[2];
 8003ef2:	4b03      	ldr	r3, [pc, #12]	; (8003f00 <MRT_LSM6DSR_getAngularRate+0x30>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	4a02      	ldr	r2, [pc, #8]	; (8003f04 <MRT_LSM6DSR_getAngularRate+0x34>)
 8003efa:	6153      	str	r3, [r2, #20]
}
 8003efc:	bf00      	nop
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	200005a4 	.word	0x200005a4
 8003f04:	200005ac 	.word	0x200005ac

08003f08 <MRT_LSM6DSR_getTemperature>:
void MRT_LSM6DSR_getTemperature(void){
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
	lsm6dsr->getTemperature();
 8003f0c:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <MRT_LSM6DSR_getTemperature+0x1c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 f9f8 	bl	8004306 <_ZN7LSM6DSR14getTemperatureEv>
	hlsm6dsr.temperature_degC = lsm6dsr->temperature_degC;
 8003f16:	4b03      	ldr	r3, [pc, #12]	; (8003f24 <MRT_LSM6DSR_getTemperature+0x1c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	4a02      	ldr	r2, [pc, #8]	; (8003f28 <MRT_LSM6DSR_getTemperature+0x20>)
 8003f1e:	6193      	str	r3, [r2, #24]
}
 8003f20:	bf00      	nop
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	200005a4 	.word	0x200005a4
 8003f28:	200005ac 	.word	0x200005ac

08003f2c <MRT_LSM6DSR_pollAll>:

void MRT_LSM6DSR_pollAll(void){
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
	MRT_LSM6DSR_getAcceleration();
 8003f30:	f7ff ffb2 	bl	8003e98 <MRT_LSM6DSR_getAcceleration>
	MRT_LSM6DSR_getAngularRate();
 8003f34:	f7ff ffcc 	bl	8003ed0 <MRT_LSM6DSR_getAngularRate>
	MRT_LSM6DSR_getTemperature();
 8003f38:	f7ff ffe6 	bl	8003f08 <MRT_LSM6DSR_getTemperature>
}
 8003f3c:	bf00      	nop
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <MRT_LPS22HH_Constructor>:


//**************************************************//
/*****LPS22HH STATIC FUNCTIONS*****/

void MRT_LPS22HH_Constructor(){
 8003f40:	b598      	push	{r3, r4, r7, lr}
 8003f42:	af00      	add	r7, sp, #0
	if (lps22hh==NULL){
 8003f44:	4b08      	ldr	r3, [pc, #32]	; (8003f68 <MRT_LPS22HH_Constructor+0x28>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10b      	bne.n	8003f64 <MRT_LPS22HH_Constructor+0x24>
		lps22hh = new LPS22HH(&LPS22HH_I2C, (uint8_t) MRT_LPS22HH_ADDRESS);
 8003f4c:	2020      	movs	r0, #32
 8003f4e:	f015 fe5f 	bl	8019c10 <_Znwj>
 8003f52:	4603      	mov	r3, r0
 8003f54:	461c      	mov	r4, r3
 8003f56:	22b3      	movs	r2, #179	; 0xb3
 8003f58:	4904      	ldr	r1, [pc, #16]	; (8003f6c <MRT_LPS22HH_Constructor+0x2c>)
 8003f5a:	4620      	mov	r0, r4
 8003f5c:	f000 fa86 	bl	800446c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>
 8003f60:	4b01      	ldr	r3, [pc, #4]	; (8003f68 <MRT_LPS22HH_Constructor+0x28>)
 8003f62:	601c      	str	r4, [r3, #0]
	}
}
 8003f64:	bf00      	nop
 8003f66:	bd98      	pop	{r3, r4, r7, pc}
 8003f68:	200005a8 	.word	0x200005a8
 8003f6c:	20005f50 	.word	0x20005f50

08003f70 <MRT_LPS22HH_Destructor>:

void MRT_LPS22HH_Destructor(){
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
	if (lps22hh!=NULL){
 8003f74:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <MRT_LPS22HH_Destructor+0x1c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <MRT_LPS22HH_Destructor+0x12>
		lps22hh = NULL;
 8003f7c:	4b03      	ldr	r3, [pc, #12]	; (8003f8c <MRT_LPS22HH_Destructor+0x1c>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
	}
}
 8003f82:	bf00      	nop
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	200005a8 	.word	0x200005a8

08003f90 <MRT_LPS22HH_getPressure>:

void MRT_LPS22HH_getPressure(void){
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
	lps22hh->getPressure();
 8003f94:	4b05      	ldr	r3, [pc, #20]	; (8003fac <MRT_LPS22HH_getPressure+0x1c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 faef 	bl	800457c <_ZN7LPS22HH11getPressureEv>
	hlps22hh.pressure_hPa = lps22hh->pressure_hPa;
 8003f9e:	4b03      	ldr	r3, [pc, #12]	; (8003fac <MRT_LPS22HH_getPressure+0x1c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a02      	ldr	r2, [pc, #8]	; (8003fb0 <MRT_LPS22HH_getPressure+0x20>)
 8003fa6:	6013      	str	r3, [r2, #0]
}
 8003fa8:	bf00      	nop
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	200005a8 	.word	0x200005a8
 8003fb0:	200005d8 	.word	0x200005d8

08003fb4 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(void){
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
	lps22hh->getTemperature();
 8003fb8:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <MRT_LPS22HH_getTemperature+0x1c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fb0c 	bl	80045da <_ZN7LPS22HH14getTemperatureEv>
	hlps22hh.temperature_degC = lps22hh->temperature_degC;
 8003fc2:	4b03      	ldr	r3, [pc, #12]	; (8003fd0 <MRT_LPS22HH_getTemperature+0x1c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	4a02      	ldr	r2, [pc, #8]	; (8003fd4 <MRT_LPS22HH_getTemperature+0x20>)
 8003fca:	6053      	str	r3, [r2, #4]
}
 8003fcc:	bf00      	nop
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	200005a8 	.word	0x200005a8
 8003fd4:	200005d8 	.word	0x200005d8

08003fd8 <MRT_LPS22HH_pollAll>:

void MRT_LPS22HH_pollAll(void){
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
	MRT_LPS22HH_getPressure();
 8003fdc:	f7ff ffd8 	bl	8003f90 <MRT_LPS22HH_getPressure>
	MRT_LPS22HH_getTemperature();
 8003fe0:	f7ff ffe8 	bl	8003fb4 <MRT_LPS22HH_getTemperature>
}
 8003fe4:	bf00      	nop
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <MRT_GPS_pollAll>:


//**************************************************//
/*****GPS STATIC FUNCTIONS*****/

void MRT_GPS_pollAll(void){
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
	GPS_Poll(&hgps.latitude, &hgps.longitude, &hgps.time);
 8003fec:	4a03      	ldr	r2, [pc, #12]	; (8003ffc <MRT_GPS_pollAll+0x14>)
 8003fee:	4904      	ldr	r1, [pc, #16]	; (8004000 <MRT_GPS_pollAll+0x18>)
 8003ff0:	4804      	ldr	r0, [pc, #16]	; (8004004 <MRT_GPS_pollAll+0x1c>)
 8003ff2:	f000 fb5d 	bl	80046b0 <GPS_Poll>
}
 8003ff6:	bf00      	nop
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	200005f4 	.word	0x200005f4
 8004000:	200005f0 	.word	0x200005f0
 8004004:	200005ec 	.word	0x200005ec

08004008 <MRT_LSM6DSR_Init>:


//**************************************************//
/*****PUBLIC STATIC FUNCTIONS*****/

HLSM6DSR MRT_LSM6DSR_Init(void){
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
	MRT_LSM6DSR_Constructor();
 8004010:	f7ff ff1a 	bl	8003e48 <MRT_LSM6DSR_Constructor>
	HLSM6DSR lsm6dsr_handler;
	lsm6dsr_handler.getAcceleration = &MRT_LSM6DSR_getAcceleration;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a08      	ldr	r2, [pc, #32]	; (8004038 <MRT_LSM6DSR_Init+0x30>)
 8004018:	61da      	str	r2, [r3, #28]
	lsm6dsr_handler.getAngularRate = &MRT_LSM6DSR_getAngularRate;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a07      	ldr	r2, [pc, #28]	; (800403c <MRT_LSM6DSR_Init+0x34>)
 800401e:	621a      	str	r2, [r3, #32]
	lsm6dsr_handler.getTemperature = &MRT_LSM6DSR_getTemperature;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a07      	ldr	r2, [pc, #28]	; (8004040 <MRT_LSM6DSR_Init+0x38>)
 8004024:	625a      	str	r2, [r3, #36]	; 0x24
	lsm6dsr_handler.pollAll = &MRT_LSM6DSR_pollAll;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a06      	ldr	r2, [pc, #24]	; (8004044 <MRT_LSM6DSR_Init+0x3c>)
 800402a:	629a      	str	r2, [r3, #40]	; 0x28
	return lsm6dsr_handler;
 800402c:	bf00      	nop
}
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	08003e99 	.word	0x08003e99
 800403c:	08003ed1 	.word	0x08003ed1
 8004040:	08003f09 	.word	0x08003f09
 8004044:	08003f2d 	.word	0x08003f2d

08004048 <MRT_LPS22HH_Init>:

struct HLPS22HH MRT_LPS22HH_Init(void){
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
	MRT_LPS22HH_Constructor();
 8004050:	f7ff ff76 	bl	8003f40 <MRT_LPS22HH_Constructor>
	struct HLPS22HH lps22hh_handler;
	lps22hh_handler.getPressure = &MRT_LPS22HH_getPressure;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a06      	ldr	r2, [pc, #24]	; (8004070 <MRT_LPS22HH_Init+0x28>)
 8004058:	609a      	str	r2, [r3, #8]
	lps22hh_handler.getTemperature = &MRT_LPS22HH_getTemperature;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a05      	ldr	r2, [pc, #20]	; (8004074 <MRT_LPS22HH_Init+0x2c>)
 800405e:	60da      	str	r2, [r3, #12]
	lps22hh_handler.pollAll = &MRT_LPS22HH_pollAll;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a05      	ldr	r2, [pc, #20]	; (8004078 <MRT_LPS22HH_Init+0x30>)
 8004064:	611a      	str	r2, [r3, #16]
	return lps22hh_handler;
 8004066:	bf00      	nop
}
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	08003f91 	.word	0x08003f91
 8004074:	08003fb5 	.word	0x08003fb5
 8004078:	08003fd9 	.word	0x08003fd9

0800407c <MRT_GPS_Init>:

struct HGPS MRT_GPS_Init(void){
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
	struct HGPS gps_handler;
	gps_handler.pollAll = &MRT_GPS_pollAll;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a06      	ldr	r2, [pc, #24]	; (80040a0 <MRT_GPS_Init+0x24>)
 8004088:	60da      	str	r2, [r3, #12]
	GPS_Init(&GPS_UART, print, tone_freq);
 800408a:	4a06      	ldr	r2, [pc, #24]	; (80040a4 <MRT_GPS_Init+0x28>)
 800408c:	4906      	ldr	r1, [pc, #24]	; (80040a8 <MRT_GPS_Init+0x2c>)
 800408e:	4807      	ldr	r0, [pc, #28]	; (80040ac <MRT_GPS_Init+0x30>)
 8004090:	f000 fd6e 	bl	8004b70 <GPS_Init>
	return gps_handler;
 8004094:	bf00      	nop
}
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	08003fe9 	.word	0x08003fe9
 80040a4:	08001135 	.word	0x08001135
 80040a8:	08001109 	.word	0x08001109
 80040ac:	20006238 	.word	0x20006238

080040b0 <MRT_i2c_sensors_Init>:

void MRT_i2c_sensors_Init(void){
 80040b0:	b5b0      	push	{r4, r5, r7, lr}
 80040b2:	b08c      	sub	sp, #48	; 0x30
 80040b4:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	HAL_IWDG_Refresh(&hiwdg);
	hlsm6dsr = MRT_LSM6DSR_Init();
 80040b6:	4c13      	ldr	r4, [pc, #76]	; (8004104 <MRT_i2c_sensors_Init+0x54>)
 80040b8:	463b      	mov	r3, r7
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff ffa4 	bl	8004008 <MRT_LSM6DSR_Init>
 80040c0:	4625      	mov	r5, r4
 80040c2:	463c      	mov	r4, r7
 80040c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040cc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80040d0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	#endif

	//LPS22HH
	#if LPS22HH_
	HAL_IWDG_Refresh(&hiwdg);
	hlps22hh = MRT_LPS22HH_Init();
 80040d4:	4c0c      	ldr	r4, [pc, #48]	; (8004108 <MRT_i2c_sensors_Init+0x58>)
 80040d6:	463b      	mov	r3, r7
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff ffb5 	bl	8004048 <MRT_LPS22HH_Init>
 80040de:	4625      	mov	r5, r4
 80040e0:	463c      	mov	r4, r7
 80040e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	602b      	str	r3, [r5, #0]
	#endif

	//GPS
	#if GPS_
	HAL_IWDG_Refresh(&hiwdg);
	hgps = MRT_GPS_Init();
 80040ea:	4c08      	ldr	r4, [pc, #32]	; (800410c <MRT_i2c_sensors_Init+0x5c>)
 80040ec:	463b      	mov	r3, r7
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff ffc4 	bl	800407c <MRT_GPS_Init>
 80040f4:	463b      	mov	r3, r7
 80040f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	#endif

}
 80040fc:	bf00      	nop
 80040fe:	3730      	adds	r7, #48	; 0x30
 8004100:	46bd      	mov	sp, r7
 8004102:	bdb0      	pop	{r4, r5, r7, pc}
 8004104:	200005ac 	.word	0x200005ac
 8004108:	200005d8 	.word	0x200005d8
 800410c:	200005ec 	.word	0x200005ec

08004110 <MRT_i2c_sensors_Deinit>:


void MRT_i2c_sensors_Deinit(void){
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	MRT_LSM6DSR_Destructor();
 8004114:	f7ff feb0 	bl	8003e78 <MRT_LSM6DSR_Destructor>
	#endif

	//LPS22HH
	#if LPS22HH_
	MRT_LPS22HH_Destructor();
 8004118:	f7ff ff2a 	bl	8003f70 <MRT_LPS22HH_Destructor>
	#endif

	//GPS
	//NO DEINIT NEEDED HERE
}
 800411c:	bf00      	nop
 800411e:	bd80      	pop	{r7, pc}

08004120 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>:


//**************************************************//
/*****LSM6DSR*****/

LSM6DSR::LSM6DSR(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	4613      	mov	r3, r2
 800412c:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLSM6DSR Init");
 800412e:	4848      	ldr	r0, [pc, #288]	; (8004250 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x130>)
 8004130:	f7fc ffcc 	bl	80010cc <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4a47      	ldr	r2, [pc, #284]	; (8004254 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x134>)
 8004138:	61da      	str	r2, [r3, #28]
	ctx.read_reg = read;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4a46      	ldr	r2, [pc, #280]	; (8004258 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x138>)
 800413e:	621a      	str	r2, [r3, #32]
	ctx.handle = i2c_bus;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait sensor boot time */
	HAL_Delay(LSM6DSR_BOOT_TIME);
 8004146:	2064      	movs	r0, #100	; 0x64
 8004148:	f005 f8fc 	bl	8009344 <HAL_Delay>
	/* Check device ID */
	lsm6dsr_device_id_get(&ctx, &whoamI);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f103 021c 	add.w	r2, r3, #28
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	3338      	adds	r3, #56	; 0x38
 8004156:	4619      	mov	r1, r3
 8004158:	4610      	mov	r0, r2
 800415a:	f001 fadf 	bl	800571c <lsm6dsr_device_id_get>

	print((char*) "\tChecking Sensor ID...");
 800415e:	483f      	ldr	r0, [pc, #252]	; (800425c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x13c>)
 8004160:	f7fc ffd2 	bl	8001108 <print>
	if (whoamI != address){
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800416a:	79fa      	ldrb	r2, [r7, #7]
 800416c:	429a      	cmp	r2, r3
 800416e:	d018      	beq.n	80041a2 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x82>
	  println((char*) "NOT OK");
 8004170:	483b      	ldr	r0, [pc, #236]	; (8004260 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x140>)
 8004172:	f7fc ffab 	bl	80010cc <println>
	  print((char*) "\tThis Device is: ");
 8004176:	483b      	ldr	r0, [pc, #236]	; (8004264 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x144>)
 8004178:	f7fc ffc6 	bl	8001108 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004182:	461a      	mov	r2, r3
 8004184:	f107 0314 	add.w	r3, r7, #20
 8004188:	4937      	ldr	r1, [pc, #220]	; (8004268 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x148>)
 800418a:	4618      	mov	r0, r3
 800418c:	f017 fafe 	bl	801b78c <siprintf>
	  print(buffer);
 8004190:	f107 0314 	add.w	r3, r7, #20
 8004194:	4618      	mov	r0, r3
 8004196:	f7fc ffb7 	bl	8001108 <print>

	  println((char*) "\n\rProgram Terminated\n\r");
 800419a:	4834      	ldr	r0, [pc, #208]	; (800426c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x14c>)
 800419c:	f7fc ff96 	bl	80010cc <println>
	  while(1);
 80041a0:	e7fe      	b.n	80041a0 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x80>
	}
	println((char*) "OK");
 80041a2:	4833      	ldr	r0, [pc, #204]	; (8004270 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x150>)
 80041a4:	f7fc ff92 	bl	80010cc <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 80041a8:	4832      	ldr	r0, [pc, #200]	; (8004274 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x154>)
 80041aa:	f7fc ffad 	bl	8001108 <print>
	lsm6dsr_reset_set(&ctx, PROPERTY_ENABLE);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	331c      	adds	r3, #28
 80041b2:	2101      	movs	r1, #1
 80041b4:	4618      	mov	r0, r3
 80041b6:	f001 fac2 	bl	800573e <lsm6dsr_reset_set>
	HAL_Delay(500);
 80041ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80041be:	f005 f8c1 	bl	8009344 <HAL_Delay>
	do {
	lsm6dsr_reset_get(&ctx, &rst);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f103 021c 	add.w	r2, r3, #28
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	3339      	adds	r3, #57	; 0x39
 80041cc:	4619      	mov	r1, r3
 80041ce:	4610      	mov	r0, r2
 80041d0:	f001 fadb 	bl	800578a <lsm6dsr_reset_get>
	} while (rst);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d000      	beq.n	80041e0 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0xc0>
	do {
 80041de:	e7f0      	b.n	80041c2 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0xa2>
	println((char*) "OK");
 80041e0:	4823      	ldr	r0, [pc, #140]	; (8004270 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x150>)
 80041e2:	f7fc ff73 	bl	80010cc <println>

	/* Disable I3C interface */
    lsm6dsr_i3c_disable_set(&ctx, LSM6DSR_I3C_DISABLE);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	331c      	adds	r3, #28
 80041ea:	2180      	movs	r1, #128	; 0x80
 80041ec:	4618      	mov	r0, r3
 80041ee:	f001 fb43 	bl	8005878 <lsm6dsr_i3c_disable_set>

	/* Enable Block Data Update */
	lsm6dsr_block_data_update_set(&ctx, PROPERTY_ENABLE);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	331c      	adds	r3, #28
 80041f6:	2101      	movs	r1, #1
 80041f8:	4618      	mov	r0, r3
 80041fa:	f001 f93f 	bl	800547c <lsm6dsr_block_data_update_set>
	/* Set Output Data Rate */
	lsm6dsr_xl_data_rate_set(&ctx, LSM6DSR_XL_ODR_12Hz5);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	331c      	adds	r3, #28
 8004202:	2101      	movs	r1, #1
 8004204:	4618      	mov	r0, r3
 8004206:	f000 ff1b 	bl	8005040 <lsm6dsr_xl_data_rate_set>
	lsm6dsr_gy_data_rate_set(&ctx, LSM6DSR_GY_ODR_12Hz5);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	331c      	adds	r3, #28
 800420e:	2101      	movs	r1, #1
 8004210:	4618      	mov	r0, r3
 8004212:	f001 f837 	bl	8005284 <lsm6dsr_gy_data_rate_set>
	/* Set full scale */
	lsm6dsr_xl_full_scale_set(&ctx, LSM6DSR_2g);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	331c      	adds	r3, #28
 800421a:	2100      	movs	r1, #0
 800421c:	4618      	mov	r0, r3
 800421e:	f000 fee9 	bl	8004ff4 <lsm6dsr_xl_full_scale_set>
	lsm6dsr_gy_full_scale_set(&ctx, LSM6DSR_2000dps);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	331c      	adds	r3, #28
 8004226:	210c      	movs	r1, #12
 8004228:	4618      	mov	r0, r3
 800422a:	f001 f805 	bl	8005238 <lsm6dsr_gy_full_scale_set>
	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsr_xl_hp_path_on_out_set(&ctx, LSM6DSR_LP_ODR_DIV_100);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	331c      	adds	r3, #28
 8004232:	2104      	movs	r1, #4
 8004234:	4618      	mov	r0, r3
 8004236:	f001 fae7 	bl	8005808 <lsm6dsr_xl_hp_path_on_out_set>
	lsm6dsr_xl_filter_lp2_set(&ctx, PROPERTY_ENABLE);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	331c      	adds	r3, #28
 800423e:	2101      	movs	r1, #1
 8004240:	4618      	mov	r0, r3
 8004242:	f001 fabb 	bl	80057bc <lsm6dsr_xl_filter_lp2_set>
}
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4618      	mov	r0, r3
 800424a:	3720      	adds	r7, #32
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	08020c78 	.word	0x08020c78
 8004254:	080043f7 	.word	0x080043f7
 8004258:	08004431 	.word	0x08004431
 800425c:	08020c88 	.word	0x08020c88
 8004260:	08020ca0 	.word	0x08020ca0
 8004264:	08020ca8 	.word	0x08020ca8
 8004268:	08020cbc 	.word	0x08020cbc
 800426c:	08020cc4 	.word	0x08020cc4
 8004270:	08020cdc 	.word	0x08020cdc
 8004274:	08020ce0 	.word	0x08020ce0

08004278 <_ZN7LSM6DSR15getAccelerationEv>:


void LSM6DSR::getAcceleration(void){
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
	lsm6dsr_xl_flag_data_ready_get(&ctx, &reg);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f103 021c 	add.w	r2, r3, #28
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3328      	adds	r3, #40	; 0x28
 800428a:	4619      	mov	r1, r3
 800428c:	4610      	mov	r0, r2
 800428e:	f001 f91b 	bl	80054c8 <lsm6dsr_xl_flag_data_ready_get>

	if (reg){
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004298:	2b00      	cmp	r3, #0
 800429a:	d030      	beq.n	80042fe <_ZN7LSM6DSR15getAccelerationEv+0x86>
		// Read magnetic field data
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	332a      	adds	r3, #42	; 0x2a
 80042a0:	2206      	movs	r2, #6
 80042a2:	2100      	movs	r1, #0
 80042a4:	4618      	mov	r0, r3
 80042a6:	f015 ff75 	bl	801a194 <memset>
		lsm6dsr_acceleration_raw_get(&ctx, data_raw_acceleration);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f103 021c 	add.w	r2, r3, #28
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	332a      	adds	r3, #42	; 0x2a
 80042b4:	4619      	mov	r1, r3
 80042b6:	4610      	mov	r0, r2
 80042b8:	f001 f9bf 	bl	800563a <lsm6dsr_acceleration_raw_get>
		acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[0]);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fe4a 	bl	8004f5c <lsm6dsr_from_fs2g_to_mg>
 80042c8:	eef0 7a40 	vmov.f32	s15, s0
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	edc3 7a00 	vstr	s15, [r3]
		acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[1]);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 fe3f 	bl	8004f5c <lsm6dsr_from_fs2g_to_mg>
 80042de:	eef0 7a40 	vmov.f32	s15, s0
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	edc3 7a01 	vstr	s15, [r3, #4]
		acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[2]);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fe34 	bl	8004f5c <lsm6dsr_from_fs2g_to_mg>
 80042f4:	eef0 7a40 	vmov.f32	s15, s0
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	edc3 7a02 	vstr	s15, [r3, #8]
	}
}
 80042fe:	bf00      	nop
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <_ZN7LSM6DSR14getTemperatureEv>:


void LSM6DSR::getTemperature(void){
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
    lsm6dsr_temp_flag_data_ready_get(&ctx, &reg);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f103 021c 	add.w	r2, r3, #28
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3328      	adds	r3, #40	; 0x28
 8004318:	4619      	mov	r1, r3
 800431a:	4610      	mov	r0, r2
 800431c:	f001 f906 	bl	800552c <lsm6dsr_temp_flag_data_ready_get>

    if (reg){
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004326:	2b00      	cmp	r3, #0
 8004328:	d01a      	beq.n	8004360 <_ZN7LSM6DSR14getTemperatureEv+0x5a>
		// Read temperature data
		memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3336      	adds	r3, #54	; 0x36
 800432e:	2202      	movs	r2, #2
 8004330:	2100      	movs	r1, #0
 8004332:	4618      	mov	r0, r3
 8004334:	f015 ff2e 	bl	801a194 <memset>
		lsm6dsr_temperature_raw_get(&ctx, &data_raw_temperature);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f103 021c 	add.w	r2, r3, #28
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3336      	adds	r3, #54	; 0x36
 8004342:	4619      	mov	r1, r3
 8004344:	4610      	mov	r0, r2
 8004346:	f001 f90a 	bl	800555e <lsm6dsr_temperature_raw_get>
		temperature_degC = lsm6dsr_from_lsb_to_celsius(data_raw_temperature);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fe33 	bl	8004fbc <lsm6dsr_from_lsb_to_celsius>
 8004356:	eef0 7a40 	vmov.f32	s15, s0
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	edc3 7a06 	vstr	s15, [r3, #24]
	}
}
 8004360:	bf00      	nop
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <_ZN7LSM6DSR14getAngularRateEv>:


void LSM6DSR::getAngularRate(void){
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
    lsm6dsr_gy_flag_data_ready_get(&ctx, &reg);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f103 021c 	add.w	r2, r3, #28
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3328      	adds	r3, #40	; 0x28
 800437a:	4619      	mov	r1, r3
 800437c:	4610      	mov	r0, r2
 800437e:	f001 f8bc 	bl	80054fa <lsm6dsr_gy_flag_data_ready_get>

    if (reg){
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004388:	2b00      	cmp	r3, #0
 800438a:	d030      	beq.n	80043ee <_ZN7LSM6DSR14getAngularRateEv+0x86>
		// Read magnetic field data
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3330      	adds	r3, #48	; 0x30
 8004390:	2206      	movs	r2, #6
 8004392:	2100      	movs	r1, #0
 8004394:	4618      	mov	r0, r3
 8004396:	f015 fefd 	bl	801a194 <memset>
		lsm6dsr_angular_rate_raw_get(&ctx, data_raw_angular_rate);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f103 021c 	add.w	r2, r3, #28
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3330      	adds	r3, #48	; 0x30
 80043a4:	4619      	mov	r1, r3
 80043a6:	4610      	mov	r0, r2
 80043a8:	f001 f8fc 	bl	80055a4 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 fdea 	bl	8004f8c <lsm6dsr_from_fs2000dps_to_mdps>
 80043b8:	eef0 7a40 	vmov.f32	s15, s0
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	edc3 7a03 	vstr	s15, [r3, #12]
		angular_rate_mdps[1] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 fddf 	bl	8004f8c <lsm6dsr_from_fs2000dps_to_mdps>
 80043ce:	eef0 7a40 	vmov.f32	s15, s0
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	edc3 7a04 	vstr	s15, [r3, #16]
		angular_rate_mdps[2] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fdd4 	bl	8004f8c <lsm6dsr_from_fs2000dps_to_mdps>
 80043e4:	eef0 7a40 	vmov.f32	s15, s0
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	edc3 7a05 	vstr	s15, [r3, #20]
		fs500dps_to_mdps
		fs1000dps_to_mdps
		fs2000dps_to_mdps
		*/
	}
}
 80043ee:	bf00      	nop
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <_ZN7LSM6DSR5writeEPvhPKht>:


int32_t LSM6DSR::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b088      	sub	sp, #32
 80043fa:	af04      	add	r7, sp, #16
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	461a      	mov	r2, r3
 8004402:	460b      	mov	r3, r1
 8004404:	72fb      	strb	r3, [r7, #11]
 8004406:	4613      	mov	r3, r2
 8004408:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 800440a:	7afb      	ldrb	r3, [r7, #11]
 800440c:	b29a      	uxth	r2, r3
 800440e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004412:	9302      	str	r3, [sp, #8]
 8004414:	893b      	ldrh	r3, [r7, #8]
 8004416:	9301      	str	r3, [sp, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	2301      	movs	r3, #1
 800441e:	21d5      	movs	r1, #213	; 0xd5
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f005 fe73 	bl	800a10c <HAL_I2C_Mem_Write>
  return 0;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <_ZN7LSM6DSR4readEPvhPht>:

int32_t LSM6DSR::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af04      	add	r7, sp, #16
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	607a      	str	r2, [r7, #4]
 800443a:	461a      	mov	r2, r3
 800443c:	460b      	mov	r3, r1
 800443e:	72fb      	strb	r3, [r7, #11]
 8004440:	4613      	mov	r3, r2
 8004442:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8004444:	7afb      	ldrb	r3, [r7, #11]
 8004446:	b29a      	uxth	r2, r3
 8004448:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800444c:	9302      	str	r3, [sp, #8]
 800444e:	893b      	ldrh	r3, [r7, #8]
 8004450:	9301      	str	r3, [sp, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	2301      	movs	r3, #1
 8004458:	21d5      	movs	r1, #213	; 0xd5
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f005 ff50 	bl	800a300 <HAL_I2C_Mem_Read>
  return 0;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>:

//**************************************************//
/*****LPS22HH*****/


LPS22HH::LPS22HH(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 800446c:	b580      	push	{r7, lr}
 800446e:	b088      	sub	sp, #32
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	4613      	mov	r3, r2
 8004478:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLPS22HH Init");
 800447a:	4836      	ldr	r0, [pc, #216]	; (8004554 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe8>)
 800447c:	f7fc fe26 	bl	80010cc <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4a35      	ldr	r2, [pc, #212]	; (8004558 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xec>)
 8004484:	609a      	str	r2, [r3, #8]
	ctx.read_reg = read;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	4a34      	ldr	r2, [pc, #208]	; (800455c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf0>)
 800448a:	60da      	str	r2, [r3, #12]
	ctx.handle = i2c_bus;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	611a      	str	r2, [r3, #16]
	/* Wait sensor boot time */
	HAL_Delay(LPS22HH_BOOT_TIME);
 8004492:	2064      	movs	r0, #100	; 0x64
 8004494:	f004 ff56 	bl	8009344 <HAL_Delay>
	/* Check device ID */
	whoamI = 0;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	779a      	strb	r2, [r3, #30]
	lps22hh_device_id_get(&ctx, &whoamI);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f103 0208 	add.w	r2, r3, #8
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	331e      	adds	r3, #30
 80044a8:	4619      	mov	r1, r3
 80044aa:	4610      	mov	r0, r2
 80044ac:	f000 fcd6 	bl	8004e5c <lps22hh_device_id_get>


	print((char*) "\tChecking Sensor ID...");
 80044b0:	482b      	ldr	r0, [pc, #172]	; (8004560 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf4>)
 80044b2:	f7fc fe29 	bl	8001108 <print>
	if ( whoamI != address ){
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	7f9b      	ldrb	r3, [r3, #30]
 80044ba:	79fa      	ldrb	r2, [r7, #7]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d017      	beq.n	80044f0 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x84>
	  println((char*) "NOT OK");
 80044c0:	4828      	ldr	r0, [pc, #160]	; (8004564 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf8>)
 80044c2:	f7fc fe03 	bl	80010cc <println>
	  print((char*) "\tThis Device is: ");
 80044c6:	4828      	ldr	r0, [pc, #160]	; (8004568 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xfc>)
 80044c8:	f7fc fe1e 	bl	8001108 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	7f9b      	ldrb	r3, [r3, #30]
 80044d0:	461a      	mov	r2, r3
 80044d2:	f107 0314 	add.w	r3, r7, #20
 80044d6:	4925      	ldr	r1, [pc, #148]	; (800456c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x100>)
 80044d8:	4618      	mov	r0, r3
 80044da:	f017 f957 	bl	801b78c <siprintf>
	  print(buffer);
 80044de:	f107 0314 	add.w	r3, r7, #20
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fc fe10 	bl	8001108 <print>

	  println((char*) "\n\rProgram Terminated\n\r");
 80044e8:	4821      	ldr	r0, [pc, #132]	; (8004570 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x104>)
 80044ea:	f7fc fdef 	bl	80010cc <println>
	  while(1);
 80044ee:	e7fe      	b.n	80044ee <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x82>
	}
	println((char*) "OK");
 80044f0:	4820      	ldr	r0, [pc, #128]	; (8004574 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x108>)
 80044f2:	f7fc fdeb 	bl	80010cc <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 80044f6:	4820      	ldr	r0, [pc, #128]	; (8004578 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x10c>)
 80044f8:	f7fc fe06 	bl	8001108 <print>
	lps22hh_reset_set(&ctx, PROPERTY_ENABLE);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	3308      	adds	r3, #8
 8004500:	2101      	movs	r1, #1
 8004502:	4618      	mov	r0, r3
 8004504:	f000 fcbb 	bl	8004e7e <lps22hh_reset_set>
	HAL_Delay(500);
 8004508:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800450c:	f004 ff1a 	bl	8009344 <HAL_Delay>
	do {
	lps22hh_reset_get(&ctx, &rst);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f103 0208 	add.w	r2, r3, #8
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	331f      	adds	r3, #31
 800451a:	4619      	mov	r1, r3
 800451c:	4610      	mov	r0, r2
 800451e:	f000 fcd4 	bl	8004eca <lps22hh_reset_get>
	} while (rst);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	7fdb      	ldrb	r3, [r3, #31]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d000      	beq.n	800452c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xc0>
	do {
 800452a:	e7f1      	b.n	8004510 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xa4>
	println((char*) "OK");
 800452c:	4811      	ldr	r0, [pc, #68]	; (8004574 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x108>)
 800452e:	f7fc fdcd 	bl	80010cc <println>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&ctx, PROPERTY_ENABLE);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3308      	adds	r3, #8
 8004536:	2101      	movs	r1, #1
 8004538:	4618      	mov	r0, r3
 800453a:	f000 fb9d 	bl	8004c78 <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&ctx, LPS22HH_75_Hz_LOW_NOISE);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	3308      	adds	r3, #8
 8004542:	2115      	movs	r1, #21
 8004544:	4618      	mov	r0, r3
 8004546:	f000 fbbd 	bl	8004cc4 <lps22hh_data_rate_set>
}
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4618      	mov	r0, r3
 800454e:	3720      	adds	r7, #32
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	08020d04 	.word	0x08020d04
 8004558:	0800463b 	.word	0x0800463b
 800455c:	08004675 	.word	0x08004675
 8004560:	08020c88 	.word	0x08020c88
 8004564:	08020ca0 	.word	0x08020ca0
 8004568:	08020ca8 	.word	0x08020ca8
 800456c:	08020cbc 	.word	0x08020cbc
 8004570:	08020cc4 	.word	0x08020cc4
 8004574:	08020cdc 	.word	0x08020cdc
 8004578:	08020ce0 	.word	0x08020ce0

0800457c <_ZN7LPS22HH11getPressureEv>:



void LPS22HH::getPressure(void){
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_press_flag_data_ready_get(&ctx, &reg);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f103 0208 	add.w	r2, r3, #8
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	3314      	adds	r3, #20
 800458e:	4619      	mov	r1, r3
 8004590:	4610      	mov	r0, r2
 8004592:	f000 fbe5 	bl	8004d60 <lps22hh_press_flag_data_ready_get>

	if (reg) {
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	7d1b      	ldrb	r3, [r3, #20]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d019      	beq.n	80045d2 <_ZN7LPS22HH11getPressureEv+0x56>
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3318      	adds	r3, #24
 80045a2:	2204      	movs	r2, #4
 80045a4:	2100      	movs	r1, #0
 80045a6:	4618      	mov	r0, r3
 80045a8:	f015 fdf4 	bl	801a194 <memset>
	  lps22hh_pressure_raw_get(&ctx, &data_raw_pressure);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f103 0208 	add.w	r2, r3, #8
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	3318      	adds	r3, #24
 80045b6:	4619      	mov	r1, r3
 80045b8:	4610      	mov	r0, r2
 80045ba:	f000 fc03 	bl	8004dc4 <lps22hh_pressure_raw_get>
	  pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fb26 	bl	8004c14 <lps22hh_from_lsb_to_hpa>
 80045c8:	eef0 7a40 	vmov.f32	s15, s0
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80045d2:	bf00      	nop
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <_ZN7LPS22HH14getTemperatureEv>:


void LPS22HH::getTemperature(void){
 80045da:	b580      	push	{r7, lr}
 80045dc:	b082      	sub	sp, #8
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_temp_flag_data_ready_get(&ctx, &reg);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f103 0208 	add.w	r2, r3, #8
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3314      	adds	r3, #20
 80045ec:	4619      	mov	r1, r3
 80045ee:	4610      	mov	r0, r2
 80045f0:	f000 fbcf 	bl	8004d92 <lps22hh_temp_flag_data_ready_get>

	if (reg) {
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	7d1b      	ldrb	r3, [r3, #20]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01a      	beq.n	8004632 <_ZN7LPS22HH14getTemperatureEv+0x58>
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	331c      	adds	r3, #28
 8004600:	2202      	movs	r2, #2
 8004602:	2100      	movs	r1, #0
 8004604:	4618      	mov	r0, r3
 8004606:	f015 fdc5 	bl	801a194 <memset>
	  lps22hh_temperature_raw_get(&ctx, &data_raw_temperature);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f103 0208 	add.w	r2, r3, #8
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	331c      	adds	r3, #28
 8004614:	4619      	mov	r1, r3
 8004616:	4610      	mov	r0, r2
 8004618:	f000 fbfd 	bl	8004e16 <lps22hh_temperature_raw_get>
	  temperature_degC = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fb0e 	bl	8004c44 <lps22hh_from_lsb_to_celsius>
 8004628:	eef0 7a40 	vmov.f32	s15, s0
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	edc3 7a01 	vstr	s15, [r3, #4]
	}
}
 8004632:	bf00      	nop
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <_ZN7LPS22HH5writeEPvhPKht>:



int32_t LPS22HH::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 800463a:	b580      	push	{r7, lr}
 800463c:	b088      	sub	sp, #32
 800463e:	af04      	add	r7, sp, #16
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	607a      	str	r2, [r7, #4]
 8004644:	461a      	mov	r2, r3
 8004646:	460b      	mov	r3, r1
 8004648:	72fb      	strb	r3, [r7, #11]
 800464a:	4613      	mov	r3, r2
 800464c:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 800464e:	7afb      	ldrb	r3, [r7, #11]
 8004650:	b29a      	uxth	r2, r3
 8004652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004656:	9302      	str	r3, [sp, #8]
 8004658:	893b      	ldrh	r3, [r7, #8]
 800465a:	9301      	str	r3, [sp, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	2301      	movs	r3, #1
 8004662:	21b9      	movs	r1, #185	; 0xb9
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f005 fd51 	bl	800a10c <HAL_I2C_Mem_Write>
  return 0;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <_ZN7LPS22HH4readEPvhPht>:

int32_t LPS22HH::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af04      	add	r7, sp, #16
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	607a      	str	r2, [r7, #4]
 800467e:	461a      	mov	r2, r3
 8004680:	460b      	mov	r3, r1
 8004682:	72fb      	strb	r3, [r7, #11]
 8004684:	4613      	mov	r3, r2
 8004686:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8004688:	7afb      	ldrb	r3, [r7, #11]
 800468a:	b29a      	uxth	r2, r3
 800468c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004690:	9302      	str	r3, [sp, #8]
 8004692:	893b      	ldrh	r3, [r7, #8]
 8004694:	9301      	str	r3, [sp, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	2301      	movs	r3, #1
 800469c:	21b9      	movs	r1, #185	; 0xb9
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f005 fe2e 	bl	800a300 <HAL_I2C_Mem_Read>
  return 0;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <GPS_Poll>:
#define LED3_GPIO_Port	((GPIO_TypeDef *) ((0x40000000UL + 0x00020000UL) + 0x0800UL))//OUT_LED3_GPIO_Port
#define LED3_Pin	(uint16_t)0x0008//OUT_LED3_Pin


void GPS_Poll(float *latitude, float *longitude, float *time)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08c      	sub	sp, #48	; 0x30
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 80046bc:	2364      	movs	r3, #100	; 0x64
 80046be:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 80046c4:	2300      	movs	r3, #0
 80046c6:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 80046c8:	e073      	b.n	80047b2 <GPS_Poll+0x102>
		HAL_UART_Receive(GPS.uart, (uint8_t*)&rx_current, 1, 100);
 80046ca:	4b3f      	ldr	r3, [pc, #252]	; (80047c8 <GPS_Poll+0x118>)
 80046cc:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80046ce:	2364      	movs	r3, #100	; 0x64
 80046d0:	2201      	movs	r2, #1
 80046d2:	493e      	ldr	r1, [pc, #248]	; (80047cc <GPS_Poll+0x11c>)
 80046d4:	f00b f8af 	bl	800f836 <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 80046d8:	4b3c      	ldr	r3, [pc, #240]	; (80047cc <GPS_Poll+0x11c>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b0a      	cmp	r3, #10
 80046de:	d00f      	beq.n	8004700 <GPS_Poll+0x50>
 80046e0:	4b3b      	ldr	r3, [pc, #236]	; (80047d0 <GPS_Poll+0x120>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b63      	cmp	r3, #99	; 0x63
 80046e6:	d80b      	bhi.n	8004700 <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 80046e8:	4b39      	ldr	r3, [pc, #228]	; (80047d0 <GPS_Poll+0x120>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	b2d1      	uxtb	r1, r2
 80046f0:	4a37      	ldr	r2, [pc, #220]	; (80047d0 <GPS_Poll+0x120>)
 80046f2:	7011      	strb	r1, [r2, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	4b35      	ldr	r3, [pc, #212]	; (80047cc <GPS_Poll+0x11c>)
 80046f8:	7819      	ldrb	r1, [r3, #0]
 80046fa:	4b36      	ldr	r3, [pc, #216]	; (80047d4 <GPS_Poll+0x124>)
 80046fc:	5499      	strb	r1, [r3, r2]
 80046fe:	e021      	b.n	8004744 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 8004700:	4834      	ldr	r0, [pc, #208]	; (80047d4 <GPS_Poll+0x124>)
 8004702:	f000 f869 	bl	80047d8 <GPS_validate>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d013      	beq.n	8004734 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 800470c:	4831      	ldr	r0, [pc, #196]	; (80047d4 <GPS_Poll+0x124>)
 800470e:	f000 f8c5 	bl	800489c <GPS_parse>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00d      	beq.n	8004734 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 8004718:	4b2b      	ldr	r3, [pc, #172]	; (80047c8 <GPS_Poll+0x118>)
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 8004720:	4b29      	ldr	r3, [pc, #164]	; (80047c8 <GPS_Poll+0x118>)
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 8004728:	4b27      	ldr	r3, [pc, #156]	; (80047c8 <GPS_Poll+0x118>)
 800472a:	695a      	ldr	r2, [r3, #20]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	601a      	str	r2, [r3, #0]
					done = 1;
 8004730:	2301      	movs	r3, #1
 8004732:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 8004734:	4b26      	ldr	r3, [pc, #152]	; (80047d0 <GPS_Poll+0x120>)
 8004736:	2200      	movs	r2, #0
 8004738:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 800473a:	2264      	movs	r2, #100	; 0x64
 800473c:	2100      	movs	r1, #0
 800473e:	4825      	ldr	r0, [pc, #148]	; (80047d4 <GPS_Poll+0x124>)
 8004740:	f015 fd28 	bl	801a194 <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS.uart);
 8004744:	2300      	movs	r3, #0
 8004746:	623b      	str	r3, [r7, #32]
 8004748:	4b1f      	ldr	r3, [pc, #124]	; (80047c8 <GPS_Poll+0x118>)
 800474a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	623b      	str	r3, [r7, #32]
 8004752:	4b1d      	ldr	r3, [pc, #116]	; (80047c8 <GPS_Poll+0x118>)
 8004754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	623b      	str	r3, [r7, #32]
 800475c:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS.uart);
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
 8004762:	4b19      	ldr	r3, [pc, #100]	; (80047c8 <GPS_Poll+0x118>)
 8004764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	61fb      	str	r3, [r7, #28]
 800476c:	4b16      	ldr	r3, [pc, #88]	; (80047c8 <GPS_Poll+0x118>)
 800476e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	61fb      	str	r3, [r7, #28]
 8004776:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS.uart);
 8004778:	2300      	movs	r3, #0
 800477a:	61bb      	str	r3, [r7, #24]
 800477c:	4b12      	ldr	r3, [pc, #72]	; (80047c8 <GPS_Poll+0x118>)
 800477e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	61bb      	str	r3, [r7, #24]
 8004786:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <GPS_Poll+0x118>)
 8004788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	61bb      	str	r3, [r7, #24]
 8004790:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS.uart);
 8004792:	2300      	movs	r3, #0
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <GPS_Poll+0x118>)
 8004798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	4b09      	ldr	r3, [pc, #36]	; (80047c8 <GPS_Poll+0x118>)
 80047a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 80047ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80047ae:	3301      	adds	r3, #1
 80047b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 80047b2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80047b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d202      	bcs.n	80047c0 <GPS_Poll+0x110>
 80047ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d084      	beq.n	80046ca <GPS_Poll+0x1a>
	}
}
 80047c0:	bf00      	nop
 80047c2:	3730      	adds	r7, #48	; 0x30
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	20006f00 	.word	0x20006f00
 80047cc:	200005fc 	.word	0x200005fc
 80047d0:	200005fd 	.word	0x200005fd
 80047d4:	20006f64 	.word	0x20006f64

080047d8 <GPS_validate>:

int GPS_validate(char *nmeastr){
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 80047e0:	2300      	movs	r3, #0
 80047e2:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 80047e4:	2300      	movs	r3, #0
 80047e6:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	4413      	add	r3, r2
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b24      	cmp	r3, #36	; 0x24
 80047f2:	d103      	bne.n	80047fc <GPS_validate+0x24>
        i++;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	3301      	adds	r3, #1
 80047f8:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80047fa:	e00c      	b.n	8004816 <GPS_validate+0x3e>
        return 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	e047      	b.n	8004890 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	4413      	add	r3, r2
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	461a      	mov	r2, r3
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	4053      	eors	r3, r2
 800480e:	613b      	str	r3, [r7, #16]
        i++;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	3301      	adds	r3, #1
 8004814:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	4413      	add	r3, r2
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d008      	beq.n	8004834 <GPS_validate+0x5c>
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	4413      	add	r3, r2
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	2b2a      	cmp	r3, #42	; 0x2a
 800482c:	d002      	beq.n	8004834 <GPS_validate+0x5c>
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b4a      	cmp	r3, #74	; 0x4a
 8004832:	dde5      	ble.n	8004800 <GPS_validate+0x28>
    }

    if(i >= 75){
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2b4a      	cmp	r3, #74	; 0x4a
 8004838:	dd01      	ble.n	800483e <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 800483a:	2300      	movs	r3, #0
 800483c:	e028      	b.n	8004890 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	4413      	add	r3, r2
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2b2a      	cmp	r3, #42	; 0x2a
 8004848:	d119      	bne.n	800487e <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	3301      	adds	r3, #1
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	4413      	add	r3, r2
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	3302      	adds	r3, #2
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	4413      	add	r3, r2
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8004862:	2300      	movs	r3, #0
 8004864:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8004866:	f107 0308 	add.w	r3, r7, #8
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	490a      	ldr	r1, [pc, #40]	; (8004898 <GPS_validate+0xc0>)
 800486e:	4618      	mov	r0, r3
 8004870:	f016 ff8c 	bl	801b78c <siprintf>
    return((checkcalcstr[0] == check[0])
 8004874:	7a3a      	ldrb	r2, [r7, #8]
 8004876:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8004878:	429a      	cmp	r2, r3
 800487a:	d108      	bne.n	800488e <GPS_validate+0xb6>
 800487c:	e001      	b.n	8004882 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 800487e:	2300      	movs	r3, #0
 8004880:	e006      	b.n	8004890 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8004882:	7a7a      	ldrb	r2, [r7, #9]
 8004884:	7b7b      	ldrb	r3, [r7, #13]
 8004886:	429a      	cmp	r2, r3
 8004888:	d101      	bne.n	800488e <GPS_validate+0xb6>
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <GPS_validate+0xb8>
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	08020d14 	.word	0x08020d14

0800489c <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 800489c:	b580      	push	{r7, lr}
 800489e:	b08a      	sub	sp, #40	; 0x28
 80048a0:	af08      	add	r7, sp, #32
 80048a2:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 80048a4:	2206      	movs	r2, #6
 80048a6:	496d      	ldr	r1, [pc, #436]	; (8004a5c <GPS_parse+0x1c0>)
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f017 f815 	bl	801b8d8 <strncmp>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d139      	bne.n	8004928 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 80048b4:	4b6a      	ldr	r3, [pc, #424]	; (8004a60 <GPS_parse+0x1c4>)
 80048b6:	9307      	str	r3, [sp, #28]
 80048b8:	4b6a      	ldr	r3, [pc, #424]	; (8004a64 <GPS_parse+0x1c8>)
 80048ba:	9306      	str	r3, [sp, #24]
 80048bc:	4b6a      	ldr	r3, [pc, #424]	; (8004a68 <GPS_parse+0x1cc>)
 80048be:	9305      	str	r3, [sp, #20]
 80048c0:	4b6a      	ldr	r3, [pc, #424]	; (8004a6c <GPS_parse+0x1d0>)
 80048c2:	9304      	str	r3, [sp, #16]
 80048c4:	4b6a      	ldr	r3, [pc, #424]	; (8004a70 <GPS_parse+0x1d4>)
 80048c6:	9303      	str	r3, [sp, #12]
 80048c8:	4b6a      	ldr	r3, [pc, #424]	; (8004a74 <GPS_parse+0x1d8>)
 80048ca:	9302      	str	r3, [sp, #8]
 80048cc:	4b6a      	ldr	r3, [pc, #424]	; (8004a78 <GPS_parse+0x1dc>)
 80048ce:	9301      	str	r3, [sp, #4]
 80048d0:	4b6a      	ldr	r3, [pc, #424]	; (8004a7c <GPS_parse+0x1e0>)
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	4b6a      	ldr	r3, [pc, #424]	; (8004a80 <GPS_parse+0x1e4>)
 80048d6:	4a6b      	ldr	r2, [pc, #428]	; (8004a84 <GPS_parse+0x1e8>)
 80048d8:	496b      	ldr	r1, [pc, #428]	; (8004a88 <GPS_parse+0x1ec>)
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f016 ff76 	bl	801b7cc <siscanf>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f340 80b5 	ble.w	8004a52 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80048e8:	4b68      	ldr	r3, [pc, #416]	; (8004a8c <GPS_parse+0x1f0>)
 80048ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80048ee:	4b67      	ldr	r3, [pc, #412]	; (8004a8c <GPS_parse+0x1f0>)
 80048f0:	7e1b      	ldrb	r3, [r3, #24]
 80048f2:	4618      	mov	r0, r3
 80048f4:	eeb0 0a67 	vmov.f32	s0, s15
 80048f8:	f000 f8ec 	bl	8004ad4 <GPS_nmea_to_dec>
 80048fc:	eef0 7a40 	vmov.f32	s15, s0
 8004900:	4b62      	ldr	r3, [pc, #392]	; (8004a8c <GPS_parse+0x1f0>)
 8004902:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8004906:	4b61      	ldr	r3, [pc, #388]	; (8004a8c <GPS_parse+0x1f0>)
 8004908:	edd3 7a03 	vldr	s15, [r3, #12]
 800490c:	4b5f      	ldr	r3, [pc, #380]	; (8004a8c <GPS_parse+0x1f0>)
 800490e:	7e5b      	ldrb	r3, [r3, #25]
 8004910:	4618      	mov	r0, r3
 8004912:	eeb0 0a67 	vmov.f32	s0, s15
 8004916:	f000 f8dd 	bl	8004ad4 <GPS_nmea_to_dec>
 800491a:	eef0 7a40 	vmov.f32	s15, s0
 800491e:	4b5b      	ldr	r3, [pc, #364]	; (8004a8c <GPS_parse+0x1f0>)
 8004920:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8004924:	2301      	movs	r3, #1
 8004926:	e095      	b.n	8004a54 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 8004928:	2206      	movs	r2, #6
 800492a:	4959      	ldr	r1, [pc, #356]	; (8004a90 <GPS_parse+0x1f4>)
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f016 ffd3 	bl	801b8d8 <strncmp>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d134      	bne.n	80049a2 <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 8004938:	4b56      	ldr	r3, [pc, #344]	; (8004a94 <GPS_parse+0x1f8>)
 800493a:	9305      	str	r3, [sp, #20]
 800493c:	4b56      	ldr	r3, [pc, #344]	; (8004a98 <GPS_parse+0x1fc>)
 800493e:	9304      	str	r3, [sp, #16]
 8004940:	4b56      	ldr	r3, [pc, #344]	; (8004a9c <GPS_parse+0x200>)
 8004942:	9303      	str	r3, [sp, #12]
 8004944:	4b4b      	ldr	r3, [pc, #300]	; (8004a74 <GPS_parse+0x1d8>)
 8004946:	9302      	str	r3, [sp, #8]
 8004948:	4b4b      	ldr	r3, [pc, #300]	; (8004a78 <GPS_parse+0x1dc>)
 800494a:	9301      	str	r3, [sp, #4]
 800494c:	4b4b      	ldr	r3, [pc, #300]	; (8004a7c <GPS_parse+0x1e0>)
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	4b4b      	ldr	r3, [pc, #300]	; (8004a80 <GPS_parse+0x1e4>)
 8004952:	4a4c      	ldr	r2, [pc, #304]	; (8004a84 <GPS_parse+0x1e8>)
 8004954:	4952      	ldr	r1, [pc, #328]	; (8004aa0 <GPS_parse+0x204>)
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f016 ff38 	bl	801b7cc <siscanf>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	dd77      	ble.n	8004a52 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8004962:	4b4a      	ldr	r3, [pc, #296]	; (8004a8c <GPS_parse+0x1f0>)
 8004964:	edd3 7a04 	vldr	s15, [r3, #16]
 8004968:	4b48      	ldr	r3, [pc, #288]	; (8004a8c <GPS_parse+0x1f0>)
 800496a:	7e1b      	ldrb	r3, [r3, #24]
 800496c:	4618      	mov	r0, r3
 800496e:	eeb0 0a67 	vmov.f32	s0, s15
 8004972:	f000 f8af 	bl	8004ad4 <GPS_nmea_to_dec>
 8004976:	eef0 7a40 	vmov.f32	s15, s0
 800497a:	4b44      	ldr	r3, [pc, #272]	; (8004a8c <GPS_parse+0x1f0>)
 800497c:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8004980:	4b42      	ldr	r3, [pc, #264]	; (8004a8c <GPS_parse+0x1f0>)
 8004982:	edd3 7a03 	vldr	s15, [r3, #12]
 8004986:	4b41      	ldr	r3, [pc, #260]	; (8004a8c <GPS_parse+0x1f0>)
 8004988:	7e5b      	ldrb	r3, [r3, #25]
 800498a:	4618      	mov	r0, r3
 800498c:	eeb0 0a67 	vmov.f32	s0, s15
 8004990:	f000 f8a0 	bl	8004ad4 <GPS_nmea_to_dec>
 8004994:	eef0 7a40 	vmov.f32	s15, s0
 8004998:	4b3c      	ldr	r3, [pc, #240]	; (8004a8c <GPS_parse+0x1f0>)
 800499a:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 800499e:	2301      	movs	r3, #1
 80049a0:	e058      	b.n	8004a54 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 80049a2:	2206      	movs	r2, #6
 80049a4:	493f      	ldr	r1, [pc, #252]	; (8004aa4 <GPS_parse+0x208>)
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f016 ff96 	bl	801b8d8 <strncmp>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d130      	bne.n	8004a14 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 80049b2:	4b3d      	ldr	r3, [pc, #244]	; (8004aa8 <GPS_parse+0x20c>)
 80049b4:	9303      	str	r3, [sp, #12]
 80049b6:	4b33      	ldr	r3, [pc, #204]	; (8004a84 <GPS_parse+0x1e8>)
 80049b8:	9302      	str	r3, [sp, #8]
 80049ba:	4b2e      	ldr	r3, [pc, #184]	; (8004a74 <GPS_parse+0x1d8>)
 80049bc:	9301      	str	r3, [sp, #4]
 80049be:	4b2e      	ldr	r3, [pc, #184]	; (8004a78 <GPS_parse+0x1dc>)
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	4b2e      	ldr	r3, [pc, #184]	; (8004a7c <GPS_parse+0x1e0>)
 80049c4:	4a2e      	ldr	r2, [pc, #184]	; (8004a80 <GPS_parse+0x1e4>)
 80049c6:	4939      	ldr	r1, [pc, #228]	; (8004aac <GPS_parse+0x210>)
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f016 feff 	bl	801b7cc <siscanf>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	dd3e      	ble.n	8004a52 <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80049d4:	4b2d      	ldr	r3, [pc, #180]	; (8004a8c <GPS_parse+0x1f0>)
 80049d6:	edd3 7a04 	vldr	s15, [r3, #16]
 80049da:	4b2c      	ldr	r3, [pc, #176]	; (8004a8c <GPS_parse+0x1f0>)
 80049dc:	7e1b      	ldrb	r3, [r3, #24]
 80049de:	4618      	mov	r0, r3
 80049e0:	eeb0 0a67 	vmov.f32	s0, s15
 80049e4:	f000 f876 	bl	8004ad4 <GPS_nmea_to_dec>
 80049e8:	eef0 7a40 	vmov.f32	s15, s0
 80049ec:	4b27      	ldr	r3, [pc, #156]	; (8004a8c <GPS_parse+0x1f0>)
 80049ee:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80049f2:	4b26      	ldr	r3, [pc, #152]	; (8004a8c <GPS_parse+0x1f0>)
 80049f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80049f8:	4b24      	ldr	r3, [pc, #144]	; (8004a8c <GPS_parse+0x1f0>)
 80049fa:	7e5b      	ldrb	r3, [r3, #25]
 80049fc:	4618      	mov	r0, r3
 80049fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004a02:	f000 f867 	bl	8004ad4 <GPS_nmea_to_dec>
 8004a06:	eef0 7a40 	vmov.f32	s15, s0
 8004a0a:	4b20      	ldr	r3, [pc, #128]	; (8004a8c <GPS_parse+0x1f0>)
 8004a0c:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e01f      	b.n	8004a54 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8004a14:	2206      	movs	r2, #6
 8004a16:	4926      	ldr	r1, [pc, #152]	; (8004ab0 <GPS_parse+0x214>)
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f016 ff5d 	bl	801b8d8 <strncmp>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d116      	bne.n	8004a52 <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8004a24:	4b23      	ldr	r3, [pc, #140]	; (8004ab4 <GPS_parse+0x218>)
 8004a26:	9305      	str	r3, [sp, #20]
 8004a28:	4b23      	ldr	r3, [pc, #140]	; (8004ab8 <GPS_parse+0x21c>)
 8004a2a:	9304      	str	r3, [sp, #16]
 8004a2c:	4b23      	ldr	r3, [pc, #140]	; (8004abc <GPS_parse+0x220>)
 8004a2e:	9303      	str	r3, [sp, #12]
 8004a30:	4b1a      	ldr	r3, [pc, #104]	; (8004a9c <GPS_parse+0x200>)
 8004a32:	9302      	str	r3, [sp, #8]
 8004a34:	4b22      	ldr	r3, [pc, #136]	; (8004ac0 <GPS_parse+0x224>)
 8004a36:	9301      	str	r3, [sp, #4]
 8004a38:	4b22      	ldr	r3, [pc, #136]	; (8004ac4 <GPS_parse+0x228>)
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	4b22      	ldr	r3, [pc, #136]	; (8004ac8 <GPS_parse+0x22c>)
 8004a3e:	4a23      	ldr	r2, [pc, #140]	; (8004acc <GPS_parse+0x230>)
 8004a40:	4923      	ldr	r1, [pc, #140]	; (8004ad0 <GPS_parse+0x234>)
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f016 fec2 	bl	801b7cc <siscanf>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	dd01      	ble.n	8004a52 <GPS_parse+0x1b6>
            return 0;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	e000      	b.n	8004a54 <GPS_parse+0x1b8>
    }
    return 0;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	08020d1c 	.word	0x08020d1c
 8004a60:	20006f2c 	.word	0x20006f2c
 8004a64:	20006f28 	.word	0x20006f28
 8004a68:	20006f24 	.word	0x20006f24
 8004a6c:	20006f20 	.word	0x20006f20
 8004a70:	20006f1c 	.word	0x20006f1c
 8004a74:	20006f19 	.word	0x20006f19
 8004a78:	20006f0c 	.word	0x20006f0c
 8004a7c:	20006f18 	.word	0x20006f18
 8004a80:	20006f10 	.word	0x20006f10
 8004a84:	20006f14 	.word	0x20006f14
 8004a88:	08020d24 	.word	0x08020d24
 8004a8c:	20006f00 	.word	0x20006f00
 8004a90:	08020d4c 	.word	0x08020d4c
 8004a94:	20006f38 	.word	0x20006f38
 8004a98:	20006f34 	.word	0x20006f34
 8004a9c:	20006f30 	.word	0x20006f30
 8004aa0:	08020d54 	.word	0x08020d54
 8004aa4:	08020d74 	.word	0x08020d74
 8004aa8:	20006f3c 	.word	0x20006f3c
 8004aac:	08020d7c 	.word	0x08020d7c
 8004ab0:	08020d98 	.word	0x08020d98
 8004ab4:	20006f54 	.word	0x20006f54
 8004ab8:	20006f50 	.word	0x20006f50
 8004abc:	20006f4d 	.word	0x20006f4d
 8004ac0:	20006f4c 	.word	0x20006f4c
 8004ac4:	20006f48 	.word	0x20006f48
 8004ac8:	20006f44 	.word	0x20006f44
 8004acc:	20006f40 	.word	0x20006f40
 8004ad0:	08020da0 	.word	0x08020da0

08004ad4 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	ed87 0a01 	vstr	s0, [r7, #4]
 8004ade:	4603      	mov	r3, r0
 8004ae0:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8004ae2:	ed97 7a01 	vldr	s14, [r7, #4]
 8004ae6:	eddf 6a20 	vldr	s13, [pc, #128]	; 8004b68 <GPS_nmea_to_dec+0x94>
 8004aea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004aee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004af2:	ee17 3a90 	vmov	r3, s15
 8004af6:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	2264      	movs	r2, #100	; 0x64
 8004afc:	fb02 f303 	mul.w	r3, r2, r3
 8004b00:	ee07 3a90 	vmov	s15, r3
 8004b04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b08:	ed97 7a01 	vldr	s14, [r7, #4]
 8004b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b10:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8004b14:	ed97 7a03 	vldr	s14, [r7, #12]
 8004b18:	eddf 6a14 	vldr	s13, [pc, #80]	; 8004b6c <GPS_nmea_to_dec+0x98>
 8004b1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b20:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	ee07 3a90 	vmov	s15, r3
 8004b2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b2e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004b32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b36:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8004b3a:	78fb      	ldrb	r3, [r7, #3]
 8004b3c:	2b53      	cmp	r3, #83	; 0x53
 8004b3e:	d002      	beq.n	8004b46 <GPS_nmea_to_dec+0x72>
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	2b57      	cmp	r3, #87	; 0x57
 8004b44:	d105      	bne.n	8004b52 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8004b46:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b4a:	eef1 7a67 	vneg.f32	s15, s15
 8004b4e:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	ee07 3a90 	vmov	s15, r3
}
 8004b58:	eeb0 0a67 	vmov.f32	s0, s15
 8004b5c:	371c      	adds	r7, #28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	42c80000 	.word	0x42c80000
 8004b6c:	42700000 	.word	0x42700000

08004b70 <GPS_Init>:
	}
}


void GPS_Init(UART_HandleTypeDef* data_uart, void (*gps_print)(char*),
		void (*gps_tone_freq)(uint32_t duration, uint32_t repeats, uint32_t freq)){
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
	GPS.print = gps_print;
 8004b7c:	4a0a      	ldr	r2, [pc, #40]	; (8004ba8 <GPS_Init+0x38>)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	65d3      	str	r3, [r2, #92]	; 0x5c
	GPS.print((char*) "\r\nGPS Init...");
 8004b82:	4b09      	ldr	r3, [pc, #36]	; (8004ba8 <GPS_Init+0x38>)
 8004b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b86:	4809      	ldr	r0, [pc, #36]	; (8004bac <GPS_Init+0x3c>)
 8004b88:	4798      	blx	r3
	GPS.uart = data_uart;
 8004b8a:	4a07      	ldr	r2, [pc, #28]	; (8004ba8 <GPS_Init+0x38>)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6593      	str	r3, [r2, #88]	; 0x58
	GPS.tone_freq = gps_tone_freq;
 8004b90:	4a05      	ldr	r2, [pc, #20]	; (8004ba8 <GPS_Init+0x38>)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6613      	str	r3, [r2, #96]	; 0x60
	GPS.print((char*) "OK\r\n");
 8004b96:	4b04      	ldr	r3, [pc, #16]	; (8004ba8 <GPS_Init+0x38>)
 8004b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b9a:	4805      	ldr	r0, [pc, #20]	; (8004bb0 <GPS_Init+0x40>)
 8004b9c:	4798      	blx	r3
}
 8004b9e:	bf00      	nop
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20006f00 	.word	0x20006f00
 8004bac:	08020dc0 	.word	0x08020dc0
 8004bb0:	08020dd0 	.word	0x08020dd0

08004bb4 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004bb4:	b590      	push	{r4, r7, lr}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	607a      	str	r2, [r7, #4]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	72fb      	strb	r3, [r7, #11]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	685c      	ldr	r4, [r3, #4]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6898      	ldr	r0, [r3, #8]
 8004bd0:	893b      	ldrh	r3, [r7, #8]
 8004bd2:	7af9      	ldrb	r1, [r7, #11]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	47a0      	blx	r4
 8004bd8:	6178      	str	r0, [r7, #20]

  return ret;
 8004bda:	697b      	ldr	r3, [r7, #20]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	371c      	adds	r7, #28
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd90      	pop	{r4, r7, pc}

08004be4 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004be4:	b590      	push	{r4, r7, lr}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	607a      	str	r2, [r7, #4]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	72fb      	strb	r3, [r7, #11]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681c      	ldr	r4, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6898      	ldr	r0, [r3, #8]
 8004c00:	893b      	ldrh	r3, [r7, #8]
 8004c02:	7af9      	ldrb	r1, [r7, #11]
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	47a0      	blx	r4
 8004c08:	6178      	str	r0, [r7, #20]

  return ret;
 8004c0a:	697b      	ldr	r3, [r7, #20]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	371c      	adds	r7, #28
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd90      	pop	{r4, r7, pc}

08004c14 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c26:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004c40 <lps22hh_from_lsb_to_hpa+0x2c>
 8004c2a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004c2e:	eef0 7a66 	vmov.f32	s15, s13
}
 8004c32:	eeb0 0a67 	vmov.f32	s0, s15
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	49800000 	.word	0x49800000

08004c44 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8004c4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c5a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004c74 <lps22hh_from_lsb_to_celsius+0x30>
 8004c5e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004c62:	eef0 7a66 	vmov.f32	s15, s13
}
 8004c66:	eeb0 0a67 	vmov.f32	s0, s15
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	42c80000 	.word	0x42c80000

08004c78 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	460b      	mov	r3, r1
 8004c82:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8004c84:	f107 0208 	add.w	r2, r7, #8
 8004c88:	2301      	movs	r3, #1
 8004c8a:	2110      	movs	r1, #16
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7ff ff91 	bl	8004bb4 <lps22hh_read_reg>
 8004c92:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10f      	bne.n	8004cba <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004c9a:	78fb      	ldrb	r3, [r7, #3]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	7a3b      	ldrb	r3, [r7, #8]
 8004ca4:	f362 0341 	bfi	r3, r2, #1, #1
 8004ca8:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8004caa:	f107 0208 	add.w	r2, r7, #8
 8004cae:	2301      	movs	r3, #1
 8004cb0:	2110      	movs	r1, #16
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7ff ff96 	bl	8004be4 <lps22hh_write_reg>
 8004cb8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004cba:	68fb      	ldr	r3, [r7, #12]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004cd0:	f107 0210 	add.w	r2, r7, #16
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	2110      	movs	r1, #16
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff ff6b 	bl	8004bb4 <lps22hh_read_reg>
 8004cde:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d107      	bne.n	8004cf6 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004ce6:	f107 020c 	add.w	r2, r7, #12
 8004cea:	2301      	movs	r3, #1
 8004cec:	2111      	movs	r1, #17
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7ff ff60 	bl	8004bb4 <lps22hh_read_reg>
 8004cf4:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10f      	bne.n	8004d1c <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8004cfc:	78fb      	ldrb	r3, [r7, #3]
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	7c3b      	ldrb	r3, [r7, #16]
 8004d06:	f362 1306 	bfi	r3, r2, #4, #3
 8004d0a:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004d0c:	f107 0210 	add.w	r2, r7, #16
 8004d10:	2301      	movs	r3, #1
 8004d12:	2110      	movs	r1, #16
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7ff ff65 	bl	8004be4 <lps22hh_write_reg>
 8004d1a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d119      	bne.n	8004d56 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8004d22:	78fb      	ldrb	r3, [r7, #3]
 8004d24:	091b      	lsrs	r3, r3, #4
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	7b3b      	ldrb	r3, [r7, #12]
 8004d2e:	f362 0341 	bfi	r3, r2, #1, #1
 8004d32:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8004d34:	78fb      	ldrb	r3, [r7, #3]
 8004d36:	08db      	lsrs	r3, r3, #3
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	7b3b      	ldrb	r3, [r7, #12]
 8004d40:	f362 0300 	bfi	r3, r2, #0, #1
 8004d44:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004d46:	f107 020c 	add.w	r2, r7, #12
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	2111      	movs	r1, #17
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7ff ff48 	bl	8004be4 <lps22hh_write_reg>
 8004d54:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004d56:	697b      	ldr	r3, [r7, #20]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3718      	adds	r7, #24
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <lps22hh_press_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_press_flag_data_ready_get(stmdev_ctx_t *ctx,
                                          uint8_t *val)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8004d6a:	f107 0208 	add.w	r2, r7, #8
 8004d6e:	2301      	movs	r3, #1
 8004d70:	2127      	movs	r1, #39	; 0x27
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7ff ff1e 	bl	8004bb4 <lps22hh_read_reg>
 8004d78:	60f8      	str	r0, [r7, #12]
  *val = reg.p_da;
 8004d7a:	7a3b      	ldrb	r3, [r7, #8]
 8004d7c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	461a      	mov	r2, r3
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	701a      	strb	r2, [r3, #0]

  return ret;
 8004d88:	68fb      	ldr	r3, [r7, #12]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8004d9c:	f107 0208 	add.w	r2, r7, #8
 8004da0:	2301      	movs	r3, #1
 8004da2:	2127      	movs	r1, #39	; 0x27
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7ff ff05 	bl	8004bb4 <lps22hh_read_reg>
 8004daa:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8004dac:	7a3b      	ldrb	r3, [r7, #8]
 8004dae:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	461a      	mov	r2, r3
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	701a      	strb	r2, [r3, #0]

  return ret;
 8004dba:	68fb      	ldr	r3, [r7, #12]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8004dce:	f107 0208 	add.w	r2, r7, #8
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	2128      	movs	r1, #40	; 0x28
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7ff feec 	bl	8004bb4 <lps22hh_read_reg>
 8004ddc:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8004dde:	7abb      	ldrb	r3, [r7, #10]
 8004de0:	461a      	mov	r2, r3
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	021b      	lsls	r3, r3, #8
 8004dec:	7a7a      	ldrb	r2, [r7, #9]
 8004dee:	441a      	add	r2, r3
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	021b      	lsls	r3, r3, #8
 8004dfa:	7a3a      	ldrb	r2, [r7, #8]
 8004dfc:	441a      	add	r2, r3
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	021a      	lsls	r2, r3, #8
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	601a      	str	r2, [r3, #0]

  return ret;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b084      	sub	sp, #16
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
 8004e1e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8004e20:	f107 0208 	add.w	r2, r7, #8
 8004e24:	2302      	movs	r3, #2
 8004e26:	212b      	movs	r1, #43	; 0x2b
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f7ff fec3 	bl	8004bb4 <lps22hh_read_reg>
 8004e2e:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8004e30:	7a7b      	ldrb	r3, [r7, #9]
 8004e32:	b21a      	sxth	r2, r3
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	021b      	lsls	r3, r3, #8
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	7a3b      	ldrb	r3, [r7, #8]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	4413      	add	r3, r2
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	b21a      	sxth	r2, r3
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	801a      	strh	r2, [r3, #0]

  return ret;
 8004e52:	68fb      	ldr	r3, [r7, #12]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8004e66:	2301      	movs	r3, #1
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	210f      	movs	r1, #15
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7ff fea1 	bl	8004bb4 <lps22hh_read_reg>
 8004e72:	60f8      	str	r0, [r7, #12]

  return ret;
 8004e74:	68fb      	ldr	r3, [r7, #12]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b084      	sub	sp, #16
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	460b      	mov	r3, r1
 8004e88:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004e8a:	f107 0208 	add.w	r2, r7, #8
 8004e8e:	2301      	movs	r3, #1
 8004e90:	2111      	movs	r1, #17
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7ff fe8e 	bl	8004bb4 <lps22hh_read_reg>
 8004e98:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10f      	bne.n	8004ec0 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	7a3b      	ldrb	r3, [r7, #8]
 8004eaa:	f362 0382 	bfi	r3, r2, #2, #1
 8004eae:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004eb0:	f107 0208 	add.w	r2, r7, #8
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	2111      	movs	r1, #17
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7ff fe93 	bl	8004be4 <lps22hh_write_reg>
 8004ebe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004ed4:	f107 0208 	add.w	r2, r7, #8
 8004ed8:	2301      	movs	r3, #1
 8004eda:	2111      	movs	r1, #17
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7ff fe69 	bl	8004bb4 <lps22hh_read_reg>
 8004ee2:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8004ee4:	7a3b      	ldrb	r3, [r7, #8]
 8004ee6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	461a      	mov	r2, r3
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	701a      	strb	r2, [r3, #0]

  return ret;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004efc:	b590      	push	{r4, r7, lr}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	607a      	str	r2, [r7, #4]
 8004f06:	461a      	mov	r2, r3
 8004f08:	460b      	mov	r3, r1
 8004f0a:	72fb      	strb	r3, [r7, #11]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	685c      	ldr	r4, [r3, #4]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6898      	ldr	r0, [r3, #8]
 8004f18:	893b      	ldrh	r3, [r7, #8]
 8004f1a:	7af9      	ldrb	r1, [r7, #11]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	47a0      	blx	r4
 8004f20:	6178      	str	r0, [r7, #20]

  return ret;
 8004f22:	697b      	ldr	r3, [r7, #20]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	371c      	adds	r7, #28
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd90      	pop	{r4, r7, pc}

08004f2c <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004f2c:	b590      	push	{r4, r7, lr}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	607a      	str	r2, [r7, #4]
 8004f36:	461a      	mov	r2, r3
 8004f38:	460b      	mov	r3, r1
 8004f3a:	72fb      	strb	r3, [r7, #11]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681c      	ldr	r4, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6898      	ldr	r0, [r3, #8]
 8004f48:	893b      	ldrh	r3, [r7, #8]
 8004f4a:	7af9      	ldrb	r1, [r7, #11]
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	47a0      	blx	r4
 8004f50:	6178      	str	r0, [r7, #20]

  return ret;
 8004f52:	697b      	ldr	r3, [r7, #20]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	371c      	adds	r7, #28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd90      	pop	{r4, r7, pc}

08004f5c <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	4603      	mov	r3, r0
 8004f64:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8004f66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f6a:	ee07 3a90 	vmov	s15, r3
 8004f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f72:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004f88 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8004f76:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	3d79db23 	.word	0x3d79db23

08004f8c <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	4603      	mov	r3, r0
 8004f94:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8004f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f9a:	ee07 3a90 	vmov	s15, r3
 8004f9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fa2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004fb8 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 8004fa6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004faa:	eeb0 0a67 	vmov.f32	s0, s15
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	428c0000 	.word	0x428c0000

08004fbc <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8004fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fca:	ee07 3a90 	vmov	s15, r3
 8004fce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fd2:	eddf 6a07 	vldr	s13, [pc, #28]	; 8004ff0 <lsm6dsr_from_lsb_to_celsius+0x34>
 8004fd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fda:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004fde:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8004fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	43800000 	.word	0x43800000

08004ff4 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005000:	f107 0208 	add.w	r2, r7, #8
 8005004:	2301      	movs	r3, #1
 8005006:	2110      	movs	r1, #16
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7ff ff77 	bl	8004efc <lsm6dsr_read_reg>
 800500e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10f      	bne.n	8005036 <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8005016:	78fb      	ldrb	r3, [r7, #3]
 8005018:	f003 0303 	and.w	r3, r3, #3
 800501c:	b2da      	uxtb	r2, r3
 800501e:	7a3b      	ldrb	r3, [r7, #8]
 8005020:	f362 0383 	bfi	r3, r2, #2, #2
 8005024:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8005026:	f107 0208 	add.w	r2, r7, #8
 800502a:	2301      	movs	r3, #1
 800502c:	2110      	movs	r1, #16
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7ff ff7c 	bl	8004f2c <lsm6dsr_write_reg>
 8005034:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8005036:	68fb      	ldr	r3, [r7, #12]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	460b      	mov	r3, r1
 800504a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 800504c:	78fb      	ldrb	r3, [r7, #3]
 800504e:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8005050:	f107 030c 	add.w	r3, r7, #12
 8005054:	4619      	mov	r1, r3
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fc54 	bl	8005904 <lsm6dsr_fsm_enable_get>
 800505c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	2b00      	cmp	r3, #0
 8005062:	f040 80c4 	bne.w	80051ee <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005066:	7b3b      	ldrb	r3, [r7, #12]
 8005068:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800506c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800506e:	7b3b      	ldrb	r3, [r7, #12]
 8005070:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005074:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005076:	4313      	orrs	r3, r2
 8005078:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800507a:	7b3b      	ldrb	r3, [r7, #12]
 800507c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005080:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005082:	4313      	orrs	r3, r2
 8005084:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005086:	7b3b      	ldrb	r3, [r7, #12]
 8005088:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800508c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800508e:	4313      	orrs	r3, r2
 8005090:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005092:	7b3b      	ldrb	r3, [r7, #12]
 8005094:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005098:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800509a:	4313      	orrs	r3, r2
 800509c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800509e:	7b3b      	ldrb	r3, [r7, #12]
 80050a0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80050a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80050a6:	4313      	orrs	r3, r2
 80050a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80050aa:	7b3b      	ldrb	r3, [r7, #12]
 80050ac:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80050b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80050b2:	4313      	orrs	r3, r2
 80050b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80050b6:	7b3b      	ldrb	r3, [r7, #12]
 80050b8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80050bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80050be:	4313      	orrs	r3, r2
 80050c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80050c2:	7b7b      	ldrb	r3, [r7, #13]
 80050c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80050c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80050ca:	4313      	orrs	r3, r2
 80050cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80050ce:	7b7b      	ldrb	r3, [r7, #13]
 80050d0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80050d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80050d6:	4313      	orrs	r3, r2
 80050d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80050da:	7b7b      	ldrb	r3, [r7, #13]
 80050dc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80050e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80050e2:	4313      	orrs	r3, r2
 80050e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80050e6:	7b7b      	ldrb	r3, [r7, #13]
 80050e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80050ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80050ee:	4313      	orrs	r3, r2
 80050f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80050f2:	7b7b      	ldrb	r3, [r7, #13]
 80050f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80050f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80050fa:	4313      	orrs	r3, r2
 80050fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80050fe:	7b7b      	ldrb	r3, [r7, #13]
 8005100:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005104:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005106:	4313      	orrs	r3, r2
 8005108:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800510a:	7b7b      	ldrb	r3, [r7, #13]
 800510c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005110:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005112:	4313      	orrs	r3, r2
 8005114:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005116:	7b7b      	ldrb	r3, [r7, #13]
 8005118:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800511c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800511e:	4313      	orrs	r3, r2
 8005120:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005122:	2b01      	cmp	r3, #1
 8005124:	d163      	bne.n	80051ee <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8005126:	f107 030b 	add.w	r3, r7, #11
 800512a:	4619      	mov	r1, r3
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 fc15 	bl	800595c <lsm6dsr_fsm_data_rate_get>
 8005132:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d159      	bne.n	80051ee <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800513a:	7afb      	ldrb	r3, [r7, #11]
 800513c:	2b03      	cmp	r3, #3
 800513e:	d853      	bhi.n	80051e8 <lsm6dsr_xl_data_rate_set+0x1a8>
 8005140:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <lsm6dsr_xl_data_rate_set+0x108>)
 8005142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005146:	bf00      	nop
 8005148:	08005159 	.word	0x08005159
 800514c:	0800516b 	.word	0x0800516b
 8005150:	08005189 	.word	0x08005189
 8005154:	080051b3 	.word	0x080051b3
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8005158:	78fb      	ldrb	r3, [r7, #3]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d102      	bne.n	8005164 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 800515e:	2301      	movs	r3, #1
 8005160:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005162:	e045      	b.n	80051f0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005164:	78fb      	ldrb	r3, [r7, #3]
 8005166:	75fb      	strb	r3, [r7, #23]
            break;
 8005168:	e042      	b.n	80051f0 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800516a:	78fb      	ldrb	r3, [r7, #3]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d102      	bne.n	8005176 <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8005170:	2302      	movs	r3, #2
 8005172:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005174:	e03c      	b.n	80051f0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8005176:	78fb      	ldrb	r3, [r7, #3]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d102      	bne.n	8005182 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 800517c:	2302      	movs	r3, #2
 800517e:	75fb      	strb	r3, [r7, #23]
            break;
 8005180:	e036      	b.n	80051f0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005182:	78fb      	ldrb	r3, [r7, #3]
 8005184:	75fb      	strb	r3, [r7, #23]
            break;
 8005186:	e033      	b.n	80051f0 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8005188:	78fb      	ldrb	r3, [r7, #3]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d102      	bne.n	8005194 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800518e:	2303      	movs	r3, #3
 8005190:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005192:	e02d      	b.n	80051f0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	2b01      	cmp	r3, #1
 8005198:	d102      	bne.n	80051a0 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800519a:	2303      	movs	r3, #3
 800519c:	75fb      	strb	r3, [r7, #23]
            break;
 800519e:	e027      	b.n	80051f0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d102      	bne.n	80051ac <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80051a6:	2303      	movs	r3, #3
 80051a8:	75fb      	strb	r3, [r7, #23]
            break;
 80051aa:	e021      	b.n	80051f0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80051ac:	78fb      	ldrb	r3, [r7, #3]
 80051ae:	75fb      	strb	r3, [r7, #23]
            break;
 80051b0:	e01e      	b.n	80051f0 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80051b2:	78fb      	ldrb	r3, [r7, #3]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d102      	bne.n	80051be <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80051b8:	2304      	movs	r3, #4
 80051ba:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80051bc:	e018      	b.n	80051f0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80051be:	78fb      	ldrb	r3, [r7, #3]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d102      	bne.n	80051ca <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80051c4:	2304      	movs	r3, #4
 80051c6:	75fb      	strb	r3, [r7, #23]
            break;
 80051c8:	e012      	b.n	80051f0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80051ca:	78fb      	ldrb	r3, [r7, #3]
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d102      	bne.n	80051d6 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80051d0:	2304      	movs	r3, #4
 80051d2:	75fb      	strb	r3, [r7, #23]
            break;
 80051d4:	e00c      	b.n	80051f0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 80051d6:	78fb      	ldrb	r3, [r7, #3]
 80051d8:	2b03      	cmp	r3, #3
 80051da:	d102      	bne.n	80051e2 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80051dc:	2304      	movs	r3, #4
 80051de:	75fb      	strb	r3, [r7, #23]
            break;
 80051e0:	e006      	b.n	80051f0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80051e2:	78fb      	ldrb	r3, [r7, #3]
 80051e4:	75fb      	strb	r3, [r7, #23]
            break;
 80051e6:	e003      	b.n	80051f0 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 80051e8:	78fb      	ldrb	r3, [r7, #3]
 80051ea:	75fb      	strb	r3, [r7, #23]
            break;
 80051ec:	e000      	b.n	80051f0 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 80051ee:	bf00      	nop
    }
  }

  if (ret == 0)
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d107      	bne.n	8005206 <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80051f6:	f107 0208 	add.w	r2, r7, #8
 80051fa:	2301      	movs	r3, #1
 80051fc:	2110      	movs	r1, #16
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7ff fe7c 	bl	8004efc <lsm6dsr_read_reg>
 8005204:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10f      	bne.n	800522c <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 800520c:	7dfb      	ldrb	r3, [r7, #23]
 800520e:	f003 030f 	and.w	r3, r3, #15
 8005212:	b2da      	uxtb	r2, r3
 8005214:	7a3b      	ldrb	r3, [r7, #8]
 8005216:	f362 1307 	bfi	r3, r2, #4, #4
 800521a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800521c:	f107 0208 	add.w	r2, r7, #8
 8005220:	2301      	movs	r3, #1
 8005222:	2110      	movs	r1, #16
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7ff fe81 	bl	8004f2c <lsm6dsr_write_reg>
 800522a:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800522c:	693b      	ldr	r3, [r7, #16]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop

08005238 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	460b      	mov	r3, r1
 8005242:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005244:	f107 0208 	add.w	r2, r7, #8
 8005248:	2301      	movs	r3, #1
 800524a:	2111      	movs	r1, #17
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff fe55 	bl	8004efc <lsm6dsr_read_reg>
 8005252:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10f      	bne.n	800527a <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 800525a:	78fb      	ldrb	r3, [r7, #3]
 800525c:	f003 030f 	and.w	r3, r3, #15
 8005260:	b2da      	uxtb	r2, r3
 8005262:	7a3b      	ldrb	r3, [r7, #8]
 8005264:	f362 0303 	bfi	r3, r2, #0, #4
 8005268:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800526a:	f107 0208 	add.w	r2, r7, #8
 800526e:	2301      	movs	r3, #1
 8005270:	2111      	movs	r1, #17
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7ff fe5a 	bl	8004f2c <lsm6dsr_write_reg>
 8005278:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800527a:	68fb      	ldr	r3, [r7, #12]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	460b      	mov	r3, r1
 800528e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8005290:	78fb      	ldrb	r3, [r7, #3]
 8005292:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8005294:	f107 030c 	add.w	r3, r7, #12
 8005298:	4619      	mov	r1, r3
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 fb32 	bl	8005904 <lsm6dsr_fsm_enable_get>
 80052a0:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f040 80c4 	bne.w	8005432 <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80052aa:	7b3b      	ldrb	r3, [r7, #12]
 80052ac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80052b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80052b2:	7b3b      	ldrb	r3, [r7, #12]
 80052b4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80052b8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80052ba:	4313      	orrs	r3, r2
 80052bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80052be:	7b3b      	ldrb	r3, [r7, #12]
 80052c0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80052c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80052c6:	4313      	orrs	r3, r2
 80052c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80052ca:	7b3b      	ldrb	r3, [r7, #12]
 80052cc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80052d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80052d2:	4313      	orrs	r3, r2
 80052d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80052d6:	7b3b      	ldrb	r3, [r7, #12]
 80052d8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80052dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80052de:	4313      	orrs	r3, r2
 80052e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80052e2:	7b3b      	ldrb	r3, [r7, #12]
 80052e4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80052e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80052ea:	4313      	orrs	r3, r2
 80052ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80052ee:	7b3b      	ldrb	r3, [r7, #12]
 80052f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80052f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80052f6:	4313      	orrs	r3, r2
 80052f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80052fa:	7b3b      	ldrb	r3, [r7, #12]
 80052fc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005300:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005302:	4313      	orrs	r3, r2
 8005304:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005306:	7b7b      	ldrb	r3, [r7, #13]
 8005308:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800530c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800530e:	4313      	orrs	r3, r2
 8005310:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005312:	7b7b      	ldrb	r3, [r7, #13]
 8005314:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005318:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800531a:	4313      	orrs	r3, r2
 800531c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800531e:	7b7b      	ldrb	r3, [r7, #13]
 8005320:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005324:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005326:	4313      	orrs	r3, r2
 8005328:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800532a:	7b7b      	ldrb	r3, [r7, #13]
 800532c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005330:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005332:	4313      	orrs	r3, r2
 8005334:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005336:	7b7b      	ldrb	r3, [r7, #13]
 8005338:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800533c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800533e:	4313      	orrs	r3, r2
 8005340:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005342:	7b7b      	ldrb	r3, [r7, #13]
 8005344:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005348:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800534a:	4313      	orrs	r3, r2
 800534c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800534e:	7b7b      	ldrb	r3, [r7, #13]
 8005350:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005354:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005356:	4313      	orrs	r3, r2
 8005358:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800535a:	7b7b      	ldrb	r3, [r7, #13]
 800535c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005360:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005362:	4313      	orrs	r3, r2
 8005364:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005366:	2b01      	cmp	r3, #1
 8005368:	d163      	bne.n	8005432 <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 800536a:	f107 030b 	add.w	r3, r7, #11
 800536e:	4619      	mov	r1, r3
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 faf3 	bl	800595c <lsm6dsr_fsm_data_rate_get>
 8005376:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d159      	bne.n	8005432 <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800537e:	7afb      	ldrb	r3, [r7, #11]
 8005380:	2b03      	cmp	r3, #3
 8005382:	d853      	bhi.n	800542c <lsm6dsr_gy_data_rate_set+0x1a8>
 8005384:	a201      	add	r2, pc, #4	; (adr r2, 800538c <lsm6dsr_gy_data_rate_set+0x108>)
 8005386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538a:	bf00      	nop
 800538c:	0800539d 	.word	0x0800539d
 8005390:	080053af 	.word	0x080053af
 8005394:	080053cd 	.word	0x080053cd
 8005398:	080053f7 	.word	0x080053f7
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 800539c:	78fb      	ldrb	r3, [r7, #3]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d102      	bne.n	80053a8 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 80053a2:	2301      	movs	r3, #1
 80053a4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80053a6:	e045      	b.n	8005434 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80053a8:	78fb      	ldrb	r3, [r7, #3]
 80053aa:	75fb      	strb	r3, [r7, #23]
            break;
 80053ac:	e042      	b.n	8005434 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80053ae:	78fb      	ldrb	r3, [r7, #3]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d102      	bne.n	80053ba <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80053b4:	2302      	movs	r3, #2
 80053b6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80053b8:	e03c      	b.n	8005434 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80053ba:	78fb      	ldrb	r3, [r7, #3]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d102      	bne.n	80053c6 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80053c0:	2302      	movs	r3, #2
 80053c2:	75fb      	strb	r3, [r7, #23]
            break;
 80053c4:	e036      	b.n	8005434 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80053c6:	78fb      	ldrb	r3, [r7, #3]
 80053c8:	75fb      	strb	r3, [r7, #23]
            break;
 80053ca:	e033      	b.n	8005434 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80053cc:	78fb      	ldrb	r3, [r7, #3]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d102      	bne.n	80053d8 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80053d2:	2303      	movs	r3, #3
 80053d4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80053d6:	e02d      	b.n	8005434 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80053d8:	78fb      	ldrb	r3, [r7, #3]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d102      	bne.n	80053e4 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80053de:	2303      	movs	r3, #3
 80053e0:	75fb      	strb	r3, [r7, #23]
            break;
 80053e2:	e027      	b.n	8005434 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80053e4:	78fb      	ldrb	r3, [r7, #3]
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d102      	bne.n	80053f0 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80053ea:	2303      	movs	r3, #3
 80053ec:	75fb      	strb	r3, [r7, #23]
            break;
 80053ee:	e021      	b.n	8005434 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80053f0:	78fb      	ldrb	r3, [r7, #3]
 80053f2:	75fb      	strb	r3, [r7, #23]
            break;
 80053f4:	e01e      	b.n	8005434 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80053f6:	78fb      	ldrb	r3, [r7, #3]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d102      	bne.n	8005402 <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80053fc:	2304      	movs	r3, #4
 80053fe:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005400:	e018      	b.n	8005434 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8005402:	78fb      	ldrb	r3, [r7, #3]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d102      	bne.n	800540e <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8005408:	2304      	movs	r3, #4
 800540a:	75fb      	strb	r3, [r7, #23]
            break;
 800540c:	e012      	b.n	8005434 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 800540e:	78fb      	ldrb	r3, [r7, #3]
 8005410:	2b02      	cmp	r3, #2
 8005412:	d102      	bne.n	800541a <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8005414:	2304      	movs	r3, #4
 8005416:	75fb      	strb	r3, [r7, #23]
            break;
 8005418:	e00c      	b.n	8005434 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 800541a:	78fb      	ldrb	r3, [r7, #3]
 800541c:	2b03      	cmp	r3, #3
 800541e:	d102      	bne.n	8005426 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8005420:	2304      	movs	r3, #4
 8005422:	75fb      	strb	r3, [r7, #23]
            break;
 8005424:	e006      	b.n	8005434 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005426:	78fb      	ldrb	r3, [r7, #3]
 8005428:	75fb      	strb	r3, [r7, #23]
            break;
 800542a:	e003      	b.n	8005434 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 800542c:	78fb      	ldrb	r3, [r7, #3]
 800542e:	75fb      	strb	r3, [r7, #23]
            break;
 8005430:	e000      	b.n	8005434 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 8005432:	bf00      	nop
    }
  }

  if (ret == 0)
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d107      	bne.n	800544a <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800543a:	f107 0208 	add.w	r2, r7, #8
 800543e:	2301      	movs	r3, #1
 8005440:	2111      	movs	r1, #17
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7ff fd5a 	bl	8004efc <lsm6dsr_read_reg>
 8005448:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10f      	bne.n	8005470 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8005450:	7dfb      	ldrb	r3, [r7, #23]
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	b2da      	uxtb	r2, r3
 8005458:	7a3b      	ldrb	r3, [r7, #8]
 800545a:	f362 1307 	bfi	r3, r2, #4, #4
 800545e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005460:	f107 0208 	add.w	r2, r7, #8
 8005464:	2301      	movs	r3, #1
 8005466:	2111      	movs	r1, #17
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7ff fd5f 	bl	8004f2c <lsm6dsr_write_reg>
 800546e:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8005470:	693b      	ldr	r3, [r7, #16]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3718      	adds	r7, #24
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop

0800547c <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	460b      	mov	r3, r1
 8005486:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005488:	f107 0208 	add.w	r2, r7, #8
 800548c:	2301      	movs	r3, #1
 800548e:	2112      	movs	r1, #18
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7ff fd33 	bl	8004efc <lsm6dsr_read_reg>
 8005496:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10f      	bne.n	80054be <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 800549e:	78fb      	ldrb	r3, [r7, #3]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	7a3b      	ldrb	r3, [r7, #8]
 80054a8:	f362 1386 	bfi	r3, r2, #6, #1
 80054ac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80054ae:	f107 0208 	add.w	r2, r7, #8
 80054b2:	2301      	movs	r3, #1
 80054b4:	2112      	movs	r1, #18
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7ff fd38 	bl	8004f2c <lsm6dsr_write_reg>
 80054bc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80054be:	68fb      	ldr	r3, [r7, #12]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80054d2:	f107 0208 	add.w	r2, r7, #8
 80054d6:	2301      	movs	r3, #1
 80054d8:	211e      	movs	r1, #30
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7ff fd0e 	bl	8004efc <lsm6dsr_read_reg>
 80054e0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 80054e2:	7a3b      	ldrb	r3, [r7, #8]
 80054e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	461a      	mov	r2, r3
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	701a      	strb	r2, [r3, #0]

  return ret;
 80054f0:	68fb      	ldr	r3, [r7, #12]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b084      	sub	sp, #16
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8005504:	f107 0208 	add.w	r2, r7, #8
 8005508:	2301      	movs	r3, #1
 800550a:	211e      	movs	r1, #30
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7ff fcf5 	bl	8004efc <lsm6dsr_read_reg>
 8005512:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8005514:	7a3b      	ldrb	r3, [r7, #8]
 8005516:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800551a:	b2db      	uxtb	r3, r3
 800551c:	461a      	mov	r2, r3
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	701a      	strb	r2, [r3, #0]

  return ret;
 8005522:	68fb      	ldr	r3, [r7, #12]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8005536:	f107 0208 	add.w	r2, r7, #8
 800553a:	2301      	movs	r3, #1
 800553c:	211e      	movs	r1, #30
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7ff fcdc 	bl	8004efc <lsm6dsr_read_reg>
 8005544:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 8005546:	7a3b      	ldrb	r3, [r7, #8]
 8005548:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800554c:	b2db      	uxtb	r3, r3
 800554e:	461a      	mov	r2, r3
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	701a      	strb	r2, [r3, #0]

  return ret;
 8005554:	68fb      	ldr	r3, [r7, #12]
}
 8005556:	4618      	mov	r0, r3
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b084      	sub	sp, #16
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
 8005566:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8005568:	f107 0208 	add.w	r2, r7, #8
 800556c:	2302      	movs	r3, #2
 800556e:	2120      	movs	r1, #32
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7ff fcc3 	bl	8004efc <lsm6dsr_read_reg>
 8005576:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8005578:	7a7b      	ldrb	r3, [r7, #9]
 800557a:	b21a      	sxth	r2, r3
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005586:	b29b      	uxth	r3, r3
 8005588:	021b      	lsls	r3, r3, #8
 800558a:	b29a      	uxth	r2, r3
 800558c:	7a3b      	ldrb	r3, [r7, #8]
 800558e:	b29b      	uxth	r3, r3
 8005590:	4413      	add	r3, r2
 8005592:	b29b      	uxth	r3, r3
 8005594:	b21a      	sxth	r2, r3
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	801a      	strh	r2, [r3, #0]

  return ret;
 800559a:	68fb      	ldr	r3, [r7, #12]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 80055ae:	f107 020c 	add.w	r2, r7, #12
 80055b2:	2306      	movs	r3, #6
 80055b4:	2122      	movs	r1, #34	; 0x22
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7ff fca0 	bl	8004efc <lsm6dsr_read_reg>
 80055bc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80055be:	7b7b      	ldrb	r3, [r7, #13]
 80055c0:	b21a      	sxth	r2, r3
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	021b      	lsls	r3, r3, #8
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	7b3b      	ldrb	r3, [r7, #12]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	4413      	add	r3, r2
 80055d8:	b29b      	uxth	r3, r3
 80055da:	b21a      	sxth	r2, r3
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80055e0:	7bfa      	ldrb	r2, [r7, #15]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	3302      	adds	r3, #2
 80055e6:	b212      	sxth	r2, r2
 80055e8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	3302      	adds	r3, #2
 80055ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	021b      	lsls	r3, r3, #8
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	7bbb      	ldrb	r3, [r7, #14]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	4413      	add	r3, r2
 80055fe:	b29a      	uxth	r2, r3
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	3302      	adds	r3, #2
 8005604:	b212      	sxth	r2, r2
 8005606:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005608:	7c7a      	ldrb	r2, [r7, #17]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	3304      	adds	r3, #4
 800560e:	b212      	sxth	r2, r2
 8005610:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	3304      	adds	r3, #4
 8005616:	f9b3 3000 	ldrsh.w	r3, [r3]
 800561a:	b29b      	uxth	r3, r3
 800561c:	021b      	lsls	r3, r3, #8
 800561e:	b29a      	uxth	r2, r3
 8005620:	7c3b      	ldrb	r3, [r7, #16]
 8005622:	b29b      	uxth	r3, r3
 8005624:	4413      	add	r3, r2
 8005626:	b29a      	uxth	r2, r3
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	3304      	adds	r3, #4
 800562c:	b212      	sxth	r2, r2
 800562e:	801a      	strh	r2, [r3, #0]

  return ret;
 8005630:	697b      	ldr	r3, [r7, #20]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3718      	adds	r7, #24
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b086      	sub	sp, #24
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8005644:	f107 020c 	add.w	r2, r7, #12
 8005648:	2306      	movs	r3, #6
 800564a:	2128      	movs	r1, #40	; 0x28
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7ff fc55 	bl	8004efc <lsm6dsr_read_reg>
 8005652:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005654:	7b7b      	ldrb	r3, [r7, #13]
 8005656:	b21a      	sxth	r2, r3
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005662:	b29b      	uxth	r3, r3
 8005664:	021b      	lsls	r3, r3, #8
 8005666:	b29a      	uxth	r2, r3
 8005668:	7b3b      	ldrb	r3, [r7, #12]
 800566a:	b29b      	uxth	r3, r3
 800566c:	4413      	add	r3, r2
 800566e:	b29b      	uxth	r3, r3
 8005670:	b21a      	sxth	r2, r3
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005676:	7bfa      	ldrb	r2, [r7, #15]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	3302      	adds	r3, #2
 800567c:	b212      	sxth	r2, r2
 800567e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	3302      	adds	r3, #2
 8005684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005688:	b29b      	uxth	r3, r3
 800568a:	021b      	lsls	r3, r3, #8
 800568c:	b29a      	uxth	r2, r3
 800568e:	7bbb      	ldrb	r3, [r7, #14]
 8005690:	b29b      	uxth	r3, r3
 8005692:	4413      	add	r3, r2
 8005694:	b29a      	uxth	r2, r3
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	3302      	adds	r3, #2
 800569a:	b212      	sxth	r2, r2
 800569c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800569e:	7c7a      	ldrb	r2, [r7, #17]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	3304      	adds	r3, #4
 80056a4:	b212      	sxth	r2, r2
 80056a6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	3304      	adds	r3, #4
 80056ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	021b      	lsls	r3, r3, #8
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	7c3b      	ldrb	r3, [r7, #16]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	4413      	add	r3, r2
 80056bc:	b29a      	uxth	r2, r3
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	3304      	adds	r3, #4
 80056c2:	b212      	sxth	r2, r2
 80056c4:	801a      	strh	r2, [r3, #0]

  return ret;
 80056c6:	697b      	ldr	r3, [r7, #20]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3718      	adds	r7, #24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	460b      	mov	r3, r1
 80056da:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80056dc:	f107 0208 	add.w	r2, r7, #8
 80056e0:	2301      	movs	r3, #1
 80056e2:	2101      	movs	r1, #1
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7ff fc09 	bl	8004efc <lsm6dsr_read_reg>
 80056ea:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10f      	bne.n	8005712 <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 80056f2:	78fb      	ldrb	r3, [r7, #3]
 80056f4:	f003 0303 	and.w	r3, r3, #3
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	7a3b      	ldrb	r3, [r7, #8]
 80056fc:	f362 1387 	bfi	r3, r2, #6, #2
 8005700:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8005702:	f107 0208 	add.w	r2, r7, #8
 8005706:	2301      	movs	r3, #1
 8005708:	2101      	movs	r1, #1
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7ff fc0e 	bl	8004f2c <lsm6dsr_write_reg>
 8005710:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8005712:	68fb      	ldr	r3, [r7, #12]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8005726:	2301      	movs	r3, #1
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	210f      	movs	r1, #15
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f7ff fbe5 	bl	8004efc <lsm6dsr_read_reg>
 8005732:	60f8      	str	r0, [r7, #12]

  return ret;
 8005734:	68fb      	ldr	r3, [r7, #12]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b084      	sub	sp, #16
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	460b      	mov	r3, r1
 8005748:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800574a:	f107 0208 	add.w	r2, r7, #8
 800574e:	2301      	movs	r3, #1
 8005750:	2112      	movs	r1, #18
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7ff fbd2 	bl	8004efc <lsm6dsr_read_reg>
 8005758:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10f      	bne.n	8005780 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8005760:	78fb      	ldrb	r3, [r7, #3]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	b2da      	uxtb	r2, r3
 8005768:	7a3b      	ldrb	r3, [r7, #8]
 800576a:	f362 0300 	bfi	r3, r2, #0, #1
 800576e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005770:	f107 0208 	add.w	r2, r7, #8
 8005774:	2301      	movs	r3, #1
 8005776:	2112      	movs	r1, #18
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7ff fbd7 	bl	8004f2c <lsm6dsr_write_reg>
 800577e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005780:	68fb      	ldr	r3, [r7, #12]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b084      	sub	sp, #16
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005794:	f107 0208 	add.w	r2, r7, #8
 8005798:	2301      	movs	r3, #1
 800579a:	2112      	movs	r1, #18
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7ff fbad 	bl	8004efc <lsm6dsr_read_reg>
 80057a2:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80057a4:	7a3b      	ldrb	r3, [r7, #8]
 80057a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	461a      	mov	r2, r3
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	701a      	strb	r2, [r3, #0]

  return ret;
 80057b2:	68fb      	ldr	r3, [r7, #12]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <lsm6dsr_xl_filter_lp2_set>:
  * @param  val    Change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	460b      	mov	r3, r1
 80057c6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80057c8:	f107 0208 	add.w	r2, r7, #8
 80057cc:	2301      	movs	r3, #1
 80057ce:	2110      	movs	r1, #16
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f7ff fb93 	bl	8004efc <lsm6dsr_read_reg>
 80057d6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10f      	bne.n	80057fe <lsm6dsr_xl_filter_lp2_set+0x42>
  {
    ctrl1_xl.lpf2_xl_en = (uint8_t)val;
 80057de:	78fb      	ldrb	r3, [r7, #3]
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	7a3b      	ldrb	r3, [r7, #8]
 80057e8:	f362 0341 	bfi	r3, r2, #1, #1
 80057ec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 80057ee:	f107 0208 	add.w	r2, r7, #8
 80057f2:	2301      	movs	r3, #1
 80057f4:	2110      	movs	r1, #16
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7ff fb98 	bl	8004f2c <lsm6dsr_write_reg>
 80057fc:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80057fe:	68fb      	ldr	r3, [r7, #12]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <lsm6dsr_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dsr_hp_slope_xl_en_t val)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	460b      	mov	r3, r1
 8005812:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8005814:	f107 0208 	add.w	r2, r7, #8
 8005818:	2301      	movs	r3, #1
 800581a:	2117      	movs	r1, #23
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff fb6d 	bl	8004efc <lsm6dsr_read_reg>
 8005822:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d121      	bne.n	800586e <lsm6dsr_xl_hp_path_on_out_set+0x66>
  {
    ctrl8_xl.hp_slope_xl_en = (((uint8_t)val & 0x10U) >> 4);
 800582a:	78fb      	ldrb	r3, [r7, #3]
 800582c:	091b      	lsrs	r3, r3, #4
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	b2da      	uxtb	r2, r3
 8005834:	7a3b      	ldrb	r3, [r7, #8]
 8005836:	f362 0382 	bfi	r3, r2, #2, #1
 800583a:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_ref_mode_xl = (((uint8_t)val & 0x20U) >> 5);
 800583c:	78fb      	ldrb	r3, [r7, #3]
 800583e:	095b      	lsrs	r3, r3, #5
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	b2da      	uxtb	r2, r3
 8005846:	7a3b      	ldrb	r3, [r7, #8]
 8005848:	f362 1304 	bfi	r3, r2, #4, #1
 800584c:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 800584e:	78fb      	ldrb	r3, [r7, #3]
 8005850:	f003 0307 	and.w	r3, r3, #7
 8005854:	b2da      	uxtb	r2, r3
 8005856:	7a3b      	ldrb	r3, [r7, #8]
 8005858:	f362 1347 	bfi	r3, r2, #5, #3
 800585c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL8_XL,
 800585e:	f107 0208 	add.w	r2, r7, #8
 8005862:	2301      	movs	r3, #1
 8005864:	2117      	movs	r1, #23
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7ff fb60 	bl	8004f2c <lsm6dsr_write_reg>
 800586c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 800586e:	68fb      	ldr	r3, [r7, #12]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	460b      	mov	r3, r1
 8005882:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005884:	f107 0210 	add.w	r2, r7, #16
 8005888:	2301      	movs	r3, #1
 800588a:	2118      	movs	r1, #24
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7ff fb35 	bl	8004efc <lsm6dsr_read_reg>
 8005892:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d111      	bne.n	80058be <lsm6dsr_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 800589a:	78fb      	ldrb	r3, [r7, #3]
 800589c:	09db      	lsrs	r3, r3, #7
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	b2da      	uxtb	r2, r3
 80058a6:	7c3b      	ldrb	r3, [r7, #16]
 80058a8:	f362 0341 	bfi	r3, r2, #1, #1
 80058ac:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 80058ae:	f107 0210 	add.w	r2, r7, #16
 80058b2:	2301      	movs	r3, #1
 80058b4:	2118      	movs	r1, #24
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7ff fb38 	bl	8004f2c <lsm6dsr_write_reg>
 80058bc:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d107      	bne.n	80058d4 <lsm6dsr_i3c_disable_set+0x5c>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 80058c4:	f107 020c 	add.w	r2, r7, #12
 80058c8:	2301      	movs	r3, #1
 80058ca:	2162      	movs	r1, #98	; 0x62
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff fb15 	bl	8004efc <lsm6dsr_read_reg>
 80058d2:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10f      	bne.n	80058fa <lsm6dsr_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80058da:	78fb      	ldrb	r3, [r7, #3]
 80058dc:	f003 0303 	and.w	r3, r3, #3
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	7b3b      	ldrb	r3, [r7, #12]
 80058e4:	f362 03c4 	bfi	r3, r2, #3, #2
 80058e8:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 80058ea:	f107 020c 	add.w	r2, r7, #12
 80058ee:	2301      	movs	r3, #1
 80058f0:	2162      	movs	r1, #98	; 0x62
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7ff fb1a 	bl	8004f2c <lsm6dsr_write_reg>
 80058f8:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 80058fa:	697b      	ldr	r3, [r7, #20]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3718      	adds	r7, #24
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800590e:	2102      	movs	r1, #2
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7ff fedd 	bl	80056d0 <lsm6dsr_mem_bank_set>
 8005916:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d106      	bne.n	800592c <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 800591e:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 8005920:	2301      	movs	r3, #1
 8005922:	2146      	movs	r1, #70	; 0x46
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7ff fae9 	bl	8004efc <lsm6dsr_read_reg>
 800592a:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d107      	bne.n	8005942 <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 8005936:	2301      	movs	r3, #1
 8005938:	2147      	movs	r1, #71	; 0x47
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7ff fade 	bl	8004efc <lsm6dsr_read_reg>
 8005940:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d104      	bne.n	8005952 <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8005948:	2100      	movs	r1, #0
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7ff fec0 	bl	80056d0 <lsm6dsr_mem_bank_set>
 8005950:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005952:	68fb      	ldr	r3, [r7, #12]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8005966:	2102      	movs	r1, #2
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7ff feb1 	bl	80056d0 <lsm6dsr_mem_bank_set>
 800596e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d107      	bne.n	8005986 <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 8005976:	f107 0208 	add.w	r2, r7, #8
 800597a:	2301      	movs	r3, #1
 800597c:	215f      	movs	r1, #95	; 0x5f
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7ff fabc 	bl	8004efc <lsm6dsr_read_reg>
 8005984:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d104      	bne.n	8005996 <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800598c:	2100      	movs	r1, #0
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7ff fe9e 	bl	80056d0 <lsm6dsr_mem_bank_set>
 8005994:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8005996:	7a3b      	ldrb	r3, [r7, #8]
 8005998:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b03      	cmp	r3, #3
 80059a0:	d81a      	bhi.n	80059d8 <lsm6dsr_fsm_data_rate_get+0x7c>
 80059a2:	a201      	add	r2, pc, #4	; (adr r2, 80059a8 <lsm6dsr_fsm_data_rate_get+0x4c>)
 80059a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a8:	080059b9 	.word	0x080059b9
 80059ac:	080059c1 	.word	0x080059c1
 80059b0:	080059c9 	.word	0x080059c9
 80059b4:	080059d1 	.word	0x080059d1
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2200      	movs	r2, #0
 80059bc:	701a      	strb	r2, [r3, #0]
      break;
 80059be:	e00f      	b.n	80059e0 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	2201      	movs	r2, #1
 80059c4:	701a      	strb	r2, [r3, #0]
      break;
 80059c6:	e00b      	b.n	80059e0 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	2202      	movs	r2, #2
 80059cc:	701a      	strb	r2, [r3, #0]
      break;
 80059ce:	e007      	b.n	80059e0 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2203      	movs	r2, #3
 80059d4:	701a      	strb	r2, [r3, #0]
      break;
 80059d6:	e003      	b.n	80059e0 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	2200      	movs	r2, #0
 80059dc:	701a      	strb	r2, [r3, #0]
      break;
 80059de:	bf00      	nop
  }

  return ret;
 80059e0:	68fb      	ldr	r3, [r7, #12]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop

080059ec <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	4611      	mov	r1, r2
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	4798      	blx	r3
 8005a06:	4603      	mov	r3, r0
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <_Z12ISBDCallbackv>:

bool ISBDCallback() __attribute__((weak));
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	2301      	movs	r3, #1
 8005a16:	4618      	mov	r0, r3
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <_Z19ISBDConsoleCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	70fb      	strb	r3, [r7, #3]
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	460b      	mov	r3, r1
 8005a42:	70fb      	strb	r3, [r7, #3]
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <_ZN10IridiumSBD5beginEv>:



// Power on the RockBLOCK or return from sleep
int IridiumSBD::begin()
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <_ZN10IridiumSBD5beginEv+0x16>
      return ISBD_REENTRANT;
 8005a62:	2309      	movs	r3, #9
 8005a64:	e01a      	b.n	8005a9c <_ZN10IridiumSBD5beginEv+0x4c>

   this->reentrant = true;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalBegin();
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 faf6 	bl	8006060 <_ZN10IridiumSBD13internalBeginEv>
 8005a74:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

   // Absent a successful startup, keep the device turned off
   if (ret != ISBD_SUCCESS)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00a      	beq.n	8005a9a <_ZN10IridiumSBD5beginEv+0x4a>
   {
      if (this->useSerial)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	7c5b      	ldrb	r3, [r3, #17]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <_ZN10IridiumSBD5beginEv+0x42>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f001 fc25 	bl	80072dc <_ZN10IridiumSBD13endSerialPortEv>
      power(false);
 8005a92:	2100      	movs	r1, #0
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f001 fb73 	bl	8007180 <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <_ZN10IridiumSBD11sendSBDTextEPKc>:
   return ret;
}

// Transmit a text message
int IridiumSBD::sendSBDText(const char *message)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <_ZN10IridiumSBD11sendSBDTextEPKc+0x18>
      return ISBD_REENTRANT;
 8005ab8:	2309      	movs	r3, #9
 8005aba:	e013      	b.n	8005ae4 <_ZN10IridiumSBD11sendSBDTextEPKc+0x40>

   this->reentrant = true;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalSendReceiveSBD(message, NULL, 0, NULL, NULL);
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	9301      	str	r3, [sp, #4]
 8005ac8:	2300      	movs	r3, #0
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	2300      	movs	r3, #0
 8005ace:	2200      	movs	r2, #0
 8005ad0:	6839      	ldr	r1, [r7, #0]
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 fc4a 	bl	800636c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj>
 8005ad8:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <_ZN10IridiumSBD16getSignalQualityERi>:
   return ret;
}

// High-level wrapper for AT+CSQ
int IridiumSBD::getSignalQuality(int &quality)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <_ZN10IridiumSBD16getSignalQualityERi+0x18>
      return ISBD_REENTRANT;
 8005b00:	2309      	movs	r3, #9
 8005b02:	e00d      	b.n	8005b20 <_ZN10IridiumSBD16getSignalQualityERi+0x34>

   this->reentrant = true;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalGetSignalQuality(quality);
 8005b0c:	6839      	ldr	r1, [r7, #0]
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fee8 	bl	80068e4 <_ZN10IridiumSBD24internalGetSignalQualityERi>
 8005b14:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <_ZN10IridiumSBD15adjustATTimeoutEi>:
   }
}

// Tweak AT timeout
void IridiumSBD::adjustATTimeout(int seconds)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
   this->atTimeout = seconds;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <_ZN10IridiumSBD16enableRingAlertsEb>:
{
   this->msstmWorkaroundRequested = useWorkAround;
}

void IridiumSBD::enableRingAlerts(bool enable) // true to enable SBDRING alerts and RING signal pin
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	70fb      	strb	r3, [r7, #3]
   this->ringAlertsEnabled = enable;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	78fa      	ldrb	r2, [r7, #3]
 8005b54:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
   if (enable)
 8005b58:	78fb      	ldrb	r3, [r7, #3]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00d      	beq.n	8005b7a <_ZN10IridiumSBD16enableRingAlertsEb+0x36>
   {
      this->ringAsserted = false;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      if (!this->useSerial) // If we are using I2C, clear the ring indicator flag
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	7c5b      	ldrb	r3, [r3, #17]
 8005b6a:	f083 0301 	eor.w	r3, r3, #1
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <_ZN10IridiumSBD16enableRingAlertsEb+0x36>
      {
        clearRingIndicator();
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f9b3 	bl	8005ee0 <_ZN10IridiumSBD18clearRingIndicatorEv>
      }
   }
}
 8005b7a:	bf00      	nop
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
	...

08005b84 <_ZN10IridiumSBD13getSystemTimeER2tm>:

   return ret;
}

int IridiumSBD::getSystemTime(struct tm &tm)
{
 8005b84:	b5b0      	push	{r4, r5, r7, lr}
 8005b86:	b09c      	sub	sp, #112	; 0x70
 8005b88:	af02      	add	r7, sp, #8
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
   char msstmResponseBuf[24];

   send(F("AT-MSSTM\r"));
 8005b8e:	2301      	movs	r3, #1
 8005b90:	2201      	movs	r2, #1
 8005b92:	493f      	ldr	r1, [pc, #252]	; (8005c90 <_ZN10IridiumSBD13getSystemTimeER2tm+0x10c>)
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f001 fbaf 	bl	80072f8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(msstmResponseBuf, sizeof(msstmResponseBuf), "-MSSTM: "))
 8005b9a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005b9e:	4b3d      	ldr	r3, [pc, #244]	; (8005c94 <_ZN10IridiumSBD13getSystemTimeER2tm+0x110>)
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	4b3d      	ldr	r3, [pc, #244]	; (8005c98 <_ZN10IridiumSBD13getSystemTimeER2tm+0x114>)
 8005ba4:	2218      	movs	r2, #24
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 ff48 	bl	8006a3c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8005bac:	4603      	mov	r3, r0
 8005bae:	f083 0301 	eor.w	r3, r3, #1
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d009      	beq.n	8005bcc <_ZN10IridiumSBD13getSystemTimeER2tm+0x48>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fff9 	bl	8006bb0 <_ZN10IridiumSBD9cancelledEv>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <_ZN10IridiumSBD13getSystemTimeER2tm+0x44>
 8005bc4:	2304      	movs	r3, #4
 8005bc6:	e05e      	b.n	8005c86 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e05c      	b.n	8005c86 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   if (!isxdigit(msstmResponseBuf[0]))
 8005bcc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f014 f985 	bl	8019ee0 <isxdigit>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <_ZN10IridiumSBD13getSystemTimeER2tm+0x5c>
      return ISBD_NO_NETWORK;
 8005bdc:	230c      	movs	r3, #12
 8005bde:	e052      	b.n	8005c86 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   // Latest epoch began at May 11, 2014, at 14:23:55 UTC.
   struct tm epoch_start;
   epoch_start.tm_year = 2014 - 1900;
 8005be0:	2372      	movs	r3, #114	; 0x72
 8005be2:	62bb      	str	r3, [r7, #40]	; 0x28
   epoch_start.tm_mon = 5 - 1;
 8005be4:	2304      	movs	r3, #4
 8005be6:	627b      	str	r3, [r7, #36]	; 0x24
   epoch_start.tm_mday = 11;
 8005be8:	230b      	movs	r3, #11
 8005bea:	623b      	str	r3, [r7, #32]
   epoch_start.tm_hour = 14;
 8005bec:	230e      	movs	r3, #14
 8005bee:	61fb      	str	r3, [r7, #28]
   epoch_start.tm_min = 23;
 8005bf0:	2317      	movs	r3, #23
 8005bf2:	61bb      	str	r3, [r7, #24]
   epoch_start.tm_sec = 55;
 8005bf4:	2337      	movs	r3, #55	; 0x37
 8005bf6:	617b      	str	r3, [r7, #20]

   unsigned long ticks_since_epoch = strtoul(msstmResponseBuf, NULL, 16);
 8005bf8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005bfc:	2210      	movs	r2, #16
 8005bfe:	2100      	movs	r1, #0
 8005c00:	4618      	mov	r0, r3
 8005c02:	f016 fe13 	bl	801c82c <strtoul>
 8005c06:	6678      	str	r0, [r7, #100]	; 0x64
      seconds less than the equivalent ticks_since_epoch. Subtract that away and
      we'll be left with a small number that won't overflow when we scale by 90/1000.

      Many thanks to Scott Weldon for this suggestion.
   */
   unsigned long secs_since_epoch = (ticks_since_epoch / 1000) * 90;
 8005c08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c0a:	4a24      	ldr	r2, [pc, #144]	; (8005c9c <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 8005c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c10:	099b      	lsrs	r3, r3, #6
 8005c12:	225a      	movs	r2, #90	; 0x5a
 8005c14:	fb02 f303 	mul.w	r3, r2, r3
 8005c18:	663b      	str	r3, [r7, #96]	; 0x60
   unsigned long small_ticks = ticks_since_epoch - (secs_since_epoch / 90) * 1000;
 8005c1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c1c:	085b      	lsrs	r3, r3, #1
 8005c1e:	4a20      	ldr	r2, [pc, #128]	; (8005ca0 <_ZN10IridiumSBD13getSystemTimeER2tm+0x11c>)
 8005c20:	fba2 2303 	umull	r2, r3, r2, r3
 8005c24:	095b      	lsrs	r3, r3, #5
 8005c26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c2a:	fb02 f303 	mul.w	r3, r2, r3
 8005c2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	65fb      	str	r3, [r7, #92]	; 0x5c
   secs_since_epoch += small_ticks * 90 / 1000;
 8005c34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c36:	225a      	movs	r2, #90	; 0x5a
 8005c38:	fb02 f303 	mul.w	r3, r2, r3
 8005c3c:	4a17      	ldr	r2, [pc, #92]	; (8005c9c <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 8005c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c42:	099b      	lsrs	r3, r3, #6
 8005c44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c46:	4413      	add	r3, r2
 8005c48:	663b      	str	r3, [r7, #96]	; 0x60

   time_t epoch_time = mktime(&epoch_start);
 8005c4a:	f107 0314 	add.w	r3, r7, #20
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f014 fb80 	bl	801a354 <mktime>
 8005c54:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
   time_t now = epoch_time + secs_since_epoch;
 8005c58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f04f 0100 	mov.w	r1, #0
 8005c60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c64:	1884      	adds	r4, r0, r2
 8005c66:	eb41 0503 	adc.w	r5, r1, r3
 8005c6a:	e9c7 4502 	strd	r4, r5, [r7, #8]
   memcpy(&tm, localtime(&now), sizeof tm);
 8005c6e:	f107 0308 	add.w	r3, r7, #8
 8005c72:	4618      	mov	r0, r3
 8005c74:	f014 f93c 	bl	8019ef0 <localtime>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2224      	movs	r2, #36	; 0x24
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	6838      	ldr	r0, [r7, #0]
 8005c80:	f014 fa60 	bl	801a144 <memcpy>
   return ISBD_SUCCESS;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3768      	adds	r7, #104	; 0x68
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	08020e00 	.word	0x08020e00
 8005c94:	08020e18 	.word	0x08020e18
 8005c98:	08020e0c 	.word	0x08020e0c
 8005c9c:	10624dd3 	.word	0x10624dd3
 8005ca0:	b60b60b7 	.word	0xb60b60b7

08005ca4 <_ZN10IridiumSBD18getFirmwareVersionEPcj>:

int IridiumSBD::getFirmwareVersion(char *version, size_t bufferSize)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af02      	add	r7, sp, #8
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
   if (bufferSize < 8)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b07      	cmp	r3, #7
 8005cb4:	d801      	bhi.n	8005cba <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x16>
      return ISBD_RX_OVERFLOW;
 8005cb6:	2308      	movs	r3, #8
 8005cb8:	e01e      	b.n	8005cf8 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   send(F("AT+CGMR\r"));
 8005cba:	2301      	movs	r3, #1
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	4910      	ldr	r1, [pc, #64]	; (8005d00 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x5c>)
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f001 fb19 	bl	80072f8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(version, bufferSize, "Call Processor Version: "))
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	4b0e      	ldr	r3, [pc, #56]	; (8005d04 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x60>)
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	4b0e      	ldr	r3, [pc, #56]	; (8005d08 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x64>)
 8005cce:	68b9      	ldr	r1, [r7, #8]
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 feb3 	bl	8006a3c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	f083 0301 	eor.w	r3, r3, #1
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d009      	beq.n	8005cf6 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x52>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f000 ff64 	bl	8006bb0 <_ZN10IridiumSBD9cancelledEv>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x4e>
 8005cee:	2304      	movs	r3, #4
 8005cf0:	e002      	b.n	8005cf8 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e000      	b.n	8005cf8 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   return ISBD_SUCCESS;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	08020e20 	.word	0x08020e20
 8005d04:	08020e18 	.word	0x08020e18
 8005d08:	08020e2c 	.word	0x08020e2c

08005d0c <_ZN10IridiumSBD21enableSuperCapChargerEb>:

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	460b      	mov	r3, r1
 8005d16:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	7c5b      	ldrb	r3, [r3, #17]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d004      	beq.n	8005d2a <_ZN10IridiumSBD21enableSuperCapChargerEb+0x1e>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8005d20:	4918      	ldr	r1, [pc, #96]	; (8005d84 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f001 fc5e 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8005d28:	e028      	b.n	8005d7c <_ZN10IridiumSBD21enableSuperCapChargerEb+0x70>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f001 ff2f 	bl	8007b8e <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8005d30:	78fb      	ldrb	r3, [r7, #3]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00b      	beq.n	8005d4e <_ZN10IridiumSBD21enableSuperCapChargerEb+0x42>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005d42:	4313      	orrs	r3, r2
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8005d4c:	e00f      	b.n	8005d6e <_ZN10IridiumSBD21enableSuperCapChargerEb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005d54:	b25a      	sxtb	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005d5c:	b25b      	sxtb	r3, r3
 8005d5e:	43db      	mvns	r3, r3
 8005d60:	b25b      	sxtb	r3, r3
 8005d62:	4013      	ands	r3, r2
 8005d64:	b25b      	sxtb	r3, r3
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005d74:	4619      	mov	r1, r3
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f001 ff42 	bl	8007c00 <_ZN10IridiumSBD11set9603pinsEh>
}
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	08020e48 	.word	0x08020e48

08005d88 <_ZN10IridiumSBD20checkSuperCapChargerEv>:

bool IridiumSBD::checkSuperCapCharger()
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial (the user will have to check PGOOD manually)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	7c5b      	ldrb	r3, [r3, #17]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d005      	beq.n	8005da4 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x1c>
  {
    diagprint(F("checkSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8005d98:	4912      	ldr	r1, [pc, #72]	; (8005de4 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x5c>)
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f001 fc22 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 8005da0:	2300      	movs	r3, #0
 8005da2:	e01a      	b.n	8005dda <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  }

  // Check the status of the supercapacitor charger PGOOD pin
  check9603pins(); // Update IO_REGISTER
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f001 fef2 	bl	8007b8e <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_PGOOD) // If the PGOOD bit is set, return true
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8005db6:	4013      	ands	r3, r2
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	bf14      	ite	ne
 8005dca:	2301      	movne	r3, #1
 8005dcc:	2300      	moveq	r3, #0
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x50>
  {
    return(true);
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e000      	b.n	8005dda <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  }
  else
  {
    return(false);
 8005dd8:	2300      	movs	r3, #0
  }
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	08020e94 	.word	0x08020e94

08005de8 <_ZN10IridiumSBD16enable9603NpowerEb>:

void IridiumSBD::enable9603Npower(bool enable)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	460b      	mov	r3, r1
 8005df2:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	7c5b      	ldrb	r3, [r3, #17]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d004      	beq.n	8005e06 <_ZN10IridiumSBD16enable9603NpowerEb+0x1e>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 8005dfc:	4918      	ldr	r1, [pc, #96]	; (8005e60 <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f001 fbf0 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8005e04:	e028      	b.n	8005e58 <_ZN10IridiumSBD16enable9603NpowerEb+0x70>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f001 fec1 	bl	8007b8e <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8005e0c:	78fb      	ldrb	r3, [r7, #3]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00b      	beq.n	8005e2a <_ZN10IridiumSBD16enable9603NpowerEb+0x42>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8005e28:	e00f      	b.n	8005e4a <_ZN10IridiumSBD16enable9603NpowerEb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005e30:	b25a      	sxtb	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8005e38:	b25b      	sxtb	r3, r3
 8005e3a:	43db      	mvns	r3, r3
 8005e3c:	b25b      	sxtb	r3, r3
 8005e3e:	4013      	ands	r3, r2
 8005e40:	b25b      	sxtb	r3, r3
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005e50:	4619      	mov	r1, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f001 fed4 	bl	8007c00 <_ZN10IridiumSBD11set9603pinsEh>
}
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	08020ee0 	.word	0x08020ee0

08005e64 <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	7c5b      	ldrb	r3, [r3, #17]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d004      	beq.n	8005e82 <_ZN10IridiumSBD10enable9603Eb+0x1e>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 8005e78:	4918      	ldr	r1, [pc, #96]	; (8005edc <_ZN10IridiumSBD10enable9603Eb+0x78>)
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f001 fbb2 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8005e80:	e028      	b.n	8005ed4 <_ZN10IridiumSBD10enable9603Eb+0x70>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f001 fe83 	bl	8007b8e <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8005e88:	78fb      	ldrb	r3, [r7, #3]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00b      	beq.n	8005ea6 <_ZN10IridiumSBD10enable9603Eb+0x42>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8005ea4:	e00f      	b.n	8005ec6 <_ZN10IridiumSBD10enable9603Eb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005eac:	b25a      	sxtb	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8005eb4:	b25b      	sxtb	r3, r3
 8005eb6:	43db      	mvns	r3, r3
 8005eb8:	b25b      	sxtb	r3, r3
 8005eba:	4013      	ands	r3, r2
 8005ebc:	b25b      	sxtb	r3, r3
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005ecc:	4619      	mov	r1, r3
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f001 fe96 	bl	8007c00 <_ZN10IridiumSBD11set9603pinsEh>
}
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	08020f28 	.word	0x08020f28

08005ee0 <_ZN10IridiumSBD18clearRingIndicatorEv>:
    return(false);
  }
}

void IridiumSBD::clearRingIndicator()
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	7c5b      	ldrb	r3, [r3, #17]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d004      	beq.n	8005efa <_ZN10IridiumSBD18clearRingIndicatorEv+0x1a>
  {
    diagprint(F("clearRingIndicator is only valid when using I2C on the Qwiic Iridium\r\n"));
 8005ef0:	4912      	ldr	r1, [pc, #72]	; (8005f3c <_ZN10IridiumSBD18clearRingIndicatorEv+0x5c>)
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f001 fb76 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8005ef8:	e01d      	b.n	8005f36 <_ZN10IridiumSBD18clearRingIndicatorEv+0x56>
  }

  // Clear the 9603 RI flag
  check9603pins(); // Update IO_REGISTER
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f001 fe47 	bl	8007b8e <_ZN10IridiumSBD13check9603pinsEv>
  IO_REGISTER &= ~IO_RI; // Clear the RI bit
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005f06:	b25a      	sxtb	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005f0e:	b25b      	sxtb	r3, r3
 8005f10:	43db      	mvns	r3, r3
 8005f12:	b25b      	sxtb	r3, r3
 8005f14:	4013      	ands	r3, r2
 8005f16:	b25b      	sxtb	r3, r3
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  set9603pins(IO_REGISTER); // Update the pins
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005f26:	4619      	mov	r1, r3
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f001 fe69 	bl	8007c00 <_ZN10IridiumSBD11set9603pinsEh>
  this->ringAsserted = false; // Also clear the ringAsserted flag
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
}
 8005f36:	3708      	adds	r7, #8
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	08020ff8 	.word	0x08020ff8

08005f40 <_ZN10IridiumSBD21checkNetworkAvailableEv>:

bool IridiumSBD::checkNetworkAvailable()
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	7c5b      	ldrb	r3, [r3, #17]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d005      	beq.n	8005f5c <_ZN10IridiumSBD21checkNetworkAvailableEv+0x1c>
  {
    diagprint(F("checkNetworkAvailable is only valid when using I2C on the Qwiic Iridium\r\n"));
 8005f50:	4912      	ldr	r1, [pc, #72]	; (8005f9c <_ZN10IridiumSBD21checkNetworkAvailableEv+0x5c>)
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f001 fb46 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 8005f58:	2300      	movs	r3, #0
 8005f5a:	e01a      	b.n	8005f92 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x52>
  }

  // Check the status of the 9603 Network Available pin
  check9603pins(); // Update IO_REGISTER
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f001 fe16 	bl	8007b8e <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_NA) // If the NA bit is set, return true
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005f6e:	4013      	ands	r3, r2
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	bf14      	ite	ne
 8005f82:	2301      	movne	r3, #1
 8005f84:	2300      	moveq	r3, #0
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x50>
  {
    return(true);
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e000      	b.n	8005f92 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x52>
  }
  else
  {
    return(false);
 8005f90:	2300      	movs	r3, #0
  }
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	08021040 	.word	0x08021040

08005fa0 <_ZN10IridiumSBD12clearBuffersEi>:

// High-level wrapper for AT+SBDD
int IridiumSBD::clearBuffers(int buffers)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <_ZN10IridiumSBD12clearBuffersEi+0x18>
      return ISBD_REENTRANT;
 8005fb4:	2309      	movs	r3, #9
 8005fb6:	e00d      	b.n	8005fd4 <_ZN10IridiumSBD12clearBuffersEi+0x34>

   this->reentrant = true;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalClearBuffers(buffers);
 8005fc0:	6839      	ldr	r1, [r7, #0]
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f001 fea6 	bl	8007d14 <_ZN10IridiumSBD20internalClearBuffersEi>
 8005fc8:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <_ZN10IridiumSBD7getIMEIEPcj>:

// High-level wrapper for AT+CGSN
int IridiumSBD::getIMEI(char *IMEI, size_t bufferSize)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
   if (this->reentrant)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <_ZN10IridiumSBD7getIMEIEPcj+0x1a>
      return ISBD_REENTRANT;
 8005ff2:	2309      	movs	r3, #9
 8005ff4:	e00e      	b.n	8006014 <_ZN10IridiumSBD7getIMEIEPcj+0x38>

   this->reentrant = true;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalGetIMEI(IMEI, bufferSize);
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	68b9      	ldr	r1, [r7, #8]
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f001 fed2 	bl	8007dac <_ZN10IridiumSBD15internalGetIMEIEPcj>
 8006008:	6178      	str	r0, [r7, #20]
   this->reentrant = false;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 8006012:	697b      	ldr	r3, [r7, #20]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <_ZN10IridiumSBD11isConnectedEv>:

//Returns true if the I2C device is connected
//Always returns true for serial
//boolean IridiumSBD::isConnected() TODO
bool IridiumSBD::isConnected()
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
   if (this->useSerial) // If we are using Serial
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	7c5b      	ldrb	r3, [r3, #17]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <_ZN10IridiumSBD11isConnectedEv+0x14>
   {
		return true;
 800602c:	2301      	movs	r3, #1
 800602e:	e012      	b.n	8006056 <_ZN10IridiumSBD11isConnectedEv+0x3a>
   }
   else
   {
		wireport->beginTransmission((uint8_t)deviceaddress);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68da      	ldr	r2, [r3, #12]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	7c1b      	ldrb	r3, [r3, #16]
 8006038:	4619      	mov	r1, r3
 800603a:	4610      	mov	r0, r2
 800603c:	f002 fcb6 	bl	80089ac <_ZN7TwoWire17beginTransmissionEh>
		return (wireport->endTransmission() == 0); // Check that the device ack's
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	4618      	mov	r0, r3
 8006046:	f002 fcfb 	bl	8008a40 <_ZN7TwoWire15endTransmissionEv>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	bf0c      	ite	eq
 8006050:	2301      	moveq	r3, #1
 8006052:	2300      	movne	r3, #0
 8006054:	b2db      	uxtb	r3, r3
   }
}
 8006056:	4618      	mov	r0, r3
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
	...

08006060 <_ZN10IridiumSBD13internalBeginEv>:
/*
Private interface
*/

int IridiumSBD::internalBegin()
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b090      	sub	sp, #64	; 0x40
 8006064:	af02      	add	r7, sp, #8
 8006066:	6078      	str	r0, [r7, #4]
   diagprint(F("Calling internalBegin\r\n"));
 8006068:	49af      	ldr	r1, [pc, #700]	; (8006328 <_ZN10IridiumSBD13internalBeginEv+0x2c8>)
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f001 faba 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (!this->asleep)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8006076:	f083 0301 	eor.w	r3, r3, #1
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <_ZN10IridiumSBD13internalBeginEv+0x24>
      return ISBD_ALREADY_AWAKE;
 8006080:	2301      	movs	r3, #1
 8006082:	e14c      	b.n	800631e <_ZN10IridiumSBD13internalBeginEv+0x2be>

   if (!this->useSerial) // If we are using I2C
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	7c5b      	ldrb	r3, [r3, #17]
 8006088:	f083 0301 	eor.w	r3, r3, #1
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d005      	beq.n	800609e <_ZN10IridiumSBD13internalBeginEv+0x3e>
   {
      check9603pins(); // Update IO_REGISTER with the status of the 9603 pins
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f001 fd7b 	bl	8007b8e <_ZN10IridiumSBD13check9603pinsEv>
      check9603data(); // Get any waiting 9603 serial data
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f001 fca7 	bl	80079ec <_ZN10IridiumSBD13check9603dataEv>
   }

   power(true); // power on
 800609e:	2101      	movs	r1, #1
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f001 f86d 	bl	8007180 <_ZN10IridiumSBD5powerEb>

   bool modemAlive = false;
 80060a6:	2300      	movs	r3, #0
 80060a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   unsigned long startupTime = 500; //ms
 80060ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80060b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   for (unsigned long start = millis(); millis() - start < startupTime;)
 80060b2:	f003 f93b 	bl	800932c <HAL_GetTick>
 80060b6:	62b8      	str	r0, [r7, #40]	; 0x28
 80060b8:	f003 f938 	bl	800932c <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060c4:	429a      	cmp	r2, r3
 80060c6:	bf8c      	ite	hi
 80060c8:	2301      	movhi	r3, #1
 80060ca:	2300      	movls	r3, #0
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d007      	beq.n	80060e2 <_ZN10IridiumSBD13internalBeginEv+0x82>
      if (cancelled())
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fd6c 	bl	8006bb0 <_ZN10IridiumSBD9cancelledEv>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d0ec      	beq.n	80060b8 <_ZN10IridiumSBD13internalBeginEv+0x58>
         return ISBD_CANCELLED;
 80060de:	2304      	movs	r3, #4
 80060e0:	e11d      	b.n	800631e <_ZN10IridiumSBD13internalBeginEv+0x2be>

   if (this->useSerial) // If we are using Serial
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	7c5b      	ldrb	r3, [r3, #17]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <_ZN10IridiumSBD13internalBeginEv+0x90>
      beginSerialPort(); // Apollo3 v2.1 Serial fix - begin the Serial port 500ms after power(true)
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f001 f8e8 	bl	80072c0 <_ZN10IridiumSBD15beginSerialPortEv>

   // Turn on modem and wait for a response from "AT" command to begin
   for (unsigned long start = millis(); !modemAlive && millis() - start < 1000UL * this->startupTimeout;)
 80060f0:	f003 f91c 	bl	800932c <HAL_GetTick>
 80060f4:	6278      	str	r0, [r7, #36]	; 0x24
 80060f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060fa:	f083 0301 	eor.w	r3, r3, #1
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00f      	beq.n	8006124 <_ZN10IridiumSBD13internalBeginEv+0xc4>
 8006104:	f003 f912 	bl	800932c <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	1ad2      	subs	r2, r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006112:	4619      	mov	r1, r3
 8006114:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006118:	fb03 f301 	mul.w	r3, r3, r1
 800611c:	429a      	cmp	r2, r3
 800611e:	d201      	bcs.n	8006124 <_ZN10IridiumSBD13internalBeginEv+0xc4>
 8006120:	2301      	movs	r3, #1
 8006122:	e000      	b.n	8006126 <_ZN10IridiumSBD13internalBeginEv+0xc6>
 8006124:	2300      	movs	r3, #0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d018      	beq.n	800615c <_ZN10IridiumSBD13internalBeginEv+0xfc>
   {
      send(F("AT\r"));
 800612a:	2301      	movs	r3, #1
 800612c:	2201      	movs	r2, #1
 800612e:	497f      	ldr	r1, [pc, #508]	; (800632c <_ZN10IridiumSBD13internalBeginEv+0x2cc>)
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f001 f8e1 	bl	80072f8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      modemAlive = waitForATResponse();
 8006136:	4b7e      	ldr	r3, [pc, #504]	; (8006330 <_ZN10IridiumSBD13internalBeginEv+0x2d0>)
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	2300      	movs	r3, #0
 800613c:	2200      	movs	r2, #0
 800613e:	2100      	movs	r1, #0
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fc7b 	bl	8006a3c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006146:	4603      	mov	r3, r0
 8006148:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (cancelled())
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 fd2f 	bl	8006bb0 <_ZN10IridiumSBD9cancelledEv>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d0ce      	beq.n	80060f6 <_ZN10IridiumSBD13internalBeginEv+0x96>
         return ISBD_CANCELLED;
 8006158:	2304      	movs	r3, #4
 800615a:	e0e0      	b.n	800631e <_ZN10IridiumSBD13internalBeginEv+0x2be>
   }

   if (!modemAlive)
 800615c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006160:	f083 0301 	eor.w	r3, r3, #1
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d005      	beq.n	8006176 <_ZN10IridiumSBD13internalBeginEv+0x116>
   {
      diagprint(F("No modem detected.\r\n"));
 800616a:	4972      	ldr	r1, [pc, #456]	; (8006334 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f001 fa39 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      return ISBD_NO_MODEM_DETECTED;
 8006172:	2305      	movs	r3, #5
 8006174:	e0d3      	b.n	800631e <_ZN10IridiumSBD13internalBeginEv+0x2be>
   }

   // The usual initialization sequence
   const char *strings[3] = { "ATE1\r", "AT&D0\r", "AT&K0\r" };
 8006176:	4a70      	ldr	r2, [pc, #448]	; (8006338 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8006178:	f107 0310 	add.w	r3, r7, #16
 800617c:	ca07      	ldmia	r2, {r0, r1, r2}
 800617e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   for (int i=0; i<3; ++i)
 8006182:	2300      	movs	r3, #0
 8006184:	633b      	str	r3, [r7, #48]	; 0x30
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	2b02      	cmp	r3, #2
 800618a:	dc26      	bgt.n	80061da <_ZN10IridiumSBD13internalBeginEv+0x17a>
   {
      send(strings[i]);
 800618c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006194:	4413      	add	r3, r2
 8006196:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800619a:	4619      	mov	r1, r3
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f001 f903 	bl	80073a8 <_ZN10IridiumSBD4sendEPKc>
      if (!waitForATResponse())
 80061a2:	4b63      	ldr	r3, [pc, #396]	; (8006330 <_ZN10IridiumSBD13internalBeginEv+0x2d0>)
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	2300      	movs	r3, #0
 80061a8:	2200      	movs	r2, #0
 80061aa:	2100      	movs	r1, #0
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fc45 	bl	8006a3c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80061b2:	4603      	mov	r3, r0
 80061b4:	f083 0301 	eor.w	r3, r3, #1
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d009      	beq.n	80061d2 <_ZN10IridiumSBD13internalBeginEv+0x172>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fcf6 	bl	8006bb0 <_ZN10IridiumSBD9cancelledEv>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <_ZN10IridiumSBD13internalBeginEv+0x16e>
 80061ca:	2304      	movs	r3, #4
 80061cc:	e0a7      	b.n	800631e <_ZN10IridiumSBD13internalBeginEv+0x2be>
 80061ce:	2303      	movs	r3, #3
 80061d0:	e0a5      	b.n	800631e <_ZN10IridiumSBD13internalBeginEv+0x2be>
   for (int i=0; i<3; ++i)
 80061d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d4:	3301      	adds	r3, #1
 80061d6:	633b      	str	r3, [r7, #48]	; 0x30
 80061d8:	e7d5      	b.n	8006186 <_ZN10IridiumSBD13internalBeginEv+0x126>
   }

   // Enable or disable RING alerts as requested by user
   // By default they are on if a RING pin was supplied on constructor
   diagprint(F("Ring alerts are")); diagprint(ringAlertsEnabled ? F("") : F(" NOT")); diagprint(F(" enabled.\r\n"));
 80061da:	4958      	ldr	r1, [pc, #352]	; (800633c <_ZN10IridiumSBD13internalBeginEv+0x2dc>)
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f001 fa01 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <_ZN10IridiumSBD13internalBeginEv+0x190>
 80061ec:	4b54      	ldr	r3, [pc, #336]	; (8006340 <_ZN10IridiumSBD13internalBeginEv+0x2e0>)
 80061ee:	e000      	b.n	80061f2 <_ZN10IridiumSBD13internalBeginEv+0x192>
 80061f0:	4b54      	ldr	r3, [pc, #336]	; (8006344 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 80061f2:	4619      	mov	r1, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f001 f9f5 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 80061fa:	4953      	ldr	r1, [pc, #332]	; (8006348 <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f001 f9f1 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (ringAlertsEnabled) enableRingAlerts(true); // This will clear ringAsserted and the Ring Indicator flag
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006208:	2b00      	cmp	r3, #0
 800620a:	d004      	beq.n	8006216 <_ZN10IridiumSBD13internalBeginEv+0x1b6>
 800620c:	2101      	movs	r1, #1
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7ff fc98 	bl	8005b44 <_ZN10IridiumSBD16enableRingAlertsEb>
 8006214:	e009      	b.n	800622a <_ZN10IridiumSBD13internalBeginEv+0x1ca>
   else {
	   if (!this->useSerial) clearRingIndicator(); // If ring alerts are not enabled and using I2C, make sure the Ring Indicator flag is clear
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	7c5b      	ldrb	r3, [r3, #17]
 800621a:	f083 0301 	eor.w	r3, r3, #1
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	d002      	beq.n	800622a <_ZN10IridiumSBD13internalBeginEv+0x1ca>
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f7ff fe5b 	bl	8005ee0 <_ZN10IridiumSBD18clearRingIndicatorEv>
   }

   send(ringAlertsEnabled ? F("AT+SBDMTA=1\r") : F("AT+SBDMTA=0\r"));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006230:	2b00      	cmp	r3, #0
 8006232:	d001      	beq.n	8006238 <_ZN10IridiumSBD13internalBeginEv+0x1d8>
 8006234:	4945      	ldr	r1, [pc, #276]	; (800634c <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 8006236:	e000      	b.n	800623a <_ZN10IridiumSBD13internalBeginEv+0x1da>
 8006238:	4945      	ldr	r1, [pc, #276]	; (8006350 <_ZN10IridiumSBD13internalBeginEv+0x2f0>)
 800623a:	2301      	movs	r3, #1
 800623c:	2201      	movs	r2, #1
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f001 f85a 	bl	80072f8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse())
 8006244:	4b3a      	ldr	r3, [pc, #232]	; (8006330 <_ZN10IridiumSBD13internalBeginEv+0x2d0>)
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	2300      	movs	r3, #0
 800624a:	2200      	movs	r2, #0
 800624c:	2100      	movs	r1, #0
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fbf4 	bl	8006a3c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006254:	4603      	mov	r3, r0
 8006256:	f083 0301 	eor.w	r3, r3, #1
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	d009      	beq.n	8006274 <_ZN10IridiumSBD13internalBeginEv+0x214>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fca5 	bl	8006bb0 <_ZN10IridiumSBD9cancelledEv>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d001      	beq.n	8006270 <_ZN10IridiumSBD13internalBeginEv+0x210>
 800626c:	2304      	movs	r3, #4
 800626e:	e056      	b.n	800631e <_ZN10IridiumSBD13internalBeginEv+0x2be>
 8006270:	2303      	movs	r3, #3
 8006272:	e054      	b.n	800631e <_ZN10IridiumSBD13internalBeginEv+0x2be>

   // Decide whether the internal MSSTM workaround should be enforced on TX/RX
   // By default it is unless the firmware rev is >= TA13001
   char version[8];
   int ret = getFirmwareVersion(version, sizeof(version));
 8006274:	f107 0308 	add.w	r3, r7, #8
 8006278:	2208      	movs	r2, #8
 800627a:	4619      	mov	r1, r3
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7ff fd11 	bl	8005ca4 <_ZN10IridiumSBD18getFirmwareVersionEPcj>
 8006282:	6238      	str	r0, [r7, #32]
   if (ret != ISBD_SUCCESS)
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d008      	beq.n	800629c <_ZN10IridiumSBD13internalBeginEv+0x23c>
   {
      diagprint(F("Unknown FW version\r\n"));
 800628a:	4932      	ldr	r1, [pc, #200]	; (8006354 <_ZN10IridiumSBD13internalBeginEv+0x2f4>)
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f001 f9a9 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      msstmWorkaroundRequested = true;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 800629a:	e027      	b.n	80062ec <_ZN10IridiumSBD13internalBeginEv+0x28c>
   }
   else
   {
      diagprint(F("Firmware version is ")); diagprint(version); diagprint(F("\r\n"));
 800629c:	492e      	ldr	r1, [pc, #184]	; (8006358 <_ZN10IridiumSBD13internalBeginEv+0x2f8>)
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f001 f9a0 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 80062a4:	f107 0308 	add.w	r3, r7, #8
 80062a8:	4619      	mov	r1, r3
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f001 f9b4 	bl	8007618 <_ZN10IridiumSBD9diagprintEPKc>
 80062b0:	492a      	ldr	r1, [pc, #168]	; (800635c <_ZN10IridiumSBD13internalBeginEv+0x2fc>)
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f001 f996 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (version[0] == 'T' && version[1] == 'A')
 80062b8:	7a3b      	ldrb	r3, [r7, #8]
 80062ba:	2b54      	cmp	r3, #84	; 0x54
 80062bc:	d116      	bne.n	80062ec <_ZN10IridiumSBD13internalBeginEv+0x28c>
 80062be:	7a7b      	ldrb	r3, [r7, #9]
 80062c0:	2b41      	cmp	r3, #65	; 0x41
 80062c2:	d113      	bne.n	80062ec <_ZN10IridiumSBD13internalBeginEv+0x28c>
      {
         unsigned long ver = strtoul(version + 2, NULL, 10);
 80062c4:	f107 0308 	add.w	r3, r7, #8
 80062c8:	3302      	adds	r3, #2
 80062ca:	220a      	movs	r2, #10
 80062cc:	2100      	movs	r1, #0
 80062ce:	4618      	mov	r0, r3
 80062d0:	f016 faac 	bl	801c82c <strtoul>
 80062d4:	61f8      	str	r0, [r7, #28]
         msstmWorkaroundRequested = ver < ISBD_MSSTM_WORKAROUND_FW_VER;
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80062dc:	4293      	cmp	r3, r2
 80062de:	bf94      	ite	ls
 80062e0:	2301      	movls	r3, #1
 80062e2:	2300      	movhi	r3, #0
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
      }
   }
   diagprint(F("MSSTM workaround is")); diagprint(msstmWorkaroundRequested ? F("") : F(" NOT")); diagprint(F(" enforced.\r\n"));
 80062ec:	491c      	ldr	r1, [pc, #112]	; (8006360 <_ZN10IridiumSBD13internalBeginEv+0x300>)
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f001 f978 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <_ZN10IridiumSBD13internalBeginEv+0x2a2>
 80062fe:	4b10      	ldr	r3, [pc, #64]	; (8006340 <_ZN10IridiumSBD13internalBeginEv+0x2e0>)
 8006300:	e000      	b.n	8006304 <_ZN10IridiumSBD13internalBeginEv+0x2a4>
 8006302:	4b10      	ldr	r3, [pc, #64]	; (8006344 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 8006304:	4619      	mov	r1, r3
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f001 f96c 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 800630c:	4915      	ldr	r1, [pc, #84]	; (8006364 <_ZN10IridiumSBD13internalBeginEv+0x304>)
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f001 f968 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   // Done!
   diagprint(F("InternalBegin: success!\r\n"));
 8006314:	4914      	ldr	r1, [pc, #80]	; (8006368 <_ZN10IridiumSBD13internalBeginEv+0x308>)
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f001 f964 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SUCCESS;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3738      	adds	r7, #56	; 0x38
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	08021118 	.word	0x08021118
 800632c:	08021130 	.word	0x08021130
 8006330:	08020e18 	.word	0x08020e18
 8006334:	08021134 	.word	0x08021134
 8006338:	08021208 	.word	0x08021208
 800633c:	0802114c 	.word	0x0802114c
 8006340:	0802115c 	.word	0x0802115c
 8006344:	08021160 	.word	0x08021160
 8006348:	08021168 	.word	0x08021168
 800634c:	08021174 	.word	0x08021174
 8006350:	08021184 	.word	0x08021184
 8006354:	08021194 	.word	0x08021194
 8006358:	080211ac 	.word	0x080211ac
 800635c:	080211c4 	.word	0x080211c4
 8006360:	080211c8 	.word	0x080211c8
 8006364:	080211dc 	.word	0x080211dc
 8006368:	080211ec 	.word	0x080211ec

0800636c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj>:

int IridiumSBD::internalSendReceiveSBD(const char *txTxtMessage, const uint8_t *txData, size_t txDataSize, uint8_t *rxBuffer, size_t *prxBufferSize)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b096      	sub	sp, #88	; 0x58
 8006370:	af04      	add	r7, sp, #16
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	603b      	str	r3, [r7, #0]
   diagprint(F("internalSendReceive\r\n"));
 800637a:	49a5      	ldr	r1, [pc, #660]	; (8006610 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2a4>)
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f001 f931 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (this->asleep)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x24>
      return ISBD_IS_ASLEEP;
 800638c:	230a      	movs	r3, #10
 800638e:	e289      	b.n	80068a4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

   // Binary transmission?
   if (txData && txDataSize)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 8152 	beq.w	800663c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2d0>
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 814e 	beq.w	800663c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2d0>
   {
      if (txDataSize > ISBD_MAX_MESSAGE_LENGTH)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80063a6:	d901      	bls.n	80063ac <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x40>
         return ISBD_MSG_TOO_LONG;
 80063a8:	230d      	movs	r3, #13
 80063aa:	e27b      	b.n	80068a4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

      // send will use serial or wire as appropriate
      send(F("AT+SBDWB="), true, false);
 80063ac:	2300      	movs	r3, #0
 80063ae:	2201      	movs	r2, #1
 80063b0:	4998      	ldr	r1, [pc, #608]	; (8006614 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2a8>)
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f000 ffa0 	bl	80072f8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      send(txDataSize);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	4619      	mov	r1, r3
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f001 f8ca 	bl	8007558 <_ZN10IridiumSBD4sendEt>
      send(F("\r"), false);
 80063c4:	2301      	movs	r3, #1
 80063c6:	2200      	movs	r2, #0
 80063c8:	4993      	ldr	r1, [pc, #588]	; (8006618 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2ac>)
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f000 ff94 	bl	80072f8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      if (!waitForATResponse(NULL, 0, NULL, "READY\r\n"))
 80063d0:	4b92      	ldr	r3, [pc, #584]	; (800661c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2b0>)
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	2300      	movs	r3, #0
 80063d6:	2200      	movs	r2, #0
 80063d8:	2100      	movs	r1, #0
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f000 fb2e 	bl	8006a3c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80063e0:	4603      	mov	r3, r0
 80063e2:	f083 0301 	eor.w	r3, r3, #1
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d009      	beq.n	8006400 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x94>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f000 fbdf 	bl	8006bb0 <_ZN10IridiumSBD9cancelledEv>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d001      	beq.n	80063fc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x90>
 80063f8:	2304      	movs	r3, #4
 80063fa:	e253      	b.n	80068a4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 80063fc:	2303      	movs	r3, #3
 80063fe:	e251      	b.n	80068a4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

      uint16_t checksum = 0;
 8006400:	2300      	movs	r3, #0
 8006402:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

      if (this->useSerial)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	7c5b      	ldrb	r3, [r3, #17]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d03a      	beq.n	8006484 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x118>
      {
         for (size_t i=0; i<txDataSize; ++i)
 800640e:	2300      	movs	r3, #0
 8006410:	643b      	str	r3, [r7, #64]	; 0x40
 8006412:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	429a      	cmp	r2, r3
 8006418:	d21a      	bcs.n	8006450 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0xe4>
         {
            stream->write(txData[i]);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	4618      	mov	r0, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6879      	ldr	r1, [r7, #4]
 800642a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800642c:	440a      	add	r2, r1
 800642e:	7812      	ldrb	r2, [r2, #0]
 8006430:	4611      	mov	r1, r2
 8006432:	4798      	blx	r3
            checksum += (uint16_t)txData[i];
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006438:	4413      	add	r3, r2
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	b29a      	uxth	r2, r3
 800643e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006442:	4413      	add	r3, r2
 8006444:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
         for (size_t i=0; i<txDataSize; ++i)
 8006448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800644a:	3301      	adds	r3, #1
 800644c:	643b      	str	r3, [r7, #64]	; 0x40
 800644e:	e7e0      	b.n	8006412 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0xa6>
         }
         stream->write((uint8_t)(checksum >> 8));
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	4618      	mov	r0, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006462:	1212      	asrs	r2, r2, #8
 8006464:	b2d2      	uxtb	r2, r2
 8006466:	4611      	mov	r1, r2
 8006468:	4798      	blx	r3
         stream->write((uint8_t)(checksum & 0xFF));
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	4618      	mov	r0, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800647c:	b2d2      	uxtb	r2, r2
 800647e:	4611      	mov	r1, r2
 8006480:	4798      	blx	r3
 8006482:	e092      	b.n	80065aa <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x23e>
      }
      else
      {
         //lastCheck = millis(); // Update lastCheck so we enforce a full I2C_POLLING_WAIT
         // We need to make sure we don't send too much I2C data in one go (otherwise we will overflow the ATtiny841's I2C buffer)
         size_t bytes_to_send = txDataSize; // Send this many bytes in total
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	63fb      	str	r3, [r7, #60]	; 0x3c
         size_t i=0;
 8006488:	2300      	movs	r3, #0
 800648a:	63bb      	str	r3, [r7, #56]	; 0x38
         size_t nexti;
         while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 3)) // If there are too many bytes to send all in one go
 800648c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800648e:	2b1d      	cmp	r3, #29
 8006490:	d937      	bls.n	8006502 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x196>
         {
            nexti = i + (TINY_I2C_BUFFER_LENGTH - 3);
 8006492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006494:	331d      	adds	r3, #29
 8006496:	637b      	str	r3, [r7, #52]	; 0x34
            wireport->beginTransmission((uint8_t)deviceaddress);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	7c1b      	ldrb	r3, [r3, #16]
 80064a0:	4619      	mov	r1, r3
 80064a2:	4610      	mov	r0, r2
 80064a4:	f002 fa82 	bl	80089ac <_ZN7TwoWire17beginTransmissionEh>
            wireport->write(DATA_REG); // Point to the serial data 'register'
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	21ff      	movs	r1, #255	; 0xff
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7ff fa9c 	bl	80059ec <_ZN7TwoWire5writeEi>
            for (; i<nexti; ++i)
 80064b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d219      	bcs.n	80064f0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x184>
            {
               wireport->write(txData[i]); // Write each byte
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	68d8      	ldr	r0, [r3, #12]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6879      	ldr	r1, [r7, #4]
 80064ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064cc:	440a      	add	r2, r1
 80064ce:	7812      	ldrb	r2, [r2, #0]
 80064d0:	4611      	mov	r1, r2
 80064d2:	4798      	blx	r3
               checksum += (uint16_t)txData[i];
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d8:	4413      	add	r3, r2
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	b29a      	uxth	r2, r3
 80064de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80064e2:	4413      	add	r3, r2
 80064e4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            for (; i<nexti; ++i)
 80064e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ea:	3301      	adds	r3, #1
 80064ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80064ee:	e7e1      	b.n	80064b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x148>
            }
            bytes_to_send = bytes_to_send - (TINY_I2C_BUFFER_LENGTH - 3); // Decrease the number of bytes still to send
 80064f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064f2:	3b1d      	subs	r3, #29
 80064f4:	63fb      	str	r3, [r7, #60]	; 0x3c
            wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f002 faa0 	bl	8008a40 <_ZN7TwoWire15endTransmissionEv>
         while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 3)) // If there are too many bytes to send all in one go
 8006500:	e7c4      	b.n	800648c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x120>
         }
         // There are now <= (TINY_I2C_BUFFER_LENGTH - 3) bytes left to send, so send them and then release the bus
         wireport->beginTransmission((uint8_t)deviceaddress);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	7c1b      	ldrb	r3, [r3, #16]
 800650a:	4619      	mov	r1, r3
 800650c:	4610      	mov	r0, r2
 800650e:	f002 fa4d 	bl	80089ac <_ZN7TwoWire17beginTransmissionEh>
         wireport->write(DATA_REG); // Point to the 'serial register'
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	21ff      	movs	r1, #255	; 0xff
 8006518:	4618      	mov	r0, r3
 800651a:	f7ff fa67 	bl	80059ec <_ZN7TwoWire5writeEi>
         for (; i<txDataSize; ++i)
 800651e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	429a      	cmp	r2, r3
 8006524:	d219      	bcs.n	800655a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x1ee>
         {
            wireport->write(txData[i]);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	68d8      	ldr	r0, [r3, #12]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6879      	ldr	r1, [r7, #4]
 8006534:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006536:	440a      	add	r2, r1
 8006538:	7812      	ldrb	r2, [r2, #0]
 800653a:	4611      	mov	r1, r2
 800653c:	4798      	blx	r3
            checksum += (uint16_t)txData[i];
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006542:	4413      	add	r3, r2
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	b29a      	uxth	r2, r3
 8006548:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800654c:	4413      	add	r3, r2
 800654e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
         for (; i<txDataSize; ++i)
 8006552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006554:	3301      	adds	r3, #1
 8006556:	63bb      	str	r3, [r7, #56]	; 0x38
 8006558:	e7e1      	b.n	800651e <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x1b2>
         }
         wireport->write((uint8_t)(checksum >> 8));
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	68d8      	ldr	r0, [r3, #12]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800656a:	1212      	asrs	r2, r2, #8
 800656c:	b2d2      	uxtb	r2, r2
 800656e:	4611      	mov	r1, r2
 8006570:	4798      	blx	r3
         wireport->write((uint8_t)(checksum & 0xFF));
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	68da      	ldr	r2, [r3, #12]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8006582:	b2c9      	uxtb	r1, r1
 8006584:	4610      	mov	r0, r2
 8006586:	4798      	blx	r3
         if (wireport->endTransmission() != 0) //Send data and release bus
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	4618      	mov	r0, r3
 800658e:	f002 fa57 	bl	8008a40 <_ZN7TwoWire15endTransmissionEv>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	bf14      	ite	ne
 8006598:	2301      	movne	r3, #1
 800659a:	2300      	moveq	r3, #0
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x23e>
            diagprint(F("I2C write was not successful!\r\n"));
 80065a2:	491f      	ldr	r1, [pc, #124]	; (8006620 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2b4>)
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f001 f81d 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      }

      consoleprint(F("["));
 80065aa:	491e      	ldr	r1, [pc, #120]	; (8006624 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2b8>)
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f001 f863 	bl	8007678 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
      consoleprint((uint16_t)txDataSize);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	4619      	mov	r1, r3
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f001 f88d 	bl	80076d8 <_ZN10IridiumSBD12consoleprintEt>
      consoleprint(F(" bytes]"));
 80065be:	491a      	ldr	r1, [pc, #104]	; (8006628 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2bc>)
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f001 f859 	bl	8007678 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

      diagprint(F("Checksum:"));
 80065c6:	4919      	ldr	r1, [pc, #100]	; (800662c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2c0>)
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f001 f80b 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      diagprint(checksum);
 80065ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80065d2:	4619      	mov	r1, r3
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f001 f835 	bl	8007644 <_ZN10IridiumSBD9diagprintEt>
      diagprint(F("\r\n"));
 80065da:	4915      	ldr	r1, [pc, #84]	; (8006630 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2c4>)
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f001 f801 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

      if (!waitForATResponse(NULL, 0, NULL, "0\r\n\r\nOK\r\n"))
 80065e2:	4b14      	ldr	r3, [pc, #80]	; (8006634 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2c8>)
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	2300      	movs	r3, #0
 80065e8:	2200      	movs	r2, #0
 80065ea:	2100      	movs	r1, #0
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f000 fa25 	bl	8006a3c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80065f2:	4603      	mov	r3, r0
 80065f4:	f083 0301 	eor.w	r3, r3, #1
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 8091 	beq.w	8006722 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b6>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f000 fad5 	bl	8006bb0 <_ZN10IridiumSBD9cancelledEv>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d015      	beq.n	8006638 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2cc>
 800660c:	2304      	movs	r3, #4
 800660e:	e149      	b.n	80068a4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 8006610:	08021214 	.word	0x08021214
 8006614:	0802122c 	.word	0x0802122c
 8006618:	08021238 	.word	0x08021238
 800661c:	0802123c 	.word	0x0802123c
 8006620:	08021244 	.word	0x08021244
 8006624:	08021264 	.word	0x08021264
 8006628:	08021268 	.word	0x08021268
 800662c:	08021270 	.word	0x08021270
 8006630:	080211c4 	.word	0x080211c4
 8006634:	0802127c 	.word	0x0802127c
 8006638:	2303      	movs	r3, #3
 800663a:	e133      	b.n	80068a4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
   }

   else // Text transmission
   {
#if true // use long string implementation
      if (txTxtMessage == NULL) // It's ok to have a NULL txtTxtMessage if the transaction is RX only
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d11d      	bne.n	800667e <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x312>
      {
         send(F("AT+SBDWT=\r"));
 8006642:	2301      	movs	r3, #1
 8006644:	2201      	movs	r2, #1
 8006646:	4999      	ldr	r1, [pc, #612]	; (80068ac <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x540>)
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 fe55 	bl	80072f8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
         if (!waitForATResponse())
 800664e:	4b98      	ldr	r3, [pc, #608]	; (80068b0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x544>)
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	2300      	movs	r3, #0
 8006654:	2200      	movs	r2, #0
 8006656:	2100      	movs	r1, #0
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f000 f9ef 	bl	8006a3c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 800665e:	4603      	mov	r3, r0
 8006660:	f083 0301 	eor.w	r3, r3, #1
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d05c      	beq.n	8006724 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b8>
            return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 faa0 	bl	8006bb0 <_ZN10IridiumSBD9cancelledEv>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x30e>
 8006676:	2304      	movs	r3, #4
 8006678:	e114      	b.n	80068a4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 800667a:	2303      	movs	r3, #3
 800667c:	e112      	b.n	80068a4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
      }
      else
      {
         // remove any embedded \r
         char *p = strchr(txTxtMessage, '\r');
 800667e:	210d      	movs	r1, #13
 8006680:	68b8      	ldr	r0, [r7, #8]
 8006682:	f015 f914 	bl	801b8ae <strchr>
 8006686:	6338      	str	r0, [r7, #48]	; 0x30
         if (p) *p = 0;
 8006688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x328>
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	2200      	movs	r2, #0
 8006692:	701a      	strb	r2, [r3, #0]
         if (strlen(txTxtMessage) > ISBD_MAX_MESSAGE_LENGTH)
 8006694:	68b8      	ldr	r0, [r7, #8]
 8006696:	f7f9 fdb5 	bl	8000204 <strlen>
 800669a:	4603      	mov	r3, r0
 800669c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80066a0:	d901      	bls.n	80066a6 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x33a>
            return ISBD_MSG_TOO_LONG;
 80066a2:	230d      	movs	r3, #13
 80066a4:	e0fe      	b.n	80068a4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         send(F("AT+SBDWT\r"));
 80066a6:	2301      	movs	r3, #1
 80066a8:	2201      	movs	r2, #1
 80066aa:	4982      	ldr	r1, [pc, #520]	; (80068b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x548>)
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 fe23 	bl	80072f8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
         if (!waitForATResponse(NULL, 0, NULL, "READY\r\n"))
 80066b2:	4b81      	ldr	r3, [pc, #516]	; (80068b8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x54c>)
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	2300      	movs	r3, #0
 80066b8:	2200      	movs	r2, #0
 80066ba:	2100      	movs	r1, #0
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f000 f9bd 	bl	8006a3c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80066c2:	4603      	mov	r3, r0
 80066c4:	f083 0301 	eor.w	r3, r3, #1
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d009      	beq.n	80066e2 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x376>
            return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 fa6e 	bl	8006bb0 <_ZN10IridiumSBD9cancelledEv>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x372>
 80066da:	2304      	movs	r3, #4
 80066dc:	e0e2      	b.n	80068a4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 80066de:	2303      	movs	r3, #3
 80066e0:	e0e0      	b.n	80068a4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         sendlong(txTxtMessage);
 80066e2:	68b9      	ldr	r1, [r7, #8]
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 feab 	bl	8007440 <_ZN10IridiumSBD8sendlongEPKc>
         send("\r");
 80066ea:	4974      	ldr	r1, [pc, #464]	; (80068bc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x550>)
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f000 fe5b 	bl	80073a8 <_ZN10IridiumSBD4sendEPKc>
         if (!waitForATResponse(NULL, 0, NULL, "0\r\n\r\nOK\r\n"))
 80066f2:	4b73      	ldr	r3, [pc, #460]	; (80068c0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x554>)
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	2300      	movs	r3, #0
 80066f8:	2200      	movs	r2, #0
 80066fa:	2100      	movs	r1, #0
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 f99d 	bl	8006a3c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006702:	4603      	mov	r3, r0
 8006704:	f083 0301 	eor.w	r3, r3, #1
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00a      	beq.n	8006724 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b8>
            return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f000 fa4e 	bl	8006bb0 <_ZN10IridiumSBD9cancelledEv>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b2>
 800671a:	2304      	movs	r3, #4
 800671c:	e0c2      	b.n	80068a4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 800671e:	2303      	movs	r3, #3
 8006720:	e0c0      	b.n	80068a4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006722:	bf00      	nop
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif
   }

   // Long SBDIX loop begins here
   for (unsigned long start = millis(); millis() - start < 1000UL * this->sendReceiveTimeout;)
 8006724:	f002 fe02 	bl	800932c <HAL_GetTick>
 8006728:	62f8      	str	r0, [r7, #44]	; 0x2c
 800672a:	f002 fdff 	bl	800932c <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006732:	1ad2      	subs	r2, r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006738:	4619      	mov	r1, r3
 800673a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800673e:	fb03 f301 	mul.w	r3, r3, r1
 8006742:	429a      	cmp	r2, r3
 8006744:	bf34      	ite	cc
 8006746:	2301      	movcc	r3, #1
 8006748:	2300      	movcs	r3, #0
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b00      	cmp	r3, #0
 800674e:	f000 80a4 	beq.w	800689a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x52e>
   {
      bool okToProceed = true;
 8006752:	2301      	movs	r3, #1
 8006754:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      if (this->msstmWorkaroundRequested)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00e      	beq.n	8006780 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x414>
      {
         okToProceed = false;
 8006762:	2300      	movs	r3, #0
 8006764:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
         int ret = internalMSSTMWorkaround(okToProceed);
 8006768:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800676c:	4619      	mov	r1, r3
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 f902 	bl	8006978 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb>
 8006774:	62b8      	str	r0, [r7, #40]	; 0x28
         if (ret != ISBD_SUCCESS)
 8006776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x414>
            return ret;
 800677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677e:	e091      	b.n	80068a4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
      }

      if (okToProceed)
 8006780:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006784:	2b00      	cmp	r3, #0
 8006786:	d077      	beq.n	8006878 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50c>
      {
         uint16_t moCode = 0, moMSN = 0, mtCode = 0, mtMSN = 0, mtLen = 0, mtRemaining = 0;
 8006788:	2300      	movs	r3, #0
 800678a:	843b      	strh	r3, [r7, #32]
 800678c:	2300      	movs	r3, #0
 800678e:	83fb      	strh	r3, [r7, #30]
 8006790:	2300      	movs	r3, #0
 8006792:	83bb      	strh	r3, [r7, #28]
 8006794:	2300      	movs	r3, #0
 8006796:	837b      	strh	r3, [r7, #26]
 8006798:	2300      	movs	r3, #0
 800679a:	833b      	strh	r3, [r7, #24]
 800679c:	2300      	movs	r3, #0
 800679e:	82fb      	strh	r3, [r7, #22]
         int ret = doSBDIX(moCode, moMSN, mtCode, mtMSN, mtLen, mtRemaining);
 80067a0:	f107 001c 	add.w	r0, r7, #28
 80067a4:	f107 021e 	add.w	r2, r7, #30
 80067a8:	f107 0120 	add.w	r1, r7, #32
 80067ac:	f107 0316 	add.w	r3, r7, #22
 80067b0:	9302      	str	r3, [sp, #8]
 80067b2:	f107 0318 	add.w	r3, r7, #24
 80067b6:	9301      	str	r3, [sp, #4]
 80067b8:	f107 031a 	add.w	r3, r7, #26
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	4603      	mov	r3, r0
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 fa25 	bl	8006c10 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_>
 80067c6:	6278      	str	r0, [r7, #36]	; 0x24
         if (ret != ISBD_SUCCESS)
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x466>
            return ret;
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	e068      	b.n	80068a4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

         diagprint(F("SBDIX MO code: "));
 80067d2:	493c      	ldr	r1, [pc, #240]	; (80068c4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x558>)
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f000 ff05 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
         diagprint(moCode);
 80067da:	8c3b      	ldrh	r3, [r7, #32]
 80067dc:	4619      	mov	r1, r3
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f000 ff30 	bl	8007644 <_ZN10IridiumSBD9diagprintEt>
         diagprint(F("\r\n"));
 80067e4:	4938      	ldr	r1, [pc, #224]	; (80068c8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x55c>)
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 fefc 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

         if (moCode <= 4) // this range indicates successful return!
 80067ec:	8c3b      	ldrh	r3, [r7, #32]
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	d820      	bhi.n	8006834 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4c8>
         {
            diagprint(F("SBDIX success!\r\n"));
 80067f2:	4936      	ldr	r1, [pc, #216]	; (80068cc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x560>)
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f000 fef5 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

            this->remainingMessages = mtRemaining;
 80067fa:	8afb      	ldrh	r3, [r7, #22]
 80067fc:	461a      	mov	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	675a      	str	r2, [r3, #116]	; 0x74
            if (mtCode == 1 && rxBuffer) // retrieved 1 message
 8006802:	8bbb      	ldrh	r3, [r7, #28]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d10d      	bne.n	8006824 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4b8>
 8006808:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4b8>
            {
               diagprint(F("Incoming message!\r\n"));
 800680e:	4930      	ldr	r1, [pc, #192]	; (80068d0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x564>)
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f000 fee7 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
               return doSBDRB(rxBuffer, prxBufferSize);
 8006816:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006818:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f000 fa5e 	bl	8006cdc <_ZN10IridiumSBD7doSBDRBEPhPj>
 8006820:	4603      	mov	r3, r0
 8006822:	e028      	b.n	8006876 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50a>
            }

            else
            {
               // No data returned
               if (prxBufferSize)
 8006824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4c4>
                  *prxBufferSize = 0;
 800682a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800682c:	2200      	movs	r2, #0
 800682e:	601a      	str	r2, [r3, #0]
            }
            return ISBD_SUCCESS;
 8006830:	2300      	movs	r3, #0
 8006832:	e020      	b.n	8006876 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50a>
         }

         else if (moCode == 12 || moCode == 14 || moCode == 16) // fatal failure: no retry
 8006834:	8c3b      	ldrh	r3, [r7, #32]
 8006836:	2b0c      	cmp	r3, #12
 8006838:	d005      	beq.n	8006846 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4da>
 800683a:	8c3b      	ldrh	r3, [r7, #32]
 800683c:	2b0e      	cmp	r3, #14
 800683e:	d002      	beq.n	8006846 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4da>
 8006840:	8c3b      	ldrh	r3, [r7, #32]
 8006842:	2b10      	cmp	r3, #16
 8006844:	d105      	bne.n	8006852 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4e6>
         {
            diagprint(F("SBDIX fatal!\r\n"));
 8006846:	4923      	ldr	r1, [pc, #140]	; (80068d4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x568>)
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 fecb 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
            return ISBD_SBDIX_FATAL_ERROR;
 800684e:	2306      	movs	r3, #6
 8006850:	e011      	b.n	8006876 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50a>
         }

         else // retry
         {
            diagprint(F("Waiting for SBDIX retry...\r\n"));
 8006852:	4921      	ldr	r1, [pc, #132]	; (80068d8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x56c>)
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 fec5 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
            if (!noBlockWait(sbdixInterval))
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800685e:	4619      	mov	r1, r3
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 f8c5 	bl	80069f0 <_ZN10IridiumSBD11noBlockWaitEi>
 8006866:	4603      	mov	r3, r0
 8006868:	f083 0301 	eor.w	r3, r3, #1
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	f43f af5b 	beq.w	800672a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3be>
               return ISBD_CANCELLED;
 8006874:	2304      	movs	r3, #4
            return ret;
 8006876:	e015      	b.n	80068a4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         }
      }

      else // MSSTM check fail
      {
         diagprint(F("Waiting for MSSTM retry...\r\n"));
 8006878:	4918      	ldr	r1, [pc, #96]	; (80068dc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x570>)
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f000 feb2 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
         if (!noBlockWait(ISBD_MSSTM_RETRY_INTERVAL))
 8006880:	210a      	movs	r1, #10
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f000 f8b4 	bl	80069f0 <_ZN10IridiumSBD11noBlockWaitEi>
 8006888:	4603      	mov	r3, r0
 800688a:	f083 0301 	eor.w	r3, r3, #1
 800688e:	b2db      	uxtb	r3, r3
 8006890:	2b00      	cmp	r3, #0
 8006892:	f43f af4a 	beq.w	800672a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3be>
            return ISBD_CANCELLED;
 8006896:	2304      	movs	r3, #4
 8006898:	e004      	b.n	80068a4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
      }
   } // big wait loop

   diagprint(F("SBDIX timeout!\r\n"));
 800689a:	4911      	ldr	r1, [pc, #68]	; (80068e0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x574>)
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f000 fea1 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SENDRECEIVE_TIMEOUT;
 80068a2:	2307      	movs	r3, #7
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3748      	adds	r7, #72	; 0x48
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	08021288 	.word	0x08021288
 80068b0:	08020e18 	.word	0x08020e18
 80068b4:	08021294 	.word	0x08021294
 80068b8:	0802123c 	.word	0x0802123c
 80068bc:	08021238 	.word	0x08021238
 80068c0:	0802127c 	.word	0x0802127c
 80068c4:	080212a0 	.word	0x080212a0
 80068c8:	080211c4 	.word	0x080211c4
 80068cc:	080212b0 	.word	0x080212b0
 80068d0:	080212c4 	.word	0x080212c4
 80068d4:	080212d8 	.word	0x080212d8
 80068d8:	080212e8 	.word	0x080212e8
 80068dc:	08021308 	.word	0x08021308
 80068e0:	08021328 	.word	0x08021328

080068e4 <_ZN10IridiumSBD24internalGetSignalQualityERi>:

int IridiumSBD::internalGetSignalQuality(int &quality)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b086      	sub	sp, #24
 80068e8:	af02      	add	r7, sp, #8
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
   if (this->asleep)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d001      	beq.n	80068fc <_ZN10IridiumSBD24internalGetSignalQualityERi+0x18>
      return ISBD_IS_ASLEEP;
 80068f8:	230a      	movs	r3, #10
 80068fa:	e032      	b.n	8006962 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>

   char csqResponseBuf[2];

   send(F("AT+CSQ\r"));
 80068fc:	2301      	movs	r3, #1
 80068fe:	2201      	movs	r2, #1
 8006900:	491a      	ldr	r1, [pc, #104]	; (800696c <_ZN10IridiumSBD24internalGetSignalQualityERi+0x88>)
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fcf8 	bl	80072f8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(csqResponseBuf, sizeof(csqResponseBuf), "+CSQ:"))
 8006908:	f107 010c 	add.w	r1, r7, #12
 800690c:	4b18      	ldr	r3, [pc, #96]	; (8006970 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x8c>)
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	4b18      	ldr	r3, [pc, #96]	; (8006974 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x90>)
 8006912:	2202      	movs	r2, #2
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 f891 	bl	8006a3c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 800691a:	4603      	mov	r3, r0
 800691c:	f083 0301 	eor.w	r3, r3, #1
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d009      	beq.n	800693a <_ZN10IridiumSBD24internalGetSignalQualityERi+0x56>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f942 	bl	8006bb0 <_ZN10IridiumSBD9cancelledEv>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x52>
 8006932:	2304      	movs	r3, #4
 8006934:	e015      	b.n	8006962 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>
 8006936:	2303      	movs	r3, #3
 8006938:	e013      	b.n	8006962 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>

   if (isdigit(csqResponseBuf[0]))
 800693a:	7b3b      	ldrb	r3, [r7, #12]
 800693c:	3b30      	subs	r3, #48	; 0x30
 800693e:	2b09      	cmp	r3, #9
 8006940:	bf94      	ite	ls
 8006942:	2301      	movls	r3, #1
 8006944:	2300      	movhi	r3, #0
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b00      	cmp	r3, #0
 800694a:	d009      	beq.n	8006960 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7c>
   {
      quality = atoi(csqResponseBuf);
 800694c:	f107 030c 	add.w	r3, r7, #12
 8006950:	4618      	mov	r0, r3
 8006952:	f013 f99c 	bl	8019c8e <atoi>
 8006956:	4602      	mov	r2, r0
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	601a      	str	r2, [r3, #0]
      return ISBD_SUCCESS;
 800695c:	2300      	movs	r3, #0
 800695e:	e000      	b.n	8006962 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>
   }

   return ISBD_PROTOCOL_ERROR;
 8006960:	2303      	movs	r3, #3
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	0802133c 	.word	0x0802133c
 8006970:	08020e18 	.word	0x08020e18
 8006974:	08021344 	.word	0x08021344

08006978 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb>:

int IridiumSBD::internalMSSTMWorkaround(bool &okToProceed)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b08a      	sub	sp, #40	; 0x28
 800697c:	af02      	add	r7, sp, #8
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
   satellite. Ensuring that the received signal strength reported in response to AT command +CSQ and +CIER is above 2-3 bars
   before attempting SBD communication will protect against lockout.
   */
   char msstmResponseBuf[24];

   send(F("AT-MSSTM\r"));
 8006982:	2301      	movs	r3, #1
 8006984:	2201      	movs	r2, #1
 8006986:	4917      	ldr	r1, [pc, #92]	; (80069e4 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x6c>)
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fcb5 	bl	80072f8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(msstmResponseBuf, sizeof(msstmResponseBuf), "-MSSTM: "))
 800698e:	f107 0108 	add.w	r1, r7, #8
 8006992:	4b15      	ldr	r3, [pc, #84]	; (80069e8 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x70>)
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	4b15      	ldr	r3, [pc, #84]	; (80069ec <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x74>)
 8006998:	2218      	movs	r2, #24
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f84e 	bl	8006a3c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80069a0:	4603      	mov	r3, r0
 80069a2:	f083 0301 	eor.w	r3, r3, #1
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d009      	beq.n	80069c0 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x48>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f8ff 	bl	8006bb0 <_ZN10IridiumSBD9cancelledEv>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d001      	beq.n	80069bc <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x44>
 80069b8:	2304      	movs	r3, #4
 80069ba:	e00e      	b.n	80069da <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x62>
 80069bc:	2303      	movs	r3, #3
 80069be:	e00c      	b.n	80069da <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x62>

   // Response buf now contains either an 8-digit number or the string "no network service"
   okToProceed = isxdigit(msstmResponseBuf[0]);
 80069c0:	7a3b      	ldrb	r3, [r7, #8]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f013 fa8c 	bl	8019ee0 <isxdigit>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	bf14      	ite	ne
 80069ce:	2301      	movne	r3, #1
 80069d0:	2300      	moveq	r3, #0
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	701a      	strb	r2, [r3, #0]
   return ISBD_SUCCESS;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3720      	adds	r7, #32
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	08020e00 	.word	0x08020e00
 80069e8:	08020e18 	.word	0x08020e18
 80069ec:	08020e0c 	.word	0x08020e0c

080069f0 <_ZN10IridiumSBD11noBlockWaitEi>:

   return ISBD_SUCCESS;
}

bool IridiumSBD::noBlockWait(int seconds)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
   for (unsigned long start=millis(); millis() - start < 1000UL * seconds;)
 80069fa:	f002 fc97 	bl	800932c <HAL_GetTick>
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	f002 fc94 	bl	800932c <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	1ad2      	subs	r2, r2, r3
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006a10:	fb01 f303 	mul.w	r3, r1, r3
 8006a14:	429a      	cmp	r2, r3
 8006a16:	bf34      	ite	cc
 8006a18:	2301      	movcc	r3, #1
 8006a1a:	2300      	movcs	r3, #0
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d007      	beq.n	8006a32 <_ZN10IridiumSBD11noBlockWaitEi+0x42>
      if (cancelled())
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f8c4 	bl	8006bb0 <_ZN10IridiumSBD9cancelledEv>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d0e8      	beq.n	8006a00 <_ZN10IridiumSBD11noBlockWaitEi+0x10>
         return false;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	e000      	b.n	8006a34 <_ZN10IridiumSBD11noBlockWaitEi+0x44>

   return true;
 8006a32:	2301      	movs	r3, #1
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>:

// Wait for response from previous AT command.  This process terminates when "terminator" string is seen or upon timeout.
// If "prompt" string is provided (example "+CSQ:"), then all characters following prompt up to the next CRLF are
// stored in response buffer for later parsing by caller.
bool IridiumSBD::waitForATResponse(char *response, int responseSize, const char *prompt, const char *terminator)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08a      	sub	sp, #40	; 0x28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
 8006a48:	603b      	str	r3, [r7, #0]
   diagprint(F("Waiting for response "));
 8006a4a:	4957      	ldr	r1, [pc, #348]	; (8006ba8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x16c>)
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f000 fdc9 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   diagprint(terminator);
 8006a52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f000 fddf 	bl	8007618 <_ZN10IridiumSBD9diagprintEPKc>
   //this->print((char*) terminator); //TODO doesn't print otherwise
   diagprint(F("\r\n"));
 8006a5a:	4954      	ldr	r1, [pc, #336]	; (8006bac <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x170>)
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 fdc1 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (response)
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d005      	beq.n	8006a74 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x38>
      memset(response, 0, responseSize);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	68b8      	ldr	r0, [r7, #8]
 8006a70:	f013 fb90 	bl	801a194 <memset>

   int matchPromptPos = 0; // Matches chars in prompt
 8006a74:	2300      	movs	r3, #0
 8006a76:	627b      	str	r3, [r7, #36]	; 0x24
   int matchTerminatorPos = 0; // Matches chars in terminator
 8006a78:	2300      	movs	r3, #0
 8006a7a:	623b      	str	r3, [r7, #32]
   enum {LOOKING_FOR_PROMPT, GATHERING_RESPONSE, LOOKING_FOR_TERMINATOR};
   int promptState = prompt ? LOOKING_FOR_PROMPT : LOOKING_FOR_TERMINATOR;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d001      	beq.n	8006a86 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x4a>
 8006a82:	2300      	movs	r3, #0
 8006a84:	e000      	b.n	8006a88 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x4c>
 8006a86:	2302      	movs	r3, #2
 8006a88:	61fb      	str	r3, [r7, #28]
   //consoleprint(F("<< ")); //TODO If we comment out this it looks cleaner in the serial

   for (unsigned long start=millis(); millis() - start < 1000UL * atTimeout;)
 8006a8a:	f002 fc4f 	bl	800932c <HAL_GetTick>
 8006a8e:	61b8      	str	r0, [r7, #24]
 8006a90:	f002 fc4c 	bl	800932c <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	1ad2      	subs	r2, r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006aa4:	fb03 f301 	mul.w	r3, r3, r1
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	bf34      	ite	cc
 8006aac:	2301      	movcc	r3, #1
 8006aae:	2300      	movcs	r3, #0
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d072      	beq.n	8006b9c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x160>
   {
      if (cancelled())
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f000 f87a 	bl	8006bb0 <_ZN10IridiumSBD9cancelledEv>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x8a>
         return false;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	e06b      	b.n	8006b9e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x162>

      while (filteredavailable() > 0)
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f000 ff2e 	bl	8007928 <_ZN10IridiumSBD17filteredavailableEv>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	bfcc      	ite	gt
 8006ad2:	2301      	movgt	r3, #1
 8006ad4:	2300      	movle	r3, #0
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d0d9      	beq.n	8006a90 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x54>
      {
         char c = filteredread();
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 ff3f 	bl	8007960 <_ZN10IridiumSBD12filteredreadEv>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	75fb      	strb	r3, [r7, #23]
         if (prompt)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d03b      	beq.n	8006b64 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x128>
         {
            switch (promptState)
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xbe>
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d01d      	beq.n	8006b34 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xf8>
 8006af8:	e034      	b.n	8006b64 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x128>
            {
            case LOOKING_FOR_PROMPT:
               if (c == prompt[matchPromptPos])
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	4413      	add	r3, r2
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	7dfa      	ldrb	r2, [r7, #23]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d10b      	bne.n	8006b20 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xe4>
               {
                  ++matchPromptPos;
 8006b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	627b      	str	r3, [r7, #36]	; 0x24
                  if (prompt[matchPromptPos] == '\0')
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	4413      	add	r3, r2
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d121      	bne.n	8006b5e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x122>
                     promptState = GATHERING_RESPONSE;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	61fb      	str	r3, [r7, #28]
               else
               {
                  matchPromptPos = c == prompt[0] ? 1 : 0;
               }

               break;
 8006b1e:	e01e      	b.n	8006b5e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x122>
                  matchPromptPos = c == prompt[0] ? 1 : 0;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	7dfa      	ldrb	r2, [r7, #23]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d101      	bne.n	8006b2e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xf2>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e000      	b.n	8006b30 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xf4>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	627b      	str	r3, [r7, #36]	; 0x24
               break;
 8006b32:	e014      	b.n	8006b5e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x122>
            case GATHERING_RESPONSE: // gathering response from end of prompt to first \r
               if (response)
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d013      	beq.n	8006b62 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x126>
               {
                  if (c == '\r' || responseSize < 2)
 8006b3a:	7dfb      	ldrb	r3, [r7, #23]
 8006b3c:	2b0d      	cmp	r3, #13
 8006b3e:	d002      	beq.n	8006b46 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x10a>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	dc02      	bgt.n	8006b4c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x110>
                  {
                     promptState = LOOKING_FOR_TERMINATOR;
 8006b46:	2302      	movs	r3, #2
 8006b48:	61fb      	str	r3, [r7, #28]
                  {
                     *response++ = c;
                     responseSize--;
                  }
               }
               break;
 8006b4a:	e00a      	b.n	8006b62 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x126>
                     *response++ = c;
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	1c5a      	adds	r2, r3, #1
 8006b50:	60ba      	str	r2, [r7, #8]
 8006b52:	7dfa      	ldrb	r2, [r7, #23]
 8006b54:	701a      	strb	r2, [r3, #0]
                     responseSize--;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	607b      	str	r3, [r7, #4]
               break;
 8006b5c:	e001      	b.n	8006b62 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x126>
               break;
 8006b5e:	bf00      	nop
 8006b60:	e000      	b.n	8006b64 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x128>
               break;
 8006b62:	bf00      	nop
            }
         }

         if (c == terminator[matchTerminatorPos])
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b68:	4413      	add	r3, r2
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	7dfa      	ldrb	r2, [r7, #23]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d10a      	bne.n	8006b88 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x14c>
         {
            ++matchTerminatorPos;
 8006b72:	6a3b      	ldr	r3, [r7, #32]
 8006b74:	3301      	adds	r3, #1
 8006b76:	623b      	str	r3, [r7, #32]
            if (terminator[matchTerminatorPos] == '\0')
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b7c:	4413      	add	r3, r2
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1a0      	bne.n	8006ac6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x8a>
               return true;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e00a      	b.n	8006b9e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x162>
         }
         else
         {
            matchTerminatorPos = c == terminator[0] ? 1 : 0;
 8006b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	7dfa      	ldrb	r2, [r7, #23]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d101      	bne.n	8006b96 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x15a>
 8006b92:	2301      	movs	r3, #1
 8006b94:	e000      	b.n	8006b98 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x15c>
 8006b96:	2300      	movs	r3, #0
 8006b98:	623b      	str	r3, [r7, #32]
      while (filteredavailable() > 0)
 8006b9a:	e794      	b.n	8006ac6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x8a>
         }
      } // while (filteredavailable() > 0)
   } // timer loop
   return false;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3728      	adds	r7, #40	; 0x28
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	0802134c 	.word	0x0802134c
 8006bac:	080211c4 	.word	0x080211c4

08006bb0 <_ZN10IridiumSBD9cancelledEv>:

bool IridiumSBD::cancelled()
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
   if (this->useSerial)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	7c5b      	ldrb	r3, [r3, #17]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d019      	beq.n	8006bf4 <_ZN10IridiumSBD9cancelledEv+0x44>
   {
	   //TODO For some reason when using digitalRead here it didn't work so simply replaced with HAL function
	   //if ((ringPin != -1) && digitalRead(ringPin) == LOW)
	     if ((ringPin != -1) && HAL_GPIO_ReadPin(ringPin_GPIO_Port,ringPin_Pin) == LOW)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bca:	d008      	beq.n	8006bde <_ZN10IridiumSBD9cancelledEv+0x2e>
 8006bcc:	2110      	movs	r1, #16
 8006bce:	480e      	ldr	r0, [pc, #56]	; (8006c08 <_ZN10IridiumSBD9cancelledEv+0x58>)
 8006bd0:	f003 f90e 	bl	8009df0 <HAL_GPIO_ReadPin>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <_ZN10IridiumSBD9cancelledEv+0x2e>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e000      	b.n	8006be0 <_ZN10IridiumSBD9cancelledEv+0x30>
 8006bde:	2300      	movs	r3, #0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d007      	beq.n	8006bf4 <_ZN10IridiumSBD9cancelledEv+0x44>
	  {
         ringAsserted = true;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
		 diagprint(F("ringPin seen!\r\n"));
 8006bec:	4907      	ldr	r1, [pc, #28]	; (8006c0c <_ZN10IridiumSBD9cancelledEv+0x5c>)
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fcf8 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
	  }
   }

   return !ISBDCallback();
 8006bf4:	f7fe ff0c 	bl	8005a10 <_Z12ISBDCallbackv>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	f083 0301 	eor.w	r3, r3, #1
 8006bfe:	b2db      	uxtb	r3, r3
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	40020800 	.word	0x40020800
 8006c0c:	08021364 	.word	0x08021364

08006c10 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_>:

int IridiumSBD::doSBDIX(uint16_t &moCode, uint16_t &moMSN, uint16_t &mtCode, uint16_t &mtMSN, uint16_t &mtLen, uint16_t &mtRemaining)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b096      	sub	sp, #88	; 0x58
 8006c14:	af02      	add	r7, sp, #8
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
 8006c1c:	603b      	str	r3, [r7, #0]
   // Returns xx,xxxxx,xx,xxxxx,xx,xxx
   char sbdixResponseBuf[32];
   send(F("AT+SBDIX\r"));
 8006c1e:	2301      	movs	r3, #1
 8006c20:	2201      	movs	r2, #1
 8006c22:	492a      	ldr	r1, [pc, #168]	; (8006ccc <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xbc>)
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 fb67 	bl	80072f8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(sbdixResponseBuf, sizeof(sbdixResponseBuf), "+SBDIX: "))
 8006c2a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006c2e:	4b28      	ldr	r3, [pc, #160]	; (8006cd0 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xc0>)
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	4b28      	ldr	r3, [pc, #160]	; (8006cd4 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xc4>)
 8006c34:	2220      	movs	r2, #32
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f7ff ff00 	bl	8006a3c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	f083 0301 	eor.w	r3, r3, #1
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d009      	beq.n	8006c5c <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x4c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f7ff ffb1 	bl	8006bb0 <_ZN10IridiumSBD9cancelledEv>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d001      	beq.n	8006c58 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x48>
 8006c54:	2304      	movs	r3, #4
 8006c56:	e035      	b.n	8006cc4 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb4>
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e033      	b.n	8006cc4 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb4>

   uint16_t *values[6] = { &moCode, &moMSN, &mtCode, &mtMSN, &mtLen, &mtRemaining };
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	613b      	str	r3, [r7, #16]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	61bb      	str	r3, [r7, #24]
 8006c68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c6a:	61fb      	str	r3, [r7, #28]
 8006c6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c6e:	623b      	str	r3, [r7, #32]
 8006c70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c72:	627b      	str	r3, [r7, #36]	; 0x24
   for (int i=0; i<6; ++i)
 8006c74:	2300      	movs	r3, #0
 8006c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c7a:	2b05      	cmp	r3, #5
 8006c7c:	dc21      	bgt.n	8006cc2 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb2>
   {
      char *p = strtok(i == 0 ? sbdixResponseBuf : NULL, ", ");
 8006c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d102      	bne.n	8006c8a <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x7a>
 8006c84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c88:	e000      	b.n	8006c8c <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x7c>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	4912      	ldr	r1, [pc, #72]	; (8006cd8 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xc8>)
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f015 fc62 	bl	801c558 <strtok>
 8006c94:	64b8      	str	r0, [r7, #72]	; 0x48
      if (p == NULL)
 8006c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x90>
         return ISBD_PROTOCOL_ERROR;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e011      	b.n	8006cc4 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb4>
      *values[i] = atol(p);
 8006ca0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006ca2:	f012 fff8 	bl	8019c96 <atol>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8006cb0:	440b      	add	r3, r1
 8006cb2:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8006cb6:	b292      	uxth	r2, r2
 8006cb8:	801a      	strh	r2, [r3, #0]
   for (int i=0; i<6; ++i)
 8006cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cc0:	e7da      	b.n	8006c78 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x68>
   }
   return ISBD_SUCCESS;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3750      	adds	r7, #80	; 0x50
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	08021374 	.word	0x08021374
 8006cd0:	08020e18 	.word	0x08020e18
 8006cd4:	08021380 	.word	0x08021380
 8006cd8:	0802138c 	.word	0x0802138c

08006cdc <_ZN10IridiumSBD7doSBDRBEPhPj>:

int IridiumSBD::doSBDRB(uint8_t *rxBuffer, size_t *prxBufferSize)
{
 8006cdc:	b590      	push	{r4, r7, lr}
 8006cde:	b08b      	sub	sp, #44	; 0x2c
 8006ce0:	af02      	add	r7, sp, #8
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
   bool rxOverflow = false;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	77fb      	strb	r3, [r7, #31]

   send(F("AT+SBDRB\r"));
 8006cec:	2301      	movs	r3, #1
 8006cee:	2201      	movs	r2, #1
 8006cf0:	49a2      	ldr	r1, [pc, #648]	; (8006f7c <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a0>)
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f000 fb00 	bl	80072f8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(NULL, 0, NULL, "AT+SBDRB\r")) // waits for its own echo
 8006cf8:	4ba0      	ldr	r3, [pc, #640]	; (8006f7c <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a0>)
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	2200      	movs	r2, #0
 8006d00:	2100      	movs	r1, #0
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f7ff fe9a 	bl	8006a3c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	f083 0301 	eor.w	r3, r3, #1
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d009      	beq.n	8006d28 <_ZN10IridiumSBD7doSBDRBEPhPj+0x4c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f7ff ff4b 	bl	8006bb0 <_ZN10IridiumSBD9cancelledEv>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d001      	beq.n	8006d24 <_ZN10IridiumSBD7doSBDRBEPhPj+0x48>
 8006d20:	2304      	movs	r3, #4
 8006d22:	e223      	b.n	800716c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
 8006d24:	2303      	movs	r3, #3
 8006d26:	e221      	b.n	800716c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   if(!this->useSerial) check9603data(); // Check for any 9603 serial data
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	7c5b      	ldrb	r3, [r3, #17]
 8006d2c:	f083 0301 	eor.w	r3, r3, #1
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d002      	beq.n	8006d3c <_ZN10IridiumSBD7doSBDRBEPhPj+0x60>
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f000 fe58 	bl	80079ec <_ZN10IridiumSBD13check9603dataEv>

   // Time to read the binary data: size[2], body[size], checksum[2]
   unsigned long start = millis();
 8006d3c:	f002 faf6 	bl	800932c <HAL_GetTick>
 8006d40:	6138      	str	r0, [r7, #16]
   while (millis() - start < 1000UL * atTimeout)
 8006d42:	f002 faf3 	bl	800932c <HAL_GetTick>
 8006d46:	4602      	mov	r2, r0
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	1ad2      	subs	r2, r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d50:	4619      	mov	r1, r3
 8006d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d56:	fb03 f301 	mul.w	r3, r3, r1
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	bf34      	ite	cc
 8006d5e:	2301      	movcc	r3, #1
 8006d60:	2300      	movcs	r3, #0
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d03c      	beq.n	8006de2 <_ZN10IridiumSBD7doSBDRBEPhPj+0x106>
   {
      if(!this->useSerial) check9603data(); // Keep checking for new 9603 serial data
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	7c5b      	ldrb	r3, [r3, #17]
 8006d6c:	f083 0301 	eor.w	r3, r3, #1
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <_ZN10IridiumSBD7doSBDRBEPhPj+0xa0>
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f000 fe38 	bl	80079ec <_ZN10IridiumSBD13check9603dataEv>
      if (cancelled())
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f7ff ff17 	bl	8006bb0 <_ZN10IridiumSBD9cancelledEv>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d001      	beq.n	8006d8c <_ZN10IridiumSBD7doSBDRBEPhPj+0xb0>
         return ISBD_CANCELLED;
 8006d88:	2304      	movs	r3, #4
 8006d8a:	e1ef      	b.n	800716c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
      if (this->useSerial && (stream->available() >= 2))
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	7c5b      	ldrb	r3, [r3, #17]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00d      	beq.n	8006db0 <_ZN10IridiumSBD7doSBDRBEPhPj+0xd4>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	689a      	ldr	r2, [r3, #8]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3308      	adds	r3, #8
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4610      	mov	r0, r2
 8006da4:	4798      	blx	r3
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	dd01      	ble.n	8006db0 <_ZN10IridiumSBD7doSBDRBEPhPj+0xd4>
 8006dac:	2301      	movs	r3, #1
 8006dae:	e000      	b.n	8006db2 <_ZN10IridiumSBD7doSBDRBEPhPj+0xd6>
 8006db0:	2300      	movs	r3, #0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d112      	bne.n	8006ddc <_ZN10IridiumSBD7doSBDRBEPhPj+0x100>
         break;
      if ((!this->useSerial) && (i2cSerAvailable() >= 2))
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	7c5b      	ldrb	r3, [r3, #17]
 8006dba:	f083 0301 	eor.w	r3, r3, #1
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d007      	beq.n	8006dd4 <_ZN10IridiumSBD7doSBDRBEPhPj+0xf8>
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f000 ff41 	bl	8007c4c <_ZN10IridiumSBD15i2cSerAvailableEv>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	dd01      	ble.n	8006dd4 <_ZN10IridiumSBD7doSBDRBEPhPj+0xf8>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e000      	b.n	8006dd6 <_ZN10IridiumSBD7doSBDRBEPhPj+0xfa>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d102      	bne.n	8006de0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x104>
   while (millis() - start < 1000UL * atTimeout)
 8006dda:	e7b2      	b.n	8006d42 <_ZN10IridiumSBD7doSBDRBEPhPj+0x66>
         break;
 8006ddc:	bf00      	nop
 8006dde:	e000      	b.n	8006de2 <_ZN10IridiumSBD7doSBDRBEPhPj+0x106>
         break;
 8006de0:	bf00      	nop
   }

   if (this->useSerial && (stream->available() < 2))
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	7c5b      	ldrb	r3, [r3, #17]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00d      	beq.n	8006e06 <_ZN10IridiumSBD7doSBDRBEPhPj+0x12a>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	689a      	ldr	r2, [r3, #8]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	3308      	adds	r3, #8
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4610      	mov	r0, r2
 8006dfa:	4798      	blx	r3
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	dc01      	bgt.n	8006e06 <_ZN10IridiumSBD7doSBDRBEPhPj+0x12a>
 8006e02:	2301      	movs	r3, #1
 8006e04:	e000      	b.n	8006e08 <_ZN10IridiumSBD7doSBDRBEPhPj+0x12c>
 8006e06:	2300      	movs	r3, #0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <_ZN10IridiumSBD7doSBDRBEPhPj+0x134>
      return ISBD_SENDRECEIVE_TIMEOUT;
 8006e0c:	2307      	movs	r3, #7
 8006e0e:	e1ad      	b.n	800716c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
   if ((!this->useSerial) && (i2cSerAvailable() < 2))
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	7c5b      	ldrb	r3, [r3, #17]
 8006e14:	f083 0301 	eor.w	r3, r3, #1
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d007      	beq.n	8006e2e <_ZN10IridiumSBD7doSBDRBEPhPj+0x152>
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f000 ff14 	bl	8007c4c <_ZN10IridiumSBD15i2cSerAvailableEv>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	dc01      	bgt.n	8006e2e <_ZN10IridiumSBD7doSBDRBEPhPj+0x152>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e000      	b.n	8006e30 <_ZN10IridiumSBD7doSBDRBEPhPj+0x154>
 8006e2e:	2300      	movs	r3, #0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d001      	beq.n	8006e38 <_ZN10IridiumSBD7doSBDRBEPhPj+0x15c>
      return ISBD_SENDRECEIVE_TIMEOUT;
 8006e34:	2307      	movs	r3, #7
 8006e36:	e199      	b.n	800716c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   uint16_t size;
   if (this->useSerial)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	7c5b      	ldrb	r3, [r3, #17]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d01a      	beq.n	8006e76 <_ZN10IridiumSBD7doSBDRBEPhPj+0x19a>
   {
      size = 256 * stream->read() + stream->read();
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	330c      	adds	r3, #12
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4610      	mov	r0, r2
 8006e50:	4798      	blx	r3
 8006e52:	4603      	mov	r3, r0
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	021b      	lsls	r3, r3, #8
 8006e58:	b29c      	uxth	r4, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	689a      	ldr	r2, [r3, #8]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	330c      	adds	r3, #12
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4610      	mov	r0, r2
 8006e6a:	4798      	blx	r3
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	4423      	add	r3, r4
 8006e72:	83bb      	strh	r3, [r7, #28]
 8006e74:	e00d      	b.n	8006e92 <_ZN10IridiumSBD7doSBDRBEPhPj+0x1b6>
   }
   else
   {
      size = 256 * i2cSerRead() + i2cSerRead();
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f000 ff00 	bl	8007c7c <_ZN10IridiumSBD10i2cSerReadEv>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	021b      	lsls	r3, r3, #8
 8006e82:	b29c      	uxth	r4, r3
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f000 fef9 	bl	8007c7c <_ZN10IridiumSBD10i2cSerReadEv>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	4423      	add	r3, r4
 8006e90:	83bb      	strh	r3, [r7, #28]
   }
   consoleprint(F("[Binary size:"));
 8006e92:	493b      	ldr	r1, [pc, #236]	; (8006f80 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a4>)
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 fbef 	bl	8007678 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(size);
 8006e9a:	8bbb      	ldrh	r3, [r7, #28]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f000 fc1a 	bl	80076d8 <_ZN10IridiumSBD12consoleprintEt>
   consoleprint(F("]"));
 8006ea4:	4937      	ldr	r1, [pc, #220]	; (8006f84 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a8>)
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 fbe6 	bl	8007678 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

   for (uint16_t bytesRead = 0; bytesRead < size;)
 8006eac:	2300      	movs	r3, #0
 8006eae:	837b      	strh	r3, [r7, #26]
 8006eb0:	8b7a      	ldrh	r2, [r7, #26]
 8006eb2:	8bbb      	ldrh	r3, [r7, #28]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d27f      	bcs.n	8006fb8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2dc>
   {
      if (cancelled())
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f7ff fe79 	bl	8006bb0 <_ZN10IridiumSBD9cancelledEv>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d001      	beq.n	8006ec8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x1ec>
         return ISBD_CANCELLED;
 8006ec4:	2304      	movs	r3, #4
 8006ec6:	e151      	b.n	800716c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

      if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	7c5b      	ldrb	r3, [r3, #17]
 8006ecc:	f083 0301 	eor.w	r3, r3, #1
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d002      	beq.n	8006edc <_ZN10IridiumSBD7doSBDRBEPhPj+0x200>
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f000 fd88 	bl	80079ec <_ZN10IridiumSBD13check9603dataEv>

      if ((this->useSerial && (stream->available())) || ((!this->useSerial) && i2cSerAvailable()))
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	7c5b      	ldrb	r3, [r3, #17]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00b      	beq.n	8006efc <_ZN10IridiumSBD7doSBDRBEPhPj+0x220>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	689a      	ldr	r2, [r3, #8]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3308      	adds	r3, #8
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4610      	mov	r0, r2
 8006ef4:	4798      	blx	r3
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d10c      	bne.n	8006f16 <_ZN10IridiumSBD7doSBDRBEPhPj+0x23a>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	7c5b      	ldrb	r3, [r3, #17]
 8006f00:	f083 0301 	eor.w	r3, r3, #1
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d007      	beq.n	8006f1a <_ZN10IridiumSBD7doSBDRBEPhPj+0x23e>
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f000 fe9e 	bl	8007c4c <_ZN10IridiumSBD15i2cSerAvailableEv>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <_ZN10IridiumSBD7doSBDRBEPhPj+0x23e>
 8006f16:	2301      	movs	r3, #1
 8006f18:	e000      	b.n	8006f1c <_ZN10IridiumSBD7doSBDRBEPhPj+0x240>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d035      	beq.n	8006f8c <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
      {
         uint8_t c;
         if (this->useSerial)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	7c5b      	ldrb	r3, [r3, #17]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00b      	beq.n	8006f40 <_ZN10IridiumSBD7doSBDRBEPhPj+0x264>
         {
            c = stream->read();
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	689a      	ldr	r2, [r3, #8]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	330c      	adds	r3, #12
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4610      	mov	r0, r2
 8006f38:	4798      	blx	r3
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	767b      	strb	r3, [r7, #25]
 8006f3e:	e004      	b.n	8006f4a <_ZN10IridiumSBD7doSBDRBEPhPj+0x26e>
         }
         else
         {
            c = i2cSerRead();
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f000 fe9b 	bl	8007c7c <_ZN10IridiumSBD10i2cSerReadEv>
 8006f46:	4603      	mov	r3, r0
 8006f48:	767b      	strb	r3, [r7, #25]
         }
         bytesRead++;
 8006f4a:	8b7b      	ldrh	r3, [r7, #26]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	837b      	strh	r3, [r7, #26]
         if (rxBuffer && prxBufferSize)
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d01a      	beq.n	8006f8c <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d017      	beq.n	8006f8c <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
         {
            if (*prxBufferSize > 0)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d011      	beq.n	8006f88 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2ac>
            {
               *rxBuffer++ = c;
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	1c5a      	adds	r2, r3, #1
 8006f68:	60ba      	str	r2, [r7, #8]
 8006f6a:	7e7a      	ldrb	r2, [r7, #25]
 8006f6c:	701a      	strb	r2, [r3, #0]
               (*prxBufferSize)--;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	1e5a      	subs	r2, r3, #1
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	e008      	b.n	8006f8c <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
 8006f7a:	bf00      	nop
 8006f7c:	08021390 	.word	0x08021390
 8006f80:	0802139c 	.word	0x0802139c
 8006f84:	080213ac 	.word	0x080213ac
            }
            else
            {
               rxOverflow = true;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	77fb      	strb	r3, [r7, #31]
            }
         }
      }

      if (millis() - start >= 1000UL * atTimeout)
 8006f8c:	f002 f9ce 	bl	800932c <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	1ad2      	subs	r2, r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006fa0:	fb03 f301 	mul.w	r3, r3, r1
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	bf2c      	ite	cs
 8006fa8:	2301      	movcs	r3, #1
 8006faa:	2300      	movcc	r3, #0
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f43f af7e 	beq.w	8006eb0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x1d4>
         return ISBD_SENDRECEIVE_TIMEOUT;
 8006fb4:	2307      	movs	r3, #7
 8006fb6:	e0d9      	b.n	800716c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
   }

   while (millis() - start < 1000UL * atTimeout)
 8006fb8:	f002 f9b8 	bl	800932c <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	1ad2      	subs	r2, r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006fcc:	fb03 f301 	mul.w	r3, r3, r1
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	bf34      	ite	cc
 8006fd4:	2301      	movcc	r3, #1
 8006fd6:	2300      	movcs	r3, #0
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d03c      	beq.n	8007058 <_ZN10IridiumSBD7doSBDRBEPhPj+0x37c>
   {
      if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	7c5b      	ldrb	r3, [r3, #17]
 8006fe2:	f083 0301 	eor.w	r3, r3, #1
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <_ZN10IridiumSBD7doSBDRBEPhPj+0x316>
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f000 fcfd 	bl	80079ec <_ZN10IridiumSBD13check9603dataEv>
      if (cancelled())
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f7ff fddc 	bl	8006bb0 <_ZN10IridiumSBD9cancelledEv>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <_ZN10IridiumSBD7doSBDRBEPhPj+0x326>
         return ISBD_CANCELLED;
 8006ffe:	2304      	movs	r3, #4
 8007000:	e0b4      	b.n	800716c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
      if (this->useSerial && (stream->available() >= 2))
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	7c5b      	ldrb	r3, [r3, #17]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00d      	beq.n	8007026 <_ZN10IridiumSBD7doSBDRBEPhPj+0x34a>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	689a      	ldr	r2, [r3, #8]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	3308      	adds	r3, #8
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4610      	mov	r0, r2
 800701a:	4798      	blx	r3
 800701c:	4603      	mov	r3, r0
 800701e:	2b01      	cmp	r3, #1
 8007020:	dd01      	ble.n	8007026 <_ZN10IridiumSBD7doSBDRBEPhPj+0x34a>
 8007022:	2301      	movs	r3, #1
 8007024:	e000      	b.n	8007028 <_ZN10IridiumSBD7doSBDRBEPhPj+0x34c>
 8007026:	2300      	movs	r3, #0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d112      	bne.n	8007052 <_ZN10IridiumSBD7doSBDRBEPhPj+0x376>
         break;
      if ((!this->useSerial) && (i2cSerAvailable() >= 2))
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	7c5b      	ldrb	r3, [r3, #17]
 8007030:	f083 0301 	eor.w	r3, r3, #1
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d007      	beq.n	800704a <_ZN10IridiumSBD7doSBDRBEPhPj+0x36e>
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 fe06 	bl	8007c4c <_ZN10IridiumSBD15i2cSerAvailableEv>
 8007040:	4603      	mov	r3, r0
 8007042:	2b01      	cmp	r3, #1
 8007044:	dd01      	ble.n	800704a <_ZN10IridiumSBD7doSBDRBEPhPj+0x36e>
 8007046:	2301      	movs	r3, #1
 8007048:	e000      	b.n	800704c <_ZN10IridiumSBD7doSBDRBEPhPj+0x370>
 800704a:	2300      	movs	r3, #0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d102      	bne.n	8007056 <_ZN10IridiumSBD7doSBDRBEPhPj+0x37a>
   while (millis() - start < 1000UL * atTimeout)
 8007050:	e7b2      	b.n	8006fb8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2dc>
         break;
 8007052:	bf00      	nop
 8007054:	e000      	b.n	8007058 <_ZN10IridiumSBD7doSBDRBEPhPj+0x37c>
         break;
 8007056:	bf00      	nop
   }

   if (this->useSerial && (stream->available() < 2))
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	7c5b      	ldrb	r3, [r3, #17]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00d      	beq.n	800707c <_ZN10IridiumSBD7doSBDRBEPhPj+0x3a0>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	689a      	ldr	r2, [r3, #8]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3308      	adds	r3, #8
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4610      	mov	r0, r2
 8007070:	4798      	blx	r3
 8007072:	4603      	mov	r3, r0
 8007074:	2b01      	cmp	r3, #1
 8007076:	dc01      	bgt.n	800707c <_ZN10IridiumSBD7doSBDRBEPhPj+0x3a0>
 8007078:	2301      	movs	r3, #1
 800707a:	e000      	b.n	800707e <_ZN10IridiumSBD7doSBDRBEPhPj+0x3a2>
 800707c:	2300      	movs	r3, #0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3aa>
      return ISBD_SENDRECEIVE_TIMEOUT;
 8007082:	2307      	movs	r3, #7
 8007084:	e072      	b.n	800716c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
   if ((!this->useSerial) && (i2cSerAvailable() < 2))
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	7c5b      	ldrb	r3, [r3, #17]
 800708a:	f083 0301 	eor.w	r3, r3, #1
 800708e:	b2db      	uxtb	r3, r3
 8007090:	2b00      	cmp	r3, #0
 8007092:	d007      	beq.n	80070a4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3c8>
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 fdd9 	bl	8007c4c <_ZN10IridiumSBD15i2cSerAvailableEv>
 800709a:	4603      	mov	r3, r0
 800709c:	2b01      	cmp	r3, #1
 800709e:	dc01      	bgt.n	80070a4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3c8>
 80070a0:	2301      	movs	r3, #1
 80070a2:	e000      	b.n	80070a6 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3ca>
 80070a4:	2300      	movs	r3, #0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <_ZN10IridiumSBD7doSBDRBEPhPj+0x3d2>
      return ISBD_SENDRECEIVE_TIMEOUT;
 80070aa:	2307      	movs	r3, #7
 80070ac:	e05e      	b.n	800716c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   uint16_t checksum;
   if (this->useSerial)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	7c5b      	ldrb	r3, [r3, #17]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d01a      	beq.n	80070ec <_ZN10IridiumSBD7doSBDRBEPhPj+0x410>
   {
      checksum = 256 * stream->read() + stream->read();
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	689a      	ldr	r2, [r3, #8]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	330c      	adds	r3, #12
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4610      	mov	r0, r2
 80070c6:	4798      	blx	r3
 80070c8:	4603      	mov	r3, r0
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	021b      	lsls	r3, r3, #8
 80070ce:	b29c      	uxth	r4, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	689a      	ldr	r2, [r3, #8]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	330c      	adds	r3, #12
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4610      	mov	r0, r2
 80070e0:	4798      	blx	r3
 80070e2:	4603      	mov	r3, r0
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	4423      	add	r3, r4
 80070e8:	82fb      	strh	r3, [r7, #22]
 80070ea:	e00d      	b.n	8007108 <_ZN10IridiumSBD7doSBDRBEPhPj+0x42c>
   }
   else
   {
      checksum = 256 * i2cSerRead() + i2cSerRead();
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 fdc5 	bl	8007c7c <_ZN10IridiumSBD10i2cSerReadEv>
 80070f2:	4603      	mov	r3, r0
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	021b      	lsls	r3, r3, #8
 80070f8:	b29c      	uxth	r4, r3
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f000 fdbe 	bl	8007c7c <_ZN10IridiumSBD10i2cSerReadEv>
 8007100:	4603      	mov	r3, r0
 8007102:	b29b      	uxth	r3, r3
 8007104:	4423      	add	r3, r4
 8007106:	82fb      	strh	r3, [r7, #22]
   }
   consoleprint(F("[csum:"));
 8007108:	491a      	ldr	r1, [pc, #104]	; (8007174 <_ZN10IridiumSBD7doSBDRBEPhPj+0x498>)
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f000 fab4 	bl	8007678 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(checksum);
 8007110:	8afb      	ldrh	r3, [r7, #22]
 8007112:	4619      	mov	r1, r3
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f000 fadf 	bl	80076d8 <_ZN10IridiumSBD12consoleprintEt>
   consoleprint(F("]"));
 800711a:	4917      	ldr	r1, [pc, #92]	; (8007178 <_ZN10IridiumSBD7doSBDRBEPhPj+0x49c>)
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 faab 	bl	8007678 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

   // Return actual size of returned buffer
   if (prxBufferSize)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d002      	beq.n	800712e <_ZN10IridiumSBD7doSBDRBEPhPj+0x452>
      *prxBufferSize = (size_t)size;
 8007128:	8bba      	ldrh	r2, [r7, #28]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	601a      	str	r2, [r3, #0]

   // Wait for final OK
   if (!waitForATResponse())
 800712e:	4b13      	ldr	r3, [pc, #76]	; (800717c <_ZN10IridiumSBD7doSBDRBEPhPj+0x4a0>)
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	2300      	movs	r3, #0
 8007134:	2200      	movs	r2, #0
 8007136:	2100      	movs	r1, #0
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f7ff fc7f 	bl	8006a3c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 800713e:	4603      	mov	r3, r0
 8007140:	f083 0301 	eor.w	r3, r3, #1
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d009      	beq.n	800715e <_ZN10IridiumSBD7doSBDRBEPhPj+0x482>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f7ff fd30 	bl	8006bb0 <_ZN10IridiumSBD9cancelledEv>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <_ZN10IridiumSBD7doSBDRBEPhPj+0x47e>
 8007156:	2304      	movs	r3, #4
 8007158:	e008      	b.n	800716c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
 800715a:	2303      	movs	r3, #3
 800715c:	e006      	b.n	800716c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
 800715e:	7ffb      	ldrb	r3, [r7, #31]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d001      	beq.n	8007168 <_ZN10IridiumSBD7doSBDRBEPhPj+0x48c>
 8007164:	2308      	movs	r3, #8
 8007166:	e000      	b.n	800716a <_ZN10IridiumSBD7doSBDRBEPhPj+0x48e>
 8007168:	2300      	movs	r3, #0
 800716a:	bf00      	nop
}
 800716c:	4618      	mov	r0, r3
 800716e:	3724      	adds	r7, #36	; 0x24
 8007170:	46bd      	mov	sp, r7
 8007172:	bd90      	pop	{r4, r7, pc}
 8007174:	080213b0 	.word	0x080213b0
 8007178:	080213ac 	.word	0x080213ac
 800717c:	08020e18 	.word	0x08020e18

08007180 <_ZN10IridiumSBD5powerEb>:

void IridiumSBD::power(bool on)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	460b      	mov	r3, r1
 800718a:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 800718c:	78fb      	ldrb	r3, [r7, #3]
 800718e:	f083 0301 	eor.w	r3, r3, #1
 8007192:	b2da      	uxtb	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

   if (this->useSerial)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	7c5b      	ldrb	r3, [r3, #17]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d010      	beq.n	80071c4 <_ZN10IridiumSBD5powerEb+0x44>
   {
      if (this->sleepPin == -1)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071aa:	d04a      	beq.n	8007242 <_ZN10IridiumSBD5powerEb+0xc2>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d106      	bne.n	80071c4 <_ZN10IridiumSBD5powerEb+0x44>
          {
             configureSleepPin();
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f84c 	bl	8007254 <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          }
      }
   }

   if (on)
 80071c4:	78fb      	ldrb	r3, [r7, #3]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d017      	beq.n	80071fa <_ZN10IridiumSBD5powerEb+0x7a>
   {
      diagprint(F("Powering on modem...\r\n"));
 80071ca:	4920      	ldr	r1, [pc, #128]	; (800724c <_ZN10IridiumSBD5powerEb+0xcc>)
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fa09 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	7c5b      	ldrb	r3, [r3, #17]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d004      	beq.n	80071e4 <_ZN10IridiumSBD5powerEb+0x64>
      {
         setSleepPin(HIGH); // HIGH = awake
 80071da:	2101      	movs	r1, #1
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f847 	bl	8007270 <_ZN10IridiumSBD11setSleepPinEh>
 80071e2:	e003      	b.n	80071ec <_ZN10IridiumSBD5powerEb+0x6c>
      }
      else
      {
         enable9603(true);
 80071e4:	2101      	movs	r1, #1
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7fe fe3c 	bl	8005e64 <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 80071ec:	f002 f89e 	bl	800932c <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80071f8:	e024      	b.n	8007244 <_ZN10IridiumSBD5powerEb+0xc4>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 80071fa:	f002 f897 	bl	800932c <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007210:	d205      	bcs.n	800721e <_ZN10IridiumSBD5powerEb+0x9e>
         //delay(2000UL - elapsed); TODO
    	  HAL_Delay(2000UL - elapsed);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8007218:	4618      	mov	r0, r3
 800721a:	f002 f893 	bl	8009344 <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 800721e:	490c      	ldr	r1, [pc, #48]	; (8007250 <_ZN10IridiumSBD5powerEb+0xd0>)
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f9df 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	7c5b      	ldrb	r3, [r3, #17]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d004      	beq.n	8007238 <_ZN10IridiumSBD5powerEb+0xb8>
      {
         setSleepPin(LOW); // LOW = asleep
 800722e:	2100      	movs	r1, #0
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f81d 	bl	8007270 <_ZN10IridiumSBD11setSleepPinEh>
 8007236:	e005      	b.n	8007244 <_ZN10IridiumSBD5powerEb+0xc4>
      }
      else
      {
         enable9603(false);
 8007238:	2100      	movs	r1, #0
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f7fe fe12 	bl	8005e64 <_ZN10IridiumSBD10enable9603Eb>
 8007240:	e000      	b.n	8007244 <_ZN10IridiumSBD5powerEb+0xc4>
         return;
 8007242:	bf00      	nop
      }
   }
}
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	080213b8 	.word	0x080213b8
 8007250:	080213d0 	.word	0x080213d0

08007254 <_ZN10IridiumSBD17configureSleepPinEv>:

void IridiumSBD::configureSleepPin()
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
	//pinMode(sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
   //pinMode(sleepPin, OUTPUT_PP); // Make the sleep pin an output
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 800725c:	4903      	ldr	r1, [pc, #12]	; (800726c <_ZN10IridiumSBD17configureSleepPinEv+0x18>)
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f9c0 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007264:	bf00      	nop
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	080213e8 	.word	0x080213e8

08007270 <_ZN10IridiumSBD11setSleepPinEh>:

void IridiumSBD::setSleepPin(uint8_t enable)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	460b      	mov	r3, r1
 800727a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 800727c:	2201      	movs	r2, #1
 800727e:	2108      	movs	r1, #8
 8007280:	480b      	ldr	r0, [pc, #44]	; (80072b0 <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 8007282:	f002 fdcd 	bl	8009e20 <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 8007286:	490b      	ldr	r1, [pc, #44]	; (80072b4 <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f9ab 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 800728e:	78fb      	ldrb	r3, [r7, #3]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d104      	bne.n	800729e <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 8007294:	4908      	ldr	r1, [pc, #32]	; (80072b8 <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f9a4 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 800729c:	e003      	b.n	80072a6 <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 800729e:	4907      	ldr	r1, [pc, #28]	; (80072bc <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f99f 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80072a6:	bf00      	nop
 80072a8:	3708      	adds	r7, #8
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	40020800 	.word	0x40020800
 80072b4:	08021414 	.word	0x08021414
 80072b8:	08021430 	.word	0x08021430
 80072bc:	08021438 	.word	0x08021438

080072c0 <_ZN10IridiumSBD15beginSerialPortEv>:

void IridiumSBD::beginSerialPort()
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
 80072c8:	4903      	ldr	r1, [pc, #12]	; (80072d8 <_ZN10IridiumSBD15beginSerialPortEv+0x18>)
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f98a 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80072d0:	bf00      	nop
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	08021440 	.word	0x08021440

080072dc <_ZN10IridiumSBD13endSerialPortEv>:

void IridiumSBD::endSerialPort()
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 80072e4:	4903      	ldr	r1, [pc, #12]	; (80072f4 <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f97c 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80072ec:	bf00      	nop
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	08021460 	.word	0x08021460

080072f8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>:

void IridiumSBD::send(FlashString str, bool beginLine, bool endLine)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	4611      	mov	r1, r2
 8007304:	461a      	mov	r2, r3
 8007306:	460b      	mov	r3, r1
 8007308:	71fb      	strb	r3, [r7, #7]
 800730a:	4613      	mov	r3, r2
 800730c:	71bb      	strb	r3, [r7, #6]
   if (beginLine)
 800730e:	79fb      	ldrb	r3, [r7, #7]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d003      	beq.n	800731c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x24>
      consoleprint(F(">> "));
 8007314:	4921      	ldr	r1, [pc, #132]	; (800739c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa4>)
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f000 f9ae 	bl	8007678 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 800731c:	68b9      	ldr	r1, [r7, #8]
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 f9aa 	bl	8007678 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (endLine)
 8007324:	79bb      	ldrb	r3, [r7, #6]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d003      	beq.n	8007332 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x3a>
      consoleprint(F("\r\n"));
 800732a:	491d      	ldr	r1, [pc, #116]	; (80073a0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa8>)
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 f9a3 	bl	8007678 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	7c5b      	ldrb	r3, [r3, #17]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d006      	beq.n	8007348 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x50>
   {
      stream->print(str);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	68b9      	ldr	r1, [r7, #8]
 8007340:	4618      	mov	r0, r3
 8007342:	f001 f9bf 	bl	80086c4 <_ZN5Print5printEPK19__FlashStringHelper>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8007346:	e024      	b.n	8007392 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9a>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	68da      	ldr	r2, [r3, #12]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	7c1b      	ldrb	r3, [r3, #16]
 8007350:	4619      	mov	r1, r3
 8007352:	4610      	mov	r0, r2
 8007354:	f001 fb2a 	bl	80089ac <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	21ff      	movs	r1, #255	; 0xff
 800735e:	4618      	mov	r0, r3
 8007360:	f7fe fb44 	bl	80059ec <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	68b9      	ldr	r1, [r7, #8]
 800736a:	4618      	mov	r0, r3
 800736c:	f001 f9aa 	bl	80086c4 <_ZN5Print5printEPK19__FlashStringHelper>
      if (wireport->endTransmission() != 0) //Release bus
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	4618      	mov	r0, r3
 8007376:	f001 fb63 	bl	8008a40 <_ZN7TwoWire15endTransmissionEv>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	bf14      	ite	ne
 8007380:	2301      	movne	r3, #1
 8007382:	2300      	moveq	r3, #0
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d003      	beq.n	8007392 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9a>
         diagprint(F("I2C write was not successful!\r\n"));
 800738a:	4906      	ldr	r1, [pc, #24]	; (80073a4 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xac>)
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 f929 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007392:	bf00      	nop
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	0802147c 	.word	0x0802147c
 80073a0:	080211c4 	.word	0x080211c4
 80073a4:	08021244 	.word	0x08021244

080073a8 <_ZN10IridiumSBD4sendEPKc>:

void IridiumSBD::send(const char *str)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 80073b2:	4920      	ldr	r1, [pc, #128]	; (8007434 <_ZN10IridiumSBD4sendEPKc+0x8c>)
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f95f 	bl	8007678 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 80073ba:	6839      	ldr	r1, [r7, #0]
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 f975 	bl	80076ac <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 80073c2:	491d      	ldr	r1, [pc, #116]	; (8007438 <_ZN10IridiumSBD4sendEPKc+0x90>)
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f957 	bl	8007678 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	7c5b      	ldrb	r3, [r3, #17]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d006      	beq.n	80073e0 <_ZN10IridiumSBD4sendEPKc+0x38>
   {
      stream->print(str);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	6839      	ldr	r1, [r7, #0]
 80073d8:	4618      	mov	r0, r3
 80073da:	f001 f981 	bl	80086e0 <_ZN5Print5printEPKc>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 80073de:	e024      	b.n	800742a <_ZN10IridiumSBD4sendEPKc+0x82>
      wireport->beginTransmission((uint8_t)deviceaddress);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68da      	ldr	r2, [r3, #12]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	7c1b      	ldrb	r3, [r3, #16]
 80073e8:	4619      	mov	r1, r3
 80073ea:	4610      	mov	r0, r2
 80073ec:	f001 fade 	bl	80089ac <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	21ff      	movs	r1, #255	; 0xff
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7fe faf8 	bl	80059ec <_ZN7TwoWire5writeEi>
      wireport->print(str);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	4618      	mov	r0, r3
 8007404:	f001 f96c 	bl	80086e0 <_ZN5Print5printEPKc>
      if (wireport->endTransmission() != 0) //Release bus
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	4618      	mov	r0, r3
 800740e:	f001 fb17 	bl	8008a40 <_ZN7TwoWire15endTransmissionEv>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	bf14      	ite	ne
 8007418:	2301      	movne	r3, #1
 800741a:	2300      	moveq	r3, #0
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d003      	beq.n	800742a <_ZN10IridiumSBD4sendEPKc+0x82>
         diagprint(F("I2C write was not successful!\r\n"));
 8007422:	4906      	ldr	r1, [pc, #24]	; (800743c <_ZN10IridiumSBD4sendEPKc+0x94>)
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f8dd 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 800742a:	bf00      	nop
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	0802147c 	.word	0x0802147c
 8007438:	080211c4 	.word	0x080211c4
 800743c:	08021244 	.word	0x08021244

08007440 <_ZN10IridiumSBD8sendlongEPKc>:

void IridiumSBD::sendlong(const char *str)
// Send a long string that might need to be broken up for the I2C port
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 800744a:	4940      	ldr	r1, [pc, #256]	; (800754c <_ZN10IridiumSBD8sendlongEPKc+0x10c>)
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 f913 	bl	8007678 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   //this->print((char*) str);//TODO doesn't print otherwise
   consoleprint(str);
 8007452:	6839      	ldr	r1, [r7, #0]
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f929 	bl	80076ac <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 800745a:	493d      	ldr	r1, [pc, #244]	; (8007550 <_ZN10IridiumSBD8sendlongEPKc+0x110>)
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f90b 	bl	8007678 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

   if (this->useSerial)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	7c5b      	ldrb	r3, [r3, #17]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d006      	beq.n	8007478 <_ZN10IridiumSBD8sendlongEPKc+0x38>
   {
      stream->print(str); // If we are using serial then send it and don't worry about the long length
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	4618      	mov	r0, r3
 8007472:	f001 f935 	bl	80086e0 <_ZN5Print5printEPKc>
         wireport->write(str[i]);
      }
      if (wireport->endTransmission() != 0) //Send data and release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8007476:	e065      	b.n	8007544 <_ZN10IridiumSBD8sendlongEPKc+0x104>
      size_t bytes_to_send = strlen(str); // Send this many bytes in total
 8007478:	6838      	ldr	r0, [r7, #0]
 800747a:	f7f8 fec3 	bl	8000204 <strlen>
 800747e:	6178      	str	r0, [r7, #20]
      size_t txDataSize = bytes_to_send;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	60fb      	str	r3, [r7, #12]
      size_t i=0;
 8007484:	2300      	movs	r3, #0
 8007486:	613b      	str	r3, [r7, #16]
      while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 1)) // If there are too many bytes to send all in one go
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	2b1f      	cmp	r3, #31
 800748c:	d92a      	bls.n	80074e4 <_ZN10IridiumSBD8sendlongEPKc+0xa4>
         nexti = i + (TINY_I2C_BUFFER_LENGTH - 1);
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	331f      	adds	r3, #31
 8007492:	60bb      	str	r3, [r7, #8]
         wireport->beginTransmission((uint8_t)deviceaddress);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	7c1b      	ldrb	r3, [r3, #16]
 800749c:	4619      	mov	r1, r3
 800749e:	4610      	mov	r0, r2
 80074a0:	f001 fa84 	bl	80089ac <_ZN7TwoWire17beginTransmissionEh>
         wireport->write(DATA_REG); // Point to the 'serial register'
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	21ff      	movs	r1, #255	; 0xff
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7fe fa9e 	bl	80059ec <_ZN7TwoWire5writeEi>
         for (; i<nexti; ++i)
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d20c      	bcs.n	80074d2 <_ZN10IridiumSBD8sendlongEPKc+0x92>
            wireport->write(str[i]); // Write each byte
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68d8      	ldr	r0, [r3, #12]
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	4413      	add	r3, r2
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	4619      	mov	r1, r3
 80074c6:	f7fe fa91 	bl	80059ec <_ZN7TwoWire5writeEi>
         for (; i<nexti; ++i)
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	3301      	adds	r3, #1
 80074ce:	613b      	str	r3, [r7, #16]
 80074d0:	e7ee      	b.n	80074b0 <_ZN10IridiumSBD8sendlongEPKc+0x70>
         bytes_to_send = bytes_to_send - (TINY_I2C_BUFFER_LENGTH - 1); // Decrease the number of bytes still to send
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	3b1f      	subs	r3, #31
 80074d6:	617b      	str	r3, [r7, #20]
         wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	4618      	mov	r0, r3
 80074de:	f001 faaf 	bl	8008a40 <_ZN7TwoWire15endTransmissionEv>
      while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 1)) // If there are too many bytes to send all in one go
 80074e2:	e7d1      	b.n	8007488 <_ZN10IridiumSBD8sendlongEPKc+0x48>
      wireport->beginTransmission((uint8_t)deviceaddress);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	68da      	ldr	r2, [r3, #12]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	7c1b      	ldrb	r3, [r3, #16]
 80074ec:	4619      	mov	r1, r3
 80074ee:	4610      	mov	r0, r2
 80074f0:	f001 fa5c 	bl	80089ac <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	21ff      	movs	r1, #255	; 0xff
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fe fa76 	bl	80059ec <_ZN7TwoWire5writeEi>
      for (; i<txDataSize; ++i)
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	429a      	cmp	r2, r3
 8007506:	d20c      	bcs.n	8007522 <_ZN10IridiumSBD8sendlongEPKc+0xe2>
         wireport->write(str[i]);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68d8      	ldr	r0, [r3, #12]
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	4413      	add	r3, r2
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	4619      	mov	r1, r3
 8007516:	f7fe fa69 	bl	80059ec <_ZN7TwoWire5writeEi>
      for (; i<txDataSize; ++i)
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	3301      	adds	r3, #1
 800751e:	613b      	str	r3, [r7, #16]
 8007520:	e7ee      	b.n	8007500 <_ZN10IridiumSBD8sendlongEPKc+0xc0>
      if (wireport->endTransmission() != 0) //Send data and release bus
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	4618      	mov	r0, r3
 8007528:	f001 fa8a 	bl	8008a40 <_ZN7TwoWire15endTransmissionEv>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	bf14      	ite	ne
 8007532:	2301      	movne	r3, #1
 8007534:	2300      	moveq	r3, #0
 8007536:	b2db      	uxtb	r3, r3
 8007538:	2b00      	cmp	r3, #0
 800753a:	d003      	beq.n	8007544 <_ZN10IridiumSBD8sendlongEPKc+0x104>
         diagprint(F("I2C write was not successful!\r\n"));
 800753c:	4905      	ldr	r1, [pc, #20]	; (8007554 <_ZN10IridiumSBD8sendlongEPKc+0x114>)
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f850 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007544:	bf00      	nop
 8007546:	3718      	adds	r7, #24
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	0802147c 	.word	0x0802147c
 8007550:	080211c4 	.word	0x080211c4
 8007554:	08021244 	.word	0x08021244

08007558 <_ZN10IridiumSBD4sendEt>:

void IridiumSBD::send(uint16_t n)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	460b      	mov	r3, r1
 8007562:	807b      	strh	r3, [r7, #2]
   consoleprint(n);
 8007564:	887b      	ldrh	r3, [r7, #2]
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f8b5 	bl	80076d8 <_ZN10IridiumSBD12consoleprintEt>
   if (this->useSerial)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	7c5b      	ldrb	r3, [r3, #17]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d008      	beq.n	8007588 <_ZN10IridiumSBD4sendEt+0x30>
   {
      stream->print(n);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	4618      	mov	r0, r3
 800757c:	887b      	ldrh	r3, [r7, #2]
 800757e:	220a      	movs	r2, #10
 8007580:	4619      	mov	r1, r3
 8007582:	f001 f8cd 	bl	8008720 <_ZN5Print5printEii>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(n);
      if (wireport->endTransmission() != 0) //Send data and release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8007586:	e026      	b.n	80075d6 <_ZN10IridiumSBD4sendEt+0x7e>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	68da      	ldr	r2, [r3, #12]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	7c1b      	ldrb	r3, [r3, #16]
 8007590:	4619      	mov	r1, r3
 8007592:	4610      	mov	r0, r2
 8007594:	f001 fa0a 	bl	80089ac <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	21ff      	movs	r1, #255	; 0xff
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fe fa24 	bl	80059ec <_ZN7TwoWire5writeEi>
      wireport->print(n);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	4618      	mov	r0, r3
 80075aa:	887b      	ldrh	r3, [r7, #2]
 80075ac:	220a      	movs	r2, #10
 80075ae:	4619      	mov	r1, r3
 80075b0:	f001 f8b6 	bl	8008720 <_ZN5Print5printEii>
      if (wireport->endTransmission() != 0) //Send data and release bus
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f001 fa41 	bl	8008a40 <_ZN7TwoWire15endTransmissionEv>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	bf14      	ite	ne
 80075c4:	2301      	movne	r3, #1
 80075c6:	2300      	moveq	r3, #0
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <_ZN10IridiumSBD4sendEt+0x7e>
         diagprint(F("I2C write was not successful!\r\n"));
 80075ce:	4904      	ldr	r1, [pc, #16]	; (80075e0 <_ZN10IridiumSBD4sendEt+0x88>)
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f807 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80075d6:	bf00      	nop
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	08021244 	.word	0x08021244

080075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:

void IridiumSBD::diagprint(FlashString str)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	1c5a      	adds	r2, r3, #1
 80075f6:	60fa      	str	r2, [r7, #12]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 80075fc:	7afb      	ldrb	r3, [r7, #11]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d005      	beq.n	800760e <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 8007602:	7afb      	ldrb	r3, [r7, #11]
 8007604:	4619      	mov	r1, r3
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7fe fa16 	bl	8005a38 <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 800760c:	e7f1      	b.n	80075f2 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 800760e:	bf00      	nop

   //TODO
   //this->print((char*) str);
}
 8007610:	bf00      	nop
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <_ZN10IridiumSBD9diagprintEPKc>:

void IridiumSBD::diagprint(const char *str)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
   while (*str)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d008      	beq.n	800763c <_ZN10IridiumSBD9diagprintEPKc+0x24>
      ISBDDiagsCallback(this, *str++);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	603a      	str	r2, [r7, #0]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f7fe f9ff 	bl	8005a38 <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   while (*str)
 800763a:	e7f2      	b.n	8007622 <_ZN10IridiumSBD9diagprintEPKc+0xa>

   //TODO
   //this->print((char*) str);
}
 800763c:	bf00      	nop
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <_ZN10IridiumSBD9diagprintEt>:

void IridiumSBD::diagprint(uint16_t n)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	460b      	mov	r3, r1
 800764e:	807b      	strh	r3, [r7, #2]
   char str[10];
   sprintf(str, "%u", n);
 8007650:	887a      	ldrh	r2, [r7, #2]
 8007652:	f107 030c 	add.w	r3, r7, #12
 8007656:	4907      	ldr	r1, [pc, #28]	; (8007674 <_ZN10IridiumSBD9diagprintEt+0x30>)
 8007658:	4618      	mov	r0, r3
 800765a:	f014 f897 	bl	801b78c <siprintf>
   diagprint(str); //TODO
 800765e:	f107 030c 	add.w	r3, r7, #12
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f7ff ffd7 	bl	8007618 <_ZN10IridiumSBD9diagprintEPKc>
   //this->print((char*) str);
}
 800766a:	bf00      	nop
 800766c:	3718      	adds	r7, #24
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	08021480 	.word	0x08021480

08007678 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>:

void IridiumSBD::consoleprint(FlashString str)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	1c5a      	adds	r2, r3, #1
 800768a:	60fa      	str	r2, [r7, #12]
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8007690:	7afb      	ldrb	r3, [r7, #11]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d005      	beq.n	80076a2 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0x2a>
      ISBDConsoleCallback(this, c);
 8007696:	7afb      	ldrb	r3, [r7, #11]
 8007698:	4619      	mov	r1, r3
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7fe f9c0 	bl	8005a20 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   }
 80076a0:	e7f1      	b.n	8007686 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 80076a2:	bf00      	nop

   //TODO
   //this->print((char*) str);
}
 80076a4:	bf00      	nop
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <_ZN10IridiumSBD12consoleprintEPKc>:

void IridiumSBD::consoleprint(const char *str)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
   while (*str)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d008      	beq.n	80076d0 <_ZN10IridiumSBD12consoleprintEPKc+0x24>
      ISBDConsoleCallback(this, *str++);
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	1c5a      	adds	r2, r3, #1
 80076c2:	603a      	str	r2, [r7, #0]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	4619      	mov	r1, r3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f7fe f9a9 	bl	8005a20 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   while (*str)
 80076ce:	e7f2      	b.n	80076b6 <_ZN10IridiumSBD12consoleprintEPKc+0xa>

   //TODO
   //this->print((char*) str);
}
 80076d0:	bf00      	nop
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <_ZN10IridiumSBD12consoleprintEt>:

void IridiumSBD::consoleprint(uint16_t n)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b086      	sub	sp, #24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	460b      	mov	r3, r1
 80076e2:	807b      	strh	r3, [r7, #2]
   char str[10];
   sprintf(str, "%u", n);
 80076e4:	887a      	ldrh	r2, [r7, #2]
 80076e6:	f107 030c 	add.w	r3, r7, #12
 80076ea:	4907      	ldr	r1, [pc, #28]	; (8007708 <_ZN10IridiumSBD12consoleprintEt+0x30>)
 80076ec:	4618      	mov	r0, r3
 80076ee:	f014 f84d 	bl	801b78c <siprintf>
   consoleprint(str); //TODO
 80076f2:	f107 030c 	add.w	r3, r7, #12
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff ffd7 	bl	80076ac <_ZN10IridiumSBD12consoleprintEPKc>
   //consoleprint((const char*) str);
   //this->print((char*) str);
}
 80076fe:	bf00      	nop
 8007700:	3718      	adds	r7, #24
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	08021480 	.word	0x08021480

0800770c <_ZN10IridiumSBD12consoleprintEc>:

void IridiumSBD::consoleprint(char c)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	460b      	mov	r3, r1
 8007716:	70fb      	strb	r3, [r7, #3]
   ISBDConsoleCallback(this, c);
 8007718:	78fb      	ldrb	r3, [r7, #3]
 800771a:	4619      	mov	r1, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7fe f97f 	bl	8005a20 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
}
 8007722:	bf00      	nop
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
	...

0800772c <_ZN10IridiumSBD11SBDRINGSeenEv>:

void IridiumSBD::SBDRINGSeen()
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
   ringAsserted = true;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
   diagprint(F("SBDRING alert seen!\r\n"));
 800773c:	4903      	ldr	r1, [pc, #12]	; (800774c <_ZN10IridiumSBD11SBDRINGSeenEv+0x20>)
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7ff ff50 	bl	80075e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007744:	bf00      	nop
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	08021484 	.word	0x08021484

08007750 <_ZN10IridiumSBD13filterSBDRINGEv>:
// Read characters until we find one that doesn't match SBDRING
// If nextChar is -1 it means we are still entertaining a possible
// match with SBDRING\r\n.  Once we find a mismatch, stuff it into
// nextChar.
void IridiumSBD::filterSBDRING()
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
   if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	7c5b      	ldrb	r3, [r3, #17]
 800775c:	f083 0301 	eor.w	r3, r3, #1
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b00      	cmp	r3, #0
 8007764:	d002      	beq.n	800776c <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f940 	bl	80079ec <_ZN10IridiumSBD13check9603dataEv>
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	7c5b      	ldrb	r3, [r3, #17]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00b      	beq.n	800778c <_ZN10IridiumSBD13filterSBDRINGEv+0x3c>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	689a      	ldr	r2, [r3, #8]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3308      	adds	r3, #8
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4610      	mov	r0, r2
 8007784:	4798      	blx	r3
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	dc0c      	bgt.n	80077a6 <_ZN10IridiumSBD13filterSBDRINGEv+0x56>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	7c5b      	ldrb	r3, [r3, #17]
 8007790:	f083 0301 	eor.w	r3, r3, #1
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00d      	beq.n	80077b6 <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fa56 	bl	8007c4c <_ZN10IridiumSBD15i2cSerAvailableEv>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	dd07      	ble.n	80077b6 <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b0:	d101      	bne.n	80077b6 <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 80077b2:	2301      	movs	r3, #1
 80077b4:	e000      	b.n	80077b8 <_ZN10IridiumSBD13filterSBDRINGEv+0x68>
 80077b6:	2300      	movs	r3, #0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 80af 	beq.w	800791c <_ZN10IridiumSBD13filterSBDRINGEv+0x1cc>
   {
      char c;
      if (this->useSerial)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	7c5b      	ldrb	r3, [r3, #17]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00b      	beq.n	80077de <_ZN10IridiumSBD13filterSBDRINGEv+0x8e>
      {
         c = stream->read();
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	689a      	ldr	r2, [r3, #8]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	330c      	adds	r3, #12
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4610      	mov	r0, r2
 80077d6:	4798      	blx	r3
 80077d8:	4603      	mov	r3, r0
 80077da:	73fb      	strb	r3, [r7, #15]
 80077dc:	e004      	b.n	80077e8 <_ZN10IridiumSBD13filterSBDRINGEv+0x98>
      }
      else
      {
         c = i2cSerRead();
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fa4c 	bl	8007c7c <_ZN10IridiumSBD10i2cSerReadEv>
 80077e4:	4603      	mov	r3, r0
 80077e6:	73fb      	strb	r3, [r7, #15]
      }
      consoleprint(c);
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f7ff ff8d 	bl	800770c <_ZN10IridiumSBD12consoleprintEc>
      if (*head != 0 && c == *head)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 8087 	beq.w	800790e <_ZN10IridiumSBD13filterSBDRINGEv+0x1be>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	7bfa      	ldrb	r2, [r7, #15]
 800780a:	429a      	cmp	r2, r3
 800780c:	d17f      	bne.n	800790e <_ZN10IridiumSBD13filterSBDRINGEv+0x1be>
      {
         ++head;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007814:	1c5a      	adds	r2, r3, #1
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
         if (*head == 0)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10d      	bne.n	8007844 <_ZN10IridiumSBD13filterSBDRINGEv+0xf4>
         {
            SBDRINGSeen();
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f7ff ff7f 	bl	800772c <_ZN10IridiumSBD11SBDRINGSeenEv>
            head = tail = SBDRING;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a3c      	ldr	r2, [pc, #240]	; (8007924 <_ZN10IridiumSBD13filterSBDRINGEv+0x1d4>)
 8007832:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
            {
               --head;
               nextChar = c;
            }
         }
 8007842:	e069      	b.n	8007918 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
            for (unsigned long start = millis(); ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) && millis() - start < FILTERTIMEOUT; );
 8007844:	f001 fd72 	bl	800932c <HAL_GetTick>
 8007848:	60b8      	str	r0, [r7, #8]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	7c5b      	ldrb	r3, [r3, #17]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00b      	beq.n	800786a <_ZN10IridiumSBD13filterSBDRINGEv+0x11a>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	689a      	ldr	r2, [r3, #8]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3308      	adds	r3, #8
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4610      	mov	r0, r2
 8007862:	4798      	blx	r3
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00c      	beq.n	8007884 <_ZN10IridiumSBD13filterSBDRINGEv+0x134>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	7c5b      	ldrb	r3, [r3, #17]
 800786e:	f083 0301 	eor.w	r3, r3, #1
 8007872:	b2db      	uxtb	r3, r3
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00e      	beq.n	8007896 <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f9e7 	bl	8007c4c <_ZN10IridiumSBD15i2cSerAvailableEv>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d108      	bne.n	8007896 <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 8007884:	f001 fd52 	bl	800932c <HAL_GetTick>
 8007888:	4602      	mov	r2, r0
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	2b09      	cmp	r3, #9
 8007890:	d801      	bhi.n	8007896 <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 8007892:	2301      	movs	r3, #1
 8007894:	e000      	b.n	8007898 <_ZN10IridiumSBD13filterSBDRINGEv+0x148>
 8007896:	2300      	movs	r3, #0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d000      	beq.n	800789e <_ZN10IridiumSBD13filterSBDRINGEv+0x14e>
 800789c:	e7d5      	b.n	800784a <_ZN10IridiumSBD13filterSBDRINGEv+0xfa>
            if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	7c5b      	ldrb	r3, [r3, #17]
 80078a2:	f083 0301 	eor.w	r3, r3, #1
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d002      	beq.n	80078b2 <_ZN10IridiumSBD13filterSBDRINGEv+0x162>
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 f89d 	bl	80079ec <_ZN10IridiumSBD13check9603dataEv>
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	7c5b      	ldrb	r3, [r3, #17]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00b      	beq.n	80078d2 <_ZN10IridiumSBD13filterSBDRINGEv+0x182>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	689a      	ldr	r2, [r3, #8]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	3308      	adds	r3, #8
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4610      	mov	r0, r2
 80078ca:	4798      	blx	r3
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00c      	beq.n	80078ec <_ZN10IridiumSBD13filterSBDRINGEv+0x19c>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	7c5b      	ldrb	r3, [r3, #17]
 80078d6:	f083 0301 	eor.w	r3, r3, #1
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d007      	beq.n	80078f0 <_ZN10IridiumSBD13filterSBDRINGEv+0x1a0>
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f9b3 	bl	8007c4c <_ZN10IridiumSBD15i2cSerAvailableEv>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d101      	bne.n	80078f0 <_ZN10IridiumSBD13filterSBDRINGEv+0x1a0>
 80078ec:	2301      	movs	r3, #1
 80078ee:	e000      	b.n	80078f2 <_ZN10IridiumSBD13filterSBDRINGEv+0x1a2>
 80078f0:	2300      	movs	r3, #0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d010      	beq.n	8007918 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
               --head;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078fc:	1e5a      	subs	r2, r3, #1
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
               nextChar = c;
 8007904:	7bfa      	ldrb	r2, [r7, #15]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
         }
 800790c:	e004      	b.n	8007918 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
      }
      else
      {
         nextChar = c;
 800790e:	7bfa      	ldrb	r2, [r7, #15]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8007916:	e729      	b.n	800776c <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
         }
 8007918:	bf00      	nop
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 800791a:	e727      	b.n	800776c <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
      }
   }
}
 800791c:	bf00      	nop
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	08021e84 	.word	0x08021e84

08007928 <_ZN10IridiumSBD17filteredavailableEv>:

const char IridiumSBD::SBDRING[] = "SBDRING\r\n";

int IridiumSBD::filteredavailable()
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f7ff ff0d 	bl	8007750 <_ZN10IridiumSBD13filterSBDRINGEv>
   return head - tail + (nextChar != -1 ? 1 : 0);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 800794a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800794e:	d001      	beq.n	8007954 <_ZN10IridiumSBD17filteredavailableEv+0x2c>
 8007950:	2201      	movs	r2, #1
 8007952:	e000      	b.n	8007956 <_ZN10IridiumSBD17filteredavailableEv+0x2e>
 8007954:	2200      	movs	r2, #0
 8007956:	4413      	add	r3, r2
}
 8007958:	4618      	mov	r0, r3
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <_ZN10IridiumSBD12filteredreadEv>:

int IridiumSBD::filteredread()
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f7ff fef1 	bl	8007750 <_ZN10IridiumSBD13filterSBDRINGEv>

   // Use up the queue first
   if (head > tail)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800797a:	429a      	cmp	r2, r3
 800797c:	d91c      	bls.n	80079b8 <_ZN10IridiumSBD12filteredreadEv+0x58>
   {
      char c = *tail++;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007984:	1c59      	adds	r1, r3, #1
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	73bb      	strb	r3, [r7, #14]
      if (head == tail)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800799c:	429a      	cmp	r2, r3
 800799e:	d109      	bne.n	80079b4 <_ZN10IridiumSBD12filteredreadEv+0x54>
         head = tail = SBDRING;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a11      	ldr	r2, [pc, #68]	; (80079e8 <_ZN10IridiumSBD12filteredreadEv+0x88>)
 80079a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      return c;
 80079b4:	7bbb      	ldrb	r3, [r7, #14]
 80079b6:	e012      	b.n	80079de <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   // Then the "extra" char
   else if (nextChar != -1)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80079be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c2:	d00a      	beq.n	80079da <_ZN10IridiumSBD12filteredreadEv+0x7a>
   {
      char c = (char)nextChar;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80079ca:	73fb      	strb	r3, [r7, #15]
      nextChar = -1;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f04f 32ff 	mov.w	r2, #4294967295
 80079d2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      return c;
 80079d6:	7bfb      	ldrb	r3, [r7, #15]
 80079d8:	e001      	b.n	80079de <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   return -1;
 80079da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	08021e84 	.word	0x08021e84

080079ec <_ZN10IridiumSBD13check9603dataEv>:

//Checks the number of available serial bytes
//Reads the available serial bytes (if any) and stores them in i2c_ser_buffer
void IridiumSBD::check9603data()
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  if (millis() - lastCheck >= I2C_POLLING_WAIT_MS)
 80079f4:	f001 fc9a 	bl	800932c <HAL_GetTick>
 80079f8:	4602      	mov	r2, r0
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 8007a06:	4293      	cmp	r3, r2
 8007a08:	bf2c      	ite	cs
 8007a0a:	2301      	movcs	r3, #1
 8007a0c:	2300      	movcc	r3, #0
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f000 80b8 	beq.w	8007b86 <_ZN10IridiumSBD13check9603dataEv+0x19a>
  {
    //Check how many serial bytes are waiting to be read
    uint16_t bytesAvailable = 0;
 8007a16:	2300      	movs	r3, #0
 8007a18:	81fb      	strh	r3, [r7, #14]
    wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	68da      	ldr	r2, [r3, #12]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	7c1b      	ldrb	r3, [r3, #16]
 8007a22:	4619      	mov	r1, r3
 8007a24:	4610      	mov	r0, r2
 8007a26:	f000 ffc1 	bl	80089ac <_ZN7TwoWire17beginTransmissionEh>
    wireport->write(LEN_REG); // Point to the serial buffer length
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	21fd      	movs	r1, #253	; 0xfd
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fd ffdb 	bl	80059ec <_ZN7TwoWire5writeEi>
    wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f001 f800 	bl	8008a40 <_ZN7TwoWire15endTransmissionEv>
    if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)2) == 2) // Request two bytes
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	68d8      	ldr	r0, [r3, #12]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	7c1b      	ldrb	r3, [r3, #16]
 8007a48:	2202      	movs	r2, #2
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	f000 ff9b 	bl	8008986 <_ZN7TwoWire11requestFromEhh>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	bf0c      	ite	eq
 8007a56:	2301      	moveq	r3, #1
 8007a58:	2300      	movne	r3, #0
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d01d      	beq.n	8007a9c <_ZN10IridiumSBD13check9603dataEv+0xb0>
    {
      uint8_t msb = wireport->read();
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	68da      	ldr	r2, [r3, #12]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	330c      	adds	r3, #12
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4610      	mov	r0, r2
 8007a70:	4798      	blx	r3
 8007a72:	4603      	mov	r3, r0
 8007a74:	737b      	strb	r3, [r7, #13]
      uint8_t lsb = wireport->read();
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	68da      	ldr	r2, [r3, #12]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	330c      	adds	r3, #12
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4610      	mov	r0, r2
 8007a86:	4798      	blx	r3
 8007a88:	4603      	mov	r3, r0
 8007a8a:	733b      	strb	r3, [r7, #12]
      bytesAvailable = (((uint16_t)msb) << 8) | lsb;
 8007a8c:	7b7b      	ldrb	r3, [r7, #13]
 8007a8e:	021b      	lsls	r3, r3, #8
 8007a90:	b21a      	sxth	r2, r3
 8007a92:	7b3b      	ldrb	r3, [r7, #12]
 8007a94:	b21b      	sxth	r3, r3
 8007a96:	4313      	orrs	r3, r2
 8007a98:	b21b      	sxth	r3, r3
 8007a9a:	81fb      	strh	r3, [r7, #14]
    }

    //Now read the serial bytes (if any)
    if (bytesAvailable > 0)
 8007a9c:	89fb      	ldrh	r3, [r7, #14]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d06c      	beq.n	8007b7c <_ZN10IridiumSBD13check9603dataEv+0x190>
    {
      // Request the bytes
      // Poke them into the i2c_serial buffer
      // Release the bus afterwards
      wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68da      	ldr	r2, [r3, #12]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	7c1b      	ldrb	r3, [r3, #16]
 8007aaa:	4619      	mov	r1, r3
 8007aac:	4610      	mov	r0, r2
 8007aae:	f000 ff7d 	bl	80089ac <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the serial buffer
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	21ff      	movs	r1, #255	; 0xff
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7fd ff97 	bl	80059ec <_ZN7TwoWire5writeEi>
      wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 ffbc 	bl	8008a40 <_ZN7TwoWire15endTransmissionEv>
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8007ac8:	89fb      	ldrh	r3, [r7, #14]
 8007aca:	2b08      	cmp	r3, #8
 8007acc:	d92c      	bls.n	8007b28 <_ZN10IridiumSBD13check9603dataEv+0x13c>
      {
        wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)SER_PACKET_SIZE, (uint8_t)false); // Request SER_PACKET_SIZE bytes, don't release the bus
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68d8      	ldr	r0, [r3, #12]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	7c19      	ldrb	r1, [r3, #16]
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	2208      	movs	r2, #8
 8007ada:	f000 ff19 	bl	8008910 <_ZN7TwoWire11requestFromEhhh>
        while (wireport->available())
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	68da      	ldr	r2, [r3, #12]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3308      	adds	r3, #8
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4610      	mov	r0, r2
 8007aee:	4798      	blx	r3
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	bf14      	ite	ne
 8007af6:	2301      	movne	r3, #1
 8007af8:	2300      	moveq	r3, #0
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00f      	beq.n	8007b20 <_ZN10IridiumSBD13check9603dataEv+0x134>
        {
          i2cSerPoke(wireport->read()); // Read and store each byte
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	68da      	ldr	r2, [r3, #12]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	330c      	adds	r3, #12
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4610      	mov	r0, r2
 8007b10:	4798      	blx	r3
 8007b12:	4603      	mov	r3, r0
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f8d5 	bl	8007cc8 <_ZN10IridiumSBD10i2cSerPokeEc>
        while (wireport->available())
 8007b1e:	e7de      	b.n	8007ade <_ZN10IridiumSBD13check9603dataEv+0xf2>
        }
        bytesAvailable -= SER_PACKET_SIZE; // Decrease the number of bytes available by SER_PACKET_SIZE
 8007b20:	89fb      	ldrh	r3, [r7, #14]
 8007b22:	3b08      	subs	r3, #8
 8007b24:	81fb      	strh	r3, [r7, #14]
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8007b26:	e7cf      	b.n	8007ac8 <_ZN10IridiumSBD13check9603dataEv+0xdc>
      }
      wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)bytesAvailable); // Request remaining bytes, release the bus
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	68d8      	ldr	r0, [r3, #12]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	7c1b      	ldrb	r3, [r3, #16]
 8007b30:	89fa      	ldrh	r2, [r7, #14]
 8007b32:	b2d2      	uxtb	r2, r2
 8007b34:	4619      	mov	r1, r3
 8007b36:	f000 ff26 	bl	8008986 <_ZN7TwoWire11requestFromEhh>
      while (wireport->available())
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	68da      	ldr	r2, [r3, #12]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3308      	adds	r3, #8
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4610      	mov	r0, r2
 8007b4a:	4798      	blx	r3
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	bf14      	ite	ne
 8007b52:	2301      	movne	r3, #1
 8007b54:	2300      	moveq	r3, #0
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00f      	beq.n	8007b7c <_ZN10IridiumSBD13check9603dataEv+0x190>
      {
        i2cSerPoke(wireport->read()); // Read and store each byte
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	68da      	ldr	r2, [r3, #12]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	330c      	adds	r3, #12
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4610      	mov	r0, r2
 8007b6c:	4798      	blx	r3
 8007b6e:	4603      	mov	r3, r0
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	4619      	mov	r1, r3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f8a7 	bl	8007cc8 <_ZN10IridiumSBD10i2cSerPokeEc>
      while (wireport->available())
 8007b7a:	e7de      	b.n	8007b3a <_ZN10IridiumSBD13check9603dataEv+0x14e>
      }
    }

    lastCheck = millis(); //Put off checking to avoid excessive I2C bus traffic
 8007b7c:	f001 fbd6 	bl	800932c <HAL_GetTick>
 8007b80:	4602      	mov	r2, r0
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8007b86:	bf00      	nop
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <_ZN10IridiumSBD13check9603pinsEv>:

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b082      	sub	sp, #8
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68da      	ldr	r2, [r3, #12]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	7c1b      	ldrb	r3, [r3, #16]
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	f000 ff03 	bl	80089ac <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	2110      	movs	r1, #16
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7fd ff1d 	bl	80059ec <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 ff42 	bl	8008a40 <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	68d8      	ldr	r0, [r3, #12]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	7c1b      	ldrb	r3, [r3, #16]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	f000 fedd 	bl	8008986 <_ZN7TwoWire11requestFromEhh>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	bf0c      	ite	eq
 8007bd2:	2301      	moveq	r3, #1
 8007bd4:	2300      	movne	r3, #0
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00d      	beq.n	8007bf8 <_ZN10IridiumSBD13check9603pinsEv+0x6a>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68da      	ldr	r2, [r3, #12]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	330c      	adds	r3, #12
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4610      	mov	r0, r2
 8007bec:	4798      	blx	r3
 8007bee:	4603      	mov	r3, r0
 8007bf0:	b2da      	uxtb	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
}
 8007bf8:	bf00      	nop
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	460b      	mov	r3, r1
 8007c0a:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	68da      	ldr	r2, [r3, #12]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	7c1b      	ldrb	r3, [r3, #16]
 8007c14:	4619      	mov	r1, r3
 8007c16:	4610      	mov	r0, r2
 8007c18:	f000 fec8 	bl	80089ac <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	2110      	movs	r1, #16
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7fd fee2 	bl	80059ec <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	68da      	ldr	r2, [r3, #12]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	78f9      	ldrb	r1, [r7, #3]
 8007c36:	4610      	mov	r0, r2
 8007c38:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 fefe 	bl	8008a40 <_ZN7TwoWire15endTransmissionEv>
}
 8007c44:	bf00      	nop
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <_ZN10IridiumSBD15i2cSerAvailableEv>:
    return(ISBD_SUCCESS);
}

// I2C_SER functions
int IridiumSBD::i2cSerAvailable()
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  return (i2c_ser_buffer_tail + I2C_SER_MAX_BUFF - i2c_ser_buffer_head) % I2C_SER_MAX_BUFF;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c58:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	425a      	negs	r2, r3
 8007c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c68:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007c6c:	bf58      	it	pl
 8007c6e:	4253      	negpl	r3, r2
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <_ZN10IridiumSBD10i2cSerReadEv>:

int IridiumSBD::i2cSerRead()
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  // Empty buffer?
  if (i2c_ser_buffer_head == i2c_ser_buffer_tail)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d102      	bne.n	8007c96 <_ZN10IridiumSBD10i2cSerReadEv+0x1a>
    return -1;
 8007c90:	f04f 33ff 	mov.w	r3, #4294967295
 8007c94:	e012      	b.n	8007cbc <_ZN10IridiumSBD10i2cSerReadEv+0x40>

  // Read from "head"
  uint8_t d = i2c_ser_buffer[i2c_ser_buffer_head]; // grab next byte
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	7c9b      	ldrb	r3, [r3, #18]
 8007ca0:	73fb      	strb	r3, [r7, #15]
  i2c_ser_buffer_head = (i2c_ser_buffer_head + 1) % I2C_SER_MAX_BUFF; // update head
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	425a      	negs	r2, r3
 8007caa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007cb2:	bf58      	it	pl
 8007cb4:	4253      	negpl	r3, r2
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	6593      	str	r3, [r2, #88]	; 0x58
  return d;
 8007cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3714      	adds	r7, #20
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <_ZN10IridiumSBD10i2cSerPokeEc>:

void IridiumSBD::i2cSerPoke(char serChar)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	70fb      	strb	r3, [r7, #3]
  // Calculate the new value for the tail
  int next = (i2c_ser_buffer_tail + 1) % I2C_SER_MAX_BUFF;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd8:	3301      	adds	r3, #1
 8007cda:	425a      	negs	r2, r3
 8007cdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ce0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007ce4:	bf58      	it	pl
 8007ce6:	4253      	negpl	r3, r2
 8007ce8:	60fb      	str	r3, [r7, #12]
  // If the buffer is not full (i.e. we are not about to overwrite the head byte)
  // If the buffer is full, the byte is lost
  if (next != i2c_ser_buffer_head)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d008      	beq.n	8007d06 <_ZN10IridiumSBD10i2cSerPokeEc+0x3e>
  {
    // save new data in buffer: tail points to where byte goes
    i2c_ser_buffer[i2c_ser_buffer_tail] = serChar; // save new byte
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	78fa      	ldrb	r2, [r7, #3]
 8007cfe:	749a      	strb	r2, [r3, #18]
    i2c_ser_buffer_tail = next;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 8007d06:	bf00      	nop
 8007d08:	3714      	adds	r7, #20
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
	...

08007d14 <_ZN10IridiumSBD20internalClearBuffersEi>:

int IridiumSBD::internalClearBuffers(int buffers)
// Clear the MO/MT/Both buffers
// Defaults to clearing the MO buffer to avoid resending old messages
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af02      	add	r7, sp, #8
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
   if (this->asleep)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d001      	beq.n	8007d2c <_ZN10IridiumSBD20internalClearBuffersEi+0x18>
      return ISBD_IS_ASLEEP;
 8007d28:	230a      	movs	r3, #10
 8007d2a:	e032      	b.n	8007d92 <_ZN10IridiumSBD20internalClearBuffersEi+0x7e>

   if (buffers == ISBD_CLEAR_MT) // Clear MT buffer
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d106      	bne.n	8007d40 <_ZN10IridiumSBD20internalClearBuffersEi+0x2c>
   {
      send(F("AT+SBDD1\r"));
 8007d32:	2301      	movs	r3, #1
 8007d34:	2201      	movs	r2, #1
 8007d36:	4919      	ldr	r1, [pc, #100]	; (8007d9c <_ZN10IridiumSBD20internalClearBuffersEi+0x88>)
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7ff fadd 	bl	80072f8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
 8007d3e:	e00f      	b.n	8007d60 <_ZN10IridiumSBD20internalClearBuffersEi+0x4c>
   }
   else if (buffers == ISBD_CLEAR_BOTH) // Clear both buffers
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d106      	bne.n	8007d54 <_ZN10IridiumSBD20internalClearBuffersEi+0x40>
   {
      send(F("AT+SBDD2\r"));
 8007d46:	2301      	movs	r3, #1
 8007d48:	2201      	movs	r2, #1
 8007d4a:	4915      	ldr	r1, [pc, #84]	; (8007da0 <_ZN10IridiumSBD20internalClearBuffersEi+0x8c>)
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7ff fad3 	bl	80072f8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
 8007d52:	e005      	b.n	8007d60 <_ZN10IridiumSBD20internalClearBuffersEi+0x4c>
   }
   else // Clear MO buffer
   {
      send(F("AT+SBDD0\r"));
 8007d54:	2301      	movs	r3, #1
 8007d56:	2201      	movs	r2, #1
 8007d58:	4912      	ldr	r1, [pc, #72]	; (8007da4 <_ZN10IridiumSBD20internalClearBuffersEi+0x90>)
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f7ff facc 	bl	80072f8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   }
   if (!waitForATResponse())
 8007d60:	4b11      	ldr	r3, [pc, #68]	; (8007da8 <_ZN10IridiumSBD20internalClearBuffersEi+0x94>)
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	2300      	movs	r3, #0
 8007d66:	2200      	movs	r2, #0
 8007d68:	2100      	movs	r1, #0
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7fe fe66 	bl	8006a3c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007d70:	4603      	mov	r3, r0
 8007d72:	f083 0301 	eor.w	r3, r3, #1
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d009      	beq.n	8007d90 <_ZN10IridiumSBD20internalClearBuffersEi+0x7c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7fe ff17 	bl	8006bb0 <_ZN10IridiumSBD9cancelledEv>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d001      	beq.n	8007d8c <_ZN10IridiumSBD20internalClearBuffersEi+0x78>
 8007d88:	2304      	movs	r3, #4
 8007d8a:	e002      	b.n	8007d92 <_ZN10IridiumSBD20internalClearBuffersEi+0x7e>
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	e000      	b.n	8007d92 <_ZN10IridiumSBD20internalClearBuffersEi+0x7e>

   return ISBD_SUCCESS;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	080214d0 	.word	0x080214d0
 8007da0:	080214dc 	.word	0x080214dc
 8007da4:	080214e8 	.word	0x080214e8
 8007da8:	08020e18 	.word	0x08020e18

08007dac <_ZN10IridiumSBD15internalGetIMEIEPcj>:

int IridiumSBD::internalGetIMEI(char *IMEI, size_t bufferSize)
// Get the IMEI
// https://github.com/mikalhart/IridiumSBD/pull/21
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b086      	sub	sp, #24
 8007db0:	af02      	add	r7, sp, #8
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	607a      	str	r2, [r7, #4]
   if (this->asleep)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x1a>
      return ISBD_IS_ASLEEP;
 8007dc2:	230a      	movs	r3, #10
 8007dc4:	e023      	b.n	8007e0e <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   if (bufferSize < 16) // IMEI is 15 digits
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2b0f      	cmp	r3, #15
 8007dca:	d801      	bhi.n	8007dd0 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x24>
      return ISBD_RX_OVERFLOW;
 8007dcc:	2308      	movs	r3, #8
 8007dce:	e01e      	b.n	8007e0e <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   send(F("AT+CGSN\r"));
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	4910      	ldr	r1, [pc, #64]	; (8007e18 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x6c>)
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f7ff fa8e 	bl	80072f8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(IMEI, bufferSize, "\n"))
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	4b0f      	ldr	r3, [pc, #60]	; (8007e1c <_ZN10IridiumSBD15internalGetIMEIEPcj+0x70>)
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	4b0f      	ldr	r3, [pc, #60]	; (8007e20 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x74>)
 8007de4:	68b9      	ldr	r1, [r7, #8]
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f7fe fe28 	bl	8006a3c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007dec:	4603      	mov	r3, r0
 8007dee:	f083 0301 	eor.w	r3, r3, #1
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d009      	beq.n	8007e0c <_ZN10IridiumSBD15internalGetIMEIEPcj+0x60>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f7fe fed9 	bl	8006bb0 <_ZN10IridiumSBD9cancelledEv>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d001      	beq.n	8007e08 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x5c>
 8007e04:	2304      	movs	r3, #4
 8007e06:	e002      	b.n	8007e0e <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e000      	b.n	8007e0e <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   return ISBD_SUCCESS;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	080214f4 	.word	0x080214f4
 8007e1c:	08020e18 	.word	0x08020e18
 8007e20:	08021500 	.word	0x08021500

08007e24 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE>:
}
#endif


//uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart,POWERPROFILE profile){ TODO??
uint8_t IridiumSBD::MRT_Iridium_setup(uint8_t timeout, uint8_t i2c_bus, void (*iridium_print)(char*)){
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b092      	sub	sp, #72	; 0x48
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	607b      	str	r3, [r7, #4]
 8007e2e:	460b      	mov	r3, r1
 8007e30:	72fb      	strb	r3, [r7, #11]
 8007e32:	4613      	mov	r3, r2
 8007e34:	72bb      	strb	r3, [r7, #10]
	this->print = iridium_print;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	601a      	str	r2, [r3, #0]
	this->print((char*) "\r\nIridium 9603N Init\r\n");
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	485b      	ldr	r0, [pc, #364]	; (8007fb0 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x18c>)
 8007e42:	4798      	blx	r3

	this->print((char*) "\tSetting I2C bus...");
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	485a      	ldr	r0, [pc, #360]	; (8007fb4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x190>)
 8007e4a:	4798      	blx	r3
	if (i2c_bus == 1){
 8007e4c:	7abb      	ldrb	r3, [r7, #10]
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d103      	bne.n	8007e5a <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x36>
		this->wireport = &Wire;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	4a58      	ldr	r2, [pc, #352]	; (8007fb8 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x194>)
 8007e56:	60da      	str	r2, [r3, #12]
 8007e58:	e00c      	b.n	8007e74 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x50>
	}
	else if (i2c_bus == 2){
 8007e5a:	7abb      	ldrb	r3, [r7, #10]
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d103      	bne.n	8007e68 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x44>
		this->wireport = &Wire1;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	4a56      	ldr	r2, [pc, #344]	; (8007fbc <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x198>)
 8007e64:	60da      	str	r2, [r3, #12]
 8007e66:	e005      	b.n	8007e74 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x50>
	}
	else if (i2c_bus == 3){
 8007e68:	7abb      	ldrb	r3, [r7, #10]
 8007e6a:	2b03      	cmp	r3, #3
 8007e6c:	d102      	bne.n	8007e74 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x50>
		this->wireport = &Wire2;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	4a53      	ldr	r2, [pc, #332]	; (8007fc0 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x19c>)
 8007e72:	60da      	str	r2, [r3, #12]
	}
	this->print((char*) "OK\r\n");
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4852      	ldr	r0, [pc, #328]	; (8007fc4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8007e7a:	4798      	blx	r3

	this->print((char*) "\tChecking device connection...");
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4851      	ldr	r0, [pc, #324]	; (8007fc8 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a4>)
 8007e82:	4798      	blx	r3
	while(!this->isConnected()){
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f7fe f8c9 	bl	800601c <_ZN10IridiumSBD11isConnectedEv>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	f083 0301 	eor.w	r3, r3, #1
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d020      	beq.n	8007ed8 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0xb4>
		HAL_Delay(300);
 8007e96:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007e9a:	f001 fa53 	bl	8009344 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection   ");
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	484a      	ldr	r0, [pc, #296]	; (8007fcc <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a8>)
 8007ea4:	4798      	blx	r3
		HAL_Delay(300);
 8007ea6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007eaa:	f001 fa4b 	bl	8009344 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection.  ");
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4847      	ldr	r0, [pc, #284]	; (8007fd0 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1ac>)
 8007eb4:	4798      	blx	r3
		HAL_Delay(300);
 8007eb6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007eba:	f001 fa43 	bl	8009344 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection.. ");
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4844      	ldr	r0, [pc, #272]	; (8007fd4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1b0>)
 8007ec4:	4798      	blx	r3
		HAL_Delay(300);
 8007ec6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007eca:	f001 fa3b 	bl	8009344 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection...");
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4841      	ldr	r0, [pc, #260]	; (8007fd8 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1b4>)
 8007ed4:	4798      	blx	r3
	while(!this->isConnected()){
 8007ed6:	e7d5      	b.n	8007e84 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x60>
	}
	this->print((char*) "OK\r\n");
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4839      	ldr	r0, [pc, #228]	; (8007fc4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8007ede:	4798      	blx	r3

	//Activate the superchargers
	this->print((char*) "\tActivating the superchargers...");
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	483d      	ldr	r0, [pc, #244]	; (8007fdc <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1b8>)
 8007ee6:	4798      	blx	r3
	this->enableSuperCapCharger(true);
 8007ee8:	2101      	movs	r1, #1
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f7fd ff0e 	bl	8005d0c <_ZN10IridiumSBD21enableSuperCapChargerEb>
	this->print((char*) "OK\r\n");
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4833      	ldr	r0, [pc, #204]	; (8007fc4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8007ef6:	4798      	blx	r3


	//Wait for the supercapacitors to charge
	//int start=millis();
	this->print((char*) "\tWaiting for the supercapacitors to charge...");
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4838      	ldr	r0, [pc, #224]	; (8007fe0 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1bc>)
 8007efe:	4798      	blx	r3
	while (!this->checkSuperCapCharger()){
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f7fd ff41 	bl	8005d88 <_ZN10IridiumSBD20checkSuperCapChargerEv>
 8007f06:	4603      	mov	r3, r0
 8007f08:	f083 0301 	eor.w	r3, r3, #1
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d004      	beq.n	8007f1c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0xf8>
		HAL_Delay(333);
 8007f12:	f240 104d 	movw	r0, #333	; 0x14d
 8007f16:	f001 fa15 	bl	8009344 <HAL_Delay>
	while (!this->checkSuperCapCharger()){
 8007f1a:	e7f1      	b.n	8007f00 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0xdc>
	}
	this->print((char*) "OK\r\n");
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4828      	ldr	r0, [pc, #160]	; (8007fc4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8007f22:	4798      	blx	r3


	//Enable power for the 9603N
	this->print((char*) "\tEnabling 9603N power...");
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	482e      	ldr	r0, [pc, #184]	; (8007fe4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1c0>)
 8007f2a:	4798      	blx	r3
	this->enable9603Npower(true);
 8007f2c:	2101      	movs	r1, #1
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f7fd ff5a 	bl	8005de8 <_ZN10IridiumSBD16enable9603NpowerEb>
	this->print((char*) "OK\r\n");
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4822      	ldr	r0, [pc, #136]	; (8007fc4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8007f3a:	4798      	blx	r3
	/*
	 * Begin satellite modem operation
	 */

	//Power on the rockblock
	this->print((char*) "\tStarting Modem...");
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4829      	ldr	r0, [pc, #164]	; (8007fe8 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1c4>)
 8007f42:	4798      	blx	r3
	//this->setPowerProfile(profile);
	int err = this->begin();
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f7fd fd83 	bl	8005a50 <_ZN10IridiumSBD5beginEv>
 8007f4a:	6478      	str	r0, [r7, #68]	; 0x44
	if (err != ISBD_SUCCESS)
 8007f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00b      	beq.n	8007f6a <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x146>
	  {
		this->print((char*) "Failed: ");
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4825      	ldr	r0, [pc, #148]	; (8007fec <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1c8>)
 8007f58:	4798      	blx	r3
		this->MRT_Iridium_ErrorMessage(err);
 8007f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	4619      	mov	r1, r3
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f000 f849 	bl	8007ff8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>

	    return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e01d      	b.n	8007fa6 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x182>
	  }
	this->print((char*) "OK\r\n");
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4815      	ldr	r0, [pc, #84]	; (8007fc4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8007f70:	4798      	blx	r3

	//Setup default IMEI to 000000000000000 (no IMEI)
	IMEI= (char*) "000000000000000";
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	4a1e      	ldr	r2, [pc, #120]	; (8007ff0 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1cc>)
 8007f76:	605a      	str	r2, [r3, #4]

	char str[50];
	sprintf(str, "\tSetting timeout of %i seconds...", timeout);
 8007f78:	7afa      	ldrb	r2, [r7, #11]
 8007f7a:	f107 0310 	add.w	r3, r7, #16
 8007f7e:	491d      	ldr	r1, [pc, #116]	; (8007ff4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1d0>)
 8007f80:	4618      	mov	r0, r3
 8007f82:	f013 fc03 	bl	801b78c <siprintf>
	this->print((char*) str);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f107 0210 	add.w	r2, r7, #16
 8007f8e:	4610      	mov	r0, r2
 8007f90:	4798      	blx	r3
	adjustATTimeout(timeout);
 8007f92:	7afb      	ldrb	r3, [r7, #11]
 8007f94:	4619      	mov	r1, r3
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f7fd fdc6 	bl	8005b28 <_ZN10IridiumSBD15adjustATTimeoutEi>
	this->print((char*) "OK\r\n");
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4808      	ldr	r0, [pc, #32]	; (8007fc4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8007fa2:	4798      	blx	r3

	return HAL_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3748      	adds	r7, #72	; 0x48
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	08021504 	.word	0x08021504
 8007fb4:	0802151c 	.word	0x0802151c
 8007fb8:	20000618 	.word	0x20000618
 8007fbc:	200006d0 	.word	0x200006d0
 8007fc0:	20000788 	.word	0x20000788
 8007fc4:	08020e18 	.word	0x08020e18
 8007fc8:	08021530 	.word	0x08021530
 8007fcc:	08021550 	.word	0x08021550
 8007fd0:	08021570 	.word	0x08021570
 8007fd4:	08021590 	.word	0x08021590
 8007fd8:	080215b0 	.word	0x080215b0
 8007fdc:	080215d0 	.word	0x080215d0
 8007fe0:	080215f4 	.word	0x080215f4
 8007fe4:	08021624 	.word	0x08021624
 8007fe8:	08021640 	.word	0x08021640
 8007fec:	08021654 	.word	0x08021654
 8007ff0:	08021660 	.word	0x08021660
 8007ff4:	08021670 	.word	0x08021670

08007ff8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>:
	return true;
}



void IridiumSBD::MRT_Iridium_ErrorMessage(uint8_t error){
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	70fb      	strb	r3, [r7, #3]
	this->print((char*) "\r\n\tError:\t");
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4834      	ldr	r0, [pc, #208]	; (80080dc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe4>)
 800800a:	4798      	blx	r3
	if (error == ISBD_ALREADY_AWAKE){
 800800c:	78fb      	ldrb	r3, [r7, #3]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d104      	bne.n	800801c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x24>
		this->print((char*) "\tAlready Awake\r\n");
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4832      	ldr	r0, [pc, #200]	; (80080e0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe8>)
 8008018:	4798      	blx	r3
		this->print((char*) "\tDEBUG LINE REACHED\r\n");
	}
	else{
		this->print((char*) "\tUNKNOWN\r\n");
	}
}
 800801a:	e05b      	b.n	80080d4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_SERIAL_FAILURE){
 800801c:	78fb      	ldrb	r3, [r7, #3]
 800801e:	2b02      	cmp	r3, #2
 8008020:	d104      	bne.n	800802c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x34>
		this->print((char*) "\tSerial Failure\r\n");
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	482f      	ldr	r0, [pc, #188]	; (80080e4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xec>)
 8008028:	4798      	blx	r3
}
 800802a:	e053      	b.n	80080d4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_PROTOCOL_ERROR){
 800802c:	78fb      	ldrb	r3, [r7, #3]
 800802e:	2b03      	cmp	r3, #3
 8008030:	d104      	bne.n	800803c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x44>
		this->print((char*) "\tProtocol Error\r\n");
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	482c      	ldr	r0, [pc, #176]	; (80080e8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf0>)
 8008038:	4798      	blx	r3
}
 800803a:	e04b      	b.n	80080d4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_CANCELLED){
 800803c:	78fb      	ldrb	r3, [r7, #3]
 800803e:	2b04      	cmp	r3, #4
 8008040:	d104      	bne.n	800804c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x54>
		this->print((char*) "\tCancelled\r\n");
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4829      	ldr	r0, [pc, #164]	; (80080ec <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf4>)
 8008048:	4798      	blx	r3
}
 800804a:	e043      	b.n	80080d4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_NO_MODEM_DETECTED){
 800804c:	78fb      	ldrb	r3, [r7, #3]
 800804e:	2b05      	cmp	r3, #5
 8008050:	d104      	bne.n	800805c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x64>
		this->print((char*) "\tNo modem detected: check wiring.\r\n");
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4826      	ldr	r0, [pc, #152]	; (80080f0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf8>)
 8008058:	4798      	blx	r3
}
 800805a:	e03b      	b.n	80080d4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_SBDIX_FATAL_ERROR){
 800805c:	78fb      	ldrb	r3, [r7, #3]
 800805e:	2b06      	cmp	r3, #6
 8008060:	d104      	bne.n	800806c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x74>
		this->print((char*) "\tSDBIX Fatal Error\r\n");
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4823      	ldr	r0, [pc, #140]	; (80080f4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xfc>)
 8008068:	4798      	blx	r3
}
 800806a:	e033      	b.n	80080d4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_SENDRECEIVE_TIMEOUT){
 800806c:	78fb      	ldrb	r3, [r7, #3]
 800806e:	2b07      	cmp	r3, #7
 8008070:	d104      	bne.n	800807c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x84>
		this->print((char*) "\tSend-Receive Timeout\r\n");
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4820      	ldr	r0, [pc, #128]	; (80080f8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x100>)
 8008078:	4798      	blx	r3
}
 800807a:	e02b      	b.n	80080d4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_RX_OVERFLOW){
 800807c:	78fb      	ldrb	r3, [r7, #3]
 800807e:	2b08      	cmp	r3, #8
 8008080:	d104      	bne.n	800808c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x94>
		this->print((char*) "\tRX Overflow\r\n");
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	481d      	ldr	r0, [pc, #116]	; (80080fc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x104>)
 8008088:	4798      	blx	r3
}
 800808a:	e023      	b.n	80080d4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_REENTRANT){
 800808c:	78fb      	ldrb	r3, [r7, #3]
 800808e:	2b09      	cmp	r3, #9
 8008090:	d104      	bne.n	800809c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xa4>
		this->print((char*) "\tREENTRANT\r\n");
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	481a      	ldr	r0, [pc, #104]	; (8008100 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x108>)
 8008098:	4798      	blx	r3
}
 800809a:	e01b      	b.n	80080d4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_IS_ASLEEP){
 800809c:	78fb      	ldrb	r3, [r7, #3]
 800809e:	2b0a      	cmp	r3, #10
 80080a0:	d104      	bne.n	80080ac <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xb4>
		this->print((char*) "\tIs Asleep\r\n");
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4817      	ldr	r0, [pc, #92]	; (8008104 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x10c>)
 80080a8:	4798      	blx	r3
}
 80080aa:	e013      	b.n	80080d4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_NO_SLEEP_PIN){
 80080ac:	78fb      	ldrb	r3, [r7, #3]
 80080ae:	2b0b      	cmp	r3, #11
 80080b0:	d104      	bne.n	80080bc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xc4>
		this->print((char*) "\tNo Sleep Pin\r\n");
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4814      	ldr	r0, [pc, #80]	; (8008108 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x110>)
 80080b8:	4798      	blx	r3
}
 80080ba:	e00b      	b.n	80080d4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if(error == 20){
 80080bc:	78fb      	ldrb	r3, [r7, #3]
 80080be:	2b14      	cmp	r3, #20
 80080c0:	d104      	bne.n	80080cc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xd4>
		this->print((char*) "\tDEBUG LINE REACHED\r\n");
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4811      	ldr	r0, [pc, #68]	; (800810c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x114>)
 80080c8:	4798      	blx	r3
}
 80080ca:	e003      	b.n	80080d4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
		this->print((char*) "\tUNKNOWN\r\n");
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	480f      	ldr	r0, [pc, #60]	; (8008110 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x118>)
 80080d2:	4798      	blx	r3
}
 80080d4:	bf00      	nop
 80080d6:	3708      	adds	r7, #8
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	08021754 	.word	0x08021754
 80080e0:	08021760 	.word	0x08021760
 80080e4:	08021774 	.word	0x08021774
 80080e8:	08021788 	.word	0x08021788
 80080ec:	0802179c 	.word	0x0802179c
 80080f0:	080217ac 	.word	0x080217ac
 80080f4:	080217d0 	.word	0x080217d0
 80080f8:	080217e8 	.word	0x080217e8
 80080fc:	08021800 	.word	0x08021800
 8008100:	08021810 	.word	0x08021810
 8008104:	08021820 	.word	0x08021820
 8008108:	08021830 	.word	0x08021830
 800810c:	08021840 	.word	0x08021840
 8008110:	08021858 	.word	0x08021858

08008114 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>:


/*
 * This function requests the satellite modem's IMEI number.
 */
boolean IridiumSBD::MRT_Iridium_getIMEI(void){
 8008114:	b580      	push	{r7, lr}
 8008116:	b092      	sub	sp, #72	; 0x48
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]

	//Check if we already have the IMEI
	if (strcmp(IMEI,"000000000000000")==0){
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	491f      	ldr	r1, [pc, #124]	; (80081a0 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x8c>)
 8008122:	4618      	mov	r0, r3
 8008124:	f7f8 f864 	bl	80001f0 <strcmp>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d124      	bne.n	8008178 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x64>

		//Reset the IMEI
		IMEI=new char[16];
 800812e:	2010      	movs	r0, #16
 8008130:	f011 fd7f 	bl	8019c32 <_Znaj>
 8008134:	4603      	mov	r3, r0
 8008136:	461a      	mov	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	605a      	str	r2, [r3, #4]

		// Get the IMEI
		this->print((char*) "\r\nIridium: Retrieving the IMEI\r\n");
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4818      	ldr	r0, [pc, #96]	; (80081a4 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x90>)
 8008142:	4798      	blx	r3
		int err = this->getIMEI(IMEI, 16);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	2210      	movs	r2, #16
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7fd ff45 	bl	8005fdc <_ZN10IridiumSBD7getIMEIEPcj>
 8008152:	6478      	str	r0, [r7, #68]	; 0x44
		if (err != ISBD_SUCCESS)
 8008154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00e      	beq.n	8008178 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x64>
		{
			char str[24+sizeof(int)];
		    sprintf(str, "\tgetIMEI failed: error %i\r\n", err);
 800815a:	f107 030c 	add.w	r3, r7, #12
 800815e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008160:	4911      	ldr	r1, [pc, #68]	; (80081a8 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x94>)
 8008162:	4618      	mov	r0, r3
 8008164:	f013 fb12 	bl	801b78c <siprintf>
		    this->print((char*) str);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f107 020c 	add.w	r2, r7, #12
 8008170:	4610      	mov	r0, r2
 8008172:	4798      	blx	r3
		    return false;
 8008174:	2300      	movs	r3, #0
 8008176:	e00e      	b.n	8008196 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x82>
		  }
	}

	char str[28];//IMEI is 15 integers long
	sprintf(str, "\tIMEI is %s\r\n", IMEI);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008180:	490a      	ldr	r1, [pc, #40]	; (80081ac <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x98>)
 8008182:	4618      	mov	r0, r3
 8008184:	f013 fb02 	bl	801b78c <siprintf>
	this->print((char*) str);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008190:	4610      	mov	r0, r2
 8008192:	4798      	blx	r3
	return true;
 8008194:	2301      	movs	r3, #1
}
 8008196:	4618      	mov	r0, r3
 8008198:	3748      	adds	r7, #72	; 0x48
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	08021660 	.word	0x08021660
 80081a4:	08021864 	.word	0x08021864
 80081a8:	08021888 	.word	0x08021888
 80081ac:	080218a4 	.word	0x080218a4

080081b0 <_ZN10IridiumSBD15MRT_Iridium_CSQEv>:
 * This sketch checks the Iridium signal quality and returns the status
 * of the Network Available signal.
 *
 * The boolean param is if you want to check for network availability
 */
int IridiumSBD::MRT_Iridium_CSQ(){
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b09e      	sub	sp, #120	; 0x78
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
	this->print((char*) "\r\nIridium: Checking Signal Quality\r\n");
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	481c      	ldr	r0, [pc, #112]	; (8008230 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x80>)
 80081be:	4798      	blx	r3
	int signalQuality = -1;
 80081c0:	f04f 33ff 	mov.w	r3, #4294967295
 80081c4:	673b      	str	r3, [r7, #112]	; 0x70

	this->MRT_Iridium_getIMEI();
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f7ff ffa4 	bl	8008114 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>

	// Check the signal quality.
	// This returns a number between 0 and 5.
	// 2 or better is preferred.
	int err = this->getSignalQuality(signalQuality);
 80081cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7fd fc8a 	bl	8005aec <_ZN10IridiumSBD16getSignalQualityERi>
 80081d8:	6778      	str	r0, [r7, #116]	; 0x74
	if (err != ISBD_SUCCESS)
 80081da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d015      	beq.n	800820c <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x5c>
	{
	  char str[34+sizeof(int)];
	  sprintf(str, "\tSignalQuality failed: error  %i\r\n", err);
 80081e0:	f107 030c 	add.w	r3, r7, #12
 80081e4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80081e6:	4913      	ldr	r1, [pc, #76]	; (8008234 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x84>)
 80081e8:	4618      	mov	r0, r3
 80081ea:	f013 facf 	bl	801b78c <siprintf>
	  this->print((char*) str);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f107 020c 	add.w	r2, r7, #12
 80081f6:	4610      	mov	r0, r2
 80081f8:	4798      	blx	r3
	  this->MRT_Iridium_ErrorMessage(err);
 80081fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	4619      	mov	r1, r3
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7ff fef9 	bl	8007ff8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
	  return -1;
 8008206:	f04f 33ff 	mov.w	r3, #4294967295
 800820a:	e00d      	b.n	8008228 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x78>
	}

	char str[56+sizeof(int)];
	sprintf(str, "\tOn a scale of 0 to 5, signal quality is currently  %i\r\n", signalQuality);
 800820c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800820e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008212:	4909      	ldr	r1, [pc, #36]	; (8008238 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x88>)
 8008214:	4618      	mov	r0, r3
 8008216:	f013 fab9 	bl	801b78c <siprintf>
	this->print((char*) str);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008222:	4610      	mov	r0, r2
 8008224:	4798      	blx	r3

	return signalQuality;
 8008226:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8008228:	4618      	mov	r0, r3
 800822a:	3778      	adds	r7, #120	; 0x78
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	080218b4 	.word	0x080218b4
 8008234:	080218dc 	.word	0x080218dc
 8008238:	08021900 	.word	0x08021900

0800823c <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv>:


/*
 * This function checks if a network is available
 */
boolean IridiumSBD::MRT_Iridium_NetworkAvailability(void){
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]

	// Check Network Available.
	this->print((char*) "\r\nIridium: Checking if Network is Available:\t");
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	480c      	ldr	r0, [pc, #48]	; (800827c <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x40>)
 800824a:	4798      	blx	r3
	if (!this->checkNetworkAvailable()){
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f7fd fe77 	bl	8005f40 <_ZN10IridiumSBD21checkNetworkAvailableEv>
 8008252:	4603      	mov	r3, r0
 8008254:	f083 0301 	eor.w	r3, r3, #1
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b00      	cmp	r3, #0
 800825c:	d005      	beq.n	800826a <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x2e>
		this->print((char*) "not available.\r\n");
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4807      	ldr	r0, [pc, #28]	; (8008280 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x44>)
 8008264:	4798      	blx	r3
		//diagprint(F("(This might be because the 9603N has not yet aquired the ring channel.)\r\n"));
		return false;
 8008266:	2300      	movs	r3, #0
 8008268:	e004      	b.n	8008274 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x38>
	}

	this->print((char*) "available.\r\n");
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4805      	ldr	r0, [pc, #20]	; (8008284 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x48>)
 8008270:	4798      	blx	r3
	return true;
 8008272:	2301      	movs	r3, #1
}
 8008274:	4618      	mov	r0, r3
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	0802193c 	.word	0x0802193c
 8008280:	0802196c 	.word	0x0802196c
 8008284:	08021980 	.word	0x08021980

08008288 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>:


/*
 * This function requests the time
 */
boolean IridiumSBD::MRT_Iridium_getTime(void){
 8008288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800828a:	b0a1      	sub	sp, #132	; 0x84
 800828c:	af04      	add	r7, sp, #16
 800828e:	6078      	str	r0, [r7, #4]
	this->print((char*) "\r\nIridium: Retrieving time\r\n");
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4820      	ldr	r0, [pc, #128]	; (8008318 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x90>)
 8008296:	4798      	blx	r3
	struct tm t; // struct tm is defined in time.h
	int err = this->getSystemTime(t); // Ask the 9603N for the system time
 8008298:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800829c:	4619      	mov	r1, r3
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f7fd fc70 	bl	8005b84 <_ZN10IridiumSBD13getSystemTimeER2tm>
 80082a4:	66f8      	str	r0, [r7, #108]	; 0x6c
	if (err == ISBD_SUCCESS) // Was it successful?
 80082a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d11c      	bne.n	80082e6 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x5e>
	    {
		char buf[61];
		sprintf(buf, "\r\n\t<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 80082ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		sprintf(buf, "\r\n\t<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 80082ae:	f203 756c 	addw	r5, r3, #1900	; 0x76c
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 80082b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		sprintf(buf, "\r\n\t<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 80082b4:	1c5e      	adds	r6, r3, #1
 80082b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80082ba:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80082bc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80082be:	f107 0408 	add.w	r4, r7, #8
 80082c2:	9003      	str	r0, [sp, #12]
 80082c4:	9102      	str	r1, [sp, #8]
 80082c6:	9201      	str	r2, [sp, #4]
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	4633      	mov	r3, r6
 80082cc:	462a      	mov	r2, r5
 80082ce:	4913      	ldr	r1, [pc, #76]	; (800831c <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x94>)
 80082d0:	4620      	mov	r0, r4
 80082d2:	f013 fa5b 	bl	801b78c <siprintf>
		this->print((char*) buf);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f107 0208 	add.w	r2, r7, #8
 80082de:	4610      	mov	r0, r2
 80082e0:	4798      	blx	r3
		return true;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e013      	b.n	800830e <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x86>
	}

	else if (err == ISBD_NO_NETWORK) // Did it fail because the 9603N has not yet seen the network?
 80082e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082e8:	2b0c      	cmp	r3, #12
 80082ea:	d105      	bne.n	80082f8 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x70>
	     {
		 this->print((char*) "\tNo network detected.\r\n");
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	480b      	ldr	r0, [pc, #44]	; (8008320 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x98>)
 80082f2:	4798      	blx	r3
	   	 return false;
 80082f4:	2300      	movs	r3, #0
 80082f6:	e00a      	b.n	800830e <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x86>
	}

	else
	    {
		this->print((char*) "\tUnexpected Error ");
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4809      	ldr	r0, [pc, #36]	; (8008324 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x9c>)
 80082fe:	4798      	blx	r3
		this->MRT_Iridium_ErrorMessage(err);
 8008300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008302:	b2db      	uxtb	r3, r3
 8008304:	4619      	mov	r1, r3
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7ff fe76 	bl	8007ff8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
		return false;
 800830c:	2300      	movs	r3, #0
	}
}
 800830e:	4618      	mov	r0, r3
 8008310:	3774      	adds	r7, #116	; 0x74
 8008312:	46bd      	mov	sp, r7
 8008314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008316:	bf00      	nop
 8008318:	08021990 	.word	0x08021990
 800831c:	080219b0 	.word	0x080219b0
 8008320:	080219ec 	.word	0x080219ec
 8008324:	08021a04 	.word	0x08021a04

08008328 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc>:
 * This sketch sends a "Hello, world!" message from the satellite modem.
 * If you have activated your account and have credits, this message
 * should arrive at the endpoints (delivery group) you have configured
 * (email address or HTTP POST).
 */
boolean IridiumSBD::MRT_Iridium_sendMessage(char* msg){
 8008328:	b580      	push	{r7, lr}
 800832a:	b090      	sub	sp, #64	; 0x40
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
	int temp = this->atTimeout; //Save default atTimeout
	adjustATTimeout(timeout);
*/

	// Send the message
	this->print((char*) "\r\nIridium: Trying to send the message.  This might take several minutes.\r\n");
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4828      	ldr	r0, [pc, #160]	; (80083d8 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xb0>)
 8008338:	4798      	blx	r3
	int err = this->sendSBDText((const char*) msg);
 800833a:	6839      	ldr	r1, [r7, #0]
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f7fd fbb1 	bl	8005aa4 <_ZN10IridiumSBD11sendSBDTextEPKc>
 8008342:	63f8      	str	r0, [r7, #60]	; 0x3c
	//int err = this->sendSBDText((const char*) "Hello, world!");
	//int err = ISBD_SENDRECEIVE_TIMEOUT;

	if (err != ISBD_SUCCESS){
 8008344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008346:	2b00      	cmp	r3, #0
 8008348:	d01b      	beq.n	8008382 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0x5a>
		char str[50];
		sprintf(str, "\tsendSBDText failed: error -> %i\r\n", err);
 800834a:	f107 0308 	add.w	r3, r7, #8
 800834e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008350:	4922      	ldr	r1, [pc, #136]	; (80083dc <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xb4>)
 8008352:	4618      	mov	r0, r3
 8008354:	f013 fa1a 	bl	801b78c <siprintf>
		this->print((char*) str);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f107 0208 	add.w	r2, r7, #8
 8008360:	4610      	mov	r0, r2
 8008362:	4798      	blx	r3
	    if (err == ISBD_SENDRECEIVE_TIMEOUT){
 8008364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008366:	2b07      	cmp	r3, #7
 8008368:	d103      	bne.n	8008372 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0x4a>
	    	this->print((char*) "\tTry again with a better view of the sky.\r\n");
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	481c      	ldr	r0, [pc, #112]	; (80083e0 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xb8>)
 8008370:	4798      	blx	r3
	    }
	    this->MRT_Iridium_ErrorMessage((uint8_t) err);
 8008372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008374:	b2db      	uxtb	r3, r3
 8008376:	4619      	mov	r1, r3
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f7ff fe3d 	bl	8007ff8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
	    return false;
 800837e:	2300      	movs	r3, #0
 8008380:	e025      	b.n	80083ce <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xa6>
	}

	else{
		this->print((char*) "\tMessage sent\r\n");
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4817      	ldr	r0, [pc, #92]	; (80083e4 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xbc>)
 8008388:	4798      	blx	r3
	}

	// Clear the Mobile Originated message buffer
	this->print((char*) "\tClearing the MO buffer.\r\n");
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4816      	ldr	r0, [pc, #88]	; (80083e8 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xc0>)
 8008390:	4798      	blx	r3
	err = this->clearBuffers(ISBD_CLEAR_MO); // Clear MO buffer
 8008392:	2100      	movs	r1, #0
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f7fd fe03 	bl	8005fa0 <_ZN10IridiumSBD12clearBuffersEi>
 800839a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (err != ISBD_SUCCESS){
 800839c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d014      	beq.n	80083cc <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xa4>
		char str[50];
		sprintf(str, "clearBuffers failed: error -> %i\r\n", err);
 80083a2:	f107 0308 	add.w	r3, r7, #8
 80083a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80083a8:	4910      	ldr	r1, [pc, #64]	; (80083ec <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xc4>)
 80083aa:	4618      	mov	r0, r3
 80083ac:	f013 f9ee 	bl	801b78c <siprintf>
		this->print((char*) str);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f107 0208 	add.w	r2, r7, #8
 80083b8:	4610      	mov	r0, r2
 80083ba:	4798      	blx	r3
		this->MRT_Iridium_ErrorMessage((uint8_t) err);
 80083bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	4619      	mov	r1, r3
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f7ff fe18 	bl	8007ff8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
		return false;
 80083c8:	2300      	movs	r3, #0
 80083ca:	e000      	b.n	80083ce <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xa6>
	}
	return true;
 80083cc:	2301      	movs	r3, #1
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3740      	adds	r7, #64	; 0x40
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	08021a18 	.word	0x08021a18
 80083dc:	08021a64 	.word	0x08021a64
 80083e0:	08021a88 	.word	0x08021a88
 80083e4:	08021ab4 	.word	0x08021ab4
 80083e8:	08021ac4 	.word	0x08021ac4
 80083ec:	08021ae0 	.word	0x08021ae0

080083f0 <_ZN10IridiumSBDC1ER7TwoWireh>:
      if (ringPin != -1)
         pinMode(ringPin, INPUT);
   }
   */

IridiumSBD(TwoWire &wirePort = IRIDIUM_I2C, uint8_t deviceAddress = 0x63)
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	4613      	mov	r3, r2
 80083fc:	71fb      	strb	r3, [r7, #7]
   {
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	66da      	str	r2, [r3, #108]	; 0x6c
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2205      	movs	r2, #5
 8008408:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2202      	movs	r2, #2
 8008418:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2204      	movs	r2, #4
 8008420:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2208      	movs	r2, #8
 8008428:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2210      	movs	r2, #16
 8008430:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2220      	movs	r2, #32
 8008438:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2240      	movs	r2, #64	; 0x40
 8008440:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
      useSerial = false;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	745a      	strb	r2, [r3, #17]
      wireport = &wirePort;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	68ba      	ldr	r2, [r7, #8]
 800844e:	60da      	str	r2, [r3, #12]
      deviceaddress = deviceAddress;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	79fa      	ldrb	r2, [r7, #7]
 8008454:	741a      	strb	r2, [r3, #16]
      sbdixInterval = ISBD_USB_SBDIX_INTERVAL;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	221e      	movs	r2, #30
 800845a:	65da      	str	r2, [r3, #92]	; 0x5c
      atTimeout = ISBD_DEFAULT_AT_TIMEOUT;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	221e      	movs	r2, #30
 8008460:	661a      	str	r2, [r3, #96]	; 0x60
      sendReceiveTimeout = ISBD_DEFAULT_SENDRECEIVE_TIME;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008468:	665a      	str	r2, [r3, #100]	; 0x64
      startupTimeout = ISBD_STARTUP_MAX_TIME;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	22f0      	movs	r2, #240	; 0xf0
 800846e:	669a      	str	r2, [r3, #104]	; 0x68
      remainingMessages = -1;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f04f 32ff 	mov.w	r2, #4294967295
 8008476:	675a      	str	r2, [r3, #116]	; 0x74
      asleep = true;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
      reentrant = false;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2200      	movs	r2, #0
 8008484:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
      sleepPin = -1;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f04f 32ff 	mov.w	r2, #4294967295
 800848e:	67da      	str	r2, [r3, #124]	; 0x7c
      sleepPinConfigured = false;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      ringPin = -1;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f04f 32ff 	mov.w	r2, #4294967295
 800849e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      msstmWorkaroundRequested = false;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
      ringAlertsEnabled = true;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
      ringAsserted = false;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      lastPowerOnTime = 0UL;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      head = SBDRING;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	4a0c      	ldr	r2, [pc, #48]	; (80084f8 <_ZN10IridiumSBDC1ER7TwoWireh+0x108>)
 80084c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      tail = SBDRING;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	4a0a      	ldr	r2, [pc, #40]	; (80084f8 <_ZN10IridiumSBDC1ER7TwoWireh+0x108>)
 80084ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      nextChar = -1;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f04f 32ff 	mov.w	r2, #4294967295
 80084d8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      i2c_ser_buffer_tail = 0;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	655a      	str	r2, [r3, #84]	; 0x54
      i2c_ser_buffer_head = 0;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	659a      	str	r2, [r3, #88]	; 0x58
   }
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	4618      	mov	r0, r3
 80084ec:	3714      	adds	r7, #20
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	08021e84 	.word	0x08021e84

080084fc <MRT_Iridium_Constructor>:

//C structs
struct HIRIDIUM hiridium;


void MRT_Iridium_Constructor(){
 80084fc:	b598      	push	{r3, r4, r7, lr}
 80084fe:	af00      	add	r7, sp, #0
	if (E_T==NULL){
 8008500:	4b08      	ldr	r3, [pc, #32]	; (8008524 <MRT_Iridium_Constructor+0x28>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10b      	bne.n	8008520 <MRT_Iridium_Constructor+0x24>
		E_T = new IridiumSBD();
 8008508:	20a4      	movs	r0, #164	; 0xa4
 800850a:	f011 fb81 	bl	8019c10 <_Znwj>
 800850e:	4603      	mov	r3, r0
 8008510:	461c      	mov	r4, r3
 8008512:	2263      	movs	r2, #99	; 0x63
 8008514:	4904      	ldr	r1, [pc, #16]	; (8008528 <MRT_Iridium_Constructor+0x2c>)
 8008516:	4620      	mov	r0, r4
 8008518:	f7ff ff6a 	bl	80083f0 <_ZN10IridiumSBDC1ER7TwoWireh>
 800851c:	4b01      	ldr	r3, [pc, #4]	; (8008524 <MRT_Iridium_Constructor+0x28>)
 800851e:	601c      	str	r4, [r3, #0]
	}
}
 8008520:	bf00      	nop
 8008522:	bd98      	pop	{r3, r4, r7, pc}
 8008524:	20000600 	.word	0x20000600
 8008528:	20000618 	.word	0x20000618

0800852c <MRT_Iridium_Init>:
		E_T = NULL;
	}
}


struct HIRIDIUM MRT_Iridium_Init(uint8_t timeout, uint8_t i2c_bus, void (*iridium_print)(char*)){
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	607b      	str	r3, [r7, #4]
 8008536:	460b      	mov	r3, r1
 8008538:	72fb      	strb	r3, [r7, #11]
 800853a:	4613      	mov	r3, r2
 800853c:	72bb      	strb	r3, [r7, #10]
	MRT_Iridium_Constructor();
 800853e:	f7ff ffdd 	bl	80084fc <MRT_Iridium_Constructor>
	E_T->MRT_Iridium_setup(timeout, i2c_bus, iridium_print);
 8008542:	4b0d      	ldr	r3, [pc, #52]	; (8008578 <MRT_Iridium_Init+0x4c>)
 8008544:	6818      	ldr	r0, [r3, #0]
 8008546:	7aba      	ldrb	r2, [r7, #10]
 8008548:	7af9      	ldrb	r1, [r7, #11]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f7ff fc6a 	bl	8007e24 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE>
	HIRIDIUM iridium_handler;
	iridium_handler.CSQ = &MRT_Iridium_CSQ;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	4a0a      	ldr	r2, [pc, #40]	; (800857c <MRT_Iridium_Init+0x50>)
 8008554:	60da      	str	r2, [r3, #12]
	iridium_handler.getIMEI = &MRT_Iridium_getIMEI;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	4a09      	ldr	r2, [pc, #36]	; (8008580 <MRT_Iridium_Init+0x54>)
 800855a:	601a      	str	r2, [r3, #0]
	iridium_handler.getNetworkAvailability = &MRT_Iridium_NetworkAvailability;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	4a09      	ldr	r2, [pc, #36]	; (8008584 <MRT_Iridium_Init+0x58>)
 8008560:	609a      	str	r2, [r3, #8]
	iridium_handler.getTime = &MRT_Iridium_getTime;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	4a08      	ldr	r2, [pc, #32]	; (8008588 <MRT_Iridium_Init+0x5c>)
 8008566:	605a      	str	r2, [r3, #4]
	iridium_handler.sendMessage = &MRT_Iridium_sendMessage;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	4a08      	ldr	r2, [pc, #32]	; (800858c <MRT_Iridium_Init+0x60>)
 800856c:	611a      	str	r2, [r3, #16]
	return iridium_handler;
 800856e:	bf00      	nop
}
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	20000600 	.word	0x20000600
 800857c:	080085b5 	.word	0x080085b5
 8008580:	08008591 	.word	0x08008591
 8008584:	080085cd 	.word	0x080085cd
 8008588:	080085f1 	.word	0x080085f1
 800858c:	08008615 	.word	0x08008615

08008590 <MRT_Iridium_getIMEI>:

void MRT_Iridium_ErrorMessage(uint8_t error){
	return E_T->MRT_Iridium_ErrorMessage(error);
}

bool MRT_Iridium_getIMEI(void){
 8008590:	b580      	push	{r7, lr}
 8008592:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_getIMEI();
 8008594:	4b06      	ldr	r3, [pc, #24]	; (80085b0 <MRT_Iridium_getIMEI+0x20>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4618      	mov	r0, r3
 800859a:	f7ff fdbb 	bl	8008114 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	bf14      	ite	ne
 80085a4:	2301      	movne	r3, #1
 80085a6:	2300      	moveq	r3, #0
 80085a8:	b2db      	uxtb	r3, r3
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	20000600 	.word	0x20000600

080085b4 <MRT_Iridium_CSQ>:


int MRT_Iridium_CSQ(){
 80085b4:	b580      	push	{r7, lr}
 80085b6:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_CSQ();
 80085b8:	4b03      	ldr	r3, [pc, #12]	; (80085c8 <MRT_Iridium_CSQ+0x14>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4618      	mov	r0, r3
 80085be:	f7ff fdf7 	bl	80081b0 <_ZN10IridiumSBD15MRT_Iridium_CSQEv>
 80085c2:	4603      	mov	r3, r0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	20000600 	.word	0x20000600

080085cc <MRT_Iridium_NetworkAvailability>:

bool MRT_Iridium_NetworkAvailability(){
 80085cc:	b580      	push	{r7, lr}
 80085ce:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_NetworkAvailability();
 80085d0:	4b06      	ldr	r3, [pc, #24]	; (80085ec <MRT_Iridium_NetworkAvailability+0x20>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7ff fe31 	bl	800823c <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	bf14      	ite	ne
 80085e0:	2301      	movne	r3, #1
 80085e2:	2300      	moveq	r3, #0
 80085e4:	b2db      	uxtb	r3, r3
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	20000600 	.word	0x20000600

080085f0 <MRT_Iridium_getTime>:


bool MRT_Iridium_getTime(void){
 80085f0:	b580      	push	{r7, lr}
 80085f2:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_getTime();
 80085f4:	4b06      	ldr	r3, [pc, #24]	; (8008610 <MRT_Iridium_getTime+0x20>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7ff fe45 	bl	8008288 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	bf14      	ite	ne
 8008604:	2301      	movne	r3, #1
 8008606:	2300      	moveq	r3, #0
 8008608:	b2db      	uxtb	r3, r3
}
 800860a:	4618      	mov	r0, r3
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	20000600 	.word	0x20000600

08008614 <MRT_Iridium_sendMessage>:

bool MRT_Iridium_sendMessage(char* msg){
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
	return E_T->MRT_Iridium_sendMessage(msg);
 800861c:	4b07      	ldr	r3, [pc, #28]	; (800863c <MRT_Iridium_sendMessage+0x28>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	6879      	ldr	r1, [r7, #4]
 8008622:	4618      	mov	r0, r3
 8008624:	f7ff fe80 	bl	8008328 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	bf14      	ite	ne
 800862e:	2301      	movne	r3, #1
 8008630:	2300      	moveq	r3, #0
 8008632:	b2db      	uxtb	r3, r3
}
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	20000600 	.word	0x20000600

08008640 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8008640:	b590      	push	{r4, r7, lr}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d101      	bne.n	8008654 <_ZN5Print5writeEPKc+0x14>
 8008650:	2300      	movs	r3, #0
 8008652:	e00d      	b.n	8008670 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	3304      	adds	r3, #4
 800865a:	681c      	ldr	r4, [r3, #0]
 800865c:	6838      	ldr	r0, [r7, #0]
 800865e:	f7f7 fdd1 	bl	8000204 <strlen>
 8008662:	4603      	mov	r3, r0
 8008664:	461a      	mov	r2, r3
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	47a0      	blx	r4
 800866c:	4603      	mov	r3, r0
 800866e:	bf00      	nop
    }
 8008670:	4618      	mov	r0, r3
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	bd90      	pop	{r4, r7, pc}

08008678 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b086      	sub	sp, #24
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8008684:	2300      	movs	r3, #0
 8008686:	617b      	str	r3, [r7, #20]
  while (size--) {
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	1e5a      	subs	r2, r3, #1
 800868c:	607a      	str	r2, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	bf14      	ite	ne
 8008692:	2301      	movne	r3, #1
 8008694:	2300      	moveq	r3, #0
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b00      	cmp	r3, #0
 800869a:	d00e      	beq.n	80086ba <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	1c59      	adds	r1, r3, #1
 80086a6:	60b9      	str	r1, [r7, #8]
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	4619      	mov	r1, r3
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	4790      	blx	r2
 80086b0:	4602      	mov	r2, r0
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	4413      	add	r3, r2
 80086b6:	617b      	str	r3, [r7, #20]
  while (size--) {
 80086b8:	e7e6      	b.n	8008688 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 80086ba:	697b      	ldr	r3, [r7, #20]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3718      	adds	r7, #24
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 80086ce:	6839      	ldr	r1, [r7, #0]
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 f805 	bl	80086e0 <_ZN5Print5printEPKc>
 80086d6:	4603      	mov	r3, r0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  return write(str);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f7ff ffa7 	bl	8008640 <_ZN5Print5writeEPKc>
 80086f2:	4603      	mov	r3, r0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	460b      	mov	r3, r1
 8008706:	70fb      	strb	r3, [r7, #3]
  return write(c);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	78fa      	ldrb	r2, [r7, #3]
 8008710:	4611      	mov	r1, r2
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	4798      	blx	r3
 8008716:	4603      	mov	r3, r0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	68b9      	ldr	r1, [r7, #8]
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f000 f805 	bl	8008740 <_ZN5Print5printEli>
 8008736:	4603      	mov	r3, r0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b086      	sub	sp, #24
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d109      	bne.n	8008766 <_ZN5Print5printEli+0x26>
    return write(n);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68ba      	ldr	r2, [r7, #8]
 800875a:	b2d2      	uxtb	r2, r2
 800875c:	4611      	mov	r1, r2
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	4798      	blx	r3
 8008762:	4603      	mov	r3, r0
 8008764:	e029      	b.n	80087ba <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2b0a      	cmp	r3, #10
 800876a:	d11d      	bne.n	80087a8 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	2b00      	cmp	r3, #0
 8008770:	da12      	bge.n	8008798 <_ZN5Print5printEli+0x58>
      int t = print('-');
 8008772:	212d      	movs	r1, #45	; 0x2d
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f7ff ffc1 	bl	80086fc <_ZN5Print5printEc>
 800877a:	4603      	mov	r3, r0
 800877c:	617b      	str	r3, [r7, #20]
      n = -n;
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	425b      	negs	r3, r3
 8008782:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	220a      	movs	r2, #10
 8008788:	4619      	mov	r1, r3
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f000 f819 	bl	80087c2 <_ZN5Print11printNumberEmh>
 8008790:	4602      	mov	r2, r0
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	4413      	add	r3, r2
 8008796:	e010      	b.n	80087ba <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	220a      	movs	r2, #10
 800879c:	4619      	mov	r1, r3
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 f80f 	bl	80087c2 <_ZN5Print11printNumberEmh>
 80087a4:	4603      	mov	r3, r0
 80087a6:	e008      	b.n	80087ba <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	b2d2      	uxtb	r2, r2
 80087ae:	4619      	mov	r1, r3
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f000 f806 	bl	80087c2 <_ZN5Print11printNumberEmh>
 80087b6:	4603      	mov	r3, r0
 80087b8:	bf00      	nop
  }
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3718      	adds	r7, #24
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b090      	sub	sp, #64	; 0x40
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	60f8      	str	r0, [r7, #12]
 80087ca:	60b9      	str	r1, [r7, #8]
 80087cc:	4613      	mov	r3, r2
 80087ce:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 80087d0:	f107 0314 	add.w	r3, r7, #20
 80087d4:	3320      	adds	r3, #32
 80087d6:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 80087d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087da:	2200      	movs	r2, #0
 80087dc:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80087de:	79fb      	ldrb	r3, [r7, #7]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d801      	bhi.n	80087e8 <_ZN5Print11printNumberEmh+0x26>
 80087e4:	230a      	movs	r3, #10
 80087e6:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 80087ec:	79fb      	ldrb	r3, [r7, #7]
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087f4:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 80087f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f8:	b2da      	uxtb	r2, r3
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	79f9      	ldrb	r1, [r7, #7]
 8008800:	fb11 f303 	smulbb	r3, r1, r3
 8008804:	b2db      	uxtb	r3, r3
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 800880c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008810:	2b09      	cmp	r3, #9
 8008812:	d804      	bhi.n	800881e <_ZN5Print11printNumberEmh+0x5c>
 8008814:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008818:	3330      	adds	r3, #48	; 0x30
 800881a:	b2db      	uxtb	r3, r3
 800881c:	e003      	b.n	8008826 <_ZN5Print11printNumberEmh+0x64>
 800881e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008822:	3337      	adds	r3, #55	; 0x37
 8008824:	b2db      	uxtb	r3, r3
 8008826:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008828:	3a01      	subs	r2, #1
 800882a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800882c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800882e:	7013      	strb	r3, [r2, #0]
  } while(n);
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d000      	beq.n	8008838 <_ZN5Print11printNumberEmh+0x76>
  do {
 8008836:	e7d7      	b.n	80087e8 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8008838:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800883a:	68f8      	ldr	r0, [r7, #12]
 800883c:	f7ff ff00 	bl	8008640 <_ZN5Print5writeEPKc>
 8008840:	4603      	mov	r3, r0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3740      	adds	r7, #64	; 0x40
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
	...

0800884c <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	4a06      	ldr	r2, [pc, #24]	; (8008870 <_ZN5PrintC1Ev+0x24>)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	601a      	str	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	605a      	str	r2, [r3, #4]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4618      	mov	r0, r3
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	08021e98 	.word	0x08021e98

08008874 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4618      	mov	r0, r3
 8008880:	f7ff ffe4 	bl	800884c <_ZN5PrintC1Ev>
 8008884:	4a05      	ldr	r2, [pc, #20]	; (800889c <_ZN6StreamC1Ev+0x28>)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	601a      	str	r2, [r3, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008890:	609a      	str	r2, [r3, #8]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4618      	mov	r0, r3
 8008896:	3708      	adds	r7, #8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	08021ec8 	.word	0x08021ec8

080088a0 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7ff ffe1 	bl	8008874 <_ZN6StreamC1Ev>
 80088b2:	4a16      	ldr	r2, [pc, #88]	; (800890c <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	3390      	adds	r3, #144	; 0x90
 80088c2:	2220      	movs	r2, #32
 80088c4:	2100      	movs	r1, #0
 80088c6:	4618      	mov	r0, r3
 80088c8:	f011 fc64 	bl	801a194 <memset>
  rxBufferIndex = 0;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4618      	mov	r0, r3
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	08021ea8 	.word	0x08021ea8

08008910 <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af02      	add	r7, sp, #8
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	4608      	mov	r0, r1
 800891a:	4611      	mov	r1, r2
 800891c:	461a      	mov	r2, r3
 800891e:	4603      	mov	r3, r0
 8008920:	70fb      	strb	r3, [r7, #3]
 8008922:	460b      	mov	r3, r1
 8008924:	70bb      	strb	r3, [r7, #2]
 8008926:	4613      	mov	r3, r2
 8008928:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fc24 	bl	8009178 <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 8008930:	78bb      	ldrb	r3, [r7, #2]
 8008932:	2b20      	cmp	r3, #32
 8008934:	d901      	bls.n	800893a <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 8008936:	2320      	movs	r3, #32
 8008938:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 800893a:	78fb      	ldrb	r3, [r7, #3]
 800893c:	005b      	lsls	r3, r3, #1
 800893e:	b2d9      	uxtb	r1, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8008946:	78b8      	ldrb	r0, [r7, #2]
 8008948:	787b      	ldrb	r3, [r7, #1]
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	4603      	mov	r3, r0
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f9cf 	bl	8008cf2 <_ZN7TwoWire15i2c_master_readEhPchh>
 8008954:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	2b00      	cmp	r3, #0
 800895a:	da02      	bge.n	8008962 <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 800895c:	2300      	movs	r3, #0
 800895e:	73fb      	strb	r3, [r7, #15]
 8008960:	e001      	b.n	8008966 <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	7bfa      	ldrb	r2, [r7, #15]
 8008972:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fbcc 	bl	8009114 <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 800897c:	7bfb      	ldrb	r3, [r7, #15]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b082      	sub	sp, #8
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
 800898e:	460b      	mov	r3, r1
 8008990:	70fb      	strb	r3, [r7, #3]
 8008992:	4613      	mov	r3, r2
 8008994:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 8008996:	78ba      	ldrb	r2, [r7, #2]
 8008998:	78f9      	ldrb	r1, [r7, #3]
 800899a:	2301      	movs	r3, #1
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f7ff ffb7 	bl	8008910 <_ZN7TwoWire11requestFromEhhh>
 80089a2:	4603      	mov	r3, r0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	78fa      	ldrb	r2, [r7, #3]
 80089c4:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80089d6:	bf00      	nop
 80089d8:	370c      	adds	r7, #12
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b086      	sub	sp, #24
 80089e6:	af02      	add	r7, sp, #8
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	460b      	mov	r3, r1
 80089ec:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 fbc2 	bl	8009178 <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	7c1b      	ldrb	r3, [r3, #16]
 80089f8:	0059      	lsls	r1, r3, #1
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f103 0211 	add.w	r2, r3, #17
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008a06:	4618      	mov	r0, r3
 8008a08:	78fb      	ldrb	r3, [r7, #3]
 8008a0a:	9300      	str	r3, [sp, #0]
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fa00 	bl	8008e14 <_ZN7TwoWire16i2c_master_writeEiPKcii>
 8008a14:	4603      	mov	r3, r0
 8008a16:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fb6f 	bl	8009114 <_ZN7TwoWire15enableInterruptEv>

  return ret;
 8008a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 8008a48:	2101      	movs	r1, #1
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7ff ffc9 	bl	80089e2 <_ZN7TwoWire15endTransmissionEh>
 8008a50:	4603      	mov	r3, r0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b082      	sub	sp, #8
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	460b      	mov	r3, r1
 8008a64:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d01d      	beq.n	8008aac <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008a76:	2b1f      	cmp	r3, #31
 8008a78:	d901      	bls.n	8008a7e <_ZN7TwoWire5writeEh+0x24>
      return 0;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	e028      	b.n	8008ad0 <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008a84:	4619      	mov	r1, r3
 8008a86:	78fa      	ldrb	r2, [r7, #3]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	440b      	add	r3, r1
 8008a8c:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008a94:	3301      	adds	r3, #1
 8008a96:	b2da      	uxtb	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8008aaa:	e010      	b.n	8008ace <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fb63 	bl	8009178 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 8008ab2:	1cfb      	adds	r3, r7, #3
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fa95 	bl	8008fe8 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 fb28 	bl	8009114 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	333c      	adds	r3, #60	; 0x3c
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f001 fe3f 	bl	800a74c <HAL_I2C_EnableListen_IT>
  }
  return 1;
 8008ace:	2301      	movs	r3, #1
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b086      	sub	sp, #24
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	607a      	str	r2, [r7, #4]
  if(transmitting){
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d013      	beq.n	8008b16 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 8008aee:	2300      	movs	r3, #0
 8008af0:	617b      	str	r3, [r7, #20]
 8008af2:	697a      	ldr	r2, [r7, #20]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d21e      	bcs.n	8008b38 <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68b9      	ldr	r1, [r7, #8]
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	440a      	add	r2, r1
 8008b06:	7812      	ldrb	r2, [r2, #0]
 8008b08:	4611      	mov	r1, r2
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	3301      	adds	r3, #1
 8008b12:	617b      	str	r3, [r7, #20]
 8008b14:	e7ed      	b.n	8008af2 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f000 fb2e 	bl	8009178 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	68b9      	ldr	r1, [r7, #8]
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 fa60 	bl	8008fe8 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8008b28:	68f8      	ldr	r0, [r7, #12]
 8008b2a:	f000 faf3 	bl	8009114 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	333c      	adds	r3, #60	; 0x3c
 8008b32:	4618      	mov	r0, r3
 8008b34:	f001 fe0a 	bl	800a74c <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 8008b38:	687b      	ldr	r3, [r7, #4]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3718      	adds	r7, #24
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 8008b42:	b480      	push	{r7}
 8008b44:	b083      	sub	sp, #12
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	461a      	mov	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	1ad3      	subs	r3, r2, r3
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	370c      	adds	r7, #12
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr

08008b6a <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b085      	sub	sp, #20
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
  int value = -1;
 8008b72:	f04f 33ff 	mov.w	r3, #4294967295
 8008b76:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008b7e:	b2da      	uxtb	r2, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	bf34      	ite	cc
 8008b8c:	2301      	movcc	r3, #1
 8008b8e:	2300      	movcs	r3, #0
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d012      	beq.n	8008bbc <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008ba8:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	b2da      	uxtb	r2, r3
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3714      	adds	r7, #20
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 8008bca:	b480      	push	{r7}
 8008bcc:	b085      	sub	sp, #20
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
  int value = -1;
 8008bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8008bd6:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008bde:	b2da      	uxtb	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	429a      	cmp	r2, r3
 8008bea:	bf34      	ite	cc
 8008bec:	2301      	movcc	r3, #1
 8008bee:	2300      	movcs	r3, #0
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d009      	beq.n	8008c0a <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	461a      	mov	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4413      	add	r3, r2
 8008c04:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008c08:	60fb      	str	r3, [r7, #12]
  }

  return value;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c38:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c42:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 8008c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c48:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c56:	bf0c      	ite	eq
 8008c58:	2301      	moveq	r3, #1
 8008c5a:	2300      	movne	r3, #0
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00b      	beq.n	8008c7a <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	1e5a      	subs	r2, r3, #1
 8008c66:	60fa      	str	r2, [r7, #12]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	bf0c      	ite	eq
 8008c6c:	2301      	moveq	r3, #1
 8008c6e:	2300      	movne	r3, #0
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d0e9      	beq.n	8008c4a <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e021      	b.n	8008cbe <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 8008c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c8a:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c90:	695b      	ldr	r3, [r3, #20]
 8008c92:	f003 0301 	and.w	r3, r3, #1
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	bf14      	ite	ne
 8008c9a:	2301      	movne	r3, #1
 8008c9c:	2300      	moveq	r3, #0
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00b      	beq.n	8008cbc <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	1e5a      	subs	r2, r3, #1
 8008ca8:	60fa      	str	r2, [r7, #12]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	bf0c      	ite	eq
 8008cae:	2301      	moveq	r3, #1
 8008cb0:	2300      	movne	r3, #0
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d0e9      	beq.n	8008c8c <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e000      	b.n	8008cbe <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3714      	adds	r7, #20
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr

08008cca <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 8008cca:	b480      	push	{r7}
 8008ccc:	b085      	sub	sp, #20
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cd6:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	601a      	str	r2, [r3, #0]

    return 0;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3714      	adds	r7, #20
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr

08008cf2 <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b08a      	sub	sp, #40	; 0x28
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	60f8      	str	r0, [r7, #12]
 8008cfa:	607a      	str	r2, [r7, #4]
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	460b      	mov	r3, r1
 8008d00:	72fb      	strb	r3, [r7, #11]
 8008d02:	4613      	mov	r3, r2
 8008d04:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d0a:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f7ff ff8d 	bl	8008c2c <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 8008d12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d16:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d1c:	695b      	ldr	r3, [r3, #20]
 8008d1e:	f003 0301 	and.w	r3, r3, #1
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	bf14      	ite	ne
 8008d26:	2301      	movne	r3, #1
 8008d28:	2300      	moveq	r3, #0
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d008      	beq.n	8008d42 <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 8008d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d32:	3b01      	subs	r3, #1
 8008d34:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8008d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d1ed      	bne.n	8008d18 <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 8008d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d40:	e064      	b.n	8008e0c <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 8008d42:	7afb      	ldrb	r3, [r7, #11]
 8008d44:	f043 0301 	orr.w	r3, r3, #1
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 8008d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d54:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d5a:	695b      	ldr	r3, [r3, #20]
 8008d5c:	f003 0302 	and.w	r3, r3, #2
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	bf14      	ite	ne
 8008d64:	2301      	movne	r3, #1
 8008d66:	2300      	moveq	r3, #0
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d008      	beq.n	8008d80 <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 8008d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d70:	3b01      	subs	r3, #1
 8008d72:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1ed      	bne.n	8008d56 <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 8008d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d7e:	e045      	b.n	8008e0c <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8008d80:	2300      	movs	r3, #0
 8008d82:	613b      	str	r3, [r7, #16]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d88:	695b      	ldr	r3, [r3, #20]
 8008d8a:	613b      	str	r3, [r7, #16]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d90:	699b      	ldr	r3, [r3, #24]
 8008d92:	613b      	str	r3, [r7, #16]
 8008d94:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 8008d96:	2300      	movs	r3, #0
 8008d98:	623b      	str	r3, [r7, #32]
 8008d9a:	7abb      	ldrb	r3, [r7, #10]
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	6a3a      	ldr	r2, [r7, #32]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	da17      	bge.n	8008dd4 <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 8008da4:	f107 0314 	add.w	r3, r7, #20
 8008da8:	2200      	movs	r2, #0
 8008daa:	4619      	mov	r1, r3
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f000 f8a4 	bl	8008efa <_ZN7TwoWire20i2c_master_byte_readEPii>
 8008db2:	61b8      	str	r0, [r7, #24]
        if(ret)
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d002      	beq.n	8008dc0 <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 8008dba:	f04f 33ff 	mov.w	r3, #4294967295
 8008dbe:	e025      	b.n	8008e0c <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 8008dc0:	6979      	ldr	r1, [r7, #20]
 8008dc2:	6a3b      	ldr	r3, [r7, #32]
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	b2ca      	uxtb	r2, r1
 8008dca:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 8008dcc:	6a3b      	ldr	r3, [r7, #32]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	623b      	str	r3, [r7, #32]
 8008dd2:	e7e2      	b.n	8008d9a <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 8008dd4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d002      	beq.n	8008de2 <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	f7ff ff74 	bl	8008cca <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 8008de2:	f107 0314 	add.w	r3, r7, #20
 8008de6:	2201      	movs	r2, #1
 8008de8:	4619      	mov	r1, r3
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f000 f885 	bl	8008efa <_ZN7TwoWire20i2c_master_byte_readEPii>
 8008df0:	61b8      	str	r0, [r7, #24]
    if(ret)
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d002      	beq.n	8008dfe <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 8008df8:	f04f 33ff 	mov.w	r3, #4294967295
 8008dfc:	e006      	b.n	8008e0c <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 8008dfe:	6979      	ldr	r1, [r7, #20]
 8008e00:	6a3b      	ldr	r3, [r7, #32]
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	4413      	add	r3, r2
 8008e06:	b2ca      	uxtb	r2, r1
 8008e08:	701a      	strb	r2, [r3, #0]

    return length;
 8008e0a:	7abb      	ldrb	r3, [r7, #10]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3728      	adds	r7, #40	; 0x28
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b088      	sub	sp, #32
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
 8008e20:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e26:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f7ff feff 	bl	8008c2c <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 8008e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e32:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	f003 0301 	and.w	r3, r3, #1
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	bf14      	ite	ne
 8008e42:	2301      	movne	r3, #1
 8008e44:	2300      	moveq	r3, #0
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d007      	beq.n	8008e5c <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1ed      	bne.n	8008e34 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 8008e58:	2304      	movs	r3, #4
 8008e5a:	e04a      	b.n	8008ef2 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 8008e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e6c:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e72:	695b      	ldr	r3, [r3, #20]
 8008e74:	f003 0302 	and.w	r3, r3, #2
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	bf14      	ite	ne
 8008e7c:	2301      	movne	r3, #1
 8008e7e:	2300      	moveq	r3, #0
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d007      	beq.n	8008e96 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1ed      	bne.n	8008e6e <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 8008e92:	2302      	movs	r3, #2
 8008e94:	e02d      	b.n	8008ef2 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8008e96:	2300      	movs	r3, #0
 8008e98:	613b      	str	r3, [r7, #16]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e9e:	695b      	ldr	r3, [r3, #20]
 8008ea0:	613b      	str	r3, [r7, #16]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	613b      	str	r3, [r7, #16]
 8008eaa:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 8008eac:	2300      	movs	r3, #0
 8008eae:	61bb      	str	r3, [r7, #24]
 8008eb0:	69ba      	ldr	r2, [r7, #24]
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	da15      	bge.n	8008ee4 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f000 f85a 	bl	8008f7c <_ZN7TwoWire21i2c_master_byte_writeEi>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	bf14      	ite	ne
 8008ece:	2301      	movne	r3, #1
 8008ed0:	2300      	moveq	r3, #0
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d001      	beq.n	8008edc <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 8008ed8:	2303      	movs	r3, #3
 8008eda:	e00a      	b.n	8008ef2 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	61bb      	str	r3, [r7, #24]
 8008ee2:	e7e5      	b.n	8008eb0 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 8008ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d002      	beq.n	8008ef0 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f7ff feed 	bl	8008cca <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3720      	adds	r7, #32
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 8008efa:	b480      	push	{r7}
 8008efc:	b087      	sub	sp, #28
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	60f8      	str	r0, [r7, #12]
 8008f02:	60b9      	str	r1, [r7, #8]
 8008f04:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f0a:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d006      	beq.n	8008f20 <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	601a      	str	r2, [r3, #0]
 8008f1e:	e005      	b.n	8008f2c <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 8008f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f30:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f36:	695b      	ldr	r3, [r3, #20]
 8008f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f3c:	2b40      	cmp	r3, #64	; 0x40
 8008f3e:	bf14      	ite	ne
 8008f40:	2301      	movne	r3, #1
 8008f42:	2300      	moveq	r3, #0
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00c      	beq.n	8008f64 <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	1e5a      	subs	r2, r3, #1
 8008f4e:	617a      	str	r2, [r7, #20]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	bf0c      	ite	eq
 8008f54:	2301      	moveq	r3, #1
 8008f56:	2300      	movne	r3, #0
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d0e9      	beq.n	8008f32 <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 8008f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f62:	e005      	b.n	8008f70 <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	461a      	mov	r2, r3
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	601a      	str	r2, [r3, #0]

    return 0;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	371c      	adds	r7, #28
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b085      	sub	sp, #20
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f8a:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	461a      	mov	r2, r3
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 8008f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f9a:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fa6:	2b80      	cmp	r3, #128	; 0x80
 8008fa8:	d008      	beq.n	8008fbc <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fae:	695b      	ldr	r3, [r3, #20]
 8008fb0:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8008fb4:	2b04      	cmp	r3, #4
 8008fb6:	d001      	beq.n	8008fbc <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e000      	b.n	8008fbe <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00b      	beq.n	8008fda <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	1e5a      	subs	r2, r3, #1
 8008fc6:	60fa      	str	r2, [r7, #12]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	bf0c      	ite	eq
 8008fcc:	2301      	moveq	r3, #1
 8008fce:	2300      	movne	r3, #0
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d0e2      	beq.n	8008f9c <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	e000      	b.n	8008fdc <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 8008fda:	2301      	movs	r3, #1
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3714      	adds	r7, #20
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b089      	sub	sp, #36	; 0x24
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ffc:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	dd41      	ble.n	8009088 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 8009004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009008:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800900e:	695b      	ldr	r3, [r3, #20]
 8009010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009014:	2b80      	cmp	r3, #128	; 0x80
 8009016:	bf14      	ite	ne
 8009018:	2301      	movne	r3, #1
 800901a:	2300      	moveq	r3, #0
 800901c:	b2db      	uxtb	r3, r3
 800901e:	2b00      	cmp	r3, #0
 8009020:	d008      	beq.n	8009034 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	3b01      	subs	r3, #1
 8009026:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1ed      	bne.n	800900a <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 800902e:	f04f 33ff 	mov.w	r3, #4294967295
 8009032:	e068      	b.n	8009106 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	1c5a      	adds	r2, r3, #1
 8009038:	60ba      	str	r2, [r7, #8]
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	461a      	mov	r2, r3
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	611a      	str	r2, [r3, #16]
        length--;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	3b01      	subs	r3, #1
 8009046:	607b      	str	r3, [r7, #4]
        size++;
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	3301      	adds	r3, #1
 800904c:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009052:	695b      	ldr	r3, [r3, #20]
 8009054:	f003 0304 	and.w	r3, r3, #4
 8009058:	2b04      	cmp	r3, #4
 800905a:	d104      	bne.n	8009066 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d001      	beq.n	8009066 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8009062:	2301      	movs	r3, #1
 8009064:	e000      	b.n	8009068 <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 8009066:	2300      	movs	r3, #0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d0c8      	beq.n	8008ffe <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	1c5a      	adds	r2, r3, #1
 8009070:	60ba      	str	r2, [r7, #8]
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	461a      	mov	r2, r3
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	611a      	str	r2, [r3, #16]
            length--;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	3b01      	subs	r3, #1
 800907e:	607b      	str	r3, [r7, #4]
            size++;
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	3301      	adds	r3, #1
 8009084:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 8009086:	e7ba      	b.n	8008ffe <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 8009088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800908c:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009092:	695b      	ldr	r3, [r3, #20]
 8009094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800909c:	bf14      	ite	ne
 800909e:	2301      	movne	r3, #1
 80090a0:	2300      	moveq	r3, #0
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d008      	beq.n	80090ba <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	3b01      	subs	r3, #1
 80090ac:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1ec      	bne.n	800908e <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 80090b4:	f04f 33ff 	mov.w	r3, #4294967295
 80090b8:	e025      	b.n	8009106 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80090c2:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 80090c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090c8:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ce:	699b      	ldr	r3, [r3, #24]
 80090d0:	f003 0302 	and.w	r3, r3, #2
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	bf0c      	ite	eq
 80090d8:	2301      	moveq	r3, #1
 80090da:	2300      	movne	r3, #0
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d008      	beq.n	80090f4 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	3b01      	subs	r3, #1
 80090e6:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1ed      	bne.n	80090ca <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 80090ee:	f04f 33ff 	mov.w	r3, #4294967295
 80090f2:	e008      	b.n	8009106 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2220      	movs	r2, #32
 80090f8:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2200      	movs	r2, #0
 8009100:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 8009104:	69bb      	ldr	r3, [r7, #24]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3724      	adds	r7, #36	; 0x24
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr
	...

08009114 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009120:	4a12      	ldr	r2, [pc, #72]	; (800916c <_ZN7TwoWire15enableInterruptEv+0x58>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d106      	bne.n	8009134 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8009126:	2049      	movs	r0, #73	; 0x49
 8009128:	f000 fc9a 	bl	8009a60 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800912c:	2048      	movs	r0, #72	; 0x48
 800912e:	f000 fc97 	bl	8009a60 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8009132:	e016      	b.n	8009162 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009138:	4a0d      	ldr	r2, [pc, #52]	; (8009170 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d106      	bne.n	800914c <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800913e:	2022      	movs	r0, #34	; 0x22
 8009140:	f000 fc8e 	bl	8009a60 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8009144:	2021      	movs	r0, #33	; 0x21
 8009146:	f000 fc8b 	bl	8009a60 <HAL_NVIC_EnableIRQ>
}
 800914a:	e00a      	b.n	8009162 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009150:	4a08      	ldr	r2, [pc, #32]	; (8009174 <_ZN7TwoWire15enableInterruptEv+0x60>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d105      	bne.n	8009162 <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8009156:	2020      	movs	r0, #32
 8009158:	f000 fc82 	bl	8009a60 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800915c:	201f      	movs	r0, #31
 800915e:	f000 fc7f 	bl	8009a60 <HAL_NVIC_EnableIRQ>
}
 8009162:	bf00      	nop
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	40005c00 	.word	0x40005c00
 8009170:	40005800 	.word	0x40005800
 8009174:	40005400 	.word	0x40005400

08009178 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009184:	4a12      	ldr	r2, [pc, #72]	; (80091d0 <_ZN7TwoWire16disableInterruptEv+0x58>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d106      	bne.n	8009198 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 800918a:	2049      	movs	r0, #73	; 0x49
 800918c:	f000 fc76 	bl	8009a7c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8009190:	2048      	movs	r0, #72	; 0x48
 8009192:	f000 fc73 	bl	8009a7c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8009196:	e016      	b.n	80091c6 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800919c:	4a0d      	ldr	r2, [pc, #52]	; (80091d4 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d106      	bne.n	80091b0 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 80091a2:	2022      	movs	r0, #34	; 0x22
 80091a4:	f000 fc6a 	bl	8009a7c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 80091a8:	2021      	movs	r0, #33	; 0x21
 80091aa:	f000 fc67 	bl	8009a7c <HAL_NVIC_DisableIRQ>
}
 80091ae:	e00a      	b.n	80091c6 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091b4:	4a08      	ldr	r2, [pc, #32]	; (80091d8 <_ZN7TwoWire16disableInterruptEv+0x60>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d105      	bne.n	80091c6 <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 80091ba:	2020      	movs	r0, #32
 80091bc:	f000 fc5e 	bl	8009a7c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80091c0:	201f      	movs	r0, #31
 80091c2:	f000 fc5b 	bl	8009a7c <HAL_NVIC_DisableIRQ>
}
 80091c6:	bf00      	nop
 80091c8:	3708      	adds	r7, #8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	40005c00 	.word	0x40005c00
 80091d4:	40005800 	.word	0x40005800
 80091d8:	40005400 	.word	0x40005400

080091dc <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d110      	bne.n	800920e <_Z41__static_initialization_and_destruction_0ii+0x32>
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d10b      	bne.n	800920e <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 80091f6:	4908      	ldr	r1, [pc, #32]	; (8009218 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80091f8:	4808      	ldr	r0, [pc, #32]	; (800921c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80091fa:	f7ff fb51 	bl	80088a0 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 80091fe:	4908      	ldr	r1, [pc, #32]	; (8009220 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8009200:	4808      	ldr	r0, [pc, #32]	; (8009224 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8009202:	f7ff fb4d 	bl	80088a0 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 8009206:	4908      	ldr	r1, [pc, #32]	; (8009228 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8009208:	4808      	ldr	r0, [pc, #32]	; (800922c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800920a:	f7ff fb49 	bl	80088a0 <_ZN7TwoWireC1EP11I2C_TypeDef>
 800920e:	bf00      	nop
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	40005400 	.word	0x40005400
 800921c:	20000618 	.word	0x20000618
 8009220:	40005800 	.word	0x40005800
 8009224:	200006d0 	.word	0x200006d0
 8009228:	40005c00 	.word	0x40005c00
 800922c:	20000788 	.word	0x20000788

08009230 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8009230:	b580      	push	{r7, lr}
 8009232:	af00      	add	r7, sp, #0
 8009234:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009238:	2001      	movs	r0, #1
 800923a:	f7ff ffcf 	bl	80091dc <_Z41__static_initialization_and_destruction_0ii>
 800923e:	bd80      	pop	{r7, pc}

08009240 <MRT_radio_tx>:
#include <iwdg.h>
#include <string.h>
#include <sx126x.h>


void MRT_radio_tx(char* buffer){
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
			//sx126x_set_tx(); TODO
			TxProtocol(buffer, strlen(buffer));
		}
	#endif

	print((char*) "Radio sending:\t");
 8009248:	4804      	ldr	r0, [pc, #16]	; (800925c <MRT_radio_tx+0x1c>)
 800924a:	f7f7 ff5d 	bl	8001108 <print>
	println(buffer);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f7f7 ff3c 	bl	80010cc <println>
}
 8009254:	bf00      	nop
 8009256:	3708      	adds	r7, #8
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	08021c94 	.word	0x08021c94

08009260 <MRT_radio_Init>:
	println(buffer);
}



void MRT_radio_Init(void){
 8009260:	b580      	push	{r7, lr}
 8009262:	af00      	add	r7, sp, #0
	println("\r\nRadio Init");
 8009264:	4803      	ldr	r0, [pc, #12]	; (8009274 <MRT_radio_Init+0x14>)
 8009266:	f7f7 ff31 	bl	80010cc <println>
	set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
	set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
	Tx_setup();
	println("OK");
	#else
	println("\tNo radio currently in use");
 800926a:	4803      	ldr	r0, [pc, #12]	; (8009278 <MRT_radio_Init+0x18>)
 800926c:	f7f7 ff2e 	bl	80010cc <println>
	#endif
}
 8009270:	bf00      	nop
 8009272:	bd80      	pop	{r7, pc}
 8009274:	08021cb8 	.word	0x08021cb8
 8009278:	08021cc8 	.word	0x08021cc8

0800927c <MRT_TELEMETRY_Init>:


void MRT_TELEMETRY_Init(void){
 800927c:	b5b0      	push	{r4, r5, r7, lr}
 800927e:	b086      	sub	sp, #24
 8009280:	af00      	add	r7, sp, #0

	MRT_radio_Init();
 8009282:	f7ff ffed 	bl	8009260 <MRT_radio_Init>

	HAL_IWDG_Refresh(&hiwdg);

	#if IRIDIUM_
	HAL_GPIO_WritePin(Iridium_RST_GPIO_Port, Iridium_RST_Pin, SET);
 8009286:	2201      	movs	r2, #1
 8009288:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800928c:	4809      	ldr	r0, [pc, #36]	; (80092b4 <MRT_TELEMETRY_Init+0x38>)
 800928e:	f000 fdc7 	bl	8009e20 <HAL_GPIO_WritePin>
	hiridium = MRT_Iridium_Init(IRIDIUM_TIMEOUT, IRIDIUM_I2C, print);
 8009292:	4c09      	ldr	r4, [pc, #36]	; (80092b8 <MRT_TELEMETRY_Init+0x3c>)
 8009294:	4638      	mov	r0, r7
 8009296:	4b09      	ldr	r3, [pc, #36]	; (80092bc <MRT_TELEMETRY_Init+0x40>)
 8009298:	2202      	movs	r2, #2
 800929a:	2103      	movs	r1, #3
 800929c:	f7ff f946 	bl	800852c <MRT_Iridium_Init>
 80092a0:	4625      	mov	r5, r4
 80092a2:	463c      	mov	r4, r7
 80092a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80092a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80092a8:	6823      	ldr	r3, [r4, #0]
 80092aa:	602b      	str	r3, [r5, #0]
	#endif
}
 80092ac:	bf00      	nop
 80092ae:	3718      	adds	r7, #24
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bdb0      	pop	{r4, r5, r7, pc}
 80092b4:	40021000 	.word	0x40021000
 80092b8:	20000604 	.word	0x20000604
 80092bc:	08001109 	.word	0x08001109

080092c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80092c4:	4b0e      	ldr	r3, [pc, #56]	; (8009300 <HAL_Init+0x40>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a0d      	ldr	r2, [pc, #52]	; (8009300 <HAL_Init+0x40>)
 80092ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80092ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80092d0:	4b0b      	ldr	r3, [pc, #44]	; (8009300 <HAL_Init+0x40>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a0a      	ldr	r2, [pc, #40]	; (8009300 <HAL_Init+0x40>)
 80092d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80092da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80092dc:	4b08      	ldr	r3, [pc, #32]	; (8009300 <HAL_Init+0x40>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a07      	ldr	r2, [pc, #28]	; (8009300 <HAL_Init+0x40>)
 80092e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80092e8:	2003      	movs	r0, #3
 80092ea:	f000 fb92 	bl	8009a12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80092ee:	2000      	movs	r0, #0
 80092f0:	f7f9 f9e6 	bl	80026c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80092f4:	f7f9 f9b8 	bl	8002668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	40023c00 	.word	0x40023c00

08009304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009304:	b480      	push	{r7}
 8009306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009308:	4b06      	ldr	r3, [pc, #24]	; (8009324 <HAL_IncTick+0x20>)
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	461a      	mov	r2, r3
 800930e:	4b06      	ldr	r3, [pc, #24]	; (8009328 <HAL_IncTick+0x24>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4413      	add	r3, r2
 8009314:	4a04      	ldr	r2, [pc, #16]	; (8009328 <HAL_IncTick+0x24>)
 8009316:	6013      	str	r3, [r2, #0]
}
 8009318:	bf00      	nop
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	20000068 	.word	0x20000068
 8009328:	20006fc8 	.word	0x20006fc8

0800932c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800932c:	b480      	push	{r7}
 800932e:	af00      	add	r7, sp, #0
  return uwTick;
 8009330:	4b03      	ldr	r3, [pc, #12]	; (8009340 <HAL_GetTick+0x14>)
 8009332:	681b      	ldr	r3, [r3, #0]
}
 8009334:	4618      	mov	r0, r3
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	20006fc8 	.word	0x20006fc8

08009344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800934c:	f7ff ffee 	bl	800932c <HAL_GetTick>
 8009350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800935c:	d005      	beq.n	800936a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800935e:	4b0a      	ldr	r3, [pc, #40]	; (8009388 <HAL_Delay+0x44>)
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	461a      	mov	r2, r3
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	4413      	add	r3, r2
 8009368:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800936a:	bf00      	nop
 800936c:	f7ff ffde 	bl	800932c <HAL_GetTick>
 8009370:	4602      	mov	r2, r0
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	1ad3      	subs	r3, r2, r3
 8009376:	68fa      	ldr	r2, [r7, #12]
 8009378:	429a      	cmp	r2, r3
 800937a:	d8f7      	bhi.n	800936c <HAL_Delay+0x28>
  {
  }
}
 800937c:	bf00      	nop
 800937e:	bf00      	nop
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	20000068 	.word	0x20000068

0800938c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009394:	2300      	movs	r3, #0
 8009396:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d101      	bne.n	80093a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	e033      	b.n	800940a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d109      	bne.n	80093be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f7f8 f914 	bl	80015d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c2:	f003 0310 	and.w	r3, r3, #16
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d118      	bne.n	80093fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80093d2:	f023 0302 	bic.w	r3, r3, #2
 80093d6:	f043 0202 	orr.w	r2, r3, #2
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 f94a 	bl	8009678 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ee:	f023 0303 	bic.w	r3, r3, #3
 80093f2:	f043 0201 	orr.w	r2, r3, #1
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	641a      	str	r2, [r3, #64]	; 0x40
 80093fa:	e001      	b.n	8009400 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009408:	7bfb      	ldrb	r3, [r7, #15]
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
	...

08009414 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800941e:	2300      	movs	r3, #0
 8009420:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009428:	2b01      	cmp	r3, #1
 800942a:	d101      	bne.n	8009430 <HAL_ADC_ConfigChannel+0x1c>
 800942c:	2302      	movs	r3, #2
 800942e:	e113      	b.n	8009658 <HAL_ADC_ConfigChannel+0x244>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2b09      	cmp	r3, #9
 800943e:	d925      	bls.n	800948c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68d9      	ldr	r1, [r3, #12]
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	b29b      	uxth	r3, r3
 800944c:	461a      	mov	r2, r3
 800944e:	4613      	mov	r3, r2
 8009450:	005b      	lsls	r3, r3, #1
 8009452:	4413      	add	r3, r2
 8009454:	3b1e      	subs	r3, #30
 8009456:	2207      	movs	r2, #7
 8009458:	fa02 f303 	lsl.w	r3, r2, r3
 800945c:	43da      	mvns	r2, r3
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	400a      	ands	r2, r1
 8009464:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	68d9      	ldr	r1, [r3, #12]
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	689a      	ldr	r2, [r3, #8]
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	b29b      	uxth	r3, r3
 8009476:	4618      	mov	r0, r3
 8009478:	4603      	mov	r3, r0
 800947a:	005b      	lsls	r3, r3, #1
 800947c:	4403      	add	r3, r0
 800947e:	3b1e      	subs	r3, #30
 8009480:	409a      	lsls	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	430a      	orrs	r2, r1
 8009488:	60da      	str	r2, [r3, #12]
 800948a:	e022      	b.n	80094d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6919      	ldr	r1, [r3, #16]
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	b29b      	uxth	r3, r3
 8009498:	461a      	mov	r2, r3
 800949a:	4613      	mov	r3, r2
 800949c:	005b      	lsls	r3, r3, #1
 800949e:	4413      	add	r3, r2
 80094a0:	2207      	movs	r2, #7
 80094a2:	fa02 f303 	lsl.w	r3, r2, r3
 80094a6:	43da      	mvns	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	400a      	ands	r2, r1
 80094ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	6919      	ldr	r1, [r3, #16]
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	689a      	ldr	r2, [r3, #8]
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	b29b      	uxth	r3, r3
 80094c0:	4618      	mov	r0, r3
 80094c2:	4603      	mov	r3, r0
 80094c4:	005b      	lsls	r3, r3, #1
 80094c6:	4403      	add	r3, r0
 80094c8:	409a      	lsls	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	430a      	orrs	r2, r1
 80094d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	2b06      	cmp	r3, #6
 80094d8:	d824      	bhi.n	8009524 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	685a      	ldr	r2, [r3, #4]
 80094e4:	4613      	mov	r3, r2
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	4413      	add	r3, r2
 80094ea:	3b05      	subs	r3, #5
 80094ec:	221f      	movs	r2, #31
 80094ee:	fa02 f303 	lsl.w	r3, r2, r3
 80094f2:	43da      	mvns	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	400a      	ands	r2, r1
 80094fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	b29b      	uxth	r3, r3
 8009508:	4618      	mov	r0, r3
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	685a      	ldr	r2, [r3, #4]
 800950e:	4613      	mov	r3, r2
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	4413      	add	r3, r2
 8009514:	3b05      	subs	r3, #5
 8009516:	fa00 f203 	lsl.w	r2, r0, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	430a      	orrs	r2, r1
 8009520:	635a      	str	r2, [r3, #52]	; 0x34
 8009522:	e04c      	b.n	80095be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	2b0c      	cmp	r3, #12
 800952a:	d824      	bhi.n	8009576 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	685a      	ldr	r2, [r3, #4]
 8009536:	4613      	mov	r3, r2
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	4413      	add	r3, r2
 800953c:	3b23      	subs	r3, #35	; 0x23
 800953e:	221f      	movs	r2, #31
 8009540:	fa02 f303 	lsl.w	r3, r2, r3
 8009544:	43da      	mvns	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	400a      	ands	r2, r1
 800954c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	b29b      	uxth	r3, r3
 800955a:	4618      	mov	r0, r3
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	685a      	ldr	r2, [r3, #4]
 8009560:	4613      	mov	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	4413      	add	r3, r2
 8009566:	3b23      	subs	r3, #35	; 0x23
 8009568:	fa00 f203 	lsl.w	r2, r0, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	430a      	orrs	r2, r1
 8009572:	631a      	str	r2, [r3, #48]	; 0x30
 8009574:	e023      	b.n	80095be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	685a      	ldr	r2, [r3, #4]
 8009580:	4613      	mov	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	4413      	add	r3, r2
 8009586:	3b41      	subs	r3, #65	; 0x41
 8009588:	221f      	movs	r2, #31
 800958a:	fa02 f303 	lsl.w	r3, r2, r3
 800958e:	43da      	mvns	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	400a      	ands	r2, r1
 8009596:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	4618      	mov	r0, r3
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	685a      	ldr	r2, [r3, #4]
 80095aa:	4613      	mov	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	4413      	add	r3, r2
 80095b0:	3b41      	subs	r3, #65	; 0x41
 80095b2:	fa00 f203 	lsl.w	r2, r0, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	430a      	orrs	r2, r1
 80095bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80095be:	4b29      	ldr	r3, [pc, #164]	; (8009664 <HAL_ADC_ConfigChannel+0x250>)
 80095c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a28      	ldr	r2, [pc, #160]	; (8009668 <HAL_ADC_ConfigChannel+0x254>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d10f      	bne.n	80095ec <HAL_ADC_ConfigChannel+0x1d8>
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2b12      	cmp	r3, #18
 80095d2:	d10b      	bne.n	80095ec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a1d      	ldr	r2, [pc, #116]	; (8009668 <HAL_ADC_ConfigChannel+0x254>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d12b      	bne.n	800964e <HAL_ADC_ConfigChannel+0x23a>
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a1c      	ldr	r2, [pc, #112]	; (800966c <HAL_ADC_ConfigChannel+0x258>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d003      	beq.n	8009608 <HAL_ADC_ConfigChannel+0x1f4>
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2b11      	cmp	r3, #17
 8009606:	d122      	bne.n	800964e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a11      	ldr	r2, [pc, #68]	; (800966c <HAL_ADC_ConfigChannel+0x258>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d111      	bne.n	800964e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800962a:	4b11      	ldr	r3, [pc, #68]	; (8009670 <HAL_ADC_ConfigChannel+0x25c>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a11      	ldr	r2, [pc, #68]	; (8009674 <HAL_ADC_ConfigChannel+0x260>)
 8009630:	fba2 2303 	umull	r2, r3, r2, r3
 8009634:	0c9a      	lsrs	r2, r3, #18
 8009636:	4613      	mov	r3, r2
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4413      	add	r3, r2
 800963c:	005b      	lsls	r3, r3, #1
 800963e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009640:	e002      	b.n	8009648 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	3b01      	subs	r3, #1
 8009646:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d1f9      	bne.n	8009642 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3714      	adds	r7, #20
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr
 8009664:	40012300 	.word	0x40012300
 8009668:	40012000 	.word	0x40012000
 800966c:	10000012 	.word	0x10000012
 8009670:	2000003c 	.word	0x2000003c
 8009674:	431bde83 	.word	0x431bde83

08009678 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009680:	4b79      	ldr	r3, [pc, #484]	; (8009868 <ADC_Init+0x1f0>)
 8009682:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	685a      	ldr	r2, [r3, #4]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	431a      	orrs	r2, r3
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	685a      	ldr	r2, [r3, #4]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80096ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	6859      	ldr	r1, [r3, #4]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	021a      	lsls	r2, r3, #8
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	430a      	orrs	r2, r1
 80096c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	685a      	ldr	r2, [r3, #4]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80096d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	6859      	ldr	r1, [r3, #4]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	689a      	ldr	r2, [r3, #8]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	430a      	orrs	r2, r1
 80096e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	689a      	ldr	r2, [r3, #8]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80096f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	6899      	ldr	r1, [r3, #8]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	68da      	ldr	r2, [r3, #12]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	430a      	orrs	r2, r1
 8009704:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800970a:	4a58      	ldr	r2, [pc, #352]	; (800986c <ADC_Init+0x1f4>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d022      	beq.n	8009756 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	689a      	ldr	r2, [r3, #8]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800971e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	6899      	ldr	r1, [r3, #8]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	430a      	orrs	r2, r1
 8009730:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	689a      	ldr	r2, [r3, #8]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009740:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	6899      	ldr	r1, [r3, #8]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	430a      	orrs	r2, r1
 8009752:	609a      	str	r2, [r3, #8]
 8009754:	e00f      	b.n	8009776 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	689a      	ldr	r2, [r3, #8]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009764:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	689a      	ldr	r2, [r3, #8]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009774:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	689a      	ldr	r2, [r3, #8]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f022 0202 	bic.w	r2, r2, #2
 8009784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	6899      	ldr	r1, [r3, #8]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	7e1b      	ldrb	r3, [r3, #24]
 8009790:	005a      	lsls	r2, r3, #1
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	430a      	orrs	r2, r1
 8009798:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d01b      	beq.n	80097dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	685a      	ldr	r2, [r3, #4]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	685a      	ldr	r2, [r3, #4]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80097c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	6859      	ldr	r1, [r3, #4]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ce:	3b01      	subs	r3, #1
 80097d0:	035a      	lsls	r2, r3, #13
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	430a      	orrs	r2, r1
 80097d8:	605a      	str	r2, [r3, #4]
 80097da:	e007      	b.n	80097ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	685a      	ldr	r2, [r3, #4]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80097fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	69db      	ldr	r3, [r3, #28]
 8009806:	3b01      	subs	r3, #1
 8009808:	051a      	lsls	r2, r3, #20
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	430a      	orrs	r2, r1
 8009810:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	689a      	ldr	r2, [r3, #8]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009820:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	6899      	ldr	r1, [r3, #8]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800982e:	025a      	lsls	r2, r3, #9
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	430a      	orrs	r2, r1
 8009836:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	689a      	ldr	r2, [r3, #8]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009846:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	6899      	ldr	r1, [r3, #8]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	695b      	ldr	r3, [r3, #20]
 8009852:	029a      	lsls	r2, r3, #10
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	430a      	orrs	r2, r1
 800985a:	609a      	str	r2, [r3, #8]
}
 800985c:	bf00      	nop
 800985e:	3714      	adds	r7, #20
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr
 8009868:	40012300 	.word	0x40012300
 800986c:	0f000001 	.word	0x0f000001

08009870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f003 0307 	and.w	r3, r3, #7
 800987e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009880:	4b0c      	ldr	r3, [pc, #48]	; (80098b4 <__NVIC_SetPriorityGrouping+0x44>)
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009886:	68ba      	ldr	r2, [r7, #8]
 8009888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800988c:	4013      	ands	r3, r2
 800988e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800989c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80098a2:	4a04      	ldr	r2, [pc, #16]	; (80098b4 <__NVIC_SetPriorityGrouping+0x44>)
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	60d3      	str	r3, [r2, #12]
}
 80098a8:	bf00      	nop
 80098aa:	3714      	adds	r7, #20
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr
 80098b4:	e000ed00 	.word	0xe000ed00

080098b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80098b8:	b480      	push	{r7}
 80098ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80098bc:	4b04      	ldr	r3, [pc, #16]	; (80098d0 <__NVIC_GetPriorityGrouping+0x18>)
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	0a1b      	lsrs	r3, r3, #8
 80098c2:	f003 0307 	and.w	r3, r3, #7
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr
 80098d0:	e000ed00 	.word	0xe000ed00

080098d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	4603      	mov	r3, r0
 80098dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	db0b      	blt.n	80098fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80098e6:	79fb      	ldrb	r3, [r7, #7]
 80098e8:	f003 021f 	and.w	r2, r3, #31
 80098ec:	4907      	ldr	r1, [pc, #28]	; (800990c <__NVIC_EnableIRQ+0x38>)
 80098ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098f2:	095b      	lsrs	r3, r3, #5
 80098f4:	2001      	movs	r0, #1
 80098f6:	fa00 f202 	lsl.w	r2, r0, r2
 80098fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80098fe:	bf00      	nop
 8009900:	370c      	adds	r7, #12
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	e000e100 	.word	0xe000e100

08009910 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	4603      	mov	r3, r0
 8009918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800991a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800991e:	2b00      	cmp	r3, #0
 8009920:	db12      	blt.n	8009948 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009922:	79fb      	ldrb	r3, [r7, #7]
 8009924:	f003 021f 	and.w	r2, r3, #31
 8009928:	490a      	ldr	r1, [pc, #40]	; (8009954 <__NVIC_DisableIRQ+0x44>)
 800992a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800992e:	095b      	lsrs	r3, r3, #5
 8009930:	2001      	movs	r0, #1
 8009932:	fa00 f202 	lsl.w	r2, r0, r2
 8009936:	3320      	adds	r3, #32
 8009938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800993c:	f3bf 8f4f 	dsb	sy
}
 8009940:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009942:	f3bf 8f6f 	isb	sy
}
 8009946:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8009948:	bf00      	nop
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr
 8009954:	e000e100 	.word	0xe000e100

08009958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	4603      	mov	r3, r0
 8009960:	6039      	str	r1, [r7, #0]
 8009962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009968:	2b00      	cmp	r3, #0
 800996a:	db0a      	blt.n	8009982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	b2da      	uxtb	r2, r3
 8009970:	490c      	ldr	r1, [pc, #48]	; (80099a4 <__NVIC_SetPriority+0x4c>)
 8009972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009976:	0112      	lsls	r2, r2, #4
 8009978:	b2d2      	uxtb	r2, r2
 800997a:	440b      	add	r3, r1
 800997c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009980:	e00a      	b.n	8009998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	b2da      	uxtb	r2, r3
 8009986:	4908      	ldr	r1, [pc, #32]	; (80099a8 <__NVIC_SetPriority+0x50>)
 8009988:	79fb      	ldrb	r3, [r7, #7]
 800998a:	f003 030f 	and.w	r3, r3, #15
 800998e:	3b04      	subs	r3, #4
 8009990:	0112      	lsls	r2, r2, #4
 8009992:	b2d2      	uxtb	r2, r2
 8009994:	440b      	add	r3, r1
 8009996:	761a      	strb	r2, [r3, #24]
}
 8009998:	bf00      	nop
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr
 80099a4:	e000e100 	.word	0xe000e100
 80099a8:	e000ed00 	.word	0xe000ed00

080099ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b089      	sub	sp, #36	; 0x24
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f003 0307 	and.w	r3, r3, #7
 80099be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	f1c3 0307 	rsb	r3, r3, #7
 80099c6:	2b04      	cmp	r3, #4
 80099c8:	bf28      	it	cs
 80099ca:	2304      	movcs	r3, #4
 80099cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80099ce:	69fb      	ldr	r3, [r7, #28]
 80099d0:	3304      	adds	r3, #4
 80099d2:	2b06      	cmp	r3, #6
 80099d4:	d902      	bls.n	80099dc <NVIC_EncodePriority+0x30>
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	3b03      	subs	r3, #3
 80099da:	e000      	b.n	80099de <NVIC_EncodePriority+0x32>
 80099dc:	2300      	movs	r3, #0
 80099de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80099e0:	f04f 32ff 	mov.w	r2, #4294967295
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	fa02 f303 	lsl.w	r3, r2, r3
 80099ea:	43da      	mvns	r2, r3
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	401a      	ands	r2, r3
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80099f4:	f04f 31ff 	mov.w	r1, #4294967295
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	fa01 f303 	lsl.w	r3, r1, r3
 80099fe:	43d9      	mvns	r1, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009a04:	4313      	orrs	r3, r2
         );
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3724      	adds	r7, #36	; 0x24
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr

08009a12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b082      	sub	sp, #8
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f7ff ff28 	bl	8009870 <__NVIC_SetPriorityGrouping>
}
 8009a20:	bf00      	nop
 8009a22:	3708      	adds	r7, #8
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b086      	sub	sp, #24
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	4603      	mov	r3, r0
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
 8009a34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009a36:	2300      	movs	r3, #0
 8009a38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009a3a:	f7ff ff3d 	bl	80098b8 <__NVIC_GetPriorityGrouping>
 8009a3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	68b9      	ldr	r1, [r7, #8]
 8009a44:	6978      	ldr	r0, [r7, #20]
 8009a46:	f7ff ffb1 	bl	80099ac <NVIC_EncodePriority>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a50:	4611      	mov	r1, r2
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7ff ff80 	bl	8009958 <__NVIC_SetPriority>
}
 8009a58:	bf00      	nop
 8009a5a:	3718      	adds	r7, #24
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	4603      	mov	r3, r0
 8009a68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7ff ff30 	bl	80098d4 <__NVIC_EnableIRQ>
}
 8009a74:	bf00      	nop
 8009a76:	3708      	adds	r7, #8
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	4603      	mov	r3, r0
 8009a84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7ff ff40 	bl	8009910 <__NVIC_DisableIRQ>
}
 8009a90:	bf00      	nop
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b089      	sub	sp, #36	; 0x24
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009aae:	2300      	movs	r3, #0
 8009ab0:	61fb      	str	r3, [r7, #28]
 8009ab2:	e177      	b.n	8009da4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8009abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	697a      	ldr	r2, [r7, #20]
 8009ac4:	4013      	ands	r3, r2
 8009ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009ac8:	693a      	ldr	r2, [r7, #16]
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	f040 8166 	bne.w	8009d9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	f003 0303 	and.w	r3, r3, #3
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d005      	beq.n	8009aea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009ae6:	2b02      	cmp	r3, #2
 8009ae8:	d130      	bne.n	8009b4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	005b      	lsls	r3, r3, #1
 8009af4:	2203      	movs	r2, #3
 8009af6:	fa02 f303 	lsl.w	r3, r2, r3
 8009afa:	43db      	mvns	r3, r3
 8009afc:	69ba      	ldr	r2, [r7, #24]
 8009afe:	4013      	ands	r3, r2
 8009b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	68da      	ldr	r2, [r3, #12]
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	005b      	lsls	r3, r3, #1
 8009b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b0e:	69ba      	ldr	r2, [r7, #24]
 8009b10:	4313      	orrs	r3, r2
 8009b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	69ba      	ldr	r2, [r7, #24]
 8009b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009b20:	2201      	movs	r2, #1
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	fa02 f303 	lsl.w	r3, r2, r3
 8009b28:	43db      	mvns	r3, r3
 8009b2a:	69ba      	ldr	r2, [r7, #24]
 8009b2c:	4013      	ands	r3, r2
 8009b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	091b      	lsrs	r3, r3, #4
 8009b36:	f003 0201 	and.w	r2, r3, #1
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b40:	69ba      	ldr	r2, [r7, #24]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	69ba      	ldr	r2, [r7, #24]
 8009b4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	f003 0303 	and.w	r3, r3, #3
 8009b54:	2b03      	cmp	r3, #3
 8009b56:	d017      	beq.n	8009b88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	005b      	lsls	r3, r3, #1
 8009b62:	2203      	movs	r2, #3
 8009b64:	fa02 f303 	lsl.w	r3, r2, r3
 8009b68:	43db      	mvns	r3, r3
 8009b6a:	69ba      	ldr	r2, [r7, #24]
 8009b6c:	4013      	ands	r3, r2
 8009b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	689a      	ldr	r2, [r3, #8]
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	005b      	lsls	r3, r3, #1
 8009b78:	fa02 f303 	lsl.w	r3, r2, r3
 8009b7c:	69ba      	ldr	r2, [r7, #24]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	69ba      	ldr	r2, [r7, #24]
 8009b86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	f003 0303 	and.w	r3, r3, #3
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	d123      	bne.n	8009bdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	08da      	lsrs	r2, r3, #3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	3208      	adds	r2, #8
 8009b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	f003 0307 	and.w	r3, r3, #7
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	220f      	movs	r2, #15
 8009bac:	fa02 f303 	lsl.w	r3, r2, r3
 8009bb0:	43db      	mvns	r3, r3
 8009bb2:	69ba      	ldr	r2, [r7, #24]
 8009bb4:	4013      	ands	r3, r2
 8009bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	691a      	ldr	r2, [r3, #16]
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	f003 0307 	and.w	r3, r3, #7
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc8:	69ba      	ldr	r2, [r7, #24]
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	08da      	lsrs	r2, r3, #3
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	3208      	adds	r2, #8
 8009bd6:	69b9      	ldr	r1, [r7, #24]
 8009bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	005b      	lsls	r3, r3, #1
 8009be6:	2203      	movs	r2, #3
 8009be8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bec:	43db      	mvns	r3, r3
 8009bee:	69ba      	ldr	r2, [r7, #24]
 8009bf0:	4013      	ands	r3, r2
 8009bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	f003 0203 	and.w	r2, r3, #3
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	005b      	lsls	r3, r3, #1
 8009c00:	fa02 f303 	lsl.w	r3, r2, r3
 8009c04:	69ba      	ldr	r2, [r7, #24]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	69ba      	ldr	r2, [r7, #24]
 8009c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	f000 80c0 	beq.w	8009d9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c1e:	2300      	movs	r3, #0
 8009c20:	60fb      	str	r3, [r7, #12]
 8009c22:	4b66      	ldr	r3, [pc, #408]	; (8009dbc <HAL_GPIO_Init+0x324>)
 8009c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c26:	4a65      	ldr	r2, [pc, #404]	; (8009dbc <HAL_GPIO_Init+0x324>)
 8009c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8009c2e:	4b63      	ldr	r3, [pc, #396]	; (8009dbc <HAL_GPIO_Init+0x324>)
 8009c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c36:	60fb      	str	r3, [r7, #12]
 8009c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009c3a:	4a61      	ldr	r2, [pc, #388]	; (8009dc0 <HAL_GPIO_Init+0x328>)
 8009c3c:	69fb      	ldr	r3, [r7, #28]
 8009c3e:	089b      	lsrs	r3, r3, #2
 8009c40:	3302      	adds	r3, #2
 8009c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	f003 0303 	and.w	r3, r3, #3
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	220f      	movs	r2, #15
 8009c52:	fa02 f303 	lsl.w	r3, r2, r3
 8009c56:	43db      	mvns	r3, r3
 8009c58:	69ba      	ldr	r2, [r7, #24]
 8009c5a:	4013      	ands	r3, r2
 8009c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a58      	ldr	r2, [pc, #352]	; (8009dc4 <HAL_GPIO_Init+0x32c>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d037      	beq.n	8009cd6 <HAL_GPIO_Init+0x23e>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a57      	ldr	r2, [pc, #348]	; (8009dc8 <HAL_GPIO_Init+0x330>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d031      	beq.n	8009cd2 <HAL_GPIO_Init+0x23a>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a56      	ldr	r2, [pc, #344]	; (8009dcc <HAL_GPIO_Init+0x334>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d02b      	beq.n	8009cce <HAL_GPIO_Init+0x236>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a55      	ldr	r2, [pc, #340]	; (8009dd0 <HAL_GPIO_Init+0x338>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d025      	beq.n	8009cca <HAL_GPIO_Init+0x232>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4a54      	ldr	r2, [pc, #336]	; (8009dd4 <HAL_GPIO_Init+0x33c>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d01f      	beq.n	8009cc6 <HAL_GPIO_Init+0x22e>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a53      	ldr	r2, [pc, #332]	; (8009dd8 <HAL_GPIO_Init+0x340>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d019      	beq.n	8009cc2 <HAL_GPIO_Init+0x22a>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4a52      	ldr	r2, [pc, #328]	; (8009ddc <HAL_GPIO_Init+0x344>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d013      	beq.n	8009cbe <HAL_GPIO_Init+0x226>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4a51      	ldr	r2, [pc, #324]	; (8009de0 <HAL_GPIO_Init+0x348>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d00d      	beq.n	8009cba <HAL_GPIO_Init+0x222>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a50      	ldr	r2, [pc, #320]	; (8009de4 <HAL_GPIO_Init+0x34c>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d007      	beq.n	8009cb6 <HAL_GPIO_Init+0x21e>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a4f      	ldr	r2, [pc, #316]	; (8009de8 <HAL_GPIO_Init+0x350>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d101      	bne.n	8009cb2 <HAL_GPIO_Init+0x21a>
 8009cae:	2309      	movs	r3, #9
 8009cb0:	e012      	b.n	8009cd8 <HAL_GPIO_Init+0x240>
 8009cb2:	230a      	movs	r3, #10
 8009cb4:	e010      	b.n	8009cd8 <HAL_GPIO_Init+0x240>
 8009cb6:	2308      	movs	r3, #8
 8009cb8:	e00e      	b.n	8009cd8 <HAL_GPIO_Init+0x240>
 8009cba:	2307      	movs	r3, #7
 8009cbc:	e00c      	b.n	8009cd8 <HAL_GPIO_Init+0x240>
 8009cbe:	2306      	movs	r3, #6
 8009cc0:	e00a      	b.n	8009cd8 <HAL_GPIO_Init+0x240>
 8009cc2:	2305      	movs	r3, #5
 8009cc4:	e008      	b.n	8009cd8 <HAL_GPIO_Init+0x240>
 8009cc6:	2304      	movs	r3, #4
 8009cc8:	e006      	b.n	8009cd8 <HAL_GPIO_Init+0x240>
 8009cca:	2303      	movs	r3, #3
 8009ccc:	e004      	b.n	8009cd8 <HAL_GPIO_Init+0x240>
 8009cce:	2302      	movs	r3, #2
 8009cd0:	e002      	b.n	8009cd8 <HAL_GPIO_Init+0x240>
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e000      	b.n	8009cd8 <HAL_GPIO_Init+0x240>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	69fa      	ldr	r2, [r7, #28]
 8009cda:	f002 0203 	and.w	r2, r2, #3
 8009cde:	0092      	lsls	r2, r2, #2
 8009ce0:	4093      	lsls	r3, r2
 8009ce2:	69ba      	ldr	r2, [r7, #24]
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009ce8:	4935      	ldr	r1, [pc, #212]	; (8009dc0 <HAL_GPIO_Init+0x328>)
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	089b      	lsrs	r3, r3, #2
 8009cee:	3302      	adds	r3, #2
 8009cf0:	69ba      	ldr	r2, [r7, #24]
 8009cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009cf6:	4b3d      	ldr	r3, [pc, #244]	; (8009dec <HAL_GPIO_Init+0x354>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	43db      	mvns	r3, r3
 8009d00:	69ba      	ldr	r2, [r7, #24]
 8009d02:	4013      	ands	r3, r2
 8009d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d003      	beq.n	8009d1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009d12:	69ba      	ldr	r2, [r7, #24]
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009d1a:	4a34      	ldr	r2, [pc, #208]	; (8009dec <HAL_GPIO_Init+0x354>)
 8009d1c:	69bb      	ldr	r3, [r7, #24]
 8009d1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009d20:	4b32      	ldr	r3, [pc, #200]	; (8009dec <HAL_GPIO_Init+0x354>)
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	43db      	mvns	r3, r3
 8009d2a:	69ba      	ldr	r2, [r7, #24]
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d003      	beq.n	8009d44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009d3c:	69ba      	ldr	r2, [r7, #24]
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	4313      	orrs	r3, r2
 8009d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009d44:	4a29      	ldr	r2, [pc, #164]	; (8009dec <HAL_GPIO_Init+0x354>)
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009d4a:	4b28      	ldr	r3, [pc, #160]	; (8009dec <HAL_GPIO_Init+0x354>)
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	43db      	mvns	r3, r3
 8009d54:	69ba      	ldr	r2, [r7, #24]
 8009d56:	4013      	ands	r3, r2
 8009d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d003      	beq.n	8009d6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009d66:	69ba      	ldr	r2, [r7, #24]
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009d6e:	4a1f      	ldr	r2, [pc, #124]	; (8009dec <HAL_GPIO_Init+0x354>)
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009d74:	4b1d      	ldr	r3, [pc, #116]	; (8009dec <HAL_GPIO_Init+0x354>)
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	43db      	mvns	r3, r3
 8009d7e:	69ba      	ldr	r2, [r7, #24]
 8009d80:	4013      	ands	r3, r2
 8009d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d003      	beq.n	8009d98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009d90:	69ba      	ldr	r2, [r7, #24]
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	4313      	orrs	r3, r2
 8009d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009d98:	4a14      	ldr	r2, [pc, #80]	; (8009dec <HAL_GPIO_Init+0x354>)
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009d9e:	69fb      	ldr	r3, [r7, #28]
 8009da0:	3301      	adds	r3, #1
 8009da2:	61fb      	str	r3, [r7, #28]
 8009da4:	69fb      	ldr	r3, [r7, #28]
 8009da6:	2b0f      	cmp	r3, #15
 8009da8:	f67f ae84 	bls.w	8009ab4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009dac:	bf00      	nop
 8009dae:	bf00      	nop
 8009db0:	3724      	adds	r7, #36	; 0x24
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop
 8009dbc:	40023800 	.word	0x40023800
 8009dc0:	40013800 	.word	0x40013800
 8009dc4:	40020000 	.word	0x40020000
 8009dc8:	40020400 	.word	0x40020400
 8009dcc:	40020800 	.word	0x40020800
 8009dd0:	40020c00 	.word	0x40020c00
 8009dd4:	40021000 	.word	0x40021000
 8009dd8:	40021400 	.word	0x40021400
 8009ddc:	40021800 	.word	0x40021800
 8009de0:	40021c00 	.word	0x40021c00
 8009de4:	40022000 	.word	0x40022000
 8009de8:	40022400 	.word	0x40022400
 8009dec:	40013c00 	.word	0x40013c00

08009df0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	460b      	mov	r3, r1
 8009dfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	691a      	ldr	r2, [r3, #16]
 8009e00:	887b      	ldrh	r3, [r7, #2]
 8009e02:	4013      	ands	r3, r2
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d002      	beq.n	8009e0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	73fb      	strb	r3, [r7, #15]
 8009e0c:	e001      	b.n	8009e12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3714      	adds	r7, #20
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	460b      	mov	r3, r1
 8009e2a:	807b      	strh	r3, [r7, #2]
 8009e2c:	4613      	mov	r3, r2
 8009e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009e30:	787b      	ldrb	r3, [r7, #1]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d003      	beq.n	8009e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009e36:	887a      	ldrh	r2, [r7, #2]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009e3c:	e003      	b.n	8009e46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009e3e:	887b      	ldrh	r3, [r7, #2]
 8009e40:	041a      	lsls	r2, r3, #16
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	619a      	str	r2, [r3, #24]
}
 8009e46:	bf00      	nop
 8009e48:	370c      	adds	r7, #12
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
	...

08009e54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009e5e:	4b08      	ldr	r3, [pc, #32]	; (8009e80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009e60:	695a      	ldr	r2, [r3, #20]
 8009e62:	88fb      	ldrh	r3, [r7, #6]
 8009e64:	4013      	ands	r3, r2
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d006      	beq.n	8009e78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009e6a:	4a05      	ldr	r2, [pc, #20]	; (8009e80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009e6c:	88fb      	ldrh	r3, [r7, #6]
 8009e6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009e70:	88fb      	ldrh	r3, [r7, #6]
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7f8 fcba 	bl	80027ec <HAL_GPIO_EXTI_Callback>
  }
}
 8009e78:	bf00      	nop
 8009e7a:	3708      	adds	r7, #8
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	40013c00 	.word	0x40013c00

08009e84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d101      	bne.n	8009e96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	e12b      	b.n	800a0ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d106      	bne.n	8009eb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f7f7 fe9e 	bl	8001bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2224      	movs	r2, #36	; 0x24
 8009eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f022 0201 	bic.w	r2, r2, #1
 8009ec6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ed6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009ee6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009ee8:	f002 fe48 	bl	800cb7c <HAL_RCC_GetPCLK1Freq>
 8009eec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	4a81      	ldr	r2, [pc, #516]	; (800a0f8 <HAL_I2C_Init+0x274>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d807      	bhi.n	8009f08 <HAL_I2C_Init+0x84>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	4a80      	ldr	r2, [pc, #512]	; (800a0fc <HAL_I2C_Init+0x278>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	bf94      	ite	ls
 8009f00:	2301      	movls	r3, #1
 8009f02:	2300      	movhi	r3, #0
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	e006      	b.n	8009f16 <HAL_I2C_Init+0x92>
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	4a7d      	ldr	r2, [pc, #500]	; (800a100 <HAL_I2C_Init+0x27c>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	bf94      	ite	ls
 8009f10:	2301      	movls	r3, #1
 8009f12:	2300      	movhi	r3, #0
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d001      	beq.n	8009f1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e0e7      	b.n	800a0ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	4a78      	ldr	r2, [pc, #480]	; (800a104 <HAL_I2C_Init+0x280>)
 8009f22:	fba2 2303 	umull	r2, r3, r2, r3
 8009f26:	0c9b      	lsrs	r3, r3, #18
 8009f28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	68ba      	ldr	r2, [r7, #8]
 8009f3a:	430a      	orrs	r2, r1
 8009f3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	6a1b      	ldr	r3, [r3, #32]
 8009f44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	4a6a      	ldr	r2, [pc, #424]	; (800a0f8 <HAL_I2C_Init+0x274>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d802      	bhi.n	8009f58 <HAL_I2C_Init+0xd4>
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	3301      	adds	r3, #1
 8009f56:	e009      	b.n	8009f6c <HAL_I2C_Init+0xe8>
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009f5e:	fb02 f303 	mul.w	r3, r2, r3
 8009f62:	4a69      	ldr	r2, [pc, #420]	; (800a108 <HAL_I2C_Init+0x284>)
 8009f64:	fba2 2303 	umull	r2, r3, r2, r3
 8009f68:	099b      	lsrs	r3, r3, #6
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	6812      	ldr	r2, [r2, #0]
 8009f70:	430b      	orrs	r3, r1
 8009f72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	69db      	ldr	r3, [r3, #28]
 8009f7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009f7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	495c      	ldr	r1, [pc, #368]	; (800a0f8 <HAL_I2C_Init+0x274>)
 8009f88:	428b      	cmp	r3, r1
 8009f8a:	d819      	bhi.n	8009fc0 <HAL_I2C_Init+0x13c>
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	1e59      	subs	r1, r3, #1
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	005b      	lsls	r3, r3, #1
 8009f96:	fbb1 f3f3 	udiv	r3, r1, r3
 8009f9a:	1c59      	adds	r1, r3, #1
 8009f9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009fa0:	400b      	ands	r3, r1
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00a      	beq.n	8009fbc <HAL_I2C_Init+0x138>
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	1e59      	subs	r1, r3, #1
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	005b      	lsls	r3, r3, #1
 8009fb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fba:	e051      	b.n	800a060 <HAL_I2C_Init+0x1dc>
 8009fbc:	2304      	movs	r3, #4
 8009fbe:	e04f      	b.n	800a060 <HAL_I2C_Init+0x1dc>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	689b      	ldr	r3, [r3, #8]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d111      	bne.n	8009fec <HAL_I2C_Init+0x168>
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	1e58      	subs	r0, r3, #1
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6859      	ldr	r1, [r3, #4]
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	005b      	lsls	r3, r3, #1
 8009fd4:	440b      	add	r3, r1
 8009fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8009fda:	3301      	adds	r3, #1
 8009fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	bf0c      	ite	eq
 8009fe4:	2301      	moveq	r3, #1
 8009fe6:	2300      	movne	r3, #0
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	e012      	b.n	800a012 <HAL_I2C_Init+0x18e>
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	1e58      	subs	r0, r3, #1
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6859      	ldr	r1, [r3, #4]
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	440b      	add	r3, r1
 8009ffa:	0099      	lsls	r1, r3, #2
 8009ffc:	440b      	add	r3, r1
 8009ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 800a002:	3301      	adds	r3, #1
 800a004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a008:	2b00      	cmp	r3, #0
 800a00a:	bf0c      	ite	eq
 800a00c:	2301      	moveq	r3, #1
 800a00e:	2300      	movne	r3, #0
 800a010:	b2db      	uxtb	r3, r3
 800a012:	2b00      	cmp	r3, #0
 800a014:	d001      	beq.n	800a01a <HAL_I2C_Init+0x196>
 800a016:	2301      	movs	r3, #1
 800a018:	e022      	b.n	800a060 <HAL_I2C_Init+0x1dc>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d10e      	bne.n	800a040 <HAL_I2C_Init+0x1bc>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	1e58      	subs	r0, r3, #1
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6859      	ldr	r1, [r3, #4]
 800a02a:	460b      	mov	r3, r1
 800a02c:	005b      	lsls	r3, r3, #1
 800a02e:	440b      	add	r3, r1
 800a030:	fbb0 f3f3 	udiv	r3, r0, r3
 800a034:	3301      	adds	r3, #1
 800a036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a03a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a03e:	e00f      	b.n	800a060 <HAL_I2C_Init+0x1dc>
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	1e58      	subs	r0, r3, #1
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6859      	ldr	r1, [r3, #4]
 800a048:	460b      	mov	r3, r1
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	440b      	add	r3, r1
 800a04e:	0099      	lsls	r1, r3, #2
 800a050:	440b      	add	r3, r1
 800a052:	fbb0 f3f3 	udiv	r3, r0, r3
 800a056:	3301      	adds	r3, #1
 800a058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a05c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a060:	6879      	ldr	r1, [r7, #4]
 800a062:	6809      	ldr	r1, [r1, #0]
 800a064:	4313      	orrs	r3, r2
 800a066:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	69da      	ldr	r2, [r3, #28]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6a1b      	ldr	r3, [r3, #32]
 800a07a:	431a      	orrs	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	430a      	orrs	r2, r1
 800a082:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a08e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	6911      	ldr	r1, [r2, #16]
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	68d2      	ldr	r2, [r2, #12]
 800a09a:	4311      	orrs	r1, r2
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	6812      	ldr	r2, [r2, #0]
 800a0a0:	430b      	orrs	r3, r1
 800a0a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	695a      	ldr	r2, [r3, #20]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	699b      	ldr	r3, [r3, #24]
 800a0b6:	431a      	orrs	r2, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	430a      	orrs	r2, r1
 800a0be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f042 0201 	orr.w	r2, r2, #1
 800a0ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2220      	movs	r2, #32
 800a0da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	000186a0 	.word	0x000186a0
 800a0fc:	001e847f 	.word	0x001e847f
 800a100:	003d08ff 	.word	0x003d08ff
 800a104:	431bde83 	.word	0x431bde83
 800a108:	10624dd3 	.word	0x10624dd3

0800a10c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b088      	sub	sp, #32
 800a110:	af02      	add	r7, sp, #8
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	4608      	mov	r0, r1
 800a116:	4611      	mov	r1, r2
 800a118:	461a      	mov	r2, r3
 800a11a:	4603      	mov	r3, r0
 800a11c:	817b      	strh	r3, [r7, #10]
 800a11e:	460b      	mov	r3, r1
 800a120:	813b      	strh	r3, [r7, #8]
 800a122:	4613      	mov	r3, r2
 800a124:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a126:	f7ff f901 	bl	800932c <HAL_GetTick>
 800a12a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a132:	b2db      	uxtb	r3, r3
 800a134:	2b20      	cmp	r3, #32
 800a136:	f040 80d9 	bne.w	800a2ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	9300      	str	r3, [sp, #0]
 800a13e:	2319      	movs	r3, #25
 800a140:	2201      	movs	r2, #1
 800a142:	496d      	ldr	r1, [pc, #436]	; (800a2f8 <HAL_I2C_Mem_Write+0x1ec>)
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f000 fcb5 	bl	800aab4 <I2C_WaitOnFlagUntilTimeout>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d001      	beq.n	800a154 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a150:	2302      	movs	r3, #2
 800a152:	e0cc      	b.n	800a2ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d101      	bne.n	800a162 <HAL_I2C_Mem_Write+0x56>
 800a15e:	2302      	movs	r3, #2
 800a160:	e0c5      	b.n	800a2ee <HAL_I2C_Mem_Write+0x1e2>
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2201      	movs	r2, #1
 800a166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f003 0301 	and.w	r3, r3, #1
 800a174:	2b01      	cmp	r3, #1
 800a176:	d007      	beq.n	800a188 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f042 0201 	orr.w	r2, r2, #1
 800a186:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a196:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2221      	movs	r2, #33	; 0x21
 800a19c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2240      	movs	r2, #64	; 0x40
 800a1a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6a3a      	ldr	r2, [r7, #32]
 800a1b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a1b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	4a4d      	ldr	r2, [pc, #308]	; (800a2fc <HAL_I2C_Mem_Write+0x1f0>)
 800a1c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a1ca:	88f8      	ldrh	r0, [r7, #6]
 800a1cc:	893a      	ldrh	r2, [r7, #8]
 800a1ce:	8979      	ldrh	r1, [r7, #10]
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	9301      	str	r3, [sp, #4]
 800a1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d6:	9300      	str	r3, [sp, #0]
 800a1d8:	4603      	mov	r3, r0
 800a1da:	68f8      	ldr	r0, [r7, #12]
 800a1dc:	f000 faec 	bl	800a7b8 <I2C_RequestMemoryWrite>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d052      	beq.n	800a28c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e081      	b.n	800a2ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a1ea:	697a      	ldr	r2, [r7, #20]
 800a1ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f000 fd36 	bl	800ac60 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00d      	beq.n	800a216 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1fe:	2b04      	cmp	r3, #4
 800a200:	d107      	bne.n	800a212 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a210:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a212:	2301      	movs	r3, #1
 800a214:	e06b      	b.n	800a2ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21a:	781a      	ldrb	r2, [r3, #0]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a226:	1c5a      	adds	r2, r3, #1
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a230:	3b01      	subs	r3, #1
 800a232:	b29a      	uxth	r2, r3
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	3b01      	subs	r3, #1
 800a240:	b29a      	uxth	r2, r3
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	695b      	ldr	r3, [r3, #20]
 800a24c:	f003 0304 	and.w	r3, r3, #4
 800a250:	2b04      	cmp	r3, #4
 800a252:	d11b      	bne.n	800a28c <HAL_I2C_Mem_Write+0x180>
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d017      	beq.n	800a28c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a260:	781a      	ldrb	r2, [r3, #0]
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26c:	1c5a      	adds	r2, r3, #1
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a276:	3b01      	subs	r3, #1
 800a278:	b29a      	uxth	r2, r3
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a282:	b29b      	uxth	r3, r3
 800a284:	3b01      	subs	r3, #1
 800a286:	b29a      	uxth	r2, r3
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a290:	2b00      	cmp	r3, #0
 800a292:	d1aa      	bne.n	800a1ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a294:	697a      	ldr	r2, [r7, #20]
 800a296:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a298:	68f8      	ldr	r0, [r7, #12]
 800a29a:	f000 fd22 	bl	800ace2 <I2C_WaitOnBTFFlagUntilTimeout>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00d      	beq.n	800a2c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a8:	2b04      	cmp	r3, #4
 800a2aa:	d107      	bne.n	800a2bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	e016      	b.n	800a2ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2220      	movs	r2, #32
 800a2d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	e000      	b.n	800a2ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a2ec:	2302      	movs	r3, #2
  }
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3718      	adds	r7, #24
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	00100002 	.word	0x00100002
 800a2fc:	ffff0000 	.word	0xffff0000

0800a300 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b08c      	sub	sp, #48	; 0x30
 800a304:	af02      	add	r7, sp, #8
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	4608      	mov	r0, r1
 800a30a:	4611      	mov	r1, r2
 800a30c:	461a      	mov	r2, r3
 800a30e:	4603      	mov	r3, r0
 800a310:	817b      	strh	r3, [r7, #10]
 800a312:	460b      	mov	r3, r1
 800a314:	813b      	strh	r3, [r7, #8]
 800a316:	4613      	mov	r3, r2
 800a318:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a31a:	f7ff f807 	bl	800932c <HAL_GetTick>
 800a31e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a326:	b2db      	uxtb	r3, r3
 800a328:	2b20      	cmp	r3, #32
 800a32a:	f040 8208 	bne.w	800a73e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a330:	9300      	str	r3, [sp, #0]
 800a332:	2319      	movs	r3, #25
 800a334:	2201      	movs	r2, #1
 800a336:	497b      	ldr	r1, [pc, #492]	; (800a524 <HAL_I2C_Mem_Read+0x224>)
 800a338:	68f8      	ldr	r0, [r7, #12]
 800a33a:	f000 fbbb 	bl	800aab4 <I2C_WaitOnFlagUntilTimeout>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d001      	beq.n	800a348 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a344:	2302      	movs	r3, #2
 800a346:	e1fb      	b.n	800a740 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d101      	bne.n	800a356 <HAL_I2C_Mem_Read+0x56>
 800a352:	2302      	movs	r3, #2
 800a354:	e1f4      	b.n	800a740 <HAL_I2C_Mem_Read+0x440>
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2201      	movs	r2, #1
 800a35a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f003 0301 	and.w	r3, r3, #1
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d007      	beq.n	800a37c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f042 0201 	orr.w	r2, r2, #1
 800a37a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a38a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2222      	movs	r2, #34	; 0x22
 800a390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2240      	movs	r2, #64	; 0x40
 800a398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a3ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3b2:	b29a      	uxth	r2, r3
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	4a5b      	ldr	r2, [pc, #364]	; (800a528 <HAL_I2C_Mem_Read+0x228>)
 800a3bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a3be:	88f8      	ldrh	r0, [r7, #6]
 800a3c0:	893a      	ldrh	r2, [r7, #8]
 800a3c2:	8979      	ldrh	r1, [r7, #10]
 800a3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c6:	9301      	str	r3, [sp, #4]
 800a3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ca:	9300      	str	r3, [sp, #0]
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	f000 fa88 	bl	800a8e4 <I2C_RequestMemoryRead>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d001      	beq.n	800a3de <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e1b0      	b.n	800a740 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d113      	bne.n	800a40e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	623b      	str	r3, [r7, #32]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	695b      	ldr	r3, [r3, #20]
 800a3f0:	623b      	str	r3, [r7, #32]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	699b      	ldr	r3, [r3, #24]
 800a3f8:	623b      	str	r3, [r7, #32]
 800a3fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a40a:	601a      	str	r2, [r3, #0]
 800a40c:	e184      	b.n	800a718 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a412:	2b01      	cmp	r3, #1
 800a414:	d11b      	bne.n	800a44e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a424:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a426:	2300      	movs	r3, #0
 800a428:	61fb      	str	r3, [r7, #28]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	695b      	ldr	r3, [r3, #20]
 800a430:	61fb      	str	r3, [r7, #28]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	699b      	ldr	r3, [r3, #24]
 800a438:	61fb      	str	r3, [r7, #28]
 800a43a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a44a:	601a      	str	r2, [r3, #0]
 800a44c:	e164      	b.n	800a718 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a452:	2b02      	cmp	r3, #2
 800a454:	d11b      	bne.n	800a48e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a464:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a474:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a476:	2300      	movs	r3, #0
 800a478:	61bb      	str	r3, [r7, #24]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	695b      	ldr	r3, [r3, #20]
 800a480:	61bb      	str	r3, [r7, #24]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	699b      	ldr	r3, [r3, #24]
 800a488:	61bb      	str	r3, [r7, #24]
 800a48a:	69bb      	ldr	r3, [r7, #24]
 800a48c:	e144      	b.n	800a718 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a48e:	2300      	movs	r3, #0
 800a490:	617b      	str	r3, [r7, #20]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	695b      	ldr	r3, [r3, #20]
 800a498:	617b      	str	r3, [r7, #20]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	699b      	ldr	r3, [r3, #24]
 800a4a0:	617b      	str	r3, [r7, #20]
 800a4a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a4a4:	e138      	b.n	800a718 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4aa:	2b03      	cmp	r3, #3
 800a4ac:	f200 80f1 	bhi.w	800a692 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d123      	bne.n	800a500 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a4b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f000 fc51 	bl	800ad64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d001      	beq.n	800a4cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	e139      	b.n	800a740 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	691a      	ldr	r2, [r3, #16]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d6:	b2d2      	uxtb	r2, r2
 800a4d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4de:	1c5a      	adds	r2, r3, #1
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	b29a      	uxth	r2, r3
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a4fe:	e10b      	b.n	800a718 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a504:	2b02      	cmp	r3, #2
 800a506:	d14e      	bne.n	800a5a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50a:	9300      	str	r3, [sp, #0]
 800a50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50e:	2200      	movs	r2, #0
 800a510:	4906      	ldr	r1, [pc, #24]	; (800a52c <HAL_I2C_Mem_Read+0x22c>)
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	f000 face 	bl	800aab4 <I2C_WaitOnFlagUntilTimeout>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d008      	beq.n	800a530 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	e10e      	b.n	800a740 <HAL_I2C_Mem_Read+0x440>
 800a522:	bf00      	nop
 800a524:	00100002 	.word	0x00100002
 800a528:	ffff0000 	.word	0xffff0000
 800a52c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a53e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	691a      	ldr	r2, [r3, #16]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54a:	b2d2      	uxtb	r2, r2
 800a54c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a552:	1c5a      	adds	r2, r3, #1
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a55c:	3b01      	subs	r3, #1
 800a55e:	b29a      	uxth	r2, r3
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a568:	b29b      	uxth	r3, r3
 800a56a:	3b01      	subs	r3, #1
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	691a      	ldr	r2, [r3, #16]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57c:	b2d2      	uxtb	r2, r2
 800a57e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a584:	1c5a      	adds	r2, r3, #1
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a58e:	3b01      	subs	r3, #1
 800a590:	b29a      	uxth	r2, r3
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	3b01      	subs	r3, #1
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a5a4:	e0b8      	b.n	800a718 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a8:	9300      	str	r3, [sp, #0]
 800a5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	4966      	ldr	r1, [pc, #408]	; (800a748 <HAL_I2C_Mem_Read+0x448>)
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f000 fa7f 	bl	800aab4 <I2C_WaitOnFlagUntilTimeout>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d001      	beq.n	800a5c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	e0bf      	b.n	800a740 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	691a      	ldr	r2, [r3, #16]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5da:	b2d2      	uxtb	r2, r2
 800a5dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e2:	1c5a      	adds	r2, r3, #1
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5ec:	3b01      	subs	r3, #1
 800a5ee:	b29a      	uxth	r2, r3
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	b29a      	uxth	r2, r3
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a604:	9300      	str	r3, [sp, #0]
 800a606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a608:	2200      	movs	r2, #0
 800a60a:	494f      	ldr	r1, [pc, #316]	; (800a748 <HAL_I2C_Mem_Read+0x448>)
 800a60c:	68f8      	ldr	r0, [r7, #12]
 800a60e:	f000 fa51 	bl	800aab4 <I2C_WaitOnFlagUntilTimeout>
 800a612:	4603      	mov	r3, r0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d001      	beq.n	800a61c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a618:	2301      	movs	r3, #1
 800a61a:	e091      	b.n	800a740 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a62a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	691a      	ldr	r2, [r3, #16]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a636:	b2d2      	uxtb	r2, r2
 800a638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a63e:	1c5a      	adds	r2, r3, #1
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a648:	3b01      	subs	r3, #1
 800a64a:	b29a      	uxth	r2, r3
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a654:	b29b      	uxth	r3, r3
 800a656:	3b01      	subs	r3, #1
 800a658:	b29a      	uxth	r2, r3
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	691a      	ldr	r2, [r3, #16]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a668:	b2d2      	uxtb	r2, r2
 800a66a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a670:	1c5a      	adds	r2, r3, #1
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a67a:	3b01      	subs	r3, #1
 800a67c:	b29a      	uxth	r2, r3
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a686:	b29b      	uxth	r3, r3
 800a688:	3b01      	subs	r3, #1
 800a68a:	b29a      	uxth	r2, r3
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a690:	e042      	b.n	800a718 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a694:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a696:	68f8      	ldr	r0, [r7, #12]
 800a698:	f000 fb64 	bl	800ad64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d001      	beq.n	800a6a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	e04c      	b.n	800a740 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	691a      	ldr	r2, [r3, #16]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b0:	b2d2      	uxtb	r2, r2
 800a6b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b8:	1c5a      	adds	r2, r3, #1
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6c2:	3b01      	subs	r3, #1
 800a6c4:	b29a      	uxth	r2, r3
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	695b      	ldr	r3, [r3, #20]
 800a6de:	f003 0304 	and.w	r3, r3, #4
 800a6e2:	2b04      	cmp	r3, #4
 800a6e4:	d118      	bne.n	800a718 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	691a      	ldr	r2, [r3, #16]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f0:	b2d2      	uxtb	r2, r2
 800a6f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f8:	1c5a      	adds	r2, r3, #1
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a702:	3b01      	subs	r3, #1
 800a704:	b29a      	uxth	r2, r3
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a70e:	b29b      	uxth	r3, r3
 800a710:	3b01      	subs	r3, #1
 800a712:	b29a      	uxth	r2, r3
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f47f aec2 	bne.w	800a4a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2220      	movs	r2, #32
 800a726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2200      	movs	r2, #0
 800a72e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a73a:	2300      	movs	r3, #0
 800a73c:	e000      	b.n	800a740 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a73e:	2302      	movs	r3, #2
  }
}
 800a740:	4618      	mov	r0, r3
 800a742:	3728      	adds	r7, #40	; 0x28
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	00010004 	.word	0x00010004

0800a74c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	2b20      	cmp	r3, #32
 800a75e:	d124      	bne.n	800a7aa <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2228      	movs	r2, #40	; 0x28
 800a764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f003 0301 	and.w	r3, r3, #1
 800a772:	2b01      	cmp	r3, #1
 800a774:	d007      	beq.n	800a786 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f042 0201 	orr.w	r2, r2, #1
 800a784:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a794:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	685a      	ldr	r2, [r3, #4]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800a7a4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	e000      	b.n	800a7ac <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800a7aa:	2302      	movs	r3, #2
  }
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	370c      	adds	r7, #12
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b088      	sub	sp, #32
 800a7bc:	af02      	add	r7, sp, #8
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	4608      	mov	r0, r1
 800a7c2:	4611      	mov	r1, r2
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	817b      	strh	r3, [r7, #10]
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	813b      	strh	r3, [r7, #8]
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e4:	9300      	str	r3, [sp, #0]
 800a7e6:	6a3b      	ldr	r3, [r7, #32]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f000 f960 	bl	800aab4 <I2C_WaitOnFlagUntilTimeout>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d00d      	beq.n	800a816 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a808:	d103      	bne.n	800a812 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a810:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a812:	2303      	movs	r3, #3
 800a814:	e05f      	b.n	800a8d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a816:	897b      	ldrh	r3, [r7, #10]
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	461a      	mov	r2, r3
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a824:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a828:	6a3a      	ldr	r2, [r7, #32]
 800a82a:	492d      	ldr	r1, [pc, #180]	; (800a8e0 <I2C_RequestMemoryWrite+0x128>)
 800a82c:	68f8      	ldr	r0, [r7, #12]
 800a82e:	f000 f998 	bl	800ab62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a832:	4603      	mov	r3, r0
 800a834:	2b00      	cmp	r3, #0
 800a836:	d001      	beq.n	800a83c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	e04c      	b.n	800a8d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a83c:	2300      	movs	r3, #0
 800a83e:	617b      	str	r3, [r7, #20]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	695b      	ldr	r3, [r3, #20]
 800a846:	617b      	str	r3, [r7, #20]
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	699b      	ldr	r3, [r3, #24]
 800a84e:	617b      	str	r3, [r7, #20]
 800a850:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a854:	6a39      	ldr	r1, [r7, #32]
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f000 fa02 	bl	800ac60 <I2C_WaitOnTXEFlagUntilTimeout>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d00d      	beq.n	800a87e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a866:	2b04      	cmp	r3, #4
 800a868:	d107      	bne.n	800a87a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a878:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a87a:	2301      	movs	r3, #1
 800a87c:	e02b      	b.n	800a8d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a87e:	88fb      	ldrh	r3, [r7, #6]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d105      	bne.n	800a890 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a884:	893b      	ldrh	r3, [r7, #8]
 800a886:	b2da      	uxtb	r2, r3
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	611a      	str	r2, [r3, #16]
 800a88e:	e021      	b.n	800a8d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a890:	893b      	ldrh	r3, [r7, #8]
 800a892:	0a1b      	lsrs	r3, r3, #8
 800a894:	b29b      	uxth	r3, r3
 800a896:	b2da      	uxtb	r2, r3
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a89e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8a0:	6a39      	ldr	r1, [r7, #32]
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	f000 f9dc 	bl	800ac60 <I2C_WaitOnTXEFlagUntilTimeout>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d00d      	beq.n	800a8ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b2:	2b04      	cmp	r3, #4
 800a8b4:	d107      	bne.n	800a8c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e005      	b.n	800a8d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a8ca:	893b      	ldrh	r3, [r7, #8]
 800a8cc:	b2da      	uxtb	r2, r3
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3718      	adds	r7, #24
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	00010002 	.word	0x00010002

0800a8e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b088      	sub	sp, #32
 800a8e8:	af02      	add	r7, sp, #8
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	4608      	mov	r0, r1
 800a8ee:	4611      	mov	r1, r2
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	817b      	strh	r3, [r7, #10]
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	813b      	strh	r3, [r7, #8]
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a90c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a91c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a920:	9300      	str	r3, [sp, #0]
 800a922:	6a3b      	ldr	r3, [r7, #32]
 800a924:	2200      	movs	r2, #0
 800a926:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a92a:	68f8      	ldr	r0, [r7, #12]
 800a92c:	f000 f8c2 	bl	800aab4 <I2C_WaitOnFlagUntilTimeout>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00d      	beq.n	800a952 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a944:	d103      	bne.n	800a94e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a94c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a94e:	2303      	movs	r3, #3
 800a950:	e0aa      	b.n	800aaa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a952:	897b      	ldrh	r3, [r7, #10]
 800a954:	b2db      	uxtb	r3, r3
 800a956:	461a      	mov	r2, r3
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a960:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a964:	6a3a      	ldr	r2, [r7, #32]
 800a966:	4952      	ldr	r1, [pc, #328]	; (800aab0 <I2C_RequestMemoryRead+0x1cc>)
 800a968:	68f8      	ldr	r0, [r7, #12]
 800a96a:	f000 f8fa 	bl	800ab62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d001      	beq.n	800a978 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a974:	2301      	movs	r3, #1
 800a976:	e097      	b.n	800aaa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a978:	2300      	movs	r3, #0
 800a97a:	617b      	str	r3, [r7, #20]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	695b      	ldr	r3, [r3, #20]
 800a982:	617b      	str	r3, [r7, #20]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	699b      	ldr	r3, [r3, #24]
 800a98a:	617b      	str	r3, [r7, #20]
 800a98c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a98e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a990:	6a39      	ldr	r1, [r7, #32]
 800a992:	68f8      	ldr	r0, [r7, #12]
 800a994:	f000 f964 	bl	800ac60 <I2C_WaitOnTXEFlagUntilTimeout>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00d      	beq.n	800a9ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a2:	2b04      	cmp	r3, #4
 800a9a4:	d107      	bne.n	800a9b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	e076      	b.n	800aaa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a9ba:	88fb      	ldrh	r3, [r7, #6]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d105      	bne.n	800a9cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a9c0:	893b      	ldrh	r3, [r7, #8]
 800a9c2:	b2da      	uxtb	r2, r3
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	611a      	str	r2, [r3, #16]
 800a9ca:	e021      	b.n	800aa10 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a9cc:	893b      	ldrh	r3, [r7, #8]
 800a9ce:	0a1b      	lsrs	r3, r3, #8
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	b2da      	uxtb	r2, r3
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a9da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9dc:	6a39      	ldr	r1, [r7, #32]
 800a9de:	68f8      	ldr	r0, [r7, #12]
 800a9e0:	f000 f93e 	bl	800ac60 <I2C_WaitOnTXEFlagUntilTimeout>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00d      	beq.n	800aa06 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ee:	2b04      	cmp	r3, #4
 800a9f0:	d107      	bne.n	800aa02 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aa02:	2301      	movs	r3, #1
 800aa04:	e050      	b.n	800aaa8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aa06:	893b      	ldrh	r3, [r7, #8]
 800aa08:	b2da      	uxtb	r2, r3
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa12:	6a39      	ldr	r1, [r7, #32]
 800aa14:	68f8      	ldr	r0, [r7, #12]
 800aa16:	f000 f923 	bl	800ac60 <I2C_WaitOnTXEFlagUntilTimeout>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d00d      	beq.n	800aa3c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa24:	2b04      	cmp	r3, #4
 800aa26:	d107      	bne.n	800aa38 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa36:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e035      	b.n	800aaa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa4a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4e:	9300      	str	r3, [sp, #0]
 800aa50:	6a3b      	ldr	r3, [r7, #32]
 800aa52:	2200      	movs	r2, #0
 800aa54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aa58:	68f8      	ldr	r0, [r7, #12]
 800aa5a:	f000 f82b 	bl	800aab4 <I2C_WaitOnFlagUntilTimeout>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d00d      	beq.n	800aa80 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa72:	d103      	bne.n	800aa7c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800aa7c:	2303      	movs	r3, #3
 800aa7e:	e013      	b.n	800aaa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800aa80:	897b      	ldrh	r3, [r7, #10]
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	f043 0301 	orr.w	r3, r3, #1
 800aa88:	b2da      	uxtb	r2, r3
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa92:	6a3a      	ldr	r2, [r7, #32]
 800aa94:	4906      	ldr	r1, [pc, #24]	; (800aab0 <I2C_RequestMemoryRead+0x1cc>)
 800aa96:	68f8      	ldr	r0, [r7, #12]
 800aa98:	f000 f863 	bl	800ab62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d001      	beq.n	800aaa6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e000      	b.n	800aaa8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800aaa6:	2300      	movs	r3, #0
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3718      	adds	r7, #24
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	00010002 	.word	0x00010002

0800aab4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	60b9      	str	r1, [r7, #8]
 800aabe:	603b      	str	r3, [r7, #0]
 800aac0:	4613      	mov	r3, r2
 800aac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aac4:	e025      	b.n	800ab12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aacc:	d021      	beq.n	800ab12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aace:	f7fe fc2d 	bl	800932c <HAL_GetTick>
 800aad2:	4602      	mov	r2, r0
 800aad4:	69bb      	ldr	r3, [r7, #24]
 800aad6:	1ad3      	subs	r3, r2, r3
 800aad8:	683a      	ldr	r2, [r7, #0]
 800aada:	429a      	cmp	r2, r3
 800aadc:	d302      	bcc.n	800aae4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d116      	bne.n	800ab12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2220      	movs	r2, #32
 800aaee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aafe:	f043 0220 	orr.w	r2, r3, #32
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	e023      	b.n	800ab5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	0c1b      	lsrs	r3, r3, #16
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d10d      	bne.n	800ab38 <I2C_WaitOnFlagUntilTimeout+0x84>
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	695b      	ldr	r3, [r3, #20]
 800ab22:	43da      	mvns	r2, r3
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	4013      	ands	r3, r2
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	bf0c      	ite	eq
 800ab2e:	2301      	moveq	r3, #1
 800ab30:	2300      	movne	r3, #0
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	461a      	mov	r2, r3
 800ab36:	e00c      	b.n	800ab52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	699b      	ldr	r3, [r3, #24]
 800ab3e:	43da      	mvns	r2, r3
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	4013      	ands	r3, r2
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	bf0c      	ite	eq
 800ab4a:	2301      	moveq	r3, #1
 800ab4c:	2300      	movne	r3, #0
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	461a      	mov	r2, r3
 800ab52:	79fb      	ldrb	r3, [r7, #7]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d0b6      	beq.n	800aac6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ab58:	2300      	movs	r3, #0
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b084      	sub	sp, #16
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	60f8      	str	r0, [r7, #12]
 800ab6a:	60b9      	str	r1, [r7, #8]
 800ab6c:	607a      	str	r2, [r7, #4]
 800ab6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ab70:	e051      	b.n	800ac16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	695b      	ldr	r3, [r3, #20]
 800ab78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab80:	d123      	bne.n	800abca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ab9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2220      	movs	r2, #32
 800aba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2200      	movs	r2, #0
 800abae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abb6:	f043 0204 	orr.w	r2, r3, #4
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800abc6:	2301      	movs	r3, #1
 800abc8:	e046      	b.n	800ac58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd0:	d021      	beq.n	800ac16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abd2:	f7fe fbab 	bl	800932c <HAL_GetTick>
 800abd6:	4602      	mov	r2, r0
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	1ad3      	subs	r3, r2, r3
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	429a      	cmp	r2, r3
 800abe0:	d302      	bcc.n	800abe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d116      	bne.n	800ac16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2200      	movs	r2, #0
 800abec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2220      	movs	r2, #32
 800abf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2200      	movs	r2, #0
 800abfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac02:	f043 0220 	orr.w	r2, r3, #32
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ac12:	2301      	movs	r3, #1
 800ac14:	e020      	b.n	800ac58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	0c1b      	lsrs	r3, r3, #16
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d10c      	bne.n	800ac3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	695b      	ldr	r3, [r3, #20]
 800ac26:	43da      	mvns	r2, r3
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	4013      	ands	r3, r2
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	bf14      	ite	ne
 800ac32:	2301      	movne	r3, #1
 800ac34:	2300      	moveq	r3, #0
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	e00b      	b.n	800ac52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	699b      	ldr	r3, [r3, #24]
 800ac40:	43da      	mvns	r2, r3
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	4013      	ands	r3, r2
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	bf14      	ite	ne
 800ac4c:	2301      	movne	r3, #1
 800ac4e:	2300      	moveq	r3, #0
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d18d      	bne.n	800ab72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800ac56:	2300      	movs	r3, #0
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	60b9      	str	r1, [r7, #8]
 800ac6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ac6c:	e02d      	b.n	800acca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ac6e:	68f8      	ldr	r0, [r7, #12]
 800ac70:	f000 f8ce 	bl	800ae10 <I2C_IsAcknowledgeFailed>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d001      	beq.n	800ac7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e02d      	b.n	800acda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac84:	d021      	beq.n	800acca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac86:	f7fe fb51 	bl	800932c <HAL_GetTick>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	1ad3      	subs	r3, r2, r3
 800ac90:	68ba      	ldr	r2, [r7, #8]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d302      	bcc.n	800ac9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d116      	bne.n	800acca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2220      	movs	r2, #32
 800aca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2200      	movs	r2, #0
 800acae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb6:	f043 0220 	orr.w	r2, r3, #32
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2200      	movs	r2, #0
 800acc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	e007      	b.n	800acda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	695b      	ldr	r3, [r3, #20]
 800acd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acd4:	2b80      	cmp	r3, #128	; 0x80
 800acd6:	d1ca      	bne.n	800ac6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800acd8:	2300      	movs	r3, #0
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3710      	adds	r7, #16
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b084      	sub	sp, #16
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	60f8      	str	r0, [r7, #12]
 800acea:	60b9      	str	r1, [r7, #8]
 800acec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800acee:	e02d      	b.n	800ad4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	f000 f88d 	bl	800ae10 <I2C_IsAcknowledgeFailed>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d001      	beq.n	800ad00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800acfc:	2301      	movs	r3, #1
 800acfe:	e02d      	b.n	800ad5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad06:	d021      	beq.n	800ad4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad08:	f7fe fb10 	bl	800932c <HAL_GetTick>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	1ad3      	subs	r3, r2, r3
 800ad12:	68ba      	ldr	r2, [r7, #8]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d302      	bcc.n	800ad1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d116      	bne.n	800ad4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2200      	movs	r2, #0
 800ad22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2220      	movs	r2, #32
 800ad28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad38:	f043 0220 	orr.w	r2, r3, #32
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	e007      	b.n	800ad5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	695b      	ldr	r3, [r3, #20]
 800ad52:	f003 0304 	and.w	r3, r3, #4
 800ad56:	2b04      	cmp	r3, #4
 800ad58:	d1ca      	bne.n	800acf0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ad5a:	2300      	movs	r3, #0
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3710      	adds	r7, #16
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	60b9      	str	r1, [r7, #8]
 800ad6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ad70:	e042      	b.n	800adf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	695b      	ldr	r3, [r3, #20]
 800ad78:	f003 0310 	and.w	r3, r3, #16
 800ad7c:	2b10      	cmp	r3, #16
 800ad7e:	d119      	bne.n	800adb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f06f 0210 	mvn.w	r2, #16
 800ad88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2220      	movs	r2, #32
 800ad94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2200      	movs	r2, #0
 800adac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800adb0:	2301      	movs	r3, #1
 800adb2:	e029      	b.n	800ae08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adb4:	f7fe faba 	bl	800932c <HAL_GetTick>
 800adb8:	4602      	mov	r2, r0
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	1ad3      	subs	r3, r2, r3
 800adbe:	68ba      	ldr	r2, [r7, #8]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d302      	bcc.n	800adca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d116      	bne.n	800adf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2200      	movs	r2, #0
 800adce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2220      	movs	r2, #32
 800add4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2200      	movs	r2, #0
 800addc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade4:	f043 0220 	orr.w	r2, r3, #32
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2200      	movs	r2, #0
 800adf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800adf4:	2301      	movs	r3, #1
 800adf6:	e007      	b.n	800ae08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	695b      	ldr	r3, [r3, #20]
 800adfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae02:	2b40      	cmp	r3, #64	; 0x40
 800ae04:	d1b5      	bne.n	800ad72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ae06:	2300      	movs	r3, #0
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3710      	adds	r7, #16
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b083      	sub	sp, #12
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	695b      	ldr	r3, [r3, #20]
 800ae1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae26:	d11b      	bne.n	800ae60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ae30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2200      	movs	r2, #0
 800ae36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2220      	movs	r2, #32
 800ae3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae4c:	f043 0204 	orr.w	r2, r3, #4
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	e000      	b.n	800ae62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	370c      	adds	r7, #12
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr

0800ae6e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ae6e:	b480      	push	{r7}
 800ae70:	b083      	sub	sp, #12
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
 800ae76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	2b20      	cmp	r3, #32
 800ae82:	d129      	bne.n	800aed8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2224      	movs	r2, #36	; 0x24
 800ae88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	681a      	ldr	r2, [r3, #0]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f022 0201 	bic.w	r2, r2, #1
 800ae9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f022 0210 	bic.w	r2, r2, #16
 800aeaa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	683a      	ldr	r2, [r7, #0]
 800aeb8:	430a      	orrs	r2, r1
 800aeba:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f042 0201 	orr.w	r2, r2, #1
 800aeca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2220      	movs	r2, #32
 800aed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800aed4:	2300      	movs	r3, #0
 800aed6:	e000      	b.n	800aeda <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800aed8:	2302      	movs	r3, #2
  }
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	370c      	adds	r7, #12
 800aede:	46bd      	mov	sp, r7
 800aee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee4:	4770      	bx	lr

0800aee6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800aee6:	b480      	push	{r7}
 800aee8:	b085      	sub	sp, #20
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
 800aeee:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800aef0:	2300      	movs	r3, #0
 800aef2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	2b20      	cmp	r3, #32
 800aefe:	d12a      	bne.n	800af56 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2224      	movs	r2, #36	; 0x24
 800af04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f022 0201 	bic.w	r2, r2, #1
 800af16:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800af20:	89fb      	ldrh	r3, [r7, #14]
 800af22:	f023 030f 	bic.w	r3, r3, #15
 800af26:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	b29a      	uxth	r2, r3
 800af2c:	89fb      	ldrh	r3, [r7, #14]
 800af2e:	4313      	orrs	r3, r2
 800af30:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	89fa      	ldrh	r2, [r7, #14]
 800af38:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f042 0201 	orr.w	r2, r2, #1
 800af48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2220      	movs	r2, #32
 800af4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800af52:	2300      	movs	r3, #0
 800af54:	e000      	b.n	800af58 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800af56:	2302      	movs	r3, #2
  }
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3714      	adds	r7, #20
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800af64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af66:	b08f      	sub	sp, #60	; 0x3c
 800af68:	af0a      	add	r7, sp, #40	; 0x28
 800af6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d101      	bne.n	800af76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	e10f      	b.n	800b196 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800af82:	b2db      	uxtb	r3, r3
 800af84:	2b00      	cmp	r3, #0
 800af86:	d106      	bne.n	800af96 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f00e fb1b 	bl	80195cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2203      	movs	r2, #3
 800af9a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d102      	bne.n	800afb0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2200      	movs	r2, #0
 800afae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4618      	mov	r0, r3
 800afb6:	f005 f82c 	bl	8010012 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	603b      	str	r3, [r7, #0]
 800afc0:	687e      	ldr	r6, [r7, #4]
 800afc2:	466d      	mov	r5, sp
 800afc4:	f106 0410 	add.w	r4, r6, #16
 800afc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800afca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800afcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800afce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800afd0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800afd4:	e885 0003 	stmia.w	r5, {r0, r1}
 800afd8:	1d33      	adds	r3, r6, #4
 800afda:	cb0e      	ldmia	r3, {r1, r2, r3}
 800afdc:	6838      	ldr	r0, [r7, #0]
 800afde:	f004 ff03 	bl	800fde8 <USB_CoreInit>
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d005      	beq.n	800aff4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2202      	movs	r2, #2
 800afec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800aff0:	2301      	movs	r3, #1
 800aff2:	e0d0      	b.n	800b196 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2100      	movs	r1, #0
 800affa:	4618      	mov	r0, r3
 800affc:	f005 f81a 	bl	8010034 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b000:	2300      	movs	r3, #0
 800b002:	73fb      	strb	r3, [r7, #15]
 800b004:	e04a      	b.n	800b09c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b006:	7bfa      	ldrb	r2, [r7, #15]
 800b008:	6879      	ldr	r1, [r7, #4]
 800b00a:	4613      	mov	r3, r2
 800b00c:	00db      	lsls	r3, r3, #3
 800b00e:	1a9b      	subs	r3, r3, r2
 800b010:	009b      	lsls	r3, r3, #2
 800b012:	440b      	add	r3, r1
 800b014:	333d      	adds	r3, #61	; 0x3d
 800b016:	2201      	movs	r2, #1
 800b018:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b01a:	7bfa      	ldrb	r2, [r7, #15]
 800b01c:	6879      	ldr	r1, [r7, #4]
 800b01e:	4613      	mov	r3, r2
 800b020:	00db      	lsls	r3, r3, #3
 800b022:	1a9b      	subs	r3, r3, r2
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	440b      	add	r3, r1
 800b028:	333c      	adds	r3, #60	; 0x3c
 800b02a:	7bfa      	ldrb	r2, [r7, #15]
 800b02c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b02e:	7bfa      	ldrb	r2, [r7, #15]
 800b030:	7bfb      	ldrb	r3, [r7, #15]
 800b032:	b298      	uxth	r0, r3
 800b034:	6879      	ldr	r1, [r7, #4]
 800b036:	4613      	mov	r3, r2
 800b038:	00db      	lsls	r3, r3, #3
 800b03a:	1a9b      	subs	r3, r3, r2
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	440b      	add	r3, r1
 800b040:	3342      	adds	r3, #66	; 0x42
 800b042:	4602      	mov	r2, r0
 800b044:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b046:	7bfa      	ldrb	r2, [r7, #15]
 800b048:	6879      	ldr	r1, [r7, #4]
 800b04a:	4613      	mov	r3, r2
 800b04c:	00db      	lsls	r3, r3, #3
 800b04e:	1a9b      	subs	r3, r3, r2
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	440b      	add	r3, r1
 800b054:	333f      	adds	r3, #63	; 0x3f
 800b056:	2200      	movs	r2, #0
 800b058:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b05a:	7bfa      	ldrb	r2, [r7, #15]
 800b05c:	6879      	ldr	r1, [r7, #4]
 800b05e:	4613      	mov	r3, r2
 800b060:	00db      	lsls	r3, r3, #3
 800b062:	1a9b      	subs	r3, r3, r2
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	440b      	add	r3, r1
 800b068:	3344      	adds	r3, #68	; 0x44
 800b06a:	2200      	movs	r2, #0
 800b06c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b06e:	7bfa      	ldrb	r2, [r7, #15]
 800b070:	6879      	ldr	r1, [r7, #4]
 800b072:	4613      	mov	r3, r2
 800b074:	00db      	lsls	r3, r3, #3
 800b076:	1a9b      	subs	r3, r3, r2
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	440b      	add	r3, r1
 800b07c:	3348      	adds	r3, #72	; 0x48
 800b07e:	2200      	movs	r2, #0
 800b080:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b082:	7bfa      	ldrb	r2, [r7, #15]
 800b084:	6879      	ldr	r1, [r7, #4]
 800b086:	4613      	mov	r3, r2
 800b088:	00db      	lsls	r3, r3, #3
 800b08a:	1a9b      	subs	r3, r3, r2
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	440b      	add	r3, r1
 800b090:	3350      	adds	r3, #80	; 0x50
 800b092:	2200      	movs	r2, #0
 800b094:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b096:	7bfb      	ldrb	r3, [r7, #15]
 800b098:	3301      	adds	r3, #1
 800b09a:	73fb      	strb	r3, [r7, #15]
 800b09c:	7bfa      	ldrb	r2, [r7, #15]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d3af      	bcc.n	800b006 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	73fb      	strb	r3, [r7, #15]
 800b0aa:	e044      	b.n	800b136 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b0ac:	7bfa      	ldrb	r2, [r7, #15]
 800b0ae:	6879      	ldr	r1, [r7, #4]
 800b0b0:	4613      	mov	r3, r2
 800b0b2:	00db      	lsls	r3, r3, #3
 800b0b4:	1a9b      	subs	r3, r3, r2
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	440b      	add	r3, r1
 800b0ba:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800b0be:	2200      	movs	r2, #0
 800b0c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b0c2:	7bfa      	ldrb	r2, [r7, #15]
 800b0c4:	6879      	ldr	r1, [r7, #4]
 800b0c6:	4613      	mov	r3, r2
 800b0c8:	00db      	lsls	r3, r3, #3
 800b0ca:	1a9b      	subs	r3, r3, r2
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	440b      	add	r3, r1
 800b0d0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b0d4:	7bfa      	ldrb	r2, [r7, #15]
 800b0d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b0d8:	7bfa      	ldrb	r2, [r7, #15]
 800b0da:	6879      	ldr	r1, [r7, #4]
 800b0dc:	4613      	mov	r3, r2
 800b0de:	00db      	lsls	r3, r3, #3
 800b0e0:	1a9b      	subs	r3, r3, r2
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	440b      	add	r3, r1
 800b0e6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b0ee:	7bfa      	ldrb	r2, [r7, #15]
 800b0f0:	6879      	ldr	r1, [r7, #4]
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	00db      	lsls	r3, r3, #3
 800b0f6:	1a9b      	subs	r3, r3, r2
 800b0f8:	009b      	lsls	r3, r3, #2
 800b0fa:	440b      	add	r3, r1
 800b0fc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800b100:	2200      	movs	r2, #0
 800b102:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b104:	7bfa      	ldrb	r2, [r7, #15]
 800b106:	6879      	ldr	r1, [r7, #4]
 800b108:	4613      	mov	r3, r2
 800b10a:	00db      	lsls	r3, r3, #3
 800b10c:	1a9b      	subs	r3, r3, r2
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	440b      	add	r3, r1
 800b112:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b116:	2200      	movs	r2, #0
 800b118:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b11a:	7bfa      	ldrb	r2, [r7, #15]
 800b11c:	6879      	ldr	r1, [r7, #4]
 800b11e:	4613      	mov	r3, r2
 800b120:	00db      	lsls	r3, r3, #3
 800b122:	1a9b      	subs	r3, r3, r2
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	440b      	add	r3, r1
 800b128:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800b12c:	2200      	movs	r2, #0
 800b12e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b130:	7bfb      	ldrb	r3, [r7, #15]
 800b132:	3301      	adds	r3, #1
 800b134:	73fb      	strb	r3, [r7, #15]
 800b136:	7bfa      	ldrb	r2, [r7, #15]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d3b5      	bcc.n	800b0ac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	603b      	str	r3, [r7, #0]
 800b146:	687e      	ldr	r6, [r7, #4]
 800b148:	466d      	mov	r5, sp
 800b14a:	f106 0410 	add.w	r4, r6, #16
 800b14e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b150:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b154:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b156:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b15a:	e885 0003 	stmia.w	r5, {r0, r1}
 800b15e:	1d33      	adds	r3, r6, #4
 800b160:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b162:	6838      	ldr	r0, [r7, #0]
 800b164:	f004 ffb2 	bl	80100cc <USB_DevInit>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d005      	beq.n	800b17a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2202      	movs	r2, #2
 800b172:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800b176:	2301      	movs	r3, #1
 800b178:	e00d      	b.n	800b196 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2201      	movs	r2, #1
 800b186:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4618      	mov	r0, r3
 800b190:	f006 f82e 	bl	80111f0 <USB_DevDisconnect>

  return HAL_OK;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3714      	adds	r7, #20
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b19e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b19e:	b580      	push	{r7, lr}
 800b1a0:	b084      	sub	sp, #16
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b1b2:	2b01      	cmp	r3, #1
 800b1b4:	d101      	bne.n	800b1ba <HAL_PCD_Start+0x1c>
 800b1b6:	2302      	movs	r3, #2
 800b1b8:	e020      	b.n	800b1fc <HAL_PCD_Start+0x5e>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2201      	movs	r2, #1
 800b1be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d109      	bne.n	800b1de <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d005      	beq.n	800b1de <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f004 ff04 	bl	800fff0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f005 ffde 	bl	80111ae <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b1fa:	2300      	movs	r3, #0
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3710      	adds	r7, #16
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b204:	b590      	push	{r4, r7, lr}
 800b206:	b08d      	sub	sp, #52	; 0x34
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b212:	6a3b      	ldr	r3, [r7, #32]
 800b214:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4618      	mov	r0, r3
 800b21c:	f006 f89c 	bl	8011358 <USB_GetMode>
 800b220:	4603      	mov	r3, r0
 800b222:	2b00      	cmp	r3, #0
 800b224:	f040 839d 	bne.w	800b962 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4618      	mov	r0, r3
 800b22e:	f006 f800 	bl	8011232 <USB_ReadInterrupts>
 800b232:	4603      	mov	r3, r0
 800b234:	2b00      	cmp	r3, #0
 800b236:	f000 8393 	beq.w	800b960 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4618      	mov	r0, r3
 800b240:	f005 fff7 	bl	8011232 <USB_ReadInterrupts>
 800b244:	4603      	mov	r3, r0
 800b246:	f003 0302 	and.w	r3, r3, #2
 800b24a:	2b02      	cmp	r3, #2
 800b24c:	d107      	bne.n	800b25e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	695a      	ldr	r2, [r3, #20]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f002 0202 	and.w	r2, r2, #2
 800b25c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4618      	mov	r0, r3
 800b264:	f005 ffe5 	bl	8011232 <USB_ReadInterrupts>
 800b268:	4603      	mov	r3, r0
 800b26a:	f003 0310 	and.w	r3, r3, #16
 800b26e:	2b10      	cmp	r3, #16
 800b270:	d161      	bne.n	800b336 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	699a      	ldr	r2, [r3, #24]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f022 0210 	bic.w	r2, r2, #16
 800b280:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800b282:	6a3b      	ldr	r3, [r7, #32]
 800b284:	6a1b      	ldr	r3, [r3, #32]
 800b286:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800b288:	69bb      	ldr	r3, [r7, #24]
 800b28a:	f003 020f 	and.w	r2, r3, #15
 800b28e:	4613      	mov	r3, r2
 800b290:	00db      	lsls	r3, r3, #3
 800b292:	1a9b      	subs	r3, r3, r2
 800b294:	009b      	lsls	r3, r3, #2
 800b296:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	4413      	add	r3, r2
 800b29e:	3304      	adds	r3, #4
 800b2a0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	0c5b      	lsrs	r3, r3, #17
 800b2a6:	f003 030f 	and.w	r3, r3, #15
 800b2aa:	2b02      	cmp	r3, #2
 800b2ac:	d124      	bne.n	800b2f8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b2ae:	69ba      	ldr	r2, [r7, #24]
 800b2b0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800b2b4:	4013      	ands	r3, r2
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d035      	beq.n	800b326 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	091b      	lsrs	r3, r3, #4
 800b2c2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b2c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	6a38      	ldr	r0, [r7, #32]
 800b2ce:	f005 fe1c 	bl	8010f0a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	68da      	ldr	r2, [r3, #12]
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	091b      	lsrs	r3, r3, #4
 800b2da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b2de:	441a      	add	r2, r3
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	699a      	ldr	r2, [r3, #24]
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	091b      	lsrs	r3, r3, #4
 800b2ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b2f0:	441a      	add	r2, r3
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	619a      	str	r2, [r3, #24]
 800b2f6:	e016      	b.n	800b326 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800b2f8:	69bb      	ldr	r3, [r7, #24]
 800b2fa:	0c5b      	lsrs	r3, r3, #17
 800b2fc:	f003 030f 	and.w	r3, r3, #15
 800b300:	2b06      	cmp	r3, #6
 800b302:	d110      	bne.n	800b326 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b30a:	2208      	movs	r2, #8
 800b30c:	4619      	mov	r1, r3
 800b30e:	6a38      	ldr	r0, [r7, #32]
 800b310:	f005 fdfb 	bl	8010f0a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	699a      	ldr	r2, [r3, #24]
 800b318:	69bb      	ldr	r3, [r7, #24]
 800b31a:	091b      	lsrs	r3, r3, #4
 800b31c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b320:	441a      	add	r2, r3
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	699a      	ldr	r2, [r3, #24]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f042 0210 	orr.w	r2, r2, #16
 800b334:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4618      	mov	r0, r3
 800b33c:	f005 ff79 	bl	8011232 <USB_ReadInterrupts>
 800b340:	4603      	mov	r3, r0
 800b342:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b346:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b34a:	d16e      	bne.n	800b42a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800b34c:	2300      	movs	r3, #0
 800b34e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4618      	mov	r0, r3
 800b356:	f005 ff7f 	bl	8011258 <USB_ReadDevAllOutEpInterrupt>
 800b35a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800b35c:	e062      	b.n	800b424 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b360:	f003 0301 	and.w	r3, r3, #1
 800b364:	2b00      	cmp	r3, #0
 800b366:	d057      	beq.n	800b418 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b36e:	b2d2      	uxtb	r2, r2
 800b370:	4611      	mov	r1, r2
 800b372:	4618      	mov	r0, r3
 800b374:	f005 ffa4 	bl	80112c0 <USB_ReadDevOutEPInterrupt>
 800b378:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	f003 0301 	and.w	r3, r3, #1
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00c      	beq.n	800b39e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b386:	015a      	lsls	r2, r3, #5
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	4413      	add	r3, r2
 800b38c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b390:	461a      	mov	r2, r3
 800b392:	2301      	movs	r3, #1
 800b394:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b396:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 fdb1 	bl	800bf00 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	f003 0308 	and.w	r3, r3, #8
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d00c      	beq.n	800b3c2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3aa:	015a      	lsls	r2, r3, #5
 800b3ac:	69fb      	ldr	r3, [r7, #28]
 800b3ae:	4413      	add	r3, r2
 800b3b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3b4:	461a      	mov	r2, r3
 800b3b6:	2308      	movs	r3, #8
 800b3b8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b3ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 feab 	bl	800c118 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	f003 0310 	and.w	r3, r3, #16
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d008      	beq.n	800b3de <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ce:	015a      	lsls	r2, r3, #5
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3d8:	461a      	mov	r2, r3
 800b3da:	2310      	movs	r3, #16
 800b3dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	f003 0320 	and.w	r3, r3, #32
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d008      	beq.n	800b3fa <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ea:	015a      	lsls	r2, r3, #5
 800b3ec:	69fb      	ldr	r3, [r7, #28]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	2320      	movs	r3, #32
 800b3f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b400:	2b00      	cmp	r3, #0
 800b402:	d009      	beq.n	800b418 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b406:	015a      	lsls	r2, r3, #5
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	4413      	add	r3, r2
 800b40c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b410:	461a      	mov	r2, r3
 800b412:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b416:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41a:	3301      	adds	r3, #1
 800b41c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b420:	085b      	lsrs	r3, r3, #1
 800b422:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b426:	2b00      	cmp	r3, #0
 800b428:	d199      	bne.n	800b35e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4618      	mov	r0, r3
 800b430:	f005 feff 	bl	8011232 <USB_ReadInterrupts>
 800b434:	4603      	mov	r3, r0
 800b436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b43a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b43e:	f040 80c0 	bne.w	800b5c2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4618      	mov	r0, r3
 800b448:	f005 ff20 	bl	801128c <USB_ReadDevAllInEpInterrupt>
 800b44c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b44e:	2300      	movs	r3, #0
 800b450:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b452:	e0b2      	b.n	800b5ba <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b456:	f003 0301 	and.w	r3, r3, #1
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	f000 80a7 	beq.w	800b5ae <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b466:	b2d2      	uxtb	r2, r2
 800b468:	4611      	mov	r1, r2
 800b46a:	4618      	mov	r0, r3
 800b46c:	f005 ff46 	bl	80112fc <USB_ReadDevInEPInterrupt>
 800b470:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	f003 0301 	and.w	r3, r3, #1
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d057      	beq.n	800b52c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47e:	f003 030f 	and.w	r3, r3, #15
 800b482:	2201      	movs	r2, #1
 800b484:	fa02 f303 	lsl.w	r3, r2, r3
 800b488:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b48a:	69fb      	ldr	r3, [r7, #28]
 800b48c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	43db      	mvns	r3, r3
 800b496:	69f9      	ldr	r1, [r7, #28]
 800b498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b49c:	4013      	ands	r3, r2
 800b49e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a2:	015a      	lsls	r2, r3, #5
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	691b      	ldr	r3, [r3, #16]
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d132      	bne.n	800b520 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b4ba:	6879      	ldr	r1, [r7, #4]
 800b4bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4be:	4613      	mov	r3, r2
 800b4c0:	00db      	lsls	r3, r3, #3
 800b4c2:	1a9b      	subs	r3, r3, r2
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	440b      	add	r3, r1
 800b4c8:	3348      	adds	r3, #72	; 0x48
 800b4ca:	6819      	ldr	r1, [r3, #0]
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	00db      	lsls	r3, r3, #3
 800b4d4:	1a9b      	subs	r3, r3, r2
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	4403      	add	r3, r0
 800b4da:	3344      	adds	r3, #68	; 0x44
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4419      	add	r1, r3
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4e4:	4613      	mov	r3, r2
 800b4e6:	00db      	lsls	r3, r3, #3
 800b4e8:	1a9b      	subs	r3, r3, r2
 800b4ea:	009b      	lsls	r3, r3, #2
 800b4ec:	4403      	add	r3, r0
 800b4ee:	3348      	adds	r3, #72	; 0x48
 800b4f0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d113      	bne.n	800b520 <HAL_PCD_IRQHandler+0x31c>
 800b4f8:	6879      	ldr	r1, [r7, #4]
 800b4fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4fc:	4613      	mov	r3, r2
 800b4fe:	00db      	lsls	r3, r3, #3
 800b500:	1a9b      	subs	r3, r3, r2
 800b502:	009b      	lsls	r3, r3, #2
 800b504:	440b      	add	r3, r1
 800b506:	3350      	adds	r3, #80	; 0x50
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d108      	bne.n	800b520 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6818      	ldr	r0, [r3, #0]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b518:	461a      	mov	r2, r3
 800b51a:	2101      	movs	r1, #1
 800b51c:	f005 ff4e 	bl	80113bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b522:	b2db      	uxtb	r3, r3
 800b524:	4619      	mov	r1, r3
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f00e f8df 	bl	80196ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	f003 0308 	and.w	r3, r3, #8
 800b532:	2b00      	cmp	r3, #0
 800b534:	d008      	beq.n	800b548 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b538:	015a      	lsls	r2, r3, #5
 800b53a:	69fb      	ldr	r3, [r7, #28]
 800b53c:	4413      	add	r3, r2
 800b53e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b542:	461a      	mov	r2, r3
 800b544:	2308      	movs	r3, #8
 800b546:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	f003 0310 	and.w	r3, r3, #16
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d008      	beq.n	800b564 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b554:	015a      	lsls	r2, r3, #5
 800b556:	69fb      	ldr	r3, [r7, #28]
 800b558:	4413      	add	r3, r2
 800b55a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b55e:	461a      	mov	r2, r3
 800b560:	2310      	movs	r3, #16
 800b562:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d008      	beq.n	800b580 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b570:	015a      	lsls	r2, r3, #5
 800b572:	69fb      	ldr	r3, [r7, #28]
 800b574:	4413      	add	r3, r2
 800b576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b57a:	461a      	mov	r2, r3
 800b57c:	2340      	movs	r3, #64	; 0x40
 800b57e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	f003 0302 	and.w	r3, r3, #2
 800b586:	2b00      	cmp	r3, #0
 800b588:	d008      	beq.n	800b59c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58c:	015a      	lsls	r2, r3, #5
 800b58e:	69fb      	ldr	r3, [r7, #28]
 800b590:	4413      	add	r3, r2
 800b592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b596:	461a      	mov	r2, r3
 800b598:	2302      	movs	r3, #2
 800b59a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d003      	beq.n	800b5ae <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b5a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f000 fc1b 	bl	800bde4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b6:	085b      	lsrs	r3, r3, #1
 800b5b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	f47f af49 	bne.w	800b454 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f005 fe33 	bl	8011232 <USB_ReadInterrupts>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5d6:	d122      	bne.n	800b61e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	69fa      	ldr	r2, [r7, #28]
 800b5e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5e6:	f023 0301 	bic.w	r3, r3, #1
 800b5ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d108      	bne.n	800b608 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b5fe:	2100      	movs	r1, #0
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 fe27 	bl	800c254 <HAL_PCDEx_LPM_Callback>
 800b606:	e002      	b.n	800b60e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f00e f8e5 	bl	80197d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	695a      	ldr	r2, [r3, #20]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b61c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4618      	mov	r0, r3
 800b624:	f005 fe05 	bl	8011232 <USB_ReadInterrupts>
 800b628:	4603      	mov	r3, r0
 800b62a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b62e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b632:	d112      	bne.n	800b65a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b63a:	689b      	ldr	r3, [r3, #8]
 800b63c:	f003 0301 	and.w	r3, r3, #1
 800b640:	2b01      	cmp	r3, #1
 800b642:	d102      	bne.n	800b64a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f00e f8a1 	bl	801978c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	695a      	ldr	r2, [r3, #20]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b658:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	4618      	mov	r0, r3
 800b660:	f005 fde7 	bl	8011232 <USB_ReadInterrupts>
 800b664:	4603      	mov	r3, r0
 800b666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b66a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b66e:	f040 80c7 	bne.w	800b800 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b672:	69fb      	ldr	r3, [r7, #28]
 800b674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	69fa      	ldr	r2, [r7, #28]
 800b67c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b680:	f023 0301 	bic.w	r3, r3, #1
 800b684:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2110      	movs	r1, #16
 800b68c:	4618      	mov	r0, r3
 800b68e:	f004 fe81 	bl	8010394 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b692:	2300      	movs	r3, #0
 800b694:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b696:	e056      	b.n	800b746 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b69a:	015a      	lsls	r2, r3, #5
 800b69c:	69fb      	ldr	r3, [r7, #28]
 800b69e:	4413      	add	r3, r2
 800b6a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6a4:	461a      	mov	r2, r3
 800b6a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b6aa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ae:	015a      	lsls	r2, r3, #5
 800b6b0:	69fb      	ldr	r3, [r7, #28]
 800b6b2:	4413      	add	r3, r2
 800b6b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6bc:	0151      	lsls	r1, r2, #5
 800b6be:	69fa      	ldr	r2, [r7, #28]
 800b6c0:	440a      	add	r2, r1
 800b6c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b6ca:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ce:	015a      	lsls	r2, r3, #5
 800b6d0:	69fb      	ldr	r3, [r7, #28]
 800b6d2:	4413      	add	r3, r2
 800b6d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6dc:	0151      	lsls	r1, r2, #5
 800b6de:	69fa      	ldr	r2, [r7, #28]
 800b6e0:	440a      	add	r2, r1
 800b6e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b6ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ee:	015a      	lsls	r2, r3, #5
 800b6f0:	69fb      	ldr	r3, [r7, #28]
 800b6f2:	4413      	add	r3, r2
 800b6f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b6fe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b702:	015a      	lsls	r2, r3, #5
 800b704:	69fb      	ldr	r3, [r7, #28]
 800b706:	4413      	add	r3, r2
 800b708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b710:	0151      	lsls	r1, r2, #5
 800b712:	69fa      	ldr	r2, [r7, #28]
 800b714:	440a      	add	r2, r1
 800b716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b71a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b71e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b722:	015a      	lsls	r2, r3, #5
 800b724:	69fb      	ldr	r3, [r7, #28]
 800b726:	4413      	add	r3, r2
 800b728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b730:	0151      	lsls	r1, r2, #5
 800b732:	69fa      	ldr	r2, [r7, #28]
 800b734:	440a      	add	r2, r1
 800b736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b73a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b73e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b742:	3301      	adds	r3, #1
 800b744:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d3a3      	bcc.n	800b698 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b750:	69fb      	ldr	r3, [r7, #28]
 800b752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b756:	69db      	ldr	r3, [r3, #28]
 800b758:	69fa      	ldr	r2, [r7, #28]
 800b75a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b75e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b762:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d016      	beq.n	800b79a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b76c:	69fb      	ldr	r3, [r7, #28]
 800b76e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b776:	69fa      	ldr	r2, [r7, #28]
 800b778:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b77c:	f043 030b 	orr.w	r3, r3, #11
 800b780:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b784:	69fb      	ldr	r3, [r7, #28]
 800b786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b78a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b78c:	69fa      	ldr	r2, [r7, #28]
 800b78e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b792:	f043 030b 	orr.w	r3, r3, #11
 800b796:	6453      	str	r3, [r2, #68]	; 0x44
 800b798:	e015      	b.n	800b7c6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b79a:	69fb      	ldr	r3, [r7, #28]
 800b79c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7a0:	695b      	ldr	r3, [r3, #20]
 800b7a2:	69fa      	ldr	r2, [r7, #28]
 800b7a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b7ac:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800b7b0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b7b2:	69fb      	ldr	r3, [r7, #28]
 800b7b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7b8:	691b      	ldr	r3, [r3, #16]
 800b7ba:	69fa      	ldr	r2, [r7, #28]
 800b7bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7c0:	f043 030b 	orr.w	r3, r3, #11
 800b7c4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b7c6:	69fb      	ldr	r3, [r7, #28]
 800b7c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	69fa      	ldr	r2, [r7, #28]
 800b7d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b7d8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6818      	ldr	r0, [r3, #0]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	691b      	ldr	r3, [r3, #16]
 800b7e2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	f005 fde6 	bl	80113bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	695a      	ldr	r2, [r3, #20]
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b7fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4618      	mov	r0, r3
 800b806:	f005 fd14 	bl	8011232 <USB_ReadInterrupts>
 800b80a:	4603      	mov	r3, r0
 800b80c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b814:	d124      	bne.n	800b860 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	4618      	mov	r0, r3
 800b81c:	f005 fdaa 	bl	8011374 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4618      	mov	r0, r3
 800b826:	f004 fe12 	bl	801044e <USB_GetDevSpeed>
 800b82a:	4603      	mov	r3, r0
 800b82c:	461a      	mov	r2, r3
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681c      	ldr	r4, [r3, #0]
 800b836:	f001 f995 	bl	800cb64 <HAL_RCC_GetHCLKFreq>
 800b83a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b840:	b2db      	uxtb	r3, r3
 800b842:	461a      	mov	r2, r3
 800b844:	4620      	mov	r0, r4
 800b846:	f004 fb31 	bl	800feac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f00d ff75 	bl	801973a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	695a      	ldr	r2, [r3, #20]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800b85e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4618      	mov	r0, r3
 800b866:	f005 fce4 	bl	8011232 <USB_ReadInterrupts>
 800b86a:	4603      	mov	r3, r0
 800b86c:	f003 0308 	and.w	r3, r3, #8
 800b870:	2b08      	cmp	r3, #8
 800b872:	d10a      	bne.n	800b88a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f00d ff52 	bl	801971e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	695a      	ldr	r2, [r3, #20]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f002 0208 	and.w	r2, r2, #8
 800b888:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4618      	mov	r0, r3
 800b890:	f005 fccf 	bl	8011232 <USB_ReadInterrupts>
 800b894:	4603      	mov	r3, r0
 800b896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b89a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b89e:	d10f      	bne.n	800b8c0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f00d ffb4 	bl	8019818 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	695a      	ldr	r2, [r3, #20]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800b8be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f005 fcb4 	bl	8011232 <USB_ReadInterrupts>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b8d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b8d4:	d10f      	bne.n	800b8f6 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	4619      	mov	r1, r3
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f00d ff87 	bl	80197f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	695a      	ldr	r2, [r3, #20]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800b8f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f005 fc99 	bl	8011232 <USB_ReadInterrupts>
 800b900:	4603      	mov	r3, r0
 800b902:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b90a:	d10a      	bne.n	800b922 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f00d ff95 	bl	801983c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	695a      	ldr	r2, [r3, #20]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800b920:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	4618      	mov	r0, r3
 800b928:	f005 fc83 	bl	8011232 <USB_ReadInterrupts>
 800b92c:	4603      	mov	r3, r0
 800b92e:	f003 0304 	and.w	r3, r3, #4
 800b932:	2b04      	cmp	r3, #4
 800b934:	d115      	bne.n	800b962 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b93e:	69bb      	ldr	r3, [r7, #24]
 800b940:	f003 0304 	and.w	r3, r3, #4
 800b944:	2b00      	cmp	r3, #0
 800b946:	d002      	beq.n	800b94e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f00d ff85 	bl	8019858 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	6859      	ldr	r1, [r3, #4]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	69ba      	ldr	r2, [r7, #24]
 800b95a:	430a      	orrs	r2, r1
 800b95c:	605a      	str	r2, [r3, #4]
 800b95e:	e000      	b.n	800b962 <HAL_PCD_IRQHandler+0x75e>
      return;
 800b960:	bf00      	nop
    }
  }
}
 800b962:	3734      	adds	r7, #52	; 0x34
 800b964:	46bd      	mov	sp, r7
 800b966:	bd90      	pop	{r4, r7, pc}

0800b968 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b082      	sub	sp, #8
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	460b      	mov	r3, r1
 800b972:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	d101      	bne.n	800b982 <HAL_PCD_SetAddress+0x1a>
 800b97e:	2302      	movs	r3, #2
 800b980:	e013      	b.n	800b9aa <HAL_PCD_SetAddress+0x42>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2201      	movs	r2, #1
 800b986:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	78fa      	ldrb	r2, [r7, #3]
 800b98e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	78fa      	ldrb	r2, [r7, #3]
 800b998:	4611      	mov	r1, r2
 800b99a:	4618      	mov	r0, r3
 800b99c:	f005 fbe1 	bl	8011162 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b9a8:	2300      	movs	r3, #0
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3708      	adds	r7, #8
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b084      	sub	sp, #16
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
 800b9ba:	4608      	mov	r0, r1
 800b9bc:	4611      	mov	r1, r2
 800b9be:	461a      	mov	r2, r3
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	70fb      	strb	r3, [r7, #3]
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	803b      	strh	r3, [r7, #0]
 800b9c8:	4613      	mov	r3, r2
 800b9ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b9d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	da0f      	bge.n	800b9f8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b9d8:	78fb      	ldrb	r3, [r7, #3]
 800b9da:	f003 020f 	and.w	r2, r3, #15
 800b9de:	4613      	mov	r3, r2
 800b9e0:	00db      	lsls	r3, r3, #3
 800b9e2:	1a9b      	subs	r3, r3, r2
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	3338      	adds	r3, #56	; 0x38
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	4413      	add	r3, r2
 800b9ec:	3304      	adds	r3, #4
 800b9ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	705a      	strb	r2, [r3, #1]
 800b9f6:	e00f      	b.n	800ba18 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b9f8:	78fb      	ldrb	r3, [r7, #3]
 800b9fa:	f003 020f 	and.w	r2, r3, #15
 800b9fe:	4613      	mov	r3, r2
 800ba00:	00db      	lsls	r3, r3, #3
 800ba02:	1a9b      	subs	r3, r3, r2
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	3304      	adds	r3, #4
 800ba10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2200      	movs	r2, #0
 800ba16:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ba18:	78fb      	ldrb	r3, [r7, #3]
 800ba1a:	f003 030f 	and.w	r3, r3, #15
 800ba1e:	b2da      	uxtb	r2, r3
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800ba24:	883a      	ldrh	r2, [r7, #0]
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	78ba      	ldrb	r2, [r7, #2]
 800ba2e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	785b      	ldrb	r3, [r3, #1]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d004      	beq.n	800ba42 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	b29a      	uxth	r2, r3
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ba42:	78bb      	ldrb	r3, [r7, #2]
 800ba44:	2b02      	cmp	r3, #2
 800ba46:	d102      	bne.n	800ba4e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ba54:	2b01      	cmp	r3, #1
 800ba56:	d101      	bne.n	800ba5c <HAL_PCD_EP_Open+0xaa>
 800ba58:	2302      	movs	r3, #2
 800ba5a:	e00e      	b.n	800ba7a <HAL_PCD_EP_Open+0xc8>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2201      	movs	r2, #1
 800ba60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	68f9      	ldr	r1, [r7, #12]
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f004 fd14 	bl	8010498 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2200      	movs	r2, #0
 800ba74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800ba78:	7afb      	ldrb	r3, [r7, #11]
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3710      	adds	r7, #16
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}

0800ba82 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ba82:	b580      	push	{r7, lr}
 800ba84:	b084      	sub	sp, #16
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ba8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	da0f      	bge.n	800bab6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ba96:	78fb      	ldrb	r3, [r7, #3]
 800ba98:	f003 020f 	and.w	r2, r3, #15
 800ba9c:	4613      	mov	r3, r2
 800ba9e:	00db      	lsls	r3, r3, #3
 800baa0:	1a9b      	subs	r3, r3, r2
 800baa2:	009b      	lsls	r3, r3, #2
 800baa4:	3338      	adds	r3, #56	; 0x38
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	4413      	add	r3, r2
 800baaa:	3304      	adds	r3, #4
 800baac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2201      	movs	r2, #1
 800bab2:	705a      	strb	r2, [r3, #1]
 800bab4:	e00f      	b.n	800bad6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bab6:	78fb      	ldrb	r3, [r7, #3]
 800bab8:	f003 020f 	and.w	r2, r3, #15
 800babc:	4613      	mov	r3, r2
 800babe:	00db      	lsls	r3, r3, #3
 800bac0:	1a9b      	subs	r3, r3, r2
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	4413      	add	r3, r2
 800bacc:	3304      	adds	r3, #4
 800bace:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2200      	movs	r2, #0
 800bad4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800bad6:	78fb      	ldrb	r3, [r7, #3]
 800bad8:	f003 030f 	and.w	r3, r3, #15
 800badc:	b2da      	uxtb	r2, r3
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d101      	bne.n	800baf0 <HAL_PCD_EP_Close+0x6e>
 800baec:	2302      	movs	r3, #2
 800baee:	e00e      	b.n	800bb0e <HAL_PCD_EP_Close+0x8c>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2201      	movs	r2, #1
 800baf4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	68f9      	ldr	r1, [r7, #12]
 800bafe:	4618      	mov	r0, r3
 800bb00:	f004 fd52 	bl	80105a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800bb0c:	2300      	movs	r3, #0
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}

0800bb16 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bb16:	b580      	push	{r7, lr}
 800bb18:	b086      	sub	sp, #24
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	60f8      	str	r0, [r7, #12]
 800bb1e:	607a      	str	r2, [r7, #4]
 800bb20:	603b      	str	r3, [r7, #0]
 800bb22:	460b      	mov	r3, r1
 800bb24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bb26:	7afb      	ldrb	r3, [r7, #11]
 800bb28:	f003 020f 	and.w	r2, r3, #15
 800bb2c:	4613      	mov	r3, r2
 800bb2e:	00db      	lsls	r3, r3, #3
 800bb30:	1a9b      	subs	r3, r3, r2
 800bb32:	009b      	lsls	r3, r3, #2
 800bb34:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	3304      	adds	r3, #4
 800bb3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	683a      	ldr	r2, [r7, #0]
 800bb4a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	2200      	movs	r2, #0
 800bb56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bb58:	7afb      	ldrb	r3, [r7, #11]
 800bb5a:	f003 030f 	and.w	r3, r3, #15
 800bb5e:	b2da      	uxtb	r2, r3
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	691b      	ldr	r3, [r3, #16]
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d102      	bne.n	800bb72 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bb72:	7afb      	ldrb	r3, [r7, #11]
 800bb74:	f003 030f 	and.w	r3, r3, #15
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d109      	bne.n	800bb90 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	6818      	ldr	r0, [r3, #0]
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	691b      	ldr	r3, [r3, #16]
 800bb84:	b2db      	uxtb	r3, r3
 800bb86:	461a      	mov	r2, r3
 800bb88:	6979      	ldr	r1, [r7, #20]
 800bb8a:	f005 f82d 	bl	8010be8 <USB_EP0StartXfer>
 800bb8e:	e008      	b.n	800bba2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	6818      	ldr	r0, [r3, #0]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	691b      	ldr	r3, [r3, #16]
 800bb98:	b2db      	uxtb	r3, r3
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	6979      	ldr	r1, [r7, #20]
 800bb9e:	f004 fddf 	bl	8010760 <USB_EPStartXfer>
  }

  return HAL_OK;
 800bba2:	2300      	movs	r3, #0
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3718      	adds	r7, #24
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b083      	sub	sp, #12
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800bbb8:	78fb      	ldrb	r3, [r7, #3]
 800bbba:	f003 020f 	and.w	r2, r3, #15
 800bbbe:	6879      	ldr	r1, [r7, #4]
 800bbc0:	4613      	mov	r3, r2
 800bbc2:	00db      	lsls	r3, r3, #3
 800bbc4:	1a9b      	subs	r3, r3, r2
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	440b      	add	r3, r1
 800bbca:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800bbce:	681b      	ldr	r3, [r3, #0]
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	370c      	adds	r7, #12
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr

0800bbdc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b086      	sub	sp, #24
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	607a      	str	r2, [r7, #4]
 800bbe6:	603b      	str	r3, [r7, #0]
 800bbe8:	460b      	mov	r3, r1
 800bbea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bbec:	7afb      	ldrb	r3, [r7, #11]
 800bbee:	f003 020f 	and.w	r2, r3, #15
 800bbf2:	4613      	mov	r3, r2
 800bbf4:	00db      	lsls	r3, r3, #3
 800bbf6:	1a9b      	subs	r3, r3, r2
 800bbf8:	009b      	lsls	r3, r3, #2
 800bbfa:	3338      	adds	r3, #56	; 0x38
 800bbfc:	68fa      	ldr	r2, [r7, #12]
 800bbfe:	4413      	add	r3, r2
 800bc00:	3304      	adds	r3, #4
 800bc02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	683a      	ldr	r2, [r7, #0]
 800bc0e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	2200      	movs	r2, #0
 800bc14:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	2201      	movs	r2, #1
 800bc1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bc1c:	7afb      	ldrb	r3, [r7, #11]
 800bc1e:	f003 030f 	and.w	r3, r3, #15
 800bc22:	b2da      	uxtb	r2, r3
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	691b      	ldr	r3, [r3, #16]
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d102      	bne.n	800bc36 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bc36:	7afb      	ldrb	r3, [r7, #11]
 800bc38:	f003 030f 	and.w	r3, r3, #15
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d109      	bne.n	800bc54 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	6818      	ldr	r0, [r3, #0]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	691b      	ldr	r3, [r3, #16]
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	6979      	ldr	r1, [r7, #20]
 800bc4e:	f004 ffcb 	bl	8010be8 <USB_EP0StartXfer>
 800bc52:	e008      	b.n	800bc66 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	6818      	ldr	r0, [r3, #0]
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	691b      	ldr	r3, [r3, #16]
 800bc5c:	b2db      	uxtb	r3, r3
 800bc5e:	461a      	mov	r2, r3
 800bc60:	6979      	ldr	r1, [r7, #20]
 800bc62:	f004 fd7d 	bl	8010760 <USB_EPStartXfer>
  }

  return HAL_OK;
 800bc66:	2300      	movs	r3, #0
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3718      	adds	r7, #24
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}

0800bc70 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	460b      	mov	r3, r1
 800bc7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800bc7c:	78fb      	ldrb	r3, [r7, #3]
 800bc7e:	f003 020f 	and.w	r2, r3, #15
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d901      	bls.n	800bc8e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	e050      	b.n	800bd30 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bc8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	da0f      	bge.n	800bcb6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bc96:	78fb      	ldrb	r3, [r7, #3]
 800bc98:	f003 020f 	and.w	r2, r3, #15
 800bc9c:	4613      	mov	r3, r2
 800bc9e:	00db      	lsls	r3, r3, #3
 800bca0:	1a9b      	subs	r3, r3, r2
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	3338      	adds	r3, #56	; 0x38
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	4413      	add	r3, r2
 800bcaa:	3304      	adds	r3, #4
 800bcac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	705a      	strb	r2, [r3, #1]
 800bcb4:	e00d      	b.n	800bcd2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800bcb6:	78fa      	ldrb	r2, [r7, #3]
 800bcb8:	4613      	mov	r3, r2
 800bcba:	00db      	lsls	r3, r3, #3
 800bcbc:	1a9b      	subs	r3, r3, r2
 800bcbe:	009b      	lsls	r3, r3, #2
 800bcc0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	4413      	add	r3, r2
 800bcc8:	3304      	adds	r3, #4
 800bcca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bcd8:	78fb      	ldrb	r3, [r7, #3]
 800bcda:	f003 030f 	and.w	r3, r3, #15
 800bcde:	b2da      	uxtb	r2, r3
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	d101      	bne.n	800bcf2 <HAL_PCD_EP_SetStall+0x82>
 800bcee:	2302      	movs	r3, #2
 800bcf0:	e01e      	b.n	800bd30 <HAL_PCD_EP_SetStall+0xc0>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	68f9      	ldr	r1, [r7, #12]
 800bd00:	4618      	mov	r0, r3
 800bd02:	f005 f95a 	bl	8010fba <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bd06:	78fb      	ldrb	r3, [r7, #3]
 800bd08:	f003 030f 	and.w	r3, r3, #15
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d10a      	bne.n	800bd26 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6818      	ldr	r0, [r3, #0]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	691b      	ldr	r3, [r3, #16]
 800bd18:	b2d9      	uxtb	r1, r3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bd20:	461a      	mov	r2, r3
 800bd22:	f005 fb4b 	bl	80113bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800bd2e:	2300      	movs	r3, #0
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3710      	adds	r7, #16
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	460b      	mov	r3, r1
 800bd42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800bd44:	78fb      	ldrb	r3, [r7, #3]
 800bd46:	f003 020f 	and.w	r2, r3, #15
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d901      	bls.n	800bd56 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800bd52:	2301      	movs	r3, #1
 800bd54:	e042      	b.n	800bddc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bd56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	da0f      	bge.n	800bd7e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bd5e:	78fb      	ldrb	r3, [r7, #3]
 800bd60:	f003 020f 	and.w	r2, r3, #15
 800bd64:	4613      	mov	r3, r2
 800bd66:	00db      	lsls	r3, r3, #3
 800bd68:	1a9b      	subs	r3, r3, r2
 800bd6a:	009b      	lsls	r3, r3, #2
 800bd6c:	3338      	adds	r3, #56	; 0x38
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	4413      	add	r3, r2
 800bd72:	3304      	adds	r3, #4
 800bd74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2201      	movs	r2, #1
 800bd7a:	705a      	strb	r2, [r3, #1]
 800bd7c:	e00f      	b.n	800bd9e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bd7e:	78fb      	ldrb	r3, [r7, #3]
 800bd80:	f003 020f 	and.w	r2, r3, #15
 800bd84:	4613      	mov	r3, r2
 800bd86:	00db      	lsls	r3, r3, #3
 800bd88:	1a9b      	subs	r3, r3, r2
 800bd8a:	009b      	lsls	r3, r3, #2
 800bd8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	4413      	add	r3, r2
 800bd94:	3304      	adds	r3, #4
 800bd96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2200      	movs	r2, #0
 800bda2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bda4:	78fb      	ldrb	r3, [r7, #3]
 800bda6:	f003 030f 	and.w	r3, r3, #15
 800bdaa:	b2da      	uxtb	r2, r3
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	d101      	bne.n	800bdbe <HAL_PCD_EP_ClrStall+0x86>
 800bdba:	2302      	movs	r3, #2
 800bdbc:	e00e      	b.n	800bddc <HAL_PCD_EP_ClrStall+0xa4>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	68f9      	ldr	r1, [r7, #12]
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f005 f962 	bl	8011096 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800bdda:	2300      	movs	r3, #0
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3710      	adds	r7, #16
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b08a      	sub	sp, #40	; 0x28
 800bde8:	af02      	add	r7, sp, #8
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800bdf8:	683a      	ldr	r2, [r7, #0]
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	00db      	lsls	r3, r3, #3
 800bdfe:	1a9b      	subs	r3, r3, r2
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	3338      	adds	r3, #56	; 0x38
 800be04:	687a      	ldr	r2, [r7, #4]
 800be06:	4413      	add	r3, r2
 800be08:	3304      	adds	r3, #4
 800be0a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	699a      	ldr	r2, [r3, #24]
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	695b      	ldr	r3, [r3, #20]
 800be14:	429a      	cmp	r2, r3
 800be16:	d901      	bls.n	800be1c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800be18:	2301      	movs	r3, #1
 800be1a:	e06c      	b.n	800bef6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	695a      	ldr	r2, [r3, #20]
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	699b      	ldr	r3, [r3, #24]
 800be24:	1ad3      	subs	r3, r2, r3
 800be26:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	689b      	ldr	r3, [r3, #8]
 800be2c:	69fa      	ldr	r2, [r7, #28]
 800be2e:	429a      	cmp	r2, r3
 800be30:	d902      	bls.n	800be38 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	689b      	ldr	r3, [r3, #8]
 800be36:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	3303      	adds	r3, #3
 800be3c:	089b      	lsrs	r3, r3, #2
 800be3e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800be40:	e02b      	b.n	800be9a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	695a      	ldr	r2, [r3, #20]
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	699b      	ldr	r3, [r3, #24]
 800be4a:	1ad3      	subs	r3, r2, r3
 800be4c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	69fa      	ldr	r2, [r7, #28]
 800be54:	429a      	cmp	r2, r3
 800be56:	d902      	bls.n	800be5e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	689b      	ldr	r3, [r3, #8]
 800be5c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	3303      	adds	r3, #3
 800be62:	089b      	lsrs	r3, r3, #2
 800be64:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	68d9      	ldr	r1, [r3, #12]
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	b2da      	uxtb	r2, r3
 800be6e:	69fb      	ldr	r3, [r7, #28]
 800be70:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800be76:	b2db      	uxtb	r3, r3
 800be78:	9300      	str	r3, [sp, #0]
 800be7a:	4603      	mov	r3, r0
 800be7c:	6978      	ldr	r0, [r7, #20]
 800be7e:	f005 f806 	bl	8010e8e <USB_WritePacket>

    ep->xfer_buff  += len;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	68da      	ldr	r2, [r3, #12]
 800be86:	69fb      	ldr	r3, [r7, #28]
 800be88:	441a      	add	r2, r3
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	699a      	ldr	r2, [r3, #24]
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	441a      	add	r2, r3
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	015a      	lsls	r2, r3, #5
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	4413      	add	r3, r2
 800bea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bea6:	699b      	ldr	r3, [r3, #24]
 800bea8:	b29b      	uxth	r3, r3
 800beaa:	69ba      	ldr	r2, [r7, #24]
 800beac:	429a      	cmp	r2, r3
 800beae:	d809      	bhi.n	800bec4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	699a      	ldr	r2, [r3, #24]
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800beb8:	429a      	cmp	r2, r3
 800beba:	d203      	bcs.n	800bec4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	695b      	ldr	r3, [r3, #20]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d1be      	bne.n	800be42 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	695a      	ldr	r2, [r3, #20]
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	699b      	ldr	r3, [r3, #24]
 800becc:	429a      	cmp	r2, r3
 800bece:	d811      	bhi.n	800bef4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	f003 030f 	and.w	r3, r3, #15
 800bed6:	2201      	movs	r2, #1
 800bed8:	fa02 f303 	lsl.w	r3, r2, r3
 800bedc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	43db      	mvns	r3, r3
 800beea:	6939      	ldr	r1, [r7, #16]
 800beec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bef0:	4013      	ands	r3, r2
 800bef2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3720      	adds	r7, #32
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
	...

0800bf00 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b086      	sub	sp, #24
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	333c      	adds	r3, #60	; 0x3c
 800bf18:	3304      	adds	r3, #4
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	015a      	lsls	r2, r3, #5
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	4413      	add	r3, r2
 800bf26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf2a:	689b      	ldr	r3, [r3, #8]
 800bf2c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	691b      	ldr	r3, [r3, #16]
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	f040 80a0 	bne.w	800c078 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	f003 0308 	and.w	r3, r3, #8
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d015      	beq.n	800bf6e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	4a72      	ldr	r2, [pc, #456]	; (800c110 <PCD_EP_OutXfrComplete_int+0x210>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	f240 80dd 	bls.w	800c106 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	f000 80d7 	beq.w	800c106 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	015a      	lsls	r2, r3, #5
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	4413      	add	r3, r2
 800bf60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf64:	461a      	mov	r2, r3
 800bf66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf6a:	6093      	str	r3, [r2, #8]
 800bf6c:	e0cb      	b.n	800c106 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	f003 0320 	and.w	r3, r3, #32
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d009      	beq.n	800bf8c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	015a      	lsls	r2, r3, #5
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	4413      	add	r3, r2
 800bf80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf84:	461a      	mov	r2, r3
 800bf86:	2320      	movs	r3, #32
 800bf88:	6093      	str	r3, [r2, #8]
 800bf8a:	e0bc      	b.n	800c106 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	f040 80b7 	bne.w	800c106 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	4a5d      	ldr	r2, [pc, #372]	; (800c110 <PCD_EP_OutXfrComplete_int+0x210>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d90f      	bls.n	800bfc0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d00a      	beq.n	800bfc0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	015a      	lsls	r2, r3, #5
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	4413      	add	r3, r2
 800bfb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bfbc:	6093      	str	r3, [r2, #8]
 800bfbe:	e0a2      	b.n	800c106 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800bfc0:	6879      	ldr	r1, [r7, #4]
 800bfc2:	683a      	ldr	r2, [r7, #0]
 800bfc4:	4613      	mov	r3, r2
 800bfc6:	00db      	lsls	r3, r3, #3
 800bfc8:	1a9b      	subs	r3, r3, r2
 800bfca:	009b      	lsls	r3, r3, #2
 800bfcc:	440b      	add	r3, r1
 800bfce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800bfd2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	0159      	lsls	r1, r3, #5
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	440b      	add	r3, r1
 800bfdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfe0:	691b      	ldr	r3, [r3, #16]
 800bfe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800bfe6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	683a      	ldr	r2, [r7, #0]
 800bfec:	4613      	mov	r3, r2
 800bfee:	00db      	lsls	r3, r3, #3
 800bff0:	1a9b      	subs	r3, r3, r2
 800bff2:	009b      	lsls	r3, r3, #2
 800bff4:	4403      	add	r3, r0
 800bff6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800bffa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800bffc:	6879      	ldr	r1, [r7, #4]
 800bffe:	683a      	ldr	r2, [r7, #0]
 800c000:	4613      	mov	r3, r2
 800c002:	00db      	lsls	r3, r3, #3
 800c004:	1a9b      	subs	r3, r3, r2
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	440b      	add	r3, r1
 800c00a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c00e:	6819      	ldr	r1, [r3, #0]
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	683a      	ldr	r2, [r7, #0]
 800c014:	4613      	mov	r3, r2
 800c016:	00db      	lsls	r3, r3, #3
 800c018:	1a9b      	subs	r3, r3, r2
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	4403      	add	r3, r0
 800c01e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4419      	add	r1, r3
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	683a      	ldr	r2, [r7, #0]
 800c02a:	4613      	mov	r3, r2
 800c02c:	00db      	lsls	r3, r3, #3
 800c02e:	1a9b      	subs	r3, r3, r2
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	4403      	add	r3, r0
 800c034:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c038:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d114      	bne.n	800c06a <PCD_EP_OutXfrComplete_int+0x16a>
 800c040:	6879      	ldr	r1, [r7, #4]
 800c042:	683a      	ldr	r2, [r7, #0]
 800c044:	4613      	mov	r3, r2
 800c046:	00db      	lsls	r3, r3, #3
 800c048:	1a9b      	subs	r3, r3, r2
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	440b      	add	r3, r1
 800c04e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d108      	bne.n	800c06a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6818      	ldr	r0, [r3, #0]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c062:	461a      	mov	r2, r3
 800c064:	2101      	movs	r1, #1
 800c066:	f005 f9a9 	bl	80113bc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	b2db      	uxtb	r3, r3
 800c06e:	4619      	mov	r1, r3
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f00d fb1f 	bl	80196b4 <HAL_PCD_DataOutStageCallback>
 800c076:	e046      	b.n	800c106 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	4a26      	ldr	r2, [pc, #152]	; (800c114 <PCD_EP_OutXfrComplete_int+0x214>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d124      	bne.n	800c0ca <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c086:	2b00      	cmp	r3, #0
 800c088:	d00a      	beq.n	800c0a0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	015a      	lsls	r2, r3, #5
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	4413      	add	r3, r2
 800c092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c096:	461a      	mov	r2, r3
 800c098:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c09c:	6093      	str	r3, [r2, #8]
 800c09e:	e032      	b.n	800c106 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	f003 0320 	and.w	r3, r3, #32
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d008      	beq.n	800c0bc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	015a      	lsls	r2, r3, #5
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	2320      	movs	r3, #32
 800c0ba:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	b2db      	uxtb	r3, r3
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f00d faf6 	bl	80196b4 <HAL_PCD_DataOutStageCallback>
 800c0c8:	e01d      	b.n	800c106 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d114      	bne.n	800c0fa <PCD_EP_OutXfrComplete_int+0x1fa>
 800c0d0:	6879      	ldr	r1, [r7, #4]
 800c0d2:	683a      	ldr	r2, [r7, #0]
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	00db      	lsls	r3, r3, #3
 800c0d8:	1a9b      	subs	r3, r3, r2
 800c0da:	009b      	lsls	r3, r3, #2
 800c0dc:	440b      	add	r3, r1
 800c0de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d108      	bne.n	800c0fa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6818      	ldr	r0, [r3, #0]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	2100      	movs	r1, #0
 800c0f6:	f005 f961 	bl	80113bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	b2db      	uxtb	r3, r3
 800c0fe:	4619      	mov	r1, r3
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f00d fad7 	bl	80196b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c106:	2300      	movs	r3, #0
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3718      	adds	r7, #24
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	4f54300a 	.word	0x4f54300a
 800c114:	4f54310a 	.word	0x4f54310a

0800c118 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b086      	sub	sp, #24
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	333c      	adds	r3, #60	; 0x3c
 800c130:	3304      	adds	r3, #4
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	015a      	lsls	r2, r3, #5
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	4413      	add	r3, r2
 800c13e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c142:	689b      	ldr	r3, [r3, #8]
 800c144:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	4a15      	ldr	r2, [pc, #84]	; (800c1a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d90e      	bls.n	800c16c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c154:	2b00      	cmp	r3, #0
 800c156:	d009      	beq.n	800c16c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	015a      	lsls	r2, r3, #5
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	4413      	add	r3, r2
 800c160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c164:	461a      	mov	r2, r3
 800c166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c16a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f00d fa8f 	bl	8019690 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	4a0a      	ldr	r2, [pc, #40]	; (800c1a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800c176:	4293      	cmp	r3, r2
 800c178:	d90c      	bls.n	800c194 <PCD_EP_OutSetupPacket_int+0x7c>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	691b      	ldr	r3, [r3, #16]
 800c17e:	2b01      	cmp	r3, #1
 800c180:	d108      	bne.n	800c194 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6818      	ldr	r0, [r3, #0]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c18c:	461a      	mov	r2, r3
 800c18e:	2101      	movs	r1, #1
 800c190:	f005 f914 	bl	80113bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c194:	2300      	movs	r3, #0
}
 800c196:	4618      	mov	r0, r3
 800c198:	3718      	adds	r7, #24
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	bf00      	nop
 800c1a0:	4f54300a 	.word	0x4f54300a

0800c1a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b085      	sub	sp, #20
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	70fb      	strb	r3, [r7, #3]
 800c1b0:	4613      	mov	r3, r2
 800c1b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c1bc:	78fb      	ldrb	r3, [r7, #3]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d107      	bne.n	800c1d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c1c2:	883b      	ldrh	r3, [r7, #0]
 800c1c4:	0419      	lsls	r1, r3, #16
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	68ba      	ldr	r2, [r7, #8]
 800c1cc:	430a      	orrs	r2, r1
 800c1ce:	629a      	str	r2, [r3, #40]	; 0x28
 800c1d0:	e028      	b.n	800c224 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1d8:	0c1b      	lsrs	r3, r3, #16
 800c1da:	68ba      	ldr	r2, [r7, #8]
 800c1dc:	4413      	add	r3, r2
 800c1de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	73fb      	strb	r3, [r7, #15]
 800c1e4:	e00d      	b.n	800c202 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681a      	ldr	r2, [r3, #0]
 800c1ea:	7bfb      	ldrb	r3, [r7, #15]
 800c1ec:	3340      	adds	r3, #64	; 0x40
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	4413      	add	r3, r2
 800c1f2:	685b      	ldr	r3, [r3, #4]
 800c1f4:	0c1b      	lsrs	r3, r3, #16
 800c1f6:	68ba      	ldr	r2, [r7, #8]
 800c1f8:	4413      	add	r3, r2
 800c1fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c1fc:	7bfb      	ldrb	r3, [r7, #15]
 800c1fe:	3301      	adds	r3, #1
 800c200:	73fb      	strb	r3, [r7, #15]
 800c202:	7bfa      	ldrb	r2, [r7, #15]
 800c204:	78fb      	ldrb	r3, [r7, #3]
 800c206:	3b01      	subs	r3, #1
 800c208:	429a      	cmp	r2, r3
 800c20a:	d3ec      	bcc.n	800c1e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c20c:	883b      	ldrh	r3, [r7, #0]
 800c20e:	0418      	lsls	r0, r3, #16
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6819      	ldr	r1, [r3, #0]
 800c214:	78fb      	ldrb	r3, [r7, #3]
 800c216:	3b01      	subs	r3, #1
 800c218:	68ba      	ldr	r2, [r7, #8]
 800c21a:	4302      	orrs	r2, r0
 800c21c:	3340      	adds	r3, #64	; 0x40
 800c21e:	009b      	lsls	r3, r3, #2
 800c220:	440b      	add	r3, r1
 800c222:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c224:	2300      	movs	r3, #0
}
 800c226:	4618      	mov	r0, r3
 800c228:	3714      	adds	r7, #20
 800c22a:	46bd      	mov	sp, r7
 800c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c230:	4770      	bx	lr

0800c232 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c232:	b480      	push	{r7}
 800c234:	b083      	sub	sp, #12
 800c236:	af00      	add	r7, sp, #0
 800c238:	6078      	str	r0, [r7, #4]
 800c23a:	460b      	mov	r3, r1
 800c23c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	887a      	ldrh	r2, [r7, #2]
 800c244:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800c246:	2300      	movs	r3, #0
}
 800c248:	4618      	mov	r0, r3
 800c24a:	370c      	adds	r7, #12
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr

0800c254 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c254:	b480      	push	{r7}
 800c256:	b083      	sub	sp, #12
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	460b      	mov	r3, r1
 800c25e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c260:	bf00      	nop
 800c262:	370c      	adds	r7, #12
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr

0800c26c <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800c26c:	b480      	push	{r7}
 800c26e:	b083      	sub	sp, #12
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800c274:	4b05      	ldr	r3, [pc, #20]	; (800c28c <HAL_PWR_EnableWakeUpPin+0x20>)
 800c276:	685a      	ldr	r2, [r3, #4]
 800c278:	4904      	ldr	r1, [pc, #16]	; (800c28c <HAL_PWR_EnableWakeUpPin+0x20>)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4313      	orrs	r3, r2
 800c27e:	604b      	str	r3, [r1, #4]
}
 800c280:	bf00      	nop
 800c282:	370c      	adds	r7, #12
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr
 800c28c:	40007000 	.word	0x40007000

0800c290 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800c290:	b480      	push	{r7}
 800c292:	b083      	sub	sp, #12
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 800c298:	4b06      	ldr	r3, [pc, #24]	; (800c2b4 <HAL_PWR_DisableWakeUpPin+0x24>)
 800c29a:	685a      	ldr	r2, [r3, #4]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	43db      	mvns	r3, r3
 800c2a0:	4904      	ldr	r1, [pc, #16]	; (800c2b4 <HAL_PWR_DisableWakeUpPin+0x24>)
 800c2a2:	4013      	ands	r3, r2
 800c2a4:	604b      	str	r3, [r1, #4]
}
 800c2a6:	bf00      	nop
 800c2a8:	370c      	adds	r7, #12
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr
 800c2b2:	bf00      	nop
 800c2b4:	40007000 	.word	0x40007000

0800c2b8 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800c2bc:	4b08      	ldr	r3, [pc, #32]	; (800c2e0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	4a07      	ldr	r2, [pc, #28]	; (800c2e0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800c2c2:	f043 0302 	orr.w	r3, r3, #2
 800c2c6:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800c2c8:	4b06      	ldr	r3, [pc, #24]	; (800c2e4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800c2ca:	691b      	ldr	r3, [r3, #16]
 800c2cc:	4a05      	ldr	r2, [pc, #20]	; (800c2e4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800c2ce:	f043 0304 	orr.w	r3, r3, #4
 800c2d2:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800c2d4:	bf30      	wfi
}
 800c2d6:	bf00      	nop
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr
 800c2e0:	40007000 	.word	0x40007000
 800c2e4:	e000ed00 	.word	0xe000ed00

0800c2e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b086      	sub	sp, #24
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d101      	bne.n	800c2fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e264      	b.n	800c7c4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f003 0301 	and.w	r3, r3, #1
 800c302:	2b00      	cmp	r3, #0
 800c304:	d075      	beq.n	800c3f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c306:	4ba3      	ldr	r3, [pc, #652]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	f003 030c 	and.w	r3, r3, #12
 800c30e:	2b04      	cmp	r3, #4
 800c310:	d00c      	beq.n	800c32c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c312:	4ba0      	ldr	r3, [pc, #640]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c314:	689b      	ldr	r3, [r3, #8]
 800c316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c31a:	2b08      	cmp	r3, #8
 800c31c:	d112      	bne.n	800c344 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c31e:	4b9d      	ldr	r3, [pc, #628]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c32a:	d10b      	bne.n	800c344 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c32c:	4b99      	ldr	r3, [pc, #612]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c334:	2b00      	cmp	r3, #0
 800c336:	d05b      	beq.n	800c3f0 <HAL_RCC_OscConfig+0x108>
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d157      	bne.n	800c3f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c340:	2301      	movs	r3, #1
 800c342:	e23f      	b.n	800c7c4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	685b      	ldr	r3, [r3, #4]
 800c348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c34c:	d106      	bne.n	800c35c <HAL_RCC_OscConfig+0x74>
 800c34e:	4b91      	ldr	r3, [pc, #580]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4a90      	ldr	r2, [pc, #576]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c358:	6013      	str	r3, [r2, #0]
 800c35a:	e01d      	b.n	800c398 <HAL_RCC_OscConfig+0xb0>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c364:	d10c      	bne.n	800c380 <HAL_RCC_OscConfig+0x98>
 800c366:	4b8b      	ldr	r3, [pc, #556]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	4a8a      	ldr	r2, [pc, #552]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c36c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c370:	6013      	str	r3, [r2, #0]
 800c372:	4b88      	ldr	r3, [pc, #544]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a87      	ldr	r2, [pc, #540]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c37c:	6013      	str	r3, [r2, #0]
 800c37e:	e00b      	b.n	800c398 <HAL_RCC_OscConfig+0xb0>
 800c380:	4b84      	ldr	r3, [pc, #528]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	4a83      	ldr	r2, [pc, #524]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c38a:	6013      	str	r3, [r2, #0]
 800c38c:	4b81      	ldr	r3, [pc, #516]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a80      	ldr	r2, [pc, #512]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d013      	beq.n	800c3c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c3a0:	f7fc ffc4 	bl	800932c <HAL_GetTick>
 800c3a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c3a6:	e008      	b.n	800c3ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c3a8:	f7fc ffc0 	bl	800932c <HAL_GetTick>
 800c3ac:	4602      	mov	r2, r0
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	1ad3      	subs	r3, r2, r3
 800c3b2:	2b64      	cmp	r3, #100	; 0x64
 800c3b4:	d901      	bls.n	800c3ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c3b6:	2303      	movs	r3, #3
 800c3b8:	e204      	b.n	800c7c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c3ba:	4b76      	ldr	r3, [pc, #472]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d0f0      	beq.n	800c3a8 <HAL_RCC_OscConfig+0xc0>
 800c3c6:	e014      	b.n	800c3f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c3c8:	f7fc ffb0 	bl	800932c <HAL_GetTick>
 800c3cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c3ce:	e008      	b.n	800c3e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c3d0:	f7fc ffac 	bl	800932c <HAL_GetTick>
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	1ad3      	subs	r3, r2, r3
 800c3da:	2b64      	cmp	r3, #100	; 0x64
 800c3dc:	d901      	bls.n	800c3e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c3de:	2303      	movs	r3, #3
 800c3e0:	e1f0      	b.n	800c7c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c3e2:	4b6c      	ldr	r3, [pc, #432]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d1f0      	bne.n	800c3d0 <HAL_RCC_OscConfig+0xe8>
 800c3ee:	e000      	b.n	800c3f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c3f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f003 0302 	and.w	r3, r3, #2
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d063      	beq.n	800c4c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c3fe:	4b65      	ldr	r3, [pc, #404]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c400:	689b      	ldr	r3, [r3, #8]
 800c402:	f003 030c 	and.w	r3, r3, #12
 800c406:	2b00      	cmp	r3, #0
 800c408:	d00b      	beq.n	800c422 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c40a:	4b62      	ldr	r3, [pc, #392]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c40c:	689b      	ldr	r3, [r3, #8]
 800c40e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c412:	2b08      	cmp	r3, #8
 800c414:	d11c      	bne.n	800c450 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c416:	4b5f      	ldr	r3, [pc, #380]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d116      	bne.n	800c450 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c422:	4b5c      	ldr	r3, [pc, #368]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f003 0302 	and.w	r3, r3, #2
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d005      	beq.n	800c43a <HAL_RCC_OscConfig+0x152>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	68db      	ldr	r3, [r3, #12]
 800c432:	2b01      	cmp	r3, #1
 800c434:	d001      	beq.n	800c43a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c436:	2301      	movs	r3, #1
 800c438:	e1c4      	b.n	800c7c4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c43a:	4b56      	ldr	r3, [pc, #344]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	691b      	ldr	r3, [r3, #16]
 800c446:	00db      	lsls	r3, r3, #3
 800c448:	4952      	ldr	r1, [pc, #328]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c44a:	4313      	orrs	r3, r2
 800c44c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c44e:	e03a      	b.n	800c4c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	68db      	ldr	r3, [r3, #12]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d020      	beq.n	800c49a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c458:	4b4f      	ldr	r3, [pc, #316]	; (800c598 <HAL_RCC_OscConfig+0x2b0>)
 800c45a:	2201      	movs	r2, #1
 800c45c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c45e:	f7fc ff65 	bl	800932c <HAL_GetTick>
 800c462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c464:	e008      	b.n	800c478 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c466:	f7fc ff61 	bl	800932c <HAL_GetTick>
 800c46a:	4602      	mov	r2, r0
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	1ad3      	subs	r3, r2, r3
 800c470:	2b02      	cmp	r3, #2
 800c472:	d901      	bls.n	800c478 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c474:	2303      	movs	r3, #3
 800c476:	e1a5      	b.n	800c7c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c478:	4b46      	ldr	r3, [pc, #280]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f003 0302 	and.w	r3, r3, #2
 800c480:	2b00      	cmp	r3, #0
 800c482:	d0f0      	beq.n	800c466 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c484:	4b43      	ldr	r3, [pc, #268]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	691b      	ldr	r3, [r3, #16]
 800c490:	00db      	lsls	r3, r3, #3
 800c492:	4940      	ldr	r1, [pc, #256]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c494:	4313      	orrs	r3, r2
 800c496:	600b      	str	r3, [r1, #0]
 800c498:	e015      	b.n	800c4c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c49a:	4b3f      	ldr	r3, [pc, #252]	; (800c598 <HAL_RCC_OscConfig+0x2b0>)
 800c49c:	2200      	movs	r2, #0
 800c49e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4a0:	f7fc ff44 	bl	800932c <HAL_GetTick>
 800c4a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c4a6:	e008      	b.n	800c4ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c4a8:	f7fc ff40 	bl	800932c <HAL_GetTick>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	1ad3      	subs	r3, r2, r3
 800c4b2:	2b02      	cmp	r3, #2
 800c4b4:	d901      	bls.n	800c4ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c4b6:	2303      	movs	r3, #3
 800c4b8:	e184      	b.n	800c7c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c4ba:	4b36      	ldr	r3, [pc, #216]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f003 0302 	and.w	r3, r3, #2
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d1f0      	bne.n	800c4a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f003 0308 	and.w	r3, r3, #8
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d030      	beq.n	800c534 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	695b      	ldr	r3, [r3, #20]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d016      	beq.n	800c508 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c4da:	4b30      	ldr	r3, [pc, #192]	; (800c59c <HAL_RCC_OscConfig+0x2b4>)
 800c4dc:	2201      	movs	r2, #1
 800c4de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4e0:	f7fc ff24 	bl	800932c <HAL_GetTick>
 800c4e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c4e6:	e008      	b.n	800c4fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c4e8:	f7fc ff20 	bl	800932c <HAL_GetTick>
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	1ad3      	subs	r3, r2, r3
 800c4f2:	2b02      	cmp	r3, #2
 800c4f4:	d901      	bls.n	800c4fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c4f6:	2303      	movs	r3, #3
 800c4f8:	e164      	b.n	800c7c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c4fa:	4b26      	ldr	r3, [pc, #152]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c4fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4fe:	f003 0302 	and.w	r3, r3, #2
 800c502:	2b00      	cmp	r3, #0
 800c504:	d0f0      	beq.n	800c4e8 <HAL_RCC_OscConfig+0x200>
 800c506:	e015      	b.n	800c534 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c508:	4b24      	ldr	r3, [pc, #144]	; (800c59c <HAL_RCC_OscConfig+0x2b4>)
 800c50a:	2200      	movs	r2, #0
 800c50c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c50e:	f7fc ff0d 	bl	800932c <HAL_GetTick>
 800c512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c514:	e008      	b.n	800c528 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c516:	f7fc ff09 	bl	800932c <HAL_GetTick>
 800c51a:	4602      	mov	r2, r0
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	1ad3      	subs	r3, r2, r3
 800c520:	2b02      	cmp	r3, #2
 800c522:	d901      	bls.n	800c528 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c524:	2303      	movs	r3, #3
 800c526:	e14d      	b.n	800c7c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c528:	4b1a      	ldr	r3, [pc, #104]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c52a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c52c:	f003 0302 	and.w	r3, r3, #2
 800c530:	2b00      	cmp	r3, #0
 800c532:	d1f0      	bne.n	800c516 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f003 0304 	and.w	r3, r3, #4
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	f000 80a0 	beq.w	800c682 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c542:	2300      	movs	r3, #0
 800c544:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c546:	4b13      	ldr	r3, [pc, #76]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c54a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d10f      	bne.n	800c572 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c552:	2300      	movs	r3, #0
 800c554:	60bb      	str	r3, [r7, #8]
 800c556:	4b0f      	ldr	r3, [pc, #60]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c55a:	4a0e      	ldr	r2, [pc, #56]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c55c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c560:	6413      	str	r3, [r2, #64]	; 0x40
 800c562:	4b0c      	ldr	r3, [pc, #48]	; (800c594 <HAL_RCC_OscConfig+0x2ac>)
 800c564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c56a:	60bb      	str	r3, [r7, #8]
 800c56c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c56e:	2301      	movs	r3, #1
 800c570:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c572:	4b0b      	ldr	r3, [pc, #44]	; (800c5a0 <HAL_RCC_OscConfig+0x2b8>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d121      	bne.n	800c5c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c57e:	4b08      	ldr	r3, [pc, #32]	; (800c5a0 <HAL_RCC_OscConfig+0x2b8>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	4a07      	ldr	r2, [pc, #28]	; (800c5a0 <HAL_RCC_OscConfig+0x2b8>)
 800c584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c58a:	f7fc fecf 	bl	800932c <HAL_GetTick>
 800c58e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c590:	e011      	b.n	800c5b6 <HAL_RCC_OscConfig+0x2ce>
 800c592:	bf00      	nop
 800c594:	40023800 	.word	0x40023800
 800c598:	42470000 	.word	0x42470000
 800c59c:	42470e80 	.word	0x42470e80
 800c5a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c5a4:	f7fc fec2 	bl	800932c <HAL_GetTick>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	1ad3      	subs	r3, r2, r3
 800c5ae:	2b02      	cmp	r3, #2
 800c5b0:	d901      	bls.n	800c5b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800c5b2:	2303      	movs	r3, #3
 800c5b4:	e106      	b.n	800c7c4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c5b6:	4b85      	ldr	r3, [pc, #532]	; (800c7cc <HAL_RCC_OscConfig+0x4e4>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d0f0      	beq.n	800c5a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	689b      	ldr	r3, [r3, #8]
 800c5c6:	2b01      	cmp	r3, #1
 800c5c8:	d106      	bne.n	800c5d8 <HAL_RCC_OscConfig+0x2f0>
 800c5ca:	4b81      	ldr	r3, [pc, #516]	; (800c7d0 <HAL_RCC_OscConfig+0x4e8>)
 800c5cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5ce:	4a80      	ldr	r2, [pc, #512]	; (800c7d0 <HAL_RCC_OscConfig+0x4e8>)
 800c5d0:	f043 0301 	orr.w	r3, r3, #1
 800c5d4:	6713      	str	r3, [r2, #112]	; 0x70
 800c5d6:	e01c      	b.n	800c612 <HAL_RCC_OscConfig+0x32a>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	689b      	ldr	r3, [r3, #8]
 800c5dc:	2b05      	cmp	r3, #5
 800c5de:	d10c      	bne.n	800c5fa <HAL_RCC_OscConfig+0x312>
 800c5e0:	4b7b      	ldr	r3, [pc, #492]	; (800c7d0 <HAL_RCC_OscConfig+0x4e8>)
 800c5e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5e4:	4a7a      	ldr	r2, [pc, #488]	; (800c7d0 <HAL_RCC_OscConfig+0x4e8>)
 800c5e6:	f043 0304 	orr.w	r3, r3, #4
 800c5ea:	6713      	str	r3, [r2, #112]	; 0x70
 800c5ec:	4b78      	ldr	r3, [pc, #480]	; (800c7d0 <HAL_RCC_OscConfig+0x4e8>)
 800c5ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5f0:	4a77      	ldr	r2, [pc, #476]	; (800c7d0 <HAL_RCC_OscConfig+0x4e8>)
 800c5f2:	f043 0301 	orr.w	r3, r3, #1
 800c5f6:	6713      	str	r3, [r2, #112]	; 0x70
 800c5f8:	e00b      	b.n	800c612 <HAL_RCC_OscConfig+0x32a>
 800c5fa:	4b75      	ldr	r3, [pc, #468]	; (800c7d0 <HAL_RCC_OscConfig+0x4e8>)
 800c5fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5fe:	4a74      	ldr	r2, [pc, #464]	; (800c7d0 <HAL_RCC_OscConfig+0x4e8>)
 800c600:	f023 0301 	bic.w	r3, r3, #1
 800c604:	6713      	str	r3, [r2, #112]	; 0x70
 800c606:	4b72      	ldr	r3, [pc, #456]	; (800c7d0 <HAL_RCC_OscConfig+0x4e8>)
 800c608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c60a:	4a71      	ldr	r2, [pc, #452]	; (800c7d0 <HAL_RCC_OscConfig+0x4e8>)
 800c60c:	f023 0304 	bic.w	r3, r3, #4
 800c610:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	689b      	ldr	r3, [r3, #8]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d015      	beq.n	800c646 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c61a:	f7fc fe87 	bl	800932c <HAL_GetTick>
 800c61e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c620:	e00a      	b.n	800c638 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c622:	f7fc fe83 	bl	800932c <HAL_GetTick>
 800c626:	4602      	mov	r2, r0
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	1ad3      	subs	r3, r2, r3
 800c62c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c630:	4293      	cmp	r3, r2
 800c632:	d901      	bls.n	800c638 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800c634:	2303      	movs	r3, #3
 800c636:	e0c5      	b.n	800c7c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c638:	4b65      	ldr	r3, [pc, #404]	; (800c7d0 <HAL_RCC_OscConfig+0x4e8>)
 800c63a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c63c:	f003 0302 	and.w	r3, r3, #2
 800c640:	2b00      	cmp	r3, #0
 800c642:	d0ee      	beq.n	800c622 <HAL_RCC_OscConfig+0x33a>
 800c644:	e014      	b.n	800c670 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c646:	f7fc fe71 	bl	800932c <HAL_GetTick>
 800c64a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c64c:	e00a      	b.n	800c664 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c64e:	f7fc fe6d 	bl	800932c <HAL_GetTick>
 800c652:	4602      	mov	r2, r0
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	1ad3      	subs	r3, r2, r3
 800c658:	f241 3288 	movw	r2, #5000	; 0x1388
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d901      	bls.n	800c664 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800c660:	2303      	movs	r3, #3
 800c662:	e0af      	b.n	800c7c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c664:	4b5a      	ldr	r3, [pc, #360]	; (800c7d0 <HAL_RCC_OscConfig+0x4e8>)
 800c666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c668:	f003 0302 	and.w	r3, r3, #2
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d1ee      	bne.n	800c64e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c670:	7dfb      	ldrb	r3, [r7, #23]
 800c672:	2b01      	cmp	r3, #1
 800c674:	d105      	bne.n	800c682 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c676:	4b56      	ldr	r3, [pc, #344]	; (800c7d0 <HAL_RCC_OscConfig+0x4e8>)
 800c678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c67a:	4a55      	ldr	r2, [pc, #340]	; (800c7d0 <HAL_RCC_OscConfig+0x4e8>)
 800c67c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c680:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	699b      	ldr	r3, [r3, #24]
 800c686:	2b00      	cmp	r3, #0
 800c688:	f000 809b 	beq.w	800c7c2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c68c:	4b50      	ldr	r3, [pc, #320]	; (800c7d0 <HAL_RCC_OscConfig+0x4e8>)
 800c68e:	689b      	ldr	r3, [r3, #8]
 800c690:	f003 030c 	and.w	r3, r3, #12
 800c694:	2b08      	cmp	r3, #8
 800c696:	d05c      	beq.n	800c752 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	699b      	ldr	r3, [r3, #24]
 800c69c:	2b02      	cmp	r3, #2
 800c69e:	d141      	bne.n	800c724 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c6a0:	4b4c      	ldr	r3, [pc, #304]	; (800c7d4 <HAL_RCC_OscConfig+0x4ec>)
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c6a6:	f7fc fe41 	bl	800932c <HAL_GetTick>
 800c6aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c6ac:	e008      	b.n	800c6c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c6ae:	f7fc fe3d 	bl	800932c <HAL_GetTick>
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	1ad3      	subs	r3, r2, r3
 800c6b8:	2b02      	cmp	r3, #2
 800c6ba:	d901      	bls.n	800c6c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800c6bc:	2303      	movs	r3, #3
 800c6be:	e081      	b.n	800c7c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c6c0:	4b43      	ldr	r3, [pc, #268]	; (800c7d0 <HAL_RCC_OscConfig+0x4e8>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d1f0      	bne.n	800c6ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	69da      	ldr	r2, [r3, #28]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6a1b      	ldr	r3, [r3, #32]
 800c6d4:	431a      	orrs	r2, r3
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6da:	019b      	lsls	r3, r3, #6
 800c6dc:	431a      	orrs	r2, r3
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6e2:	085b      	lsrs	r3, r3, #1
 800c6e4:	3b01      	subs	r3, #1
 800c6e6:	041b      	lsls	r3, r3, #16
 800c6e8:	431a      	orrs	r2, r3
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ee:	061b      	lsls	r3, r3, #24
 800c6f0:	4937      	ldr	r1, [pc, #220]	; (800c7d0 <HAL_RCC_OscConfig+0x4e8>)
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c6f6:	4b37      	ldr	r3, [pc, #220]	; (800c7d4 <HAL_RCC_OscConfig+0x4ec>)
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c6fc:	f7fc fe16 	bl	800932c <HAL_GetTick>
 800c700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c702:	e008      	b.n	800c716 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c704:	f7fc fe12 	bl	800932c <HAL_GetTick>
 800c708:	4602      	mov	r2, r0
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	1ad3      	subs	r3, r2, r3
 800c70e:	2b02      	cmp	r3, #2
 800c710:	d901      	bls.n	800c716 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800c712:	2303      	movs	r3, #3
 800c714:	e056      	b.n	800c7c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c716:	4b2e      	ldr	r3, [pc, #184]	; (800c7d0 <HAL_RCC_OscConfig+0x4e8>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d0f0      	beq.n	800c704 <HAL_RCC_OscConfig+0x41c>
 800c722:	e04e      	b.n	800c7c2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c724:	4b2b      	ldr	r3, [pc, #172]	; (800c7d4 <HAL_RCC_OscConfig+0x4ec>)
 800c726:	2200      	movs	r2, #0
 800c728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c72a:	f7fc fdff 	bl	800932c <HAL_GetTick>
 800c72e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c730:	e008      	b.n	800c744 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c732:	f7fc fdfb 	bl	800932c <HAL_GetTick>
 800c736:	4602      	mov	r2, r0
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	1ad3      	subs	r3, r2, r3
 800c73c:	2b02      	cmp	r3, #2
 800c73e:	d901      	bls.n	800c744 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800c740:	2303      	movs	r3, #3
 800c742:	e03f      	b.n	800c7c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c744:	4b22      	ldr	r3, [pc, #136]	; (800c7d0 <HAL_RCC_OscConfig+0x4e8>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d1f0      	bne.n	800c732 <HAL_RCC_OscConfig+0x44a>
 800c750:	e037      	b.n	800c7c2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	699b      	ldr	r3, [r3, #24]
 800c756:	2b01      	cmp	r3, #1
 800c758:	d101      	bne.n	800c75e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800c75a:	2301      	movs	r3, #1
 800c75c:	e032      	b.n	800c7c4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c75e:	4b1c      	ldr	r3, [pc, #112]	; (800c7d0 <HAL_RCC_OscConfig+0x4e8>)
 800c760:	685b      	ldr	r3, [r3, #4]
 800c762:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	699b      	ldr	r3, [r3, #24]
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d028      	beq.n	800c7be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c776:	429a      	cmp	r2, r3
 800c778:	d121      	bne.n	800c7be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c784:	429a      	cmp	r2, r3
 800c786:	d11a      	bne.n	800c7be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c788:	68fa      	ldr	r2, [r7, #12]
 800c78a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c78e:	4013      	ands	r3, r2
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c794:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c796:	4293      	cmp	r3, r2
 800c798:	d111      	bne.n	800c7be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7a4:	085b      	lsrs	r3, r3, #1
 800c7a6:	3b01      	subs	r3, #1
 800c7a8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d107      	bne.n	800c7be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d001      	beq.n	800c7c2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800c7be:	2301      	movs	r3, #1
 800c7c0:	e000      	b.n	800c7c4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800c7c2:	2300      	movs	r3, #0
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3718      	adds	r7, #24
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	40007000 	.word	0x40007000
 800c7d0:	40023800 	.word	0x40023800
 800c7d4:	42470060 	.word	0x42470060

0800c7d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d101      	bne.n	800c7ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	e0cc      	b.n	800c986 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c7ec:	4b68      	ldr	r3, [pc, #416]	; (800c990 <HAL_RCC_ClockConfig+0x1b8>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f003 030f 	and.w	r3, r3, #15
 800c7f4:	683a      	ldr	r2, [r7, #0]
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d90c      	bls.n	800c814 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c7fa:	4b65      	ldr	r3, [pc, #404]	; (800c990 <HAL_RCC_ClockConfig+0x1b8>)
 800c7fc:	683a      	ldr	r2, [r7, #0]
 800c7fe:	b2d2      	uxtb	r2, r2
 800c800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c802:	4b63      	ldr	r3, [pc, #396]	; (800c990 <HAL_RCC_ClockConfig+0x1b8>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f003 030f 	and.w	r3, r3, #15
 800c80a:	683a      	ldr	r2, [r7, #0]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d001      	beq.n	800c814 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c810:	2301      	movs	r3, #1
 800c812:	e0b8      	b.n	800c986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f003 0302 	and.w	r3, r3, #2
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d020      	beq.n	800c862 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f003 0304 	and.w	r3, r3, #4
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d005      	beq.n	800c838 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c82c:	4b59      	ldr	r3, [pc, #356]	; (800c994 <HAL_RCC_ClockConfig+0x1bc>)
 800c82e:	689b      	ldr	r3, [r3, #8]
 800c830:	4a58      	ldr	r2, [pc, #352]	; (800c994 <HAL_RCC_ClockConfig+0x1bc>)
 800c832:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c836:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f003 0308 	and.w	r3, r3, #8
 800c840:	2b00      	cmp	r3, #0
 800c842:	d005      	beq.n	800c850 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c844:	4b53      	ldr	r3, [pc, #332]	; (800c994 <HAL_RCC_ClockConfig+0x1bc>)
 800c846:	689b      	ldr	r3, [r3, #8]
 800c848:	4a52      	ldr	r2, [pc, #328]	; (800c994 <HAL_RCC_ClockConfig+0x1bc>)
 800c84a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c84e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c850:	4b50      	ldr	r3, [pc, #320]	; (800c994 <HAL_RCC_ClockConfig+0x1bc>)
 800c852:	689b      	ldr	r3, [r3, #8]
 800c854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	689b      	ldr	r3, [r3, #8]
 800c85c:	494d      	ldr	r1, [pc, #308]	; (800c994 <HAL_RCC_ClockConfig+0x1bc>)
 800c85e:	4313      	orrs	r3, r2
 800c860:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f003 0301 	and.w	r3, r3, #1
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d044      	beq.n	800c8f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	685b      	ldr	r3, [r3, #4]
 800c872:	2b01      	cmp	r3, #1
 800c874:	d107      	bne.n	800c886 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c876:	4b47      	ldr	r3, [pc, #284]	; (800c994 <HAL_RCC_ClockConfig+0x1bc>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d119      	bne.n	800c8b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c882:	2301      	movs	r3, #1
 800c884:	e07f      	b.n	800c986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	2b02      	cmp	r3, #2
 800c88c:	d003      	beq.n	800c896 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c892:	2b03      	cmp	r3, #3
 800c894:	d107      	bne.n	800c8a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c896:	4b3f      	ldr	r3, [pc, #252]	; (800c994 <HAL_RCC_ClockConfig+0x1bc>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d109      	bne.n	800c8b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	e06f      	b.n	800c986 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c8a6:	4b3b      	ldr	r3, [pc, #236]	; (800c994 <HAL_RCC_ClockConfig+0x1bc>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	f003 0302 	and.w	r3, r3, #2
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d101      	bne.n	800c8b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	e067      	b.n	800c986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c8b6:	4b37      	ldr	r3, [pc, #220]	; (800c994 <HAL_RCC_ClockConfig+0x1bc>)
 800c8b8:	689b      	ldr	r3, [r3, #8]
 800c8ba:	f023 0203 	bic.w	r2, r3, #3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	4934      	ldr	r1, [pc, #208]	; (800c994 <HAL_RCC_ClockConfig+0x1bc>)
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c8c8:	f7fc fd30 	bl	800932c <HAL_GetTick>
 800c8cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c8ce:	e00a      	b.n	800c8e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c8d0:	f7fc fd2c 	bl	800932c <HAL_GetTick>
 800c8d4:	4602      	mov	r2, r0
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	1ad3      	subs	r3, r2, r3
 800c8da:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d901      	bls.n	800c8e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c8e2:	2303      	movs	r3, #3
 800c8e4:	e04f      	b.n	800c986 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c8e6:	4b2b      	ldr	r3, [pc, #172]	; (800c994 <HAL_RCC_ClockConfig+0x1bc>)
 800c8e8:	689b      	ldr	r3, [r3, #8]
 800c8ea:	f003 020c 	and.w	r2, r3, #12
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	685b      	ldr	r3, [r3, #4]
 800c8f2:	009b      	lsls	r3, r3, #2
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d1eb      	bne.n	800c8d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c8f8:	4b25      	ldr	r3, [pc, #148]	; (800c990 <HAL_RCC_ClockConfig+0x1b8>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f003 030f 	and.w	r3, r3, #15
 800c900:	683a      	ldr	r2, [r7, #0]
 800c902:	429a      	cmp	r2, r3
 800c904:	d20c      	bcs.n	800c920 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c906:	4b22      	ldr	r3, [pc, #136]	; (800c990 <HAL_RCC_ClockConfig+0x1b8>)
 800c908:	683a      	ldr	r2, [r7, #0]
 800c90a:	b2d2      	uxtb	r2, r2
 800c90c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c90e:	4b20      	ldr	r3, [pc, #128]	; (800c990 <HAL_RCC_ClockConfig+0x1b8>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f003 030f 	and.w	r3, r3, #15
 800c916:	683a      	ldr	r2, [r7, #0]
 800c918:	429a      	cmp	r2, r3
 800c91a:	d001      	beq.n	800c920 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c91c:	2301      	movs	r3, #1
 800c91e:	e032      	b.n	800c986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	f003 0304 	and.w	r3, r3, #4
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d008      	beq.n	800c93e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c92c:	4b19      	ldr	r3, [pc, #100]	; (800c994 <HAL_RCC_ClockConfig+0x1bc>)
 800c92e:	689b      	ldr	r3, [r3, #8]
 800c930:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	68db      	ldr	r3, [r3, #12]
 800c938:	4916      	ldr	r1, [pc, #88]	; (800c994 <HAL_RCC_ClockConfig+0x1bc>)
 800c93a:	4313      	orrs	r3, r2
 800c93c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f003 0308 	and.w	r3, r3, #8
 800c946:	2b00      	cmp	r3, #0
 800c948:	d009      	beq.n	800c95e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c94a:	4b12      	ldr	r3, [pc, #72]	; (800c994 <HAL_RCC_ClockConfig+0x1bc>)
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	691b      	ldr	r3, [r3, #16]
 800c956:	00db      	lsls	r3, r3, #3
 800c958:	490e      	ldr	r1, [pc, #56]	; (800c994 <HAL_RCC_ClockConfig+0x1bc>)
 800c95a:	4313      	orrs	r3, r2
 800c95c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c95e:	f000 f821 	bl	800c9a4 <HAL_RCC_GetSysClockFreq>
 800c962:	4602      	mov	r2, r0
 800c964:	4b0b      	ldr	r3, [pc, #44]	; (800c994 <HAL_RCC_ClockConfig+0x1bc>)
 800c966:	689b      	ldr	r3, [r3, #8]
 800c968:	091b      	lsrs	r3, r3, #4
 800c96a:	f003 030f 	and.w	r3, r3, #15
 800c96e:	490a      	ldr	r1, [pc, #40]	; (800c998 <HAL_RCC_ClockConfig+0x1c0>)
 800c970:	5ccb      	ldrb	r3, [r1, r3]
 800c972:	fa22 f303 	lsr.w	r3, r2, r3
 800c976:	4a09      	ldr	r2, [pc, #36]	; (800c99c <HAL_RCC_ClockConfig+0x1c4>)
 800c978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c97a:	4b09      	ldr	r3, [pc, #36]	; (800c9a0 <HAL_RCC_ClockConfig+0x1c8>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	4618      	mov	r0, r3
 800c980:	f7f5 fe9e 	bl	80026c0 <HAL_InitTick>

  return HAL_OK;
 800c984:	2300      	movs	r3, #0
}
 800c986:	4618      	mov	r0, r3
 800c988:	3710      	adds	r7, #16
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}
 800c98e:	bf00      	nop
 800c990:	40023c00 	.word	0x40023c00
 800c994:	40023800 	.word	0x40023800
 800c998:	08021e6c 	.word	0x08021e6c
 800c99c:	2000003c 	.word	0x2000003c
 800c9a0:	20000064 	.word	0x20000064

0800c9a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c9a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c9a8:	b084      	sub	sp, #16
 800c9aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	607b      	str	r3, [r7, #4]
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	60fb      	str	r3, [r7, #12]
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c9bc:	4b67      	ldr	r3, [pc, #412]	; (800cb5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c9be:	689b      	ldr	r3, [r3, #8]
 800c9c0:	f003 030c 	and.w	r3, r3, #12
 800c9c4:	2b08      	cmp	r3, #8
 800c9c6:	d00d      	beq.n	800c9e4 <HAL_RCC_GetSysClockFreq+0x40>
 800c9c8:	2b08      	cmp	r3, #8
 800c9ca:	f200 80bd 	bhi.w	800cb48 <HAL_RCC_GetSysClockFreq+0x1a4>
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d002      	beq.n	800c9d8 <HAL_RCC_GetSysClockFreq+0x34>
 800c9d2:	2b04      	cmp	r3, #4
 800c9d4:	d003      	beq.n	800c9de <HAL_RCC_GetSysClockFreq+0x3a>
 800c9d6:	e0b7      	b.n	800cb48 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c9d8:	4b61      	ldr	r3, [pc, #388]	; (800cb60 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c9da:	60bb      	str	r3, [r7, #8]
       break;
 800c9dc:	e0b7      	b.n	800cb4e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c9de:	4b60      	ldr	r3, [pc, #384]	; (800cb60 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c9e0:	60bb      	str	r3, [r7, #8]
      break;
 800c9e2:	e0b4      	b.n	800cb4e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c9e4:	4b5d      	ldr	r3, [pc, #372]	; (800cb5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c9ee:	4b5b      	ldr	r3, [pc, #364]	; (800cb5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d04d      	beq.n	800ca96 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c9fa:	4b58      	ldr	r3, [pc, #352]	; (800cb5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c9fc:	685b      	ldr	r3, [r3, #4]
 800c9fe:	099b      	lsrs	r3, r3, #6
 800ca00:	461a      	mov	r2, r3
 800ca02:	f04f 0300 	mov.w	r3, #0
 800ca06:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ca0a:	f04f 0100 	mov.w	r1, #0
 800ca0e:	ea02 0800 	and.w	r8, r2, r0
 800ca12:	ea03 0901 	and.w	r9, r3, r1
 800ca16:	4640      	mov	r0, r8
 800ca18:	4649      	mov	r1, r9
 800ca1a:	f04f 0200 	mov.w	r2, #0
 800ca1e:	f04f 0300 	mov.w	r3, #0
 800ca22:	014b      	lsls	r3, r1, #5
 800ca24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ca28:	0142      	lsls	r2, r0, #5
 800ca2a:	4610      	mov	r0, r2
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	ebb0 0008 	subs.w	r0, r0, r8
 800ca32:	eb61 0109 	sbc.w	r1, r1, r9
 800ca36:	f04f 0200 	mov.w	r2, #0
 800ca3a:	f04f 0300 	mov.w	r3, #0
 800ca3e:	018b      	lsls	r3, r1, #6
 800ca40:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ca44:	0182      	lsls	r2, r0, #6
 800ca46:	1a12      	subs	r2, r2, r0
 800ca48:	eb63 0301 	sbc.w	r3, r3, r1
 800ca4c:	f04f 0000 	mov.w	r0, #0
 800ca50:	f04f 0100 	mov.w	r1, #0
 800ca54:	00d9      	lsls	r1, r3, #3
 800ca56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ca5a:	00d0      	lsls	r0, r2, #3
 800ca5c:	4602      	mov	r2, r0
 800ca5e:	460b      	mov	r3, r1
 800ca60:	eb12 0208 	adds.w	r2, r2, r8
 800ca64:	eb43 0309 	adc.w	r3, r3, r9
 800ca68:	f04f 0000 	mov.w	r0, #0
 800ca6c:	f04f 0100 	mov.w	r1, #0
 800ca70:	0299      	lsls	r1, r3, #10
 800ca72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ca76:	0290      	lsls	r0, r2, #10
 800ca78:	4602      	mov	r2, r0
 800ca7a:	460b      	mov	r3, r1
 800ca7c:	4610      	mov	r0, r2
 800ca7e:	4619      	mov	r1, r3
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	461a      	mov	r2, r3
 800ca84:	f04f 0300 	mov.w	r3, #0
 800ca88:	f7f4 f96e 	bl	8000d68 <__aeabi_uldivmod>
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	460b      	mov	r3, r1
 800ca90:	4613      	mov	r3, r2
 800ca92:	60fb      	str	r3, [r7, #12]
 800ca94:	e04a      	b.n	800cb2c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ca96:	4b31      	ldr	r3, [pc, #196]	; (800cb5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ca98:	685b      	ldr	r3, [r3, #4]
 800ca9a:	099b      	lsrs	r3, r3, #6
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	f04f 0300 	mov.w	r3, #0
 800caa2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800caa6:	f04f 0100 	mov.w	r1, #0
 800caaa:	ea02 0400 	and.w	r4, r2, r0
 800caae:	ea03 0501 	and.w	r5, r3, r1
 800cab2:	4620      	mov	r0, r4
 800cab4:	4629      	mov	r1, r5
 800cab6:	f04f 0200 	mov.w	r2, #0
 800caba:	f04f 0300 	mov.w	r3, #0
 800cabe:	014b      	lsls	r3, r1, #5
 800cac0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800cac4:	0142      	lsls	r2, r0, #5
 800cac6:	4610      	mov	r0, r2
 800cac8:	4619      	mov	r1, r3
 800caca:	1b00      	subs	r0, r0, r4
 800cacc:	eb61 0105 	sbc.w	r1, r1, r5
 800cad0:	f04f 0200 	mov.w	r2, #0
 800cad4:	f04f 0300 	mov.w	r3, #0
 800cad8:	018b      	lsls	r3, r1, #6
 800cada:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800cade:	0182      	lsls	r2, r0, #6
 800cae0:	1a12      	subs	r2, r2, r0
 800cae2:	eb63 0301 	sbc.w	r3, r3, r1
 800cae6:	f04f 0000 	mov.w	r0, #0
 800caea:	f04f 0100 	mov.w	r1, #0
 800caee:	00d9      	lsls	r1, r3, #3
 800caf0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800caf4:	00d0      	lsls	r0, r2, #3
 800caf6:	4602      	mov	r2, r0
 800caf8:	460b      	mov	r3, r1
 800cafa:	1912      	adds	r2, r2, r4
 800cafc:	eb45 0303 	adc.w	r3, r5, r3
 800cb00:	f04f 0000 	mov.w	r0, #0
 800cb04:	f04f 0100 	mov.w	r1, #0
 800cb08:	0299      	lsls	r1, r3, #10
 800cb0a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800cb0e:	0290      	lsls	r0, r2, #10
 800cb10:	4602      	mov	r2, r0
 800cb12:	460b      	mov	r3, r1
 800cb14:	4610      	mov	r0, r2
 800cb16:	4619      	mov	r1, r3
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	f04f 0300 	mov.w	r3, #0
 800cb20:	f7f4 f922 	bl	8000d68 <__aeabi_uldivmod>
 800cb24:	4602      	mov	r2, r0
 800cb26:	460b      	mov	r3, r1
 800cb28:	4613      	mov	r3, r2
 800cb2a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800cb2c:	4b0b      	ldr	r3, [pc, #44]	; (800cb5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	0c1b      	lsrs	r3, r3, #16
 800cb32:	f003 0303 	and.w	r3, r3, #3
 800cb36:	3301      	adds	r3, #1
 800cb38:	005b      	lsls	r3, r3, #1
 800cb3a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800cb3c:	68fa      	ldr	r2, [r7, #12]
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb44:	60bb      	str	r3, [r7, #8]
      break;
 800cb46:	e002      	b.n	800cb4e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cb48:	4b05      	ldr	r3, [pc, #20]	; (800cb60 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800cb4a:	60bb      	str	r3, [r7, #8]
      break;
 800cb4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cb4e:	68bb      	ldr	r3, [r7, #8]
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3710      	adds	r7, #16
 800cb54:	46bd      	mov	sp, r7
 800cb56:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800cb5a:	bf00      	nop
 800cb5c:	40023800 	.word	0x40023800
 800cb60:	00f42400 	.word	0x00f42400

0800cb64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cb64:	b480      	push	{r7}
 800cb66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cb68:	4b03      	ldr	r3, [pc, #12]	; (800cb78 <HAL_RCC_GetHCLKFreq+0x14>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb74:	4770      	bx	lr
 800cb76:	bf00      	nop
 800cb78:	2000003c 	.word	0x2000003c

0800cb7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800cb80:	f7ff fff0 	bl	800cb64 <HAL_RCC_GetHCLKFreq>
 800cb84:	4602      	mov	r2, r0
 800cb86:	4b05      	ldr	r3, [pc, #20]	; (800cb9c <HAL_RCC_GetPCLK1Freq+0x20>)
 800cb88:	689b      	ldr	r3, [r3, #8]
 800cb8a:	0a9b      	lsrs	r3, r3, #10
 800cb8c:	f003 0307 	and.w	r3, r3, #7
 800cb90:	4903      	ldr	r1, [pc, #12]	; (800cba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cb92:	5ccb      	ldrb	r3, [r1, r3]
 800cb94:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	bd80      	pop	{r7, pc}
 800cb9c:	40023800 	.word	0x40023800
 800cba0:	08021e7c 	.word	0x08021e7c

0800cba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800cba8:	f7ff ffdc 	bl	800cb64 <HAL_RCC_GetHCLKFreq>
 800cbac:	4602      	mov	r2, r0
 800cbae:	4b05      	ldr	r3, [pc, #20]	; (800cbc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cbb0:	689b      	ldr	r3, [r3, #8]
 800cbb2:	0b5b      	lsrs	r3, r3, #13
 800cbb4:	f003 0307 	and.w	r3, r3, #7
 800cbb8:	4903      	ldr	r1, [pc, #12]	; (800cbc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cbba:	5ccb      	ldrb	r3, [r1, r3]
 800cbbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	40023800 	.word	0x40023800
 800cbc8:	08021e7c 	.word	0x08021e7c

0800cbcc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b083      	sub	sp, #12
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	220f      	movs	r2, #15
 800cbda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cbdc:	4b12      	ldr	r3, [pc, #72]	; (800cc28 <HAL_RCC_GetClockConfig+0x5c>)
 800cbde:	689b      	ldr	r3, [r3, #8]
 800cbe0:	f003 0203 	and.w	r2, r3, #3
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800cbe8:	4b0f      	ldr	r3, [pc, #60]	; (800cc28 <HAL_RCC_GetClockConfig+0x5c>)
 800cbea:	689b      	ldr	r3, [r3, #8]
 800cbec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800cbf4:	4b0c      	ldr	r3, [pc, #48]	; (800cc28 <HAL_RCC_GetClockConfig+0x5c>)
 800cbf6:	689b      	ldr	r3, [r3, #8]
 800cbf8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800cc00:	4b09      	ldr	r3, [pc, #36]	; (800cc28 <HAL_RCC_GetClockConfig+0x5c>)
 800cc02:	689b      	ldr	r3, [r3, #8]
 800cc04:	08db      	lsrs	r3, r3, #3
 800cc06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cc0e:	4b07      	ldr	r3, [pc, #28]	; (800cc2c <HAL_RCC_GetClockConfig+0x60>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f003 020f 	and.w	r2, r3, #15
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	601a      	str	r2, [r3, #0]
}
 800cc1a:	bf00      	nop
 800cc1c:	370c      	adds	r7, #12
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc24:	4770      	bx	lr
 800cc26:	bf00      	nop
 800cc28:	40023800 	.word	0x40023800
 800cc2c:	40023c00 	.word	0x40023c00

0800cc30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b086      	sub	sp, #24
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f003 0301 	and.w	r3, r3, #1
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d10b      	bne.n	800cc64 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d105      	bne.n	800cc64 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d075      	beq.n	800cd50 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800cc64:	4bad      	ldr	r3, [pc, #692]	; (800cf1c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800cc66:	2200      	movs	r2, #0
 800cc68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800cc6a:	f7fc fb5f 	bl	800932c <HAL_GetTick>
 800cc6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800cc70:	e008      	b.n	800cc84 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800cc72:	f7fc fb5b 	bl	800932c <HAL_GetTick>
 800cc76:	4602      	mov	r2, r0
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	1ad3      	subs	r3, r2, r3
 800cc7c:	2b02      	cmp	r3, #2
 800cc7e:	d901      	bls.n	800cc84 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cc80:	2303      	movs	r3, #3
 800cc82:	e18b      	b.n	800cf9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800cc84:	4ba6      	ldr	r3, [pc, #664]	; (800cf20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d1f0      	bne.n	800cc72 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f003 0301 	and.w	r3, r3, #1
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d009      	beq.n	800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	685b      	ldr	r3, [r3, #4]
 800cca0:	019a      	lsls	r2, r3, #6
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	689b      	ldr	r3, [r3, #8]
 800cca6:	071b      	lsls	r3, r3, #28
 800cca8:	499d      	ldr	r1, [pc, #628]	; (800cf20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ccaa:	4313      	orrs	r3, r2
 800ccac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f003 0302 	and.w	r3, r3, #2
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d01f      	beq.n	800ccfc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ccbc:	4b98      	ldr	r3, [pc, #608]	; (800cf20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ccbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccc2:	0f1b      	lsrs	r3, r3, #28
 800ccc4:	f003 0307 	and.w	r3, r3, #7
 800ccc8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	685b      	ldr	r3, [r3, #4]
 800ccce:	019a      	lsls	r2, r3, #6
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	68db      	ldr	r3, [r3, #12]
 800ccd4:	061b      	lsls	r3, r3, #24
 800ccd6:	431a      	orrs	r2, r3
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	071b      	lsls	r3, r3, #28
 800ccdc:	4990      	ldr	r1, [pc, #576]	; (800cf20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ccde:	4313      	orrs	r3, r2
 800cce0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800cce4:	4b8e      	ldr	r3, [pc, #568]	; (800cf20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cce6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccea:	f023 021f 	bic.w	r2, r3, #31
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	69db      	ldr	r3, [r3, #28]
 800ccf2:	3b01      	subs	r3, #1
 800ccf4:	498a      	ldr	r1, [pc, #552]	; (800cf20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ccf6:	4313      	orrs	r3, r2
 800ccf8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d00d      	beq.n	800cd24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	019a      	lsls	r2, r3, #6
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	68db      	ldr	r3, [r3, #12]
 800cd12:	061b      	lsls	r3, r3, #24
 800cd14:	431a      	orrs	r2, r3
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	689b      	ldr	r3, [r3, #8]
 800cd1a:	071b      	lsls	r3, r3, #28
 800cd1c:	4980      	ldr	r1, [pc, #512]	; (800cf20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800cd24:	4b7d      	ldr	r3, [pc, #500]	; (800cf1c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800cd26:	2201      	movs	r2, #1
 800cd28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800cd2a:	f7fc faff 	bl	800932c <HAL_GetTick>
 800cd2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800cd30:	e008      	b.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800cd32:	f7fc fafb 	bl	800932c <HAL_GetTick>
 800cd36:	4602      	mov	r2, r0
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	1ad3      	subs	r3, r2, r3
 800cd3c:	2b02      	cmp	r3, #2
 800cd3e:	d901      	bls.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cd40:	2303      	movs	r3, #3
 800cd42:	e12b      	b.n	800cf9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800cd44:	4b76      	ldr	r3, [pc, #472]	; (800cf20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d0f0      	beq.n	800cd32 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f003 0304 	and.w	r3, r3, #4
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d105      	bne.n	800cd68 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d079      	beq.n	800ce5c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800cd68:	4b6e      	ldr	r3, [pc, #440]	; (800cf24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800cd6e:	f7fc fadd 	bl	800932c <HAL_GetTick>
 800cd72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800cd74:	e008      	b.n	800cd88 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800cd76:	f7fc fad9 	bl	800932c <HAL_GetTick>
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	1ad3      	subs	r3, r2, r3
 800cd80:	2b02      	cmp	r3, #2
 800cd82:	d901      	bls.n	800cd88 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cd84:	2303      	movs	r3, #3
 800cd86:	e109      	b.n	800cf9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800cd88:	4b65      	ldr	r3, [pc, #404]	; (800cf20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd94:	d0ef      	beq.n	800cd76 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f003 0304 	and.w	r3, r3, #4
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d020      	beq.n	800cde4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800cda2:	4b5f      	ldr	r3, [pc, #380]	; (800cf20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cda4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cda8:	0f1b      	lsrs	r3, r3, #28
 800cdaa:	f003 0307 	and.w	r3, r3, #7
 800cdae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	691b      	ldr	r3, [r3, #16]
 800cdb4:	019a      	lsls	r2, r3, #6
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	695b      	ldr	r3, [r3, #20]
 800cdba:	061b      	lsls	r3, r3, #24
 800cdbc:	431a      	orrs	r2, r3
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	071b      	lsls	r3, r3, #28
 800cdc2:	4957      	ldr	r1, [pc, #348]	; (800cf20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cdc4:	4313      	orrs	r3, r2
 800cdc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800cdca:	4b55      	ldr	r3, [pc, #340]	; (800cf20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cdcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cdd0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6a1b      	ldr	r3, [r3, #32]
 800cdd8:	3b01      	subs	r3, #1
 800cdda:	021b      	lsls	r3, r3, #8
 800cddc:	4950      	ldr	r1, [pc, #320]	; (800cf20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cdde:	4313      	orrs	r3, r2
 800cde0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f003 0308 	and.w	r3, r3, #8
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d01e      	beq.n	800ce2e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cdf0:	4b4b      	ldr	r3, [pc, #300]	; (800cf20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cdf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdf6:	0e1b      	lsrs	r3, r3, #24
 800cdf8:	f003 030f 	and.w	r3, r3, #15
 800cdfc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	691b      	ldr	r3, [r3, #16]
 800ce02:	019a      	lsls	r2, r3, #6
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	061b      	lsls	r3, r3, #24
 800ce08:	431a      	orrs	r2, r3
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	699b      	ldr	r3, [r3, #24]
 800ce0e:	071b      	lsls	r3, r3, #28
 800ce10:	4943      	ldr	r1, [pc, #268]	; (800cf20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ce12:	4313      	orrs	r3, r2
 800ce14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800ce18:	4b41      	ldr	r3, [pc, #260]	; (800cf20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ce1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce26:	493e      	ldr	r1, [pc, #248]	; (800cf20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ce28:	4313      	orrs	r3, r2
 800ce2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800ce2e:	4b3d      	ldr	r3, [pc, #244]	; (800cf24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ce30:	2201      	movs	r2, #1
 800ce32:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ce34:	f7fc fa7a 	bl	800932c <HAL_GetTick>
 800ce38:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ce3a:	e008      	b.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800ce3c:	f7fc fa76 	bl	800932c <HAL_GetTick>
 800ce40:	4602      	mov	r2, r0
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	1ad3      	subs	r3, r2, r3
 800ce46:	2b02      	cmp	r3, #2
 800ce48:	d901      	bls.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ce4a:	2303      	movs	r3, #3
 800ce4c:	e0a6      	b.n	800cf9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ce4e:	4b34      	ldr	r3, [pc, #208]	; (800cf20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce5a:	d1ef      	bne.n	800ce3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f003 0320 	and.w	r3, r3, #32
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	f000 808d 	beq.w	800cf84 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	60fb      	str	r3, [r7, #12]
 800ce6e:	4b2c      	ldr	r3, [pc, #176]	; (800cf20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ce70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce72:	4a2b      	ldr	r2, [pc, #172]	; (800cf20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ce74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce78:	6413      	str	r3, [r2, #64]	; 0x40
 800ce7a:	4b29      	ldr	r3, [pc, #164]	; (800cf20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ce7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce82:	60fb      	str	r3, [r7, #12]
 800ce84:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800ce86:	4b28      	ldr	r3, [pc, #160]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	4a27      	ldr	r2, [pc, #156]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800ce8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce90:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ce92:	f7fc fa4b 	bl	800932c <HAL_GetTick>
 800ce96:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800ce98:	e008      	b.n	800ceac <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ce9a:	f7fc fa47 	bl	800932c <HAL_GetTick>
 800ce9e:	4602      	mov	r2, r0
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	1ad3      	subs	r3, r2, r3
 800cea4:	2b02      	cmp	r3, #2
 800cea6:	d901      	bls.n	800ceac <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800cea8:	2303      	movs	r3, #3
 800ceaa:	e077      	b.n	800cf9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800ceac:	4b1e      	ldr	r3, [pc, #120]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d0f0      	beq.n	800ce9a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ceb8:	4b19      	ldr	r3, [pc, #100]	; (800cf20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ceba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cec0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d039      	beq.n	800cf3c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cecc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ced0:	693a      	ldr	r2, [r7, #16]
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d032      	beq.n	800cf3c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ced6:	4b12      	ldr	r3, [pc, #72]	; (800cf20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ced8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cede:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cee0:	4b12      	ldr	r3, [pc, #72]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800cee2:	2201      	movs	r2, #1
 800cee4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cee6:	4b11      	ldr	r3, [pc, #68]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800cee8:	2200      	movs	r2, #0
 800ceea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800ceec:	4a0c      	ldr	r2, [pc, #48]	; (800cf20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cef2:	4b0b      	ldr	r3, [pc, #44]	; (800cf20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cef6:	f003 0301 	and.w	r3, r3, #1
 800cefa:	2b01      	cmp	r3, #1
 800cefc:	d11e      	bne.n	800cf3c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800cefe:	f7fc fa15 	bl	800932c <HAL_GetTick>
 800cf02:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cf04:	e014      	b.n	800cf30 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cf06:	f7fc fa11 	bl	800932c <HAL_GetTick>
 800cf0a:	4602      	mov	r2, r0
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	1ad3      	subs	r3, r2, r3
 800cf10:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf14:	4293      	cmp	r3, r2
 800cf16:	d90b      	bls.n	800cf30 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800cf18:	2303      	movs	r3, #3
 800cf1a:	e03f      	b.n	800cf9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800cf1c:	42470068 	.word	0x42470068
 800cf20:	40023800 	.word	0x40023800
 800cf24:	42470070 	.word	0x42470070
 800cf28:	40007000 	.word	0x40007000
 800cf2c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cf30:	4b1c      	ldr	r3, [pc, #112]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800cf32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf34:	f003 0302 	and.w	r3, r3, #2
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d0e4      	beq.n	800cf06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf48:	d10d      	bne.n	800cf66 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800cf4a:	4b16      	ldr	r3, [pc, #88]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800cf4c:	689b      	ldr	r3, [r3, #8]
 800cf4e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf56:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cf5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf5e:	4911      	ldr	r1, [pc, #68]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800cf60:	4313      	orrs	r3, r2
 800cf62:	608b      	str	r3, [r1, #8]
 800cf64:	e005      	b.n	800cf72 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800cf66:	4b0f      	ldr	r3, [pc, #60]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800cf68:	689b      	ldr	r3, [r3, #8]
 800cf6a:	4a0e      	ldr	r2, [pc, #56]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800cf6c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800cf70:	6093      	str	r3, [r2, #8]
 800cf72:	4b0c      	ldr	r3, [pc, #48]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800cf74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf7e:	4909      	ldr	r1, [pc, #36]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800cf80:	4313      	orrs	r3, r2
 800cf82:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f003 0310 	and.w	r3, r3, #16
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d004      	beq.n	800cf9a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800cf96:	4b04      	ldr	r3, [pc, #16]	; (800cfa8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800cf98:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800cf9a:	2300      	movs	r3, #0
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3718      	adds	r7, #24
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}
 800cfa4:	40023800 	.word	0x40023800
 800cfa8:	424711e0 	.word	0x424711e0

0800cfac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b082      	sub	sp, #8
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d101      	bne.n	800cfbe <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800cfba:	2301      	movs	r3, #1
 800cfbc:	e083      	b.n	800d0c6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	7f5b      	ldrb	r3, [r3, #29]
 800cfc2:	b2db      	uxtb	r3, r3
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d105      	bne.n	800cfd4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f7f5 f838 	bl	8002044 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2202      	movs	r2, #2
 800cfd8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	22ca      	movs	r2, #202	; 0xca
 800cfe0:	625a      	str	r2, [r3, #36]	; 0x24
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	2253      	movs	r2, #83	; 0x53
 800cfe8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f000 fb84 	bl	800d6f8 <RTC_EnterInitMode>
 800cff0:	4603      	mov	r3, r0
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d008      	beq.n	800d008 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	22ff      	movs	r2, #255	; 0xff
 800cffc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2204      	movs	r2, #4
 800d002:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800d004:	2301      	movs	r3, #1
 800d006:	e05e      	b.n	800d0c6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	689b      	ldr	r3, [r3, #8]
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	6812      	ldr	r2, [r2, #0]
 800d012:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d01a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	6899      	ldr	r1, [r3, #8]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	685a      	ldr	r2, [r3, #4]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	691b      	ldr	r3, [r3, #16]
 800d02a:	431a      	orrs	r2, r3
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	695b      	ldr	r3, [r3, #20]
 800d030:	431a      	orrs	r2, r3
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	430a      	orrs	r2, r1
 800d038:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	687a      	ldr	r2, [r7, #4]
 800d040:	68d2      	ldr	r2, [r2, #12]
 800d042:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	6919      	ldr	r1, [r3, #16]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	689b      	ldr	r3, [r3, #8]
 800d04e:	041a      	lsls	r2, r3, #16
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	430a      	orrs	r2, r1
 800d056:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	68da      	ldr	r2, [r3, #12]
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d066:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	689b      	ldr	r3, [r3, #8]
 800d06e:	f003 0320 	and.w	r3, r3, #32
 800d072:	2b00      	cmp	r3, #0
 800d074:	d10e      	bne.n	800d094 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 fb16 	bl	800d6a8 <HAL_RTC_WaitForSynchro>
 800d07c:	4603      	mov	r3, r0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d008      	beq.n	800d094 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	22ff      	movs	r2, #255	; 0xff
 800d088:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2204      	movs	r2, #4
 800d08e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800d090:	2301      	movs	r3, #1
 800d092:	e018      	b.n	800d0c6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d0a2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	699a      	ldr	r2, [r3, #24]
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	430a      	orrs	r2, r1
 800d0b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	22ff      	movs	r2, #255	; 0xff
 800d0bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2201      	movs	r2, #1
 800d0c2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800d0c4:	2300      	movs	r3, #0
  }
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3708      	adds	r7, #8
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}

0800d0ce <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d0ce:	b590      	push	{r4, r7, lr}
 800d0d0:	b087      	sub	sp, #28
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	60f8      	str	r0, [r7, #12]
 800d0d6:	60b9      	str	r1, [r7, #8]
 800d0d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	7f1b      	ldrb	r3, [r3, #28]
 800d0e2:	2b01      	cmp	r3, #1
 800d0e4:	d101      	bne.n	800d0ea <HAL_RTC_SetTime+0x1c>
 800d0e6:	2302      	movs	r3, #2
 800d0e8:	e0aa      	b.n	800d240 <HAL_RTC_SetTime+0x172>
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	2201      	movs	r2, #1
 800d0ee:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	2202      	movs	r2, #2
 800d0f4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d126      	bne.n	800d14a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	689b      	ldr	r3, [r3, #8]
 800d102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d106:	2b00      	cmp	r3, #0
 800d108:	d102      	bne.n	800d110 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	2200      	movs	r2, #0
 800d10e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	4618      	mov	r0, r3
 800d116:	f000 fb1b 	bl	800d750 <RTC_ByteToBcd2>
 800d11a:	4603      	mov	r3, r0
 800d11c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	785b      	ldrb	r3, [r3, #1]
 800d122:	4618      	mov	r0, r3
 800d124:	f000 fb14 	bl	800d750 <RTC_ByteToBcd2>
 800d128:	4603      	mov	r3, r0
 800d12a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d12c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	789b      	ldrb	r3, [r3, #2]
 800d132:	4618      	mov	r0, r3
 800d134:	f000 fb0c 	bl	800d750 <RTC_ByteToBcd2>
 800d138:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d13a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	78db      	ldrb	r3, [r3, #3]
 800d142:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d144:	4313      	orrs	r3, r2
 800d146:	617b      	str	r3, [r7, #20]
 800d148:	e018      	b.n	800d17c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	689b      	ldr	r3, [r3, #8]
 800d150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d154:	2b00      	cmp	r3, #0
 800d156:	d102      	bne.n	800d15e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	2200      	movs	r2, #0
 800d15c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	785b      	ldrb	r3, [r3, #1]
 800d168:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d16a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800d16c:	68ba      	ldr	r2, [r7, #8]
 800d16e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d170:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	78db      	ldrb	r3, [r3, #3]
 800d176:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d178:	4313      	orrs	r3, r2
 800d17a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	22ca      	movs	r2, #202	; 0xca
 800d182:	625a      	str	r2, [r3, #36]	; 0x24
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	2253      	movs	r2, #83	; 0x53
 800d18a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d18c:	68f8      	ldr	r0, [r7, #12]
 800d18e:	f000 fab3 	bl	800d6f8 <RTC_EnterInitMode>
 800d192:	4603      	mov	r3, r0
 800d194:	2b00      	cmp	r3, #0
 800d196:	d00b      	beq.n	800d1b0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	22ff      	movs	r2, #255	; 0xff
 800d19e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	2204      	movs	r2, #4
 800d1a4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	e047      	b.n	800d240 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681a      	ldr	r2, [r3, #0]
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d1ba:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d1be:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	689a      	ldr	r2, [r3, #8]
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d1ce:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	6899      	ldr	r1, [r3, #8]
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	68da      	ldr	r2, [r3, #12]
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	691b      	ldr	r3, [r3, #16]
 800d1de:	431a      	orrs	r2, r3
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	430a      	orrs	r2, r1
 800d1e6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	68da      	ldr	r2, [r3, #12]
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d1f6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	689b      	ldr	r3, [r3, #8]
 800d1fe:	f003 0320 	and.w	r3, r3, #32
 800d202:	2b00      	cmp	r3, #0
 800d204:	d111      	bne.n	800d22a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d206:	68f8      	ldr	r0, [r7, #12]
 800d208:	f000 fa4e 	bl	800d6a8 <HAL_RTC_WaitForSynchro>
 800d20c:	4603      	mov	r3, r0
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d00b      	beq.n	800d22a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	22ff      	movs	r2, #255	; 0xff
 800d218:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	2204      	movs	r2, #4
 800d21e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2200      	movs	r2, #0
 800d224:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800d226:	2301      	movs	r3, #1
 800d228:	e00a      	b.n	800d240 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	22ff      	movs	r2, #255	; 0xff
 800d230:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2201      	movs	r2, #1
 800d236:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	2200      	movs	r2, #0
 800d23c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800d23e:	2300      	movs	r3, #0
  }
}
 800d240:	4618      	mov	r0, r3
 800d242:	371c      	adds	r7, #28
 800d244:	46bd      	mov	sp, r7
 800d246:	bd90      	pop	{r4, r7, pc}

0800d248 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d248:	b590      	push	{r4, r7, lr}
 800d24a:	b087      	sub	sp, #28
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	60f8      	str	r0, [r7, #12]
 800d250:	60b9      	str	r1, [r7, #8]
 800d252:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800d254:	2300      	movs	r3, #0
 800d256:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	7f1b      	ldrb	r3, [r3, #28]
 800d25c:	2b01      	cmp	r3, #1
 800d25e:	d101      	bne.n	800d264 <HAL_RTC_SetDate+0x1c>
 800d260:	2302      	movs	r3, #2
 800d262:	e094      	b.n	800d38e <HAL_RTC_SetDate+0x146>
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	2201      	movs	r2, #1
 800d268:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2202      	movs	r2, #2
 800d26e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d10e      	bne.n	800d294 <HAL_RTC_SetDate+0x4c>
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	785b      	ldrb	r3, [r3, #1]
 800d27a:	f003 0310 	and.w	r3, r3, #16
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d008      	beq.n	800d294 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	785b      	ldrb	r3, [r3, #1]
 800d286:	f023 0310 	bic.w	r3, r3, #16
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	330a      	adds	r3, #10
 800d28e:	b2da      	uxtb	r2, r3
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d11c      	bne.n	800d2d4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	78db      	ldrb	r3, [r3, #3]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f000 fa56 	bl	800d750 <RTC_ByteToBcd2>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	785b      	ldrb	r3, [r3, #1]
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f000 fa4f 	bl	800d750 <RTC_ByteToBcd2>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d2b6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	789b      	ldrb	r3, [r3, #2]
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f000 fa47 	bl	800d750 <RTC_ByteToBcd2>
 800d2c2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800d2c4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d2ce:	4313      	orrs	r3, r2
 800d2d0:	617b      	str	r3, [r7, #20]
 800d2d2:	e00e      	b.n	800d2f2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	78db      	ldrb	r3, [r3, #3]
 800d2d8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	785b      	ldrb	r3, [r3, #1]
 800d2de:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d2e0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800d2e2:	68ba      	ldr	r2, [r7, #8]
 800d2e4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800d2e6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	22ca      	movs	r2, #202	; 0xca
 800d2f8:	625a      	str	r2, [r3, #36]	; 0x24
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	2253      	movs	r2, #83	; 0x53
 800d300:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d302:	68f8      	ldr	r0, [r7, #12]
 800d304:	f000 f9f8 	bl	800d6f8 <RTC_EnterInitMode>
 800d308:	4603      	mov	r3, r0
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d00b      	beq.n	800d326 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	22ff      	movs	r2, #255	; 0xff
 800d314:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2204      	movs	r2, #4
 800d31a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	2200      	movs	r2, #0
 800d320:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800d322:	2301      	movs	r3, #1
 800d324:	e033      	b.n	800d38e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d330:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d334:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	68da      	ldr	r2, [r3, #12]
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d344:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	689b      	ldr	r3, [r3, #8]
 800d34c:	f003 0320 	and.w	r3, r3, #32
 800d350:	2b00      	cmp	r3, #0
 800d352:	d111      	bne.n	800d378 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d354:	68f8      	ldr	r0, [r7, #12]
 800d356:	f000 f9a7 	bl	800d6a8 <HAL_RTC_WaitForSynchro>
 800d35a:	4603      	mov	r3, r0
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d00b      	beq.n	800d378 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	22ff      	movs	r2, #255	; 0xff
 800d366:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	2204      	movs	r2, #4
 800d36c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	2200      	movs	r2, #0
 800d372:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800d374:	2301      	movs	r3, #1
 800d376:	e00a      	b.n	800d38e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	22ff      	movs	r2, #255	; 0xff
 800d37e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	2201      	movs	r2, #1
 800d384:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2200      	movs	r2, #0
 800d38a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800d38c:	2300      	movs	r3, #0
  }
}
 800d38e:	4618      	mov	r0, r3
 800d390:	371c      	adds	r7, #28
 800d392:	46bd      	mov	sp, r7
 800d394:	bd90      	pop	{r4, r7, pc}
	...

0800d398 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800d398:	b590      	push	{r4, r7, lr}
 800d39a:	b089      	sub	sp, #36	; 0x24
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	60f8      	str	r0, [r7, #12]
 800d3a0:	60b9      	str	r1, [r7, #8]
 800d3a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	61fb      	str	r3, [r7, #28]
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800d3ac:	4b93      	ldr	r3, [pc, #588]	; (800d5fc <HAL_RTC_SetAlarm_IT+0x264>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	4a93      	ldr	r2, [pc, #588]	; (800d600 <HAL_RTC_SetAlarm_IT+0x268>)
 800d3b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d3b6:	0adb      	lsrs	r3, r3, #11
 800d3b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d3bc:	fb02 f303 	mul.w	r3, r2, r3
 800d3c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	7f1b      	ldrb	r3, [r3, #28]
 800d3c6:	2b01      	cmp	r3, #1
 800d3c8:	d101      	bne.n	800d3ce <HAL_RTC_SetAlarm_IT+0x36>
 800d3ca:	2302      	movs	r3, #2
 800d3cc:	e111      	b.n	800d5f2 <HAL_RTC_SetAlarm_IT+0x25a>
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2201      	movs	r2, #1
 800d3d2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2202      	movs	r2, #2
 800d3d8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d137      	bne.n	800d450 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	689b      	ldr	r3, [r3, #8]
 800d3e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d102      	bne.n	800d3f4 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f000 f9a9 	bl	800d750 <RTC_ByteToBcd2>
 800d3fe:	4603      	mov	r3, r0
 800d400:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	785b      	ldrb	r3, [r3, #1]
 800d406:	4618      	mov	r0, r3
 800d408:	f000 f9a2 	bl	800d750 <RTC_ByteToBcd2>
 800d40c:	4603      	mov	r3, r0
 800d40e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800d410:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	789b      	ldrb	r3, [r3, #2]
 800d416:	4618      	mov	r0, r3
 800d418:	f000 f99a 	bl	800d750 <RTC_ByteToBcd2>
 800d41c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800d41e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	78db      	ldrb	r3, [r3, #3]
 800d426:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800d428:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d432:	4618      	mov	r0, r3
 800d434:	f000 f98c 	bl	800d750 <RTC_ByteToBcd2>
 800d438:	4603      	mov	r3, r0
 800d43a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800d43c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800d444:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800d44a:	4313      	orrs	r3, r2
 800d44c:	61fb      	str	r3, [r7, #28]
 800d44e:	e023      	b.n	800d498 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	689b      	ldr	r3, [r3, #8]
 800d456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d102      	bne.n	800d464 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	2200      	movs	r2, #0
 800d462:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	785b      	ldrb	r3, [r3, #1]
 800d46e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800d470:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800d472:	68ba      	ldr	r2, [r7, #8]
 800d474:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800d476:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	78db      	ldrb	r3, [r3, #3]
 800d47c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800d47e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d486:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800d488:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800d48e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800d494:	4313      	orrs	r3, r2
 800d496:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	685a      	ldr	r2, [r3, #4]
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	699b      	ldr	r3, [r3, #24]
 800d4a0:	4313      	orrs	r3, r2
 800d4a2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	22ca      	movs	r2, #202	; 0xca
 800d4aa:	625a      	str	r2, [r3, #36]	; 0x24
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	2253      	movs	r2, #83	; 0x53
 800d4b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4bc:	d141      	bne.n	800d542 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	689a      	ldr	r2, [r3, #8]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d4cc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	68db      	ldr	r3, [r3, #12]
 800d4d4:	b2da      	uxtb	r2, r3
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800d4de:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	1e5a      	subs	r2, r3, #1
 800d4e4:	617a      	str	r2, [r7, #20]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d10b      	bne.n	800d502 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	22ff      	movs	r2, #255	; 0xff
 800d4f0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2203      	movs	r2, #3
 800d4f6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d4fe:	2303      	movs	r3, #3
 800d500:	e077      	b.n	800d5f2 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	68db      	ldr	r3, [r3, #12]
 800d508:	f003 0301 	and.w	r3, r3, #1
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d0e7      	beq.n	800d4e0 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	69fa      	ldr	r2, [r7, #28]
 800d516:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	69ba      	ldr	r2, [r7, #24]
 800d51e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	689a      	ldr	r2, [r3, #8]
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d52e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	689a      	ldr	r2, [r3, #8]
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d53e:	609a      	str	r2, [r3, #8]
 800d540:	e040      	b.n	800d5c4 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	689a      	ldr	r2, [r3, #8]
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d550:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	68db      	ldr	r3, [r3, #12]
 800d558:	b2da      	uxtb	r2, r3
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f462 7220 	orn	r2, r2, #640	; 0x280
 800d562:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	1e5a      	subs	r2, r3, #1
 800d568:	617a      	str	r2, [r7, #20]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d10b      	bne.n	800d586 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	22ff      	movs	r2, #255	; 0xff
 800d574:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	2203      	movs	r2, #3
 800d57a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2200      	movs	r2, #0
 800d580:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d582:	2303      	movs	r3, #3
 800d584:	e035      	b.n	800d5f2 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	68db      	ldr	r3, [r3, #12]
 800d58c:	f003 0302 	and.w	r3, r3, #2
 800d590:	2b00      	cmp	r3, #0
 800d592:	d0e7      	beq.n	800d564 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	69fa      	ldr	r2, [r7, #28]
 800d59a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	69ba      	ldr	r2, [r7, #24]
 800d5a2:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	689a      	ldr	r2, [r3, #8]
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d5b2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	689a      	ldr	r2, [r3, #8]
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d5c2:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800d5c4:	4b0f      	ldr	r3, [pc, #60]	; (800d604 <HAL_RTC_SetAlarm_IT+0x26c>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	4a0e      	ldr	r2, [pc, #56]	; (800d604 <HAL_RTC_SetAlarm_IT+0x26c>)
 800d5ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d5ce:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800d5d0:	4b0c      	ldr	r3, [pc, #48]	; (800d604 <HAL_RTC_SetAlarm_IT+0x26c>)
 800d5d2:	689b      	ldr	r3, [r3, #8]
 800d5d4:	4a0b      	ldr	r2, [pc, #44]	; (800d604 <HAL_RTC_SetAlarm_IT+0x26c>)
 800d5d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d5da:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	22ff      	movs	r2, #255	; 0xff
 800d5e2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d5f0:	2300      	movs	r3, #0
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3724      	adds	r7, #36	; 0x24
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd90      	pop	{r4, r7, pc}
 800d5fa:	bf00      	nop
 800d5fc:	2000003c 	.word	0x2000003c
 800d600:	10624dd3 	.word	0x10624dd3
 800d604:	40013c00 	.word	0x40013c00

0800d608 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	689b      	ldr	r3, [r3, #8]
 800d616:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d012      	beq.n	800d644 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	68db      	ldr	r3, [r3, #12]
 800d624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d00b      	beq.n	800d644 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f000 f831 	bl	800d694 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	68db      	ldr	r3, [r3, #12]
 800d638:	b2da      	uxtb	r2, r3
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800d642:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	689b      	ldr	r3, [r3, #8]
 800d64a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d012      	beq.n	800d678 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	68db      	ldr	r3, [r3, #12]
 800d658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d00b      	beq.n	800d678 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f000 f9ab 	bl	800d9bc <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	68db      	ldr	r3, [r3, #12]
 800d66c:	b2da      	uxtb	r2, r3
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f462 7220 	orn	r2, r2, #640	; 0x280
 800d676:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800d678:	4b05      	ldr	r3, [pc, #20]	; (800d690 <HAL_RTC_AlarmIRQHandler+0x88>)
 800d67a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d67e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2201      	movs	r2, #1
 800d684:	775a      	strb	r2, [r3, #29]
}
 800d686:	bf00      	nop
 800d688:	3708      	adds	r7, #8
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop
 800d690:	40013c00 	.word	0x40013c00

0800d694 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800d694:	b480      	push	{r7}
 800d696:	b083      	sub	sp, #12
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800d69c:	bf00      	nop
 800d69e:	370c      	adds	r7, #12
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a6:	4770      	bx	lr

0800d6a8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b084      	sub	sp, #16
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	68da      	ldr	r2, [r3, #12]
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d6c2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d6c4:	f7fb fe32 	bl	800932c <HAL_GetTick>
 800d6c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d6ca:	e009      	b.n	800d6e0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d6cc:	f7fb fe2e 	bl	800932c <HAL_GetTick>
 800d6d0:	4602      	mov	r2, r0
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	1ad3      	subs	r3, r2, r3
 800d6d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d6da:	d901      	bls.n	800d6e0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800d6dc:	2303      	movs	r3, #3
 800d6de:	e007      	b.n	800d6f0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	68db      	ldr	r3, [r3, #12]
 800d6e6:	f003 0320 	and.w	r3, r3, #32
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d0ee      	beq.n	800d6cc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800d6ee:	2300      	movs	r3, #0
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3710      	adds	r7, #16
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}

0800d6f8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b084      	sub	sp, #16
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d700:	2300      	movs	r3, #0
 800d702:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	68db      	ldr	r3, [r3, #12]
 800d70a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d119      	bne.n	800d746 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f04f 32ff 	mov.w	r2, #4294967295
 800d71a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d71c:	f7fb fe06 	bl	800932c <HAL_GetTick>
 800d720:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d722:	e009      	b.n	800d738 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d724:	f7fb fe02 	bl	800932c <HAL_GetTick>
 800d728:	4602      	mov	r2, r0
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	1ad3      	subs	r3, r2, r3
 800d72e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d732:	d901      	bls.n	800d738 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800d734:	2303      	movs	r3, #3
 800d736:	e007      	b.n	800d748 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	68db      	ldr	r3, [r3, #12]
 800d73e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d742:	2b00      	cmp	r3, #0
 800d744:	d0ee      	beq.n	800d724 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800d746:	2300      	movs	r3, #0
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3710      	adds	r7, #16
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d750:	b480      	push	{r7}
 800d752:	b085      	sub	sp, #20
 800d754:	af00      	add	r7, sp, #0
 800d756:	4603      	mov	r3, r0
 800d758:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d75a:	2300      	movs	r3, #0
 800d75c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800d75e:	e005      	b.n	800d76c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	3301      	adds	r3, #1
 800d764:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800d766:	79fb      	ldrb	r3, [r7, #7]
 800d768:	3b0a      	subs	r3, #10
 800d76a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800d76c:	79fb      	ldrb	r3, [r7, #7]
 800d76e:	2b09      	cmp	r3, #9
 800d770:	d8f6      	bhi.n	800d760 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	b2db      	uxtb	r3, r3
 800d776:	011b      	lsls	r3, r3, #4
 800d778:	b2da      	uxtb	r2, r3
 800d77a:	79fb      	ldrb	r3, [r7, #7]
 800d77c:	4313      	orrs	r3, r2
 800d77e:	b2db      	uxtb	r3, r3
}
 800d780:	4618      	mov	r0, r3
 800d782:	3714      	adds	r7, #20
 800d784:	46bd      	mov	sp, r7
 800d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78a:	4770      	bx	lr

0800d78c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b087      	sub	sp, #28
 800d790:	af00      	add	r7, sp, #0
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	60b9      	str	r1, [r7, #8]
 800d796:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	7f1b      	ldrb	r3, [r3, #28]
 800d79c:	2b01      	cmp	r3, #1
 800d79e:	d101      	bne.n	800d7a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800d7a0:	2302      	movs	r3, #2
 800d7a2:	e0a6      	b.n	800d8f2 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2202      	movs	r2, #2
 800d7ae:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	22ca      	movs	r2, #202	; 0xca
 800d7b6:	625a      	str	r2, [r3, #36]	; 0x24
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	2253      	movs	r2, #83	; 0x53
 800d7be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	689b      	ldr	r3, [r3, #8]
 800d7c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d022      	beq.n	800d814 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800d7ce:	4b4c      	ldr	r3, [pc, #304]	; (800d900 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	4a4c      	ldr	r2, [pc, #304]	; (800d904 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800d7d4:	fba2 2303 	umull	r2, r3, r2, r3
 800d7d8:	0adb      	lsrs	r3, r3, #11
 800d7da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d7de:	fb02 f303 	mul.w	r3, r2, r3
 800d7e2:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	1e5a      	subs	r2, r3, #1
 800d7e8:	617a      	str	r2, [r7, #20]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d10b      	bne.n	800d806 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	22ff      	movs	r2, #255	; 0xff
 800d7f4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2203      	movs	r2, #3
 800d7fa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	2200      	movs	r2, #0
 800d800:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d802:	2303      	movs	r3, #3
 800d804:	e075      	b.n	800d8f2 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	68db      	ldr	r3, [r3, #12]
 800d80c:	f003 0304 	and.w	r3, r3, #4
 800d810:	2b00      	cmp	r3, #0
 800d812:	d1e7      	bne.n	800d7e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	689a      	ldr	r2, [r3, #8]
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d822:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800d824:	4b36      	ldr	r3, [pc, #216]	; (800d900 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	4a36      	ldr	r2, [pc, #216]	; (800d904 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800d82a:	fba2 2303 	umull	r2, r3, r2, r3
 800d82e:	0adb      	lsrs	r3, r3, #11
 800d830:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d834:	fb02 f303 	mul.w	r3, r2, r3
 800d838:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	1e5a      	subs	r2, r3, #1
 800d83e:	617a      	str	r2, [r7, #20]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d10b      	bne.n	800d85c <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	22ff      	movs	r2, #255	; 0xff
 800d84a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	2203      	movs	r2, #3
 800d850:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2200      	movs	r2, #0
 800d856:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800d858:	2303      	movs	r3, #3
 800d85a:	e04a      	b.n	800d8f2 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	68db      	ldr	r3, [r3, #12]
 800d862:	f003 0304 	and.w	r3, r3, #4
 800d866:	2b00      	cmp	r3, #0
 800d868:	d0e7      	beq.n	800d83a <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	68ba      	ldr	r2, [r7, #8]
 800d870:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	689a      	ldr	r2, [r3, #8]
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f022 0207 	bic.w	r2, r2, #7
 800d880:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	6899      	ldr	r1, [r3, #8]
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	687a      	ldr	r2, [r7, #4]
 800d88e:	430a      	orrs	r2, r1
 800d890:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800d892:	4b1d      	ldr	r3, [pc, #116]	; (800d908 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	4a1c      	ldr	r2, [pc, #112]	; (800d908 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800d898:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d89c:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800d89e:	4b1a      	ldr	r3, [pc, #104]	; (800d908 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800d8a0:	689b      	ldr	r3, [r3, #8]
 800d8a2:	4a19      	ldr	r2, [pc, #100]	; (800d908 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800d8a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d8a8:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	68db      	ldr	r3, [r3, #12]
 800d8b0:	b2da      	uxtb	r2, r3
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800d8ba:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	689a      	ldr	r2, [r3, #8]
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d8ca:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	689a      	ldr	r2, [r3, #8]
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d8da:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	22ff      	movs	r2, #255	; 0xff
 800d8e2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d8f0:	2300      	movs	r3, #0
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	371c      	adds	r7, #28
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr
 800d8fe:	bf00      	nop
 800d900:	2000003c 	.word	0x2000003c
 800d904:	10624dd3 	.word	0x10624dd3
 800d908:	40013c00 	.word	0x40013c00

0800d90c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b084      	sub	sp, #16
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d914:	2300      	movs	r3, #0
 800d916:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	7f1b      	ldrb	r3, [r3, #28]
 800d91c:	2b01      	cmp	r3, #1
 800d91e:	d101      	bne.n	800d924 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800d920:	2302      	movs	r3, #2
 800d922:	e047      	b.n	800d9b4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2201      	movs	r2, #1
 800d928:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2202      	movs	r2, #2
 800d92e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	22ca      	movs	r2, #202	; 0xca
 800d936:	625a      	str	r2, [r3, #36]	; 0x24
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	2253      	movs	r2, #83	; 0x53
 800d93e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	689a      	ldr	r2, [r3, #8]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d94e:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	689a      	ldr	r2, [r3, #8]
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d95e:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d960:	f7fb fce4 	bl	800932c <HAL_GetTick>
 800d964:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800d966:	e013      	b.n	800d990 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d968:	f7fb fce0 	bl	800932c <HAL_GetTick>
 800d96c:	4602      	mov	r2, r0
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	1ad3      	subs	r3, r2, r3
 800d972:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d976:	d90b      	bls.n	800d990 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	22ff      	movs	r2, #255	; 0xff
 800d97e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2203      	movs	r2, #3
 800d984:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2200      	movs	r2, #0
 800d98a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800d98c:	2303      	movs	r3, #3
 800d98e:	e011      	b.n	800d9b4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	68db      	ldr	r3, [r3, #12]
 800d996:	f003 0304 	and.w	r3, r3, #4
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d0e4      	beq.n	800d968 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	22ff      	movs	r2, #255	; 0xff
 800d9a4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d9b2:	2300      	movs	r3, #0
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3710      	adds	r7, #16
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}

0800d9bc <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b083      	sub	sp, #12
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800d9c4:	bf00      	nop
 800d9c6:	370c      	adds	r7, #12
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr

0800d9d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b082      	sub	sp, #8
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d101      	bne.n	800d9e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d9de:	2301      	movs	r3, #1
 800d9e0:	e07b      	b.n	800dada <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d108      	bne.n	800d9fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d9f2:	d009      	beq.n	800da08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	61da      	str	r2, [r3, #28]
 800d9fa:	e005      	b.n	800da08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2200      	movs	r2, #0
 800da00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2200      	movs	r2, #0
 800da06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2200      	movs	r2, #0
 800da0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800da14:	b2db      	uxtb	r3, r3
 800da16:	2b00      	cmp	r3, #0
 800da18:	d106      	bne.n	800da28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2200      	movs	r2, #0
 800da1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f7f4 fd6a 	bl	80024fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2202      	movs	r2, #2
 800da2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	681a      	ldr	r2, [r3, #0]
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800da3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	685b      	ldr	r3, [r3, #4]
 800da44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	689b      	ldr	r3, [r3, #8]
 800da4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800da50:	431a      	orrs	r2, r3
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	68db      	ldr	r3, [r3, #12]
 800da56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da5a:	431a      	orrs	r2, r3
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	691b      	ldr	r3, [r3, #16]
 800da60:	f003 0302 	and.w	r3, r3, #2
 800da64:	431a      	orrs	r2, r3
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	695b      	ldr	r3, [r3, #20]
 800da6a:	f003 0301 	and.w	r3, r3, #1
 800da6e:	431a      	orrs	r2, r3
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	699b      	ldr	r3, [r3, #24]
 800da74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800da78:	431a      	orrs	r2, r3
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	69db      	ldr	r3, [r3, #28]
 800da7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800da82:	431a      	orrs	r2, r3
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6a1b      	ldr	r3, [r3, #32]
 800da88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da8c:	ea42 0103 	orr.w	r1, r2, r3
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	430a      	orrs	r2, r1
 800da9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	699b      	ldr	r3, [r3, #24]
 800daa4:	0c1b      	lsrs	r3, r3, #16
 800daa6:	f003 0104 	and.w	r1, r3, #4
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daae:	f003 0210 	and.w	r2, r3, #16
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	430a      	orrs	r2, r1
 800dab8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	69da      	ldr	r2, [r3, #28]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dac8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2200      	movs	r2, #0
 800dace:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2201      	movs	r2, #1
 800dad4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800dad8:	2300      	movs	r3, #0
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3708      	adds	r7, #8
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}

0800dae2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dae2:	b580      	push	{r7, lr}
 800dae4:	b088      	sub	sp, #32
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	60f8      	str	r0, [r7, #12]
 800daea:	60b9      	str	r1, [r7, #8]
 800daec:	603b      	str	r3, [r7, #0]
 800daee:	4613      	mov	r3, r2
 800daf0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800daf2:	2300      	movs	r3, #0
 800daf4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d101      	bne.n	800db04 <HAL_SPI_Transmit+0x22>
 800db00:	2302      	movs	r3, #2
 800db02:	e126      	b.n	800dd52 <HAL_SPI_Transmit+0x270>
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	2201      	movs	r2, #1
 800db08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800db0c:	f7fb fc0e 	bl	800932c <HAL_GetTick>
 800db10:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800db12:	88fb      	ldrh	r3, [r7, #6]
 800db14:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800db1c:	b2db      	uxtb	r3, r3
 800db1e:	2b01      	cmp	r3, #1
 800db20:	d002      	beq.n	800db28 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800db22:	2302      	movs	r3, #2
 800db24:	77fb      	strb	r3, [r7, #31]
    goto error;
 800db26:	e10b      	b.n	800dd40 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d002      	beq.n	800db34 <HAL_SPI_Transmit+0x52>
 800db2e:	88fb      	ldrh	r3, [r7, #6]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d102      	bne.n	800db3a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800db34:	2301      	movs	r3, #1
 800db36:	77fb      	strb	r3, [r7, #31]
    goto error;
 800db38:	e102      	b.n	800dd40 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	2203      	movs	r2, #3
 800db3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	2200      	movs	r2, #0
 800db46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	68ba      	ldr	r2, [r7, #8]
 800db4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	88fa      	ldrh	r2, [r7, #6]
 800db52:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	88fa      	ldrh	r2, [r7, #6]
 800db58:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	2200      	movs	r2, #0
 800db5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	2200      	movs	r2, #0
 800db64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	2200      	movs	r2, #0
 800db6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	2200      	movs	r2, #0
 800db70:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2200      	movs	r2, #0
 800db76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	689b      	ldr	r3, [r3, #8]
 800db7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800db80:	d10f      	bne.n	800dba2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	681a      	ldr	r2, [r3, #0]
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800db90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	681a      	ldr	r2, [r3, #0]
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dba0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbac:	2b40      	cmp	r3, #64	; 0x40
 800dbae:	d007      	beq.n	800dbc0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	681a      	ldr	r2, [r3, #0]
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dbbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	68db      	ldr	r3, [r3, #12]
 800dbc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dbc8:	d14b      	bne.n	800dc62 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	685b      	ldr	r3, [r3, #4]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d002      	beq.n	800dbd8 <HAL_SPI_Transmit+0xf6>
 800dbd2:	8afb      	ldrh	r3, [r7, #22]
 800dbd4:	2b01      	cmp	r3, #1
 800dbd6:	d13e      	bne.n	800dc56 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbdc:	881a      	ldrh	r2, [r3, #0]
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbe8:	1c9a      	adds	r2, r3, #2
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dbf2:	b29b      	uxth	r3, r3
 800dbf4:	3b01      	subs	r3, #1
 800dbf6:	b29a      	uxth	r2, r3
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800dbfc:	e02b      	b.n	800dc56 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	689b      	ldr	r3, [r3, #8]
 800dc04:	f003 0302 	and.w	r3, r3, #2
 800dc08:	2b02      	cmp	r3, #2
 800dc0a:	d112      	bne.n	800dc32 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc10:	881a      	ldrh	r2, [r3, #0]
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc1c:	1c9a      	adds	r2, r3, #2
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc26:	b29b      	uxth	r3, r3
 800dc28:	3b01      	subs	r3, #1
 800dc2a:	b29a      	uxth	r2, r3
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	86da      	strh	r2, [r3, #54]	; 0x36
 800dc30:	e011      	b.n	800dc56 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dc32:	f7fb fb7b 	bl	800932c <HAL_GetTick>
 800dc36:	4602      	mov	r2, r0
 800dc38:	69bb      	ldr	r3, [r7, #24]
 800dc3a:	1ad3      	subs	r3, r2, r3
 800dc3c:	683a      	ldr	r2, [r7, #0]
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d803      	bhi.n	800dc4a <HAL_SPI_Transmit+0x168>
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc48:	d102      	bne.n	800dc50 <HAL_SPI_Transmit+0x16e>
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d102      	bne.n	800dc56 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800dc50:	2303      	movs	r3, #3
 800dc52:	77fb      	strb	r3, [r7, #31]
          goto error;
 800dc54:	e074      	b.n	800dd40 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d1ce      	bne.n	800dbfe <HAL_SPI_Transmit+0x11c>
 800dc60:	e04c      	b.n	800dcfc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	685b      	ldr	r3, [r3, #4]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d002      	beq.n	800dc70 <HAL_SPI_Transmit+0x18e>
 800dc6a:	8afb      	ldrh	r3, [r7, #22]
 800dc6c:	2b01      	cmp	r3, #1
 800dc6e:	d140      	bne.n	800dcf2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	330c      	adds	r3, #12
 800dc7a:	7812      	ldrb	r2, [r2, #0]
 800dc7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc82:	1c5a      	adds	r2, r3, #1
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc8c:	b29b      	uxth	r3, r3
 800dc8e:	3b01      	subs	r3, #1
 800dc90:	b29a      	uxth	r2, r3
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800dc96:	e02c      	b.n	800dcf2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	689b      	ldr	r3, [r3, #8]
 800dc9e:	f003 0302 	and.w	r3, r3, #2
 800dca2:	2b02      	cmp	r3, #2
 800dca4:	d113      	bne.n	800dcce <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	330c      	adds	r3, #12
 800dcb0:	7812      	ldrb	r2, [r2, #0]
 800dcb2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcb8:	1c5a      	adds	r2, r3, #1
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	3b01      	subs	r3, #1
 800dcc6:	b29a      	uxth	r2, r3
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	86da      	strh	r2, [r3, #54]	; 0x36
 800dccc:	e011      	b.n	800dcf2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dcce:	f7fb fb2d 	bl	800932c <HAL_GetTick>
 800dcd2:	4602      	mov	r2, r0
 800dcd4:	69bb      	ldr	r3, [r7, #24]
 800dcd6:	1ad3      	subs	r3, r2, r3
 800dcd8:	683a      	ldr	r2, [r7, #0]
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d803      	bhi.n	800dce6 <HAL_SPI_Transmit+0x204>
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dce4:	d102      	bne.n	800dcec <HAL_SPI_Transmit+0x20a>
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d102      	bne.n	800dcf2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800dcec:	2303      	movs	r3, #3
 800dcee:	77fb      	strb	r3, [r7, #31]
          goto error;
 800dcf0:	e026      	b.n	800dd40 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d1cd      	bne.n	800dc98 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dcfc:	69ba      	ldr	r2, [r7, #24]
 800dcfe:	6839      	ldr	r1, [r7, #0]
 800dd00:	68f8      	ldr	r0, [r7, #12]
 800dd02:	f000 fbcb 	bl	800e49c <SPI_EndRxTxTransaction>
 800dd06:	4603      	mov	r3, r0
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d002      	beq.n	800dd12 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	2220      	movs	r2, #32
 800dd10:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	689b      	ldr	r3, [r3, #8]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d10a      	bne.n	800dd30 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	613b      	str	r3, [r7, #16]
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	68db      	ldr	r3, [r3, #12]
 800dd24:	613b      	str	r3, [r7, #16]
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	689b      	ldr	r3, [r3, #8]
 800dd2c:	613b      	str	r3, [r7, #16]
 800dd2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d002      	beq.n	800dd3e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800dd38:	2301      	movs	r3, #1
 800dd3a:	77fb      	strb	r3, [r7, #31]
 800dd3c:	e000      	b.n	800dd40 <HAL_SPI_Transmit+0x25e>
  }

error:
 800dd3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	2201      	movs	r2, #1
 800dd44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800dd50:	7ffb      	ldrb	r3, [r7, #31]
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3720      	adds	r7, #32
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}

0800dd5a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dd5a:	b580      	push	{r7, lr}
 800dd5c:	b088      	sub	sp, #32
 800dd5e:	af02      	add	r7, sp, #8
 800dd60:	60f8      	str	r0, [r7, #12]
 800dd62:	60b9      	str	r1, [r7, #8]
 800dd64:	603b      	str	r3, [r7, #0]
 800dd66:	4613      	mov	r3, r2
 800dd68:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dd76:	d112      	bne.n	800dd9e <HAL_SPI_Receive+0x44>
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	689b      	ldr	r3, [r3, #8]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d10e      	bne.n	800dd9e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2204      	movs	r2, #4
 800dd84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800dd88:	88fa      	ldrh	r2, [r7, #6]
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	9300      	str	r3, [sp, #0]
 800dd8e:	4613      	mov	r3, r2
 800dd90:	68ba      	ldr	r2, [r7, #8]
 800dd92:	68b9      	ldr	r1, [r7, #8]
 800dd94:	68f8      	ldr	r0, [r7, #12]
 800dd96:	f000 f8f1 	bl	800df7c <HAL_SPI_TransmitReceive>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	e0ea      	b.n	800df74 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	d101      	bne.n	800ddac <HAL_SPI_Receive+0x52>
 800dda8:	2302      	movs	r3, #2
 800ddaa:	e0e3      	b.n	800df74 <HAL_SPI_Receive+0x21a>
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	2201      	movs	r2, #1
 800ddb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ddb4:	f7fb faba 	bl	800932c <HAL_GetTick>
 800ddb8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	2b01      	cmp	r3, #1
 800ddc4:	d002      	beq.n	800ddcc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ddc6:	2302      	movs	r3, #2
 800ddc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ddca:	e0ca      	b.n	800df62 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d002      	beq.n	800ddd8 <HAL_SPI_Receive+0x7e>
 800ddd2:	88fb      	ldrh	r3, [r7, #6]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d102      	bne.n	800ddde <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ddd8:	2301      	movs	r3, #1
 800ddda:	75fb      	strb	r3, [r7, #23]
    goto error;
 800dddc:	e0c1      	b.n	800df62 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	2204      	movs	r2, #4
 800dde2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	2200      	movs	r2, #0
 800ddea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	68ba      	ldr	r2, [r7, #8]
 800ddf0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	88fa      	ldrh	r2, [r7, #6]
 800ddf6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	88fa      	ldrh	r2, [r7, #6]
 800ddfc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	2200      	movs	r2, #0
 800de02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	2200      	movs	r2, #0
 800de08:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	2200      	movs	r2, #0
 800de0e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	2200      	movs	r2, #0
 800de14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2200      	movs	r2, #0
 800de1a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	689b      	ldr	r3, [r3, #8]
 800de20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de24:	d10f      	bne.n	800de46 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	681a      	ldr	r2, [r3, #0]
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	681a      	ldr	r2, [r3, #0]
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800de44:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de50:	2b40      	cmp	r3, #64	; 0x40
 800de52:	d007      	beq.n	800de64 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	681a      	ldr	r2, [r3, #0]
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800de62:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	68db      	ldr	r3, [r3, #12]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d162      	bne.n	800df32 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800de6c:	e02e      	b.n	800decc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	689b      	ldr	r3, [r3, #8]
 800de74:	f003 0301 	and.w	r3, r3, #1
 800de78:	2b01      	cmp	r3, #1
 800de7a:	d115      	bne.n	800dea8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f103 020c 	add.w	r2, r3, #12
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de88:	7812      	ldrb	r2, [r2, #0]
 800de8a:	b2d2      	uxtb	r2, r2
 800de8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de92:	1c5a      	adds	r2, r3, #1
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de9c:	b29b      	uxth	r3, r3
 800de9e:	3b01      	subs	r3, #1
 800dea0:	b29a      	uxth	r2, r3
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dea6:	e011      	b.n	800decc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dea8:	f7fb fa40 	bl	800932c <HAL_GetTick>
 800deac:	4602      	mov	r2, r0
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	1ad3      	subs	r3, r2, r3
 800deb2:	683a      	ldr	r2, [r7, #0]
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d803      	bhi.n	800dec0 <HAL_SPI_Receive+0x166>
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800debe:	d102      	bne.n	800dec6 <HAL_SPI_Receive+0x16c>
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d102      	bne.n	800decc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800dec6:	2303      	movs	r3, #3
 800dec8:	75fb      	strb	r3, [r7, #23]
          goto error;
 800deca:	e04a      	b.n	800df62 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d1cb      	bne.n	800de6e <HAL_SPI_Receive+0x114>
 800ded6:	e031      	b.n	800df3c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	689b      	ldr	r3, [r3, #8]
 800dede:	f003 0301 	and.w	r3, r3, #1
 800dee2:	2b01      	cmp	r3, #1
 800dee4:	d113      	bne.n	800df0e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	68da      	ldr	r2, [r3, #12]
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800def0:	b292      	uxth	r2, r2
 800def2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800def8:	1c9a      	adds	r2, r3, #2
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df02:	b29b      	uxth	r3, r3
 800df04:	3b01      	subs	r3, #1
 800df06:	b29a      	uxth	r2, r3
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800df0c:	e011      	b.n	800df32 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800df0e:	f7fb fa0d 	bl	800932c <HAL_GetTick>
 800df12:	4602      	mov	r2, r0
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	1ad3      	subs	r3, r2, r3
 800df18:	683a      	ldr	r2, [r7, #0]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d803      	bhi.n	800df26 <HAL_SPI_Receive+0x1cc>
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df24:	d102      	bne.n	800df2c <HAL_SPI_Receive+0x1d2>
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d102      	bne.n	800df32 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800df2c:	2303      	movs	r3, #3
 800df2e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800df30:	e017      	b.n	800df62 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df36:	b29b      	uxth	r3, r3
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d1cd      	bne.n	800ded8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800df3c:	693a      	ldr	r2, [r7, #16]
 800df3e:	6839      	ldr	r1, [r7, #0]
 800df40:	68f8      	ldr	r0, [r7, #12]
 800df42:	f000 fa45 	bl	800e3d0 <SPI_EndRxTransaction>
 800df46:	4603      	mov	r3, r0
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d002      	beq.n	800df52 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	2220      	movs	r2, #32
 800df50:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df56:	2b00      	cmp	r3, #0
 800df58:	d002      	beq.n	800df60 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800df5a:	2301      	movs	r3, #1
 800df5c:	75fb      	strb	r3, [r7, #23]
 800df5e:	e000      	b.n	800df62 <HAL_SPI_Receive+0x208>
  }

error :
 800df60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2201      	movs	r2, #1
 800df66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2200      	movs	r2, #0
 800df6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800df72:	7dfb      	ldrb	r3, [r7, #23]
}
 800df74:	4618      	mov	r0, r3
 800df76:	3718      	adds	r7, #24
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}

0800df7c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b08c      	sub	sp, #48	; 0x30
 800df80:	af00      	add	r7, sp, #0
 800df82:	60f8      	str	r0, [r7, #12]
 800df84:	60b9      	str	r1, [r7, #8]
 800df86:	607a      	str	r2, [r7, #4]
 800df88:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800df8a:	2301      	movs	r3, #1
 800df8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800df8e:	2300      	movs	r3, #0
 800df90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800df9a:	2b01      	cmp	r3, #1
 800df9c:	d101      	bne.n	800dfa2 <HAL_SPI_TransmitReceive+0x26>
 800df9e:	2302      	movs	r3, #2
 800dfa0:	e18a      	b.n	800e2b8 <HAL_SPI_TransmitReceive+0x33c>
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2201      	movs	r2, #1
 800dfa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dfaa:	f7fb f9bf 	bl	800932c <HAL_GetTick>
 800dfae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dfb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	685b      	ldr	r3, [r3, #4]
 800dfbe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800dfc0:	887b      	ldrh	r3, [r7, #2]
 800dfc2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800dfc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dfc8:	2b01      	cmp	r3, #1
 800dfca:	d00f      	beq.n	800dfec <HAL_SPI_TransmitReceive+0x70>
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dfd2:	d107      	bne.n	800dfe4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	689b      	ldr	r3, [r3, #8]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d103      	bne.n	800dfe4 <HAL_SPI_TransmitReceive+0x68>
 800dfdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dfe0:	2b04      	cmp	r3, #4
 800dfe2:	d003      	beq.n	800dfec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800dfe4:	2302      	movs	r3, #2
 800dfe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800dfea:	e15b      	b.n	800e2a4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d005      	beq.n	800dffe <HAL_SPI_TransmitReceive+0x82>
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d002      	beq.n	800dffe <HAL_SPI_TransmitReceive+0x82>
 800dff8:	887b      	ldrh	r3, [r7, #2]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d103      	bne.n	800e006 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800dffe:	2301      	movs	r3, #1
 800e000:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e004:	e14e      	b.n	800e2a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e00c:	b2db      	uxtb	r3, r3
 800e00e:	2b04      	cmp	r3, #4
 800e010:	d003      	beq.n	800e01a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2205      	movs	r2, #5
 800e016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	2200      	movs	r2, #0
 800e01e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	687a      	ldr	r2, [r7, #4]
 800e024:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	887a      	ldrh	r2, [r7, #2]
 800e02a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	887a      	ldrh	r2, [r7, #2]
 800e030:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	68ba      	ldr	r2, [r7, #8]
 800e036:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	887a      	ldrh	r2, [r7, #2]
 800e03c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	887a      	ldrh	r2, [r7, #2]
 800e042:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	2200      	movs	r2, #0
 800e048:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	2200      	movs	r2, #0
 800e04e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e05a:	2b40      	cmp	r3, #64	; 0x40
 800e05c:	d007      	beq.n	800e06e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	681a      	ldr	r2, [r3, #0]
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e06c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	68db      	ldr	r3, [r3, #12]
 800e072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e076:	d178      	bne.n	800e16a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	685b      	ldr	r3, [r3, #4]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d002      	beq.n	800e086 <HAL_SPI_TransmitReceive+0x10a>
 800e080:	8b7b      	ldrh	r3, [r7, #26]
 800e082:	2b01      	cmp	r3, #1
 800e084:	d166      	bne.n	800e154 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e08a:	881a      	ldrh	r2, [r3, #0]
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e096:	1c9a      	adds	r2, r3, #2
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e0a0:	b29b      	uxth	r3, r3
 800e0a2:	3b01      	subs	r3, #1
 800e0a4:	b29a      	uxth	r2, r3
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e0aa:	e053      	b.n	800e154 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	689b      	ldr	r3, [r3, #8]
 800e0b2:	f003 0302 	and.w	r3, r3, #2
 800e0b6:	2b02      	cmp	r3, #2
 800e0b8:	d11b      	bne.n	800e0f2 <HAL_SPI_TransmitReceive+0x176>
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e0be:	b29b      	uxth	r3, r3
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d016      	beq.n	800e0f2 <HAL_SPI_TransmitReceive+0x176>
 800e0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c6:	2b01      	cmp	r3, #1
 800e0c8:	d113      	bne.n	800e0f2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0ce:	881a      	ldrh	r2, [r3, #0]
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0da:	1c9a      	adds	r2, r3, #2
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e0e4:	b29b      	uxth	r3, r3
 800e0e6:	3b01      	subs	r3, #1
 800e0e8:	b29a      	uxth	r2, r3
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	689b      	ldr	r3, [r3, #8]
 800e0f8:	f003 0301 	and.w	r3, r3, #1
 800e0fc:	2b01      	cmp	r3, #1
 800e0fe:	d119      	bne.n	800e134 <HAL_SPI_TransmitReceive+0x1b8>
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e104:	b29b      	uxth	r3, r3
 800e106:	2b00      	cmp	r3, #0
 800e108:	d014      	beq.n	800e134 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	68da      	ldr	r2, [r3, #12]
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e114:	b292      	uxth	r2, r2
 800e116:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e11c:	1c9a      	adds	r2, r3, #2
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e126:	b29b      	uxth	r3, r3
 800e128:	3b01      	subs	r3, #1
 800e12a:	b29a      	uxth	r2, r3
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e130:	2301      	movs	r3, #1
 800e132:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e134:	f7fb f8fa 	bl	800932c <HAL_GetTick>
 800e138:	4602      	mov	r2, r0
 800e13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13c:	1ad3      	subs	r3, r2, r3
 800e13e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e140:	429a      	cmp	r2, r3
 800e142:	d807      	bhi.n	800e154 <HAL_SPI_TransmitReceive+0x1d8>
 800e144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e14a:	d003      	beq.n	800e154 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800e14c:	2303      	movs	r3, #3
 800e14e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e152:	e0a7      	b.n	800e2a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e158:	b29b      	uxth	r3, r3
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d1a6      	bne.n	800e0ac <HAL_SPI_TransmitReceive+0x130>
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e162:	b29b      	uxth	r3, r3
 800e164:	2b00      	cmp	r3, #0
 800e166:	d1a1      	bne.n	800e0ac <HAL_SPI_TransmitReceive+0x130>
 800e168:	e07c      	b.n	800e264 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d002      	beq.n	800e178 <HAL_SPI_TransmitReceive+0x1fc>
 800e172:	8b7b      	ldrh	r3, [r7, #26]
 800e174:	2b01      	cmp	r3, #1
 800e176:	d16b      	bne.n	800e250 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	330c      	adds	r3, #12
 800e182:	7812      	ldrb	r2, [r2, #0]
 800e184:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e18a:	1c5a      	adds	r2, r3, #1
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e194:	b29b      	uxth	r3, r3
 800e196:	3b01      	subs	r3, #1
 800e198:	b29a      	uxth	r2, r3
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e19e:	e057      	b.n	800e250 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	689b      	ldr	r3, [r3, #8]
 800e1a6:	f003 0302 	and.w	r3, r3, #2
 800e1aa:	2b02      	cmp	r3, #2
 800e1ac:	d11c      	bne.n	800e1e8 <HAL_SPI_TransmitReceive+0x26c>
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e1b2:	b29b      	uxth	r3, r3
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d017      	beq.n	800e1e8 <HAL_SPI_TransmitReceive+0x26c>
 800e1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ba:	2b01      	cmp	r3, #1
 800e1bc:	d114      	bne.n	800e1e8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	330c      	adds	r3, #12
 800e1c8:	7812      	ldrb	r2, [r2, #0]
 800e1ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1d0:	1c5a      	adds	r2, r3, #1
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e1da:	b29b      	uxth	r3, r3
 800e1dc:	3b01      	subs	r3, #1
 800e1de:	b29a      	uxth	r2, r3
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	689b      	ldr	r3, [r3, #8]
 800e1ee:	f003 0301 	and.w	r3, r3, #1
 800e1f2:	2b01      	cmp	r3, #1
 800e1f4:	d119      	bne.n	800e22a <HAL_SPI_TransmitReceive+0x2ae>
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e1fa:	b29b      	uxth	r3, r3
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d014      	beq.n	800e22a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	68da      	ldr	r2, [r3, #12]
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e20a:	b2d2      	uxtb	r2, r2
 800e20c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e212:	1c5a      	adds	r2, r3, #1
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e21c:	b29b      	uxth	r3, r3
 800e21e:	3b01      	subs	r3, #1
 800e220:	b29a      	uxth	r2, r3
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e226:	2301      	movs	r3, #1
 800e228:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e22a:	f7fb f87f 	bl	800932c <HAL_GetTick>
 800e22e:	4602      	mov	r2, r0
 800e230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e232:	1ad3      	subs	r3, r2, r3
 800e234:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e236:	429a      	cmp	r2, r3
 800e238:	d803      	bhi.n	800e242 <HAL_SPI_TransmitReceive+0x2c6>
 800e23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e23c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e240:	d102      	bne.n	800e248 <HAL_SPI_TransmitReceive+0x2cc>
 800e242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e244:	2b00      	cmp	r3, #0
 800e246:	d103      	bne.n	800e250 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800e248:	2303      	movs	r3, #3
 800e24a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e24e:	e029      	b.n	800e2a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e254:	b29b      	uxth	r3, r3
 800e256:	2b00      	cmp	r3, #0
 800e258:	d1a2      	bne.n	800e1a0 <HAL_SPI_TransmitReceive+0x224>
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e25e:	b29b      	uxth	r3, r3
 800e260:	2b00      	cmp	r3, #0
 800e262:	d19d      	bne.n	800e1a0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e266:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e268:	68f8      	ldr	r0, [r7, #12]
 800e26a:	f000 f917 	bl	800e49c <SPI_EndRxTxTransaction>
 800e26e:	4603      	mov	r3, r0
 800e270:	2b00      	cmp	r3, #0
 800e272:	d006      	beq.n	800e282 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800e274:	2301      	movs	r3, #1
 800e276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	2220      	movs	r2, #32
 800e27e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800e280:	e010      	b.n	800e2a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	689b      	ldr	r3, [r3, #8]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d10b      	bne.n	800e2a2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e28a:	2300      	movs	r3, #0
 800e28c:	617b      	str	r3, [r7, #20]
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	68db      	ldr	r3, [r3, #12]
 800e294:	617b      	str	r3, [r7, #20]
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	689b      	ldr	r3, [r3, #8]
 800e29c:	617b      	str	r3, [r7, #20]
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	e000      	b.n	800e2a4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800e2a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	2201      	movs	r2, #1
 800e2a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e2b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3730      	adds	r7, #48	; 0x30
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}

0800e2c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b088      	sub	sp, #32
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	60f8      	str	r0, [r7, #12]
 800e2c8:	60b9      	str	r1, [r7, #8]
 800e2ca:	603b      	str	r3, [r7, #0]
 800e2cc:	4613      	mov	r3, r2
 800e2ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e2d0:	f7fb f82c 	bl	800932c <HAL_GetTick>
 800e2d4:	4602      	mov	r2, r0
 800e2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d8:	1a9b      	subs	r3, r3, r2
 800e2da:	683a      	ldr	r2, [r7, #0]
 800e2dc:	4413      	add	r3, r2
 800e2de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e2e0:	f7fb f824 	bl	800932c <HAL_GetTick>
 800e2e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e2e6:	4b39      	ldr	r3, [pc, #228]	; (800e3cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	015b      	lsls	r3, r3, #5
 800e2ec:	0d1b      	lsrs	r3, r3, #20
 800e2ee:	69fa      	ldr	r2, [r7, #28]
 800e2f0:	fb02 f303 	mul.w	r3, r2, r3
 800e2f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e2f6:	e054      	b.n	800e3a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2fe:	d050      	beq.n	800e3a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e300:	f7fb f814 	bl	800932c <HAL_GetTick>
 800e304:	4602      	mov	r2, r0
 800e306:	69bb      	ldr	r3, [r7, #24]
 800e308:	1ad3      	subs	r3, r2, r3
 800e30a:	69fa      	ldr	r2, [r7, #28]
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d902      	bls.n	800e316 <SPI_WaitFlagStateUntilTimeout+0x56>
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d13d      	bne.n	800e392 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	685a      	ldr	r2, [r3, #4]
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e324:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	685b      	ldr	r3, [r3, #4]
 800e32a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e32e:	d111      	bne.n	800e354 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	689b      	ldr	r3, [r3, #8]
 800e334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e338:	d004      	beq.n	800e344 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	689b      	ldr	r3, [r3, #8]
 800e33e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e342:	d107      	bne.n	800e354 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	681a      	ldr	r2, [r3, #0]
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e352:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e35c:	d10f      	bne.n	800e37e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	681a      	ldr	r2, [r3, #0]
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e36c:	601a      	str	r2, [r3, #0]
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	681a      	ldr	r2, [r3, #0]
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e37c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	2201      	movs	r2, #1
 800e382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	2200      	movs	r2, #0
 800e38a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800e38e:	2303      	movs	r3, #3
 800e390:	e017      	b.n	800e3c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d101      	bne.n	800e39c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e398:	2300      	movs	r3, #0
 800e39a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e39c:	697b      	ldr	r3, [r7, #20]
 800e39e:	3b01      	subs	r3, #1
 800e3a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	689a      	ldr	r2, [r3, #8]
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	4013      	ands	r3, r2
 800e3ac:	68ba      	ldr	r2, [r7, #8]
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	bf0c      	ite	eq
 800e3b2:	2301      	moveq	r3, #1
 800e3b4:	2300      	movne	r3, #0
 800e3b6:	b2db      	uxtb	r3, r3
 800e3b8:	461a      	mov	r2, r3
 800e3ba:	79fb      	ldrb	r3, [r7, #7]
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d19b      	bne.n	800e2f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e3c0:	2300      	movs	r3, #0
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3720      	adds	r7, #32
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}
 800e3ca:	bf00      	nop
 800e3cc:	2000003c 	.word	0x2000003c

0800e3d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b086      	sub	sp, #24
 800e3d4:	af02      	add	r7, sp, #8
 800e3d6:	60f8      	str	r0, [r7, #12]
 800e3d8:	60b9      	str	r1, [r7, #8]
 800e3da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	685b      	ldr	r3, [r3, #4]
 800e3e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e3e4:	d111      	bne.n	800e40a <SPI_EndRxTransaction+0x3a>
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	689b      	ldr	r3, [r3, #8]
 800e3ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e3ee:	d004      	beq.n	800e3fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	689b      	ldr	r3, [r3, #8]
 800e3f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e3f8:	d107      	bne.n	800e40a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	681a      	ldr	r2, [r3, #0]
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e408:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e412:	d12a      	bne.n	800e46a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	689b      	ldr	r3, [r3, #8]
 800e418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e41c:	d012      	beq.n	800e444 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	9300      	str	r3, [sp, #0]
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	2200      	movs	r2, #0
 800e426:	2180      	movs	r1, #128	; 0x80
 800e428:	68f8      	ldr	r0, [r7, #12]
 800e42a:	f7ff ff49 	bl	800e2c0 <SPI_WaitFlagStateUntilTimeout>
 800e42e:	4603      	mov	r3, r0
 800e430:	2b00      	cmp	r3, #0
 800e432:	d02d      	beq.n	800e490 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e438:	f043 0220 	orr.w	r2, r3, #32
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e440:	2303      	movs	r3, #3
 800e442:	e026      	b.n	800e492 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	9300      	str	r3, [sp, #0]
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	2200      	movs	r2, #0
 800e44c:	2101      	movs	r1, #1
 800e44e:	68f8      	ldr	r0, [r7, #12]
 800e450:	f7ff ff36 	bl	800e2c0 <SPI_WaitFlagStateUntilTimeout>
 800e454:	4603      	mov	r3, r0
 800e456:	2b00      	cmp	r3, #0
 800e458:	d01a      	beq.n	800e490 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e45e:	f043 0220 	orr.w	r2, r3, #32
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e466:	2303      	movs	r3, #3
 800e468:	e013      	b.n	800e492 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	9300      	str	r3, [sp, #0]
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	2200      	movs	r2, #0
 800e472:	2101      	movs	r1, #1
 800e474:	68f8      	ldr	r0, [r7, #12]
 800e476:	f7ff ff23 	bl	800e2c0 <SPI_WaitFlagStateUntilTimeout>
 800e47a:	4603      	mov	r3, r0
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d007      	beq.n	800e490 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e484:	f043 0220 	orr.w	r2, r3, #32
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e48c:	2303      	movs	r3, #3
 800e48e:	e000      	b.n	800e492 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800e490:	2300      	movs	r3, #0
}
 800e492:	4618      	mov	r0, r3
 800e494:	3710      	adds	r7, #16
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}
	...

0800e49c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b088      	sub	sp, #32
 800e4a0:	af02      	add	r7, sp, #8
 800e4a2:	60f8      	str	r0, [r7, #12]
 800e4a4:	60b9      	str	r1, [r7, #8]
 800e4a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e4a8:	4b1b      	ldr	r3, [pc, #108]	; (800e518 <SPI_EndRxTxTransaction+0x7c>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	4a1b      	ldr	r2, [pc, #108]	; (800e51c <SPI_EndRxTxTransaction+0x80>)
 800e4ae:	fba2 2303 	umull	r2, r3, r2, r3
 800e4b2:	0d5b      	lsrs	r3, r3, #21
 800e4b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e4b8:	fb02 f303 	mul.w	r3, r2, r3
 800e4bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	685b      	ldr	r3, [r3, #4]
 800e4c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e4c6:	d112      	bne.n	800e4ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	9300      	str	r3, [sp, #0]
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	2180      	movs	r1, #128	; 0x80
 800e4d2:	68f8      	ldr	r0, [r7, #12]
 800e4d4:	f7ff fef4 	bl	800e2c0 <SPI_WaitFlagStateUntilTimeout>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d016      	beq.n	800e50c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4e2:	f043 0220 	orr.w	r2, r3, #32
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e4ea:	2303      	movs	r3, #3
 800e4ec:	e00f      	b.n	800e50e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d00a      	beq.n	800e50a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	3b01      	subs	r3, #1
 800e4f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	689b      	ldr	r3, [r3, #8]
 800e500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e504:	2b80      	cmp	r3, #128	; 0x80
 800e506:	d0f2      	beq.n	800e4ee <SPI_EndRxTxTransaction+0x52>
 800e508:	e000      	b.n	800e50c <SPI_EndRxTxTransaction+0x70>
        break;
 800e50a:	bf00      	nop
  }

  return HAL_OK;
 800e50c:	2300      	movs	r3, #0
}
 800e50e:	4618      	mov	r0, r3
 800e510:	3718      	adds	r7, #24
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}
 800e516:	bf00      	nop
 800e518:	2000003c 	.word	0x2000003c
 800e51c:	165e9f81 	.word	0x165e9f81

0800e520 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b082      	sub	sp, #8
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d101      	bne.n	800e532 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e52e:	2301      	movs	r3, #1
 800e530:	e041      	b.n	800e5b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e538:	b2db      	uxtb	r3, r3
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d106      	bne.n	800e54c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2200      	movs	r2, #0
 800e542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f7f4 f9e4 	bl	8002914 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2202      	movs	r2, #2
 800e550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681a      	ldr	r2, [r3, #0]
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	3304      	adds	r3, #4
 800e55c:	4619      	mov	r1, r3
 800e55e:	4610      	mov	r0, r2
 800e560:	f000 fcea 	bl	800ef38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2201      	movs	r2, #1
 800e568:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2201      	movs	r2, #1
 800e570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2201      	movs	r2, #1
 800e578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2201      	movs	r2, #1
 800e580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2201      	movs	r2, #1
 800e588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2201      	movs	r2, #1
 800e590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2201      	movs	r2, #1
 800e598:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2201      	movs	r2, #1
 800e5a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2201      	movs	r2, #1
 800e5a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2201      	movs	r2, #1
 800e5b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e5b4:	2300      	movs	r3, #0
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3708      	adds	r7, #8
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}
	...

0800e5c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b085      	sub	sp, #20
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e5ce:	b2db      	uxtb	r3, r3
 800e5d0:	2b01      	cmp	r3, #1
 800e5d2:	d001      	beq.n	800e5d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	e04e      	b.n	800e676 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2202      	movs	r2, #2
 800e5dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	68da      	ldr	r2, [r3, #12]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	f042 0201 	orr.w	r2, r2, #1
 800e5ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	4a23      	ldr	r2, [pc, #140]	; (800e684 <HAL_TIM_Base_Start_IT+0xc4>)
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d022      	beq.n	800e640 <HAL_TIM_Base_Start_IT+0x80>
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e602:	d01d      	beq.n	800e640 <HAL_TIM_Base_Start_IT+0x80>
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	4a1f      	ldr	r2, [pc, #124]	; (800e688 <HAL_TIM_Base_Start_IT+0xc8>)
 800e60a:	4293      	cmp	r3, r2
 800e60c:	d018      	beq.n	800e640 <HAL_TIM_Base_Start_IT+0x80>
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	4a1e      	ldr	r2, [pc, #120]	; (800e68c <HAL_TIM_Base_Start_IT+0xcc>)
 800e614:	4293      	cmp	r3, r2
 800e616:	d013      	beq.n	800e640 <HAL_TIM_Base_Start_IT+0x80>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4a1c      	ldr	r2, [pc, #112]	; (800e690 <HAL_TIM_Base_Start_IT+0xd0>)
 800e61e:	4293      	cmp	r3, r2
 800e620:	d00e      	beq.n	800e640 <HAL_TIM_Base_Start_IT+0x80>
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	4a1b      	ldr	r2, [pc, #108]	; (800e694 <HAL_TIM_Base_Start_IT+0xd4>)
 800e628:	4293      	cmp	r3, r2
 800e62a:	d009      	beq.n	800e640 <HAL_TIM_Base_Start_IT+0x80>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	4a19      	ldr	r2, [pc, #100]	; (800e698 <HAL_TIM_Base_Start_IT+0xd8>)
 800e632:	4293      	cmp	r3, r2
 800e634:	d004      	beq.n	800e640 <HAL_TIM_Base_Start_IT+0x80>
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	4a18      	ldr	r2, [pc, #96]	; (800e69c <HAL_TIM_Base_Start_IT+0xdc>)
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d111      	bne.n	800e664 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	689b      	ldr	r3, [r3, #8]
 800e646:	f003 0307 	and.w	r3, r3, #7
 800e64a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	2b06      	cmp	r3, #6
 800e650:	d010      	beq.n	800e674 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	681a      	ldr	r2, [r3, #0]
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f042 0201 	orr.w	r2, r2, #1
 800e660:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e662:	e007      	b.n	800e674 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	681a      	ldr	r2, [r3, #0]
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f042 0201 	orr.w	r2, r2, #1
 800e672:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e674:	2300      	movs	r3, #0
}
 800e676:	4618      	mov	r0, r3
 800e678:	3714      	adds	r7, #20
 800e67a:	46bd      	mov	sp, r7
 800e67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e680:	4770      	bx	lr
 800e682:	bf00      	nop
 800e684:	40010000 	.word	0x40010000
 800e688:	40000400 	.word	0x40000400
 800e68c:	40000800 	.word	0x40000800
 800e690:	40000c00 	.word	0x40000c00
 800e694:	40010400 	.word	0x40010400
 800e698:	40014000 	.word	0x40014000
 800e69c:	40001800 	.word	0x40001800

0800e6a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b082      	sub	sp, #8
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d101      	bne.n	800e6b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	e041      	b.n	800e736 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e6b8:	b2db      	uxtb	r3, r3
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d106      	bne.n	800e6cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f000 f839 	bl	800e73e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2202      	movs	r2, #2
 800e6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681a      	ldr	r2, [r3, #0]
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	3304      	adds	r3, #4
 800e6dc:	4619      	mov	r1, r3
 800e6de:	4610      	mov	r0, r2
 800e6e0:	f000 fc2a 	bl	800ef38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2201      	movs	r2, #1
 800e6e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2201      	movs	r2, #1
 800e6f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2201      	movs	r2, #1
 800e6f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2201      	movs	r2, #1
 800e700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2201      	movs	r2, #1
 800e708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2201      	movs	r2, #1
 800e710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2201      	movs	r2, #1
 800e718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2201      	movs	r2, #1
 800e720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2201      	movs	r2, #1
 800e728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2201      	movs	r2, #1
 800e730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e734:	2300      	movs	r3, #0
}
 800e736:	4618      	mov	r0, r3
 800e738:	3708      	adds	r7, #8
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}

0800e73e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e73e:	b480      	push	{r7}
 800e740:	b083      	sub	sp, #12
 800e742:	af00      	add	r7, sp, #0
 800e744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e746:	bf00      	nop
 800e748:	370c      	adds	r7, #12
 800e74a:	46bd      	mov	sp, r7
 800e74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e750:	4770      	bx	lr
	...

0800e754 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b084      	sub	sp, #16
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d109      	bne.n	800e778 <HAL_TIM_PWM_Start+0x24>
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e76a:	b2db      	uxtb	r3, r3
 800e76c:	2b01      	cmp	r3, #1
 800e76e:	bf14      	ite	ne
 800e770:	2301      	movne	r3, #1
 800e772:	2300      	moveq	r3, #0
 800e774:	b2db      	uxtb	r3, r3
 800e776:	e022      	b.n	800e7be <HAL_TIM_PWM_Start+0x6a>
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	2b04      	cmp	r3, #4
 800e77c:	d109      	bne.n	800e792 <HAL_TIM_PWM_Start+0x3e>
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e784:	b2db      	uxtb	r3, r3
 800e786:	2b01      	cmp	r3, #1
 800e788:	bf14      	ite	ne
 800e78a:	2301      	movne	r3, #1
 800e78c:	2300      	moveq	r3, #0
 800e78e:	b2db      	uxtb	r3, r3
 800e790:	e015      	b.n	800e7be <HAL_TIM_PWM_Start+0x6a>
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	2b08      	cmp	r3, #8
 800e796:	d109      	bne.n	800e7ac <HAL_TIM_PWM_Start+0x58>
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e79e:	b2db      	uxtb	r3, r3
 800e7a0:	2b01      	cmp	r3, #1
 800e7a2:	bf14      	ite	ne
 800e7a4:	2301      	movne	r3, #1
 800e7a6:	2300      	moveq	r3, #0
 800e7a8:	b2db      	uxtb	r3, r3
 800e7aa:	e008      	b.n	800e7be <HAL_TIM_PWM_Start+0x6a>
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e7b2:	b2db      	uxtb	r3, r3
 800e7b4:	2b01      	cmp	r3, #1
 800e7b6:	bf14      	ite	ne
 800e7b8:	2301      	movne	r3, #1
 800e7ba:	2300      	moveq	r3, #0
 800e7bc:	b2db      	uxtb	r3, r3
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d001      	beq.n	800e7c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	e07c      	b.n	800e8c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d104      	bne.n	800e7d6 <HAL_TIM_PWM_Start+0x82>
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2202      	movs	r2, #2
 800e7d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e7d4:	e013      	b.n	800e7fe <HAL_TIM_PWM_Start+0xaa>
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	2b04      	cmp	r3, #4
 800e7da:	d104      	bne.n	800e7e6 <HAL_TIM_PWM_Start+0x92>
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2202      	movs	r2, #2
 800e7e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e7e4:	e00b      	b.n	800e7fe <HAL_TIM_PWM_Start+0xaa>
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	2b08      	cmp	r3, #8
 800e7ea:	d104      	bne.n	800e7f6 <HAL_TIM_PWM_Start+0xa2>
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2202      	movs	r2, #2
 800e7f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e7f4:	e003      	b.n	800e7fe <HAL_TIM_PWM_Start+0xaa>
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2202      	movs	r2, #2
 800e7fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	2201      	movs	r2, #1
 800e804:	6839      	ldr	r1, [r7, #0]
 800e806:	4618      	mov	r0, r3
 800e808:	f000 fe80 	bl	800f50c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	4a2d      	ldr	r2, [pc, #180]	; (800e8c8 <HAL_TIM_PWM_Start+0x174>)
 800e812:	4293      	cmp	r3, r2
 800e814:	d004      	beq.n	800e820 <HAL_TIM_PWM_Start+0xcc>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	4a2c      	ldr	r2, [pc, #176]	; (800e8cc <HAL_TIM_PWM_Start+0x178>)
 800e81c:	4293      	cmp	r3, r2
 800e81e:	d101      	bne.n	800e824 <HAL_TIM_PWM_Start+0xd0>
 800e820:	2301      	movs	r3, #1
 800e822:	e000      	b.n	800e826 <HAL_TIM_PWM_Start+0xd2>
 800e824:	2300      	movs	r3, #0
 800e826:	2b00      	cmp	r3, #0
 800e828:	d007      	beq.n	800e83a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e838:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	4a22      	ldr	r2, [pc, #136]	; (800e8c8 <HAL_TIM_PWM_Start+0x174>)
 800e840:	4293      	cmp	r3, r2
 800e842:	d022      	beq.n	800e88a <HAL_TIM_PWM_Start+0x136>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e84c:	d01d      	beq.n	800e88a <HAL_TIM_PWM_Start+0x136>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	4a1f      	ldr	r2, [pc, #124]	; (800e8d0 <HAL_TIM_PWM_Start+0x17c>)
 800e854:	4293      	cmp	r3, r2
 800e856:	d018      	beq.n	800e88a <HAL_TIM_PWM_Start+0x136>
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4a1d      	ldr	r2, [pc, #116]	; (800e8d4 <HAL_TIM_PWM_Start+0x180>)
 800e85e:	4293      	cmp	r3, r2
 800e860:	d013      	beq.n	800e88a <HAL_TIM_PWM_Start+0x136>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	4a1c      	ldr	r2, [pc, #112]	; (800e8d8 <HAL_TIM_PWM_Start+0x184>)
 800e868:	4293      	cmp	r3, r2
 800e86a:	d00e      	beq.n	800e88a <HAL_TIM_PWM_Start+0x136>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4a16      	ldr	r2, [pc, #88]	; (800e8cc <HAL_TIM_PWM_Start+0x178>)
 800e872:	4293      	cmp	r3, r2
 800e874:	d009      	beq.n	800e88a <HAL_TIM_PWM_Start+0x136>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	4a18      	ldr	r2, [pc, #96]	; (800e8dc <HAL_TIM_PWM_Start+0x188>)
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d004      	beq.n	800e88a <HAL_TIM_PWM_Start+0x136>
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	4a16      	ldr	r2, [pc, #88]	; (800e8e0 <HAL_TIM_PWM_Start+0x18c>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d111      	bne.n	800e8ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	689b      	ldr	r3, [r3, #8]
 800e890:	f003 0307 	and.w	r3, r3, #7
 800e894:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2b06      	cmp	r3, #6
 800e89a:	d010      	beq.n	800e8be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	681a      	ldr	r2, [r3, #0]
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	f042 0201 	orr.w	r2, r2, #1
 800e8aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8ac:	e007      	b.n	800e8be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	681a      	ldr	r2, [r3, #0]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	f042 0201 	orr.w	r2, r2, #1
 800e8bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e8be:	2300      	movs	r3, #0
}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	3710      	adds	r7, #16
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}
 800e8c8:	40010000 	.word	0x40010000
 800e8cc:	40010400 	.word	0x40010400
 800e8d0:	40000400 	.word	0x40000400
 800e8d4:	40000800 	.word	0x40000800
 800e8d8:	40000c00 	.word	0x40000c00
 800e8dc:	40014000 	.word	0x40014000
 800e8e0:	40001800 	.word	0x40001800

0800e8e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b082      	sub	sp, #8
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	6839      	ldr	r1, [r7, #0]
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f000 fe08 	bl	800f50c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	4a2e      	ldr	r2, [pc, #184]	; (800e9bc <HAL_TIM_PWM_Stop+0xd8>)
 800e902:	4293      	cmp	r3, r2
 800e904:	d004      	beq.n	800e910 <HAL_TIM_PWM_Stop+0x2c>
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	4a2d      	ldr	r2, [pc, #180]	; (800e9c0 <HAL_TIM_PWM_Stop+0xdc>)
 800e90c:	4293      	cmp	r3, r2
 800e90e:	d101      	bne.n	800e914 <HAL_TIM_PWM_Stop+0x30>
 800e910:	2301      	movs	r3, #1
 800e912:	e000      	b.n	800e916 <HAL_TIM_PWM_Stop+0x32>
 800e914:	2300      	movs	r3, #0
 800e916:	2b00      	cmp	r3, #0
 800e918:	d017      	beq.n	800e94a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	6a1a      	ldr	r2, [r3, #32]
 800e920:	f241 1311 	movw	r3, #4369	; 0x1111
 800e924:	4013      	ands	r3, r2
 800e926:	2b00      	cmp	r3, #0
 800e928:	d10f      	bne.n	800e94a <HAL_TIM_PWM_Stop+0x66>
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	6a1a      	ldr	r2, [r3, #32]
 800e930:	f240 4344 	movw	r3, #1092	; 0x444
 800e934:	4013      	ands	r3, r2
 800e936:	2b00      	cmp	r3, #0
 800e938:	d107      	bne.n	800e94a <HAL_TIM_PWM_Stop+0x66>
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e948:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	6a1a      	ldr	r2, [r3, #32]
 800e950:	f241 1311 	movw	r3, #4369	; 0x1111
 800e954:	4013      	ands	r3, r2
 800e956:	2b00      	cmp	r3, #0
 800e958:	d10f      	bne.n	800e97a <HAL_TIM_PWM_Stop+0x96>
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	6a1a      	ldr	r2, [r3, #32]
 800e960:	f240 4344 	movw	r3, #1092	; 0x444
 800e964:	4013      	ands	r3, r2
 800e966:	2b00      	cmp	r3, #0
 800e968:	d107      	bne.n	800e97a <HAL_TIM_PWM_Stop+0x96>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	681a      	ldr	r2, [r3, #0]
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f022 0201 	bic.w	r2, r2, #1
 800e978:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d104      	bne.n	800e98a <HAL_TIM_PWM_Stop+0xa6>
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2201      	movs	r2, #1
 800e984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e988:	e013      	b.n	800e9b2 <HAL_TIM_PWM_Stop+0xce>
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	2b04      	cmp	r3, #4
 800e98e:	d104      	bne.n	800e99a <HAL_TIM_PWM_Stop+0xb6>
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2201      	movs	r2, #1
 800e994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e998:	e00b      	b.n	800e9b2 <HAL_TIM_PWM_Stop+0xce>
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	2b08      	cmp	r3, #8
 800e99e:	d104      	bne.n	800e9aa <HAL_TIM_PWM_Stop+0xc6>
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e9a8:	e003      	b.n	800e9b2 <HAL_TIM_PWM_Stop+0xce>
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2201      	movs	r2, #1
 800e9ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800e9b2:	2300      	movs	r3, #0
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3708      	adds	r7, #8
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	40010000 	.word	0x40010000
 800e9c0:	40010400 	.word	0x40010400

0800e9c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b082      	sub	sp, #8
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	691b      	ldr	r3, [r3, #16]
 800e9d2:	f003 0302 	and.w	r3, r3, #2
 800e9d6:	2b02      	cmp	r3, #2
 800e9d8:	d122      	bne.n	800ea20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	68db      	ldr	r3, [r3, #12]
 800e9e0:	f003 0302 	and.w	r3, r3, #2
 800e9e4:	2b02      	cmp	r3, #2
 800e9e6:	d11b      	bne.n	800ea20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	f06f 0202 	mvn.w	r2, #2
 800e9f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	699b      	ldr	r3, [r3, #24]
 800e9fe:	f003 0303 	and.w	r3, r3, #3
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d003      	beq.n	800ea0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f000 fa77 	bl	800eefa <HAL_TIM_IC_CaptureCallback>
 800ea0c:	e005      	b.n	800ea1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f000 fa69 	bl	800eee6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f000 fa7a 	bl	800ef0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	691b      	ldr	r3, [r3, #16]
 800ea26:	f003 0304 	and.w	r3, r3, #4
 800ea2a:	2b04      	cmp	r3, #4
 800ea2c:	d122      	bne.n	800ea74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	68db      	ldr	r3, [r3, #12]
 800ea34:	f003 0304 	and.w	r3, r3, #4
 800ea38:	2b04      	cmp	r3, #4
 800ea3a:	d11b      	bne.n	800ea74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f06f 0204 	mvn.w	r2, #4
 800ea44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	2202      	movs	r2, #2
 800ea4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	699b      	ldr	r3, [r3, #24]
 800ea52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d003      	beq.n	800ea62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f000 fa4d 	bl	800eefa <HAL_TIM_IC_CaptureCallback>
 800ea60:	e005      	b.n	800ea6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f000 fa3f 	bl	800eee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f000 fa50 	bl	800ef0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2200      	movs	r2, #0
 800ea72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	691b      	ldr	r3, [r3, #16]
 800ea7a:	f003 0308 	and.w	r3, r3, #8
 800ea7e:	2b08      	cmp	r3, #8
 800ea80:	d122      	bne.n	800eac8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	68db      	ldr	r3, [r3, #12]
 800ea88:	f003 0308 	and.w	r3, r3, #8
 800ea8c:	2b08      	cmp	r3, #8
 800ea8e:	d11b      	bne.n	800eac8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	f06f 0208 	mvn.w	r2, #8
 800ea98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2204      	movs	r2, #4
 800ea9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	69db      	ldr	r3, [r3, #28]
 800eaa6:	f003 0303 	and.w	r3, r3, #3
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d003      	beq.n	800eab6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eaae:	6878      	ldr	r0, [r7, #4]
 800eab0:	f000 fa23 	bl	800eefa <HAL_TIM_IC_CaptureCallback>
 800eab4:	e005      	b.n	800eac2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f000 fa15 	bl	800eee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eabc:	6878      	ldr	r0, [r7, #4]
 800eabe:	f000 fa26 	bl	800ef0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2200      	movs	r2, #0
 800eac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	691b      	ldr	r3, [r3, #16]
 800eace:	f003 0310 	and.w	r3, r3, #16
 800ead2:	2b10      	cmp	r3, #16
 800ead4:	d122      	bne.n	800eb1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	68db      	ldr	r3, [r3, #12]
 800eadc:	f003 0310 	and.w	r3, r3, #16
 800eae0:	2b10      	cmp	r3, #16
 800eae2:	d11b      	bne.n	800eb1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	f06f 0210 	mvn.w	r2, #16
 800eaec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2208      	movs	r2, #8
 800eaf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	69db      	ldr	r3, [r3, #28]
 800eafa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d003      	beq.n	800eb0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f000 f9f9 	bl	800eefa <HAL_TIM_IC_CaptureCallback>
 800eb08:	e005      	b.n	800eb16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	f000 f9eb 	bl	800eee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f000 f9fc 	bl	800ef0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2200      	movs	r2, #0
 800eb1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	691b      	ldr	r3, [r3, #16]
 800eb22:	f003 0301 	and.w	r3, r3, #1
 800eb26:	2b01      	cmp	r3, #1
 800eb28:	d10e      	bne.n	800eb48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	68db      	ldr	r3, [r3, #12]
 800eb30:	f003 0301 	and.w	r3, r3, #1
 800eb34:	2b01      	cmp	r3, #1
 800eb36:	d107      	bne.n	800eb48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	f06f 0201 	mvn.w	r2, #1
 800eb40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f7f3 f9da 	bl	8001efc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	691b      	ldr	r3, [r3, #16]
 800eb4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb52:	2b80      	cmp	r3, #128	; 0x80
 800eb54:	d10e      	bne.n	800eb74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	68db      	ldr	r3, [r3, #12]
 800eb5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb60:	2b80      	cmp	r3, #128	; 0x80
 800eb62:	d107      	bne.n	800eb74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800eb6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f000 fd78 	bl	800f664 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	691b      	ldr	r3, [r3, #16]
 800eb7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb7e:	2b40      	cmp	r3, #64	; 0x40
 800eb80:	d10e      	bne.n	800eba0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	68db      	ldr	r3, [r3, #12]
 800eb88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb8c:	2b40      	cmp	r3, #64	; 0x40
 800eb8e:	d107      	bne.n	800eba0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800eb98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f000 f9c1 	bl	800ef22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	691b      	ldr	r3, [r3, #16]
 800eba6:	f003 0320 	and.w	r3, r3, #32
 800ebaa:	2b20      	cmp	r3, #32
 800ebac:	d10e      	bne.n	800ebcc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	68db      	ldr	r3, [r3, #12]
 800ebb4:	f003 0320 	and.w	r3, r3, #32
 800ebb8:	2b20      	cmp	r3, #32
 800ebba:	d107      	bne.n	800ebcc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	f06f 0220 	mvn.w	r2, #32
 800ebc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	f000 fd42 	bl	800f650 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ebcc:	bf00      	nop
 800ebce:	3708      	adds	r7, #8
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b086      	sub	sp, #24
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	60f8      	str	r0, [r7, #12]
 800ebdc:	60b9      	str	r1, [r7, #8]
 800ebde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ebea:	2b01      	cmp	r3, #1
 800ebec:	d101      	bne.n	800ebf2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ebee:	2302      	movs	r3, #2
 800ebf0:	e0ae      	b.n	800ed50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	2201      	movs	r2, #1
 800ebf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2b0c      	cmp	r3, #12
 800ebfe:	f200 809f 	bhi.w	800ed40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ec02:	a201      	add	r2, pc, #4	; (adr r2, 800ec08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ec04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec08:	0800ec3d 	.word	0x0800ec3d
 800ec0c:	0800ed41 	.word	0x0800ed41
 800ec10:	0800ed41 	.word	0x0800ed41
 800ec14:	0800ed41 	.word	0x0800ed41
 800ec18:	0800ec7d 	.word	0x0800ec7d
 800ec1c:	0800ed41 	.word	0x0800ed41
 800ec20:	0800ed41 	.word	0x0800ed41
 800ec24:	0800ed41 	.word	0x0800ed41
 800ec28:	0800ecbf 	.word	0x0800ecbf
 800ec2c:	0800ed41 	.word	0x0800ed41
 800ec30:	0800ed41 	.word	0x0800ed41
 800ec34:	0800ed41 	.word	0x0800ed41
 800ec38:	0800ecff 	.word	0x0800ecff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	68b9      	ldr	r1, [r7, #8]
 800ec42:	4618      	mov	r0, r3
 800ec44:	f000 fa18 	bl	800f078 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	699a      	ldr	r2, [r3, #24]
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	f042 0208 	orr.w	r2, r2, #8
 800ec56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	699a      	ldr	r2, [r3, #24]
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	f022 0204 	bic.w	r2, r2, #4
 800ec66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	6999      	ldr	r1, [r3, #24]
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	691a      	ldr	r2, [r3, #16]
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	430a      	orrs	r2, r1
 800ec78:	619a      	str	r2, [r3, #24]
      break;
 800ec7a:	e064      	b.n	800ed46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	68b9      	ldr	r1, [r7, #8]
 800ec82:	4618      	mov	r0, r3
 800ec84:	f000 fa68 	bl	800f158 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	699a      	ldr	r2, [r3, #24]
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	699a      	ldr	r2, [r3, #24]
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	6999      	ldr	r1, [r3, #24]
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	691b      	ldr	r3, [r3, #16]
 800ecb2:	021a      	lsls	r2, r3, #8
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	430a      	orrs	r2, r1
 800ecba:	619a      	str	r2, [r3, #24]
      break;
 800ecbc:	e043      	b.n	800ed46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	68b9      	ldr	r1, [r7, #8]
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f000 fabd 	bl	800f244 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	69da      	ldr	r2, [r3, #28]
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	f042 0208 	orr.w	r2, r2, #8
 800ecd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	69da      	ldr	r2, [r3, #28]
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	f022 0204 	bic.w	r2, r2, #4
 800ece8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	69d9      	ldr	r1, [r3, #28]
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	691a      	ldr	r2, [r3, #16]
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	430a      	orrs	r2, r1
 800ecfa:	61da      	str	r2, [r3, #28]
      break;
 800ecfc:	e023      	b.n	800ed46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	68b9      	ldr	r1, [r7, #8]
 800ed04:	4618      	mov	r0, r3
 800ed06:	f000 fb11 	bl	800f32c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	69da      	ldr	r2, [r3, #28]
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	69da      	ldr	r2, [r3, #28]
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ed28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	69d9      	ldr	r1, [r3, #28]
 800ed30:	68bb      	ldr	r3, [r7, #8]
 800ed32:	691b      	ldr	r3, [r3, #16]
 800ed34:	021a      	lsls	r2, r3, #8
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	430a      	orrs	r2, r1
 800ed3c:	61da      	str	r2, [r3, #28]
      break;
 800ed3e:	e002      	b.n	800ed46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ed40:	2301      	movs	r3, #1
 800ed42:	75fb      	strb	r3, [r7, #23]
      break;
 800ed44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	2200      	movs	r2, #0
 800ed4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ed4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed50:	4618      	mov	r0, r3
 800ed52:	3718      	adds	r7, #24
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}

0800ed58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b084      	sub	sp, #16
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ed62:	2300      	movs	r3, #0
 800ed64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed6c:	2b01      	cmp	r3, #1
 800ed6e:	d101      	bne.n	800ed74 <HAL_TIM_ConfigClockSource+0x1c>
 800ed70:	2302      	movs	r3, #2
 800ed72:	e0b4      	b.n	800eede <HAL_TIM_ConfigClockSource+0x186>
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2201      	movs	r2, #1
 800ed78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2202      	movs	r2, #2
 800ed80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	689b      	ldr	r3, [r3, #8]
 800ed8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ed92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ed9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	68ba      	ldr	r2, [r7, #8]
 800eda2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800edac:	d03e      	beq.n	800ee2c <HAL_TIM_ConfigClockSource+0xd4>
 800edae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800edb2:	f200 8087 	bhi.w	800eec4 <HAL_TIM_ConfigClockSource+0x16c>
 800edb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800edba:	f000 8086 	beq.w	800eeca <HAL_TIM_ConfigClockSource+0x172>
 800edbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800edc2:	d87f      	bhi.n	800eec4 <HAL_TIM_ConfigClockSource+0x16c>
 800edc4:	2b70      	cmp	r3, #112	; 0x70
 800edc6:	d01a      	beq.n	800edfe <HAL_TIM_ConfigClockSource+0xa6>
 800edc8:	2b70      	cmp	r3, #112	; 0x70
 800edca:	d87b      	bhi.n	800eec4 <HAL_TIM_ConfigClockSource+0x16c>
 800edcc:	2b60      	cmp	r3, #96	; 0x60
 800edce:	d050      	beq.n	800ee72 <HAL_TIM_ConfigClockSource+0x11a>
 800edd0:	2b60      	cmp	r3, #96	; 0x60
 800edd2:	d877      	bhi.n	800eec4 <HAL_TIM_ConfigClockSource+0x16c>
 800edd4:	2b50      	cmp	r3, #80	; 0x50
 800edd6:	d03c      	beq.n	800ee52 <HAL_TIM_ConfigClockSource+0xfa>
 800edd8:	2b50      	cmp	r3, #80	; 0x50
 800edda:	d873      	bhi.n	800eec4 <HAL_TIM_ConfigClockSource+0x16c>
 800eddc:	2b40      	cmp	r3, #64	; 0x40
 800edde:	d058      	beq.n	800ee92 <HAL_TIM_ConfigClockSource+0x13a>
 800ede0:	2b40      	cmp	r3, #64	; 0x40
 800ede2:	d86f      	bhi.n	800eec4 <HAL_TIM_ConfigClockSource+0x16c>
 800ede4:	2b30      	cmp	r3, #48	; 0x30
 800ede6:	d064      	beq.n	800eeb2 <HAL_TIM_ConfigClockSource+0x15a>
 800ede8:	2b30      	cmp	r3, #48	; 0x30
 800edea:	d86b      	bhi.n	800eec4 <HAL_TIM_ConfigClockSource+0x16c>
 800edec:	2b20      	cmp	r3, #32
 800edee:	d060      	beq.n	800eeb2 <HAL_TIM_ConfigClockSource+0x15a>
 800edf0:	2b20      	cmp	r3, #32
 800edf2:	d867      	bhi.n	800eec4 <HAL_TIM_ConfigClockSource+0x16c>
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d05c      	beq.n	800eeb2 <HAL_TIM_ConfigClockSource+0x15a>
 800edf8:	2b10      	cmp	r3, #16
 800edfa:	d05a      	beq.n	800eeb2 <HAL_TIM_ConfigClockSource+0x15a>
 800edfc:	e062      	b.n	800eec4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6818      	ldr	r0, [r3, #0]
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	6899      	ldr	r1, [r3, #8]
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	685a      	ldr	r2, [r3, #4]
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	68db      	ldr	r3, [r3, #12]
 800ee0e:	f000 fb5d 	bl	800f4cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	689b      	ldr	r3, [r3, #8]
 800ee18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ee20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	68ba      	ldr	r2, [r7, #8]
 800ee28:	609a      	str	r2, [r3, #8]
      break;
 800ee2a:	e04f      	b.n	800eecc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6818      	ldr	r0, [r3, #0]
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	6899      	ldr	r1, [r3, #8]
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	685a      	ldr	r2, [r3, #4]
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	68db      	ldr	r3, [r3, #12]
 800ee3c:	f000 fb46 	bl	800f4cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	689a      	ldr	r2, [r3, #8]
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ee4e:	609a      	str	r2, [r3, #8]
      break;
 800ee50:	e03c      	b.n	800eecc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	6818      	ldr	r0, [r3, #0]
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	6859      	ldr	r1, [r3, #4]
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	68db      	ldr	r3, [r3, #12]
 800ee5e:	461a      	mov	r2, r3
 800ee60:	f000 faba 	bl	800f3d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	2150      	movs	r1, #80	; 0x50
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f000 fb13 	bl	800f496 <TIM_ITRx_SetConfig>
      break;
 800ee70:	e02c      	b.n	800eecc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6818      	ldr	r0, [r3, #0]
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	6859      	ldr	r1, [r3, #4]
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	68db      	ldr	r3, [r3, #12]
 800ee7e:	461a      	mov	r2, r3
 800ee80:	f000 fad9 	bl	800f436 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	2160      	movs	r1, #96	; 0x60
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f000 fb03 	bl	800f496 <TIM_ITRx_SetConfig>
      break;
 800ee90:	e01c      	b.n	800eecc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	6818      	ldr	r0, [r3, #0]
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	6859      	ldr	r1, [r3, #4]
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	68db      	ldr	r3, [r3, #12]
 800ee9e:	461a      	mov	r2, r3
 800eea0:	f000 fa9a 	bl	800f3d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	2140      	movs	r1, #64	; 0x40
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f000 faf3 	bl	800f496 <TIM_ITRx_SetConfig>
      break;
 800eeb0:	e00c      	b.n	800eecc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681a      	ldr	r2, [r3, #0]
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	4619      	mov	r1, r3
 800eebc:	4610      	mov	r0, r2
 800eebe:	f000 faea 	bl	800f496 <TIM_ITRx_SetConfig>
      break;
 800eec2:	e003      	b.n	800eecc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800eec4:	2301      	movs	r3, #1
 800eec6:	73fb      	strb	r3, [r7, #15]
      break;
 800eec8:	e000      	b.n	800eecc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800eeca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2201      	movs	r2, #1
 800eed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2200      	movs	r2, #0
 800eed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800eedc:	7bfb      	ldrb	r3, [r7, #15]
}
 800eede:	4618      	mov	r0, r3
 800eee0:	3710      	adds	r7, #16
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}

0800eee6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eee6:	b480      	push	{r7}
 800eee8:	b083      	sub	sp, #12
 800eeea:	af00      	add	r7, sp, #0
 800eeec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eeee:	bf00      	nop
 800eef0:	370c      	adds	r7, #12
 800eef2:	46bd      	mov	sp, r7
 800eef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef8:	4770      	bx	lr

0800eefa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800eefa:	b480      	push	{r7}
 800eefc:	b083      	sub	sp, #12
 800eefe:	af00      	add	r7, sp, #0
 800ef00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ef02:	bf00      	nop
 800ef04:	370c      	adds	r7, #12
 800ef06:	46bd      	mov	sp, r7
 800ef08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0c:	4770      	bx	lr

0800ef0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ef0e:	b480      	push	{r7}
 800ef10:	b083      	sub	sp, #12
 800ef12:	af00      	add	r7, sp, #0
 800ef14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ef16:	bf00      	nop
 800ef18:	370c      	adds	r7, #12
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef20:	4770      	bx	lr

0800ef22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ef22:	b480      	push	{r7}
 800ef24:	b083      	sub	sp, #12
 800ef26:	af00      	add	r7, sp, #0
 800ef28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ef2a:	bf00      	nop
 800ef2c:	370c      	adds	r7, #12
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef34:	4770      	bx	lr
	...

0800ef38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ef38:	b480      	push	{r7}
 800ef3a:	b085      	sub	sp, #20
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	4a40      	ldr	r2, [pc, #256]	; (800f04c <TIM_Base_SetConfig+0x114>)
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d013      	beq.n	800ef78 <TIM_Base_SetConfig+0x40>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef56:	d00f      	beq.n	800ef78 <TIM_Base_SetConfig+0x40>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	4a3d      	ldr	r2, [pc, #244]	; (800f050 <TIM_Base_SetConfig+0x118>)
 800ef5c:	4293      	cmp	r3, r2
 800ef5e:	d00b      	beq.n	800ef78 <TIM_Base_SetConfig+0x40>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	4a3c      	ldr	r2, [pc, #240]	; (800f054 <TIM_Base_SetConfig+0x11c>)
 800ef64:	4293      	cmp	r3, r2
 800ef66:	d007      	beq.n	800ef78 <TIM_Base_SetConfig+0x40>
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	4a3b      	ldr	r2, [pc, #236]	; (800f058 <TIM_Base_SetConfig+0x120>)
 800ef6c:	4293      	cmp	r3, r2
 800ef6e:	d003      	beq.n	800ef78 <TIM_Base_SetConfig+0x40>
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	4a3a      	ldr	r2, [pc, #232]	; (800f05c <TIM_Base_SetConfig+0x124>)
 800ef74:	4293      	cmp	r3, r2
 800ef76:	d108      	bne.n	800ef8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	685b      	ldr	r3, [r3, #4]
 800ef84:	68fa      	ldr	r2, [r7, #12]
 800ef86:	4313      	orrs	r3, r2
 800ef88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	4a2f      	ldr	r2, [pc, #188]	; (800f04c <TIM_Base_SetConfig+0x114>)
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	d02b      	beq.n	800efea <TIM_Base_SetConfig+0xb2>
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef98:	d027      	beq.n	800efea <TIM_Base_SetConfig+0xb2>
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	4a2c      	ldr	r2, [pc, #176]	; (800f050 <TIM_Base_SetConfig+0x118>)
 800ef9e:	4293      	cmp	r3, r2
 800efa0:	d023      	beq.n	800efea <TIM_Base_SetConfig+0xb2>
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	4a2b      	ldr	r2, [pc, #172]	; (800f054 <TIM_Base_SetConfig+0x11c>)
 800efa6:	4293      	cmp	r3, r2
 800efa8:	d01f      	beq.n	800efea <TIM_Base_SetConfig+0xb2>
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	4a2a      	ldr	r2, [pc, #168]	; (800f058 <TIM_Base_SetConfig+0x120>)
 800efae:	4293      	cmp	r3, r2
 800efb0:	d01b      	beq.n	800efea <TIM_Base_SetConfig+0xb2>
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	4a29      	ldr	r2, [pc, #164]	; (800f05c <TIM_Base_SetConfig+0x124>)
 800efb6:	4293      	cmp	r3, r2
 800efb8:	d017      	beq.n	800efea <TIM_Base_SetConfig+0xb2>
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	4a28      	ldr	r2, [pc, #160]	; (800f060 <TIM_Base_SetConfig+0x128>)
 800efbe:	4293      	cmp	r3, r2
 800efc0:	d013      	beq.n	800efea <TIM_Base_SetConfig+0xb2>
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	4a27      	ldr	r2, [pc, #156]	; (800f064 <TIM_Base_SetConfig+0x12c>)
 800efc6:	4293      	cmp	r3, r2
 800efc8:	d00f      	beq.n	800efea <TIM_Base_SetConfig+0xb2>
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	4a26      	ldr	r2, [pc, #152]	; (800f068 <TIM_Base_SetConfig+0x130>)
 800efce:	4293      	cmp	r3, r2
 800efd0:	d00b      	beq.n	800efea <TIM_Base_SetConfig+0xb2>
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	4a25      	ldr	r2, [pc, #148]	; (800f06c <TIM_Base_SetConfig+0x134>)
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d007      	beq.n	800efea <TIM_Base_SetConfig+0xb2>
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	4a24      	ldr	r2, [pc, #144]	; (800f070 <TIM_Base_SetConfig+0x138>)
 800efde:	4293      	cmp	r3, r2
 800efe0:	d003      	beq.n	800efea <TIM_Base_SetConfig+0xb2>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	4a23      	ldr	r2, [pc, #140]	; (800f074 <TIM_Base_SetConfig+0x13c>)
 800efe6:	4293      	cmp	r3, r2
 800efe8:	d108      	bne.n	800effc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	68db      	ldr	r3, [r3, #12]
 800eff6:	68fa      	ldr	r2, [r7, #12]
 800eff8:	4313      	orrs	r3, r2
 800effa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	695b      	ldr	r3, [r3, #20]
 800f006:	4313      	orrs	r3, r2
 800f008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	68fa      	ldr	r2, [r7, #12]
 800f00e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	689a      	ldr	r2, [r3, #8]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	681a      	ldr	r2, [r3, #0]
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	4a0a      	ldr	r2, [pc, #40]	; (800f04c <TIM_Base_SetConfig+0x114>)
 800f024:	4293      	cmp	r3, r2
 800f026:	d003      	beq.n	800f030 <TIM_Base_SetConfig+0xf8>
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	4a0c      	ldr	r2, [pc, #48]	; (800f05c <TIM_Base_SetConfig+0x124>)
 800f02c:	4293      	cmp	r3, r2
 800f02e:	d103      	bne.n	800f038 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	691a      	ldr	r2, [r3, #16]
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2201      	movs	r2, #1
 800f03c:	615a      	str	r2, [r3, #20]
}
 800f03e:	bf00      	nop
 800f040:	3714      	adds	r7, #20
 800f042:	46bd      	mov	sp, r7
 800f044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f048:	4770      	bx	lr
 800f04a:	bf00      	nop
 800f04c:	40010000 	.word	0x40010000
 800f050:	40000400 	.word	0x40000400
 800f054:	40000800 	.word	0x40000800
 800f058:	40000c00 	.word	0x40000c00
 800f05c:	40010400 	.word	0x40010400
 800f060:	40014000 	.word	0x40014000
 800f064:	40014400 	.word	0x40014400
 800f068:	40014800 	.word	0x40014800
 800f06c:	40001800 	.word	0x40001800
 800f070:	40001c00 	.word	0x40001c00
 800f074:	40002000 	.word	0x40002000

0800f078 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f078:	b480      	push	{r7}
 800f07a:	b087      	sub	sp, #28
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
 800f080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	6a1b      	ldr	r3, [r3, #32]
 800f086:	f023 0201 	bic.w	r2, r3, #1
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6a1b      	ldr	r3, [r3, #32]
 800f092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	685b      	ldr	r3, [r3, #4]
 800f098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	699b      	ldr	r3, [r3, #24]
 800f09e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	f023 0303 	bic.w	r3, r3, #3
 800f0ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	68fa      	ldr	r2, [r7, #12]
 800f0b6:	4313      	orrs	r3, r2
 800f0b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f0ba:	697b      	ldr	r3, [r7, #20]
 800f0bc:	f023 0302 	bic.w	r3, r3, #2
 800f0c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	689b      	ldr	r3, [r3, #8]
 800f0c6:	697a      	ldr	r2, [r7, #20]
 800f0c8:	4313      	orrs	r3, r2
 800f0ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	4a20      	ldr	r2, [pc, #128]	; (800f150 <TIM_OC1_SetConfig+0xd8>)
 800f0d0:	4293      	cmp	r3, r2
 800f0d2:	d003      	beq.n	800f0dc <TIM_OC1_SetConfig+0x64>
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	4a1f      	ldr	r2, [pc, #124]	; (800f154 <TIM_OC1_SetConfig+0xdc>)
 800f0d8:	4293      	cmp	r3, r2
 800f0da:	d10c      	bne.n	800f0f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	f023 0308 	bic.w	r3, r3, #8
 800f0e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	68db      	ldr	r3, [r3, #12]
 800f0e8:	697a      	ldr	r2, [r7, #20]
 800f0ea:	4313      	orrs	r3, r2
 800f0ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	f023 0304 	bic.w	r3, r3, #4
 800f0f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	4a15      	ldr	r2, [pc, #84]	; (800f150 <TIM_OC1_SetConfig+0xd8>)
 800f0fa:	4293      	cmp	r3, r2
 800f0fc:	d003      	beq.n	800f106 <TIM_OC1_SetConfig+0x8e>
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	4a14      	ldr	r2, [pc, #80]	; (800f154 <TIM_OC1_SetConfig+0xdc>)
 800f102:	4293      	cmp	r3, r2
 800f104:	d111      	bne.n	800f12a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f106:	693b      	ldr	r3, [r7, #16]
 800f108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f10c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f114:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	695b      	ldr	r3, [r3, #20]
 800f11a:	693a      	ldr	r2, [r7, #16]
 800f11c:	4313      	orrs	r3, r2
 800f11e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	699b      	ldr	r3, [r3, #24]
 800f124:	693a      	ldr	r2, [r7, #16]
 800f126:	4313      	orrs	r3, r2
 800f128:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	693a      	ldr	r2, [r7, #16]
 800f12e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	68fa      	ldr	r2, [r7, #12]
 800f134:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	685a      	ldr	r2, [r3, #4]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	697a      	ldr	r2, [r7, #20]
 800f142:	621a      	str	r2, [r3, #32]
}
 800f144:	bf00      	nop
 800f146:	371c      	adds	r7, #28
 800f148:	46bd      	mov	sp, r7
 800f14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14e:	4770      	bx	lr
 800f150:	40010000 	.word	0x40010000
 800f154:	40010400 	.word	0x40010400

0800f158 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f158:	b480      	push	{r7}
 800f15a:	b087      	sub	sp, #28
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	6a1b      	ldr	r3, [r3, #32]
 800f166:	f023 0210 	bic.w	r2, r3, #16
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6a1b      	ldr	r3, [r3, #32]
 800f172:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	685b      	ldr	r3, [r3, #4]
 800f178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	699b      	ldr	r3, [r3, #24]
 800f17e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f18e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	021b      	lsls	r3, r3, #8
 800f196:	68fa      	ldr	r2, [r7, #12]
 800f198:	4313      	orrs	r3, r2
 800f19a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f19c:	697b      	ldr	r3, [r7, #20]
 800f19e:	f023 0320 	bic.w	r3, r3, #32
 800f1a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	689b      	ldr	r3, [r3, #8]
 800f1a8:	011b      	lsls	r3, r3, #4
 800f1aa:	697a      	ldr	r2, [r7, #20]
 800f1ac:	4313      	orrs	r3, r2
 800f1ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	4a22      	ldr	r2, [pc, #136]	; (800f23c <TIM_OC2_SetConfig+0xe4>)
 800f1b4:	4293      	cmp	r3, r2
 800f1b6:	d003      	beq.n	800f1c0 <TIM_OC2_SetConfig+0x68>
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	4a21      	ldr	r2, [pc, #132]	; (800f240 <TIM_OC2_SetConfig+0xe8>)
 800f1bc:	4293      	cmp	r3, r2
 800f1be:	d10d      	bne.n	800f1dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f1c0:	697b      	ldr	r3, [r7, #20]
 800f1c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f1c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	68db      	ldr	r3, [r3, #12]
 800f1cc:	011b      	lsls	r3, r3, #4
 800f1ce:	697a      	ldr	r2, [r7, #20]
 800f1d0:	4313      	orrs	r3, r2
 800f1d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f1d4:	697b      	ldr	r3, [r7, #20]
 800f1d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	4a17      	ldr	r2, [pc, #92]	; (800f23c <TIM_OC2_SetConfig+0xe4>)
 800f1e0:	4293      	cmp	r3, r2
 800f1e2:	d003      	beq.n	800f1ec <TIM_OC2_SetConfig+0x94>
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	4a16      	ldr	r2, [pc, #88]	; (800f240 <TIM_OC2_SetConfig+0xe8>)
 800f1e8:	4293      	cmp	r3, r2
 800f1ea:	d113      	bne.n	800f214 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f1ec:	693b      	ldr	r3, [r7, #16]
 800f1ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f1f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f1f4:	693b      	ldr	r3, [r7, #16]
 800f1f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f1fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	695b      	ldr	r3, [r3, #20]
 800f200:	009b      	lsls	r3, r3, #2
 800f202:	693a      	ldr	r2, [r7, #16]
 800f204:	4313      	orrs	r3, r2
 800f206:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	699b      	ldr	r3, [r3, #24]
 800f20c:	009b      	lsls	r3, r3, #2
 800f20e:	693a      	ldr	r2, [r7, #16]
 800f210:	4313      	orrs	r3, r2
 800f212:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	693a      	ldr	r2, [r7, #16]
 800f218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	68fa      	ldr	r2, [r7, #12]
 800f21e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	685a      	ldr	r2, [r3, #4]
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	697a      	ldr	r2, [r7, #20]
 800f22c:	621a      	str	r2, [r3, #32]
}
 800f22e:	bf00      	nop
 800f230:	371c      	adds	r7, #28
 800f232:	46bd      	mov	sp, r7
 800f234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f238:	4770      	bx	lr
 800f23a:	bf00      	nop
 800f23c:	40010000 	.word	0x40010000
 800f240:	40010400 	.word	0x40010400

0800f244 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f244:	b480      	push	{r7}
 800f246:	b087      	sub	sp, #28
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
 800f24c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6a1b      	ldr	r3, [r3, #32]
 800f252:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6a1b      	ldr	r3, [r3, #32]
 800f25e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	685b      	ldr	r3, [r3, #4]
 800f264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	69db      	ldr	r3, [r3, #28]
 800f26a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	f023 0303 	bic.w	r3, r3, #3
 800f27a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	68fa      	ldr	r2, [r7, #12]
 800f282:	4313      	orrs	r3, r2
 800f284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f286:	697b      	ldr	r3, [r7, #20]
 800f288:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f28c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	689b      	ldr	r3, [r3, #8]
 800f292:	021b      	lsls	r3, r3, #8
 800f294:	697a      	ldr	r2, [r7, #20]
 800f296:	4313      	orrs	r3, r2
 800f298:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	4a21      	ldr	r2, [pc, #132]	; (800f324 <TIM_OC3_SetConfig+0xe0>)
 800f29e:	4293      	cmp	r3, r2
 800f2a0:	d003      	beq.n	800f2aa <TIM_OC3_SetConfig+0x66>
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	4a20      	ldr	r2, [pc, #128]	; (800f328 <TIM_OC3_SetConfig+0xe4>)
 800f2a6:	4293      	cmp	r3, r2
 800f2a8:	d10d      	bne.n	800f2c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f2aa:	697b      	ldr	r3, [r7, #20]
 800f2ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f2b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	68db      	ldr	r3, [r3, #12]
 800f2b6:	021b      	lsls	r3, r3, #8
 800f2b8:	697a      	ldr	r2, [r7, #20]
 800f2ba:	4313      	orrs	r3, r2
 800f2bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f2c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	4a16      	ldr	r2, [pc, #88]	; (800f324 <TIM_OC3_SetConfig+0xe0>)
 800f2ca:	4293      	cmp	r3, r2
 800f2cc:	d003      	beq.n	800f2d6 <TIM_OC3_SetConfig+0x92>
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	4a15      	ldr	r2, [pc, #84]	; (800f328 <TIM_OC3_SetConfig+0xe4>)
 800f2d2:	4293      	cmp	r3, r2
 800f2d4:	d113      	bne.n	800f2fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f2d6:	693b      	ldr	r3, [r7, #16]
 800f2d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f2dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f2e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	695b      	ldr	r3, [r3, #20]
 800f2ea:	011b      	lsls	r3, r3, #4
 800f2ec:	693a      	ldr	r2, [r7, #16]
 800f2ee:	4313      	orrs	r3, r2
 800f2f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	699b      	ldr	r3, [r3, #24]
 800f2f6:	011b      	lsls	r3, r3, #4
 800f2f8:	693a      	ldr	r2, [r7, #16]
 800f2fa:	4313      	orrs	r3, r2
 800f2fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	693a      	ldr	r2, [r7, #16]
 800f302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	68fa      	ldr	r2, [r7, #12]
 800f308:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	685a      	ldr	r2, [r3, #4]
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	697a      	ldr	r2, [r7, #20]
 800f316:	621a      	str	r2, [r3, #32]
}
 800f318:	bf00      	nop
 800f31a:	371c      	adds	r7, #28
 800f31c:	46bd      	mov	sp, r7
 800f31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f322:	4770      	bx	lr
 800f324:	40010000 	.word	0x40010000
 800f328:	40010400 	.word	0x40010400

0800f32c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f32c:	b480      	push	{r7}
 800f32e:	b087      	sub	sp, #28
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
 800f334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	6a1b      	ldr	r3, [r3, #32]
 800f33a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	6a1b      	ldr	r3, [r3, #32]
 800f346:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	685b      	ldr	r3, [r3, #4]
 800f34c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	69db      	ldr	r3, [r3, #28]
 800f352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f35a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	021b      	lsls	r3, r3, #8
 800f36a:	68fa      	ldr	r2, [r7, #12]
 800f36c:	4313      	orrs	r3, r2
 800f36e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f376:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	689b      	ldr	r3, [r3, #8]
 800f37c:	031b      	lsls	r3, r3, #12
 800f37e:	693a      	ldr	r2, [r7, #16]
 800f380:	4313      	orrs	r3, r2
 800f382:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	4a12      	ldr	r2, [pc, #72]	; (800f3d0 <TIM_OC4_SetConfig+0xa4>)
 800f388:	4293      	cmp	r3, r2
 800f38a:	d003      	beq.n	800f394 <TIM_OC4_SetConfig+0x68>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	4a11      	ldr	r2, [pc, #68]	; (800f3d4 <TIM_OC4_SetConfig+0xa8>)
 800f390:	4293      	cmp	r3, r2
 800f392:	d109      	bne.n	800f3a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f39a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	695b      	ldr	r3, [r3, #20]
 800f3a0:	019b      	lsls	r3, r3, #6
 800f3a2:	697a      	ldr	r2, [r7, #20]
 800f3a4:	4313      	orrs	r3, r2
 800f3a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	697a      	ldr	r2, [r7, #20]
 800f3ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	68fa      	ldr	r2, [r7, #12]
 800f3b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	685a      	ldr	r2, [r3, #4]
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	693a      	ldr	r2, [r7, #16]
 800f3c0:	621a      	str	r2, [r3, #32]
}
 800f3c2:	bf00      	nop
 800f3c4:	371c      	adds	r7, #28
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3cc:	4770      	bx	lr
 800f3ce:	bf00      	nop
 800f3d0:	40010000 	.word	0x40010000
 800f3d4:	40010400 	.word	0x40010400

0800f3d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f3d8:	b480      	push	{r7}
 800f3da:	b087      	sub	sp, #28
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	60f8      	str	r0, [r7, #12]
 800f3e0:	60b9      	str	r1, [r7, #8]
 800f3e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	6a1b      	ldr	r3, [r3, #32]
 800f3e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	6a1b      	ldr	r3, [r3, #32]
 800f3ee:	f023 0201 	bic.w	r2, r3, #1
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	699b      	ldr	r3, [r3, #24]
 800f3fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f3fc:	693b      	ldr	r3, [r7, #16]
 800f3fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	011b      	lsls	r3, r3, #4
 800f408:	693a      	ldr	r2, [r7, #16]
 800f40a:	4313      	orrs	r3, r2
 800f40c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	f023 030a 	bic.w	r3, r3, #10
 800f414:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f416:	697a      	ldr	r2, [r7, #20]
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	4313      	orrs	r3, r2
 800f41c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	693a      	ldr	r2, [r7, #16]
 800f422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	697a      	ldr	r2, [r7, #20]
 800f428:	621a      	str	r2, [r3, #32]
}
 800f42a:	bf00      	nop
 800f42c:	371c      	adds	r7, #28
 800f42e:	46bd      	mov	sp, r7
 800f430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f434:	4770      	bx	lr

0800f436 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f436:	b480      	push	{r7}
 800f438:	b087      	sub	sp, #28
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	60f8      	str	r0, [r7, #12]
 800f43e:	60b9      	str	r1, [r7, #8]
 800f440:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	6a1b      	ldr	r3, [r3, #32]
 800f446:	f023 0210 	bic.w	r2, r3, #16
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	699b      	ldr	r3, [r3, #24]
 800f452:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	6a1b      	ldr	r3, [r3, #32]
 800f458:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f460:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	031b      	lsls	r3, r3, #12
 800f466:	697a      	ldr	r2, [r7, #20]
 800f468:	4313      	orrs	r3, r2
 800f46a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f46c:	693b      	ldr	r3, [r7, #16]
 800f46e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f472:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	011b      	lsls	r3, r3, #4
 800f478:	693a      	ldr	r2, [r7, #16]
 800f47a:	4313      	orrs	r3, r2
 800f47c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	697a      	ldr	r2, [r7, #20]
 800f482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	693a      	ldr	r2, [r7, #16]
 800f488:	621a      	str	r2, [r3, #32]
}
 800f48a:	bf00      	nop
 800f48c:	371c      	adds	r7, #28
 800f48e:	46bd      	mov	sp, r7
 800f490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f494:	4770      	bx	lr

0800f496 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f496:	b480      	push	{r7}
 800f498:	b085      	sub	sp, #20
 800f49a:	af00      	add	r7, sp, #0
 800f49c:	6078      	str	r0, [r7, #4]
 800f49e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	689b      	ldr	r3, [r3, #8]
 800f4a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f4ae:	683a      	ldr	r2, [r7, #0]
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	4313      	orrs	r3, r2
 800f4b4:	f043 0307 	orr.w	r3, r3, #7
 800f4b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	68fa      	ldr	r2, [r7, #12]
 800f4be:	609a      	str	r2, [r3, #8]
}
 800f4c0:	bf00      	nop
 800f4c2:	3714      	adds	r7, #20
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ca:	4770      	bx	lr

0800f4cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b087      	sub	sp, #28
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	60f8      	str	r0, [r7, #12]
 800f4d4:	60b9      	str	r1, [r7, #8]
 800f4d6:	607a      	str	r2, [r7, #4]
 800f4d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	689b      	ldr	r3, [r3, #8]
 800f4de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f4e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	021a      	lsls	r2, r3, #8
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	431a      	orrs	r2, r3
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	4313      	orrs	r3, r2
 800f4f4:	697a      	ldr	r2, [r7, #20]
 800f4f6:	4313      	orrs	r3, r2
 800f4f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	697a      	ldr	r2, [r7, #20]
 800f4fe:	609a      	str	r2, [r3, #8]
}
 800f500:	bf00      	nop
 800f502:	371c      	adds	r7, #28
 800f504:	46bd      	mov	sp, r7
 800f506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50a:	4770      	bx	lr

0800f50c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f50c:	b480      	push	{r7}
 800f50e:	b087      	sub	sp, #28
 800f510:	af00      	add	r7, sp, #0
 800f512:	60f8      	str	r0, [r7, #12]
 800f514:	60b9      	str	r1, [r7, #8]
 800f516:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	f003 031f 	and.w	r3, r3, #31
 800f51e:	2201      	movs	r2, #1
 800f520:	fa02 f303 	lsl.w	r3, r2, r3
 800f524:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	6a1a      	ldr	r2, [r3, #32]
 800f52a:	697b      	ldr	r3, [r7, #20]
 800f52c:	43db      	mvns	r3, r3
 800f52e:	401a      	ands	r2, r3
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	6a1a      	ldr	r2, [r3, #32]
 800f538:	68bb      	ldr	r3, [r7, #8]
 800f53a:	f003 031f 	and.w	r3, r3, #31
 800f53e:	6879      	ldr	r1, [r7, #4]
 800f540:	fa01 f303 	lsl.w	r3, r1, r3
 800f544:	431a      	orrs	r2, r3
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	621a      	str	r2, [r3, #32]
}
 800f54a:	bf00      	nop
 800f54c:	371c      	adds	r7, #28
 800f54e:	46bd      	mov	sp, r7
 800f550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f554:	4770      	bx	lr
	...

0800f558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f558:	b480      	push	{r7}
 800f55a:	b085      	sub	sp, #20
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
 800f560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d101      	bne.n	800f570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f56c:	2302      	movs	r3, #2
 800f56e:	e05a      	b.n	800f626 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2201      	movs	r2, #1
 800f574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2202      	movs	r2, #2
 800f57c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	685b      	ldr	r3, [r3, #4]
 800f586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	689b      	ldr	r3, [r3, #8]
 800f58e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f596:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	68fa      	ldr	r2, [r7, #12]
 800f59e:	4313      	orrs	r3, r2
 800f5a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	68fa      	ldr	r2, [r7, #12]
 800f5a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	4a21      	ldr	r2, [pc, #132]	; (800f634 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f5b0:	4293      	cmp	r3, r2
 800f5b2:	d022      	beq.n	800f5fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5bc:	d01d      	beq.n	800f5fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	4a1d      	ldr	r2, [pc, #116]	; (800f638 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f5c4:	4293      	cmp	r3, r2
 800f5c6:	d018      	beq.n	800f5fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	4a1b      	ldr	r2, [pc, #108]	; (800f63c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f5ce:	4293      	cmp	r3, r2
 800f5d0:	d013      	beq.n	800f5fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	4a1a      	ldr	r2, [pc, #104]	; (800f640 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f5d8:	4293      	cmp	r3, r2
 800f5da:	d00e      	beq.n	800f5fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	4a18      	ldr	r2, [pc, #96]	; (800f644 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	d009      	beq.n	800f5fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	4a17      	ldr	r2, [pc, #92]	; (800f648 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f5ec:	4293      	cmp	r3, r2
 800f5ee:	d004      	beq.n	800f5fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	4a15      	ldr	r2, [pc, #84]	; (800f64c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f5f6:	4293      	cmp	r3, r2
 800f5f8:	d10c      	bne.n	800f614 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f600:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	685b      	ldr	r3, [r3, #4]
 800f606:	68ba      	ldr	r2, [r7, #8]
 800f608:	4313      	orrs	r3, r2
 800f60a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	68ba      	ldr	r2, [r7, #8]
 800f612:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2201      	movs	r2, #1
 800f618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2200      	movs	r2, #0
 800f620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f624:	2300      	movs	r3, #0
}
 800f626:	4618      	mov	r0, r3
 800f628:	3714      	adds	r7, #20
 800f62a:	46bd      	mov	sp, r7
 800f62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f630:	4770      	bx	lr
 800f632:	bf00      	nop
 800f634:	40010000 	.word	0x40010000
 800f638:	40000400 	.word	0x40000400
 800f63c:	40000800 	.word	0x40000800
 800f640:	40000c00 	.word	0x40000c00
 800f644:	40010400 	.word	0x40010400
 800f648:	40014000 	.word	0x40014000
 800f64c:	40001800 	.word	0x40001800

0800f650 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f650:	b480      	push	{r7}
 800f652:	b083      	sub	sp, #12
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f658:	bf00      	nop
 800f65a:	370c      	adds	r7, #12
 800f65c:	46bd      	mov	sp, r7
 800f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f662:	4770      	bx	lr

0800f664 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f664:	b480      	push	{r7}
 800f666:	b083      	sub	sp, #12
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f66c:	bf00      	nop
 800f66e:	370c      	adds	r7, #12
 800f670:	46bd      	mov	sp, r7
 800f672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f676:	4770      	bx	lr

0800f678 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b082      	sub	sp, #8
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d101      	bne.n	800f68a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f686:	2301      	movs	r3, #1
 800f688:	e03f      	b.n	800f70a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f690:	b2db      	uxtb	r3, r3
 800f692:	2b00      	cmp	r3, #0
 800f694:	d106      	bne.n	800f6a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2200      	movs	r2, #0
 800f69a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f7f3 fa0e 	bl	8002ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2224      	movs	r2, #36	; 0x24
 800f6a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	68da      	ldr	r2, [r3, #12]
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f6ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f000 f9cb 	bl	800fa58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	691a      	ldr	r2, [r3, #16]
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f6d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	695a      	ldr	r2, [r3, #20]
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f6e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	68da      	ldr	r2, [r3, #12]
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f6f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2220      	movs	r2, #32
 800f6fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2220      	movs	r2, #32
 800f704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800f708:	2300      	movs	r3, #0
}
 800f70a:	4618      	mov	r0, r3
 800f70c:	3708      	adds	r7, #8
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}

0800f712 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f712:	b580      	push	{r7, lr}
 800f714:	b08a      	sub	sp, #40	; 0x28
 800f716:	af02      	add	r7, sp, #8
 800f718:	60f8      	str	r0, [r7, #12]
 800f71a:	60b9      	str	r1, [r7, #8]
 800f71c:	603b      	str	r3, [r7, #0]
 800f71e:	4613      	mov	r3, r2
 800f720:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800f722:	2300      	movs	r3, #0
 800f724:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f72c:	b2db      	uxtb	r3, r3
 800f72e:	2b20      	cmp	r3, #32
 800f730:	d17c      	bne.n	800f82c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d002      	beq.n	800f73e <HAL_UART_Transmit+0x2c>
 800f738:	88fb      	ldrh	r3, [r7, #6]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d101      	bne.n	800f742 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800f73e:	2301      	movs	r3, #1
 800f740:	e075      	b.n	800f82e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f748:	2b01      	cmp	r3, #1
 800f74a:	d101      	bne.n	800f750 <HAL_UART_Transmit+0x3e>
 800f74c:	2302      	movs	r3, #2
 800f74e:	e06e      	b.n	800f82e <HAL_UART_Transmit+0x11c>
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	2201      	movs	r2, #1
 800f754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	2200      	movs	r2, #0
 800f75c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	2221      	movs	r2, #33	; 0x21
 800f762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f766:	f7f9 fde1 	bl	800932c <HAL_GetTick>
 800f76a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	88fa      	ldrh	r2, [r7, #6]
 800f770:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	88fa      	ldrh	r2, [r7, #6]
 800f776:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	689b      	ldr	r3, [r3, #8]
 800f77c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f780:	d108      	bne.n	800f794 <HAL_UART_Transmit+0x82>
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	691b      	ldr	r3, [r3, #16]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d104      	bne.n	800f794 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800f78a:	2300      	movs	r3, #0
 800f78c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	61bb      	str	r3, [r7, #24]
 800f792:	e003      	b.n	800f79c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f798:	2300      	movs	r3, #0
 800f79a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800f7a4:	e02a      	b.n	800f7fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	9300      	str	r3, [sp, #0]
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	2180      	movs	r1, #128	; 0x80
 800f7b0:	68f8      	ldr	r0, [r7, #12]
 800f7b2:	f000 f8e2 	bl	800f97a <UART_WaitOnFlagUntilTimeout>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d001      	beq.n	800f7c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800f7bc:	2303      	movs	r3, #3
 800f7be:	e036      	b.n	800f82e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800f7c0:	69fb      	ldr	r3, [r7, #28]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d10b      	bne.n	800f7de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f7c6:	69bb      	ldr	r3, [r7, #24]
 800f7c8:	881b      	ldrh	r3, [r3, #0]
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f7d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800f7d6:	69bb      	ldr	r3, [r7, #24]
 800f7d8:	3302      	adds	r3, #2
 800f7da:	61bb      	str	r3, [r7, #24]
 800f7dc:	e007      	b.n	800f7ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800f7de:	69fb      	ldr	r3, [r7, #28]
 800f7e0:	781a      	ldrb	r2, [r3, #0]
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800f7e8:	69fb      	ldr	r3, [r7, #28]
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f7f2:	b29b      	uxth	r3, r3
 800f7f4:	3b01      	subs	r3, #1
 800f7f6:	b29a      	uxth	r2, r3
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f800:	b29b      	uxth	r3, r3
 800f802:	2b00      	cmp	r3, #0
 800f804:	d1cf      	bne.n	800f7a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	9300      	str	r3, [sp, #0]
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	2200      	movs	r2, #0
 800f80e:	2140      	movs	r1, #64	; 0x40
 800f810:	68f8      	ldr	r0, [r7, #12]
 800f812:	f000 f8b2 	bl	800f97a <UART_WaitOnFlagUntilTimeout>
 800f816:	4603      	mov	r3, r0
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d001      	beq.n	800f820 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800f81c:	2303      	movs	r3, #3
 800f81e:	e006      	b.n	800f82e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	2220      	movs	r2, #32
 800f824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800f828:	2300      	movs	r3, #0
 800f82a:	e000      	b.n	800f82e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800f82c:	2302      	movs	r3, #2
  }
}
 800f82e:	4618      	mov	r0, r3
 800f830:	3720      	adds	r7, #32
 800f832:	46bd      	mov	sp, r7
 800f834:	bd80      	pop	{r7, pc}

0800f836 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f836:	b580      	push	{r7, lr}
 800f838:	b08a      	sub	sp, #40	; 0x28
 800f83a:	af02      	add	r7, sp, #8
 800f83c:	60f8      	str	r0, [r7, #12]
 800f83e:	60b9      	str	r1, [r7, #8]
 800f840:	603b      	str	r3, [r7, #0]
 800f842:	4613      	mov	r3, r2
 800f844:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800f846:	2300      	movs	r3, #0
 800f848:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f850:	b2db      	uxtb	r3, r3
 800f852:	2b20      	cmp	r3, #32
 800f854:	f040 808c 	bne.w	800f970 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d002      	beq.n	800f864 <HAL_UART_Receive+0x2e>
 800f85e:	88fb      	ldrh	r3, [r7, #6]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d101      	bne.n	800f868 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800f864:	2301      	movs	r3, #1
 800f866:	e084      	b.n	800f972 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f86e:	2b01      	cmp	r3, #1
 800f870:	d101      	bne.n	800f876 <HAL_UART_Receive+0x40>
 800f872:	2302      	movs	r3, #2
 800f874:	e07d      	b.n	800f972 <HAL_UART_Receive+0x13c>
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	2201      	movs	r2, #1
 800f87a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	2200      	movs	r2, #0
 800f882:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	2222      	movs	r2, #34	; 0x22
 800f888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	2200      	movs	r2, #0
 800f890:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f892:	f7f9 fd4b 	bl	800932c <HAL_GetTick>
 800f896:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	88fa      	ldrh	r2, [r7, #6]
 800f89c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	88fa      	ldrh	r2, [r7, #6]
 800f8a2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	689b      	ldr	r3, [r3, #8]
 800f8a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f8ac:	d108      	bne.n	800f8c0 <HAL_UART_Receive+0x8a>
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	691b      	ldr	r3, [r3, #16]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d104      	bne.n	800f8c0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f8ba:	68bb      	ldr	r3, [r7, #8]
 800f8bc:	61bb      	str	r3, [r7, #24]
 800f8be:	e003      	b.n	800f8c8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800f8c0:	68bb      	ldr	r3, [r7, #8]
 800f8c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800f8d0:	e043      	b.n	800f95a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	9300      	str	r3, [sp, #0]
 800f8d6:	697b      	ldr	r3, [r7, #20]
 800f8d8:	2200      	movs	r2, #0
 800f8da:	2120      	movs	r1, #32
 800f8dc:	68f8      	ldr	r0, [r7, #12]
 800f8de:	f000 f84c 	bl	800f97a <UART_WaitOnFlagUntilTimeout>
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d001      	beq.n	800f8ec <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800f8e8:	2303      	movs	r3, #3
 800f8ea:	e042      	b.n	800f972 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800f8ec:	69fb      	ldr	r3, [r7, #28]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d10c      	bne.n	800f90c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	685b      	ldr	r3, [r3, #4]
 800f8f8:	b29b      	uxth	r3, r3
 800f8fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8fe:	b29a      	uxth	r2, r3
 800f900:	69bb      	ldr	r3, [r7, #24]
 800f902:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f904:	69bb      	ldr	r3, [r7, #24]
 800f906:	3302      	adds	r3, #2
 800f908:	61bb      	str	r3, [r7, #24]
 800f90a:	e01f      	b.n	800f94c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	689b      	ldr	r3, [r3, #8]
 800f910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f914:	d007      	beq.n	800f926 <HAL_UART_Receive+0xf0>
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	689b      	ldr	r3, [r3, #8]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d10a      	bne.n	800f934 <HAL_UART_Receive+0xfe>
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	691b      	ldr	r3, [r3, #16]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d106      	bne.n	800f934 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	685b      	ldr	r3, [r3, #4]
 800f92c:	b2da      	uxtb	r2, r3
 800f92e:	69fb      	ldr	r3, [r7, #28]
 800f930:	701a      	strb	r2, [r3, #0]
 800f932:	e008      	b.n	800f946 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	685b      	ldr	r3, [r3, #4]
 800f93a:	b2db      	uxtb	r3, r3
 800f93c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f940:	b2da      	uxtb	r2, r3
 800f942:	69fb      	ldr	r3, [r7, #28]
 800f944:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800f946:	69fb      	ldr	r3, [r7, #28]
 800f948:	3301      	adds	r3, #1
 800f94a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f950:	b29b      	uxth	r3, r3
 800f952:	3b01      	subs	r3, #1
 800f954:	b29a      	uxth	r2, r3
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f95e:	b29b      	uxth	r3, r3
 800f960:	2b00      	cmp	r3, #0
 800f962:	d1b6      	bne.n	800f8d2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	2220      	movs	r2, #32
 800f968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800f96c:	2300      	movs	r3, #0
 800f96e:	e000      	b.n	800f972 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800f970:	2302      	movs	r3, #2
  }
}
 800f972:	4618      	mov	r0, r3
 800f974:	3720      	adds	r7, #32
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}

0800f97a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800f97a:	b580      	push	{r7, lr}
 800f97c:	b090      	sub	sp, #64	; 0x40
 800f97e:	af00      	add	r7, sp, #0
 800f980:	60f8      	str	r0, [r7, #12]
 800f982:	60b9      	str	r1, [r7, #8]
 800f984:	603b      	str	r3, [r7, #0]
 800f986:	4613      	mov	r3, r2
 800f988:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f98a:	e050      	b.n	800fa2e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f98c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f98e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f992:	d04c      	beq.n	800fa2e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800f994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f996:	2b00      	cmp	r3, #0
 800f998:	d007      	beq.n	800f9aa <UART_WaitOnFlagUntilTimeout+0x30>
 800f99a:	f7f9 fcc7 	bl	800932c <HAL_GetTick>
 800f99e:	4602      	mov	r2, r0
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	1ad3      	subs	r3, r2, r3
 800f9a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d241      	bcs.n	800fa2e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	330c      	adds	r3, #12
 800f9b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9b4:	e853 3f00 	ldrex	r3, [r3]
 800f9b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f9c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	330c      	adds	r3, #12
 800f9c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f9ca:	637a      	str	r2, [r7, #52]	; 0x34
 800f9cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f9d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9d2:	e841 2300 	strex	r3, r2, [r1]
 800f9d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d1e5      	bne.n	800f9aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	3314      	adds	r3, #20
 800f9e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9e6:	697b      	ldr	r3, [r7, #20]
 800f9e8:	e853 3f00 	ldrex	r3, [r3]
 800f9ec:	613b      	str	r3, [r7, #16]
   return(result);
 800f9ee:	693b      	ldr	r3, [r7, #16]
 800f9f0:	f023 0301 	bic.w	r3, r3, #1
 800f9f4:	63bb      	str	r3, [r7, #56]	; 0x38
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	3314      	adds	r3, #20
 800f9fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9fe:	623a      	str	r2, [r7, #32]
 800fa00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa02:	69f9      	ldr	r1, [r7, #28]
 800fa04:	6a3a      	ldr	r2, [r7, #32]
 800fa06:	e841 2300 	strex	r3, r2, [r1]
 800fa0a:	61bb      	str	r3, [r7, #24]
   return(result);
 800fa0c:	69bb      	ldr	r3, [r7, #24]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d1e5      	bne.n	800f9de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	2220      	movs	r2, #32
 800fa16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	2220      	movs	r2, #32
 800fa1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	2200      	movs	r2, #0
 800fa26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800fa2a:	2303      	movs	r3, #3
 800fa2c:	e00f      	b.n	800fa4e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	681a      	ldr	r2, [r3, #0]
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	4013      	ands	r3, r2
 800fa38:	68ba      	ldr	r2, [r7, #8]
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	bf0c      	ite	eq
 800fa3e:	2301      	moveq	r3, #1
 800fa40:	2300      	movne	r3, #0
 800fa42:	b2db      	uxtb	r3, r3
 800fa44:	461a      	mov	r2, r3
 800fa46:	79fb      	ldrb	r3, [r7, #7]
 800fa48:	429a      	cmp	r2, r3
 800fa4a:	d09f      	beq.n	800f98c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800fa4c:	2300      	movs	r3, #0
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	3740      	adds	r7, #64	; 0x40
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}
	...

0800fa58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fa58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa5c:	b09f      	sub	sp, #124	; 0x7c
 800fa5e:	af00      	add	r7, sp, #0
 800fa60:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fa62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	691b      	ldr	r3, [r3, #16]
 800fa68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800fa6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa6e:	68d9      	ldr	r1, [r3, #12]
 800fa70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa72:	681a      	ldr	r2, [r3, #0]
 800fa74:	ea40 0301 	orr.w	r3, r0, r1
 800fa78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fa7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa7c:	689a      	ldr	r2, [r3, #8]
 800fa7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa80:	691b      	ldr	r3, [r3, #16]
 800fa82:	431a      	orrs	r2, r3
 800fa84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa86:	695b      	ldr	r3, [r3, #20]
 800fa88:	431a      	orrs	r2, r3
 800fa8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa8c:	69db      	ldr	r3, [r3, #28]
 800fa8e:	4313      	orrs	r3, r2
 800fa90:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800fa92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	68db      	ldr	r3, [r3, #12]
 800fa98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800fa9c:	f021 010c 	bic.w	r1, r1, #12
 800faa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800faa2:	681a      	ldr	r2, [r3, #0]
 800faa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800faa6:	430b      	orrs	r3, r1
 800faa8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800faaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	695b      	ldr	r3, [r3, #20]
 800fab0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800fab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fab6:	6999      	ldr	r1, [r3, #24]
 800fab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800faba:	681a      	ldr	r2, [r3, #0]
 800fabc:	ea40 0301 	orr.w	r3, r0, r1
 800fac0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fac4:	681a      	ldr	r2, [r3, #0]
 800fac6:	4bc5      	ldr	r3, [pc, #788]	; (800fddc <UART_SetConfig+0x384>)
 800fac8:	429a      	cmp	r2, r3
 800faca:	d004      	beq.n	800fad6 <UART_SetConfig+0x7e>
 800facc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800face:	681a      	ldr	r2, [r3, #0]
 800fad0:	4bc3      	ldr	r3, [pc, #780]	; (800fde0 <UART_SetConfig+0x388>)
 800fad2:	429a      	cmp	r2, r3
 800fad4:	d103      	bne.n	800fade <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800fad6:	f7fd f865 	bl	800cba4 <HAL_RCC_GetPCLK2Freq>
 800fada:	6778      	str	r0, [r7, #116]	; 0x74
 800fadc:	e002      	b.n	800fae4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800fade:	f7fd f84d 	bl	800cb7c <HAL_RCC_GetPCLK1Freq>
 800fae2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fae6:	69db      	ldr	r3, [r3, #28]
 800fae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800faec:	f040 80b6 	bne.w	800fc5c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800faf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800faf2:	461c      	mov	r4, r3
 800faf4:	f04f 0500 	mov.w	r5, #0
 800faf8:	4622      	mov	r2, r4
 800fafa:	462b      	mov	r3, r5
 800fafc:	1891      	adds	r1, r2, r2
 800fafe:	6439      	str	r1, [r7, #64]	; 0x40
 800fb00:	415b      	adcs	r3, r3
 800fb02:	647b      	str	r3, [r7, #68]	; 0x44
 800fb04:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800fb08:	1912      	adds	r2, r2, r4
 800fb0a:	eb45 0303 	adc.w	r3, r5, r3
 800fb0e:	f04f 0000 	mov.w	r0, #0
 800fb12:	f04f 0100 	mov.w	r1, #0
 800fb16:	00d9      	lsls	r1, r3, #3
 800fb18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fb1c:	00d0      	lsls	r0, r2, #3
 800fb1e:	4602      	mov	r2, r0
 800fb20:	460b      	mov	r3, r1
 800fb22:	1911      	adds	r1, r2, r4
 800fb24:	6639      	str	r1, [r7, #96]	; 0x60
 800fb26:	416b      	adcs	r3, r5
 800fb28:	667b      	str	r3, [r7, #100]	; 0x64
 800fb2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	461a      	mov	r2, r3
 800fb30:	f04f 0300 	mov.w	r3, #0
 800fb34:	1891      	adds	r1, r2, r2
 800fb36:	63b9      	str	r1, [r7, #56]	; 0x38
 800fb38:	415b      	adcs	r3, r3
 800fb3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800fb40:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800fb44:	f7f1 f910 	bl	8000d68 <__aeabi_uldivmod>
 800fb48:	4602      	mov	r2, r0
 800fb4a:	460b      	mov	r3, r1
 800fb4c:	4ba5      	ldr	r3, [pc, #660]	; (800fde4 <UART_SetConfig+0x38c>)
 800fb4e:	fba3 2302 	umull	r2, r3, r3, r2
 800fb52:	095b      	lsrs	r3, r3, #5
 800fb54:	011e      	lsls	r6, r3, #4
 800fb56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb58:	461c      	mov	r4, r3
 800fb5a:	f04f 0500 	mov.w	r5, #0
 800fb5e:	4622      	mov	r2, r4
 800fb60:	462b      	mov	r3, r5
 800fb62:	1891      	adds	r1, r2, r2
 800fb64:	6339      	str	r1, [r7, #48]	; 0x30
 800fb66:	415b      	adcs	r3, r3
 800fb68:	637b      	str	r3, [r7, #52]	; 0x34
 800fb6a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800fb6e:	1912      	adds	r2, r2, r4
 800fb70:	eb45 0303 	adc.w	r3, r5, r3
 800fb74:	f04f 0000 	mov.w	r0, #0
 800fb78:	f04f 0100 	mov.w	r1, #0
 800fb7c:	00d9      	lsls	r1, r3, #3
 800fb7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fb82:	00d0      	lsls	r0, r2, #3
 800fb84:	4602      	mov	r2, r0
 800fb86:	460b      	mov	r3, r1
 800fb88:	1911      	adds	r1, r2, r4
 800fb8a:	65b9      	str	r1, [r7, #88]	; 0x58
 800fb8c:	416b      	adcs	r3, r5
 800fb8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fb90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb92:	685b      	ldr	r3, [r3, #4]
 800fb94:	461a      	mov	r2, r3
 800fb96:	f04f 0300 	mov.w	r3, #0
 800fb9a:	1891      	adds	r1, r2, r2
 800fb9c:	62b9      	str	r1, [r7, #40]	; 0x28
 800fb9e:	415b      	adcs	r3, r3
 800fba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fba2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800fba6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800fbaa:	f7f1 f8dd 	bl	8000d68 <__aeabi_uldivmod>
 800fbae:	4602      	mov	r2, r0
 800fbb0:	460b      	mov	r3, r1
 800fbb2:	4b8c      	ldr	r3, [pc, #560]	; (800fde4 <UART_SetConfig+0x38c>)
 800fbb4:	fba3 1302 	umull	r1, r3, r3, r2
 800fbb8:	095b      	lsrs	r3, r3, #5
 800fbba:	2164      	movs	r1, #100	; 0x64
 800fbbc:	fb01 f303 	mul.w	r3, r1, r3
 800fbc0:	1ad3      	subs	r3, r2, r3
 800fbc2:	00db      	lsls	r3, r3, #3
 800fbc4:	3332      	adds	r3, #50	; 0x32
 800fbc6:	4a87      	ldr	r2, [pc, #540]	; (800fde4 <UART_SetConfig+0x38c>)
 800fbc8:	fba2 2303 	umull	r2, r3, r2, r3
 800fbcc:	095b      	lsrs	r3, r3, #5
 800fbce:	005b      	lsls	r3, r3, #1
 800fbd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fbd4:	441e      	add	r6, r3
 800fbd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f04f 0100 	mov.w	r1, #0
 800fbde:	4602      	mov	r2, r0
 800fbe0:	460b      	mov	r3, r1
 800fbe2:	1894      	adds	r4, r2, r2
 800fbe4:	623c      	str	r4, [r7, #32]
 800fbe6:	415b      	adcs	r3, r3
 800fbe8:	627b      	str	r3, [r7, #36]	; 0x24
 800fbea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fbee:	1812      	adds	r2, r2, r0
 800fbf0:	eb41 0303 	adc.w	r3, r1, r3
 800fbf4:	f04f 0400 	mov.w	r4, #0
 800fbf8:	f04f 0500 	mov.w	r5, #0
 800fbfc:	00dd      	lsls	r5, r3, #3
 800fbfe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800fc02:	00d4      	lsls	r4, r2, #3
 800fc04:	4622      	mov	r2, r4
 800fc06:	462b      	mov	r3, r5
 800fc08:	1814      	adds	r4, r2, r0
 800fc0a:	653c      	str	r4, [r7, #80]	; 0x50
 800fc0c:	414b      	adcs	r3, r1
 800fc0e:	657b      	str	r3, [r7, #84]	; 0x54
 800fc10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc12:	685b      	ldr	r3, [r3, #4]
 800fc14:	461a      	mov	r2, r3
 800fc16:	f04f 0300 	mov.w	r3, #0
 800fc1a:	1891      	adds	r1, r2, r2
 800fc1c:	61b9      	str	r1, [r7, #24]
 800fc1e:	415b      	adcs	r3, r3
 800fc20:	61fb      	str	r3, [r7, #28]
 800fc22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fc26:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800fc2a:	f7f1 f89d 	bl	8000d68 <__aeabi_uldivmod>
 800fc2e:	4602      	mov	r2, r0
 800fc30:	460b      	mov	r3, r1
 800fc32:	4b6c      	ldr	r3, [pc, #432]	; (800fde4 <UART_SetConfig+0x38c>)
 800fc34:	fba3 1302 	umull	r1, r3, r3, r2
 800fc38:	095b      	lsrs	r3, r3, #5
 800fc3a:	2164      	movs	r1, #100	; 0x64
 800fc3c:	fb01 f303 	mul.w	r3, r1, r3
 800fc40:	1ad3      	subs	r3, r2, r3
 800fc42:	00db      	lsls	r3, r3, #3
 800fc44:	3332      	adds	r3, #50	; 0x32
 800fc46:	4a67      	ldr	r2, [pc, #412]	; (800fde4 <UART_SetConfig+0x38c>)
 800fc48:	fba2 2303 	umull	r2, r3, r2, r3
 800fc4c:	095b      	lsrs	r3, r3, #5
 800fc4e:	f003 0207 	and.w	r2, r3, #7
 800fc52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	4432      	add	r2, r6
 800fc58:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800fc5a:	e0b9      	b.n	800fdd0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fc5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fc5e:	461c      	mov	r4, r3
 800fc60:	f04f 0500 	mov.w	r5, #0
 800fc64:	4622      	mov	r2, r4
 800fc66:	462b      	mov	r3, r5
 800fc68:	1891      	adds	r1, r2, r2
 800fc6a:	6139      	str	r1, [r7, #16]
 800fc6c:	415b      	adcs	r3, r3
 800fc6e:	617b      	str	r3, [r7, #20]
 800fc70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fc74:	1912      	adds	r2, r2, r4
 800fc76:	eb45 0303 	adc.w	r3, r5, r3
 800fc7a:	f04f 0000 	mov.w	r0, #0
 800fc7e:	f04f 0100 	mov.w	r1, #0
 800fc82:	00d9      	lsls	r1, r3, #3
 800fc84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fc88:	00d0      	lsls	r0, r2, #3
 800fc8a:	4602      	mov	r2, r0
 800fc8c:	460b      	mov	r3, r1
 800fc8e:	eb12 0804 	adds.w	r8, r2, r4
 800fc92:	eb43 0905 	adc.w	r9, r3, r5
 800fc96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc98:	685b      	ldr	r3, [r3, #4]
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f04f 0100 	mov.w	r1, #0
 800fca0:	f04f 0200 	mov.w	r2, #0
 800fca4:	f04f 0300 	mov.w	r3, #0
 800fca8:	008b      	lsls	r3, r1, #2
 800fcaa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800fcae:	0082      	lsls	r2, r0, #2
 800fcb0:	4640      	mov	r0, r8
 800fcb2:	4649      	mov	r1, r9
 800fcb4:	f7f1 f858 	bl	8000d68 <__aeabi_uldivmod>
 800fcb8:	4602      	mov	r2, r0
 800fcba:	460b      	mov	r3, r1
 800fcbc:	4b49      	ldr	r3, [pc, #292]	; (800fde4 <UART_SetConfig+0x38c>)
 800fcbe:	fba3 2302 	umull	r2, r3, r3, r2
 800fcc2:	095b      	lsrs	r3, r3, #5
 800fcc4:	011e      	lsls	r6, r3, #4
 800fcc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fcc8:	4618      	mov	r0, r3
 800fcca:	f04f 0100 	mov.w	r1, #0
 800fcce:	4602      	mov	r2, r0
 800fcd0:	460b      	mov	r3, r1
 800fcd2:	1894      	adds	r4, r2, r2
 800fcd4:	60bc      	str	r4, [r7, #8]
 800fcd6:	415b      	adcs	r3, r3
 800fcd8:	60fb      	str	r3, [r7, #12]
 800fcda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fcde:	1812      	adds	r2, r2, r0
 800fce0:	eb41 0303 	adc.w	r3, r1, r3
 800fce4:	f04f 0400 	mov.w	r4, #0
 800fce8:	f04f 0500 	mov.w	r5, #0
 800fcec:	00dd      	lsls	r5, r3, #3
 800fcee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800fcf2:	00d4      	lsls	r4, r2, #3
 800fcf4:	4622      	mov	r2, r4
 800fcf6:	462b      	mov	r3, r5
 800fcf8:	1814      	adds	r4, r2, r0
 800fcfa:	64bc      	str	r4, [r7, #72]	; 0x48
 800fcfc:	414b      	adcs	r3, r1
 800fcfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd02:	685b      	ldr	r3, [r3, #4]
 800fd04:	4618      	mov	r0, r3
 800fd06:	f04f 0100 	mov.w	r1, #0
 800fd0a:	f04f 0200 	mov.w	r2, #0
 800fd0e:	f04f 0300 	mov.w	r3, #0
 800fd12:	008b      	lsls	r3, r1, #2
 800fd14:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800fd18:	0082      	lsls	r2, r0, #2
 800fd1a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800fd1e:	f7f1 f823 	bl	8000d68 <__aeabi_uldivmod>
 800fd22:	4602      	mov	r2, r0
 800fd24:	460b      	mov	r3, r1
 800fd26:	4b2f      	ldr	r3, [pc, #188]	; (800fde4 <UART_SetConfig+0x38c>)
 800fd28:	fba3 1302 	umull	r1, r3, r3, r2
 800fd2c:	095b      	lsrs	r3, r3, #5
 800fd2e:	2164      	movs	r1, #100	; 0x64
 800fd30:	fb01 f303 	mul.w	r3, r1, r3
 800fd34:	1ad3      	subs	r3, r2, r3
 800fd36:	011b      	lsls	r3, r3, #4
 800fd38:	3332      	adds	r3, #50	; 0x32
 800fd3a:	4a2a      	ldr	r2, [pc, #168]	; (800fde4 <UART_SetConfig+0x38c>)
 800fd3c:	fba2 2303 	umull	r2, r3, r2, r3
 800fd40:	095b      	lsrs	r3, r3, #5
 800fd42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fd46:	441e      	add	r6, r3
 800fd48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	f04f 0100 	mov.w	r1, #0
 800fd50:	4602      	mov	r2, r0
 800fd52:	460b      	mov	r3, r1
 800fd54:	1894      	adds	r4, r2, r2
 800fd56:	603c      	str	r4, [r7, #0]
 800fd58:	415b      	adcs	r3, r3
 800fd5a:	607b      	str	r3, [r7, #4]
 800fd5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd60:	1812      	adds	r2, r2, r0
 800fd62:	eb41 0303 	adc.w	r3, r1, r3
 800fd66:	f04f 0400 	mov.w	r4, #0
 800fd6a:	f04f 0500 	mov.w	r5, #0
 800fd6e:	00dd      	lsls	r5, r3, #3
 800fd70:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800fd74:	00d4      	lsls	r4, r2, #3
 800fd76:	4622      	mov	r2, r4
 800fd78:	462b      	mov	r3, r5
 800fd7a:	eb12 0a00 	adds.w	sl, r2, r0
 800fd7e:	eb43 0b01 	adc.w	fp, r3, r1
 800fd82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd84:	685b      	ldr	r3, [r3, #4]
 800fd86:	4618      	mov	r0, r3
 800fd88:	f04f 0100 	mov.w	r1, #0
 800fd8c:	f04f 0200 	mov.w	r2, #0
 800fd90:	f04f 0300 	mov.w	r3, #0
 800fd94:	008b      	lsls	r3, r1, #2
 800fd96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800fd9a:	0082      	lsls	r2, r0, #2
 800fd9c:	4650      	mov	r0, sl
 800fd9e:	4659      	mov	r1, fp
 800fda0:	f7f0 ffe2 	bl	8000d68 <__aeabi_uldivmod>
 800fda4:	4602      	mov	r2, r0
 800fda6:	460b      	mov	r3, r1
 800fda8:	4b0e      	ldr	r3, [pc, #56]	; (800fde4 <UART_SetConfig+0x38c>)
 800fdaa:	fba3 1302 	umull	r1, r3, r3, r2
 800fdae:	095b      	lsrs	r3, r3, #5
 800fdb0:	2164      	movs	r1, #100	; 0x64
 800fdb2:	fb01 f303 	mul.w	r3, r1, r3
 800fdb6:	1ad3      	subs	r3, r2, r3
 800fdb8:	011b      	lsls	r3, r3, #4
 800fdba:	3332      	adds	r3, #50	; 0x32
 800fdbc:	4a09      	ldr	r2, [pc, #36]	; (800fde4 <UART_SetConfig+0x38c>)
 800fdbe:	fba2 2303 	umull	r2, r3, r2, r3
 800fdc2:	095b      	lsrs	r3, r3, #5
 800fdc4:	f003 020f 	and.w	r2, r3, #15
 800fdc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	4432      	add	r2, r6
 800fdce:	609a      	str	r2, [r3, #8]
}
 800fdd0:	bf00      	nop
 800fdd2:	377c      	adds	r7, #124	; 0x7c
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdda:	bf00      	nop
 800fddc:	40011000 	.word	0x40011000
 800fde0:	40011400 	.word	0x40011400
 800fde4:	51eb851f 	.word	0x51eb851f

0800fde8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fde8:	b084      	sub	sp, #16
 800fdea:	b580      	push	{r7, lr}
 800fdec:	b084      	sub	sp, #16
 800fdee:	af00      	add	r7, sp, #0
 800fdf0:	6078      	str	r0, [r7, #4]
 800fdf2:	f107 001c 	add.w	r0, r7, #28
 800fdf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdfc:	2b01      	cmp	r3, #1
 800fdfe:	d122      	bne.n	800fe46 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	68db      	ldr	r3, [r3, #12]
 800fe10:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800fe14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe18:	687a      	ldr	r2, [r7, #4]
 800fe1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	68db      	ldr	r3, [r3, #12]
 800fe20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fe28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe2a:	2b01      	cmp	r3, #1
 800fe2c:	d105      	bne.n	800fe3a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	68db      	ldr	r3, [r3, #12]
 800fe32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fe3a:	6878      	ldr	r0, [r7, #4]
 800fe3c:	f001 fb1c 	bl	8011478 <USB_CoreReset>
 800fe40:	4603      	mov	r3, r0
 800fe42:	73fb      	strb	r3, [r7, #15]
 800fe44:	e01a      	b.n	800fe7c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	68db      	ldr	r3, [r3, #12]
 800fe4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fe52:	6878      	ldr	r0, [r7, #4]
 800fe54:	f001 fb10 	bl	8011478 <USB_CoreReset>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800fe5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d106      	bne.n	800fe70 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	639a      	str	r2, [r3, #56]	; 0x38
 800fe6e:	e005      	b.n	800fe7c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800fe7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe7e:	2b01      	cmp	r3, #1
 800fe80:	d10b      	bne.n	800fe9a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	689b      	ldr	r3, [r3, #8]
 800fe86:	f043 0206 	orr.w	r2, r3, #6
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	689b      	ldr	r3, [r3, #8]
 800fe92:	f043 0220 	orr.w	r2, r3, #32
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800fe9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	3710      	adds	r7, #16
 800fea0:	46bd      	mov	sp, r7
 800fea2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fea6:	b004      	add	sp, #16
 800fea8:	4770      	bx	lr
	...

0800feac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800feac:	b480      	push	{r7}
 800feae:	b087      	sub	sp, #28
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	60f8      	str	r0, [r7, #12]
 800feb4:	60b9      	str	r1, [r7, #8]
 800feb6:	4613      	mov	r3, r2
 800feb8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800feba:	79fb      	ldrb	r3, [r7, #7]
 800febc:	2b02      	cmp	r3, #2
 800febe:	d165      	bne.n	800ff8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800fec0:	68bb      	ldr	r3, [r7, #8]
 800fec2:	4a41      	ldr	r2, [pc, #260]	; (800ffc8 <USB_SetTurnaroundTime+0x11c>)
 800fec4:	4293      	cmp	r3, r2
 800fec6:	d906      	bls.n	800fed6 <USB_SetTurnaroundTime+0x2a>
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	4a40      	ldr	r2, [pc, #256]	; (800ffcc <USB_SetTurnaroundTime+0x120>)
 800fecc:	4293      	cmp	r3, r2
 800fece:	d202      	bcs.n	800fed6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800fed0:	230f      	movs	r3, #15
 800fed2:	617b      	str	r3, [r7, #20]
 800fed4:	e062      	b.n	800ff9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800fed6:	68bb      	ldr	r3, [r7, #8]
 800fed8:	4a3c      	ldr	r2, [pc, #240]	; (800ffcc <USB_SetTurnaroundTime+0x120>)
 800feda:	4293      	cmp	r3, r2
 800fedc:	d306      	bcc.n	800feec <USB_SetTurnaroundTime+0x40>
 800fede:	68bb      	ldr	r3, [r7, #8]
 800fee0:	4a3b      	ldr	r2, [pc, #236]	; (800ffd0 <USB_SetTurnaroundTime+0x124>)
 800fee2:	4293      	cmp	r3, r2
 800fee4:	d202      	bcs.n	800feec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800fee6:	230e      	movs	r3, #14
 800fee8:	617b      	str	r3, [r7, #20]
 800feea:	e057      	b.n	800ff9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	4a38      	ldr	r2, [pc, #224]	; (800ffd0 <USB_SetTurnaroundTime+0x124>)
 800fef0:	4293      	cmp	r3, r2
 800fef2:	d306      	bcc.n	800ff02 <USB_SetTurnaroundTime+0x56>
 800fef4:	68bb      	ldr	r3, [r7, #8]
 800fef6:	4a37      	ldr	r2, [pc, #220]	; (800ffd4 <USB_SetTurnaroundTime+0x128>)
 800fef8:	4293      	cmp	r3, r2
 800fefa:	d202      	bcs.n	800ff02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800fefc:	230d      	movs	r3, #13
 800fefe:	617b      	str	r3, [r7, #20]
 800ff00:	e04c      	b.n	800ff9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ff02:	68bb      	ldr	r3, [r7, #8]
 800ff04:	4a33      	ldr	r2, [pc, #204]	; (800ffd4 <USB_SetTurnaroundTime+0x128>)
 800ff06:	4293      	cmp	r3, r2
 800ff08:	d306      	bcc.n	800ff18 <USB_SetTurnaroundTime+0x6c>
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	4a32      	ldr	r2, [pc, #200]	; (800ffd8 <USB_SetTurnaroundTime+0x12c>)
 800ff0e:	4293      	cmp	r3, r2
 800ff10:	d802      	bhi.n	800ff18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ff12:	230c      	movs	r3, #12
 800ff14:	617b      	str	r3, [r7, #20]
 800ff16:	e041      	b.n	800ff9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ff18:	68bb      	ldr	r3, [r7, #8]
 800ff1a:	4a2f      	ldr	r2, [pc, #188]	; (800ffd8 <USB_SetTurnaroundTime+0x12c>)
 800ff1c:	4293      	cmp	r3, r2
 800ff1e:	d906      	bls.n	800ff2e <USB_SetTurnaroundTime+0x82>
 800ff20:	68bb      	ldr	r3, [r7, #8]
 800ff22:	4a2e      	ldr	r2, [pc, #184]	; (800ffdc <USB_SetTurnaroundTime+0x130>)
 800ff24:	4293      	cmp	r3, r2
 800ff26:	d802      	bhi.n	800ff2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ff28:	230b      	movs	r3, #11
 800ff2a:	617b      	str	r3, [r7, #20]
 800ff2c:	e036      	b.n	800ff9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ff2e:	68bb      	ldr	r3, [r7, #8]
 800ff30:	4a2a      	ldr	r2, [pc, #168]	; (800ffdc <USB_SetTurnaroundTime+0x130>)
 800ff32:	4293      	cmp	r3, r2
 800ff34:	d906      	bls.n	800ff44 <USB_SetTurnaroundTime+0x98>
 800ff36:	68bb      	ldr	r3, [r7, #8]
 800ff38:	4a29      	ldr	r2, [pc, #164]	; (800ffe0 <USB_SetTurnaroundTime+0x134>)
 800ff3a:	4293      	cmp	r3, r2
 800ff3c:	d802      	bhi.n	800ff44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ff3e:	230a      	movs	r3, #10
 800ff40:	617b      	str	r3, [r7, #20]
 800ff42:	e02b      	b.n	800ff9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ff44:	68bb      	ldr	r3, [r7, #8]
 800ff46:	4a26      	ldr	r2, [pc, #152]	; (800ffe0 <USB_SetTurnaroundTime+0x134>)
 800ff48:	4293      	cmp	r3, r2
 800ff4a:	d906      	bls.n	800ff5a <USB_SetTurnaroundTime+0xae>
 800ff4c:	68bb      	ldr	r3, [r7, #8]
 800ff4e:	4a25      	ldr	r2, [pc, #148]	; (800ffe4 <USB_SetTurnaroundTime+0x138>)
 800ff50:	4293      	cmp	r3, r2
 800ff52:	d202      	bcs.n	800ff5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ff54:	2309      	movs	r3, #9
 800ff56:	617b      	str	r3, [r7, #20]
 800ff58:	e020      	b.n	800ff9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ff5a:	68bb      	ldr	r3, [r7, #8]
 800ff5c:	4a21      	ldr	r2, [pc, #132]	; (800ffe4 <USB_SetTurnaroundTime+0x138>)
 800ff5e:	4293      	cmp	r3, r2
 800ff60:	d306      	bcc.n	800ff70 <USB_SetTurnaroundTime+0xc4>
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	4a20      	ldr	r2, [pc, #128]	; (800ffe8 <USB_SetTurnaroundTime+0x13c>)
 800ff66:	4293      	cmp	r3, r2
 800ff68:	d802      	bhi.n	800ff70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ff6a:	2308      	movs	r3, #8
 800ff6c:	617b      	str	r3, [r7, #20]
 800ff6e:	e015      	b.n	800ff9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	4a1d      	ldr	r2, [pc, #116]	; (800ffe8 <USB_SetTurnaroundTime+0x13c>)
 800ff74:	4293      	cmp	r3, r2
 800ff76:	d906      	bls.n	800ff86 <USB_SetTurnaroundTime+0xda>
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	4a1c      	ldr	r2, [pc, #112]	; (800ffec <USB_SetTurnaroundTime+0x140>)
 800ff7c:	4293      	cmp	r3, r2
 800ff7e:	d202      	bcs.n	800ff86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ff80:	2307      	movs	r3, #7
 800ff82:	617b      	str	r3, [r7, #20]
 800ff84:	e00a      	b.n	800ff9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ff86:	2306      	movs	r3, #6
 800ff88:	617b      	str	r3, [r7, #20]
 800ff8a:	e007      	b.n	800ff9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ff8c:	79fb      	ldrb	r3, [r7, #7]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d102      	bne.n	800ff98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ff92:	2309      	movs	r3, #9
 800ff94:	617b      	str	r3, [r7, #20]
 800ff96:	e001      	b.n	800ff9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ff98:	2309      	movs	r3, #9
 800ff9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	68db      	ldr	r3, [r3, #12]
 800ffa0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	68da      	ldr	r2, [r3, #12]
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	029b      	lsls	r3, r3, #10
 800ffb0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ffb4:	431a      	orrs	r2, r3
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ffba:	2300      	movs	r3, #0
}
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	371c      	adds	r7, #28
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc6:	4770      	bx	lr
 800ffc8:	00d8acbf 	.word	0x00d8acbf
 800ffcc:	00e4e1c0 	.word	0x00e4e1c0
 800ffd0:	00f42400 	.word	0x00f42400
 800ffd4:	01067380 	.word	0x01067380
 800ffd8:	011a499f 	.word	0x011a499f
 800ffdc:	01312cff 	.word	0x01312cff
 800ffe0:	014ca43f 	.word	0x014ca43f
 800ffe4:	016e3600 	.word	0x016e3600
 800ffe8:	01a6ab1f 	.word	0x01a6ab1f
 800ffec:	01e84800 	.word	0x01e84800

0800fff0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fff0:	b480      	push	{r7}
 800fff2:	b083      	sub	sp, #12
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	689b      	ldr	r3, [r3, #8]
 800fffc:	f043 0201 	orr.w	r2, r3, #1
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010004:	2300      	movs	r3, #0
}
 8010006:	4618      	mov	r0, r3
 8010008:	370c      	adds	r7, #12
 801000a:	46bd      	mov	sp, r7
 801000c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010010:	4770      	bx	lr

08010012 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010012:	b480      	push	{r7}
 8010014:	b083      	sub	sp, #12
 8010016:	af00      	add	r7, sp, #0
 8010018:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	689b      	ldr	r3, [r3, #8]
 801001e:	f023 0201 	bic.w	r2, r3, #1
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010026:	2300      	movs	r3, #0
}
 8010028:	4618      	mov	r0, r3
 801002a:	370c      	adds	r7, #12
 801002c:	46bd      	mov	sp, r7
 801002e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010032:	4770      	bx	lr

08010034 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b084      	sub	sp, #16
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
 801003c:	460b      	mov	r3, r1
 801003e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010040:	2300      	movs	r3, #0
 8010042:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	68db      	ldr	r3, [r3, #12]
 8010048:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010050:	78fb      	ldrb	r3, [r7, #3]
 8010052:	2b01      	cmp	r3, #1
 8010054:	d115      	bne.n	8010082 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	68db      	ldr	r3, [r3, #12]
 801005a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010062:	2001      	movs	r0, #1
 8010064:	f7f9 f96e 	bl	8009344 <HAL_Delay>
      ms++;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	3301      	adds	r3, #1
 801006c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801006e:	6878      	ldr	r0, [r7, #4]
 8010070:	f001 f972 	bl	8011358 <USB_GetMode>
 8010074:	4603      	mov	r3, r0
 8010076:	2b01      	cmp	r3, #1
 8010078:	d01e      	beq.n	80100b8 <USB_SetCurrentMode+0x84>
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	2b31      	cmp	r3, #49	; 0x31
 801007e:	d9f0      	bls.n	8010062 <USB_SetCurrentMode+0x2e>
 8010080:	e01a      	b.n	80100b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010082:	78fb      	ldrb	r3, [r7, #3]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d115      	bne.n	80100b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	68db      	ldr	r3, [r3, #12]
 801008c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010094:	2001      	movs	r0, #1
 8010096:	f7f9 f955 	bl	8009344 <HAL_Delay>
      ms++;
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	3301      	adds	r3, #1
 801009e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80100a0:	6878      	ldr	r0, [r7, #4]
 80100a2:	f001 f959 	bl	8011358 <USB_GetMode>
 80100a6:	4603      	mov	r3, r0
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d005      	beq.n	80100b8 <USB_SetCurrentMode+0x84>
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	2b31      	cmp	r3, #49	; 0x31
 80100b0:	d9f0      	bls.n	8010094 <USB_SetCurrentMode+0x60>
 80100b2:	e001      	b.n	80100b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80100b4:	2301      	movs	r3, #1
 80100b6:	e005      	b.n	80100c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	2b32      	cmp	r3, #50	; 0x32
 80100bc:	d101      	bne.n	80100c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80100be:	2301      	movs	r3, #1
 80100c0:	e000      	b.n	80100c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80100c2:	2300      	movs	r3, #0
}
 80100c4:	4618      	mov	r0, r3
 80100c6:	3710      	adds	r7, #16
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}

080100cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80100cc:	b084      	sub	sp, #16
 80100ce:	b580      	push	{r7, lr}
 80100d0:	b086      	sub	sp, #24
 80100d2:	af00      	add	r7, sp, #0
 80100d4:	6078      	str	r0, [r7, #4]
 80100d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80100da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80100de:	2300      	movs	r3, #0
 80100e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80100e6:	2300      	movs	r3, #0
 80100e8:	613b      	str	r3, [r7, #16]
 80100ea:	e009      	b.n	8010100 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80100ec:	687a      	ldr	r2, [r7, #4]
 80100ee:	693b      	ldr	r3, [r7, #16]
 80100f0:	3340      	adds	r3, #64	; 0x40
 80100f2:	009b      	lsls	r3, r3, #2
 80100f4:	4413      	add	r3, r2
 80100f6:	2200      	movs	r2, #0
 80100f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80100fa:	693b      	ldr	r3, [r7, #16]
 80100fc:	3301      	adds	r3, #1
 80100fe:	613b      	str	r3, [r7, #16]
 8010100:	693b      	ldr	r3, [r7, #16]
 8010102:	2b0e      	cmp	r3, #14
 8010104:	d9f2      	bls.n	80100ec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010108:	2b00      	cmp	r3, #0
 801010a:	d11c      	bne.n	8010146 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010112:	685b      	ldr	r3, [r3, #4]
 8010114:	68fa      	ldr	r2, [r7, #12]
 8010116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801011a:	f043 0302 	orr.w	r3, r3, #2
 801011e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010124:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010130:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801013c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	639a      	str	r2, [r3, #56]	; 0x38
 8010144:	e00b      	b.n	801015e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801014a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010156:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010164:	461a      	mov	r2, r3
 8010166:	2300      	movs	r3, #0
 8010168:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010170:	4619      	mov	r1, r3
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010178:	461a      	mov	r2, r3
 801017a:	680b      	ldr	r3, [r1, #0]
 801017c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801017e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010180:	2b01      	cmp	r3, #1
 8010182:	d10c      	bne.n	801019e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010186:	2b00      	cmp	r3, #0
 8010188:	d104      	bne.n	8010194 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801018a:	2100      	movs	r1, #0
 801018c:	6878      	ldr	r0, [r7, #4]
 801018e:	f000 f945 	bl	801041c <USB_SetDevSpeed>
 8010192:	e008      	b.n	80101a6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010194:	2101      	movs	r1, #1
 8010196:	6878      	ldr	r0, [r7, #4]
 8010198:	f000 f940 	bl	801041c <USB_SetDevSpeed>
 801019c:	e003      	b.n	80101a6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801019e:	2103      	movs	r1, #3
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	f000 f93b 	bl	801041c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80101a6:	2110      	movs	r1, #16
 80101a8:	6878      	ldr	r0, [r7, #4]
 80101aa:	f000 f8f3 	bl	8010394 <USB_FlushTxFifo>
 80101ae:	4603      	mov	r3, r0
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d001      	beq.n	80101b8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80101b4:	2301      	movs	r3, #1
 80101b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f000 f90f 	bl	80103dc <USB_FlushRxFifo>
 80101be:	4603      	mov	r3, r0
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d001      	beq.n	80101c8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80101c4:	2301      	movs	r3, #1
 80101c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101ce:	461a      	mov	r2, r3
 80101d0:	2300      	movs	r3, #0
 80101d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101da:	461a      	mov	r2, r3
 80101dc:	2300      	movs	r3, #0
 80101de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101e6:	461a      	mov	r2, r3
 80101e8:	2300      	movs	r3, #0
 80101ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80101ec:	2300      	movs	r3, #0
 80101ee:	613b      	str	r3, [r7, #16]
 80101f0:	e043      	b.n	801027a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80101f2:	693b      	ldr	r3, [r7, #16]
 80101f4:	015a      	lsls	r2, r3, #5
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	4413      	add	r3, r2
 80101fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010204:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010208:	d118      	bne.n	801023c <USB_DevInit+0x170>
    {
      if (i == 0U)
 801020a:	693b      	ldr	r3, [r7, #16]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d10a      	bne.n	8010226 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010210:	693b      	ldr	r3, [r7, #16]
 8010212:	015a      	lsls	r2, r3, #5
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	4413      	add	r3, r2
 8010218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801021c:	461a      	mov	r2, r3
 801021e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010222:	6013      	str	r3, [r2, #0]
 8010224:	e013      	b.n	801024e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010226:	693b      	ldr	r3, [r7, #16]
 8010228:	015a      	lsls	r2, r3, #5
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	4413      	add	r3, r2
 801022e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010232:	461a      	mov	r2, r3
 8010234:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010238:	6013      	str	r3, [r2, #0]
 801023a:	e008      	b.n	801024e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801023c:	693b      	ldr	r3, [r7, #16]
 801023e:	015a      	lsls	r2, r3, #5
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	4413      	add	r3, r2
 8010244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010248:	461a      	mov	r2, r3
 801024a:	2300      	movs	r3, #0
 801024c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801024e:	693b      	ldr	r3, [r7, #16]
 8010250:	015a      	lsls	r2, r3, #5
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	4413      	add	r3, r2
 8010256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801025a:	461a      	mov	r2, r3
 801025c:	2300      	movs	r3, #0
 801025e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010260:	693b      	ldr	r3, [r7, #16]
 8010262:	015a      	lsls	r2, r3, #5
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	4413      	add	r3, r2
 8010268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801026c:	461a      	mov	r2, r3
 801026e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010272:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010274:	693b      	ldr	r3, [r7, #16]
 8010276:	3301      	adds	r3, #1
 8010278:	613b      	str	r3, [r7, #16]
 801027a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801027c:	693a      	ldr	r2, [r7, #16]
 801027e:	429a      	cmp	r2, r3
 8010280:	d3b7      	bcc.n	80101f2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010282:	2300      	movs	r3, #0
 8010284:	613b      	str	r3, [r7, #16]
 8010286:	e043      	b.n	8010310 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010288:	693b      	ldr	r3, [r7, #16]
 801028a:	015a      	lsls	r2, r3, #5
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	4413      	add	r3, r2
 8010290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801029a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801029e:	d118      	bne.n	80102d2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80102a0:	693b      	ldr	r3, [r7, #16]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d10a      	bne.n	80102bc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80102a6:	693b      	ldr	r3, [r7, #16]
 80102a8:	015a      	lsls	r2, r3, #5
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	4413      	add	r3, r2
 80102ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102b2:	461a      	mov	r2, r3
 80102b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80102b8:	6013      	str	r3, [r2, #0]
 80102ba:	e013      	b.n	80102e4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80102bc:	693b      	ldr	r3, [r7, #16]
 80102be:	015a      	lsls	r2, r3, #5
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	4413      	add	r3, r2
 80102c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102c8:	461a      	mov	r2, r3
 80102ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80102ce:	6013      	str	r3, [r2, #0]
 80102d0:	e008      	b.n	80102e4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80102d2:	693b      	ldr	r3, [r7, #16]
 80102d4:	015a      	lsls	r2, r3, #5
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	4413      	add	r3, r2
 80102da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102de:	461a      	mov	r2, r3
 80102e0:	2300      	movs	r3, #0
 80102e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80102e4:	693b      	ldr	r3, [r7, #16]
 80102e6:	015a      	lsls	r2, r3, #5
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	4413      	add	r3, r2
 80102ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102f0:	461a      	mov	r2, r3
 80102f2:	2300      	movs	r3, #0
 80102f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80102f6:	693b      	ldr	r3, [r7, #16]
 80102f8:	015a      	lsls	r2, r3, #5
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	4413      	add	r3, r2
 80102fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010302:	461a      	mov	r2, r3
 8010304:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010308:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801030a:	693b      	ldr	r3, [r7, #16]
 801030c:	3301      	adds	r3, #1
 801030e:	613b      	str	r3, [r7, #16]
 8010310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010312:	693a      	ldr	r2, [r7, #16]
 8010314:	429a      	cmp	r2, r3
 8010316:	d3b7      	bcc.n	8010288 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801031e:	691b      	ldr	r3, [r3, #16]
 8010320:	68fa      	ldr	r2, [r7, #12]
 8010322:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010326:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801032a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2200      	movs	r2, #0
 8010330:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8010338:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801033a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801033c:	2b00      	cmp	r3, #0
 801033e:	d105      	bne.n	801034c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	699b      	ldr	r3, [r3, #24]
 8010344:	f043 0210 	orr.w	r2, r3, #16
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	699a      	ldr	r2, [r3, #24]
 8010350:	4b0f      	ldr	r3, [pc, #60]	; (8010390 <USB_DevInit+0x2c4>)
 8010352:	4313      	orrs	r3, r2
 8010354:	687a      	ldr	r2, [r7, #4]
 8010356:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801035a:	2b00      	cmp	r3, #0
 801035c:	d005      	beq.n	801036a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	699b      	ldr	r3, [r3, #24]
 8010362:	f043 0208 	orr.w	r2, r3, #8
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801036a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801036c:	2b01      	cmp	r3, #1
 801036e:	d107      	bne.n	8010380 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	699b      	ldr	r3, [r3, #24]
 8010374:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010378:	f043 0304 	orr.w	r3, r3, #4
 801037c:	687a      	ldr	r2, [r7, #4]
 801037e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010380:	7dfb      	ldrb	r3, [r7, #23]
}
 8010382:	4618      	mov	r0, r3
 8010384:	3718      	adds	r7, #24
 8010386:	46bd      	mov	sp, r7
 8010388:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801038c:	b004      	add	sp, #16
 801038e:	4770      	bx	lr
 8010390:	803c3800 	.word	0x803c3800

08010394 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010394:	b480      	push	{r7}
 8010396:	b085      	sub	sp, #20
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801039e:	2300      	movs	r3, #0
 80103a0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	019b      	lsls	r3, r3, #6
 80103a6:	f043 0220 	orr.w	r2, r3, #32
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	3301      	adds	r3, #1
 80103b2:	60fb      	str	r3, [r7, #12]
 80103b4:	4a08      	ldr	r2, [pc, #32]	; (80103d8 <USB_FlushTxFifo+0x44>)
 80103b6:	4293      	cmp	r3, r2
 80103b8:	d901      	bls.n	80103be <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80103ba:	2303      	movs	r3, #3
 80103bc:	e006      	b.n	80103cc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	691b      	ldr	r3, [r3, #16]
 80103c2:	f003 0320 	and.w	r3, r3, #32
 80103c6:	2b20      	cmp	r3, #32
 80103c8:	d0f1      	beq.n	80103ae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80103ca:	2300      	movs	r3, #0
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	3714      	adds	r7, #20
 80103d0:	46bd      	mov	sp, r7
 80103d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d6:	4770      	bx	lr
 80103d8:	00030d40 	.word	0x00030d40

080103dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80103dc:	b480      	push	{r7}
 80103de:	b085      	sub	sp, #20
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80103e4:	2300      	movs	r3, #0
 80103e6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	2210      	movs	r2, #16
 80103ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	3301      	adds	r3, #1
 80103f2:	60fb      	str	r3, [r7, #12]
 80103f4:	4a08      	ldr	r2, [pc, #32]	; (8010418 <USB_FlushRxFifo+0x3c>)
 80103f6:	4293      	cmp	r3, r2
 80103f8:	d901      	bls.n	80103fe <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80103fa:	2303      	movs	r3, #3
 80103fc:	e006      	b.n	801040c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	691b      	ldr	r3, [r3, #16]
 8010402:	f003 0310 	and.w	r3, r3, #16
 8010406:	2b10      	cmp	r3, #16
 8010408:	d0f1      	beq.n	80103ee <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801040a:	2300      	movs	r3, #0
}
 801040c:	4618      	mov	r0, r3
 801040e:	3714      	adds	r7, #20
 8010410:	46bd      	mov	sp, r7
 8010412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010416:	4770      	bx	lr
 8010418:	00030d40 	.word	0x00030d40

0801041c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801041c:	b480      	push	{r7}
 801041e:	b085      	sub	sp, #20
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	460b      	mov	r3, r1
 8010426:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010432:	681a      	ldr	r2, [r3, #0]
 8010434:	78fb      	ldrb	r3, [r7, #3]
 8010436:	68f9      	ldr	r1, [r7, #12]
 8010438:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801043c:	4313      	orrs	r3, r2
 801043e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010440:	2300      	movs	r3, #0
}
 8010442:	4618      	mov	r0, r3
 8010444:	3714      	adds	r7, #20
 8010446:	46bd      	mov	sp, r7
 8010448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044c:	4770      	bx	lr

0801044e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801044e:	b480      	push	{r7}
 8010450:	b087      	sub	sp, #28
 8010452:	af00      	add	r7, sp, #0
 8010454:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801045a:	693b      	ldr	r3, [r7, #16]
 801045c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010460:	689b      	ldr	r3, [r3, #8]
 8010462:	f003 0306 	and.w	r3, r3, #6
 8010466:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d102      	bne.n	8010474 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801046e:	2300      	movs	r3, #0
 8010470:	75fb      	strb	r3, [r7, #23]
 8010472:	e00a      	b.n	801048a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	2b02      	cmp	r3, #2
 8010478:	d002      	beq.n	8010480 <USB_GetDevSpeed+0x32>
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	2b06      	cmp	r3, #6
 801047e:	d102      	bne.n	8010486 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8010480:	2302      	movs	r3, #2
 8010482:	75fb      	strb	r3, [r7, #23]
 8010484:	e001      	b.n	801048a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8010486:	230f      	movs	r3, #15
 8010488:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801048a:	7dfb      	ldrb	r3, [r7, #23]
}
 801048c:	4618      	mov	r0, r3
 801048e:	371c      	adds	r7, #28
 8010490:	46bd      	mov	sp, r7
 8010492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010496:	4770      	bx	lr

08010498 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010498:	b480      	push	{r7}
 801049a:	b085      	sub	sp, #20
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
 80104a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80104a6:	683b      	ldr	r3, [r7, #0]
 80104a8:	781b      	ldrb	r3, [r3, #0]
 80104aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	785b      	ldrb	r3, [r3, #1]
 80104b0:	2b01      	cmp	r3, #1
 80104b2:	d13a      	bne.n	801052a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104ba:	69da      	ldr	r2, [r3, #28]
 80104bc:	683b      	ldr	r3, [r7, #0]
 80104be:	781b      	ldrb	r3, [r3, #0]
 80104c0:	f003 030f 	and.w	r3, r3, #15
 80104c4:	2101      	movs	r1, #1
 80104c6:	fa01 f303 	lsl.w	r3, r1, r3
 80104ca:	b29b      	uxth	r3, r3
 80104cc:	68f9      	ldr	r1, [r7, #12]
 80104ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80104d2:	4313      	orrs	r3, r2
 80104d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	015a      	lsls	r2, r3, #5
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	4413      	add	r3, r2
 80104de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d155      	bne.n	8010598 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	015a      	lsls	r2, r3, #5
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	4413      	add	r3, r2
 80104f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104f8:	681a      	ldr	r2, [r3, #0]
 80104fa:	683b      	ldr	r3, [r7, #0]
 80104fc:	689b      	ldr	r3, [r3, #8]
 80104fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010502:	683b      	ldr	r3, [r7, #0]
 8010504:	78db      	ldrb	r3, [r3, #3]
 8010506:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010508:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801050a:	68bb      	ldr	r3, [r7, #8]
 801050c:	059b      	lsls	r3, r3, #22
 801050e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010510:	4313      	orrs	r3, r2
 8010512:	68ba      	ldr	r2, [r7, #8]
 8010514:	0151      	lsls	r1, r2, #5
 8010516:	68fa      	ldr	r2, [r7, #12]
 8010518:	440a      	add	r2, r1
 801051a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801051e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010526:	6013      	str	r3, [r2, #0]
 8010528:	e036      	b.n	8010598 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010530:	69da      	ldr	r2, [r3, #28]
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	781b      	ldrb	r3, [r3, #0]
 8010536:	f003 030f 	and.w	r3, r3, #15
 801053a:	2101      	movs	r1, #1
 801053c:	fa01 f303 	lsl.w	r3, r1, r3
 8010540:	041b      	lsls	r3, r3, #16
 8010542:	68f9      	ldr	r1, [r7, #12]
 8010544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010548:	4313      	orrs	r3, r2
 801054a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801054c:	68bb      	ldr	r3, [r7, #8]
 801054e:	015a      	lsls	r2, r3, #5
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	4413      	add	r3, r2
 8010554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801055e:	2b00      	cmp	r3, #0
 8010560:	d11a      	bne.n	8010598 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010562:	68bb      	ldr	r3, [r7, #8]
 8010564:	015a      	lsls	r2, r3, #5
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	4413      	add	r3, r2
 801056a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801056e:	681a      	ldr	r2, [r3, #0]
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	689b      	ldr	r3, [r3, #8]
 8010574:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	78db      	ldrb	r3, [r3, #3]
 801057c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801057e:	430b      	orrs	r3, r1
 8010580:	4313      	orrs	r3, r2
 8010582:	68ba      	ldr	r2, [r7, #8]
 8010584:	0151      	lsls	r1, r2, #5
 8010586:	68fa      	ldr	r2, [r7, #12]
 8010588:	440a      	add	r2, r1
 801058a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010596:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010598:	2300      	movs	r3, #0
}
 801059a:	4618      	mov	r0, r3
 801059c:	3714      	adds	r7, #20
 801059e:	46bd      	mov	sp, r7
 80105a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a4:	4770      	bx	lr
	...

080105a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80105a8:	b480      	push	{r7}
 80105aa:	b085      	sub	sp, #20
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
 80105b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	781b      	ldrb	r3, [r3, #0]
 80105ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	785b      	ldrb	r3, [r3, #1]
 80105c0:	2b01      	cmp	r3, #1
 80105c2:	d161      	bne.n	8010688 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	015a      	lsls	r2, r3, #5
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	4413      	add	r3, r2
 80105cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80105d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80105da:	d11f      	bne.n	801061c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	015a      	lsls	r2, r3, #5
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	4413      	add	r3, r2
 80105e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	68ba      	ldr	r2, [r7, #8]
 80105ec:	0151      	lsls	r1, r2, #5
 80105ee:	68fa      	ldr	r2, [r7, #12]
 80105f0:	440a      	add	r2, r1
 80105f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80105fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80105fc:	68bb      	ldr	r3, [r7, #8]
 80105fe:	015a      	lsls	r2, r3, #5
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	4413      	add	r3, r2
 8010604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	68ba      	ldr	r2, [r7, #8]
 801060c:	0151      	lsls	r1, r2, #5
 801060e:	68fa      	ldr	r2, [r7, #12]
 8010610:	440a      	add	r2, r1
 8010612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010616:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801061a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010622:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	781b      	ldrb	r3, [r3, #0]
 8010628:	f003 030f 	and.w	r3, r3, #15
 801062c:	2101      	movs	r1, #1
 801062e:	fa01 f303 	lsl.w	r3, r1, r3
 8010632:	b29b      	uxth	r3, r3
 8010634:	43db      	mvns	r3, r3
 8010636:	68f9      	ldr	r1, [r7, #12]
 8010638:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801063c:	4013      	ands	r3, r2
 801063e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010646:	69da      	ldr	r2, [r3, #28]
 8010648:	683b      	ldr	r3, [r7, #0]
 801064a:	781b      	ldrb	r3, [r3, #0]
 801064c:	f003 030f 	and.w	r3, r3, #15
 8010650:	2101      	movs	r1, #1
 8010652:	fa01 f303 	lsl.w	r3, r1, r3
 8010656:	b29b      	uxth	r3, r3
 8010658:	43db      	mvns	r3, r3
 801065a:	68f9      	ldr	r1, [r7, #12]
 801065c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010660:	4013      	ands	r3, r2
 8010662:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	015a      	lsls	r2, r3, #5
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	4413      	add	r3, r2
 801066c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010670:	681a      	ldr	r2, [r3, #0]
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	0159      	lsls	r1, r3, #5
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	440b      	add	r3, r1
 801067a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801067e:	4619      	mov	r1, r3
 8010680:	4b35      	ldr	r3, [pc, #212]	; (8010758 <USB_DeactivateEndpoint+0x1b0>)
 8010682:	4013      	ands	r3, r2
 8010684:	600b      	str	r3, [r1, #0]
 8010686:	e060      	b.n	801074a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010688:	68bb      	ldr	r3, [r7, #8]
 801068a:	015a      	lsls	r2, r3, #5
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	4413      	add	r3, r2
 8010690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801069a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801069e:	d11f      	bne.n	80106e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	015a      	lsls	r2, r3, #5
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	4413      	add	r3, r2
 80106a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	68ba      	ldr	r2, [r7, #8]
 80106b0:	0151      	lsls	r1, r2, #5
 80106b2:	68fa      	ldr	r2, [r7, #12]
 80106b4:	440a      	add	r2, r1
 80106b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80106be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	015a      	lsls	r2, r3, #5
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	4413      	add	r3, r2
 80106c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	68ba      	ldr	r2, [r7, #8]
 80106d0:	0151      	lsls	r1, r2, #5
 80106d2:	68fa      	ldr	r2, [r7, #12]
 80106d4:	440a      	add	r2, r1
 80106d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80106de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	781b      	ldrb	r3, [r3, #0]
 80106ec:	f003 030f 	and.w	r3, r3, #15
 80106f0:	2101      	movs	r1, #1
 80106f2:	fa01 f303 	lsl.w	r3, r1, r3
 80106f6:	041b      	lsls	r3, r3, #16
 80106f8:	43db      	mvns	r3, r3
 80106fa:	68f9      	ldr	r1, [r7, #12]
 80106fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010700:	4013      	ands	r3, r2
 8010702:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801070a:	69da      	ldr	r2, [r3, #28]
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	781b      	ldrb	r3, [r3, #0]
 8010710:	f003 030f 	and.w	r3, r3, #15
 8010714:	2101      	movs	r1, #1
 8010716:	fa01 f303 	lsl.w	r3, r1, r3
 801071a:	041b      	lsls	r3, r3, #16
 801071c:	43db      	mvns	r3, r3
 801071e:	68f9      	ldr	r1, [r7, #12]
 8010720:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010724:	4013      	ands	r3, r2
 8010726:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010728:	68bb      	ldr	r3, [r7, #8]
 801072a:	015a      	lsls	r2, r3, #5
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	4413      	add	r3, r2
 8010730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010734:	681a      	ldr	r2, [r3, #0]
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	0159      	lsls	r1, r3, #5
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	440b      	add	r3, r1
 801073e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010742:	4619      	mov	r1, r3
 8010744:	4b05      	ldr	r3, [pc, #20]	; (801075c <USB_DeactivateEndpoint+0x1b4>)
 8010746:	4013      	ands	r3, r2
 8010748:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801074a:	2300      	movs	r3, #0
}
 801074c:	4618      	mov	r0, r3
 801074e:	3714      	adds	r7, #20
 8010750:	46bd      	mov	sp, r7
 8010752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010756:	4770      	bx	lr
 8010758:	ec337800 	.word	0xec337800
 801075c:	eff37800 	.word	0xeff37800

08010760 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b08a      	sub	sp, #40	; 0x28
 8010764:	af02      	add	r7, sp, #8
 8010766:	60f8      	str	r0, [r7, #12]
 8010768:	60b9      	str	r1, [r7, #8]
 801076a:	4613      	mov	r3, r2
 801076c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8010772:	68bb      	ldr	r3, [r7, #8]
 8010774:	781b      	ldrb	r3, [r3, #0]
 8010776:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010778:	68bb      	ldr	r3, [r7, #8]
 801077a:	785b      	ldrb	r3, [r3, #1]
 801077c:	2b01      	cmp	r3, #1
 801077e:	f040 815c 	bne.w	8010a3a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010782:	68bb      	ldr	r3, [r7, #8]
 8010784:	695b      	ldr	r3, [r3, #20]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d132      	bne.n	80107f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801078a:	69bb      	ldr	r3, [r7, #24]
 801078c:	015a      	lsls	r2, r3, #5
 801078e:	69fb      	ldr	r3, [r7, #28]
 8010790:	4413      	add	r3, r2
 8010792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010796:	691b      	ldr	r3, [r3, #16]
 8010798:	69ba      	ldr	r2, [r7, #24]
 801079a:	0151      	lsls	r1, r2, #5
 801079c:	69fa      	ldr	r2, [r7, #28]
 801079e:	440a      	add	r2, r1
 80107a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80107a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80107ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80107ae:	69bb      	ldr	r3, [r7, #24]
 80107b0:	015a      	lsls	r2, r3, #5
 80107b2:	69fb      	ldr	r3, [r7, #28]
 80107b4:	4413      	add	r3, r2
 80107b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107ba:	691b      	ldr	r3, [r3, #16]
 80107bc:	69ba      	ldr	r2, [r7, #24]
 80107be:	0151      	lsls	r1, r2, #5
 80107c0:	69fa      	ldr	r2, [r7, #28]
 80107c2:	440a      	add	r2, r1
 80107c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80107cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80107ce:	69bb      	ldr	r3, [r7, #24]
 80107d0:	015a      	lsls	r2, r3, #5
 80107d2:	69fb      	ldr	r3, [r7, #28]
 80107d4:	4413      	add	r3, r2
 80107d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107da:	691b      	ldr	r3, [r3, #16]
 80107dc:	69ba      	ldr	r2, [r7, #24]
 80107de:	0151      	lsls	r1, r2, #5
 80107e0:	69fa      	ldr	r2, [r7, #28]
 80107e2:	440a      	add	r2, r1
 80107e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107e8:	0cdb      	lsrs	r3, r3, #19
 80107ea:	04db      	lsls	r3, r3, #19
 80107ec:	6113      	str	r3, [r2, #16]
 80107ee:	e074      	b.n	80108da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80107f0:	69bb      	ldr	r3, [r7, #24]
 80107f2:	015a      	lsls	r2, r3, #5
 80107f4:	69fb      	ldr	r3, [r7, #28]
 80107f6:	4413      	add	r3, r2
 80107f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107fc:	691b      	ldr	r3, [r3, #16]
 80107fe:	69ba      	ldr	r2, [r7, #24]
 8010800:	0151      	lsls	r1, r2, #5
 8010802:	69fa      	ldr	r2, [r7, #28]
 8010804:	440a      	add	r2, r1
 8010806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801080a:	0cdb      	lsrs	r3, r3, #19
 801080c:	04db      	lsls	r3, r3, #19
 801080e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010810:	69bb      	ldr	r3, [r7, #24]
 8010812:	015a      	lsls	r2, r3, #5
 8010814:	69fb      	ldr	r3, [r7, #28]
 8010816:	4413      	add	r3, r2
 8010818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801081c:	691b      	ldr	r3, [r3, #16]
 801081e:	69ba      	ldr	r2, [r7, #24]
 8010820:	0151      	lsls	r1, r2, #5
 8010822:	69fa      	ldr	r2, [r7, #28]
 8010824:	440a      	add	r2, r1
 8010826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801082a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801082e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010832:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010834:	69bb      	ldr	r3, [r7, #24]
 8010836:	015a      	lsls	r2, r3, #5
 8010838:	69fb      	ldr	r3, [r7, #28]
 801083a:	4413      	add	r3, r2
 801083c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010840:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	6959      	ldr	r1, [r3, #20]
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	689b      	ldr	r3, [r3, #8]
 801084a:	440b      	add	r3, r1
 801084c:	1e59      	subs	r1, r3, #1
 801084e:	68bb      	ldr	r3, [r7, #8]
 8010850:	689b      	ldr	r3, [r3, #8]
 8010852:	fbb1 f3f3 	udiv	r3, r1, r3
 8010856:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010858:	4b9d      	ldr	r3, [pc, #628]	; (8010ad0 <USB_EPStartXfer+0x370>)
 801085a:	400b      	ands	r3, r1
 801085c:	69b9      	ldr	r1, [r7, #24]
 801085e:	0148      	lsls	r0, r1, #5
 8010860:	69f9      	ldr	r1, [r7, #28]
 8010862:	4401      	add	r1, r0
 8010864:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010868:	4313      	orrs	r3, r2
 801086a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801086c:	69bb      	ldr	r3, [r7, #24]
 801086e:	015a      	lsls	r2, r3, #5
 8010870:	69fb      	ldr	r3, [r7, #28]
 8010872:	4413      	add	r3, r2
 8010874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010878:	691a      	ldr	r2, [r3, #16]
 801087a:	68bb      	ldr	r3, [r7, #8]
 801087c:	695b      	ldr	r3, [r3, #20]
 801087e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010882:	69b9      	ldr	r1, [r7, #24]
 8010884:	0148      	lsls	r0, r1, #5
 8010886:	69f9      	ldr	r1, [r7, #28]
 8010888:	4401      	add	r1, r0
 801088a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801088e:	4313      	orrs	r3, r2
 8010890:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8010892:	68bb      	ldr	r3, [r7, #8]
 8010894:	78db      	ldrb	r3, [r3, #3]
 8010896:	2b01      	cmp	r3, #1
 8010898:	d11f      	bne.n	80108da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801089a:	69bb      	ldr	r3, [r7, #24]
 801089c:	015a      	lsls	r2, r3, #5
 801089e:	69fb      	ldr	r3, [r7, #28]
 80108a0:	4413      	add	r3, r2
 80108a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108a6:	691b      	ldr	r3, [r3, #16]
 80108a8:	69ba      	ldr	r2, [r7, #24]
 80108aa:	0151      	lsls	r1, r2, #5
 80108ac:	69fa      	ldr	r2, [r7, #28]
 80108ae:	440a      	add	r2, r1
 80108b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80108b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80108ba:	69bb      	ldr	r3, [r7, #24]
 80108bc:	015a      	lsls	r2, r3, #5
 80108be:	69fb      	ldr	r3, [r7, #28]
 80108c0:	4413      	add	r3, r2
 80108c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108c6:	691b      	ldr	r3, [r3, #16]
 80108c8:	69ba      	ldr	r2, [r7, #24]
 80108ca:	0151      	lsls	r1, r2, #5
 80108cc:	69fa      	ldr	r2, [r7, #28]
 80108ce:	440a      	add	r2, r1
 80108d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80108d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80108da:	79fb      	ldrb	r3, [r7, #7]
 80108dc:	2b01      	cmp	r3, #1
 80108de:	d14b      	bne.n	8010978 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	691b      	ldr	r3, [r3, #16]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d009      	beq.n	80108fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80108e8:	69bb      	ldr	r3, [r7, #24]
 80108ea:	015a      	lsls	r2, r3, #5
 80108ec:	69fb      	ldr	r3, [r7, #28]
 80108ee:	4413      	add	r3, r2
 80108f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108f4:	461a      	mov	r2, r3
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	691b      	ldr	r3, [r3, #16]
 80108fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	78db      	ldrb	r3, [r3, #3]
 8010900:	2b01      	cmp	r3, #1
 8010902:	d128      	bne.n	8010956 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010904:	69fb      	ldr	r3, [r7, #28]
 8010906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801090a:	689b      	ldr	r3, [r3, #8]
 801090c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010910:	2b00      	cmp	r3, #0
 8010912:	d110      	bne.n	8010936 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010914:	69bb      	ldr	r3, [r7, #24]
 8010916:	015a      	lsls	r2, r3, #5
 8010918:	69fb      	ldr	r3, [r7, #28]
 801091a:	4413      	add	r3, r2
 801091c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	69ba      	ldr	r2, [r7, #24]
 8010924:	0151      	lsls	r1, r2, #5
 8010926:	69fa      	ldr	r2, [r7, #28]
 8010928:	440a      	add	r2, r1
 801092a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801092e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010932:	6013      	str	r3, [r2, #0]
 8010934:	e00f      	b.n	8010956 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010936:	69bb      	ldr	r3, [r7, #24]
 8010938:	015a      	lsls	r2, r3, #5
 801093a:	69fb      	ldr	r3, [r7, #28]
 801093c:	4413      	add	r3, r2
 801093e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	69ba      	ldr	r2, [r7, #24]
 8010946:	0151      	lsls	r1, r2, #5
 8010948:	69fa      	ldr	r2, [r7, #28]
 801094a:	440a      	add	r2, r1
 801094c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010954:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010956:	69bb      	ldr	r3, [r7, #24]
 8010958:	015a      	lsls	r2, r3, #5
 801095a:	69fb      	ldr	r3, [r7, #28]
 801095c:	4413      	add	r3, r2
 801095e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	69ba      	ldr	r2, [r7, #24]
 8010966:	0151      	lsls	r1, r2, #5
 8010968:	69fa      	ldr	r2, [r7, #28]
 801096a:	440a      	add	r2, r1
 801096c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010970:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010974:	6013      	str	r3, [r2, #0]
 8010976:	e12f      	b.n	8010bd8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010978:	69bb      	ldr	r3, [r7, #24]
 801097a:	015a      	lsls	r2, r3, #5
 801097c:	69fb      	ldr	r3, [r7, #28]
 801097e:	4413      	add	r3, r2
 8010980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	69ba      	ldr	r2, [r7, #24]
 8010988:	0151      	lsls	r1, r2, #5
 801098a:	69fa      	ldr	r2, [r7, #28]
 801098c:	440a      	add	r2, r1
 801098e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010992:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010996:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	78db      	ldrb	r3, [r3, #3]
 801099c:	2b01      	cmp	r3, #1
 801099e:	d015      	beq.n	80109cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80109a0:	68bb      	ldr	r3, [r7, #8]
 80109a2:	695b      	ldr	r3, [r3, #20]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	f000 8117 	beq.w	8010bd8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80109aa:	69fb      	ldr	r3, [r7, #28]
 80109ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	781b      	ldrb	r3, [r3, #0]
 80109b6:	f003 030f 	and.w	r3, r3, #15
 80109ba:	2101      	movs	r1, #1
 80109bc:	fa01 f303 	lsl.w	r3, r1, r3
 80109c0:	69f9      	ldr	r1, [r7, #28]
 80109c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80109c6:	4313      	orrs	r3, r2
 80109c8:	634b      	str	r3, [r1, #52]	; 0x34
 80109ca:	e105      	b.n	8010bd8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80109cc:	69fb      	ldr	r3, [r7, #28]
 80109ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109d2:	689b      	ldr	r3, [r3, #8]
 80109d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d110      	bne.n	80109fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80109dc:	69bb      	ldr	r3, [r7, #24]
 80109de:	015a      	lsls	r2, r3, #5
 80109e0:	69fb      	ldr	r3, [r7, #28]
 80109e2:	4413      	add	r3, r2
 80109e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	69ba      	ldr	r2, [r7, #24]
 80109ec:	0151      	lsls	r1, r2, #5
 80109ee:	69fa      	ldr	r2, [r7, #28]
 80109f0:	440a      	add	r2, r1
 80109f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80109fa:	6013      	str	r3, [r2, #0]
 80109fc:	e00f      	b.n	8010a1e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80109fe:	69bb      	ldr	r3, [r7, #24]
 8010a00:	015a      	lsls	r2, r3, #5
 8010a02:	69fb      	ldr	r3, [r7, #28]
 8010a04:	4413      	add	r3, r2
 8010a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	69ba      	ldr	r2, [r7, #24]
 8010a0e:	0151      	lsls	r1, r2, #5
 8010a10:	69fa      	ldr	r2, [r7, #28]
 8010a12:	440a      	add	r2, r1
 8010a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010a1c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010a1e:	68bb      	ldr	r3, [r7, #8]
 8010a20:	68d9      	ldr	r1, [r3, #12]
 8010a22:	68bb      	ldr	r3, [r7, #8]
 8010a24:	781a      	ldrb	r2, [r3, #0]
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	695b      	ldr	r3, [r3, #20]
 8010a2a:	b298      	uxth	r0, r3
 8010a2c:	79fb      	ldrb	r3, [r7, #7]
 8010a2e:	9300      	str	r3, [sp, #0]
 8010a30:	4603      	mov	r3, r0
 8010a32:	68f8      	ldr	r0, [r7, #12]
 8010a34:	f000 fa2b 	bl	8010e8e <USB_WritePacket>
 8010a38:	e0ce      	b.n	8010bd8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010a3a:	69bb      	ldr	r3, [r7, #24]
 8010a3c:	015a      	lsls	r2, r3, #5
 8010a3e:	69fb      	ldr	r3, [r7, #28]
 8010a40:	4413      	add	r3, r2
 8010a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a46:	691b      	ldr	r3, [r3, #16]
 8010a48:	69ba      	ldr	r2, [r7, #24]
 8010a4a:	0151      	lsls	r1, r2, #5
 8010a4c:	69fa      	ldr	r2, [r7, #28]
 8010a4e:	440a      	add	r2, r1
 8010a50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a54:	0cdb      	lsrs	r3, r3, #19
 8010a56:	04db      	lsls	r3, r3, #19
 8010a58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010a5a:	69bb      	ldr	r3, [r7, #24]
 8010a5c:	015a      	lsls	r2, r3, #5
 8010a5e:	69fb      	ldr	r3, [r7, #28]
 8010a60:	4413      	add	r3, r2
 8010a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a66:	691b      	ldr	r3, [r3, #16]
 8010a68:	69ba      	ldr	r2, [r7, #24]
 8010a6a:	0151      	lsls	r1, r2, #5
 8010a6c:	69fa      	ldr	r2, [r7, #28]
 8010a6e:	440a      	add	r2, r1
 8010a70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010a78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010a7c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8010a7e:	68bb      	ldr	r3, [r7, #8]
 8010a80:	695b      	ldr	r3, [r3, #20]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d126      	bne.n	8010ad4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010a86:	69bb      	ldr	r3, [r7, #24]
 8010a88:	015a      	lsls	r2, r3, #5
 8010a8a:	69fb      	ldr	r3, [r7, #28]
 8010a8c:	4413      	add	r3, r2
 8010a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a92:	691a      	ldr	r2, [r3, #16]
 8010a94:	68bb      	ldr	r3, [r7, #8]
 8010a96:	689b      	ldr	r3, [r3, #8]
 8010a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010a9c:	69b9      	ldr	r1, [r7, #24]
 8010a9e:	0148      	lsls	r0, r1, #5
 8010aa0:	69f9      	ldr	r1, [r7, #28]
 8010aa2:	4401      	add	r1, r0
 8010aa4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010aa8:	4313      	orrs	r3, r2
 8010aaa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010aac:	69bb      	ldr	r3, [r7, #24]
 8010aae:	015a      	lsls	r2, r3, #5
 8010ab0:	69fb      	ldr	r3, [r7, #28]
 8010ab2:	4413      	add	r3, r2
 8010ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ab8:	691b      	ldr	r3, [r3, #16]
 8010aba:	69ba      	ldr	r2, [r7, #24]
 8010abc:	0151      	lsls	r1, r2, #5
 8010abe:	69fa      	ldr	r2, [r7, #28]
 8010ac0:	440a      	add	r2, r1
 8010ac2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ac6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010aca:	6113      	str	r3, [r2, #16]
 8010acc:	e036      	b.n	8010b3c <USB_EPStartXfer+0x3dc>
 8010ace:	bf00      	nop
 8010ad0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	695a      	ldr	r2, [r3, #20]
 8010ad8:	68bb      	ldr	r3, [r7, #8]
 8010ada:	689b      	ldr	r3, [r3, #8]
 8010adc:	4413      	add	r3, r2
 8010ade:	1e5a      	subs	r2, r3, #1
 8010ae0:	68bb      	ldr	r3, [r7, #8]
 8010ae2:	689b      	ldr	r3, [r3, #8]
 8010ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ae8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010aea:	69bb      	ldr	r3, [r7, #24]
 8010aec:	015a      	lsls	r2, r3, #5
 8010aee:	69fb      	ldr	r3, [r7, #28]
 8010af0:	4413      	add	r3, r2
 8010af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010af6:	691a      	ldr	r2, [r3, #16]
 8010af8:	8afb      	ldrh	r3, [r7, #22]
 8010afa:	04d9      	lsls	r1, r3, #19
 8010afc:	4b39      	ldr	r3, [pc, #228]	; (8010be4 <USB_EPStartXfer+0x484>)
 8010afe:	400b      	ands	r3, r1
 8010b00:	69b9      	ldr	r1, [r7, #24]
 8010b02:	0148      	lsls	r0, r1, #5
 8010b04:	69f9      	ldr	r1, [r7, #28]
 8010b06:	4401      	add	r1, r0
 8010b08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010b0c:	4313      	orrs	r3, r2
 8010b0e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8010b10:	69bb      	ldr	r3, [r7, #24]
 8010b12:	015a      	lsls	r2, r3, #5
 8010b14:	69fb      	ldr	r3, [r7, #28]
 8010b16:	4413      	add	r3, r2
 8010b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b1c:	691a      	ldr	r2, [r3, #16]
 8010b1e:	68bb      	ldr	r3, [r7, #8]
 8010b20:	689b      	ldr	r3, [r3, #8]
 8010b22:	8af9      	ldrh	r1, [r7, #22]
 8010b24:	fb01 f303 	mul.w	r3, r1, r3
 8010b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010b2c:	69b9      	ldr	r1, [r7, #24]
 8010b2e:	0148      	lsls	r0, r1, #5
 8010b30:	69f9      	ldr	r1, [r7, #28]
 8010b32:	4401      	add	r1, r0
 8010b34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010b38:	4313      	orrs	r3, r2
 8010b3a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010b3c:	79fb      	ldrb	r3, [r7, #7]
 8010b3e:	2b01      	cmp	r3, #1
 8010b40:	d10d      	bne.n	8010b5e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010b42:	68bb      	ldr	r3, [r7, #8]
 8010b44:	68db      	ldr	r3, [r3, #12]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d009      	beq.n	8010b5e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010b4a:	68bb      	ldr	r3, [r7, #8]
 8010b4c:	68d9      	ldr	r1, [r3, #12]
 8010b4e:	69bb      	ldr	r3, [r7, #24]
 8010b50:	015a      	lsls	r2, r3, #5
 8010b52:	69fb      	ldr	r3, [r7, #28]
 8010b54:	4413      	add	r3, r2
 8010b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b5a:	460a      	mov	r2, r1
 8010b5c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010b5e:	68bb      	ldr	r3, [r7, #8]
 8010b60:	78db      	ldrb	r3, [r3, #3]
 8010b62:	2b01      	cmp	r3, #1
 8010b64:	d128      	bne.n	8010bb8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010b66:	69fb      	ldr	r3, [r7, #28]
 8010b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b6c:	689b      	ldr	r3, [r3, #8]
 8010b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d110      	bne.n	8010b98 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010b76:	69bb      	ldr	r3, [r7, #24]
 8010b78:	015a      	lsls	r2, r3, #5
 8010b7a:	69fb      	ldr	r3, [r7, #28]
 8010b7c:	4413      	add	r3, r2
 8010b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	69ba      	ldr	r2, [r7, #24]
 8010b86:	0151      	lsls	r1, r2, #5
 8010b88:	69fa      	ldr	r2, [r7, #28]
 8010b8a:	440a      	add	r2, r1
 8010b8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010b94:	6013      	str	r3, [r2, #0]
 8010b96:	e00f      	b.n	8010bb8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010b98:	69bb      	ldr	r3, [r7, #24]
 8010b9a:	015a      	lsls	r2, r3, #5
 8010b9c:	69fb      	ldr	r3, [r7, #28]
 8010b9e:	4413      	add	r3, r2
 8010ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	69ba      	ldr	r2, [r7, #24]
 8010ba8:	0151      	lsls	r1, r2, #5
 8010baa:	69fa      	ldr	r2, [r7, #28]
 8010bac:	440a      	add	r2, r1
 8010bae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010bb6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010bb8:	69bb      	ldr	r3, [r7, #24]
 8010bba:	015a      	lsls	r2, r3, #5
 8010bbc:	69fb      	ldr	r3, [r7, #28]
 8010bbe:	4413      	add	r3, r2
 8010bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	69ba      	ldr	r2, [r7, #24]
 8010bc8:	0151      	lsls	r1, r2, #5
 8010bca:	69fa      	ldr	r2, [r7, #28]
 8010bcc:	440a      	add	r2, r1
 8010bce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010bd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010bd8:	2300      	movs	r3, #0
}
 8010bda:	4618      	mov	r0, r3
 8010bdc:	3720      	adds	r7, #32
 8010bde:	46bd      	mov	sp, r7
 8010be0:	bd80      	pop	{r7, pc}
 8010be2:	bf00      	nop
 8010be4:	1ff80000 	.word	0x1ff80000

08010be8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010be8:	b480      	push	{r7}
 8010bea:	b087      	sub	sp, #28
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	60f8      	str	r0, [r7, #12]
 8010bf0:	60b9      	str	r1, [r7, #8]
 8010bf2:	4613      	mov	r3, r2
 8010bf4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8010bfa:	68bb      	ldr	r3, [r7, #8]
 8010bfc:	781b      	ldrb	r3, [r3, #0]
 8010bfe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	785b      	ldrb	r3, [r3, #1]
 8010c04:	2b01      	cmp	r3, #1
 8010c06:	f040 80cd 	bne.w	8010da4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010c0a:	68bb      	ldr	r3, [r7, #8]
 8010c0c:	695b      	ldr	r3, [r3, #20]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d132      	bne.n	8010c78 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010c12:	693b      	ldr	r3, [r7, #16]
 8010c14:	015a      	lsls	r2, r3, #5
 8010c16:	697b      	ldr	r3, [r7, #20]
 8010c18:	4413      	add	r3, r2
 8010c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c1e:	691b      	ldr	r3, [r3, #16]
 8010c20:	693a      	ldr	r2, [r7, #16]
 8010c22:	0151      	lsls	r1, r2, #5
 8010c24:	697a      	ldr	r2, [r7, #20]
 8010c26:	440a      	add	r2, r1
 8010c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010c30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010c34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010c36:	693b      	ldr	r3, [r7, #16]
 8010c38:	015a      	lsls	r2, r3, #5
 8010c3a:	697b      	ldr	r3, [r7, #20]
 8010c3c:	4413      	add	r3, r2
 8010c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c42:	691b      	ldr	r3, [r3, #16]
 8010c44:	693a      	ldr	r2, [r7, #16]
 8010c46:	0151      	lsls	r1, r2, #5
 8010c48:	697a      	ldr	r2, [r7, #20]
 8010c4a:	440a      	add	r2, r1
 8010c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010c54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010c56:	693b      	ldr	r3, [r7, #16]
 8010c58:	015a      	lsls	r2, r3, #5
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	4413      	add	r3, r2
 8010c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c62:	691b      	ldr	r3, [r3, #16]
 8010c64:	693a      	ldr	r2, [r7, #16]
 8010c66:	0151      	lsls	r1, r2, #5
 8010c68:	697a      	ldr	r2, [r7, #20]
 8010c6a:	440a      	add	r2, r1
 8010c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c70:	0cdb      	lsrs	r3, r3, #19
 8010c72:	04db      	lsls	r3, r3, #19
 8010c74:	6113      	str	r3, [r2, #16]
 8010c76:	e04e      	b.n	8010d16 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010c78:	693b      	ldr	r3, [r7, #16]
 8010c7a:	015a      	lsls	r2, r3, #5
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	4413      	add	r3, r2
 8010c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c84:	691b      	ldr	r3, [r3, #16]
 8010c86:	693a      	ldr	r2, [r7, #16]
 8010c88:	0151      	lsls	r1, r2, #5
 8010c8a:	697a      	ldr	r2, [r7, #20]
 8010c8c:	440a      	add	r2, r1
 8010c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c92:	0cdb      	lsrs	r3, r3, #19
 8010c94:	04db      	lsls	r3, r3, #19
 8010c96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010c98:	693b      	ldr	r3, [r7, #16]
 8010c9a:	015a      	lsls	r2, r3, #5
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	4413      	add	r3, r2
 8010ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ca4:	691b      	ldr	r3, [r3, #16]
 8010ca6:	693a      	ldr	r2, [r7, #16]
 8010ca8:	0151      	lsls	r1, r2, #5
 8010caa:	697a      	ldr	r2, [r7, #20]
 8010cac:	440a      	add	r2, r1
 8010cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010cb2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010cb6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010cba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010cbc:	68bb      	ldr	r3, [r7, #8]
 8010cbe:	695a      	ldr	r2, [r3, #20]
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	689b      	ldr	r3, [r3, #8]
 8010cc4:	429a      	cmp	r2, r3
 8010cc6:	d903      	bls.n	8010cd0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	689a      	ldr	r2, [r3, #8]
 8010ccc:	68bb      	ldr	r3, [r7, #8]
 8010cce:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010cd0:	693b      	ldr	r3, [r7, #16]
 8010cd2:	015a      	lsls	r2, r3, #5
 8010cd4:	697b      	ldr	r3, [r7, #20]
 8010cd6:	4413      	add	r3, r2
 8010cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cdc:	691b      	ldr	r3, [r3, #16]
 8010cde:	693a      	ldr	r2, [r7, #16]
 8010ce0:	0151      	lsls	r1, r2, #5
 8010ce2:	697a      	ldr	r2, [r7, #20]
 8010ce4:	440a      	add	r2, r1
 8010ce6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010cea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010cee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010cf0:	693b      	ldr	r3, [r7, #16]
 8010cf2:	015a      	lsls	r2, r3, #5
 8010cf4:	697b      	ldr	r3, [r7, #20]
 8010cf6:	4413      	add	r3, r2
 8010cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cfc:	691a      	ldr	r2, [r3, #16]
 8010cfe:	68bb      	ldr	r3, [r7, #8]
 8010d00:	695b      	ldr	r3, [r3, #20]
 8010d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010d06:	6939      	ldr	r1, [r7, #16]
 8010d08:	0148      	lsls	r0, r1, #5
 8010d0a:	6979      	ldr	r1, [r7, #20]
 8010d0c:	4401      	add	r1, r0
 8010d0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010d12:	4313      	orrs	r3, r2
 8010d14:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010d16:	79fb      	ldrb	r3, [r7, #7]
 8010d18:	2b01      	cmp	r3, #1
 8010d1a:	d11e      	bne.n	8010d5a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010d1c:	68bb      	ldr	r3, [r7, #8]
 8010d1e:	691b      	ldr	r3, [r3, #16]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d009      	beq.n	8010d38 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010d24:	693b      	ldr	r3, [r7, #16]
 8010d26:	015a      	lsls	r2, r3, #5
 8010d28:	697b      	ldr	r3, [r7, #20]
 8010d2a:	4413      	add	r3, r2
 8010d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d30:	461a      	mov	r2, r3
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	691b      	ldr	r3, [r3, #16]
 8010d36:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010d38:	693b      	ldr	r3, [r7, #16]
 8010d3a:	015a      	lsls	r2, r3, #5
 8010d3c:	697b      	ldr	r3, [r7, #20]
 8010d3e:	4413      	add	r3, r2
 8010d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	693a      	ldr	r2, [r7, #16]
 8010d48:	0151      	lsls	r1, r2, #5
 8010d4a:	697a      	ldr	r2, [r7, #20]
 8010d4c:	440a      	add	r2, r1
 8010d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010d56:	6013      	str	r3, [r2, #0]
 8010d58:	e092      	b.n	8010e80 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010d5a:	693b      	ldr	r3, [r7, #16]
 8010d5c:	015a      	lsls	r2, r3, #5
 8010d5e:	697b      	ldr	r3, [r7, #20]
 8010d60:	4413      	add	r3, r2
 8010d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	693a      	ldr	r2, [r7, #16]
 8010d6a:	0151      	lsls	r1, r2, #5
 8010d6c:	697a      	ldr	r2, [r7, #20]
 8010d6e:	440a      	add	r2, r1
 8010d70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010d78:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8010d7a:	68bb      	ldr	r3, [r7, #8]
 8010d7c:	695b      	ldr	r3, [r3, #20]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d07e      	beq.n	8010e80 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010d8a:	68bb      	ldr	r3, [r7, #8]
 8010d8c:	781b      	ldrb	r3, [r3, #0]
 8010d8e:	f003 030f 	and.w	r3, r3, #15
 8010d92:	2101      	movs	r1, #1
 8010d94:	fa01 f303 	lsl.w	r3, r1, r3
 8010d98:	6979      	ldr	r1, [r7, #20]
 8010d9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010d9e:	4313      	orrs	r3, r2
 8010da0:	634b      	str	r3, [r1, #52]	; 0x34
 8010da2:	e06d      	b.n	8010e80 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010da4:	693b      	ldr	r3, [r7, #16]
 8010da6:	015a      	lsls	r2, r3, #5
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	4413      	add	r3, r2
 8010dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010db0:	691b      	ldr	r3, [r3, #16]
 8010db2:	693a      	ldr	r2, [r7, #16]
 8010db4:	0151      	lsls	r1, r2, #5
 8010db6:	697a      	ldr	r2, [r7, #20]
 8010db8:	440a      	add	r2, r1
 8010dba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010dbe:	0cdb      	lsrs	r3, r3, #19
 8010dc0:	04db      	lsls	r3, r3, #19
 8010dc2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010dc4:	693b      	ldr	r3, [r7, #16]
 8010dc6:	015a      	lsls	r2, r3, #5
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	4413      	add	r3, r2
 8010dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010dd0:	691b      	ldr	r3, [r3, #16]
 8010dd2:	693a      	ldr	r2, [r7, #16]
 8010dd4:	0151      	lsls	r1, r2, #5
 8010dd6:	697a      	ldr	r2, [r7, #20]
 8010dd8:	440a      	add	r2, r1
 8010dda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010dde:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010de2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010de6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	695b      	ldr	r3, [r3, #20]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d003      	beq.n	8010df8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8010df0:	68bb      	ldr	r3, [r7, #8]
 8010df2:	689a      	ldr	r2, [r3, #8]
 8010df4:	68bb      	ldr	r3, [r7, #8]
 8010df6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010df8:	693b      	ldr	r3, [r7, #16]
 8010dfa:	015a      	lsls	r2, r3, #5
 8010dfc:	697b      	ldr	r3, [r7, #20]
 8010dfe:	4413      	add	r3, r2
 8010e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e04:	691b      	ldr	r3, [r3, #16]
 8010e06:	693a      	ldr	r2, [r7, #16]
 8010e08:	0151      	lsls	r1, r2, #5
 8010e0a:	697a      	ldr	r2, [r7, #20]
 8010e0c:	440a      	add	r2, r1
 8010e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010e16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8010e18:	693b      	ldr	r3, [r7, #16]
 8010e1a:	015a      	lsls	r2, r3, #5
 8010e1c:	697b      	ldr	r3, [r7, #20]
 8010e1e:	4413      	add	r3, r2
 8010e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e24:	691a      	ldr	r2, [r3, #16]
 8010e26:	68bb      	ldr	r3, [r7, #8]
 8010e28:	689b      	ldr	r3, [r3, #8]
 8010e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010e2e:	6939      	ldr	r1, [r7, #16]
 8010e30:	0148      	lsls	r0, r1, #5
 8010e32:	6979      	ldr	r1, [r7, #20]
 8010e34:	4401      	add	r1, r0
 8010e36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010e3a:	4313      	orrs	r3, r2
 8010e3c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8010e3e:	79fb      	ldrb	r3, [r7, #7]
 8010e40:	2b01      	cmp	r3, #1
 8010e42:	d10d      	bne.n	8010e60 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010e44:	68bb      	ldr	r3, [r7, #8]
 8010e46:	68db      	ldr	r3, [r3, #12]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d009      	beq.n	8010e60 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010e4c:	68bb      	ldr	r3, [r7, #8]
 8010e4e:	68d9      	ldr	r1, [r3, #12]
 8010e50:	693b      	ldr	r3, [r7, #16]
 8010e52:	015a      	lsls	r2, r3, #5
 8010e54:	697b      	ldr	r3, [r7, #20]
 8010e56:	4413      	add	r3, r2
 8010e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e5c:	460a      	mov	r2, r1
 8010e5e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010e60:	693b      	ldr	r3, [r7, #16]
 8010e62:	015a      	lsls	r2, r3, #5
 8010e64:	697b      	ldr	r3, [r7, #20]
 8010e66:	4413      	add	r3, r2
 8010e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	693a      	ldr	r2, [r7, #16]
 8010e70:	0151      	lsls	r1, r2, #5
 8010e72:	697a      	ldr	r2, [r7, #20]
 8010e74:	440a      	add	r2, r1
 8010e76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010e7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010e80:	2300      	movs	r3, #0
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	371c      	adds	r7, #28
 8010e86:	46bd      	mov	sp, r7
 8010e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8c:	4770      	bx	lr

08010e8e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010e8e:	b480      	push	{r7}
 8010e90:	b089      	sub	sp, #36	; 0x24
 8010e92:	af00      	add	r7, sp, #0
 8010e94:	60f8      	str	r0, [r7, #12]
 8010e96:	60b9      	str	r1, [r7, #8]
 8010e98:	4611      	mov	r1, r2
 8010e9a:	461a      	mov	r2, r3
 8010e9c:	460b      	mov	r3, r1
 8010e9e:	71fb      	strb	r3, [r7, #7]
 8010ea0:	4613      	mov	r3, r2
 8010ea2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8010eac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d123      	bne.n	8010efc <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010eb4:	88bb      	ldrh	r3, [r7, #4]
 8010eb6:	3303      	adds	r3, #3
 8010eb8:	089b      	lsrs	r3, r3, #2
 8010eba:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	61bb      	str	r3, [r7, #24]
 8010ec0:	e018      	b.n	8010ef4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010ec2:	79fb      	ldrb	r3, [r7, #7]
 8010ec4:	031a      	lsls	r2, r3, #12
 8010ec6:	697b      	ldr	r3, [r7, #20]
 8010ec8:	4413      	add	r3, r2
 8010eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ece:	461a      	mov	r2, r3
 8010ed0:	69fb      	ldr	r3, [r7, #28]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010ed6:	69fb      	ldr	r3, [r7, #28]
 8010ed8:	3301      	adds	r3, #1
 8010eda:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010edc:	69fb      	ldr	r3, [r7, #28]
 8010ede:	3301      	adds	r3, #1
 8010ee0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010ee2:	69fb      	ldr	r3, [r7, #28]
 8010ee4:	3301      	adds	r3, #1
 8010ee6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010ee8:	69fb      	ldr	r3, [r7, #28]
 8010eea:	3301      	adds	r3, #1
 8010eec:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010eee:	69bb      	ldr	r3, [r7, #24]
 8010ef0:	3301      	adds	r3, #1
 8010ef2:	61bb      	str	r3, [r7, #24]
 8010ef4:	69ba      	ldr	r2, [r7, #24]
 8010ef6:	693b      	ldr	r3, [r7, #16]
 8010ef8:	429a      	cmp	r2, r3
 8010efa:	d3e2      	bcc.n	8010ec2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010efc:	2300      	movs	r3, #0
}
 8010efe:	4618      	mov	r0, r3
 8010f00:	3724      	adds	r7, #36	; 0x24
 8010f02:	46bd      	mov	sp, r7
 8010f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f08:	4770      	bx	lr

08010f0a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010f0a:	b480      	push	{r7}
 8010f0c:	b08b      	sub	sp, #44	; 0x2c
 8010f0e:	af00      	add	r7, sp, #0
 8010f10:	60f8      	str	r0, [r7, #12]
 8010f12:	60b9      	str	r1, [r7, #8]
 8010f14:	4613      	mov	r3, r2
 8010f16:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010f1c:	68bb      	ldr	r3, [r7, #8]
 8010f1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010f20:	88fb      	ldrh	r3, [r7, #6]
 8010f22:	089b      	lsrs	r3, r3, #2
 8010f24:	b29b      	uxth	r3, r3
 8010f26:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010f28:	88fb      	ldrh	r3, [r7, #6]
 8010f2a:	f003 0303 	and.w	r3, r3, #3
 8010f2e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010f30:	2300      	movs	r3, #0
 8010f32:	623b      	str	r3, [r7, #32]
 8010f34:	e014      	b.n	8010f60 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010f36:	69bb      	ldr	r3, [r7, #24]
 8010f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010f3c:	681a      	ldr	r2, [r3, #0]
 8010f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f40:	601a      	str	r2, [r3, #0]
    pDest++;
 8010f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f44:	3301      	adds	r3, #1
 8010f46:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f4a:	3301      	adds	r3, #1
 8010f4c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f50:	3301      	adds	r3, #1
 8010f52:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f56:	3301      	adds	r3, #1
 8010f58:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8010f5a:	6a3b      	ldr	r3, [r7, #32]
 8010f5c:	3301      	adds	r3, #1
 8010f5e:	623b      	str	r3, [r7, #32]
 8010f60:	6a3a      	ldr	r2, [r7, #32]
 8010f62:	697b      	ldr	r3, [r7, #20]
 8010f64:	429a      	cmp	r2, r3
 8010f66:	d3e6      	bcc.n	8010f36 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010f68:	8bfb      	ldrh	r3, [r7, #30]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d01e      	beq.n	8010fac <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010f72:	69bb      	ldr	r3, [r7, #24]
 8010f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010f78:	461a      	mov	r2, r3
 8010f7a:	f107 0310 	add.w	r3, r7, #16
 8010f7e:	6812      	ldr	r2, [r2, #0]
 8010f80:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010f82:	693a      	ldr	r2, [r7, #16]
 8010f84:	6a3b      	ldr	r3, [r7, #32]
 8010f86:	b2db      	uxtb	r3, r3
 8010f88:	00db      	lsls	r3, r3, #3
 8010f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8010f8e:	b2da      	uxtb	r2, r3
 8010f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f92:	701a      	strb	r2, [r3, #0]
      i++;
 8010f94:	6a3b      	ldr	r3, [r7, #32]
 8010f96:	3301      	adds	r3, #1
 8010f98:	623b      	str	r3, [r7, #32]
      pDest++;
 8010f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f9c:	3301      	adds	r3, #1
 8010f9e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8010fa0:	8bfb      	ldrh	r3, [r7, #30]
 8010fa2:	3b01      	subs	r3, #1
 8010fa4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010fa6:	8bfb      	ldrh	r3, [r7, #30]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d1ea      	bne.n	8010f82 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8010fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010fae:	4618      	mov	r0, r3
 8010fb0:	372c      	adds	r7, #44	; 0x2c
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb8:	4770      	bx	lr

08010fba <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010fba:	b480      	push	{r7}
 8010fbc:	b085      	sub	sp, #20
 8010fbe:	af00      	add	r7, sp, #0
 8010fc0:	6078      	str	r0, [r7, #4]
 8010fc2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	781b      	ldrb	r3, [r3, #0]
 8010fcc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010fce:	683b      	ldr	r3, [r7, #0]
 8010fd0:	785b      	ldrb	r3, [r3, #1]
 8010fd2:	2b01      	cmp	r3, #1
 8010fd4:	d12c      	bne.n	8011030 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010fd6:	68bb      	ldr	r3, [r7, #8]
 8010fd8:	015a      	lsls	r2, r3, #5
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	4413      	add	r3, r2
 8010fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	db12      	blt.n	801100e <USB_EPSetStall+0x54>
 8010fe8:	68bb      	ldr	r3, [r7, #8]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d00f      	beq.n	801100e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010fee:	68bb      	ldr	r3, [r7, #8]
 8010ff0:	015a      	lsls	r2, r3, #5
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	4413      	add	r3, r2
 8010ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	68ba      	ldr	r2, [r7, #8]
 8010ffe:	0151      	lsls	r1, r2, #5
 8011000:	68fa      	ldr	r2, [r7, #12]
 8011002:	440a      	add	r2, r1
 8011004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011008:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801100c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801100e:	68bb      	ldr	r3, [r7, #8]
 8011010:	015a      	lsls	r2, r3, #5
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	4413      	add	r3, r2
 8011016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	68ba      	ldr	r2, [r7, #8]
 801101e:	0151      	lsls	r1, r2, #5
 8011020:	68fa      	ldr	r2, [r7, #12]
 8011022:	440a      	add	r2, r1
 8011024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011028:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801102c:	6013      	str	r3, [r2, #0]
 801102e:	e02b      	b.n	8011088 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011030:	68bb      	ldr	r3, [r7, #8]
 8011032:	015a      	lsls	r2, r3, #5
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	4413      	add	r3, r2
 8011038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	2b00      	cmp	r3, #0
 8011040:	db12      	blt.n	8011068 <USB_EPSetStall+0xae>
 8011042:	68bb      	ldr	r3, [r7, #8]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d00f      	beq.n	8011068 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011048:	68bb      	ldr	r3, [r7, #8]
 801104a:	015a      	lsls	r2, r3, #5
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	4413      	add	r3, r2
 8011050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	68ba      	ldr	r2, [r7, #8]
 8011058:	0151      	lsls	r1, r2, #5
 801105a:	68fa      	ldr	r2, [r7, #12]
 801105c:	440a      	add	r2, r1
 801105e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011062:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011066:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011068:	68bb      	ldr	r3, [r7, #8]
 801106a:	015a      	lsls	r2, r3, #5
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	4413      	add	r3, r2
 8011070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	68ba      	ldr	r2, [r7, #8]
 8011078:	0151      	lsls	r1, r2, #5
 801107a:	68fa      	ldr	r2, [r7, #12]
 801107c:	440a      	add	r2, r1
 801107e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011082:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011086:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011088:	2300      	movs	r3, #0
}
 801108a:	4618      	mov	r0, r3
 801108c:	3714      	adds	r7, #20
 801108e:	46bd      	mov	sp, r7
 8011090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011094:	4770      	bx	lr

08011096 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011096:	b480      	push	{r7}
 8011098:	b085      	sub	sp, #20
 801109a:	af00      	add	r7, sp, #0
 801109c:	6078      	str	r0, [r7, #4]
 801109e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80110a4:	683b      	ldr	r3, [r7, #0]
 80110a6:	781b      	ldrb	r3, [r3, #0]
 80110a8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	785b      	ldrb	r3, [r3, #1]
 80110ae:	2b01      	cmp	r3, #1
 80110b0:	d128      	bne.n	8011104 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80110b2:	68bb      	ldr	r3, [r7, #8]
 80110b4:	015a      	lsls	r2, r3, #5
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	4413      	add	r3, r2
 80110ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	68ba      	ldr	r2, [r7, #8]
 80110c2:	0151      	lsls	r1, r2, #5
 80110c4:	68fa      	ldr	r2, [r7, #12]
 80110c6:	440a      	add	r2, r1
 80110c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80110cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80110d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80110d2:	683b      	ldr	r3, [r7, #0]
 80110d4:	78db      	ldrb	r3, [r3, #3]
 80110d6:	2b03      	cmp	r3, #3
 80110d8:	d003      	beq.n	80110e2 <USB_EPClearStall+0x4c>
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	78db      	ldrb	r3, [r3, #3]
 80110de:	2b02      	cmp	r3, #2
 80110e0:	d138      	bne.n	8011154 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80110e2:	68bb      	ldr	r3, [r7, #8]
 80110e4:	015a      	lsls	r2, r3, #5
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	4413      	add	r3, r2
 80110ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	68ba      	ldr	r2, [r7, #8]
 80110f2:	0151      	lsls	r1, r2, #5
 80110f4:	68fa      	ldr	r2, [r7, #12]
 80110f6:	440a      	add	r2, r1
 80110f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80110fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011100:	6013      	str	r3, [r2, #0]
 8011102:	e027      	b.n	8011154 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011104:	68bb      	ldr	r3, [r7, #8]
 8011106:	015a      	lsls	r2, r3, #5
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	4413      	add	r3, r2
 801110c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	68ba      	ldr	r2, [r7, #8]
 8011114:	0151      	lsls	r1, r2, #5
 8011116:	68fa      	ldr	r2, [r7, #12]
 8011118:	440a      	add	r2, r1
 801111a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801111e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011122:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	78db      	ldrb	r3, [r3, #3]
 8011128:	2b03      	cmp	r3, #3
 801112a:	d003      	beq.n	8011134 <USB_EPClearStall+0x9e>
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	78db      	ldrb	r3, [r3, #3]
 8011130:	2b02      	cmp	r3, #2
 8011132:	d10f      	bne.n	8011154 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	015a      	lsls	r2, r3, #5
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	4413      	add	r3, r2
 801113c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	68ba      	ldr	r2, [r7, #8]
 8011144:	0151      	lsls	r1, r2, #5
 8011146:	68fa      	ldr	r2, [r7, #12]
 8011148:	440a      	add	r2, r1
 801114a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801114e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011152:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011154:	2300      	movs	r3, #0
}
 8011156:	4618      	mov	r0, r3
 8011158:	3714      	adds	r7, #20
 801115a:	46bd      	mov	sp, r7
 801115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011160:	4770      	bx	lr

08011162 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011162:	b480      	push	{r7}
 8011164:	b085      	sub	sp, #20
 8011166:	af00      	add	r7, sp, #0
 8011168:	6078      	str	r0, [r7, #4]
 801116a:	460b      	mov	r3, r1
 801116c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	68fa      	ldr	r2, [r7, #12]
 801117c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011180:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011184:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801118c:	681a      	ldr	r2, [r3, #0]
 801118e:	78fb      	ldrb	r3, [r7, #3]
 8011190:	011b      	lsls	r3, r3, #4
 8011192:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8011196:	68f9      	ldr	r1, [r7, #12]
 8011198:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801119c:	4313      	orrs	r3, r2
 801119e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80111a0:	2300      	movs	r3, #0
}
 80111a2:	4618      	mov	r0, r3
 80111a4:	3714      	adds	r7, #20
 80111a6:	46bd      	mov	sp, r7
 80111a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ac:	4770      	bx	lr

080111ae <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80111ae:	b480      	push	{r7}
 80111b0:	b085      	sub	sp, #20
 80111b2:	af00      	add	r7, sp, #0
 80111b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	68fa      	ldr	r2, [r7, #12]
 80111c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80111c8:	f023 0303 	bic.w	r3, r3, #3
 80111cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80111d4:	685b      	ldr	r3, [r3, #4]
 80111d6:	68fa      	ldr	r2, [r7, #12]
 80111d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80111dc:	f023 0302 	bic.w	r3, r3, #2
 80111e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80111e2:	2300      	movs	r3, #0
}
 80111e4:	4618      	mov	r0, r3
 80111e6:	3714      	adds	r7, #20
 80111e8:	46bd      	mov	sp, r7
 80111ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ee:	4770      	bx	lr

080111f0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80111f0:	b480      	push	{r7}
 80111f2:	b085      	sub	sp, #20
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	68fa      	ldr	r2, [r7, #12]
 8011206:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801120a:	f023 0303 	bic.w	r3, r3, #3
 801120e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011216:	685b      	ldr	r3, [r3, #4]
 8011218:	68fa      	ldr	r2, [r7, #12]
 801121a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801121e:	f043 0302 	orr.w	r3, r3, #2
 8011222:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011224:	2300      	movs	r3, #0
}
 8011226:	4618      	mov	r0, r3
 8011228:	3714      	adds	r7, #20
 801122a:	46bd      	mov	sp, r7
 801122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011230:	4770      	bx	lr

08011232 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8011232:	b480      	push	{r7}
 8011234:	b085      	sub	sp, #20
 8011236:	af00      	add	r7, sp, #0
 8011238:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	695b      	ldr	r3, [r3, #20]
 801123e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	699b      	ldr	r3, [r3, #24]
 8011244:	68fa      	ldr	r2, [r7, #12]
 8011246:	4013      	ands	r3, r2
 8011248:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801124a:	68fb      	ldr	r3, [r7, #12]
}
 801124c:	4618      	mov	r0, r3
 801124e:	3714      	adds	r7, #20
 8011250:	46bd      	mov	sp, r7
 8011252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011256:	4770      	bx	lr

08011258 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011258:	b480      	push	{r7}
 801125a:	b085      	sub	sp, #20
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801126a:	699b      	ldr	r3, [r3, #24]
 801126c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011274:	69db      	ldr	r3, [r3, #28]
 8011276:	68ba      	ldr	r2, [r7, #8]
 8011278:	4013      	ands	r3, r2
 801127a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801127c:	68bb      	ldr	r3, [r7, #8]
 801127e:	0c1b      	lsrs	r3, r3, #16
}
 8011280:	4618      	mov	r0, r3
 8011282:	3714      	adds	r7, #20
 8011284:	46bd      	mov	sp, r7
 8011286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128a:	4770      	bx	lr

0801128c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801128c:	b480      	push	{r7}
 801128e:	b085      	sub	sp, #20
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801129e:	699b      	ldr	r3, [r3, #24]
 80112a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80112a8:	69db      	ldr	r3, [r3, #28]
 80112aa:	68ba      	ldr	r2, [r7, #8]
 80112ac:	4013      	ands	r3, r2
 80112ae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80112b0:	68bb      	ldr	r3, [r7, #8]
 80112b2:	b29b      	uxth	r3, r3
}
 80112b4:	4618      	mov	r0, r3
 80112b6:	3714      	adds	r7, #20
 80112b8:	46bd      	mov	sp, r7
 80112ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112be:	4770      	bx	lr

080112c0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80112c0:	b480      	push	{r7}
 80112c2:	b085      	sub	sp, #20
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
 80112c8:	460b      	mov	r3, r1
 80112ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80112d0:	78fb      	ldrb	r3, [r7, #3]
 80112d2:	015a      	lsls	r2, r3, #5
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	4413      	add	r3, r2
 80112d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112dc:	689b      	ldr	r3, [r3, #8]
 80112de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80112e6:	695b      	ldr	r3, [r3, #20]
 80112e8:	68ba      	ldr	r2, [r7, #8]
 80112ea:	4013      	ands	r3, r2
 80112ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80112ee:	68bb      	ldr	r3, [r7, #8]
}
 80112f0:	4618      	mov	r0, r3
 80112f2:	3714      	adds	r7, #20
 80112f4:	46bd      	mov	sp, r7
 80112f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fa:	4770      	bx	lr

080112fc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80112fc:	b480      	push	{r7}
 80112fe:	b087      	sub	sp, #28
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
 8011304:	460b      	mov	r3, r1
 8011306:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801130c:	697b      	ldr	r3, [r7, #20]
 801130e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011312:	691b      	ldr	r3, [r3, #16]
 8011314:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011316:	697b      	ldr	r3, [r7, #20]
 8011318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801131c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801131e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8011320:	78fb      	ldrb	r3, [r7, #3]
 8011322:	f003 030f 	and.w	r3, r3, #15
 8011326:	68fa      	ldr	r2, [r7, #12]
 8011328:	fa22 f303 	lsr.w	r3, r2, r3
 801132c:	01db      	lsls	r3, r3, #7
 801132e:	b2db      	uxtb	r3, r3
 8011330:	693a      	ldr	r2, [r7, #16]
 8011332:	4313      	orrs	r3, r2
 8011334:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8011336:	78fb      	ldrb	r3, [r7, #3]
 8011338:	015a      	lsls	r2, r3, #5
 801133a:	697b      	ldr	r3, [r7, #20]
 801133c:	4413      	add	r3, r2
 801133e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011342:	689b      	ldr	r3, [r3, #8]
 8011344:	693a      	ldr	r2, [r7, #16]
 8011346:	4013      	ands	r3, r2
 8011348:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801134a:	68bb      	ldr	r3, [r7, #8]
}
 801134c:	4618      	mov	r0, r3
 801134e:	371c      	adds	r7, #28
 8011350:	46bd      	mov	sp, r7
 8011352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011356:	4770      	bx	lr

08011358 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8011358:	b480      	push	{r7}
 801135a:	b083      	sub	sp, #12
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	695b      	ldr	r3, [r3, #20]
 8011364:	f003 0301 	and.w	r3, r3, #1
}
 8011368:	4618      	mov	r0, r3
 801136a:	370c      	adds	r7, #12
 801136c:	46bd      	mov	sp, r7
 801136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011372:	4770      	bx	lr

08011374 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8011374:	b480      	push	{r7}
 8011376:	b085      	sub	sp, #20
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	68fa      	ldr	r2, [r7, #12]
 801138a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801138e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8011392:	f023 0307 	bic.w	r3, r3, #7
 8011396:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801139e:	685b      	ldr	r3, [r3, #4]
 80113a0:	68fa      	ldr	r2, [r7, #12]
 80113a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80113a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80113aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80113ac:	2300      	movs	r3, #0
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	3714      	adds	r7, #20
 80113b2:	46bd      	mov	sp, r7
 80113b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b8:	4770      	bx	lr
	...

080113bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80113bc:	b480      	push	{r7}
 80113be:	b087      	sub	sp, #28
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	60f8      	str	r0, [r7, #12]
 80113c4:	460b      	mov	r3, r1
 80113c6:	607a      	str	r2, [r7, #4]
 80113c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	333c      	adds	r3, #60	; 0x3c
 80113d2:	3304      	adds	r3, #4
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80113d8:	693b      	ldr	r3, [r7, #16]
 80113da:	4a26      	ldr	r2, [pc, #152]	; (8011474 <USB_EP0_OutStart+0xb8>)
 80113dc:	4293      	cmp	r3, r2
 80113de:	d90a      	bls.n	80113f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80113e0:	697b      	ldr	r3, [r7, #20]
 80113e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80113ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80113f0:	d101      	bne.n	80113f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80113f2:	2300      	movs	r3, #0
 80113f4:	e037      	b.n	8011466 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113fc:	461a      	mov	r2, r3
 80113fe:	2300      	movs	r3, #0
 8011400:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011402:	697b      	ldr	r3, [r7, #20]
 8011404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011408:	691b      	ldr	r3, [r3, #16]
 801140a:	697a      	ldr	r2, [r7, #20]
 801140c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011410:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011414:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011416:	697b      	ldr	r3, [r7, #20]
 8011418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801141c:	691b      	ldr	r3, [r3, #16]
 801141e:	697a      	ldr	r2, [r7, #20]
 8011420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011424:	f043 0318 	orr.w	r3, r3, #24
 8011428:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801142a:	697b      	ldr	r3, [r7, #20]
 801142c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011430:	691b      	ldr	r3, [r3, #16]
 8011432:	697a      	ldr	r2, [r7, #20]
 8011434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011438:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801143c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801143e:	7afb      	ldrb	r3, [r7, #11]
 8011440:	2b01      	cmp	r3, #1
 8011442:	d10f      	bne.n	8011464 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8011444:	697b      	ldr	r3, [r7, #20]
 8011446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801144a:	461a      	mov	r2, r3
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8011450:	697b      	ldr	r3, [r7, #20]
 8011452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	697a      	ldr	r2, [r7, #20]
 801145a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801145e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8011462:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011464:	2300      	movs	r3, #0
}
 8011466:	4618      	mov	r0, r3
 8011468:	371c      	adds	r7, #28
 801146a:	46bd      	mov	sp, r7
 801146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011470:	4770      	bx	lr
 8011472:	bf00      	nop
 8011474:	4f54300a 	.word	0x4f54300a

08011478 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011478:	b480      	push	{r7}
 801147a:	b085      	sub	sp, #20
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011480:	2300      	movs	r3, #0
 8011482:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	3301      	adds	r3, #1
 8011488:	60fb      	str	r3, [r7, #12]
 801148a:	4a13      	ldr	r2, [pc, #76]	; (80114d8 <USB_CoreReset+0x60>)
 801148c:	4293      	cmp	r3, r2
 801148e:	d901      	bls.n	8011494 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8011490:	2303      	movs	r3, #3
 8011492:	e01a      	b.n	80114ca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	691b      	ldr	r3, [r3, #16]
 8011498:	2b00      	cmp	r3, #0
 801149a:	daf3      	bge.n	8011484 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801149c:	2300      	movs	r3, #0
 801149e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	691b      	ldr	r3, [r3, #16]
 80114a4:	f043 0201 	orr.w	r2, r3, #1
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	3301      	adds	r3, #1
 80114b0:	60fb      	str	r3, [r7, #12]
 80114b2:	4a09      	ldr	r2, [pc, #36]	; (80114d8 <USB_CoreReset+0x60>)
 80114b4:	4293      	cmp	r3, r2
 80114b6:	d901      	bls.n	80114bc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80114b8:	2303      	movs	r3, #3
 80114ba:	e006      	b.n	80114ca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	691b      	ldr	r3, [r3, #16]
 80114c0:	f003 0301 	and.w	r3, r3, #1
 80114c4:	2b01      	cmp	r3, #1
 80114c6:	d0f1      	beq.n	80114ac <USB_CoreReset+0x34>

  return HAL_OK;
 80114c8:	2300      	movs	r3, #0
}
 80114ca:	4618      	mov	r0, r3
 80114cc:	3714      	adds	r7, #20
 80114ce:	46bd      	mov	sp, r7
 80114d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d4:	4770      	bx	lr
 80114d6:	bf00      	nop
 80114d8:	00030d40 	.word	0x00030d40

080114dc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80114e0:	4904      	ldr	r1, [pc, #16]	; (80114f4 <MX_FATFS_Init+0x18>)
 80114e2:	4805      	ldr	r0, [pc, #20]	; (80114f8 <MX_FATFS_Init+0x1c>)
 80114e4:	f004 fb1c 	bl	8015b20 <FATFS_LinkDriver>
 80114e8:	4603      	mov	r3, r0
 80114ea:	461a      	mov	r2, r3
 80114ec:	4b03      	ldr	r3, [pc, #12]	; (80114fc <MX_FATFS_Init+0x20>)
 80114ee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80114f0:	bf00      	nop
 80114f2:	bd80      	pop	{r7, pc}
 80114f4:	20006fcc 	.word	0x20006fcc
 80114f8:	2000006c 	.word	0x2000006c
 80114fc:	20006fd0 	.word	0x20006fd0

08011500 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011500:	b480      	push	{r7}
 8011502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011504:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8011506:	4618      	mov	r0, r3
 8011508:	46bd      	mov	sp, r7
 801150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150e:	4770      	bx	lr

08011510 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8011510:	b480      	push	{r7}
 8011512:	b083      	sub	sp, #12
 8011514:	af00      	add	r7, sp, #0
 8011516:	4603      	mov	r3, r0
 8011518:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 801151a:	4b06      	ldr	r3, [pc, #24]	; (8011534 <USER_initialize+0x24>)
 801151c:	2201      	movs	r2, #1
 801151e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8011520:	4b04      	ldr	r3, [pc, #16]	; (8011534 <USER_initialize+0x24>)
 8011522:	781b      	ldrb	r3, [r3, #0]
 8011524:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8011526:	4618      	mov	r0, r3
 8011528:	370c      	adds	r7, #12
 801152a:	46bd      	mov	sp, r7
 801152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011530:	4770      	bx	lr
 8011532:	bf00      	nop
 8011534:	20000069 	.word	0x20000069

08011538 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8011538:	b480      	push	{r7}
 801153a:	b083      	sub	sp, #12
 801153c:	af00      	add	r7, sp, #0
 801153e:	4603      	mov	r3, r0
 8011540:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8011542:	4b06      	ldr	r3, [pc, #24]	; (801155c <USER_status+0x24>)
 8011544:	2201      	movs	r2, #1
 8011546:	701a      	strb	r2, [r3, #0]
    return Stat;
 8011548:	4b04      	ldr	r3, [pc, #16]	; (801155c <USER_status+0x24>)
 801154a:	781b      	ldrb	r3, [r3, #0]
 801154c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 801154e:	4618      	mov	r0, r3
 8011550:	370c      	adds	r7, #12
 8011552:	46bd      	mov	sp, r7
 8011554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011558:	4770      	bx	lr
 801155a:	bf00      	nop
 801155c:	20000069 	.word	0x20000069

08011560 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8011560:	b480      	push	{r7}
 8011562:	b085      	sub	sp, #20
 8011564:	af00      	add	r7, sp, #0
 8011566:	60b9      	str	r1, [r7, #8]
 8011568:	607a      	str	r2, [r7, #4]
 801156a:	603b      	str	r3, [r7, #0]
 801156c:	4603      	mov	r3, r0
 801156e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8011570:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8011572:	4618      	mov	r0, r3
 8011574:	3714      	adds	r7, #20
 8011576:	46bd      	mov	sp, r7
 8011578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157c:	4770      	bx	lr

0801157e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801157e:	b480      	push	{r7}
 8011580:	b085      	sub	sp, #20
 8011582:	af00      	add	r7, sp, #0
 8011584:	60b9      	str	r1, [r7, #8]
 8011586:	607a      	str	r2, [r7, #4]
 8011588:	603b      	str	r3, [r7, #0]
 801158a:	4603      	mov	r3, r0
 801158c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 801158e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8011590:	4618      	mov	r0, r3
 8011592:	3714      	adds	r7, #20
 8011594:	46bd      	mov	sp, r7
 8011596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159a:	4770      	bx	lr

0801159c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 801159c:	b480      	push	{r7}
 801159e:	b085      	sub	sp, #20
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	4603      	mov	r3, r0
 80115a4:	603a      	str	r2, [r7, #0]
 80115a6:	71fb      	strb	r3, [r7, #7]
 80115a8:	460b      	mov	r3, r1
 80115aa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80115ac:	2301      	movs	r3, #1
 80115ae:	73fb      	strb	r3, [r7, #15]
    return res;
 80115b0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80115b2:	4618      	mov	r0, r3
 80115b4:	3714      	adds	r7, #20
 80115b6:	46bd      	mov	sp, r7
 80115b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115bc:	4770      	bx	lr

080115be <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80115be:	b580      	push	{r7, lr}
 80115c0:	b084      	sub	sp, #16
 80115c2:	af00      	add	r7, sp, #0
 80115c4:	6078      	str	r0, [r7, #4]
 80115c6:	460b      	mov	r3, r1
 80115c8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80115ca:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80115ce:	f008 fadb 	bl	8019b88 <USBD_static_malloc>
 80115d2:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d105      	bne.n	80115e6 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	2200      	movs	r2, #0
 80115de:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80115e2:	2302      	movs	r3, #2
 80115e4:	e066      	b.n	80116b4 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	68fa      	ldr	r2, [r7, #12]
 80115ea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	7c1b      	ldrb	r3, [r3, #16]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d119      	bne.n	801162a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80115f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80115fa:	2202      	movs	r2, #2
 80115fc:	2181      	movs	r1, #129	; 0x81
 80115fe:	6878      	ldr	r0, [r7, #4]
 8011600:	f008 f99f 	bl	8019942 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2201      	movs	r2, #1
 8011608:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801160a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801160e:	2202      	movs	r2, #2
 8011610:	2101      	movs	r1, #1
 8011612:	6878      	ldr	r0, [r7, #4]
 8011614:	f008 f995 	bl	8019942 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	2201      	movs	r2, #1
 801161c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	2210      	movs	r2, #16
 8011624:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8011628:	e016      	b.n	8011658 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801162a:	2340      	movs	r3, #64	; 0x40
 801162c:	2202      	movs	r2, #2
 801162e:	2181      	movs	r1, #129	; 0x81
 8011630:	6878      	ldr	r0, [r7, #4]
 8011632:	f008 f986 	bl	8019942 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	2201      	movs	r2, #1
 801163a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801163c:	2340      	movs	r3, #64	; 0x40
 801163e:	2202      	movs	r2, #2
 8011640:	2101      	movs	r1, #1
 8011642:	6878      	ldr	r0, [r7, #4]
 8011644:	f008 f97d 	bl	8019942 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	2201      	movs	r2, #1
 801164c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	2210      	movs	r2, #16
 8011654:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011658:	2308      	movs	r3, #8
 801165a:	2203      	movs	r2, #3
 801165c:	2182      	movs	r1, #130	; 0x82
 801165e:	6878      	ldr	r0, [r7, #4]
 8011660:	f008 f96f 	bl	8019942 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2201      	movs	r2, #1
 8011668:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	2200      	movs	r2, #0
 801167a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	2200      	movs	r2, #0
 8011682:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	7c1b      	ldrb	r3, [r3, #16]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d109      	bne.n	80116a2 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011694:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011698:	2101      	movs	r1, #1
 801169a:	6878      	ldr	r0, [r7, #4]
 801169c:	f008 fa40 	bl	8019b20 <USBD_LL_PrepareReceive>
 80116a0:	e007      	b.n	80116b2 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80116a8:	2340      	movs	r3, #64	; 0x40
 80116aa:	2101      	movs	r1, #1
 80116ac:	6878      	ldr	r0, [r7, #4]
 80116ae:	f008 fa37 	bl	8019b20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80116b2:	2300      	movs	r3, #0
}
 80116b4:	4618      	mov	r0, r3
 80116b6:	3710      	adds	r7, #16
 80116b8:	46bd      	mov	sp, r7
 80116ba:	bd80      	pop	{r7, pc}

080116bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b082      	sub	sp, #8
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
 80116c4:	460b      	mov	r3, r1
 80116c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80116c8:	2181      	movs	r1, #129	; 0x81
 80116ca:	6878      	ldr	r0, [r7, #4]
 80116cc:	f008 f95f 	bl	801998e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	2200      	movs	r2, #0
 80116d4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80116d6:	2101      	movs	r1, #1
 80116d8:	6878      	ldr	r0, [r7, #4]
 80116da:	f008 f958 	bl	801998e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	2200      	movs	r2, #0
 80116e2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80116e6:	2182      	movs	r1, #130	; 0x82
 80116e8:	6878      	ldr	r0, [r7, #4]
 80116ea:	f008 f950 	bl	801998e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	2200      	movs	r2, #0
 80116f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	2200      	movs	r2, #0
 80116fa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011704:	2b00      	cmp	r3, #0
 8011706:	d00e      	beq.n	8011726 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801170e:	685b      	ldr	r3, [r3, #4]
 8011710:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011718:	4618      	mov	r0, r3
 801171a:	f008 fa43 	bl	8019ba4 <USBD_static_free>
    pdev->pClassData = NULL;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2200      	movs	r2, #0
 8011722:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011726:	2300      	movs	r3, #0
}
 8011728:	4618      	mov	r0, r3
 801172a:	3708      	adds	r7, #8
 801172c:	46bd      	mov	sp, r7
 801172e:	bd80      	pop	{r7, pc}

08011730 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b086      	sub	sp, #24
 8011734:	af00      	add	r7, sp, #0
 8011736:	6078      	str	r0, [r7, #4]
 8011738:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011740:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8011742:	2300      	movs	r3, #0
 8011744:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8011746:	2300      	movs	r3, #0
 8011748:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801174a:	2300      	movs	r3, #0
 801174c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801174e:	693b      	ldr	r3, [r7, #16]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d101      	bne.n	8011758 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8011754:	2303      	movs	r3, #3
 8011756:	e0af      	b.n	80118b8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	781b      	ldrb	r3, [r3, #0]
 801175c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011760:	2b00      	cmp	r3, #0
 8011762:	d03f      	beq.n	80117e4 <USBD_CDC_Setup+0xb4>
 8011764:	2b20      	cmp	r3, #32
 8011766:	f040 809f 	bne.w	80118a8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	88db      	ldrh	r3, [r3, #6]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d02e      	beq.n	80117d0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	781b      	ldrb	r3, [r3, #0]
 8011776:	b25b      	sxtb	r3, r3
 8011778:	2b00      	cmp	r3, #0
 801177a:	da16      	bge.n	80117aa <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011782:	689b      	ldr	r3, [r3, #8]
 8011784:	683a      	ldr	r2, [r7, #0]
 8011786:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8011788:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801178a:	683a      	ldr	r2, [r7, #0]
 801178c:	88d2      	ldrh	r2, [r2, #6]
 801178e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	88db      	ldrh	r3, [r3, #6]
 8011794:	2b07      	cmp	r3, #7
 8011796:	bf28      	it	cs
 8011798:	2307      	movcs	r3, #7
 801179a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801179c:	693b      	ldr	r3, [r7, #16]
 801179e:	89fa      	ldrh	r2, [r7, #14]
 80117a0:	4619      	mov	r1, r3
 80117a2:	6878      	ldr	r0, [r7, #4]
 80117a4:	f001 fae9 	bl	8012d7a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80117a8:	e085      	b.n	80118b6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	785a      	ldrb	r2, [r3, #1]
 80117ae:	693b      	ldr	r3, [r7, #16]
 80117b0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80117b4:	683b      	ldr	r3, [r7, #0]
 80117b6:	88db      	ldrh	r3, [r3, #6]
 80117b8:	b2da      	uxtb	r2, r3
 80117ba:	693b      	ldr	r3, [r7, #16]
 80117bc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80117c0:	6939      	ldr	r1, [r7, #16]
 80117c2:	683b      	ldr	r3, [r7, #0]
 80117c4:	88db      	ldrh	r3, [r3, #6]
 80117c6:	461a      	mov	r2, r3
 80117c8:	6878      	ldr	r0, [r7, #4]
 80117ca:	f001 fb02 	bl	8012dd2 <USBD_CtlPrepareRx>
      break;
 80117ce:	e072      	b.n	80118b6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80117d6:	689b      	ldr	r3, [r3, #8]
 80117d8:	683a      	ldr	r2, [r7, #0]
 80117da:	7850      	ldrb	r0, [r2, #1]
 80117dc:	2200      	movs	r2, #0
 80117de:	6839      	ldr	r1, [r7, #0]
 80117e0:	4798      	blx	r3
      break;
 80117e2:	e068      	b.n	80118b6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80117e4:	683b      	ldr	r3, [r7, #0]
 80117e6:	785b      	ldrb	r3, [r3, #1]
 80117e8:	2b0b      	cmp	r3, #11
 80117ea:	d852      	bhi.n	8011892 <USBD_CDC_Setup+0x162>
 80117ec:	a201      	add	r2, pc, #4	; (adr r2, 80117f4 <USBD_CDC_Setup+0xc4>)
 80117ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117f2:	bf00      	nop
 80117f4:	08011825 	.word	0x08011825
 80117f8:	080118a1 	.word	0x080118a1
 80117fc:	08011893 	.word	0x08011893
 8011800:	08011893 	.word	0x08011893
 8011804:	08011893 	.word	0x08011893
 8011808:	08011893 	.word	0x08011893
 801180c:	08011893 	.word	0x08011893
 8011810:	08011893 	.word	0x08011893
 8011814:	08011893 	.word	0x08011893
 8011818:	08011893 	.word	0x08011893
 801181c:	0801184f 	.word	0x0801184f
 8011820:	08011879 	.word	0x08011879
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801182a:	b2db      	uxtb	r3, r3
 801182c:	2b03      	cmp	r3, #3
 801182e:	d107      	bne.n	8011840 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011830:	f107 030a 	add.w	r3, r7, #10
 8011834:	2202      	movs	r2, #2
 8011836:	4619      	mov	r1, r3
 8011838:	6878      	ldr	r0, [r7, #4]
 801183a:	f001 fa9e 	bl	8012d7a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801183e:	e032      	b.n	80118a6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011840:	6839      	ldr	r1, [r7, #0]
 8011842:	6878      	ldr	r0, [r7, #4]
 8011844:	f001 fa28 	bl	8012c98 <USBD_CtlError>
            ret = USBD_FAIL;
 8011848:	2303      	movs	r3, #3
 801184a:	75fb      	strb	r3, [r7, #23]
          break;
 801184c:	e02b      	b.n	80118a6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011854:	b2db      	uxtb	r3, r3
 8011856:	2b03      	cmp	r3, #3
 8011858:	d107      	bne.n	801186a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801185a:	f107 030d 	add.w	r3, r7, #13
 801185e:	2201      	movs	r2, #1
 8011860:	4619      	mov	r1, r3
 8011862:	6878      	ldr	r0, [r7, #4]
 8011864:	f001 fa89 	bl	8012d7a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011868:	e01d      	b.n	80118a6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801186a:	6839      	ldr	r1, [r7, #0]
 801186c:	6878      	ldr	r0, [r7, #4]
 801186e:	f001 fa13 	bl	8012c98 <USBD_CtlError>
            ret = USBD_FAIL;
 8011872:	2303      	movs	r3, #3
 8011874:	75fb      	strb	r3, [r7, #23]
          break;
 8011876:	e016      	b.n	80118a6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801187e:	b2db      	uxtb	r3, r3
 8011880:	2b03      	cmp	r3, #3
 8011882:	d00f      	beq.n	80118a4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8011884:	6839      	ldr	r1, [r7, #0]
 8011886:	6878      	ldr	r0, [r7, #4]
 8011888:	f001 fa06 	bl	8012c98 <USBD_CtlError>
            ret = USBD_FAIL;
 801188c:	2303      	movs	r3, #3
 801188e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011890:	e008      	b.n	80118a4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011892:	6839      	ldr	r1, [r7, #0]
 8011894:	6878      	ldr	r0, [r7, #4]
 8011896:	f001 f9ff 	bl	8012c98 <USBD_CtlError>
          ret = USBD_FAIL;
 801189a:	2303      	movs	r3, #3
 801189c:	75fb      	strb	r3, [r7, #23]
          break;
 801189e:	e002      	b.n	80118a6 <USBD_CDC_Setup+0x176>
          break;
 80118a0:	bf00      	nop
 80118a2:	e008      	b.n	80118b6 <USBD_CDC_Setup+0x186>
          break;
 80118a4:	bf00      	nop
      }
      break;
 80118a6:	e006      	b.n	80118b6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80118a8:	6839      	ldr	r1, [r7, #0]
 80118aa:	6878      	ldr	r0, [r7, #4]
 80118ac:	f001 f9f4 	bl	8012c98 <USBD_CtlError>
      ret = USBD_FAIL;
 80118b0:	2303      	movs	r3, #3
 80118b2:	75fb      	strb	r3, [r7, #23]
      break;
 80118b4:	bf00      	nop
  }

  return (uint8_t)ret;
 80118b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80118b8:	4618      	mov	r0, r3
 80118ba:	3718      	adds	r7, #24
 80118bc:	46bd      	mov	sp, r7
 80118be:	bd80      	pop	{r7, pc}

080118c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b084      	sub	sp, #16
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
 80118c8:	460b      	mov	r3, r1
 80118ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80118d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d101      	bne.n	80118e2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80118de:	2303      	movs	r3, #3
 80118e0:	e04f      	b.n	8011982 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80118e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80118ea:	78fa      	ldrb	r2, [r7, #3]
 80118ec:	6879      	ldr	r1, [r7, #4]
 80118ee:	4613      	mov	r3, r2
 80118f0:	009b      	lsls	r3, r3, #2
 80118f2:	4413      	add	r3, r2
 80118f4:	009b      	lsls	r3, r3, #2
 80118f6:	440b      	add	r3, r1
 80118f8:	3318      	adds	r3, #24
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d029      	beq.n	8011954 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011900:	78fa      	ldrb	r2, [r7, #3]
 8011902:	6879      	ldr	r1, [r7, #4]
 8011904:	4613      	mov	r3, r2
 8011906:	009b      	lsls	r3, r3, #2
 8011908:	4413      	add	r3, r2
 801190a:	009b      	lsls	r3, r3, #2
 801190c:	440b      	add	r3, r1
 801190e:	3318      	adds	r3, #24
 8011910:	681a      	ldr	r2, [r3, #0]
 8011912:	78f9      	ldrb	r1, [r7, #3]
 8011914:	68f8      	ldr	r0, [r7, #12]
 8011916:	460b      	mov	r3, r1
 8011918:	00db      	lsls	r3, r3, #3
 801191a:	1a5b      	subs	r3, r3, r1
 801191c:	009b      	lsls	r3, r3, #2
 801191e:	4403      	add	r3, r0
 8011920:	3344      	adds	r3, #68	; 0x44
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	fbb2 f1f3 	udiv	r1, r2, r3
 8011928:	fb03 f301 	mul.w	r3, r3, r1
 801192c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801192e:	2b00      	cmp	r3, #0
 8011930:	d110      	bne.n	8011954 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8011932:	78fa      	ldrb	r2, [r7, #3]
 8011934:	6879      	ldr	r1, [r7, #4]
 8011936:	4613      	mov	r3, r2
 8011938:	009b      	lsls	r3, r3, #2
 801193a:	4413      	add	r3, r2
 801193c:	009b      	lsls	r3, r3, #2
 801193e:	440b      	add	r3, r1
 8011940:	3318      	adds	r3, #24
 8011942:	2200      	movs	r2, #0
 8011944:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011946:	78f9      	ldrb	r1, [r7, #3]
 8011948:	2300      	movs	r3, #0
 801194a:	2200      	movs	r2, #0
 801194c:	6878      	ldr	r0, [r7, #4]
 801194e:	f008 f8c6 	bl	8019ade <USBD_LL_Transmit>
 8011952:	e015      	b.n	8011980 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8011954:	68bb      	ldr	r3, [r7, #8]
 8011956:	2200      	movs	r2, #0
 8011958:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011962:	691b      	ldr	r3, [r3, #16]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d00b      	beq.n	8011980 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801196e:	691b      	ldr	r3, [r3, #16]
 8011970:	68ba      	ldr	r2, [r7, #8]
 8011972:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8011976:	68ba      	ldr	r2, [r7, #8]
 8011978:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801197c:	78fa      	ldrb	r2, [r7, #3]
 801197e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011980:	2300      	movs	r3, #0
}
 8011982:	4618      	mov	r0, r3
 8011984:	3710      	adds	r7, #16
 8011986:	46bd      	mov	sp, r7
 8011988:	bd80      	pop	{r7, pc}

0801198a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801198a:	b580      	push	{r7, lr}
 801198c:	b084      	sub	sp, #16
 801198e:	af00      	add	r7, sp, #0
 8011990:	6078      	str	r0, [r7, #4]
 8011992:	460b      	mov	r3, r1
 8011994:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801199c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d101      	bne.n	80119ac <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80119a8:	2303      	movs	r3, #3
 80119aa:	e015      	b.n	80119d8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80119ac:	78fb      	ldrb	r3, [r7, #3]
 80119ae:	4619      	mov	r1, r3
 80119b0:	6878      	ldr	r0, [r7, #4]
 80119b2:	f008 f8d6 	bl	8019b62 <USBD_LL_GetRxDataSize>
 80119b6:	4602      	mov	r2, r0
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80119c4:	68db      	ldr	r3, [r3, #12]
 80119c6:	68fa      	ldr	r2, [r7, #12]
 80119c8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80119cc:	68fa      	ldr	r2, [r7, #12]
 80119ce:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80119d2:	4611      	mov	r1, r2
 80119d4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80119d6:	2300      	movs	r3, #0
}
 80119d8:	4618      	mov	r0, r3
 80119da:	3710      	adds	r7, #16
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}

080119e0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b084      	sub	sp, #16
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80119ee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d101      	bne.n	80119fa <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80119f6:	2303      	movs	r3, #3
 80119f8:	e01b      	b.n	8011a32 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d015      	beq.n	8011a30 <USBD_CDC_EP0_RxReady+0x50>
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011a0a:	2bff      	cmp	r3, #255	; 0xff
 8011a0c:	d010      	beq.n	8011a30 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011a14:	689b      	ldr	r3, [r3, #8]
 8011a16:	68fa      	ldr	r2, [r7, #12]
 8011a18:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8011a1c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011a1e:	68fa      	ldr	r2, [r7, #12]
 8011a20:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011a24:	b292      	uxth	r2, r2
 8011a26:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	22ff      	movs	r2, #255	; 0xff
 8011a2c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8011a30:	2300      	movs	r3, #0
}
 8011a32:	4618      	mov	r0, r3
 8011a34:	3710      	adds	r7, #16
 8011a36:	46bd      	mov	sp, r7
 8011a38:	bd80      	pop	{r7, pc}
	...

08011a3c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011a3c:	b480      	push	{r7}
 8011a3e:	b083      	sub	sp, #12
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2243      	movs	r2, #67	; 0x43
 8011a48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8011a4a:	4b03      	ldr	r3, [pc, #12]	; (8011a58 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	370c      	adds	r7, #12
 8011a50:	46bd      	mov	sp, r7
 8011a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a56:	4770      	bx	lr
 8011a58:	20000108 	.word	0x20000108

08011a5c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011a5c:	b480      	push	{r7}
 8011a5e:	b083      	sub	sp, #12
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2243      	movs	r2, #67	; 0x43
 8011a68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8011a6a:	4b03      	ldr	r3, [pc, #12]	; (8011a78 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	370c      	adds	r7, #12
 8011a70:	46bd      	mov	sp, r7
 8011a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a76:	4770      	bx	lr
 8011a78:	200000c4 	.word	0x200000c4

08011a7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011a7c:	b480      	push	{r7}
 8011a7e:	b083      	sub	sp, #12
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	2243      	movs	r2, #67	; 0x43
 8011a88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8011a8a:	4b03      	ldr	r3, [pc, #12]	; (8011a98 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	370c      	adds	r7, #12
 8011a90:	46bd      	mov	sp, r7
 8011a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a96:	4770      	bx	lr
 8011a98:	2000014c 	.word	0x2000014c

08011a9c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011a9c:	b480      	push	{r7}
 8011a9e:	b083      	sub	sp, #12
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	220a      	movs	r2, #10
 8011aa8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011aaa:	4b03      	ldr	r3, [pc, #12]	; (8011ab8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011aac:	4618      	mov	r0, r3
 8011aae:	370c      	adds	r7, #12
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab6:	4770      	bx	lr
 8011ab8:	20000080 	.word	0x20000080

08011abc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011abc:	b480      	push	{r7}
 8011abe:	b083      	sub	sp, #12
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
 8011ac4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011ac6:	683b      	ldr	r3, [r7, #0]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d101      	bne.n	8011ad0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011acc:	2303      	movs	r3, #3
 8011ace:	e004      	b.n	8011ada <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	683a      	ldr	r2, [r7, #0]
 8011ad4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011ad8:	2300      	movs	r3, #0
}
 8011ada:	4618      	mov	r0, r3
 8011adc:	370c      	adds	r7, #12
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae4:	4770      	bx	lr

08011ae6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011ae6:	b480      	push	{r7}
 8011ae8:	b087      	sub	sp, #28
 8011aea:	af00      	add	r7, sp, #0
 8011aec:	60f8      	str	r0, [r7, #12]
 8011aee:	60b9      	str	r1, [r7, #8]
 8011af0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011af8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8011afa:	697b      	ldr	r3, [r7, #20]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d101      	bne.n	8011b04 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011b00:	2303      	movs	r3, #3
 8011b02:	e008      	b.n	8011b16 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8011b04:	697b      	ldr	r3, [r7, #20]
 8011b06:	68ba      	ldr	r2, [r7, #8]
 8011b08:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011b0c:	697b      	ldr	r3, [r7, #20]
 8011b0e:	687a      	ldr	r2, [r7, #4]
 8011b10:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8011b14:	2300      	movs	r3, #0
}
 8011b16:	4618      	mov	r0, r3
 8011b18:	371c      	adds	r7, #28
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b20:	4770      	bx	lr

08011b22 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011b22:	b480      	push	{r7}
 8011b24:	b085      	sub	sp, #20
 8011b26:	af00      	add	r7, sp, #0
 8011b28:	6078      	str	r0, [r7, #4]
 8011b2a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b32:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d101      	bne.n	8011b3e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8011b3a:	2303      	movs	r3, #3
 8011b3c:	e004      	b.n	8011b48 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	683a      	ldr	r2, [r7, #0]
 8011b42:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011b46:	2300      	movs	r3, #0
}
 8011b48:	4618      	mov	r0, r3
 8011b4a:	3714      	adds	r7, #20
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b52:	4770      	bx	lr

08011b54 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b084      	sub	sp, #16
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d101      	bne.n	8011b72 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011b6e:	2303      	movs	r3, #3
 8011b70:	e016      	b.n	8011ba0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	7c1b      	ldrb	r3, [r3, #16]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d109      	bne.n	8011b8e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011b80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011b84:	2101      	movs	r1, #1
 8011b86:	6878      	ldr	r0, [r7, #4]
 8011b88:	f007 ffca 	bl	8019b20 <USBD_LL_PrepareReceive>
 8011b8c:	e007      	b.n	8011b9e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011b94:	2340      	movs	r3, #64	; 0x40
 8011b96:	2101      	movs	r1, #1
 8011b98:	6878      	ldr	r0, [r7, #4]
 8011b9a:	f007 ffc1 	bl	8019b20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011b9e:	2300      	movs	r3, #0
}
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	3710      	adds	r7, #16
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	bd80      	pop	{r7, pc}

08011ba8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b086      	sub	sp, #24
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	60f8      	str	r0, [r7, #12]
 8011bb0:	60b9      	str	r1, [r7, #8]
 8011bb2:	4613      	mov	r3, r2
 8011bb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d101      	bne.n	8011bc0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011bbc:	2303      	movs	r3, #3
 8011bbe:	e01f      	b.n	8011c00 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	2200      	movs	r2, #0
 8011bcc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011bd8:	68bb      	ldr	r3, [r7, #8]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d003      	beq.n	8011be6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	68ba      	ldr	r2, [r7, #8]
 8011be2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	2201      	movs	r2, #1
 8011bea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	79fa      	ldrb	r2, [r7, #7]
 8011bf2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011bf4:	68f8      	ldr	r0, [r7, #12]
 8011bf6:	f007 fe3d 	bl	8019874 <USBD_LL_Init>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c00:	4618      	mov	r0, r3
 8011c02:	3718      	adds	r7, #24
 8011c04:	46bd      	mov	sp, r7
 8011c06:	bd80      	pop	{r7, pc}

08011c08 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b084      	sub	sp, #16
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
 8011c10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011c12:	2300      	movs	r3, #0
 8011c14:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011c16:	683b      	ldr	r3, [r7, #0]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d101      	bne.n	8011c20 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011c1c:	2303      	movs	r3, #3
 8011c1e:	e016      	b.n	8011c4e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	683a      	ldr	r2, [r7, #0]
 8011c24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d00b      	beq.n	8011c4c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c3c:	f107 020e 	add.w	r2, r7, #14
 8011c40:	4610      	mov	r0, r2
 8011c42:	4798      	blx	r3
 8011c44:	4602      	mov	r2, r0
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8011c4c:	2300      	movs	r3, #0
}
 8011c4e:	4618      	mov	r0, r3
 8011c50:	3710      	adds	r7, #16
 8011c52:	46bd      	mov	sp, r7
 8011c54:	bd80      	pop	{r7, pc}

08011c56 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011c56:	b580      	push	{r7, lr}
 8011c58:	b082      	sub	sp, #8
 8011c5a:	af00      	add	r7, sp, #0
 8011c5c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f007 fe54 	bl	801990c <USBD_LL_Start>
 8011c64:	4603      	mov	r3, r0
}
 8011c66:	4618      	mov	r0, r3
 8011c68:	3708      	adds	r7, #8
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	bd80      	pop	{r7, pc}

08011c6e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011c6e:	b480      	push	{r7}
 8011c70:	b083      	sub	sp, #12
 8011c72:	af00      	add	r7, sp, #0
 8011c74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011c76:	2300      	movs	r3, #0
}
 8011c78:	4618      	mov	r0, r3
 8011c7a:	370c      	adds	r7, #12
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c82:	4770      	bx	lr

08011c84 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b084      	sub	sp, #16
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
 8011c8c:	460b      	mov	r3, r1
 8011c8e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011c90:	2303      	movs	r3, #3
 8011c92:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d009      	beq.n	8011cb2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	78fa      	ldrb	r2, [r7, #3]
 8011ca8:	4611      	mov	r1, r2
 8011caa:	6878      	ldr	r0, [r7, #4]
 8011cac:	4798      	blx	r3
 8011cae:	4603      	mov	r3, r0
 8011cb0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	3710      	adds	r7, #16
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	bd80      	pop	{r7, pc}

08011cbc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b082      	sub	sp, #8
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
 8011cc4:	460b      	mov	r3, r1
 8011cc6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d007      	beq.n	8011ce2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cd8:	685b      	ldr	r3, [r3, #4]
 8011cda:	78fa      	ldrb	r2, [r7, #3]
 8011cdc:	4611      	mov	r1, r2
 8011cde:	6878      	ldr	r0, [r7, #4]
 8011ce0:	4798      	blx	r3
  }

  return USBD_OK;
 8011ce2:	2300      	movs	r3, #0
}
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	3708      	adds	r7, #8
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	bd80      	pop	{r7, pc}

08011cec <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b084      	sub	sp, #16
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
 8011cf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011cfc:	6839      	ldr	r1, [r7, #0]
 8011cfe:	4618      	mov	r0, r3
 8011d00:	f000 ff90 	bl	8012c24 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	2201      	movs	r2, #1
 8011d08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011d12:	461a      	mov	r2, r3
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011d20:	f003 031f 	and.w	r3, r3, #31
 8011d24:	2b02      	cmp	r3, #2
 8011d26:	d01a      	beq.n	8011d5e <USBD_LL_SetupStage+0x72>
 8011d28:	2b02      	cmp	r3, #2
 8011d2a:	d822      	bhi.n	8011d72 <USBD_LL_SetupStage+0x86>
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d002      	beq.n	8011d36 <USBD_LL_SetupStage+0x4a>
 8011d30:	2b01      	cmp	r3, #1
 8011d32:	d00a      	beq.n	8011d4a <USBD_LL_SetupStage+0x5e>
 8011d34:	e01d      	b.n	8011d72 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011d3c:	4619      	mov	r1, r3
 8011d3e:	6878      	ldr	r0, [r7, #4]
 8011d40:	f000 fa62 	bl	8012208 <USBD_StdDevReq>
 8011d44:	4603      	mov	r3, r0
 8011d46:	73fb      	strb	r3, [r7, #15]
      break;
 8011d48:	e020      	b.n	8011d8c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011d50:	4619      	mov	r1, r3
 8011d52:	6878      	ldr	r0, [r7, #4]
 8011d54:	f000 fac6 	bl	80122e4 <USBD_StdItfReq>
 8011d58:	4603      	mov	r3, r0
 8011d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8011d5c:	e016      	b.n	8011d8c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011d64:	4619      	mov	r1, r3
 8011d66:	6878      	ldr	r0, [r7, #4]
 8011d68:	f000 fb05 	bl	8012376 <USBD_StdEPReq>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8011d70:	e00c      	b.n	8011d8c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011d78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011d7c:	b2db      	uxtb	r3, r3
 8011d7e:	4619      	mov	r1, r3
 8011d80:	6878      	ldr	r0, [r7, #4]
 8011d82:	f007 fe23 	bl	80199cc <USBD_LL_StallEP>
 8011d86:	4603      	mov	r3, r0
 8011d88:	73fb      	strb	r3, [r7, #15]
      break;
 8011d8a:	bf00      	nop
  }

  return ret;
 8011d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d8e:	4618      	mov	r0, r3
 8011d90:	3710      	adds	r7, #16
 8011d92:	46bd      	mov	sp, r7
 8011d94:	bd80      	pop	{r7, pc}

08011d96 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011d96:	b580      	push	{r7, lr}
 8011d98:	b086      	sub	sp, #24
 8011d9a:	af00      	add	r7, sp, #0
 8011d9c:	60f8      	str	r0, [r7, #12]
 8011d9e:	460b      	mov	r3, r1
 8011da0:	607a      	str	r2, [r7, #4]
 8011da2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011da4:	7afb      	ldrb	r3, [r7, #11]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d138      	bne.n	8011e1c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011db0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011db8:	2b03      	cmp	r3, #3
 8011dba:	d14a      	bne.n	8011e52 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011dbc:	693b      	ldr	r3, [r7, #16]
 8011dbe:	689a      	ldr	r2, [r3, #8]
 8011dc0:	693b      	ldr	r3, [r7, #16]
 8011dc2:	68db      	ldr	r3, [r3, #12]
 8011dc4:	429a      	cmp	r2, r3
 8011dc6:	d913      	bls.n	8011df0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011dc8:	693b      	ldr	r3, [r7, #16]
 8011dca:	689a      	ldr	r2, [r3, #8]
 8011dcc:	693b      	ldr	r3, [r7, #16]
 8011dce:	68db      	ldr	r3, [r3, #12]
 8011dd0:	1ad2      	subs	r2, r2, r3
 8011dd2:	693b      	ldr	r3, [r7, #16]
 8011dd4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011dd6:	693b      	ldr	r3, [r7, #16]
 8011dd8:	68da      	ldr	r2, [r3, #12]
 8011dda:	693b      	ldr	r3, [r7, #16]
 8011ddc:	689b      	ldr	r3, [r3, #8]
 8011dde:	4293      	cmp	r3, r2
 8011de0:	bf28      	it	cs
 8011de2:	4613      	movcs	r3, r2
 8011de4:	461a      	mov	r2, r3
 8011de6:	6879      	ldr	r1, [r7, #4]
 8011de8:	68f8      	ldr	r0, [r7, #12]
 8011dea:	f001 f80f 	bl	8012e0c <USBD_CtlContinueRx>
 8011dee:	e030      	b.n	8011e52 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011df6:	b2db      	uxtb	r3, r3
 8011df8:	2b03      	cmp	r3, #3
 8011dfa:	d10b      	bne.n	8011e14 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e02:	691b      	ldr	r3, [r3, #16]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d005      	beq.n	8011e14 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e0e:	691b      	ldr	r3, [r3, #16]
 8011e10:	68f8      	ldr	r0, [r7, #12]
 8011e12:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011e14:	68f8      	ldr	r0, [r7, #12]
 8011e16:	f001 f80a 	bl	8012e2e <USBD_CtlSendStatus>
 8011e1a:	e01a      	b.n	8011e52 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e22:	b2db      	uxtb	r3, r3
 8011e24:	2b03      	cmp	r3, #3
 8011e26:	d114      	bne.n	8011e52 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e2e:	699b      	ldr	r3, [r3, #24]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d00e      	beq.n	8011e52 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e3a:	699b      	ldr	r3, [r3, #24]
 8011e3c:	7afa      	ldrb	r2, [r7, #11]
 8011e3e:	4611      	mov	r1, r2
 8011e40:	68f8      	ldr	r0, [r7, #12]
 8011e42:	4798      	blx	r3
 8011e44:	4603      	mov	r3, r0
 8011e46:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011e48:	7dfb      	ldrb	r3, [r7, #23]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d001      	beq.n	8011e52 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8011e4e:	7dfb      	ldrb	r3, [r7, #23]
 8011e50:	e000      	b.n	8011e54 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8011e52:	2300      	movs	r3, #0
}
 8011e54:	4618      	mov	r0, r3
 8011e56:	3718      	adds	r7, #24
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	bd80      	pop	{r7, pc}

08011e5c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b086      	sub	sp, #24
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	60f8      	str	r0, [r7, #12]
 8011e64:	460b      	mov	r3, r1
 8011e66:	607a      	str	r2, [r7, #4]
 8011e68:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011e6a:	7afb      	ldrb	r3, [r7, #11]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d16b      	bne.n	8011f48 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	3314      	adds	r3, #20
 8011e74:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011e7c:	2b02      	cmp	r3, #2
 8011e7e:	d156      	bne.n	8011f2e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8011e80:	693b      	ldr	r3, [r7, #16]
 8011e82:	689a      	ldr	r2, [r3, #8]
 8011e84:	693b      	ldr	r3, [r7, #16]
 8011e86:	68db      	ldr	r3, [r3, #12]
 8011e88:	429a      	cmp	r2, r3
 8011e8a:	d914      	bls.n	8011eb6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011e8c:	693b      	ldr	r3, [r7, #16]
 8011e8e:	689a      	ldr	r2, [r3, #8]
 8011e90:	693b      	ldr	r3, [r7, #16]
 8011e92:	68db      	ldr	r3, [r3, #12]
 8011e94:	1ad2      	subs	r2, r2, r3
 8011e96:	693b      	ldr	r3, [r7, #16]
 8011e98:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011e9a:	693b      	ldr	r3, [r7, #16]
 8011e9c:	689b      	ldr	r3, [r3, #8]
 8011e9e:	461a      	mov	r2, r3
 8011ea0:	6879      	ldr	r1, [r7, #4]
 8011ea2:	68f8      	ldr	r0, [r7, #12]
 8011ea4:	f000 ff84 	bl	8012db0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	2200      	movs	r2, #0
 8011eac:	2100      	movs	r1, #0
 8011eae:	68f8      	ldr	r0, [r7, #12]
 8011eb0:	f007 fe36 	bl	8019b20 <USBD_LL_PrepareReceive>
 8011eb4:	e03b      	b.n	8011f2e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011eb6:	693b      	ldr	r3, [r7, #16]
 8011eb8:	68da      	ldr	r2, [r3, #12]
 8011eba:	693b      	ldr	r3, [r7, #16]
 8011ebc:	689b      	ldr	r3, [r3, #8]
 8011ebe:	429a      	cmp	r2, r3
 8011ec0:	d11c      	bne.n	8011efc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011ec2:	693b      	ldr	r3, [r7, #16]
 8011ec4:	685a      	ldr	r2, [r3, #4]
 8011ec6:	693b      	ldr	r3, [r7, #16]
 8011ec8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011eca:	429a      	cmp	r2, r3
 8011ecc:	d316      	bcc.n	8011efc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011ece:	693b      	ldr	r3, [r7, #16]
 8011ed0:	685a      	ldr	r2, [r3, #4]
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011ed8:	429a      	cmp	r2, r3
 8011eda:	d20f      	bcs.n	8011efc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011edc:	2200      	movs	r2, #0
 8011ede:	2100      	movs	r1, #0
 8011ee0:	68f8      	ldr	r0, [r7, #12]
 8011ee2:	f000 ff65 	bl	8012db0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	2200      	movs	r2, #0
 8011eea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011eee:	2300      	movs	r3, #0
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	2100      	movs	r1, #0
 8011ef4:	68f8      	ldr	r0, [r7, #12]
 8011ef6:	f007 fe13 	bl	8019b20 <USBD_LL_PrepareReceive>
 8011efa:	e018      	b.n	8011f2e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f02:	b2db      	uxtb	r3, r3
 8011f04:	2b03      	cmp	r3, #3
 8011f06:	d10b      	bne.n	8011f20 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f0e:	68db      	ldr	r3, [r3, #12]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d005      	beq.n	8011f20 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f1a:	68db      	ldr	r3, [r3, #12]
 8011f1c:	68f8      	ldr	r0, [r7, #12]
 8011f1e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011f20:	2180      	movs	r1, #128	; 0x80
 8011f22:	68f8      	ldr	r0, [r7, #12]
 8011f24:	f007 fd52 	bl	80199cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011f28:	68f8      	ldr	r0, [r7, #12]
 8011f2a:	f000 ff93 	bl	8012e54 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011f34:	2b01      	cmp	r3, #1
 8011f36:	d122      	bne.n	8011f7e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011f38:	68f8      	ldr	r0, [r7, #12]
 8011f3a:	f7ff fe98 	bl	8011c6e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	2200      	movs	r2, #0
 8011f42:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011f46:	e01a      	b.n	8011f7e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f4e:	b2db      	uxtb	r3, r3
 8011f50:	2b03      	cmp	r3, #3
 8011f52:	d114      	bne.n	8011f7e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f5a:	695b      	ldr	r3, [r3, #20]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d00e      	beq.n	8011f7e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f66:	695b      	ldr	r3, [r3, #20]
 8011f68:	7afa      	ldrb	r2, [r7, #11]
 8011f6a:	4611      	mov	r1, r2
 8011f6c:	68f8      	ldr	r0, [r7, #12]
 8011f6e:	4798      	blx	r3
 8011f70:	4603      	mov	r3, r0
 8011f72:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011f74:	7dfb      	ldrb	r3, [r7, #23]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d001      	beq.n	8011f7e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8011f7a:	7dfb      	ldrb	r3, [r7, #23]
 8011f7c:	e000      	b.n	8011f80 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8011f7e:	2300      	movs	r3, #0
}
 8011f80:	4618      	mov	r0, r3
 8011f82:	3718      	adds	r7, #24
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bd80      	pop	{r7, pc}

08011f88 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b082      	sub	sp, #8
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	2201      	movs	r2, #1
 8011f94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2200      	movs	r2, #0
 8011faa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d101      	bne.n	8011fbc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8011fb8:	2303      	movs	r3, #3
 8011fba:	e02f      	b.n	801201c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d00f      	beq.n	8011fe6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fcc:	685b      	ldr	r3, [r3, #4]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d009      	beq.n	8011fe6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fd8:	685b      	ldr	r3, [r3, #4]
 8011fda:	687a      	ldr	r2, [r7, #4]
 8011fdc:	6852      	ldr	r2, [r2, #4]
 8011fde:	b2d2      	uxtb	r2, r2
 8011fe0:	4611      	mov	r1, r2
 8011fe2:	6878      	ldr	r0, [r7, #4]
 8011fe4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011fe6:	2340      	movs	r3, #64	; 0x40
 8011fe8:	2200      	movs	r2, #0
 8011fea:	2100      	movs	r1, #0
 8011fec:	6878      	ldr	r0, [r7, #4]
 8011fee:	f007 fca8 	bl	8019942 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	2201      	movs	r2, #1
 8011ff6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	2240      	movs	r2, #64	; 0x40
 8011ffe:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012002:	2340      	movs	r3, #64	; 0x40
 8012004:	2200      	movs	r2, #0
 8012006:	2180      	movs	r1, #128	; 0x80
 8012008:	6878      	ldr	r0, [r7, #4]
 801200a:	f007 fc9a 	bl	8019942 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	2201      	movs	r2, #1
 8012012:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	2240      	movs	r2, #64	; 0x40
 8012018:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801201a:	2300      	movs	r3, #0
}
 801201c:	4618      	mov	r0, r3
 801201e:	3708      	adds	r7, #8
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}

08012024 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012024:	b480      	push	{r7}
 8012026:	b083      	sub	sp, #12
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
 801202c:	460b      	mov	r3, r1
 801202e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	78fa      	ldrb	r2, [r7, #3]
 8012034:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012036:	2300      	movs	r3, #0
}
 8012038:	4618      	mov	r0, r3
 801203a:	370c      	adds	r7, #12
 801203c:	46bd      	mov	sp, r7
 801203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012042:	4770      	bx	lr

08012044 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012044:	b480      	push	{r7}
 8012046:	b083      	sub	sp, #12
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012052:	b2da      	uxtb	r2, r3
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	2204      	movs	r2, #4
 801205e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8012062:	2300      	movs	r3, #0
}
 8012064:	4618      	mov	r0, r3
 8012066:	370c      	adds	r7, #12
 8012068:	46bd      	mov	sp, r7
 801206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206e:	4770      	bx	lr

08012070 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012070:	b480      	push	{r7}
 8012072:	b083      	sub	sp, #12
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801207e:	b2db      	uxtb	r3, r3
 8012080:	2b04      	cmp	r3, #4
 8012082:	d106      	bne.n	8012092 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801208a:	b2da      	uxtb	r2, r3
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8012092:	2300      	movs	r3, #0
}
 8012094:	4618      	mov	r0, r3
 8012096:	370c      	adds	r7, #12
 8012098:	46bd      	mov	sp, r7
 801209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209e:	4770      	bx	lr

080120a0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b082      	sub	sp, #8
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d101      	bne.n	80120b6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80120b2:	2303      	movs	r3, #3
 80120b4:	e012      	b.n	80120dc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80120bc:	b2db      	uxtb	r3, r3
 80120be:	2b03      	cmp	r3, #3
 80120c0:	d10b      	bne.n	80120da <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120c8:	69db      	ldr	r3, [r3, #28]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d005      	beq.n	80120da <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120d4:	69db      	ldr	r3, [r3, #28]
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80120da:	2300      	movs	r3, #0
}
 80120dc:	4618      	mov	r0, r3
 80120de:	3708      	adds	r7, #8
 80120e0:	46bd      	mov	sp, r7
 80120e2:	bd80      	pop	{r7, pc}

080120e4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b082      	sub	sp, #8
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
 80120ec:	460b      	mov	r3, r1
 80120ee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d101      	bne.n	80120fe <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80120fa:	2303      	movs	r3, #3
 80120fc:	e014      	b.n	8012128 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012104:	b2db      	uxtb	r3, r3
 8012106:	2b03      	cmp	r3, #3
 8012108:	d10d      	bne.n	8012126 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012110:	6a1b      	ldr	r3, [r3, #32]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d007      	beq.n	8012126 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801211c:	6a1b      	ldr	r3, [r3, #32]
 801211e:	78fa      	ldrb	r2, [r7, #3]
 8012120:	4611      	mov	r1, r2
 8012122:	6878      	ldr	r0, [r7, #4]
 8012124:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012126:	2300      	movs	r3, #0
}
 8012128:	4618      	mov	r0, r3
 801212a:	3708      	adds	r7, #8
 801212c:	46bd      	mov	sp, r7
 801212e:	bd80      	pop	{r7, pc}

08012130 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b082      	sub	sp, #8
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]
 8012138:	460b      	mov	r3, r1
 801213a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012142:	2b00      	cmp	r3, #0
 8012144:	d101      	bne.n	801214a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8012146:	2303      	movs	r3, #3
 8012148:	e014      	b.n	8012174 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012150:	b2db      	uxtb	r3, r3
 8012152:	2b03      	cmp	r3, #3
 8012154:	d10d      	bne.n	8012172 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801215e:	2b00      	cmp	r3, #0
 8012160:	d007      	beq.n	8012172 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801216a:	78fa      	ldrb	r2, [r7, #3]
 801216c:	4611      	mov	r1, r2
 801216e:	6878      	ldr	r0, [r7, #4]
 8012170:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012172:	2300      	movs	r3, #0
}
 8012174:	4618      	mov	r0, r3
 8012176:	3708      	adds	r7, #8
 8012178:	46bd      	mov	sp, r7
 801217a:	bd80      	pop	{r7, pc}

0801217c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801217c:	b480      	push	{r7}
 801217e:	b083      	sub	sp, #12
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012184:	2300      	movs	r3, #0
}
 8012186:	4618      	mov	r0, r3
 8012188:	370c      	adds	r7, #12
 801218a:	46bd      	mov	sp, r7
 801218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012190:	4770      	bx	lr

08012192 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8012192:	b580      	push	{r7, lr}
 8012194:	b082      	sub	sp, #8
 8012196:	af00      	add	r7, sp, #0
 8012198:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	2201      	movs	r2, #1
 801219e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d009      	beq.n	80121c0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121b2:	685b      	ldr	r3, [r3, #4]
 80121b4:	687a      	ldr	r2, [r7, #4]
 80121b6:	6852      	ldr	r2, [r2, #4]
 80121b8:	b2d2      	uxtb	r2, r2
 80121ba:	4611      	mov	r1, r2
 80121bc:	6878      	ldr	r0, [r7, #4]
 80121be:	4798      	blx	r3
  }

  return USBD_OK;
 80121c0:	2300      	movs	r3, #0
}
 80121c2:	4618      	mov	r0, r3
 80121c4:	3708      	adds	r7, #8
 80121c6:	46bd      	mov	sp, r7
 80121c8:	bd80      	pop	{r7, pc}

080121ca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80121ca:	b480      	push	{r7}
 80121cc:	b087      	sub	sp, #28
 80121ce:	af00      	add	r7, sp, #0
 80121d0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80121d6:	697b      	ldr	r3, [r7, #20]
 80121d8:	781b      	ldrb	r3, [r3, #0]
 80121da:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80121dc:	697b      	ldr	r3, [r7, #20]
 80121de:	3301      	adds	r3, #1
 80121e0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80121e2:	697b      	ldr	r3, [r7, #20]
 80121e4:	781b      	ldrb	r3, [r3, #0]
 80121e6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80121e8:	8a3b      	ldrh	r3, [r7, #16]
 80121ea:	021b      	lsls	r3, r3, #8
 80121ec:	b21a      	sxth	r2, r3
 80121ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80121f2:	4313      	orrs	r3, r2
 80121f4:	b21b      	sxth	r3, r3
 80121f6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80121f8:	89fb      	ldrh	r3, [r7, #14]
}
 80121fa:	4618      	mov	r0, r3
 80121fc:	371c      	adds	r7, #28
 80121fe:	46bd      	mov	sp, r7
 8012200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012204:	4770      	bx	lr
	...

08012208 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b084      	sub	sp, #16
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
 8012210:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012212:	2300      	movs	r3, #0
 8012214:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	781b      	ldrb	r3, [r3, #0]
 801221a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801221e:	2b40      	cmp	r3, #64	; 0x40
 8012220:	d005      	beq.n	801222e <USBD_StdDevReq+0x26>
 8012222:	2b40      	cmp	r3, #64	; 0x40
 8012224:	d853      	bhi.n	80122ce <USBD_StdDevReq+0xc6>
 8012226:	2b00      	cmp	r3, #0
 8012228:	d00b      	beq.n	8012242 <USBD_StdDevReq+0x3a>
 801222a:	2b20      	cmp	r3, #32
 801222c:	d14f      	bne.n	80122ce <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012234:	689b      	ldr	r3, [r3, #8]
 8012236:	6839      	ldr	r1, [r7, #0]
 8012238:	6878      	ldr	r0, [r7, #4]
 801223a:	4798      	blx	r3
 801223c:	4603      	mov	r3, r0
 801223e:	73fb      	strb	r3, [r7, #15]
      break;
 8012240:	e04a      	b.n	80122d8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	785b      	ldrb	r3, [r3, #1]
 8012246:	2b09      	cmp	r3, #9
 8012248:	d83b      	bhi.n	80122c2 <USBD_StdDevReq+0xba>
 801224a:	a201      	add	r2, pc, #4	; (adr r2, 8012250 <USBD_StdDevReq+0x48>)
 801224c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012250:	080122a5 	.word	0x080122a5
 8012254:	080122b9 	.word	0x080122b9
 8012258:	080122c3 	.word	0x080122c3
 801225c:	080122af 	.word	0x080122af
 8012260:	080122c3 	.word	0x080122c3
 8012264:	08012283 	.word	0x08012283
 8012268:	08012279 	.word	0x08012279
 801226c:	080122c3 	.word	0x080122c3
 8012270:	0801229b 	.word	0x0801229b
 8012274:	0801228d 	.word	0x0801228d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012278:	6839      	ldr	r1, [r7, #0]
 801227a:	6878      	ldr	r0, [r7, #4]
 801227c:	f000 f9de 	bl	801263c <USBD_GetDescriptor>
          break;
 8012280:	e024      	b.n	80122cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012282:	6839      	ldr	r1, [r7, #0]
 8012284:	6878      	ldr	r0, [r7, #4]
 8012286:	f000 fb43 	bl	8012910 <USBD_SetAddress>
          break;
 801228a:	e01f      	b.n	80122cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801228c:	6839      	ldr	r1, [r7, #0]
 801228e:	6878      	ldr	r0, [r7, #4]
 8012290:	f000 fb82 	bl	8012998 <USBD_SetConfig>
 8012294:	4603      	mov	r3, r0
 8012296:	73fb      	strb	r3, [r7, #15]
          break;
 8012298:	e018      	b.n	80122cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801229a:	6839      	ldr	r1, [r7, #0]
 801229c:	6878      	ldr	r0, [r7, #4]
 801229e:	f000 fc21 	bl	8012ae4 <USBD_GetConfig>
          break;
 80122a2:	e013      	b.n	80122cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80122a4:	6839      	ldr	r1, [r7, #0]
 80122a6:	6878      	ldr	r0, [r7, #4]
 80122a8:	f000 fc52 	bl	8012b50 <USBD_GetStatus>
          break;
 80122ac:	e00e      	b.n	80122cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80122ae:	6839      	ldr	r1, [r7, #0]
 80122b0:	6878      	ldr	r0, [r7, #4]
 80122b2:	f000 fc81 	bl	8012bb8 <USBD_SetFeature>
          break;
 80122b6:	e009      	b.n	80122cc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80122b8:	6839      	ldr	r1, [r7, #0]
 80122ba:	6878      	ldr	r0, [r7, #4]
 80122bc:	f000 fc90 	bl	8012be0 <USBD_ClrFeature>
          break;
 80122c0:	e004      	b.n	80122cc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80122c2:	6839      	ldr	r1, [r7, #0]
 80122c4:	6878      	ldr	r0, [r7, #4]
 80122c6:	f000 fce7 	bl	8012c98 <USBD_CtlError>
          break;
 80122ca:	bf00      	nop
      }
      break;
 80122cc:	e004      	b.n	80122d8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80122ce:	6839      	ldr	r1, [r7, #0]
 80122d0:	6878      	ldr	r0, [r7, #4]
 80122d2:	f000 fce1 	bl	8012c98 <USBD_CtlError>
      break;
 80122d6:	bf00      	nop
  }

  return ret;
 80122d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80122da:	4618      	mov	r0, r3
 80122dc:	3710      	adds	r7, #16
 80122de:	46bd      	mov	sp, r7
 80122e0:	bd80      	pop	{r7, pc}
 80122e2:	bf00      	nop

080122e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b084      	sub	sp, #16
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
 80122ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80122ee:	2300      	movs	r3, #0
 80122f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	781b      	ldrb	r3, [r3, #0]
 80122f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80122fa:	2b40      	cmp	r3, #64	; 0x40
 80122fc:	d005      	beq.n	801230a <USBD_StdItfReq+0x26>
 80122fe:	2b40      	cmp	r3, #64	; 0x40
 8012300:	d82f      	bhi.n	8012362 <USBD_StdItfReq+0x7e>
 8012302:	2b00      	cmp	r3, #0
 8012304:	d001      	beq.n	801230a <USBD_StdItfReq+0x26>
 8012306:	2b20      	cmp	r3, #32
 8012308:	d12b      	bne.n	8012362 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012310:	b2db      	uxtb	r3, r3
 8012312:	3b01      	subs	r3, #1
 8012314:	2b02      	cmp	r3, #2
 8012316:	d81d      	bhi.n	8012354 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	889b      	ldrh	r3, [r3, #4]
 801231c:	b2db      	uxtb	r3, r3
 801231e:	2b01      	cmp	r3, #1
 8012320:	d813      	bhi.n	801234a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012328:	689b      	ldr	r3, [r3, #8]
 801232a:	6839      	ldr	r1, [r7, #0]
 801232c:	6878      	ldr	r0, [r7, #4]
 801232e:	4798      	blx	r3
 8012330:	4603      	mov	r3, r0
 8012332:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	88db      	ldrh	r3, [r3, #6]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d110      	bne.n	801235e <USBD_StdItfReq+0x7a>
 801233c:	7bfb      	ldrb	r3, [r7, #15]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d10d      	bne.n	801235e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8012342:	6878      	ldr	r0, [r7, #4]
 8012344:	f000 fd73 	bl	8012e2e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012348:	e009      	b.n	801235e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801234a:	6839      	ldr	r1, [r7, #0]
 801234c:	6878      	ldr	r0, [r7, #4]
 801234e:	f000 fca3 	bl	8012c98 <USBD_CtlError>
          break;
 8012352:	e004      	b.n	801235e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8012354:	6839      	ldr	r1, [r7, #0]
 8012356:	6878      	ldr	r0, [r7, #4]
 8012358:	f000 fc9e 	bl	8012c98 <USBD_CtlError>
          break;
 801235c:	e000      	b.n	8012360 <USBD_StdItfReq+0x7c>
          break;
 801235e:	bf00      	nop
      }
      break;
 8012360:	e004      	b.n	801236c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8012362:	6839      	ldr	r1, [r7, #0]
 8012364:	6878      	ldr	r0, [r7, #4]
 8012366:	f000 fc97 	bl	8012c98 <USBD_CtlError>
      break;
 801236a:	bf00      	nop
  }

  return ret;
 801236c:	7bfb      	ldrb	r3, [r7, #15]
}
 801236e:	4618      	mov	r0, r3
 8012370:	3710      	adds	r7, #16
 8012372:	46bd      	mov	sp, r7
 8012374:	bd80      	pop	{r7, pc}

08012376 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012376:	b580      	push	{r7, lr}
 8012378:	b084      	sub	sp, #16
 801237a:	af00      	add	r7, sp, #0
 801237c:	6078      	str	r0, [r7, #4]
 801237e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8012380:	2300      	movs	r3, #0
 8012382:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8012384:	683b      	ldr	r3, [r7, #0]
 8012386:	889b      	ldrh	r3, [r3, #4]
 8012388:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801238a:	683b      	ldr	r3, [r7, #0]
 801238c:	781b      	ldrb	r3, [r3, #0]
 801238e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012392:	2b40      	cmp	r3, #64	; 0x40
 8012394:	d007      	beq.n	80123a6 <USBD_StdEPReq+0x30>
 8012396:	2b40      	cmp	r3, #64	; 0x40
 8012398:	f200 8145 	bhi.w	8012626 <USBD_StdEPReq+0x2b0>
 801239c:	2b00      	cmp	r3, #0
 801239e:	d00c      	beq.n	80123ba <USBD_StdEPReq+0x44>
 80123a0:	2b20      	cmp	r3, #32
 80123a2:	f040 8140 	bne.w	8012626 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123ac:	689b      	ldr	r3, [r3, #8]
 80123ae:	6839      	ldr	r1, [r7, #0]
 80123b0:	6878      	ldr	r0, [r7, #4]
 80123b2:	4798      	blx	r3
 80123b4:	4603      	mov	r3, r0
 80123b6:	73fb      	strb	r3, [r7, #15]
      break;
 80123b8:	e13a      	b.n	8012630 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80123ba:	683b      	ldr	r3, [r7, #0]
 80123bc:	785b      	ldrb	r3, [r3, #1]
 80123be:	2b03      	cmp	r3, #3
 80123c0:	d007      	beq.n	80123d2 <USBD_StdEPReq+0x5c>
 80123c2:	2b03      	cmp	r3, #3
 80123c4:	f300 8129 	bgt.w	801261a <USBD_StdEPReq+0x2a4>
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d07f      	beq.n	80124cc <USBD_StdEPReq+0x156>
 80123cc:	2b01      	cmp	r3, #1
 80123ce:	d03c      	beq.n	801244a <USBD_StdEPReq+0xd4>
 80123d0:	e123      	b.n	801261a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123d8:	b2db      	uxtb	r3, r3
 80123da:	2b02      	cmp	r3, #2
 80123dc:	d002      	beq.n	80123e4 <USBD_StdEPReq+0x6e>
 80123de:	2b03      	cmp	r3, #3
 80123e0:	d016      	beq.n	8012410 <USBD_StdEPReq+0x9a>
 80123e2:	e02c      	b.n	801243e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80123e4:	7bbb      	ldrb	r3, [r7, #14]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d00d      	beq.n	8012406 <USBD_StdEPReq+0x90>
 80123ea:	7bbb      	ldrb	r3, [r7, #14]
 80123ec:	2b80      	cmp	r3, #128	; 0x80
 80123ee:	d00a      	beq.n	8012406 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80123f0:	7bbb      	ldrb	r3, [r7, #14]
 80123f2:	4619      	mov	r1, r3
 80123f4:	6878      	ldr	r0, [r7, #4]
 80123f6:	f007 fae9 	bl	80199cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80123fa:	2180      	movs	r1, #128	; 0x80
 80123fc:	6878      	ldr	r0, [r7, #4]
 80123fe:	f007 fae5 	bl	80199cc <USBD_LL_StallEP>
 8012402:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012404:	e020      	b.n	8012448 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8012406:	6839      	ldr	r1, [r7, #0]
 8012408:	6878      	ldr	r0, [r7, #4]
 801240a:	f000 fc45 	bl	8012c98 <USBD_CtlError>
              break;
 801240e:	e01b      	b.n	8012448 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	885b      	ldrh	r3, [r3, #2]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d10e      	bne.n	8012436 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012418:	7bbb      	ldrb	r3, [r7, #14]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d00b      	beq.n	8012436 <USBD_StdEPReq+0xc0>
 801241e:	7bbb      	ldrb	r3, [r7, #14]
 8012420:	2b80      	cmp	r3, #128	; 0x80
 8012422:	d008      	beq.n	8012436 <USBD_StdEPReq+0xc0>
 8012424:	683b      	ldr	r3, [r7, #0]
 8012426:	88db      	ldrh	r3, [r3, #6]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d104      	bne.n	8012436 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801242c:	7bbb      	ldrb	r3, [r7, #14]
 801242e:	4619      	mov	r1, r3
 8012430:	6878      	ldr	r0, [r7, #4]
 8012432:	f007 facb 	bl	80199cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8012436:	6878      	ldr	r0, [r7, #4]
 8012438:	f000 fcf9 	bl	8012e2e <USBD_CtlSendStatus>

              break;
 801243c:	e004      	b.n	8012448 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801243e:	6839      	ldr	r1, [r7, #0]
 8012440:	6878      	ldr	r0, [r7, #4]
 8012442:	f000 fc29 	bl	8012c98 <USBD_CtlError>
              break;
 8012446:	bf00      	nop
          }
          break;
 8012448:	e0ec      	b.n	8012624 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012450:	b2db      	uxtb	r3, r3
 8012452:	2b02      	cmp	r3, #2
 8012454:	d002      	beq.n	801245c <USBD_StdEPReq+0xe6>
 8012456:	2b03      	cmp	r3, #3
 8012458:	d016      	beq.n	8012488 <USBD_StdEPReq+0x112>
 801245a:	e030      	b.n	80124be <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801245c:	7bbb      	ldrb	r3, [r7, #14]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d00d      	beq.n	801247e <USBD_StdEPReq+0x108>
 8012462:	7bbb      	ldrb	r3, [r7, #14]
 8012464:	2b80      	cmp	r3, #128	; 0x80
 8012466:	d00a      	beq.n	801247e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012468:	7bbb      	ldrb	r3, [r7, #14]
 801246a:	4619      	mov	r1, r3
 801246c:	6878      	ldr	r0, [r7, #4]
 801246e:	f007 faad 	bl	80199cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012472:	2180      	movs	r1, #128	; 0x80
 8012474:	6878      	ldr	r0, [r7, #4]
 8012476:	f007 faa9 	bl	80199cc <USBD_LL_StallEP>
 801247a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801247c:	e025      	b.n	80124ca <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801247e:	6839      	ldr	r1, [r7, #0]
 8012480:	6878      	ldr	r0, [r7, #4]
 8012482:	f000 fc09 	bl	8012c98 <USBD_CtlError>
              break;
 8012486:	e020      	b.n	80124ca <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012488:	683b      	ldr	r3, [r7, #0]
 801248a:	885b      	ldrh	r3, [r3, #2]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d11b      	bne.n	80124c8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012490:	7bbb      	ldrb	r3, [r7, #14]
 8012492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012496:	2b00      	cmp	r3, #0
 8012498:	d004      	beq.n	80124a4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801249a:	7bbb      	ldrb	r3, [r7, #14]
 801249c:	4619      	mov	r1, r3
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f007 fab3 	bl	8019a0a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f000 fcc2 	bl	8012e2e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124b0:	689b      	ldr	r3, [r3, #8]
 80124b2:	6839      	ldr	r1, [r7, #0]
 80124b4:	6878      	ldr	r0, [r7, #4]
 80124b6:	4798      	blx	r3
 80124b8:	4603      	mov	r3, r0
 80124ba:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80124bc:	e004      	b.n	80124c8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80124be:	6839      	ldr	r1, [r7, #0]
 80124c0:	6878      	ldr	r0, [r7, #4]
 80124c2:	f000 fbe9 	bl	8012c98 <USBD_CtlError>
              break;
 80124c6:	e000      	b.n	80124ca <USBD_StdEPReq+0x154>
              break;
 80124c8:	bf00      	nop
          }
          break;
 80124ca:	e0ab      	b.n	8012624 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80124d2:	b2db      	uxtb	r3, r3
 80124d4:	2b02      	cmp	r3, #2
 80124d6:	d002      	beq.n	80124de <USBD_StdEPReq+0x168>
 80124d8:	2b03      	cmp	r3, #3
 80124da:	d032      	beq.n	8012542 <USBD_StdEPReq+0x1cc>
 80124dc:	e097      	b.n	801260e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80124de:	7bbb      	ldrb	r3, [r7, #14]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d007      	beq.n	80124f4 <USBD_StdEPReq+0x17e>
 80124e4:	7bbb      	ldrb	r3, [r7, #14]
 80124e6:	2b80      	cmp	r3, #128	; 0x80
 80124e8:	d004      	beq.n	80124f4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80124ea:	6839      	ldr	r1, [r7, #0]
 80124ec:	6878      	ldr	r0, [r7, #4]
 80124ee:	f000 fbd3 	bl	8012c98 <USBD_CtlError>
                break;
 80124f2:	e091      	b.n	8012618 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80124f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	da0b      	bge.n	8012514 <USBD_StdEPReq+0x19e>
 80124fc:	7bbb      	ldrb	r3, [r7, #14]
 80124fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012502:	4613      	mov	r3, r2
 8012504:	009b      	lsls	r3, r3, #2
 8012506:	4413      	add	r3, r2
 8012508:	009b      	lsls	r3, r3, #2
 801250a:	3310      	adds	r3, #16
 801250c:	687a      	ldr	r2, [r7, #4]
 801250e:	4413      	add	r3, r2
 8012510:	3304      	adds	r3, #4
 8012512:	e00b      	b.n	801252c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012514:	7bbb      	ldrb	r3, [r7, #14]
 8012516:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801251a:	4613      	mov	r3, r2
 801251c:	009b      	lsls	r3, r3, #2
 801251e:	4413      	add	r3, r2
 8012520:	009b      	lsls	r3, r3, #2
 8012522:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012526:	687a      	ldr	r2, [r7, #4]
 8012528:	4413      	add	r3, r2
 801252a:	3304      	adds	r3, #4
 801252c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801252e:	68bb      	ldr	r3, [r7, #8]
 8012530:	2200      	movs	r2, #0
 8012532:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012534:	68bb      	ldr	r3, [r7, #8]
 8012536:	2202      	movs	r2, #2
 8012538:	4619      	mov	r1, r3
 801253a:	6878      	ldr	r0, [r7, #4]
 801253c:	f000 fc1d 	bl	8012d7a <USBD_CtlSendData>
              break;
 8012540:	e06a      	b.n	8012618 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012542:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012546:	2b00      	cmp	r3, #0
 8012548:	da11      	bge.n	801256e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801254a:	7bbb      	ldrb	r3, [r7, #14]
 801254c:	f003 020f 	and.w	r2, r3, #15
 8012550:	6879      	ldr	r1, [r7, #4]
 8012552:	4613      	mov	r3, r2
 8012554:	009b      	lsls	r3, r3, #2
 8012556:	4413      	add	r3, r2
 8012558:	009b      	lsls	r3, r3, #2
 801255a:	440b      	add	r3, r1
 801255c:	3324      	adds	r3, #36	; 0x24
 801255e:	881b      	ldrh	r3, [r3, #0]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d117      	bne.n	8012594 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8012564:	6839      	ldr	r1, [r7, #0]
 8012566:	6878      	ldr	r0, [r7, #4]
 8012568:	f000 fb96 	bl	8012c98 <USBD_CtlError>
                  break;
 801256c:	e054      	b.n	8012618 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801256e:	7bbb      	ldrb	r3, [r7, #14]
 8012570:	f003 020f 	and.w	r2, r3, #15
 8012574:	6879      	ldr	r1, [r7, #4]
 8012576:	4613      	mov	r3, r2
 8012578:	009b      	lsls	r3, r3, #2
 801257a:	4413      	add	r3, r2
 801257c:	009b      	lsls	r3, r3, #2
 801257e:	440b      	add	r3, r1
 8012580:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012584:	881b      	ldrh	r3, [r3, #0]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d104      	bne.n	8012594 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801258a:	6839      	ldr	r1, [r7, #0]
 801258c:	6878      	ldr	r0, [r7, #4]
 801258e:	f000 fb83 	bl	8012c98 <USBD_CtlError>
                  break;
 8012592:	e041      	b.n	8012618 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012594:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012598:	2b00      	cmp	r3, #0
 801259a:	da0b      	bge.n	80125b4 <USBD_StdEPReq+0x23e>
 801259c:	7bbb      	ldrb	r3, [r7, #14]
 801259e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80125a2:	4613      	mov	r3, r2
 80125a4:	009b      	lsls	r3, r3, #2
 80125a6:	4413      	add	r3, r2
 80125a8:	009b      	lsls	r3, r3, #2
 80125aa:	3310      	adds	r3, #16
 80125ac:	687a      	ldr	r2, [r7, #4]
 80125ae:	4413      	add	r3, r2
 80125b0:	3304      	adds	r3, #4
 80125b2:	e00b      	b.n	80125cc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80125b4:	7bbb      	ldrb	r3, [r7, #14]
 80125b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80125ba:	4613      	mov	r3, r2
 80125bc:	009b      	lsls	r3, r3, #2
 80125be:	4413      	add	r3, r2
 80125c0:	009b      	lsls	r3, r3, #2
 80125c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80125c6:	687a      	ldr	r2, [r7, #4]
 80125c8:	4413      	add	r3, r2
 80125ca:	3304      	adds	r3, #4
 80125cc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80125ce:	7bbb      	ldrb	r3, [r7, #14]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d002      	beq.n	80125da <USBD_StdEPReq+0x264>
 80125d4:	7bbb      	ldrb	r3, [r7, #14]
 80125d6:	2b80      	cmp	r3, #128	; 0x80
 80125d8:	d103      	bne.n	80125e2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80125da:	68bb      	ldr	r3, [r7, #8]
 80125dc:	2200      	movs	r2, #0
 80125de:	601a      	str	r2, [r3, #0]
 80125e0:	e00e      	b.n	8012600 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80125e2:	7bbb      	ldrb	r3, [r7, #14]
 80125e4:	4619      	mov	r1, r3
 80125e6:	6878      	ldr	r0, [r7, #4]
 80125e8:	f007 fa2e 	bl	8019a48 <USBD_LL_IsStallEP>
 80125ec:	4603      	mov	r3, r0
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d003      	beq.n	80125fa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80125f2:	68bb      	ldr	r3, [r7, #8]
 80125f4:	2201      	movs	r2, #1
 80125f6:	601a      	str	r2, [r3, #0]
 80125f8:	e002      	b.n	8012600 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80125fa:	68bb      	ldr	r3, [r7, #8]
 80125fc:	2200      	movs	r2, #0
 80125fe:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012600:	68bb      	ldr	r3, [r7, #8]
 8012602:	2202      	movs	r2, #2
 8012604:	4619      	mov	r1, r3
 8012606:	6878      	ldr	r0, [r7, #4]
 8012608:	f000 fbb7 	bl	8012d7a <USBD_CtlSendData>
              break;
 801260c:	e004      	b.n	8012618 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801260e:	6839      	ldr	r1, [r7, #0]
 8012610:	6878      	ldr	r0, [r7, #4]
 8012612:	f000 fb41 	bl	8012c98 <USBD_CtlError>
              break;
 8012616:	bf00      	nop
          }
          break;
 8012618:	e004      	b.n	8012624 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801261a:	6839      	ldr	r1, [r7, #0]
 801261c:	6878      	ldr	r0, [r7, #4]
 801261e:	f000 fb3b 	bl	8012c98 <USBD_CtlError>
          break;
 8012622:	bf00      	nop
      }
      break;
 8012624:	e004      	b.n	8012630 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8012626:	6839      	ldr	r1, [r7, #0]
 8012628:	6878      	ldr	r0, [r7, #4]
 801262a:	f000 fb35 	bl	8012c98 <USBD_CtlError>
      break;
 801262e:	bf00      	nop
  }

  return ret;
 8012630:	7bfb      	ldrb	r3, [r7, #15]
}
 8012632:	4618      	mov	r0, r3
 8012634:	3710      	adds	r7, #16
 8012636:	46bd      	mov	sp, r7
 8012638:	bd80      	pop	{r7, pc}
	...

0801263c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b084      	sub	sp, #16
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
 8012644:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012646:	2300      	movs	r3, #0
 8012648:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801264a:	2300      	movs	r3, #0
 801264c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801264e:	2300      	movs	r3, #0
 8012650:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012652:	683b      	ldr	r3, [r7, #0]
 8012654:	885b      	ldrh	r3, [r3, #2]
 8012656:	0a1b      	lsrs	r3, r3, #8
 8012658:	b29b      	uxth	r3, r3
 801265a:	3b01      	subs	r3, #1
 801265c:	2b06      	cmp	r3, #6
 801265e:	f200 8128 	bhi.w	80128b2 <USBD_GetDescriptor+0x276>
 8012662:	a201      	add	r2, pc, #4	; (adr r2, 8012668 <USBD_GetDescriptor+0x2c>)
 8012664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012668:	08012685 	.word	0x08012685
 801266c:	0801269d 	.word	0x0801269d
 8012670:	080126dd 	.word	0x080126dd
 8012674:	080128b3 	.word	0x080128b3
 8012678:	080128b3 	.word	0x080128b3
 801267c:	08012853 	.word	0x08012853
 8012680:	0801287f 	.word	0x0801287f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	687a      	ldr	r2, [r7, #4]
 801268e:	7c12      	ldrb	r2, [r2, #16]
 8012690:	f107 0108 	add.w	r1, r7, #8
 8012694:	4610      	mov	r0, r2
 8012696:	4798      	blx	r3
 8012698:	60f8      	str	r0, [r7, #12]
      break;
 801269a:	e112      	b.n	80128c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	7c1b      	ldrb	r3, [r3, #16]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d10d      	bne.n	80126c0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80126aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126ac:	f107 0208 	add.w	r2, r7, #8
 80126b0:	4610      	mov	r0, r2
 80126b2:	4798      	blx	r3
 80126b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	3301      	adds	r3, #1
 80126ba:	2202      	movs	r2, #2
 80126bc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80126be:	e100      	b.n	80128c2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80126c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126c8:	f107 0208 	add.w	r2, r7, #8
 80126cc:	4610      	mov	r0, r2
 80126ce:	4798      	blx	r3
 80126d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	3301      	adds	r3, #1
 80126d6:	2202      	movs	r2, #2
 80126d8:	701a      	strb	r2, [r3, #0]
      break;
 80126da:	e0f2      	b.n	80128c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	885b      	ldrh	r3, [r3, #2]
 80126e0:	b2db      	uxtb	r3, r3
 80126e2:	2b05      	cmp	r3, #5
 80126e4:	f200 80ac 	bhi.w	8012840 <USBD_GetDescriptor+0x204>
 80126e8:	a201      	add	r2, pc, #4	; (adr r2, 80126f0 <USBD_GetDescriptor+0xb4>)
 80126ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126ee:	bf00      	nop
 80126f0:	08012709 	.word	0x08012709
 80126f4:	0801273d 	.word	0x0801273d
 80126f8:	08012771 	.word	0x08012771
 80126fc:	080127a5 	.word	0x080127a5
 8012700:	080127d9 	.word	0x080127d9
 8012704:	0801280d 	.word	0x0801280d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801270e:	685b      	ldr	r3, [r3, #4]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d00b      	beq.n	801272c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801271a:	685b      	ldr	r3, [r3, #4]
 801271c:	687a      	ldr	r2, [r7, #4]
 801271e:	7c12      	ldrb	r2, [r2, #16]
 8012720:	f107 0108 	add.w	r1, r7, #8
 8012724:	4610      	mov	r0, r2
 8012726:	4798      	blx	r3
 8012728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801272a:	e091      	b.n	8012850 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801272c:	6839      	ldr	r1, [r7, #0]
 801272e:	6878      	ldr	r0, [r7, #4]
 8012730:	f000 fab2 	bl	8012c98 <USBD_CtlError>
            err++;
 8012734:	7afb      	ldrb	r3, [r7, #11]
 8012736:	3301      	adds	r3, #1
 8012738:	72fb      	strb	r3, [r7, #11]
          break;
 801273a:	e089      	b.n	8012850 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012742:	689b      	ldr	r3, [r3, #8]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d00b      	beq.n	8012760 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801274e:	689b      	ldr	r3, [r3, #8]
 8012750:	687a      	ldr	r2, [r7, #4]
 8012752:	7c12      	ldrb	r2, [r2, #16]
 8012754:	f107 0108 	add.w	r1, r7, #8
 8012758:	4610      	mov	r0, r2
 801275a:	4798      	blx	r3
 801275c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801275e:	e077      	b.n	8012850 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012760:	6839      	ldr	r1, [r7, #0]
 8012762:	6878      	ldr	r0, [r7, #4]
 8012764:	f000 fa98 	bl	8012c98 <USBD_CtlError>
            err++;
 8012768:	7afb      	ldrb	r3, [r7, #11]
 801276a:	3301      	adds	r3, #1
 801276c:	72fb      	strb	r3, [r7, #11]
          break;
 801276e:	e06f      	b.n	8012850 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012776:	68db      	ldr	r3, [r3, #12]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d00b      	beq.n	8012794 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012782:	68db      	ldr	r3, [r3, #12]
 8012784:	687a      	ldr	r2, [r7, #4]
 8012786:	7c12      	ldrb	r2, [r2, #16]
 8012788:	f107 0108 	add.w	r1, r7, #8
 801278c:	4610      	mov	r0, r2
 801278e:	4798      	blx	r3
 8012790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012792:	e05d      	b.n	8012850 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012794:	6839      	ldr	r1, [r7, #0]
 8012796:	6878      	ldr	r0, [r7, #4]
 8012798:	f000 fa7e 	bl	8012c98 <USBD_CtlError>
            err++;
 801279c:	7afb      	ldrb	r3, [r7, #11]
 801279e:	3301      	adds	r3, #1
 80127a0:	72fb      	strb	r3, [r7, #11]
          break;
 80127a2:	e055      	b.n	8012850 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127aa:	691b      	ldr	r3, [r3, #16]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d00b      	beq.n	80127c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127b6:	691b      	ldr	r3, [r3, #16]
 80127b8:	687a      	ldr	r2, [r7, #4]
 80127ba:	7c12      	ldrb	r2, [r2, #16]
 80127bc:	f107 0108 	add.w	r1, r7, #8
 80127c0:	4610      	mov	r0, r2
 80127c2:	4798      	blx	r3
 80127c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80127c6:	e043      	b.n	8012850 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80127c8:	6839      	ldr	r1, [r7, #0]
 80127ca:	6878      	ldr	r0, [r7, #4]
 80127cc:	f000 fa64 	bl	8012c98 <USBD_CtlError>
            err++;
 80127d0:	7afb      	ldrb	r3, [r7, #11]
 80127d2:	3301      	adds	r3, #1
 80127d4:	72fb      	strb	r3, [r7, #11]
          break;
 80127d6:	e03b      	b.n	8012850 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127de:	695b      	ldr	r3, [r3, #20]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d00b      	beq.n	80127fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127ea:	695b      	ldr	r3, [r3, #20]
 80127ec:	687a      	ldr	r2, [r7, #4]
 80127ee:	7c12      	ldrb	r2, [r2, #16]
 80127f0:	f107 0108 	add.w	r1, r7, #8
 80127f4:	4610      	mov	r0, r2
 80127f6:	4798      	blx	r3
 80127f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80127fa:	e029      	b.n	8012850 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80127fc:	6839      	ldr	r1, [r7, #0]
 80127fe:	6878      	ldr	r0, [r7, #4]
 8012800:	f000 fa4a 	bl	8012c98 <USBD_CtlError>
            err++;
 8012804:	7afb      	ldrb	r3, [r7, #11]
 8012806:	3301      	adds	r3, #1
 8012808:	72fb      	strb	r3, [r7, #11]
          break;
 801280a:	e021      	b.n	8012850 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012812:	699b      	ldr	r3, [r3, #24]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d00b      	beq.n	8012830 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801281e:	699b      	ldr	r3, [r3, #24]
 8012820:	687a      	ldr	r2, [r7, #4]
 8012822:	7c12      	ldrb	r2, [r2, #16]
 8012824:	f107 0108 	add.w	r1, r7, #8
 8012828:	4610      	mov	r0, r2
 801282a:	4798      	blx	r3
 801282c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801282e:	e00f      	b.n	8012850 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012830:	6839      	ldr	r1, [r7, #0]
 8012832:	6878      	ldr	r0, [r7, #4]
 8012834:	f000 fa30 	bl	8012c98 <USBD_CtlError>
            err++;
 8012838:	7afb      	ldrb	r3, [r7, #11]
 801283a:	3301      	adds	r3, #1
 801283c:	72fb      	strb	r3, [r7, #11]
          break;
 801283e:	e007      	b.n	8012850 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012840:	6839      	ldr	r1, [r7, #0]
 8012842:	6878      	ldr	r0, [r7, #4]
 8012844:	f000 fa28 	bl	8012c98 <USBD_CtlError>
          err++;
 8012848:	7afb      	ldrb	r3, [r7, #11]
 801284a:	3301      	adds	r3, #1
 801284c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801284e:	bf00      	nop
      }
      break;
 8012850:	e037      	b.n	80128c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	7c1b      	ldrb	r3, [r3, #16]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d109      	bne.n	801286e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012862:	f107 0208 	add.w	r2, r7, #8
 8012866:	4610      	mov	r0, r2
 8012868:	4798      	blx	r3
 801286a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801286c:	e029      	b.n	80128c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801286e:	6839      	ldr	r1, [r7, #0]
 8012870:	6878      	ldr	r0, [r7, #4]
 8012872:	f000 fa11 	bl	8012c98 <USBD_CtlError>
        err++;
 8012876:	7afb      	ldrb	r3, [r7, #11]
 8012878:	3301      	adds	r3, #1
 801287a:	72fb      	strb	r3, [r7, #11]
      break;
 801287c:	e021      	b.n	80128c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	7c1b      	ldrb	r3, [r3, #16]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d10d      	bne.n	80128a2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801288e:	f107 0208 	add.w	r2, r7, #8
 8012892:	4610      	mov	r0, r2
 8012894:	4798      	blx	r3
 8012896:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	3301      	adds	r3, #1
 801289c:	2207      	movs	r2, #7
 801289e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80128a0:	e00f      	b.n	80128c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80128a2:	6839      	ldr	r1, [r7, #0]
 80128a4:	6878      	ldr	r0, [r7, #4]
 80128a6:	f000 f9f7 	bl	8012c98 <USBD_CtlError>
        err++;
 80128aa:	7afb      	ldrb	r3, [r7, #11]
 80128ac:	3301      	adds	r3, #1
 80128ae:	72fb      	strb	r3, [r7, #11]
      break;
 80128b0:	e007      	b.n	80128c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80128b2:	6839      	ldr	r1, [r7, #0]
 80128b4:	6878      	ldr	r0, [r7, #4]
 80128b6:	f000 f9ef 	bl	8012c98 <USBD_CtlError>
      err++;
 80128ba:	7afb      	ldrb	r3, [r7, #11]
 80128bc:	3301      	adds	r3, #1
 80128be:	72fb      	strb	r3, [r7, #11]
      break;
 80128c0:	bf00      	nop
  }

  if (err != 0U)
 80128c2:	7afb      	ldrb	r3, [r7, #11]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d11e      	bne.n	8012906 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80128c8:	683b      	ldr	r3, [r7, #0]
 80128ca:	88db      	ldrh	r3, [r3, #6]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d016      	beq.n	80128fe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80128d0:	893b      	ldrh	r3, [r7, #8]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d00e      	beq.n	80128f4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80128d6:	683b      	ldr	r3, [r7, #0]
 80128d8:	88da      	ldrh	r2, [r3, #6]
 80128da:	893b      	ldrh	r3, [r7, #8]
 80128dc:	4293      	cmp	r3, r2
 80128de:	bf28      	it	cs
 80128e0:	4613      	movcs	r3, r2
 80128e2:	b29b      	uxth	r3, r3
 80128e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80128e6:	893b      	ldrh	r3, [r7, #8]
 80128e8:	461a      	mov	r2, r3
 80128ea:	68f9      	ldr	r1, [r7, #12]
 80128ec:	6878      	ldr	r0, [r7, #4]
 80128ee:	f000 fa44 	bl	8012d7a <USBD_CtlSendData>
 80128f2:	e009      	b.n	8012908 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80128f4:	6839      	ldr	r1, [r7, #0]
 80128f6:	6878      	ldr	r0, [r7, #4]
 80128f8:	f000 f9ce 	bl	8012c98 <USBD_CtlError>
 80128fc:	e004      	b.n	8012908 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80128fe:	6878      	ldr	r0, [r7, #4]
 8012900:	f000 fa95 	bl	8012e2e <USBD_CtlSendStatus>
 8012904:	e000      	b.n	8012908 <USBD_GetDescriptor+0x2cc>
    return;
 8012906:	bf00      	nop
  }
}
 8012908:	3710      	adds	r7, #16
 801290a:	46bd      	mov	sp, r7
 801290c:	bd80      	pop	{r7, pc}
 801290e:	bf00      	nop

08012910 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b084      	sub	sp, #16
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
 8012918:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801291a:	683b      	ldr	r3, [r7, #0]
 801291c:	889b      	ldrh	r3, [r3, #4]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d131      	bne.n	8012986 <USBD_SetAddress+0x76>
 8012922:	683b      	ldr	r3, [r7, #0]
 8012924:	88db      	ldrh	r3, [r3, #6]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d12d      	bne.n	8012986 <USBD_SetAddress+0x76>
 801292a:	683b      	ldr	r3, [r7, #0]
 801292c:	885b      	ldrh	r3, [r3, #2]
 801292e:	2b7f      	cmp	r3, #127	; 0x7f
 8012930:	d829      	bhi.n	8012986 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012932:	683b      	ldr	r3, [r7, #0]
 8012934:	885b      	ldrh	r3, [r3, #2]
 8012936:	b2db      	uxtb	r3, r3
 8012938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801293c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012944:	b2db      	uxtb	r3, r3
 8012946:	2b03      	cmp	r3, #3
 8012948:	d104      	bne.n	8012954 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801294a:	6839      	ldr	r1, [r7, #0]
 801294c:	6878      	ldr	r0, [r7, #4]
 801294e:	f000 f9a3 	bl	8012c98 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012952:	e01d      	b.n	8012990 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	7bfa      	ldrb	r2, [r7, #15]
 8012958:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801295c:	7bfb      	ldrb	r3, [r7, #15]
 801295e:	4619      	mov	r1, r3
 8012960:	6878      	ldr	r0, [r7, #4]
 8012962:	f007 f89d 	bl	8019aa0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012966:	6878      	ldr	r0, [r7, #4]
 8012968:	f000 fa61 	bl	8012e2e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801296c:	7bfb      	ldrb	r3, [r7, #15]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d004      	beq.n	801297c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	2202      	movs	r2, #2
 8012976:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801297a:	e009      	b.n	8012990 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	2201      	movs	r2, #1
 8012980:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012984:	e004      	b.n	8012990 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012986:	6839      	ldr	r1, [r7, #0]
 8012988:	6878      	ldr	r0, [r7, #4]
 801298a:	f000 f985 	bl	8012c98 <USBD_CtlError>
  }
}
 801298e:	bf00      	nop
 8012990:	bf00      	nop
 8012992:	3710      	adds	r7, #16
 8012994:	46bd      	mov	sp, r7
 8012996:	bd80      	pop	{r7, pc}

08012998 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b084      	sub	sp, #16
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
 80129a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80129a2:	2300      	movs	r3, #0
 80129a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80129a6:	683b      	ldr	r3, [r7, #0]
 80129a8:	885b      	ldrh	r3, [r3, #2]
 80129aa:	b2da      	uxtb	r2, r3
 80129ac:	4b4c      	ldr	r3, [pc, #304]	; (8012ae0 <USBD_SetConfig+0x148>)
 80129ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80129b0:	4b4b      	ldr	r3, [pc, #300]	; (8012ae0 <USBD_SetConfig+0x148>)
 80129b2:	781b      	ldrb	r3, [r3, #0]
 80129b4:	2b01      	cmp	r3, #1
 80129b6:	d905      	bls.n	80129c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80129b8:	6839      	ldr	r1, [r7, #0]
 80129ba:	6878      	ldr	r0, [r7, #4]
 80129bc:	f000 f96c 	bl	8012c98 <USBD_CtlError>
    return USBD_FAIL;
 80129c0:	2303      	movs	r3, #3
 80129c2:	e088      	b.n	8012ad6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80129ca:	b2db      	uxtb	r3, r3
 80129cc:	2b02      	cmp	r3, #2
 80129ce:	d002      	beq.n	80129d6 <USBD_SetConfig+0x3e>
 80129d0:	2b03      	cmp	r3, #3
 80129d2:	d025      	beq.n	8012a20 <USBD_SetConfig+0x88>
 80129d4:	e071      	b.n	8012aba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80129d6:	4b42      	ldr	r3, [pc, #264]	; (8012ae0 <USBD_SetConfig+0x148>)
 80129d8:	781b      	ldrb	r3, [r3, #0]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d01c      	beq.n	8012a18 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80129de:	4b40      	ldr	r3, [pc, #256]	; (8012ae0 <USBD_SetConfig+0x148>)
 80129e0:	781b      	ldrb	r3, [r3, #0]
 80129e2:	461a      	mov	r2, r3
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80129e8:	4b3d      	ldr	r3, [pc, #244]	; (8012ae0 <USBD_SetConfig+0x148>)
 80129ea:	781b      	ldrb	r3, [r3, #0]
 80129ec:	4619      	mov	r1, r3
 80129ee:	6878      	ldr	r0, [r7, #4]
 80129f0:	f7ff f948 	bl	8011c84 <USBD_SetClassConfig>
 80129f4:	4603      	mov	r3, r0
 80129f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80129f8:	7bfb      	ldrb	r3, [r7, #15]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d004      	beq.n	8012a08 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80129fe:	6839      	ldr	r1, [r7, #0]
 8012a00:	6878      	ldr	r0, [r7, #4]
 8012a02:	f000 f949 	bl	8012c98 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012a06:	e065      	b.n	8012ad4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012a08:	6878      	ldr	r0, [r7, #4]
 8012a0a:	f000 fa10 	bl	8012e2e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	2203      	movs	r2, #3
 8012a12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012a16:	e05d      	b.n	8012ad4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012a18:	6878      	ldr	r0, [r7, #4]
 8012a1a:	f000 fa08 	bl	8012e2e <USBD_CtlSendStatus>
      break;
 8012a1e:	e059      	b.n	8012ad4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012a20:	4b2f      	ldr	r3, [pc, #188]	; (8012ae0 <USBD_SetConfig+0x148>)
 8012a22:	781b      	ldrb	r3, [r3, #0]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d112      	bne.n	8012a4e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	2202      	movs	r2, #2
 8012a2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012a30:	4b2b      	ldr	r3, [pc, #172]	; (8012ae0 <USBD_SetConfig+0x148>)
 8012a32:	781b      	ldrb	r3, [r3, #0]
 8012a34:	461a      	mov	r2, r3
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012a3a:	4b29      	ldr	r3, [pc, #164]	; (8012ae0 <USBD_SetConfig+0x148>)
 8012a3c:	781b      	ldrb	r3, [r3, #0]
 8012a3e:	4619      	mov	r1, r3
 8012a40:	6878      	ldr	r0, [r7, #4]
 8012a42:	f7ff f93b 	bl	8011cbc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012a46:	6878      	ldr	r0, [r7, #4]
 8012a48:	f000 f9f1 	bl	8012e2e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012a4c:	e042      	b.n	8012ad4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8012a4e:	4b24      	ldr	r3, [pc, #144]	; (8012ae0 <USBD_SetConfig+0x148>)
 8012a50:	781b      	ldrb	r3, [r3, #0]
 8012a52:	461a      	mov	r2, r3
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	685b      	ldr	r3, [r3, #4]
 8012a58:	429a      	cmp	r2, r3
 8012a5a:	d02a      	beq.n	8012ab2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	685b      	ldr	r3, [r3, #4]
 8012a60:	b2db      	uxtb	r3, r3
 8012a62:	4619      	mov	r1, r3
 8012a64:	6878      	ldr	r0, [r7, #4]
 8012a66:	f7ff f929 	bl	8011cbc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012a6a:	4b1d      	ldr	r3, [pc, #116]	; (8012ae0 <USBD_SetConfig+0x148>)
 8012a6c:	781b      	ldrb	r3, [r3, #0]
 8012a6e:	461a      	mov	r2, r3
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012a74:	4b1a      	ldr	r3, [pc, #104]	; (8012ae0 <USBD_SetConfig+0x148>)
 8012a76:	781b      	ldrb	r3, [r3, #0]
 8012a78:	4619      	mov	r1, r3
 8012a7a:	6878      	ldr	r0, [r7, #4]
 8012a7c:	f7ff f902 	bl	8011c84 <USBD_SetClassConfig>
 8012a80:	4603      	mov	r3, r0
 8012a82:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012a84:	7bfb      	ldrb	r3, [r7, #15]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d00f      	beq.n	8012aaa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8012a8a:	6839      	ldr	r1, [r7, #0]
 8012a8c:	6878      	ldr	r0, [r7, #4]
 8012a8e:	f000 f903 	bl	8012c98 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	685b      	ldr	r3, [r3, #4]
 8012a96:	b2db      	uxtb	r3, r3
 8012a98:	4619      	mov	r1, r3
 8012a9a:	6878      	ldr	r0, [r7, #4]
 8012a9c:	f7ff f90e 	bl	8011cbc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	2202      	movs	r2, #2
 8012aa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012aa8:	e014      	b.n	8012ad4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012aaa:	6878      	ldr	r0, [r7, #4]
 8012aac:	f000 f9bf 	bl	8012e2e <USBD_CtlSendStatus>
      break;
 8012ab0:	e010      	b.n	8012ad4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012ab2:	6878      	ldr	r0, [r7, #4]
 8012ab4:	f000 f9bb 	bl	8012e2e <USBD_CtlSendStatus>
      break;
 8012ab8:	e00c      	b.n	8012ad4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8012aba:	6839      	ldr	r1, [r7, #0]
 8012abc:	6878      	ldr	r0, [r7, #4]
 8012abe:	f000 f8eb 	bl	8012c98 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012ac2:	4b07      	ldr	r3, [pc, #28]	; (8012ae0 <USBD_SetConfig+0x148>)
 8012ac4:	781b      	ldrb	r3, [r3, #0]
 8012ac6:	4619      	mov	r1, r3
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	f7ff f8f7 	bl	8011cbc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012ace:	2303      	movs	r3, #3
 8012ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8012ad2:	bf00      	nop
  }

  return ret;
 8012ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	3710      	adds	r7, #16
 8012ada:	46bd      	mov	sp, r7
 8012adc:	bd80      	pop	{r7, pc}
 8012ade:	bf00      	nop
 8012ae0:	20000840 	.word	0x20000840

08012ae4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b082      	sub	sp, #8
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
 8012aec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012aee:	683b      	ldr	r3, [r7, #0]
 8012af0:	88db      	ldrh	r3, [r3, #6]
 8012af2:	2b01      	cmp	r3, #1
 8012af4:	d004      	beq.n	8012b00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012af6:	6839      	ldr	r1, [r7, #0]
 8012af8:	6878      	ldr	r0, [r7, #4]
 8012afa:	f000 f8cd 	bl	8012c98 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012afe:	e023      	b.n	8012b48 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b06:	b2db      	uxtb	r3, r3
 8012b08:	2b02      	cmp	r3, #2
 8012b0a:	dc02      	bgt.n	8012b12 <USBD_GetConfig+0x2e>
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	dc03      	bgt.n	8012b18 <USBD_GetConfig+0x34>
 8012b10:	e015      	b.n	8012b3e <USBD_GetConfig+0x5a>
 8012b12:	2b03      	cmp	r3, #3
 8012b14:	d00b      	beq.n	8012b2e <USBD_GetConfig+0x4a>
 8012b16:	e012      	b.n	8012b3e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	2200      	movs	r2, #0
 8012b1c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	3308      	adds	r3, #8
 8012b22:	2201      	movs	r2, #1
 8012b24:	4619      	mov	r1, r3
 8012b26:	6878      	ldr	r0, [r7, #4]
 8012b28:	f000 f927 	bl	8012d7a <USBD_CtlSendData>
        break;
 8012b2c:	e00c      	b.n	8012b48 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	3304      	adds	r3, #4
 8012b32:	2201      	movs	r2, #1
 8012b34:	4619      	mov	r1, r3
 8012b36:	6878      	ldr	r0, [r7, #4]
 8012b38:	f000 f91f 	bl	8012d7a <USBD_CtlSendData>
        break;
 8012b3c:	e004      	b.n	8012b48 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012b3e:	6839      	ldr	r1, [r7, #0]
 8012b40:	6878      	ldr	r0, [r7, #4]
 8012b42:	f000 f8a9 	bl	8012c98 <USBD_CtlError>
        break;
 8012b46:	bf00      	nop
}
 8012b48:	bf00      	nop
 8012b4a:	3708      	adds	r7, #8
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}

08012b50 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b082      	sub	sp, #8
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
 8012b58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b60:	b2db      	uxtb	r3, r3
 8012b62:	3b01      	subs	r3, #1
 8012b64:	2b02      	cmp	r3, #2
 8012b66:	d81e      	bhi.n	8012ba6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012b68:	683b      	ldr	r3, [r7, #0]
 8012b6a:	88db      	ldrh	r3, [r3, #6]
 8012b6c:	2b02      	cmp	r3, #2
 8012b6e:	d004      	beq.n	8012b7a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012b70:	6839      	ldr	r1, [r7, #0]
 8012b72:	6878      	ldr	r0, [r7, #4]
 8012b74:	f000 f890 	bl	8012c98 <USBD_CtlError>
        break;
 8012b78:	e01a      	b.n	8012bb0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	2201      	movs	r2, #1
 8012b7e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d005      	beq.n	8012b96 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	68db      	ldr	r3, [r3, #12]
 8012b8e:	f043 0202 	orr.w	r2, r3, #2
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	330c      	adds	r3, #12
 8012b9a:	2202      	movs	r2, #2
 8012b9c:	4619      	mov	r1, r3
 8012b9e:	6878      	ldr	r0, [r7, #4]
 8012ba0:	f000 f8eb 	bl	8012d7a <USBD_CtlSendData>
      break;
 8012ba4:	e004      	b.n	8012bb0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012ba6:	6839      	ldr	r1, [r7, #0]
 8012ba8:	6878      	ldr	r0, [r7, #4]
 8012baa:	f000 f875 	bl	8012c98 <USBD_CtlError>
      break;
 8012bae:	bf00      	nop
  }
}
 8012bb0:	bf00      	nop
 8012bb2:	3708      	adds	r7, #8
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}

08012bb8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b082      	sub	sp, #8
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
 8012bc0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012bc2:	683b      	ldr	r3, [r7, #0]
 8012bc4:	885b      	ldrh	r3, [r3, #2]
 8012bc6:	2b01      	cmp	r3, #1
 8012bc8:	d106      	bne.n	8012bd8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	2201      	movs	r2, #1
 8012bce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012bd2:	6878      	ldr	r0, [r7, #4]
 8012bd4:	f000 f92b 	bl	8012e2e <USBD_CtlSendStatus>
  }
}
 8012bd8:	bf00      	nop
 8012bda:	3708      	adds	r7, #8
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}

08012be0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b082      	sub	sp, #8
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
 8012be8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012bf0:	b2db      	uxtb	r3, r3
 8012bf2:	3b01      	subs	r3, #1
 8012bf4:	2b02      	cmp	r3, #2
 8012bf6:	d80b      	bhi.n	8012c10 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012bf8:	683b      	ldr	r3, [r7, #0]
 8012bfa:	885b      	ldrh	r3, [r3, #2]
 8012bfc:	2b01      	cmp	r3, #1
 8012bfe:	d10c      	bne.n	8012c1a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	2200      	movs	r2, #0
 8012c04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012c08:	6878      	ldr	r0, [r7, #4]
 8012c0a:	f000 f910 	bl	8012e2e <USBD_CtlSendStatus>
      }
      break;
 8012c0e:	e004      	b.n	8012c1a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012c10:	6839      	ldr	r1, [r7, #0]
 8012c12:	6878      	ldr	r0, [r7, #4]
 8012c14:	f000 f840 	bl	8012c98 <USBD_CtlError>
      break;
 8012c18:	e000      	b.n	8012c1c <USBD_ClrFeature+0x3c>
      break;
 8012c1a:	bf00      	nop
  }
}
 8012c1c:	bf00      	nop
 8012c1e:	3708      	adds	r7, #8
 8012c20:	46bd      	mov	sp, r7
 8012c22:	bd80      	pop	{r7, pc}

08012c24 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b084      	sub	sp, #16
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6078      	str	r0, [r7, #4]
 8012c2c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012c2e:	683b      	ldr	r3, [r7, #0]
 8012c30:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	781a      	ldrb	r2, [r3, #0]
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	3301      	adds	r3, #1
 8012c3e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	781a      	ldrb	r2, [r3, #0]
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	3301      	adds	r3, #1
 8012c4c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012c4e:	68f8      	ldr	r0, [r7, #12]
 8012c50:	f7ff fabb 	bl	80121ca <SWAPBYTE>
 8012c54:	4603      	mov	r3, r0
 8012c56:	461a      	mov	r2, r3
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	3301      	adds	r3, #1
 8012c60:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	3301      	adds	r3, #1
 8012c66:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012c68:	68f8      	ldr	r0, [r7, #12]
 8012c6a:	f7ff faae 	bl	80121ca <SWAPBYTE>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	461a      	mov	r2, r3
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	3301      	adds	r3, #1
 8012c7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	3301      	adds	r3, #1
 8012c80:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012c82:	68f8      	ldr	r0, [r7, #12]
 8012c84:	f7ff faa1 	bl	80121ca <SWAPBYTE>
 8012c88:	4603      	mov	r3, r0
 8012c8a:	461a      	mov	r2, r3
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	80da      	strh	r2, [r3, #6]
}
 8012c90:	bf00      	nop
 8012c92:	3710      	adds	r7, #16
 8012c94:	46bd      	mov	sp, r7
 8012c96:	bd80      	pop	{r7, pc}

08012c98 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b082      	sub	sp, #8
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
 8012ca0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012ca2:	2180      	movs	r1, #128	; 0x80
 8012ca4:	6878      	ldr	r0, [r7, #4]
 8012ca6:	f006 fe91 	bl	80199cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012caa:	2100      	movs	r1, #0
 8012cac:	6878      	ldr	r0, [r7, #4]
 8012cae:	f006 fe8d 	bl	80199cc <USBD_LL_StallEP>
}
 8012cb2:	bf00      	nop
 8012cb4:	3708      	adds	r7, #8
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	bd80      	pop	{r7, pc}

08012cba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012cba:	b580      	push	{r7, lr}
 8012cbc:	b086      	sub	sp, #24
 8012cbe:	af00      	add	r7, sp, #0
 8012cc0:	60f8      	str	r0, [r7, #12]
 8012cc2:	60b9      	str	r1, [r7, #8]
 8012cc4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d036      	beq.n	8012d3e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012cd4:	6938      	ldr	r0, [r7, #16]
 8012cd6:	f000 f836 	bl	8012d46 <USBD_GetLen>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	3301      	adds	r3, #1
 8012cde:	b29b      	uxth	r3, r3
 8012ce0:	005b      	lsls	r3, r3, #1
 8012ce2:	b29a      	uxth	r2, r3
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012ce8:	7dfb      	ldrb	r3, [r7, #23]
 8012cea:	68ba      	ldr	r2, [r7, #8]
 8012cec:	4413      	add	r3, r2
 8012cee:	687a      	ldr	r2, [r7, #4]
 8012cf0:	7812      	ldrb	r2, [r2, #0]
 8012cf2:	701a      	strb	r2, [r3, #0]
  idx++;
 8012cf4:	7dfb      	ldrb	r3, [r7, #23]
 8012cf6:	3301      	adds	r3, #1
 8012cf8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012cfa:	7dfb      	ldrb	r3, [r7, #23]
 8012cfc:	68ba      	ldr	r2, [r7, #8]
 8012cfe:	4413      	add	r3, r2
 8012d00:	2203      	movs	r2, #3
 8012d02:	701a      	strb	r2, [r3, #0]
  idx++;
 8012d04:	7dfb      	ldrb	r3, [r7, #23]
 8012d06:	3301      	adds	r3, #1
 8012d08:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012d0a:	e013      	b.n	8012d34 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012d0c:	7dfb      	ldrb	r3, [r7, #23]
 8012d0e:	68ba      	ldr	r2, [r7, #8]
 8012d10:	4413      	add	r3, r2
 8012d12:	693a      	ldr	r2, [r7, #16]
 8012d14:	7812      	ldrb	r2, [r2, #0]
 8012d16:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012d18:	693b      	ldr	r3, [r7, #16]
 8012d1a:	3301      	adds	r3, #1
 8012d1c:	613b      	str	r3, [r7, #16]
    idx++;
 8012d1e:	7dfb      	ldrb	r3, [r7, #23]
 8012d20:	3301      	adds	r3, #1
 8012d22:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012d24:	7dfb      	ldrb	r3, [r7, #23]
 8012d26:	68ba      	ldr	r2, [r7, #8]
 8012d28:	4413      	add	r3, r2
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	701a      	strb	r2, [r3, #0]
    idx++;
 8012d2e:	7dfb      	ldrb	r3, [r7, #23]
 8012d30:	3301      	adds	r3, #1
 8012d32:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012d34:	693b      	ldr	r3, [r7, #16]
 8012d36:	781b      	ldrb	r3, [r3, #0]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d1e7      	bne.n	8012d0c <USBD_GetString+0x52>
 8012d3c:	e000      	b.n	8012d40 <USBD_GetString+0x86>
    return;
 8012d3e:	bf00      	nop
  }
}
 8012d40:	3718      	adds	r7, #24
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bd80      	pop	{r7, pc}

08012d46 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012d46:	b480      	push	{r7}
 8012d48:	b085      	sub	sp, #20
 8012d4a:	af00      	add	r7, sp, #0
 8012d4c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012d4e:	2300      	movs	r3, #0
 8012d50:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012d56:	e005      	b.n	8012d64 <USBD_GetLen+0x1e>
  {
    len++;
 8012d58:	7bfb      	ldrb	r3, [r7, #15]
 8012d5a:	3301      	adds	r3, #1
 8012d5c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012d5e:	68bb      	ldr	r3, [r7, #8]
 8012d60:	3301      	adds	r3, #1
 8012d62:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012d64:	68bb      	ldr	r3, [r7, #8]
 8012d66:	781b      	ldrb	r3, [r3, #0]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d1f5      	bne.n	8012d58 <USBD_GetLen+0x12>
  }

  return len;
 8012d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d6e:	4618      	mov	r0, r3
 8012d70:	3714      	adds	r7, #20
 8012d72:	46bd      	mov	sp, r7
 8012d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d78:	4770      	bx	lr

08012d7a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012d7a:	b580      	push	{r7, lr}
 8012d7c:	b084      	sub	sp, #16
 8012d7e:	af00      	add	r7, sp, #0
 8012d80:	60f8      	str	r0, [r7, #12]
 8012d82:	60b9      	str	r1, [r7, #8]
 8012d84:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	2202      	movs	r2, #2
 8012d8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	687a      	ldr	r2, [r7, #4]
 8012d92:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	687a      	ldr	r2, [r7, #4]
 8012d98:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	68ba      	ldr	r2, [r7, #8]
 8012d9e:	2100      	movs	r1, #0
 8012da0:	68f8      	ldr	r0, [r7, #12]
 8012da2:	f006 fe9c 	bl	8019ade <USBD_LL_Transmit>

  return USBD_OK;
 8012da6:	2300      	movs	r3, #0
}
 8012da8:	4618      	mov	r0, r3
 8012daa:	3710      	adds	r7, #16
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bd80      	pop	{r7, pc}

08012db0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b084      	sub	sp, #16
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	60f8      	str	r0, [r7, #12]
 8012db8:	60b9      	str	r1, [r7, #8]
 8012dba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	68ba      	ldr	r2, [r7, #8]
 8012dc0:	2100      	movs	r1, #0
 8012dc2:	68f8      	ldr	r0, [r7, #12]
 8012dc4:	f006 fe8b 	bl	8019ade <USBD_LL_Transmit>

  return USBD_OK;
 8012dc8:	2300      	movs	r3, #0
}
 8012dca:	4618      	mov	r0, r3
 8012dcc:	3710      	adds	r7, #16
 8012dce:	46bd      	mov	sp, r7
 8012dd0:	bd80      	pop	{r7, pc}

08012dd2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012dd2:	b580      	push	{r7, lr}
 8012dd4:	b084      	sub	sp, #16
 8012dd6:	af00      	add	r7, sp, #0
 8012dd8:	60f8      	str	r0, [r7, #12]
 8012dda:	60b9      	str	r1, [r7, #8]
 8012ddc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	2203      	movs	r2, #3
 8012de2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	687a      	ldr	r2, [r7, #4]
 8012dea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	687a      	ldr	r2, [r7, #4]
 8012df2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	68ba      	ldr	r2, [r7, #8]
 8012dfa:	2100      	movs	r1, #0
 8012dfc:	68f8      	ldr	r0, [r7, #12]
 8012dfe:	f006 fe8f 	bl	8019b20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012e02:	2300      	movs	r3, #0
}
 8012e04:	4618      	mov	r0, r3
 8012e06:	3710      	adds	r7, #16
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	bd80      	pop	{r7, pc}

08012e0c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b084      	sub	sp, #16
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	60f8      	str	r0, [r7, #12]
 8012e14:	60b9      	str	r1, [r7, #8]
 8012e16:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	68ba      	ldr	r2, [r7, #8]
 8012e1c:	2100      	movs	r1, #0
 8012e1e:	68f8      	ldr	r0, [r7, #12]
 8012e20:	f006 fe7e 	bl	8019b20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012e24:	2300      	movs	r3, #0
}
 8012e26:	4618      	mov	r0, r3
 8012e28:	3710      	adds	r7, #16
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	bd80      	pop	{r7, pc}

08012e2e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012e2e:	b580      	push	{r7, lr}
 8012e30:	b082      	sub	sp, #8
 8012e32:	af00      	add	r7, sp, #0
 8012e34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	2204      	movs	r2, #4
 8012e3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012e3e:	2300      	movs	r3, #0
 8012e40:	2200      	movs	r2, #0
 8012e42:	2100      	movs	r1, #0
 8012e44:	6878      	ldr	r0, [r7, #4]
 8012e46:	f006 fe4a 	bl	8019ade <USBD_LL_Transmit>

  return USBD_OK;
 8012e4a:	2300      	movs	r3, #0
}
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	3708      	adds	r7, #8
 8012e50:	46bd      	mov	sp, r7
 8012e52:	bd80      	pop	{r7, pc}

08012e54 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b082      	sub	sp, #8
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2205      	movs	r2, #5
 8012e60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012e64:	2300      	movs	r3, #0
 8012e66:	2200      	movs	r2, #0
 8012e68:	2100      	movs	r1, #0
 8012e6a:	6878      	ldr	r0, [r7, #4]
 8012e6c:	f006 fe58 	bl	8019b20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012e70:	2300      	movs	r3, #0
}
 8012e72:	4618      	mov	r0, r3
 8012e74:	3708      	adds	r7, #8
 8012e76:	46bd      	mov	sp, r7
 8012e78:	bd80      	pop	{r7, pc}
	...

08012e7c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b084      	sub	sp, #16
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	4603      	mov	r3, r0
 8012e84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012e86:	79fb      	ldrb	r3, [r7, #7]
 8012e88:	4a08      	ldr	r2, [pc, #32]	; (8012eac <disk_status+0x30>)
 8012e8a:	009b      	lsls	r3, r3, #2
 8012e8c:	4413      	add	r3, r2
 8012e8e:	685b      	ldr	r3, [r3, #4]
 8012e90:	685b      	ldr	r3, [r3, #4]
 8012e92:	79fa      	ldrb	r2, [r7, #7]
 8012e94:	4905      	ldr	r1, [pc, #20]	; (8012eac <disk_status+0x30>)
 8012e96:	440a      	add	r2, r1
 8012e98:	7a12      	ldrb	r2, [r2, #8]
 8012e9a:	4610      	mov	r0, r2
 8012e9c:	4798      	blx	r3
 8012e9e:	4603      	mov	r3, r0
 8012ea0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	3710      	adds	r7, #16
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	bd80      	pop	{r7, pc}
 8012eac:	2000086c 	.word	0x2000086c

08012eb0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b084      	sub	sp, #16
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012eba:	2300      	movs	r3, #0
 8012ebc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012ebe:	79fb      	ldrb	r3, [r7, #7]
 8012ec0:	4a0d      	ldr	r2, [pc, #52]	; (8012ef8 <disk_initialize+0x48>)
 8012ec2:	5cd3      	ldrb	r3, [r2, r3]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d111      	bne.n	8012eec <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012ec8:	79fb      	ldrb	r3, [r7, #7]
 8012eca:	4a0b      	ldr	r2, [pc, #44]	; (8012ef8 <disk_initialize+0x48>)
 8012ecc:	2101      	movs	r1, #1
 8012ece:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012ed0:	79fb      	ldrb	r3, [r7, #7]
 8012ed2:	4a09      	ldr	r2, [pc, #36]	; (8012ef8 <disk_initialize+0x48>)
 8012ed4:	009b      	lsls	r3, r3, #2
 8012ed6:	4413      	add	r3, r2
 8012ed8:	685b      	ldr	r3, [r3, #4]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	79fa      	ldrb	r2, [r7, #7]
 8012ede:	4906      	ldr	r1, [pc, #24]	; (8012ef8 <disk_initialize+0x48>)
 8012ee0:	440a      	add	r2, r1
 8012ee2:	7a12      	ldrb	r2, [r2, #8]
 8012ee4:	4610      	mov	r0, r2
 8012ee6:	4798      	blx	r3
 8012ee8:	4603      	mov	r3, r0
 8012eea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8012eee:	4618      	mov	r0, r3
 8012ef0:	3710      	adds	r7, #16
 8012ef2:	46bd      	mov	sp, r7
 8012ef4:	bd80      	pop	{r7, pc}
 8012ef6:	bf00      	nop
 8012ef8:	2000086c 	.word	0x2000086c

08012efc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012efc:	b590      	push	{r4, r7, lr}
 8012efe:	b087      	sub	sp, #28
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	60b9      	str	r1, [r7, #8]
 8012f04:	607a      	str	r2, [r7, #4]
 8012f06:	603b      	str	r3, [r7, #0]
 8012f08:	4603      	mov	r3, r0
 8012f0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012f0c:	7bfb      	ldrb	r3, [r7, #15]
 8012f0e:	4a0a      	ldr	r2, [pc, #40]	; (8012f38 <disk_read+0x3c>)
 8012f10:	009b      	lsls	r3, r3, #2
 8012f12:	4413      	add	r3, r2
 8012f14:	685b      	ldr	r3, [r3, #4]
 8012f16:	689c      	ldr	r4, [r3, #8]
 8012f18:	7bfb      	ldrb	r3, [r7, #15]
 8012f1a:	4a07      	ldr	r2, [pc, #28]	; (8012f38 <disk_read+0x3c>)
 8012f1c:	4413      	add	r3, r2
 8012f1e:	7a18      	ldrb	r0, [r3, #8]
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	687a      	ldr	r2, [r7, #4]
 8012f24:	68b9      	ldr	r1, [r7, #8]
 8012f26:	47a0      	blx	r4
 8012f28:	4603      	mov	r3, r0
 8012f2a:	75fb      	strb	r3, [r7, #23]
  return res;
 8012f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f2e:	4618      	mov	r0, r3
 8012f30:	371c      	adds	r7, #28
 8012f32:	46bd      	mov	sp, r7
 8012f34:	bd90      	pop	{r4, r7, pc}
 8012f36:	bf00      	nop
 8012f38:	2000086c 	.word	0x2000086c

08012f3c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012f3c:	b590      	push	{r4, r7, lr}
 8012f3e:	b087      	sub	sp, #28
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	60b9      	str	r1, [r7, #8]
 8012f44:	607a      	str	r2, [r7, #4]
 8012f46:	603b      	str	r3, [r7, #0]
 8012f48:	4603      	mov	r3, r0
 8012f4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012f4c:	7bfb      	ldrb	r3, [r7, #15]
 8012f4e:	4a0a      	ldr	r2, [pc, #40]	; (8012f78 <disk_write+0x3c>)
 8012f50:	009b      	lsls	r3, r3, #2
 8012f52:	4413      	add	r3, r2
 8012f54:	685b      	ldr	r3, [r3, #4]
 8012f56:	68dc      	ldr	r4, [r3, #12]
 8012f58:	7bfb      	ldrb	r3, [r7, #15]
 8012f5a:	4a07      	ldr	r2, [pc, #28]	; (8012f78 <disk_write+0x3c>)
 8012f5c:	4413      	add	r3, r2
 8012f5e:	7a18      	ldrb	r0, [r3, #8]
 8012f60:	683b      	ldr	r3, [r7, #0]
 8012f62:	687a      	ldr	r2, [r7, #4]
 8012f64:	68b9      	ldr	r1, [r7, #8]
 8012f66:	47a0      	blx	r4
 8012f68:	4603      	mov	r3, r0
 8012f6a:	75fb      	strb	r3, [r7, #23]
  return res;
 8012f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f6e:	4618      	mov	r0, r3
 8012f70:	371c      	adds	r7, #28
 8012f72:	46bd      	mov	sp, r7
 8012f74:	bd90      	pop	{r4, r7, pc}
 8012f76:	bf00      	nop
 8012f78:	2000086c 	.word	0x2000086c

08012f7c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b084      	sub	sp, #16
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	4603      	mov	r3, r0
 8012f84:	603a      	str	r2, [r7, #0]
 8012f86:	71fb      	strb	r3, [r7, #7]
 8012f88:	460b      	mov	r3, r1
 8012f8a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012f8c:	79fb      	ldrb	r3, [r7, #7]
 8012f8e:	4a09      	ldr	r2, [pc, #36]	; (8012fb4 <disk_ioctl+0x38>)
 8012f90:	009b      	lsls	r3, r3, #2
 8012f92:	4413      	add	r3, r2
 8012f94:	685b      	ldr	r3, [r3, #4]
 8012f96:	691b      	ldr	r3, [r3, #16]
 8012f98:	79fa      	ldrb	r2, [r7, #7]
 8012f9a:	4906      	ldr	r1, [pc, #24]	; (8012fb4 <disk_ioctl+0x38>)
 8012f9c:	440a      	add	r2, r1
 8012f9e:	7a10      	ldrb	r0, [r2, #8]
 8012fa0:	79b9      	ldrb	r1, [r7, #6]
 8012fa2:	683a      	ldr	r2, [r7, #0]
 8012fa4:	4798      	blx	r3
 8012fa6:	4603      	mov	r3, r0
 8012fa8:	73fb      	strb	r3, [r7, #15]
  return res;
 8012faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fac:	4618      	mov	r0, r3
 8012fae:	3710      	adds	r7, #16
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	bd80      	pop	{r7, pc}
 8012fb4:	2000086c 	.word	0x2000086c

08012fb8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012fb8:	b480      	push	{r7}
 8012fba:	b085      	sub	sp, #20
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	3301      	adds	r3, #1
 8012fc4:	781b      	ldrb	r3, [r3, #0]
 8012fc6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012fc8:	89fb      	ldrh	r3, [r7, #14]
 8012fca:	021b      	lsls	r3, r3, #8
 8012fcc:	b21a      	sxth	r2, r3
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	781b      	ldrb	r3, [r3, #0]
 8012fd2:	b21b      	sxth	r3, r3
 8012fd4:	4313      	orrs	r3, r2
 8012fd6:	b21b      	sxth	r3, r3
 8012fd8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012fda:	89fb      	ldrh	r3, [r7, #14]
}
 8012fdc:	4618      	mov	r0, r3
 8012fde:	3714      	adds	r7, #20
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe6:	4770      	bx	lr

08012fe8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012fe8:	b480      	push	{r7}
 8012fea:	b085      	sub	sp, #20
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	3303      	adds	r3, #3
 8012ff4:	781b      	ldrb	r3, [r3, #0]
 8012ff6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	021b      	lsls	r3, r3, #8
 8012ffc:	687a      	ldr	r2, [r7, #4]
 8012ffe:	3202      	adds	r2, #2
 8013000:	7812      	ldrb	r2, [r2, #0]
 8013002:	4313      	orrs	r3, r2
 8013004:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	021b      	lsls	r3, r3, #8
 801300a:	687a      	ldr	r2, [r7, #4]
 801300c:	3201      	adds	r2, #1
 801300e:	7812      	ldrb	r2, [r2, #0]
 8013010:	4313      	orrs	r3, r2
 8013012:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	021b      	lsls	r3, r3, #8
 8013018:	687a      	ldr	r2, [r7, #4]
 801301a:	7812      	ldrb	r2, [r2, #0]
 801301c:	4313      	orrs	r3, r2
 801301e:	60fb      	str	r3, [r7, #12]
	return rv;
 8013020:	68fb      	ldr	r3, [r7, #12]
}
 8013022:	4618      	mov	r0, r3
 8013024:	3714      	adds	r7, #20
 8013026:	46bd      	mov	sp, r7
 8013028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801302c:	4770      	bx	lr

0801302e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801302e:	b480      	push	{r7}
 8013030:	b083      	sub	sp, #12
 8013032:	af00      	add	r7, sp, #0
 8013034:	6078      	str	r0, [r7, #4]
 8013036:	460b      	mov	r3, r1
 8013038:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	1c5a      	adds	r2, r3, #1
 801303e:	607a      	str	r2, [r7, #4]
 8013040:	887a      	ldrh	r2, [r7, #2]
 8013042:	b2d2      	uxtb	r2, r2
 8013044:	701a      	strb	r2, [r3, #0]
 8013046:	887b      	ldrh	r3, [r7, #2]
 8013048:	0a1b      	lsrs	r3, r3, #8
 801304a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	1c5a      	adds	r2, r3, #1
 8013050:	607a      	str	r2, [r7, #4]
 8013052:	887a      	ldrh	r2, [r7, #2]
 8013054:	b2d2      	uxtb	r2, r2
 8013056:	701a      	strb	r2, [r3, #0]
}
 8013058:	bf00      	nop
 801305a:	370c      	adds	r7, #12
 801305c:	46bd      	mov	sp, r7
 801305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013062:	4770      	bx	lr

08013064 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8013064:	b480      	push	{r7}
 8013066:	b083      	sub	sp, #12
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
 801306c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	1c5a      	adds	r2, r3, #1
 8013072:	607a      	str	r2, [r7, #4]
 8013074:	683a      	ldr	r2, [r7, #0]
 8013076:	b2d2      	uxtb	r2, r2
 8013078:	701a      	strb	r2, [r3, #0]
 801307a:	683b      	ldr	r3, [r7, #0]
 801307c:	0a1b      	lsrs	r3, r3, #8
 801307e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	1c5a      	adds	r2, r3, #1
 8013084:	607a      	str	r2, [r7, #4]
 8013086:	683a      	ldr	r2, [r7, #0]
 8013088:	b2d2      	uxtb	r2, r2
 801308a:	701a      	strb	r2, [r3, #0]
 801308c:	683b      	ldr	r3, [r7, #0]
 801308e:	0a1b      	lsrs	r3, r3, #8
 8013090:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	1c5a      	adds	r2, r3, #1
 8013096:	607a      	str	r2, [r7, #4]
 8013098:	683a      	ldr	r2, [r7, #0]
 801309a:	b2d2      	uxtb	r2, r2
 801309c:	701a      	strb	r2, [r3, #0]
 801309e:	683b      	ldr	r3, [r7, #0]
 80130a0:	0a1b      	lsrs	r3, r3, #8
 80130a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	1c5a      	adds	r2, r3, #1
 80130a8:	607a      	str	r2, [r7, #4]
 80130aa:	683a      	ldr	r2, [r7, #0]
 80130ac:	b2d2      	uxtb	r2, r2
 80130ae:	701a      	strb	r2, [r3, #0]
}
 80130b0:	bf00      	nop
 80130b2:	370c      	adds	r7, #12
 80130b4:	46bd      	mov	sp, r7
 80130b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ba:	4770      	bx	lr

080130bc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80130bc:	b480      	push	{r7}
 80130be:	b087      	sub	sp, #28
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	60f8      	str	r0, [r7, #12]
 80130c4:	60b9      	str	r1, [r7, #8]
 80130c6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80130cc:	68bb      	ldr	r3, [r7, #8]
 80130ce:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d00d      	beq.n	80130f2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80130d6:	693a      	ldr	r2, [r7, #16]
 80130d8:	1c53      	adds	r3, r2, #1
 80130da:	613b      	str	r3, [r7, #16]
 80130dc:	697b      	ldr	r3, [r7, #20]
 80130de:	1c59      	adds	r1, r3, #1
 80130e0:	6179      	str	r1, [r7, #20]
 80130e2:	7812      	ldrb	r2, [r2, #0]
 80130e4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	3b01      	subs	r3, #1
 80130ea:	607b      	str	r3, [r7, #4]
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d1f1      	bne.n	80130d6 <mem_cpy+0x1a>
	}
}
 80130f2:	bf00      	nop
 80130f4:	371c      	adds	r7, #28
 80130f6:	46bd      	mov	sp, r7
 80130f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130fc:	4770      	bx	lr

080130fe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80130fe:	b480      	push	{r7}
 8013100:	b087      	sub	sp, #28
 8013102:	af00      	add	r7, sp, #0
 8013104:	60f8      	str	r0, [r7, #12]
 8013106:	60b9      	str	r1, [r7, #8]
 8013108:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801310e:	697b      	ldr	r3, [r7, #20]
 8013110:	1c5a      	adds	r2, r3, #1
 8013112:	617a      	str	r2, [r7, #20]
 8013114:	68ba      	ldr	r2, [r7, #8]
 8013116:	b2d2      	uxtb	r2, r2
 8013118:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	3b01      	subs	r3, #1
 801311e:	607b      	str	r3, [r7, #4]
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d1f3      	bne.n	801310e <mem_set+0x10>
}
 8013126:	bf00      	nop
 8013128:	bf00      	nop
 801312a:	371c      	adds	r7, #28
 801312c:	46bd      	mov	sp, r7
 801312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013132:	4770      	bx	lr

08013134 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8013134:	b480      	push	{r7}
 8013136:	b089      	sub	sp, #36	; 0x24
 8013138:	af00      	add	r7, sp, #0
 801313a:	60f8      	str	r0, [r7, #12]
 801313c:	60b9      	str	r1, [r7, #8]
 801313e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	61fb      	str	r3, [r7, #28]
 8013144:	68bb      	ldr	r3, [r7, #8]
 8013146:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8013148:	2300      	movs	r3, #0
 801314a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801314c:	69fb      	ldr	r3, [r7, #28]
 801314e:	1c5a      	adds	r2, r3, #1
 8013150:	61fa      	str	r2, [r7, #28]
 8013152:	781b      	ldrb	r3, [r3, #0]
 8013154:	4619      	mov	r1, r3
 8013156:	69bb      	ldr	r3, [r7, #24]
 8013158:	1c5a      	adds	r2, r3, #1
 801315a:	61ba      	str	r2, [r7, #24]
 801315c:	781b      	ldrb	r3, [r3, #0]
 801315e:	1acb      	subs	r3, r1, r3
 8013160:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	3b01      	subs	r3, #1
 8013166:	607b      	str	r3, [r7, #4]
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d002      	beq.n	8013174 <mem_cmp+0x40>
 801316e:	697b      	ldr	r3, [r7, #20]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d0eb      	beq.n	801314c <mem_cmp+0x18>

	return r;
 8013174:	697b      	ldr	r3, [r7, #20]
}
 8013176:	4618      	mov	r0, r3
 8013178:	3724      	adds	r7, #36	; 0x24
 801317a:	46bd      	mov	sp, r7
 801317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013180:	4770      	bx	lr

08013182 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8013182:	b480      	push	{r7}
 8013184:	b083      	sub	sp, #12
 8013186:	af00      	add	r7, sp, #0
 8013188:	6078      	str	r0, [r7, #4]
 801318a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801318c:	e002      	b.n	8013194 <chk_chr+0x12>
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	3301      	adds	r3, #1
 8013192:	607b      	str	r3, [r7, #4]
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	781b      	ldrb	r3, [r3, #0]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d005      	beq.n	80131a8 <chk_chr+0x26>
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	781b      	ldrb	r3, [r3, #0]
 80131a0:	461a      	mov	r2, r3
 80131a2:	683b      	ldr	r3, [r7, #0]
 80131a4:	4293      	cmp	r3, r2
 80131a6:	d1f2      	bne.n	801318e <chk_chr+0xc>
	return *str;
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	781b      	ldrb	r3, [r3, #0]
}
 80131ac:	4618      	mov	r0, r3
 80131ae:	370c      	adds	r7, #12
 80131b0:	46bd      	mov	sp, r7
 80131b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b6:	4770      	bx	lr

080131b8 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b082      	sub	sp, #8
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d009      	beq.n	80131da <lock_fs+0x22>
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	68db      	ldr	r3, [r3, #12]
 80131ca:	4618      	mov	r0, r3
 80131cc:	f002 fcde 	bl	8015b8c <ff_req_grant>
 80131d0:	4603      	mov	r3, r0
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d001      	beq.n	80131da <lock_fs+0x22>
 80131d6:	2301      	movs	r3, #1
 80131d8:	e000      	b.n	80131dc <lock_fs+0x24>
 80131da:	2300      	movs	r3, #0
}
 80131dc:	4618      	mov	r0, r3
 80131de:	3708      	adds	r7, #8
 80131e0:	46bd      	mov	sp, r7
 80131e2:	bd80      	pop	{r7, pc}

080131e4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80131e4:	b580      	push	{r7, lr}
 80131e6:	b082      	sub	sp, #8
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
 80131ec:	460b      	mov	r3, r1
 80131ee:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d00d      	beq.n	8013212 <unlock_fs+0x2e>
 80131f6:	78fb      	ldrb	r3, [r7, #3]
 80131f8:	2b0c      	cmp	r3, #12
 80131fa:	d00a      	beq.n	8013212 <unlock_fs+0x2e>
 80131fc:	78fb      	ldrb	r3, [r7, #3]
 80131fe:	2b0b      	cmp	r3, #11
 8013200:	d007      	beq.n	8013212 <unlock_fs+0x2e>
 8013202:	78fb      	ldrb	r3, [r7, #3]
 8013204:	2b0f      	cmp	r3, #15
 8013206:	d004      	beq.n	8013212 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	68db      	ldr	r3, [r3, #12]
 801320c:	4618      	mov	r0, r3
 801320e:	f002 fcd2 	bl	8015bb6 <ff_rel_grant>
	}
}
 8013212:	bf00      	nop
 8013214:	3708      	adds	r7, #8
 8013216:	46bd      	mov	sp, r7
 8013218:	bd80      	pop	{r7, pc}
	...

0801321c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801321c:	b480      	push	{r7}
 801321e:	b085      	sub	sp, #20
 8013220:	af00      	add	r7, sp, #0
 8013222:	6078      	str	r0, [r7, #4]
 8013224:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013226:	2300      	movs	r3, #0
 8013228:	60bb      	str	r3, [r7, #8]
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	60fb      	str	r3, [r7, #12]
 801322e:	e029      	b.n	8013284 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8013230:	4a27      	ldr	r2, [pc, #156]	; (80132d0 <chk_lock+0xb4>)
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	011b      	lsls	r3, r3, #4
 8013236:	4413      	add	r3, r2
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	2b00      	cmp	r3, #0
 801323c:	d01d      	beq.n	801327a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801323e:	4a24      	ldr	r2, [pc, #144]	; (80132d0 <chk_lock+0xb4>)
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	011b      	lsls	r3, r3, #4
 8013244:	4413      	add	r3, r2
 8013246:	681a      	ldr	r2, [r3, #0]
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	429a      	cmp	r2, r3
 801324e:	d116      	bne.n	801327e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8013250:	4a1f      	ldr	r2, [pc, #124]	; (80132d0 <chk_lock+0xb4>)
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	011b      	lsls	r3, r3, #4
 8013256:	4413      	add	r3, r2
 8013258:	3304      	adds	r3, #4
 801325a:	681a      	ldr	r2, [r3, #0]
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013260:	429a      	cmp	r2, r3
 8013262:	d10c      	bne.n	801327e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8013264:	4a1a      	ldr	r2, [pc, #104]	; (80132d0 <chk_lock+0xb4>)
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	011b      	lsls	r3, r3, #4
 801326a:	4413      	add	r3, r2
 801326c:	3308      	adds	r3, #8
 801326e:	681a      	ldr	r2, [r3, #0]
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8013274:	429a      	cmp	r2, r3
 8013276:	d102      	bne.n	801327e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8013278:	e007      	b.n	801328a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801327a:	2301      	movs	r3, #1
 801327c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	3301      	adds	r3, #1
 8013282:	60fb      	str	r3, [r7, #12]
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	2b01      	cmp	r3, #1
 8013288:	d9d2      	bls.n	8013230 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	2b02      	cmp	r3, #2
 801328e:	d109      	bne.n	80132a4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8013290:	68bb      	ldr	r3, [r7, #8]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d102      	bne.n	801329c <chk_lock+0x80>
 8013296:	683b      	ldr	r3, [r7, #0]
 8013298:	2b02      	cmp	r3, #2
 801329a:	d101      	bne.n	80132a0 <chk_lock+0x84>
 801329c:	2300      	movs	r3, #0
 801329e:	e010      	b.n	80132c2 <chk_lock+0xa6>
 80132a0:	2312      	movs	r3, #18
 80132a2:	e00e      	b.n	80132c2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80132a4:	683b      	ldr	r3, [r7, #0]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d108      	bne.n	80132bc <chk_lock+0xa0>
 80132aa:	4a09      	ldr	r2, [pc, #36]	; (80132d0 <chk_lock+0xb4>)
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	011b      	lsls	r3, r3, #4
 80132b0:	4413      	add	r3, r2
 80132b2:	330c      	adds	r3, #12
 80132b4:	881b      	ldrh	r3, [r3, #0]
 80132b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80132ba:	d101      	bne.n	80132c0 <chk_lock+0xa4>
 80132bc:	2310      	movs	r3, #16
 80132be:	e000      	b.n	80132c2 <chk_lock+0xa6>
 80132c0:	2300      	movs	r3, #0
}
 80132c2:	4618      	mov	r0, r3
 80132c4:	3714      	adds	r7, #20
 80132c6:	46bd      	mov	sp, r7
 80132c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132cc:	4770      	bx	lr
 80132ce:	bf00      	nop
 80132d0:	2000084c 	.word	0x2000084c

080132d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80132d4:	b480      	push	{r7}
 80132d6:	b083      	sub	sp, #12
 80132d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80132da:	2300      	movs	r3, #0
 80132dc:	607b      	str	r3, [r7, #4]
 80132de:	e002      	b.n	80132e6 <enq_lock+0x12>
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	3301      	adds	r3, #1
 80132e4:	607b      	str	r3, [r7, #4]
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	2b01      	cmp	r3, #1
 80132ea:	d806      	bhi.n	80132fa <enq_lock+0x26>
 80132ec:	4a09      	ldr	r2, [pc, #36]	; (8013314 <enq_lock+0x40>)
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	011b      	lsls	r3, r3, #4
 80132f2:	4413      	add	r3, r2
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d1f2      	bne.n	80132e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	2b02      	cmp	r3, #2
 80132fe:	bf14      	ite	ne
 8013300:	2301      	movne	r3, #1
 8013302:	2300      	moveq	r3, #0
 8013304:	b2db      	uxtb	r3, r3
}
 8013306:	4618      	mov	r0, r3
 8013308:	370c      	adds	r7, #12
 801330a:	46bd      	mov	sp, r7
 801330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013310:	4770      	bx	lr
 8013312:	bf00      	nop
 8013314:	2000084c 	.word	0x2000084c

08013318 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013318:	b480      	push	{r7}
 801331a:	b085      	sub	sp, #20
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
 8013320:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013322:	2300      	movs	r3, #0
 8013324:	60fb      	str	r3, [r7, #12]
 8013326:	e01f      	b.n	8013368 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8013328:	4a41      	ldr	r2, [pc, #260]	; (8013430 <inc_lock+0x118>)
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	011b      	lsls	r3, r3, #4
 801332e:	4413      	add	r3, r2
 8013330:	681a      	ldr	r2, [r3, #0]
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	429a      	cmp	r2, r3
 8013338:	d113      	bne.n	8013362 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801333a:	4a3d      	ldr	r2, [pc, #244]	; (8013430 <inc_lock+0x118>)
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	011b      	lsls	r3, r3, #4
 8013340:	4413      	add	r3, r2
 8013342:	3304      	adds	r3, #4
 8013344:	681a      	ldr	r2, [r3, #0]
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801334a:	429a      	cmp	r2, r3
 801334c:	d109      	bne.n	8013362 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801334e:	4a38      	ldr	r2, [pc, #224]	; (8013430 <inc_lock+0x118>)
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	011b      	lsls	r3, r3, #4
 8013354:	4413      	add	r3, r2
 8013356:	3308      	adds	r3, #8
 8013358:	681a      	ldr	r2, [r3, #0]
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801335e:	429a      	cmp	r2, r3
 8013360:	d006      	beq.n	8013370 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	3301      	adds	r3, #1
 8013366:	60fb      	str	r3, [r7, #12]
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	2b01      	cmp	r3, #1
 801336c:	d9dc      	bls.n	8013328 <inc_lock+0x10>
 801336e:	e000      	b.n	8013372 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8013370:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	2b02      	cmp	r3, #2
 8013376:	d132      	bne.n	80133de <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013378:	2300      	movs	r3, #0
 801337a:	60fb      	str	r3, [r7, #12]
 801337c:	e002      	b.n	8013384 <inc_lock+0x6c>
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	3301      	adds	r3, #1
 8013382:	60fb      	str	r3, [r7, #12]
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	2b01      	cmp	r3, #1
 8013388:	d806      	bhi.n	8013398 <inc_lock+0x80>
 801338a:	4a29      	ldr	r2, [pc, #164]	; (8013430 <inc_lock+0x118>)
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	011b      	lsls	r3, r3, #4
 8013390:	4413      	add	r3, r2
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d1f2      	bne.n	801337e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	2b02      	cmp	r3, #2
 801339c:	d101      	bne.n	80133a2 <inc_lock+0x8a>
 801339e:	2300      	movs	r3, #0
 80133a0:	e040      	b.n	8013424 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	681a      	ldr	r2, [r3, #0]
 80133a6:	4922      	ldr	r1, [pc, #136]	; (8013430 <inc_lock+0x118>)
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	011b      	lsls	r3, r3, #4
 80133ac:	440b      	add	r3, r1
 80133ae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	689a      	ldr	r2, [r3, #8]
 80133b4:	491e      	ldr	r1, [pc, #120]	; (8013430 <inc_lock+0x118>)
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	011b      	lsls	r3, r3, #4
 80133ba:	440b      	add	r3, r1
 80133bc:	3304      	adds	r3, #4
 80133be:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	695a      	ldr	r2, [r3, #20]
 80133c4:	491a      	ldr	r1, [pc, #104]	; (8013430 <inc_lock+0x118>)
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	011b      	lsls	r3, r3, #4
 80133ca:	440b      	add	r3, r1
 80133cc:	3308      	adds	r3, #8
 80133ce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80133d0:	4a17      	ldr	r2, [pc, #92]	; (8013430 <inc_lock+0x118>)
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	011b      	lsls	r3, r3, #4
 80133d6:	4413      	add	r3, r2
 80133d8:	330c      	adds	r3, #12
 80133da:	2200      	movs	r2, #0
 80133dc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80133de:	683b      	ldr	r3, [r7, #0]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d009      	beq.n	80133f8 <inc_lock+0xe0>
 80133e4:	4a12      	ldr	r2, [pc, #72]	; (8013430 <inc_lock+0x118>)
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	011b      	lsls	r3, r3, #4
 80133ea:	4413      	add	r3, r2
 80133ec:	330c      	adds	r3, #12
 80133ee:	881b      	ldrh	r3, [r3, #0]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d001      	beq.n	80133f8 <inc_lock+0xe0>
 80133f4:	2300      	movs	r3, #0
 80133f6:	e015      	b.n	8013424 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80133f8:	683b      	ldr	r3, [r7, #0]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d108      	bne.n	8013410 <inc_lock+0xf8>
 80133fe:	4a0c      	ldr	r2, [pc, #48]	; (8013430 <inc_lock+0x118>)
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	011b      	lsls	r3, r3, #4
 8013404:	4413      	add	r3, r2
 8013406:	330c      	adds	r3, #12
 8013408:	881b      	ldrh	r3, [r3, #0]
 801340a:	3301      	adds	r3, #1
 801340c:	b29a      	uxth	r2, r3
 801340e:	e001      	b.n	8013414 <inc_lock+0xfc>
 8013410:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013414:	4906      	ldr	r1, [pc, #24]	; (8013430 <inc_lock+0x118>)
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	011b      	lsls	r3, r3, #4
 801341a:	440b      	add	r3, r1
 801341c:	330c      	adds	r3, #12
 801341e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	3301      	adds	r3, #1
}
 8013424:	4618      	mov	r0, r3
 8013426:	3714      	adds	r7, #20
 8013428:	46bd      	mov	sp, r7
 801342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801342e:	4770      	bx	lr
 8013430:	2000084c 	.word	0x2000084c

08013434 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8013434:	b480      	push	{r7}
 8013436:	b085      	sub	sp, #20
 8013438:	af00      	add	r7, sp, #0
 801343a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	3b01      	subs	r3, #1
 8013440:	607b      	str	r3, [r7, #4]
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	2b01      	cmp	r3, #1
 8013446:	d825      	bhi.n	8013494 <dec_lock+0x60>
		n = Files[i].ctr;
 8013448:	4a17      	ldr	r2, [pc, #92]	; (80134a8 <dec_lock+0x74>)
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	011b      	lsls	r3, r3, #4
 801344e:	4413      	add	r3, r2
 8013450:	330c      	adds	r3, #12
 8013452:	881b      	ldrh	r3, [r3, #0]
 8013454:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8013456:	89fb      	ldrh	r3, [r7, #14]
 8013458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801345c:	d101      	bne.n	8013462 <dec_lock+0x2e>
 801345e:	2300      	movs	r3, #0
 8013460:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8013462:	89fb      	ldrh	r3, [r7, #14]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d002      	beq.n	801346e <dec_lock+0x3a>
 8013468:	89fb      	ldrh	r3, [r7, #14]
 801346a:	3b01      	subs	r3, #1
 801346c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801346e:	4a0e      	ldr	r2, [pc, #56]	; (80134a8 <dec_lock+0x74>)
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	011b      	lsls	r3, r3, #4
 8013474:	4413      	add	r3, r2
 8013476:	330c      	adds	r3, #12
 8013478:	89fa      	ldrh	r2, [r7, #14]
 801347a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801347c:	89fb      	ldrh	r3, [r7, #14]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d105      	bne.n	801348e <dec_lock+0x5a>
 8013482:	4a09      	ldr	r2, [pc, #36]	; (80134a8 <dec_lock+0x74>)
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	011b      	lsls	r3, r3, #4
 8013488:	4413      	add	r3, r2
 801348a:	2200      	movs	r2, #0
 801348c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801348e:	2300      	movs	r3, #0
 8013490:	737b      	strb	r3, [r7, #13]
 8013492:	e001      	b.n	8013498 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8013494:	2302      	movs	r3, #2
 8013496:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8013498:	7b7b      	ldrb	r3, [r7, #13]
}
 801349a:	4618      	mov	r0, r3
 801349c:	3714      	adds	r7, #20
 801349e:	46bd      	mov	sp, r7
 80134a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a4:	4770      	bx	lr
 80134a6:	bf00      	nop
 80134a8:	2000084c 	.word	0x2000084c

080134ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80134ac:	b480      	push	{r7}
 80134ae:	b085      	sub	sp, #20
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80134b4:	2300      	movs	r3, #0
 80134b6:	60fb      	str	r3, [r7, #12]
 80134b8:	e010      	b.n	80134dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80134ba:	4a0d      	ldr	r2, [pc, #52]	; (80134f0 <clear_lock+0x44>)
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	011b      	lsls	r3, r3, #4
 80134c0:	4413      	add	r3, r2
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	687a      	ldr	r2, [r7, #4]
 80134c6:	429a      	cmp	r2, r3
 80134c8:	d105      	bne.n	80134d6 <clear_lock+0x2a>
 80134ca:	4a09      	ldr	r2, [pc, #36]	; (80134f0 <clear_lock+0x44>)
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	011b      	lsls	r3, r3, #4
 80134d0:	4413      	add	r3, r2
 80134d2:	2200      	movs	r2, #0
 80134d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	3301      	adds	r3, #1
 80134da:	60fb      	str	r3, [r7, #12]
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	2b01      	cmp	r3, #1
 80134e0:	d9eb      	bls.n	80134ba <clear_lock+0xe>
	}
}
 80134e2:	bf00      	nop
 80134e4:	bf00      	nop
 80134e6:	3714      	adds	r7, #20
 80134e8:	46bd      	mov	sp, r7
 80134ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ee:	4770      	bx	lr
 80134f0:	2000084c 	.word	0x2000084c

080134f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b086      	sub	sp, #24
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80134fc:	2300      	movs	r3, #0
 80134fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	78db      	ldrb	r3, [r3, #3]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d034      	beq.n	8013572 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801350c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	7858      	ldrb	r0, [r3, #1]
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013518:	2301      	movs	r3, #1
 801351a:	697a      	ldr	r2, [r7, #20]
 801351c:	f7ff fd0e 	bl	8012f3c <disk_write>
 8013520:	4603      	mov	r3, r0
 8013522:	2b00      	cmp	r3, #0
 8013524:	d002      	beq.n	801352c <sync_window+0x38>
			res = FR_DISK_ERR;
 8013526:	2301      	movs	r3, #1
 8013528:	73fb      	strb	r3, [r7, #15]
 801352a:	e022      	b.n	8013572 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	2200      	movs	r2, #0
 8013530:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013536:	697a      	ldr	r2, [r7, #20]
 8013538:	1ad2      	subs	r2, r2, r3
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	69db      	ldr	r3, [r3, #28]
 801353e:	429a      	cmp	r2, r3
 8013540:	d217      	bcs.n	8013572 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	789b      	ldrb	r3, [r3, #2]
 8013546:	613b      	str	r3, [r7, #16]
 8013548:	e010      	b.n	801356c <sync_window+0x78>
					wsect += fs->fsize;
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	69db      	ldr	r3, [r3, #28]
 801354e:	697a      	ldr	r2, [r7, #20]
 8013550:	4413      	add	r3, r2
 8013552:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	7858      	ldrb	r0, [r3, #1]
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801355e:	2301      	movs	r3, #1
 8013560:	697a      	ldr	r2, [r7, #20]
 8013562:	f7ff fceb 	bl	8012f3c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013566:	693b      	ldr	r3, [r7, #16]
 8013568:	3b01      	subs	r3, #1
 801356a:	613b      	str	r3, [r7, #16]
 801356c:	693b      	ldr	r3, [r7, #16]
 801356e:	2b01      	cmp	r3, #1
 8013570:	d8eb      	bhi.n	801354a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8013572:	7bfb      	ldrb	r3, [r7, #15]
}
 8013574:	4618      	mov	r0, r3
 8013576:	3718      	adds	r7, #24
 8013578:	46bd      	mov	sp, r7
 801357a:	bd80      	pop	{r7, pc}

0801357c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b084      	sub	sp, #16
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
 8013584:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8013586:	2300      	movs	r3, #0
 8013588:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801358e:	683a      	ldr	r2, [r7, #0]
 8013590:	429a      	cmp	r2, r3
 8013592:	d01b      	beq.n	80135cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8013594:	6878      	ldr	r0, [r7, #4]
 8013596:	f7ff ffad 	bl	80134f4 <sync_window>
 801359a:	4603      	mov	r3, r0
 801359c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801359e:	7bfb      	ldrb	r3, [r7, #15]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d113      	bne.n	80135cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	7858      	ldrb	r0, [r3, #1]
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80135ae:	2301      	movs	r3, #1
 80135b0:	683a      	ldr	r2, [r7, #0]
 80135b2:	f7ff fca3 	bl	8012efc <disk_read>
 80135b6:	4603      	mov	r3, r0
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d004      	beq.n	80135c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80135bc:	f04f 33ff 	mov.w	r3, #4294967295
 80135c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80135c2:	2301      	movs	r3, #1
 80135c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	683a      	ldr	r2, [r7, #0]
 80135ca:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80135cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80135ce:	4618      	mov	r0, r3
 80135d0:	3710      	adds	r7, #16
 80135d2:	46bd      	mov	sp, r7
 80135d4:	bd80      	pop	{r7, pc}
	...

080135d8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80135d8:	b580      	push	{r7, lr}
 80135da:	b084      	sub	sp, #16
 80135dc:	af00      	add	r7, sp, #0
 80135de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80135e0:	6878      	ldr	r0, [r7, #4]
 80135e2:	f7ff ff87 	bl	80134f4 <sync_window>
 80135e6:	4603      	mov	r3, r0
 80135e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80135ea:	7bfb      	ldrb	r3, [r7, #15]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d158      	bne.n	80136a2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	781b      	ldrb	r3, [r3, #0]
 80135f4:	2b03      	cmp	r3, #3
 80135f6:	d148      	bne.n	801368a <sync_fs+0xb2>
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	791b      	ldrb	r3, [r3, #4]
 80135fc:	2b01      	cmp	r3, #1
 80135fe:	d144      	bne.n	801368a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	3334      	adds	r3, #52	; 0x34
 8013604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013608:	2100      	movs	r1, #0
 801360a:	4618      	mov	r0, r3
 801360c:	f7ff fd77 	bl	80130fe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	3334      	adds	r3, #52	; 0x34
 8013614:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013618:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801361c:	4618      	mov	r0, r3
 801361e:	f7ff fd06 	bl	801302e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	3334      	adds	r3, #52	; 0x34
 8013626:	4921      	ldr	r1, [pc, #132]	; (80136ac <sync_fs+0xd4>)
 8013628:	4618      	mov	r0, r3
 801362a:	f7ff fd1b 	bl	8013064 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	3334      	adds	r3, #52	; 0x34
 8013632:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013636:	491e      	ldr	r1, [pc, #120]	; (80136b0 <sync_fs+0xd8>)
 8013638:	4618      	mov	r0, r3
 801363a:	f7ff fd13 	bl	8013064 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	3334      	adds	r3, #52	; 0x34
 8013642:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	695b      	ldr	r3, [r3, #20]
 801364a:	4619      	mov	r1, r3
 801364c:	4610      	mov	r0, r2
 801364e:	f7ff fd09 	bl	8013064 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	3334      	adds	r3, #52	; 0x34
 8013656:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	691b      	ldr	r3, [r3, #16]
 801365e:	4619      	mov	r1, r3
 8013660:	4610      	mov	r0, r2
 8013662:	f7ff fcff 	bl	8013064 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	6a1b      	ldr	r3, [r3, #32]
 801366a:	1c5a      	adds	r2, r3, #1
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	7858      	ldrb	r0, [r3, #1]
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801367e:	2301      	movs	r3, #1
 8013680:	f7ff fc5c 	bl	8012f3c <disk_write>
			fs->fsi_flag = 0;
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	2200      	movs	r2, #0
 8013688:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	785b      	ldrb	r3, [r3, #1]
 801368e:	2200      	movs	r2, #0
 8013690:	2100      	movs	r1, #0
 8013692:	4618      	mov	r0, r3
 8013694:	f7ff fc72 	bl	8012f7c <disk_ioctl>
 8013698:	4603      	mov	r3, r0
 801369a:	2b00      	cmp	r3, #0
 801369c:	d001      	beq.n	80136a2 <sync_fs+0xca>
 801369e:	2301      	movs	r3, #1
 80136a0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80136a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80136a4:	4618      	mov	r0, r3
 80136a6:	3710      	adds	r7, #16
 80136a8:	46bd      	mov	sp, r7
 80136aa:	bd80      	pop	{r7, pc}
 80136ac:	41615252 	.word	0x41615252
 80136b0:	61417272 	.word	0x61417272

080136b4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80136b4:	b480      	push	{r7}
 80136b6:	b083      	sub	sp, #12
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
 80136bc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80136be:	683b      	ldr	r3, [r7, #0]
 80136c0:	3b02      	subs	r3, #2
 80136c2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	699b      	ldr	r3, [r3, #24]
 80136c8:	3b02      	subs	r3, #2
 80136ca:	683a      	ldr	r2, [r7, #0]
 80136cc:	429a      	cmp	r2, r3
 80136ce:	d301      	bcc.n	80136d4 <clust2sect+0x20>
 80136d0:	2300      	movs	r3, #0
 80136d2:	e008      	b.n	80136e6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	895b      	ldrh	r3, [r3, #10]
 80136d8:	461a      	mov	r2, r3
 80136da:	683b      	ldr	r3, [r7, #0]
 80136dc:	fb03 f202 	mul.w	r2, r3, r2
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136e4:	4413      	add	r3, r2
}
 80136e6:	4618      	mov	r0, r3
 80136e8:	370c      	adds	r7, #12
 80136ea:	46bd      	mov	sp, r7
 80136ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f0:	4770      	bx	lr

080136f2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80136f2:	b580      	push	{r7, lr}
 80136f4:	b086      	sub	sp, #24
 80136f6:	af00      	add	r7, sp, #0
 80136f8:	6078      	str	r0, [r7, #4]
 80136fa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	2b01      	cmp	r3, #1
 8013706:	d904      	bls.n	8013712 <get_fat+0x20>
 8013708:	693b      	ldr	r3, [r7, #16]
 801370a:	699b      	ldr	r3, [r3, #24]
 801370c:	683a      	ldr	r2, [r7, #0]
 801370e:	429a      	cmp	r2, r3
 8013710:	d302      	bcc.n	8013718 <get_fat+0x26>
		val = 1;	/* Internal error */
 8013712:	2301      	movs	r3, #1
 8013714:	617b      	str	r3, [r7, #20]
 8013716:	e08f      	b.n	8013838 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8013718:	f04f 33ff 	mov.w	r3, #4294967295
 801371c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801371e:	693b      	ldr	r3, [r7, #16]
 8013720:	781b      	ldrb	r3, [r3, #0]
 8013722:	2b03      	cmp	r3, #3
 8013724:	d062      	beq.n	80137ec <get_fat+0xfa>
 8013726:	2b03      	cmp	r3, #3
 8013728:	dc7c      	bgt.n	8013824 <get_fat+0x132>
 801372a:	2b01      	cmp	r3, #1
 801372c:	d002      	beq.n	8013734 <get_fat+0x42>
 801372e:	2b02      	cmp	r3, #2
 8013730:	d042      	beq.n	80137b8 <get_fat+0xc6>
 8013732:	e077      	b.n	8013824 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013734:	683b      	ldr	r3, [r7, #0]
 8013736:	60fb      	str	r3, [r7, #12]
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	085b      	lsrs	r3, r3, #1
 801373c:	68fa      	ldr	r2, [r7, #12]
 801373e:	4413      	add	r3, r2
 8013740:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013742:	693b      	ldr	r3, [r7, #16]
 8013744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	0a5b      	lsrs	r3, r3, #9
 801374a:	4413      	add	r3, r2
 801374c:	4619      	mov	r1, r3
 801374e:	6938      	ldr	r0, [r7, #16]
 8013750:	f7ff ff14 	bl	801357c <move_window>
 8013754:	4603      	mov	r3, r0
 8013756:	2b00      	cmp	r3, #0
 8013758:	d167      	bne.n	801382a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	1c5a      	adds	r2, r3, #1
 801375e:	60fa      	str	r2, [r7, #12]
 8013760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013764:	693a      	ldr	r2, [r7, #16]
 8013766:	4413      	add	r3, r2
 8013768:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801376c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801376e:	693b      	ldr	r3, [r7, #16]
 8013770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	0a5b      	lsrs	r3, r3, #9
 8013776:	4413      	add	r3, r2
 8013778:	4619      	mov	r1, r3
 801377a:	6938      	ldr	r0, [r7, #16]
 801377c:	f7ff fefe 	bl	801357c <move_window>
 8013780:	4603      	mov	r3, r0
 8013782:	2b00      	cmp	r3, #0
 8013784:	d153      	bne.n	801382e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801378c:	693a      	ldr	r2, [r7, #16]
 801378e:	4413      	add	r3, r2
 8013790:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013794:	021b      	lsls	r3, r3, #8
 8013796:	461a      	mov	r2, r3
 8013798:	68bb      	ldr	r3, [r7, #8]
 801379a:	4313      	orrs	r3, r2
 801379c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801379e:	683b      	ldr	r3, [r7, #0]
 80137a0:	f003 0301 	and.w	r3, r3, #1
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d002      	beq.n	80137ae <get_fat+0xbc>
 80137a8:	68bb      	ldr	r3, [r7, #8]
 80137aa:	091b      	lsrs	r3, r3, #4
 80137ac:	e002      	b.n	80137b4 <get_fat+0xc2>
 80137ae:	68bb      	ldr	r3, [r7, #8]
 80137b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80137b4:	617b      	str	r3, [r7, #20]
			break;
 80137b6:	e03f      	b.n	8013838 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80137b8:	693b      	ldr	r3, [r7, #16]
 80137ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80137bc:	683b      	ldr	r3, [r7, #0]
 80137be:	0a1b      	lsrs	r3, r3, #8
 80137c0:	4413      	add	r3, r2
 80137c2:	4619      	mov	r1, r3
 80137c4:	6938      	ldr	r0, [r7, #16]
 80137c6:	f7ff fed9 	bl	801357c <move_window>
 80137ca:	4603      	mov	r3, r0
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d130      	bne.n	8013832 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80137d0:	693b      	ldr	r3, [r7, #16]
 80137d2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80137d6:	683b      	ldr	r3, [r7, #0]
 80137d8:	005b      	lsls	r3, r3, #1
 80137da:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80137de:	4413      	add	r3, r2
 80137e0:	4618      	mov	r0, r3
 80137e2:	f7ff fbe9 	bl	8012fb8 <ld_word>
 80137e6:	4603      	mov	r3, r0
 80137e8:	617b      	str	r3, [r7, #20]
			break;
 80137ea:	e025      	b.n	8013838 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80137ec:	693b      	ldr	r3, [r7, #16]
 80137ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80137f0:	683b      	ldr	r3, [r7, #0]
 80137f2:	09db      	lsrs	r3, r3, #7
 80137f4:	4413      	add	r3, r2
 80137f6:	4619      	mov	r1, r3
 80137f8:	6938      	ldr	r0, [r7, #16]
 80137fa:	f7ff febf 	bl	801357c <move_window>
 80137fe:	4603      	mov	r3, r0
 8013800:	2b00      	cmp	r3, #0
 8013802:	d118      	bne.n	8013836 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013804:	693b      	ldr	r3, [r7, #16]
 8013806:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801380a:	683b      	ldr	r3, [r7, #0]
 801380c:	009b      	lsls	r3, r3, #2
 801380e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013812:	4413      	add	r3, r2
 8013814:	4618      	mov	r0, r3
 8013816:	f7ff fbe7 	bl	8012fe8 <ld_dword>
 801381a:	4603      	mov	r3, r0
 801381c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8013820:	617b      	str	r3, [r7, #20]
			break;
 8013822:	e009      	b.n	8013838 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8013824:	2301      	movs	r3, #1
 8013826:	617b      	str	r3, [r7, #20]
 8013828:	e006      	b.n	8013838 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801382a:	bf00      	nop
 801382c:	e004      	b.n	8013838 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801382e:	bf00      	nop
 8013830:	e002      	b.n	8013838 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013832:	bf00      	nop
 8013834:	e000      	b.n	8013838 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013836:	bf00      	nop
		}
	}

	return val;
 8013838:	697b      	ldr	r3, [r7, #20]
}
 801383a:	4618      	mov	r0, r3
 801383c:	3718      	adds	r7, #24
 801383e:	46bd      	mov	sp, r7
 8013840:	bd80      	pop	{r7, pc}

08013842 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8013842:	b590      	push	{r4, r7, lr}
 8013844:	b089      	sub	sp, #36	; 0x24
 8013846:	af00      	add	r7, sp, #0
 8013848:	60f8      	str	r0, [r7, #12]
 801384a:	60b9      	str	r1, [r7, #8]
 801384c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801384e:	2302      	movs	r3, #2
 8013850:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013852:	68bb      	ldr	r3, [r7, #8]
 8013854:	2b01      	cmp	r3, #1
 8013856:	f240 80d2 	bls.w	80139fe <put_fat+0x1bc>
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	699b      	ldr	r3, [r3, #24]
 801385e:	68ba      	ldr	r2, [r7, #8]
 8013860:	429a      	cmp	r2, r3
 8013862:	f080 80cc 	bcs.w	80139fe <put_fat+0x1bc>
		switch (fs->fs_type) {
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	781b      	ldrb	r3, [r3, #0]
 801386a:	2b03      	cmp	r3, #3
 801386c:	f000 8096 	beq.w	801399c <put_fat+0x15a>
 8013870:	2b03      	cmp	r3, #3
 8013872:	f300 80cd 	bgt.w	8013a10 <put_fat+0x1ce>
 8013876:	2b01      	cmp	r3, #1
 8013878:	d002      	beq.n	8013880 <put_fat+0x3e>
 801387a:	2b02      	cmp	r3, #2
 801387c:	d06e      	beq.n	801395c <put_fat+0x11a>
 801387e:	e0c7      	b.n	8013a10 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013880:	68bb      	ldr	r3, [r7, #8]
 8013882:	61bb      	str	r3, [r7, #24]
 8013884:	69bb      	ldr	r3, [r7, #24]
 8013886:	085b      	lsrs	r3, r3, #1
 8013888:	69ba      	ldr	r2, [r7, #24]
 801388a:	4413      	add	r3, r2
 801388c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013892:	69bb      	ldr	r3, [r7, #24]
 8013894:	0a5b      	lsrs	r3, r3, #9
 8013896:	4413      	add	r3, r2
 8013898:	4619      	mov	r1, r3
 801389a:	68f8      	ldr	r0, [r7, #12]
 801389c:	f7ff fe6e 	bl	801357c <move_window>
 80138a0:	4603      	mov	r3, r0
 80138a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80138a4:	7ffb      	ldrb	r3, [r7, #31]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	f040 80ab 	bne.w	8013a02 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80138b2:	69bb      	ldr	r3, [r7, #24]
 80138b4:	1c59      	adds	r1, r3, #1
 80138b6:	61b9      	str	r1, [r7, #24]
 80138b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80138bc:	4413      	add	r3, r2
 80138be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80138c0:	68bb      	ldr	r3, [r7, #8]
 80138c2:	f003 0301 	and.w	r3, r3, #1
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d00d      	beq.n	80138e6 <put_fat+0xa4>
 80138ca:	697b      	ldr	r3, [r7, #20]
 80138cc:	781b      	ldrb	r3, [r3, #0]
 80138ce:	b25b      	sxtb	r3, r3
 80138d0:	f003 030f 	and.w	r3, r3, #15
 80138d4:	b25a      	sxtb	r2, r3
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	b2db      	uxtb	r3, r3
 80138da:	011b      	lsls	r3, r3, #4
 80138dc:	b25b      	sxtb	r3, r3
 80138de:	4313      	orrs	r3, r2
 80138e0:	b25b      	sxtb	r3, r3
 80138e2:	b2db      	uxtb	r3, r3
 80138e4:	e001      	b.n	80138ea <put_fat+0xa8>
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	b2db      	uxtb	r3, r3
 80138ea:	697a      	ldr	r2, [r7, #20]
 80138ec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	2201      	movs	r2, #1
 80138f2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80138f8:	69bb      	ldr	r3, [r7, #24]
 80138fa:	0a5b      	lsrs	r3, r3, #9
 80138fc:	4413      	add	r3, r2
 80138fe:	4619      	mov	r1, r3
 8013900:	68f8      	ldr	r0, [r7, #12]
 8013902:	f7ff fe3b 	bl	801357c <move_window>
 8013906:	4603      	mov	r3, r0
 8013908:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801390a:	7ffb      	ldrb	r3, [r7, #31]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d17a      	bne.n	8013a06 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013916:	69bb      	ldr	r3, [r7, #24]
 8013918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801391c:	4413      	add	r3, r2
 801391e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013920:	68bb      	ldr	r3, [r7, #8]
 8013922:	f003 0301 	and.w	r3, r3, #1
 8013926:	2b00      	cmp	r3, #0
 8013928:	d003      	beq.n	8013932 <put_fat+0xf0>
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	091b      	lsrs	r3, r3, #4
 801392e:	b2db      	uxtb	r3, r3
 8013930:	e00e      	b.n	8013950 <put_fat+0x10e>
 8013932:	697b      	ldr	r3, [r7, #20]
 8013934:	781b      	ldrb	r3, [r3, #0]
 8013936:	b25b      	sxtb	r3, r3
 8013938:	f023 030f 	bic.w	r3, r3, #15
 801393c:	b25a      	sxtb	r2, r3
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	0a1b      	lsrs	r3, r3, #8
 8013942:	b25b      	sxtb	r3, r3
 8013944:	f003 030f 	and.w	r3, r3, #15
 8013948:	b25b      	sxtb	r3, r3
 801394a:	4313      	orrs	r3, r2
 801394c:	b25b      	sxtb	r3, r3
 801394e:	b2db      	uxtb	r3, r3
 8013950:	697a      	ldr	r2, [r7, #20]
 8013952:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	2201      	movs	r2, #1
 8013958:	70da      	strb	r2, [r3, #3]
			break;
 801395a:	e059      	b.n	8013a10 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013960:	68bb      	ldr	r3, [r7, #8]
 8013962:	0a1b      	lsrs	r3, r3, #8
 8013964:	4413      	add	r3, r2
 8013966:	4619      	mov	r1, r3
 8013968:	68f8      	ldr	r0, [r7, #12]
 801396a:	f7ff fe07 	bl	801357c <move_window>
 801396e:	4603      	mov	r3, r0
 8013970:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013972:	7ffb      	ldrb	r3, [r7, #31]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d148      	bne.n	8013a0a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801397e:	68bb      	ldr	r3, [r7, #8]
 8013980:	005b      	lsls	r3, r3, #1
 8013982:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8013986:	4413      	add	r3, r2
 8013988:	687a      	ldr	r2, [r7, #4]
 801398a:	b292      	uxth	r2, r2
 801398c:	4611      	mov	r1, r2
 801398e:	4618      	mov	r0, r3
 8013990:	f7ff fb4d 	bl	801302e <st_word>
			fs->wflag = 1;
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	2201      	movs	r2, #1
 8013998:	70da      	strb	r2, [r3, #3]
			break;
 801399a:	e039      	b.n	8013a10 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80139a0:	68bb      	ldr	r3, [r7, #8]
 80139a2:	09db      	lsrs	r3, r3, #7
 80139a4:	4413      	add	r3, r2
 80139a6:	4619      	mov	r1, r3
 80139a8:	68f8      	ldr	r0, [r7, #12]
 80139aa:	f7ff fde7 	bl	801357c <move_window>
 80139ae:	4603      	mov	r3, r0
 80139b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80139b2:	7ffb      	ldrb	r3, [r7, #31]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d12a      	bne.n	8013a0e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80139c4:	68bb      	ldr	r3, [r7, #8]
 80139c6:	009b      	lsls	r3, r3, #2
 80139c8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80139cc:	4413      	add	r3, r2
 80139ce:	4618      	mov	r0, r3
 80139d0:	f7ff fb0a 	bl	8012fe8 <ld_dword>
 80139d4:	4603      	mov	r3, r0
 80139d6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80139da:	4323      	orrs	r3, r4
 80139dc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80139e4:	68bb      	ldr	r3, [r7, #8]
 80139e6:	009b      	lsls	r3, r3, #2
 80139e8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80139ec:	4413      	add	r3, r2
 80139ee:	6879      	ldr	r1, [r7, #4]
 80139f0:	4618      	mov	r0, r3
 80139f2:	f7ff fb37 	bl	8013064 <st_dword>
			fs->wflag = 1;
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	2201      	movs	r2, #1
 80139fa:	70da      	strb	r2, [r3, #3]
			break;
 80139fc:	e008      	b.n	8013a10 <put_fat+0x1ce>
		}
	}
 80139fe:	bf00      	nop
 8013a00:	e006      	b.n	8013a10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013a02:	bf00      	nop
 8013a04:	e004      	b.n	8013a10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013a06:	bf00      	nop
 8013a08:	e002      	b.n	8013a10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013a0a:	bf00      	nop
 8013a0c:	e000      	b.n	8013a10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013a0e:	bf00      	nop
	return res;
 8013a10:	7ffb      	ldrb	r3, [r7, #31]
}
 8013a12:	4618      	mov	r0, r3
 8013a14:	3724      	adds	r7, #36	; 0x24
 8013a16:	46bd      	mov	sp, r7
 8013a18:	bd90      	pop	{r4, r7, pc}

08013a1a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8013a1a:	b580      	push	{r7, lr}
 8013a1c:	b088      	sub	sp, #32
 8013a1e:	af00      	add	r7, sp, #0
 8013a20:	60f8      	str	r0, [r7, #12]
 8013a22:	60b9      	str	r1, [r7, #8]
 8013a24:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8013a26:	2300      	movs	r3, #0
 8013a28:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013a30:	68bb      	ldr	r3, [r7, #8]
 8013a32:	2b01      	cmp	r3, #1
 8013a34:	d904      	bls.n	8013a40 <remove_chain+0x26>
 8013a36:	69bb      	ldr	r3, [r7, #24]
 8013a38:	699b      	ldr	r3, [r3, #24]
 8013a3a:	68ba      	ldr	r2, [r7, #8]
 8013a3c:	429a      	cmp	r2, r3
 8013a3e:	d301      	bcc.n	8013a44 <remove_chain+0x2a>
 8013a40:	2302      	movs	r3, #2
 8013a42:	e04b      	b.n	8013adc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d00c      	beq.n	8013a64 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8013a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8013a4e:	6879      	ldr	r1, [r7, #4]
 8013a50:	69b8      	ldr	r0, [r7, #24]
 8013a52:	f7ff fef6 	bl	8013842 <put_fat>
 8013a56:	4603      	mov	r3, r0
 8013a58:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8013a5a:	7ffb      	ldrb	r3, [r7, #31]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d001      	beq.n	8013a64 <remove_chain+0x4a>
 8013a60:	7ffb      	ldrb	r3, [r7, #31]
 8013a62:	e03b      	b.n	8013adc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013a64:	68b9      	ldr	r1, [r7, #8]
 8013a66:	68f8      	ldr	r0, [r7, #12]
 8013a68:	f7ff fe43 	bl	80136f2 <get_fat>
 8013a6c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013a6e:	697b      	ldr	r3, [r7, #20]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d031      	beq.n	8013ad8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013a74:	697b      	ldr	r3, [r7, #20]
 8013a76:	2b01      	cmp	r3, #1
 8013a78:	d101      	bne.n	8013a7e <remove_chain+0x64>
 8013a7a:	2302      	movs	r3, #2
 8013a7c:	e02e      	b.n	8013adc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013a7e:	697b      	ldr	r3, [r7, #20]
 8013a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a84:	d101      	bne.n	8013a8a <remove_chain+0x70>
 8013a86:	2301      	movs	r3, #1
 8013a88:	e028      	b.n	8013adc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013a8a:	2200      	movs	r2, #0
 8013a8c:	68b9      	ldr	r1, [r7, #8]
 8013a8e:	69b8      	ldr	r0, [r7, #24]
 8013a90:	f7ff fed7 	bl	8013842 <put_fat>
 8013a94:	4603      	mov	r3, r0
 8013a96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8013a98:	7ffb      	ldrb	r3, [r7, #31]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d001      	beq.n	8013aa2 <remove_chain+0x88>
 8013a9e:	7ffb      	ldrb	r3, [r7, #31]
 8013aa0:	e01c      	b.n	8013adc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013aa2:	69bb      	ldr	r3, [r7, #24]
 8013aa4:	695a      	ldr	r2, [r3, #20]
 8013aa6:	69bb      	ldr	r3, [r7, #24]
 8013aa8:	699b      	ldr	r3, [r3, #24]
 8013aaa:	3b02      	subs	r3, #2
 8013aac:	429a      	cmp	r2, r3
 8013aae:	d20b      	bcs.n	8013ac8 <remove_chain+0xae>
			fs->free_clst++;
 8013ab0:	69bb      	ldr	r3, [r7, #24]
 8013ab2:	695b      	ldr	r3, [r3, #20]
 8013ab4:	1c5a      	adds	r2, r3, #1
 8013ab6:	69bb      	ldr	r3, [r7, #24]
 8013ab8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8013aba:	69bb      	ldr	r3, [r7, #24]
 8013abc:	791b      	ldrb	r3, [r3, #4]
 8013abe:	f043 0301 	orr.w	r3, r3, #1
 8013ac2:	b2da      	uxtb	r2, r3
 8013ac4:	69bb      	ldr	r3, [r7, #24]
 8013ac6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8013ac8:	697b      	ldr	r3, [r7, #20]
 8013aca:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013acc:	69bb      	ldr	r3, [r7, #24]
 8013ace:	699b      	ldr	r3, [r3, #24]
 8013ad0:	68ba      	ldr	r2, [r7, #8]
 8013ad2:	429a      	cmp	r2, r3
 8013ad4:	d3c6      	bcc.n	8013a64 <remove_chain+0x4a>
 8013ad6:	e000      	b.n	8013ada <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8013ad8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8013ada:	2300      	movs	r3, #0
}
 8013adc:	4618      	mov	r0, r3
 8013ade:	3720      	adds	r7, #32
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	bd80      	pop	{r7, pc}

08013ae4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b088      	sub	sp, #32
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
 8013aec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013af4:	683b      	ldr	r3, [r7, #0]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d10d      	bne.n	8013b16 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013afa:	693b      	ldr	r3, [r7, #16]
 8013afc:	691b      	ldr	r3, [r3, #16]
 8013afe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013b00:	69bb      	ldr	r3, [r7, #24]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d004      	beq.n	8013b10 <create_chain+0x2c>
 8013b06:	693b      	ldr	r3, [r7, #16]
 8013b08:	699b      	ldr	r3, [r3, #24]
 8013b0a:	69ba      	ldr	r2, [r7, #24]
 8013b0c:	429a      	cmp	r2, r3
 8013b0e:	d31b      	bcc.n	8013b48 <create_chain+0x64>
 8013b10:	2301      	movs	r3, #1
 8013b12:	61bb      	str	r3, [r7, #24]
 8013b14:	e018      	b.n	8013b48 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8013b16:	6839      	ldr	r1, [r7, #0]
 8013b18:	6878      	ldr	r0, [r7, #4]
 8013b1a:	f7ff fdea 	bl	80136f2 <get_fat>
 8013b1e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	2b01      	cmp	r3, #1
 8013b24:	d801      	bhi.n	8013b2a <create_chain+0x46>
 8013b26:	2301      	movs	r3, #1
 8013b28:	e070      	b.n	8013c0c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b30:	d101      	bne.n	8013b36 <create_chain+0x52>
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	e06a      	b.n	8013c0c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013b36:	693b      	ldr	r3, [r7, #16]
 8013b38:	699b      	ldr	r3, [r3, #24]
 8013b3a:	68fa      	ldr	r2, [r7, #12]
 8013b3c:	429a      	cmp	r2, r3
 8013b3e:	d201      	bcs.n	8013b44 <create_chain+0x60>
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	e063      	b.n	8013c0c <create_chain+0x128>
		scl = clst;
 8013b44:	683b      	ldr	r3, [r7, #0]
 8013b46:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8013b48:	69bb      	ldr	r3, [r7, #24]
 8013b4a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013b4c:	69fb      	ldr	r3, [r7, #28]
 8013b4e:	3301      	adds	r3, #1
 8013b50:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013b52:	693b      	ldr	r3, [r7, #16]
 8013b54:	699b      	ldr	r3, [r3, #24]
 8013b56:	69fa      	ldr	r2, [r7, #28]
 8013b58:	429a      	cmp	r2, r3
 8013b5a:	d307      	bcc.n	8013b6c <create_chain+0x88>
				ncl = 2;
 8013b5c:	2302      	movs	r3, #2
 8013b5e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013b60:	69fa      	ldr	r2, [r7, #28]
 8013b62:	69bb      	ldr	r3, [r7, #24]
 8013b64:	429a      	cmp	r2, r3
 8013b66:	d901      	bls.n	8013b6c <create_chain+0x88>
 8013b68:	2300      	movs	r3, #0
 8013b6a:	e04f      	b.n	8013c0c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013b6c:	69f9      	ldr	r1, [r7, #28]
 8013b6e:	6878      	ldr	r0, [r7, #4]
 8013b70:	f7ff fdbf 	bl	80136f2 <get_fat>
 8013b74:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d00e      	beq.n	8013b9a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	2b01      	cmp	r3, #1
 8013b80:	d003      	beq.n	8013b8a <create_chain+0xa6>
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b88:	d101      	bne.n	8013b8e <create_chain+0xaa>
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	e03e      	b.n	8013c0c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013b8e:	69fa      	ldr	r2, [r7, #28]
 8013b90:	69bb      	ldr	r3, [r7, #24]
 8013b92:	429a      	cmp	r2, r3
 8013b94:	d1da      	bne.n	8013b4c <create_chain+0x68>
 8013b96:	2300      	movs	r3, #0
 8013b98:	e038      	b.n	8013c0c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013b9a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8013ba0:	69f9      	ldr	r1, [r7, #28]
 8013ba2:	6938      	ldr	r0, [r7, #16]
 8013ba4:	f7ff fe4d 	bl	8013842 <put_fat>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013bac:	7dfb      	ldrb	r3, [r7, #23]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d109      	bne.n	8013bc6 <create_chain+0xe2>
 8013bb2:	683b      	ldr	r3, [r7, #0]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d006      	beq.n	8013bc6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013bb8:	69fa      	ldr	r2, [r7, #28]
 8013bba:	6839      	ldr	r1, [r7, #0]
 8013bbc:	6938      	ldr	r0, [r7, #16]
 8013bbe:	f7ff fe40 	bl	8013842 <put_fat>
 8013bc2:	4603      	mov	r3, r0
 8013bc4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8013bc6:	7dfb      	ldrb	r3, [r7, #23]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d116      	bne.n	8013bfa <create_chain+0x116>
		fs->last_clst = ncl;
 8013bcc:	693b      	ldr	r3, [r7, #16]
 8013bce:	69fa      	ldr	r2, [r7, #28]
 8013bd0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013bd2:	693b      	ldr	r3, [r7, #16]
 8013bd4:	695a      	ldr	r2, [r3, #20]
 8013bd6:	693b      	ldr	r3, [r7, #16]
 8013bd8:	699b      	ldr	r3, [r3, #24]
 8013bda:	3b02      	subs	r3, #2
 8013bdc:	429a      	cmp	r2, r3
 8013bde:	d804      	bhi.n	8013bea <create_chain+0x106>
 8013be0:	693b      	ldr	r3, [r7, #16]
 8013be2:	695b      	ldr	r3, [r3, #20]
 8013be4:	1e5a      	subs	r2, r3, #1
 8013be6:	693b      	ldr	r3, [r7, #16]
 8013be8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8013bea:	693b      	ldr	r3, [r7, #16]
 8013bec:	791b      	ldrb	r3, [r3, #4]
 8013bee:	f043 0301 	orr.w	r3, r3, #1
 8013bf2:	b2da      	uxtb	r2, r3
 8013bf4:	693b      	ldr	r3, [r7, #16]
 8013bf6:	711a      	strb	r2, [r3, #4]
 8013bf8:	e007      	b.n	8013c0a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8013bfa:	7dfb      	ldrb	r3, [r7, #23]
 8013bfc:	2b01      	cmp	r3, #1
 8013bfe:	d102      	bne.n	8013c06 <create_chain+0x122>
 8013c00:	f04f 33ff 	mov.w	r3, #4294967295
 8013c04:	e000      	b.n	8013c08 <create_chain+0x124>
 8013c06:	2301      	movs	r3, #1
 8013c08:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8013c0a:	69fb      	ldr	r3, [r7, #28]
}
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	3720      	adds	r7, #32
 8013c10:	46bd      	mov	sp, r7
 8013c12:	bd80      	pop	{r7, pc}

08013c14 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013c14:	b480      	push	{r7}
 8013c16:	b087      	sub	sp, #28
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	6078      	str	r0, [r7, #4]
 8013c1c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c28:	3304      	adds	r3, #4
 8013c2a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013c2c:	683b      	ldr	r3, [r7, #0]
 8013c2e:	0a5b      	lsrs	r3, r3, #9
 8013c30:	68fa      	ldr	r2, [r7, #12]
 8013c32:	8952      	ldrh	r2, [r2, #10]
 8013c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c38:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013c3a:	693b      	ldr	r3, [r7, #16]
 8013c3c:	1d1a      	adds	r2, r3, #4
 8013c3e:	613a      	str	r2, [r7, #16]
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013c44:	68bb      	ldr	r3, [r7, #8]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d101      	bne.n	8013c4e <clmt_clust+0x3a>
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	e010      	b.n	8013c70 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8013c4e:	697a      	ldr	r2, [r7, #20]
 8013c50:	68bb      	ldr	r3, [r7, #8]
 8013c52:	429a      	cmp	r2, r3
 8013c54:	d307      	bcc.n	8013c66 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8013c56:	697a      	ldr	r2, [r7, #20]
 8013c58:	68bb      	ldr	r3, [r7, #8]
 8013c5a:	1ad3      	subs	r3, r2, r3
 8013c5c:	617b      	str	r3, [r7, #20]
 8013c5e:	693b      	ldr	r3, [r7, #16]
 8013c60:	3304      	adds	r3, #4
 8013c62:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013c64:	e7e9      	b.n	8013c3a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8013c66:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013c68:	693b      	ldr	r3, [r7, #16]
 8013c6a:	681a      	ldr	r2, [r3, #0]
 8013c6c:	697b      	ldr	r3, [r7, #20]
 8013c6e:	4413      	add	r3, r2
}
 8013c70:	4618      	mov	r0, r3
 8013c72:	371c      	adds	r7, #28
 8013c74:	46bd      	mov	sp, r7
 8013c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7a:	4770      	bx	lr

08013c7c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b086      	sub	sp, #24
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
 8013c84:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013c8c:	683b      	ldr	r3, [r7, #0]
 8013c8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013c92:	d204      	bcs.n	8013c9e <dir_sdi+0x22>
 8013c94:	683b      	ldr	r3, [r7, #0]
 8013c96:	f003 031f 	and.w	r3, r3, #31
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d001      	beq.n	8013ca2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8013c9e:	2302      	movs	r3, #2
 8013ca0:	e063      	b.n	8013d6a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	683a      	ldr	r2, [r7, #0]
 8013ca6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	689b      	ldr	r3, [r3, #8]
 8013cac:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013cae:	697b      	ldr	r3, [r7, #20]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d106      	bne.n	8013cc2 <dir_sdi+0x46>
 8013cb4:	693b      	ldr	r3, [r7, #16]
 8013cb6:	781b      	ldrb	r3, [r3, #0]
 8013cb8:	2b02      	cmp	r3, #2
 8013cba:	d902      	bls.n	8013cc2 <dir_sdi+0x46>
		clst = fs->dirbase;
 8013cbc:	693b      	ldr	r3, [r7, #16]
 8013cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013cc0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013cc2:	697b      	ldr	r3, [r7, #20]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d10c      	bne.n	8013ce2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013cc8:	683b      	ldr	r3, [r7, #0]
 8013cca:	095b      	lsrs	r3, r3, #5
 8013ccc:	693a      	ldr	r2, [r7, #16]
 8013cce:	8912      	ldrh	r2, [r2, #8]
 8013cd0:	4293      	cmp	r3, r2
 8013cd2:	d301      	bcc.n	8013cd8 <dir_sdi+0x5c>
 8013cd4:	2302      	movs	r3, #2
 8013cd6:	e048      	b.n	8013d6a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8013cd8:	693b      	ldr	r3, [r7, #16]
 8013cda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	61da      	str	r2, [r3, #28]
 8013ce0:	e029      	b.n	8013d36 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013ce2:	693b      	ldr	r3, [r7, #16]
 8013ce4:	895b      	ldrh	r3, [r3, #10]
 8013ce6:	025b      	lsls	r3, r3, #9
 8013ce8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013cea:	e019      	b.n	8013d20 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	6979      	ldr	r1, [r7, #20]
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	f7ff fcfe 	bl	80136f2 <get_fat>
 8013cf6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013cf8:	697b      	ldr	r3, [r7, #20]
 8013cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cfe:	d101      	bne.n	8013d04 <dir_sdi+0x88>
 8013d00:	2301      	movs	r3, #1
 8013d02:	e032      	b.n	8013d6a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013d04:	697b      	ldr	r3, [r7, #20]
 8013d06:	2b01      	cmp	r3, #1
 8013d08:	d904      	bls.n	8013d14 <dir_sdi+0x98>
 8013d0a:	693b      	ldr	r3, [r7, #16]
 8013d0c:	699b      	ldr	r3, [r3, #24]
 8013d0e:	697a      	ldr	r2, [r7, #20]
 8013d10:	429a      	cmp	r2, r3
 8013d12:	d301      	bcc.n	8013d18 <dir_sdi+0x9c>
 8013d14:	2302      	movs	r3, #2
 8013d16:	e028      	b.n	8013d6a <dir_sdi+0xee>
			ofs -= csz;
 8013d18:	683a      	ldr	r2, [r7, #0]
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	1ad3      	subs	r3, r2, r3
 8013d1e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013d20:	683a      	ldr	r2, [r7, #0]
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	429a      	cmp	r2, r3
 8013d26:	d2e1      	bcs.n	8013cec <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8013d28:	6979      	ldr	r1, [r7, #20]
 8013d2a:	6938      	ldr	r0, [r7, #16]
 8013d2c:	f7ff fcc2 	bl	80136b4 <clust2sect>
 8013d30:	4602      	mov	r2, r0
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	697a      	ldr	r2, [r7, #20]
 8013d3a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	69db      	ldr	r3, [r3, #28]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d101      	bne.n	8013d48 <dir_sdi+0xcc>
 8013d44:	2302      	movs	r3, #2
 8013d46:	e010      	b.n	8013d6a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	69da      	ldr	r2, [r3, #28]
 8013d4c:	683b      	ldr	r3, [r7, #0]
 8013d4e:	0a5b      	lsrs	r3, r3, #9
 8013d50:	441a      	add	r2, r3
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013d56:	693b      	ldr	r3, [r7, #16]
 8013d58:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013d5c:	683b      	ldr	r3, [r7, #0]
 8013d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d62:	441a      	add	r2, r3
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013d68:	2300      	movs	r3, #0
}
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	3718      	adds	r7, #24
 8013d6e:	46bd      	mov	sp, r7
 8013d70:	bd80      	pop	{r7, pc}

08013d72 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013d72:	b580      	push	{r7, lr}
 8013d74:	b086      	sub	sp, #24
 8013d76:	af00      	add	r7, sp, #0
 8013d78:	6078      	str	r0, [r7, #4]
 8013d7a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	695b      	ldr	r3, [r3, #20]
 8013d86:	3320      	adds	r3, #32
 8013d88:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	69db      	ldr	r3, [r3, #28]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d003      	beq.n	8013d9a <dir_next+0x28>
 8013d92:	68bb      	ldr	r3, [r7, #8]
 8013d94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013d98:	d301      	bcc.n	8013d9e <dir_next+0x2c>
 8013d9a:	2304      	movs	r3, #4
 8013d9c:	e0aa      	b.n	8013ef4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013d9e:	68bb      	ldr	r3, [r7, #8]
 8013da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	f040 8098 	bne.w	8013eda <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	69db      	ldr	r3, [r3, #28]
 8013dae:	1c5a      	adds	r2, r3, #1
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	699b      	ldr	r3, [r3, #24]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d10b      	bne.n	8013dd4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013dbc:	68bb      	ldr	r3, [r7, #8]
 8013dbe:	095b      	lsrs	r3, r3, #5
 8013dc0:	68fa      	ldr	r2, [r7, #12]
 8013dc2:	8912      	ldrh	r2, [r2, #8]
 8013dc4:	4293      	cmp	r3, r2
 8013dc6:	f0c0 8088 	bcc.w	8013eda <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	2200      	movs	r2, #0
 8013dce:	61da      	str	r2, [r3, #28]
 8013dd0:	2304      	movs	r3, #4
 8013dd2:	e08f      	b.n	8013ef4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013dd4:	68bb      	ldr	r3, [r7, #8]
 8013dd6:	0a5b      	lsrs	r3, r3, #9
 8013dd8:	68fa      	ldr	r2, [r7, #12]
 8013dda:	8952      	ldrh	r2, [r2, #10]
 8013ddc:	3a01      	subs	r2, #1
 8013dde:	4013      	ands	r3, r2
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d17a      	bne.n	8013eda <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013de4:	687a      	ldr	r2, [r7, #4]
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	699b      	ldr	r3, [r3, #24]
 8013dea:	4619      	mov	r1, r3
 8013dec:	4610      	mov	r0, r2
 8013dee:	f7ff fc80 	bl	80136f2 <get_fat>
 8013df2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013df4:	697b      	ldr	r3, [r7, #20]
 8013df6:	2b01      	cmp	r3, #1
 8013df8:	d801      	bhi.n	8013dfe <dir_next+0x8c>
 8013dfa:	2302      	movs	r3, #2
 8013dfc:	e07a      	b.n	8013ef4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013dfe:	697b      	ldr	r3, [r7, #20]
 8013e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e04:	d101      	bne.n	8013e0a <dir_next+0x98>
 8013e06:	2301      	movs	r3, #1
 8013e08:	e074      	b.n	8013ef4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	699b      	ldr	r3, [r3, #24]
 8013e0e:	697a      	ldr	r2, [r7, #20]
 8013e10:	429a      	cmp	r2, r3
 8013e12:	d358      	bcc.n	8013ec6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013e14:	683b      	ldr	r3, [r7, #0]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d104      	bne.n	8013e24 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	2200      	movs	r2, #0
 8013e1e:	61da      	str	r2, [r3, #28]
 8013e20:	2304      	movs	r3, #4
 8013e22:	e067      	b.n	8013ef4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013e24:	687a      	ldr	r2, [r7, #4]
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	699b      	ldr	r3, [r3, #24]
 8013e2a:	4619      	mov	r1, r3
 8013e2c:	4610      	mov	r0, r2
 8013e2e:	f7ff fe59 	bl	8013ae4 <create_chain>
 8013e32:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013e34:	697b      	ldr	r3, [r7, #20]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d101      	bne.n	8013e3e <dir_next+0xcc>
 8013e3a:	2307      	movs	r3, #7
 8013e3c:	e05a      	b.n	8013ef4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013e3e:	697b      	ldr	r3, [r7, #20]
 8013e40:	2b01      	cmp	r3, #1
 8013e42:	d101      	bne.n	8013e48 <dir_next+0xd6>
 8013e44:	2302      	movs	r3, #2
 8013e46:	e055      	b.n	8013ef4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013e48:	697b      	ldr	r3, [r7, #20]
 8013e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e4e:	d101      	bne.n	8013e54 <dir_next+0xe2>
 8013e50:	2301      	movs	r3, #1
 8013e52:	e04f      	b.n	8013ef4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013e54:	68f8      	ldr	r0, [r7, #12]
 8013e56:	f7ff fb4d 	bl	80134f4 <sync_window>
 8013e5a:	4603      	mov	r3, r0
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d001      	beq.n	8013e64 <dir_next+0xf2>
 8013e60:	2301      	movs	r3, #1
 8013e62:	e047      	b.n	8013ef4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	3334      	adds	r3, #52	; 0x34
 8013e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013e6c:	2100      	movs	r1, #0
 8013e6e:	4618      	mov	r0, r3
 8013e70:	f7ff f945 	bl	80130fe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013e74:	2300      	movs	r3, #0
 8013e76:	613b      	str	r3, [r7, #16]
 8013e78:	6979      	ldr	r1, [r7, #20]
 8013e7a:	68f8      	ldr	r0, [r7, #12]
 8013e7c:	f7ff fc1a 	bl	80136b4 <clust2sect>
 8013e80:	4602      	mov	r2, r0
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	631a      	str	r2, [r3, #48]	; 0x30
 8013e86:	e012      	b.n	8013eae <dir_next+0x13c>
						fs->wflag = 1;
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	2201      	movs	r2, #1
 8013e8c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013e8e:	68f8      	ldr	r0, [r7, #12]
 8013e90:	f7ff fb30 	bl	80134f4 <sync_window>
 8013e94:	4603      	mov	r3, r0
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d001      	beq.n	8013e9e <dir_next+0x12c>
 8013e9a:	2301      	movs	r3, #1
 8013e9c:	e02a      	b.n	8013ef4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013e9e:	693b      	ldr	r3, [r7, #16]
 8013ea0:	3301      	adds	r3, #1
 8013ea2:	613b      	str	r3, [r7, #16]
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ea8:	1c5a      	adds	r2, r3, #1
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	631a      	str	r2, [r3, #48]	; 0x30
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	895b      	ldrh	r3, [r3, #10]
 8013eb2:	461a      	mov	r2, r3
 8013eb4:	693b      	ldr	r3, [r7, #16]
 8013eb6:	4293      	cmp	r3, r2
 8013eb8:	d3e6      	bcc.n	8013e88 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013ebe:	693b      	ldr	r3, [r7, #16]
 8013ec0:	1ad2      	subs	r2, r2, r3
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	697a      	ldr	r2, [r7, #20]
 8013eca:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013ecc:	6979      	ldr	r1, [r7, #20]
 8013ece:	68f8      	ldr	r0, [r7, #12]
 8013ed0:	f7ff fbf0 	bl	80136b4 <clust2sect>
 8013ed4:	4602      	mov	r2, r0
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	68ba      	ldr	r2, [r7, #8]
 8013ede:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013ee6:	68bb      	ldr	r3, [r7, #8]
 8013ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013eec:	441a      	add	r2, r3
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013ef2:	2300      	movs	r3, #0
}
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	3718      	adds	r7, #24
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	bd80      	pop	{r7, pc}

08013efc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b086      	sub	sp, #24
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	6078      	str	r0, [r7, #4]
 8013f04:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013f0c:	2100      	movs	r1, #0
 8013f0e:	6878      	ldr	r0, [r7, #4]
 8013f10:	f7ff feb4 	bl	8013c7c <dir_sdi>
 8013f14:	4603      	mov	r3, r0
 8013f16:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013f18:	7dfb      	ldrb	r3, [r7, #23]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d12b      	bne.n	8013f76 <dir_alloc+0x7a>
		n = 0;
 8013f1e:	2300      	movs	r3, #0
 8013f20:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	69db      	ldr	r3, [r3, #28]
 8013f26:	4619      	mov	r1, r3
 8013f28:	68f8      	ldr	r0, [r7, #12]
 8013f2a:	f7ff fb27 	bl	801357c <move_window>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013f32:	7dfb      	ldrb	r3, [r7, #23]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d11d      	bne.n	8013f74 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	6a1b      	ldr	r3, [r3, #32]
 8013f3c:	781b      	ldrb	r3, [r3, #0]
 8013f3e:	2be5      	cmp	r3, #229	; 0xe5
 8013f40:	d004      	beq.n	8013f4c <dir_alloc+0x50>
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	6a1b      	ldr	r3, [r3, #32]
 8013f46:	781b      	ldrb	r3, [r3, #0]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d107      	bne.n	8013f5c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013f4c:	693b      	ldr	r3, [r7, #16]
 8013f4e:	3301      	adds	r3, #1
 8013f50:	613b      	str	r3, [r7, #16]
 8013f52:	693a      	ldr	r2, [r7, #16]
 8013f54:	683b      	ldr	r3, [r7, #0]
 8013f56:	429a      	cmp	r2, r3
 8013f58:	d102      	bne.n	8013f60 <dir_alloc+0x64>
 8013f5a:	e00c      	b.n	8013f76 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013f60:	2101      	movs	r1, #1
 8013f62:	6878      	ldr	r0, [r7, #4]
 8013f64:	f7ff ff05 	bl	8013d72 <dir_next>
 8013f68:	4603      	mov	r3, r0
 8013f6a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013f6c:	7dfb      	ldrb	r3, [r7, #23]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d0d7      	beq.n	8013f22 <dir_alloc+0x26>
 8013f72:	e000      	b.n	8013f76 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013f74:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013f76:	7dfb      	ldrb	r3, [r7, #23]
 8013f78:	2b04      	cmp	r3, #4
 8013f7a:	d101      	bne.n	8013f80 <dir_alloc+0x84>
 8013f7c:	2307      	movs	r3, #7
 8013f7e:	75fb      	strb	r3, [r7, #23]
	return res;
 8013f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f82:	4618      	mov	r0, r3
 8013f84:	3718      	adds	r7, #24
 8013f86:	46bd      	mov	sp, r7
 8013f88:	bd80      	pop	{r7, pc}

08013f8a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013f8a:	b580      	push	{r7, lr}
 8013f8c:	b084      	sub	sp, #16
 8013f8e:	af00      	add	r7, sp, #0
 8013f90:	6078      	str	r0, [r7, #4]
 8013f92:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013f94:	683b      	ldr	r3, [r7, #0]
 8013f96:	331a      	adds	r3, #26
 8013f98:	4618      	mov	r0, r3
 8013f9a:	f7ff f80d 	bl	8012fb8 <ld_word>
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	781b      	ldrb	r3, [r3, #0]
 8013fa6:	2b03      	cmp	r3, #3
 8013fa8:	d109      	bne.n	8013fbe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013faa:	683b      	ldr	r3, [r7, #0]
 8013fac:	3314      	adds	r3, #20
 8013fae:	4618      	mov	r0, r3
 8013fb0:	f7ff f802 	bl	8012fb8 <ld_word>
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	041b      	lsls	r3, r3, #16
 8013fb8:	68fa      	ldr	r2, [r7, #12]
 8013fba:	4313      	orrs	r3, r2
 8013fbc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013fbe:	68fb      	ldr	r3, [r7, #12]
}
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	3710      	adds	r7, #16
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	bd80      	pop	{r7, pc}

08013fc8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b084      	sub	sp, #16
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	60f8      	str	r0, [r7, #12]
 8013fd0:	60b9      	str	r1, [r7, #8]
 8013fd2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013fd4:	68bb      	ldr	r3, [r7, #8]
 8013fd6:	331a      	adds	r3, #26
 8013fd8:	687a      	ldr	r2, [r7, #4]
 8013fda:	b292      	uxth	r2, r2
 8013fdc:	4611      	mov	r1, r2
 8013fde:	4618      	mov	r0, r3
 8013fe0:	f7ff f825 	bl	801302e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	781b      	ldrb	r3, [r3, #0]
 8013fe8:	2b03      	cmp	r3, #3
 8013fea:	d109      	bne.n	8014000 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013fec:	68bb      	ldr	r3, [r7, #8]
 8013fee:	f103 0214 	add.w	r2, r3, #20
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	0c1b      	lsrs	r3, r3, #16
 8013ff6:	b29b      	uxth	r3, r3
 8013ff8:	4619      	mov	r1, r3
 8013ffa:	4610      	mov	r0, r2
 8013ffc:	f7ff f817 	bl	801302e <st_word>
	}
}
 8014000:	bf00      	nop
 8014002:	3710      	adds	r7, #16
 8014004:	46bd      	mov	sp, r7
 8014006:	bd80      	pop	{r7, pc}

08014008 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8014008:	b580      	push	{r7, lr}
 801400a:	b086      	sub	sp, #24
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
 8014010:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8014012:	2304      	movs	r3, #4
 8014014:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 801401c:	e03c      	b.n	8014098 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	69db      	ldr	r3, [r3, #28]
 8014022:	4619      	mov	r1, r3
 8014024:	6938      	ldr	r0, [r7, #16]
 8014026:	f7ff faa9 	bl	801357c <move_window>
 801402a:	4603      	mov	r3, r0
 801402c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801402e:	7dfb      	ldrb	r3, [r7, #23]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d136      	bne.n	80140a2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	6a1b      	ldr	r3, [r3, #32]
 8014038:	781b      	ldrb	r3, [r3, #0]
 801403a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 801403c:	7bfb      	ldrb	r3, [r7, #15]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d102      	bne.n	8014048 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8014042:	2304      	movs	r3, #4
 8014044:	75fb      	strb	r3, [r7, #23]
 8014046:	e031      	b.n	80140ac <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	6a1b      	ldr	r3, [r3, #32]
 801404c:	330b      	adds	r3, #11
 801404e:	781b      	ldrb	r3, [r3, #0]
 8014050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014054:	73bb      	strb	r3, [r7, #14]
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	7bba      	ldrb	r2, [r7, #14]
 801405a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 801405c:	7bfb      	ldrb	r3, [r7, #15]
 801405e:	2be5      	cmp	r3, #229	; 0xe5
 8014060:	d011      	beq.n	8014086 <dir_read+0x7e>
 8014062:	7bfb      	ldrb	r3, [r7, #15]
 8014064:	2b2e      	cmp	r3, #46	; 0x2e
 8014066:	d00e      	beq.n	8014086 <dir_read+0x7e>
 8014068:	7bbb      	ldrb	r3, [r7, #14]
 801406a:	2b0f      	cmp	r3, #15
 801406c:	d00b      	beq.n	8014086 <dir_read+0x7e>
 801406e:	7bbb      	ldrb	r3, [r7, #14]
 8014070:	f023 0320 	bic.w	r3, r3, #32
 8014074:	2b08      	cmp	r3, #8
 8014076:	bf0c      	ite	eq
 8014078:	2301      	moveq	r3, #1
 801407a:	2300      	movne	r3, #0
 801407c:	b2db      	uxtb	r3, r3
 801407e:	461a      	mov	r2, r3
 8014080:	683b      	ldr	r3, [r7, #0]
 8014082:	4293      	cmp	r3, r2
 8014084:	d00f      	beq.n	80140a6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8014086:	2100      	movs	r1, #0
 8014088:	6878      	ldr	r0, [r7, #4]
 801408a:	f7ff fe72 	bl	8013d72 <dir_next>
 801408e:	4603      	mov	r3, r0
 8014090:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8014092:	7dfb      	ldrb	r3, [r7, #23]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d108      	bne.n	80140aa <dir_read+0xa2>
	while (dp->sect) {
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	69db      	ldr	r3, [r3, #28]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d1be      	bne.n	801401e <dir_read+0x16>
 80140a0:	e004      	b.n	80140ac <dir_read+0xa4>
		if (res != FR_OK) break;
 80140a2:	bf00      	nop
 80140a4:	e002      	b.n	80140ac <dir_read+0xa4>
				break;
 80140a6:	bf00      	nop
 80140a8:	e000      	b.n	80140ac <dir_read+0xa4>
		if (res != FR_OK) break;
 80140aa:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80140ac:	7dfb      	ldrb	r3, [r7, #23]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d002      	beq.n	80140b8 <dir_read+0xb0>
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	2200      	movs	r2, #0
 80140b6:	61da      	str	r2, [r3, #28]
	return res;
 80140b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80140ba:	4618      	mov	r0, r3
 80140bc:	3718      	adds	r7, #24
 80140be:	46bd      	mov	sp, r7
 80140c0:	bd80      	pop	{r7, pc}

080140c2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80140c2:	b580      	push	{r7, lr}
 80140c4:	b086      	sub	sp, #24
 80140c6:	af00      	add	r7, sp, #0
 80140c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80140d0:	2100      	movs	r1, #0
 80140d2:	6878      	ldr	r0, [r7, #4]
 80140d4:	f7ff fdd2 	bl	8013c7c <dir_sdi>
 80140d8:	4603      	mov	r3, r0
 80140da:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80140dc:	7dfb      	ldrb	r3, [r7, #23]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d001      	beq.n	80140e6 <dir_find+0x24>
 80140e2:	7dfb      	ldrb	r3, [r7, #23]
 80140e4:	e03e      	b.n	8014164 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	69db      	ldr	r3, [r3, #28]
 80140ea:	4619      	mov	r1, r3
 80140ec:	6938      	ldr	r0, [r7, #16]
 80140ee:	f7ff fa45 	bl	801357c <move_window>
 80140f2:	4603      	mov	r3, r0
 80140f4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80140f6:	7dfb      	ldrb	r3, [r7, #23]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d12f      	bne.n	801415c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	6a1b      	ldr	r3, [r3, #32]
 8014100:	781b      	ldrb	r3, [r3, #0]
 8014102:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8014104:	7bfb      	ldrb	r3, [r7, #15]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d102      	bne.n	8014110 <dir_find+0x4e>
 801410a:	2304      	movs	r3, #4
 801410c:	75fb      	strb	r3, [r7, #23]
 801410e:	e028      	b.n	8014162 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	6a1b      	ldr	r3, [r3, #32]
 8014114:	330b      	adds	r3, #11
 8014116:	781b      	ldrb	r3, [r3, #0]
 8014118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801411c:	b2da      	uxtb	r2, r3
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	6a1b      	ldr	r3, [r3, #32]
 8014126:	330b      	adds	r3, #11
 8014128:	781b      	ldrb	r3, [r3, #0]
 801412a:	f003 0308 	and.w	r3, r3, #8
 801412e:	2b00      	cmp	r3, #0
 8014130:	d10a      	bne.n	8014148 <dir_find+0x86>
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	6a18      	ldr	r0, [r3, #32]
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	3324      	adds	r3, #36	; 0x24
 801413a:	220b      	movs	r2, #11
 801413c:	4619      	mov	r1, r3
 801413e:	f7fe fff9 	bl	8013134 <mem_cmp>
 8014142:	4603      	mov	r3, r0
 8014144:	2b00      	cmp	r3, #0
 8014146:	d00b      	beq.n	8014160 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8014148:	2100      	movs	r1, #0
 801414a:	6878      	ldr	r0, [r7, #4]
 801414c:	f7ff fe11 	bl	8013d72 <dir_next>
 8014150:	4603      	mov	r3, r0
 8014152:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8014154:	7dfb      	ldrb	r3, [r7, #23]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d0c5      	beq.n	80140e6 <dir_find+0x24>
 801415a:	e002      	b.n	8014162 <dir_find+0xa0>
		if (res != FR_OK) break;
 801415c:	bf00      	nop
 801415e:	e000      	b.n	8014162 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8014160:	bf00      	nop

	return res;
 8014162:	7dfb      	ldrb	r3, [r7, #23]
}
 8014164:	4618      	mov	r0, r3
 8014166:	3718      	adds	r7, #24
 8014168:	46bd      	mov	sp, r7
 801416a:	bd80      	pop	{r7, pc}

0801416c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801416c:	b580      	push	{r7, lr}
 801416e:	b084      	sub	sp, #16
 8014170:	af00      	add	r7, sp, #0
 8014172:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801417a:	2101      	movs	r1, #1
 801417c:	6878      	ldr	r0, [r7, #4]
 801417e:	f7ff febd 	bl	8013efc <dir_alloc>
 8014182:	4603      	mov	r3, r0
 8014184:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8014186:	7bfb      	ldrb	r3, [r7, #15]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d11c      	bne.n	80141c6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	69db      	ldr	r3, [r3, #28]
 8014190:	4619      	mov	r1, r3
 8014192:	68b8      	ldr	r0, [r7, #8]
 8014194:	f7ff f9f2 	bl	801357c <move_window>
 8014198:	4603      	mov	r3, r0
 801419a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801419c:	7bfb      	ldrb	r3, [r7, #15]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d111      	bne.n	80141c6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	6a1b      	ldr	r3, [r3, #32]
 80141a6:	2220      	movs	r2, #32
 80141a8:	2100      	movs	r1, #0
 80141aa:	4618      	mov	r0, r3
 80141ac:	f7fe ffa7 	bl	80130fe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	6a18      	ldr	r0, [r3, #32]
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	3324      	adds	r3, #36	; 0x24
 80141b8:	220b      	movs	r2, #11
 80141ba:	4619      	mov	r1, r3
 80141bc:	f7fe ff7e 	bl	80130bc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80141c0:	68bb      	ldr	r3, [r7, #8]
 80141c2:	2201      	movs	r2, #1
 80141c4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80141c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80141c8:	4618      	mov	r0, r3
 80141ca:	3710      	adds	r7, #16
 80141cc:	46bd      	mov	sp, r7
 80141ce:	bd80      	pop	{r7, pc}

080141d0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b086      	sub	sp, #24
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
 80141d8:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80141da:	683b      	ldr	r3, [r7, #0]
 80141dc:	2200      	movs	r2, #0
 80141de:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	69db      	ldr	r3, [r3, #28]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d04e      	beq.n	8014286 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80141e8:	2300      	movs	r3, #0
 80141ea:	613b      	str	r3, [r7, #16]
 80141ec:	693b      	ldr	r3, [r7, #16]
 80141ee:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80141f0:	e021      	b.n	8014236 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	6a1a      	ldr	r2, [r3, #32]
 80141f6:	697b      	ldr	r3, [r7, #20]
 80141f8:	1c59      	adds	r1, r3, #1
 80141fa:	6179      	str	r1, [r7, #20]
 80141fc:	4413      	add	r3, r2
 80141fe:	781b      	ldrb	r3, [r3, #0]
 8014200:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8014202:	7bfb      	ldrb	r3, [r7, #15]
 8014204:	2b20      	cmp	r3, #32
 8014206:	d100      	bne.n	801420a <get_fileinfo+0x3a>
 8014208:	e015      	b.n	8014236 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801420a:	7bfb      	ldrb	r3, [r7, #15]
 801420c:	2b05      	cmp	r3, #5
 801420e:	d101      	bne.n	8014214 <get_fileinfo+0x44>
 8014210:	23e5      	movs	r3, #229	; 0xe5
 8014212:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8014214:	697b      	ldr	r3, [r7, #20]
 8014216:	2b09      	cmp	r3, #9
 8014218:	d106      	bne.n	8014228 <get_fileinfo+0x58>
 801421a:	693b      	ldr	r3, [r7, #16]
 801421c:	1c5a      	adds	r2, r3, #1
 801421e:	613a      	str	r2, [r7, #16]
 8014220:	683a      	ldr	r2, [r7, #0]
 8014222:	4413      	add	r3, r2
 8014224:	222e      	movs	r2, #46	; 0x2e
 8014226:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8014228:	693b      	ldr	r3, [r7, #16]
 801422a:	1c5a      	adds	r2, r3, #1
 801422c:	613a      	str	r2, [r7, #16]
 801422e:	683a      	ldr	r2, [r7, #0]
 8014230:	4413      	add	r3, r2
 8014232:	7bfa      	ldrb	r2, [r7, #15]
 8014234:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8014236:	697b      	ldr	r3, [r7, #20]
 8014238:	2b0a      	cmp	r3, #10
 801423a:	d9da      	bls.n	80141f2 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 801423c:	683a      	ldr	r2, [r7, #0]
 801423e:	693b      	ldr	r3, [r7, #16]
 8014240:	4413      	add	r3, r2
 8014242:	3309      	adds	r3, #9
 8014244:	2200      	movs	r2, #0
 8014246:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	6a1b      	ldr	r3, [r3, #32]
 801424c:	7ada      	ldrb	r2, [r3, #11]
 801424e:	683b      	ldr	r3, [r7, #0]
 8014250:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	6a1b      	ldr	r3, [r3, #32]
 8014256:	331c      	adds	r3, #28
 8014258:	4618      	mov	r0, r3
 801425a:	f7fe fec5 	bl	8012fe8 <ld_dword>
 801425e:	4602      	mov	r2, r0
 8014260:	683b      	ldr	r3, [r7, #0]
 8014262:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	6a1b      	ldr	r3, [r3, #32]
 8014268:	3316      	adds	r3, #22
 801426a:	4618      	mov	r0, r3
 801426c:	f7fe febc 	bl	8012fe8 <ld_dword>
 8014270:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8014272:	68bb      	ldr	r3, [r7, #8]
 8014274:	b29a      	uxth	r2, r3
 8014276:	683b      	ldr	r3, [r7, #0]
 8014278:	80da      	strh	r2, [r3, #6]
 801427a:	68bb      	ldr	r3, [r7, #8]
 801427c:	0c1b      	lsrs	r3, r3, #16
 801427e:	b29a      	uxth	r2, r3
 8014280:	683b      	ldr	r3, [r7, #0]
 8014282:	809a      	strh	r2, [r3, #4]
 8014284:	e000      	b.n	8014288 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8014286:	bf00      	nop
}
 8014288:	3718      	adds	r7, #24
 801428a:	46bd      	mov	sp, r7
 801428c:	bd80      	pop	{r7, pc}
	...

08014290 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b088      	sub	sp, #32
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
 8014298:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801429a:	683b      	ldr	r3, [r7, #0]
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	60fb      	str	r3, [r7, #12]
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	3324      	adds	r3, #36	; 0x24
 80142a4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80142a6:	220b      	movs	r2, #11
 80142a8:	2120      	movs	r1, #32
 80142aa:	68b8      	ldr	r0, [r7, #8]
 80142ac:	f7fe ff27 	bl	80130fe <mem_set>
	si = i = 0; ni = 8;
 80142b0:	2300      	movs	r3, #0
 80142b2:	613b      	str	r3, [r7, #16]
 80142b4:	693b      	ldr	r3, [r7, #16]
 80142b6:	61fb      	str	r3, [r7, #28]
 80142b8:	2308      	movs	r3, #8
 80142ba:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80142bc:	69fb      	ldr	r3, [r7, #28]
 80142be:	1c5a      	adds	r2, r3, #1
 80142c0:	61fa      	str	r2, [r7, #28]
 80142c2:	68fa      	ldr	r2, [r7, #12]
 80142c4:	4413      	add	r3, r2
 80142c6:	781b      	ldrb	r3, [r3, #0]
 80142c8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80142ca:	7efb      	ldrb	r3, [r7, #27]
 80142cc:	2b20      	cmp	r3, #32
 80142ce:	d94e      	bls.n	801436e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80142d0:	7efb      	ldrb	r3, [r7, #27]
 80142d2:	2b2f      	cmp	r3, #47	; 0x2f
 80142d4:	d006      	beq.n	80142e4 <create_name+0x54>
 80142d6:	7efb      	ldrb	r3, [r7, #27]
 80142d8:	2b5c      	cmp	r3, #92	; 0x5c
 80142da:	d110      	bne.n	80142fe <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80142dc:	e002      	b.n	80142e4 <create_name+0x54>
 80142de:	69fb      	ldr	r3, [r7, #28]
 80142e0:	3301      	adds	r3, #1
 80142e2:	61fb      	str	r3, [r7, #28]
 80142e4:	68fa      	ldr	r2, [r7, #12]
 80142e6:	69fb      	ldr	r3, [r7, #28]
 80142e8:	4413      	add	r3, r2
 80142ea:	781b      	ldrb	r3, [r3, #0]
 80142ec:	2b2f      	cmp	r3, #47	; 0x2f
 80142ee:	d0f6      	beq.n	80142de <create_name+0x4e>
 80142f0:	68fa      	ldr	r2, [r7, #12]
 80142f2:	69fb      	ldr	r3, [r7, #28]
 80142f4:	4413      	add	r3, r2
 80142f6:	781b      	ldrb	r3, [r3, #0]
 80142f8:	2b5c      	cmp	r3, #92	; 0x5c
 80142fa:	d0f0      	beq.n	80142de <create_name+0x4e>
			break;
 80142fc:	e038      	b.n	8014370 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80142fe:	7efb      	ldrb	r3, [r7, #27]
 8014300:	2b2e      	cmp	r3, #46	; 0x2e
 8014302:	d003      	beq.n	801430c <create_name+0x7c>
 8014304:	693a      	ldr	r2, [r7, #16]
 8014306:	697b      	ldr	r3, [r7, #20]
 8014308:	429a      	cmp	r2, r3
 801430a:	d30c      	bcc.n	8014326 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801430c:	697b      	ldr	r3, [r7, #20]
 801430e:	2b0b      	cmp	r3, #11
 8014310:	d002      	beq.n	8014318 <create_name+0x88>
 8014312:	7efb      	ldrb	r3, [r7, #27]
 8014314:	2b2e      	cmp	r3, #46	; 0x2e
 8014316:	d001      	beq.n	801431c <create_name+0x8c>
 8014318:	2306      	movs	r3, #6
 801431a:	e044      	b.n	80143a6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801431c:	2308      	movs	r3, #8
 801431e:	613b      	str	r3, [r7, #16]
 8014320:	230b      	movs	r3, #11
 8014322:	617b      	str	r3, [r7, #20]
			continue;
 8014324:	e022      	b.n	801436c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8014326:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801432a:	2b00      	cmp	r3, #0
 801432c:	da04      	bge.n	8014338 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801432e:	7efb      	ldrb	r3, [r7, #27]
 8014330:	3b80      	subs	r3, #128	; 0x80
 8014332:	4a1f      	ldr	r2, [pc, #124]	; (80143b0 <create_name+0x120>)
 8014334:	5cd3      	ldrb	r3, [r2, r3]
 8014336:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8014338:	7efb      	ldrb	r3, [r7, #27]
 801433a:	4619      	mov	r1, r3
 801433c:	481d      	ldr	r0, [pc, #116]	; (80143b4 <create_name+0x124>)
 801433e:	f7fe ff20 	bl	8013182 <chk_chr>
 8014342:	4603      	mov	r3, r0
 8014344:	2b00      	cmp	r3, #0
 8014346:	d001      	beq.n	801434c <create_name+0xbc>
 8014348:	2306      	movs	r3, #6
 801434a:	e02c      	b.n	80143a6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801434c:	7efb      	ldrb	r3, [r7, #27]
 801434e:	2b60      	cmp	r3, #96	; 0x60
 8014350:	d905      	bls.n	801435e <create_name+0xce>
 8014352:	7efb      	ldrb	r3, [r7, #27]
 8014354:	2b7a      	cmp	r3, #122	; 0x7a
 8014356:	d802      	bhi.n	801435e <create_name+0xce>
 8014358:	7efb      	ldrb	r3, [r7, #27]
 801435a:	3b20      	subs	r3, #32
 801435c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801435e:	693b      	ldr	r3, [r7, #16]
 8014360:	1c5a      	adds	r2, r3, #1
 8014362:	613a      	str	r2, [r7, #16]
 8014364:	68ba      	ldr	r2, [r7, #8]
 8014366:	4413      	add	r3, r2
 8014368:	7efa      	ldrb	r2, [r7, #27]
 801436a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801436c:	e7a6      	b.n	80142bc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801436e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8014370:	68fa      	ldr	r2, [r7, #12]
 8014372:	69fb      	ldr	r3, [r7, #28]
 8014374:	441a      	add	r2, r3
 8014376:	683b      	ldr	r3, [r7, #0]
 8014378:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801437a:	693b      	ldr	r3, [r7, #16]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d101      	bne.n	8014384 <create_name+0xf4>
 8014380:	2306      	movs	r3, #6
 8014382:	e010      	b.n	80143a6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8014384:	68bb      	ldr	r3, [r7, #8]
 8014386:	781b      	ldrb	r3, [r3, #0]
 8014388:	2be5      	cmp	r3, #229	; 0xe5
 801438a:	d102      	bne.n	8014392 <create_name+0x102>
 801438c:	68bb      	ldr	r3, [r7, #8]
 801438e:	2205      	movs	r2, #5
 8014390:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8014392:	7efb      	ldrb	r3, [r7, #27]
 8014394:	2b20      	cmp	r3, #32
 8014396:	d801      	bhi.n	801439c <create_name+0x10c>
 8014398:	2204      	movs	r2, #4
 801439a:	e000      	b.n	801439e <create_name+0x10e>
 801439c:	2200      	movs	r2, #0
 801439e:	68bb      	ldr	r3, [r7, #8]
 80143a0:	330b      	adds	r3, #11
 80143a2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80143a4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80143a6:	4618      	mov	r0, r3
 80143a8:	3720      	adds	r7, #32
 80143aa:	46bd      	mov	sp, r7
 80143ac:	bd80      	pop	{r7, pc}
 80143ae:	bf00      	nop
 80143b0:	08021ee0 	.word	0x08021ee0
 80143b4:	08021ce4 	.word	0x08021ce4

080143b8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b086      	sub	sp, #24
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
 80143c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80143c6:	693b      	ldr	r3, [r7, #16]
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80143cc:	e002      	b.n	80143d4 <follow_path+0x1c>
 80143ce:	683b      	ldr	r3, [r7, #0]
 80143d0:	3301      	adds	r3, #1
 80143d2:	603b      	str	r3, [r7, #0]
 80143d4:	683b      	ldr	r3, [r7, #0]
 80143d6:	781b      	ldrb	r3, [r3, #0]
 80143d8:	2b2f      	cmp	r3, #47	; 0x2f
 80143da:	d0f8      	beq.n	80143ce <follow_path+0x16>
 80143dc:	683b      	ldr	r3, [r7, #0]
 80143de:	781b      	ldrb	r3, [r3, #0]
 80143e0:	2b5c      	cmp	r3, #92	; 0x5c
 80143e2:	d0f4      	beq.n	80143ce <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80143e4:	693b      	ldr	r3, [r7, #16]
 80143e6:	2200      	movs	r2, #0
 80143e8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80143ea:	683b      	ldr	r3, [r7, #0]
 80143ec:	781b      	ldrb	r3, [r3, #0]
 80143ee:	2b1f      	cmp	r3, #31
 80143f0:	d80a      	bhi.n	8014408 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	2280      	movs	r2, #128	; 0x80
 80143f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80143fa:	2100      	movs	r1, #0
 80143fc:	6878      	ldr	r0, [r7, #4]
 80143fe:	f7ff fc3d 	bl	8013c7c <dir_sdi>
 8014402:	4603      	mov	r3, r0
 8014404:	75fb      	strb	r3, [r7, #23]
 8014406:	e043      	b.n	8014490 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014408:	463b      	mov	r3, r7
 801440a:	4619      	mov	r1, r3
 801440c:	6878      	ldr	r0, [r7, #4]
 801440e:	f7ff ff3f 	bl	8014290 <create_name>
 8014412:	4603      	mov	r3, r0
 8014414:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8014416:	7dfb      	ldrb	r3, [r7, #23]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d134      	bne.n	8014486 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801441c:	6878      	ldr	r0, [r7, #4]
 801441e:	f7ff fe50 	bl	80140c2 <dir_find>
 8014422:	4603      	mov	r3, r0
 8014424:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801442c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801442e:	7dfb      	ldrb	r3, [r7, #23]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d00a      	beq.n	801444a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8014434:	7dfb      	ldrb	r3, [r7, #23]
 8014436:	2b04      	cmp	r3, #4
 8014438:	d127      	bne.n	801448a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801443a:	7afb      	ldrb	r3, [r7, #11]
 801443c:	f003 0304 	and.w	r3, r3, #4
 8014440:	2b00      	cmp	r3, #0
 8014442:	d122      	bne.n	801448a <follow_path+0xd2>
 8014444:	2305      	movs	r3, #5
 8014446:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8014448:	e01f      	b.n	801448a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801444a:	7afb      	ldrb	r3, [r7, #11]
 801444c:	f003 0304 	and.w	r3, r3, #4
 8014450:	2b00      	cmp	r3, #0
 8014452:	d11c      	bne.n	801448e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8014454:	693b      	ldr	r3, [r7, #16]
 8014456:	799b      	ldrb	r3, [r3, #6]
 8014458:	f003 0310 	and.w	r3, r3, #16
 801445c:	2b00      	cmp	r3, #0
 801445e:	d102      	bne.n	8014466 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8014460:	2305      	movs	r3, #5
 8014462:	75fb      	strb	r3, [r7, #23]
 8014464:	e014      	b.n	8014490 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	695b      	ldr	r3, [r3, #20]
 8014470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014474:	4413      	add	r3, r2
 8014476:	4619      	mov	r1, r3
 8014478:	68f8      	ldr	r0, [r7, #12]
 801447a:	f7ff fd86 	bl	8013f8a <ld_clust>
 801447e:	4602      	mov	r2, r0
 8014480:	693b      	ldr	r3, [r7, #16]
 8014482:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014484:	e7c0      	b.n	8014408 <follow_path+0x50>
			if (res != FR_OK) break;
 8014486:	bf00      	nop
 8014488:	e002      	b.n	8014490 <follow_path+0xd8>
				break;
 801448a:	bf00      	nop
 801448c:	e000      	b.n	8014490 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801448e:	bf00      	nop
			}
		}
	}

	return res;
 8014490:	7dfb      	ldrb	r3, [r7, #23]
}
 8014492:	4618      	mov	r0, r3
 8014494:	3718      	adds	r7, #24
 8014496:	46bd      	mov	sp, r7
 8014498:	bd80      	pop	{r7, pc}

0801449a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801449a:	b480      	push	{r7}
 801449c:	b087      	sub	sp, #28
 801449e:	af00      	add	r7, sp, #0
 80144a0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80144a2:	f04f 33ff 	mov.w	r3, #4294967295
 80144a6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d031      	beq.n	8014514 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	617b      	str	r3, [r7, #20]
 80144b6:	e002      	b.n	80144be <get_ldnumber+0x24>
 80144b8:	697b      	ldr	r3, [r7, #20]
 80144ba:	3301      	adds	r3, #1
 80144bc:	617b      	str	r3, [r7, #20]
 80144be:	697b      	ldr	r3, [r7, #20]
 80144c0:	781b      	ldrb	r3, [r3, #0]
 80144c2:	2b20      	cmp	r3, #32
 80144c4:	d903      	bls.n	80144ce <get_ldnumber+0x34>
 80144c6:	697b      	ldr	r3, [r7, #20]
 80144c8:	781b      	ldrb	r3, [r3, #0]
 80144ca:	2b3a      	cmp	r3, #58	; 0x3a
 80144cc:	d1f4      	bne.n	80144b8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80144ce:	697b      	ldr	r3, [r7, #20]
 80144d0:	781b      	ldrb	r3, [r3, #0]
 80144d2:	2b3a      	cmp	r3, #58	; 0x3a
 80144d4:	d11c      	bne.n	8014510 <get_ldnumber+0x76>
			tp = *path;
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	1c5a      	adds	r2, r3, #1
 80144e0:	60fa      	str	r2, [r7, #12]
 80144e2:	781b      	ldrb	r3, [r3, #0]
 80144e4:	3b30      	subs	r3, #48	; 0x30
 80144e6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80144e8:	68bb      	ldr	r3, [r7, #8]
 80144ea:	2b09      	cmp	r3, #9
 80144ec:	d80e      	bhi.n	801450c <get_ldnumber+0x72>
 80144ee:	68fa      	ldr	r2, [r7, #12]
 80144f0:	697b      	ldr	r3, [r7, #20]
 80144f2:	429a      	cmp	r2, r3
 80144f4:	d10a      	bne.n	801450c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80144f6:	68bb      	ldr	r3, [r7, #8]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d107      	bne.n	801450c <get_ldnumber+0x72>
					vol = (int)i;
 80144fc:	68bb      	ldr	r3, [r7, #8]
 80144fe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8014500:	697b      	ldr	r3, [r7, #20]
 8014502:	3301      	adds	r3, #1
 8014504:	617b      	str	r3, [r7, #20]
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	697a      	ldr	r2, [r7, #20]
 801450a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801450c:	693b      	ldr	r3, [r7, #16]
 801450e:	e002      	b.n	8014516 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8014510:	2300      	movs	r3, #0
 8014512:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8014514:	693b      	ldr	r3, [r7, #16]
}
 8014516:	4618      	mov	r0, r3
 8014518:	371c      	adds	r7, #28
 801451a:	46bd      	mov	sp, r7
 801451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014520:	4770      	bx	lr
	...

08014524 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8014524:	b580      	push	{r7, lr}
 8014526:	b082      	sub	sp, #8
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
 801452c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	2200      	movs	r2, #0
 8014532:	70da      	strb	r2, [r3, #3]
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	f04f 32ff 	mov.w	r2, #4294967295
 801453a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801453c:	6839      	ldr	r1, [r7, #0]
 801453e:	6878      	ldr	r0, [r7, #4]
 8014540:	f7ff f81c 	bl	801357c <move_window>
 8014544:	4603      	mov	r3, r0
 8014546:	2b00      	cmp	r3, #0
 8014548:	d001      	beq.n	801454e <check_fs+0x2a>
 801454a:	2304      	movs	r3, #4
 801454c:	e038      	b.n	80145c0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	3334      	adds	r3, #52	; 0x34
 8014552:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014556:	4618      	mov	r0, r3
 8014558:	f7fe fd2e 	bl	8012fb8 <ld_word>
 801455c:	4603      	mov	r3, r0
 801455e:	461a      	mov	r2, r3
 8014560:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014564:	429a      	cmp	r2, r3
 8014566:	d001      	beq.n	801456c <check_fs+0x48>
 8014568:	2303      	movs	r3, #3
 801456a:	e029      	b.n	80145c0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014572:	2be9      	cmp	r3, #233	; 0xe9
 8014574:	d009      	beq.n	801458a <check_fs+0x66>
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801457c:	2beb      	cmp	r3, #235	; 0xeb
 801457e:	d11e      	bne.n	80145be <check_fs+0x9a>
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8014586:	2b90      	cmp	r3, #144	; 0x90
 8014588:	d119      	bne.n	80145be <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	3334      	adds	r3, #52	; 0x34
 801458e:	3336      	adds	r3, #54	; 0x36
 8014590:	4618      	mov	r0, r3
 8014592:	f7fe fd29 	bl	8012fe8 <ld_dword>
 8014596:	4603      	mov	r3, r0
 8014598:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801459c:	4a0a      	ldr	r2, [pc, #40]	; (80145c8 <check_fs+0xa4>)
 801459e:	4293      	cmp	r3, r2
 80145a0:	d101      	bne.n	80145a6 <check_fs+0x82>
 80145a2:	2300      	movs	r3, #0
 80145a4:	e00c      	b.n	80145c0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	3334      	adds	r3, #52	; 0x34
 80145aa:	3352      	adds	r3, #82	; 0x52
 80145ac:	4618      	mov	r0, r3
 80145ae:	f7fe fd1b 	bl	8012fe8 <ld_dword>
 80145b2:	4603      	mov	r3, r0
 80145b4:	4a05      	ldr	r2, [pc, #20]	; (80145cc <check_fs+0xa8>)
 80145b6:	4293      	cmp	r3, r2
 80145b8:	d101      	bne.n	80145be <check_fs+0x9a>
 80145ba:	2300      	movs	r3, #0
 80145bc:	e000      	b.n	80145c0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80145be:	2302      	movs	r3, #2
}
 80145c0:	4618      	mov	r0, r3
 80145c2:	3708      	adds	r7, #8
 80145c4:	46bd      	mov	sp, r7
 80145c6:	bd80      	pop	{r7, pc}
 80145c8:	00544146 	.word	0x00544146
 80145cc:	33544146 	.word	0x33544146

080145d0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b096      	sub	sp, #88	; 0x58
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	60f8      	str	r0, [r7, #12]
 80145d8:	60b9      	str	r1, [r7, #8]
 80145da:	4613      	mov	r3, r2
 80145dc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80145de:	68bb      	ldr	r3, [r7, #8]
 80145e0:	2200      	movs	r2, #0
 80145e2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80145e4:	68f8      	ldr	r0, [r7, #12]
 80145e6:	f7ff ff58 	bl	801449a <get_ldnumber>
 80145ea:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80145ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	da01      	bge.n	80145f6 <find_volume+0x26>
 80145f2:	230b      	movs	r3, #11
 80145f4:	e236      	b.n	8014a64 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80145f6:	4aac      	ldr	r2, [pc, #688]	; (80148a8 <find_volume+0x2d8>)
 80145f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80145fe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014602:	2b00      	cmp	r3, #0
 8014604:	d101      	bne.n	801460a <find_volume+0x3a>
 8014606:	230c      	movs	r3, #12
 8014608:	e22c      	b.n	8014a64 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 801460a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801460c:	f7fe fdd4 	bl	80131b8 <lock_fs>
 8014610:	4603      	mov	r3, r0
 8014612:	2b00      	cmp	r3, #0
 8014614:	d101      	bne.n	801461a <find_volume+0x4a>
 8014616:	230f      	movs	r3, #15
 8014618:	e224      	b.n	8014a64 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 801461a:	68bb      	ldr	r3, [r7, #8]
 801461c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801461e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8014620:	79fb      	ldrb	r3, [r7, #7]
 8014622:	f023 0301 	bic.w	r3, r3, #1
 8014626:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801462a:	781b      	ldrb	r3, [r3, #0]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d01a      	beq.n	8014666 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8014630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014632:	785b      	ldrb	r3, [r3, #1]
 8014634:	4618      	mov	r0, r3
 8014636:	f7fe fc21 	bl	8012e7c <disk_status>
 801463a:	4603      	mov	r3, r0
 801463c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8014640:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014644:	f003 0301 	and.w	r3, r3, #1
 8014648:	2b00      	cmp	r3, #0
 801464a:	d10c      	bne.n	8014666 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801464c:	79fb      	ldrb	r3, [r7, #7]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d007      	beq.n	8014662 <find_volume+0x92>
 8014652:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014656:	f003 0304 	and.w	r3, r3, #4
 801465a:	2b00      	cmp	r3, #0
 801465c:	d001      	beq.n	8014662 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801465e:	230a      	movs	r3, #10
 8014660:	e200      	b.n	8014a64 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8014662:	2300      	movs	r3, #0
 8014664:	e1fe      	b.n	8014a64 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8014666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014668:	2200      	movs	r2, #0
 801466a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801466c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801466e:	b2da      	uxtb	r2, r3
 8014670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014672:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8014674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014676:	785b      	ldrb	r3, [r3, #1]
 8014678:	4618      	mov	r0, r3
 801467a:	f7fe fc19 	bl	8012eb0 <disk_initialize>
 801467e:	4603      	mov	r3, r0
 8014680:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8014684:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014688:	f003 0301 	and.w	r3, r3, #1
 801468c:	2b00      	cmp	r3, #0
 801468e:	d001      	beq.n	8014694 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014690:	2303      	movs	r3, #3
 8014692:	e1e7      	b.n	8014a64 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8014694:	79fb      	ldrb	r3, [r7, #7]
 8014696:	2b00      	cmp	r3, #0
 8014698:	d007      	beq.n	80146aa <find_volume+0xda>
 801469a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801469e:	f003 0304 	and.w	r3, r3, #4
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d001      	beq.n	80146aa <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80146a6:	230a      	movs	r3, #10
 80146a8:	e1dc      	b.n	8014a64 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80146aa:	2300      	movs	r3, #0
 80146ac:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80146ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80146b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80146b2:	f7ff ff37 	bl	8014524 <check_fs>
 80146b6:	4603      	mov	r3, r0
 80146b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80146bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80146c0:	2b02      	cmp	r3, #2
 80146c2:	d14b      	bne.n	801475c <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80146c4:	2300      	movs	r3, #0
 80146c6:	643b      	str	r3, [r7, #64]	; 0x40
 80146c8:	e01f      	b.n	801470a <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80146ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146cc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80146d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146d2:	011b      	lsls	r3, r3, #4
 80146d4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80146d8:	4413      	add	r3, r2
 80146da:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80146dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146de:	3304      	adds	r3, #4
 80146e0:	781b      	ldrb	r3, [r3, #0]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d006      	beq.n	80146f4 <find_volume+0x124>
 80146e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146e8:	3308      	adds	r3, #8
 80146ea:	4618      	mov	r0, r3
 80146ec:	f7fe fc7c 	bl	8012fe8 <ld_dword>
 80146f0:	4602      	mov	r2, r0
 80146f2:	e000      	b.n	80146f6 <find_volume+0x126>
 80146f4:	2200      	movs	r2, #0
 80146f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146f8:	009b      	lsls	r3, r3, #2
 80146fa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80146fe:	440b      	add	r3, r1
 8014700:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014706:	3301      	adds	r3, #1
 8014708:	643b      	str	r3, [r7, #64]	; 0x40
 801470a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801470c:	2b03      	cmp	r3, #3
 801470e:	d9dc      	bls.n	80146ca <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8014710:	2300      	movs	r3, #0
 8014712:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8014714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014716:	2b00      	cmp	r3, #0
 8014718:	d002      	beq.n	8014720 <find_volume+0x150>
 801471a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801471c:	3b01      	subs	r3, #1
 801471e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8014720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014722:	009b      	lsls	r3, r3, #2
 8014724:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014728:	4413      	add	r3, r2
 801472a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801472e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014732:	2b00      	cmp	r3, #0
 8014734:	d005      	beq.n	8014742 <find_volume+0x172>
 8014736:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014738:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801473a:	f7ff fef3 	bl	8014524 <check_fs>
 801473e:	4603      	mov	r3, r0
 8014740:	e000      	b.n	8014744 <find_volume+0x174>
 8014742:	2303      	movs	r3, #3
 8014744:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014748:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801474c:	2b01      	cmp	r3, #1
 801474e:	d905      	bls.n	801475c <find_volume+0x18c>
 8014750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014752:	3301      	adds	r3, #1
 8014754:	643b      	str	r3, [r7, #64]	; 0x40
 8014756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014758:	2b03      	cmp	r3, #3
 801475a:	d9e1      	bls.n	8014720 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801475c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014760:	2b04      	cmp	r3, #4
 8014762:	d101      	bne.n	8014768 <find_volume+0x198>
 8014764:	2301      	movs	r3, #1
 8014766:	e17d      	b.n	8014a64 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014768:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801476c:	2b01      	cmp	r3, #1
 801476e:	d901      	bls.n	8014774 <find_volume+0x1a4>
 8014770:	230d      	movs	r3, #13
 8014772:	e177      	b.n	8014a64 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8014774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014776:	3334      	adds	r3, #52	; 0x34
 8014778:	330b      	adds	r3, #11
 801477a:	4618      	mov	r0, r3
 801477c:	f7fe fc1c 	bl	8012fb8 <ld_word>
 8014780:	4603      	mov	r3, r0
 8014782:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014786:	d001      	beq.n	801478c <find_volume+0x1bc>
 8014788:	230d      	movs	r3, #13
 801478a:	e16b      	b.n	8014a64 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801478c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801478e:	3334      	adds	r3, #52	; 0x34
 8014790:	3316      	adds	r3, #22
 8014792:	4618      	mov	r0, r3
 8014794:	f7fe fc10 	bl	8012fb8 <ld_word>
 8014798:	4603      	mov	r3, r0
 801479a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801479c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d106      	bne.n	80147b0 <find_volume+0x1e0>
 80147a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147a4:	3334      	adds	r3, #52	; 0x34
 80147a6:	3324      	adds	r3, #36	; 0x24
 80147a8:	4618      	mov	r0, r3
 80147aa:	f7fe fc1d 	bl	8012fe8 <ld_dword>
 80147ae:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80147b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80147b4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80147b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147b8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80147bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147be:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80147c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147c2:	789b      	ldrb	r3, [r3, #2]
 80147c4:	2b01      	cmp	r3, #1
 80147c6:	d005      	beq.n	80147d4 <find_volume+0x204>
 80147c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147ca:	789b      	ldrb	r3, [r3, #2]
 80147cc:	2b02      	cmp	r3, #2
 80147ce:	d001      	beq.n	80147d4 <find_volume+0x204>
 80147d0:	230d      	movs	r3, #13
 80147d2:	e147      	b.n	8014a64 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80147d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147d6:	789b      	ldrb	r3, [r3, #2]
 80147d8:	461a      	mov	r2, r3
 80147da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80147dc:	fb02 f303 	mul.w	r3, r2, r3
 80147e0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80147e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80147e8:	b29a      	uxth	r2, r3
 80147ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147ec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80147ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147f0:	895b      	ldrh	r3, [r3, #10]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d008      	beq.n	8014808 <find_volume+0x238>
 80147f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147f8:	895b      	ldrh	r3, [r3, #10]
 80147fa:	461a      	mov	r2, r3
 80147fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147fe:	895b      	ldrh	r3, [r3, #10]
 8014800:	3b01      	subs	r3, #1
 8014802:	4013      	ands	r3, r2
 8014804:	2b00      	cmp	r3, #0
 8014806:	d001      	beq.n	801480c <find_volume+0x23c>
 8014808:	230d      	movs	r3, #13
 801480a:	e12b      	b.n	8014a64 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801480c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801480e:	3334      	adds	r3, #52	; 0x34
 8014810:	3311      	adds	r3, #17
 8014812:	4618      	mov	r0, r3
 8014814:	f7fe fbd0 	bl	8012fb8 <ld_word>
 8014818:	4603      	mov	r3, r0
 801481a:	461a      	mov	r2, r3
 801481c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801481e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014822:	891b      	ldrh	r3, [r3, #8]
 8014824:	f003 030f 	and.w	r3, r3, #15
 8014828:	b29b      	uxth	r3, r3
 801482a:	2b00      	cmp	r3, #0
 801482c:	d001      	beq.n	8014832 <find_volume+0x262>
 801482e:	230d      	movs	r3, #13
 8014830:	e118      	b.n	8014a64 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8014832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014834:	3334      	adds	r3, #52	; 0x34
 8014836:	3313      	adds	r3, #19
 8014838:	4618      	mov	r0, r3
 801483a:	f7fe fbbd 	bl	8012fb8 <ld_word>
 801483e:	4603      	mov	r3, r0
 8014840:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8014842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014844:	2b00      	cmp	r3, #0
 8014846:	d106      	bne.n	8014856 <find_volume+0x286>
 8014848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801484a:	3334      	adds	r3, #52	; 0x34
 801484c:	3320      	adds	r3, #32
 801484e:	4618      	mov	r0, r3
 8014850:	f7fe fbca 	bl	8012fe8 <ld_dword>
 8014854:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8014856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014858:	3334      	adds	r3, #52	; 0x34
 801485a:	330e      	adds	r3, #14
 801485c:	4618      	mov	r0, r3
 801485e:	f7fe fbab 	bl	8012fb8 <ld_word>
 8014862:	4603      	mov	r3, r0
 8014864:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8014866:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014868:	2b00      	cmp	r3, #0
 801486a:	d101      	bne.n	8014870 <find_volume+0x2a0>
 801486c:	230d      	movs	r3, #13
 801486e:	e0f9      	b.n	8014a64 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8014870:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014874:	4413      	add	r3, r2
 8014876:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014878:	8912      	ldrh	r2, [r2, #8]
 801487a:	0912      	lsrs	r2, r2, #4
 801487c:	b292      	uxth	r2, r2
 801487e:	4413      	add	r3, r2
 8014880:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8014882:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014886:	429a      	cmp	r2, r3
 8014888:	d201      	bcs.n	801488e <find_volume+0x2be>
 801488a:	230d      	movs	r3, #13
 801488c:	e0ea      	b.n	8014a64 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801488e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014892:	1ad3      	subs	r3, r2, r3
 8014894:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014896:	8952      	ldrh	r2, [r2, #10]
 8014898:	fbb3 f3f2 	udiv	r3, r3, r2
 801489c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d103      	bne.n	80148ac <find_volume+0x2dc>
 80148a4:	230d      	movs	r3, #13
 80148a6:	e0dd      	b.n	8014a64 <find_volume+0x494>
 80148a8:	20000844 	.word	0x20000844
		fmt = FS_FAT32;
 80148ac:	2303      	movs	r3, #3
 80148ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80148b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148b4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80148b8:	4293      	cmp	r3, r2
 80148ba:	d802      	bhi.n	80148c2 <find_volume+0x2f2>
 80148bc:	2302      	movs	r3, #2
 80148be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80148c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148c4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80148c8:	4293      	cmp	r3, r2
 80148ca:	d802      	bhi.n	80148d2 <find_volume+0x302>
 80148cc:	2301      	movs	r3, #1
 80148ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80148d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148d4:	1c9a      	adds	r2, r3, #2
 80148d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148d8:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80148da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80148de:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80148e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80148e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148e4:	441a      	add	r2, r3
 80148e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148e8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80148ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80148ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148ee:	441a      	add	r2, r3
 80148f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148f2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80148f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80148f8:	2b03      	cmp	r3, #3
 80148fa:	d11e      	bne.n	801493a <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80148fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148fe:	3334      	adds	r3, #52	; 0x34
 8014900:	332a      	adds	r3, #42	; 0x2a
 8014902:	4618      	mov	r0, r3
 8014904:	f7fe fb58 	bl	8012fb8 <ld_word>
 8014908:	4603      	mov	r3, r0
 801490a:	2b00      	cmp	r3, #0
 801490c:	d001      	beq.n	8014912 <find_volume+0x342>
 801490e:	230d      	movs	r3, #13
 8014910:	e0a8      	b.n	8014a64 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014914:	891b      	ldrh	r3, [r3, #8]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d001      	beq.n	801491e <find_volume+0x34e>
 801491a:	230d      	movs	r3, #13
 801491c:	e0a2      	b.n	8014a64 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801491e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014920:	3334      	adds	r3, #52	; 0x34
 8014922:	332c      	adds	r3, #44	; 0x2c
 8014924:	4618      	mov	r0, r3
 8014926:	f7fe fb5f 	bl	8012fe8 <ld_dword>
 801492a:	4602      	mov	r2, r0
 801492c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801492e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014932:	699b      	ldr	r3, [r3, #24]
 8014934:	009b      	lsls	r3, r3, #2
 8014936:	647b      	str	r3, [r7, #68]	; 0x44
 8014938:	e01f      	b.n	801497a <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801493a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801493c:	891b      	ldrh	r3, [r3, #8]
 801493e:	2b00      	cmp	r3, #0
 8014940:	d101      	bne.n	8014946 <find_volume+0x376>
 8014942:	230d      	movs	r3, #13
 8014944:	e08e      	b.n	8014a64 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801494a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801494c:	441a      	add	r2, r3
 801494e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014950:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014952:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014956:	2b02      	cmp	r3, #2
 8014958:	d103      	bne.n	8014962 <find_volume+0x392>
 801495a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801495c:	699b      	ldr	r3, [r3, #24]
 801495e:	005b      	lsls	r3, r3, #1
 8014960:	e00a      	b.n	8014978 <find_volume+0x3a8>
 8014962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014964:	699a      	ldr	r2, [r3, #24]
 8014966:	4613      	mov	r3, r2
 8014968:	005b      	lsls	r3, r3, #1
 801496a:	4413      	add	r3, r2
 801496c:	085a      	lsrs	r2, r3, #1
 801496e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014970:	699b      	ldr	r3, [r3, #24]
 8014972:	f003 0301 	and.w	r3, r3, #1
 8014976:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8014978:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801497a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801497c:	69da      	ldr	r2, [r3, #28]
 801497e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014980:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8014984:	0a5b      	lsrs	r3, r3, #9
 8014986:	429a      	cmp	r2, r3
 8014988:	d201      	bcs.n	801498e <find_volume+0x3be>
 801498a:	230d      	movs	r3, #13
 801498c:	e06a      	b.n	8014a64 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801498e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014990:	f04f 32ff 	mov.w	r2, #4294967295
 8014994:	615a      	str	r2, [r3, #20]
 8014996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014998:	695a      	ldr	r2, [r3, #20]
 801499a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801499c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149a0:	2280      	movs	r2, #128	; 0x80
 80149a2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80149a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80149a8:	2b03      	cmp	r3, #3
 80149aa:	d149      	bne.n	8014a40 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80149ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149ae:	3334      	adds	r3, #52	; 0x34
 80149b0:	3330      	adds	r3, #48	; 0x30
 80149b2:	4618      	mov	r0, r3
 80149b4:	f7fe fb00 	bl	8012fb8 <ld_word>
 80149b8:	4603      	mov	r3, r0
 80149ba:	2b01      	cmp	r3, #1
 80149bc:	d140      	bne.n	8014a40 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 80149be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80149c0:	3301      	adds	r3, #1
 80149c2:	4619      	mov	r1, r3
 80149c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80149c6:	f7fe fdd9 	bl	801357c <move_window>
 80149ca:	4603      	mov	r3, r0
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d137      	bne.n	8014a40 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 80149d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149d2:	2200      	movs	r2, #0
 80149d4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80149d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149d8:	3334      	adds	r3, #52	; 0x34
 80149da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80149de:	4618      	mov	r0, r3
 80149e0:	f7fe faea 	bl	8012fb8 <ld_word>
 80149e4:	4603      	mov	r3, r0
 80149e6:	461a      	mov	r2, r3
 80149e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80149ec:	429a      	cmp	r2, r3
 80149ee:	d127      	bne.n	8014a40 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80149f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149f2:	3334      	adds	r3, #52	; 0x34
 80149f4:	4618      	mov	r0, r3
 80149f6:	f7fe faf7 	bl	8012fe8 <ld_dword>
 80149fa:	4603      	mov	r3, r0
 80149fc:	4a1b      	ldr	r2, [pc, #108]	; (8014a6c <find_volume+0x49c>)
 80149fe:	4293      	cmp	r3, r2
 8014a00:	d11e      	bne.n	8014a40 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a04:	3334      	adds	r3, #52	; 0x34
 8014a06:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014a0a:	4618      	mov	r0, r3
 8014a0c:	f7fe faec 	bl	8012fe8 <ld_dword>
 8014a10:	4603      	mov	r3, r0
 8014a12:	4a17      	ldr	r2, [pc, #92]	; (8014a70 <find_volume+0x4a0>)
 8014a14:	4293      	cmp	r3, r2
 8014a16:	d113      	bne.n	8014a40 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a1a:	3334      	adds	r3, #52	; 0x34
 8014a1c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8014a20:	4618      	mov	r0, r3
 8014a22:	f7fe fae1 	bl	8012fe8 <ld_dword>
 8014a26:	4602      	mov	r2, r0
 8014a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a2a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a2e:	3334      	adds	r3, #52	; 0x34
 8014a30:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8014a34:	4618      	mov	r0, r3
 8014a36:	f7fe fad7 	bl	8012fe8 <ld_dword>
 8014a3a:	4602      	mov	r2, r0
 8014a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a3e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8014a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a42:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8014a46:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014a48:	4b0a      	ldr	r3, [pc, #40]	; (8014a74 <find_volume+0x4a4>)
 8014a4a:	881b      	ldrh	r3, [r3, #0]
 8014a4c:	3301      	adds	r3, #1
 8014a4e:	b29a      	uxth	r2, r3
 8014a50:	4b08      	ldr	r3, [pc, #32]	; (8014a74 <find_volume+0x4a4>)
 8014a52:	801a      	strh	r2, [r3, #0]
 8014a54:	4b07      	ldr	r3, [pc, #28]	; (8014a74 <find_volume+0x4a4>)
 8014a56:	881a      	ldrh	r2, [r3, #0]
 8014a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a5a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014a5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014a5e:	f7fe fd25 	bl	80134ac <clear_lock>
#endif
	return FR_OK;
 8014a62:	2300      	movs	r3, #0
}
 8014a64:	4618      	mov	r0, r3
 8014a66:	3758      	adds	r7, #88	; 0x58
 8014a68:	46bd      	mov	sp, r7
 8014a6a:	bd80      	pop	{r7, pc}
 8014a6c:	41615252 	.word	0x41615252
 8014a70:	61417272 	.word	0x61417272
 8014a74:	20000848 	.word	0x20000848

08014a78 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8014a78:	b580      	push	{r7, lr}
 8014a7a:	b084      	sub	sp, #16
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	6078      	str	r0, [r7, #4]
 8014a80:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014a82:	2309      	movs	r3, #9
 8014a84:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d02e      	beq.n	8014aea <validate+0x72>
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d02a      	beq.n	8014aea <validate+0x72>
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	781b      	ldrb	r3, [r3, #0]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d025      	beq.n	8014aea <validate+0x72>
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	889a      	ldrh	r2, [r3, #4]
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	88db      	ldrh	r3, [r3, #6]
 8014aa8:	429a      	cmp	r2, r3
 8014aaa:	d11e      	bne.n	8014aea <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	f7fe fb81 	bl	80131b8 <lock_fs>
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d014      	beq.n	8014ae6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	785b      	ldrb	r3, [r3, #1]
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	f7fe f9da 	bl	8012e7c <disk_status>
 8014ac8:	4603      	mov	r3, r0
 8014aca:	f003 0301 	and.w	r3, r3, #1
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d102      	bne.n	8014ad8 <validate+0x60>
				res = FR_OK;
 8014ad2:	2300      	movs	r3, #0
 8014ad4:	73fb      	strb	r3, [r7, #15]
 8014ad6:	e008      	b.n	8014aea <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	2100      	movs	r1, #0
 8014ade:	4618      	mov	r0, r3
 8014ae0:	f7fe fb80 	bl	80131e4 <unlock_fs>
 8014ae4:	e001      	b.n	8014aea <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8014ae6:	230f      	movs	r3, #15
 8014ae8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014aea:	7bfb      	ldrb	r3, [r7, #15]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d102      	bne.n	8014af6 <validate+0x7e>
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	e000      	b.n	8014af8 <validate+0x80>
 8014af6:	2300      	movs	r3, #0
 8014af8:	683a      	ldr	r2, [r7, #0]
 8014afa:	6013      	str	r3, [r2, #0]
	return res;
 8014afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8014afe:	4618      	mov	r0, r3
 8014b00:	3710      	adds	r7, #16
 8014b02:	46bd      	mov	sp, r7
 8014b04:	bd80      	pop	{r7, pc}
	...

08014b08 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b088      	sub	sp, #32
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	60f8      	str	r0, [r7, #12]
 8014b10:	60b9      	str	r1, [r7, #8]
 8014b12:	4613      	mov	r3, r2
 8014b14:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014b16:	68bb      	ldr	r3, [r7, #8]
 8014b18:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8014b1a:	f107 0310 	add.w	r3, r7, #16
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f7ff fcbb 	bl	801449a <get_ldnumber>
 8014b24:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014b26:	69fb      	ldr	r3, [r7, #28]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	da01      	bge.n	8014b30 <f_mount+0x28>
 8014b2c:	230b      	movs	r3, #11
 8014b2e:	e048      	b.n	8014bc2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014b30:	4a26      	ldr	r2, [pc, #152]	; (8014bcc <f_mount+0xc4>)
 8014b32:	69fb      	ldr	r3, [r7, #28]
 8014b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b38:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8014b3a:	69bb      	ldr	r3, [r7, #24]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d00f      	beq.n	8014b60 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014b40:	69b8      	ldr	r0, [r7, #24]
 8014b42:	f7fe fcb3 	bl	80134ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8014b46:	69bb      	ldr	r3, [r7, #24]
 8014b48:	68db      	ldr	r3, [r3, #12]
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	f001 f812 	bl	8015b74 <ff_del_syncobj>
 8014b50:	4603      	mov	r3, r0
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d101      	bne.n	8014b5a <f_mount+0x52>
 8014b56:	2302      	movs	r3, #2
 8014b58:	e033      	b.n	8014bc2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014b5a:	69bb      	ldr	r3, [r7, #24]
 8014b5c:	2200      	movs	r2, #0
 8014b5e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d00f      	beq.n	8014b86 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	2200      	movs	r2, #0
 8014b6a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8014b6c:	69fb      	ldr	r3, [r7, #28]
 8014b6e:	b2da      	uxtb	r2, r3
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	330c      	adds	r3, #12
 8014b74:	4619      	mov	r1, r3
 8014b76:	4610      	mov	r0, r2
 8014b78:	f000 ffe1 	bl	8015b3e <ff_cre_syncobj>
 8014b7c:	4603      	mov	r3, r0
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d101      	bne.n	8014b86 <f_mount+0x7e>
 8014b82:	2302      	movs	r3, #2
 8014b84:	e01d      	b.n	8014bc2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014b86:	68fa      	ldr	r2, [r7, #12]
 8014b88:	4910      	ldr	r1, [pc, #64]	; (8014bcc <f_mount+0xc4>)
 8014b8a:	69fb      	ldr	r3, [r7, #28]
 8014b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d002      	beq.n	8014b9c <f_mount+0x94>
 8014b96:	79fb      	ldrb	r3, [r7, #7]
 8014b98:	2b01      	cmp	r3, #1
 8014b9a:	d001      	beq.n	8014ba0 <f_mount+0x98>
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	e010      	b.n	8014bc2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014ba0:	f107 010c 	add.w	r1, r7, #12
 8014ba4:	f107 0308 	add.w	r3, r7, #8
 8014ba8:	2200      	movs	r2, #0
 8014baa:	4618      	mov	r0, r3
 8014bac:	f7ff fd10 	bl	80145d0 <find_volume>
 8014bb0:	4603      	mov	r3, r0
 8014bb2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	7dfa      	ldrb	r2, [r7, #23]
 8014bb8:	4611      	mov	r1, r2
 8014bba:	4618      	mov	r0, r3
 8014bbc:	f7fe fb12 	bl	80131e4 <unlock_fs>
 8014bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	3720      	adds	r7, #32
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	bd80      	pop	{r7, pc}
 8014bca:	bf00      	nop
 8014bcc:	20000844 	.word	0x20000844

08014bd0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b098      	sub	sp, #96	; 0x60
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	60f8      	str	r0, [r7, #12]
 8014bd8:	60b9      	str	r1, [r7, #8]
 8014bda:	4613      	mov	r3, r2
 8014bdc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d101      	bne.n	8014be8 <f_open+0x18>
 8014be4:	2309      	movs	r3, #9
 8014be6:	e1b4      	b.n	8014f52 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014be8:	79fb      	ldrb	r3, [r7, #7]
 8014bea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014bee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014bf0:	79fa      	ldrb	r2, [r7, #7]
 8014bf2:	f107 0110 	add.w	r1, r7, #16
 8014bf6:	f107 0308 	add.w	r3, r7, #8
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	f7ff fce8 	bl	80145d0 <find_volume>
 8014c00:	4603      	mov	r3, r0
 8014c02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8014c06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	f040 8191 	bne.w	8014f32 <f_open+0x362>
		dj.obj.fs = fs;
 8014c10:	693b      	ldr	r3, [r7, #16]
 8014c12:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014c14:	68ba      	ldr	r2, [r7, #8]
 8014c16:	f107 0314 	add.w	r3, r7, #20
 8014c1a:	4611      	mov	r1, r2
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	f7ff fbcb 	bl	80143b8 <follow_path>
 8014c22:	4603      	mov	r3, r0
 8014c24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014c28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d11a      	bne.n	8014c66 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014c30:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014c34:	b25b      	sxtb	r3, r3
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	da03      	bge.n	8014c42 <f_open+0x72>
				res = FR_INVALID_NAME;
 8014c3a:	2306      	movs	r3, #6
 8014c3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014c40:	e011      	b.n	8014c66 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014c42:	79fb      	ldrb	r3, [r7, #7]
 8014c44:	f023 0301 	bic.w	r3, r3, #1
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	bf14      	ite	ne
 8014c4c:	2301      	movne	r3, #1
 8014c4e:	2300      	moveq	r3, #0
 8014c50:	b2db      	uxtb	r3, r3
 8014c52:	461a      	mov	r2, r3
 8014c54:	f107 0314 	add.w	r3, r7, #20
 8014c58:	4611      	mov	r1, r2
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	f7fe fade 	bl	801321c <chk_lock>
 8014c60:	4603      	mov	r3, r0
 8014c62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014c66:	79fb      	ldrb	r3, [r7, #7]
 8014c68:	f003 031c 	and.w	r3, r3, #28
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d07f      	beq.n	8014d70 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8014c70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d017      	beq.n	8014ca8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014c78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014c7c:	2b04      	cmp	r3, #4
 8014c7e:	d10e      	bne.n	8014c9e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014c80:	f7fe fb28 	bl	80132d4 <enq_lock>
 8014c84:	4603      	mov	r3, r0
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d006      	beq.n	8014c98 <f_open+0xc8>
 8014c8a:	f107 0314 	add.w	r3, r7, #20
 8014c8e:	4618      	mov	r0, r3
 8014c90:	f7ff fa6c 	bl	801416c <dir_register>
 8014c94:	4603      	mov	r3, r0
 8014c96:	e000      	b.n	8014c9a <f_open+0xca>
 8014c98:	2312      	movs	r3, #18
 8014c9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014c9e:	79fb      	ldrb	r3, [r7, #7]
 8014ca0:	f043 0308 	orr.w	r3, r3, #8
 8014ca4:	71fb      	strb	r3, [r7, #7]
 8014ca6:	e010      	b.n	8014cca <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014ca8:	7ebb      	ldrb	r3, [r7, #26]
 8014caa:	f003 0311 	and.w	r3, r3, #17
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d003      	beq.n	8014cba <f_open+0xea>
					res = FR_DENIED;
 8014cb2:	2307      	movs	r3, #7
 8014cb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014cb8:	e007      	b.n	8014cca <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014cba:	79fb      	ldrb	r3, [r7, #7]
 8014cbc:	f003 0304 	and.w	r3, r3, #4
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d002      	beq.n	8014cca <f_open+0xfa>
 8014cc4:	2308      	movs	r3, #8
 8014cc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014cca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d168      	bne.n	8014da4 <f_open+0x1d4>
 8014cd2:	79fb      	ldrb	r3, [r7, #7]
 8014cd4:	f003 0308 	and.w	r3, r3, #8
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d063      	beq.n	8014da4 <f_open+0x1d4>
				dw = GET_FATTIME();
 8014cdc:	f7fc fc10 	bl	8011500 <get_fattime>
 8014ce0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ce4:	330e      	adds	r3, #14
 8014ce6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014ce8:	4618      	mov	r0, r3
 8014cea:	f7fe f9bb 	bl	8013064 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cf0:	3316      	adds	r3, #22
 8014cf2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	f7fe f9b5 	bl	8013064 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cfc:	330b      	adds	r3, #11
 8014cfe:	2220      	movs	r2, #32
 8014d00:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014d02:	693b      	ldr	r3, [r7, #16]
 8014d04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d06:	4611      	mov	r1, r2
 8014d08:	4618      	mov	r0, r3
 8014d0a:	f7ff f93e 	bl	8013f8a <ld_clust>
 8014d0e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014d10:	693b      	ldr	r3, [r7, #16]
 8014d12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014d14:	2200      	movs	r2, #0
 8014d16:	4618      	mov	r0, r3
 8014d18:	f7ff f956 	bl	8013fc8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d1e:	331c      	adds	r3, #28
 8014d20:	2100      	movs	r1, #0
 8014d22:	4618      	mov	r0, r3
 8014d24:	f7fe f99e 	bl	8013064 <st_dword>
					fs->wflag = 1;
 8014d28:	693b      	ldr	r3, [r7, #16]
 8014d2a:	2201      	movs	r2, #1
 8014d2c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d037      	beq.n	8014da4 <f_open+0x1d4>
						dw = fs->winsect;
 8014d34:	693b      	ldr	r3, [r7, #16]
 8014d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d38:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8014d3a:	f107 0314 	add.w	r3, r7, #20
 8014d3e:	2200      	movs	r2, #0
 8014d40:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014d42:	4618      	mov	r0, r3
 8014d44:	f7fe fe69 	bl	8013a1a <remove_chain>
 8014d48:	4603      	mov	r3, r0
 8014d4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8014d4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d126      	bne.n	8014da4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8014d56:	693b      	ldr	r3, [r7, #16]
 8014d58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f7fe fc0e 	bl	801357c <move_window>
 8014d60:	4603      	mov	r3, r0
 8014d62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014d66:	693b      	ldr	r3, [r7, #16]
 8014d68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014d6a:	3a01      	subs	r2, #1
 8014d6c:	611a      	str	r2, [r3, #16]
 8014d6e:	e019      	b.n	8014da4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014d70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d115      	bne.n	8014da4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014d78:	7ebb      	ldrb	r3, [r7, #26]
 8014d7a:	f003 0310 	and.w	r3, r3, #16
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d003      	beq.n	8014d8a <f_open+0x1ba>
					res = FR_NO_FILE;
 8014d82:	2304      	movs	r3, #4
 8014d84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014d88:	e00c      	b.n	8014da4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014d8a:	79fb      	ldrb	r3, [r7, #7]
 8014d8c:	f003 0302 	and.w	r3, r3, #2
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d007      	beq.n	8014da4 <f_open+0x1d4>
 8014d94:	7ebb      	ldrb	r3, [r7, #26]
 8014d96:	f003 0301 	and.w	r3, r3, #1
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d002      	beq.n	8014da4 <f_open+0x1d4>
						res = FR_DENIED;
 8014d9e:	2307      	movs	r3, #7
 8014da0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8014da4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d128      	bne.n	8014dfe <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014dac:	79fb      	ldrb	r3, [r7, #7]
 8014dae:	f003 0308 	and.w	r3, r3, #8
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d003      	beq.n	8014dbe <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8014db6:	79fb      	ldrb	r3, [r7, #7]
 8014db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014dbc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014dbe:	693b      	ldr	r3, [r7, #16]
 8014dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8014dc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014dcc:	79fb      	ldrb	r3, [r7, #7]
 8014dce:	f023 0301 	bic.w	r3, r3, #1
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	bf14      	ite	ne
 8014dd6:	2301      	movne	r3, #1
 8014dd8:	2300      	moveq	r3, #0
 8014dda:	b2db      	uxtb	r3, r3
 8014ddc:	461a      	mov	r2, r3
 8014dde:	f107 0314 	add.w	r3, r7, #20
 8014de2:	4611      	mov	r1, r2
 8014de4:	4618      	mov	r0, r3
 8014de6:	f7fe fa97 	bl	8013318 <inc_lock>
 8014dea:	4602      	mov	r2, r0
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	691b      	ldr	r3, [r3, #16]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d102      	bne.n	8014dfe <f_open+0x22e>
 8014df8:	2302      	movs	r3, #2
 8014dfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014dfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	f040 8095 	bne.w	8014f32 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014e08:	693b      	ldr	r3, [r7, #16]
 8014e0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014e0c:	4611      	mov	r1, r2
 8014e0e:	4618      	mov	r0, r3
 8014e10:	f7ff f8bb 	bl	8013f8a <ld_clust>
 8014e14:	4602      	mov	r2, r0
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e1c:	331c      	adds	r3, #28
 8014e1e:	4618      	mov	r0, r3
 8014e20:	f7fe f8e2 	bl	8012fe8 <ld_dword>
 8014e24:	4602      	mov	r2, r0
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	2200      	movs	r2, #0
 8014e2e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014e30:	693a      	ldr	r2, [r7, #16]
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014e36:	693b      	ldr	r3, [r7, #16]
 8014e38:	88da      	ldrh	r2, [r3, #6]
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	79fa      	ldrb	r2, [r7, #7]
 8014e42:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	2200      	movs	r2, #0
 8014e48:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	2200      	movs	r2, #0
 8014e54:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	3330      	adds	r3, #48	; 0x30
 8014e5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014e5e:	2100      	movs	r1, #0
 8014e60:	4618      	mov	r0, r3
 8014e62:	f7fe f94c 	bl	80130fe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014e66:	79fb      	ldrb	r3, [r7, #7]
 8014e68:	f003 0320 	and.w	r3, r3, #32
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d060      	beq.n	8014f32 <f_open+0x362>
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	68db      	ldr	r3, [r3, #12]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d05c      	beq.n	8014f32 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	68da      	ldr	r2, [r3, #12]
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014e80:	693b      	ldr	r3, [r7, #16]
 8014e82:	895b      	ldrh	r3, [r3, #10]
 8014e84:	025b      	lsls	r3, r3, #9
 8014e86:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	689b      	ldr	r3, [r3, #8]
 8014e8c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	68db      	ldr	r3, [r3, #12]
 8014e92:	657b      	str	r3, [r7, #84]	; 0x54
 8014e94:	e016      	b.n	8014ec4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	f7fe fc29 	bl	80136f2 <get_fat>
 8014ea0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8014ea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014ea4:	2b01      	cmp	r3, #1
 8014ea6:	d802      	bhi.n	8014eae <f_open+0x2de>
 8014ea8:	2302      	movs	r3, #2
 8014eaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014eae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014eb4:	d102      	bne.n	8014ebc <f_open+0x2ec>
 8014eb6:	2301      	movs	r3, #1
 8014eb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014ebc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ec0:	1ad3      	subs	r3, r2, r3
 8014ec2:	657b      	str	r3, [r7, #84]	; 0x54
 8014ec4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d103      	bne.n	8014ed4 <f_open+0x304>
 8014ecc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014ece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ed0:	429a      	cmp	r2, r3
 8014ed2:	d8e0      	bhi.n	8014e96 <f_open+0x2c6>
				}
				fp->clust = clst;
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014ed8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014eda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d127      	bne.n	8014f32 <f_open+0x362>
 8014ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d022      	beq.n	8014f32 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014eec:	693b      	ldr	r3, [r7, #16]
 8014eee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	f7fe fbdf 	bl	80136b4 <clust2sect>
 8014ef6:	6478      	str	r0, [r7, #68]	; 0x44
 8014ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d103      	bne.n	8014f06 <f_open+0x336>
						res = FR_INT_ERR;
 8014efe:	2302      	movs	r3, #2
 8014f00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014f04:	e015      	b.n	8014f32 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014f06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f08:	0a5a      	lsrs	r2, r3, #9
 8014f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f0c:	441a      	add	r2, r3
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014f12:	693b      	ldr	r3, [r7, #16]
 8014f14:	7858      	ldrb	r0, [r3, #1]
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	6a1a      	ldr	r2, [r3, #32]
 8014f20:	2301      	movs	r3, #1
 8014f22:	f7fd ffeb 	bl	8012efc <disk_read>
 8014f26:	4603      	mov	r3, r0
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d002      	beq.n	8014f32 <f_open+0x362>
 8014f2c:	2301      	movs	r3, #1
 8014f2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014f32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d002      	beq.n	8014f40 <f_open+0x370>
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014f40:	693b      	ldr	r3, [r7, #16]
 8014f42:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8014f46:	4611      	mov	r1, r2
 8014f48:	4618      	mov	r0, r3
 8014f4a:	f7fe f94b 	bl	80131e4 <unlock_fs>
 8014f4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8014f52:	4618      	mov	r0, r3
 8014f54:	3760      	adds	r7, #96	; 0x60
 8014f56:	46bd      	mov	sp, r7
 8014f58:	bd80      	pop	{r7, pc}

08014f5a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014f5a:	b580      	push	{r7, lr}
 8014f5c:	b08c      	sub	sp, #48	; 0x30
 8014f5e:	af00      	add	r7, sp, #0
 8014f60:	60f8      	str	r0, [r7, #12]
 8014f62:	60b9      	str	r1, [r7, #8]
 8014f64:	607a      	str	r2, [r7, #4]
 8014f66:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014f68:	68bb      	ldr	r3, [r7, #8]
 8014f6a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014f6c:	683b      	ldr	r3, [r7, #0]
 8014f6e:	2200      	movs	r2, #0
 8014f70:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	f107 0210 	add.w	r2, r7, #16
 8014f78:	4611      	mov	r1, r2
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	f7ff fd7c 	bl	8014a78 <validate>
 8014f80:	4603      	mov	r3, r0
 8014f82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014f86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d107      	bne.n	8014f9e <f_write+0x44>
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	7d5b      	ldrb	r3, [r3, #21]
 8014f92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014f96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d009      	beq.n	8014fb2 <f_write+0x58>
 8014f9e:	693b      	ldr	r3, [r7, #16]
 8014fa0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014fa4:	4611      	mov	r1, r2
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	f7fe f91c 	bl	80131e4 <unlock_fs>
 8014fac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014fb0:	e173      	b.n	801529a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	7d1b      	ldrb	r3, [r3, #20]
 8014fb6:	f003 0302 	and.w	r3, r3, #2
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d106      	bne.n	8014fcc <f_write+0x72>
 8014fbe:	693b      	ldr	r3, [r7, #16]
 8014fc0:	2107      	movs	r1, #7
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f7fe f90e 	bl	80131e4 <unlock_fs>
 8014fc8:	2307      	movs	r3, #7
 8014fca:	e166      	b.n	801529a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	699a      	ldr	r2, [r3, #24]
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	441a      	add	r2, r3
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	699b      	ldr	r3, [r3, #24]
 8014fd8:	429a      	cmp	r2, r3
 8014fda:	f080 814b 	bcs.w	8015274 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	699b      	ldr	r3, [r3, #24]
 8014fe2:	43db      	mvns	r3, r3
 8014fe4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014fe6:	e145      	b.n	8015274 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	699b      	ldr	r3, [r3, #24]
 8014fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	f040 8101 	bne.w	80151f8 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	699b      	ldr	r3, [r3, #24]
 8014ffa:	0a5b      	lsrs	r3, r3, #9
 8014ffc:	693a      	ldr	r2, [r7, #16]
 8014ffe:	8952      	ldrh	r2, [r2, #10]
 8015000:	3a01      	subs	r2, #1
 8015002:	4013      	ands	r3, r2
 8015004:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8015006:	69bb      	ldr	r3, [r7, #24]
 8015008:	2b00      	cmp	r3, #0
 801500a:	d14d      	bne.n	80150a8 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	699b      	ldr	r3, [r3, #24]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d10c      	bne.n	801502e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	689b      	ldr	r3, [r3, #8]
 8015018:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801501a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801501c:	2b00      	cmp	r3, #0
 801501e:	d11a      	bne.n	8015056 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	2100      	movs	r1, #0
 8015024:	4618      	mov	r0, r3
 8015026:	f7fe fd5d 	bl	8013ae4 <create_chain>
 801502a:	62b8      	str	r0, [r7, #40]	; 0x28
 801502c:	e013      	b.n	8015056 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015032:	2b00      	cmp	r3, #0
 8015034:	d007      	beq.n	8015046 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	699b      	ldr	r3, [r3, #24]
 801503a:	4619      	mov	r1, r3
 801503c:	68f8      	ldr	r0, [r7, #12]
 801503e:	f7fe fde9 	bl	8013c14 <clmt_clust>
 8015042:	62b8      	str	r0, [r7, #40]	; 0x28
 8015044:	e007      	b.n	8015056 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8015046:	68fa      	ldr	r2, [r7, #12]
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	69db      	ldr	r3, [r3, #28]
 801504c:	4619      	mov	r1, r3
 801504e:	4610      	mov	r0, r2
 8015050:	f7fe fd48 	bl	8013ae4 <create_chain>
 8015054:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015058:	2b00      	cmp	r3, #0
 801505a:	f000 8110 	beq.w	801527e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801505e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015060:	2b01      	cmp	r3, #1
 8015062:	d109      	bne.n	8015078 <f_write+0x11e>
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	2202      	movs	r2, #2
 8015068:	755a      	strb	r2, [r3, #21]
 801506a:	693b      	ldr	r3, [r7, #16]
 801506c:	2102      	movs	r1, #2
 801506e:	4618      	mov	r0, r3
 8015070:	f7fe f8b8 	bl	80131e4 <unlock_fs>
 8015074:	2302      	movs	r3, #2
 8015076:	e110      	b.n	801529a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801507a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801507e:	d109      	bne.n	8015094 <f_write+0x13a>
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	2201      	movs	r2, #1
 8015084:	755a      	strb	r2, [r3, #21]
 8015086:	693b      	ldr	r3, [r7, #16]
 8015088:	2101      	movs	r1, #1
 801508a:	4618      	mov	r0, r3
 801508c:	f7fe f8aa 	bl	80131e4 <unlock_fs>
 8015090:	2301      	movs	r3, #1
 8015092:	e102      	b.n	801529a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015098:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	689b      	ldr	r3, [r3, #8]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d102      	bne.n	80150a8 <f_write+0x14e>
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80150a6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	7d1b      	ldrb	r3, [r3, #20]
 80150ac:	b25b      	sxtb	r3, r3
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	da1d      	bge.n	80150ee <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80150b2:	693b      	ldr	r3, [r7, #16]
 80150b4:	7858      	ldrb	r0, [r3, #1]
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	6a1a      	ldr	r2, [r3, #32]
 80150c0:	2301      	movs	r3, #1
 80150c2:	f7fd ff3b 	bl	8012f3c <disk_write>
 80150c6:	4603      	mov	r3, r0
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d009      	beq.n	80150e0 <f_write+0x186>
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	2201      	movs	r2, #1
 80150d0:	755a      	strb	r2, [r3, #21]
 80150d2:	693b      	ldr	r3, [r7, #16]
 80150d4:	2101      	movs	r1, #1
 80150d6:	4618      	mov	r0, r3
 80150d8:	f7fe f884 	bl	80131e4 <unlock_fs>
 80150dc:	2301      	movs	r3, #1
 80150de:	e0dc      	b.n	801529a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	7d1b      	ldrb	r3, [r3, #20]
 80150e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80150e8:	b2da      	uxtb	r2, r3
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80150ee:	693a      	ldr	r2, [r7, #16]
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	69db      	ldr	r3, [r3, #28]
 80150f4:	4619      	mov	r1, r3
 80150f6:	4610      	mov	r0, r2
 80150f8:	f7fe fadc 	bl	80136b4 <clust2sect>
 80150fc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80150fe:	697b      	ldr	r3, [r7, #20]
 8015100:	2b00      	cmp	r3, #0
 8015102:	d109      	bne.n	8015118 <f_write+0x1be>
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	2202      	movs	r2, #2
 8015108:	755a      	strb	r2, [r3, #21]
 801510a:	693b      	ldr	r3, [r7, #16]
 801510c:	2102      	movs	r1, #2
 801510e:	4618      	mov	r0, r3
 8015110:	f7fe f868 	bl	80131e4 <unlock_fs>
 8015114:	2302      	movs	r3, #2
 8015116:	e0c0      	b.n	801529a <f_write+0x340>
			sect += csect;
 8015118:	697a      	ldr	r2, [r7, #20]
 801511a:	69bb      	ldr	r3, [r7, #24]
 801511c:	4413      	add	r3, r2
 801511e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	0a5b      	lsrs	r3, r3, #9
 8015124:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8015126:	6a3b      	ldr	r3, [r7, #32]
 8015128:	2b00      	cmp	r3, #0
 801512a:	d041      	beq.n	80151b0 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801512c:	69ba      	ldr	r2, [r7, #24]
 801512e:	6a3b      	ldr	r3, [r7, #32]
 8015130:	4413      	add	r3, r2
 8015132:	693a      	ldr	r2, [r7, #16]
 8015134:	8952      	ldrh	r2, [r2, #10]
 8015136:	4293      	cmp	r3, r2
 8015138:	d905      	bls.n	8015146 <f_write+0x1ec>
					cc = fs->csize - csect;
 801513a:	693b      	ldr	r3, [r7, #16]
 801513c:	895b      	ldrh	r3, [r3, #10]
 801513e:	461a      	mov	r2, r3
 8015140:	69bb      	ldr	r3, [r7, #24]
 8015142:	1ad3      	subs	r3, r2, r3
 8015144:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015146:	693b      	ldr	r3, [r7, #16]
 8015148:	7858      	ldrb	r0, [r3, #1]
 801514a:	6a3b      	ldr	r3, [r7, #32]
 801514c:	697a      	ldr	r2, [r7, #20]
 801514e:	69f9      	ldr	r1, [r7, #28]
 8015150:	f7fd fef4 	bl	8012f3c <disk_write>
 8015154:	4603      	mov	r3, r0
 8015156:	2b00      	cmp	r3, #0
 8015158:	d009      	beq.n	801516e <f_write+0x214>
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	2201      	movs	r2, #1
 801515e:	755a      	strb	r2, [r3, #21]
 8015160:	693b      	ldr	r3, [r7, #16]
 8015162:	2101      	movs	r1, #1
 8015164:	4618      	mov	r0, r3
 8015166:	f7fe f83d 	bl	80131e4 <unlock_fs>
 801516a:	2301      	movs	r3, #1
 801516c:	e095      	b.n	801529a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	6a1a      	ldr	r2, [r3, #32]
 8015172:	697b      	ldr	r3, [r7, #20]
 8015174:	1ad3      	subs	r3, r2, r3
 8015176:	6a3a      	ldr	r2, [r7, #32]
 8015178:	429a      	cmp	r2, r3
 801517a:	d915      	bls.n	80151a8 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	6a1a      	ldr	r2, [r3, #32]
 8015186:	697b      	ldr	r3, [r7, #20]
 8015188:	1ad3      	subs	r3, r2, r3
 801518a:	025b      	lsls	r3, r3, #9
 801518c:	69fa      	ldr	r2, [r7, #28]
 801518e:	4413      	add	r3, r2
 8015190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015194:	4619      	mov	r1, r3
 8015196:	f7fd ff91 	bl	80130bc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	7d1b      	ldrb	r3, [r3, #20]
 801519e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80151a2:	b2da      	uxtb	r2, r3
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80151a8:	6a3b      	ldr	r3, [r7, #32]
 80151aa:	025b      	lsls	r3, r3, #9
 80151ac:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80151ae:	e044      	b.n	801523a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	6a1b      	ldr	r3, [r3, #32]
 80151b4:	697a      	ldr	r2, [r7, #20]
 80151b6:	429a      	cmp	r2, r3
 80151b8:	d01b      	beq.n	80151f2 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	699a      	ldr	r2, [r3, #24]
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80151c2:	429a      	cmp	r2, r3
 80151c4:	d215      	bcs.n	80151f2 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80151c6:	693b      	ldr	r3, [r7, #16]
 80151c8:	7858      	ldrb	r0, [r3, #1]
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80151d0:	2301      	movs	r3, #1
 80151d2:	697a      	ldr	r2, [r7, #20]
 80151d4:	f7fd fe92 	bl	8012efc <disk_read>
 80151d8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d009      	beq.n	80151f2 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	2201      	movs	r2, #1
 80151e2:	755a      	strb	r2, [r3, #21]
 80151e4:	693b      	ldr	r3, [r7, #16]
 80151e6:	2101      	movs	r1, #1
 80151e8:	4618      	mov	r0, r3
 80151ea:	f7fd fffb 	bl	80131e4 <unlock_fs>
 80151ee:	2301      	movs	r3, #1
 80151f0:	e053      	b.n	801529a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	697a      	ldr	r2, [r7, #20]
 80151f6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	699b      	ldr	r3, [r3, #24]
 80151fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015200:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8015204:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8015206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	429a      	cmp	r2, r3
 801520c:	d901      	bls.n	8015212 <f_write+0x2b8>
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	699b      	ldr	r3, [r3, #24]
 801521c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015220:	4413      	add	r3, r2
 8015222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015224:	69f9      	ldr	r1, [r7, #28]
 8015226:	4618      	mov	r0, r3
 8015228:	f7fd ff48 	bl	80130bc <mem_cpy>
		fp->flag |= FA_DIRTY;
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	7d1b      	ldrb	r3, [r3, #20]
 8015230:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015234:	b2da      	uxtb	r2, r3
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801523a:	69fa      	ldr	r2, [r7, #28]
 801523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801523e:	4413      	add	r3, r2
 8015240:	61fb      	str	r3, [r7, #28]
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	699a      	ldr	r2, [r3, #24]
 8015246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015248:	441a      	add	r2, r3
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	619a      	str	r2, [r3, #24]
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	68da      	ldr	r2, [r3, #12]
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	699b      	ldr	r3, [r3, #24]
 8015256:	429a      	cmp	r2, r3
 8015258:	bf38      	it	cc
 801525a:	461a      	movcc	r2, r3
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	60da      	str	r2, [r3, #12]
 8015260:	683b      	ldr	r3, [r7, #0]
 8015262:	681a      	ldr	r2, [r3, #0]
 8015264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015266:	441a      	add	r2, r3
 8015268:	683b      	ldr	r3, [r7, #0]
 801526a:	601a      	str	r2, [r3, #0]
 801526c:	687a      	ldr	r2, [r7, #4]
 801526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015270:	1ad3      	subs	r3, r2, r3
 8015272:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	2b00      	cmp	r3, #0
 8015278:	f47f aeb6 	bne.w	8014fe8 <f_write+0x8e>
 801527c:	e000      	b.n	8015280 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801527e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	7d1b      	ldrb	r3, [r3, #20]
 8015284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015288:	b2da      	uxtb	r2, r3
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801528e:	693b      	ldr	r3, [r7, #16]
 8015290:	2100      	movs	r1, #0
 8015292:	4618      	mov	r0, r3
 8015294:	f7fd ffa6 	bl	80131e4 <unlock_fs>
 8015298:	2300      	movs	r3, #0
}
 801529a:	4618      	mov	r0, r3
 801529c:	3730      	adds	r7, #48	; 0x30
 801529e:	46bd      	mov	sp, r7
 80152a0:	bd80      	pop	{r7, pc}

080152a2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80152a2:	b580      	push	{r7, lr}
 80152a4:	b086      	sub	sp, #24
 80152a6:	af00      	add	r7, sp, #0
 80152a8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	f107 0208 	add.w	r2, r7, #8
 80152b0:	4611      	mov	r1, r2
 80152b2:	4618      	mov	r0, r3
 80152b4:	f7ff fbe0 	bl	8014a78 <validate>
 80152b8:	4603      	mov	r3, r0
 80152ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80152bc:	7dfb      	ldrb	r3, [r7, #23]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d16d      	bne.n	801539e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	7d1b      	ldrb	r3, [r3, #20]
 80152c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d067      	beq.n	801539e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	7d1b      	ldrb	r3, [r3, #20]
 80152d2:	b25b      	sxtb	r3, r3
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	da1a      	bge.n	801530e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80152d8:	68bb      	ldr	r3, [r7, #8]
 80152da:	7858      	ldrb	r0, [r3, #1]
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	6a1a      	ldr	r2, [r3, #32]
 80152e6:	2301      	movs	r3, #1
 80152e8:	f7fd fe28 	bl	8012f3c <disk_write>
 80152ec:	4603      	mov	r3, r0
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d006      	beq.n	8015300 <f_sync+0x5e>
 80152f2:	68bb      	ldr	r3, [r7, #8]
 80152f4:	2101      	movs	r1, #1
 80152f6:	4618      	mov	r0, r3
 80152f8:	f7fd ff74 	bl	80131e4 <unlock_fs>
 80152fc:	2301      	movs	r3, #1
 80152fe:	e055      	b.n	80153ac <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	7d1b      	ldrb	r3, [r3, #20]
 8015304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015308:	b2da      	uxtb	r2, r3
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801530e:	f7fc f8f7 	bl	8011500 <get_fattime>
 8015312:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8015314:	68ba      	ldr	r2, [r7, #8]
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801531a:	4619      	mov	r1, r3
 801531c:	4610      	mov	r0, r2
 801531e:	f7fe f92d 	bl	801357c <move_window>
 8015322:	4603      	mov	r3, r0
 8015324:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8015326:	7dfb      	ldrb	r3, [r7, #23]
 8015328:	2b00      	cmp	r3, #0
 801532a:	d138      	bne.n	801539e <f_sync+0xfc>
					dir = fp->dir_ptr;
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015330:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	330b      	adds	r3, #11
 8015336:	781a      	ldrb	r2, [r3, #0]
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	330b      	adds	r3, #11
 801533c:	f042 0220 	orr.w	r2, r2, #32
 8015340:	b2d2      	uxtb	r2, r2
 8015342:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	6818      	ldr	r0, [r3, #0]
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	689b      	ldr	r3, [r3, #8]
 801534c:	461a      	mov	r2, r3
 801534e:	68f9      	ldr	r1, [r7, #12]
 8015350:	f7fe fe3a 	bl	8013fc8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	f103 021c 	add.w	r2, r3, #28
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	68db      	ldr	r3, [r3, #12]
 801535e:	4619      	mov	r1, r3
 8015360:	4610      	mov	r0, r2
 8015362:	f7fd fe7f 	bl	8013064 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	3316      	adds	r3, #22
 801536a:	6939      	ldr	r1, [r7, #16]
 801536c:	4618      	mov	r0, r3
 801536e:	f7fd fe79 	bl	8013064 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	3312      	adds	r3, #18
 8015376:	2100      	movs	r1, #0
 8015378:	4618      	mov	r0, r3
 801537a:	f7fd fe58 	bl	801302e <st_word>
					fs->wflag = 1;
 801537e:	68bb      	ldr	r3, [r7, #8]
 8015380:	2201      	movs	r2, #1
 8015382:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8015384:	68bb      	ldr	r3, [r7, #8]
 8015386:	4618      	mov	r0, r3
 8015388:	f7fe f926 	bl	80135d8 <sync_fs>
 801538c:	4603      	mov	r3, r0
 801538e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	7d1b      	ldrb	r3, [r3, #20]
 8015394:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015398:	b2da      	uxtb	r2, r3
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801539e:	68bb      	ldr	r3, [r7, #8]
 80153a0:	7dfa      	ldrb	r2, [r7, #23]
 80153a2:	4611      	mov	r1, r2
 80153a4:	4618      	mov	r0, r3
 80153a6:	f7fd ff1d 	bl	80131e4 <unlock_fs>
 80153aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80153ac:	4618      	mov	r0, r3
 80153ae:	3718      	adds	r7, #24
 80153b0:	46bd      	mov	sp, r7
 80153b2:	bd80      	pop	{r7, pc}

080153b4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80153b4:	b580      	push	{r7, lr}
 80153b6:	b084      	sub	sp, #16
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80153bc:	6878      	ldr	r0, [r7, #4]
 80153be:	f7ff ff70 	bl	80152a2 <f_sync>
 80153c2:	4603      	mov	r3, r0
 80153c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80153c6:	7bfb      	ldrb	r3, [r7, #15]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d11d      	bne.n	8015408 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	f107 0208 	add.w	r2, r7, #8
 80153d2:	4611      	mov	r1, r2
 80153d4:	4618      	mov	r0, r3
 80153d6:	f7ff fb4f 	bl	8014a78 <validate>
 80153da:	4603      	mov	r3, r0
 80153dc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80153de:	7bfb      	ldrb	r3, [r7, #15]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d111      	bne.n	8015408 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	691b      	ldr	r3, [r3, #16]
 80153e8:	4618      	mov	r0, r3
 80153ea:	f7fe f823 	bl	8013434 <dec_lock>
 80153ee:	4603      	mov	r3, r0
 80153f0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80153f2:	7bfb      	ldrb	r3, [r7, #15]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d102      	bne.n	80153fe <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	2200      	movs	r2, #0
 80153fc:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80153fe:	68bb      	ldr	r3, [r7, #8]
 8015400:	2100      	movs	r1, #0
 8015402:	4618      	mov	r0, r3
 8015404:	f7fd feee 	bl	80131e4 <unlock_fs>
#endif
		}
	}
	return res;
 8015408:	7bfb      	ldrb	r3, [r7, #15]
}
 801540a:	4618      	mov	r0, r3
 801540c:	3710      	adds	r7, #16
 801540e:	46bd      	mov	sp, r7
 8015410:	bd80      	pop	{r7, pc}

08015412 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8015412:	b580      	push	{r7, lr}
 8015414:	b090      	sub	sp, #64	; 0x40
 8015416:	af00      	add	r7, sp, #0
 8015418:	6078      	str	r0, [r7, #4]
 801541a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	f107 0208 	add.w	r2, r7, #8
 8015422:	4611      	mov	r1, r2
 8015424:	4618      	mov	r0, r3
 8015426:	f7ff fb27 	bl	8014a78 <validate>
 801542a:	4603      	mov	r3, r0
 801542c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8015430:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015434:	2b00      	cmp	r3, #0
 8015436:	d103      	bne.n	8015440 <f_lseek+0x2e>
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	7d5b      	ldrb	r3, [r3, #21]
 801543c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8015440:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015444:	2b00      	cmp	r3, #0
 8015446:	d009      	beq.n	801545c <f_lseek+0x4a>
 8015448:	68bb      	ldr	r3, [r7, #8]
 801544a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801544e:	4611      	mov	r1, r2
 8015450:	4618      	mov	r0, r3
 8015452:	f7fd fec7 	bl	80131e4 <unlock_fs>
 8015456:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801545a:	e229      	b.n	80158b0 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015460:	2b00      	cmp	r3, #0
 8015462:	f000 80ea 	beq.w	801563a <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8015466:	683b      	ldr	r3, [r7, #0]
 8015468:	f1b3 3fff 	cmp.w	r3, #4294967295
 801546c:	d164      	bne.n	8015538 <f_lseek+0x126>
			tbl = fp->cltbl;
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015472:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8015474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015476:	1d1a      	adds	r2, r3, #4
 8015478:	627a      	str	r2, [r7, #36]	; 0x24
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	617b      	str	r3, [r7, #20]
 801547e:	2302      	movs	r3, #2
 8015480:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	689b      	ldr	r3, [r3, #8]
 8015486:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8015488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801548a:	2b00      	cmp	r3, #0
 801548c:	d044      	beq.n	8015518 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801548e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015490:	613b      	str	r3, [r7, #16]
 8015492:	2300      	movs	r3, #0
 8015494:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015498:	3302      	adds	r3, #2
 801549a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801549c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801549e:	60fb      	str	r3, [r7, #12]
 80154a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154a2:	3301      	adds	r3, #1
 80154a4:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80154aa:	4618      	mov	r0, r3
 80154ac:	f7fe f921 	bl	80136f2 <get_fat>
 80154b0:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80154b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154b4:	2b01      	cmp	r3, #1
 80154b6:	d809      	bhi.n	80154cc <f_lseek+0xba>
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	2202      	movs	r2, #2
 80154bc:	755a      	strb	r2, [r3, #21]
 80154be:	68bb      	ldr	r3, [r7, #8]
 80154c0:	2102      	movs	r1, #2
 80154c2:	4618      	mov	r0, r3
 80154c4:	f7fd fe8e 	bl	80131e4 <unlock_fs>
 80154c8:	2302      	movs	r3, #2
 80154ca:	e1f1      	b.n	80158b0 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80154cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154d2:	d109      	bne.n	80154e8 <f_lseek+0xd6>
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	2201      	movs	r2, #1
 80154d8:	755a      	strb	r2, [r3, #21]
 80154da:	68bb      	ldr	r3, [r7, #8]
 80154dc:	2101      	movs	r1, #1
 80154de:	4618      	mov	r0, r3
 80154e0:	f7fd fe80 	bl	80131e4 <unlock_fs>
 80154e4:	2301      	movs	r3, #1
 80154e6:	e1e3      	b.n	80158b0 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	3301      	adds	r3, #1
 80154ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80154ee:	429a      	cmp	r2, r3
 80154f0:	d0d4      	beq.n	801549c <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80154f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80154f4:	697b      	ldr	r3, [r7, #20]
 80154f6:	429a      	cmp	r2, r3
 80154f8:	d809      	bhi.n	801550e <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 80154fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154fc:	1d1a      	adds	r2, r3, #4
 80154fe:	627a      	str	r2, [r7, #36]	; 0x24
 8015500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015502:	601a      	str	r2, [r3, #0]
 8015504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015506:	1d1a      	adds	r2, r3, #4
 8015508:	627a      	str	r2, [r7, #36]	; 0x24
 801550a:	693a      	ldr	r2, [r7, #16]
 801550c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801550e:	68bb      	ldr	r3, [r7, #8]
 8015510:	699b      	ldr	r3, [r3, #24]
 8015512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015514:	429a      	cmp	r2, r3
 8015516:	d3ba      	bcc.n	801548e <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801551c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801551e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8015520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015522:	697b      	ldr	r3, [r7, #20]
 8015524:	429a      	cmp	r2, r3
 8015526:	d803      	bhi.n	8015530 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8015528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801552a:	2200      	movs	r2, #0
 801552c:	601a      	str	r2, [r3, #0]
 801552e:	e1b6      	b.n	801589e <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8015530:	2311      	movs	r3, #17
 8015532:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8015536:	e1b2      	b.n	801589e <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	68db      	ldr	r3, [r3, #12]
 801553c:	683a      	ldr	r2, [r7, #0]
 801553e:	429a      	cmp	r2, r3
 8015540:	d902      	bls.n	8015548 <f_lseek+0x136>
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	68db      	ldr	r3, [r3, #12]
 8015546:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	683a      	ldr	r2, [r7, #0]
 801554c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801554e:	683b      	ldr	r3, [r7, #0]
 8015550:	2b00      	cmp	r3, #0
 8015552:	f000 81a4 	beq.w	801589e <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8015556:	683b      	ldr	r3, [r7, #0]
 8015558:	3b01      	subs	r3, #1
 801555a:	4619      	mov	r1, r3
 801555c:	6878      	ldr	r0, [r7, #4]
 801555e:	f7fe fb59 	bl	8013c14 <clmt_clust>
 8015562:	4602      	mov	r2, r0
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8015568:	68ba      	ldr	r2, [r7, #8]
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	69db      	ldr	r3, [r3, #28]
 801556e:	4619      	mov	r1, r3
 8015570:	4610      	mov	r0, r2
 8015572:	f7fe f89f 	bl	80136b4 <clust2sect>
 8015576:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8015578:	69bb      	ldr	r3, [r7, #24]
 801557a:	2b00      	cmp	r3, #0
 801557c:	d109      	bne.n	8015592 <f_lseek+0x180>
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	2202      	movs	r2, #2
 8015582:	755a      	strb	r2, [r3, #21]
 8015584:	68bb      	ldr	r3, [r7, #8]
 8015586:	2102      	movs	r1, #2
 8015588:	4618      	mov	r0, r3
 801558a:	f7fd fe2b 	bl	80131e4 <unlock_fs>
 801558e:	2302      	movs	r3, #2
 8015590:	e18e      	b.n	80158b0 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8015592:	683b      	ldr	r3, [r7, #0]
 8015594:	3b01      	subs	r3, #1
 8015596:	0a5b      	lsrs	r3, r3, #9
 8015598:	68ba      	ldr	r2, [r7, #8]
 801559a:	8952      	ldrh	r2, [r2, #10]
 801559c:	3a01      	subs	r2, #1
 801559e:	4013      	ands	r3, r2
 80155a0:	69ba      	ldr	r2, [r7, #24]
 80155a2:	4413      	add	r3, r2
 80155a4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	699b      	ldr	r3, [r3, #24]
 80155aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	f000 8175 	beq.w	801589e <f_lseek+0x48c>
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	6a1b      	ldr	r3, [r3, #32]
 80155b8:	69ba      	ldr	r2, [r7, #24]
 80155ba:	429a      	cmp	r2, r3
 80155bc:	f000 816f 	beq.w	801589e <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	7d1b      	ldrb	r3, [r3, #20]
 80155c4:	b25b      	sxtb	r3, r3
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	da1d      	bge.n	8015606 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80155ca:	68bb      	ldr	r3, [r7, #8]
 80155cc:	7858      	ldrb	r0, [r3, #1]
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	6a1a      	ldr	r2, [r3, #32]
 80155d8:	2301      	movs	r3, #1
 80155da:	f7fd fcaf 	bl	8012f3c <disk_write>
 80155de:	4603      	mov	r3, r0
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d009      	beq.n	80155f8 <f_lseek+0x1e6>
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	2201      	movs	r2, #1
 80155e8:	755a      	strb	r2, [r3, #21]
 80155ea:	68bb      	ldr	r3, [r7, #8]
 80155ec:	2101      	movs	r1, #1
 80155ee:	4618      	mov	r0, r3
 80155f0:	f7fd fdf8 	bl	80131e4 <unlock_fs>
 80155f4:	2301      	movs	r3, #1
 80155f6:	e15b      	b.n	80158b0 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	7d1b      	ldrb	r3, [r3, #20]
 80155fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015600:	b2da      	uxtb	r2, r3
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8015606:	68bb      	ldr	r3, [r7, #8]
 8015608:	7858      	ldrb	r0, [r3, #1]
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015610:	2301      	movs	r3, #1
 8015612:	69ba      	ldr	r2, [r7, #24]
 8015614:	f7fd fc72 	bl	8012efc <disk_read>
 8015618:	4603      	mov	r3, r0
 801561a:	2b00      	cmp	r3, #0
 801561c:	d009      	beq.n	8015632 <f_lseek+0x220>
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	2201      	movs	r2, #1
 8015622:	755a      	strb	r2, [r3, #21]
 8015624:	68bb      	ldr	r3, [r7, #8]
 8015626:	2101      	movs	r1, #1
 8015628:	4618      	mov	r0, r3
 801562a:	f7fd fddb 	bl	80131e4 <unlock_fs>
 801562e:	2301      	movs	r3, #1
 8015630:	e13e      	b.n	80158b0 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	69ba      	ldr	r2, [r7, #24]
 8015636:	621a      	str	r2, [r3, #32]
 8015638:	e131      	b.n	801589e <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	68db      	ldr	r3, [r3, #12]
 801563e:	683a      	ldr	r2, [r7, #0]
 8015640:	429a      	cmp	r2, r3
 8015642:	d908      	bls.n	8015656 <f_lseek+0x244>
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	7d1b      	ldrb	r3, [r3, #20]
 8015648:	f003 0302 	and.w	r3, r3, #2
 801564c:	2b00      	cmp	r3, #0
 801564e:	d102      	bne.n	8015656 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	68db      	ldr	r3, [r3, #12]
 8015654:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	699b      	ldr	r3, [r3, #24]
 801565a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801565c:	2300      	movs	r3, #0
 801565e:	637b      	str	r3, [r7, #52]	; 0x34
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015664:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8015666:	683b      	ldr	r3, [r7, #0]
 8015668:	2b00      	cmp	r3, #0
 801566a:	f000 80c0 	beq.w	80157ee <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801566e:	68bb      	ldr	r3, [r7, #8]
 8015670:	895b      	ldrh	r3, [r3, #10]
 8015672:	025b      	lsls	r3, r3, #9
 8015674:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8015676:	6a3b      	ldr	r3, [r7, #32]
 8015678:	2b00      	cmp	r3, #0
 801567a:	d01b      	beq.n	80156b4 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801567c:	683b      	ldr	r3, [r7, #0]
 801567e:	1e5a      	subs	r2, r3, #1
 8015680:	69fb      	ldr	r3, [r7, #28]
 8015682:	fbb2 f2f3 	udiv	r2, r2, r3
 8015686:	6a3b      	ldr	r3, [r7, #32]
 8015688:	1e59      	subs	r1, r3, #1
 801568a:	69fb      	ldr	r3, [r7, #28]
 801568c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8015690:	429a      	cmp	r2, r3
 8015692:	d30f      	bcc.n	80156b4 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8015694:	6a3b      	ldr	r3, [r7, #32]
 8015696:	1e5a      	subs	r2, r3, #1
 8015698:	69fb      	ldr	r3, [r7, #28]
 801569a:	425b      	negs	r3, r3
 801569c:	401a      	ands	r2, r3
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	699b      	ldr	r3, [r3, #24]
 80156a6:	683a      	ldr	r2, [r7, #0]
 80156a8:	1ad3      	subs	r3, r2, r3
 80156aa:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	69db      	ldr	r3, [r3, #28]
 80156b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80156b2:	e02c      	b.n	801570e <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	689b      	ldr	r3, [r3, #8]
 80156b8:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80156ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d123      	bne.n	8015708 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	2100      	movs	r1, #0
 80156c4:	4618      	mov	r0, r3
 80156c6:	f7fe fa0d 	bl	8013ae4 <create_chain>
 80156ca:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80156cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156ce:	2b01      	cmp	r3, #1
 80156d0:	d109      	bne.n	80156e6 <f_lseek+0x2d4>
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	2202      	movs	r2, #2
 80156d6:	755a      	strb	r2, [r3, #21]
 80156d8:	68bb      	ldr	r3, [r7, #8]
 80156da:	2102      	movs	r1, #2
 80156dc:	4618      	mov	r0, r3
 80156de:	f7fd fd81 	bl	80131e4 <unlock_fs>
 80156e2:	2302      	movs	r3, #2
 80156e4:	e0e4      	b.n	80158b0 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80156e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156ec:	d109      	bne.n	8015702 <f_lseek+0x2f0>
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	2201      	movs	r2, #1
 80156f2:	755a      	strb	r2, [r3, #21]
 80156f4:	68bb      	ldr	r3, [r7, #8]
 80156f6:	2101      	movs	r1, #1
 80156f8:	4618      	mov	r0, r3
 80156fa:	f7fd fd73 	bl	80131e4 <unlock_fs>
 80156fe:	2301      	movs	r3, #1
 8015700:	e0d6      	b.n	80158b0 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015706:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801570c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801570e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015710:	2b00      	cmp	r3, #0
 8015712:	d06c      	beq.n	80157ee <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8015714:	e044      	b.n	80157a0 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8015716:	683a      	ldr	r2, [r7, #0]
 8015718:	69fb      	ldr	r3, [r7, #28]
 801571a:	1ad3      	subs	r3, r2, r3
 801571c:	603b      	str	r3, [r7, #0]
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	699a      	ldr	r2, [r3, #24]
 8015722:	69fb      	ldr	r3, [r7, #28]
 8015724:	441a      	add	r2, r3
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	7d1b      	ldrb	r3, [r3, #20]
 801572e:	f003 0302 	and.w	r3, r3, #2
 8015732:	2b00      	cmp	r3, #0
 8015734:	d00b      	beq.n	801574e <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801573a:	4618      	mov	r0, r3
 801573c:	f7fe f9d2 	bl	8013ae4 <create_chain>
 8015740:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8015742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015744:	2b00      	cmp	r3, #0
 8015746:	d108      	bne.n	801575a <f_lseek+0x348>
							ofs = 0; break;
 8015748:	2300      	movs	r3, #0
 801574a:	603b      	str	r3, [r7, #0]
 801574c:	e02c      	b.n	80157a8 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015752:	4618      	mov	r0, r3
 8015754:	f7fd ffcd 	bl	80136f2 <get_fat>
 8015758:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801575a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801575c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015760:	d109      	bne.n	8015776 <f_lseek+0x364>
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	2201      	movs	r2, #1
 8015766:	755a      	strb	r2, [r3, #21]
 8015768:	68bb      	ldr	r3, [r7, #8]
 801576a:	2101      	movs	r1, #1
 801576c:	4618      	mov	r0, r3
 801576e:	f7fd fd39 	bl	80131e4 <unlock_fs>
 8015772:	2301      	movs	r3, #1
 8015774:	e09c      	b.n	80158b0 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8015776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015778:	2b01      	cmp	r3, #1
 801577a:	d904      	bls.n	8015786 <f_lseek+0x374>
 801577c:	68bb      	ldr	r3, [r7, #8]
 801577e:	699b      	ldr	r3, [r3, #24]
 8015780:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015782:	429a      	cmp	r2, r3
 8015784:	d309      	bcc.n	801579a <f_lseek+0x388>
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	2202      	movs	r2, #2
 801578a:	755a      	strb	r2, [r3, #21]
 801578c:	68bb      	ldr	r3, [r7, #8]
 801578e:	2102      	movs	r1, #2
 8015790:	4618      	mov	r0, r3
 8015792:	f7fd fd27 	bl	80131e4 <unlock_fs>
 8015796:	2302      	movs	r3, #2
 8015798:	e08a      	b.n	80158b0 <f_lseek+0x49e>
					fp->clust = clst;
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801579e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80157a0:	683a      	ldr	r2, [r7, #0]
 80157a2:	69fb      	ldr	r3, [r7, #28]
 80157a4:	429a      	cmp	r2, r3
 80157a6:	d8b6      	bhi.n	8015716 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	699a      	ldr	r2, [r3, #24]
 80157ac:	683b      	ldr	r3, [r7, #0]
 80157ae:	441a      	add	r2, r3
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80157b4:	683b      	ldr	r3, [r7, #0]
 80157b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d017      	beq.n	80157ee <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80157be:	68bb      	ldr	r3, [r7, #8]
 80157c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80157c2:	4618      	mov	r0, r3
 80157c4:	f7fd ff76 	bl	80136b4 <clust2sect>
 80157c8:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80157ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d109      	bne.n	80157e4 <f_lseek+0x3d2>
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	2202      	movs	r2, #2
 80157d4:	755a      	strb	r2, [r3, #21]
 80157d6:	68bb      	ldr	r3, [r7, #8]
 80157d8:	2102      	movs	r1, #2
 80157da:	4618      	mov	r0, r3
 80157dc:	f7fd fd02 	bl	80131e4 <unlock_fs>
 80157e0:	2302      	movs	r3, #2
 80157e2:	e065      	b.n	80158b0 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 80157e4:	683b      	ldr	r3, [r7, #0]
 80157e6:	0a5b      	lsrs	r3, r3, #9
 80157e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80157ea:	4413      	add	r3, r2
 80157ec:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	699a      	ldr	r2, [r3, #24]
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	68db      	ldr	r3, [r3, #12]
 80157f6:	429a      	cmp	r2, r3
 80157f8:	d90a      	bls.n	8015810 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	699a      	ldr	r2, [r3, #24]
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	7d1b      	ldrb	r3, [r3, #20]
 8015806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801580a:	b2da      	uxtb	r2, r3
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	699b      	ldr	r3, [r3, #24]
 8015814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015818:	2b00      	cmp	r3, #0
 801581a:	d040      	beq.n	801589e <f_lseek+0x48c>
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	6a1b      	ldr	r3, [r3, #32]
 8015820:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015822:	429a      	cmp	r2, r3
 8015824:	d03b      	beq.n	801589e <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	7d1b      	ldrb	r3, [r3, #20]
 801582a:	b25b      	sxtb	r3, r3
 801582c:	2b00      	cmp	r3, #0
 801582e:	da1d      	bge.n	801586c <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015830:	68bb      	ldr	r3, [r7, #8]
 8015832:	7858      	ldrb	r0, [r3, #1]
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	6a1a      	ldr	r2, [r3, #32]
 801583e:	2301      	movs	r3, #1
 8015840:	f7fd fb7c 	bl	8012f3c <disk_write>
 8015844:	4603      	mov	r3, r0
 8015846:	2b00      	cmp	r3, #0
 8015848:	d009      	beq.n	801585e <f_lseek+0x44c>
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	2201      	movs	r2, #1
 801584e:	755a      	strb	r2, [r3, #21]
 8015850:	68bb      	ldr	r3, [r7, #8]
 8015852:	2101      	movs	r1, #1
 8015854:	4618      	mov	r0, r3
 8015856:	f7fd fcc5 	bl	80131e4 <unlock_fs>
 801585a:	2301      	movs	r3, #1
 801585c:	e028      	b.n	80158b0 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	7d1b      	ldrb	r3, [r3, #20]
 8015862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015866:	b2da      	uxtb	r2, r3
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801586c:	68bb      	ldr	r3, [r7, #8]
 801586e:	7858      	ldrb	r0, [r3, #1]
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015876:	2301      	movs	r3, #1
 8015878:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801587a:	f7fd fb3f 	bl	8012efc <disk_read>
 801587e:	4603      	mov	r3, r0
 8015880:	2b00      	cmp	r3, #0
 8015882:	d009      	beq.n	8015898 <f_lseek+0x486>
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	2201      	movs	r2, #1
 8015888:	755a      	strb	r2, [r3, #21]
 801588a:	68bb      	ldr	r3, [r7, #8]
 801588c:	2101      	movs	r1, #1
 801588e:	4618      	mov	r0, r3
 8015890:	f7fd fca8 	bl	80131e4 <unlock_fs>
 8015894:	2301      	movs	r3, #1
 8015896:	e00b      	b.n	80158b0 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801589c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801589e:	68bb      	ldr	r3, [r7, #8]
 80158a0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80158a4:	4611      	mov	r1, r2
 80158a6:	4618      	mov	r0, r3
 80158a8:	f7fd fc9c 	bl	80131e4 <unlock_fs>
 80158ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80158b0:	4618      	mov	r0, r3
 80158b2:	3740      	adds	r7, #64	; 0x40
 80158b4:	46bd      	mov	sp, r7
 80158b6:	bd80      	pop	{r7, pc}

080158b8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80158b8:	b580      	push	{r7, lr}
 80158ba:	b086      	sub	sp, #24
 80158bc:	af00      	add	r7, sp, #0
 80158be:	6078      	str	r0, [r7, #4]
 80158c0:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d101      	bne.n	80158cc <f_opendir+0x14>
 80158c8:	2309      	movs	r3, #9
 80158ca:	e06a      	b.n	80159a2 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80158d0:	f107 010c 	add.w	r1, r7, #12
 80158d4:	463b      	mov	r3, r7
 80158d6:	2200      	movs	r2, #0
 80158d8:	4618      	mov	r0, r3
 80158da:	f7fe fe79 	bl	80145d0 <find_volume>
 80158de:	4603      	mov	r3, r0
 80158e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80158e2:	7dfb      	ldrb	r3, [r7, #23]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d14f      	bne.n	8015988 <f_opendir+0xd0>
		obj->fs = fs;
 80158e8:	68fa      	ldr	r2, [r7, #12]
 80158ea:	693b      	ldr	r3, [r7, #16]
 80158ec:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80158ee:	683b      	ldr	r3, [r7, #0]
 80158f0:	4619      	mov	r1, r3
 80158f2:	6878      	ldr	r0, [r7, #4]
 80158f4:	f7fe fd60 	bl	80143b8 <follow_path>
 80158f8:	4603      	mov	r3, r0
 80158fa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80158fc:	7dfb      	ldrb	r3, [r7, #23]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d13d      	bne.n	801597e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015908:	b25b      	sxtb	r3, r3
 801590a:	2b00      	cmp	r3, #0
 801590c:	db12      	blt.n	8015934 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801590e:	693b      	ldr	r3, [r7, #16]
 8015910:	799b      	ldrb	r3, [r3, #6]
 8015912:	f003 0310 	and.w	r3, r3, #16
 8015916:	2b00      	cmp	r3, #0
 8015918:	d00a      	beq.n	8015930 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801591a:	68fa      	ldr	r2, [r7, #12]
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	6a1b      	ldr	r3, [r3, #32]
 8015920:	4619      	mov	r1, r3
 8015922:	4610      	mov	r0, r2
 8015924:	f7fe fb31 	bl	8013f8a <ld_clust>
 8015928:	4602      	mov	r2, r0
 801592a:	693b      	ldr	r3, [r7, #16]
 801592c:	609a      	str	r2, [r3, #8]
 801592e:	e001      	b.n	8015934 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8015930:	2305      	movs	r3, #5
 8015932:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8015934:	7dfb      	ldrb	r3, [r7, #23]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d121      	bne.n	801597e <f_opendir+0xc6>
				obj->id = fs->id;
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	88da      	ldrh	r2, [r3, #6]
 801593e:	693b      	ldr	r3, [r7, #16]
 8015940:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8015942:	2100      	movs	r1, #0
 8015944:	6878      	ldr	r0, [r7, #4]
 8015946:	f7fe f999 	bl	8013c7c <dir_sdi>
 801594a:	4603      	mov	r3, r0
 801594c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801594e:	7dfb      	ldrb	r3, [r7, #23]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d114      	bne.n	801597e <f_opendir+0xc6>
					if (obj->sclust) {
 8015954:	693b      	ldr	r3, [r7, #16]
 8015956:	689b      	ldr	r3, [r3, #8]
 8015958:	2b00      	cmp	r3, #0
 801595a:	d00d      	beq.n	8015978 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801595c:	2100      	movs	r1, #0
 801595e:	6878      	ldr	r0, [r7, #4]
 8015960:	f7fd fcda 	bl	8013318 <inc_lock>
 8015964:	4602      	mov	r2, r0
 8015966:	693b      	ldr	r3, [r7, #16]
 8015968:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801596a:	693b      	ldr	r3, [r7, #16]
 801596c:	691b      	ldr	r3, [r3, #16]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d105      	bne.n	801597e <f_opendir+0xc6>
 8015972:	2312      	movs	r3, #18
 8015974:	75fb      	strb	r3, [r7, #23]
 8015976:	e002      	b.n	801597e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8015978:	693b      	ldr	r3, [r7, #16]
 801597a:	2200      	movs	r2, #0
 801597c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801597e:	7dfb      	ldrb	r3, [r7, #23]
 8015980:	2b04      	cmp	r3, #4
 8015982:	d101      	bne.n	8015988 <f_opendir+0xd0>
 8015984:	2305      	movs	r3, #5
 8015986:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8015988:	7dfb      	ldrb	r3, [r7, #23]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d002      	beq.n	8015994 <f_opendir+0xdc>
 801598e:	693b      	ldr	r3, [r7, #16]
 8015990:	2200      	movs	r2, #0
 8015992:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	7dfa      	ldrb	r2, [r7, #23]
 8015998:	4611      	mov	r1, r2
 801599a:	4618      	mov	r0, r3
 801599c:	f7fd fc22 	bl	80131e4 <unlock_fs>
 80159a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80159a2:	4618      	mov	r0, r3
 80159a4:	3718      	adds	r7, #24
 80159a6:	46bd      	mov	sp, r7
 80159a8:	bd80      	pop	{r7, pc}

080159aa <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80159aa:	b580      	push	{r7, lr}
 80159ac:	b084      	sub	sp, #16
 80159ae:	af00      	add	r7, sp, #0
 80159b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	f107 0208 	add.w	r2, r7, #8
 80159b8:	4611      	mov	r1, r2
 80159ba:	4618      	mov	r0, r3
 80159bc:	f7ff f85c 	bl	8014a78 <validate>
 80159c0:	4603      	mov	r3, r0
 80159c2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80159c4:	7bfb      	ldrb	r3, [r7, #15]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d115      	bne.n	80159f6 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	691b      	ldr	r3, [r3, #16]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d006      	beq.n	80159e0 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	691b      	ldr	r3, [r3, #16]
 80159d6:	4618      	mov	r0, r3
 80159d8:	f7fd fd2c 	bl	8013434 <dec_lock>
 80159dc:	4603      	mov	r3, r0
 80159de:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80159e0:	7bfb      	ldrb	r3, [r7, #15]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d102      	bne.n	80159ec <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	2200      	movs	r2, #0
 80159ea:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 80159ec:	68bb      	ldr	r3, [r7, #8]
 80159ee:	2100      	movs	r1, #0
 80159f0:	4618      	mov	r0, r3
 80159f2:	f7fd fbf7 	bl	80131e4 <unlock_fs>
#endif
	}
	return res;
 80159f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80159f8:	4618      	mov	r0, r3
 80159fa:	3710      	adds	r7, #16
 80159fc:	46bd      	mov	sp, r7
 80159fe:	bd80      	pop	{r7, pc}

08015a00 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8015a00:	b580      	push	{r7, lr}
 8015a02:	b084      	sub	sp, #16
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	6078      	str	r0, [r7, #4]
 8015a08:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	f107 0208 	add.w	r2, r7, #8
 8015a10:	4611      	mov	r1, r2
 8015a12:	4618      	mov	r0, r3
 8015a14:	f7ff f830 	bl	8014a78 <validate>
 8015a18:	4603      	mov	r3, r0
 8015a1a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015a1c:	7bfb      	ldrb	r3, [r7, #15]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d126      	bne.n	8015a70 <f_readdir+0x70>
		if (!fno) {
 8015a22:	683b      	ldr	r3, [r7, #0]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d106      	bne.n	8015a36 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8015a28:	2100      	movs	r1, #0
 8015a2a:	6878      	ldr	r0, [r7, #4]
 8015a2c:	f7fe f926 	bl	8013c7c <dir_sdi>
 8015a30:	4603      	mov	r3, r0
 8015a32:	73fb      	strb	r3, [r7, #15]
 8015a34:	e01c      	b.n	8015a70 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8015a36:	2100      	movs	r1, #0
 8015a38:	6878      	ldr	r0, [r7, #4]
 8015a3a:	f7fe fae5 	bl	8014008 <dir_read>
 8015a3e:	4603      	mov	r3, r0
 8015a40:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8015a42:	7bfb      	ldrb	r3, [r7, #15]
 8015a44:	2b04      	cmp	r3, #4
 8015a46:	d101      	bne.n	8015a4c <f_readdir+0x4c>
 8015a48:	2300      	movs	r3, #0
 8015a4a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8015a4c:	7bfb      	ldrb	r3, [r7, #15]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d10e      	bne.n	8015a70 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8015a52:	6839      	ldr	r1, [r7, #0]
 8015a54:	6878      	ldr	r0, [r7, #4]
 8015a56:	f7fe fbbb 	bl	80141d0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8015a5a:	2100      	movs	r1, #0
 8015a5c:	6878      	ldr	r0, [r7, #4]
 8015a5e:	f7fe f988 	bl	8013d72 <dir_next>
 8015a62:	4603      	mov	r3, r0
 8015a64:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8015a66:	7bfb      	ldrb	r3, [r7, #15]
 8015a68:	2b04      	cmp	r3, #4
 8015a6a:	d101      	bne.n	8015a70 <f_readdir+0x70>
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8015a70:	68bb      	ldr	r3, [r7, #8]
 8015a72:	7bfa      	ldrb	r2, [r7, #15]
 8015a74:	4611      	mov	r1, r2
 8015a76:	4618      	mov	r0, r3
 8015a78:	f7fd fbb4 	bl	80131e4 <unlock_fs>
 8015a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a7e:	4618      	mov	r0, r3
 8015a80:	3710      	adds	r7, #16
 8015a82:	46bd      	mov	sp, r7
 8015a84:	bd80      	pop	{r7, pc}
	...

08015a88 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015a88:	b480      	push	{r7}
 8015a8a:	b087      	sub	sp, #28
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	60f8      	str	r0, [r7, #12]
 8015a90:	60b9      	str	r1, [r7, #8]
 8015a92:	4613      	mov	r3, r2
 8015a94:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015a96:	2301      	movs	r3, #1
 8015a98:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015a9e:	4b1f      	ldr	r3, [pc, #124]	; (8015b1c <FATFS_LinkDriverEx+0x94>)
 8015aa0:	7a5b      	ldrb	r3, [r3, #9]
 8015aa2:	b2db      	uxtb	r3, r3
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d131      	bne.n	8015b0c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015aa8:	4b1c      	ldr	r3, [pc, #112]	; (8015b1c <FATFS_LinkDriverEx+0x94>)
 8015aaa:	7a5b      	ldrb	r3, [r3, #9]
 8015aac:	b2db      	uxtb	r3, r3
 8015aae:	461a      	mov	r2, r3
 8015ab0:	4b1a      	ldr	r3, [pc, #104]	; (8015b1c <FATFS_LinkDriverEx+0x94>)
 8015ab2:	2100      	movs	r1, #0
 8015ab4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015ab6:	4b19      	ldr	r3, [pc, #100]	; (8015b1c <FATFS_LinkDriverEx+0x94>)
 8015ab8:	7a5b      	ldrb	r3, [r3, #9]
 8015aba:	b2db      	uxtb	r3, r3
 8015abc:	4a17      	ldr	r2, [pc, #92]	; (8015b1c <FATFS_LinkDriverEx+0x94>)
 8015abe:	009b      	lsls	r3, r3, #2
 8015ac0:	4413      	add	r3, r2
 8015ac2:	68fa      	ldr	r2, [r7, #12]
 8015ac4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015ac6:	4b15      	ldr	r3, [pc, #84]	; (8015b1c <FATFS_LinkDriverEx+0x94>)
 8015ac8:	7a5b      	ldrb	r3, [r3, #9]
 8015aca:	b2db      	uxtb	r3, r3
 8015acc:	461a      	mov	r2, r3
 8015ace:	4b13      	ldr	r3, [pc, #76]	; (8015b1c <FATFS_LinkDriverEx+0x94>)
 8015ad0:	4413      	add	r3, r2
 8015ad2:	79fa      	ldrb	r2, [r7, #7]
 8015ad4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015ad6:	4b11      	ldr	r3, [pc, #68]	; (8015b1c <FATFS_LinkDriverEx+0x94>)
 8015ad8:	7a5b      	ldrb	r3, [r3, #9]
 8015ada:	b2db      	uxtb	r3, r3
 8015adc:	1c5a      	adds	r2, r3, #1
 8015ade:	b2d1      	uxtb	r1, r2
 8015ae0:	4a0e      	ldr	r2, [pc, #56]	; (8015b1c <FATFS_LinkDriverEx+0x94>)
 8015ae2:	7251      	strb	r1, [r2, #9]
 8015ae4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015ae6:	7dbb      	ldrb	r3, [r7, #22]
 8015ae8:	3330      	adds	r3, #48	; 0x30
 8015aea:	b2da      	uxtb	r2, r3
 8015aec:	68bb      	ldr	r3, [r7, #8]
 8015aee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015af0:	68bb      	ldr	r3, [r7, #8]
 8015af2:	3301      	adds	r3, #1
 8015af4:	223a      	movs	r2, #58	; 0x3a
 8015af6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015af8:	68bb      	ldr	r3, [r7, #8]
 8015afa:	3302      	adds	r3, #2
 8015afc:	222f      	movs	r2, #47	; 0x2f
 8015afe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015b00:	68bb      	ldr	r3, [r7, #8]
 8015b02:	3303      	adds	r3, #3
 8015b04:	2200      	movs	r2, #0
 8015b06:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015b08:	2300      	movs	r3, #0
 8015b0a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8015b0e:	4618      	mov	r0, r3
 8015b10:	371c      	adds	r7, #28
 8015b12:	46bd      	mov	sp, r7
 8015b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b18:	4770      	bx	lr
 8015b1a:	bf00      	nop
 8015b1c:	2000086c 	.word	0x2000086c

08015b20 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b082      	sub	sp, #8
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	6078      	str	r0, [r7, #4]
 8015b28:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015b2a:	2200      	movs	r2, #0
 8015b2c:	6839      	ldr	r1, [r7, #0]
 8015b2e:	6878      	ldr	r0, [r7, #4]
 8015b30:	f7ff ffaa 	bl	8015a88 <FATFS_LinkDriverEx>
 8015b34:	4603      	mov	r3, r0
}
 8015b36:	4618      	mov	r0, r3
 8015b38:	3708      	adds	r7, #8
 8015b3a:	46bd      	mov	sp, r7
 8015b3c:	bd80      	pop	{r7, pc}

08015b3e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8015b3e:	b580      	push	{r7, lr}
 8015b40:	b084      	sub	sp, #16
 8015b42:	af00      	add	r7, sp, #0
 8015b44:	4603      	mov	r3, r0
 8015b46:	6039      	str	r1, [r7, #0]
 8015b48:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8015b4a:	2200      	movs	r2, #0
 8015b4c:	2101      	movs	r1, #1
 8015b4e:	2001      	movs	r0, #1
 8015b50:	f000 f977 	bl	8015e42 <osSemaphoreNew>
 8015b54:	4602      	mov	r2, r0
 8015b56:	683b      	ldr	r3, [r7, #0]
 8015b58:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8015b5a:	683b      	ldr	r3, [r7, #0]
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	bf14      	ite	ne
 8015b62:	2301      	movne	r3, #1
 8015b64:	2300      	moveq	r3, #0
 8015b66:	b2db      	uxtb	r3, r3
 8015b68:	60fb      	str	r3, [r7, #12]

    return ret;
 8015b6a:	68fb      	ldr	r3, [r7, #12]
}
 8015b6c:	4618      	mov	r0, r3
 8015b6e:	3710      	adds	r7, #16
 8015b70:	46bd      	mov	sp, r7
 8015b72:	bd80      	pop	{r7, pc}

08015b74 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8015b74:	b580      	push	{r7, lr}
 8015b76:	b082      	sub	sp, #8
 8015b78:	af00      	add	r7, sp, #0
 8015b7a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8015b7c:	6878      	ldr	r0, [r7, #4]
 8015b7e:	f000 fa7f 	bl	8016080 <osSemaphoreDelete>
#endif
    return 1;
 8015b82:	2301      	movs	r3, #1
}
 8015b84:	4618      	mov	r0, r3
 8015b86:	3708      	adds	r7, #8
 8015b88:	46bd      	mov	sp, r7
 8015b8a:	bd80      	pop	{r7, pc}

08015b8c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8015b8c:	b580      	push	{r7, lr}
 8015b8e:	b084      	sub	sp, #16
 8015b90:	af00      	add	r7, sp, #0
 8015b92:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8015b94:	2300      	movs	r3, #0
 8015b96:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8015b98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015b9c:	6878      	ldr	r0, [r7, #4]
 8015b9e:	f000 f9d9 	bl	8015f54 <osSemaphoreAcquire>
 8015ba2:	4603      	mov	r3, r0
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d101      	bne.n	8015bac <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8015ba8:	2301      	movs	r3, #1
 8015baa:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015bac:	68fb      	ldr	r3, [r7, #12]
}
 8015bae:	4618      	mov	r0, r3
 8015bb0:	3710      	adds	r7, #16
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bd80      	pop	{r7, pc}

08015bb6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8015bb6:	b580      	push	{r7, lr}
 8015bb8:	b082      	sub	sp, #8
 8015bba:	af00      	add	r7, sp, #0
 8015bbc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8015bbe:	6878      	ldr	r0, [r7, #4]
 8015bc0:	f000 fa1a 	bl	8015ff8 <osSemaphoreRelease>
#endif
}
 8015bc4:	bf00      	nop
 8015bc6:	3708      	adds	r7, #8
 8015bc8:	46bd      	mov	sp, r7
 8015bca:	bd80      	pop	{r7, pc}

08015bcc <__NVIC_SetPriority>:
{
 8015bcc:	b480      	push	{r7}
 8015bce:	b083      	sub	sp, #12
 8015bd0:	af00      	add	r7, sp, #0
 8015bd2:	4603      	mov	r3, r0
 8015bd4:	6039      	str	r1, [r7, #0]
 8015bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	db0a      	blt.n	8015bf6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015be0:	683b      	ldr	r3, [r7, #0]
 8015be2:	b2da      	uxtb	r2, r3
 8015be4:	490c      	ldr	r1, [pc, #48]	; (8015c18 <__NVIC_SetPriority+0x4c>)
 8015be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015bea:	0112      	lsls	r2, r2, #4
 8015bec:	b2d2      	uxtb	r2, r2
 8015bee:	440b      	add	r3, r1
 8015bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015bf4:	e00a      	b.n	8015c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015bf6:	683b      	ldr	r3, [r7, #0]
 8015bf8:	b2da      	uxtb	r2, r3
 8015bfa:	4908      	ldr	r1, [pc, #32]	; (8015c1c <__NVIC_SetPriority+0x50>)
 8015bfc:	79fb      	ldrb	r3, [r7, #7]
 8015bfe:	f003 030f 	and.w	r3, r3, #15
 8015c02:	3b04      	subs	r3, #4
 8015c04:	0112      	lsls	r2, r2, #4
 8015c06:	b2d2      	uxtb	r2, r2
 8015c08:	440b      	add	r3, r1
 8015c0a:	761a      	strb	r2, [r3, #24]
}
 8015c0c:	bf00      	nop
 8015c0e:	370c      	adds	r7, #12
 8015c10:	46bd      	mov	sp, r7
 8015c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c16:	4770      	bx	lr
 8015c18:	e000e100 	.word	0xe000e100
 8015c1c:	e000ed00 	.word	0xe000ed00

08015c20 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8015c20:	b580      	push	{r7, lr}
 8015c22:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8015c24:	4b05      	ldr	r3, [pc, #20]	; (8015c3c <SysTick_Handler+0x1c>)
 8015c26:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8015c28:	f002 f98c 	bl	8017f44 <xTaskGetSchedulerState>
 8015c2c:	4603      	mov	r3, r0
 8015c2e:	2b01      	cmp	r3, #1
 8015c30:	d001      	beq.n	8015c36 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8015c32:	f003 f871 	bl	8018d18 <xPortSysTickHandler>
  }
}
 8015c36:	bf00      	nop
 8015c38:	bd80      	pop	{r7, pc}
 8015c3a:	bf00      	nop
 8015c3c:	e000e010 	.word	0xe000e010

08015c40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8015c40:	b580      	push	{r7, lr}
 8015c42:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8015c44:	2100      	movs	r1, #0
 8015c46:	f06f 0004 	mvn.w	r0, #4
 8015c4a:	f7ff ffbf 	bl	8015bcc <__NVIC_SetPriority>
#endif
}
 8015c4e:	bf00      	nop
 8015c50:	bd80      	pop	{r7, pc}
	...

08015c54 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015c54:	b480      	push	{r7}
 8015c56:	b083      	sub	sp, #12
 8015c58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015c5a:	f3ef 8305 	mrs	r3, IPSR
 8015c5e:	603b      	str	r3, [r7, #0]
  return(result);
 8015c60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d003      	beq.n	8015c6e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8015c66:	f06f 0305 	mvn.w	r3, #5
 8015c6a:	607b      	str	r3, [r7, #4]
 8015c6c:	e00c      	b.n	8015c88 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8015c6e:	4b0a      	ldr	r3, [pc, #40]	; (8015c98 <osKernelInitialize+0x44>)
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d105      	bne.n	8015c82 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8015c76:	4b08      	ldr	r3, [pc, #32]	; (8015c98 <osKernelInitialize+0x44>)
 8015c78:	2201      	movs	r2, #1
 8015c7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015c7c:	2300      	movs	r3, #0
 8015c7e:	607b      	str	r3, [r7, #4]
 8015c80:	e002      	b.n	8015c88 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8015c82:	f04f 33ff 	mov.w	r3, #4294967295
 8015c86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015c88:	687b      	ldr	r3, [r7, #4]
}
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	370c      	adds	r7, #12
 8015c8e:	46bd      	mov	sp, r7
 8015c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c94:	4770      	bx	lr
 8015c96:	bf00      	nop
 8015c98:	20000878 	.word	0x20000878

08015c9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8015c9c:	b580      	push	{r7, lr}
 8015c9e:	b082      	sub	sp, #8
 8015ca0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015ca2:	f3ef 8305 	mrs	r3, IPSR
 8015ca6:	603b      	str	r3, [r7, #0]
  return(result);
 8015ca8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d003      	beq.n	8015cb6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8015cae:	f06f 0305 	mvn.w	r3, #5
 8015cb2:	607b      	str	r3, [r7, #4]
 8015cb4:	e010      	b.n	8015cd8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8015cb6:	4b0b      	ldr	r3, [pc, #44]	; (8015ce4 <osKernelStart+0x48>)
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	2b01      	cmp	r3, #1
 8015cbc:	d109      	bne.n	8015cd2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8015cbe:	f7ff ffbf 	bl	8015c40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015cc2:	4b08      	ldr	r3, [pc, #32]	; (8015ce4 <osKernelStart+0x48>)
 8015cc4:	2202      	movs	r2, #2
 8015cc6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015cc8:	f001 fce0 	bl	801768c <vTaskStartScheduler>
      stat = osOK;
 8015ccc:	2300      	movs	r3, #0
 8015cce:	607b      	str	r3, [r7, #4]
 8015cd0:	e002      	b.n	8015cd8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8015cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8015cd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015cd8:	687b      	ldr	r3, [r7, #4]
}
 8015cda:	4618      	mov	r0, r3
 8015cdc:	3708      	adds	r7, #8
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd80      	pop	{r7, pc}
 8015ce2:	bf00      	nop
 8015ce4:	20000878 	.word	0x20000878

08015ce8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015ce8:	b580      	push	{r7, lr}
 8015cea:	b08e      	sub	sp, #56	; 0x38
 8015cec:	af04      	add	r7, sp, #16
 8015cee:	60f8      	str	r0, [r7, #12]
 8015cf0:	60b9      	str	r1, [r7, #8]
 8015cf2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015cf8:	f3ef 8305 	mrs	r3, IPSR
 8015cfc:	617b      	str	r3, [r7, #20]
  return(result);
 8015cfe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d17e      	bne.n	8015e02 <osThreadNew+0x11a>
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d07b      	beq.n	8015e02 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8015d0a:	2380      	movs	r3, #128	; 0x80
 8015d0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8015d0e:	2318      	movs	r3, #24
 8015d10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8015d12:	2300      	movs	r3, #0
 8015d14:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8015d16:	f04f 33ff 	mov.w	r3, #4294967295
 8015d1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d045      	beq.n	8015dae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d002      	beq.n	8015d30 <osThreadNew+0x48>
        name = attr->name;
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	699b      	ldr	r3, [r3, #24]
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d002      	beq.n	8015d3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	699b      	ldr	r3, [r3, #24]
 8015d3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8015d3e:	69fb      	ldr	r3, [r7, #28]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d008      	beq.n	8015d56 <osThreadNew+0x6e>
 8015d44:	69fb      	ldr	r3, [r7, #28]
 8015d46:	2b38      	cmp	r3, #56	; 0x38
 8015d48:	d805      	bhi.n	8015d56 <osThreadNew+0x6e>
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	685b      	ldr	r3, [r3, #4]
 8015d4e:	f003 0301 	and.w	r3, r3, #1
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d001      	beq.n	8015d5a <osThreadNew+0x72>
        return (NULL);
 8015d56:	2300      	movs	r3, #0
 8015d58:	e054      	b.n	8015e04 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	695b      	ldr	r3, [r3, #20]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d003      	beq.n	8015d6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	695b      	ldr	r3, [r3, #20]
 8015d66:	089b      	lsrs	r3, r3, #2
 8015d68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	689b      	ldr	r3, [r3, #8]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d00e      	beq.n	8015d90 <osThreadNew+0xa8>
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	68db      	ldr	r3, [r3, #12]
 8015d76:	2bbb      	cmp	r3, #187	; 0xbb
 8015d78:	d90a      	bls.n	8015d90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d006      	beq.n	8015d90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	695b      	ldr	r3, [r3, #20]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d002      	beq.n	8015d90 <osThreadNew+0xa8>
        mem = 1;
 8015d8a:	2301      	movs	r3, #1
 8015d8c:	61bb      	str	r3, [r7, #24]
 8015d8e:	e010      	b.n	8015db2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	689b      	ldr	r3, [r3, #8]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d10c      	bne.n	8015db2 <osThreadNew+0xca>
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	68db      	ldr	r3, [r3, #12]
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d108      	bne.n	8015db2 <osThreadNew+0xca>
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	691b      	ldr	r3, [r3, #16]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d104      	bne.n	8015db2 <osThreadNew+0xca>
          mem = 0;
 8015da8:	2300      	movs	r3, #0
 8015daa:	61bb      	str	r3, [r7, #24]
 8015dac:	e001      	b.n	8015db2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8015dae:	2300      	movs	r3, #0
 8015db0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015db2:	69bb      	ldr	r3, [r7, #24]
 8015db4:	2b01      	cmp	r3, #1
 8015db6:	d110      	bne.n	8015dda <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8015dbc:	687a      	ldr	r2, [r7, #4]
 8015dbe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015dc0:	9202      	str	r2, [sp, #8]
 8015dc2:	9301      	str	r3, [sp, #4]
 8015dc4:	69fb      	ldr	r3, [r7, #28]
 8015dc6:	9300      	str	r3, [sp, #0]
 8015dc8:	68bb      	ldr	r3, [r7, #8]
 8015dca:	6a3a      	ldr	r2, [r7, #32]
 8015dcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015dce:	68f8      	ldr	r0, [r7, #12]
 8015dd0:	f001 fa70 	bl	80172b4 <xTaskCreateStatic>
 8015dd4:	4603      	mov	r3, r0
 8015dd6:	613b      	str	r3, [r7, #16]
 8015dd8:	e013      	b.n	8015e02 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8015dda:	69bb      	ldr	r3, [r7, #24]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d110      	bne.n	8015e02 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8015de0:	6a3b      	ldr	r3, [r7, #32]
 8015de2:	b29a      	uxth	r2, r3
 8015de4:	f107 0310 	add.w	r3, r7, #16
 8015de8:	9301      	str	r3, [sp, #4]
 8015dea:	69fb      	ldr	r3, [r7, #28]
 8015dec:	9300      	str	r3, [sp, #0]
 8015dee:	68bb      	ldr	r3, [r7, #8]
 8015df0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015df2:	68f8      	ldr	r0, [r7, #12]
 8015df4:	f001 fabb 	bl	801736e <xTaskCreate>
 8015df8:	4603      	mov	r3, r0
 8015dfa:	2b01      	cmp	r3, #1
 8015dfc:	d001      	beq.n	8015e02 <osThreadNew+0x11a>
            hTask = NULL;
 8015dfe:	2300      	movs	r3, #0
 8015e00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8015e02:	693b      	ldr	r3, [r7, #16]
}
 8015e04:	4618      	mov	r0, r3
 8015e06:	3728      	adds	r7, #40	; 0x28
 8015e08:	46bd      	mov	sp, r7
 8015e0a:	bd80      	pop	{r7, pc}

08015e0c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8015e0c:	b580      	push	{r7, lr}
 8015e0e:	b084      	sub	sp, #16
 8015e10:	af00      	add	r7, sp, #0
 8015e12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015e14:	f3ef 8305 	mrs	r3, IPSR
 8015e18:	60bb      	str	r3, [r7, #8]
  return(result);
 8015e1a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d003      	beq.n	8015e28 <osDelay+0x1c>
    stat = osErrorISR;
 8015e20:	f06f 0305 	mvn.w	r3, #5
 8015e24:	60fb      	str	r3, [r7, #12]
 8015e26:	e007      	b.n	8015e38 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8015e28:	2300      	movs	r3, #0
 8015e2a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d002      	beq.n	8015e38 <osDelay+0x2c>
      vTaskDelay(ticks);
 8015e32:	6878      	ldr	r0, [r7, #4]
 8015e34:	f001 fbf6 	bl	8017624 <vTaskDelay>
    }
  }

  return (stat);
 8015e38:	68fb      	ldr	r3, [r7, #12]
}
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	3710      	adds	r7, #16
 8015e3e:	46bd      	mov	sp, r7
 8015e40:	bd80      	pop	{r7, pc}

08015e42 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8015e42:	b580      	push	{r7, lr}
 8015e44:	b08a      	sub	sp, #40	; 0x28
 8015e46:	af02      	add	r7, sp, #8
 8015e48:	60f8      	str	r0, [r7, #12]
 8015e4a:	60b9      	str	r1, [r7, #8]
 8015e4c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8015e4e:	2300      	movs	r3, #0
 8015e50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015e52:	f3ef 8305 	mrs	r3, IPSR
 8015e56:	613b      	str	r3, [r7, #16]
  return(result);
 8015e58:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d175      	bne.n	8015f4a <osSemaphoreNew+0x108>
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d072      	beq.n	8015f4a <osSemaphoreNew+0x108>
 8015e64:	68ba      	ldr	r2, [r7, #8]
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	429a      	cmp	r2, r3
 8015e6a:	d86e      	bhi.n	8015f4a <osSemaphoreNew+0x108>
    mem = -1;
 8015e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8015e70:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d015      	beq.n	8015ea4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	689b      	ldr	r3, [r3, #8]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d006      	beq.n	8015e8e <osSemaphoreNew+0x4c>
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	68db      	ldr	r3, [r3, #12]
 8015e84:	2b4f      	cmp	r3, #79	; 0x4f
 8015e86:	d902      	bls.n	8015e8e <osSemaphoreNew+0x4c>
        mem = 1;
 8015e88:	2301      	movs	r3, #1
 8015e8a:	61bb      	str	r3, [r7, #24]
 8015e8c:	e00c      	b.n	8015ea8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	689b      	ldr	r3, [r3, #8]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d108      	bne.n	8015ea8 <osSemaphoreNew+0x66>
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	68db      	ldr	r3, [r3, #12]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d104      	bne.n	8015ea8 <osSemaphoreNew+0x66>
          mem = 0;
 8015e9e:	2300      	movs	r3, #0
 8015ea0:	61bb      	str	r3, [r7, #24]
 8015ea2:	e001      	b.n	8015ea8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8015ea4:	2300      	movs	r3, #0
 8015ea6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8015ea8:	69bb      	ldr	r3, [r7, #24]
 8015eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015eae:	d04c      	beq.n	8015f4a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	2b01      	cmp	r3, #1
 8015eb4:	d128      	bne.n	8015f08 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8015eb6:	69bb      	ldr	r3, [r7, #24]
 8015eb8:	2b01      	cmp	r3, #1
 8015eba:	d10a      	bne.n	8015ed2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	689b      	ldr	r3, [r3, #8]
 8015ec0:	2203      	movs	r2, #3
 8015ec2:	9200      	str	r2, [sp, #0]
 8015ec4:	2200      	movs	r2, #0
 8015ec6:	2100      	movs	r1, #0
 8015ec8:	2001      	movs	r0, #1
 8015eca:	f000 fa4d 	bl	8016368 <xQueueGenericCreateStatic>
 8015ece:	61f8      	str	r0, [r7, #28]
 8015ed0:	e005      	b.n	8015ede <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8015ed2:	2203      	movs	r2, #3
 8015ed4:	2100      	movs	r1, #0
 8015ed6:	2001      	movs	r0, #1
 8015ed8:	f000 fabe 	bl	8016458 <xQueueGenericCreate>
 8015edc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8015ede:	69fb      	ldr	r3, [r7, #28]
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d022      	beq.n	8015f2a <osSemaphoreNew+0xe8>
 8015ee4:	68bb      	ldr	r3, [r7, #8]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d01f      	beq.n	8015f2a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015eea:	2300      	movs	r3, #0
 8015eec:	2200      	movs	r2, #0
 8015eee:	2100      	movs	r1, #0
 8015ef0:	69f8      	ldr	r0, [r7, #28]
 8015ef2:	f000 fb79 	bl	80165e8 <xQueueGenericSend>
 8015ef6:	4603      	mov	r3, r0
 8015ef8:	2b01      	cmp	r3, #1
 8015efa:	d016      	beq.n	8015f2a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8015efc:	69f8      	ldr	r0, [r7, #28]
 8015efe:	f001 f805 	bl	8016f0c <vQueueDelete>
            hSemaphore = NULL;
 8015f02:	2300      	movs	r3, #0
 8015f04:	61fb      	str	r3, [r7, #28]
 8015f06:	e010      	b.n	8015f2a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8015f08:	69bb      	ldr	r3, [r7, #24]
 8015f0a:	2b01      	cmp	r3, #1
 8015f0c:	d108      	bne.n	8015f20 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	689b      	ldr	r3, [r3, #8]
 8015f12:	461a      	mov	r2, r3
 8015f14:	68b9      	ldr	r1, [r7, #8]
 8015f16:	68f8      	ldr	r0, [r7, #12]
 8015f18:	f000 fafb 	bl	8016512 <xQueueCreateCountingSemaphoreStatic>
 8015f1c:	61f8      	str	r0, [r7, #28]
 8015f1e:	e004      	b.n	8015f2a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8015f20:	68b9      	ldr	r1, [r7, #8]
 8015f22:	68f8      	ldr	r0, [r7, #12]
 8015f24:	f000 fb2c 	bl	8016580 <xQueueCreateCountingSemaphore>
 8015f28:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8015f2a:	69fb      	ldr	r3, [r7, #28]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d00c      	beq.n	8015f4a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d003      	beq.n	8015f3e <osSemaphoreNew+0xfc>
          name = attr->name;
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	617b      	str	r3, [r7, #20]
 8015f3c:	e001      	b.n	8015f42 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8015f3e:	2300      	movs	r3, #0
 8015f40:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8015f42:	6979      	ldr	r1, [r7, #20]
 8015f44:	69f8      	ldr	r0, [r7, #28]
 8015f46:	f001 f92d 	bl	80171a4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8015f4a:	69fb      	ldr	r3, [r7, #28]
}
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	3720      	adds	r7, #32
 8015f50:	46bd      	mov	sp, r7
 8015f52:	bd80      	pop	{r7, pc}

08015f54 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8015f54:	b580      	push	{r7, lr}
 8015f56:	b086      	sub	sp, #24
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	6078      	str	r0, [r7, #4]
 8015f5c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015f62:	2300      	movs	r3, #0
 8015f64:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015f66:	693b      	ldr	r3, [r7, #16]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d103      	bne.n	8015f74 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8015f6c:	f06f 0303 	mvn.w	r3, #3
 8015f70:	617b      	str	r3, [r7, #20]
 8015f72:	e039      	b.n	8015fe8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015f74:	f3ef 8305 	mrs	r3, IPSR
 8015f78:	60fb      	str	r3, [r7, #12]
  return(result);
 8015f7a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d022      	beq.n	8015fc6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8015f80:	683b      	ldr	r3, [r7, #0]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d003      	beq.n	8015f8e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8015f86:	f06f 0303 	mvn.w	r3, #3
 8015f8a:	617b      	str	r3, [r7, #20]
 8015f8c:	e02c      	b.n	8015fe8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8015f8e:	2300      	movs	r3, #0
 8015f90:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8015f92:	f107 0308 	add.w	r3, r7, #8
 8015f96:	461a      	mov	r2, r3
 8015f98:	2100      	movs	r1, #0
 8015f9a:	6938      	ldr	r0, [r7, #16]
 8015f9c:	f000 ff36 	bl	8016e0c <xQueueReceiveFromISR>
 8015fa0:	4603      	mov	r3, r0
 8015fa2:	2b01      	cmp	r3, #1
 8015fa4:	d003      	beq.n	8015fae <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8015fa6:	f06f 0302 	mvn.w	r3, #2
 8015faa:	617b      	str	r3, [r7, #20]
 8015fac:	e01c      	b.n	8015fe8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8015fae:	68bb      	ldr	r3, [r7, #8]
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d019      	beq.n	8015fe8 <osSemaphoreAcquire+0x94>
 8015fb4:	4b0f      	ldr	r3, [pc, #60]	; (8015ff4 <osSemaphoreAcquire+0xa0>)
 8015fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015fba:	601a      	str	r2, [r3, #0]
 8015fbc:	f3bf 8f4f 	dsb	sy
 8015fc0:	f3bf 8f6f 	isb	sy
 8015fc4:	e010      	b.n	8015fe8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8015fc6:	6839      	ldr	r1, [r7, #0]
 8015fc8:	6938      	ldr	r0, [r7, #16]
 8015fca:	f000 fe13 	bl	8016bf4 <xQueueSemaphoreTake>
 8015fce:	4603      	mov	r3, r0
 8015fd0:	2b01      	cmp	r3, #1
 8015fd2:	d009      	beq.n	8015fe8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8015fd4:	683b      	ldr	r3, [r7, #0]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d003      	beq.n	8015fe2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8015fda:	f06f 0301 	mvn.w	r3, #1
 8015fde:	617b      	str	r3, [r7, #20]
 8015fe0:	e002      	b.n	8015fe8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8015fe2:	f06f 0302 	mvn.w	r3, #2
 8015fe6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8015fe8:	697b      	ldr	r3, [r7, #20]
}
 8015fea:	4618      	mov	r0, r3
 8015fec:	3718      	adds	r7, #24
 8015fee:	46bd      	mov	sp, r7
 8015ff0:	bd80      	pop	{r7, pc}
 8015ff2:	bf00      	nop
 8015ff4:	e000ed04 	.word	0xe000ed04

08015ff8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b086      	sub	sp, #24
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8016004:	2300      	movs	r3, #0
 8016006:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8016008:	693b      	ldr	r3, [r7, #16]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d103      	bne.n	8016016 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801600e:	f06f 0303 	mvn.w	r3, #3
 8016012:	617b      	str	r3, [r7, #20]
 8016014:	e02c      	b.n	8016070 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016016:	f3ef 8305 	mrs	r3, IPSR
 801601a:	60fb      	str	r3, [r7, #12]
  return(result);
 801601c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801601e:	2b00      	cmp	r3, #0
 8016020:	d01a      	beq.n	8016058 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8016022:	2300      	movs	r3, #0
 8016024:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8016026:	f107 0308 	add.w	r3, r7, #8
 801602a:	4619      	mov	r1, r3
 801602c:	6938      	ldr	r0, [r7, #16]
 801602e:	f000 fc74 	bl	801691a <xQueueGiveFromISR>
 8016032:	4603      	mov	r3, r0
 8016034:	2b01      	cmp	r3, #1
 8016036:	d003      	beq.n	8016040 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8016038:	f06f 0302 	mvn.w	r3, #2
 801603c:	617b      	str	r3, [r7, #20]
 801603e:	e017      	b.n	8016070 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8016040:	68bb      	ldr	r3, [r7, #8]
 8016042:	2b00      	cmp	r3, #0
 8016044:	d014      	beq.n	8016070 <osSemaphoreRelease+0x78>
 8016046:	4b0d      	ldr	r3, [pc, #52]	; (801607c <osSemaphoreRelease+0x84>)
 8016048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801604c:	601a      	str	r2, [r3, #0]
 801604e:	f3bf 8f4f 	dsb	sy
 8016052:	f3bf 8f6f 	isb	sy
 8016056:	e00b      	b.n	8016070 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8016058:	2300      	movs	r3, #0
 801605a:	2200      	movs	r2, #0
 801605c:	2100      	movs	r1, #0
 801605e:	6938      	ldr	r0, [r7, #16]
 8016060:	f000 fac2 	bl	80165e8 <xQueueGenericSend>
 8016064:	4603      	mov	r3, r0
 8016066:	2b01      	cmp	r3, #1
 8016068:	d002      	beq.n	8016070 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 801606a:	f06f 0302 	mvn.w	r3, #2
 801606e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8016070:	697b      	ldr	r3, [r7, #20]
}
 8016072:	4618      	mov	r0, r3
 8016074:	3718      	adds	r7, #24
 8016076:	46bd      	mov	sp, r7
 8016078:	bd80      	pop	{r7, pc}
 801607a:	bf00      	nop
 801607c:	e000ed04 	.word	0xe000ed04

08016080 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8016080:	b580      	push	{r7, lr}
 8016082:	b086      	sub	sp, #24
 8016084:	af00      	add	r7, sp, #0
 8016086:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801608c:	f3ef 8305 	mrs	r3, IPSR
 8016090:	60fb      	str	r3, [r7, #12]
  return(result);
 8016092:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8016094:	2b00      	cmp	r3, #0
 8016096:	d003      	beq.n	80160a0 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8016098:	f06f 0305 	mvn.w	r3, #5
 801609c:	617b      	str	r3, [r7, #20]
 801609e:	e00e      	b.n	80160be <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 80160a0:	693b      	ldr	r3, [r7, #16]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d103      	bne.n	80160ae <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 80160a6:	f06f 0303 	mvn.w	r3, #3
 80160aa:	617b      	str	r3, [r7, #20]
 80160ac:	e007      	b.n	80160be <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80160ae:	6938      	ldr	r0, [r7, #16]
 80160b0:	f001 f8a2 	bl	80171f8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80160b4:	2300      	movs	r3, #0
 80160b6:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 80160b8:	6938      	ldr	r0, [r7, #16]
 80160ba:	f000 ff27 	bl	8016f0c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80160be:	697b      	ldr	r3, [r7, #20]
}
 80160c0:	4618      	mov	r0, r3
 80160c2:	3718      	adds	r7, #24
 80160c4:	46bd      	mov	sp, r7
 80160c6:	bd80      	pop	{r7, pc}

080160c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80160c8:	b480      	push	{r7}
 80160ca:	b085      	sub	sp, #20
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	60f8      	str	r0, [r7, #12]
 80160d0:	60b9      	str	r1, [r7, #8]
 80160d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	4a07      	ldr	r2, [pc, #28]	; (80160f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80160d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80160da:	68bb      	ldr	r3, [r7, #8]
 80160dc:	4a06      	ldr	r2, [pc, #24]	; (80160f8 <vApplicationGetIdleTaskMemory+0x30>)
 80160de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	2280      	movs	r2, #128	; 0x80
 80160e4:	601a      	str	r2, [r3, #0]
}
 80160e6:	bf00      	nop
 80160e8:	3714      	adds	r7, #20
 80160ea:	46bd      	mov	sp, r7
 80160ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f0:	4770      	bx	lr
 80160f2:	bf00      	nop
 80160f4:	2000087c 	.word	0x2000087c
 80160f8:	20000938 	.word	0x20000938

080160fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80160fc:	b480      	push	{r7}
 80160fe:	b085      	sub	sp, #20
 8016100:	af00      	add	r7, sp, #0
 8016102:	60f8      	str	r0, [r7, #12]
 8016104:	60b9      	str	r1, [r7, #8]
 8016106:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	4a07      	ldr	r2, [pc, #28]	; (8016128 <vApplicationGetTimerTaskMemory+0x2c>)
 801610c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801610e:	68bb      	ldr	r3, [r7, #8]
 8016110:	4a06      	ldr	r2, [pc, #24]	; (801612c <vApplicationGetTimerTaskMemory+0x30>)
 8016112:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	f44f 7280 	mov.w	r2, #256	; 0x100
 801611a:	601a      	str	r2, [r3, #0]
}
 801611c:	bf00      	nop
 801611e:	3714      	adds	r7, #20
 8016120:	46bd      	mov	sp, r7
 8016122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016126:	4770      	bx	lr
 8016128:	20000b38 	.word	0x20000b38
 801612c:	20000bf4 	.word	0x20000bf4

08016130 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8016130:	b480      	push	{r7}
 8016132:	b083      	sub	sp, #12
 8016134:	af00      	add	r7, sp, #0
 8016136:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	f103 0208 	add.w	r2, r3, #8
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	f04f 32ff 	mov.w	r2, #4294967295
 8016148:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	f103 0208 	add.w	r2, r3, #8
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	f103 0208 	add.w	r2, r3, #8
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	2200      	movs	r2, #0
 8016162:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016164:	bf00      	nop
 8016166:	370c      	adds	r7, #12
 8016168:	46bd      	mov	sp, r7
 801616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801616e:	4770      	bx	lr

08016170 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016170:	b480      	push	{r7}
 8016172:	b083      	sub	sp, #12
 8016174:	af00      	add	r7, sp, #0
 8016176:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	2200      	movs	r2, #0
 801617c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801617e:	bf00      	nop
 8016180:	370c      	adds	r7, #12
 8016182:	46bd      	mov	sp, r7
 8016184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016188:	4770      	bx	lr

0801618a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801618a:	b480      	push	{r7}
 801618c:	b085      	sub	sp, #20
 801618e:	af00      	add	r7, sp, #0
 8016190:	6078      	str	r0, [r7, #4]
 8016192:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	685b      	ldr	r3, [r3, #4]
 8016198:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801619a:	683b      	ldr	r3, [r7, #0]
 801619c:	68fa      	ldr	r2, [r7, #12]
 801619e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	689a      	ldr	r2, [r3, #8]
 80161a4:	683b      	ldr	r3, [r7, #0]
 80161a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	689b      	ldr	r3, [r3, #8]
 80161ac:	683a      	ldr	r2, [r7, #0]
 80161ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	683a      	ldr	r2, [r7, #0]
 80161b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80161b6:	683b      	ldr	r3, [r7, #0]
 80161b8:	687a      	ldr	r2, [r7, #4]
 80161ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	1c5a      	adds	r2, r3, #1
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	601a      	str	r2, [r3, #0]
}
 80161c6:	bf00      	nop
 80161c8:	3714      	adds	r7, #20
 80161ca:	46bd      	mov	sp, r7
 80161cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161d0:	4770      	bx	lr

080161d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80161d2:	b480      	push	{r7}
 80161d4:	b085      	sub	sp, #20
 80161d6:	af00      	add	r7, sp, #0
 80161d8:	6078      	str	r0, [r7, #4]
 80161da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80161dc:	683b      	ldr	r3, [r7, #0]
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80161e2:	68bb      	ldr	r3, [r7, #8]
 80161e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161e8:	d103      	bne.n	80161f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	691b      	ldr	r3, [r3, #16]
 80161ee:	60fb      	str	r3, [r7, #12]
 80161f0:	e00c      	b.n	801620c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	3308      	adds	r3, #8
 80161f6:	60fb      	str	r3, [r7, #12]
 80161f8:	e002      	b.n	8016200 <vListInsert+0x2e>
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	685b      	ldr	r3, [r3, #4]
 80161fe:	60fb      	str	r3, [r7, #12]
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	685b      	ldr	r3, [r3, #4]
 8016204:	681b      	ldr	r3, [r3, #0]
 8016206:	68ba      	ldr	r2, [r7, #8]
 8016208:	429a      	cmp	r2, r3
 801620a:	d2f6      	bcs.n	80161fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	685a      	ldr	r2, [r3, #4]
 8016210:	683b      	ldr	r3, [r7, #0]
 8016212:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016214:	683b      	ldr	r3, [r7, #0]
 8016216:	685b      	ldr	r3, [r3, #4]
 8016218:	683a      	ldr	r2, [r7, #0]
 801621a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801621c:	683b      	ldr	r3, [r7, #0]
 801621e:	68fa      	ldr	r2, [r7, #12]
 8016220:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	683a      	ldr	r2, [r7, #0]
 8016226:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016228:	683b      	ldr	r3, [r7, #0]
 801622a:	687a      	ldr	r2, [r7, #4]
 801622c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	1c5a      	adds	r2, r3, #1
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	601a      	str	r2, [r3, #0]
}
 8016238:	bf00      	nop
 801623a:	3714      	adds	r7, #20
 801623c:	46bd      	mov	sp, r7
 801623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016242:	4770      	bx	lr

08016244 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016244:	b480      	push	{r7}
 8016246:	b085      	sub	sp, #20
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	691b      	ldr	r3, [r3, #16]
 8016250:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	685b      	ldr	r3, [r3, #4]
 8016256:	687a      	ldr	r2, [r7, #4]
 8016258:	6892      	ldr	r2, [r2, #8]
 801625a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	689b      	ldr	r3, [r3, #8]
 8016260:	687a      	ldr	r2, [r7, #4]
 8016262:	6852      	ldr	r2, [r2, #4]
 8016264:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	685b      	ldr	r3, [r3, #4]
 801626a:	687a      	ldr	r2, [r7, #4]
 801626c:	429a      	cmp	r2, r3
 801626e:	d103      	bne.n	8016278 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	689a      	ldr	r2, [r3, #8]
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	2200      	movs	r2, #0
 801627c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	681b      	ldr	r3, [r3, #0]
 8016282:	1e5a      	subs	r2, r3, #1
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	681b      	ldr	r3, [r3, #0]
}
 801628c:	4618      	mov	r0, r3
 801628e:	3714      	adds	r7, #20
 8016290:	46bd      	mov	sp, r7
 8016292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016296:	4770      	bx	lr

08016298 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016298:	b580      	push	{r7, lr}
 801629a:	b084      	sub	sp, #16
 801629c:	af00      	add	r7, sp, #0
 801629e:	6078      	str	r0, [r7, #4]
 80162a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d10a      	bne.n	80162c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80162ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162b0:	f383 8811 	msr	BASEPRI, r3
 80162b4:	f3bf 8f6f 	isb	sy
 80162b8:	f3bf 8f4f 	dsb	sy
 80162bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80162be:	bf00      	nop
 80162c0:	e7fe      	b.n	80162c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80162c2:	f002 fc97 	bl	8018bf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	681a      	ldr	r2, [r3, #0]
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80162ce:	68f9      	ldr	r1, [r7, #12]
 80162d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80162d2:	fb01 f303 	mul.w	r3, r1, r3
 80162d6:	441a      	add	r2, r3
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80162dc:	68fb      	ldr	r3, [r7, #12]
 80162de:	2200      	movs	r2, #0
 80162e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	681a      	ldr	r2, [r3, #0]
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	681a      	ldr	r2, [r3, #0]
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80162f2:	3b01      	subs	r3, #1
 80162f4:	68f9      	ldr	r1, [r7, #12]
 80162f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80162f8:	fb01 f303 	mul.w	r3, r1, r3
 80162fc:	441a      	add	r2, r3
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	22ff      	movs	r2, #255	; 0xff
 8016306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	22ff      	movs	r2, #255	; 0xff
 801630e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8016312:	683b      	ldr	r3, [r7, #0]
 8016314:	2b00      	cmp	r3, #0
 8016316:	d114      	bne.n	8016342 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	691b      	ldr	r3, [r3, #16]
 801631c:	2b00      	cmp	r3, #0
 801631e:	d01a      	beq.n	8016356 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	3310      	adds	r3, #16
 8016324:	4618      	mov	r0, r3
 8016326:	f001 fc4b 	bl	8017bc0 <xTaskRemoveFromEventList>
 801632a:	4603      	mov	r3, r0
 801632c:	2b00      	cmp	r3, #0
 801632e:	d012      	beq.n	8016356 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8016330:	4b0c      	ldr	r3, [pc, #48]	; (8016364 <xQueueGenericReset+0xcc>)
 8016332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016336:	601a      	str	r2, [r3, #0]
 8016338:	f3bf 8f4f 	dsb	sy
 801633c:	f3bf 8f6f 	isb	sy
 8016340:	e009      	b.n	8016356 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	3310      	adds	r3, #16
 8016346:	4618      	mov	r0, r3
 8016348:	f7ff fef2 	bl	8016130 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	3324      	adds	r3, #36	; 0x24
 8016350:	4618      	mov	r0, r3
 8016352:	f7ff feed 	bl	8016130 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016356:	f002 fc7d 	bl	8018c54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801635a:	2301      	movs	r3, #1
}
 801635c:	4618      	mov	r0, r3
 801635e:	3710      	adds	r7, #16
 8016360:	46bd      	mov	sp, r7
 8016362:	bd80      	pop	{r7, pc}
 8016364:	e000ed04 	.word	0xe000ed04

08016368 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016368:	b580      	push	{r7, lr}
 801636a:	b08e      	sub	sp, #56	; 0x38
 801636c:	af02      	add	r7, sp, #8
 801636e:	60f8      	str	r0, [r7, #12]
 8016370:	60b9      	str	r1, [r7, #8]
 8016372:	607a      	str	r2, [r7, #4]
 8016374:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016376:	68fb      	ldr	r3, [r7, #12]
 8016378:	2b00      	cmp	r3, #0
 801637a:	d10a      	bne.n	8016392 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801637c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016380:	f383 8811 	msr	BASEPRI, r3
 8016384:	f3bf 8f6f 	isb	sy
 8016388:	f3bf 8f4f 	dsb	sy
 801638c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801638e:	bf00      	nop
 8016390:	e7fe      	b.n	8016390 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8016392:	683b      	ldr	r3, [r7, #0]
 8016394:	2b00      	cmp	r3, #0
 8016396:	d10a      	bne.n	80163ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8016398:	f04f 0350 	mov.w	r3, #80	; 0x50
 801639c:	f383 8811 	msr	BASEPRI, r3
 80163a0:	f3bf 8f6f 	isb	sy
 80163a4:	f3bf 8f4f 	dsb	sy
 80163a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80163aa:	bf00      	nop
 80163ac:	e7fe      	b.n	80163ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d002      	beq.n	80163ba <xQueueGenericCreateStatic+0x52>
 80163b4:	68bb      	ldr	r3, [r7, #8]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d001      	beq.n	80163be <xQueueGenericCreateStatic+0x56>
 80163ba:	2301      	movs	r3, #1
 80163bc:	e000      	b.n	80163c0 <xQueueGenericCreateStatic+0x58>
 80163be:	2300      	movs	r3, #0
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d10a      	bne.n	80163da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80163c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163c8:	f383 8811 	msr	BASEPRI, r3
 80163cc:	f3bf 8f6f 	isb	sy
 80163d0:	f3bf 8f4f 	dsb	sy
 80163d4:	623b      	str	r3, [r7, #32]
}
 80163d6:	bf00      	nop
 80163d8:	e7fe      	b.n	80163d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d102      	bne.n	80163e6 <xQueueGenericCreateStatic+0x7e>
 80163e0:	68bb      	ldr	r3, [r7, #8]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d101      	bne.n	80163ea <xQueueGenericCreateStatic+0x82>
 80163e6:	2301      	movs	r3, #1
 80163e8:	e000      	b.n	80163ec <xQueueGenericCreateStatic+0x84>
 80163ea:	2300      	movs	r3, #0
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d10a      	bne.n	8016406 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80163f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163f4:	f383 8811 	msr	BASEPRI, r3
 80163f8:	f3bf 8f6f 	isb	sy
 80163fc:	f3bf 8f4f 	dsb	sy
 8016400:	61fb      	str	r3, [r7, #28]
}
 8016402:	bf00      	nop
 8016404:	e7fe      	b.n	8016404 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016406:	2350      	movs	r3, #80	; 0x50
 8016408:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801640a:	697b      	ldr	r3, [r7, #20]
 801640c:	2b50      	cmp	r3, #80	; 0x50
 801640e:	d00a      	beq.n	8016426 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8016410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016414:	f383 8811 	msr	BASEPRI, r3
 8016418:	f3bf 8f6f 	isb	sy
 801641c:	f3bf 8f4f 	dsb	sy
 8016420:	61bb      	str	r3, [r7, #24]
}
 8016422:	bf00      	nop
 8016424:	e7fe      	b.n	8016424 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016426:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016428:	683b      	ldr	r3, [r7, #0]
 801642a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801642c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801642e:	2b00      	cmp	r3, #0
 8016430:	d00d      	beq.n	801644e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016434:	2201      	movs	r2, #1
 8016436:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801643a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016440:	9300      	str	r3, [sp, #0]
 8016442:	4613      	mov	r3, r2
 8016444:	687a      	ldr	r2, [r7, #4]
 8016446:	68b9      	ldr	r1, [r7, #8]
 8016448:	68f8      	ldr	r0, [r7, #12]
 801644a:	f000 f83f 	bl	80164cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801644e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8016450:	4618      	mov	r0, r3
 8016452:	3730      	adds	r7, #48	; 0x30
 8016454:	46bd      	mov	sp, r7
 8016456:	bd80      	pop	{r7, pc}

08016458 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016458:	b580      	push	{r7, lr}
 801645a:	b08a      	sub	sp, #40	; 0x28
 801645c:	af02      	add	r7, sp, #8
 801645e:	60f8      	str	r0, [r7, #12]
 8016460:	60b9      	str	r1, [r7, #8]
 8016462:	4613      	mov	r3, r2
 8016464:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d10a      	bne.n	8016482 <xQueueGenericCreate+0x2a>
	__asm volatile
 801646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016470:	f383 8811 	msr	BASEPRI, r3
 8016474:	f3bf 8f6f 	isb	sy
 8016478:	f3bf 8f4f 	dsb	sy
 801647c:	613b      	str	r3, [r7, #16]
}
 801647e:	bf00      	nop
 8016480:	e7fe      	b.n	8016480 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	68ba      	ldr	r2, [r7, #8]
 8016486:	fb02 f303 	mul.w	r3, r2, r3
 801648a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801648c:	69fb      	ldr	r3, [r7, #28]
 801648e:	3350      	adds	r3, #80	; 0x50
 8016490:	4618      	mov	r0, r3
 8016492:	f002 fcd1 	bl	8018e38 <pvPortMalloc>
 8016496:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016498:	69bb      	ldr	r3, [r7, #24]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d011      	beq.n	80164c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801649e:	69bb      	ldr	r3, [r7, #24]
 80164a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80164a2:	697b      	ldr	r3, [r7, #20]
 80164a4:	3350      	adds	r3, #80	; 0x50
 80164a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80164a8:	69bb      	ldr	r3, [r7, #24]
 80164aa:	2200      	movs	r2, #0
 80164ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80164b0:	79fa      	ldrb	r2, [r7, #7]
 80164b2:	69bb      	ldr	r3, [r7, #24]
 80164b4:	9300      	str	r3, [sp, #0]
 80164b6:	4613      	mov	r3, r2
 80164b8:	697a      	ldr	r2, [r7, #20]
 80164ba:	68b9      	ldr	r1, [r7, #8]
 80164bc:	68f8      	ldr	r0, [r7, #12]
 80164be:	f000 f805 	bl	80164cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80164c2:	69bb      	ldr	r3, [r7, #24]
	}
 80164c4:	4618      	mov	r0, r3
 80164c6:	3720      	adds	r7, #32
 80164c8:	46bd      	mov	sp, r7
 80164ca:	bd80      	pop	{r7, pc}

080164cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80164cc:	b580      	push	{r7, lr}
 80164ce:	b084      	sub	sp, #16
 80164d0:	af00      	add	r7, sp, #0
 80164d2:	60f8      	str	r0, [r7, #12]
 80164d4:	60b9      	str	r1, [r7, #8]
 80164d6:	607a      	str	r2, [r7, #4]
 80164d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80164da:	68bb      	ldr	r3, [r7, #8]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d103      	bne.n	80164e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80164e0:	69bb      	ldr	r3, [r7, #24]
 80164e2:	69ba      	ldr	r2, [r7, #24]
 80164e4:	601a      	str	r2, [r3, #0]
 80164e6:	e002      	b.n	80164ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80164e8:	69bb      	ldr	r3, [r7, #24]
 80164ea:	687a      	ldr	r2, [r7, #4]
 80164ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80164ee:	69bb      	ldr	r3, [r7, #24]
 80164f0:	68fa      	ldr	r2, [r7, #12]
 80164f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80164f4:	69bb      	ldr	r3, [r7, #24]
 80164f6:	68ba      	ldr	r2, [r7, #8]
 80164f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80164fa:	2101      	movs	r1, #1
 80164fc:	69b8      	ldr	r0, [r7, #24]
 80164fe:	f7ff fecb 	bl	8016298 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016502:	69bb      	ldr	r3, [r7, #24]
 8016504:	78fa      	ldrb	r2, [r7, #3]
 8016506:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801650a:	bf00      	nop
 801650c:	3710      	adds	r7, #16
 801650e:	46bd      	mov	sp, r7
 8016510:	bd80      	pop	{r7, pc}

08016512 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8016512:	b580      	push	{r7, lr}
 8016514:	b08a      	sub	sp, #40	; 0x28
 8016516:	af02      	add	r7, sp, #8
 8016518:	60f8      	str	r0, [r7, #12]
 801651a:	60b9      	str	r1, [r7, #8]
 801651c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d10a      	bne.n	801653a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8016524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016528:	f383 8811 	msr	BASEPRI, r3
 801652c:	f3bf 8f6f 	isb	sy
 8016530:	f3bf 8f4f 	dsb	sy
 8016534:	61bb      	str	r3, [r7, #24]
}
 8016536:	bf00      	nop
 8016538:	e7fe      	b.n	8016538 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801653a:	68ba      	ldr	r2, [r7, #8]
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	429a      	cmp	r2, r3
 8016540:	d90a      	bls.n	8016558 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8016542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016546:	f383 8811 	msr	BASEPRI, r3
 801654a:	f3bf 8f6f 	isb	sy
 801654e:	f3bf 8f4f 	dsb	sy
 8016552:	617b      	str	r3, [r7, #20]
}
 8016554:	bf00      	nop
 8016556:	e7fe      	b.n	8016556 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016558:	2302      	movs	r3, #2
 801655a:	9300      	str	r3, [sp, #0]
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	2200      	movs	r2, #0
 8016560:	2100      	movs	r1, #0
 8016562:	68f8      	ldr	r0, [r7, #12]
 8016564:	f7ff ff00 	bl	8016368 <xQueueGenericCreateStatic>
 8016568:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801656a:	69fb      	ldr	r3, [r7, #28]
 801656c:	2b00      	cmp	r3, #0
 801656e:	d002      	beq.n	8016576 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016570:	69fb      	ldr	r3, [r7, #28]
 8016572:	68ba      	ldr	r2, [r7, #8]
 8016574:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016576:	69fb      	ldr	r3, [r7, #28]
	}
 8016578:	4618      	mov	r0, r3
 801657a:	3720      	adds	r7, #32
 801657c:	46bd      	mov	sp, r7
 801657e:	bd80      	pop	{r7, pc}

08016580 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8016580:	b580      	push	{r7, lr}
 8016582:	b086      	sub	sp, #24
 8016584:	af00      	add	r7, sp, #0
 8016586:	6078      	str	r0, [r7, #4]
 8016588:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d10a      	bne.n	80165a6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8016590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016594:	f383 8811 	msr	BASEPRI, r3
 8016598:	f3bf 8f6f 	isb	sy
 801659c:	f3bf 8f4f 	dsb	sy
 80165a0:	613b      	str	r3, [r7, #16]
}
 80165a2:	bf00      	nop
 80165a4:	e7fe      	b.n	80165a4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80165a6:	683a      	ldr	r2, [r7, #0]
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	429a      	cmp	r2, r3
 80165ac:	d90a      	bls.n	80165c4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80165ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165b2:	f383 8811 	msr	BASEPRI, r3
 80165b6:	f3bf 8f6f 	isb	sy
 80165ba:	f3bf 8f4f 	dsb	sy
 80165be:	60fb      	str	r3, [r7, #12]
}
 80165c0:	bf00      	nop
 80165c2:	e7fe      	b.n	80165c2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80165c4:	2202      	movs	r2, #2
 80165c6:	2100      	movs	r1, #0
 80165c8:	6878      	ldr	r0, [r7, #4]
 80165ca:	f7ff ff45 	bl	8016458 <xQueueGenericCreate>
 80165ce:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80165d0:	697b      	ldr	r3, [r7, #20]
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d002      	beq.n	80165dc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80165d6:	697b      	ldr	r3, [r7, #20]
 80165d8:	683a      	ldr	r2, [r7, #0]
 80165da:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80165dc:	697b      	ldr	r3, [r7, #20]
	}
 80165de:	4618      	mov	r0, r3
 80165e0:	3718      	adds	r7, #24
 80165e2:	46bd      	mov	sp, r7
 80165e4:	bd80      	pop	{r7, pc}
	...

080165e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80165e8:	b580      	push	{r7, lr}
 80165ea:	b08e      	sub	sp, #56	; 0x38
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	60f8      	str	r0, [r7, #12]
 80165f0:	60b9      	str	r1, [r7, #8]
 80165f2:	607a      	str	r2, [r7, #4]
 80165f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80165f6:	2300      	movs	r3, #0
 80165f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80165fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016600:	2b00      	cmp	r3, #0
 8016602:	d10a      	bne.n	801661a <xQueueGenericSend+0x32>
	__asm volatile
 8016604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016608:	f383 8811 	msr	BASEPRI, r3
 801660c:	f3bf 8f6f 	isb	sy
 8016610:	f3bf 8f4f 	dsb	sy
 8016614:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016616:	bf00      	nop
 8016618:	e7fe      	b.n	8016618 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801661a:	68bb      	ldr	r3, [r7, #8]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d103      	bne.n	8016628 <xQueueGenericSend+0x40>
 8016620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016624:	2b00      	cmp	r3, #0
 8016626:	d101      	bne.n	801662c <xQueueGenericSend+0x44>
 8016628:	2301      	movs	r3, #1
 801662a:	e000      	b.n	801662e <xQueueGenericSend+0x46>
 801662c:	2300      	movs	r3, #0
 801662e:	2b00      	cmp	r3, #0
 8016630:	d10a      	bne.n	8016648 <xQueueGenericSend+0x60>
	__asm volatile
 8016632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016636:	f383 8811 	msr	BASEPRI, r3
 801663a:	f3bf 8f6f 	isb	sy
 801663e:	f3bf 8f4f 	dsb	sy
 8016642:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016644:	bf00      	nop
 8016646:	e7fe      	b.n	8016646 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016648:	683b      	ldr	r3, [r7, #0]
 801664a:	2b02      	cmp	r3, #2
 801664c:	d103      	bne.n	8016656 <xQueueGenericSend+0x6e>
 801664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016652:	2b01      	cmp	r3, #1
 8016654:	d101      	bne.n	801665a <xQueueGenericSend+0x72>
 8016656:	2301      	movs	r3, #1
 8016658:	e000      	b.n	801665c <xQueueGenericSend+0x74>
 801665a:	2300      	movs	r3, #0
 801665c:	2b00      	cmp	r3, #0
 801665e:	d10a      	bne.n	8016676 <xQueueGenericSend+0x8e>
	__asm volatile
 8016660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016664:	f383 8811 	msr	BASEPRI, r3
 8016668:	f3bf 8f6f 	isb	sy
 801666c:	f3bf 8f4f 	dsb	sy
 8016670:	623b      	str	r3, [r7, #32]
}
 8016672:	bf00      	nop
 8016674:	e7fe      	b.n	8016674 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016676:	f001 fc65 	bl	8017f44 <xTaskGetSchedulerState>
 801667a:	4603      	mov	r3, r0
 801667c:	2b00      	cmp	r3, #0
 801667e:	d102      	bne.n	8016686 <xQueueGenericSend+0x9e>
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	2b00      	cmp	r3, #0
 8016684:	d101      	bne.n	801668a <xQueueGenericSend+0xa2>
 8016686:	2301      	movs	r3, #1
 8016688:	e000      	b.n	801668c <xQueueGenericSend+0xa4>
 801668a:	2300      	movs	r3, #0
 801668c:	2b00      	cmp	r3, #0
 801668e:	d10a      	bne.n	80166a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8016690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016694:	f383 8811 	msr	BASEPRI, r3
 8016698:	f3bf 8f6f 	isb	sy
 801669c:	f3bf 8f4f 	dsb	sy
 80166a0:	61fb      	str	r3, [r7, #28]
}
 80166a2:	bf00      	nop
 80166a4:	e7fe      	b.n	80166a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80166a6:	f002 faa5 	bl	8018bf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80166aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80166ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80166b2:	429a      	cmp	r2, r3
 80166b4:	d302      	bcc.n	80166bc <xQueueGenericSend+0xd4>
 80166b6:	683b      	ldr	r3, [r7, #0]
 80166b8:	2b02      	cmp	r3, #2
 80166ba:	d129      	bne.n	8016710 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80166bc:	683a      	ldr	r2, [r7, #0]
 80166be:	68b9      	ldr	r1, [r7, #8]
 80166c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80166c2:	f000 fc5e 	bl	8016f82 <prvCopyDataToQueue>
 80166c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80166c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d010      	beq.n	80166f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80166d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166d2:	3324      	adds	r3, #36	; 0x24
 80166d4:	4618      	mov	r0, r3
 80166d6:	f001 fa73 	bl	8017bc0 <xTaskRemoveFromEventList>
 80166da:	4603      	mov	r3, r0
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d013      	beq.n	8016708 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80166e0:	4b3f      	ldr	r3, [pc, #252]	; (80167e0 <xQueueGenericSend+0x1f8>)
 80166e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80166e6:	601a      	str	r2, [r3, #0]
 80166e8:	f3bf 8f4f 	dsb	sy
 80166ec:	f3bf 8f6f 	isb	sy
 80166f0:	e00a      	b.n	8016708 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80166f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d007      	beq.n	8016708 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80166f8:	4b39      	ldr	r3, [pc, #228]	; (80167e0 <xQueueGenericSend+0x1f8>)
 80166fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80166fe:	601a      	str	r2, [r3, #0]
 8016700:	f3bf 8f4f 	dsb	sy
 8016704:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016708:	f002 faa4 	bl	8018c54 <vPortExitCritical>
				return pdPASS;
 801670c:	2301      	movs	r3, #1
 801670e:	e063      	b.n	80167d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d103      	bne.n	801671e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016716:	f002 fa9d 	bl	8018c54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801671a:	2300      	movs	r3, #0
 801671c:	e05c      	b.n	80167d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801671e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016720:	2b00      	cmp	r3, #0
 8016722:	d106      	bne.n	8016732 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016724:	f107 0314 	add.w	r3, r7, #20
 8016728:	4618      	mov	r0, r3
 801672a:	f001 faad 	bl	8017c88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801672e:	2301      	movs	r3, #1
 8016730:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016732:	f002 fa8f 	bl	8018c54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016736:	f001 f819 	bl	801776c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801673a:	f002 fa5b 	bl	8018bf4 <vPortEnterCritical>
 801673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016740:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016744:	b25b      	sxtb	r3, r3
 8016746:	f1b3 3fff 	cmp.w	r3, #4294967295
 801674a:	d103      	bne.n	8016754 <xQueueGenericSend+0x16c>
 801674c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801674e:	2200      	movs	r2, #0
 8016750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016756:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801675a:	b25b      	sxtb	r3, r3
 801675c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016760:	d103      	bne.n	801676a <xQueueGenericSend+0x182>
 8016762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016764:	2200      	movs	r2, #0
 8016766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801676a:	f002 fa73 	bl	8018c54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801676e:	1d3a      	adds	r2, r7, #4
 8016770:	f107 0314 	add.w	r3, r7, #20
 8016774:	4611      	mov	r1, r2
 8016776:	4618      	mov	r0, r3
 8016778:	f001 fa9c 	bl	8017cb4 <xTaskCheckForTimeOut>
 801677c:	4603      	mov	r3, r0
 801677e:	2b00      	cmp	r3, #0
 8016780:	d124      	bne.n	80167cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016782:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016784:	f000 fcf5 	bl	8017172 <prvIsQueueFull>
 8016788:	4603      	mov	r3, r0
 801678a:	2b00      	cmp	r3, #0
 801678c:	d018      	beq.n	80167c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016790:	3310      	adds	r3, #16
 8016792:	687a      	ldr	r2, [r7, #4]
 8016794:	4611      	mov	r1, r2
 8016796:	4618      	mov	r0, r3
 8016798:	f001 f9c2 	bl	8017b20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801679c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801679e:	f000 fc80 	bl	80170a2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80167a2:	f000 fff1 	bl	8017788 <xTaskResumeAll>
 80167a6:	4603      	mov	r3, r0
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	f47f af7c 	bne.w	80166a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80167ae:	4b0c      	ldr	r3, [pc, #48]	; (80167e0 <xQueueGenericSend+0x1f8>)
 80167b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80167b4:	601a      	str	r2, [r3, #0]
 80167b6:	f3bf 8f4f 	dsb	sy
 80167ba:	f3bf 8f6f 	isb	sy
 80167be:	e772      	b.n	80166a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80167c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80167c2:	f000 fc6e 	bl	80170a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80167c6:	f000 ffdf 	bl	8017788 <xTaskResumeAll>
 80167ca:	e76c      	b.n	80166a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80167cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80167ce:	f000 fc68 	bl	80170a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80167d2:	f000 ffd9 	bl	8017788 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80167d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80167d8:	4618      	mov	r0, r3
 80167da:	3738      	adds	r7, #56	; 0x38
 80167dc:	46bd      	mov	sp, r7
 80167de:	bd80      	pop	{r7, pc}
 80167e0:	e000ed04 	.word	0xe000ed04

080167e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80167e4:	b580      	push	{r7, lr}
 80167e6:	b090      	sub	sp, #64	; 0x40
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	60f8      	str	r0, [r7, #12]
 80167ec:	60b9      	str	r1, [r7, #8]
 80167ee:	607a      	str	r2, [r7, #4]
 80167f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80167f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d10a      	bne.n	8016812 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80167fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016800:	f383 8811 	msr	BASEPRI, r3
 8016804:	f3bf 8f6f 	isb	sy
 8016808:	f3bf 8f4f 	dsb	sy
 801680c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801680e:	bf00      	nop
 8016810:	e7fe      	b.n	8016810 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016812:	68bb      	ldr	r3, [r7, #8]
 8016814:	2b00      	cmp	r3, #0
 8016816:	d103      	bne.n	8016820 <xQueueGenericSendFromISR+0x3c>
 8016818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801681a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801681c:	2b00      	cmp	r3, #0
 801681e:	d101      	bne.n	8016824 <xQueueGenericSendFromISR+0x40>
 8016820:	2301      	movs	r3, #1
 8016822:	e000      	b.n	8016826 <xQueueGenericSendFromISR+0x42>
 8016824:	2300      	movs	r3, #0
 8016826:	2b00      	cmp	r3, #0
 8016828:	d10a      	bne.n	8016840 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801682a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801682e:	f383 8811 	msr	BASEPRI, r3
 8016832:	f3bf 8f6f 	isb	sy
 8016836:	f3bf 8f4f 	dsb	sy
 801683a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801683c:	bf00      	nop
 801683e:	e7fe      	b.n	801683e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016840:	683b      	ldr	r3, [r7, #0]
 8016842:	2b02      	cmp	r3, #2
 8016844:	d103      	bne.n	801684e <xQueueGenericSendFromISR+0x6a>
 8016846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801684a:	2b01      	cmp	r3, #1
 801684c:	d101      	bne.n	8016852 <xQueueGenericSendFromISR+0x6e>
 801684e:	2301      	movs	r3, #1
 8016850:	e000      	b.n	8016854 <xQueueGenericSendFromISR+0x70>
 8016852:	2300      	movs	r3, #0
 8016854:	2b00      	cmp	r3, #0
 8016856:	d10a      	bne.n	801686e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8016858:	f04f 0350 	mov.w	r3, #80	; 0x50
 801685c:	f383 8811 	msr	BASEPRI, r3
 8016860:	f3bf 8f6f 	isb	sy
 8016864:	f3bf 8f4f 	dsb	sy
 8016868:	623b      	str	r3, [r7, #32]
}
 801686a:	bf00      	nop
 801686c:	e7fe      	b.n	801686c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801686e:	f002 faa3 	bl	8018db8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016872:	f3ef 8211 	mrs	r2, BASEPRI
 8016876:	f04f 0350 	mov.w	r3, #80	; 0x50
 801687a:	f383 8811 	msr	BASEPRI, r3
 801687e:	f3bf 8f6f 	isb	sy
 8016882:	f3bf 8f4f 	dsb	sy
 8016886:	61fa      	str	r2, [r7, #28]
 8016888:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801688a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801688c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801688e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016896:	429a      	cmp	r2, r3
 8016898:	d302      	bcc.n	80168a0 <xQueueGenericSendFromISR+0xbc>
 801689a:	683b      	ldr	r3, [r7, #0]
 801689c:	2b02      	cmp	r3, #2
 801689e:	d12f      	bne.n	8016900 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80168a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80168a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80168aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80168b0:	683a      	ldr	r2, [r7, #0]
 80168b2:	68b9      	ldr	r1, [r7, #8]
 80168b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80168b6:	f000 fb64 	bl	8016f82 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80168ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80168be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168c2:	d112      	bne.n	80168ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80168c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d016      	beq.n	80168fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80168cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168ce:	3324      	adds	r3, #36	; 0x24
 80168d0:	4618      	mov	r0, r3
 80168d2:	f001 f975 	bl	8017bc0 <xTaskRemoveFromEventList>
 80168d6:	4603      	mov	r3, r0
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d00e      	beq.n	80168fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d00b      	beq.n	80168fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	2201      	movs	r2, #1
 80168e6:	601a      	str	r2, [r3, #0]
 80168e8:	e007      	b.n	80168fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80168ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80168ee:	3301      	adds	r3, #1
 80168f0:	b2db      	uxtb	r3, r3
 80168f2:	b25a      	sxtb	r2, r3
 80168f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80168fa:	2301      	movs	r3, #1
 80168fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80168fe:	e001      	b.n	8016904 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016900:	2300      	movs	r3, #0
 8016902:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016906:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016908:	697b      	ldr	r3, [r7, #20]
 801690a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801690e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8016912:	4618      	mov	r0, r3
 8016914:	3740      	adds	r7, #64	; 0x40
 8016916:	46bd      	mov	sp, r7
 8016918:	bd80      	pop	{r7, pc}

0801691a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801691a:	b580      	push	{r7, lr}
 801691c:	b08e      	sub	sp, #56	; 0x38
 801691e:	af00      	add	r7, sp, #0
 8016920:	6078      	str	r0, [r7, #4]
 8016922:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8016928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801692a:	2b00      	cmp	r3, #0
 801692c:	d10a      	bne.n	8016944 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016932:	f383 8811 	msr	BASEPRI, r3
 8016936:	f3bf 8f6f 	isb	sy
 801693a:	f3bf 8f4f 	dsb	sy
 801693e:	623b      	str	r3, [r7, #32]
}
 8016940:	bf00      	nop
 8016942:	e7fe      	b.n	8016942 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016948:	2b00      	cmp	r3, #0
 801694a:	d00a      	beq.n	8016962 <xQueueGiveFromISR+0x48>
	__asm volatile
 801694c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016950:	f383 8811 	msr	BASEPRI, r3
 8016954:	f3bf 8f6f 	isb	sy
 8016958:	f3bf 8f4f 	dsb	sy
 801695c:	61fb      	str	r3, [r7, #28]
}
 801695e:	bf00      	nop
 8016960:	e7fe      	b.n	8016960 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8016962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	2b00      	cmp	r3, #0
 8016968:	d103      	bne.n	8016972 <xQueueGiveFromISR+0x58>
 801696a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801696c:	689b      	ldr	r3, [r3, #8]
 801696e:	2b00      	cmp	r3, #0
 8016970:	d101      	bne.n	8016976 <xQueueGiveFromISR+0x5c>
 8016972:	2301      	movs	r3, #1
 8016974:	e000      	b.n	8016978 <xQueueGiveFromISR+0x5e>
 8016976:	2300      	movs	r3, #0
 8016978:	2b00      	cmp	r3, #0
 801697a:	d10a      	bne.n	8016992 <xQueueGiveFromISR+0x78>
	__asm volatile
 801697c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016980:	f383 8811 	msr	BASEPRI, r3
 8016984:	f3bf 8f6f 	isb	sy
 8016988:	f3bf 8f4f 	dsb	sy
 801698c:	61bb      	str	r3, [r7, #24]
}
 801698e:	bf00      	nop
 8016990:	e7fe      	b.n	8016990 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016992:	f002 fa11 	bl	8018db8 <vPortValidateInterruptPriority>
	__asm volatile
 8016996:	f3ef 8211 	mrs	r2, BASEPRI
 801699a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801699e:	f383 8811 	msr	BASEPRI, r3
 80169a2:	f3bf 8f6f 	isb	sy
 80169a6:	f3bf 8f4f 	dsb	sy
 80169aa:	617a      	str	r2, [r7, #20]
 80169ac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80169ae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80169b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80169b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80169b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80169bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80169be:	429a      	cmp	r2, r3
 80169c0:	d22b      	bcs.n	8016a1a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80169c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80169c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80169cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169ce:	1c5a      	adds	r2, r3, #1
 80169d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80169d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80169d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169dc:	d112      	bne.n	8016a04 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80169de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d016      	beq.n	8016a14 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80169e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169e8:	3324      	adds	r3, #36	; 0x24
 80169ea:	4618      	mov	r0, r3
 80169ec:	f001 f8e8 	bl	8017bc0 <xTaskRemoveFromEventList>
 80169f0:	4603      	mov	r3, r0
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d00e      	beq.n	8016a14 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80169f6:	683b      	ldr	r3, [r7, #0]
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d00b      	beq.n	8016a14 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80169fc:	683b      	ldr	r3, [r7, #0]
 80169fe:	2201      	movs	r2, #1
 8016a00:	601a      	str	r2, [r3, #0]
 8016a02:	e007      	b.n	8016a14 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016a04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016a08:	3301      	adds	r3, #1
 8016a0a:	b2db      	uxtb	r3, r3
 8016a0c:	b25a      	sxtb	r2, r3
 8016a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016a14:	2301      	movs	r3, #1
 8016a16:	637b      	str	r3, [r7, #52]	; 0x34
 8016a18:	e001      	b.n	8016a1e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8016a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a20:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	f383 8811 	msr	BASEPRI, r3
}
 8016a28:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016a2c:	4618      	mov	r0, r3
 8016a2e:	3738      	adds	r7, #56	; 0x38
 8016a30:	46bd      	mov	sp, r7
 8016a32:	bd80      	pop	{r7, pc}

08016a34 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016a34:	b580      	push	{r7, lr}
 8016a36:	b08c      	sub	sp, #48	; 0x30
 8016a38:	af00      	add	r7, sp, #0
 8016a3a:	60f8      	str	r0, [r7, #12]
 8016a3c:	60b9      	str	r1, [r7, #8]
 8016a3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016a40:	2300      	movs	r3, #0
 8016a42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d10a      	bne.n	8016a64 <xQueueReceive+0x30>
	__asm volatile
 8016a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a52:	f383 8811 	msr	BASEPRI, r3
 8016a56:	f3bf 8f6f 	isb	sy
 8016a5a:	f3bf 8f4f 	dsb	sy
 8016a5e:	623b      	str	r3, [r7, #32]
}
 8016a60:	bf00      	nop
 8016a62:	e7fe      	b.n	8016a62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016a64:	68bb      	ldr	r3, [r7, #8]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d103      	bne.n	8016a72 <xQueueReceive+0x3e>
 8016a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d101      	bne.n	8016a76 <xQueueReceive+0x42>
 8016a72:	2301      	movs	r3, #1
 8016a74:	e000      	b.n	8016a78 <xQueueReceive+0x44>
 8016a76:	2300      	movs	r3, #0
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d10a      	bne.n	8016a92 <xQueueReceive+0x5e>
	__asm volatile
 8016a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a80:	f383 8811 	msr	BASEPRI, r3
 8016a84:	f3bf 8f6f 	isb	sy
 8016a88:	f3bf 8f4f 	dsb	sy
 8016a8c:	61fb      	str	r3, [r7, #28]
}
 8016a8e:	bf00      	nop
 8016a90:	e7fe      	b.n	8016a90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016a92:	f001 fa57 	bl	8017f44 <xTaskGetSchedulerState>
 8016a96:	4603      	mov	r3, r0
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d102      	bne.n	8016aa2 <xQueueReceive+0x6e>
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d101      	bne.n	8016aa6 <xQueueReceive+0x72>
 8016aa2:	2301      	movs	r3, #1
 8016aa4:	e000      	b.n	8016aa8 <xQueueReceive+0x74>
 8016aa6:	2300      	movs	r3, #0
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d10a      	bne.n	8016ac2 <xQueueReceive+0x8e>
	__asm volatile
 8016aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ab0:	f383 8811 	msr	BASEPRI, r3
 8016ab4:	f3bf 8f6f 	isb	sy
 8016ab8:	f3bf 8f4f 	dsb	sy
 8016abc:	61bb      	str	r3, [r7, #24]
}
 8016abe:	bf00      	nop
 8016ac0:	e7fe      	b.n	8016ac0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016ac2:	f002 f897 	bl	8018bf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016aca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d01f      	beq.n	8016b12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016ad2:	68b9      	ldr	r1, [r7, #8]
 8016ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ad6:	f000 fabe 	bl	8017056 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016adc:	1e5a      	subs	r2, r3, #1
 8016ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ae0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ae4:	691b      	ldr	r3, [r3, #16]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d00f      	beq.n	8016b0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016aec:	3310      	adds	r3, #16
 8016aee:	4618      	mov	r0, r3
 8016af0:	f001 f866 	bl	8017bc0 <xTaskRemoveFromEventList>
 8016af4:	4603      	mov	r3, r0
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d007      	beq.n	8016b0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016afa:	4b3d      	ldr	r3, [pc, #244]	; (8016bf0 <xQueueReceive+0x1bc>)
 8016afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b00:	601a      	str	r2, [r3, #0]
 8016b02:	f3bf 8f4f 	dsb	sy
 8016b06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016b0a:	f002 f8a3 	bl	8018c54 <vPortExitCritical>
				return pdPASS;
 8016b0e:	2301      	movs	r3, #1
 8016b10:	e069      	b.n	8016be6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d103      	bne.n	8016b20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016b18:	f002 f89c 	bl	8018c54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016b1c:	2300      	movs	r3, #0
 8016b1e:	e062      	b.n	8016be6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d106      	bne.n	8016b34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016b26:	f107 0310 	add.w	r3, r7, #16
 8016b2a:	4618      	mov	r0, r3
 8016b2c:	f001 f8ac 	bl	8017c88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016b30:	2301      	movs	r3, #1
 8016b32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016b34:	f002 f88e 	bl	8018c54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016b38:	f000 fe18 	bl	801776c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016b3c:	f002 f85a 	bl	8018bf4 <vPortEnterCritical>
 8016b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016b46:	b25b      	sxtb	r3, r3
 8016b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b4c:	d103      	bne.n	8016b56 <xQueueReceive+0x122>
 8016b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b50:	2200      	movs	r2, #0
 8016b52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016b5c:	b25b      	sxtb	r3, r3
 8016b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b62:	d103      	bne.n	8016b6c <xQueueReceive+0x138>
 8016b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b66:	2200      	movs	r2, #0
 8016b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016b6c:	f002 f872 	bl	8018c54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016b70:	1d3a      	adds	r2, r7, #4
 8016b72:	f107 0310 	add.w	r3, r7, #16
 8016b76:	4611      	mov	r1, r2
 8016b78:	4618      	mov	r0, r3
 8016b7a:	f001 f89b 	bl	8017cb4 <xTaskCheckForTimeOut>
 8016b7e:	4603      	mov	r3, r0
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d123      	bne.n	8016bcc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016b84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016b86:	f000 fade 	bl	8017146 <prvIsQueueEmpty>
 8016b8a:	4603      	mov	r3, r0
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d017      	beq.n	8016bc0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b92:	3324      	adds	r3, #36	; 0x24
 8016b94:	687a      	ldr	r2, [r7, #4]
 8016b96:	4611      	mov	r1, r2
 8016b98:	4618      	mov	r0, r3
 8016b9a:	f000 ffc1 	bl	8017b20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016b9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ba0:	f000 fa7f 	bl	80170a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016ba4:	f000 fdf0 	bl	8017788 <xTaskResumeAll>
 8016ba8:	4603      	mov	r3, r0
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d189      	bne.n	8016ac2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8016bae:	4b10      	ldr	r3, [pc, #64]	; (8016bf0 <xQueueReceive+0x1bc>)
 8016bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016bb4:	601a      	str	r2, [r3, #0]
 8016bb6:	f3bf 8f4f 	dsb	sy
 8016bba:	f3bf 8f6f 	isb	sy
 8016bbe:	e780      	b.n	8016ac2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016bc2:	f000 fa6e 	bl	80170a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016bc6:	f000 fddf 	bl	8017788 <xTaskResumeAll>
 8016bca:	e77a      	b.n	8016ac2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016bcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016bce:	f000 fa68 	bl	80170a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016bd2:	f000 fdd9 	bl	8017788 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016bd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016bd8:	f000 fab5 	bl	8017146 <prvIsQueueEmpty>
 8016bdc:	4603      	mov	r3, r0
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	f43f af6f 	beq.w	8016ac2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016be4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016be6:	4618      	mov	r0, r3
 8016be8:	3730      	adds	r7, #48	; 0x30
 8016bea:	46bd      	mov	sp, r7
 8016bec:	bd80      	pop	{r7, pc}
 8016bee:	bf00      	nop
 8016bf0:	e000ed04 	.word	0xe000ed04

08016bf4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	b08e      	sub	sp, #56	; 0x38
 8016bf8:	af00      	add	r7, sp, #0
 8016bfa:	6078      	str	r0, [r7, #4]
 8016bfc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8016bfe:	2300      	movs	r3, #0
 8016c00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8016c06:	2300      	movs	r3, #0
 8016c08:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d10a      	bne.n	8016c26 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8016c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c14:	f383 8811 	msr	BASEPRI, r3
 8016c18:	f3bf 8f6f 	isb	sy
 8016c1c:	f3bf 8f4f 	dsb	sy
 8016c20:	623b      	str	r3, [r7, #32]
}
 8016c22:	bf00      	nop
 8016c24:	e7fe      	b.n	8016c24 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d00a      	beq.n	8016c44 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8016c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c32:	f383 8811 	msr	BASEPRI, r3
 8016c36:	f3bf 8f6f 	isb	sy
 8016c3a:	f3bf 8f4f 	dsb	sy
 8016c3e:	61fb      	str	r3, [r7, #28]
}
 8016c40:	bf00      	nop
 8016c42:	e7fe      	b.n	8016c42 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016c44:	f001 f97e 	bl	8017f44 <xTaskGetSchedulerState>
 8016c48:	4603      	mov	r3, r0
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d102      	bne.n	8016c54 <xQueueSemaphoreTake+0x60>
 8016c4e:	683b      	ldr	r3, [r7, #0]
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d101      	bne.n	8016c58 <xQueueSemaphoreTake+0x64>
 8016c54:	2301      	movs	r3, #1
 8016c56:	e000      	b.n	8016c5a <xQueueSemaphoreTake+0x66>
 8016c58:	2300      	movs	r3, #0
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d10a      	bne.n	8016c74 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8016c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c62:	f383 8811 	msr	BASEPRI, r3
 8016c66:	f3bf 8f6f 	isb	sy
 8016c6a:	f3bf 8f4f 	dsb	sy
 8016c6e:	61bb      	str	r3, [r7, #24]
}
 8016c70:	bf00      	nop
 8016c72:	e7fe      	b.n	8016c72 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016c74:	f001 ffbe 	bl	8018bf4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c7c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8016c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d024      	beq.n	8016cce <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8016c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c86:	1e5a      	subs	r2, r3, #1
 8016c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c8a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d104      	bne.n	8016c9e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8016c94:	f001 facc 	bl	8018230 <pvTaskIncrementMutexHeldCount>
 8016c98:	4602      	mov	r2, r0
 8016c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c9c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ca0:	691b      	ldr	r3, [r3, #16]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d00f      	beq.n	8016cc6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ca8:	3310      	adds	r3, #16
 8016caa:	4618      	mov	r0, r3
 8016cac:	f000 ff88 	bl	8017bc0 <xTaskRemoveFromEventList>
 8016cb0:	4603      	mov	r3, r0
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d007      	beq.n	8016cc6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016cb6:	4b54      	ldr	r3, [pc, #336]	; (8016e08 <xQueueSemaphoreTake+0x214>)
 8016cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016cbc:	601a      	str	r2, [r3, #0]
 8016cbe:	f3bf 8f4f 	dsb	sy
 8016cc2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016cc6:	f001 ffc5 	bl	8018c54 <vPortExitCritical>
				return pdPASS;
 8016cca:	2301      	movs	r3, #1
 8016ccc:	e097      	b.n	8016dfe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016cce:	683b      	ldr	r3, [r7, #0]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d111      	bne.n	8016cf8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8016cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d00a      	beq.n	8016cf0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8016cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cde:	f383 8811 	msr	BASEPRI, r3
 8016ce2:	f3bf 8f6f 	isb	sy
 8016ce6:	f3bf 8f4f 	dsb	sy
 8016cea:	617b      	str	r3, [r7, #20]
}
 8016cec:	bf00      	nop
 8016cee:	e7fe      	b.n	8016cee <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8016cf0:	f001 ffb0 	bl	8018c54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	e082      	b.n	8016dfe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d106      	bne.n	8016d0c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016cfe:	f107 030c 	add.w	r3, r7, #12
 8016d02:	4618      	mov	r0, r3
 8016d04:	f000 ffc0 	bl	8017c88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016d08:	2301      	movs	r3, #1
 8016d0a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016d0c:	f001 ffa2 	bl	8018c54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016d10:	f000 fd2c 	bl	801776c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016d14:	f001 ff6e 	bl	8018bf4 <vPortEnterCritical>
 8016d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016d1e:	b25b      	sxtb	r3, r3
 8016d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d24:	d103      	bne.n	8016d2e <xQueueSemaphoreTake+0x13a>
 8016d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d28:	2200      	movs	r2, #0
 8016d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016d34:	b25b      	sxtb	r3, r3
 8016d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d3a:	d103      	bne.n	8016d44 <xQueueSemaphoreTake+0x150>
 8016d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d3e:	2200      	movs	r2, #0
 8016d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016d44:	f001 ff86 	bl	8018c54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016d48:	463a      	mov	r2, r7
 8016d4a:	f107 030c 	add.w	r3, r7, #12
 8016d4e:	4611      	mov	r1, r2
 8016d50:	4618      	mov	r0, r3
 8016d52:	f000 ffaf 	bl	8017cb4 <xTaskCheckForTimeOut>
 8016d56:	4603      	mov	r3, r0
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d132      	bne.n	8016dc2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016d5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016d5e:	f000 f9f2 	bl	8017146 <prvIsQueueEmpty>
 8016d62:	4603      	mov	r3, r0
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d026      	beq.n	8016db6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d109      	bne.n	8016d84 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8016d70:	f001 ff40 	bl	8018bf4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d76:	689b      	ldr	r3, [r3, #8]
 8016d78:	4618      	mov	r0, r3
 8016d7a:	f001 f901 	bl	8017f80 <xTaskPriorityInherit>
 8016d7e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8016d80:	f001 ff68 	bl	8018c54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d86:	3324      	adds	r3, #36	; 0x24
 8016d88:	683a      	ldr	r2, [r7, #0]
 8016d8a:	4611      	mov	r1, r2
 8016d8c:	4618      	mov	r0, r3
 8016d8e:	f000 fec7 	bl	8017b20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016d92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016d94:	f000 f985 	bl	80170a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016d98:	f000 fcf6 	bl	8017788 <xTaskResumeAll>
 8016d9c:	4603      	mov	r3, r0
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	f47f af68 	bne.w	8016c74 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8016da4:	4b18      	ldr	r3, [pc, #96]	; (8016e08 <xQueueSemaphoreTake+0x214>)
 8016da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016daa:	601a      	str	r2, [r3, #0]
 8016dac:	f3bf 8f4f 	dsb	sy
 8016db0:	f3bf 8f6f 	isb	sy
 8016db4:	e75e      	b.n	8016c74 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8016db6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016db8:	f000 f973 	bl	80170a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016dbc:	f000 fce4 	bl	8017788 <xTaskResumeAll>
 8016dc0:	e758      	b.n	8016c74 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8016dc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016dc4:	f000 f96d 	bl	80170a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016dc8:	f000 fcde 	bl	8017788 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016dcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016dce:	f000 f9ba 	bl	8017146 <prvIsQueueEmpty>
 8016dd2:	4603      	mov	r3, r0
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	f43f af4d 	beq.w	8016c74 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8016dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d00d      	beq.n	8016dfc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8016de0:	f001 ff08 	bl	8018bf4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8016de4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016de6:	f000 f8b4 	bl	8016f52 <prvGetDisinheritPriorityAfterTimeout>
 8016dea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8016dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dee:	689b      	ldr	r3, [r3, #8]
 8016df0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016df2:	4618      	mov	r0, r3
 8016df4:	f001 f99a 	bl	801812c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8016df8:	f001 ff2c 	bl	8018c54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016dfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016dfe:	4618      	mov	r0, r3
 8016e00:	3738      	adds	r7, #56	; 0x38
 8016e02:	46bd      	mov	sp, r7
 8016e04:	bd80      	pop	{r7, pc}
 8016e06:	bf00      	nop
 8016e08:	e000ed04 	.word	0xe000ed04

08016e0c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016e0c:	b580      	push	{r7, lr}
 8016e0e:	b08e      	sub	sp, #56	; 0x38
 8016e10:	af00      	add	r7, sp, #0
 8016e12:	60f8      	str	r0, [r7, #12]
 8016e14:	60b9      	str	r1, [r7, #8]
 8016e16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d10a      	bne.n	8016e38 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8016e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e26:	f383 8811 	msr	BASEPRI, r3
 8016e2a:	f3bf 8f6f 	isb	sy
 8016e2e:	f3bf 8f4f 	dsb	sy
 8016e32:	623b      	str	r3, [r7, #32]
}
 8016e34:	bf00      	nop
 8016e36:	e7fe      	b.n	8016e36 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016e38:	68bb      	ldr	r3, [r7, #8]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d103      	bne.n	8016e46 <xQueueReceiveFromISR+0x3a>
 8016e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d101      	bne.n	8016e4a <xQueueReceiveFromISR+0x3e>
 8016e46:	2301      	movs	r3, #1
 8016e48:	e000      	b.n	8016e4c <xQueueReceiveFromISR+0x40>
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d10a      	bne.n	8016e66 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8016e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e54:	f383 8811 	msr	BASEPRI, r3
 8016e58:	f3bf 8f6f 	isb	sy
 8016e5c:	f3bf 8f4f 	dsb	sy
 8016e60:	61fb      	str	r3, [r7, #28]
}
 8016e62:	bf00      	nop
 8016e64:	e7fe      	b.n	8016e64 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016e66:	f001 ffa7 	bl	8018db8 <vPortValidateInterruptPriority>
	__asm volatile
 8016e6a:	f3ef 8211 	mrs	r2, BASEPRI
 8016e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e72:	f383 8811 	msr	BASEPRI, r3
 8016e76:	f3bf 8f6f 	isb	sy
 8016e7a:	f3bf 8f4f 	dsb	sy
 8016e7e:	61ba      	str	r2, [r7, #24]
 8016e80:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8016e82:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016e84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e8a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d02f      	beq.n	8016ef2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8016e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016e98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016e9c:	68b9      	ldr	r1, [r7, #8]
 8016e9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016ea0:	f000 f8d9 	bl	8017056 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ea6:	1e5a      	subs	r2, r3, #1
 8016ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eaa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8016eac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016eb4:	d112      	bne.n	8016edc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eb8:	691b      	ldr	r3, [r3, #16]
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d016      	beq.n	8016eec <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ec0:	3310      	adds	r3, #16
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	f000 fe7c 	bl	8017bc0 <xTaskRemoveFromEventList>
 8016ec8:	4603      	mov	r3, r0
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d00e      	beq.n	8016eec <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d00b      	beq.n	8016eec <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	2201      	movs	r2, #1
 8016ed8:	601a      	str	r2, [r3, #0]
 8016eda:	e007      	b.n	8016eec <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8016edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ee0:	3301      	adds	r3, #1
 8016ee2:	b2db      	uxtb	r3, r3
 8016ee4:	b25a      	sxtb	r2, r3
 8016ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8016eec:	2301      	movs	r3, #1
 8016eee:	637b      	str	r3, [r7, #52]	; 0x34
 8016ef0:	e001      	b.n	8016ef6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8016ef2:	2300      	movs	r3, #0
 8016ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8016ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ef8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8016efa:	693b      	ldr	r3, [r7, #16]
 8016efc:	f383 8811 	msr	BASEPRI, r3
}
 8016f00:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016f04:	4618      	mov	r0, r3
 8016f06:	3738      	adds	r7, #56	; 0x38
 8016f08:	46bd      	mov	sp, r7
 8016f0a:	bd80      	pop	{r7, pc}

08016f0c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8016f0c:	b580      	push	{r7, lr}
 8016f0e:	b084      	sub	sp, #16
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d10a      	bne.n	8016f34 <vQueueDelete+0x28>
	__asm volatile
 8016f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f22:	f383 8811 	msr	BASEPRI, r3
 8016f26:	f3bf 8f6f 	isb	sy
 8016f2a:	f3bf 8f4f 	dsb	sy
 8016f2e:	60bb      	str	r3, [r7, #8]
}
 8016f30:	bf00      	nop
 8016f32:	e7fe      	b.n	8016f32 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8016f34:	68f8      	ldr	r0, [r7, #12]
 8016f36:	f000 f95f 	bl	80171f8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d102      	bne.n	8016f4a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8016f44:	68f8      	ldr	r0, [r7, #12]
 8016f46:	f002 f843 	bl	8018fd0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8016f4a:	bf00      	nop
 8016f4c:	3710      	adds	r7, #16
 8016f4e:	46bd      	mov	sp, r7
 8016f50:	bd80      	pop	{r7, pc}

08016f52 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8016f52:	b480      	push	{r7}
 8016f54:	b085      	sub	sp, #20
 8016f56:	af00      	add	r7, sp, #0
 8016f58:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d006      	beq.n	8016f70 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f66:	681b      	ldr	r3, [r3, #0]
 8016f68:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8016f6c:	60fb      	str	r3, [r7, #12]
 8016f6e:	e001      	b.n	8016f74 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8016f70:	2300      	movs	r3, #0
 8016f72:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8016f74:	68fb      	ldr	r3, [r7, #12]
	}
 8016f76:	4618      	mov	r0, r3
 8016f78:	3714      	adds	r7, #20
 8016f7a:	46bd      	mov	sp, r7
 8016f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f80:	4770      	bx	lr

08016f82 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8016f82:	b580      	push	{r7, lr}
 8016f84:	b086      	sub	sp, #24
 8016f86:	af00      	add	r7, sp, #0
 8016f88:	60f8      	str	r0, [r7, #12]
 8016f8a:	60b9      	str	r1, [r7, #8]
 8016f8c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8016f8e:	2300      	movs	r3, #0
 8016f90:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f96:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d10d      	bne.n	8016fbc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	681b      	ldr	r3, [r3, #0]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d14d      	bne.n	8017044 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	689b      	ldr	r3, [r3, #8]
 8016fac:	4618      	mov	r0, r3
 8016fae:	f001 f84f 	bl	8018050 <xTaskPriorityDisinherit>
 8016fb2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	2200      	movs	r2, #0
 8016fb8:	609a      	str	r2, [r3, #8]
 8016fba:	e043      	b.n	8017044 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d119      	bne.n	8016ff6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	6858      	ldr	r0, [r3, #4]
 8016fc6:	68fb      	ldr	r3, [r7, #12]
 8016fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016fca:	461a      	mov	r2, r3
 8016fcc:	68b9      	ldr	r1, [r7, #8]
 8016fce:	f003 f8b9 	bl	801a144 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	685a      	ldr	r2, [r3, #4]
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016fda:	441a      	add	r2, r3
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016fe0:	68fb      	ldr	r3, [r7, #12]
 8016fe2:	685a      	ldr	r2, [r3, #4]
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	689b      	ldr	r3, [r3, #8]
 8016fe8:	429a      	cmp	r2, r3
 8016fea:	d32b      	bcc.n	8017044 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016fec:	68fb      	ldr	r3, [r7, #12]
 8016fee:	681a      	ldr	r2, [r3, #0]
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	605a      	str	r2, [r3, #4]
 8016ff4:	e026      	b.n	8017044 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	68d8      	ldr	r0, [r3, #12]
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ffe:	461a      	mov	r2, r3
 8017000:	68b9      	ldr	r1, [r7, #8]
 8017002:	f003 f89f 	bl	801a144 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	68da      	ldr	r2, [r3, #12]
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801700e:	425b      	negs	r3, r3
 8017010:	441a      	add	r2, r3
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	68da      	ldr	r2, [r3, #12]
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	429a      	cmp	r2, r3
 8017020:	d207      	bcs.n	8017032 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	689a      	ldr	r2, [r3, #8]
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801702a:	425b      	negs	r3, r3
 801702c:	441a      	add	r2, r3
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	2b02      	cmp	r3, #2
 8017036:	d105      	bne.n	8017044 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017038:	693b      	ldr	r3, [r7, #16]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d002      	beq.n	8017044 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801703e:	693b      	ldr	r3, [r7, #16]
 8017040:	3b01      	subs	r3, #1
 8017042:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017044:	693b      	ldr	r3, [r7, #16]
 8017046:	1c5a      	adds	r2, r3, #1
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801704c:	697b      	ldr	r3, [r7, #20]
}
 801704e:	4618      	mov	r0, r3
 8017050:	3718      	adds	r7, #24
 8017052:	46bd      	mov	sp, r7
 8017054:	bd80      	pop	{r7, pc}

08017056 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017056:	b580      	push	{r7, lr}
 8017058:	b082      	sub	sp, #8
 801705a:	af00      	add	r7, sp, #0
 801705c:	6078      	str	r0, [r7, #4]
 801705e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017064:	2b00      	cmp	r3, #0
 8017066:	d018      	beq.n	801709a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	68da      	ldr	r2, [r3, #12]
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017070:	441a      	add	r2, r3
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	68da      	ldr	r2, [r3, #12]
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	689b      	ldr	r3, [r3, #8]
 801707e:	429a      	cmp	r2, r3
 8017080:	d303      	bcc.n	801708a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	681a      	ldr	r2, [r3, #0]
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	68d9      	ldr	r1, [r3, #12]
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017092:	461a      	mov	r2, r3
 8017094:	6838      	ldr	r0, [r7, #0]
 8017096:	f003 f855 	bl	801a144 <memcpy>
	}
}
 801709a:	bf00      	nop
 801709c:	3708      	adds	r7, #8
 801709e:	46bd      	mov	sp, r7
 80170a0:	bd80      	pop	{r7, pc}

080170a2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80170a2:	b580      	push	{r7, lr}
 80170a4:	b084      	sub	sp, #16
 80170a6:	af00      	add	r7, sp, #0
 80170a8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80170aa:	f001 fda3 	bl	8018bf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80170b4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80170b6:	e011      	b.n	80170dc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d012      	beq.n	80170e6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	3324      	adds	r3, #36	; 0x24
 80170c4:	4618      	mov	r0, r3
 80170c6:	f000 fd7b 	bl	8017bc0 <xTaskRemoveFromEventList>
 80170ca:	4603      	mov	r3, r0
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d001      	beq.n	80170d4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80170d0:	f000 fe52 	bl	8017d78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80170d4:	7bfb      	ldrb	r3, [r7, #15]
 80170d6:	3b01      	subs	r3, #1
 80170d8:	b2db      	uxtb	r3, r3
 80170da:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80170dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	dce9      	bgt.n	80170b8 <prvUnlockQueue+0x16>
 80170e4:	e000      	b.n	80170e8 <prvUnlockQueue+0x46>
					break;
 80170e6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	22ff      	movs	r2, #255	; 0xff
 80170ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80170f0:	f001 fdb0 	bl	8018c54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80170f4:	f001 fd7e 	bl	8018bf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80170fe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017100:	e011      	b.n	8017126 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	691b      	ldr	r3, [r3, #16]
 8017106:	2b00      	cmp	r3, #0
 8017108:	d012      	beq.n	8017130 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	3310      	adds	r3, #16
 801710e:	4618      	mov	r0, r3
 8017110:	f000 fd56 	bl	8017bc0 <xTaskRemoveFromEventList>
 8017114:	4603      	mov	r3, r0
 8017116:	2b00      	cmp	r3, #0
 8017118:	d001      	beq.n	801711e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801711a:	f000 fe2d 	bl	8017d78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801711e:	7bbb      	ldrb	r3, [r7, #14]
 8017120:	3b01      	subs	r3, #1
 8017122:	b2db      	uxtb	r3, r3
 8017124:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017126:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801712a:	2b00      	cmp	r3, #0
 801712c:	dce9      	bgt.n	8017102 <prvUnlockQueue+0x60>
 801712e:	e000      	b.n	8017132 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017130:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	22ff      	movs	r2, #255	; 0xff
 8017136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801713a:	f001 fd8b 	bl	8018c54 <vPortExitCritical>
}
 801713e:	bf00      	nop
 8017140:	3710      	adds	r7, #16
 8017142:	46bd      	mov	sp, r7
 8017144:	bd80      	pop	{r7, pc}

08017146 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017146:	b580      	push	{r7, lr}
 8017148:	b084      	sub	sp, #16
 801714a:	af00      	add	r7, sp, #0
 801714c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801714e:	f001 fd51 	bl	8018bf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017156:	2b00      	cmp	r3, #0
 8017158:	d102      	bne.n	8017160 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801715a:	2301      	movs	r3, #1
 801715c:	60fb      	str	r3, [r7, #12]
 801715e:	e001      	b.n	8017164 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017160:	2300      	movs	r3, #0
 8017162:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017164:	f001 fd76 	bl	8018c54 <vPortExitCritical>

	return xReturn;
 8017168:	68fb      	ldr	r3, [r7, #12]
}
 801716a:	4618      	mov	r0, r3
 801716c:	3710      	adds	r7, #16
 801716e:	46bd      	mov	sp, r7
 8017170:	bd80      	pop	{r7, pc}

08017172 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017172:	b580      	push	{r7, lr}
 8017174:	b084      	sub	sp, #16
 8017176:	af00      	add	r7, sp, #0
 8017178:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801717a:	f001 fd3b 	bl	8018bf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017186:	429a      	cmp	r2, r3
 8017188:	d102      	bne.n	8017190 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801718a:	2301      	movs	r3, #1
 801718c:	60fb      	str	r3, [r7, #12]
 801718e:	e001      	b.n	8017194 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017190:	2300      	movs	r3, #0
 8017192:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017194:	f001 fd5e 	bl	8018c54 <vPortExitCritical>

	return xReturn;
 8017198:	68fb      	ldr	r3, [r7, #12]
}
 801719a:	4618      	mov	r0, r3
 801719c:	3710      	adds	r7, #16
 801719e:	46bd      	mov	sp, r7
 80171a0:	bd80      	pop	{r7, pc}
	...

080171a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80171a4:	b480      	push	{r7}
 80171a6:	b085      	sub	sp, #20
 80171a8:	af00      	add	r7, sp, #0
 80171aa:	6078      	str	r0, [r7, #4]
 80171ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80171ae:	2300      	movs	r3, #0
 80171b0:	60fb      	str	r3, [r7, #12]
 80171b2:	e014      	b.n	80171de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80171b4:	4a0f      	ldr	r2, [pc, #60]	; (80171f4 <vQueueAddToRegistry+0x50>)
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d10b      	bne.n	80171d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80171c0:	490c      	ldr	r1, [pc, #48]	; (80171f4 <vQueueAddToRegistry+0x50>)
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	683a      	ldr	r2, [r7, #0]
 80171c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80171ca:	4a0a      	ldr	r2, [pc, #40]	; (80171f4 <vQueueAddToRegistry+0x50>)
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	00db      	lsls	r3, r3, #3
 80171d0:	4413      	add	r3, r2
 80171d2:	687a      	ldr	r2, [r7, #4]
 80171d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80171d6:	e006      	b.n	80171e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	3301      	adds	r3, #1
 80171dc:	60fb      	str	r3, [r7, #12]
 80171de:	68fb      	ldr	r3, [r7, #12]
 80171e0:	2b07      	cmp	r3, #7
 80171e2:	d9e7      	bls.n	80171b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80171e4:	bf00      	nop
 80171e6:	bf00      	nop
 80171e8:	3714      	adds	r7, #20
 80171ea:	46bd      	mov	sp, r7
 80171ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171f0:	4770      	bx	lr
 80171f2:	bf00      	nop
 80171f4:	20007438 	.word	0x20007438

080171f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80171f8:	b480      	push	{r7}
 80171fa:	b085      	sub	sp, #20
 80171fc:	af00      	add	r7, sp, #0
 80171fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017200:	2300      	movs	r3, #0
 8017202:	60fb      	str	r3, [r7, #12]
 8017204:	e016      	b.n	8017234 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8017206:	4a10      	ldr	r2, [pc, #64]	; (8017248 <vQueueUnregisterQueue+0x50>)
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	00db      	lsls	r3, r3, #3
 801720c:	4413      	add	r3, r2
 801720e:	685b      	ldr	r3, [r3, #4]
 8017210:	687a      	ldr	r2, [r7, #4]
 8017212:	429a      	cmp	r2, r3
 8017214:	d10b      	bne.n	801722e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8017216:	4a0c      	ldr	r2, [pc, #48]	; (8017248 <vQueueUnregisterQueue+0x50>)
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	2100      	movs	r1, #0
 801721c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8017220:	4a09      	ldr	r2, [pc, #36]	; (8017248 <vQueueUnregisterQueue+0x50>)
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	00db      	lsls	r3, r3, #3
 8017226:	4413      	add	r3, r2
 8017228:	2200      	movs	r2, #0
 801722a:	605a      	str	r2, [r3, #4]
				break;
 801722c:	e006      	b.n	801723c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	3301      	adds	r3, #1
 8017232:	60fb      	str	r3, [r7, #12]
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	2b07      	cmp	r3, #7
 8017238:	d9e5      	bls.n	8017206 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801723a:	bf00      	nop
 801723c:	bf00      	nop
 801723e:	3714      	adds	r7, #20
 8017240:	46bd      	mov	sp, r7
 8017242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017246:	4770      	bx	lr
 8017248:	20007438 	.word	0x20007438

0801724c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801724c:	b580      	push	{r7, lr}
 801724e:	b086      	sub	sp, #24
 8017250:	af00      	add	r7, sp, #0
 8017252:	60f8      	str	r0, [r7, #12]
 8017254:	60b9      	str	r1, [r7, #8]
 8017256:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017258:	68fb      	ldr	r3, [r7, #12]
 801725a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801725c:	f001 fcca 	bl	8018bf4 <vPortEnterCritical>
 8017260:	697b      	ldr	r3, [r7, #20]
 8017262:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017266:	b25b      	sxtb	r3, r3
 8017268:	f1b3 3fff 	cmp.w	r3, #4294967295
 801726c:	d103      	bne.n	8017276 <vQueueWaitForMessageRestricted+0x2a>
 801726e:	697b      	ldr	r3, [r7, #20]
 8017270:	2200      	movs	r2, #0
 8017272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017276:	697b      	ldr	r3, [r7, #20]
 8017278:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801727c:	b25b      	sxtb	r3, r3
 801727e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017282:	d103      	bne.n	801728c <vQueueWaitForMessageRestricted+0x40>
 8017284:	697b      	ldr	r3, [r7, #20]
 8017286:	2200      	movs	r2, #0
 8017288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801728c:	f001 fce2 	bl	8018c54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017290:	697b      	ldr	r3, [r7, #20]
 8017292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017294:	2b00      	cmp	r3, #0
 8017296:	d106      	bne.n	80172a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017298:	697b      	ldr	r3, [r7, #20]
 801729a:	3324      	adds	r3, #36	; 0x24
 801729c:	687a      	ldr	r2, [r7, #4]
 801729e:	68b9      	ldr	r1, [r7, #8]
 80172a0:	4618      	mov	r0, r3
 80172a2:	f000 fc61 	bl	8017b68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80172a6:	6978      	ldr	r0, [r7, #20]
 80172a8:	f7ff fefb 	bl	80170a2 <prvUnlockQueue>
	}
 80172ac:	bf00      	nop
 80172ae:	3718      	adds	r7, #24
 80172b0:	46bd      	mov	sp, r7
 80172b2:	bd80      	pop	{r7, pc}

080172b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80172b4:	b580      	push	{r7, lr}
 80172b6:	b08e      	sub	sp, #56	; 0x38
 80172b8:	af04      	add	r7, sp, #16
 80172ba:	60f8      	str	r0, [r7, #12]
 80172bc:	60b9      	str	r1, [r7, #8]
 80172be:	607a      	str	r2, [r7, #4]
 80172c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80172c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d10a      	bne.n	80172de <xTaskCreateStatic+0x2a>
	__asm volatile
 80172c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172cc:	f383 8811 	msr	BASEPRI, r3
 80172d0:	f3bf 8f6f 	isb	sy
 80172d4:	f3bf 8f4f 	dsb	sy
 80172d8:	623b      	str	r3, [r7, #32]
}
 80172da:	bf00      	nop
 80172dc:	e7fe      	b.n	80172dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80172de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d10a      	bne.n	80172fa <xTaskCreateStatic+0x46>
	__asm volatile
 80172e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172e8:	f383 8811 	msr	BASEPRI, r3
 80172ec:	f3bf 8f6f 	isb	sy
 80172f0:	f3bf 8f4f 	dsb	sy
 80172f4:	61fb      	str	r3, [r7, #28]
}
 80172f6:	bf00      	nop
 80172f8:	e7fe      	b.n	80172f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80172fa:	23bc      	movs	r3, #188	; 0xbc
 80172fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80172fe:	693b      	ldr	r3, [r7, #16]
 8017300:	2bbc      	cmp	r3, #188	; 0xbc
 8017302:	d00a      	beq.n	801731a <xTaskCreateStatic+0x66>
	__asm volatile
 8017304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017308:	f383 8811 	msr	BASEPRI, r3
 801730c:	f3bf 8f6f 	isb	sy
 8017310:	f3bf 8f4f 	dsb	sy
 8017314:	61bb      	str	r3, [r7, #24]
}
 8017316:	bf00      	nop
 8017318:	e7fe      	b.n	8017318 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801731a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801731c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801731e:	2b00      	cmp	r3, #0
 8017320:	d01e      	beq.n	8017360 <xTaskCreateStatic+0xac>
 8017322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017324:	2b00      	cmp	r3, #0
 8017326:	d01b      	beq.n	8017360 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801732a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801732e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017330:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017334:	2202      	movs	r2, #2
 8017336:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801733a:	2300      	movs	r3, #0
 801733c:	9303      	str	r3, [sp, #12]
 801733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017340:	9302      	str	r3, [sp, #8]
 8017342:	f107 0314 	add.w	r3, r7, #20
 8017346:	9301      	str	r3, [sp, #4]
 8017348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801734a:	9300      	str	r3, [sp, #0]
 801734c:	683b      	ldr	r3, [r7, #0]
 801734e:	687a      	ldr	r2, [r7, #4]
 8017350:	68b9      	ldr	r1, [r7, #8]
 8017352:	68f8      	ldr	r0, [r7, #12]
 8017354:	f000 f850 	bl	80173f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017358:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801735a:	f000 f8f3 	bl	8017544 <prvAddNewTaskToReadyList>
 801735e:	e001      	b.n	8017364 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8017360:	2300      	movs	r3, #0
 8017362:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017364:	697b      	ldr	r3, [r7, #20]
	}
 8017366:	4618      	mov	r0, r3
 8017368:	3728      	adds	r7, #40	; 0x28
 801736a:	46bd      	mov	sp, r7
 801736c:	bd80      	pop	{r7, pc}

0801736e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801736e:	b580      	push	{r7, lr}
 8017370:	b08c      	sub	sp, #48	; 0x30
 8017372:	af04      	add	r7, sp, #16
 8017374:	60f8      	str	r0, [r7, #12]
 8017376:	60b9      	str	r1, [r7, #8]
 8017378:	603b      	str	r3, [r7, #0]
 801737a:	4613      	mov	r3, r2
 801737c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801737e:	88fb      	ldrh	r3, [r7, #6]
 8017380:	009b      	lsls	r3, r3, #2
 8017382:	4618      	mov	r0, r3
 8017384:	f001 fd58 	bl	8018e38 <pvPortMalloc>
 8017388:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801738a:	697b      	ldr	r3, [r7, #20]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d00e      	beq.n	80173ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017390:	20bc      	movs	r0, #188	; 0xbc
 8017392:	f001 fd51 	bl	8018e38 <pvPortMalloc>
 8017396:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017398:	69fb      	ldr	r3, [r7, #28]
 801739a:	2b00      	cmp	r3, #0
 801739c:	d003      	beq.n	80173a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801739e:	69fb      	ldr	r3, [r7, #28]
 80173a0:	697a      	ldr	r2, [r7, #20]
 80173a2:	631a      	str	r2, [r3, #48]	; 0x30
 80173a4:	e005      	b.n	80173b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80173a6:	6978      	ldr	r0, [r7, #20]
 80173a8:	f001 fe12 	bl	8018fd0 <vPortFree>
 80173ac:	e001      	b.n	80173b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80173ae:	2300      	movs	r3, #0
 80173b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80173b2:	69fb      	ldr	r3, [r7, #28]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d017      	beq.n	80173e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80173b8:	69fb      	ldr	r3, [r7, #28]
 80173ba:	2200      	movs	r2, #0
 80173bc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80173c0:	88fa      	ldrh	r2, [r7, #6]
 80173c2:	2300      	movs	r3, #0
 80173c4:	9303      	str	r3, [sp, #12]
 80173c6:	69fb      	ldr	r3, [r7, #28]
 80173c8:	9302      	str	r3, [sp, #8]
 80173ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173cc:	9301      	str	r3, [sp, #4]
 80173ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173d0:	9300      	str	r3, [sp, #0]
 80173d2:	683b      	ldr	r3, [r7, #0]
 80173d4:	68b9      	ldr	r1, [r7, #8]
 80173d6:	68f8      	ldr	r0, [r7, #12]
 80173d8:	f000 f80e 	bl	80173f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80173dc:	69f8      	ldr	r0, [r7, #28]
 80173de:	f000 f8b1 	bl	8017544 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80173e2:	2301      	movs	r3, #1
 80173e4:	61bb      	str	r3, [r7, #24]
 80173e6:	e002      	b.n	80173ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80173e8:	f04f 33ff 	mov.w	r3, #4294967295
 80173ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80173ee:	69bb      	ldr	r3, [r7, #24]
	}
 80173f0:	4618      	mov	r0, r3
 80173f2:	3720      	adds	r7, #32
 80173f4:	46bd      	mov	sp, r7
 80173f6:	bd80      	pop	{r7, pc}

080173f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80173f8:	b580      	push	{r7, lr}
 80173fa:	b088      	sub	sp, #32
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	60f8      	str	r0, [r7, #12]
 8017400:	60b9      	str	r1, [r7, #8]
 8017402:	607a      	str	r2, [r7, #4]
 8017404:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017408:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	009b      	lsls	r3, r3, #2
 801740e:	461a      	mov	r2, r3
 8017410:	21a5      	movs	r1, #165	; 0xa5
 8017412:	f002 febf 	bl	801a194 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8017420:	3b01      	subs	r3, #1
 8017422:	009b      	lsls	r3, r3, #2
 8017424:	4413      	add	r3, r2
 8017426:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017428:	69bb      	ldr	r3, [r7, #24]
 801742a:	f023 0307 	bic.w	r3, r3, #7
 801742e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017430:	69bb      	ldr	r3, [r7, #24]
 8017432:	f003 0307 	and.w	r3, r3, #7
 8017436:	2b00      	cmp	r3, #0
 8017438:	d00a      	beq.n	8017450 <prvInitialiseNewTask+0x58>
	__asm volatile
 801743a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801743e:	f383 8811 	msr	BASEPRI, r3
 8017442:	f3bf 8f6f 	isb	sy
 8017446:	f3bf 8f4f 	dsb	sy
 801744a:	617b      	str	r3, [r7, #20]
}
 801744c:	bf00      	nop
 801744e:	e7fe      	b.n	801744e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017450:	68bb      	ldr	r3, [r7, #8]
 8017452:	2b00      	cmp	r3, #0
 8017454:	d01f      	beq.n	8017496 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017456:	2300      	movs	r3, #0
 8017458:	61fb      	str	r3, [r7, #28]
 801745a:	e012      	b.n	8017482 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801745c:	68ba      	ldr	r2, [r7, #8]
 801745e:	69fb      	ldr	r3, [r7, #28]
 8017460:	4413      	add	r3, r2
 8017462:	7819      	ldrb	r1, [r3, #0]
 8017464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017466:	69fb      	ldr	r3, [r7, #28]
 8017468:	4413      	add	r3, r2
 801746a:	3334      	adds	r3, #52	; 0x34
 801746c:	460a      	mov	r2, r1
 801746e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017470:	68ba      	ldr	r2, [r7, #8]
 8017472:	69fb      	ldr	r3, [r7, #28]
 8017474:	4413      	add	r3, r2
 8017476:	781b      	ldrb	r3, [r3, #0]
 8017478:	2b00      	cmp	r3, #0
 801747a:	d006      	beq.n	801748a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801747c:	69fb      	ldr	r3, [r7, #28]
 801747e:	3301      	adds	r3, #1
 8017480:	61fb      	str	r3, [r7, #28]
 8017482:	69fb      	ldr	r3, [r7, #28]
 8017484:	2b0f      	cmp	r3, #15
 8017486:	d9e9      	bls.n	801745c <prvInitialiseNewTask+0x64>
 8017488:	e000      	b.n	801748c <prvInitialiseNewTask+0x94>
			{
				break;
 801748a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801748c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801748e:	2200      	movs	r2, #0
 8017490:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017494:	e003      	b.n	801749e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017498:	2200      	movs	r2, #0
 801749a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801749e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174a0:	2b37      	cmp	r3, #55	; 0x37
 80174a2:	d901      	bls.n	80174a8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80174a4:	2337      	movs	r3, #55	; 0x37
 80174a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80174a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80174ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80174ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80174b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80174b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174b6:	2200      	movs	r2, #0
 80174b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80174ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174bc:	3304      	adds	r3, #4
 80174be:	4618      	mov	r0, r3
 80174c0:	f7fe fe56 	bl	8016170 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80174c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174c6:	3318      	adds	r3, #24
 80174c8:	4618      	mov	r0, r3
 80174ca:	f7fe fe51 	bl	8016170 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80174ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80174d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80174d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80174da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80174de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80174e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80174e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174e6:	2200      	movs	r2, #0
 80174e8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80174ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174ee:	2200      	movs	r2, #0
 80174f0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80174f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174f6:	3354      	adds	r3, #84	; 0x54
 80174f8:	2260      	movs	r2, #96	; 0x60
 80174fa:	2100      	movs	r1, #0
 80174fc:	4618      	mov	r0, r3
 80174fe:	f002 fe49 	bl	801a194 <memset>
 8017502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017504:	4a0c      	ldr	r2, [pc, #48]	; (8017538 <prvInitialiseNewTask+0x140>)
 8017506:	659a      	str	r2, [r3, #88]	; 0x58
 8017508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801750a:	4a0c      	ldr	r2, [pc, #48]	; (801753c <prvInitialiseNewTask+0x144>)
 801750c:	65da      	str	r2, [r3, #92]	; 0x5c
 801750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017510:	4a0b      	ldr	r2, [pc, #44]	; (8017540 <prvInitialiseNewTask+0x148>)
 8017512:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017514:	683a      	ldr	r2, [r7, #0]
 8017516:	68f9      	ldr	r1, [r7, #12]
 8017518:	69b8      	ldr	r0, [r7, #24]
 801751a:	f001 fa3f 	bl	801899c <pxPortInitialiseStack>
 801751e:	4602      	mov	r2, r0
 8017520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017522:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017526:	2b00      	cmp	r3, #0
 8017528:	d002      	beq.n	8017530 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801752a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801752c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801752e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017530:	bf00      	nop
 8017532:	3720      	adds	r7, #32
 8017534:	46bd      	mov	sp, r7
 8017536:	bd80      	pop	{r7, pc}
 8017538:	08022084 	.word	0x08022084
 801753c:	080220a4 	.word	0x080220a4
 8017540:	08022064 	.word	0x08022064

08017544 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b082      	sub	sp, #8
 8017548:	af00      	add	r7, sp, #0
 801754a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801754c:	f001 fb52 	bl	8018bf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017550:	4b2d      	ldr	r3, [pc, #180]	; (8017608 <prvAddNewTaskToReadyList+0xc4>)
 8017552:	681b      	ldr	r3, [r3, #0]
 8017554:	3301      	adds	r3, #1
 8017556:	4a2c      	ldr	r2, [pc, #176]	; (8017608 <prvAddNewTaskToReadyList+0xc4>)
 8017558:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801755a:	4b2c      	ldr	r3, [pc, #176]	; (801760c <prvAddNewTaskToReadyList+0xc8>)
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	2b00      	cmp	r3, #0
 8017560:	d109      	bne.n	8017576 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017562:	4a2a      	ldr	r2, [pc, #168]	; (801760c <prvAddNewTaskToReadyList+0xc8>)
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017568:	4b27      	ldr	r3, [pc, #156]	; (8017608 <prvAddNewTaskToReadyList+0xc4>)
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	2b01      	cmp	r3, #1
 801756e:	d110      	bne.n	8017592 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017570:	f000 fc26 	bl	8017dc0 <prvInitialiseTaskLists>
 8017574:	e00d      	b.n	8017592 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017576:	4b26      	ldr	r3, [pc, #152]	; (8017610 <prvAddNewTaskToReadyList+0xcc>)
 8017578:	681b      	ldr	r3, [r3, #0]
 801757a:	2b00      	cmp	r3, #0
 801757c:	d109      	bne.n	8017592 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801757e:	4b23      	ldr	r3, [pc, #140]	; (801760c <prvAddNewTaskToReadyList+0xc8>)
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017588:	429a      	cmp	r2, r3
 801758a:	d802      	bhi.n	8017592 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801758c:	4a1f      	ldr	r2, [pc, #124]	; (801760c <prvAddNewTaskToReadyList+0xc8>)
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017592:	4b20      	ldr	r3, [pc, #128]	; (8017614 <prvAddNewTaskToReadyList+0xd0>)
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	3301      	adds	r3, #1
 8017598:	4a1e      	ldr	r2, [pc, #120]	; (8017614 <prvAddNewTaskToReadyList+0xd0>)
 801759a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801759c:	4b1d      	ldr	r3, [pc, #116]	; (8017614 <prvAddNewTaskToReadyList+0xd0>)
 801759e:	681a      	ldr	r2, [r3, #0]
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175a8:	4b1b      	ldr	r3, [pc, #108]	; (8017618 <prvAddNewTaskToReadyList+0xd4>)
 80175aa:	681b      	ldr	r3, [r3, #0]
 80175ac:	429a      	cmp	r2, r3
 80175ae:	d903      	bls.n	80175b8 <prvAddNewTaskToReadyList+0x74>
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175b4:	4a18      	ldr	r2, [pc, #96]	; (8017618 <prvAddNewTaskToReadyList+0xd4>)
 80175b6:	6013      	str	r3, [r2, #0]
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175bc:	4613      	mov	r3, r2
 80175be:	009b      	lsls	r3, r3, #2
 80175c0:	4413      	add	r3, r2
 80175c2:	009b      	lsls	r3, r3, #2
 80175c4:	4a15      	ldr	r2, [pc, #84]	; (801761c <prvAddNewTaskToReadyList+0xd8>)
 80175c6:	441a      	add	r2, r3
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	3304      	adds	r3, #4
 80175cc:	4619      	mov	r1, r3
 80175ce:	4610      	mov	r0, r2
 80175d0:	f7fe fddb 	bl	801618a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80175d4:	f001 fb3e 	bl	8018c54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80175d8:	4b0d      	ldr	r3, [pc, #52]	; (8017610 <prvAddNewTaskToReadyList+0xcc>)
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d00e      	beq.n	80175fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80175e0:	4b0a      	ldr	r3, [pc, #40]	; (801760c <prvAddNewTaskToReadyList+0xc8>)
 80175e2:	681b      	ldr	r3, [r3, #0]
 80175e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175ea:	429a      	cmp	r2, r3
 80175ec:	d207      	bcs.n	80175fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80175ee:	4b0c      	ldr	r3, [pc, #48]	; (8017620 <prvAddNewTaskToReadyList+0xdc>)
 80175f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80175f4:	601a      	str	r2, [r3, #0]
 80175f6:	f3bf 8f4f 	dsb	sy
 80175fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80175fe:	bf00      	nop
 8017600:	3708      	adds	r7, #8
 8017602:	46bd      	mov	sp, r7
 8017604:	bd80      	pop	{r7, pc}
 8017606:	bf00      	nop
 8017608:	200014c8 	.word	0x200014c8
 801760c:	20000ff4 	.word	0x20000ff4
 8017610:	200014d4 	.word	0x200014d4
 8017614:	200014e4 	.word	0x200014e4
 8017618:	200014d0 	.word	0x200014d0
 801761c:	20000ff8 	.word	0x20000ff8
 8017620:	e000ed04 	.word	0xe000ed04

08017624 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017624:	b580      	push	{r7, lr}
 8017626:	b084      	sub	sp, #16
 8017628:	af00      	add	r7, sp, #0
 801762a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801762c:	2300      	movs	r3, #0
 801762e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d017      	beq.n	8017666 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8017636:	4b13      	ldr	r3, [pc, #76]	; (8017684 <vTaskDelay+0x60>)
 8017638:	681b      	ldr	r3, [r3, #0]
 801763a:	2b00      	cmp	r3, #0
 801763c:	d00a      	beq.n	8017654 <vTaskDelay+0x30>
	__asm volatile
 801763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017642:	f383 8811 	msr	BASEPRI, r3
 8017646:	f3bf 8f6f 	isb	sy
 801764a:	f3bf 8f4f 	dsb	sy
 801764e:	60bb      	str	r3, [r7, #8]
}
 8017650:	bf00      	nop
 8017652:	e7fe      	b.n	8017652 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8017654:	f000 f88a 	bl	801776c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017658:	2100      	movs	r1, #0
 801765a:	6878      	ldr	r0, [r7, #4]
 801765c:	f000 fdfc 	bl	8018258 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017660:	f000 f892 	bl	8017788 <xTaskResumeAll>
 8017664:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	2b00      	cmp	r3, #0
 801766a:	d107      	bne.n	801767c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801766c:	4b06      	ldr	r3, [pc, #24]	; (8017688 <vTaskDelay+0x64>)
 801766e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017672:	601a      	str	r2, [r3, #0]
 8017674:	f3bf 8f4f 	dsb	sy
 8017678:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801767c:	bf00      	nop
 801767e:	3710      	adds	r7, #16
 8017680:	46bd      	mov	sp, r7
 8017682:	bd80      	pop	{r7, pc}
 8017684:	200014f0 	.word	0x200014f0
 8017688:	e000ed04 	.word	0xe000ed04

0801768c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801768c:	b580      	push	{r7, lr}
 801768e:	b08a      	sub	sp, #40	; 0x28
 8017690:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017692:	2300      	movs	r3, #0
 8017694:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017696:	2300      	movs	r3, #0
 8017698:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801769a:	463a      	mov	r2, r7
 801769c:	1d39      	adds	r1, r7, #4
 801769e:	f107 0308 	add.w	r3, r7, #8
 80176a2:	4618      	mov	r0, r3
 80176a4:	f7fe fd10 	bl	80160c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80176a8:	6839      	ldr	r1, [r7, #0]
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	68ba      	ldr	r2, [r7, #8]
 80176ae:	9202      	str	r2, [sp, #8]
 80176b0:	9301      	str	r3, [sp, #4]
 80176b2:	2300      	movs	r3, #0
 80176b4:	9300      	str	r3, [sp, #0]
 80176b6:	2300      	movs	r3, #0
 80176b8:	460a      	mov	r2, r1
 80176ba:	4924      	ldr	r1, [pc, #144]	; (801774c <vTaskStartScheduler+0xc0>)
 80176bc:	4824      	ldr	r0, [pc, #144]	; (8017750 <vTaskStartScheduler+0xc4>)
 80176be:	f7ff fdf9 	bl	80172b4 <xTaskCreateStatic>
 80176c2:	4603      	mov	r3, r0
 80176c4:	4a23      	ldr	r2, [pc, #140]	; (8017754 <vTaskStartScheduler+0xc8>)
 80176c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80176c8:	4b22      	ldr	r3, [pc, #136]	; (8017754 <vTaskStartScheduler+0xc8>)
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d002      	beq.n	80176d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80176d0:	2301      	movs	r3, #1
 80176d2:	617b      	str	r3, [r7, #20]
 80176d4:	e001      	b.n	80176da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80176d6:	2300      	movs	r3, #0
 80176d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80176da:	697b      	ldr	r3, [r7, #20]
 80176dc:	2b01      	cmp	r3, #1
 80176de:	d102      	bne.n	80176e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80176e0:	f000 fe0e 	bl	8018300 <xTimerCreateTimerTask>
 80176e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80176e6:	697b      	ldr	r3, [r7, #20]
 80176e8:	2b01      	cmp	r3, #1
 80176ea:	d11b      	bne.n	8017724 <vTaskStartScheduler+0x98>
	__asm volatile
 80176ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176f0:	f383 8811 	msr	BASEPRI, r3
 80176f4:	f3bf 8f6f 	isb	sy
 80176f8:	f3bf 8f4f 	dsb	sy
 80176fc:	613b      	str	r3, [r7, #16]
}
 80176fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017700:	4b15      	ldr	r3, [pc, #84]	; (8017758 <vTaskStartScheduler+0xcc>)
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	3354      	adds	r3, #84	; 0x54
 8017706:	4a15      	ldr	r2, [pc, #84]	; (801775c <vTaskStartScheduler+0xd0>)
 8017708:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801770a:	4b15      	ldr	r3, [pc, #84]	; (8017760 <vTaskStartScheduler+0xd4>)
 801770c:	f04f 32ff 	mov.w	r2, #4294967295
 8017710:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017712:	4b14      	ldr	r3, [pc, #80]	; (8017764 <vTaskStartScheduler+0xd8>)
 8017714:	2201      	movs	r2, #1
 8017716:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017718:	4b13      	ldr	r3, [pc, #76]	; (8017768 <vTaskStartScheduler+0xdc>)
 801771a:	2200      	movs	r2, #0
 801771c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801771e:	f001 f9c7 	bl	8018ab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017722:	e00e      	b.n	8017742 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017724:	697b      	ldr	r3, [r7, #20]
 8017726:	f1b3 3fff 	cmp.w	r3, #4294967295
 801772a:	d10a      	bne.n	8017742 <vTaskStartScheduler+0xb6>
	__asm volatile
 801772c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017730:	f383 8811 	msr	BASEPRI, r3
 8017734:	f3bf 8f6f 	isb	sy
 8017738:	f3bf 8f4f 	dsb	sy
 801773c:	60fb      	str	r3, [r7, #12]
}
 801773e:	bf00      	nop
 8017740:	e7fe      	b.n	8017740 <vTaskStartScheduler+0xb4>
}
 8017742:	bf00      	nop
 8017744:	3718      	adds	r7, #24
 8017746:	46bd      	mov	sp, r7
 8017748:	bd80      	pop	{r7, pc}
 801774a:	bf00      	nop
 801774c:	08021d28 	.word	0x08021d28
 8017750:	08017d91 	.word	0x08017d91
 8017754:	200014ec 	.word	0x200014ec
 8017758:	20000ff4 	.word	0x20000ff4
 801775c:	200001fc 	.word	0x200001fc
 8017760:	200014e8 	.word	0x200014e8
 8017764:	200014d4 	.word	0x200014d4
 8017768:	200014cc 	.word	0x200014cc

0801776c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801776c:	b480      	push	{r7}
 801776e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8017770:	4b04      	ldr	r3, [pc, #16]	; (8017784 <vTaskSuspendAll+0x18>)
 8017772:	681b      	ldr	r3, [r3, #0]
 8017774:	3301      	adds	r3, #1
 8017776:	4a03      	ldr	r2, [pc, #12]	; (8017784 <vTaskSuspendAll+0x18>)
 8017778:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801777a:	bf00      	nop
 801777c:	46bd      	mov	sp, r7
 801777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017782:	4770      	bx	lr
 8017784:	200014f0 	.word	0x200014f0

08017788 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017788:	b580      	push	{r7, lr}
 801778a:	b084      	sub	sp, #16
 801778c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801778e:	2300      	movs	r3, #0
 8017790:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8017792:	2300      	movs	r3, #0
 8017794:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8017796:	4b42      	ldr	r3, [pc, #264]	; (80178a0 <xTaskResumeAll+0x118>)
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	2b00      	cmp	r3, #0
 801779c:	d10a      	bne.n	80177b4 <xTaskResumeAll+0x2c>
	__asm volatile
 801779e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177a2:	f383 8811 	msr	BASEPRI, r3
 80177a6:	f3bf 8f6f 	isb	sy
 80177aa:	f3bf 8f4f 	dsb	sy
 80177ae:	603b      	str	r3, [r7, #0]
}
 80177b0:	bf00      	nop
 80177b2:	e7fe      	b.n	80177b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80177b4:	f001 fa1e 	bl	8018bf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80177b8:	4b39      	ldr	r3, [pc, #228]	; (80178a0 <xTaskResumeAll+0x118>)
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	3b01      	subs	r3, #1
 80177be:	4a38      	ldr	r2, [pc, #224]	; (80178a0 <xTaskResumeAll+0x118>)
 80177c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80177c2:	4b37      	ldr	r3, [pc, #220]	; (80178a0 <xTaskResumeAll+0x118>)
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d162      	bne.n	8017890 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80177ca:	4b36      	ldr	r3, [pc, #216]	; (80178a4 <xTaskResumeAll+0x11c>)
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d05e      	beq.n	8017890 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80177d2:	e02f      	b.n	8017834 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80177d4:	4b34      	ldr	r3, [pc, #208]	; (80178a8 <xTaskResumeAll+0x120>)
 80177d6:	68db      	ldr	r3, [r3, #12]
 80177d8:	68db      	ldr	r3, [r3, #12]
 80177da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80177dc:	68fb      	ldr	r3, [r7, #12]
 80177de:	3318      	adds	r3, #24
 80177e0:	4618      	mov	r0, r3
 80177e2:	f7fe fd2f 	bl	8016244 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	3304      	adds	r3, #4
 80177ea:	4618      	mov	r0, r3
 80177ec:	f7fe fd2a 	bl	8016244 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80177f0:	68fb      	ldr	r3, [r7, #12]
 80177f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80177f4:	4b2d      	ldr	r3, [pc, #180]	; (80178ac <xTaskResumeAll+0x124>)
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	429a      	cmp	r2, r3
 80177fa:	d903      	bls.n	8017804 <xTaskResumeAll+0x7c>
 80177fc:	68fb      	ldr	r3, [r7, #12]
 80177fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017800:	4a2a      	ldr	r2, [pc, #168]	; (80178ac <xTaskResumeAll+0x124>)
 8017802:	6013      	str	r3, [r2, #0]
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017808:	4613      	mov	r3, r2
 801780a:	009b      	lsls	r3, r3, #2
 801780c:	4413      	add	r3, r2
 801780e:	009b      	lsls	r3, r3, #2
 8017810:	4a27      	ldr	r2, [pc, #156]	; (80178b0 <xTaskResumeAll+0x128>)
 8017812:	441a      	add	r2, r3
 8017814:	68fb      	ldr	r3, [r7, #12]
 8017816:	3304      	adds	r3, #4
 8017818:	4619      	mov	r1, r3
 801781a:	4610      	mov	r0, r2
 801781c:	f7fe fcb5 	bl	801618a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017824:	4b23      	ldr	r3, [pc, #140]	; (80178b4 <xTaskResumeAll+0x12c>)
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801782a:	429a      	cmp	r2, r3
 801782c:	d302      	bcc.n	8017834 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801782e:	4b22      	ldr	r3, [pc, #136]	; (80178b8 <xTaskResumeAll+0x130>)
 8017830:	2201      	movs	r2, #1
 8017832:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017834:	4b1c      	ldr	r3, [pc, #112]	; (80178a8 <xTaskResumeAll+0x120>)
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	2b00      	cmp	r3, #0
 801783a:	d1cb      	bne.n	80177d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801783c:	68fb      	ldr	r3, [r7, #12]
 801783e:	2b00      	cmp	r3, #0
 8017840:	d001      	beq.n	8017846 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017842:	f000 fb5f 	bl	8017f04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8017846:	4b1d      	ldr	r3, [pc, #116]	; (80178bc <xTaskResumeAll+0x134>)
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	2b00      	cmp	r3, #0
 8017850:	d010      	beq.n	8017874 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017852:	f000 f847 	bl	80178e4 <xTaskIncrementTick>
 8017856:	4603      	mov	r3, r0
 8017858:	2b00      	cmp	r3, #0
 801785a:	d002      	beq.n	8017862 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801785c:	4b16      	ldr	r3, [pc, #88]	; (80178b8 <xTaskResumeAll+0x130>)
 801785e:	2201      	movs	r2, #1
 8017860:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	3b01      	subs	r3, #1
 8017866:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	2b00      	cmp	r3, #0
 801786c:	d1f1      	bne.n	8017852 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801786e:	4b13      	ldr	r3, [pc, #76]	; (80178bc <xTaskResumeAll+0x134>)
 8017870:	2200      	movs	r2, #0
 8017872:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017874:	4b10      	ldr	r3, [pc, #64]	; (80178b8 <xTaskResumeAll+0x130>)
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	2b00      	cmp	r3, #0
 801787a:	d009      	beq.n	8017890 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801787c:	2301      	movs	r3, #1
 801787e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017880:	4b0f      	ldr	r3, [pc, #60]	; (80178c0 <xTaskResumeAll+0x138>)
 8017882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017886:	601a      	str	r2, [r3, #0]
 8017888:	f3bf 8f4f 	dsb	sy
 801788c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017890:	f001 f9e0 	bl	8018c54 <vPortExitCritical>

	return xAlreadyYielded;
 8017894:	68bb      	ldr	r3, [r7, #8]
}
 8017896:	4618      	mov	r0, r3
 8017898:	3710      	adds	r7, #16
 801789a:	46bd      	mov	sp, r7
 801789c:	bd80      	pop	{r7, pc}
 801789e:	bf00      	nop
 80178a0:	200014f0 	.word	0x200014f0
 80178a4:	200014c8 	.word	0x200014c8
 80178a8:	20001488 	.word	0x20001488
 80178ac:	200014d0 	.word	0x200014d0
 80178b0:	20000ff8 	.word	0x20000ff8
 80178b4:	20000ff4 	.word	0x20000ff4
 80178b8:	200014dc 	.word	0x200014dc
 80178bc:	200014d8 	.word	0x200014d8
 80178c0:	e000ed04 	.word	0xe000ed04

080178c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80178c4:	b480      	push	{r7}
 80178c6:	b083      	sub	sp, #12
 80178c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80178ca:	4b05      	ldr	r3, [pc, #20]	; (80178e0 <xTaskGetTickCount+0x1c>)
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80178d0:	687b      	ldr	r3, [r7, #4]
}
 80178d2:	4618      	mov	r0, r3
 80178d4:	370c      	adds	r7, #12
 80178d6:	46bd      	mov	sp, r7
 80178d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178dc:	4770      	bx	lr
 80178de:	bf00      	nop
 80178e0:	200014cc 	.word	0x200014cc

080178e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80178e4:	b580      	push	{r7, lr}
 80178e6:	b086      	sub	sp, #24
 80178e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80178ea:	2300      	movs	r3, #0
 80178ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80178ee:	4b4f      	ldr	r3, [pc, #316]	; (8017a2c <xTaskIncrementTick+0x148>)
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	f040 808f 	bne.w	8017a16 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80178f8:	4b4d      	ldr	r3, [pc, #308]	; (8017a30 <xTaskIncrementTick+0x14c>)
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	3301      	adds	r3, #1
 80178fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017900:	4a4b      	ldr	r2, [pc, #300]	; (8017a30 <xTaskIncrementTick+0x14c>)
 8017902:	693b      	ldr	r3, [r7, #16]
 8017904:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017906:	693b      	ldr	r3, [r7, #16]
 8017908:	2b00      	cmp	r3, #0
 801790a:	d120      	bne.n	801794e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801790c:	4b49      	ldr	r3, [pc, #292]	; (8017a34 <xTaskIncrementTick+0x150>)
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	2b00      	cmp	r3, #0
 8017914:	d00a      	beq.n	801792c <xTaskIncrementTick+0x48>
	__asm volatile
 8017916:	f04f 0350 	mov.w	r3, #80	; 0x50
 801791a:	f383 8811 	msr	BASEPRI, r3
 801791e:	f3bf 8f6f 	isb	sy
 8017922:	f3bf 8f4f 	dsb	sy
 8017926:	603b      	str	r3, [r7, #0]
}
 8017928:	bf00      	nop
 801792a:	e7fe      	b.n	801792a <xTaskIncrementTick+0x46>
 801792c:	4b41      	ldr	r3, [pc, #260]	; (8017a34 <xTaskIncrementTick+0x150>)
 801792e:	681b      	ldr	r3, [r3, #0]
 8017930:	60fb      	str	r3, [r7, #12]
 8017932:	4b41      	ldr	r3, [pc, #260]	; (8017a38 <xTaskIncrementTick+0x154>)
 8017934:	681b      	ldr	r3, [r3, #0]
 8017936:	4a3f      	ldr	r2, [pc, #252]	; (8017a34 <xTaskIncrementTick+0x150>)
 8017938:	6013      	str	r3, [r2, #0]
 801793a:	4a3f      	ldr	r2, [pc, #252]	; (8017a38 <xTaskIncrementTick+0x154>)
 801793c:	68fb      	ldr	r3, [r7, #12]
 801793e:	6013      	str	r3, [r2, #0]
 8017940:	4b3e      	ldr	r3, [pc, #248]	; (8017a3c <xTaskIncrementTick+0x158>)
 8017942:	681b      	ldr	r3, [r3, #0]
 8017944:	3301      	adds	r3, #1
 8017946:	4a3d      	ldr	r2, [pc, #244]	; (8017a3c <xTaskIncrementTick+0x158>)
 8017948:	6013      	str	r3, [r2, #0]
 801794a:	f000 fadb 	bl	8017f04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801794e:	4b3c      	ldr	r3, [pc, #240]	; (8017a40 <xTaskIncrementTick+0x15c>)
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	693a      	ldr	r2, [r7, #16]
 8017954:	429a      	cmp	r2, r3
 8017956:	d349      	bcc.n	80179ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017958:	4b36      	ldr	r3, [pc, #216]	; (8017a34 <xTaskIncrementTick+0x150>)
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	2b00      	cmp	r3, #0
 8017960:	d104      	bne.n	801796c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017962:	4b37      	ldr	r3, [pc, #220]	; (8017a40 <xTaskIncrementTick+0x15c>)
 8017964:	f04f 32ff 	mov.w	r2, #4294967295
 8017968:	601a      	str	r2, [r3, #0]
					break;
 801796a:	e03f      	b.n	80179ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801796c:	4b31      	ldr	r3, [pc, #196]	; (8017a34 <xTaskIncrementTick+0x150>)
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	68db      	ldr	r3, [r3, #12]
 8017972:	68db      	ldr	r3, [r3, #12]
 8017974:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017976:	68bb      	ldr	r3, [r7, #8]
 8017978:	685b      	ldr	r3, [r3, #4]
 801797a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801797c:	693a      	ldr	r2, [r7, #16]
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	429a      	cmp	r2, r3
 8017982:	d203      	bcs.n	801798c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017984:	4a2e      	ldr	r2, [pc, #184]	; (8017a40 <xTaskIncrementTick+0x15c>)
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801798a:	e02f      	b.n	80179ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801798c:	68bb      	ldr	r3, [r7, #8]
 801798e:	3304      	adds	r3, #4
 8017990:	4618      	mov	r0, r3
 8017992:	f7fe fc57 	bl	8016244 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017996:	68bb      	ldr	r3, [r7, #8]
 8017998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801799a:	2b00      	cmp	r3, #0
 801799c:	d004      	beq.n	80179a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801799e:	68bb      	ldr	r3, [r7, #8]
 80179a0:	3318      	adds	r3, #24
 80179a2:	4618      	mov	r0, r3
 80179a4:	f7fe fc4e 	bl	8016244 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80179a8:	68bb      	ldr	r3, [r7, #8]
 80179aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179ac:	4b25      	ldr	r3, [pc, #148]	; (8017a44 <xTaskIncrementTick+0x160>)
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	429a      	cmp	r2, r3
 80179b2:	d903      	bls.n	80179bc <xTaskIncrementTick+0xd8>
 80179b4:	68bb      	ldr	r3, [r7, #8]
 80179b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179b8:	4a22      	ldr	r2, [pc, #136]	; (8017a44 <xTaskIncrementTick+0x160>)
 80179ba:	6013      	str	r3, [r2, #0]
 80179bc:	68bb      	ldr	r3, [r7, #8]
 80179be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179c0:	4613      	mov	r3, r2
 80179c2:	009b      	lsls	r3, r3, #2
 80179c4:	4413      	add	r3, r2
 80179c6:	009b      	lsls	r3, r3, #2
 80179c8:	4a1f      	ldr	r2, [pc, #124]	; (8017a48 <xTaskIncrementTick+0x164>)
 80179ca:	441a      	add	r2, r3
 80179cc:	68bb      	ldr	r3, [r7, #8]
 80179ce:	3304      	adds	r3, #4
 80179d0:	4619      	mov	r1, r3
 80179d2:	4610      	mov	r0, r2
 80179d4:	f7fe fbd9 	bl	801618a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80179d8:	68bb      	ldr	r3, [r7, #8]
 80179da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179dc:	4b1b      	ldr	r3, [pc, #108]	; (8017a4c <xTaskIncrementTick+0x168>)
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179e2:	429a      	cmp	r2, r3
 80179e4:	d3b8      	bcc.n	8017958 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80179e6:	2301      	movs	r3, #1
 80179e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80179ea:	e7b5      	b.n	8017958 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80179ec:	4b17      	ldr	r3, [pc, #92]	; (8017a4c <xTaskIncrementTick+0x168>)
 80179ee:	681b      	ldr	r3, [r3, #0]
 80179f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179f2:	4915      	ldr	r1, [pc, #84]	; (8017a48 <xTaskIncrementTick+0x164>)
 80179f4:	4613      	mov	r3, r2
 80179f6:	009b      	lsls	r3, r3, #2
 80179f8:	4413      	add	r3, r2
 80179fa:	009b      	lsls	r3, r3, #2
 80179fc:	440b      	add	r3, r1
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	2b01      	cmp	r3, #1
 8017a02:	d901      	bls.n	8017a08 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8017a04:	2301      	movs	r3, #1
 8017a06:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8017a08:	4b11      	ldr	r3, [pc, #68]	; (8017a50 <xTaskIncrementTick+0x16c>)
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	d007      	beq.n	8017a20 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8017a10:	2301      	movs	r3, #1
 8017a12:	617b      	str	r3, [r7, #20]
 8017a14:	e004      	b.n	8017a20 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8017a16:	4b0f      	ldr	r3, [pc, #60]	; (8017a54 <xTaskIncrementTick+0x170>)
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	3301      	adds	r3, #1
 8017a1c:	4a0d      	ldr	r2, [pc, #52]	; (8017a54 <xTaskIncrementTick+0x170>)
 8017a1e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8017a20:	697b      	ldr	r3, [r7, #20]
}
 8017a22:	4618      	mov	r0, r3
 8017a24:	3718      	adds	r7, #24
 8017a26:	46bd      	mov	sp, r7
 8017a28:	bd80      	pop	{r7, pc}
 8017a2a:	bf00      	nop
 8017a2c:	200014f0 	.word	0x200014f0
 8017a30:	200014cc 	.word	0x200014cc
 8017a34:	20001480 	.word	0x20001480
 8017a38:	20001484 	.word	0x20001484
 8017a3c:	200014e0 	.word	0x200014e0
 8017a40:	200014e8 	.word	0x200014e8
 8017a44:	200014d0 	.word	0x200014d0
 8017a48:	20000ff8 	.word	0x20000ff8
 8017a4c:	20000ff4 	.word	0x20000ff4
 8017a50:	200014dc 	.word	0x200014dc
 8017a54:	200014d8 	.word	0x200014d8

08017a58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017a58:	b480      	push	{r7}
 8017a5a:	b085      	sub	sp, #20
 8017a5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017a5e:	4b2a      	ldr	r3, [pc, #168]	; (8017b08 <vTaskSwitchContext+0xb0>)
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d003      	beq.n	8017a6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017a66:	4b29      	ldr	r3, [pc, #164]	; (8017b0c <vTaskSwitchContext+0xb4>)
 8017a68:	2201      	movs	r2, #1
 8017a6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017a6c:	e046      	b.n	8017afc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8017a6e:	4b27      	ldr	r3, [pc, #156]	; (8017b0c <vTaskSwitchContext+0xb4>)
 8017a70:	2200      	movs	r2, #0
 8017a72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017a74:	4b26      	ldr	r3, [pc, #152]	; (8017b10 <vTaskSwitchContext+0xb8>)
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	60fb      	str	r3, [r7, #12]
 8017a7a:	e010      	b.n	8017a9e <vTaskSwitchContext+0x46>
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d10a      	bne.n	8017a98 <vTaskSwitchContext+0x40>
	__asm volatile
 8017a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a86:	f383 8811 	msr	BASEPRI, r3
 8017a8a:	f3bf 8f6f 	isb	sy
 8017a8e:	f3bf 8f4f 	dsb	sy
 8017a92:	607b      	str	r3, [r7, #4]
}
 8017a94:	bf00      	nop
 8017a96:	e7fe      	b.n	8017a96 <vTaskSwitchContext+0x3e>
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	3b01      	subs	r3, #1
 8017a9c:	60fb      	str	r3, [r7, #12]
 8017a9e:	491d      	ldr	r1, [pc, #116]	; (8017b14 <vTaskSwitchContext+0xbc>)
 8017aa0:	68fa      	ldr	r2, [r7, #12]
 8017aa2:	4613      	mov	r3, r2
 8017aa4:	009b      	lsls	r3, r3, #2
 8017aa6:	4413      	add	r3, r2
 8017aa8:	009b      	lsls	r3, r3, #2
 8017aaa:	440b      	add	r3, r1
 8017aac:	681b      	ldr	r3, [r3, #0]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d0e4      	beq.n	8017a7c <vTaskSwitchContext+0x24>
 8017ab2:	68fa      	ldr	r2, [r7, #12]
 8017ab4:	4613      	mov	r3, r2
 8017ab6:	009b      	lsls	r3, r3, #2
 8017ab8:	4413      	add	r3, r2
 8017aba:	009b      	lsls	r3, r3, #2
 8017abc:	4a15      	ldr	r2, [pc, #84]	; (8017b14 <vTaskSwitchContext+0xbc>)
 8017abe:	4413      	add	r3, r2
 8017ac0:	60bb      	str	r3, [r7, #8]
 8017ac2:	68bb      	ldr	r3, [r7, #8]
 8017ac4:	685b      	ldr	r3, [r3, #4]
 8017ac6:	685a      	ldr	r2, [r3, #4]
 8017ac8:	68bb      	ldr	r3, [r7, #8]
 8017aca:	605a      	str	r2, [r3, #4]
 8017acc:	68bb      	ldr	r3, [r7, #8]
 8017ace:	685a      	ldr	r2, [r3, #4]
 8017ad0:	68bb      	ldr	r3, [r7, #8]
 8017ad2:	3308      	adds	r3, #8
 8017ad4:	429a      	cmp	r2, r3
 8017ad6:	d104      	bne.n	8017ae2 <vTaskSwitchContext+0x8a>
 8017ad8:	68bb      	ldr	r3, [r7, #8]
 8017ada:	685b      	ldr	r3, [r3, #4]
 8017adc:	685a      	ldr	r2, [r3, #4]
 8017ade:	68bb      	ldr	r3, [r7, #8]
 8017ae0:	605a      	str	r2, [r3, #4]
 8017ae2:	68bb      	ldr	r3, [r7, #8]
 8017ae4:	685b      	ldr	r3, [r3, #4]
 8017ae6:	68db      	ldr	r3, [r3, #12]
 8017ae8:	4a0b      	ldr	r2, [pc, #44]	; (8017b18 <vTaskSwitchContext+0xc0>)
 8017aea:	6013      	str	r3, [r2, #0]
 8017aec:	4a08      	ldr	r2, [pc, #32]	; (8017b10 <vTaskSwitchContext+0xb8>)
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017af2:	4b09      	ldr	r3, [pc, #36]	; (8017b18 <vTaskSwitchContext+0xc0>)
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	3354      	adds	r3, #84	; 0x54
 8017af8:	4a08      	ldr	r2, [pc, #32]	; (8017b1c <vTaskSwitchContext+0xc4>)
 8017afa:	6013      	str	r3, [r2, #0]
}
 8017afc:	bf00      	nop
 8017afe:	3714      	adds	r7, #20
 8017b00:	46bd      	mov	sp, r7
 8017b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b06:	4770      	bx	lr
 8017b08:	200014f0 	.word	0x200014f0
 8017b0c:	200014dc 	.word	0x200014dc
 8017b10:	200014d0 	.word	0x200014d0
 8017b14:	20000ff8 	.word	0x20000ff8
 8017b18:	20000ff4 	.word	0x20000ff4
 8017b1c:	200001fc 	.word	0x200001fc

08017b20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017b20:	b580      	push	{r7, lr}
 8017b22:	b084      	sub	sp, #16
 8017b24:	af00      	add	r7, sp, #0
 8017b26:	6078      	str	r0, [r7, #4]
 8017b28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d10a      	bne.n	8017b46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8017b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b34:	f383 8811 	msr	BASEPRI, r3
 8017b38:	f3bf 8f6f 	isb	sy
 8017b3c:	f3bf 8f4f 	dsb	sy
 8017b40:	60fb      	str	r3, [r7, #12]
}
 8017b42:	bf00      	nop
 8017b44:	e7fe      	b.n	8017b44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017b46:	4b07      	ldr	r3, [pc, #28]	; (8017b64 <vTaskPlaceOnEventList+0x44>)
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	3318      	adds	r3, #24
 8017b4c:	4619      	mov	r1, r3
 8017b4e:	6878      	ldr	r0, [r7, #4]
 8017b50:	f7fe fb3f 	bl	80161d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017b54:	2101      	movs	r1, #1
 8017b56:	6838      	ldr	r0, [r7, #0]
 8017b58:	f000 fb7e 	bl	8018258 <prvAddCurrentTaskToDelayedList>
}
 8017b5c:	bf00      	nop
 8017b5e:	3710      	adds	r7, #16
 8017b60:	46bd      	mov	sp, r7
 8017b62:	bd80      	pop	{r7, pc}
 8017b64:	20000ff4 	.word	0x20000ff4

08017b68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017b68:	b580      	push	{r7, lr}
 8017b6a:	b086      	sub	sp, #24
 8017b6c:	af00      	add	r7, sp, #0
 8017b6e:	60f8      	str	r0, [r7, #12]
 8017b70:	60b9      	str	r1, [r7, #8]
 8017b72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017b74:	68fb      	ldr	r3, [r7, #12]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d10a      	bne.n	8017b90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8017b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b7e:	f383 8811 	msr	BASEPRI, r3
 8017b82:	f3bf 8f6f 	isb	sy
 8017b86:	f3bf 8f4f 	dsb	sy
 8017b8a:	617b      	str	r3, [r7, #20]
}
 8017b8c:	bf00      	nop
 8017b8e:	e7fe      	b.n	8017b8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017b90:	4b0a      	ldr	r3, [pc, #40]	; (8017bbc <vTaskPlaceOnEventListRestricted+0x54>)
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	3318      	adds	r3, #24
 8017b96:	4619      	mov	r1, r3
 8017b98:	68f8      	ldr	r0, [r7, #12]
 8017b9a:	f7fe faf6 	bl	801618a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d002      	beq.n	8017baa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8017ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8017ba8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017baa:	6879      	ldr	r1, [r7, #4]
 8017bac:	68b8      	ldr	r0, [r7, #8]
 8017bae:	f000 fb53 	bl	8018258 <prvAddCurrentTaskToDelayedList>
	}
 8017bb2:	bf00      	nop
 8017bb4:	3718      	adds	r7, #24
 8017bb6:	46bd      	mov	sp, r7
 8017bb8:	bd80      	pop	{r7, pc}
 8017bba:	bf00      	nop
 8017bbc:	20000ff4 	.word	0x20000ff4

08017bc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017bc0:	b580      	push	{r7, lr}
 8017bc2:	b086      	sub	sp, #24
 8017bc4:	af00      	add	r7, sp, #0
 8017bc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	68db      	ldr	r3, [r3, #12]
 8017bcc:	68db      	ldr	r3, [r3, #12]
 8017bce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017bd0:	693b      	ldr	r3, [r7, #16]
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d10a      	bne.n	8017bec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8017bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bda:	f383 8811 	msr	BASEPRI, r3
 8017bde:	f3bf 8f6f 	isb	sy
 8017be2:	f3bf 8f4f 	dsb	sy
 8017be6:	60fb      	str	r3, [r7, #12]
}
 8017be8:	bf00      	nop
 8017bea:	e7fe      	b.n	8017bea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017bec:	693b      	ldr	r3, [r7, #16]
 8017bee:	3318      	adds	r3, #24
 8017bf0:	4618      	mov	r0, r3
 8017bf2:	f7fe fb27 	bl	8016244 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017bf6:	4b1e      	ldr	r3, [pc, #120]	; (8017c70 <xTaskRemoveFromEventList+0xb0>)
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d11d      	bne.n	8017c3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017bfe:	693b      	ldr	r3, [r7, #16]
 8017c00:	3304      	adds	r3, #4
 8017c02:	4618      	mov	r0, r3
 8017c04:	f7fe fb1e 	bl	8016244 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017c08:	693b      	ldr	r3, [r7, #16]
 8017c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c0c:	4b19      	ldr	r3, [pc, #100]	; (8017c74 <xTaskRemoveFromEventList+0xb4>)
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	429a      	cmp	r2, r3
 8017c12:	d903      	bls.n	8017c1c <xTaskRemoveFromEventList+0x5c>
 8017c14:	693b      	ldr	r3, [r7, #16]
 8017c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c18:	4a16      	ldr	r2, [pc, #88]	; (8017c74 <xTaskRemoveFromEventList+0xb4>)
 8017c1a:	6013      	str	r3, [r2, #0]
 8017c1c:	693b      	ldr	r3, [r7, #16]
 8017c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c20:	4613      	mov	r3, r2
 8017c22:	009b      	lsls	r3, r3, #2
 8017c24:	4413      	add	r3, r2
 8017c26:	009b      	lsls	r3, r3, #2
 8017c28:	4a13      	ldr	r2, [pc, #76]	; (8017c78 <xTaskRemoveFromEventList+0xb8>)
 8017c2a:	441a      	add	r2, r3
 8017c2c:	693b      	ldr	r3, [r7, #16]
 8017c2e:	3304      	adds	r3, #4
 8017c30:	4619      	mov	r1, r3
 8017c32:	4610      	mov	r0, r2
 8017c34:	f7fe faa9 	bl	801618a <vListInsertEnd>
 8017c38:	e005      	b.n	8017c46 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017c3a:	693b      	ldr	r3, [r7, #16]
 8017c3c:	3318      	adds	r3, #24
 8017c3e:	4619      	mov	r1, r3
 8017c40:	480e      	ldr	r0, [pc, #56]	; (8017c7c <xTaskRemoveFromEventList+0xbc>)
 8017c42:	f7fe faa2 	bl	801618a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017c46:	693b      	ldr	r3, [r7, #16]
 8017c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c4a:	4b0d      	ldr	r3, [pc, #52]	; (8017c80 <xTaskRemoveFromEventList+0xc0>)
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c50:	429a      	cmp	r2, r3
 8017c52:	d905      	bls.n	8017c60 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017c54:	2301      	movs	r3, #1
 8017c56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017c58:	4b0a      	ldr	r3, [pc, #40]	; (8017c84 <xTaskRemoveFromEventList+0xc4>)
 8017c5a:	2201      	movs	r2, #1
 8017c5c:	601a      	str	r2, [r3, #0]
 8017c5e:	e001      	b.n	8017c64 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8017c60:	2300      	movs	r3, #0
 8017c62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017c64:	697b      	ldr	r3, [r7, #20]
}
 8017c66:	4618      	mov	r0, r3
 8017c68:	3718      	adds	r7, #24
 8017c6a:	46bd      	mov	sp, r7
 8017c6c:	bd80      	pop	{r7, pc}
 8017c6e:	bf00      	nop
 8017c70:	200014f0 	.word	0x200014f0
 8017c74:	200014d0 	.word	0x200014d0
 8017c78:	20000ff8 	.word	0x20000ff8
 8017c7c:	20001488 	.word	0x20001488
 8017c80:	20000ff4 	.word	0x20000ff4
 8017c84:	200014dc 	.word	0x200014dc

08017c88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017c88:	b480      	push	{r7}
 8017c8a:	b083      	sub	sp, #12
 8017c8c:	af00      	add	r7, sp, #0
 8017c8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017c90:	4b06      	ldr	r3, [pc, #24]	; (8017cac <vTaskInternalSetTimeOutState+0x24>)
 8017c92:	681a      	ldr	r2, [r3, #0]
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017c98:	4b05      	ldr	r3, [pc, #20]	; (8017cb0 <vTaskInternalSetTimeOutState+0x28>)
 8017c9a:	681a      	ldr	r2, [r3, #0]
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	605a      	str	r2, [r3, #4]
}
 8017ca0:	bf00      	nop
 8017ca2:	370c      	adds	r7, #12
 8017ca4:	46bd      	mov	sp, r7
 8017ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017caa:	4770      	bx	lr
 8017cac:	200014e0 	.word	0x200014e0
 8017cb0:	200014cc 	.word	0x200014cc

08017cb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017cb4:	b580      	push	{r7, lr}
 8017cb6:	b088      	sub	sp, #32
 8017cb8:	af00      	add	r7, sp, #0
 8017cba:	6078      	str	r0, [r7, #4]
 8017cbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d10a      	bne.n	8017cda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8017cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cc8:	f383 8811 	msr	BASEPRI, r3
 8017ccc:	f3bf 8f6f 	isb	sy
 8017cd0:	f3bf 8f4f 	dsb	sy
 8017cd4:	613b      	str	r3, [r7, #16]
}
 8017cd6:	bf00      	nop
 8017cd8:	e7fe      	b.n	8017cd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8017cda:	683b      	ldr	r3, [r7, #0]
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d10a      	bne.n	8017cf6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8017ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ce4:	f383 8811 	msr	BASEPRI, r3
 8017ce8:	f3bf 8f6f 	isb	sy
 8017cec:	f3bf 8f4f 	dsb	sy
 8017cf0:	60fb      	str	r3, [r7, #12]
}
 8017cf2:	bf00      	nop
 8017cf4:	e7fe      	b.n	8017cf4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8017cf6:	f000 ff7d 	bl	8018bf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8017cfa:	4b1d      	ldr	r3, [pc, #116]	; (8017d70 <xTaskCheckForTimeOut+0xbc>)
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	685b      	ldr	r3, [r3, #4]
 8017d04:	69ba      	ldr	r2, [r7, #24]
 8017d06:	1ad3      	subs	r3, r2, r3
 8017d08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8017d0a:	683b      	ldr	r3, [r7, #0]
 8017d0c:	681b      	ldr	r3, [r3, #0]
 8017d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d12:	d102      	bne.n	8017d1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017d14:	2300      	movs	r3, #0
 8017d16:	61fb      	str	r3, [r7, #28]
 8017d18:	e023      	b.n	8017d62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	681a      	ldr	r2, [r3, #0]
 8017d1e:	4b15      	ldr	r3, [pc, #84]	; (8017d74 <xTaskCheckForTimeOut+0xc0>)
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	429a      	cmp	r2, r3
 8017d24:	d007      	beq.n	8017d36 <xTaskCheckForTimeOut+0x82>
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	685b      	ldr	r3, [r3, #4]
 8017d2a:	69ba      	ldr	r2, [r7, #24]
 8017d2c:	429a      	cmp	r2, r3
 8017d2e:	d302      	bcc.n	8017d36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017d30:	2301      	movs	r3, #1
 8017d32:	61fb      	str	r3, [r7, #28]
 8017d34:	e015      	b.n	8017d62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017d36:	683b      	ldr	r3, [r7, #0]
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	697a      	ldr	r2, [r7, #20]
 8017d3c:	429a      	cmp	r2, r3
 8017d3e:	d20b      	bcs.n	8017d58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017d40:	683b      	ldr	r3, [r7, #0]
 8017d42:	681a      	ldr	r2, [r3, #0]
 8017d44:	697b      	ldr	r3, [r7, #20]
 8017d46:	1ad2      	subs	r2, r2, r3
 8017d48:	683b      	ldr	r3, [r7, #0]
 8017d4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017d4c:	6878      	ldr	r0, [r7, #4]
 8017d4e:	f7ff ff9b 	bl	8017c88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017d52:	2300      	movs	r3, #0
 8017d54:	61fb      	str	r3, [r7, #28]
 8017d56:	e004      	b.n	8017d62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8017d58:	683b      	ldr	r3, [r7, #0]
 8017d5a:	2200      	movs	r2, #0
 8017d5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8017d5e:	2301      	movs	r3, #1
 8017d60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017d62:	f000 ff77 	bl	8018c54 <vPortExitCritical>

	return xReturn;
 8017d66:	69fb      	ldr	r3, [r7, #28]
}
 8017d68:	4618      	mov	r0, r3
 8017d6a:	3720      	adds	r7, #32
 8017d6c:	46bd      	mov	sp, r7
 8017d6e:	bd80      	pop	{r7, pc}
 8017d70:	200014cc 	.word	0x200014cc
 8017d74:	200014e0 	.word	0x200014e0

08017d78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017d78:	b480      	push	{r7}
 8017d7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017d7c:	4b03      	ldr	r3, [pc, #12]	; (8017d8c <vTaskMissedYield+0x14>)
 8017d7e:	2201      	movs	r2, #1
 8017d80:	601a      	str	r2, [r3, #0]
}
 8017d82:	bf00      	nop
 8017d84:	46bd      	mov	sp, r7
 8017d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d8a:	4770      	bx	lr
 8017d8c:	200014dc 	.word	0x200014dc

08017d90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017d90:	b580      	push	{r7, lr}
 8017d92:	b082      	sub	sp, #8
 8017d94:	af00      	add	r7, sp, #0
 8017d96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017d98:	f000 f852 	bl	8017e40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017d9c:	4b06      	ldr	r3, [pc, #24]	; (8017db8 <prvIdleTask+0x28>)
 8017d9e:	681b      	ldr	r3, [r3, #0]
 8017da0:	2b01      	cmp	r3, #1
 8017da2:	d9f9      	bls.n	8017d98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8017da4:	4b05      	ldr	r3, [pc, #20]	; (8017dbc <prvIdleTask+0x2c>)
 8017da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017daa:	601a      	str	r2, [r3, #0]
 8017dac:	f3bf 8f4f 	dsb	sy
 8017db0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017db4:	e7f0      	b.n	8017d98 <prvIdleTask+0x8>
 8017db6:	bf00      	nop
 8017db8:	20000ff8 	.word	0x20000ff8
 8017dbc:	e000ed04 	.word	0xe000ed04

08017dc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017dc0:	b580      	push	{r7, lr}
 8017dc2:	b082      	sub	sp, #8
 8017dc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	607b      	str	r3, [r7, #4]
 8017dca:	e00c      	b.n	8017de6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017dcc:	687a      	ldr	r2, [r7, #4]
 8017dce:	4613      	mov	r3, r2
 8017dd0:	009b      	lsls	r3, r3, #2
 8017dd2:	4413      	add	r3, r2
 8017dd4:	009b      	lsls	r3, r3, #2
 8017dd6:	4a12      	ldr	r2, [pc, #72]	; (8017e20 <prvInitialiseTaskLists+0x60>)
 8017dd8:	4413      	add	r3, r2
 8017dda:	4618      	mov	r0, r3
 8017ddc:	f7fe f9a8 	bl	8016130 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	3301      	adds	r3, #1
 8017de4:	607b      	str	r3, [r7, #4]
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	2b37      	cmp	r3, #55	; 0x37
 8017dea:	d9ef      	bls.n	8017dcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017dec:	480d      	ldr	r0, [pc, #52]	; (8017e24 <prvInitialiseTaskLists+0x64>)
 8017dee:	f7fe f99f 	bl	8016130 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017df2:	480d      	ldr	r0, [pc, #52]	; (8017e28 <prvInitialiseTaskLists+0x68>)
 8017df4:	f7fe f99c 	bl	8016130 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017df8:	480c      	ldr	r0, [pc, #48]	; (8017e2c <prvInitialiseTaskLists+0x6c>)
 8017dfa:	f7fe f999 	bl	8016130 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017dfe:	480c      	ldr	r0, [pc, #48]	; (8017e30 <prvInitialiseTaskLists+0x70>)
 8017e00:	f7fe f996 	bl	8016130 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017e04:	480b      	ldr	r0, [pc, #44]	; (8017e34 <prvInitialiseTaskLists+0x74>)
 8017e06:	f7fe f993 	bl	8016130 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8017e0a:	4b0b      	ldr	r3, [pc, #44]	; (8017e38 <prvInitialiseTaskLists+0x78>)
 8017e0c:	4a05      	ldr	r2, [pc, #20]	; (8017e24 <prvInitialiseTaskLists+0x64>)
 8017e0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017e10:	4b0a      	ldr	r3, [pc, #40]	; (8017e3c <prvInitialiseTaskLists+0x7c>)
 8017e12:	4a05      	ldr	r2, [pc, #20]	; (8017e28 <prvInitialiseTaskLists+0x68>)
 8017e14:	601a      	str	r2, [r3, #0]
}
 8017e16:	bf00      	nop
 8017e18:	3708      	adds	r7, #8
 8017e1a:	46bd      	mov	sp, r7
 8017e1c:	bd80      	pop	{r7, pc}
 8017e1e:	bf00      	nop
 8017e20:	20000ff8 	.word	0x20000ff8
 8017e24:	20001458 	.word	0x20001458
 8017e28:	2000146c 	.word	0x2000146c
 8017e2c:	20001488 	.word	0x20001488
 8017e30:	2000149c 	.word	0x2000149c
 8017e34:	200014b4 	.word	0x200014b4
 8017e38:	20001480 	.word	0x20001480
 8017e3c:	20001484 	.word	0x20001484

08017e40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017e40:	b580      	push	{r7, lr}
 8017e42:	b082      	sub	sp, #8
 8017e44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017e46:	e019      	b.n	8017e7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017e48:	f000 fed4 	bl	8018bf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017e4c:	4b10      	ldr	r3, [pc, #64]	; (8017e90 <prvCheckTasksWaitingTermination+0x50>)
 8017e4e:	68db      	ldr	r3, [r3, #12]
 8017e50:	68db      	ldr	r3, [r3, #12]
 8017e52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	3304      	adds	r3, #4
 8017e58:	4618      	mov	r0, r3
 8017e5a:	f7fe f9f3 	bl	8016244 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017e5e:	4b0d      	ldr	r3, [pc, #52]	; (8017e94 <prvCheckTasksWaitingTermination+0x54>)
 8017e60:	681b      	ldr	r3, [r3, #0]
 8017e62:	3b01      	subs	r3, #1
 8017e64:	4a0b      	ldr	r2, [pc, #44]	; (8017e94 <prvCheckTasksWaitingTermination+0x54>)
 8017e66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017e68:	4b0b      	ldr	r3, [pc, #44]	; (8017e98 <prvCheckTasksWaitingTermination+0x58>)
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	3b01      	subs	r3, #1
 8017e6e:	4a0a      	ldr	r2, [pc, #40]	; (8017e98 <prvCheckTasksWaitingTermination+0x58>)
 8017e70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017e72:	f000 feef 	bl	8018c54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017e76:	6878      	ldr	r0, [r7, #4]
 8017e78:	f000 f810 	bl	8017e9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017e7c:	4b06      	ldr	r3, [pc, #24]	; (8017e98 <prvCheckTasksWaitingTermination+0x58>)
 8017e7e:	681b      	ldr	r3, [r3, #0]
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d1e1      	bne.n	8017e48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017e84:	bf00      	nop
 8017e86:	bf00      	nop
 8017e88:	3708      	adds	r7, #8
 8017e8a:	46bd      	mov	sp, r7
 8017e8c:	bd80      	pop	{r7, pc}
 8017e8e:	bf00      	nop
 8017e90:	2000149c 	.word	0x2000149c
 8017e94:	200014c8 	.word	0x200014c8
 8017e98:	200014b0 	.word	0x200014b0

08017e9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017e9c:	b580      	push	{r7, lr}
 8017e9e:	b084      	sub	sp, #16
 8017ea0:	af00      	add	r7, sp, #0
 8017ea2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	3354      	adds	r3, #84	; 0x54
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	f003 fbb9 	bl	801b620 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d108      	bne.n	8017eca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ebc:	4618      	mov	r0, r3
 8017ebe:	f001 f887 	bl	8018fd0 <vPortFree>
				vPortFree( pxTCB );
 8017ec2:	6878      	ldr	r0, [r7, #4]
 8017ec4:	f001 f884 	bl	8018fd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017ec8:	e018      	b.n	8017efc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8017ed0:	2b01      	cmp	r3, #1
 8017ed2:	d103      	bne.n	8017edc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8017ed4:	6878      	ldr	r0, [r7, #4]
 8017ed6:	f001 f87b 	bl	8018fd0 <vPortFree>
	}
 8017eda:	e00f      	b.n	8017efc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8017ee2:	2b02      	cmp	r3, #2
 8017ee4:	d00a      	beq.n	8017efc <prvDeleteTCB+0x60>
	__asm volatile
 8017ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017eea:	f383 8811 	msr	BASEPRI, r3
 8017eee:	f3bf 8f6f 	isb	sy
 8017ef2:	f3bf 8f4f 	dsb	sy
 8017ef6:	60fb      	str	r3, [r7, #12]
}
 8017ef8:	bf00      	nop
 8017efa:	e7fe      	b.n	8017efa <prvDeleteTCB+0x5e>
	}
 8017efc:	bf00      	nop
 8017efe:	3710      	adds	r7, #16
 8017f00:	46bd      	mov	sp, r7
 8017f02:	bd80      	pop	{r7, pc}

08017f04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017f04:	b480      	push	{r7}
 8017f06:	b083      	sub	sp, #12
 8017f08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017f0a:	4b0c      	ldr	r3, [pc, #48]	; (8017f3c <prvResetNextTaskUnblockTime+0x38>)
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d104      	bne.n	8017f1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017f14:	4b0a      	ldr	r3, [pc, #40]	; (8017f40 <prvResetNextTaskUnblockTime+0x3c>)
 8017f16:	f04f 32ff 	mov.w	r2, #4294967295
 8017f1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017f1c:	e008      	b.n	8017f30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017f1e:	4b07      	ldr	r3, [pc, #28]	; (8017f3c <prvResetNextTaskUnblockTime+0x38>)
 8017f20:	681b      	ldr	r3, [r3, #0]
 8017f22:	68db      	ldr	r3, [r3, #12]
 8017f24:	68db      	ldr	r3, [r3, #12]
 8017f26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	685b      	ldr	r3, [r3, #4]
 8017f2c:	4a04      	ldr	r2, [pc, #16]	; (8017f40 <prvResetNextTaskUnblockTime+0x3c>)
 8017f2e:	6013      	str	r3, [r2, #0]
}
 8017f30:	bf00      	nop
 8017f32:	370c      	adds	r7, #12
 8017f34:	46bd      	mov	sp, r7
 8017f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f3a:	4770      	bx	lr
 8017f3c:	20001480 	.word	0x20001480
 8017f40:	200014e8 	.word	0x200014e8

08017f44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017f44:	b480      	push	{r7}
 8017f46:	b083      	sub	sp, #12
 8017f48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017f4a:	4b0b      	ldr	r3, [pc, #44]	; (8017f78 <xTaskGetSchedulerState+0x34>)
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	d102      	bne.n	8017f58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017f52:	2301      	movs	r3, #1
 8017f54:	607b      	str	r3, [r7, #4]
 8017f56:	e008      	b.n	8017f6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017f58:	4b08      	ldr	r3, [pc, #32]	; (8017f7c <xTaskGetSchedulerState+0x38>)
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d102      	bne.n	8017f66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017f60:	2302      	movs	r3, #2
 8017f62:	607b      	str	r3, [r7, #4]
 8017f64:	e001      	b.n	8017f6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017f66:	2300      	movs	r3, #0
 8017f68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017f6a:	687b      	ldr	r3, [r7, #4]
	}
 8017f6c:	4618      	mov	r0, r3
 8017f6e:	370c      	adds	r7, #12
 8017f70:	46bd      	mov	sp, r7
 8017f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f76:	4770      	bx	lr
 8017f78:	200014d4 	.word	0x200014d4
 8017f7c:	200014f0 	.word	0x200014f0

08017f80 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8017f80:	b580      	push	{r7, lr}
 8017f82:	b084      	sub	sp, #16
 8017f84:	af00      	add	r7, sp, #0
 8017f86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8017f8c:	2300      	movs	r3, #0
 8017f8e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d051      	beq.n	801803a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8017f96:	68bb      	ldr	r3, [r7, #8]
 8017f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f9a:	4b2a      	ldr	r3, [pc, #168]	; (8018044 <xTaskPriorityInherit+0xc4>)
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fa0:	429a      	cmp	r2, r3
 8017fa2:	d241      	bcs.n	8018028 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017fa4:	68bb      	ldr	r3, [r7, #8]
 8017fa6:	699b      	ldr	r3, [r3, #24]
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	db06      	blt.n	8017fba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017fac:	4b25      	ldr	r3, [pc, #148]	; (8018044 <xTaskPriorityInherit+0xc4>)
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fb2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017fb6:	68bb      	ldr	r3, [r7, #8]
 8017fb8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8017fba:	68bb      	ldr	r3, [r7, #8]
 8017fbc:	6959      	ldr	r1, [r3, #20]
 8017fbe:	68bb      	ldr	r3, [r7, #8]
 8017fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017fc2:	4613      	mov	r3, r2
 8017fc4:	009b      	lsls	r3, r3, #2
 8017fc6:	4413      	add	r3, r2
 8017fc8:	009b      	lsls	r3, r3, #2
 8017fca:	4a1f      	ldr	r2, [pc, #124]	; (8018048 <xTaskPriorityInherit+0xc8>)
 8017fcc:	4413      	add	r3, r2
 8017fce:	4299      	cmp	r1, r3
 8017fd0:	d122      	bne.n	8018018 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017fd2:	68bb      	ldr	r3, [r7, #8]
 8017fd4:	3304      	adds	r3, #4
 8017fd6:	4618      	mov	r0, r3
 8017fd8:	f7fe f934 	bl	8016244 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017fdc:	4b19      	ldr	r3, [pc, #100]	; (8018044 <xTaskPriorityInherit+0xc4>)
 8017fde:	681b      	ldr	r3, [r3, #0]
 8017fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017fe2:	68bb      	ldr	r3, [r7, #8]
 8017fe4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8017fe6:	68bb      	ldr	r3, [r7, #8]
 8017fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017fea:	4b18      	ldr	r3, [pc, #96]	; (801804c <xTaskPriorityInherit+0xcc>)
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	429a      	cmp	r2, r3
 8017ff0:	d903      	bls.n	8017ffa <xTaskPriorityInherit+0x7a>
 8017ff2:	68bb      	ldr	r3, [r7, #8]
 8017ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ff6:	4a15      	ldr	r2, [pc, #84]	; (801804c <xTaskPriorityInherit+0xcc>)
 8017ff8:	6013      	str	r3, [r2, #0]
 8017ffa:	68bb      	ldr	r3, [r7, #8]
 8017ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ffe:	4613      	mov	r3, r2
 8018000:	009b      	lsls	r3, r3, #2
 8018002:	4413      	add	r3, r2
 8018004:	009b      	lsls	r3, r3, #2
 8018006:	4a10      	ldr	r2, [pc, #64]	; (8018048 <xTaskPriorityInherit+0xc8>)
 8018008:	441a      	add	r2, r3
 801800a:	68bb      	ldr	r3, [r7, #8]
 801800c:	3304      	adds	r3, #4
 801800e:	4619      	mov	r1, r3
 8018010:	4610      	mov	r0, r2
 8018012:	f7fe f8ba 	bl	801618a <vListInsertEnd>
 8018016:	e004      	b.n	8018022 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018018:	4b0a      	ldr	r3, [pc, #40]	; (8018044 <xTaskPriorityInherit+0xc4>)
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801801e:	68bb      	ldr	r3, [r7, #8]
 8018020:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8018022:	2301      	movs	r3, #1
 8018024:	60fb      	str	r3, [r7, #12]
 8018026:	e008      	b.n	801803a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8018028:	68bb      	ldr	r3, [r7, #8]
 801802a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801802c:	4b05      	ldr	r3, [pc, #20]	; (8018044 <xTaskPriorityInherit+0xc4>)
 801802e:	681b      	ldr	r3, [r3, #0]
 8018030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018032:	429a      	cmp	r2, r3
 8018034:	d201      	bcs.n	801803a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8018036:	2301      	movs	r3, #1
 8018038:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801803a:	68fb      	ldr	r3, [r7, #12]
	}
 801803c:	4618      	mov	r0, r3
 801803e:	3710      	adds	r7, #16
 8018040:	46bd      	mov	sp, r7
 8018042:	bd80      	pop	{r7, pc}
 8018044:	20000ff4 	.word	0x20000ff4
 8018048:	20000ff8 	.word	0x20000ff8
 801804c:	200014d0 	.word	0x200014d0

08018050 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018050:	b580      	push	{r7, lr}
 8018052:	b086      	sub	sp, #24
 8018054:	af00      	add	r7, sp, #0
 8018056:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801805c:	2300      	movs	r3, #0
 801805e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	2b00      	cmp	r3, #0
 8018064:	d056      	beq.n	8018114 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018066:	4b2e      	ldr	r3, [pc, #184]	; (8018120 <xTaskPriorityDisinherit+0xd0>)
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	693a      	ldr	r2, [r7, #16]
 801806c:	429a      	cmp	r2, r3
 801806e:	d00a      	beq.n	8018086 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018074:	f383 8811 	msr	BASEPRI, r3
 8018078:	f3bf 8f6f 	isb	sy
 801807c:	f3bf 8f4f 	dsb	sy
 8018080:	60fb      	str	r3, [r7, #12]
}
 8018082:	bf00      	nop
 8018084:	e7fe      	b.n	8018084 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018086:	693b      	ldr	r3, [r7, #16]
 8018088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801808a:	2b00      	cmp	r3, #0
 801808c:	d10a      	bne.n	80180a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801808e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018092:	f383 8811 	msr	BASEPRI, r3
 8018096:	f3bf 8f6f 	isb	sy
 801809a:	f3bf 8f4f 	dsb	sy
 801809e:	60bb      	str	r3, [r7, #8]
}
 80180a0:	bf00      	nop
 80180a2:	e7fe      	b.n	80180a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80180a4:	693b      	ldr	r3, [r7, #16]
 80180a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80180a8:	1e5a      	subs	r2, r3, #1
 80180aa:	693b      	ldr	r3, [r7, #16]
 80180ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80180ae:	693b      	ldr	r3, [r7, #16]
 80180b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80180b2:	693b      	ldr	r3, [r7, #16]
 80180b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80180b6:	429a      	cmp	r2, r3
 80180b8:	d02c      	beq.n	8018114 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80180ba:	693b      	ldr	r3, [r7, #16]
 80180bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d128      	bne.n	8018114 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80180c2:	693b      	ldr	r3, [r7, #16]
 80180c4:	3304      	adds	r3, #4
 80180c6:	4618      	mov	r0, r3
 80180c8:	f7fe f8bc 	bl	8016244 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80180cc:	693b      	ldr	r3, [r7, #16]
 80180ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80180d0:	693b      	ldr	r3, [r7, #16]
 80180d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80180d4:	693b      	ldr	r3, [r7, #16]
 80180d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80180dc:	693b      	ldr	r3, [r7, #16]
 80180de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80180e0:	693b      	ldr	r3, [r7, #16]
 80180e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80180e4:	4b0f      	ldr	r3, [pc, #60]	; (8018124 <xTaskPriorityDisinherit+0xd4>)
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	429a      	cmp	r2, r3
 80180ea:	d903      	bls.n	80180f4 <xTaskPriorityDisinherit+0xa4>
 80180ec:	693b      	ldr	r3, [r7, #16]
 80180ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180f0:	4a0c      	ldr	r2, [pc, #48]	; (8018124 <xTaskPriorityDisinherit+0xd4>)
 80180f2:	6013      	str	r3, [r2, #0]
 80180f4:	693b      	ldr	r3, [r7, #16]
 80180f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80180f8:	4613      	mov	r3, r2
 80180fa:	009b      	lsls	r3, r3, #2
 80180fc:	4413      	add	r3, r2
 80180fe:	009b      	lsls	r3, r3, #2
 8018100:	4a09      	ldr	r2, [pc, #36]	; (8018128 <xTaskPriorityDisinherit+0xd8>)
 8018102:	441a      	add	r2, r3
 8018104:	693b      	ldr	r3, [r7, #16]
 8018106:	3304      	adds	r3, #4
 8018108:	4619      	mov	r1, r3
 801810a:	4610      	mov	r0, r2
 801810c:	f7fe f83d 	bl	801618a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018110:	2301      	movs	r3, #1
 8018112:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018114:	697b      	ldr	r3, [r7, #20]
	}
 8018116:	4618      	mov	r0, r3
 8018118:	3718      	adds	r7, #24
 801811a:	46bd      	mov	sp, r7
 801811c:	bd80      	pop	{r7, pc}
 801811e:	bf00      	nop
 8018120:	20000ff4 	.word	0x20000ff4
 8018124:	200014d0 	.word	0x200014d0
 8018128:	20000ff8 	.word	0x20000ff8

0801812c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801812c:	b580      	push	{r7, lr}
 801812e:	b088      	sub	sp, #32
 8018130:	af00      	add	r7, sp, #0
 8018132:	6078      	str	r0, [r7, #4]
 8018134:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801813a:	2301      	movs	r3, #1
 801813c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	2b00      	cmp	r3, #0
 8018142:	d06a      	beq.n	801821a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8018144:	69bb      	ldr	r3, [r7, #24]
 8018146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018148:	2b00      	cmp	r3, #0
 801814a:	d10a      	bne.n	8018162 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801814c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018150:	f383 8811 	msr	BASEPRI, r3
 8018154:	f3bf 8f6f 	isb	sy
 8018158:	f3bf 8f4f 	dsb	sy
 801815c:	60fb      	str	r3, [r7, #12]
}
 801815e:	bf00      	nop
 8018160:	e7fe      	b.n	8018160 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8018162:	69bb      	ldr	r3, [r7, #24]
 8018164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018166:	683a      	ldr	r2, [r7, #0]
 8018168:	429a      	cmp	r2, r3
 801816a:	d902      	bls.n	8018172 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801816c:	683b      	ldr	r3, [r7, #0]
 801816e:	61fb      	str	r3, [r7, #28]
 8018170:	e002      	b.n	8018178 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8018172:	69bb      	ldr	r3, [r7, #24]
 8018174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018176:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018178:	69bb      	ldr	r3, [r7, #24]
 801817a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801817c:	69fa      	ldr	r2, [r7, #28]
 801817e:	429a      	cmp	r2, r3
 8018180:	d04b      	beq.n	801821a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8018182:	69bb      	ldr	r3, [r7, #24]
 8018184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018186:	697a      	ldr	r2, [r7, #20]
 8018188:	429a      	cmp	r2, r3
 801818a:	d146      	bne.n	801821a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801818c:	4b25      	ldr	r3, [pc, #148]	; (8018224 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	69ba      	ldr	r2, [r7, #24]
 8018192:	429a      	cmp	r2, r3
 8018194:	d10a      	bne.n	80181ac <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8018196:	f04f 0350 	mov.w	r3, #80	; 0x50
 801819a:	f383 8811 	msr	BASEPRI, r3
 801819e:	f3bf 8f6f 	isb	sy
 80181a2:	f3bf 8f4f 	dsb	sy
 80181a6:	60bb      	str	r3, [r7, #8]
}
 80181a8:	bf00      	nop
 80181aa:	e7fe      	b.n	80181aa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80181ac:	69bb      	ldr	r3, [r7, #24]
 80181ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181b0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80181b2:	69bb      	ldr	r3, [r7, #24]
 80181b4:	69fa      	ldr	r2, [r7, #28]
 80181b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80181b8:	69bb      	ldr	r3, [r7, #24]
 80181ba:	699b      	ldr	r3, [r3, #24]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	db04      	blt.n	80181ca <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80181c0:	69fb      	ldr	r3, [r7, #28]
 80181c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80181c6:	69bb      	ldr	r3, [r7, #24]
 80181c8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80181ca:	69bb      	ldr	r3, [r7, #24]
 80181cc:	6959      	ldr	r1, [r3, #20]
 80181ce:	693a      	ldr	r2, [r7, #16]
 80181d0:	4613      	mov	r3, r2
 80181d2:	009b      	lsls	r3, r3, #2
 80181d4:	4413      	add	r3, r2
 80181d6:	009b      	lsls	r3, r3, #2
 80181d8:	4a13      	ldr	r2, [pc, #76]	; (8018228 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80181da:	4413      	add	r3, r2
 80181dc:	4299      	cmp	r1, r3
 80181de:	d11c      	bne.n	801821a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80181e0:	69bb      	ldr	r3, [r7, #24]
 80181e2:	3304      	adds	r3, #4
 80181e4:	4618      	mov	r0, r3
 80181e6:	f7fe f82d 	bl	8016244 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80181ea:	69bb      	ldr	r3, [r7, #24]
 80181ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80181ee:	4b0f      	ldr	r3, [pc, #60]	; (801822c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	429a      	cmp	r2, r3
 80181f4:	d903      	bls.n	80181fe <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80181f6:	69bb      	ldr	r3, [r7, #24]
 80181f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181fa:	4a0c      	ldr	r2, [pc, #48]	; (801822c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80181fc:	6013      	str	r3, [r2, #0]
 80181fe:	69bb      	ldr	r3, [r7, #24]
 8018200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018202:	4613      	mov	r3, r2
 8018204:	009b      	lsls	r3, r3, #2
 8018206:	4413      	add	r3, r2
 8018208:	009b      	lsls	r3, r3, #2
 801820a:	4a07      	ldr	r2, [pc, #28]	; (8018228 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801820c:	441a      	add	r2, r3
 801820e:	69bb      	ldr	r3, [r7, #24]
 8018210:	3304      	adds	r3, #4
 8018212:	4619      	mov	r1, r3
 8018214:	4610      	mov	r0, r2
 8018216:	f7fd ffb8 	bl	801618a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801821a:	bf00      	nop
 801821c:	3720      	adds	r7, #32
 801821e:	46bd      	mov	sp, r7
 8018220:	bd80      	pop	{r7, pc}
 8018222:	bf00      	nop
 8018224:	20000ff4 	.word	0x20000ff4
 8018228:	20000ff8 	.word	0x20000ff8
 801822c:	200014d0 	.word	0x200014d0

08018230 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8018230:	b480      	push	{r7}
 8018232:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018234:	4b07      	ldr	r3, [pc, #28]	; (8018254 <pvTaskIncrementMutexHeldCount+0x24>)
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	2b00      	cmp	r3, #0
 801823a:	d004      	beq.n	8018246 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801823c:	4b05      	ldr	r3, [pc, #20]	; (8018254 <pvTaskIncrementMutexHeldCount+0x24>)
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018242:	3201      	adds	r2, #1
 8018244:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8018246:	4b03      	ldr	r3, [pc, #12]	; (8018254 <pvTaskIncrementMutexHeldCount+0x24>)
 8018248:	681b      	ldr	r3, [r3, #0]
	}
 801824a:	4618      	mov	r0, r3
 801824c:	46bd      	mov	sp, r7
 801824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018252:	4770      	bx	lr
 8018254:	20000ff4 	.word	0x20000ff4

08018258 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018258:	b580      	push	{r7, lr}
 801825a:	b084      	sub	sp, #16
 801825c:	af00      	add	r7, sp, #0
 801825e:	6078      	str	r0, [r7, #4]
 8018260:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018262:	4b21      	ldr	r3, [pc, #132]	; (80182e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8018264:	681b      	ldr	r3, [r3, #0]
 8018266:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018268:	4b20      	ldr	r3, [pc, #128]	; (80182ec <prvAddCurrentTaskToDelayedList+0x94>)
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	3304      	adds	r3, #4
 801826e:	4618      	mov	r0, r3
 8018270:	f7fd ffe8 	bl	8016244 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	f1b3 3fff 	cmp.w	r3, #4294967295
 801827a:	d10a      	bne.n	8018292 <prvAddCurrentTaskToDelayedList+0x3a>
 801827c:	683b      	ldr	r3, [r7, #0]
 801827e:	2b00      	cmp	r3, #0
 8018280:	d007      	beq.n	8018292 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018282:	4b1a      	ldr	r3, [pc, #104]	; (80182ec <prvAddCurrentTaskToDelayedList+0x94>)
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	3304      	adds	r3, #4
 8018288:	4619      	mov	r1, r3
 801828a:	4819      	ldr	r0, [pc, #100]	; (80182f0 <prvAddCurrentTaskToDelayedList+0x98>)
 801828c:	f7fd ff7d 	bl	801618a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018290:	e026      	b.n	80182e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018292:	68fa      	ldr	r2, [r7, #12]
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	4413      	add	r3, r2
 8018298:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801829a:	4b14      	ldr	r3, [pc, #80]	; (80182ec <prvAddCurrentTaskToDelayedList+0x94>)
 801829c:	681b      	ldr	r3, [r3, #0]
 801829e:	68ba      	ldr	r2, [r7, #8]
 80182a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80182a2:	68ba      	ldr	r2, [r7, #8]
 80182a4:	68fb      	ldr	r3, [r7, #12]
 80182a6:	429a      	cmp	r2, r3
 80182a8:	d209      	bcs.n	80182be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80182aa:	4b12      	ldr	r3, [pc, #72]	; (80182f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80182ac:	681a      	ldr	r2, [r3, #0]
 80182ae:	4b0f      	ldr	r3, [pc, #60]	; (80182ec <prvAddCurrentTaskToDelayedList+0x94>)
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	3304      	adds	r3, #4
 80182b4:	4619      	mov	r1, r3
 80182b6:	4610      	mov	r0, r2
 80182b8:	f7fd ff8b 	bl	80161d2 <vListInsert>
}
 80182bc:	e010      	b.n	80182e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80182be:	4b0e      	ldr	r3, [pc, #56]	; (80182f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80182c0:	681a      	ldr	r2, [r3, #0]
 80182c2:	4b0a      	ldr	r3, [pc, #40]	; (80182ec <prvAddCurrentTaskToDelayedList+0x94>)
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	3304      	adds	r3, #4
 80182c8:	4619      	mov	r1, r3
 80182ca:	4610      	mov	r0, r2
 80182cc:	f7fd ff81 	bl	80161d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80182d0:	4b0a      	ldr	r3, [pc, #40]	; (80182fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	68ba      	ldr	r2, [r7, #8]
 80182d6:	429a      	cmp	r2, r3
 80182d8:	d202      	bcs.n	80182e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80182da:	4a08      	ldr	r2, [pc, #32]	; (80182fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80182dc:	68bb      	ldr	r3, [r7, #8]
 80182de:	6013      	str	r3, [r2, #0]
}
 80182e0:	bf00      	nop
 80182e2:	3710      	adds	r7, #16
 80182e4:	46bd      	mov	sp, r7
 80182e6:	bd80      	pop	{r7, pc}
 80182e8:	200014cc 	.word	0x200014cc
 80182ec:	20000ff4 	.word	0x20000ff4
 80182f0:	200014b4 	.word	0x200014b4
 80182f4:	20001484 	.word	0x20001484
 80182f8:	20001480 	.word	0x20001480
 80182fc:	200014e8 	.word	0x200014e8

08018300 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018300:	b580      	push	{r7, lr}
 8018302:	b08a      	sub	sp, #40	; 0x28
 8018304:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018306:	2300      	movs	r3, #0
 8018308:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801830a:	f000 fb07 	bl	801891c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801830e:	4b1c      	ldr	r3, [pc, #112]	; (8018380 <xTimerCreateTimerTask+0x80>)
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	2b00      	cmp	r3, #0
 8018314:	d021      	beq.n	801835a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018316:	2300      	movs	r3, #0
 8018318:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801831a:	2300      	movs	r3, #0
 801831c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801831e:	1d3a      	adds	r2, r7, #4
 8018320:	f107 0108 	add.w	r1, r7, #8
 8018324:	f107 030c 	add.w	r3, r7, #12
 8018328:	4618      	mov	r0, r3
 801832a:	f7fd fee7 	bl	80160fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801832e:	6879      	ldr	r1, [r7, #4]
 8018330:	68bb      	ldr	r3, [r7, #8]
 8018332:	68fa      	ldr	r2, [r7, #12]
 8018334:	9202      	str	r2, [sp, #8]
 8018336:	9301      	str	r3, [sp, #4]
 8018338:	2302      	movs	r3, #2
 801833a:	9300      	str	r3, [sp, #0]
 801833c:	2300      	movs	r3, #0
 801833e:	460a      	mov	r2, r1
 8018340:	4910      	ldr	r1, [pc, #64]	; (8018384 <xTimerCreateTimerTask+0x84>)
 8018342:	4811      	ldr	r0, [pc, #68]	; (8018388 <xTimerCreateTimerTask+0x88>)
 8018344:	f7fe ffb6 	bl	80172b4 <xTaskCreateStatic>
 8018348:	4603      	mov	r3, r0
 801834a:	4a10      	ldr	r2, [pc, #64]	; (801838c <xTimerCreateTimerTask+0x8c>)
 801834c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801834e:	4b0f      	ldr	r3, [pc, #60]	; (801838c <xTimerCreateTimerTask+0x8c>)
 8018350:	681b      	ldr	r3, [r3, #0]
 8018352:	2b00      	cmp	r3, #0
 8018354:	d001      	beq.n	801835a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018356:	2301      	movs	r3, #1
 8018358:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801835a:	697b      	ldr	r3, [r7, #20]
 801835c:	2b00      	cmp	r3, #0
 801835e:	d10a      	bne.n	8018376 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018364:	f383 8811 	msr	BASEPRI, r3
 8018368:	f3bf 8f6f 	isb	sy
 801836c:	f3bf 8f4f 	dsb	sy
 8018370:	613b      	str	r3, [r7, #16]
}
 8018372:	bf00      	nop
 8018374:	e7fe      	b.n	8018374 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018376:	697b      	ldr	r3, [r7, #20]
}
 8018378:	4618      	mov	r0, r3
 801837a:	3718      	adds	r7, #24
 801837c:	46bd      	mov	sp, r7
 801837e:	bd80      	pop	{r7, pc}
 8018380:	20001524 	.word	0x20001524
 8018384:	08021d30 	.word	0x08021d30
 8018388:	080184c5 	.word	0x080184c5
 801838c:	20001528 	.word	0x20001528

08018390 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018390:	b580      	push	{r7, lr}
 8018392:	b08a      	sub	sp, #40	; 0x28
 8018394:	af00      	add	r7, sp, #0
 8018396:	60f8      	str	r0, [r7, #12]
 8018398:	60b9      	str	r1, [r7, #8]
 801839a:	607a      	str	r2, [r7, #4]
 801839c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801839e:	2300      	movs	r3, #0
 80183a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80183a2:	68fb      	ldr	r3, [r7, #12]
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d10a      	bne.n	80183be <xTimerGenericCommand+0x2e>
	__asm volatile
 80183a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183ac:	f383 8811 	msr	BASEPRI, r3
 80183b0:	f3bf 8f6f 	isb	sy
 80183b4:	f3bf 8f4f 	dsb	sy
 80183b8:	623b      	str	r3, [r7, #32]
}
 80183ba:	bf00      	nop
 80183bc:	e7fe      	b.n	80183bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80183be:	4b1a      	ldr	r3, [pc, #104]	; (8018428 <xTimerGenericCommand+0x98>)
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	d02a      	beq.n	801841c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80183c6:	68bb      	ldr	r3, [r7, #8]
 80183c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80183d2:	68bb      	ldr	r3, [r7, #8]
 80183d4:	2b05      	cmp	r3, #5
 80183d6:	dc18      	bgt.n	801840a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80183d8:	f7ff fdb4 	bl	8017f44 <xTaskGetSchedulerState>
 80183dc:	4603      	mov	r3, r0
 80183de:	2b02      	cmp	r3, #2
 80183e0:	d109      	bne.n	80183f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80183e2:	4b11      	ldr	r3, [pc, #68]	; (8018428 <xTimerGenericCommand+0x98>)
 80183e4:	6818      	ldr	r0, [r3, #0]
 80183e6:	f107 0110 	add.w	r1, r7, #16
 80183ea:	2300      	movs	r3, #0
 80183ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80183ee:	f7fe f8fb 	bl	80165e8 <xQueueGenericSend>
 80183f2:	6278      	str	r0, [r7, #36]	; 0x24
 80183f4:	e012      	b.n	801841c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80183f6:	4b0c      	ldr	r3, [pc, #48]	; (8018428 <xTimerGenericCommand+0x98>)
 80183f8:	6818      	ldr	r0, [r3, #0]
 80183fa:	f107 0110 	add.w	r1, r7, #16
 80183fe:	2300      	movs	r3, #0
 8018400:	2200      	movs	r2, #0
 8018402:	f7fe f8f1 	bl	80165e8 <xQueueGenericSend>
 8018406:	6278      	str	r0, [r7, #36]	; 0x24
 8018408:	e008      	b.n	801841c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801840a:	4b07      	ldr	r3, [pc, #28]	; (8018428 <xTimerGenericCommand+0x98>)
 801840c:	6818      	ldr	r0, [r3, #0]
 801840e:	f107 0110 	add.w	r1, r7, #16
 8018412:	2300      	movs	r3, #0
 8018414:	683a      	ldr	r2, [r7, #0]
 8018416:	f7fe f9e5 	bl	80167e4 <xQueueGenericSendFromISR>
 801841a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801841e:	4618      	mov	r0, r3
 8018420:	3728      	adds	r7, #40	; 0x28
 8018422:	46bd      	mov	sp, r7
 8018424:	bd80      	pop	{r7, pc}
 8018426:	bf00      	nop
 8018428:	20001524 	.word	0x20001524

0801842c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801842c:	b580      	push	{r7, lr}
 801842e:	b088      	sub	sp, #32
 8018430:	af02      	add	r7, sp, #8
 8018432:	6078      	str	r0, [r7, #4]
 8018434:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018436:	4b22      	ldr	r3, [pc, #136]	; (80184c0 <prvProcessExpiredTimer+0x94>)
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	68db      	ldr	r3, [r3, #12]
 801843c:	68db      	ldr	r3, [r3, #12]
 801843e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018440:	697b      	ldr	r3, [r7, #20]
 8018442:	3304      	adds	r3, #4
 8018444:	4618      	mov	r0, r3
 8018446:	f7fd fefd 	bl	8016244 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801844a:	697b      	ldr	r3, [r7, #20]
 801844c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018450:	f003 0304 	and.w	r3, r3, #4
 8018454:	2b00      	cmp	r3, #0
 8018456:	d022      	beq.n	801849e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018458:	697b      	ldr	r3, [r7, #20]
 801845a:	699a      	ldr	r2, [r3, #24]
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	18d1      	adds	r1, r2, r3
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	683a      	ldr	r2, [r7, #0]
 8018464:	6978      	ldr	r0, [r7, #20]
 8018466:	f000 f8d1 	bl	801860c <prvInsertTimerInActiveList>
 801846a:	4603      	mov	r3, r0
 801846c:	2b00      	cmp	r3, #0
 801846e:	d01f      	beq.n	80184b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018470:	2300      	movs	r3, #0
 8018472:	9300      	str	r3, [sp, #0]
 8018474:	2300      	movs	r3, #0
 8018476:	687a      	ldr	r2, [r7, #4]
 8018478:	2100      	movs	r1, #0
 801847a:	6978      	ldr	r0, [r7, #20]
 801847c:	f7ff ff88 	bl	8018390 <xTimerGenericCommand>
 8018480:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018482:	693b      	ldr	r3, [r7, #16]
 8018484:	2b00      	cmp	r3, #0
 8018486:	d113      	bne.n	80184b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8018488:	f04f 0350 	mov.w	r3, #80	; 0x50
 801848c:	f383 8811 	msr	BASEPRI, r3
 8018490:	f3bf 8f6f 	isb	sy
 8018494:	f3bf 8f4f 	dsb	sy
 8018498:	60fb      	str	r3, [r7, #12]
}
 801849a:	bf00      	nop
 801849c:	e7fe      	b.n	801849c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801849e:	697b      	ldr	r3, [r7, #20]
 80184a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80184a4:	f023 0301 	bic.w	r3, r3, #1
 80184a8:	b2da      	uxtb	r2, r3
 80184aa:	697b      	ldr	r3, [r7, #20]
 80184ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80184b0:	697b      	ldr	r3, [r7, #20]
 80184b2:	6a1b      	ldr	r3, [r3, #32]
 80184b4:	6978      	ldr	r0, [r7, #20]
 80184b6:	4798      	blx	r3
}
 80184b8:	bf00      	nop
 80184ba:	3718      	adds	r7, #24
 80184bc:	46bd      	mov	sp, r7
 80184be:	bd80      	pop	{r7, pc}
 80184c0:	2000151c 	.word	0x2000151c

080184c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80184c4:	b580      	push	{r7, lr}
 80184c6:	b084      	sub	sp, #16
 80184c8:	af00      	add	r7, sp, #0
 80184ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80184cc:	f107 0308 	add.w	r3, r7, #8
 80184d0:	4618      	mov	r0, r3
 80184d2:	f000 f857 	bl	8018584 <prvGetNextExpireTime>
 80184d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80184d8:	68bb      	ldr	r3, [r7, #8]
 80184da:	4619      	mov	r1, r3
 80184dc:	68f8      	ldr	r0, [r7, #12]
 80184de:	f000 f803 	bl	80184e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80184e2:	f000 f8d5 	bl	8018690 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80184e6:	e7f1      	b.n	80184cc <prvTimerTask+0x8>

080184e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80184e8:	b580      	push	{r7, lr}
 80184ea:	b084      	sub	sp, #16
 80184ec:	af00      	add	r7, sp, #0
 80184ee:	6078      	str	r0, [r7, #4]
 80184f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80184f2:	f7ff f93b 	bl	801776c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80184f6:	f107 0308 	add.w	r3, r7, #8
 80184fa:	4618      	mov	r0, r3
 80184fc:	f000 f866 	bl	80185cc <prvSampleTimeNow>
 8018500:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018502:	68bb      	ldr	r3, [r7, #8]
 8018504:	2b00      	cmp	r3, #0
 8018506:	d130      	bne.n	801856a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018508:	683b      	ldr	r3, [r7, #0]
 801850a:	2b00      	cmp	r3, #0
 801850c:	d10a      	bne.n	8018524 <prvProcessTimerOrBlockTask+0x3c>
 801850e:	687a      	ldr	r2, [r7, #4]
 8018510:	68fb      	ldr	r3, [r7, #12]
 8018512:	429a      	cmp	r2, r3
 8018514:	d806      	bhi.n	8018524 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8018516:	f7ff f937 	bl	8017788 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801851a:	68f9      	ldr	r1, [r7, #12]
 801851c:	6878      	ldr	r0, [r7, #4]
 801851e:	f7ff ff85 	bl	801842c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018522:	e024      	b.n	801856e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018524:	683b      	ldr	r3, [r7, #0]
 8018526:	2b00      	cmp	r3, #0
 8018528:	d008      	beq.n	801853c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801852a:	4b13      	ldr	r3, [pc, #76]	; (8018578 <prvProcessTimerOrBlockTask+0x90>)
 801852c:	681b      	ldr	r3, [r3, #0]
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	2b00      	cmp	r3, #0
 8018532:	d101      	bne.n	8018538 <prvProcessTimerOrBlockTask+0x50>
 8018534:	2301      	movs	r3, #1
 8018536:	e000      	b.n	801853a <prvProcessTimerOrBlockTask+0x52>
 8018538:	2300      	movs	r3, #0
 801853a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801853c:	4b0f      	ldr	r3, [pc, #60]	; (801857c <prvProcessTimerOrBlockTask+0x94>)
 801853e:	6818      	ldr	r0, [r3, #0]
 8018540:	687a      	ldr	r2, [r7, #4]
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	1ad3      	subs	r3, r2, r3
 8018546:	683a      	ldr	r2, [r7, #0]
 8018548:	4619      	mov	r1, r3
 801854a:	f7fe fe7f 	bl	801724c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801854e:	f7ff f91b 	bl	8017788 <xTaskResumeAll>
 8018552:	4603      	mov	r3, r0
 8018554:	2b00      	cmp	r3, #0
 8018556:	d10a      	bne.n	801856e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018558:	4b09      	ldr	r3, [pc, #36]	; (8018580 <prvProcessTimerOrBlockTask+0x98>)
 801855a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801855e:	601a      	str	r2, [r3, #0]
 8018560:	f3bf 8f4f 	dsb	sy
 8018564:	f3bf 8f6f 	isb	sy
}
 8018568:	e001      	b.n	801856e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801856a:	f7ff f90d 	bl	8017788 <xTaskResumeAll>
}
 801856e:	bf00      	nop
 8018570:	3710      	adds	r7, #16
 8018572:	46bd      	mov	sp, r7
 8018574:	bd80      	pop	{r7, pc}
 8018576:	bf00      	nop
 8018578:	20001520 	.word	0x20001520
 801857c:	20001524 	.word	0x20001524
 8018580:	e000ed04 	.word	0xe000ed04

08018584 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018584:	b480      	push	{r7}
 8018586:	b085      	sub	sp, #20
 8018588:	af00      	add	r7, sp, #0
 801858a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801858c:	4b0e      	ldr	r3, [pc, #56]	; (80185c8 <prvGetNextExpireTime+0x44>)
 801858e:	681b      	ldr	r3, [r3, #0]
 8018590:	681b      	ldr	r3, [r3, #0]
 8018592:	2b00      	cmp	r3, #0
 8018594:	d101      	bne.n	801859a <prvGetNextExpireTime+0x16>
 8018596:	2201      	movs	r2, #1
 8018598:	e000      	b.n	801859c <prvGetNextExpireTime+0x18>
 801859a:	2200      	movs	r2, #0
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d105      	bne.n	80185b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80185a8:	4b07      	ldr	r3, [pc, #28]	; (80185c8 <prvGetNextExpireTime+0x44>)
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	68db      	ldr	r3, [r3, #12]
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	60fb      	str	r3, [r7, #12]
 80185b2:	e001      	b.n	80185b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80185b4:	2300      	movs	r3, #0
 80185b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80185b8:	68fb      	ldr	r3, [r7, #12]
}
 80185ba:	4618      	mov	r0, r3
 80185bc:	3714      	adds	r7, #20
 80185be:	46bd      	mov	sp, r7
 80185c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185c4:	4770      	bx	lr
 80185c6:	bf00      	nop
 80185c8:	2000151c 	.word	0x2000151c

080185cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80185cc:	b580      	push	{r7, lr}
 80185ce:	b084      	sub	sp, #16
 80185d0:	af00      	add	r7, sp, #0
 80185d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80185d4:	f7ff f976 	bl	80178c4 <xTaskGetTickCount>
 80185d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80185da:	4b0b      	ldr	r3, [pc, #44]	; (8018608 <prvSampleTimeNow+0x3c>)
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	68fa      	ldr	r2, [r7, #12]
 80185e0:	429a      	cmp	r2, r3
 80185e2:	d205      	bcs.n	80185f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80185e4:	f000 f936 	bl	8018854 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	2201      	movs	r2, #1
 80185ec:	601a      	str	r2, [r3, #0]
 80185ee:	e002      	b.n	80185f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	2200      	movs	r2, #0
 80185f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80185f6:	4a04      	ldr	r2, [pc, #16]	; (8018608 <prvSampleTimeNow+0x3c>)
 80185f8:	68fb      	ldr	r3, [r7, #12]
 80185fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80185fc:	68fb      	ldr	r3, [r7, #12]
}
 80185fe:	4618      	mov	r0, r3
 8018600:	3710      	adds	r7, #16
 8018602:	46bd      	mov	sp, r7
 8018604:	bd80      	pop	{r7, pc}
 8018606:	bf00      	nop
 8018608:	2000152c 	.word	0x2000152c

0801860c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801860c:	b580      	push	{r7, lr}
 801860e:	b086      	sub	sp, #24
 8018610:	af00      	add	r7, sp, #0
 8018612:	60f8      	str	r0, [r7, #12]
 8018614:	60b9      	str	r1, [r7, #8]
 8018616:	607a      	str	r2, [r7, #4]
 8018618:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801861a:	2300      	movs	r3, #0
 801861c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	68ba      	ldr	r2, [r7, #8]
 8018622:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	68fa      	ldr	r2, [r7, #12]
 8018628:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801862a:	68ba      	ldr	r2, [r7, #8]
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	429a      	cmp	r2, r3
 8018630:	d812      	bhi.n	8018658 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018632:	687a      	ldr	r2, [r7, #4]
 8018634:	683b      	ldr	r3, [r7, #0]
 8018636:	1ad2      	subs	r2, r2, r3
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	699b      	ldr	r3, [r3, #24]
 801863c:	429a      	cmp	r2, r3
 801863e:	d302      	bcc.n	8018646 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018640:	2301      	movs	r3, #1
 8018642:	617b      	str	r3, [r7, #20]
 8018644:	e01b      	b.n	801867e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018646:	4b10      	ldr	r3, [pc, #64]	; (8018688 <prvInsertTimerInActiveList+0x7c>)
 8018648:	681a      	ldr	r2, [r3, #0]
 801864a:	68fb      	ldr	r3, [r7, #12]
 801864c:	3304      	adds	r3, #4
 801864e:	4619      	mov	r1, r3
 8018650:	4610      	mov	r0, r2
 8018652:	f7fd fdbe 	bl	80161d2 <vListInsert>
 8018656:	e012      	b.n	801867e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018658:	687a      	ldr	r2, [r7, #4]
 801865a:	683b      	ldr	r3, [r7, #0]
 801865c:	429a      	cmp	r2, r3
 801865e:	d206      	bcs.n	801866e <prvInsertTimerInActiveList+0x62>
 8018660:	68ba      	ldr	r2, [r7, #8]
 8018662:	683b      	ldr	r3, [r7, #0]
 8018664:	429a      	cmp	r2, r3
 8018666:	d302      	bcc.n	801866e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018668:	2301      	movs	r3, #1
 801866a:	617b      	str	r3, [r7, #20]
 801866c:	e007      	b.n	801867e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801866e:	4b07      	ldr	r3, [pc, #28]	; (801868c <prvInsertTimerInActiveList+0x80>)
 8018670:	681a      	ldr	r2, [r3, #0]
 8018672:	68fb      	ldr	r3, [r7, #12]
 8018674:	3304      	adds	r3, #4
 8018676:	4619      	mov	r1, r3
 8018678:	4610      	mov	r0, r2
 801867a:	f7fd fdaa 	bl	80161d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801867e:	697b      	ldr	r3, [r7, #20]
}
 8018680:	4618      	mov	r0, r3
 8018682:	3718      	adds	r7, #24
 8018684:	46bd      	mov	sp, r7
 8018686:	bd80      	pop	{r7, pc}
 8018688:	20001520 	.word	0x20001520
 801868c:	2000151c 	.word	0x2000151c

08018690 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018690:	b580      	push	{r7, lr}
 8018692:	b08e      	sub	sp, #56	; 0x38
 8018694:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018696:	e0ca      	b.n	801882e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	2b00      	cmp	r3, #0
 801869c:	da18      	bge.n	80186d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801869e:	1d3b      	adds	r3, r7, #4
 80186a0:	3304      	adds	r3, #4
 80186a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80186a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d10a      	bne.n	80186c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80186aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186ae:	f383 8811 	msr	BASEPRI, r3
 80186b2:	f3bf 8f6f 	isb	sy
 80186b6:	f3bf 8f4f 	dsb	sy
 80186ba:	61fb      	str	r3, [r7, #28]
}
 80186bc:	bf00      	nop
 80186be:	e7fe      	b.n	80186be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80186c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80186c6:	6850      	ldr	r0, [r2, #4]
 80186c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80186ca:	6892      	ldr	r2, [r2, #8]
 80186cc:	4611      	mov	r1, r2
 80186ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	f2c0 80aa 	blt.w	801882c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80186d8:	68fb      	ldr	r3, [r7, #12]
 80186da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80186dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186de:	695b      	ldr	r3, [r3, #20]
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d004      	beq.n	80186ee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80186e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186e6:	3304      	adds	r3, #4
 80186e8:	4618      	mov	r0, r3
 80186ea:	f7fd fdab 	bl	8016244 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80186ee:	463b      	mov	r3, r7
 80186f0:	4618      	mov	r0, r3
 80186f2:	f7ff ff6b 	bl	80185cc <prvSampleTimeNow>
 80186f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	2b09      	cmp	r3, #9
 80186fc:	f200 8097 	bhi.w	801882e <prvProcessReceivedCommands+0x19e>
 8018700:	a201      	add	r2, pc, #4	; (adr r2, 8018708 <prvProcessReceivedCommands+0x78>)
 8018702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018706:	bf00      	nop
 8018708:	08018731 	.word	0x08018731
 801870c:	08018731 	.word	0x08018731
 8018710:	08018731 	.word	0x08018731
 8018714:	080187a5 	.word	0x080187a5
 8018718:	080187b9 	.word	0x080187b9
 801871c:	08018803 	.word	0x08018803
 8018720:	08018731 	.word	0x08018731
 8018724:	08018731 	.word	0x08018731
 8018728:	080187a5 	.word	0x080187a5
 801872c:	080187b9 	.word	0x080187b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018736:	f043 0301 	orr.w	r3, r3, #1
 801873a:	b2da      	uxtb	r2, r3
 801873c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801873e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018742:	68ba      	ldr	r2, [r7, #8]
 8018744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018746:	699b      	ldr	r3, [r3, #24]
 8018748:	18d1      	adds	r1, r2, r3
 801874a:	68bb      	ldr	r3, [r7, #8]
 801874c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801874e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018750:	f7ff ff5c 	bl	801860c <prvInsertTimerInActiveList>
 8018754:	4603      	mov	r3, r0
 8018756:	2b00      	cmp	r3, #0
 8018758:	d069      	beq.n	801882e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801875a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801875c:	6a1b      	ldr	r3, [r3, #32]
 801875e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018760:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018768:	f003 0304 	and.w	r3, r3, #4
 801876c:	2b00      	cmp	r3, #0
 801876e:	d05e      	beq.n	801882e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018770:	68ba      	ldr	r2, [r7, #8]
 8018772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018774:	699b      	ldr	r3, [r3, #24]
 8018776:	441a      	add	r2, r3
 8018778:	2300      	movs	r3, #0
 801877a:	9300      	str	r3, [sp, #0]
 801877c:	2300      	movs	r3, #0
 801877e:	2100      	movs	r1, #0
 8018780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018782:	f7ff fe05 	bl	8018390 <xTimerGenericCommand>
 8018786:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018788:	6a3b      	ldr	r3, [r7, #32]
 801878a:	2b00      	cmp	r3, #0
 801878c:	d14f      	bne.n	801882e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801878e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018792:	f383 8811 	msr	BASEPRI, r3
 8018796:	f3bf 8f6f 	isb	sy
 801879a:	f3bf 8f4f 	dsb	sy
 801879e:	61bb      	str	r3, [r7, #24]
}
 80187a0:	bf00      	nop
 80187a2:	e7fe      	b.n	80187a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80187a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80187aa:	f023 0301 	bic.w	r3, r3, #1
 80187ae:	b2da      	uxtb	r2, r3
 80187b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80187b6:	e03a      	b.n	801882e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80187b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80187be:	f043 0301 	orr.w	r3, r3, #1
 80187c2:	b2da      	uxtb	r2, r3
 80187c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80187ca:	68ba      	ldr	r2, [r7, #8]
 80187cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80187d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187d2:	699b      	ldr	r3, [r3, #24]
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d10a      	bne.n	80187ee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80187d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187dc:	f383 8811 	msr	BASEPRI, r3
 80187e0:	f3bf 8f6f 	isb	sy
 80187e4:	f3bf 8f4f 	dsb	sy
 80187e8:	617b      	str	r3, [r7, #20]
}
 80187ea:	bf00      	nop
 80187ec:	e7fe      	b.n	80187ec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80187ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187f0:	699a      	ldr	r2, [r3, #24]
 80187f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187f4:	18d1      	adds	r1, r2, r3
 80187f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80187fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80187fc:	f7ff ff06 	bl	801860c <prvInsertTimerInActiveList>
					break;
 8018800:	e015      	b.n	801882e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018804:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018808:	f003 0302 	and.w	r3, r3, #2
 801880c:	2b00      	cmp	r3, #0
 801880e:	d103      	bne.n	8018818 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8018810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018812:	f000 fbdd 	bl	8018fd0 <vPortFree>
 8018816:	e00a      	b.n	801882e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801881a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801881e:	f023 0301 	bic.w	r3, r3, #1
 8018822:	b2da      	uxtb	r2, r3
 8018824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018826:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801882a:	e000      	b.n	801882e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801882c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801882e:	4b08      	ldr	r3, [pc, #32]	; (8018850 <prvProcessReceivedCommands+0x1c0>)
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	1d39      	adds	r1, r7, #4
 8018834:	2200      	movs	r2, #0
 8018836:	4618      	mov	r0, r3
 8018838:	f7fe f8fc 	bl	8016a34 <xQueueReceive>
 801883c:	4603      	mov	r3, r0
 801883e:	2b00      	cmp	r3, #0
 8018840:	f47f af2a 	bne.w	8018698 <prvProcessReceivedCommands+0x8>
	}
}
 8018844:	bf00      	nop
 8018846:	bf00      	nop
 8018848:	3730      	adds	r7, #48	; 0x30
 801884a:	46bd      	mov	sp, r7
 801884c:	bd80      	pop	{r7, pc}
 801884e:	bf00      	nop
 8018850:	20001524 	.word	0x20001524

08018854 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8018854:	b580      	push	{r7, lr}
 8018856:	b088      	sub	sp, #32
 8018858:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801885a:	e048      	b.n	80188ee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801885c:	4b2d      	ldr	r3, [pc, #180]	; (8018914 <prvSwitchTimerLists+0xc0>)
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	68db      	ldr	r3, [r3, #12]
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018866:	4b2b      	ldr	r3, [pc, #172]	; (8018914 <prvSwitchTimerLists+0xc0>)
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	68db      	ldr	r3, [r3, #12]
 801886c:	68db      	ldr	r3, [r3, #12]
 801886e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018870:	68fb      	ldr	r3, [r7, #12]
 8018872:	3304      	adds	r3, #4
 8018874:	4618      	mov	r0, r3
 8018876:	f7fd fce5 	bl	8016244 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801887a:	68fb      	ldr	r3, [r7, #12]
 801887c:	6a1b      	ldr	r3, [r3, #32]
 801887e:	68f8      	ldr	r0, [r7, #12]
 8018880:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018882:	68fb      	ldr	r3, [r7, #12]
 8018884:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018888:	f003 0304 	and.w	r3, r3, #4
 801888c:	2b00      	cmp	r3, #0
 801888e:	d02e      	beq.n	80188ee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018890:	68fb      	ldr	r3, [r7, #12]
 8018892:	699b      	ldr	r3, [r3, #24]
 8018894:	693a      	ldr	r2, [r7, #16]
 8018896:	4413      	add	r3, r2
 8018898:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801889a:	68ba      	ldr	r2, [r7, #8]
 801889c:	693b      	ldr	r3, [r7, #16]
 801889e:	429a      	cmp	r2, r3
 80188a0:	d90e      	bls.n	80188c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80188a2:	68fb      	ldr	r3, [r7, #12]
 80188a4:	68ba      	ldr	r2, [r7, #8]
 80188a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80188a8:	68fb      	ldr	r3, [r7, #12]
 80188aa:	68fa      	ldr	r2, [r7, #12]
 80188ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80188ae:	4b19      	ldr	r3, [pc, #100]	; (8018914 <prvSwitchTimerLists+0xc0>)
 80188b0:	681a      	ldr	r2, [r3, #0]
 80188b2:	68fb      	ldr	r3, [r7, #12]
 80188b4:	3304      	adds	r3, #4
 80188b6:	4619      	mov	r1, r3
 80188b8:	4610      	mov	r0, r2
 80188ba:	f7fd fc8a 	bl	80161d2 <vListInsert>
 80188be:	e016      	b.n	80188ee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80188c0:	2300      	movs	r3, #0
 80188c2:	9300      	str	r3, [sp, #0]
 80188c4:	2300      	movs	r3, #0
 80188c6:	693a      	ldr	r2, [r7, #16]
 80188c8:	2100      	movs	r1, #0
 80188ca:	68f8      	ldr	r0, [r7, #12]
 80188cc:	f7ff fd60 	bl	8018390 <xTimerGenericCommand>
 80188d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d10a      	bne.n	80188ee <prvSwitchTimerLists+0x9a>
	__asm volatile
 80188d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188dc:	f383 8811 	msr	BASEPRI, r3
 80188e0:	f3bf 8f6f 	isb	sy
 80188e4:	f3bf 8f4f 	dsb	sy
 80188e8:	603b      	str	r3, [r7, #0]
}
 80188ea:	bf00      	nop
 80188ec:	e7fe      	b.n	80188ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80188ee:	4b09      	ldr	r3, [pc, #36]	; (8018914 <prvSwitchTimerLists+0xc0>)
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	d1b1      	bne.n	801885c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80188f8:	4b06      	ldr	r3, [pc, #24]	; (8018914 <prvSwitchTimerLists+0xc0>)
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80188fe:	4b06      	ldr	r3, [pc, #24]	; (8018918 <prvSwitchTimerLists+0xc4>)
 8018900:	681b      	ldr	r3, [r3, #0]
 8018902:	4a04      	ldr	r2, [pc, #16]	; (8018914 <prvSwitchTimerLists+0xc0>)
 8018904:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8018906:	4a04      	ldr	r2, [pc, #16]	; (8018918 <prvSwitchTimerLists+0xc4>)
 8018908:	697b      	ldr	r3, [r7, #20]
 801890a:	6013      	str	r3, [r2, #0]
}
 801890c:	bf00      	nop
 801890e:	3718      	adds	r7, #24
 8018910:	46bd      	mov	sp, r7
 8018912:	bd80      	pop	{r7, pc}
 8018914:	2000151c 	.word	0x2000151c
 8018918:	20001520 	.word	0x20001520

0801891c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801891c:	b580      	push	{r7, lr}
 801891e:	b082      	sub	sp, #8
 8018920:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8018922:	f000 f967 	bl	8018bf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8018926:	4b15      	ldr	r3, [pc, #84]	; (801897c <prvCheckForValidListAndQueue+0x60>)
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	2b00      	cmp	r3, #0
 801892c:	d120      	bne.n	8018970 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801892e:	4814      	ldr	r0, [pc, #80]	; (8018980 <prvCheckForValidListAndQueue+0x64>)
 8018930:	f7fd fbfe 	bl	8016130 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018934:	4813      	ldr	r0, [pc, #76]	; (8018984 <prvCheckForValidListAndQueue+0x68>)
 8018936:	f7fd fbfb 	bl	8016130 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801893a:	4b13      	ldr	r3, [pc, #76]	; (8018988 <prvCheckForValidListAndQueue+0x6c>)
 801893c:	4a10      	ldr	r2, [pc, #64]	; (8018980 <prvCheckForValidListAndQueue+0x64>)
 801893e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8018940:	4b12      	ldr	r3, [pc, #72]	; (801898c <prvCheckForValidListAndQueue+0x70>)
 8018942:	4a10      	ldr	r2, [pc, #64]	; (8018984 <prvCheckForValidListAndQueue+0x68>)
 8018944:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018946:	2300      	movs	r3, #0
 8018948:	9300      	str	r3, [sp, #0]
 801894a:	4b11      	ldr	r3, [pc, #68]	; (8018990 <prvCheckForValidListAndQueue+0x74>)
 801894c:	4a11      	ldr	r2, [pc, #68]	; (8018994 <prvCheckForValidListAndQueue+0x78>)
 801894e:	2110      	movs	r1, #16
 8018950:	200a      	movs	r0, #10
 8018952:	f7fd fd09 	bl	8016368 <xQueueGenericCreateStatic>
 8018956:	4603      	mov	r3, r0
 8018958:	4a08      	ldr	r2, [pc, #32]	; (801897c <prvCheckForValidListAndQueue+0x60>)
 801895a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801895c:	4b07      	ldr	r3, [pc, #28]	; (801897c <prvCheckForValidListAndQueue+0x60>)
 801895e:	681b      	ldr	r3, [r3, #0]
 8018960:	2b00      	cmp	r3, #0
 8018962:	d005      	beq.n	8018970 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018964:	4b05      	ldr	r3, [pc, #20]	; (801897c <prvCheckForValidListAndQueue+0x60>)
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	490b      	ldr	r1, [pc, #44]	; (8018998 <prvCheckForValidListAndQueue+0x7c>)
 801896a:	4618      	mov	r0, r3
 801896c:	f7fe fc1a 	bl	80171a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018970:	f000 f970 	bl	8018c54 <vPortExitCritical>
}
 8018974:	bf00      	nop
 8018976:	46bd      	mov	sp, r7
 8018978:	bd80      	pop	{r7, pc}
 801897a:	bf00      	nop
 801897c:	20001524 	.word	0x20001524
 8018980:	200014f4 	.word	0x200014f4
 8018984:	20001508 	.word	0x20001508
 8018988:	2000151c 	.word	0x2000151c
 801898c:	20001520 	.word	0x20001520
 8018990:	200015d0 	.word	0x200015d0
 8018994:	20001530 	.word	0x20001530
 8018998:	08021d38 	.word	0x08021d38

0801899c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801899c:	b480      	push	{r7}
 801899e:	b085      	sub	sp, #20
 80189a0:	af00      	add	r7, sp, #0
 80189a2:	60f8      	str	r0, [r7, #12]
 80189a4:	60b9      	str	r1, [r7, #8]
 80189a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80189a8:	68fb      	ldr	r3, [r7, #12]
 80189aa:	3b04      	subs	r3, #4
 80189ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80189ae:	68fb      	ldr	r3, [r7, #12]
 80189b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80189b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80189b6:	68fb      	ldr	r3, [r7, #12]
 80189b8:	3b04      	subs	r3, #4
 80189ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80189bc:	68bb      	ldr	r3, [r7, #8]
 80189be:	f023 0201 	bic.w	r2, r3, #1
 80189c2:	68fb      	ldr	r3, [r7, #12]
 80189c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80189c6:	68fb      	ldr	r3, [r7, #12]
 80189c8:	3b04      	subs	r3, #4
 80189ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80189cc:	4a0c      	ldr	r2, [pc, #48]	; (8018a00 <pxPortInitialiseStack+0x64>)
 80189ce:	68fb      	ldr	r3, [r7, #12]
 80189d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80189d2:	68fb      	ldr	r3, [r7, #12]
 80189d4:	3b14      	subs	r3, #20
 80189d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80189d8:	687a      	ldr	r2, [r7, #4]
 80189da:	68fb      	ldr	r3, [r7, #12]
 80189dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80189de:	68fb      	ldr	r3, [r7, #12]
 80189e0:	3b04      	subs	r3, #4
 80189e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80189e4:	68fb      	ldr	r3, [r7, #12]
 80189e6:	f06f 0202 	mvn.w	r2, #2
 80189ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80189ec:	68fb      	ldr	r3, [r7, #12]
 80189ee:	3b20      	subs	r3, #32
 80189f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80189f2:	68fb      	ldr	r3, [r7, #12]
}
 80189f4:	4618      	mov	r0, r3
 80189f6:	3714      	adds	r7, #20
 80189f8:	46bd      	mov	sp, r7
 80189fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189fe:	4770      	bx	lr
 8018a00:	08018a05 	.word	0x08018a05

08018a04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018a04:	b480      	push	{r7}
 8018a06:	b085      	sub	sp, #20
 8018a08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018a0a:	2300      	movs	r3, #0
 8018a0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018a0e:	4b12      	ldr	r3, [pc, #72]	; (8018a58 <prvTaskExitError+0x54>)
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018a16:	d00a      	beq.n	8018a2e <prvTaskExitError+0x2a>
	__asm volatile
 8018a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a1c:	f383 8811 	msr	BASEPRI, r3
 8018a20:	f3bf 8f6f 	isb	sy
 8018a24:	f3bf 8f4f 	dsb	sy
 8018a28:	60fb      	str	r3, [r7, #12]
}
 8018a2a:	bf00      	nop
 8018a2c:	e7fe      	b.n	8018a2c <prvTaskExitError+0x28>
	__asm volatile
 8018a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a32:	f383 8811 	msr	BASEPRI, r3
 8018a36:	f3bf 8f6f 	isb	sy
 8018a3a:	f3bf 8f4f 	dsb	sy
 8018a3e:	60bb      	str	r3, [r7, #8]
}
 8018a40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018a42:	bf00      	nop
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d0fc      	beq.n	8018a44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018a4a:	bf00      	nop
 8018a4c:	bf00      	nop
 8018a4e:	3714      	adds	r7, #20
 8018a50:	46bd      	mov	sp, r7
 8018a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a56:	4770      	bx	lr
 8018a58:	20000190 	.word	0x20000190
 8018a5c:	00000000 	.word	0x00000000

08018a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018a60:	4b07      	ldr	r3, [pc, #28]	; (8018a80 <pxCurrentTCBConst2>)
 8018a62:	6819      	ldr	r1, [r3, #0]
 8018a64:	6808      	ldr	r0, [r1, #0]
 8018a66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a6a:	f380 8809 	msr	PSP, r0
 8018a6e:	f3bf 8f6f 	isb	sy
 8018a72:	f04f 0000 	mov.w	r0, #0
 8018a76:	f380 8811 	msr	BASEPRI, r0
 8018a7a:	4770      	bx	lr
 8018a7c:	f3af 8000 	nop.w

08018a80 <pxCurrentTCBConst2>:
 8018a80:	20000ff4 	.word	0x20000ff4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018a84:	bf00      	nop
 8018a86:	bf00      	nop

08018a88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018a88:	4808      	ldr	r0, [pc, #32]	; (8018aac <prvPortStartFirstTask+0x24>)
 8018a8a:	6800      	ldr	r0, [r0, #0]
 8018a8c:	6800      	ldr	r0, [r0, #0]
 8018a8e:	f380 8808 	msr	MSP, r0
 8018a92:	f04f 0000 	mov.w	r0, #0
 8018a96:	f380 8814 	msr	CONTROL, r0
 8018a9a:	b662      	cpsie	i
 8018a9c:	b661      	cpsie	f
 8018a9e:	f3bf 8f4f 	dsb	sy
 8018aa2:	f3bf 8f6f 	isb	sy
 8018aa6:	df00      	svc	0
 8018aa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018aaa:	bf00      	nop
 8018aac:	e000ed08 	.word	0xe000ed08

08018ab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018ab0:	b580      	push	{r7, lr}
 8018ab2:	b086      	sub	sp, #24
 8018ab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018ab6:	4b46      	ldr	r3, [pc, #280]	; (8018bd0 <xPortStartScheduler+0x120>)
 8018ab8:	681b      	ldr	r3, [r3, #0]
 8018aba:	4a46      	ldr	r2, [pc, #280]	; (8018bd4 <xPortStartScheduler+0x124>)
 8018abc:	4293      	cmp	r3, r2
 8018abe:	d10a      	bne.n	8018ad6 <xPortStartScheduler+0x26>
	__asm volatile
 8018ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ac4:	f383 8811 	msr	BASEPRI, r3
 8018ac8:	f3bf 8f6f 	isb	sy
 8018acc:	f3bf 8f4f 	dsb	sy
 8018ad0:	613b      	str	r3, [r7, #16]
}
 8018ad2:	bf00      	nop
 8018ad4:	e7fe      	b.n	8018ad4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018ad6:	4b3e      	ldr	r3, [pc, #248]	; (8018bd0 <xPortStartScheduler+0x120>)
 8018ad8:	681b      	ldr	r3, [r3, #0]
 8018ada:	4a3f      	ldr	r2, [pc, #252]	; (8018bd8 <xPortStartScheduler+0x128>)
 8018adc:	4293      	cmp	r3, r2
 8018ade:	d10a      	bne.n	8018af6 <xPortStartScheduler+0x46>
	__asm volatile
 8018ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ae4:	f383 8811 	msr	BASEPRI, r3
 8018ae8:	f3bf 8f6f 	isb	sy
 8018aec:	f3bf 8f4f 	dsb	sy
 8018af0:	60fb      	str	r3, [r7, #12]
}
 8018af2:	bf00      	nop
 8018af4:	e7fe      	b.n	8018af4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018af6:	4b39      	ldr	r3, [pc, #228]	; (8018bdc <xPortStartScheduler+0x12c>)
 8018af8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018afa:	697b      	ldr	r3, [r7, #20]
 8018afc:	781b      	ldrb	r3, [r3, #0]
 8018afe:	b2db      	uxtb	r3, r3
 8018b00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018b02:	697b      	ldr	r3, [r7, #20]
 8018b04:	22ff      	movs	r2, #255	; 0xff
 8018b06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018b08:	697b      	ldr	r3, [r7, #20]
 8018b0a:	781b      	ldrb	r3, [r3, #0]
 8018b0c:	b2db      	uxtb	r3, r3
 8018b0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018b10:	78fb      	ldrb	r3, [r7, #3]
 8018b12:	b2db      	uxtb	r3, r3
 8018b14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018b18:	b2da      	uxtb	r2, r3
 8018b1a:	4b31      	ldr	r3, [pc, #196]	; (8018be0 <xPortStartScheduler+0x130>)
 8018b1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018b1e:	4b31      	ldr	r3, [pc, #196]	; (8018be4 <xPortStartScheduler+0x134>)
 8018b20:	2207      	movs	r2, #7
 8018b22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018b24:	e009      	b.n	8018b3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8018b26:	4b2f      	ldr	r3, [pc, #188]	; (8018be4 <xPortStartScheduler+0x134>)
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	3b01      	subs	r3, #1
 8018b2c:	4a2d      	ldr	r2, [pc, #180]	; (8018be4 <xPortStartScheduler+0x134>)
 8018b2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018b30:	78fb      	ldrb	r3, [r7, #3]
 8018b32:	b2db      	uxtb	r3, r3
 8018b34:	005b      	lsls	r3, r3, #1
 8018b36:	b2db      	uxtb	r3, r3
 8018b38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018b3a:	78fb      	ldrb	r3, [r7, #3]
 8018b3c:	b2db      	uxtb	r3, r3
 8018b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018b42:	2b80      	cmp	r3, #128	; 0x80
 8018b44:	d0ef      	beq.n	8018b26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018b46:	4b27      	ldr	r3, [pc, #156]	; (8018be4 <xPortStartScheduler+0x134>)
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	f1c3 0307 	rsb	r3, r3, #7
 8018b4e:	2b04      	cmp	r3, #4
 8018b50:	d00a      	beq.n	8018b68 <xPortStartScheduler+0xb8>
	__asm volatile
 8018b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b56:	f383 8811 	msr	BASEPRI, r3
 8018b5a:	f3bf 8f6f 	isb	sy
 8018b5e:	f3bf 8f4f 	dsb	sy
 8018b62:	60bb      	str	r3, [r7, #8]
}
 8018b64:	bf00      	nop
 8018b66:	e7fe      	b.n	8018b66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018b68:	4b1e      	ldr	r3, [pc, #120]	; (8018be4 <xPortStartScheduler+0x134>)
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	021b      	lsls	r3, r3, #8
 8018b6e:	4a1d      	ldr	r2, [pc, #116]	; (8018be4 <xPortStartScheduler+0x134>)
 8018b70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018b72:	4b1c      	ldr	r3, [pc, #112]	; (8018be4 <xPortStartScheduler+0x134>)
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018b7a:	4a1a      	ldr	r2, [pc, #104]	; (8018be4 <xPortStartScheduler+0x134>)
 8018b7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	b2da      	uxtb	r2, r3
 8018b82:	697b      	ldr	r3, [r7, #20]
 8018b84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018b86:	4b18      	ldr	r3, [pc, #96]	; (8018be8 <xPortStartScheduler+0x138>)
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	4a17      	ldr	r2, [pc, #92]	; (8018be8 <xPortStartScheduler+0x138>)
 8018b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018b90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018b92:	4b15      	ldr	r3, [pc, #84]	; (8018be8 <xPortStartScheduler+0x138>)
 8018b94:	681b      	ldr	r3, [r3, #0]
 8018b96:	4a14      	ldr	r2, [pc, #80]	; (8018be8 <xPortStartScheduler+0x138>)
 8018b98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8018b9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8018b9e:	f000 f8dd 	bl	8018d5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018ba2:	4b12      	ldr	r3, [pc, #72]	; (8018bec <xPortStartScheduler+0x13c>)
 8018ba4:	2200      	movs	r2, #0
 8018ba6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018ba8:	f000 f8fc 	bl	8018da4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018bac:	4b10      	ldr	r3, [pc, #64]	; (8018bf0 <xPortStartScheduler+0x140>)
 8018bae:	681b      	ldr	r3, [r3, #0]
 8018bb0:	4a0f      	ldr	r2, [pc, #60]	; (8018bf0 <xPortStartScheduler+0x140>)
 8018bb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018bb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018bb8:	f7ff ff66 	bl	8018a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8018bbc:	f7fe ff4c 	bl	8017a58 <vTaskSwitchContext>
	prvTaskExitError();
 8018bc0:	f7ff ff20 	bl	8018a04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018bc4:	2300      	movs	r3, #0
}
 8018bc6:	4618      	mov	r0, r3
 8018bc8:	3718      	adds	r7, #24
 8018bca:	46bd      	mov	sp, r7
 8018bcc:	bd80      	pop	{r7, pc}
 8018bce:	bf00      	nop
 8018bd0:	e000ed00 	.word	0xe000ed00
 8018bd4:	410fc271 	.word	0x410fc271
 8018bd8:	410fc270 	.word	0x410fc270
 8018bdc:	e000e400 	.word	0xe000e400
 8018be0:	20001620 	.word	0x20001620
 8018be4:	20001624 	.word	0x20001624
 8018be8:	e000ed20 	.word	0xe000ed20
 8018bec:	20000190 	.word	0x20000190
 8018bf0:	e000ef34 	.word	0xe000ef34

08018bf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8018bf4:	b480      	push	{r7}
 8018bf6:	b083      	sub	sp, #12
 8018bf8:	af00      	add	r7, sp, #0
	__asm volatile
 8018bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bfe:	f383 8811 	msr	BASEPRI, r3
 8018c02:	f3bf 8f6f 	isb	sy
 8018c06:	f3bf 8f4f 	dsb	sy
 8018c0a:	607b      	str	r3, [r7, #4]
}
 8018c0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8018c0e:	4b0f      	ldr	r3, [pc, #60]	; (8018c4c <vPortEnterCritical+0x58>)
 8018c10:	681b      	ldr	r3, [r3, #0]
 8018c12:	3301      	adds	r3, #1
 8018c14:	4a0d      	ldr	r2, [pc, #52]	; (8018c4c <vPortEnterCritical+0x58>)
 8018c16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018c18:	4b0c      	ldr	r3, [pc, #48]	; (8018c4c <vPortEnterCritical+0x58>)
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	2b01      	cmp	r3, #1
 8018c1e:	d10f      	bne.n	8018c40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018c20:	4b0b      	ldr	r3, [pc, #44]	; (8018c50 <vPortEnterCritical+0x5c>)
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	b2db      	uxtb	r3, r3
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d00a      	beq.n	8018c40 <vPortEnterCritical+0x4c>
	__asm volatile
 8018c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c2e:	f383 8811 	msr	BASEPRI, r3
 8018c32:	f3bf 8f6f 	isb	sy
 8018c36:	f3bf 8f4f 	dsb	sy
 8018c3a:	603b      	str	r3, [r7, #0]
}
 8018c3c:	bf00      	nop
 8018c3e:	e7fe      	b.n	8018c3e <vPortEnterCritical+0x4a>
	}
}
 8018c40:	bf00      	nop
 8018c42:	370c      	adds	r7, #12
 8018c44:	46bd      	mov	sp, r7
 8018c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c4a:	4770      	bx	lr
 8018c4c:	20000190 	.word	0x20000190
 8018c50:	e000ed04 	.word	0xe000ed04

08018c54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018c54:	b480      	push	{r7}
 8018c56:	b083      	sub	sp, #12
 8018c58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8018c5a:	4b12      	ldr	r3, [pc, #72]	; (8018ca4 <vPortExitCritical+0x50>)
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d10a      	bne.n	8018c78 <vPortExitCritical+0x24>
	__asm volatile
 8018c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c66:	f383 8811 	msr	BASEPRI, r3
 8018c6a:	f3bf 8f6f 	isb	sy
 8018c6e:	f3bf 8f4f 	dsb	sy
 8018c72:	607b      	str	r3, [r7, #4]
}
 8018c74:	bf00      	nop
 8018c76:	e7fe      	b.n	8018c76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8018c78:	4b0a      	ldr	r3, [pc, #40]	; (8018ca4 <vPortExitCritical+0x50>)
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	3b01      	subs	r3, #1
 8018c7e:	4a09      	ldr	r2, [pc, #36]	; (8018ca4 <vPortExitCritical+0x50>)
 8018c80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018c82:	4b08      	ldr	r3, [pc, #32]	; (8018ca4 <vPortExitCritical+0x50>)
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d105      	bne.n	8018c96 <vPortExitCritical+0x42>
 8018c8a:	2300      	movs	r3, #0
 8018c8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018c8e:	683b      	ldr	r3, [r7, #0]
 8018c90:	f383 8811 	msr	BASEPRI, r3
}
 8018c94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018c96:	bf00      	nop
 8018c98:	370c      	adds	r7, #12
 8018c9a:	46bd      	mov	sp, r7
 8018c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ca0:	4770      	bx	lr
 8018ca2:	bf00      	nop
 8018ca4:	20000190 	.word	0x20000190
	...

08018cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018cb0:	f3ef 8009 	mrs	r0, PSP
 8018cb4:	f3bf 8f6f 	isb	sy
 8018cb8:	4b15      	ldr	r3, [pc, #84]	; (8018d10 <pxCurrentTCBConst>)
 8018cba:	681a      	ldr	r2, [r3, #0]
 8018cbc:	f01e 0f10 	tst.w	lr, #16
 8018cc0:	bf08      	it	eq
 8018cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cca:	6010      	str	r0, [r2, #0]
 8018ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018cd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018cd4:	f380 8811 	msr	BASEPRI, r0
 8018cd8:	f3bf 8f4f 	dsb	sy
 8018cdc:	f3bf 8f6f 	isb	sy
 8018ce0:	f7fe feba 	bl	8017a58 <vTaskSwitchContext>
 8018ce4:	f04f 0000 	mov.w	r0, #0
 8018ce8:	f380 8811 	msr	BASEPRI, r0
 8018cec:	bc09      	pop	{r0, r3}
 8018cee:	6819      	ldr	r1, [r3, #0]
 8018cf0:	6808      	ldr	r0, [r1, #0]
 8018cf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cf6:	f01e 0f10 	tst.w	lr, #16
 8018cfa:	bf08      	it	eq
 8018cfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018d00:	f380 8809 	msr	PSP, r0
 8018d04:	f3bf 8f6f 	isb	sy
 8018d08:	4770      	bx	lr
 8018d0a:	bf00      	nop
 8018d0c:	f3af 8000 	nop.w

08018d10 <pxCurrentTCBConst>:
 8018d10:	20000ff4 	.word	0x20000ff4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018d14:	bf00      	nop
 8018d16:	bf00      	nop

08018d18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018d18:	b580      	push	{r7, lr}
 8018d1a:	b082      	sub	sp, #8
 8018d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8018d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d22:	f383 8811 	msr	BASEPRI, r3
 8018d26:	f3bf 8f6f 	isb	sy
 8018d2a:	f3bf 8f4f 	dsb	sy
 8018d2e:	607b      	str	r3, [r7, #4]
}
 8018d30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018d32:	f7fe fdd7 	bl	80178e4 <xTaskIncrementTick>
 8018d36:	4603      	mov	r3, r0
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d003      	beq.n	8018d44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018d3c:	4b06      	ldr	r3, [pc, #24]	; (8018d58 <xPortSysTickHandler+0x40>)
 8018d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018d42:	601a      	str	r2, [r3, #0]
 8018d44:	2300      	movs	r3, #0
 8018d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018d48:	683b      	ldr	r3, [r7, #0]
 8018d4a:	f383 8811 	msr	BASEPRI, r3
}
 8018d4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018d50:	bf00      	nop
 8018d52:	3708      	adds	r7, #8
 8018d54:	46bd      	mov	sp, r7
 8018d56:	bd80      	pop	{r7, pc}
 8018d58:	e000ed04 	.word	0xe000ed04

08018d5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8018d5c:	b480      	push	{r7}
 8018d5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018d60:	4b0b      	ldr	r3, [pc, #44]	; (8018d90 <vPortSetupTimerInterrupt+0x34>)
 8018d62:	2200      	movs	r2, #0
 8018d64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018d66:	4b0b      	ldr	r3, [pc, #44]	; (8018d94 <vPortSetupTimerInterrupt+0x38>)
 8018d68:	2200      	movs	r2, #0
 8018d6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018d6c:	4b0a      	ldr	r3, [pc, #40]	; (8018d98 <vPortSetupTimerInterrupt+0x3c>)
 8018d6e:	681b      	ldr	r3, [r3, #0]
 8018d70:	4a0a      	ldr	r2, [pc, #40]	; (8018d9c <vPortSetupTimerInterrupt+0x40>)
 8018d72:	fba2 2303 	umull	r2, r3, r2, r3
 8018d76:	099b      	lsrs	r3, r3, #6
 8018d78:	4a09      	ldr	r2, [pc, #36]	; (8018da0 <vPortSetupTimerInterrupt+0x44>)
 8018d7a:	3b01      	subs	r3, #1
 8018d7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018d7e:	4b04      	ldr	r3, [pc, #16]	; (8018d90 <vPortSetupTimerInterrupt+0x34>)
 8018d80:	2207      	movs	r2, #7
 8018d82:	601a      	str	r2, [r3, #0]
}
 8018d84:	bf00      	nop
 8018d86:	46bd      	mov	sp, r7
 8018d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d8c:	4770      	bx	lr
 8018d8e:	bf00      	nop
 8018d90:	e000e010 	.word	0xe000e010
 8018d94:	e000e018 	.word	0xe000e018
 8018d98:	2000003c 	.word	0x2000003c
 8018d9c:	10624dd3 	.word	0x10624dd3
 8018da0:	e000e014 	.word	0xe000e014

08018da4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018da4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018db4 <vPortEnableVFP+0x10>
 8018da8:	6801      	ldr	r1, [r0, #0]
 8018daa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018dae:	6001      	str	r1, [r0, #0]
 8018db0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018db2:	bf00      	nop
 8018db4:	e000ed88 	.word	0xe000ed88

08018db8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018db8:	b480      	push	{r7}
 8018dba:	b085      	sub	sp, #20
 8018dbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018dbe:	f3ef 8305 	mrs	r3, IPSR
 8018dc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018dc4:	68fb      	ldr	r3, [r7, #12]
 8018dc6:	2b0f      	cmp	r3, #15
 8018dc8:	d914      	bls.n	8018df4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018dca:	4a17      	ldr	r2, [pc, #92]	; (8018e28 <vPortValidateInterruptPriority+0x70>)
 8018dcc:	68fb      	ldr	r3, [r7, #12]
 8018dce:	4413      	add	r3, r2
 8018dd0:	781b      	ldrb	r3, [r3, #0]
 8018dd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018dd4:	4b15      	ldr	r3, [pc, #84]	; (8018e2c <vPortValidateInterruptPriority+0x74>)
 8018dd6:	781b      	ldrb	r3, [r3, #0]
 8018dd8:	7afa      	ldrb	r2, [r7, #11]
 8018dda:	429a      	cmp	r2, r3
 8018ddc:	d20a      	bcs.n	8018df4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8018dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018de2:	f383 8811 	msr	BASEPRI, r3
 8018de6:	f3bf 8f6f 	isb	sy
 8018dea:	f3bf 8f4f 	dsb	sy
 8018dee:	607b      	str	r3, [r7, #4]
}
 8018df0:	bf00      	nop
 8018df2:	e7fe      	b.n	8018df2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018df4:	4b0e      	ldr	r3, [pc, #56]	; (8018e30 <vPortValidateInterruptPriority+0x78>)
 8018df6:	681b      	ldr	r3, [r3, #0]
 8018df8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8018dfc:	4b0d      	ldr	r3, [pc, #52]	; (8018e34 <vPortValidateInterruptPriority+0x7c>)
 8018dfe:	681b      	ldr	r3, [r3, #0]
 8018e00:	429a      	cmp	r2, r3
 8018e02:	d90a      	bls.n	8018e1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8018e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e08:	f383 8811 	msr	BASEPRI, r3
 8018e0c:	f3bf 8f6f 	isb	sy
 8018e10:	f3bf 8f4f 	dsb	sy
 8018e14:	603b      	str	r3, [r7, #0]
}
 8018e16:	bf00      	nop
 8018e18:	e7fe      	b.n	8018e18 <vPortValidateInterruptPriority+0x60>
	}
 8018e1a:	bf00      	nop
 8018e1c:	3714      	adds	r7, #20
 8018e1e:	46bd      	mov	sp, r7
 8018e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e24:	4770      	bx	lr
 8018e26:	bf00      	nop
 8018e28:	e000e3f0 	.word	0xe000e3f0
 8018e2c:	20001620 	.word	0x20001620
 8018e30:	e000ed0c 	.word	0xe000ed0c
 8018e34:	20001624 	.word	0x20001624

08018e38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018e38:	b580      	push	{r7, lr}
 8018e3a:	b08a      	sub	sp, #40	; 0x28
 8018e3c:	af00      	add	r7, sp, #0
 8018e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018e40:	2300      	movs	r3, #0
 8018e42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018e44:	f7fe fc92 	bl	801776c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018e48:	4b5b      	ldr	r3, [pc, #364]	; (8018fb8 <pvPortMalloc+0x180>)
 8018e4a:	681b      	ldr	r3, [r3, #0]
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d101      	bne.n	8018e54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018e50:	f000 f920 	bl	8019094 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018e54:	4b59      	ldr	r3, [pc, #356]	; (8018fbc <pvPortMalloc+0x184>)
 8018e56:	681a      	ldr	r2, [r3, #0]
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	4013      	ands	r3, r2
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	f040 8093 	bne.w	8018f88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d01d      	beq.n	8018ea4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8018e68:	2208      	movs	r2, #8
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	4413      	add	r3, r2
 8018e6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	f003 0307 	and.w	r3, r3, #7
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d014      	beq.n	8018ea4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	f023 0307 	bic.w	r3, r3, #7
 8018e80:	3308      	adds	r3, #8
 8018e82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	f003 0307 	and.w	r3, r3, #7
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	d00a      	beq.n	8018ea4 <pvPortMalloc+0x6c>
	__asm volatile
 8018e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e92:	f383 8811 	msr	BASEPRI, r3
 8018e96:	f3bf 8f6f 	isb	sy
 8018e9a:	f3bf 8f4f 	dsb	sy
 8018e9e:	617b      	str	r3, [r7, #20]
}
 8018ea0:	bf00      	nop
 8018ea2:	e7fe      	b.n	8018ea2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d06e      	beq.n	8018f88 <pvPortMalloc+0x150>
 8018eaa:	4b45      	ldr	r3, [pc, #276]	; (8018fc0 <pvPortMalloc+0x188>)
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	687a      	ldr	r2, [r7, #4]
 8018eb0:	429a      	cmp	r2, r3
 8018eb2:	d869      	bhi.n	8018f88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018eb4:	4b43      	ldr	r3, [pc, #268]	; (8018fc4 <pvPortMalloc+0x18c>)
 8018eb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018eb8:	4b42      	ldr	r3, [pc, #264]	; (8018fc4 <pvPortMalloc+0x18c>)
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018ebe:	e004      	b.n	8018eca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8018ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ec2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8018ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ec6:	681b      	ldr	r3, [r3, #0]
 8018ec8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ecc:	685b      	ldr	r3, [r3, #4]
 8018ece:	687a      	ldr	r2, [r7, #4]
 8018ed0:	429a      	cmp	r2, r3
 8018ed2:	d903      	bls.n	8018edc <pvPortMalloc+0xa4>
 8018ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d1f1      	bne.n	8018ec0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8018edc:	4b36      	ldr	r3, [pc, #216]	; (8018fb8 <pvPortMalloc+0x180>)
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018ee2:	429a      	cmp	r2, r3
 8018ee4:	d050      	beq.n	8018f88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018ee6:	6a3b      	ldr	r3, [r7, #32]
 8018ee8:	681b      	ldr	r3, [r3, #0]
 8018eea:	2208      	movs	r2, #8
 8018eec:	4413      	add	r3, r2
 8018eee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ef2:	681a      	ldr	r2, [r3, #0]
 8018ef4:	6a3b      	ldr	r3, [r7, #32]
 8018ef6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018efa:	685a      	ldr	r2, [r3, #4]
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	1ad2      	subs	r2, r2, r3
 8018f00:	2308      	movs	r3, #8
 8018f02:	005b      	lsls	r3, r3, #1
 8018f04:	429a      	cmp	r2, r3
 8018f06:	d91f      	bls.n	8018f48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	4413      	add	r3, r2
 8018f0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018f10:	69bb      	ldr	r3, [r7, #24]
 8018f12:	f003 0307 	and.w	r3, r3, #7
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	d00a      	beq.n	8018f30 <pvPortMalloc+0xf8>
	__asm volatile
 8018f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f1e:	f383 8811 	msr	BASEPRI, r3
 8018f22:	f3bf 8f6f 	isb	sy
 8018f26:	f3bf 8f4f 	dsb	sy
 8018f2a:	613b      	str	r3, [r7, #16]
}
 8018f2c:	bf00      	nop
 8018f2e:	e7fe      	b.n	8018f2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f32:	685a      	ldr	r2, [r3, #4]
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	1ad2      	subs	r2, r2, r3
 8018f38:	69bb      	ldr	r3, [r7, #24]
 8018f3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f3e:	687a      	ldr	r2, [r7, #4]
 8018f40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018f42:	69b8      	ldr	r0, [r7, #24]
 8018f44:	f000 f908 	bl	8019158 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018f48:	4b1d      	ldr	r3, [pc, #116]	; (8018fc0 <pvPortMalloc+0x188>)
 8018f4a:	681a      	ldr	r2, [r3, #0]
 8018f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f4e:	685b      	ldr	r3, [r3, #4]
 8018f50:	1ad3      	subs	r3, r2, r3
 8018f52:	4a1b      	ldr	r2, [pc, #108]	; (8018fc0 <pvPortMalloc+0x188>)
 8018f54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018f56:	4b1a      	ldr	r3, [pc, #104]	; (8018fc0 <pvPortMalloc+0x188>)
 8018f58:	681a      	ldr	r2, [r3, #0]
 8018f5a:	4b1b      	ldr	r3, [pc, #108]	; (8018fc8 <pvPortMalloc+0x190>)
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	429a      	cmp	r2, r3
 8018f60:	d203      	bcs.n	8018f6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018f62:	4b17      	ldr	r3, [pc, #92]	; (8018fc0 <pvPortMalloc+0x188>)
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	4a18      	ldr	r2, [pc, #96]	; (8018fc8 <pvPortMalloc+0x190>)
 8018f68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8018f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f6c:	685a      	ldr	r2, [r3, #4]
 8018f6e:	4b13      	ldr	r3, [pc, #76]	; (8018fbc <pvPortMalloc+0x184>)
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	431a      	orrs	r2, r3
 8018f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f7a:	2200      	movs	r2, #0
 8018f7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8018f7e:	4b13      	ldr	r3, [pc, #76]	; (8018fcc <pvPortMalloc+0x194>)
 8018f80:	681b      	ldr	r3, [r3, #0]
 8018f82:	3301      	adds	r3, #1
 8018f84:	4a11      	ldr	r2, [pc, #68]	; (8018fcc <pvPortMalloc+0x194>)
 8018f86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018f88:	f7fe fbfe 	bl	8017788 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8018f8c:	69fb      	ldr	r3, [r7, #28]
 8018f8e:	f003 0307 	and.w	r3, r3, #7
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d00a      	beq.n	8018fac <pvPortMalloc+0x174>
	__asm volatile
 8018f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f9a:	f383 8811 	msr	BASEPRI, r3
 8018f9e:	f3bf 8f6f 	isb	sy
 8018fa2:	f3bf 8f4f 	dsb	sy
 8018fa6:	60fb      	str	r3, [r7, #12]
}
 8018fa8:	bf00      	nop
 8018faa:	e7fe      	b.n	8018faa <pvPortMalloc+0x172>
	return pvReturn;
 8018fac:	69fb      	ldr	r3, [r7, #28]
}
 8018fae:	4618      	mov	r0, r3
 8018fb0:	3728      	adds	r7, #40	; 0x28
 8018fb2:	46bd      	mov	sp, r7
 8018fb4:	bd80      	pop	{r7, pc}
 8018fb6:	bf00      	nop
 8018fb8:	20005c80 	.word	0x20005c80
 8018fbc:	20005c94 	.word	0x20005c94
 8018fc0:	20005c84 	.word	0x20005c84
 8018fc4:	20005c78 	.word	0x20005c78
 8018fc8:	20005c88 	.word	0x20005c88
 8018fcc:	20005c8c 	.word	0x20005c8c

08018fd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8018fd0:	b580      	push	{r7, lr}
 8018fd2:	b086      	sub	sp, #24
 8018fd4:	af00      	add	r7, sp, #0
 8018fd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	d04d      	beq.n	801907e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8018fe2:	2308      	movs	r3, #8
 8018fe4:	425b      	negs	r3, r3
 8018fe6:	697a      	ldr	r2, [r7, #20]
 8018fe8:	4413      	add	r3, r2
 8018fea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8018fec:	697b      	ldr	r3, [r7, #20]
 8018fee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018ff0:	693b      	ldr	r3, [r7, #16]
 8018ff2:	685a      	ldr	r2, [r3, #4]
 8018ff4:	4b24      	ldr	r3, [pc, #144]	; (8019088 <vPortFree+0xb8>)
 8018ff6:	681b      	ldr	r3, [r3, #0]
 8018ff8:	4013      	ands	r3, r2
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	d10a      	bne.n	8019014 <vPortFree+0x44>
	__asm volatile
 8018ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019002:	f383 8811 	msr	BASEPRI, r3
 8019006:	f3bf 8f6f 	isb	sy
 801900a:	f3bf 8f4f 	dsb	sy
 801900e:	60fb      	str	r3, [r7, #12]
}
 8019010:	bf00      	nop
 8019012:	e7fe      	b.n	8019012 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019014:	693b      	ldr	r3, [r7, #16]
 8019016:	681b      	ldr	r3, [r3, #0]
 8019018:	2b00      	cmp	r3, #0
 801901a:	d00a      	beq.n	8019032 <vPortFree+0x62>
	__asm volatile
 801901c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019020:	f383 8811 	msr	BASEPRI, r3
 8019024:	f3bf 8f6f 	isb	sy
 8019028:	f3bf 8f4f 	dsb	sy
 801902c:	60bb      	str	r3, [r7, #8]
}
 801902e:	bf00      	nop
 8019030:	e7fe      	b.n	8019030 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019032:	693b      	ldr	r3, [r7, #16]
 8019034:	685a      	ldr	r2, [r3, #4]
 8019036:	4b14      	ldr	r3, [pc, #80]	; (8019088 <vPortFree+0xb8>)
 8019038:	681b      	ldr	r3, [r3, #0]
 801903a:	4013      	ands	r3, r2
 801903c:	2b00      	cmp	r3, #0
 801903e:	d01e      	beq.n	801907e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019040:	693b      	ldr	r3, [r7, #16]
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	2b00      	cmp	r3, #0
 8019046:	d11a      	bne.n	801907e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019048:	693b      	ldr	r3, [r7, #16]
 801904a:	685a      	ldr	r2, [r3, #4]
 801904c:	4b0e      	ldr	r3, [pc, #56]	; (8019088 <vPortFree+0xb8>)
 801904e:	681b      	ldr	r3, [r3, #0]
 8019050:	43db      	mvns	r3, r3
 8019052:	401a      	ands	r2, r3
 8019054:	693b      	ldr	r3, [r7, #16]
 8019056:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019058:	f7fe fb88 	bl	801776c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801905c:	693b      	ldr	r3, [r7, #16]
 801905e:	685a      	ldr	r2, [r3, #4]
 8019060:	4b0a      	ldr	r3, [pc, #40]	; (801908c <vPortFree+0xbc>)
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	4413      	add	r3, r2
 8019066:	4a09      	ldr	r2, [pc, #36]	; (801908c <vPortFree+0xbc>)
 8019068:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801906a:	6938      	ldr	r0, [r7, #16]
 801906c:	f000 f874 	bl	8019158 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019070:	4b07      	ldr	r3, [pc, #28]	; (8019090 <vPortFree+0xc0>)
 8019072:	681b      	ldr	r3, [r3, #0]
 8019074:	3301      	adds	r3, #1
 8019076:	4a06      	ldr	r2, [pc, #24]	; (8019090 <vPortFree+0xc0>)
 8019078:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801907a:	f7fe fb85 	bl	8017788 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801907e:	bf00      	nop
 8019080:	3718      	adds	r7, #24
 8019082:	46bd      	mov	sp, r7
 8019084:	bd80      	pop	{r7, pc}
 8019086:	bf00      	nop
 8019088:	20005c94 	.word	0x20005c94
 801908c:	20005c84 	.word	0x20005c84
 8019090:	20005c90 	.word	0x20005c90

08019094 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019094:	b480      	push	{r7}
 8019096:	b085      	sub	sp, #20
 8019098:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801909a:	f244 6350 	movw	r3, #18000	; 0x4650
 801909e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80190a0:	4b27      	ldr	r3, [pc, #156]	; (8019140 <prvHeapInit+0xac>)
 80190a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80190a4:	68fb      	ldr	r3, [r7, #12]
 80190a6:	f003 0307 	and.w	r3, r3, #7
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	d00c      	beq.n	80190c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80190ae:	68fb      	ldr	r3, [r7, #12]
 80190b0:	3307      	adds	r3, #7
 80190b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80190b4:	68fb      	ldr	r3, [r7, #12]
 80190b6:	f023 0307 	bic.w	r3, r3, #7
 80190ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80190bc:	68ba      	ldr	r2, [r7, #8]
 80190be:	68fb      	ldr	r3, [r7, #12]
 80190c0:	1ad3      	subs	r3, r2, r3
 80190c2:	4a1f      	ldr	r2, [pc, #124]	; (8019140 <prvHeapInit+0xac>)
 80190c4:	4413      	add	r3, r2
 80190c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80190c8:	68fb      	ldr	r3, [r7, #12]
 80190ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80190cc:	4a1d      	ldr	r2, [pc, #116]	; (8019144 <prvHeapInit+0xb0>)
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80190d2:	4b1c      	ldr	r3, [pc, #112]	; (8019144 <prvHeapInit+0xb0>)
 80190d4:	2200      	movs	r2, #0
 80190d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	68ba      	ldr	r2, [r7, #8]
 80190dc:	4413      	add	r3, r2
 80190de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80190e0:	2208      	movs	r2, #8
 80190e2:	68fb      	ldr	r3, [r7, #12]
 80190e4:	1a9b      	subs	r3, r3, r2
 80190e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	f023 0307 	bic.w	r3, r3, #7
 80190ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80190f0:	68fb      	ldr	r3, [r7, #12]
 80190f2:	4a15      	ldr	r2, [pc, #84]	; (8019148 <prvHeapInit+0xb4>)
 80190f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80190f6:	4b14      	ldr	r3, [pc, #80]	; (8019148 <prvHeapInit+0xb4>)
 80190f8:	681b      	ldr	r3, [r3, #0]
 80190fa:	2200      	movs	r2, #0
 80190fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80190fe:	4b12      	ldr	r3, [pc, #72]	; (8019148 <prvHeapInit+0xb4>)
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	2200      	movs	r2, #0
 8019104:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801910a:	683b      	ldr	r3, [r7, #0]
 801910c:	68fa      	ldr	r2, [r7, #12]
 801910e:	1ad2      	subs	r2, r2, r3
 8019110:	683b      	ldr	r3, [r7, #0]
 8019112:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019114:	4b0c      	ldr	r3, [pc, #48]	; (8019148 <prvHeapInit+0xb4>)
 8019116:	681a      	ldr	r2, [r3, #0]
 8019118:	683b      	ldr	r3, [r7, #0]
 801911a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801911c:	683b      	ldr	r3, [r7, #0]
 801911e:	685b      	ldr	r3, [r3, #4]
 8019120:	4a0a      	ldr	r2, [pc, #40]	; (801914c <prvHeapInit+0xb8>)
 8019122:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019124:	683b      	ldr	r3, [r7, #0]
 8019126:	685b      	ldr	r3, [r3, #4]
 8019128:	4a09      	ldr	r2, [pc, #36]	; (8019150 <prvHeapInit+0xbc>)
 801912a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801912c:	4b09      	ldr	r3, [pc, #36]	; (8019154 <prvHeapInit+0xc0>)
 801912e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019132:	601a      	str	r2, [r3, #0]
}
 8019134:	bf00      	nop
 8019136:	3714      	adds	r7, #20
 8019138:	46bd      	mov	sp, r7
 801913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801913e:	4770      	bx	lr
 8019140:	20001628 	.word	0x20001628
 8019144:	20005c78 	.word	0x20005c78
 8019148:	20005c80 	.word	0x20005c80
 801914c:	20005c88 	.word	0x20005c88
 8019150:	20005c84 	.word	0x20005c84
 8019154:	20005c94 	.word	0x20005c94

08019158 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019158:	b480      	push	{r7}
 801915a:	b085      	sub	sp, #20
 801915c:	af00      	add	r7, sp, #0
 801915e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019160:	4b28      	ldr	r3, [pc, #160]	; (8019204 <prvInsertBlockIntoFreeList+0xac>)
 8019162:	60fb      	str	r3, [r7, #12]
 8019164:	e002      	b.n	801916c <prvInsertBlockIntoFreeList+0x14>
 8019166:	68fb      	ldr	r3, [r7, #12]
 8019168:	681b      	ldr	r3, [r3, #0]
 801916a:	60fb      	str	r3, [r7, #12]
 801916c:	68fb      	ldr	r3, [r7, #12]
 801916e:	681b      	ldr	r3, [r3, #0]
 8019170:	687a      	ldr	r2, [r7, #4]
 8019172:	429a      	cmp	r2, r3
 8019174:	d8f7      	bhi.n	8019166 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019176:	68fb      	ldr	r3, [r7, #12]
 8019178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801917a:	68fb      	ldr	r3, [r7, #12]
 801917c:	685b      	ldr	r3, [r3, #4]
 801917e:	68ba      	ldr	r2, [r7, #8]
 8019180:	4413      	add	r3, r2
 8019182:	687a      	ldr	r2, [r7, #4]
 8019184:	429a      	cmp	r2, r3
 8019186:	d108      	bne.n	801919a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019188:	68fb      	ldr	r3, [r7, #12]
 801918a:	685a      	ldr	r2, [r3, #4]
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	685b      	ldr	r3, [r3, #4]
 8019190:	441a      	add	r2, r3
 8019192:	68fb      	ldr	r3, [r7, #12]
 8019194:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019196:	68fb      	ldr	r3, [r7, #12]
 8019198:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	685b      	ldr	r3, [r3, #4]
 80191a2:	68ba      	ldr	r2, [r7, #8]
 80191a4:	441a      	add	r2, r3
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	429a      	cmp	r2, r3
 80191ac:	d118      	bne.n	80191e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80191ae:	68fb      	ldr	r3, [r7, #12]
 80191b0:	681a      	ldr	r2, [r3, #0]
 80191b2:	4b15      	ldr	r3, [pc, #84]	; (8019208 <prvInsertBlockIntoFreeList+0xb0>)
 80191b4:	681b      	ldr	r3, [r3, #0]
 80191b6:	429a      	cmp	r2, r3
 80191b8:	d00d      	beq.n	80191d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	685a      	ldr	r2, [r3, #4]
 80191be:	68fb      	ldr	r3, [r7, #12]
 80191c0:	681b      	ldr	r3, [r3, #0]
 80191c2:	685b      	ldr	r3, [r3, #4]
 80191c4:	441a      	add	r2, r3
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80191ca:	68fb      	ldr	r3, [r7, #12]
 80191cc:	681b      	ldr	r3, [r3, #0]
 80191ce:	681a      	ldr	r2, [r3, #0]
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	601a      	str	r2, [r3, #0]
 80191d4:	e008      	b.n	80191e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80191d6:	4b0c      	ldr	r3, [pc, #48]	; (8019208 <prvInsertBlockIntoFreeList+0xb0>)
 80191d8:	681a      	ldr	r2, [r3, #0]
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	601a      	str	r2, [r3, #0]
 80191de:	e003      	b.n	80191e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	681a      	ldr	r2, [r3, #0]
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80191e8:	68fa      	ldr	r2, [r7, #12]
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	429a      	cmp	r2, r3
 80191ee:	d002      	beq.n	80191f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80191f0:	68fb      	ldr	r3, [r7, #12]
 80191f2:	687a      	ldr	r2, [r7, #4]
 80191f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80191f6:	bf00      	nop
 80191f8:	3714      	adds	r7, #20
 80191fa:	46bd      	mov	sp, r7
 80191fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019200:	4770      	bx	lr
 8019202:	bf00      	nop
 8019204:	20005c78 	.word	0x20005c78
 8019208:	20005c80 	.word	0x20005c80

0801920c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801920c:	b580      	push	{r7, lr}
 801920e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8019210:	2200      	movs	r2, #0
 8019212:	4912      	ldr	r1, [pc, #72]	; (801925c <MX_USB_DEVICE_Init+0x50>)
 8019214:	4812      	ldr	r0, [pc, #72]	; (8019260 <MX_USB_DEVICE_Init+0x54>)
 8019216:	f7f8 fcc7 	bl	8011ba8 <USBD_Init>
 801921a:	4603      	mov	r3, r0
 801921c:	2b00      	cmp	r3, #0
 801921e:	d001      	beq.n	8019224 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8019220:	f7e8 fe7e 	bl	8001f20 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8019224:	490f      	ldr	r1, [pc, #60]	; (8019264 <MX_USB_DEVICE_Init+0x58>)
 8019226:	480e      	ldr	r0, [pc, #56]	; (8019260 <MX_USB_DEVICE_Init+0x54>)
 8019228:	f7f8 fcee 	bl	8011c08 <USBD_RegisterClass>
 801922c:	4603      	mov	r3, r0
 801922e:	2b00      	cmp	r3, #0
 8019230:	d001      	beq.n	8019236 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8019232:	f7e8 fe75 	bl	8001f20 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8019236:	490c      	ldr	r1, [pc, #48]	; (8019268 <MX_USB_DEVICE_Init+0x5c>)
 8019238:	4809      	ldr	r0, [pc, #36]	; (8019260 <MX_USB_DEVICE_Init+0x54>)
 801923a:	f7f8 fc3f 	bl	8011abc <USBD_CDC_RegisterInterface>
 801923e:	4603      	mov	r3, r0
 8019240:	2b00      	cmp	r3, #0
 8019242:	d001      	beq.n	8019248 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8019244:	f7e8 fe6c 	bl	8001f20 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8019248:	4805      	ldr	r0, [pc, #20]	; (8019260 <MX_USB_DEVICE_Init+0x54>)
 801924a:	f7f8 fd04 	bl	8011c56 <USBD_Start>
 801924e:	4603      	mov	r3, r0
 8019250:	2b00      	cmp	r3, #0
 8019252:	d001      	beq.n	8019258 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8019254:	f7e8 fe64 	bl	8001f20 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8019258:	bf00      	nop
 801925a:	bd80      	pop	{r7, pc}
 801925c:	200001a8 	.word	0x200001a8
 8019260:	20007478 	.word	0x20007478
 8019264:	2000008c 	.word	0x2000008c
 8019268:	20000194 	.word	0x20000194

0801926c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801926c:	b580      	push	{r7, lr}
 801926e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8019270:	2200      	movs	r2, #0
 8019272:	4905      	ldr	r1, [pc, #20]	; (8019288 <CDC_Init_FS+0x1c>)
 8019274:	4805      	ldr	r0, [pc, #20]	; (801928c <CDC_Init_FS+0x20>)
 8019276:	f7f8 fc36 	bl	8011ae6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801927a:	4905      	ldr	r1, [pc, #20]	; (8019290 <CDC_Init_FS+0x24>)
 801927c:	4803      	ldr	r0, [pc, #12]	; (801928c <CDC_Init_FS+0x20>)
 801927e:	f7f8 fc50 	bl	8011b22 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8019282:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8019284:	4618      	mov	r0, r3
 8019286:	bd80      	pop	{r7, pc}
 8019288:	20007f48 	.word	0x20007f48
 801928c:	20007478 	.word	0x20007478
 8019290:	20007748 	.word	0x20007748

08019294 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8019294:	b480      	push	{r7}
 8019296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019298:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801929a:	4618      	mov	r0, r3
 801929c:	46bd      	mov	sp, r7
 801929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192a2:	4770      	bx	lr

080192a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80192a4:	b480      	push	{r7}
 80192a6:	b083      	sub	sp, #12
 80192a8:	af00      	add	r7, sp, #0
 80192aa:	4603      	mov	r3, r0
 80192ac:	6039      	str	r1, [r7, #0]
 80192ae:	71fb      	strb	r3, [r7, #7]
 80192b0:	4613      	mov	r3, r2
 80192b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80192b4:	79fb      	ldrb	r3, [r7, #7]
 80192b6:	2b23      	cmp	r3, #35	; 0x23
 80192b8:	d84a      	bhi.n	8019350 <CDC_Control_FS+0xac>
 80192ba:	a201      	add	r2, pc, #4	; (adr r2, 80192c0 <CDC_Control_FS+0x1c>)
 80192bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80192c0:	08019351 	.word	0x08019351
 80192c4:	08019351 	.word	0x08019351
 80192c8:	08019351 	.word	0x08019351
 80192cc:	08019351 	.word	0x08019351
 80192d0:	08019351 	.word	0x08019351
 80192d4:	08019351 	.word	0x08019351
 80192d8:	08019351 	.word	0x08019351
 80192dc:	08019351 	.word	0x08019351
 80192e0:	08019351 	.word	0x08019351
 80192e4:	08019351 	.word	0x08019351
 80192e8:	08019351 	.word	0x08019351
 80192ec:	08019351 	.word	0x08019351
 80192f0:	08019351 	.word	0x08019351
 80192f4:	08019351 	.word	0x08019351
 80192f8:	08019351 	.word	0x08019351
 80192fc:	08019351 	.word	0x08019351
 8019300:	08019351 	.word	0x08019351
 8019304:	08019351 	.word	0x08019351
 8019308:	08019351 	.word	0x08019351
 801930c:	08019351 	.word	0x08019351
 8019310:	08019351 	.word	0x08019351
 8019314:	08019351 	.word	0x08019351
 8019318:	08019351 	.word	0x08019351
 801931c:	08019351 	.word	0x08019351
 8019320:	08019351 	.word	0x08019351
 8019324:	08019351 	.word	0x08019351
 8019328:	08019351 	.word	0x08019351
 801932c:	08019351 	.word	0x08019351
 8019330:	08019351 	.word	0x08019351
 8019334:	08019351 	.word	0x08019351
 8019338:	08019351 	.word	0x08019351
 801933c:	08019351 	.word	0x08019351
 8019340:	08019351 	.word	0x08019351
 8019344:	08019351 	.word	0x08019351
 8019348:	08019351 	.word	0x08019351
 801934c:	08019351 	.word	0x08019351
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8019350:	bf00      	nop
  }

  return (USBD_OK);
 8019352:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019354:	4618      	mov	r0, r3
 8019356:	370c      	adds	r7, #12
 8019358:	46bd      	mov	sp, r7
 801935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801935e:	4770      	bx	lr

08019360 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8019360:	b580      	push	{r7, lr}
 8019362:	b082      	sub	sp, #8
 8019364:	af00      	add	r7, sp, #0
 8019366:	6078      	str	r0, [r7, #4]
 8019368:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801936a:	6879      	ldr	r1, [r7, #4]
 801936c:	4805      	ldr	r0, [pc, #20]	; (8019384 <CDC_Receive_FS+0x24>)
 801936e:	f7f8 fbd8 	bl	8011b22 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8019372:	4804      	ldr	r0, [pc, #16]	; (8019384 <CDC_Receive_FS+0x24>)
 8019374:	f7f8 fbee 	bl	8011b54 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8019378:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801937a:	4618      	mov	r0, r3
 801937c:	3708      	adds	r7, #8
 801937e:	46bd      	mov	sp, r7
 8019380:	bd80      	pop	{r7, pc}
 8019382:	bf00      	nop
 8019384:	20007478 	.word	0x20007478

08019388 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8019388:	b480      	push	{r7}
 801938a:	b087      	sub	sp, #28
 801938c:	af00      	add	r7, sp, #0
 801938e:	60f8      	str	r0, [r7, #12]
 8019390:	60b9      	str	r1, [r7, #8]
 8019392:	4613      	mov	r3, r2
 8019394:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8019396:	2300      	movs	r3, #0
 8019398:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801939a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801939e:	4618      	mov	r0, r3
 80193a0:	371c      	adds	r7, #28
 80193a2:	46bd      	mov	sp, r7
 80193a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193a8:	4770      	bx	lr
	...

080193ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80193ac:	b480      	push	{r7}
 80193ae:	b083      	sub	sp, #12
 80193b0:	af00      	add	r7, sp, #0
 80193b2:	4603      	mov	r3, r0
 80193b4:	6039      	str	r1, [r7, #0]
 80193b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80193b8:	683b      	ldr	r3, [r7, #0]
 80193ba:	2212      	movs	r2, #18
 80193bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80193be:	4b03      	ldr	r3, [pc, #12]	; (80193cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80193c0:	4618      	mov	r0, r3
 80193c2:	370c      	adds	r7, #12
 80193c4:	46bd      	mov	sp, r7
 80193c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ca:	4770      	bx	lr
 80193cc:	200001c4 	.word	0x200001c4

080193d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80193d0:	b480      	push	{r7}
 80193d2:	b083      	sub	sp, #12
 80193d4:	af00      	add	r7, sp, #0
 80193d6:	4603      	mov	r3, r0
 80193d8:	6039      	str	r1, [r7, #0]
 80193da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80193dc:	683b      	ldr	r3, [r7, #0]
 80193de:	2204      	movs	r2, #4
 80193e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80193e2:	4b03      	ldr	r3, [pc, #12]	; (80193f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80193e4:	4618      	mov	r0, r3
 80193e6:	370c      	adds	r7, #12
 80193e8:	46bd      	mov	sp, r7
 80193ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ee:	4770      	bx	lr
 80193f0:	200001d8 	.word	0x200001d8

080193f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80193f4:	b580      	push	{r7, lr}
 80193f6:	b082      	sub	sp, #8
 80193f8:	af00      	add	r7, sp, #0
 80193fa:	4603      	mov	r3, r0
 80193fc:	6039      	str	r1, [r7, #0]
 80193fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019400:	79fb      	ldrb	r3, [r7, #7]
 8019402:	2b00      	cmp	r3, #0
 8019404:	d105      	bne.n	8019412 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019406:	683a      	ldr	r2, [r7, #0]
 8019408:	4907      	ldr	r1, [pc, #28]	; (8019428 <USBD_FS_ProductStrDescriptor+0x34>)
 801940a:	4808      	ldr	r0, [pc, #32]	; (801942c <USBD_FS_ProductStrDescriptor+0x38>)
 801940c:	f7f9 fc55 	bl	8012cba <USBD_GetString>
 8019410:	e004      	b.n	801941c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019412:	683a      	ldr	r2, [r7, #0]
 8019414:	4904      	ldr	r1, [pc, #16]	; (8019428 <USBD_FS_ProductStrDescriptor+0x34>)
 8019416:	4805      	ldr	r0, [pc, #20]	; (801942c <USBD_FS_ProductStrDescriptor+0x38>)
 8019418:	f7f9 fc4f 	bl	8012cba <USBD_GetString>
  }
  return USBD_StrDesc;
 801941c:	4b02      	ldr	r3, [pc, #8]	; (8019428 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801941e:	4618      	mov	r0, r3
 8019420:	3708      	adds	r7, #8
 8019422:	46bd      	mov	sp, r7
 8019424:	bd80      	pop	{r7, pc}
 8019426:	bf00      	nop
 8019428:	20008748 	.word	0x20008748
 801942c:	08021d40 	.word	0x08021d40

08019430 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019430:	b580      	push	{r7, lr}
 8019432:	b082      	sub	sp, #8
 8019434:	af00      	add	r7, sp, #0
 8019436:	4603      	mov	r3, r0
 8019438:	6039      	str	r1, [r7, #0]
 801943a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801943c:	683a      	ldr	r2, [r7, #0]
 801943e:	4904      	ldr	r1, [pc, #16]	; (8019450 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8019440:	4804      	ldr	r0, [pc, #16]	; (8019454 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8019442:	f7f9 fc3a 	bl	8012cba <USBD_GetString>
  return USBD_StrDesc;
 8019446:	4b02      	ldr	r3, [pc, #8]	; (8019450 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8019448:	4618      	mov	r0, r3
 801944a:	3708      	adds	r7, #8
 801944c:	46bd      	mov	sp, r7
 801944e:	bd80      	pop	{r7, pc}
 8019450:	20008748 	.word	0x20008748
 8019454:	08021d58 	.word	0x08021d58

08019458 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019458:	b580      	push	{r7, lr}
 801945a:	b082      	sub	sp, #8
 801945c:	af00      	add	r7, sp, #0
 801945e:	4603      	mov	r3, r0
 8019460:	6039      	str	r1, [r7, #0]
 8019462:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019464:	683b      	ldr	r3, [r7, #0]
 8019466:	221a      	movs	r2, #26
 8019468:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801946a:	f000 f843 	bl	80194f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801946e:	4b02      	ldr	r3, [pc, #8]	; (8019478 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8019470:	4618      	mov	r0, r3
 8019472:	3708      	adds	r7, #8
 8019474:	46bd      	mov	sp, r7
 8019476:	bd80      	pop	{r7, pc}
 8019478:	200001dc 	.word	0x200001dc

0801947c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801947c:	b580      	push	{r7, lr}
 801947e:	b082      	sub	sp, #8
 8019480:	af00      	add	r7, sp, #0
 8019482:	4603      	mov	r3, r0
 8019484:	6039      	str	r1, [r7, #0]
 8019486:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019488:	79fb      	ldrb	r3, [r7, #7]
 801948a:	2b00      	cmp	r3, #0
 801948c:	d105      	bne.n	801949a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801948e:	683a      	ldr	r2, [r7, #0]
 8019490:	4907      	ldr	r1, [pc, #28]	; (80194b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8019492:	4808      	ldr	r0, [pc, #32]	; (80194b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019494:	f7f9 fc11 	bl	8012cba <USBD_GetString>
 8019498:	e004      	b.n	80194a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801949a:	683a      	ldr	r2, [r7, #0]
 801949c:	4904      	ldr	r1, [pc, #16]	; (80194b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801949e:	4805      	ldr	r0, [pc, #20]	; (80194b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80194a0:	f7f9 fc0b 	bl	8012cba <USBD_GetString>
  }
  return USBD_StrDesc;
 80194a4:	4b02      	ldr	r3, [pc, #8]	; (80194b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80194a6:	4618      	mov	r0, r3
 80194a8:	3708      	adds	r7, #8
 80194aa:	46bd      	mov	sp, r7
 80194ac:	bd80      	pop	{r7, pc}
 80194ae:	bf00      	nop
 80194b0:	20008748 	.word	0x20008748
 80194b4:	08021d6c 	.word	0x08021d6c

080194b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80194b8:	b580      	push	{r7, lr}
 80194ba:	b082      	sub	sp, #8
 80194bc:	af00      	add	r7, sp, #0
 80194be:	4603      	mov	r3, r0
 80194c0:	6039      	str	r1, [r7, #0]
 80194c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80194c4:	79fb      	ldrb	r3, [r7, #7]
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d105      	bne.n	80194d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80194ca:	683a      	ldr	r2, [r7, #0]
 80194cc:	4907      	ldr	r1, [pc, #28]	; (80194ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80194ce:	4808      	ldr	r0, [pc, #32]	; (80194f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80194d0:	f7f9 fbf3 	bl	8012cba <USBD_GetString>
 80194d4:	e004      	b.n	80194e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80194d6:	683a      	ldr	r2, [r7, #0]
 80194d8:	4904      	ldr	r1, [pc, #16]	; (80194ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80194da:	4805      	ldr	r0, [pc, #20]	; (80194f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80194dc:	f7f9 fbed 	bl	8012cba <USBD_GetString>
  }
  return USBD_StrDesc;
 80194e0:	4b02      	ldr	r3, [pc, #8]	; (80194ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80194e2:	4618      	mov	r0, r3
 80194e4:	3708      	adds	r7, #8
 80194e6:	46bd      	mov	sp, r7
 80194e8:	bd80      	pop	{r7, pc}
 80194ea:	bf00      	nop
 80194ec:	20008748 	.word	0x20008748
 80194f0:	08021d78 	.word	0x08021d78

080194f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80194f4:	b580      	push	{r7, lr}
 80194f6:	b084      	sub	sp, #16
 80194f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80194fa:	4b0f      	ldr	r3, [pc, #60]	; (8019538 <Get_SerialNum+0x44>)
 80194fc:	681b      	ldr	r3, [r3, #0]
 80194fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019500:	4b0e      	ldr	r3, [pc, #56]	; (801953c <Get_SerialNum+0x48>)
 8019502:	681b      	ldr	r3, [r3, #0]
 8019504:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8019506:	4b0e      	ldr	r3, [pc, #56]	; (8019540 <Get_SerialNum+0x4c>)
 8019508:	681b      	ldr	r3, [r3, #0]
 801950a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801950c:	68fa      	ldr	r2, [r7, #12]
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	4413      	add	r3, r2
 8019512:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019514:	68fb      	ldr	r3, [r7, #12]
 8019516:	2b00      	cmp	r3, #0
 8019518:	d009      	beq.n	801952e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801951a:	2208      	movs	r2, #8
 801951c:	4909      	ldr	r1, [pc, #36]	; (8019544 <Get_SerialNum+0x50>)
 801951e:	68f8      	ldr	r0, [r7, #12]
 8019520:	f000 f814 	bl	801954c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8019524:	2204      	movs	r2, #4
 8019526:	4908      	ldr	r1, [pc, #32]	; (8019548 <Get_SerialNum+0x54>)
 8019528:	68b8      	ldr	r0, [r7, #8]
 801952a:	f000 f80f 	bl	801954c <IntToUnicode>
  }
}
 801952e:	bf00      	nop
 8019530:	3710      	adds	r7, #16
 8019532:	46bd      	mov	sp, r7
 8019534:	bd80      	pop	{r7, pc}
 8019536:	bf00      	nop
 8019538:	1fff7a10 	.word	0x1fff7a10
 801953c:	1fff7a14 	.word	0x1fff7a14
 8019540:	1fff7a18 	.word	0x1fff7a18
 8019544:	200001de 	.word	0x200001de
 8019548:	200001ee 	.word	0x200001ee

0801954c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801954c:	b480      	push	{r7}
 801954e:	b087      	sub	sp, #28
 8019550:	af00      	add	r7, sp, #0
 8019552:	60f8      	str	r0, [r7, #12]
 8019554:	60b9      	str	r1, [r7, #8]
 8019556:	4613      	mov	r3, r2
 8019558:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801955a:	2300      	movs	r3, #0
 801955c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801955e:	2300      	movs	r3, #0
 8019560:	75fb      	strb	r3, [r7, #23]
 8019562:	e027      	b.n	80195b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8019564:	68fb      	ldr	r3, [r7, #12]
 8019566:	0f1b      	lsrs	r3, r3, #28
 8019568:	2b09      	cmp	r3, #9
 801956a:	d80b      	bhi.n	8019584 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801956c:	68fb      	ldr	r3, [r7, #12]
 801956e:	0f1b      	lsrs	r3, r3, #28
 8019570:	b2da      	uxtb	r2, r3
 8019572:	7dfb      	ldrb	r3, [r7, #23]
 8019574:	005b      	lsls	r3, r3, #1
 8019576:	4619      	mov	r1, r3
 8019578:	68bb      	ldr	r3, [r7, #8]
 801957a:	440b      	add	r3, r1
 801957c:	3230      	adds	r2, #48	; 0x30
 801957e:	b2d2      	uxtb	r2, r2
 8019580:	701a      	strb	r2, [r3, #0]
 8019582:	e00a      	b.n	801959a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019584:	68fb      	ldr	r3, [r7, #12]
 8019586:	0f1b      	lsrs	r3, r3, #28
 8019588:	b2da      	uxtb	r2, r3
 801958a:	7dfb      	ldrb	r3, [r7, #23]
 801958c:	005b      	lsls	r3, r3, #1
 801958e:	4619      	mov	r1, r3
 8019590:	68bb      	ldr	r3, [r7, #8]
 8019592:	440b      	add	r3, r1
 8019594:	3237      	adds	r2, #55	; 0x37
 8019596:	b2d2      	uxtb	r2, r2
 8019598:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801959a:	68fb      	ldr	r3, [r7, #12]
 801959c:	011b      	lsls	r3, r3, #4
 801959e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80195a0:	7dfb      	ldrb	r3, [r7, #23]
 80195a2:	005b      	lsls	r3, r3, #1
 80195a4:	3301      	adds	r3, #1
 80195a6:	68ba      	ldr	r2, [r7, #8]
 80195a8:	4413      	add	r3, r2
 80195aa:	2200      	movs	r2, #0
 80195ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80195ae:	7dfb      	ldrb	r3, [r7, #23]
 80195b0:	3301      	adds	r3, #1
 80195b2:	75fb      	strb	r3, [r7, #23]
 80195b4:	7dfa      	ldrb	r2, [r7, #23]
 80195b6:	79fb      	ldrb	r3, [r7, #7]
 80195b8:	429a      	cmp	r2, r3
 80195ba:	d3d3      	bcc.n	8019564 <IntToUnicode+0x18>
  }
}
 80195bc:	bf00      	nop
 80195be:	bf00      	nop
 80195c0:	371c      	adds	r7, #28
 80195c2:	46bd      	mov	sp, r7
 80195c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195c8:	4770      	bx	lr
	...

080195cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80195cc:	b580      	push	{r7, lr}
 80195ce:	b08a      	sub	sp, #40	; 0x28
 80195d0:	af00      	add	r7, sp, #0
 80195d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80195d4:	f107 0314 	add.w	r3, r7, #20
 80195d8:	2200      	movs	r2, #0
 80195da:	601a      	str	r2, [r3, #0]
 80195dc:	605a      	str	r2, [r3, #4]
 80195de:	609a      	str	r2, [r3, #8]
 80195e0:	60da      	str	r2, [r3, #12]
 80195e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80195ec:	d147      	bne.n	801967e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80195ee:	2300      	movs	r3, #0
 80195f0:	613b      	str	r3, [r7, #16]
 80195f2:	4b25      	ldr	r3, [pc, #148]	; (8019688 <HAL_PCD_MspInit+0xbc>)
 80195f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80195f6:	4a24      	ldr	r2, [pc, #144]	; (8019688 <HAL_PCD_MspInit+0xbc>)
 80195f8:	f043 0301 	orr.w	r3, r3, #1
 80195fc:	6313      	str	r3, [r2, #48]	; 0x30
 80195fe:	4b22      	ldr	r3, [pc, #136]	; (8019688 <HAL_PCD_MspInit+0xbc>)
 8019600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019602:	f003 0301 	and.w	r3, r3, #1
 8019606:	613b      	str	r3, [r7, #16]
 8019608:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801960a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801960e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8019610:	2300      	movs	r3, #0
 8019612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019614:	2300      	movs	r3, #0
 8019616:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019618:	f107 0314 	add.w	r3, r7, #20
 801961c:	4619      	mov	r1, r3
 801961e:	481b      	ldr	r0, [pc, #108]	; (801968c <HAL_PCD_MspInit+0xc0>)
 8019620:	f7f0 fa3a 	bl	8009a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8019624:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8019628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801962a:	2302      	movs	r3, #2
 801962c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801962e:	2300      	movs	r3, #0
 8019630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019632:	2303      	movs	r3, #3
 8019634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019636:	230a      	movs	r3, #10
 8019638:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801963a:	f107 0314 	add.w	r3, r7, #20
 801963e:	4619      	mov	r1, r3
 8019640:	4812      	ldr	r0, [pc, #72]	; (801968c <HAL_PCD_MspInit+0xc0>)
 8019642:	f7f0 fa29 	bl	8009a98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019646:	4b10      	ldr	r3, [pc, #64]	; (8019688 <HAL_PCD_MspInit+0xbc>)
 8019648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801964a:	4a0f      	ldr	r2, [pc, #60]	; (8019688 <HAL_PCD_MspInit+0xbc>)
 801964c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019650:	6353      	str	r3, [r2, #52]	; 0x34
 8019652:	2300      	movs	r3, #0
 8019654:	60fb      	str	r3, [r7, #12]
 8019656:	4b0c      	ldr	r3, [pc, #48]	; (8019688 <HAL_PCD_MspInit+0xbc>)
 8019658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801965a:	4a0b      	ldr	r2, [pc, #44]	; (8019688 <HAL_PCD_MspInit+0xbc>)
 801965c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019660:	6453      	str	r3, [r2, #68]	; 0x44
 8019662:	4b09      	ldr	r3, [pc, #36]	; (8019688 <HAL_PCD_MspInit+0xbc>)
 8019664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801966a:	60fb      	str	r3, [r7, #12]
 801966c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801966e:	2200      	movs	r2, #0
 8019670:	2105      	movs	r1, #5
 8019672:	2043      	movs	r0, #67	; 0x43
 8019674:	f7f0 f9d8 	bl	8009a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8019678:	2043      	movs	r0, #67	; 0x43
 801967a:	f7f0 f9f1 	bl	8009a60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801967e:	bf00      	nop
 8019680:	3728      	adds	r7, #40	; 0x28
 8019682:	46bd      	mov	sp, r7
 8019684:	bd80      	pop	{r7, pc}
 8019686:	bf00      	nop
 8019688:	40023800 	.word	0x40023800
 801968c:	40020000 	.word	0x40020000

08019690 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019690:	b580      	push	{r7, lr}
 8019692:	b082      	sub	sp, #8
 8019694:	af00      	add	r7, sp, #0
 8019696:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80196a4:	4619      	mov	r1, r3
 80196a6:	4610      	mov	r0, r2
 80196a8:	f7f8 fb20 	bl	8011cec <USBD_LL_SetupStage>
}
 80196ac:	bf00      	nop
 80196ae:	3708      	adds	r7, #8
 80196b0:	46bd      	mov	sp, r7
 80196b2:	bd80      	pop	{r7, pc}

080196b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80196b4:	b580      	push	{r7, lr}
 80196b6:	b082      	sub	sp, #8
 80196b8:	af00      	add	r7, sp, #0
 80196ba:	6078      	str	r0, [r7, #4]
 80196bc:	460b      	mov	r3, r1
 80196be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80196c6:	78fa      	ldrb	r2, [r7, #3]
 80196c8:	6879      	ldr	r1, [r7, #4]
 80196ca:	4613      	mov	r3, r2
 80196cc:	00db      	lsls	r3, r3, #3
 80196ce:	1a9b      	subs	r3, r3, r2
 80196d0:	009b      	lsls	r3, r3, #2
 80196d2:	440b      	add	r3, r1
 80196d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80196d8:	681a      	ldr	r2, [r3, #0]
 80196da:	78fb      	ldrb	r3, [r7, #3]
 80196dc:	4619      	mov	r1, r3
 80196de:	f7f8 fb5a 	bl	8011d96 <USBD_LL_DataOutStage>
}
 80196e2:	bf00      	nop
 80196e4:	3708      	adds	r7, #8
 80196e6:	46bd      	mov	sp, r7
 80196e8:	bd80      	pop	{r7, pc}

080196ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80196ea:	b580      	push	{r7, lr}
 80196ec:	b082      	sub	sp, #8
 80196ee:	af00      	add	r7, sp, #0
 80196f0:	6078      	str	r0, [r7, #4]
 80196f2:	460b      	mov	r3, r1
 80196f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80196fc:	78fa      	ldrb	r2, [r7, #3]
 80196fe:	6879      	ldr	r1, [r7, #4]
 8019700:	4613      	mov	r3, r2
 8019702:	00db      	lsls	r3, r3, #3
 8019704:	1a9b      	subs	r3, r3, r2
 8019706:	009b      	lsls	r3, r3, #2
 8019708:	440b      	add	r3, r1
 801970a:	3348      	adds	r3, #72	; 0x48
 801970c:	681a      	ldr	r2, [r3, #0]
 801970e:	78fb      	ldrb	r3, [r7, #3]
 8019710:	4619      	mov	r1, r3
 8019712:	f7f8 fba3 	bl	8011e5c <USBD_LL_DataInStage>
}
 8019716:	bf00      	nop
 8019718:	3708      	adds	r7, #8
 801971a:	46bd      	mov	sp, r7
 801971c:	bd80      	pop	{r7, pc}

0801971e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801971e:	b580      	push	{r7, lr}
 8019720:	b082      	sub	sp, #8
 8019722:	af00      	add	r7, sp, #0
 8019724:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801972c:	4618      	mov	r0, r3
 801972e:	f7f8 fcb7 	bl	80120a0 <USBD_LL_SOF>
}
 8019732:	bf00      	nop
 8019734:	3708      	adds	r7, #8
 8019736:	46bd      	mov	sp, r7
 8019738:	bd80      	pop	{r7, pc}

0801973a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801973a:	b580      	push	{r7, lr}
 801973c:	b084      	sub	sp, #16
 801973e:	af00      	add	r7, sp, #0
 8019740:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019742:	2301      	movs	r3, #1
 8019744:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	68db      	ldr	r3, [r3, #12]
 801974a:	2b00      	cmp	r3, #0
 801974c:	d102      	bne.n	8019754 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801974e:	2300      	movs	r3, #0
 8019750:	73fb      	strb	r3, [r7, #15]
 8019752:	e008      	b.n	8019766 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	68db      	ldr	r3, [r3, #12]
 8019758:	2b02      	cmp	r3, #2
 801975a:	d102      	bne.n	8019762 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801975c:	2301      	movs	r3, #1
 801975e:	73fb      	strb	r3, [r7, #15]
 8019760:	e001      	b.n	8019766 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8019762:	f7e8 fbdd 	bl	8001f20 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801976c:	7bfa      	ldrb	r2, [r7, #15]
 801976e:	4611      	mov	r1, r2
 8019770:	4618      	mov	r0, r3
 8019772:	f7f8 fc57 	bl	8012024 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801977c:	4618      	mov	r0, r3
 801977e:	f7f8 fc03 	bl	8011f88 <USBD_LL_Reset>
}
 8019782:	bf00      	nop
 8019784:	3710      	adds	r7, #16
 8019786:	46bd      	mov	sp, r7
 8019788:	bd80      	pop	{r7, pc}
	...

0801978c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801978c:	b580      	push	{r7, lr}
 801978e:	b082      	sub	sp, #8
 8019790:	af00      	add	r7, sp, #0
 8019792:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801979a:	4618      	mov	r0, r3
 801979c:	f7f8 fc52 	bl	8012044 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	681b      	ldr	r3, [r3, #0]
 80197a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80197a8:	681b      	ldr	r3, [r3, #0]
 80197aa:	687a      	ldr	r2, [r7, #4]
 80197ac:	6812      	ldr	r2, [r2, #0]
 80197ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80197b2:	f043 0301 	orr.w	r3, r3, #1
 80197b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	6a1b      	ldr	r3, [r3, #32]
 80197bc:	2b00      	cmp	r3, #0
 80197be:	d005      	beq.n	80197cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80197c0:	4b04      	ldr	r3, [pc, #16]	; (80197d4 <HAL_PCD_SuspendCallback+0x48>)
 80197c2:	691b      	ldr	r3, [r3, #16]
 80197c4:	4a03      	ldr	r2, [pc, #12]	; (80197d4 <HAL_PCD_SuspendCallback+0x48>)
 80197c6:	f043 0306 	orr.w	r3, r3, #6
 80197ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80197cc:	bf00      	nop
 80197ce:	3708      	adds	r7, #8
 80197d0:	46bd      	mov	sp, r7
 80197d2:	bd80      	pop	{r7, pc}
 80197d4:	e000ed00 	.word	0xe000ed00

080197d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197d8:	b580      	push	{r7, lr}
 80197da:	b082      	sub	sp, #8
 80197dc:	af00      	add	r7, sp, #0
 80197de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80197e6:	4618      	mov	r0, r3
 80197e8:	f7f8 fc42 	bl	8012070 <USBD_LL_Resume>
}
 80197ec:	bf00      	nop
 80197ee:	3708      	adds	r7, #8
 80197f0:	46bd      	mov	sp, r7
 80197f2:	bd80      	pop	{r7, pc}

080197f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197f4:	b580      	push	{r7, lr}
 80197f6:	b082      	sub	sp, #8
 80197f8:	af00      	add	r7, sp, #0
 80197fa:	6078      	str	r0, [r7, #4]
 80197fc:	460b      	mov	r3, r1
 80197fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019806:	78fa      	ldrb	r2, [r7, #3]
 8019808:	4611      	mov	r1, r2
 801980a:	4618      	mov	r0, r3
 801980c:	f7f8 fc90 	bl	8012130 <USBD_LL_IsoOUTIncomplete>
}
 8019810:	bf00      	nop
 8019812:	3708      	adds	r7, #8
 8019814:	46bd      	mov	sp, r7
 8019816:	bd80      	pop	{r7, pc}

08019818 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019818:	b580      	push	{r7, lr}
 801981a:	b082      	sub	sp, #8
 801981c:	af00      	add	r7, sp, #0
 801981e:	6078      	str	r0, [r7, #4]
 8019820:	460b      	mov	r3, r1
 8019822:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801982a:	78fa      	ldrb	r2, [r7, #3]
 801982c:	4611      	mov	r1, r2
 801982e:	4618      	mov	r0, r3
 8019830:	f7f8 fc58 	bl	80120e4 <USBD_LL_IsoINIncomplete>
}
 8019834:	bf00      	nop
 8019836:	3708      	adds	r7, #8
 8019838:	46bd      	mov	sp, r7
 801983a:	bd80      	pop	{r7, pc}

0801983c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801983c:	b580      	push	{r7, lr}
 801983e:	b082      	sub	sp, #8
 8019840:	af00      	add	r7, sp, #0
 8019842:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801984a:	4618      	mov	r0, r3
 801984c:	f7f8 fc96 	bl	801217c <USBD_LL_DevConnected>
}
 8019850:	bf00      	nop
 8019852:	3708      	adds	r7, #8
 8019854:	46bd      	mov	sp, r7
 8019856:	bd80      	pop	{r7, pc}

08019858 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019858:	b580      	push	{r7, lr}
 801985a:	b082      	sub	sp, #8
 801985c:	af00      	add	r7, sp, #0
 801985e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019866:	4618      	mov	r0, r3
 8019868:	f7f8 fc93 	bl	8012192 <USBD_LL_DevDisconnected>
}
 801986c:	bf00      	nop
 801986e:	3708      	adds	r7, #8
 8019870:	46bd      	mov	sp, r7
 8019872:	bd80      	pop	{r7, pc}

08019874 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019874:	b580      	push	{r7, lr}
 8019876:	b082      	sub	sp, #8
 8019878:	af00      	add	r7, sp, #0
 801987a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	781b      	ldrb	r3, [r3, #0]
 8019880:	2b00      	cmp	r3, #0
 8019882:	d13c      	bne.n	80198fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019884:	4a20      	ldr	r2, [pc, #128]	; (8019908 <USBD_LL_Init+0x94>)
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	4a1e      	ldr	r2, [pc, #120]	; (8019908 <USBD_LL_Init+0x94>)
 8019890:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019894:	4b1c      	ldr	r3, [pc, #112]	; (8019908 <USBD_LL_Init+0x94>)
 8019896:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801989a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801989c:	4b1a      	ldr	r3, [pc, #104]	; (8019908 <USBD_LL_Init+0x94>)
 801989e:	2204      	movs	r2, #4
 80198a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80198a2:	4b19      	ldr	r3, [pc, #100]	; (8019908 <USBD_LL_Init+0x94>)
 80198a4:	2202      	movs	r2, #2
 80198a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80198a8:	4b17      	ldr	r3, [pc, #92]	; (8019908 <USBD_LL_Init+0x94>)
 80198aa:	2200      	movs	r2, #0
 80198ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80198ae:	4b16      	ldr	r3, [pc, #88]	; (8019908 <USBD_LL_Init+0x94>)
 80198b0:	2202      	movs	r2, #2
 80198b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80198b4:	4b14      	ldr	r3, [pc, #80]	; (8019908 <USBD_LL_Init+0x94>)
 80198b6:	2200      	movs	r2, #0
 80198b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80198ba:	4b13      	ldr	r3, [pc, #76]	; (8019908 <USBD_LL_Init+0x94>)
 80198bc:	2200      	movs	r2, #0
 80198be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80198c0:	4b11      	ldr	r3, [pc, #68]	; (8019908 <USBD_LL_Init+0x94>)
 80198c2:	2200      	movs	r2, #0
 80198c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80198c6:	4b10      	ldr	r3, [pc, #64]	; (8019908 <USBD_LL_Init+0x94>)
 80198c8:	2201      	movs	r2, #1
 80198ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80198cc:	4b0e      	ldr	r3, [pc, #56]	; (8019908 <USBD_LL_Init+0x94>)
 80198ce:	2200      	movs	r2, #0
 80198d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80198d2:	480d      	ldr	r0, [pc, #52]	; (8019908 <USBD_LL_Init+0x94>)
 80198d4:	f7f1 fb46 	bl	800af64 <HAL_PCD_Init>
 80198d8:	4603      	mov	r3, r0
 80198da:	2b00      	cmp	r3, #0
 80198dc:	d001      	beq.n	80198e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80198de:	f7e8 fb1f 	bl	8001f20 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80198e2:	2180      	movs	r1, #128	; 0x80
 80198e4:	4808      	ldr	r0, [pc, #32]	; (8019908 <USBD_LL_Init+0x94>)
 80198e6:	f7f2 fca4 	bl	800c232 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80198ea:	2240      	movs	r2, #64	; 0x40
 80198ec:	2100      	movs	r1, #0
 80198ee:	4806      	ldr	r0, [pc, #24]	; (8019908 <USBD_LL_Init+0x94>)
 80198f0:	f7f2 fc58 	bl	800c1a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80198f4:	2280      	movs	r2, #128	; 0x80
 80198f6:	2101      	movs	r1, #1
 80198f8:	4803      	ldr	r0, [pc, #12]	; (8019908 <USBD_LL_Init+0x94>)
 80198fa:	f7f2 fc53 	bl	800c1a4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80198fe:	2300      	movs	r3, #0
}
 8019900:	4618      	mov	r0, r3
 8019902:	3708      	adds	r7, #8
 8019904:	46bd      	mov	sp, r7
 8019906:	bd80      	pop	{r7, pc}
 8019908:	20008948 	.word	0x20008948

0801990c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801990c:	b580      	push	{r7, lr}
 801990e:	b084      	sub	sp, #16
 8019910:	af00      	add	r7, sp, #0
 8019912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019914:	2300      	movs	r3, #0
 8019916:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019918:	2300      	movs	r3, #0
 801991a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019922:	4618      	mov	r0, r3
 8019924:	f7f1 fc3b 	bl	800b19e <HAL_PCD_Start>
 8019928:	4603      	mov	r3, r0
 801992a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801992c:	7bfb      	ldrb	r3, [r7, #15]
 801992e:	4618      	mov	r0, r3
 8019930:	f000 f942 	bl	8019bb8 <USBD_Get_USB_Status>
 8019934:	4603      	mov	r3, r0
 8019936:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019938:	7bbb      	ldrb	r3, [r7, #14]
}
 801993a:	4618      	mov	r0, r3
 801993c:	3710      	adds	r7, #16
 801993e:	46bd      	mov	sp, r7
 8019940:	bd80      	pop	{r7, pc}

08019942 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019942:	b580      	push	{r7, lr}
 8019944:	b084      	sub	sp, #16
 8019946:	af00      	add	r7, sp, #0
 8019948:	6078      	str	r0, [r7, #4]
 801994a:	4608      	mov	r0, r1
 801994c:	4611      	mov	r1, r2
 801994e:	461a      	mov	r2, r3
 8019950:	4603      	mov	r3, r0
 8019952:	70fb      	strb	r3, [r7, #3]
 8019954:	460b      	mov	r3, r1
 8019956:	70bb      	strb	r3, [r7, #2]
 8019958:	4613      	mov	r3, r2
 801995a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801995c:	2300      	movs	r3, #0
 801995e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019960:	2300      	movs	r3, #0
 8019962:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801996a:	78bb      	ldrb	r3, [r7, #2]
 801996c:	883a      	ldrh	r2, [r7, #0]
 801996e:	78f9      	ldrb	r1, [r7, #3]
 8019970:	f7f2 f81f 	bl	800b9b2 <HAL_PCD_EP_Open>
 8019974:	4603      	mov	r3, r0
 8019976:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019978:	7bfb      	ldrb	r3, [r7, #15]
 801997a:	4618      	mov	r0, r3
 801997c:	f000 f91c 	bl	8019bb8 <USBD_Get_USB_Status>
 8019980:	4603      	mov	r3, r0
 8019982:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019984:	7bbb      	ldrb	r3, [r7, #14]
}
 8019986:	4618      	mov	r0, r3
 8019988:	3710      	adds	r7, #16
 801998a:	46bd      	mov	sp, r7
 801998c:	bd80      	pop	{r7, pc}

0801998e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801998e:	b580      	push	{r7, lr}
 8019990:	b084      	sub	sp, #16
 8019992:	af00      	add	r7, sp, #0
 8019994:	6078      	str	r0, [r7, #4]
 8019996:	460b      	mov	r3, r1
 8019998:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801999a:	2300      	movs	r3, #0
 801999c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801999e:	2300      	movs	r3, #0
 80199a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80199a8:	78fa      	ldrb	r2, [r7, #3]
 80199aa:	4611      	mov	r1, r2
 80199ac:	4618      	mov	r0, r3
 80199ae:	f7f2 f868 	bl	800ba82 <HAL_PCD_EP_Close>
 80199b2:	4603      	mov	r3, r0
 80199b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80199b6:	7bfb      	ldrb	r3, [r7, #15]
 80199b8:	4618      	mov	r0, r3
 80199ba:	f000 f8fd 	bl	8019bb8 <USBD_Get_USB_Status>
 80199be:	4603      	mov	r3, r0
 80199c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80199c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80199c4:	4618      	mov	r0, r3
 80199c6:	3710      	adds	r7, #16
 80199c8:	46bd      	mov	sp, r7
 80199ca:	bd80      	pop	{r7, pc}

080199cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80199cc:	b580      	push	{r7, lr}
 80199ce:	b084      	sub	sp, #16
 80199d0:	af00      	add	r7, sp, #0
 80199d2:	6078      	str	r0, [r7, #4]
 80199d4:	460b      	mov	r3, r1
 80199d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80199d8:	2300      	movs	r3, #0
 80199da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80199dc:	2300      	movs	r3, #0
 80199de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80199e6:	78fa      	ldrb	r2, [r7, #3]
 80199e8:	4611      	mov	r1, r2
 80199ea:	4618      	mov	r0, r3
 80199ec:	f7f2 f940 	bl	800bc70 <HAL_PCD_EP_SetStall>
 80199f0:	4603      	mov	r3, r0
 80199f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80199f4:	7bfb      	ldrb	r3, [r7, #15]
 80199f6:	4618      	mov	r0, r3
 80199f8:	f000 f8de 	bl	8019bb8 <USBD_Get_USB_Status>
 80199fc:	4603      	mov	r3, r0
 80199fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019a00:	7bbb      	ldrb	r3, [r7, #14]
}
 8019a02:	4618      	mov	r0, r3
 8019a04:	3710      	adds	r7, #16
 8019a06:	46bd      	mov	sp, r7
 8019a08:	bd80      	pop	{r7, pc}

08019a0a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019a0a:	b580      	push	{r7, lr}
 8019a0c:	b084      	sub	sp, #16
 8019a0e:	af00      	add	r7, sp, #0
 8019a10:	6078      	str	r0, [r7, #4]
 8019a12:	460b      	mov	r3, r1
 8019a14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a16:	2300      	movs	r3, #0
 8019a18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a1a:	2300      	movs	r3, #0
 8019a1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019a24:	78fa      	ldrb	r2, [r7, #3]
 8019a26:	4611      	mov	r1, r2
 8019a28:	4618      	mov	r0, r3
 8019a2a:	f7f2 f985 	bl	800bd38 <HAL_PCD_EP_ClrStall>
 8019a2e:	4603      	mov	r3, r0
 8019a30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019a32:	7bfb      	ldrb	r3, [r7, #15]
 8019a34:	4618      	mov	r0, r3
 8019a36:	f000 f8bf 	bl	8019bb8 <USBD_Get_USB_Status>
 8019a3a:	4603      	mov	r3, r0
 8019a3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019a3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019a40:	4618      	mov	r0, r3
 8019a42:	3710      	adds	r7, #16
 8019a44:	46bd      	mov	sp, r7
 8019a46:	bd80      	pop	{r7, pc}

08019a48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019a48:	b480      	push	{r7}
 8019a4a:	b085      	sub	sp, #20
 8019a4c:	af00      	add	r7, sp, #0
 8019a4e:	6078      	str	r0, [r7, #4]
 8019a50:	460b      	mov	r3, r1
 8019a52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019a5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019a5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	da0b      	bge.n	8019a7c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019a64:	78fb      	ldrb	r3, [r7, #3]
 8019a66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019a6a:	68f9      	ldr	r1, [r7, #12]
 8019a6c:	4613      	mov	r3, r2
 8019a6e:	00db      	lsls	r3, r3, #3
 8019a70:	1a9b      	subs	r3, r3, r2
 8019a72:	009b      	lsls	r3, r3, #2
 8019a74:	440b      	add	r3, r1
 8019a76:	333e      	adds	r3, #62	; 0x3e
 8019a78:	781b      	ldrb	r3, [r3, #0]
 8019a7a:	e00b      	b.n	8019a94 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019a7c:	78fb      	ldrb	r3, [r7, #3]
 8019a7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019a82:	68f9      	ldr	r1, [r7, #12]
 8019a84:	4613      	mov	r3, r2
 8019a86:	00db      	lsls	r3, r3, #3
 8019a88:	1a9b      	subs	r3, r3, r2
 8019a8a:	009b      	lsls	r3, r3, #2
 8019a8c:	440b      	add	r3, r1
 8019a8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019a92:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019a94:	4618      	mov	r0, r3
 8019a96:	3714      	adds	r7, #20
 8019a98:	46bd      	mov	sp, r7
 8019a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a9e:	4770      	bx	lr

08019aa0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019aa0:	b580      	push	{r7, lr}
 8019aa2:	b084      	sub	sp, #16
 8019aa4:	af00      	add	r7, sp, #0
 8019aa6:	6078      	str	r0, [r7, #4]
 8019aa8:	460b      	mov	r3, r1
 8019aaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019aac:	2300      	movs	r3, #0
 8019aae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019ab0:	2300      	movs	r3, #0
 8019ab2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019aba:	78fa      	ldrb	r2, [r7, #3]
 8019abc:	4611      	mov	r1, r2
 8019abe:	4618      	mov	r0, r3
 8019ac0:	f7f1 ff52 	bl	800b968 <HAL_PCD_SetAddress>
 8019ac4:	4603      	mov	r3, r0
 8019ac6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019ac8:	7bfb      	ldrb	r3, [r7, #15]
 8019aca:	4618      	mov	r0, r3
 8019acc:	f000 f874 	bl	8019bb8 <USBD_Get_USB_Status>
 8019ad0:	4603      	mov	r3, r0
 8019ad2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019ad4:	7bbb      	ldrb	r3, [r7, #14]
}
 8019ad6:	4618      	mov	r0, r3
 8019ad8:	3710      	adds	r7, #16
 8019ada:	46bd      	mov	sp, r7
 8019adc:	bd80      	pop	{r7, pc}

08019ade <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019ade:	b580      	push	{r7, lr}
 8019ae0:	b086      	sub	sp, #24
 8019ae2:	af00      	add	r7, sp, #0
 8019ae4:	60f8      	str	r0, [r7, #12]
 8019ae6:	607a      	str	r2, [r7, #4]
 8019ae8:	603b      	str	r3, [r7, #0]
 8019aea:	460b      	mov	r3, r1
 8019aec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019aee:	2300      	movs	r3, #0
 8019af0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019af2:	2300      	movs	r3, #0
 8019af4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019af6:	68fb      	ldr	r3, [r7, #12]
 8019af8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019afc:	7af9      	ldrb	r1, [r7, #11]
 8019afe:	683b      	ldr	r3, [r7, #0]
 8019b00:	687a      	ldr	r2, [r7, #4]
 8019b02:	f7f2 f86b 	bl	800bbdc <HAL_PCD_EP_Transmit>
 8019b06:	4603      	mov	r3, r0
 8019b08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019b0a:	7dfb      	ldrb	r3, [r7, #23]
 8019b0c:	4618      	mov	r0, r3
 8019b0e:	f000 f853 	bl	8019bb8 <USBD_Get_USB_Status>
 8019b12:	4603      	mov	r3, r0
 8019b14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019b16:	7dbb      	ldrb	r3, [r7, #22]
}
 8019b18:	4618      	mov	r0, r3
 8019b1a:	3718      	adds	r7, #24
 8019b1c:	46bd      	mov	sp, r7
 8019b1e:	bd80      	pop	{r7, pc}

08019b20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019b20:	b580      	push	{r7, lr}
 8019b22:	b086      	sub	sp, #24
 8019b24:	af00      	add	r7, sp, #0
 8019b26:	60f8      	str	r0, [r7, #12]
 8019b28:	607a      	str	r2, [r7, #4]
 8019b2a:	603b      	str	r3, [r7, #0]
 8019b2c:	460b      	mov	r3, r1
 8019b2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b30:	2300      	movs	r3, #0
 8019b32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b34:	2300      	movs	r3, #0
 8019b36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019b38:	68fb      	ldr	r3, [r7, #12]
 8019b3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019b3e:	7af9      	ldrb	r1, [r7, #11]
 8019b40:	683b      	ldr	r3, [r7, #0]
 8019b42:	687a      	ldr	r2, [r7, #4]
 8019b44:	f7f1 ffe7 	bl	800bb16 <HAL_PCD_EP_Receive>
 8019b48:	4603      	mov	r3, r0
 8019b4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019b4c:	7dfb      	ldrb	r3, [r7, #23]
 8019b4e:	4618      	mov	r0, r3
 8019b50:	f000 f832 	bl	8019bb8 <USBD_Get_USB_Status>
 8019b54:	4603      	mov	r3, r0
 8019b56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019b58:	7dbb      	ldrb	r3, [r7, #22]
}
 8019b5a:	4618      	mov	r0, r3
 8019b5c:	3718      	adds	r7, #24
 8019b5e:	46bd      	mov	sp, r7
 8019b60:	bd80      	pop	{r7, pc}

08019b62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019b62:	b580      	push	{r7, lr}
 8019b64:	b082      	sub	sp, #8
 8019b66:	af00      	add	r7, sp, #0
 8019b68:	6078      	str	r0, [r7, #4]
 8019b6a:	460b      	mov	r3, r1
 8019b6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019b74:	78fa      	ldrb	r2, [r7, #3]
 8019b76:	4611      	mov	r1, r2
 8019b78:	4618      	mov	r0, r3
 8019b7a:	f7f2 f817 	bl	800bbac <HAL_PCD_EP_GetRxCount>
 8019b7e:	4603      	mov	r3, r0
}
 8019b80:	4618      	mov	r0, r3
 8019b82:	3708      	adds	r7, #8
 8019b84:	46bd      	mov	sp, r7
 8019b86:	bd80      	pop	{r7, pc}

08019b88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019b88:	b480      	push	{r7}
 8019b8a:	b083      	sub	sp, #12
 8019b8c:	af00      	add	r7, sp, #0
 8019b8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019b90:	4b03      	ldr	r3, [pc, #12]	; (8019ba0 <USBD_static_malloc+0x18>)
}
 8019b92:	4618      	mov	r0, r3
 8019b94:	370c      	adds	r7, #12
 8019b96:	46bd      	mov	sp, r7
 8019b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b9c:	4770      	bx	lr
 8019b9e:	bf00      	nop
 8019ba0:	20005c98 	.word	0x20005c98

08019ba4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019ba4:	b480      	push	{r7}
 8019ba6:	b083      	sub	sp, #12
 8019ba8:	af00      	add	r7, sp, #0
 8019baa:	6078      	str	r0, [r7, #4]

}
 8019bac:	bf00      	nop
 8019bae:	370c      	adds	r7, #12
 8019bb0:	46bd      	mov	sp, r7
 8019bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bb6:	4770      	bx	lr

08019bb8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019bb8:	b480      	push	{r7}
 8019bba:	b085      	sub	sp, #20
 8019bbc:	af00      	add	r7, sp, #0
 8019bbe:	4603      	mov	r3, r0
 8019bc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019bc2:	2300      	movs	r3, #0
 8019bc4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019bc6:	79fb      	ldrb	r3, [r7, #7]
 8019bc8:	2b03      	cmp	r3, #3
 8019bca:	d817      	bhi.n	8019bfc <USBD_Get_USB_Status+0x44>
 8019bcc:	a201      	add	r2, pc, #4	; (adr r2, 8019bd4 <USBD_Get_USB_Status+0x1c>)
 8019bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019bd2:	bf00      	nop
 8019bd4:	08019be5 	.word	0x08019be5
 8019bd8:	08019beb 	.word	0x08019beb
 8019bdc:	08019bf1 	.word	0x08019bf1
 8019be0:	08019bf7 	.word	0x08019bf7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019be4:	2300      	movs	r3, #0
 8019be6:	73fb      	strb	r3, [r7, #15]
    break;
 8019be8:	e00b      	b.n	8019c02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019bea:	2303      	movs	r3, #3
 8019bec:	73fb      	strb	r3, [r7, #15]
    break;
 8019bee:	e008      	b.n	8019c02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019bf0:	2301      	movs	r3, #1
 8019bf2:	73fb      	strb	r3, [r7, #15]
    break;
 8019bf4:	e005      	b.n	8019c02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019bf6:	2303      	movs	r3, #3
 8019bf8:	73fb      	strb	r3, [r7, #15]
    break;
 8019bfa:	e002      	b.n	8019c02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019bfc:	2303      	movs	r3, #3
 8019bfe:	73fb      	strb	r3, [r7, #15]
    break;
 8019c00:	bf00      	nop
  }
  return usb_status;
 8019c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c04:	4618      	mov	r0, r3
 8019c06:	3714      	adds	r7, #20
 8019c08:	46bd      	mov	sp, r7
 8019c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c0e:	4770      	bx	lr

08019c10 <_Znwj>:
 8019c10:	2801      	cmp	r0, #1
 8019c12:	bf38      	it	cc
 8019c14:	2001      	movcc	r0, #1
 8019c16:	b510      	push	{r4, lr}
 8019c18:	4604      	mov	r4, r0
 8019c1a:	4620      	mov	r0, r4
 8019c1c:	f000 fa82 	bl	801a124 <malloc>
 8019c20:	b930      	cbnz	r0, 8019c30 <_Znwj+0x20>
 8019c22:	f000 f81d 	bl	8019c60 <_ZSt15get_new_handlerv>
 8019c26:	b908      	cbnz	r0, 8019c2c <_Znwj+0x1c>
 8019c28:	f000 f82a 	bl	8019c80 <abort>
 8019c2c:	4780      	blx	r0
 8019c2e:	e7f4      	b.n	8019c1a <_Znwj+0xa>
 8019c30:	bd10      	pop	{r4, pc}

08019c32 <_Znaj>:
 8019c32:	f7ff bfed 	b.w	8019c10 <_Znwj>

08019c36 <__cxa_pure_virtual>:
 8019c36:	b508      	push	{r3, lr}
 8019c38:	f000 f80c 	bl	8019c54 <_ZSt9terminatev>

08019c3c <_ZN10__cxxabiv111__terminateEPFvvE>:
 8019c3c:	b508      	push	{r3, lr}
 8019c3e:	4780      	blx	r0
 8019c40:	f000 f81e 	bl	8019c80 <abort>

08019c44 <_ZSt13get_terminatev>:
 8019c44:	4b02      	ldr	r3, [pc, #8]	; (8019c50 <_ZSt13get_terminatev+0xc>)
 8019c46:	6818      	ldr	r0, [r3, #0]
 8019c48:	f3bf 8f5b 	dmb	ish
 8019c4c:	4770      	bx	lr
 8019c4e:	bf00      	nop
 8019c50:	200001f8 	.word	0x200001f8

08019c54 <_ZSt9terminatev>:
 8019c54:	b508      	push	{r3, lr}
 8019c56:	f7ff fff5 	bl	8019c44 <_ZSt13get_terminatev>
 8019c5a:	f7ff ffef 	bl	8019c3c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08019c60 <_ZSt15get_new_handlerv>:
 8019c60:	4b02      	ldr	r3, [pc, #8]	; (8019c6c <_ZSt15get_new_handlerv+0xc>)
 8019c62:	6818      	ldr	r0, [r3, #0]
 8019c64:	f3bf 8f5b 	dmb	ish
 8019c68:	4770      	bx	lr
 8019c6a:	bf00      	nop
 8019c6c:	20005eb8 	.word	0x20005eb8

08019c70 <nan>:
 8019c70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019c78 <nan+0x8>
 8019c74:	4770      	bx	lr
 8019c76:	bf00      	nop
 8019c78:	00000000 	.word	0x00000000
 8019c7c:	7ff80000 	.word	0x7ff80000

08019c80 <abort>:
 8019c80:	b508      	push	{r3, lr}
 8019c82:	2006      	movs	r0, #6
 8019c84:	f001 fd66 	bl	801b754 <raise>
 8019c88:	2001      	movs	r0, #1
 8019c8a:	f006 f983 	bl	801ff94 <_exit>

08019c8e <atoi>:
 8019c8e:	220a      	movs	r2, #10
 8019c90:	2100      	movs	r1, #0
 8019c92:	f002 bd43 	b.w	801c71c <strtol>

08019c96 <atol>:
 8019c96:	220a      	movs	r2, #10
 8019c98:	2100      	movs	r1, #0
 8019c9a:	f002 bd3f 	b.w	801c71c <strtol>
	...

08019ca0 <__errno>:
 8019ca0:	4b01      	ldr	r3, [pc, #4]	; (8019ca8 <__errno+0x8>)
 8019ca2:	6818      	ldr	r0, [r3, #0]
 8019ca4:	4770      	bx	lr
 8019ca6:	bf00      	nop
 8019ca8:	200001fc 	.word	0x200001fc

08019cac <std>:
 8019cac:	2300      	movs	r3, #0
 8019cae:	b510      	push	{r4, lr}
 8019cb0:	4604      	mov	r4, r0
 8019cb2:	e9c0 3300 	strd	r3, r3, [r0]
 8019cb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019cba:	6083      	str	r3, [r0, #8]
 8019cbc:	8181      	strh	r1, [r0, #12]
 8019cbe:	6643      	str	r3, [r0, #100]	; 0x64
 8019cc0:	81c2      	strh	r2, [r0, #14]
 8019cc2:	6183      	str	r3, [r0, #24]
 8019cc4:	4619      	mov	r1, r3
 8019cc6:	2208      	movs	r2, #8
 8019cc8:	305c      	adds	r0, #92	; 0x5c
 8019cca:	f000 fa63 	bl	801a194 <memset>
 8019cce:	4b05      	ldr	r3, [pc, #20]	; (8019ce4 <std+0x38>)
 8019cd0:	6263      	str	r3, [r4, #36]	; 0x24
 8019cd2:	4b05      	ldr	r3, [pc, #20]	; (8019ce8 <std+0x3c>)
 8019cd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8019cd6:	4b05      	ldr	r3, [pc, #20]	; (8019cec <std+0x40>)
 8019cd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019cda:	4b05      	ldr	r3, [pc, #20]	; (8019cf0 <std+0x44>)
 8019cdc:	6224      	str	r4, [r4, #32]
 8019cde:	6323      	str	r3, [r4, #48]	; 0x30
 8019ce0:	bd10      	pop	{r4, pc}
 8019ce2:	bf00      	nop
 8019ce4:	0801b825 	.word	0x0801b825
 8019ce8:	0801b84b 	.word	0x0801b84b
 8019cec:	0801b883 	.word	0x0801b883
 8019cf0:	0801b8a7 	.word	0x0801b8a7

08019cf4 <_cleanup_r>:
 8019cf4:	4901      	ldr	r1, [pc, #4]	; (8019cfc <_cleanup_r+0x8>)
 8019cf6:	f000 b8af 	b.w	8019e58 <_fwalk_reent>
 8019cfa:	bf00      	nop
 8019cfc:	0801dd45 	.word	0x0801dd45

08019d00 <__sfmoreglue>:
 8019d00:	b570      	push	{r4, r5, r6, lr}
 8019d02:	1e4a      	subs	r2, r1, #1
 8019d04:	2568      	movs	r5, #104	; 0x68
 8019d06:	4355      	muls	r5, r2
 8019d08:	460e      	mov	r6, r1
 8019d0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019d0e:	f000 fd17 	bl	801a740 <_malloc_r>
 8019d12:	4604      	mov	r4, r0
 8019d14:	b140      	cbz	r0, 8019d28 <__sfmoreglue+0x28>
 8019d16:	2100      	movs	r1, #0
 8019d18:	e9c0 1600 	strd	r1, r6, [r0]
 8019d1c:	300c      	adds	r0, #12
 8019d1e:	60a0      	str	r0, [r4, #8]
 8019d20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019d24:	f000 fa36 	bl	801a194 <memset>
 8019d28:	4620      	mov	r0, r4
 8019d2a:	bd70      	pop	{r4, r5, r6, pc}

08019d2c <__sfp_lock_acquire>:
 8019d2c:	4801      	ldr	r0, [pc, #4]	; (8019d34 <__sfp_lock_acquire+0x8>)
 8019d2e:	f000 b9f5 	b.w	801a11c <__retarget_lock_acquire_recursive>
 8019d32:	bf00      	nop
 8019d34:	20008d58 	.word	0x20008d58

08019d38 <__sfp_lock_release>:
 8019d38:	4801      	ldr	r0, [pc, #4]	; (8019d40 <__sfp_lock_release+0x8>)
 8019d3a:	f000 b9f1 	b.w	801a120 <__retarget_lock_release_recursive>
 8019d3e:	bf00      	nop
 8019d40:	20008d58 	.word	0x20008d58

08019d44 <__sinit_lock_acquire>:
 8019d44:	4801      	ldr	r0, [pc, #4]	; (8019d4c <__sinit_lock_acquire+0x8>)
 8019d46:	f000 b9e9 	b.w	801a11c <__retarget_lock_acquire_recursive>
 8019d4a:	bf00      	nop
 8019d4c:	20008d53 	.word	0x20008d53

08019d50 <__sinit_lock_release>:
 8019d50:	4801      	ldr	r0, [pc, #4]	; (8019d58 <__sinit_lock_release+0x8>)
 8019d52:	f000 b9e5 	b.w	801a120 <__retarget_lock_release_recursive>
 8019d56:	bf00      	nop
 8019d58:	20008d53 	.word	0x20008d53

08019d5c <__sinit>:
 8019d5c:	b510      	push	{r4, lr}
 8019d5e:	4604      	mov	r4, r0
 8019d60:	f7ff fff0 	bl	8019d44 <__sinit_lock_acquire>
 8019d64:	69a3      	ldr	r3, [r4, #24]
 8019d66:	b11b      	cbz	r3, 8019d70 <__sinit+0x14>
 8019d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d6c:	f7ff bff0 	b.w	8019d50 <__sinit_lock_release>
 8019d70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019d74:	6523      	str	r3, [r4, #80]	; 0x50
 8019d76:	4b13      	ldr	r3, [pc, #76]	; (8019dc4 <__sinit+0x68>)
 8019d78:	4a13      	ldr	r2, [pc, #76]	; (8019dc8 <__sinit+0x6c>)
 8019d7a:	681b      	ldr	r3, [r3, #0]
 8019d7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8019d7e:	42a3      	cmp	r3, r4
 8019d80:	bf04      	itt	eq
 8019d82:	2301      	moveq	r3, #1
 8019d84:	61a3      	streq	r3, [r4, #24]
 8019d86:	4620      	mov	r0, r4
 8019d88:	f000 f820 	bl	8019dcc <__sfp>
 8019d8c:	6060      	str	r0, [r4, #4]
 8019d8e:	4620      	mov	r0, r4
 8019d90:	f000 f81c 	bl	8019dcc <__sfp>
 8019d94:	60a0      	str	r0, [r4, #8]
 8019d96:	4620      	mov	r0, r4
 8019d98:	f000 f818 	bl	8019dcc <__sfp>
 8019d9c:	2200      	movs	r2, #0
 8019d9e:	60e0      	str	r0, [r4, #12]
 8019da0:	2104      	movs	r1, #4
 8019da2:	6860      	ldr	r0, [r4, #4]
 8019da4:	f7ff ff82 	bl	8019cac <std>
 8019da8:	68a0      	ldr	r0, [r4, #8]
 8019daa:	2201      	movs	r2, #1
 8019dac:	2109      	movs	r1, #9
 8019dae:	f7ff ff7d 	bl	8019cac <std>
 8019db2:	68e0      	ldr	r0, [r4, #12]
 8019db4:	2202      	movs	r2, #2
 8019db6:	2112      	movs	r1, #18
 8019db8:	f7ff ff78 	bl	8019cac <std>
 8019dbc:	2301      	movs	r3, #1
 8019dbe:	61a3      	str	r3, [r4, #24]
 8019dc0:	e7d2      	b.n	8019d68 <__sinit+0xc>
 8019dc2:	bf00      	nop
 8019dc4:	080220c4 	.word	0x080220c4
 8019dc8:	08019cf5 	.word	0x08019cf5

08019dcc <__sfp>:
 8019dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019dce:	4607      	mov	r7, r0
 8019dd0:	f7ff ffac 	bl	8019d2c <__sfp_lock_acquire>
 8019dd4:	4b1e      	ldr	r3, [pc, #120]	; (8019e50 <__sfp+0x84>)
 8019dd6:	681e      	ldr	r6, [r3, #0]
 8019dd8:	69b3      	ldr	r3, [r6, #24]
 8019dda:	b913      	cbnz	r3, 8019de2 <__sfp+0x16>
 8019ddc:	4630      	mov	r0, r6
 8019dde:	f7ff ffbd 	bl	8019d5c <__sinit>
 8019de2:	3648      	adds	r6, #72	; 0x48
 8019de4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019de8:	3b01      	subs	r3, #1
 8019dea:	d503      	bpl.n	8019df4 <__sfp+0x28>
 8019dec:	6833      	ldr	r3, [r6, #0]
 8019dee:	b30b      	cbz	r3, 8019e34 <__sfp+0x68>
 8019df0:	6836      	ldr	r6, [r6, #0]
 8019df2:	e7f7      	b.n	8019de4 <__sfp+0x18>
 8019df4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019df8:	b9d5      	cbnz	r5, 8019e30 <__sfp+0x64>
 8019dfa:	4b16      	ldr	r3, [pc, #88]	; (8019e54 <__sfp+0x88>)
 8019dfc:	60e3      	str	r3, [r4, #12]
 8019dfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019e02:	6665      	str	r5, [r4, #100]	; 0x64
 8019e04:	f000 f988 	bl	801a118 <__retarget_lock_init_recursive>
 8019e08:	f7ff ff96 	bl	8019d38 <__sfp_lock_release>
 8019e0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019e10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019e14:	6025      	str	r5, [r4, #0]
 8019e16:	61a5      	str	r5, [r4, #24]
 8019e18:	2208      	movs	r2, #8
 8019e1a:	4629      	mov	r1, r5
 8019e1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019e20:	f000 f9b8 	bl	801a194 <memset>
 8019e24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019e28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019e2c:	4620      	mov	r0, r4
 8019e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e30:	3468      	adds	r4, #104	; 0x68
 8019e32:	e7d9      	b.n	8019de8 <__sfp+0x1c>
 8019e34:	2104      	movs	r1, #4
 8019e36:	4638      	mov	r0, r7
 8019e38:	f7ff ff62 	bl	8019d00 <__sfmoreglue>
 8019e3c:	4604      	mov	r4, r0
 8019e3e:	6030      	str	r0, [r6, #0]
 8019e40:	2800      	cmp	r0, #0
 8019e42:	d1d5      	bne.n	8019df0 <__sfp+0x24>
 8019e44:	f7ff ff78 	bl	8019d38 <__sfp_lock_release>
 8019e48:	230c      	movs	r3, #12
 8019e4a:	603b      	str	r3, [r7, #0]
 8019e4c:	e7ee      	b.n	8019e2c <__sfp+0x60>
 8019e4e:	bf00      	nop
 8019e50:	080220c4 	.word	0x080220c4
 8019e54:	ffff0001 	.word	0xffff0001

08019e58 <_fwalk_reent>:
 8019e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e5c:	4606      	mov	r6, r0
 8019e5e:	4688      	mov	r8, r1
 8019e60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019e64:	2700      	movs	r7, #0
 8019e66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019e6a:	f1b9 0901 	subs.w	r9, r9, #1
 8019e6e:	d505      	bpl.n	8019e7c <_fwalk_reent+0x24>
 8019e70:	6824      	ldr	r4, [r4, #0]
 8019e72:	2c00      	cmp	r4, #0
 8019e74:	d1f7      	bne.n	8019e66 <_fwalk_reent+0xe>
 8019e76:	4638      	mov	r0, r7
 8019e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e7c:	89ab      	ldrh	r3, [r5, #12]
 8019e7e:	2b01      	cmp	r3, #1
 8019e80:	d907      	bls.n	8019e92 <_fwalk_reent+0x3a>
 8019e82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019e86:	3301      	adds	r3, #1
 8019e88:	d003      	beq.n	8019e92 <_fwalk_reent+0x3a>
 8019e8a:	4629      	mov	r1, r5
 8019e8c:	4630      	mov	r0, r6
 8019e8e:	47c0      	blx	r8
 8019e90:	4307      	orrs	r7, r0
 8019e92:	3568      	adds	r5, #104	; 0x68
 8019e94:	e7e9      	b.n	8019e6a <_fwalk_reent+0x12>
	...

08019e98 <__libc_init_array>:
 8019e98:	b570      	push	{r4, r5, r6, lr}
 8019e9a:	4d0d      	ldr	r5, [pc, #52]	; (8019ed0 <__libc_init_array+0x38>)
 8019e9c:	4c0d      	ldr	r4, [pc, #52]	; (8019ed4 <__libc_init_array+0x3c>)
 8019e9e:	1b64      	subs	r4, r4, r5
 8019ea0:	10a4      	asrs	r4, r4, #2
 8019ea2:	2600      	movs	r6, #0
 8019ea4:	42a6      	cmp	r6, r4
 8019ea6:	d109      	bne.n	8019ebc <__libc_init_array+0x24>
 8019ea8:	4d0b      	ldr	r5, [pc, #44]	; (8019ed8 <__libc_init_array+0x40>)
 8019eaa:	4c0c      	ldr	r4, [pc, #48]	; (8019edc <__libc_init_array+0x44>)
 8019eac:	f006 f874 	bl	801ff98 <_init>
 8019eb0:	1b64      	subs	r4, r4, r5
 8019eb2:	10a4      	asrs	r4, r4, #2
 8019eb4:	2600      	movs	r6, #0
 8019eb6:	42a6      	cmp	r6, r4
 8019eb8:	d105      	bne.n	8019ec6 <__libc_init_array+0x2e>
 8019eba:	bd70      	pop	{r4, r5, r6, pc}
 8019ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8019ec0:	4798      	blx	r3
 8019ec2:	3601      	adds	r6, #1
 8019ec4:	e7ee      	b.n	8019ea4 <__libc_init_array+0xc>
 8019ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8019eca:	4798      	blx	r3
 8019ecc:	3601      	adds	r6, #1
 8019ece:	e7f2      	b.n	8019eb6 <__libc_init_array+0x1e>
 8019ed0:	080225f0 	.word	0x080225f0
 8019ed4:	080225f0 	.word	0x080225f0
 8019ed8:	080225f0 	.word	0x080225f0
 8019edc:	080225f8 	.word	0x080225f8

08019ee0 <isxdigit>:
 8019ee0:	4b02      	ldr	r3, [pc, #8]	; (8019eec <isxdigit+0xc>)
 8019ee2:	4418      	add	r0, r3
 8019ee4:	7840      	ldrb	r0, [r0, #1]
 8019ee6:	f000 0044 	and.w	r0, r0, #68	; 0x44
 8019eea:	4770      	bx	lr
 8019eec:	08021f60 	.word	0x08021f60

08019ef0 <localtime>:
 8019ef0:	b538      	push	{r3, r4, r5, lr}
 8019ef2:	4b0b      	ldr	r3, [pc, #44]	; (8019f20 <localtime+0x30>)
 8019ef4:	681d      	ldr	r5, [r3, #0]
 8019ef6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8019ef8:	4604      	mov	r4, r0
 8019efa:	b953      	cbnz	r3, 8019f12 <localtime+0x22>
 8019efc:	2024      	movs	r0, #36	; 0x24
 8019efe:	f000 f911 	bl	801a124 <malloc>
 8019f02:	4602      	mov	r2, r0
 8019f04:	63e8      	str	r0, [r5, #60]	; 0x3c
 8019f06:	b920      	cbnz	r0, 8019f12 <localtime+0x22>
 8019f08:	4b06      	ldr	r3, [pc, #24]	; (8019f24 <localtime+0x34>)
 8019f0a:	4807      	ldr	r0, [pc, #28]	; (8019f28 <localtime+0x38>)
 8019f0c:	2132      	movs	r1, #50	; 0x32
 8019f0e:	f002 ffd9 	bl	801cec4 <__assert_func>
 8019f12:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8019f14:	4620      	mov	r0, r4
 8019f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019f1a:	f000 b807 	b.w	8019f2c <localtime_r>
 8019f1e:	bf00      	nop
 8019f20:	200001fc 	.word	0x200001fc
 8019f24:	080220c8 	.word	0x080220c8
 8019f28:	080220df 	.word	0x080220df

08019f2c <localtime_r>:
 8019f2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019f30:	4607      	mov	r7, r0
 8019f32:	9101      	str	r1, [sp, #4]
 8019f34:	f004 fb06 	bl	801e544 <__gettzinfo>
 8019f38:	9901      	ldr	r1, [sp, #4]
 8019f3a:	4680      	mov	r8, r0
 8019f3c:	4638      	mov	r0, r7
 8019f3e:	f004 fb05 	bl	801e54c <gmtime_r>
 8019f42:	6943      	ldr	r3, [r0, #20]
 8019f44:	079a      	lsls	r2, r3, #30
 8019f46:	4604      	mov	r4, r0
 8019f48:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8019f4c:	d105      	bne.n	8019f5a <localtime_r+0x2e>
 8019f4e:	2264      	movs	r2, #100	; 0x64
 8019f50:	fb96 f3f2 	sdiv	r3, r6, r2
 8019f54:	fb02 6313 	mls	r3, r2, r3, r6
 8019f58:	bb7b      	cbnz	r3, 8019fba <localtime_r+0x8e>
 8019f5a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8019f5e:	fb96 f5f3 	sdiv	r5, r6, r3
 8019f62:	fb03 6515 	mls	r5, r3, r5, r6
 8019f66:	fab5 f585 	clz	r5, r5
 8019f6a:	096d      	lsrs	r5, r5, #5
 8019f6c:	4b68      	ldr	r3, [pc, #416]	; (801a110 <localtime_r+0x1e4>)
 8019f6e:	2230      	movs	r2, #48	; 0x30
 8019f70:	fb02 3505 	mla	r5, r2, r5, r3
 8019f74:	f002 fd0c 	bl	801c990 <__tz_lock>
 8019f78:	f002 fd16 	bl	801c9a8 <_tzset_unlocked>
 8019f7c:	4b65      	ldr	r3, [pc, #404]	; (801a114 <localtime_r+0x1e8>)
 8019f7e:	681b      	ldr	r3, [r3, #0]
 8019f80:	b353      	cbz	r3, 8019fd8 <localtime_r+0xac>
 8019f82:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019f86:	42b3      	cmp	r3, r6
 8019f88:	d119      	bne.n	8019fbe <localtime_r+0x92>
 8019f8a:	f8d8 1000 	ldr.w	r1, [r8]
 8019f8e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8019f92:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8019f96:	b9d1      	cbnz	r1, 8019fce <localtime_r+0xa2>
 8019f98:	4296      	cmp	r6, r2
 8019f9a:	eb77 0303 	sbcs.w	r3, r7, r3
 8019f9e:	da23      	bge.n	8019fe8 <localtime_r+0xbc>
 8019fa0:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8019fa4:	4296      	cmp	r6, r2
 8019fa6:	eb77 0303 	sbcs.w	r3, r7, r3
 8019faa:	bfb4      	ite	lt
 8019fac:	2301      	movlt	r3, #1
 8019fae:	2300      	movge	r3, #0
 8019fb0:	6223      	str	r3, [r4, #32]
 8019fb2:	db1b      	blt.n	8019fec <localtime_r+0xc0>
 8019fb4:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8019fb8:	e01a      	b.n	8019ff0 <localtime_r+0xc4>
 8019fba:	2501      	movs	r5, #1
 8019fbc:	e7d6      	b.n	8019f6c <localtime_r+0x40>
 8019fbe:	4630      	mov	r0, r6
 8019fc0:	f002 fc3e 	bl	801c840 <__tzcalc_limits>
 8019fc4:	2800      	cmp	r0, #0
 8019fc6:	d1e0      	bne.n	8019f8a <localtime_r+0x5e>
 8019fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8019fcc:	e004      	b.n	8019fd8 <localtime_r+0xac>
 8019fce:	4296      	cmp	r6, r2
 8019fd0:	eb77 0303 	sbcs.w	r3, r7, r3
 8019fd4:	da02      	bge.n	8019fdc <localtime_r+0xb0>
 8019fd6:	2300      	movs	r3, #0
 8019fd8:	6223      	str	r3, [r4, #32]
 8019fda:	e7eb      	b.n	8019fb4 <localtime_r+0x88>
 8019fdc:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8019fe0:	4296      	cmp	r6, r2
 8019fe2:	eb77 0303 	sbcs.w	r3, r7, r3
 8019fe6:	daf6      	bge.n	8019fd6 <localtime_r+0xaa>
 8019fe8:	2301      	movs	r3, #1
 8019fea:	6223      	str	r3, [r4, #32]
 8019fec:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8019ff0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8019ff4:	203c      	movs	r0, #60	; 0x3c
 8019ff6:	fb91 f6f3 	sdiv	r6, r1, r3
 8019ffa:	fb03 1316 	mls	r3, r3, r6, r1
 8019ffe:	6861      	ldr	r1, [r4, #4]
 801a000:	fb93 f2f0 	sdiv	r2, r3, r0
 801a004:	fb00 3012 	mls	r0, r0, r2, r3
 801a008:	6823      	ldr	r3, [r4, #0]
 801a00a:	1a89      	subs	r1, r1, r2
 801a00c:	68a2      	ldr	r2, [r4, #8]
 801a00e:	6061      	str	r1, [r4, #4]
 801a010:	1a1b      	subs	r3, r3, r0
 801a012:	1b92      	subs	r2, r2, r6
 801a014:	2b3b      	cmp	r3, #59	; 0x3b
 801a016:	6023      	str	r3, [r4, #0]
 801a018:	60a2      	str	r2, [r4, #8]
 801a01a:	dd35      	ble.n	801a088 <localtime_r+0x15c>
 801a01c:	3101      	adds	r1, #1
 801a01e:	6061      	str	r1, [r4, #4]
 801a020:	3b3c      	subs	r3, #60	; 0x3c
 801a022:	6023      	str	r3, [r4, #0]
 801a024:	6863      	ldr	r3, [r4, #4]
 801a026:	2b3b      	cmp	r3, #59	; 0x3b
 801a028:	dd34      	ble.n	801a094 <localtime_r+0x168>
 801a02a:	3201      	adds	r2, #1
 801a02c:	60a2      	str	r2, [r4, #8]
 801a02e:	3b3c      	subs	r3, #60	; 0x3c
 801a030:	6063      	str	r3, [r4, #4]
 801a032:	68a3      	ldr	r3, [r4, #8]
 801a034:	2b17      	cmp	r3, #23
 801a036:	dd33      	ble.n	801a0a0 <localtime_r+0x174>
 801a038:	69e2      	ldr	r2, [r4, #28]
 801a03a:	3201      	adds	r2, #1
 801a03c:	61e2      	str	r2, [r4, #28]
 801a03e:	69a2      	ldr	r2, [r4, #24]
 801a040:	3201      	adds	r2, #1
 801a042:	2a06      	cmp	r2, #6
 801a044:	bfc8      	it	gt
 801a046:	2200      	movgt	r2, #0
 801a048:	61a2      	str	r2, [r4, #24]
 801a04a:	68e2      	ldr	r2, [r4, #12]
 801a04c:	3b18      	subs	r3, #24
 801a04e:	3201      	adds	r2, #1
 801a050:	60a3      	str	r3, [r4, #8]
 801a052:	6923      	ldr	r3, [r4, #16]
 801a054:	60e2      	str	r2, [r4, #12]
 801a056:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801a05a:	428a      	cmp	r2, r1
 801a05c:	dd0e      	ble.n	801a07c <localtime_r+0x150>
 801a05e:	2b0b      	cmp	r3, #11
 801a060:	eba2 0201 	sub.w	r2, r2, r1
 801a064:	60e2      	str	r2, [r4, #12]
 801a066:	f103 0201 	add.w	r2, r3, #1
 801a06a:	bf09      	itett	eq
 801a06c:	6963      	ldreq	r3, [r4, #20]
 801a06e:	6122      	strne	r2, [r4, #16]
 801a070:	2200      	moveq	r2, #0
 801a072:	3301      	addeq	r3, #1
 801a074:	bf02      	ittt	eq
 801a076:	6122      	streq	r2, [r4, #16]
 801a078:	6163      	streq	r3, [r4, #20]
 801a07a:	61e2      	streq	r2, [r4, #28]
 801a07c:	f002 fc8e 	bl	801c99c <__tz_unlock>
 801a080:	4620      	mov	r0, r4
 801a082:	b002      	add	sp, #8
 801a084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a088:	2b00      	cmp	r3, #0
 801a08a:	dacb      	bge.n	801a024 <localtime_r+0xf8>
 801a08c:	3901      	subs	r1, #1
 801a08e:	6061      	str	r1, [r4, #4]
 801a090:	333c      	adds	r3, #60	; 0x3c
 801a092:	e7c6      	b.n	801a022 <localtime_r+0xf6>
 801a094:	2b00      	cmp	r3, #0
 801a096:	dacc      	bge.n	801a032 <localtime_r+0x106>
 801a098:	3a01      	subs	r2, #1
 801a09a:	60a2      	str	r2, [r4, #8]
 801a09c:	333c      	adds	r3, #60	; 0x3c
 801a09e:	e7c7      	b.n	801a030 <localtime_r+0x104>
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	daeb      	bge.n	801a07c <localtime_r+0x150>
 801a0a4:	69e2      	ldr	r2, [r4, #28]
 801a0a6:	3a01      	subs	r2, #1
 801a0a8:	61e2      	str	r2, [r4, #28]
 801a0aa:	69a2      	ldr	r2, [r4, #24]
 801a0ac:	3a01      	subs	r2, #1
 801a0ae:	bf48      	it	mi
 801a0b0:	2206      	movmi	r2, #6
 801a0b2:	61a2      	str	r2, [r4, #24]
 801a0b4:	68e2      	ldr	r2, [r4, #12]
 801a0b6:	3318      	adds	r3, #24
 801a0b8:	3a01      	subs	r2, #1
 801a0ba:	60e2      	str	r2, [r4, #12]
 801a0bc:	60a3      	str	r3, [r4, #8]
 801a0be:	2a00      	cmp	r2, #0
 801a0c0:	d1dc      	bne.n	801a07c <localtime_r+0x150>
 801a0c2:	6923      	ldr	r3, [r4, #16]
 801a0c4:	3b01      	subs	r3, #1
 801a0c6:	d405      	bmi.n	801a0d4 <localtime_r+0x1a8>
 801a0c8:	6123      	str	r3, [r4, #16]
 801a0ca:	6923      	ldr	r3, [r4, #16]
 801a0cc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801a0d0:	60e3      	str	r3, [r4, #12]
 801a0d2:	e7d3      	b.n	801a07c <localtime_r+0x150>
 801a0d4:	230b      	movs	r3, #11
 801a0d6:	6123      	str	r3, [r4, #16]
 801a0d8:	6963      	ldr	r3, [r4, #20]
 801a0da:	1e5a      	subs	r2, r3, #1
 801a0dc:	6162      	str	r2, [r4, #20]
 801a0de:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801a0e2:	0793      	lsls	r3, r2, #30
 801a0e4:	d105      	bne.n	801a0f2 <localtime_r+0x1c6>
 801a0e6:	2164      	movs	r1, #100	; 0x64
 801a0e8:	fb92 f3f1 	sdiv	r3, r2, r1
 801a0ec:	fb01 2313 	mls	r3, r1, r3, r2
 801a0f0:	b963      	cbnz	r3, 801a10c <localtime_r+0x1e0>
 801a0f2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801a0f6:	fb92 f3f1 	sdiv	r3, r2, r1
 801a0fa:	fb01 2313 	mls	r3, r1, r3, r2
 801a0fe:	fab3 f383 	clz	r3, r3
 801a102:	095b      	lsrs	r3, r3, #5
 801a104:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801a108:	61e3      	str	r3, [r4, #28]
 801a10a:	e7de      	b.n	801a0ca <localtime_r+0x19e>
 801a10c:	2301      	movs	r3, #1
 801a10e:	e7f9      	b.n	801a104 <localtime_r+0x1d8>
 801a110:	080221a0 	.word	0x080221a0
 801a114:	20005ee0 	.word	0x20005ee0

0801a118 <__retarget_lock_init_recursive>:
 801a118:	4770      	bx	lr

0801a11a <__retarget_lock_acquire>:
 801a11a:	4770      	bx	lr

0801a11c <__retarget_lock_acquire_recursive>:
 801a11c:	4770      	bx	lr

0801a11e <__retarget_lock_release>:
 801a11e:	4770      	bx	lr

0801a120 <__retarget_lock_release_recursive>:
 801a120:	4770      	bx	lr
	...

0801a124 <malloc>:
 801a124:	4b02      	ldr	r3, [pc, #8]	; (801a130 <malloc+0xc>)
 801a126:	4601      	mov	r1, r0
 801a128:	6818      	ldr	r0, [r3, #0]
 801a12a:	f000 bb09 	b.w	801a740 <_malloc_r>
 801a12e:	bf00      	nop
 801a130:	200001fc 	.word	0x200001fc

0801a134 <free>:
 801a134:	4b02      	ldr	r3, [pc, #8]	; (801a140 <free+0xc>)
 801a136:	4601      	mov	r1, r0
 801a138:	6818      	ldr	r0, [r3, #0]
 801a13a:	f000 bab1 	b.w	801a6a0 <_free_r>
 801a13e:	bf00      	nop
 801a140:	200001fc 	.word	0x200001fc

0801a144 <memcpy>:
 801a144:	440a      	add	r2, r1
 801a146:	4291      	cmp	r1, r2
 801a148:	f100 33ff 	add.w	r3, r0, #4294967295
 801a14c:	d100      	bne.n	801a150 <memcpy+0xc>
 801a14e:	4770      	bx	lr
 801a150:	b510      	push	{r4, lr}
 801a152:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a156:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a15a:	4291      	cmp	r1, r2
 801a15c:	d1f9      	bne.n	801a152 <memcpy+0xe>
 801a15e:	bd10      	pop	{r4, pc}

0801a160 <memmove>:
 801a160:	4288      	cmp	r0, r1
 801a162:	b510      	push	{r4, lr}
 801a164:	eb01 0402 	add.w	r4, r1, r2
 801a168:	d902      	bls.n	801a170 <memmove+0x10>
 801a16a:	4284      	cmp	r4, r0
 801a16c:	4623      	mov	r3, r4
 801a16e:	d807      	bhi.n	801a180 <memmove+0x20>
 801a170:	1e43      	subs	r3, r0, #1
 801a172:	42a1      	cmp	r1, r4
 801a174:	d008      	beq.n	801a188 <memmove+0x28>
 801a176:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a17a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a17e:	e7f8      	b.n	801a172 <memmove+0x12>
 801a180:	4402      	add	r2, r0
 801a182:	4601      	mov	r1, r0
 801a184:	428a      	cmp	r2, r1
 801a186:	d100      	bne.n	801a18a <memmove+0x2a>
 801a188:	bd10      	pop	{r4, pc}
 801a18a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a18e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a192:	e7f7      	b.n	801a184 <memmove+0x24>

0801a194 <memset>:
 801a194:	4402      	add	r2, r0
 801a196:	4603      	mov	r3, r0
 801a198:	4293      	cmp	r3, r2
 801a19a:	d100      	bne.n	801a19e <memset+0xa>
 801a19c:	4770      	bx	lr
 801a19e:	f803 1b01 	strb.w	r1, [r3], #1
 801a1a2:	e7f9      	b.n	801a198 <memset+0x4>

0801a1a4 <validate_structure>:
 801a1a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a1a6:	6801      	ldr	r1, [r0, #0]
 801a1a8:	293b      	cmp	r1, #59	; 0x3b
 801a1aa:	4604      	mov	r4, r0
 801a1ac:	d911      	bls.n	801a1d2 <validate_structure+0x2e>
 801a1ae:	223c      	movs	r2, #60	; 0x3c
 801a1b0:	4668      	mov	r0, sp
 801a1b2:	f002 feb5 	bl	801cf20 <div>
 801a1b6:	9a01      	ldr	r2, [sp, #4]
 801a1b8:	6863      	ldr	r3, [r4, #4]
 801a1ba:	9900      	ldr	r1, [sp, #0]
 801a1bc:	2a00      	cmp	r2, #0
 801a1be:	440b      	add	r3, r1
 801a1c0:	6063      	str	r3, [r4, #4]
 801a1c2:	bfbb      	ittet	lt
 801a1c4:	323c      	addlt	r2, #60	; 0x3c
 801a1c6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801a1ca:	6022      	strge	r2, [r4, #0]
 801a1cc:	6022      	strlt	r2, [r4, #0]
 801a1ce:	bfb8      	it	lt
 801a1d0:	6063      	strlt	r3, [r4, #4]
 801a1d2:	6861      	ldr	r1, [r4, #4]
 801a1d4:	293b      	cmp	r1, #59	; 0x3b
 801a1d6:	d911      	bls.n	801a1fc <validate_structure+0x58>
 801a1d8:	223c      	movs	r2, #60	; 0x3c
 801a1da:	4668      	mov	r0, sp
 801a1dc:	f002 fea0 	bl	801cf20 <div>
 801a1e0:	9a01      	ldr	r2, [sp, #4]
 801a1e2:	68a3      	ldr	r3, [r4, #8]
 801a1e4:	9900      	ldr	r1, [sp, #0]
 801a1e6:	2a00      	cmp	r2, #0
 801a1e8:	440b      	add	r3, r1
 801a1ea:	60a3      	str	r3, [r4, #8]
 801a1ec:	bfbb      	ittet	lt
 801a1ee:	323c      	addlt	r2, #60	; 0x3c
 801a1f0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801a1f4:	6062      	strge	r2, [r4, #4]
 801a1f6:	6062      	strlt	r2, [r4, #4]
 801a1f8:	bfb8      	it	lt
 801a1fa:	60a3      	strlt	r3, [r4, #8]
 801a1fc:	68a1      	ldr	r1, [r4, #8]
 801a1fe:	2917      	cmp	r1, #23
 801a200:	d911      	bls.n	801a226 <validate_structure+0x82>
 801a202:	2218      	movs	r2, #24
 801a204:	4668      	mov	r0, sp
 801a206:	f002 fe8b 	bl	801cf20 <div>
 801a20a:	9a01      	ldr	r2, [sp, #4]
 801a20c:	68e3      	ldr	r3, [r4, #12]
 801a20e:	9900      	ldr	r1, [sp, #0]
 801a210:	2a00      	cmp	r2, #0
 801a212:	440b      	add	r3, r1
 801a214:	60e3      	str	r3, [r4, #12]
 801a216:	bfbb      	ittet	lt
 801a218:	3218      	addlt	r2, #24
 801a21a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801a21e:	60a2      	strge	r2, [r4, #8]
 801a220:	60a2      	strlt	r2, [r4, #8]
 801a222:	bfb8      	it	lt
 801a224:	60e3      	strlt	r3, [r4, #12]
 801a226:	6921      	ldr	r1, [r4, #16]
 801a228:	290b      	cmp	r1, #11
 801a22a:	d911      	bls.n	801a250 <validate_structure+0xac>
 801a22c:	220c      	movs	r2, #12
 801a22e:	4668      	mov	r0, sp
 801a230:	f002 fe76 	bl	801cf20 <div>
 801a234:	9a01      	ldr	r2, [sp, #4]
 801a236:	6963      	ldr	r3, [r4, #20]
 801a238:	9900      	ldr	r1, [sp, #0]
 801a23a:	2a00      	cmp	r2, #0
 801a23c:	440b      	add	r3, r1
 801a23e:	6163      	str	r3, [r4, #20]
 801a240:	bfbb      	ittet	lt
 801a242:	320c      	addlt	r2, #12
 801a244:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801a248:	6122      	strge	r2, [r4, #16]
 801a24a:	6122      	strlt	r2, [r4, #16]
 801a24c:	bfb8      	it	lt
 801a24e:	6163      	strlt	r3, [r4, #20]
 801a250:	6963      	ldr	r3, [r4, #20]
 801a252:	0799      	lsls	r1, r3, #30
 801a254:	d120      	bne.n	801a298 <validate_structure+0xf4>
 801a256:	2164      	movs	r1, #100	; 0x64
 801a258:	fb93 f2f1 	sdiv	r2, r3, r1
 801a25c:	fb01 3212 	mls	r2, r1, r2, r3
 801a260:	b9e2      	cbnz	r2, 801a29c <validate_structure+0xf8>
 801a262:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801a266:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801a26a:	fb93 f2f1 	sdiv	r2, r3, r1
 801a26e:	fb01 3312 	mls	r3, r1, r2, r3
 801a272:	2b00      	cmp	r3, #0
 801a274:	bf14      	ite	ne
 801a276:	231c      	movne	r3, #28
 801a278:	231d      	moveq	r3, #29
 801a27a:	68e2      	ldr	r2, [r4, #12]
 801a27c:	2a00      	cmp	r2, #0
 801a27e:	dc0f      	bgt.n	801a2a0 <validate_structure+0xfc>
 801a280:	4f33      	ldr	r7, [pc, #204]	; (801a350 <validate_structure+0x1ac>)
 801a282:	260b      	movs	r6, #11
 801a284:	2064      	movs	r0, #100	; 0x64
 801a286:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801a28a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801a28e:	f1bc 0f00 	cmp.w	ip, #0
 801a292:	dd31      	ble.n	801a2f8 <validate_structure+0x154>
 801a294:	b003      	add	sp, #12
 801a296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a298:	231c      	movs	r3, #28
 801a29a:	e7ee      	b.n	801a27a <validate_structure+0xd6>
 801a29c:	231d      	movs	r3, #29
 801a29e:	e7ec      	b.n	801a27a <validate_structure+0xd6>
 801a2a0:	4f2b      	ldr	r7, [pc, #172]	; (801a350 <validate_structure+0x1ac>)
 801a2a2:	f04f 0c00 	mov.w	ip, #0
 801a2a6:	2564      	movs	r5, #100	; 0x64
 801a2a8:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801a2ac:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801a2b0:	2a01      	cmp	r2, #1
 801a2b2:	bf14      	ite	ne
 801a2b4:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 801a2b8:	4618      	moveq	r0, r3
 801a2ba:	4281      	cmp	r1, r0
 801a2bc:	ddea      	ble.n	801a294 <validate_structure+0xf0>
 801a2be:	3201      	adds	r2, #1
 801a2c0:	1a09      	subs	r1, r1, r0
 801a2c2:	2a0c      	cmp	r2, #12
 801a2c4:	60e1      	str	r1, [r4, #12]
 801a2c6:	6122      	str	r2, [r4, #16]
 801a2c8:	d1f0      	bne.n	801a2ac <validate_structure+0x108>
 801a2ca:	6963      	ldr	r3, [r4, #20]
 801a2cc:	1c5a      	adds	r2, r3, #1
 801a2ce:	0791      	lsls	r1, r2, #30
 801a2d0:	e9c4 c204 	strd	ip, r2, [r4, #16]
 801a2d4:	d137      	bne.n	801a346 <validate_structure+0x1a2>
 801a2d6:	fb92 f1f5 	sdiv	r1, r2, r5
 801a2da:	fb05 2211 	mls	r2, r5, r1, r2
 801a2de:	2a00      	cmp	r2, #0
 801a2e0:	d133      	bne.n	801a34a <validate_structure+0x1a6>
 801a2e2:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 801a2e6:	fb93 f2f6 	sdiv	r2, r3, r6
 801a2ea:	fb06 3312 	mls	r3, r6, r2, r3
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	bf14      	ite	ne
 801a2f2:	231c      	movne	r3, #28
 801a2f4:	231d      	moveq	r3, #29
 801a2f6:	e7d9      	b.n	801a2ac <validate_structure+0x108>
 801a2f8:	6921      	ldr	r1, [r4, #16]
 801a2fa:	3901      	subs	r1, #1
 801a2fc:	6121      	str	r1, [r4, #16]
 801a2fe:	3101      	adds	r1, #1
 801a300:	d114      	bne.n	801a32c <validate_structure+0x188>
 801a302:	6963      	ldr	r3, [r4, #20]
 801a304:	1e59      	subs	r1, r3, #1
 801a306:	078a      	lsls	r2, r1, #30
 801a308:	e9c4 6104 	strd	r6, r1, [r4, #16]
 801a30c:	d117      	bne.n	801a33e <validate_structure+0x19a>
 801a30e:	fb91 f2f0 	sdiv	r2, r1, r0
 801a312:	fb00 1112 	mls	r1, r0, r2, r1
 801a316:	b9a1      	cbnz	r1, 801a342 <validate_structure+0x19e>
 801a318:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801a31c:	fb93 f2f5 	sdiv	r2, r3, r5
 801a320:	fb05 3312 	mls	r3, r5, r2, r3
 801a324:	2b00      	cmp	r3, #0
 801a326:	bf14      	ite	ne
 801a328:	231c      	movne	r3, #28
 801a32a:	231d      	moveq	r3, #29
 801a32c:	6922      	ldr	r2, [r4, #16]
 801a32e:	2a01      	cmp	r2, #1
 801a330:	bf14      	ite	ne
 801a332:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 801a336:	461a      	moveq	r2, r3
 801a338:	4462      	add	r2, ip
 801a33a:	60e2      	str	r2, [r4, #12]
 801a33c:	e7a5      	b.n	801a28a <validate_structure+0xe6>
 801a33e:	231c      	movs	r3, #28
 801a340:	e7f4      	b.n	801a32c <validate_structure+0x188>
 801a342:	231d      	movs	r3, #29
 801a344:	e7f2      	b.n	801a32c <validate_structure+0x188>
 801a346:	231c      	movs	r3, #28
 801a348:	e7b0      	b.n	801a2ac <validate_structure+0x108>
 801a34a:	231d      	movs	r3, #29
 801a34c:	e7ae      	b.n	801a2ac <validate_structure+0x108>
 801a34e:	bf00      	nop
 801a350:	08022140 	.word	0x08022140

0801a354 <mktime>:
 801a354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a358:	b08b      	sub	sp, #44	; 0x2c
 801a35a:	4605      	mov	r5, r0
 801a35c:	f004 f8f2 	bl	801e544 <__gettzinfo>
 801a360:	4607      	mov	r7, r0
 801a362:	4628      	mov	r0, r5
 801a364:	f7ff ff1e 	bl	801a1a4 <validate_structure>
 801a368:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a36c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 801a370:	68a8      	ldr	r0, [r5, #8]
 801a372:	696e      	ldr	r6, [r5, #20]
 801a374:	fb0a 2303 	mla	r3, sl, r3, r2
 801a378:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 801a37c:	fb0a 3a00 	mla	sl, sl, r0, r3
 801a380:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 801a384:	4ac3      	ldr	r2, [pc, #780]	; (801a694 <mktime+0x340>)
 801a386:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801a38a:	3c01      	subs	r4, #1
 801a38c:	2b01      	cmp	r3, #1
 801a38e:	4414      	add	r4, r2
 801a390:	dd11      	ble.n	801a3b6 <mktime+0x62>
 801a392:	07b1      	lsls	r1, r6, #30
 801a394:	d10f      	bne.n	801a3b6 <mktime+0x62>
 801a396:	2264      	movs	r2, #100	; 0x64
 801a398:	fb96 f3f2 	sdiv	r3, r6, r2
 801a39c:	fb02 6313 	mls	r3, r2, r3, r6
 801a3a0:	b943      	cbnz	r3, 801a3b4 <mktime+0x60>
 801a3a2:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801a3a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801a3aa:	fb91 f3f2 	sdiv	r3, r1, r2
 801a3ae:	fb02 1313 	mls	r3, r2, r3, r1
 801a3b2:	b903      	cbnz	r3, 801a3b6 <mktime+0x62>
 801a3b4:	3401      	adds	r4, #1
 801a3b6:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 801a3ba:	3310      	adds	r3, #16
 801a3bc:	f644 6220 	movw	r2, #20000	; 0x4e20
 801a3c0:	4293      	cmp	r3, r2
 801a3c2:	61ec      	str	r4, [r5, #28]
 801a3c4:	f200 8161 	bhi.w	801a68a <mktime+0x336>
 801a3c8:	2e46      	cmp	r6, #70	; 0x46
 801a3ca:	dd77      	ble.n	801a4bc <mktime+0x168>
 801a3cc:	2346      	movs	r3, #70	; 0x46
 801a3ce:	f240 1e6d 	movw	lr, #365	; 0x16d
 801a3d2:	2164      	movs	r1, #100	; 0x64
 801a3d4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801a3d8:	079a      	lsls	r2, r3, #30
 801a3da:	d169      	bne.n	801a4b0 <mktime+0x15c>
 801a3dc:	fb93 f2f1 	sdiv	r2, r3, r1
 801a3e0:	fb01 3212 	mls	r2, r1, r2, r3
 801a3e4:	2a00      	cmp	r2, #0
 801a3e6:	d166      	bne.n	801a4b6 <mktime+0x162>
 801a3e8:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801a3ec:	fb9c f2f0 	sdiv	r2, ip, r0
 801a3f0:	fb00 c212 	mls	r2, r0, r2, ip
 801a3f4:	2a00      	cmp	r2, #0
 801a3f6:	bf14      	ite	ne
 801a3f8:	4672      	movne	r2, lr
 801a3fa:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801a3fe:	3301      	adds	r3, #1
 801a400:	429e      	cmp	r6, r3
 801a402:	4414      	add	r4, r2
 801a404:	d1e8      	bne.n	801a3d8 <mktime+0x84>
 801a406:	4ba4      	ldr	r3, [pc, #656]	; (801a698 <mktime+0x344>)
 801a408:	ea4f 7bea 	mov.w	fp, sl, asr #31
 801a40c:	fbc3 ab04 	smlal	sl, fp, r3, r4
 801a410:	f002 fabe 	bl	801c990 <__tz_lock>
 801a414:	f002 fac8 	bl	801c9a8 <_tzset_unlocked>
 801a418:	4ba0      	ldr	r3, [pc, #640]	; (801a69c <mktime+0x348>)
 801a41a:	f8d3 9000 	ldr.w	r9, [r3]
 801a41e:	f1b9 0f00 	cmp.w	r9, #0
 801a422:	d03f      	beq.n	801a4a4 <mktime+0x150>
 801a424:	f8d5 9020 	ldr.w	r9, [r5, #32]
 801a428:	6968      	ldr	r0, [r5, #20]
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	f1b9 0f01 	cmp.w	r9, #1
 801a430:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801a434:	46c8      	mov	r8, r9
 801a436:	bfa8      	it	ge
 801a438:	f04f 0801 	movge.w	r8, #1
 801a43c:	4283      	cmp	r3, r0
 801a43e:	d17f      	bne.n	801a540 <mktime+0x1ec>
 801a440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a442:	4619      	mov	r1, r3
 801a444:	17da      	asrs	r2, r3, #31
 801a446:	e9cd 1200 	strd	r1, r2, [sp]
 801a44a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801a44e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801a452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a458:	1a80      	subs	r0, r0, r2
 801a45a:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 801a45e:	4582      	cmp	sl, r0
 801a460:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a464:	eb7b 0101 	sbcs.w	r1, fp, r1
 801a468:	da71      	bge.n	801a54e <mktime+0x1fa>
 801a46a:	9800      	ldr	r0, [sp, #0]
 801a46c:	6a39      	ldr	r1, [r7, #32]
 801a46e:	1a09      	subs	r1, r1, r0
 801a470:	9104      	str	r1, [sp, #16]
 801a472:	9801      	ldr	r0, [sp, #4]
 801a474:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a476:	eb61 0100 	sbc.w	r1, r1, r0
 801a47a:	9105      	str	r1, [sp, #20]
 801a47c:	6839      	ldr	r1, [r7, #0]
 801a47e:	2900      	cmp	r1, #0
 801a480:	d075      	beq.n	801a56e <mktime+0x21a>
 801a482:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a486:	4582      	cmp	sl, r0
 801a488:	eb7b 0101 	sbcs.w	r1, fp, r1
 801a48c:	db05      	blt.n	801a49a <mktime+0x146>
 801a48e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a492:	4582      	cmp	sl, r0
 801a494:	eb7b 0101 	sbcs.w	r1, fp, r1
 801a498:	db6f      	blt.n	801a57a <mktime+0x226>
 801a49a:	f1b9 0f00 	cmp.w	r9, #0
 801a49e:	f04f 0900 	mov.w	r9, #0
 801a4a2:	da6f      	bge.n	801a584 <mktime+0x230>
 801a4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4a6:	eb1a 0a03 	adds.w	sl, sl, r3
 801a4aa:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801a4ae:	e0ae      	b.n	801a60e <mktime+0x2ba>
 801a4b0:	f240 126d 	movw	r2, #365	; 0x16d
 801a4b4:	e7a3      	b.n	801a3fe <mktime+0xaa>
 801a4b6:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801a4ba:	e7a0      	b.n	801a3fe <mktime+0xaa>
 801a4bc:	d0a3      	beq.n	801a406 <mktime+0xb2>
 801a4be:	2345      	movs	r3, #69	; 0x45
 801a4c0:	f240 1e6d 	movw	lr, #365	; 0x16d
 801a4c4:	2164      	movs	r1, #100	; 0x64
 801a4c6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801a4ca:	e012      	b.n	801a4f2 <mktime+0x19e>
 801a4cc:	bb62      	cbnz	r2, 801a528 <mktime+0x1d4>
 801a4ce:	fb93 f2f1 	sdiv	r2, r3, r1
 801a4d2:	fb01 3212 	mls	r2, r1, r2, r3
 801a4d6:	bb52      	cbnz	r2, 801a52e <mktime+0x1da>
 801a4d8:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801a4dc:	fb9c f2f0 	sdiv	r2, ip, r0
 801a4e0:	fb00 c212 	mls	r2, r0, r2, ip
 801a4e4:	2a00      	cmp	r2, #0
 801a4e6:	bf14      	ite	ne
 801a4e8:	4672      	movne	r2, lr
 801a4ea:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801a4ee:	1aa4      	subs	r4, r4, r2
 801a4f0:	3b01      	subs	r3, #1
 801a4f2:	429e      	cmp	r6, r3
 801a4f4:	f003 0203 	and.w	r2, r3, #3
 801a4f8:	dbe8      	blt.n	801a4cc <mktime+0x178>
 801a4fa:	b9da      	cbnz	r2, 801a534 <mktime+0x1e0>
 801a4fc:	2264      	movs	r2, #100	; 0x64
 801a4fe:	fb96 f3f2 	sdiv	r3, r6, r2
 801a502:	fb02 6313 	mls	r3, r2, r3, r6
 801a506:	b9c3      	cbnz	r3, 801a53a <mktime+0x1e6>
 801a508:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801a50c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801a510:	fb91 f3f2 	sdiv	r3, r1, r2
 801a514:	fb02 1313 	mls	r3, r2, r3, r1
 801a518:	2b00      	cmp	r3, #0
 801a51a:	f240 136d 	movw	r3, #365	; 0x16d
 801a51e:	bf08      	it	eq
 801a520:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801a524:	1ae4      	subs	r4, r4, r3
 801a526:	e76e      	b.n	801a406 <mktime+0xb2>
 801a528:	f240 126d 	movw	r2, #365	; 0x16d
 801a52c:	e7df      	b.n	801a4ee <mktime+0x19a>
 801a52e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801a532:	e7dc      	b.n	801a4ee <mktime+0x19a>
 801a534:	f240 136d 	movw	r3, #365	; 0x16d
 801a538:	e7f4      	b.n	801a524 <mktime+0x1d0>
 801a53a:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 801a53e:	e7f1      	b.n	801a524 <mktime+0x1d0>
 801a540:	f002 f97e 	bl	801c840 <__tzcalc_limits>
 801a544:	2800      	cmp	r0, #0
 801a546:	f47f af7b 	bne.w	801a440 <mktime+0xec>
 801a54a:	46c1      	mov	r9, r8
 801a54c:	e054      	b.n	801a5f8 <mktime+0x2a4>
 801a54e:	9800      	ldr	r0, [sp, #0]
 801a550:	9902      	ldr	r1, [sp, #8]
 801a552:	1a09      	subs	r1, r1, r0
 801a554:	9108      	str	r1, [sp, #32]
 801a556:	9801      	ldr	r0, [sp, #4]
 801a558:	9903      	ldr	r1, [sp, #12]
 801a55a:	eb61 0100 	sbc.w	r1, r1, r0
 801a55e:	9109      	str	r1, [sp, #36]	; 0x24
 801a560:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a564:	4582      	cmp	sl, r0
 801a566:	eb7b 0101 	sbcs.w	r1, fp, r1
 801a56a:	dbee      	blt.n	801a54a <mktime+0x1f6>
 801a56c:	e77d      	b.n	801a46a <mktime+0x116>
 801a56e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a572:	4582      	cmp	sl, r0
 801a574:	eb7b 0101 	sbcs.w	r1, fp, r1
 801a578:	db89      	blt.n	801a48e <mktime+0x13a>
 801a57a:	f1b9 0f00 	cmp.w	r9, #0
 801a57e:	db3f      	blt.n	801a600 <mktime+0x2ac>
 801a580:	f04f 0901 	mov.w	r9, #1
 801a584:	ea88 0809 	eor.w	r8, r8, r9
 801a588:	f1b8 0f01 	cmp.w	r8, #1
 801a58c:	d134      	bne.n	801a5f8 <mktime+0x2a4>
 801a58e:	f1b9 0f00 	cmp.w	r9, #0
 801a592:	d04f      	beq.n	801a634 <mktime+0x2e0>
 801a594:	1ad3      	subs	r3, r2, r3
 801a596:	682a      	ldr	r2, [r5, #0]
 801a598:	f8d5 800c 	ldr.w	r8, [r5, #12]
 801a59c:	441a      	add	r2, r3
 801a59e:	eb1a 0a03 	adds.w	sl, sl, r3
 801a5a2:	602a      	str	r2, [r5, #0]
 801a5a4:	4628      	mov	r0, r5
 801a5a6:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801a5aa:	f7ff fdfb 	bl	801a1a4 <validate_structure>
 801a5ae:	68ea      	ldr	r2, [r5, #12]
 801a5b0:	ebb2 0208 	subs.w	r2, r2, r8
 801a5b4:	d020      	beq.n	801a5f8 <mktime+0x2a4>
 801a5b6:	2a01      	cmp	r2, #1
 801a5b8:	dc3e      	bgt.n	801a638 <mktime+0x2e4>
 801a5ba:	1c90      	adds	r0, r2, #2
 801a5bc:	bfd8      	it	le
 801a5be:	2201      	movle	r2, #1
 801a5c0:	69eb      	ldr	r3, [r5, #28]
 801a5c2:	18d3      	adds	r3, r2, r3
 801a5c4:	4414      	add	r4, r2
 801a5c6:	d540      	bpl.n	801a64a <mktime+0x2f6>
 801a5c8:	1e72      	subs	r2, r6, #1
 801a5ca:	0791      	lsls	r1, r2, #30
 801a5cc:	d137      	bne.n	801a63e <mktime+0x2ea>
 801a5ce:	2164      	movs	r1, #100	; 0x64
 801a5d0:	fb92 f3f1 	sdiv	r3, r2, r1
 801a5d4:	fb01 2313 	mls	r3, r1, r3, r2
 801a5d8:	bba3      	cbnz	r3, 801a644 <mktime+0x2f0>
 801a5da:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 801a5de:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801a5e2:	fb96 f3f2 	sdiv	r3, r6, r2
 801a5e6:	fb02 6613 	mls	r6, r2, r3, r6
 801a5ea:	2e00      	cmp	r6, #0
 801a5ec:	f240 136d 	movw	r3, #365	; 0x16d
 801a5f0:	bf18      	it	ne
 801a5f2:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 801a5f6:	61eb      	str	r3, [r5, #28]
 801a5f8:	f1b9 0f01 	cmp.w	r9, #1
 801a5fc:	f47f af52 	bne.w	801a4a4 <mktime+0x150>
 801a600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a602:	eb1a 0a03 	adds.w	sl, sl, r3
 801a606:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801a60a:	f04f 0901 	mov.w	r9, #1
 801a60e:	f002 f9c5 	bl	801c99c <__tz_unlock>
 801a612:	3404      	adds	r4, #4
 801a614:	2307      	movs	r3, #7
 801a616:	fb94 f3f3 	sdiv	r3, r4, r3
 801a61a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801a61e:	1ae4      	subs	r4, r4, r3
 801a620:	bf48      	it	mi
 801a622:	3407      	addmi	r4, #7
 801a624:	f8c5 9020 	str.w	r9, [r5, #32]
 801a628:	61ac      	str	r4, [r5, #24]
 801a62a:	4650      	mov	r0, sl
 801a62c:	4659      	mov	r1, fp
 801a62e:	b00b      	add	sp, #44	; 0x2c
 801a630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a634:	1a9b      	subs	r3, r3, r2
 801a636:	e7ae      	b.n	801a596 <mktime+0x242>
 801a638:	f04f 32ff 	mov.w	r2, #4294967295
 801a63c:	e7c0      	b.n	801a5c0 <mktime+0x26c>
 801a63e:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 801a642:	e7d8      	b.n	801a5f6 <mktime+0x2a2>
 801a644:	f240 136d 	movw	r3, #365	; 0x16d
 801a648:	e7d5      	b.n	801a5f6 <mktime+0x2a2>
 801a64a:	07b2      	lsls	r2, r6, #30
 801a64c:	d117      	bne.n	801a67e <mktime+0x32a>
 801a64e:	2164      	movs	r1, #100	; 0x64
 801a650:	fb96 f2f1 	sdiv	r2, r6, r1
 801a654:	fb01 6212 	mls	r2, r1, r2, r6
 801a658:	b9a2      	cbnz	r2, 801a684 <mktime+0x330>
 801a65a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 801a65e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801a662:	fb96 f2f1 	sdiv	r2, r6, r1
 801a666:	fb01 6612 	mls	r6, r1, r2, r6
 801a66a:	2e00      	cmp	r6, #0
 801a66c:	f240 126d 	movw	r2, #365	; 0x16d
 801a670:	bf08      	it	eq
 801a672:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801a676:	4293      	cmp	r3, r2
 801a678:	bfa8      	it	ge
 801a67a:	1a9b      	subge	r3, r3, r2
 801a67c:	e7bb      	b.n	801a5f6 <mktime+0x2a2>
 801a67e:	f240 126d 	movw	r2, #365	; 0x16d
 801a682:	e7f8      	b.n	801a676 <mktime+0x322>
 801a684:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801a688:	e7f5      	b.n	801a676 <mktime+0x322>
 801a68a:	f04f 3aff 	mov.w	sl, #4294967295
 801a68e:	f04f 3bff 	mov.w	fp, #4294967295
 801a692:	e7ca      	b.n	801a62a <mktime+0x2d6>
 801a694:	08022170 	.word	0x08022170
 801a698:	00015180 	.word	0x00015180
 801a69c:	20005ee0 	.word	0x20005ee0

0801a6a0 <_free_r>:
 801a6a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a6a2:	2900      	cmp	r1, #0
 801a6a4:	d048      	beq.n	801a738 <_free_r+0x98>
 801a6a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a6aa:	9001      	str	r0, [sp, #4]
 801a6ac:	2b00      	cmp	r3, #0
 801a6ae:	f1a1 0404 	sub.w	r4, r1, #4
 801a6b2:	bfb8      	it	lt
 801a6b4:	18e4      	addlt	r4, r4, r3
 801a6b6:	f004 f885 	bl	801e7c4 <__malloc_lock>
 801a6ba:	4a20      	ldr	r2, [pc, #128]	; (801a73c <_free_r+0x9c>)
 801a6bc:	9801      	ldr	r0, [sp, #4]
 801a6be:	6813      	ldr	r3, [r2, #0]
 801a6c0:	4615      	mov	r5, r2
 801a6c2:	b933      	cbnz	r3, 801a6d2 <_free_r+0x32>
 801a6c4:	6063      	str	r3, [r4, #4]
 801a6c6:	6014      	str	r4, [r2, #0]
 801a6c8:	b003      	add	sp, #12
 801a6ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a6ce:	f004 b87f 	b.w	801e7d0 <__malloc_unlock>
 801a6d2:	42a3      	cmp	r3, r4
 801a6d4:	d90b      	bls.n	801a6ee <_free_r+0x4e>
 801a6d6:	6821      	ldr	r1, [r4, #0]
 801a6d8:	1862      	adds	r2, r4, r1
 801a6da:	4293      	cmp	r3, r2
 801a6dc:	bf04      	itt	eq
 801a6de:	681a      	ldreq	r2, [r3, #0]
 801a6e0:	685b      	ldreq	r3, [r3, #4]
 801a6e2:	6063      	str	r3, [r4, #4]
 801a6e4:	bf04      	itt	eq
 801a6e6:	1852      	addeq	r2, r2, r1
 801a6e8:	6022      	streq	r2, [r4, #0]
 801a6ea:	602c      	str	r4, [r5, #0]
 801a6ec:	e7ec      	b.n	801a6c8 <_free_r+0x28>
 801a6ee:	461a      	mov	r2, r3
 801a6f0:	685b      	ldr	r3, [r3, #4]
 801a6f2:	b10b      	cbz	r3, 801a6f8 <_free_r+0x58>
 801a6f4:	42a3      	cmp	r3, r4
 801a6f6:	d9fa      	bls.n	801a6ee <_free_r+0x4e>
 801a6f8:	6811      	ldr	r1, [r2, #0]
 801a6fa:	1855      	adds	r5, r2, r1
 801a6fc:	42a5      	cmp	r5, r4
 801a6fe:	d10b      	bne.n	801a718 <_free_r+0x78>
 801a700:	6824      	ldr	r4, [r4, #0]
 801a702:	4421      	add	r1, r4
 801a704:	1854      	adds	r4, r2, r1
 801a706:	42a3      	cmp	r3, r4
 801a708:	6011      	str	r1, [r2, #0]
 801a70a:	d1dd      	bne.n	801a6c8 <_free_r+0x28>
 801a70c:	681c      	ldr	r4, [r3, #0]
 801a70e:	685b      	ldr	r3, [r3, #4]
 801a710:	6053      	str	r3, [r2, #4]
 801a712:	4421      	add	r1, r4
 801a714:	6011      	str	r1, [r2, #0]
 801a716:	e7d7      	b.n	801a6c8 <_free_r+0x28>
 801a718:	d902      	bls.n	801a720 <_free_r+0x80>
 801a71a:	230c      	movs	r3, #12
 801a71c:	6003      	str	r3, [r0, #0]
 801a71e:	e7d3      	b.n	801a6c8 <_free_r+0x28>
 801a720:	6825      	ldr	r5, [r4, #0]
 801a722:	1961      	adds	r1, r4, r5
 801a724:	428b      	cmp	r3, r1
 801a726:	bf04      	itt	eq
 801a728:	6819      	ldreq	r1, [r3, #0]
 801a72a:	685b      	ldreq	r3, [r3, #4]
 801a72c:	6063      	str	r3, [r4, #4]
 801a72e:	bf04      	itt	eq
 801a730:	1949      	addeq	r1, r1, r5
 801a732:	6021      	streq	r1, [r4, #0]
 801a734:	6054      	str	r4, [r2, #4]
 801a736:	e7c7      	b.n	801a6c8 <_free_r+0x28>
 801a738:	b003      	add	sp, #12
 801a73a:	bd30      	pop	{r4, r5, pc}
 801a73c:	20005ebc 	.word	0x20005ebc

0801a740 <_malloc_r>:
 801a740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a742:	1ccd      	adds	r5, r1, #3
 801a744:	f025 0503 	bic.w	r5, r5, #3
 801a748:	3508      	adds	r5, #8
 801a74a:	2d0c      	cmp	r5, #12
 801a74c:	bf38      	it	cc
 801a74e:	250c      	movcc	r5, #12
 801a750:	2d00      	cmp	r5, #0
 801a752:	4606      	mov	r6, r0
 801a754:	db01      	blt.n	801a75a <_malloc_r+0x1a>
 801a756:	42a9      	cmp	r1, r5
 801a758:	d903      	bls.n	801a762 <_malloc_r+0x22>
 801a75a:	230c      	movs	r3, #12
 801a75c:	6033      	str	r3, [r6, #0]
 801a75e:	2000      	movs	r0, #0
 801a760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a762:	f004 f82f 	bl	801e7c4 <__malloc_lock>
 801a766:	4921      	ldr	r1, [pc, #132]	; (801a7ec <_malloc_r+0xac>)
 801a768:	680a      	ldr	r2, [r1, #0]
 801a76a:	4614      	mov	r4, r2
 801a76c:	b99c      	cbnz	r4, 801a796 <_malloc_r+0x56>
 801a76e:	4f20      	ldr	r7, [pc, #128]	; (801a7f0 <_malloc_r+0xb0>)
 801a770:	683b      	ldr	r3, [r7, #0]
 801a772:	b923      	cbnz	r3, 801a77e <_malloc_r+0x3e>
 801a774:	4621      	mov	r1, r4
 801a776:	4630      	mov	r0, r6
 801a778:	f000 ffae 	bl	801b6d8 <_sbrk_r>
 801a77c:	6038      	str	r0, [r7, #0]
 801a77e:	4629      	mov	r1, r5
 801a780:	4630      	mov	r0, r6
 801a782:	f000 ffa9 	bl	801b6d8 <_sbrk_r>
 801a786:	1c43      	adds	r3, r0, #1
 801a788:	d123      	bne.n	801a7d2 <_malloc_r+0x92>
 801a78a:	230c      	movs	r3, #12
 801a78c:	6033      	str	r3, [r6, #0]
 801a78e:	4630      	mov	r0, r6
 801a790:	f004 f81e 	bl	801e7d0 <__malloc_unlock>
 801a794:	e7e3      	b.n	801a75e <_malloc_r+0x1e>
 801a796:	6823      	ldr	r3, [r4, #0]
 801a798:	1b5b      	subs	r3, r3, r5
 801a79a:	d417      	bmi.n	801a7cc <_malloc_r+0x8c>
 801a79c:	2b0b      	cmp	r3, #11
 801a79e:	d903      	bls.n	801a7a8 <_malloc_r+0x68>
 801a7a0:	6023      	str	r3, [r4, #0]
 801a7a2:	441c      	add	r4, r3
 801a7a4:	6025      	str	r5, [r4, #0]
 801a7a6:	e004      	b.n	801a7b2 <_malloc_r+0x72>
 801a7a8:	6863      	ldr	r3, [r4, #4]
 801a7aa:	42a2      	cmp	r2, r4
 801a7ac:	bf0c      	ite	eq
 801a7ae:	600b      	streq	r3, [r1, #0]
 801a7b0:	6053      	strne	r3, [r2, #4]
 801a7b2:	4630      	mov	r0, r6
 801a7b4:	f004 f80c 	bl	801e7d0 <__malloc_unlock>
 801a7b8:	f104 000b 	add.w	r0, r4, #11
 801a7bc:	1d23      	adds	r3, r4, #4
 801a7be:	f020 0007 	bic.w	r0, r0, #7
 801a7c2:	1ac2      	subs	r2, r0, r3
 801a7c4:	d0cc      	beq.n	801a760 <_malloc_r+0x20>
 801a7c6:	1a1b      	subs	r3, r3, r0
 801a7c8:	50a3      	str	r3, [r4, r2]
 801a7ca:	e7c9      	b.n	801a760 <_malloc_r+0x20>
 801a7cc:	4622      	mov	r2, r4
 801a7ce:	6864      	ldr	r4, [r4, #4]
 801a7d0:	e7cc      	b.n	801a76c <_malloc_r+0x2c>
 801a7d2:	1cc4      	adds	r4, r0, #3
 801a7d4:	f024 0403 	bic.w	r4, r4, #3
 801a7d8:	42a0      	cmp	r0, r4
 801a7da:	d0e3      	beq.n	801a7a4 <_malloc_r+0x64>
 801a7dc:	1a21      	subs	r1, r4, r0
 801a7de:	4630      	mov	r0, r6
 801a7e0:	f000 ff7a 	bl	801b6d8 <_sbrk_r>
 801a7e4:	3001      	adds	r0, #1
 801a7e6:	d1dd      	bne.n	801a7a4 <_malloc_r+0x64>
 801a7e8:	e7cf      	b.n	801a78a <_malloc_r+0x4a>
 801a7ea:	bf00      	nop
 801a7ec:	20005ebc 	.word	0x20005ebc
 801a7f0:	20005ec0 	.word	0x20005ec0

0801a7f4 <__cvt>:
 801a7f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a7f8:	ec55 4b10 	vmov	r4, r5, d0
 801a7fc:	2d00      	cmp	r5, #0
 801a7fe:	460e      	mov	r6, r1
 801a800:	4619      	mov	r1, r3
 801a802:	462b      	mov	r3, r5
 801a804:	bfbb      	ittet	lt
 801a806:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801a80a:	461d      	movlt	r5, r3
 801a80c:	2300      	movge	r3, #0
 801a80e:	232d      	movlt	r3, #45	; 0x2d
 801a810:	700b      	strb	r3, [r1, #0]
 801a812:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a814:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801a818:	4691      	mov	r9, r2
 801a81a:	f023 0820 	bic.w	r8, r3, #32
 801a81e:	bfbc      	itt	lt
 801a820:	4622      	movlt	r2, r4
 801a822:	4614      	movlt	r4, r2
 801a824:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a828:	d005      	beq.n	801a836 <__cvt+0x42>
 801a82a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801a82e:	d100      	bne.n	801a832 <__cvt+0x3e>
 801a830:	3601      	adds	r6, #1
 801a832:	2102      	movs	r1, #2
 801a834:	e000      	b.n	801a838 <__cvt+0x44>
 801a836:	2103      	movs	r1, #3
 801a838:	ab03      	add	r3, sp, #12
 801a83a:	9301      	str	r3, [sp, #4]
 801a83c:	ab02      	add	r3, sp, #8
 801a83e:	9300      	str	r3, [sp, #0]
 801a840:	ec45 4b10 	vmov	d0, r4, r5
 801a844:	4653      	mov	r3, sl
 801a846:	4632      	mov	r2, r6
 801a848:	f002 fc0a 	bl	801d060 <_dtoa_r>
 801a84c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801a850:	4607      	mov	r7, r0
 801a852:	d102      	bne.n	801a85a <__cvt+0x66>
 801a854:	f019 0f01 	tst.w	r9, #1
 801a858:	d022      	beq.n	801a8a0 <__cvt+0xac>
 801a85a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a85e:	eb07 0906 	add.w	r9, r7, r6
 801a862:	d110      	bne.n	801a886 <__cvt+0x92>
 801a864:	783b      	ldrb	r3, [r7, #0]
 801a866:	2b30      	cmp	r3, #48	; 0x30
 801a868:	d10a      	bne.n	801a880 <__cvt+0x8c>
 801a86a:	2200      	movs	r2, #0
 801a86c:	2300      	movs	r3, #0
 801a86e:	4620      	mov	r0, r4
 801a870:	4629      	mov	r1, r5
 801a872:	f7e6 f949 	bl	8000b08 <__aeabi_dcmpeq>
 801a876:	b918      	cbnz	r0, 801a880 <__cvt+0x8c>
 801a878:	f1c6 0601 	rsb	r6, r6, #1
 801a87c:	f8ca 6000 	str.w	r6, [sl]
 801a880:	f8da 3000 	ldr.w	r3, [sl]
 801a884:	4499      	add	r9, r3
 801a886:	2200      	movs	r2, #0
 801a888:	2300      	movs	r3, #0
 801a88a:	4620      	mov	r0, r4
 801a88c:	4629      	mov	r1, r5
 801a88e:	f7e6 f93b 	bl	8000b08 <__aeabi_dcmpeq>
 801a892:	b108      	cbz	r0, 801a898 <__cvt+0xa4>
 801a894:	f8cd 900c 	str.w	r9, [sp, #12]
 801a898:	2230      	movs	r2, #48	; 0x30
 801a89a:	9b03      	ldr	r3, [sp, #12]
 801a89c:	454b      	cmp	r3, r9
 801a89e:	d307      	bcc.n	801a8b0 <__cvt+0xbc>
 801a8a0:	9b03      	ldr	r3, [sp, #12]
 801a8a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a8a4:	1bdb      	subs	r3, r3, r7
 801a8a6:	4638      	mov	r0, r7
 801a8a8:	6013      	str	r3, [r2, #0]
 801a8aa:	b004      	add	sp, #16
 801a8ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8b0:	1c59      	adds	r1, r3, #1
 801a8b2:	9103      	str	r1, [sp, #12]
 801a8b4:	701a      	strb	r2, [r3, #0]
 801a8b6:	e7f0      	b.n	801a89a <__cvt+0xa6>

0801a8b8 <__exponent>:
 801a8b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a8ba:	4603      	mov	r3, r0
 801a8bc:	2900      	cmp	r1, #0
 801a8be:	bfb8      	it	lt
 801a8c0:	4249      	neglt	r1, r1
 801a8c2:	f803 2b02 	strb.w	r2, [r3], #2
 801a8c6:	bfb4      	ite	lt
 801a8c8:	222d      	movlt	r2, #45	; 0x2d
 801a8ca:	222b      	movge	r2, #43	; 0x2b
 801a8cc:	2909      	cmp	r1, #9
 801a8ce:	7042      	strb	r2, [r0, #1]
 801a8d0:	dd2a      	ble.n	801a928 <__exponent+0x70>
 801a8d2:	f10d 0407 	add.w	r4, sp, #7
 801a8d6:	46a4      	mov	ip, r4
 801a8d8:	270a      	movs	r7, #10
 801a8da:	46a6      	mov	lr, r4
 801a8dc:	460a      	mov	r2, r1
 801a8de:	fb91 f6f7 	sdiv	r6, r1, r7
 801a8e2:	fb07 1516 	mls	r5, r7, r6, r1
 801a8e6:	3530      	adds	r5, #48	; 0x30
 801a8e8:	2a63      	cmp	r2, #99	; 0x63
 801a8ea:	f104 34ff 	add.w	r4, r4, #4294967295
 801a8ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801a8f2:	4631      	mov	r1, r6
 801a8f4:	dcf1      	bgt.n	801a8da <__exponent+0x22>
 801a8f6:	3130      	adds	r1, #48	; 0x30
 801a8f8:	f1ae 0502 	sub.w	r5, lr, #2
 801a8fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 801a900:	1c44      	adds	r4, r0, #1
 801a902:	4629      	mov	r1, r5
 801a904:	4561      	cmp	r1, ip
 801a906:	d30a      	bcc.n	801a91e <__exponent+0x66>
 801a908:	f10d 0209 	add.w	r2, sp, #9
 801a90c:	eba2 020e 	sub.w	r2, r2, lr
 801a910:	4565      	cmp	r5, ip
 801a912:	bf88      	it	hi
 801a914:	2200      	movhi	r2, #0
 801a916:	4413      	add	r3, r2
 801a918:	1a18      	subs	r0, r3, r0
 801a91a:	b003      	add	sp, #12
 801a91c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a91e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a922:	f804 2f01 	strb.w	r2, [r4, #1]!
 801a926:	e7ed      	b.n	801a904 <__exponent+0x4c>
 801a928:	2330      	movs	r3, #48	; 0x30
 801a92a:	3130      	adds	r1, #48	; 0x30
 801a92c:	7083      	strb	r3, [r0, #2]
 801a92e:	70c1      	strb	r1, [r0, #3]
 801a930:	1d03      	adds	r3, r0, #4
 801a932:	e7f1      	b.n	801a918 <__exponent+0x60>

0801a934 <_printf_float>:
 801a934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a938:	ed2d 8b02 	vpush	{d8}
 801a93c:	b08d      	sub	sp, #52	; 0x34
 801a93e:	460c      	mov	r4, r1
 801a940:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801a944:	4616      	mov	r6, r2
 801a946:	461f      	mov	r7, r3
 801a948:	4605      	mov	r5, r0
 801a94a:	f003 feaf 	bl	801e6ac <_localeconv_r>
 801a94e:	f8d0 a000 	ldr.w	sl, [r0]
 801a952:	4650      	mov	r0, sl
 801a954:	f7e5 fc56 	bl	8000204 <strlen>
 801a958:	2300      	movs	r3, #0
 801a95a:	930a      	str	r3, [sp, #40]	; 0x28
 801a95c:	6823      	ldr	r3, [r4, #0]
 801a95e:	9305      	str	r3, [sp, #20]
 801a960:	f8d8 3000 	ldr.w	r3, [r8]
 801a964:	f894 b018 	ldrb.w	fp, [r4, #24]
 801a968:	3307      	adds	r3, #7
 801a96a:	f023 0307 	bic.w	r3, r3, #7
 801a96e:	f103 0208 	add.w	r2, r3, #8
 801a972:	f8c8 2000 	str.w	r2, [r8]
 801a976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a97a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801a97e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801a982:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a986:	9307      	str	r3, [sp, #28]
 801a988:	f8cd 8018 	str.w	r8, [sp, #24]
 801a98c:	ee08 0a10 	vmov	s16, r0
 801a990:	4b9f      	ldr	r3, [pc, #636]	; (801ac10 <_printf_float+0x2dc>)
 801a992:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a996:	f04f 32ff 	mov.w	r2, #4294967295
 801a99a:	f7e6 f8e7 	bl	8000b6c <__aeabi_dcmpun>
 801a99e:	bb88      	cbnz	r0, 801aa04 <_printf_float+0xd0>
 801a9a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a9a4:	4b9a      	ldr	r3, [pc, #616]	; (801ac10 <_printf_float+0x2dc>)
 801a9a6:	f04f 32ff 	mov.w	r2, #4294967295
 801a9aa:	f7e6 f8c1 	bl	8000b30 <__aeabi_dcmple>
 801a9ae:	bb48      	cbnz	r0, 801aa04 <_printf_float+0xd0>
 801a9b0:	2200      	movs	r2, #0
 801a9b2:	2300      	movs	r3, #0
 801a9b4:	4640      	mov	r0, r8
 801a9b6:	4649      	mov	r1, r9
 801a9b8:	f7e6 f8b0 	bl	8000b1c <__aeabi_dcmplt>
 801a9bc:	b110      	cbz	r0, 801a9c4 <_printf_float+0x90>
 801a9be:	232d      	movs	r3, #45	; 0x2d
 801a9c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a9c4:	4b93      	ldr	r3, [pc, #588]	; (801ac14 <_printf_float+0x2e0>)
 801a9c6:	4894      	ldr	r0, [pc, #592]	; (801ac18 <_printf_float+0x2e4>)
 801a9c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801a9cc:	bf94      	ite	ls
 801a9ce:	4698      	movls	r8, r3
 801a9d0:	4680      	movhi	r8, r0
 801a9d2:	2303      	movs	r3, #3
 801a9d4:	6123      	str	r3, [r4, #16]
 801a9d6:	9b05      	ldr	r3, [sp, #20]
 801a9d8:	f023 0204 	bic.w	r2, r3, #4
 801a9dc:	6022      	str	r2, [r4, #0]
 801a9de:	f04f 0900 	mov.w	r9, #0
 801a9e2:	9700      	str	r7, [sp, #0]
 801a9e4:	4633      	mov	r3, r6
 801a9e6:	aa0b      	add	r2, sp, #44	; 0x2c
 801a9e8:	4621      	mov	r1, r4
 801a9ea:	4628      	mov	r0, r5
 801a9ec:	f000 f9d8 	bl	801ada0 <_printf_common>
 801a9f0:	3001      	adds	r0, #1
 801a9f2:	f040 8090 	bne.w	801ab16 <_printf_float+0x1e2>
 801a9f6:	f04f 30ff 	mov.w	r0, #4294967295
 801a9fa:	b00d      	add	sp, #52	; 0x34
 801a9fc:	ecbd 8b02 	vpop	{d8}
 801aa00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa04:	4642      	mov	r2, r8
 801aa06:	464b      	mov	r3, r9
 801aa08:	4640      	mov	r0, r8
 801aa0a:	4649      	mov	r1, r9
 801aa0c:	f7e6 f8ae 	bl	8000b6c <__aeabi_dcmpun>
 801aa10:	b140      	cbz	r0, 801aa24 <_printf_float+0xf0>
 801aa12:	464b      	mov	r3, r9
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	bfbc      	itt	lt
 801aa18:	232d      	movlt	r3, #45	; 0x2d
 801aa1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801aa1e:	487f      	ldr	r0, [pc, #508]	; (801ac1c <_printf_float+0x2e8>)
 801aa20:	4b7f      	ldr	r3, [pc, #508]	; (801ac20 <_printf_float+0x2ec>)
 801aa22:	e7d1      	b.n	801a9c8 <_printf_float+0x94>
 801aa24:	6863      	ldr	r3, [r4, #4]
 801aa26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801aa2a:	9206      	str	r2, [sp, #24]
 801aa2c:	1c5a      	adds	r2, r3, #1
 801aa2e:	d13f      	bne.n	801aab0 <_printf_float+0x17c>
 801aa30:	2306      	movs	r3, #6
 801aa32:	6063      	str	r3, [r4, #4]
 801aa34:	9b05      	ldr	r3, [sp, #20]
 801aa36:	6861      	ldr	r1, [r4, #4]
 801aa38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801aa3c:	2300      	movs	r3, #0
 801aa3e:	9303      	str	r3, [sp, #12]
 801aa40:	ab0a      	add	r3, sp, #40	; 0x28
 801aa42:	e9cd b301 	strd	fp, r3, [sp, #4]
 801aa46:	ab09      	add	r3, sp, #36	; 0x24
 801aa48:	ec49 8b10 	vmov	d0, r8, r9
 801aa4c:	9300      	str	r3, [sp, #0]
 801aa4e:	6022      	str	r2, [r4, #0]
 801aa50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801aa54:	4628      	mov	r0, r5
 801aa56:	f7ff fecd 	bl	801a7f4 <__cvt>
 801aa5a:	9b06      	ldr	r3, [sp, #24]
 801aa5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801aa5e:	2b47      	cmp	r3, #71	; 0x47
 801aa60:	4680      	mov	r8, r0
 801aa62:	d108      	bne.n	801aa76 <_printf_float+0x142>
 801aa64:	1cc8      	adds	r0, r1, #3
 801aa66:	db02      	blt.n	801aa6e <_printf_float+0x13a>
 801aa68:	6863      	ldr	r3, [r4, #4]
 801aa6a:	4299      	cmp	r1, r3
 801aa6c:	dd41      	ble.n	801aaf2 <_printf_float+0x1be>
 801aa6e:	f1ab 0b02 	sub.w	fp, fp, #2
 801aa72:	fa5f fb8b 	uxtb.w	fp, fp
 801aa76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801aa7a:	d820      	bhi.n	801aabe <_printf_float+0x18a>
 801aa7c:	3901      	subs	r1, #1
 801aa7e:	465a      	mov	r2, fp
 801aa80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801aa84:	9109      	str	r1, [sp, #36]	; 0x24
 801aa86:	f7ff ff17 	bl	801a8b8 <__exponent>
 801aa8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801aa8c:	1813      	adds	r3, r2, r0
 801aa8e:	2a01      	cmp	r2, #1
 801aa90:	4681      	mov	r9, r0
 801aa92:	6123      	str	r3, [r4, #16]
 801aa94:	dc02      	bgt.n	801aa9c <_printf_float+0x168>
 801aa96:	6822      	ldr	r2, [r4, #0]
 801aa98:	07d2      	lsls	r2, r2, #31
 801aa9a:	d501      	bpl.n	801aaa0 <_printf_float+0x16c>
 801aa9c:	3301      	adds	r3, #1
 801aa9e:	6123      	str	r3, [r4, #16]
 801aaa0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	d09c      	beq.n	801a9e2 <_printf_float+0xae>
 801aaa8:	232d      	movs	r3, #45	; 0x2d
 801aaaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aaae:	e798      	b.n	801a9e2 <_printf_float+0xae>
 801aab0:	9a06      	ldr	r2, [sp, #24]
 801aab2:	2a47      	cmp	r2, #71	; 0x47
 801aab4:	d1be      	bne.n	801aa34 <_printf_float+0x100>
 801aab6:	2b00      	cmp	r3, #0
 801aab8:	d1bc      	bne.n	801aa34 <_printf_float+0x100>
 801aaba:	2301      	movs	r3, #1
 801aabc:	e7b9      	b.n	801aa32 <_printf_float+0xfe>
 801aabe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801aac2:	d118      	bne.n	801aaf6 <_printf_float+0x1c2>
 801aac4:	2900      	cmp	r1, #0
 801aac6:	6863      	ldr	r3, [r4, #4]
 801aac8:	dd0b      	ble.n	801aae2 <_printf_float+0x1ae>
 801aaca:	6121      	str	r1, [r4, #16]
 801aacc:	b913      	cbnz	r3, 801aad4 <_printf_float+0x1a0>
 801aace:	6822      	ldr	r2, [r4, #0]
 801aad0:	07d0      	lsls	r0, r2, #31
 801aad2:	d502      	bpl.n	801aada <_printf_float+0x1a6>
 801aad4:	3301      	adds	r3, #1
 801aad6:	440b      	add	r3, r1
 801aad8:	6123      	str	r3, [r4, #16]
 801aada:	65a1      	str	r1, [r4, #88]	; 0x58
 801aadc:	f04f 0900 	mov.w	r9, #0
 801aae0:	e7de      	b.n	801aaa0 <_printf_float+0x16c>
 801aae2:	b913      	cbnz	r3, 801aaea <_printf_float+0x1b6>
 801aae4:	6822      	ldr	r2, [r4, #0]
 801aae6:	07d2      	lsls	r2, r2, #31
 801aae8:	d501      	bpl.n	801aaee <_printf_float+0x1ba>
 801aaea:	3302      	adds	r3, #2
 801aaec:	e7f4      	b.n	801aad8 <_printf_float+0x1a4>
 801aaee:	2301      	movs	r3, #1
 801aaf0:	e7f2      	b.n	801aad8 <_printf_float+0x1a4>
 801aaf2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801aaf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aaf8:	4299      	cmp	r1, r3
 801aafa:	db05      	blt.n	801ab08 <_printf_float+0x1d4>
 801aafc:	6823      	ldr	r3, [r4, #0]
 801aafe:	6121      	str	r1, [r4, #16]
 801ab00:	07d8      	lsls	r0, r3, #31
 801ab02:	d5ea      	bpl.n	801aada <_printf_float+0x1a6>
 801ab04:	1c4b      	adds	r3, r1, #1
 801ab06:	e7e7      	b.n	801aad8 <_printf_float+0x1a4>
 801ab08:	2900      	cmp	r1, #0
 801ab0a:	bfd4      	ite	le
 801ab0c:	f1c1 0202 	rsble	r2, r1, #2
 801ab10:	2201      	movgt	r2, #1
 801ab12:	4413      	add	r3, r2
 801ab14:	e7e0      	b.n	801aad8 <_printf_float+0x1a4>
 801ab16:	6823      	ldr	r3, [r4, #0]
 801ab18:	055a      	lsls	r2, r3, #21
 801ab1a:	d407      	bmi.n	801ab2c <_printf_float+0x1f8>
 801ab1c:	6923      	ldr	r3, [r4, #16]
 801ab1e:	4642      	mov	r2, r8
 801ab20:	4631      	mov	r1, r6
 801ab22:	4628      	mov	r0, r5
 801ab24:	47b8      	blx	r7
 801ab26:	3001      	adds	r0, #1
 801ab28:	d12c      	bne.n	801ab84 <_printf_float+0x250>
 801ab2a:	e764      	b.n	801a9f6 <_printf_float+0xc2>
 801ab2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801ab30:	f240 80e0 	bls.w	801acf4 <_printf_float+0x3c0>
 801ab34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801ab38:	2200      	movs	r2, #0
 801ab3a:	2300      	movs	r3, #0
 801ab3c:	f7e5 ffe4 	bl	8000b08 <__aeabi_dcmpeq>
 801ab40:	2800      	cmp	r0, #0
 801ab42:	d034      	beq.n	801abae <_printf_float+0x27a>
 801ab44:	4a37      	ldr	r2, [pc, #220]	; (801ac24 <_printf_float+0x2f0>)
 801ab46:	2301      	movs	r3, #1
 801ab48:	4631      	mov	r1, r6
 801ab4a:	4628      	mov	r0, r5
 801ab4c:	47b8      	blx	r7
 801ab4e:	3001      	adds	r0, #1
 801ab50:	f43f af51 	beq.w	801a9f6 <_printf_float+0xc2>
 801ab54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ab58:	429a      	cmp	r2, r3
 801ab5a:	db02      	blt.n	801ab62 <_printf_float+0x22e>
 801ab5c:	6823      	ldr	r3, [r4, #0]
 801ab5e:	07d8      	lsls	r0, r3, #31
 801ab60:	d510      	bpl.n	801ab84 <_printf_float+0x250>
 801ab62:	ee18 3a10 	vmov	r3, s16
 801ab66:	4652      	mov	r2, sl
 801ab68:	4631      	mov	r1, r6
 801ab6a:	4628      	mov	r0, r5
 801ab6c:	47b8      	blx	r7
 801ab6e:	3001      	adds	r0, #1
 801ab70:	f43f af41 	beq.w	801a9f6 <_printf_float+0xc2>
 801ab74:	f04f 0800 	mov.w	r8, #0
 801ab78:	f104 091a 	add.w	r9, r4, #26
 801ab7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ab7e:	3b01      	subs	r3, #1
 801ab80:	4543      	cmp	r3, r8
 801ab82:	dc09      	bgt.n	801ab98 <_printf_float+0x264>
 801ab84:	6823      	ldr	r3, [r4, #0]
 801ab86:	079b      	lsls	r3, r3, #30
 801ab88:	f100 8105 	bmi.w	801ad96 <_printf_float+0x462>
 801ab8c:	68e0      	ldr	r0, [r4, #12]
 801ab8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ab90:	4298      	cmp	r0, r3
 801ab92:	bfb8      	it	lt
 801ab94:	4618      	movlt	r0, r3
 801ab96:	e730      	b.n	801a9fa <_printf_float+0xc6>
 801ab98:	2301      	movs	r3, #1
 801ab9a:	464a      	mov	r2, r9
 801ab9c:	4631      	mov	r1, r6
 801ab9e:	4628      	mov	r0, r5
 801aba0:	47b8      	blx	r7
 801aba2:	3001      	adds	r0, #1
 801aba4:	f43f af27 	beq.w	801a9f6 <_printf_float+0xc2>
 801aba8:	f108 0801 	add.w	r8, r8, #1
 801abac:	e7e6      	b.n	801ab7c <_printf_float+0x248>
 801abae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	dc39      	bgt.n	801ac28 <_printf_float+0x2f4>
 801abb4:	4a1b      	ldr	r2, [pc, #108]	; (801ac24 <_printf_float+0x2f0>)
 801abb6:	2301      	movs	r3, #1
 801abb8:	4631      	mov	r1, r6
 801abba:	4628      	mov	r0, r5
 801abbc:	47b8      	blx	r7
 801abbe:	3001      	adds	r0, #1
 801abc0:	f43f af19 	beq.w	801a9f6 <_printf_float+0xc2>
 801abc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801abc8:	4313      	orrs	r3, r2
 801abca:	d102      	bne.n	801abd2 <_printf_float+0x29e>
 801abcc:	6823      	ldr	r3, [r4, #0]
 801abce:	07d9      	lsls	r1, r3, #31
 801abd0:	d5d8      	bpl.n	801ab84 <_printf_float+0x250>
 801abd2:	ee18 3a10 	vmov	r3, s16
 801abd6:	4652      	mov	r2, sl
 801abd8:	4631      	mov	r1, r6
 801abda:	4628      	mov	r0, r5
 801abdc:	47b8      	blx	r7
 801abde:	3001      	adds	r0, #1
 801abe0:	f43f af09 	beq.w	801a9f6 <_printf_float+0xc2>
 801abe4:	f04f 0900 	mov.w	r9, #0
 801abe8:	f104 0a1a 	add.w	sl, r4, #26
 801abec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abee:	425b      	negs	r3, r3
 801abf0:	454b      	cmp	r3, r9
 801abf2:	dc01      	bgt.n	801abf8 <_printf_float+0x2c4>
 801abf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801abf6:	e792      	b.n	801ab1e <_printf_float+0x1ea>
 801abf8:	2301      	movs	r3, #1
 801abfa:	4652      	mov	r2, sl
 801abfc:	4631      	mov	r1, r6
 801abfe:	4628      	mov	r0, r5
 801ac00:	47b8      	blx	r7
 801ac02:	3001      	adds	r0, #1
 801ac04:	f43f aef7 	beq.w	801a9f6 <_printf_float+0xc2>
 801ac08:	f109 0901 	add.w	r9, r9, #1
 801ac0c:	e7ee      	b.n	801abec <_printf_float+0x2b8>
 801ac0e:	bf00      	nop
 801ac10:	7fefffff 	.word	0x7fefffff
 801ac14:	08022200 	.word	0x08022200
 801ac18:	08022204 	.word	0x08022204
 801ac1c:	0802220c 	.word	0x0802220c
 801ac20:	08022208 	.word	0x08022208
 801ac24:	080225d1 	.word	0x080225d1
 801ac28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ac2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ac2c:	429a      	cmp	r2, r3
 801ac2e:	bfa8      	it	ge
 801ac30:	461a      	movge	r2, r3
 801ac32:	2a00      	cmp	r2, #0
 801ac34:	4691      	mov	r9, r2
 801ac36:	dc37      	bgt.n	801aca8 <_printf_float+0x374>
 801ac38:	f04f 0b00 	mov.w	fp, #0
 801ac3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ac40:	f104 021a 	add.w	r2, r4, #26
 801ac44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ac46:	9305      	str	r3, [sp, #20]
 801ac48:	eba3 0309 	sub.w	r3, r3, r9
 801ac4c:	455b      	cmp	r3, fp
 801ac4e:	dc33      	bgt.n	801acb8 <_printf_float+0x384>
 801ac50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ac54:	429a      	cmp	r2, r3
 801ac56:	db3b      	blt.n	801acd0 <_printf_float+0x39c>
 801ac58:	6823      	ldr	r3, [r4, #0]
 801ac5a:	07da      	lsls	r2, r3, #31
 801ac5c:	d438      	bmi.n	801acd0 <_printf_float+0x39c>
 801ac5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ac60:	9b05      	ldr	r3, [sp, #20]
 801ac62:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ac64:	1ad3      	subs	r3, r2, r3
 801ac66:	eba2 0901 	sub.w	r9, r2, r1
 801ac6a:	4599      	cmp	r9, r3
 801ac6c:	bfa8      	it	ge
 801ac6e:	4699      	movge	r9, r3
 801ac70:	f1b9 0f00 	cmp.w	r9, #0
 801ac74:	dc35      	bgt.n	801ace2 <_printf_float+0x3ae>
 801ac76:	f04f 0800 	mov.w	r8, #0
 801ac7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ac7e:	f104 0a1a 	add.w	sl, r4, #26
 801ac82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ac86:	1a9b      	subs	r3, r3, r2
 801ac88:	eba3 0309 	sub.w	r3, r3, r9
 801ac8c:	4543      	cmp	r3, r8
 801ac8e:	f77f af79 	ble.w	801ab84 <_printf_float+0x250>
 801ac92:	2301      	movs	r3, #1
 801ac94:	4652      	mov	r2, sl
 801ac96:	4631      	mov	r1, r6
 801ac98:	4628      	mov	r0, r5
 801ac9a:	47b8      	blx	r7
 801ac9c:	3001      	adds	r0, #1
 801ac9e:	f43f aeaa 	beq.w	801a9f6 <_printf_float+0xc2>
 801aca2:	f108 0801 	add.w	r8, r8, #1
 801aca6:	e7ec      	b.n	801ac82 <_printf_float+0x34e>
 801aca8:	4613      	mov	r3, r2
 801acaa:	4631      	mov	r1, r6
 801acac:	4642      	mov	r2, r8
 801acae:	4628      	mov	r0, r5
 801acb0:	47b8      	blx	r7
 801acb2:	3001      	adds	r0, #1
 801acb4:	d1c0      	bne.n	801ac38 <_printf_float+0x304>
 801acb6:	e69e      	b.n	801a9f6 <_printf_float+0xc2>
 801acb8:	2301      	movs	r3, #1
 801acba:	4631      	mov	r1, r6
 801acbc:	4628      	mov	r0, r5
 801acbe:	9205      	str	r2, [sp, #20]
 801acc0:	47b8      	blx	r7
 801acc2:	3001      	adds	r0, #1
 801acc4:	f43f ae97 	beq.w	801a9f6 <_printf_float+0xc2>
 801acc8:	9a05      	ldr	r2, [sp, #20]
 801acca:	f10b 0b01 	add.w	fp, fp, #1
 801acce:	e7b9      	b.n	801ac44 <_printf_float+0x310>
 801acd0:	ee18 3a10 	vmov	r3, s16
 801acd4:	4652      	mov	r2, sl
 801acd6:	4631      	mov	r1, r6
 801acd8:	4628      	mov	r0, r5
 801acda:	47b8      	blx	r7
 801acdc:	3001      	adds	r0, #1
 801acde:	d1be      	bne.n	801ac5e <_printf_float+0x32a>
 801ace0:	e689      	b.n	801a9f6 <_printf_float+0xc2>
 801ace2:	9a05      	ldr	r2, [sp, #20]
 801ace4:	464b      	mov	r3, r9
 801ace6:	4442      	add	r2, r8
 801ace8:	4631      	mov	r1, r6
 801acea:	4628      	mov	r0, r5
 801acec:	47b8      	blx	r7
 801acee:	3001      	adds	r0, #1
 801acf0:	d1c1      	bne.n	801ac76 <_printf_float+0x342>
 801acf2:	e680      	b.n	801a9f6 <_printf_float+0xc2>
 801acf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801acf6:	2a01      	cmp	r2, #1
 801acf8:	dc01      	bgt.n	801acfe <_printf_float+0x3ca>
 801acfa:	07db      	lsls	r3, r3, #31
 801acfc:	d538      	bpl.n	801ad70 <_printf_float+0x43c>
 801acfe:	2301      	movs	r3, #1
 801ad00:	4642      	mov	r2, r8
 801ad02:	4631      	mov	r1, r6
 801ad04:	4628      	mov	r0, r5
 801ad06:	47b8      	blx	r7
 801ad08:	3001      	adds	r0, #1
 801ad0a:	f43f ae74 	beq.w	801a9f6 <_printf_float+0xc2>
 801ad0e:	ee18 3a10 	vmov	r3, s16
 801ad12:	4652      	mov	r2, sl
 801ad14:	4631      	mov	r1, r6
 801ad16:	4628      	mov	r0, r5
 801ad18:	47b8      	blx	r7
 801ad1a:	3001      	adds	r0, #1
 801ad1c:	f43f ae6b 	beq.w	801a9f6 <_printf_float+0xc2>
 801ad20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801ad24:	2200      	movs	r2, #0
 801ad26:	2300      	movs	r3, #0
 801ad28:	f7e5 feee 	bl	8000b08 <__aeabi_dcmpeq>
 801ad2c:	b9d8      	cbnz	r0, 801ad66 <_printf_float+0x432>
 801ad2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad30:	f108 0201 	add.w	r2, r8, #1
 801ad34:	3b01      	subs	r3, #1
 801ad36:	4631      	mov	r1, r6
 801ad38:	4628      	mov	r0, r5
 801ad3a:	47b8      	blx	r7
 801ad3c:	3001      	adds	r0, #1
 801ad3e:	d10e      	bne.n	801ad5e <_printf_float+0x42a>
 801ad40:	e659      	b.n	801a9f6 <_printf_float+0xc2>
 801ad42:	2301      	movs	r3, #1
 801ad44:	4652      	mov	r2, sl
 801ad46:	4631      	mov	r1, r6
 801ad48:	4628      	mov	r0, r5
 801ad4a:	47b8      	blx	r7
 801ad4c:	3001      	adds	r0, #1
 801ad4e:	f43f ae52 	beq.w	801a9f6 <_printf_float+0xc2>
 801ad52:	f108 0801 	add.w	r8, r8, #1
 801ad56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad58:	3b01      	subs	r3, #1
 801ad5a:	4543      	cmp	r3, r8
 801ad5c:	dcf1      	bgt.n	801ad42 <_printf_float+0x40e>
 801ad5e:	464b      	mov	r3, r9
 801ad60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801ad64:	e6dc      	b.n	801ab20 <_printf_float+0x1ec>
 801ad66:	f04f 0800 	mov.w	r8, #0
 801ad6a:	f104 0a1a 	add.w	sl, r4, #26
 801ad6e:	e7f2      	b.n	801ad56 <_printf_float+0x422>
 801ad70:	2301      	movs	r3, #1
 801ad72:	4642      	mov	r2, r8
 801ad74:	e7df      	b.n	801ad36 <_printf_float+0x402>
 801ad76:	2301      	movs	r3, #1
 801ad78:	464a      	mov	r2, r9
 801ad7a:	4631      	mov	r1, r6
 801ad7c:	4628      	mov	r0, r5
 801ad7e:	47b8      	blx	r7
 801ad80:	3001      	adds	r0, #1
 801ad82:	f43f ae38 	beq.w	801a9f6 <_printf_float+0xc2>
 801ad86:	f108 0801 	add.w	r8, r8, #1
 801ad8a:	68e3      	ldr	r3, [r4, #12]
 801ad8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ad8e:	1a5b      	subs	r3, r3, r1
 801ad90:	4543      	cmp	r3, r8
 801ad92:	dcf0      	bgt.n	801ad76 <_printf_float+0x442>
 801ad94:	e6fa      	b.n	801ab8c <_printf_float+0x258>
 801ad96:	f04f 0800 	mov.w	r8, #0
 801ad9a:	f104 0919 	add.w	r9, r4, #25
 801ad9e:	e7f4      	b.n	801ad8a <_printf_float+0x456>

0801ada0 <_printf_common>:
 801ada0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ada4:	4616      	mov	r6, r2
 801ada6:	4699      	mov	r9, r3
 801ada8:	688a      	ldr	r2, [r1, #8]
 801adaa:	690b      	ldr	r3, [r1, #16]
 801adac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801adb0:	4293      	cmp	r3, r2
 801adb2:	bfb8      	it	lt
 801adb4:	4613      	movlt	r3, r2
 801adb6:	6033      	str	r3, [r6, #0]
 801adb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801adbc:	4607      	mov	r7, r0
 801adbe:	460c      	mov	r4, r1
 801adc0:	b10a      	cbz	r2, 801adc6 <_printf_common+0x26>
 801adc2:	3301      	adds	r3, #1
 801adc4:	6033      	str	r3, [r6, #0]
 801adc6:	6823      	ldr	r3, [r4, #0]
 801adc8:	0699      	lsls	r1, r3, #26
 801adca:	bf42      	ittt	mi
 801adcc:	6833      	ldrmi	r3, [r6, #0]
 801adce:	3302      	addmi	r3, #2
 801add0:	6033      	strmi	r3, [r6, #0]
 801add2:	6825      	ldr	r5, [r4, #0]
 801add4:	f015 0506 	ands.w	r5, r5, #6
 801add8:	d106      	bne.n	801ade8 <_printf_common+0x48>
 801adda:	f104 0a19 	add.w	sl, r4, #25
 801adde:	68e3      	ldr	r3, [r4, #12]
 801ade0:	6832      	ldr	r2, [r6, #0]
 801ade2:	1a9b      	subs	r3, r3, r2
 801ade4:	42ab      	cmp	r3, r5
 801ade6:	dc26      	bgt.n	801ae36 <_printf_common+0x96>
 801ade8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801adec:	1e13      	subs	r3, r2, #0
 801adee:	6822      	ldr	r2, [r4, #0]
 801adf0:	bf18      	it	ne
 801adf2:	2301      	movne	r3, #1
 801adf4:	0692      	lsls	r2, r2, #26
 801adf6:	d42b      	bmi.n	801ae50 <_printf_common+0xb0>
 801adf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801adfc:	4649      	mov	r1, r9
 801adfe:	4638      	mov	r0, r7
 801ae00:	47c0      	blx	r8
 801ae02:	3001      	adds	r0, #1
 801ae04:	d01e      	beq.n	801ae44 <_printf_common+0xa4>
 801ae06:	6823      	ldr	r3, [r4, #0]
 801ae08:	68e5      	ldr	r5, [r4, #12]
 801ae0a:	6832      	ldr	r2, [r6, #0]
 801ae0c:	f003 0306 	and.w	r3, r3, #6
 801ae10:	2b04      	cmp	r3, #4
 801ae12:	bf08      	it	eq
 801ae14:	1aad      	subeq	r5, r5, r2
 801ae16:	68a3      	ldr	r3, [r4, #8]
 801ae18:	6922      	ldr	r2, [r4, #16]
 801ae1a:	bf0c      	ite	eq
 801ae1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ae20:	2500      	movne	r5, #0
 801ae22:	4293      	cmp	r3, r2
 801ae24:	bfc4      	itt	gt
 801ae26:	1a9b      	subgt	r3, r3, r2
 801ae28:	18ed      	addgt	r5, r5, r3
 801ae2a:	2600      	movs	r6, #0
 801ae2c:	341a      	adds	r4, #26
 801ae2e:	42b5      	cmp	r5, r6
 801ae30:	d11a      	bne.n	801ae68 <_printf_common+0xc8>
 801ae32:	2000      	movs	r0, #0
 801ae34:	e008      	b.n	801ae48 <_printf_common+0xa8>
 801ae36:	2301      	movs	r3, #1
 801ae38:	4652      	mov	r2, sl
 801ae3a:	4649      	mov	r1, r9
 801ae3c:	4638      	mov	r0, r7
 801ae3e:	47c0      	blx	r8
 801ae40:	3001      	adds	r0, #1
 801ae42:	d103      	bne.n	801ae4c <_printf_common+0xac>
 801ae44:	f04f 30ff 	mov.w	r0, #4294967295
 801ae48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae4c:	3501      	adds	r5, #1
 801ae4e:	e7c6      	b.n	801adde <_printf_common+0x3e>
 801ae50:	18e1      	adds	r1, r4, r3
 801ae52:	1c5a      	adds	r2, r3, #1
 801ae54:	2030      	movs	r0, #48	; 0x30
 801ae56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ae5a:	4422      	add	r2, r4
 801ae5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ae60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ae64:	3302      	adds	r3, #2
 801ae66:	e7c7      	b.n	801adf8 <_printf_common+0x58>
 801ae68:	2301      	movs	r3, #1
 801ae6a:	4622      	mov	r2, r4
 801ae6c:	4649      	mov	r1, r9
 801ae6e:	4638      	mov	r0, r7
 801ae70:	47c0      	blx	r8
 801ae72:	3001      	adds	r0, #1
 801ae74:	d0e6      	beq.n	801ae44 <_printf_common+0xa4>
 801ae76:	3601      	adds	r6, #1
 801ae78:	e7d9      	b.n	801ae2e <_printf_common+0x8e>
	...

0801ae7c <_printf_i>:
 801ae7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ae80:	460c      	mov	r4, r1
 801ae82:	4691      	mov	r9, r2
 801ae84:	7e27      	ldrb	r7, [r4, #24]
 801ae86:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ae88:	2f78      	cmp	r7, #120	; 0x78
 801ae8a:	4680      	mov	r8, r0
 801ae8c:	469a      	mov	sl, r3
 801ae8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ae92:	d807      	bhi.n	801aea4 <_printf_i+0x28>
 801ae94:	2f62      	cmp	r7, #98	; 0x62
 801ae96:	d80a      	bhi.n	801aeae <_printf_i+0x32>
 801ae98:	2f00      	cmp	r7, #0
 801ae9a:	f000 80d8 	beq.w	801b04e <_printf_i+0x1d2>
 801ae9e:	2f58      	cmp	r7, #88	; 0x58
 801aea0:	f000 80a3 	beq.w	801afea <_printf_i+0x16e>
 801aea4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801aea8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801aeac:	e03a      	b.n	801af24 <_printf_i+0xa8>
 801aeae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801aeb2:	2b15      	cmp	r3, #21
 801aeb4:	d8f6      	bhi.n	801aea4 <_printf_i+0x28>
 801aeb6:	a001      	add	r0, pc, #4	; (adr r0, 801aebc <_printf_i+0x40>)
 801aeb8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801aebc:	0801af15 	.word	0x0801af15
 801aec0:	0801af29 	.word	0x0801af29
 801aec4:	0801aea5 	.word	0x0801aea5
 801aec8:	0801aea5 	.word	0x0801aea5
 801aecc:	0801aea5 	.word	0x0801aea5
 801aed0:	0801aea5 	.word	0x0801aea5
 801aed4:	0801af29 	.word	0x0801af29
 801aed8:	0801aea5 	.word	0x0801aea5
 801aedc:	0801aea5 	.word	0x0801aea5
 801aee0:	0801aea5 	.word	0x0801aea5
 801aee4:	0801aea5 	.word	0x0801aea5
 801aee8:	0801b035 	.word	0x0801b035
 801aeec:	0801af59 	.word	0x0801af59
 801aef0:	0801b017 	.word	0x0801b017
 801aef4:	0801aea5 	.word	0x0801aea5
 801aef8:	0801aea5 	.word	0x0801aea5
 801aefc:	0801b057 	.word	0x0801b057
 801af00:	0801aea5 	.word	0x0801aea5
 801af04:	0801af59 	.word	0x0801af59
 801af08:	0801aea5 	.word	0x0801aea5
 801af0c:	0801aea5 	.word	0x0801aea5
 801af10:	0801b01f 	.word	0x0801b01f
 801af14:	680b      	ldr	r3, [r1, #0]
 801af16:	1d1a      	adds	r2, r3, #4
 801af18:	681b      	ldr	r3, [r3, #0]
 801af1a:	600a      	str	r2, [r1, #0]
 801af1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801af20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801af24:	2301      	movs	r3, #1
 801af26:	e0a3      	b.n	801b070 <_printf_i+0x1f4>
 801af28:	6825      	ldr	r5, [r4, #0]
 801af2a:	6808      	ldr	r0, [r1, #0]
 801af2c:	062e      	lsls	r6, r5, #24
 801af2e:	f100 0304 	add.w	r3, r0, #4
 801af32:	d50a      	bpl.n	801af4a <_printf_i+0xce>
 801af34:	6805      	ldr	r5, [r0, #0]
 801af36:	600b      	str	r3, [r1, #0]
 801af38:	2d00      	cmp	r5, #0
 801af3a:	da03      	bge.n	801af44 <_printf_i+0xc8>
 801af3c:	232d      	movs	r3, #45	; 0x2d
 801af3e:	426d      	negs	r5, r5
 801af40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801af44:	485e      	ldr	r0, [pc, #376]	; (801b0c0 <_printf_i+0x244>)
 801af46:	230a      	movs	r3, #10
 801af48:	e019      	b.n	801af7e <_printf_i+0x102>
 801af4a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801af4e:	6805      	ldr	r5, [r0, #0]
 801af50:	600b      	str	r3, [r1, #0]
 801af52:	bf18      	it	ne
 801af54:	b22d      	sxthne	r5, r5
 801af56:	e7ef      	b.n	801af38 <_printf_i+0xbc>
 801af58:	680b      	ldr	r3, [r1, #0]
 801af5a:	6825      	ldr	r5, [r4, #0]
 801af5c:	1d18      	adds	r0, r3, #4
 801af5e:	6008      	str	r0, [r1, #0]
 801af60:	0628      	lsls	r0, r5, #24
 801af62:	d501      	bpl.n	801af68 <_printf_i+0xec>
 801af64:	681d      	ldr	r5, [r3, #0]
 801af66:	e002      	b.n	801af6e <_printf_i+0xf2>
 801af68:	0669      	lsls	r1, r5, #25
 801af6a:	d5fb      	bpl.n	801af64 <_printf_i+0xe8>
 801af6c:	881d      	ldrh	r5, [r3, #0]
 801af6e:	4854      	ldr	r0, [pc, #336]	; (801b0c0 <_printf_i+0x244>)
 801af70:	2f6f      	cmp	r7, #111	; 0x6f
 801af72:	bf0c      	ite	eq
 801af74:	2308      	moveq	r3, #8
 801af76:	230a      	movne	r3, #10
 801af78:	2100      	movs	r1, #0
 801af7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801af7e:	6866      	ldr	r6, [r4, #4]
 801af80:	60a6      	str	r6, [r4, #8]
 801af82:	2e00      	cmp	r6, #0
 801af84:	bfa2      	ittt	ge
 801af86:	6821      	ldrge	r1, [r4, #0]
 801af88:	f021 0104 	bicge.w	r1, r1, #4
 801af8c:	6021      	strge	r1, [r4, #0]
 801af8e:	b90d      	cbnz	r5, 801af94 <_printf_i+0x118>
 801af90:	2e00      	cmp	r6, #0
 801af92:	d04d      	beq.n	801b030 <_printf_i+0x1b4>
 801af94:	4616      	mov	r6, r2
 801af96:	fbb5 f1f3 	udiv	r1, r5, r3
 801af9a:	fb03 5711 	mls	r7, r3, r1, r5
 801af9e:	5dc7      	ldrb	r7, [r0, r7]
 801afa0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801afa4:	462f      	mov	r7, r5
 801afa6:	42bb      	cmp	r3, r7
 801afa8:	460d      	mov	r5, r1
 801afaa:	d9f4      	bls.n	801af96 <_printf_i+0x11a>
 801afac:	2b08      	cmp	r3, #8
 801afae:	d10b      	bne.n	801afc8 <_printf_i+0x14c>
 801afb0:	6823      	ldr	r3, [r4, #0]
 801afb2:	07df      	lsls	r7, r3, #31
 801afb4:	d508      	bpl.n	801afc8 <_printf_i+0x14c>
 801afb6:	6923      	ldr	r3, [r4, #16]
 801afb8:	6861      	ldr	r1, [r4, #4]
 801afba:	4299      	cmp	r1, r3
 801afbc:	bfde      	ittt	le
 801afbe:	2330      	movle	r3, #48	; 0x30
 801afc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 801afc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 801afc8:	1b92      	subs	r2, r2, r6
 801afca:	6122      	str	r2, [r4, #16]
 801afcc:	f8cd a000 	str.w	sl, [sp]
 801afd0:	464b      	mov	r3, r9
 801afd2:	aa03      	add	r2, sp, #12
 801afd4:	4621      	mov	r1, r4
 801afd6:	4640      	mov	r0, r8
 801afd8:	f7ff fee2 	bl	801ada0 <_printf_common>
 801afdc:	3001      	adds	r0, #1
 801afde:	d14c      	bne.n	801b07a <_printf_i+0x1fe>
 801afe0:	f04f 30ff 	mov.w	r0, #4294967295
 801afe4:	b004      	add	sp, #16
 801afe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801afea:	4835      	ldr	r0, [pc, #212]	; (801b0c0 <_printf_i+0x244>)
 801afec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801aff0:	6823      	ldr	r3, [r4, #0]
 801aff2:	680e      	ldr	r6, [r1, #0]
 801aff4:	061f      	lsls	r7, r3, #24
 801aff6:	f856 5b04 	ldr.w	r5, [r6], #4
 801affa:	600e      	str	r6, [r1, #0]
 801affc:	d514      	bpl.n	801b028 <_printf_i+0x1ac>
 801affe:	07d9      	lsls	r1, r3, #31
 801b000:	bf44      	itt	mi
 801b002:	f043 0320 	orrmi.w	r3, r3, #32
 801b006:	6023      	strmi	r3, [r4, #0]
 801b008:	b91d      	cbnz	r5, 801b012 <_printf_i+0x196>
 801b00a:	6823      	ldr	r3, [r4, #0]
 801b00c:	f023 0320 	bic.w	r3, r3, #32
 801b010:	6023      	str	r3, [r4, #0]
 801b012:	2310      	movs	r3, #16
 801b014:	e7b0      	b.n	801af78 <_printf_i+0xfc>
 801b016:	6823      	ldr	r3, [r4, #0]
 801b018:	f043 0320 	orr.w	r3, r3, #32
 801b01c:	6023      	str	r3, [r4, #0]
 801b01e:	2378      	movs	r3, #120	; 0x78
 801b020:	4828      	ldr	r0, [pc, #160]	; (801b0c4 <_printf_i+0x248>)
 801b022:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b026:	e7e3      	b.n	801aff0 <_printf_i+0x174>
 801b028:	065e      	lsls	r6, r3, #25
 801b02a:	bf48      	it	mi
 801b02c:	b2ad      	uxthmi	r5, r5
 801b02e:	e7e6      	b.n	801affe <_printf_i+0x182>
 801b030:	4616      	mov	r6, r2
 801b032:	e7bb      	b.n	801afac <_printf_i+0x130>
 801b034:	680b      	ldr	r3, [r1, #0]
 801b036:	6826      	ldr	r6, [r4, #0]
 801b038:	6960      	ldr	r0, [r4, #20]
 801b03a:	1d1d      	adds	r5, r3, #4
 801b03c:	600d      	str	r5, [r1, #0]
 801b03e:	0635      	lsls	r5, r6, #24
 801b040:	681b      	ldr	r3, [r3, #0]
 801b042:	d501      	bpl.n	801b048 <_printf_i+0x1cc>
 801b044:	6018      	str	r0, [r3, #0]
 801b046:	e002      	b.n	801b04e <_printf_i+0x1d2>
 801b048:	0671      	lsls	r1, r6, #25
 801b04a:	d5fb      	bpl.n	801b044 <_printf_i+0x1c8>
 801b04c:	8018      	strh	r0, [r3, #0]
 801b04e:	2300      	movs	r3, #0
 801b050:	6123      	str	r3, [r4, #16]
 801b052:	4616      	mov	r6, r2
 801b054:	e7ba      	b.n	801afcc <_printf_i+0x150>
 801b056:	680b      	ldr	r3, [r1, #0]
 801b058:	1d1a      	adds	r2, r3, #4
 801b05a:	600a      	str	r2, [r1, #0]
 801b05c:	681e      	ldr	r6, [r3, #0]
 801b05e:	6862      	ldr	r2, [r4, #4]
 801b060:	2100      	movs	r1, #0
 801b062:	4630      	mov	r0, r6
 801b064:	f7e5 f8dc 	bl	8000220 <memchr>
 801b068:	b108      	cbz	r0, 801b06e <_printf_i+0x1f2>
 801b06a:	1b80      	subs	r0, r0, r6
 801b06c:	6060      	str	r0, [r4, #4]
 801b06e:	6863      	ldr	r3, [r4, #4]
 801b070:	6123      	str	r3, [r4, #16]
 801b072:	2300      	movs	r3, #0
 801b074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b078:	e7a8      	b.n	801afcc <_printf_i+0x150>
 801b07a:	6923      	ldr	r3, [r4, #16]
 801b07c:	4632      	mov	r2, r6
 801b07e:	4649      	mov	r1, r9
 801b080:	4640      	mov	r0, r8
 801b082:	47d0      	blx	sl
 801b084:	3001      	adds	r0, #1
 801b086:	d0ab      	beq.n	801afe0 <_printf_i+0x164>
 801b088:	6823      	ldr	r3, [r4, #0]
 801b08a:	079b      	lsls	r3, r3, #30
 801b08c:	d413      	bmi.n	801b0b6 <_printf_i+0x23a>
 801b08e:	68e0      	ldr	r0, [r4, #12]
 801b090:	9b03      	ldr	r3, [sp, #12]
 801b092:	4298      	cmp	r0, r3
 801b094:	bfb8      	it	lt
 801b096:	4618      	movlt	r0, r3
 801b098:	e7a4      	b.n	801afe4 <_printf_i+0x168>
 801b09a:	2301      	movs	r3, #1
 801b09c:	4632      	mov	r2, r6
 801b09e:	4649      	mov	r1, r9
 801b0a0:	4640      	mov	r0, r8
 801b0a2:	47d0      	blx	sl
 801b0a4:	3001      	adds	r0, #1
 801b0a6:	d09b      	beq.n	801afe0 <_printf_i+0x164>
 801b0a8:	3501      	adds	r5, #1
 801b0aa:	68e3      	ldr	r3, [r4, #12]
 801b0ac:	9903      	ldr	r1, [sp, #12]
 801b0ae:	1a5b      	subs	r3, r3, r1
 801b0b0:	42ab      	cmp	r3, r5
 801b0b2:	dcf2      	bgt.n	801b09a <_printf_i+0x21e>
 801b0b4:	e7eb      	b.n	801b08e <_printf_i+0x212>
 801b0b6:	2500      	movs	r5, #0
 801b0b8:	f104 0619 	add.w	r6, r4, #25
 801b0bc:	e7f5      	b.n	801b0aa <_printf_i+0x22e>
 801b0be:	bf00      	nop
 801b0c0:	08022210 	.word	0x08022210
 801b0c4:	08022221 	.word	0x08022221

0801b0c8 <_scanf_float>:
 801b0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0cc:	b087      	sub	sp, #28
 801b0ce:	4617      	mov	r7, r2
 801b0d0:	9303      	str	r3, [sp, #12]
 801b0d2:	688b      	ldr	r3, [r1, #8]
 801b0d4:	1e5a      	subs	r2, r3, #1
 801b0d6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b0da:	bf83      	ittte	hi
 801b0dc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b0e0:	195b      	addhi	r3, r3, r5
 801b0e2:	9302      	strhi	r3, [sp, #8]
 801b0e4:	2300      	movls	r3, #0
 801b0e6:	bf86      	itte	hi
 801b0e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 801b0ec:	608b      	strhi	r3, [r1, #8]
 801b0ee:	9302      	strls	r3, [sp, #8]
 801b0f0:	680b      	ldr	r3, [r1, #0]
 801b0f2:	468b      	mov	fp, r1
 801b0f4:	2500      	movs	r5, #0
 801b0f6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801b0fa:	f84b 3b1c 	str.w	r3, [fp], #28
 801b0fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b102:	4680      	mov	r8, r0
 801b104:	460c      	mov	r4, r1
 801b106:	465e      	mov	r6, fp
 801b108:	46aa      	mov	sl, r5
 801b10a:	46a9      	mov	r9, r5
 801b10c:	9501      	str	r5, [sp, #4]
 801b10e:	68a2      	ldr	r2, [r4, #8]
 801b110:	b152      	cbz	r2, 801b128 <_scanf_float+0x60>
 801b112:	683b      	ldr	r3, [r7, #0]
 801b114:	781b      	ldrb	r3, [r3, #0]
 801b116:	2b4e      	cmp	r3, #78	; 0x4e
 801b118:	d864      	bhi.n	801b1e4 <_scanf_float+0x11c>
 801b11a:	2b40      	cmp	r3, #64	; 0x40
 801b11c:	d83c      	bhi.n	801b198 <_scanf_float+0xd0>
 801b11e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801b122:	b2c8      	uxtb	r0, r1
 801b124:	280e      	cmp	r0, #14
 801b126:	d93a      	bls.n	801b19e <_scanf_float+0xd6>
 801b128:	f1b9 0f00 	cmp.w	r9, #0
 801b12c:	d003      	beq.n	801b136 <_scanf_float+0x6e>
 801b12e:	6823      	ldr	r3, [r4, #0]
 801b130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b134:	6023      	str	r3, [r4, #0]
 801b136:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b13a:	f1ba 0f01 	cmp.w	sl, #1
 801b13e:	f200 8113 	bhi.w	801b368 <_scanf_float+0x2a0>
 801b142:	455e      	cmp	r6, fp
 801b144:	f200 8105 	bhi.w	801b352 <_scanf_float+0x28a>
 801b148:	2501      	movs	r5, #1
 801b14a:	4628      	mov	r0, r5
 801b14c:	b007      	add	sp, #28
 801b14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b152:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801b156:	2a0d      	cmp	r2, #13
 801b158:	d8e6      	bhi.n	801b128 <_scanf_float+0x60>
 801b15a:	a101      	add	r1, pc, #4	; (adr r1, 801b160 <_scanf_float+0x98>)
 801b15c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b160:	0801b29f 	.word	0x0801b29f
 801b164:	0801b129 	.word	0x0801b129
 801b168:	0801b129 	.word	0x0801b129
 801b16c:	0801b129 	.word	0x0801b129
 801b170:	0801b2ff 	.word	0x0801b2ff
 801b174:	0801b2d7 	.word	0x0801b2d7
 801b178:	0801b129 	.word	0x0801b129
 801b17c:	0801b129 	.word	0x0801b129
 801b180:	0801b2ad 	.word	0x0801b2ad
 801b184:	0801b129 	.word	0x0801b129
 801b188:	0801b129 	.word	0x0801b129
 801b18c:	0801b129 	.word	0x0801b129
 801b190:	0801b129 	.word	0x0801b129
 801b194:	0801b265 	.word	0x0801b265
 801b198:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801b19c:	e7db      	b.n	801b156 <_scanf_float+0x8e>
 801b19e:	290e      	cmp	r1, #14
 801b1a0:	d8c2      	bhi.n	801b128 <_scanf_float+0x60>
 801b1a2:	a001      	add	r0, pc, #4	; (adr r0, 801b1a8 <_scanf_float+0xe0>)
 801b1a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801b1a8:	0801b257 	.word	0x0801b257
 801b1ac:	0801b129 	.word	0x0801b129
 801b1b0:	0801b257 	.word	0x0801b257
 801b1b4:	0801b2eb 	.word	0x0801b2eb
 801b1b8:	0801b129 	.word	0x0801b129
 801b1bc:	0801b205 	.word	0x0801b205
 801b1c0:	0801b241 	.word	0x0801b241
 801b1c4:	0801b241 	.word	0x0801b241
 801b1c8:	0801b241 	.word	0x0801b241
 801b1cc:	0801b241 	.word	0x0801b241
 801b1d0:	0801b241 	.word	0x0801b241
 801b1d4:	0801b241 	.word	0x0801b241
 801b1d8:	0801b241 	.word	0x0801b241
 801b1dc:	0801b241 	.word	0x0801b241
 801b1e0:	0801b241 	.word	0x0801b241
 801b1e4:	2b6e      	cmp	r3, #110	; 0x6e
 801b1e6:	d809      	bhi.n	801b1fc <_scanf_float+0x134>
 801b1e8:	2b60      	cmp	r3, #96	; 0x60
 801b1ea:	d8b2      	bhi.n	801b152 <_scanf_float+0x8a>
 801b1ec:	2b54      	cmp	r3, #84	; 0x54
 801b1ee:	d077      	beq.n	801b2e0 <_scanf_float+0x218>
 801b1f0:	2b59      	cmp	r3, #89	; 0x59
 801b1f2:	d199      	bne.n	801b128 <_scanf_float+0x60>
 801b1f4:	2d07      	cmp	r5, #7
 801b1f6:	d197      	bne.n	801b128 <_scanf_float+0x60>
 801b1f8:	2508      	movs	r5, #8
 801b1fa:	e029      	b.n	801b250 <_scanf_float+0x188>
 801b1fc:	2b74      	cmp	r3, #116	; 0x74
 801b1fe:	d06f      	beq.n	801b2e0 <_scanf_float+0x218>
 801b200:	2b79      	cmp	r3, #121	; 0x79
 801b202:	e7f6      	b.n	801b1f2 <_scanf_float+0x12a>
 801b204:	6821      	ldr	r1, [r4, #0]
 801b206:	05c8      	lsls	r0, r1, #23
 801b208:	d51a      	bpl.n	801b240 <_scanf_float+0x178>
 801b20a:	9b02      	ldr	r3, [sp, #8]
 801b20c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801b210:	6021      	str	r1, [r4, #0]
 801b212:	f109 0901 	add.w	r9, r9, #1
 801b216:	b11b      	cbz	r3, 801b220 <_scanf_float+0x158>
 801b218:	3b01      	subs	r3, #1
 801b21a:	3201      	adds	r2, #1
 801b21c:	9302      	str	r3, [sp, #8]
 801b21e:	60a2      	str	r2, [r4, #8]
 801b220:	68a3      	ldr	r3, [r4, #8]
 801b222:	3b01      	subs	r3, #1
 801b224:	60a3      	str	r3, [r4, #8]
 801b226:	6923      	ldr	r3, [r4, #16]
 801b228:	3301      	adds	r3, #1
 801b22a:	6123      	str	r3, [r4, #16]
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	3b01      	subs	r3, #1
 801b230:	2b00      	cmp	r3, #0
 801b232:	607b      	str	r3, [r7, #4]
 801b234:	f340 8084 	ble.w	801b340 <_scanf_float+0x278>
 801b238:	683b      	ldr	r3, [r7, #0]
 801b23a:	3301      	adds	r3, #1
 801b23c:	603b      	str	r3, [r7, #0]
 801b23e:	e766      	b.n	801b10e <_scanf_float+0x46>
 801b240:	eb1a 0f05 	cmn.w	sl, r5
 801b244:	f47f af70 	bne.w	801b128 <_scanf_float+0x60>
 801b248:	6822      	ldr	r2, [r4, #0]
 801b24a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801b24e:	6022      	str	r2, [r4, #0]
 801b250:	f806 3b01 	strb.w	r3, [r6], #1
 801b254:	e7e4      	b.n	801b220 <_scanf_float+0x158>
 801b256:	6822      	ldr	r2, [r4, #0]
 801b258:	0610      	lsls	r0, r2, #24
 801b25a:	f57f af65 	bpl.w	801b128 <_scanf_float+0x60>
 801b25e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801b262:	e7f4      	b.n	801b24e <_scanf_float+0x186>
 801b264:	f1ba 0f00 	cmp.w	sl, #0
 801b268:	d10e      	bne.n	801b288 <_scanf_float+0x1c0>
 801b26a:	f1b9 0f00 	cmp.w	r9, #0
 801b26e:	d10e      	bne.n	801b28e <_scanf_float+0x1c6>
 801b270:	6822      	ldr	r2, [r4, #0]
 801b272:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b276:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b27a:	d108      	bne.n	801b28e <_scanf_float+0x1c6>
 801b27c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b280:	6022      	str	r2, [r4, #0]
 801b282:	f04f 0a01 	mov.w	sl, #1
 801b286:	e7e3      	b.n	801b250 <_scanf_float+0x188>
 801b288:	f1ba 0f02 	cmp.w	sl, #2
 801b28c:	d055      	beq.n	801b33a <_scanf_float+0x272>
 801b28e:	2d01      	cmp	r5, #1
 801b290:	d002      	beq.n	801b298 <_scanf_float+0x1d0>
 801b292:	2d04      	cmp	r5, #4
 801b294:	f47f af48 	bne.w	801b128 <_scanf_float+0x60>
 801b298:	3501      	adds	r5, #1
 801b29a:	b2ed      	uxtb	r5, r5
 801b29c:	e7d8      	b.n	801b250 <_scanf_float+0x188>
 801b29e:	f1ba 0f01 	cmp.w	sl, #1
 801b2a2:	f47f af41 	bne.w	801b128 <_scanf_float+0x60>
 801b2a6:	f04f 0a02 	mov.w	sl, #2
 801b2aa:	e7d1      	b.n	801b250 <_scanf_float+0x188>
 801b2ac:	b97d      	cbnz	r5, 801b2ce <_scanf_float+0x206>
 801b2ae:	f1b9 0f00 	cmp.w	r9, #0
 801b2b2:	f47f af3c 	bne.w	801b12e <_scanf_float+0x66>
 801b2b6:	6822      	ldr	r2, [r4, #0]
 801b2b8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b2bc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b2c0:	f47f af39 	bne.w	801b136 <_scanf_float+0x6e>
 801b2c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b2c8:	6022      	str	r2, [r4, #0]
 801b2ca:	2501      	movs	r5, #1
 801b2cc:	e7c0      	b.n	801b250 <_scanf_float+0x188>
 801b2ce:	2d03      	cmp	r5, #3
 801b2d0:	d0e2      	beq.n	801b298 <_scanf_float+0x1d0>
 801b2d2:	2d05      	cmp	r5, #5
 801b2d4:	e7de      	b.n	801b294 <_scanf_float+0x1cc>
 801b2d6:	2d02      	cmp	r5, #2
 801b2d8:	f47f af26 	bne.w	801b128 <_scanf_float+0x60>
 801b2dc:	2503      	movs	r5, #3
 801b2de:	e7b7      	b.n	801b250 <_scanf_float+0x188>
 801b2e0:	2d06      	cmp	r5, #6
 801b2e2:	f47f af21 	bne.w	801b128 <_scanf_float+0x60>
 801b2e6:	2507      	movs	r5, #7
 801b2e8:	e7b2      	b.n	801b250 <_scanf_float+0x188>
 801b2ea:	6822      	ldr	r2, [r4, #0]
 801b2ec:	0591      	lsls	r1, r2, #22
 801b2ee:	f57f af1b 	bpl.w	801b128 <_scanf_float+0x60>
 801b2f2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801b2f6:	6022      	str	r2, [r4, #0]
 801b2f8:	f8cd 9004 	str.w	r9, [sp, #4]
 801b2fc:	e7a8      	b.n	801b250 <_scanf_float+0x188>
 801b2fe:	6822      	ldr	r2, [r4, #0]
 801b300:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801b304:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801b308:	d006      	beq.n	801b318 <_scanf_float+0x250>
 801b30a:	0550      	lsls	r0, r2, #21
 801b30c:	f57f af0c 	bpl.w	801b128 <_scanf_float+0x60>
 801b310:	f1b9 0f00 	cmp.w	r9, #0
 801b314:	f43f af0f 	beq.w	801b136 <_scanf_float+0x6e>
 801b318:	0591      	lsls	r1, r2, #22
 801b31a:	bf58      	it	pl
 801b31c:	9901      	ldrpl	r1, [sp, #4]
 801b31e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b322:	bf58      	it	pl
 801b324:	eba9 0101 	subpl.w	r1, r9, r1
 801b328:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801b32c:	bf58      	it	pl
 801b32e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b332:	6022      	str	r2, [r4, #0]
 801b334:	f04f 0900 	mov.w	r9, #0
 801b338:	e78a      	b.n	801b250 <_scanf_float+0x188>
 801b33a:	f04f 0a03 	mov.w	sl, #3
 801b33e:	e787      	b.n	801b250 <_scanf_float+0x188>
 801b340:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b344:	4639      	mov	r1, r7
 801b346:	4640      	mov	r0, r8
 801b348:	4798      	blx	r3
 801b34a:	2800      	cmp	r0, #0
 801b34c:	f43f aedf 	beq.w	801b10e <_scanf_float+0x46>
 801b350:	e6ea      	b.n	801b128 <_scanf_float+0x60>
 801b352:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b356:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b35a:	463a      	mov	r2, r7
 801b35c:	4640      	mov	r0, r8
 801b35e:	4798      	blx	r3
 801b360:	6923      	ldr	r3, [r4, #16]
 801b362:	3b01      	subs	r3, #1
 801b364:	6123      	str	r3, [r4, #16]
 801b366:	e6ec      	b.n	801b142 <_scanf_float+0x7a>
 801b368:	1e6b      	subs	r3, r5, #1
 801b36a:	2b06      	cmp	r3, #6
 801b36c:	d825      	bhi.n	801b3ba <_scanf_float+0x2f2>
 801b36e:	2d02      	cmp	r5, #2
 801b370:	d836      	bhi.n	801b3e0 <_scanf_float+0x318>
 801b372:	455e      	cmp	r6, fp
 801b374:	f67f aee8 	bls.w	801b148 <_scanf_float+0x80>
 801b378:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b37c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b380:	463a      	mov	r2, r7
 801b382:	4640      	mov	r0, r8
 801b384:	4798      	blx	r3
 801b386:	6923      	ldr	r3, [r4, #16]
 801b388:	3b01      	subs	r3, #1
 801b38a:	6123      	str	r3, [r4, #16]
 801b38c:	e7f1      	b.n	801b372 <_scanf_float+0x2aa>
 801b38e:	9802      	ldr	r0, [sp, #8]
 801b390:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b394:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801b398:	9002      	str	r0, [sp, #8]
 801b39a:	463a      	mov	r2, r7
 801b39c:	4640      	mov	r0, r8
 801b39e:	4798      	blx	r3
 801b3a0:	6923      	ldr	r3, [r4, #16]
 801b3a2:	3b01      	subs	r3, #1
 801b3a4:	6123      	str	r3, [r4, #16]
 801b3a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b3aa:	fa5f fa8a 	uxtb.w	sl, sl
 801b3ae:	f1ba 0f02 	cmp.w	sl, #2
 801b3b2:	d1ec      	bne.n	801b38e <_scanf_float+0x2c6>
 801b3b4:	3d03      	subs	r5, #3
 801b3b6:	b2ed      	uxtb	r5, r5
 801b3b8:	1b76      	subs	r6, r6, r5
 801b3ba:	6823      	ldr	r3, [r4, #0]
 801b3bc:	05da      	lsls	r2, r3, #23
 801b3be:	d52f      	bpl.n	801b420 <_scanf_float+0x358>
 801b3c0:	055b      	lsls	r3, r3, #21
 801b3c2:	d510      	bpl.n	801b3e6 <_scanf_float+0x31e>
 801b3c4:	455e      	cmp	r6, fp
 801b3c6:	f67f aebf 	bls.w	801b148 <_scanf_float+0x80>
 801b3ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b3ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b3d2:	463a      	mov	r2, r7
 801b3d4:	4640      	mov	r0, r8
 801b3d6:	4798      	blx	r3
 801b3d8:	6923      	ldr	r3, [r4, #16]
 801b3da:	3b01      	subs	r3, #1
 801b3dc:	6123      	str	r3, [r4, #16]
 801b3de:	e7f1      	b.n	801b3c4 <_scanf_float+0x2fc>
 801b3e0:	46aa      	mov	sl, r5
 801b3e2:	9602      	str	r6, [sp, #8]
 801b3e4:	e7df      	b.n	801b3a6 <_scanf_float+0x2de>
 801b3e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b3ea:	6923      	ldr	r3, [r4, #16]
 801b3ec:	2965      	cmp	r1, #101	; 0x65
 801b3ee:	f103 33ff 	add.w	r3, r3, #4294967295
 801b3f2:	f106 35ff 	add.w	r5, r6, #4294967295
 801b3f6:	6123      	str	r3, [r4, #16]
 801b3f8:	d00c      	beq.n	801b414 <_scanf_float+0x34c>
 801b3fa:	2945      	cmp	r1, #69	; 0x45
 801b3fc:	d00a      	beq.n	801b414 <_scanf_float+0x34c>
 801b3fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b402:	463a      	mov	r2, r7
 801b404:	4640      	mov	r0, r8
 801b406:	4798      	blx	r3
 801b408:	6923      	ldr	r3, [r4, #16]
 801b40a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b40e:	3b01      	subs	r3, #1
 801b410:	1eb5      	subs	r5, r6, #2
 801b412:	6123      	str	r3, [r4, #16]
 801b414:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b418:	463a      	mov	r2, r7
 801b41a:	4640      	mov	r0, r8
 801b41c:	4798      	blx	r3
 801b41e:	462e      	mov	r6, r5
 801b420:	6825      	ldr	r5, [r4, #0]
 801b422:	f015 0510 	ands.w	r5, r5, #16
 801b426:	d158      	bne.n	801b4da <_scanf_float+0x412>
 801b428:	7035      	strb	r5, [r6, #0]
 801b42a:	6823      	ldr	r3, [r4, #0]
 801b42c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801b430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b434:	d11c      	bne.n	801b470 <_scanf_float+0x3a8>
 801b436:	9b01      	ldr	r3, [sp, #4]
 801b438:	454b      	cmp	r3, r9
 801b43a:	eba3 0209 	sub.w	r2, r3, r9
 801b43e:	d124      	bne.n	801b48a <_scanf_float+0x3c2>
 801b440:	2200      	movs	r2, #0
 801b442:	4659      	mov	r1, fp
 801b444:	4640      	mov	r0, r8
 801b446:	f001 f881 	bl	801c54c <_strtod_r>
 801b44a:	9b03      	ldr	r3, [sp, #12]
 801b44c:	6821      	ldr	r1, [r4, #0]
 801b44e:	681b      	ldr	r3, [r3, #0]
 801b450:	f011 0f02 	tst.w	r1, #2
 801b454:	ec57 6b10 	vmov	r6, r7, d0
 801b458:	f103 0204 	add.w	r2, r3, #4
 801b45c:	d020      	beq.n	801b4a0 <_scanf_float+0x3d8>
 801b45e:	9903      	ldr	r1, [sp, #12]
 801b460:	600a      	str	r2, [r1, #0]
 801b462:	681b      	ldr	r3, [r3, #0]
 801b464:	e9c3 6700 	strd	r6, r7, [r3]
 801b468:	68e3      	ldr	r3, [r4, #12]
 801b46a:	3301      	adds	r3, #1
 801b46c:	60e3      	str	r3, [r4, #12]
 801b46e:	e66c      	b.n	801b14a <_scanf_float+0x82>
 801b470:	9b04      	ldr	r3, [sp, #16]
 801b472:	2b00      	cmp	r3, #0
 801b474:	d0e4      	beq.n	801b440 <_scanf_float+0x378>
 801b476:	9905      	ldr	r1, [sp, #20]
 801b478:	230a      	movs	r3, #10
 801b47a:	462a      	mov	r2, r5
 801b47c:	3101      	adds	r1, #1
 801b47e:	4640      	mov	r0, r8
 801b480:	f001 f94a 	bl	801c718 <_strtol_r>
 801b484:	9b04      	ldr	r3, [sp, #16]
 801b486:	9e05      	ldr	r6, [sp, #20]
 801b488:	1ac2      	subs	r2, r0, r3
 801b48a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801b48e:	429e      	cmp	r6, r3
 801b490:	bf28      	it	cs
 801b492:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801b496:	4912      	ldr	r1, [pc, #72]	; (801b4e0 <_scanf_float+0x418>)
 801b498:	4630      	mov	r0, r6
 801b49a:	f000 f977 	bl	801b78c <siprintf>
 801b49e:	e7cf      	b.n	801b440 <_scanf_float+0x378>
 801b4a0:	f011 0f04 	tst.w	r1, #4
 801b4a4:	9903      	ldr	r1, [sp, #12]
 801b4a6:	600a      	str	r2, [r1, #0]
 801b4a8:	d1db      	bne.n	801b462 <_scanf_float+0x39a>
 801b4aa:	f8d3 8000 	ldr.w	r8, [r3]
 801b4ae:	ee10 2a10 	vmov	r2, s0
 801b4b2:	ee10 0a10 	vmov	r0, s0
 801b4b6:	463b      	mov	r3, r7
 801b4b8:	4639      	mov	r1, r7
 801b4ba:	f7e5 fb57 	bl	8000b6c <__aeabi_dcmpun>
 801b4be:	b128      	cbz	r0, 801b4cc <_scanf_float+0x404>
 801b4c0:	4808      	ldr	r0, [pc, #32]	; (801b4e4 <_scanf_float+0x41c>)
 801b4c2:	f000 f919 	bl	801b6f8 <nanf>
 801b4c6:	ed88 0a00 	vstr	s0, [r8]
 801b4ca:	e7cd      	b.n	801b468 <_scanf_float+0x3a0>
 801b4cc:	4630      	mov	r0, r6
 801b4ce:	4639      	mov	r1, r7
 801b4d0:	f7e5 fbaa 	bl	8000c28 <__aeabi_d2f>
 801b4d4:	f8c8 0000 	str.w	r0, [r8]
 801b4d8:	e7c6      	b.n	801b468 <_scanf_float+0x3a0>
 801b4da:	2500      	movs	r5, #0
 801b4dc:	e635      	b.n	801b14a <_scanf_float+0x82>
 801b4de:	bf00      	nop
 801b4e0:	08022232 	.word	0x08022232
 801b4e4:	08022360 	.word	0x08022360

0801b4e8 <iprintf>:
 801b4e8:	b40f      	push	{r0, r1, r2, r3}
 801b4ea:	4b0a      	ldr	r3, [pc, #40]	; (801b514 <iprintf+0x2c>)
 801b4ec:	b513      	push	{r0, r1, r4, lr}
 801b4ee:	681c      	ldr	r4, [r3, #0]
 801b4f0:	b124      	cbz	r4, 801b4fc <iprintf+0x14>
 801b4f2:	69a3      	ldr	r3, [r4, #24]
 801b4f4:	b913      	cbnz	r3, 801b4fc <iprintf+0x14>
 801b4f6:	4620      	mov	r0, r4
 801b4f8:	f7fe fc30 	bl	8019d5c <__sinit>
 801b4fc:	ab05      	add	r3, sp, #20
 801b4fe:	9a04      	ldr	r2, [sp, #16]
 801b500:	68a1      	ldr	r1, [r4, #8]
 801b502:	9301      	str	r3, [sp, #4]
 801b504:	4620      	mov	r0, r4
 801b506:	f004 f9b1 	bl	801f86c <_vfiprintf_r>
 801b50a:	b002      	add	sp, #8
 801b50c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b510:	b004      	add	sp, #16
 801b512:	4770      	bx	lr
 801b514:	200001fc 	.word	0x200001fc

0801b518 <_puts_r>:
 801b518:	b570      	push	{r4, r5, r6, lr}
 801b51a:	460e      	mov	r6, r1
 801b51c:	4605      	mov	r5, r0
 801b51e:	b118      	cbz	r0, 801b528 <_puts_r+0x10>
 801b520:	6983      	ldr	r3, [r0, #24]
 801b522:	b90b      	cbnz	r3, 801b528 <_puts_r+0x10>
 801b524:	f7fe fc1a 	bl	8019d5c <__sinit>
 801b528:	69ab      	ldr	r3, [r5, #24]
 801b52a:	68ac      	ldr	r4, [r5, #8]
 801b52c:	b913      	cbnz	r3, 801b534 <_puts_r+0x1c>
 801b52e:	4628      	mov	r0, r5
 801b530:	f7fe fc14 	bl	8019d5c <__sinit>
 801b534:	4b2c      	ldr	r3, [pc, #176]	; (801b5e8 <_puts_r+0xd0>)
 801b536:	429c      	cmp	r4, r3
 801b538:	d120      	bne.n	801b57c <_puts_r+0x64>
 801b53a:	686c      	ldr	r4, [r5, #4]
 801b53c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b53e:	07db      	lsls	r3, r3, #31
 801b540:	d405      	bmi.n	801b54e <_puts_r+0x36>
 801b542:	89a3      	ldrh	r3, [r4, #12]
 801b544:	0598      	lsls	r0, r3, #22
 801b546:	d402      	bmi.n	801b54e <_puts_r+0x36>
 801b548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b54a:	f7fe fde7 	bl	801a11c <__retarget_lock_acquire_recursive>
 801b54e:	89a3      	ldrh	r3, [r4, #12]
 801b550:	0719      	lsls	r1, r3, #28
 801b552:	d51d      	bpl.n	801b590 <_puts_r+0x78>
 801b554:	6923      	ldr	r3, [r4, #16]
 801b556:	b1db      	cbz	r3, 801b590 <_puts_r+0x78>
 801b558:	3e01      	subs	r6, #1
 801b55a:	68a3      	ldr	r3, [r4, #8]
 801b55c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b560:	3b01      	subs	r3, #1
 801b562:	60a3      	str	r3, [r4, #8]
 801b564:	bb39      	cbnz	r1, 801b5b6 <_puts_r+0x9e>
 801b566:	2b00      	cmp	r3, #0
 801b568:	da38      	bge.n	801b5dc <_puts_r+0xc4>
 801b56a:	4622      	mov	r2, r4
 801b56c:	210a      	movs	r1, #10
 801b56e:	4628      	mov	r0, r5
 801b570:	f001 fbd6 	bl	801cd20 <__swbuf_r>
 801b574:	3001      	adds	r0, #1
 801b576:	d011      	beq.n	801b59c <_puts_r+0x84>
 801b578:	250a      	movs	r5, #10
 801b57a:	e011      	b.n	801b5a0 <_puts_r+0x88>
 801b57c:	4b1b      	ldr	r3, [pc, #108]	; (801b5ec <_puts_r+0xd4>)
 801b57e:	429c      	cmp	r4, r3
 801b580:	d101      	bne.n	801b586 <_puts_r+0x6e>
 801b582:	68ac      	ldr	r4, [r5, #8]
 801b584:	e7da      	b.n	801b53c <_puts_r+0x24>
 801b586:	4b1a      	ldr	r3, [pc, #104]	; (801b5f0 <_puts_r+0xd8>)
 801b588:	429c      	cmp	r4, r3
 801b58a:	bf08      	it	eq
 801b58c:	68ec      	ldreq	r4, [r5, #12]
 801b58e:	e7d5      	b.n	801b53c <_puts_r+0x24>
 801b590:	4621      	mov	r1, r4
 801b592:	4628      	mov	r0, r5
 801b594:	f001 fc28 	bl	801cde8 <__swsetup_r>
 801b598:	2800      	cmp	r0, #0
 801b59a:	d0dd      	beq.n	801b558 <_puts_r+0x40>
 801b59c:	f04f 35ff 	mov.w	r5, #4294967295
 801b5a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b5a2:	07da      	lsls	r2, r3, #31
 801b5a4:	d405      	bmi.n	801b5b2 <_puts_r+0x9a>
 801b5a6:	89a3      	ldrh	r3, [r4, #12]
 801b5a8:	059b      	lsls	r3, r3, #22
 801b5aa:	d402      	bmi.n	801b5b2 <_puts_r+0x9a>
 801b5ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b5ae:	f7fe fdb7 	bl	801a120 <__retarget_lock_release_recursive>
 801b5b2:	4628      	mov	r0, r5
 801b5b4:	bd70      	pop	{r4, r5, r6, pc}
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	da04      	bge.n	801b5c4 <_puts_r+0xac>
 801b5ba:	69a2      	ldr	r2, [r4, #24]
 801b5bc:	429a      	cmp	r2, r3
 801b5be:	dc06      	bgt.n	801b5ce <_puts_r+0xb6>
 801b5c0:	290a      	cmp	r1, #10
 801b5c2:	d004      	beq.n	801b5ce <_puts_r+0xb6>
 801b5c4:	6823      	ldr	r3, [r4, #0]
 801b5c6:	1c5a      	adds	r2, r3, #1
 801b5c8:	6022      	str	r2, [r4, #0]
 801b5ca:	7019      	strb	r1, [r3, #0]
 801b5cc:	e7c5      	b.n	801b55a <_puts_r+0x42>
 801b5ce:	4622      	mov	r2, r4
 801b5d0:	4628      	mov	r0, r5
 801b5d2:	f001 fba5 	bl	801cd20 <__swbuf_r>
 801b5d6:	3001      	adds	r0, #1
 801b5d8:	d1bf      	bne.n	801b55a <_puts_r+0x42>
 801b5da:	e7df      	b.n	801b59c <_puts_r+0x84>
 801b5dc:	6823      	ldr	r3, [r4, #0]
 801b5de:	250a      	movs	r5, #10
 801b5e0:	1c5a      	adds	r2, r3, #1
 801b5e2:	6022      	str	r2, [r4, #0]
 801b5e4:	701d      	strb	r5, [r3, #0]
 801b5e6:	e7db      	b.n	801b5a0 <_puts_r+0x88>
 801b5e8:	08022084 	.word	0x08022084
 801b5ec:	080220a4 	.word	0x080220a4
 801b5f0:	08022064 	.word	0x08022064

0801b5f4 <puts>:
 801b5f4:	4b02      	ldr	r3, [pc, #8]	; (801b600 <puts+0xc>)
 801b5f6:	4601      	mov	r1, r0
 801b5f8:	6818      	ldr	r0, [r3, #0]
 801b5fa:	f7ff bf8d 	b.w	801b518 <_puts_r>
 801b5fe:	bf00      	nop
 801b600:	200001fc 	.word	0x200001fc

0801b604 <cleanup_glue>:
 801b604:	b538      	push	{r3, r4, r5, lr}
 801b606:	460c      	mov	r4, r1
 801b608:	6809      	ldr	r1, [r1, #0]
 801b60a:	4605      	mov	r5, r0
 801b60c:	b109      	cbz	r1, 801b612 <cleanup_glue+0xe>
 801b60e:	f7ff fff9 	bl	801b604 <cleanup_glue>
 801b612:	4621      	mov	r1, r4
 801b614:	4628      	mov	r0, r5
 801b616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b61a:	f7ff b841 	b.w	801a6a0 <_free_r>
	...

0801b620 <_reclaim_reent>:
 801b620:	4b2c      	ldr	r3, [pc, #176]	; (801b6d4 <_reclaim_reent+0xb4>)
 801b622:	681b      	ldr	r3, [r3, #0]
 801b624:	4283      	cmp	r3, r0
 801b626:	b570      	push	{r4, r5, r6, lr}
 801b628:	4604      	mov	r4, r0
 801b62a:	d051      	beq.n	801b6d0 <_reclaim_reent+0xb0>
 801b62c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801b62e:	b143      	cbz	r3, 801b642 <_reclaim_reent+0x22>
 801b630:	68db      	ldr	r3, [r3, #12]
 801b632:	2b00      	cmp	r3, #0
 801b634:	d14a      	bne.n	801b6cc <_reclaim_reent+0xac>
 801b636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b638:	6819      	ldr	r1, [r3, #0]
 801b63a:	b111      	cbz	r1, 801b642 <_reclaim_reent+0x22>
 801b63c:	4620      	mov	r0, r4
 801b63e:	f7ff f82f 	bl	801a6a0 <_free_r>
 801b642:	6961      	ldr	r1, [r4, #20]
 801b644:	b111      	cbz	r1, 801b64c <_reclaim_reent+0x2c>
 801b646:	4620      	mov	r0, r4
 801b648:	f7ff f82a 	bl	801a6a0 <_free_r>
 801b64c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b64e:	b111      	cbz	r1, 801b656 <_reclaim_reent+0x36>
 801b650:	4620      	mov	r0, r4
 801b652:	f7ff f825 	bl	801a6a0 <_free_r>
 801b656:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b658:	b111      	cbz	r1, 801b660 <_reclaim_reent+0x40>
 801b65a:	4620      	mov	r0, r4
 801b65c:	f7ff f820 	bl	801a6a0 <_free_r>
 801b660:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801b662:	b111      	cbz	r1, 801b66a <_reclaim_reent+0x4a>
 801b664:	4620      	mov	r0, r4
 801b666:	f7ff f81b 	bl	801a6a0 <_free_r>
 801b66a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801b66c:	b111      	cbz	r1, 801b674 <_reclaim_reent+0x54>
 801b66e:	4620      	mov	r0, r4
 801b670:	f7ff f816 	bl	801a6a0 <_free_r>
 801b674:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801b676:	b111      	cbz	r1, 801b67e <_reclaim_reent+0x5e>
 801b678:	4620      	mov	r0, r4
 801b67a:	f7ff f811 	bl	801a6a0 <_free_r>
 801b67e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801b680:	b111      	cbz	r1, 801b688 <_reclaim_reent+0x68>
 801b682:	4620      	mov	r0, r4
 801b684:	f7ff f80c 	bl	801a6a0 <_free_r>
 801b688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b68a:	b111      	cbz	r1, 801b692 <_reclaim_reent+0x72>
 801b68c:	4620      	mov	r0, r4
 801b68e:	f7ff f807 	bl	801a6a0 <_free_r>
 801b692:	69a3      	ldr	r3, [r4, #24]
 801b694:	b1e3      	cbz	r3, 801b6d0 <_reclaim_reent+0xb0>
 801b696:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b698:	4620      	mov	r0, r4
 801b69a:	4798      	blx	r3
 801b69c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b69e:	b1b9      	cbz	r1, 801b6d0 <_reclaim_reent+0xb0>
 801b6a0:	4620      	mov	r0, r4
 801b6a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b6a6:	f7ff bfad 	b.w	801b604 <cleanup_glue>
 801b6aa:	5949      	ldr	r1, [r1, r5]
 801b6ac:	b941      	cbnz	r1, 801b6c0 <_reclaim_reent+0xa0>
 801b6ae:	3504      	adds	r5, #4
 801b6b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b6b2:	2d80      	cmp	r5, #128	; 0x80
 801b6b4:	68d9      	ldr	r1, [r3, #12]
 801b6b6:	d1f8      	bne.n	801b6aa <_reclaim_reent+0x8a>
 801b6b8:	4620      	mov	r0, r4
 801b6ba:	f7fe fff1 	bl	801a6a0 <_free_r>
 801b6be:	e7ba      	b.n	801b636 <_reclaim_reent+0x16>
 801b6c0:	680e      	ldr	r6, [r1, #0]
 801b6c2:	4620      	mov	r0, r4
 801b6c4:	f7fe ffec 	bl	801a6a0 <_free_r>
 801b6c8:	4631      	mov	r1, r6
 801b6ca:	e7ef      	b.n	801b6ac <_reclaim_reent+0x8c>
 801b6cc:	2500      	movs	r5, #0
 801b6ce:	e7ef      	b.n	801b6b0 <_reclaim_reent+0x90>
 801b6d0:	bd70      	pop	{r4, r5, r6, pc}
 801b6d2:	bf00      	nop
 801b6d4:	200001fc 	.word	0x200001fc

0801b6d8 <_sbrk_r>:
 801b6d8:	b538      	push	{r3, r4, r5, lr}
 801b6da:	4d06      	ldr	r5, [pc, #24]	; (801b6f4 <_sbrk_r+0x1c>)
 801b6dc:	2300      	movs	r3, #0
 801b6de:	4604      	mov	r4, r0
 801b6e0:	4608      	mov	r0, r1
 801b6e2:	602b      	str	r3, [r5, #0]
 801b6e4:	f004 fc40 	bl	801ff68 <_sbrk>
 801b6e8:	1c43      	adds	r3, r0, #1
 801b6ea:	d102      	bne.n	801b6f2 <_sbrk_r+0x1a>
 801b6ec:	682b      	ldr	r3, [r5, #0]
 801b6ee:	b103      	cbz	r3, 801b6f2 <_sbrk_r+0x1a>
 801b6f0:	6023      	str	r3, [r4, #0]
 801b6f2:	bd38      	pop	{r3, r4, r5, pc}
 801b6f4:	20008d5c 	.word	0x20008d5c

0801b6f8 <nanf>:
 801b6f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b700 <nanf+0x8>
 801b6fc:	4770      	bx	lr
 801b6fe:	bf00      	nop
 801b700:	7fc00000 	.word	0x7fc00000

0801b704 <_raise_r>:
 801b704:	291f      	cmp	r1, #31
 801b706:	b538      	push	{r3, r4, r5, lr}
 801b708:	4604      	mov	r4, r0
 801b70a:	460d      	mov	r5, r1
 801b70c:	d904      	bls.n	801b718 <_raise_r+0x14>
 801b70e:	2316      	movs	r3, #22
 801b710:	6003      	str	r3, [r0, #0]
 801b712:	f04f 30ff 	mov.w	r0, #4294967295
 801b716:	bd38      	pop	{r3, r4, r5, pc}
 801b718:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b71a:	b112      	cbz	r2, 801b722 <_raise_r+0x1e>
 801b71c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b720:	b94b      	cbnz	r3, 801b736 <_raise_r+0x32>
 801b722:	4620      	mov	r0, r4
 801b724:	f000 f830 	bl	801b788 <_getpid_r>
 801b728:	462a      	mov	r2, r5
 801b72a:	4601      	mov	r1, r0
 801b72c:	4620      	mov	r0, r4
 801b72e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b732:	f000 b817 	b.w	801b764 <_kill_r>
 801b736:	2b01      	cmp	r3, #1
 801b738:	d00a      	beq.n	801b750 <_raise_r+0x4c>
 801b73a:	1c59      	adds	r1, r3, #1
 801b73c:	d103      	bne.n	801b746 <_raise_r+0x42>
 801b73e:	2316      	movs	r3, #22
 801b740:	6003      	str	r3, [r0, #0]
 801b742:	2001      	movs	r0, #1
 801b744:	e7e7      	b.n	801b716 <_raise_r+0x12>
 801b746:	2400      	movs	r4, #0
 801b748:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b74c:	4628      	mov	r0, r5
 801b74e:	4798      	blx	r3
 801b750:	2000      	movs	r0, #0
 801b752:	e7e0      	b.n	801b716 <_raise_r+0x12>

0801b754 <raise>:
 801b754:	4b02      	ldr	r3, [pc, #8]	; (801b760 <raise+0xc>)
 801b756:	4601      	mov	r1, r0
 801b758:	6818      	ldr	r0, [r3, #0]
 801b75a:	f7ff bfd3 	b.w	801b704 <_raise_r>
 801b75e:	bf00      	nop
 801b760:	200001fc 	.word	0x200001fc

0801b764 <_kill_r>:
 801b764:	b538      	push	{r3, r4, r5, lr}
 801b766:	4d07      	ldr	r5, [pc, #28]	; (801b784 <_kill_r+0x20>)
 801b768:	2300      	movs	r3, #0
 801b76a:	4604      	mov	r4, r0
 801b76c:	4608      	mov	r0, r1
 801b76e:	4611      	mov	r1, r2
 801b770:	602b      	str	r3, [r5, #0]
 801b772:	f004 fbe1 	bl	801ff38 <_kill>
 801b776:	1c43      	adds	r3, r0, #1
 801b778:	d102      	bne.n	801b780 <_kill_r+0x1c>
 801b77a:	682b      	ldr	r3, [r5, #0]
 801b77c:	b103      	cbz	r3, 801b780 <_kill_r+0x1c>
 801b77e:	6023      	str	r3, [r4, #0]
 801b780:	bd38      	pop	{r3, r4, r5, pc}
 801b782:	bf00      	nop
 801b784:	20008d5c 	.word	0x20008d5c

0801b788 <_getpid_r>:
 801b788:	f004 bbc6 	b.w	801ff18 <_getpid>

0801b78c <siprintf>:
 801b78c:	b40e      	push	{r1, r2, r3}
 801b78e:	b500      	push	{lr}
 801b790:	b09c      	sub	sp, #112	; 0x70
 801b792:	ab1d      	add	r3, sp, #116	; 0x74
 801b794:	9002      	str	r0, [sp, #8]
 801b796:	9006      	str	r0, [sp, #24]
 801b798:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b79c:	4809      	ldr	r0, [pc, #36]	; (801b7c4 <siprintf+0x38>)
 801b79e:	9107      	str	r1, [sp, #28]
 801b7a0:	9104      	str	r1, [sp, #16]
 801b7a2:	4909      	ldr	r1, [pc, #36]	; (801b7c8 <siprintf+0x3c>)
 801b7a4:	f853 2b04 	ldr.w	r2, [r3], #4
 801b7a8:	9105      	str	r1, [sp, #20]
 801b7aa:	6800      	ldr	r0, [r0, #0]
 801b7ac:	9301      	str	r3, [sp, #4]
 801b7ae:	a902      	add	r1, sp, #8
 801b7b0:	f003 fd60 	bl	801f274 <_svfiprintf_r>
 801b7b4:	9b02      	ldr	r3, [sp, #8]
 801b7b6:	2200      	movs	r2, #0
 801b7b8:	701a      	strb	r2, [r3, #0]
 801b7ba:	b01c      	add	sp, #112	; 0x70
 801b7bc:	f85d eb04 	ldr.w	lr, [sp], #4
 801b7c0:	b003      	add	sp, #12
 801b7c2:	4770      	bx	lr
 801b7c4:	200001fc 	.word	0x200001fc
 801b7c8:	ffff0208 	.word	0xffff0208

0801b7cc <siscanf>:
 801b7cc:	b40e      	push	{r1, r2, r3}
 801b7ce:	b510      	push	{r4, lr}
 801b7d0:	b09f      	sub	sp, #124	; 0x7c
 801b7d2:	ac21      	add	r4, sp, #132	; 0x84
 801b7d4:	f44f 7101 	mov.w	r1, #516	; 0x204
 801b7d8:	f854 2b04 	ldr.w	r2, [r4], #4
 801b7dc:	9201      	str	r2, [sp, #4]
 801b7de:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b7e2:	9004      	str	r0, [sp, #16]
 801b7e4:	9008      	str	r0, [sp, #32]
 801b7e6:	f7e4 fd0d 	bl	8000204 <strlen>
 801b7ea:	4b0c      	ldr	r3, [pc, #48]	; (801b81c <siscanf+0x50>)
 801b7ec:	9005      	str	r0, [sp, #20]
 801b7ee:	9009      	str	r0, [sp, #36]	; 0x24
 801b7f0:	930d      	str	r3, [sp, #52]	; 0x34
 801b7f2:	480b      	ldr	r0, [pc, #44]	; (801b820 <siscanf+0x54>)
 801b7f4:	9a01      	ldr	r2, [sp, #4]
 801b7f6:	6800      	ldr	r0, [r0, #0]
 801b7f8:	9403      	str	r4, [sp, #12]
 801b7fa:	2300      	movs	r3, #0
 801b7fc:	9311      	str	r3, [sp, #68]	; 0x44
 801b7fe:	9316      	str	r3, [sp, #88]	; 0x58
 801b800:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b804:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b808:	a904      	add	r1, sp, #16
 801b80a:	4623      	mov	r3, r4
 801b80c:	f003 fe8c 	bl	801f528 <__ssvfiscanf_r>
 801b810:	b01f      	add	sp, #124	; 0x7c
 801b812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b816:	b003      	add	sp, #12
 801b818:	4770      	bx	lr
 801b81a:	bf00      	nop
 801b81c:	0801b847 	.word	0x0801b847
 801b820:	200001fc 	.word	0x200001fc

0801b824 <__sread>:
 801b824:	b510      	push	{r4, lr}
 801b826:	460c      	mov	r4, r1
 801b828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b82c:	f004 fa9a 	bl	801fd64 <_read_r>
 801b830:	2800      	cmp	r0, #0
 801b832:	bfab      	itete	ge
 801b834:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b836:	89a3      	ldrhlt	r3, [r4, #12]
 801b838:	181b      	addge	r3, r3, r0
 801b83a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b83e:	bfac      	ite	ge
 801b840:	6563      	strge	r3, [r4, #84]	; 0x54
 801b842:	81a3      	strhlt	r3, [r4, #12]
 801b844:	bd10      	pop	{r4, pc}

0801b846 <__seofread>:
 801b846:	2000      	movs	r0, #0
 801b848:	4770      	bx	lr

0801b84a <__swrite>:
 801b84a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b84e:	461f      	mov	r7, r3
 801b850:	898b      	ldrh	r3, [r1, #12]
 801b852:	05db      	lsls	r3, r3, #23
 801b854:	4605      	mov	r5, r0
 801b856:	460c      	mov	r4, r1
 801b858:	4616      	mov	r6, r2
 801b85a:	d505      	bpl.n	801b868 <__swrite+0x1e>
 801b85c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b860:	2302      	movs	r3, #2
 801b862:	2200      	movs	r2, #0
 801b864:	f002 ff26 	bl	801e6b4 <_lseek_r>
 801b868:	89a3      	ldrh	r3, [r4, #12]
 801b86a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b86e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b872:	81a3      	strh	r3, [r4, #12]
 801b874:	4632      	mov	r2, r6
 801b876:	463b      	mov	r3, r7
 801b878:	4628      	mov	r0, r5
 801b87a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b87e:	f001 baa1 	b.w	801cdc4 <_write_r>

0801b882 <__sseek>:
 801b882:	b510      	push	{r4, lr}
 801b884:	460c      	mov	r4, r1
 801b886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b88a:	f002 ff13 	bl	801e6b4 <_lseek_r>
 801b88e:	1c43      	adds	r3, r0, #1
 801b890:	89a3      	ldrh	r3, [r4, #12]
 801b892:	bf15      	itete	ne
 801b894:	6560      	strne	r0, [r4, #84]	; 0x54
 801b896:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b89a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b89e:	81a3      	strheq	r3, [r4, #12]
 801b8a0:	bf18      	it	ne
 801b8a2:	81a3      	strhne	r3, [r4, #12]
 801b8a4:	bd10      	pop	{r4, pc}

0801b8a6 <__sclose>:
 801b8a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b8aa:	f001 bb29 	b.w	801cf00 <_close_r>

0801b8ae <strchr>:
 801b8ae:	b2c9      	uxtb	r1, r1
 801b8b0:	4603      	mov	r3, r0
 801b8b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b8b6:	b11a      	cbz	r2, 801b8c0 <strchr+0x12>
 801b8b8:	428a      	cmp	r2, r1
 801b8ba:	d1f9      	bne.n	801b8b0 <strchr+0x2>
 801b8bc:	4618      	mov	r0, r3
 801b8be:	4770      	bx	lr
 801b8c0:	2900      	cmp	r1, #0
 801b8c2:	bf18      	it	ne
 801b8c4:	2300      	movne	r3, #0
 801b8c6:	e7f9      	b.n	801b8bc <strchr+0xe>

0801b8c8 <strcpy>:
 801b8c8:	4603      	mov	r3, r0
 801b8ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b8ce:	f803 2b01 	strb.w	r2, [r3], #1
 801b8d2:	2a00      	cmp	r2, #0
 801b8d4:	d1f9      	bne.n	801b8ca <strcpy+0x2>
 801b8d6:	4770      	bx	lr

0801b8d8 <strncmp>:
 801b8d8:	b510      	push	{r4, lr}
 801b8da:	b16a      	cbz	r2, 801b8f8 <strncmp+0x20>
 801b8dc:	3901      	subs	r1, #1
 801b8de:	1884      	adds	r4, r0, r2
 801b8e0:	f810 3b01 	ldrb.w	r3, [r0], #1
 801b8e4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801b8e8:	4293      	cmp	r3, r2
 801b8ea:	d103      	bne.n	801b8f4 <strncmp+0x1c>
 801b8ec:	42a0      	cmp	r0, r4
 801b8ee:	d001      	beq.n	801b8f4 <strncmp+0x1c>
 801b8f0:	2b00      	cmp	r3, #0
 801b8f2:	d1f5      	bne.n	801b8e0 <strncmp+0x8>
 801b8f4:	1a98      	subs	r0, r3, r2
 801b8f6:	bd10      	pop	{r4, pc}
 801b8f8:	4610      	mov	r0, r2
 801b8fa:	e7fc      	b.n	801b8f6 <strncmp+0x1e>

0801b8fc <sulp>:
 801b8fc:	b570      	push	{r4, r5, r6, lr}
 801b8fe:	4604      	mov	r4, r0
 801b900:	460d      	mov	r5, r1
 801b902:	ec45 4b10 	vmov	d0, r4, r5
 801b906:	4616      	mov	r6, r2
 801b908:	f003 fad4 	bl	801eeb4 <__ulp>
 801b90c:	ec51 0b10 	vmov	r0, r1, d0
 801b910:	b17e      	cbz	r6, 801b932 <sulp+0x36>
 801b912:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801b916:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	dd09      	ble.n	801b932 <sulp+0x36>
 801b91e:	051b      	lsls	r3, r3, #20
 801b920:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801b924:	2400      	movs	r4, #0
 801b926:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801b92a:	4622      	mov	r2, r4
 801b92c:	462b      	mov	r3, r5
 801b92e:	f7e4 fe83 	bl	8000638 <__aeabi_dmul>
 801b932:	bd70      	pop	{r4, r5, r6, pc}
 801b934:	0000      	movs	r0, r0
	...

0801b938 <_strtod_l>:
 801b938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b93c:	b0a3      	sub	sp, #140	; 0x8c
 801b93e:	461f      	mov	r7, r3
 801b940:	2300      	movs	r3, #0
 801b942:	931e      	str	r3, [sp, #120]	; 0x78
 801b944:	4ba4      	ldr	r3, [pc, #656]	; (801bbd8 <_strtod_l+0x2a0>)
 801b946:	9219      	str	r2, [sp, #100]	; 0x64
 801b948:	681b      	ldr	r3, [r3, #0]
 801b94a:	9307      	str	r3, [sp, #28]
 801b94c:	4604      	mov	r4, r0
 801b94e:	4618      	mov	r0, r3
 801b950:	4688      	mov	r8, r1
 801b952:	f7e4 fc57 	bl	8000204 <strlen>
 801b956:	f04f 0a00 	mov.w	sl, #0
 801b95a:	4605      	mov	r5, r0
 801b95c:	f04f 0b00 	mov.w	fp, #0
 801b960:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b964:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b966:	781a      	ldrb	r2, [r3, #0]
 801b968:	2a2b      	cmp	r2, #43	; 0x2b
 801b96a:	d04c      	beq.n	801ba06 <_strtod_l+0xce>
 801b96c:	d839      	bhi.n	801b9e2 <_strtod_l+0xaa>
 801b96e:	2a0d      	cmp	r2, #13
 801b970:	d832      	bhi.n	801b9d8 <_strtod_l+0xa0>
 801b972:	2a08      	cmp	r2, #8
 801b974:	d832      	bhi.n	801b9dc <_strtod_l+0xa4>
 801b976:	2a00      	cmp	r2, #0
 801b978:	d03c      	beq.n	801b9f4 <_strtod_l+0xbc>
 801b97a:	2300      	movs	r3, #0
 801b97c:	930e      	str	r3, [sp, #56]	; 0x38
 801b97e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801b980:	7833      	ldrb	r3, [r6, #0]
 801b982:	2b30      	cmp	r3, #48	; 0x30
 801b984:	f040 80b4 	bne.w	801baf0 <_strtod_l+0x1b8>
 801b988:	7873      	ldrb	r3, [r6, #1]
 801b98a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b98e:	2b58      	cmp	r3, #88	; 0x58
 801b990:	d16c      	bne.n	801ba6c <_strtod_l+0x134>
 801b992:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b994:	9301      	str	r3, [sp, #4]
 801b996:	ab1e      	add	r3, sp, #120	; 0x78
 801b998:	9702      	str	r7, [sp, #8]
 801b99a:	9300      	str	r3, [sp, #0]
 801b99c:	4a8f      	ldr	r2, [pc, #572]	; (801bbdc <_strtod_l+0x2a4>)
 801b99e:	ab1f      	add	r3, sp, #124	; 0x7c
 801b9a0:	a91d      	add	r1, sp, #116	; 0x74
 801b9a2:	4620      	mov	r0, r4
 801b9a4:	f002 fa84 	bl	801deb0 <__gethex>
 801b9a8:	f010 0707 	ands.w	r7, r0, #7
 801b9ac:	4605      	mov	r5, r0
 801b9ae:	d005      	beq.n	801b9bc <_strtod_l+0x84>
 801b9b0:	2f06      	cmp	r7, #6
 801b9b2:	d12a      	bne.n	801ba0a <_strtod_l+0xd2>
 801b9b4:	3601      	adds	r6, #1
 801b9b6:	2300      	movs	r3, #0
 801b9b8:	961d      	str	r6, [sp, #116]	; 0x74
 801b9ba:	930e      	str	r3, [sp, #56]	; 0x38
 801b9bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	f040 8596 	bne.w	801c4f0 <_strtod_l+0xbb8>
 801b9c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b9c6:	b1db      	cbz	r3, 801ba00 <_strtod_l+0xc8>
 801b9c8:	4652      	mov	r2, sl
 801b9ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b9ce:	ec43 2b10 	vmov	d0, r2, r3
 801b9d2:	b023      	add	sp, #140	; 0x8c
 801b9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9d8:	2a20      	cmp	r2, #32
 801b9da:	d1ce      	bne.n	801b97a <_strtod_l+0x42>
 801b9dc:	3301      	adds	r3, #1
 801b9de:	931d      	str	r3, [sp, #116]	; 0x74
 801b9e0:	e7c0      	b.n	801b964 <_strtod_l+0x2c>
 801b9e2:	2a2d      	cmp	r2, #45	; 0x2d
 801b9e4:	d1c9      	bne.n	801b97a <_strtod_l+0x42>
 801b9e6:	2201      	movs	r2, #1
 801b9e8:	920e      	str	r2, [sp, #56]	; 0x38
 801b9ea:	1c5a      	adds	r2, r3, #1
 801b9ec:	921d      	str	r2, [sp, #116]	; 0x74
 801b9ee:	785b      	ldrb	r3, [r3, #1]
 801b9f0:	2b00      	cmp	r3, #0
 801b9f2:	d1c4      	bne.n	801b97e <_strtod_l+0x46>
 801b9f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b9f6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b9fa:	2b00      	cmp	r3, #0
 801b9fc:	f040 8576 	bne.w	801c4ec <_strtod_l+0xbb4>
 801ba00:	4652      	mov	r2, sl
 801ba02:	465b      	mov	r3, fp
 801ba04:	e7e3      	b.n	801b9ce <_strtod_l+0x96>
 801ba06:	2200      	movs	r2, #0
 801ba08:	e7ee      	b.n	801b9e8 <_strtod_l+0xb0>
 801ba0a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801ba0c:	b13a      	cbz	r2, 801ba1e <_strtod_l+0xe6>
 801ba0e:	2135      	movs	r1, #53	; 0x35
 801ba10:	a820      	add	r0, sp, #128	; 0x80
 801ba12:	f003 fb5a 	bl	801f0ca <__copybits>
 801ba16:	991e      	ldr	r1, [sp, #120]	; 0x78
 801ba18:	4620      	mov	r0, r4
 801ba1a:	f002 ff1f 	bl	801e85c <_Bfree>
 801ba1e:	3f01      	subs	r7, #1
 801ba20:	2f05      	cmp	r7, #5
 801ba22:	d807      	bhi.n	801ba34 <_strtod_l+0xfc>
 801ba24:	e8df f007 	tbb	[pc, r7]
 801ba28:	1d180b0e 	.word	0x1d180b0e
 801ba2c:	030e      	.short	0x030e
 801ba2e:	f04f 0b00 	mov.w	fp, #0
 801ba32:	46da      	mov	sl, fp
 801ba34:	0728      	lsls	r0, r5, #28
 801ba36:	d5c1      	bpl.n	801b9bc <_strtod_l+0x84>
 801ba38:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801ba3c:	e7be      	b.n	801b9bc <_strtod_l+0x84>
 801ba3e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801ba42:	e7f7      	b.n	801ba34 <_strtod_l+0xfc>
 801ba44:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801ba48:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801ba4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801ba4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801ba52:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801ba56:	e7ed      	b.n	801ba34 <_strtod_l+0xfc>
 801ba58:	f8df b184 	ldr.w	fp, [pc, #388]	; 801bbe0 <_strtod_l+0x2a8>
 801ba5c:	f04f 0a00 	mov.w	sl, #0
 801ba60:	e7e8      	b.n	801ba34 <_strtod_l+0xfc>
 801ba62:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801ba66:	f04f 3aff 	mov.w	sl, #4294967295
 801ba6a:	e7e3      	b.n	801ba34 <_strtod_l+0xfc>
 801ba6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ba6e:	1c5a      	adds	r2, r3, #1
 801ba70:	921d      	str	r2, [sp, #116]	; 0x74
 801ba72:	785b      	ldrb	r3, [r3, #1]
 801ba74:	2b30      	cmp	r3, #48	; 0x30
 801ba76:	d0f9      	beq.n	801ba6c <_strtod_l+0x134>
 801ba78:	2b00      	cmp	r3, #0
 801ba7a:	d09f      	beq.n	801b9bc <_strtod_l+0x84>
 801ba7c:	2301      	movs	r3, #1
 801ba7e:	f04f 0900 	mov.w	r9, #0
 801ba82:	9304      	str	r3, [sp, #16]
 801ba84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ba86:	930a      	str	r3, [sp, #40]	; 0x28
 801ba88:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801ba8c:	464f      	mov	r7, r9
 801ba8e:	220a      	movs	r2, #10
 801ba90:	981d      	ldr	r0, [sp, #116]	; 0x74
 801ba92:	7806      	ldrb	r6, [r0, #0]
 801ba94:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801ba98:	b2d9      	uxtb	r1, r3
 801ba9a:	2909      	cmp	r1, #9
 801ba9c:	d92a      	bls.n	801baf4 <_strtod_l+0x1bc>
 801ba9e:	9907      	ldr	r1, [sp, #28]
 801baa0:	462a      	mov	r2, r5
 801baa2:	f7ff ff19 	bl	801b8d8 <strncmp>
 801baa6:	b398      	cbz	r0, 801bb10 <_strtod_l+0x1d8>
 801baa8:	2000      	movs	r0, #0
 801baaa:	4633      	mov	r3, r6
 801baac:	463d      	mov	r5, r7
 801baae:	9007      	str	r0, [sp, #28]
 801bab0:	4602      	mov	r2, r0
 801bab2:	2b65      	cmp	r3, #101	; 0x65
 801bab4:	d001      	beq.n	801baba <_strtod_l+0x182>
 801bab6:	2b45      	cmp	r3, #69	; 0x45
 801bab8:	d118      	bne.n	801baec <_strtod_l+0x1b4>
 801baba:	b91d      	cbnz	r5, 801bac4 <_strtod_l+0x18c>
 801babc:	9b04      	ldr	r3, [sp, #16]
 801babe:	4303      	orrs	r3, r0
 801bac0:	d098      	beq.n	801b9f4 <_strtod_l+0xbc>
 801bac2:	2500      	movs	r5, #0
 801bac4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801bac8:	f108 0301 	add.w	r3, r8, #1
 801bacc:	931d      	str	r3, [sp, #116]	; 0x74
 801bace:	f898 3001 	ldrb.w	r3, [r8, #1]
 801bad2:	2b2b      	cmp	r3, #43	; 0x2b
 801bad4:	d075      	beq.n	801bbc2 <_strtod_l+0x28a>
 801bad6:	2b2d      	cmp	r3, #45	; 0x2d
 801bad8:	d07b      	beq.n	801bbd2 <_strtod_l+0x29a>
 801bada:	f04f 0c00 	mov.w	ip, #0
 801bade:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801bae2:	2909      	cmp	r1, #9
 801bae4:	f240 8082 	bls.w	801bbec <_strtod_l+0x2b4>
 801bae8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801baec:	2600      	movs	r6, #0
 801baee:	e09d      	b.n	801bc2c <_strtod_l+0x2f4>
 801baf0:	2300      	movs	r3, #0
 801baf2:	e7c4      	b.n	801ba7e <_strtod_l+0x146>
 801baf4:	2f08      	cmp	r7, #8
 801baf6:	bfd8      	it	le
 801baf8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801bafa:	f100 0001 	add.w	r0, r0, #1
 801bafe:	bfda      	itte	le
 801bb00:	fb02 3301 	mlale	r3, r2, r1, r3
 801bb04:	9309      	strle	r3, [sp, #36]	; 0x24
 801bb06:	fb02 3909 	mlagt	r9, r2, r9, r3
 801bb0a:	3701      	adds	r7, #1
 801bb0c:	901d      	str	r0, [sp, #116]	; 0x74
 801bb0e:	e7bf      	b.n	801ba90 <_strtod_l+0x158>
 801bb10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bb12:	195a      	adds	r2, r3, r5
 801bb14:	921d      	str	r2, [sp, #116]	; 0x74
 801bb16:	5d5b      	ldrb	r3, [r3, r5]
 801bb18:	2f00      	cmp	r7, #0
 801bb1a:	d037      	beq.n	801bb8c <_strtod_l+0x254>
 801bb1c:	9007      	str	r0, [sp, #28]
 801bb1e:	463d      	mov	r5, r7
 801bb20:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801bb24:	2a09      	cmp	r2, #9
 801bb26:	d912      	bls.n	801bb4e <_strtod_l+0x216>
 801bb28:	2201      	movs	r2, #1
 801bb2a:	e7c2      	b.n	801bab2 <_strtod_l+0x17a>
 801bb2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bb2e:	1c5a      	adds	r2, r3, #1
 801bb30:	921d      	str	r2, [sp, #116]	; 0x74
 801bb32:	785b      	ldrb	r3, [r3, #1]
 801bb34:	3001      	adds	r0, #1
 801bb36:	2b30      	cmp	r3, #48	; 0x30
 801bb38:	d0f8      	beq.n	801bb2c <_strtod_l+0x1f4>
 801bb3a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801bb3e:	2a08      	cmp	r2, #8
 801bb40:	f200 84db 	bhi.w	801c4fa <_strtod_l+0xbc2>
 801bb44:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801bb46:	9007      	str	r0, [sp, #28]
 801bb48:	2000      	movs	r0, #0
 801bb4a:	920a      	str	r2, [sp, #40]	; 0x28
 801bb4c:	4605      	mov	r5, r0
 801bb4e:	3b30      	subs	r3, #48	; 0x30
 801bb50:	f100 0201 	add.w	r2, r0, #1
 801bb54:	d014      	beq.n	801bb80 <_strtod_l+0x248>
 801bb56:	9907      	ldr	r1, [sp, #28]
 801bb58:	4411      	add	r1, r2
 801bb5a:	9107      	str	r1, [sp, #28]
 801bb5c:	462a      	mov	r2, r5
 801bb5e:	eb00 0e05 	add.w	lr, r0, r5
 801bb62:	210a      	movs	r1, #10
 801bb64:	4572      	cmp	r2, lr
 801bb66:	d113      	bne.n	801bb90 <_strtod_l+0x258>
 801bb68:	182a      	adds	r2, r5, r0
 801bb6a:	2a08      	cmp	r2, #8
 801bb6c:	f105 0501 	add.w	r5, r5, #1
 801bb70:	4405      	add	r5, r0
 801bb72:	dc1c      	bgt.n	801bbae <_strtod_l+0x276>
 801bb74:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bb76:	220a      	movs	r2, #10
 801bb78:	fb02 3301 	mla	r3, r2, r1, r3
 801bb7c:	9309      	str	r3, [sp, #36]	; 0x24
 801bb7e:	2200      	movs	r2, #0
 801bb80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bb82:	1c59      	adds	r1, r3, #1
 801bb84:	911d      	str	r1, [sp, #116]	; 0x74
 801bb86:	785b      	ldrb	r3, [r3, #1]
 801bb88:	4610      	mov	r0, r2
 801bb8a:	e7c9      	b.n	801bb20 <_strtod_l+0x1e8>
 801bb8c:	4638      	mov	r0, r7
 801bb8e:	e7d2      	b.n	801bb36 <_strtod_l+0x1fe>
 801bb90:	2a08      	cmp	r2, #8
 801bb92:	dc04      	bgt.n	801bb9e <_strtod_l+0x266>
 801bb94:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801bb96:	434e      	muls	r6, r1
 801bb98:	9609      	str	r6, [sp, #36]	; 0x24
 801bb9a:	3201      	adds	r2, #1
 801bb9c:	e7e2      	b.n	801bb64 <_strtod_l+0x22c>
 801bb9e:	f102 0c01 	add.w	ip, r2, #1
 801bba2:	f1bc 0f10 	cmp.w	ip, #16
 801bba6:	bfd8      	it	le
 801bba8:	fb01 f909 	mulle.w	r9, r1, r9
 801bbac:	e7f5      	b.n	801bb9a <_strtod_l+0x262>
 801bbae:	2d10      	cmp	r5, #16
 801bbb0:	bfdc      	itt	le
 801bbb2:	220a      	movle	r2, #10
 801bbb4:	fb02 3909 	mlale	r9, r2, r9, r3
 801bbb8:	e7e1      	b.n	801bb7e <_strtod_l+0x246>
 801bbba:	2300      	movs	r3, #0
 801bbbc:	9307      	str	r3, [sp, #28]
 801bbbe:	2201      	movs	r2, #1
 801bbc0:	e77c      	b.n	801babc <_strtod_l+0x184>
 801bbc2:	f04f 0c00 	mov.w	ip, #0
 801bbc6:	f108 0302 	add.w	r3, r8, #2
 801bbca:	931d      	str	r3, [sp, #116]	; 0x74
 801bbcc:	f898 3002 	ldrb.w	r3, [r8, #2]
 801bbd0:	e785      	b.n	801bade <_strtod_l+0x1a6>
 801bbd2:	f04f 0c01 	mov.w	ip, #1
 801bbd6:	e7f6      	b.n	801bbc6 <_strtod_l+0x28e>
 801bbd8:	08022448 	.word	0x08022448
 801bbdc:	08022238 	.word	0x08022238
 801bbe0:	7ff00000 	.word	0x7ff00000
 801bbe4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bbe6:	1c59      	adds	r1, r3, #1
 801bbe8:	911d      	str	r1, [sp, #116]	; 0x74
 801bbea:	785b      	ldrb	r3, [r3, #1]
 801bbec:	2b30      	cmp	r3, #48	; 0x30
 801bbee:	d0f9      	beq.n	801bbe4 <_strtod_l+0x2ac>
 801bbf0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801bbf4:	2908      	cmp	r1, #8
 801bbf6:	f63f af79 	bhi.w	801baec <_strtod_l+0x1b4>
 801bbfa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801bbfe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bc00:	9308      	str	r3, [sp, #32]
 801bc02:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bc04:	1c59      	adds	r1, r3, #1
 801bc06:	911d      	str	r1, [sp, #116]	; 0x74
 801bc08:	785b      	ldrb	r3, [r3, #1]
 801bc0a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801bc0e:	2e09      	cmp	r6, #9
 801bc10:	d937      	bls.n	801bc82 <_strtod_l+0x34a>
 801bc12:	9e08      	ldr	r6, [sp, #32]
 801bc14:	1b89      	subs	r1, r1, r6
 801bc16:	2908      	cmp	r1, #8
 801bc18:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801bc1c:	dc02      	bgt.n	801bc24 <_strtod_l+0x2ec>
 801bc1e:	4576      	cmp	r6, lr
 801bc20:	bfa8      	it	ge
 801bc22:	4676      	movge	r6, lr
 801bc24:	f1bc 0f00 	cmp.w	ip, #0
 801bc28:	d000      	beq.n	801bc2c <_strtod_l+0x2f4>
 801bc2a:	4276      	negs	r6, r6
 801bc2c:	2d00      	cmp	r5, #0
 801bc2e:	d14f      	bne.n	801bcd0 <_strtod_l+0x398>
 801bc30:	9904      	ldr	r1, [sp, #16]
 801bc32:	4301      	orrs	r1, r0
 801bc34:	f47f aec2 	bne.w	801b9bc <_strtod_l+0x84>
 801bc38:	2a00      	cmp	r2, #0
 801bc3a:	f47f aedb 	bne.w	801b9f4 <_strtod_l+0xbc>
 801bc3e:	2b69      	cmp	r3, #105	; 0x69
 801bc40:	d027      	beq.n	801bc92 <_strtod_l+0x35a>
 801bc42:	dc24      	bgt.n	801bc8e <_strtod_l+0x356>
 801bc44:	2b49      	cmp	r3, #73	; 0x49
 801bc46:	d024      	beq.n	801bc92 <_strtod_l+0x35a>
 801bc48:	2b4e      	cmp	r3, #78	; 0x4e
 801bc4a:	f47f aed3 	bne.w	801b9f4 <_strtod_l+0xbc>
 801bc4e:	499e      	ldr	r1, [pc, #632]	; (801bec8 <_strtod_l+0x590>)
 801bc50:	a81d      	add	r0, sp, #116	; 0x74
 801bc52:	f002 fb85 	bl	801e360 <__match>
 801bc56:	2800      	cmp	r0, #0
 801bc58:	f43f aecc 	beq.w	801b9f4 <_strtod_l+0xbc>
 801bc5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bc5e:	781b      	ldrb	r3, [r3, #0]
 801bc60:	2b28      	cmp	r3, #40	; 0x28
 801bc62:	d12d      	bne.n	801bcc0 <_strtod_l+0x388>
 801bc64:	4999      	ldr	r1, [pc, #612]	; (801becc <_strtod_l+0x594>)
 801bc66:	aa20      	add	r2, sp, #128	; 0x80
 801bc68:	a81d      	add	r0, sp, #116	; 0x74
 801bc6a:	f002 fb8d 	bl	801e388 <__hexnan>
 801bc6e:	2805      	cmp	r0, #5
 801bc70:	d126      	bne.n	801bcc0 <_strtod_l+0x388>
 801bc72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bc74:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801bc78:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801bc7c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801bc80:	e69c      	b.n	801b9bc <_strtod_l+0x84>
 801bc82:	210a      	movs	r1, #10
 801bc84:	fb01 3e0e 	mla	lr, r1, lr, r3
 801bc88:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801bc8c:	e7b9      	b.n	801bc02 <_strtod_l+0x2ca>
 801bc8e:	2b6e      	cmp	r3, #110	; 0x6e
 801bc90:	e7db      	b.n	801bc4a <_strtod_l+0x312>
 801bc92:	498f      	ldr	r1, [pc, #572]	; (801bed0 <_strtod_l+0x598>)
 801bc94:	a81d      	add	r0, sp, #116	; 0x74
 801bc96:	f002 fb63 	bl	801e360 <__match>
 801bc9a:	2800      	cmp	r0, #0
 801bc9c:	f43f aeaa 	beq.w	801b9f4 <_strtod_l+0xbc>
 801bca0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bca2:	498c      	ldr	r1, [pc, #560]	; (801bed4 <_strtod_l+0x59c>)
 801bca4:	3b01      	subs	r3, #1
 801bca6:	a81d      	add	r0, sp, #116	; 0x74
 801bca8:	931d      	str	r3, [sp, #116]	; 0x74
 801bcaa:	f002 fb59 	bl	801e360 <__match>
 801bcae:	b910      	cbnz	r0, 801bcb6 <_strtod_l+0x37e>
 801bcb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bcb2:	3301      	adds	r3, #1
 801bcb4:	931d      	str	r3, [sp, #116]	; 0x74
 801bcb6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801bee4 <_strtod_l+0x5ac>
 801bcba:	f04f 0a00 	mov.w	sl, #0
 801bcbe:	e67d      	b.n	801b9bc <_strtod_l+0x84>
 801bcc0:	4885      	ldr	r0, [pc, #532]	; (801bed8 <_strtod_l+0x5a0>)
 801bcc2:	f7fd ffd5 	bl	8019c70 <nan>
 801bcc6:	ed8d 0b04 	vstr	d0, [sp, #16]
 801bcca:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801bcce:	e675      	b.n	801b9bc <_strtod_l+0x84>
 801bcd0:	9b07      	ldr	r3, [sp, #28]
 801bcd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bcd4:	1af3      	subs	r3, r6, r3
 801bcd6:	2f00      	cmp	r7, #0
 801bcd8:	bf08      	it	eq
 801bcda:	462f      	moveq	r7, r5
 801bcdc:	2d10      	cmp	r5, #16
 801bcde:	9308      	str	r3, [sp, #32]
 801bce0:	46a8      	mov	r8, r5
 801bce2:	bfa8      	it	ge
 801bce4:	f04f 0810 	movge.w	r8, #16
 801bce8:	f7e4 fc2c 	bl	8000544 <__aeabi_ui2d>
 801bcec:	2d09      	cmp	r5, #9
 801bcee:	4682      	mov	sl, r0
 801bcf0:	468b      	mov	fp, r1
 801bcf2:	dd13      	ble.n	801bd1c <_strtod_l+0x3e4>
 801bcf4:	4b79      	ldr	r3, [pc, #484]	; (801bedc <_strtod_l+0x5a4>)
 801bcf6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801bcfa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801bcfe:	f7e4 fc9b 	bl	8000638 <__aeabi_dmul>
 801bd02:	4682      	mov	sl, r0
 801bd04:	4648      	mov	r0, r9
 801bd06:	468b      	mov	fp, r1
 801bd08:	f7e4 fc1c 	bl	8000544 <__aeabi_ui2d>
 801bd0c:	4602      	mov	r2, r0
 801bd0e:	460b      	mov	r3, r1
 801bd10:	4650      	mov	r0, sl
 801bd12:	4659      	mov	r1, fp
 801bd14:	f7e4 fada 	bl	80002cc <__adddf3>
 801bd18:	4682      	mov	sl, r0
 801bd1a:	468b      	mov	fp, r1
 801bd1c:	2d0f      	cmp	r5, #15
 801bd1e:	dc38      	bgt.n	801bd92 <_strtod_l+0x45a>
 801bd20:	9b08      	ldr	r3, [sp, #32]
 801bd22:	2b00      	cmp	r3, #0
 801bd24:	f43f ae4a 	beq.w	801b9bc <_strtod_l+0x84>
 801bd28:	dd24      	ble.n	801bd74 <_strtod_l+0x43c>
 801bd2a:	2b16      	cmp	r3, #22
 801bd2c:	dc0b      	bgt.n	801bd46 <_strtod_l+0x40e>
 801bd2e:	4d6b      	ldr	r5, [pc, #428]	; (801bedc <_strtod_l+0x5a4>)
 801bd30:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801bd34:	e9d5 0100 	ldrd	r0, r1, [r5]
 801bd38:	4652      	mov	r2, sl
 801bd3a:	465b      	mov	r3, fp
 801bd3c:	f7e4 fc7c 	bl	8000638 <__aeabi_dmul>
 801bd40:	4682      	mov	sl, r0
 801bd42:	468b      	mov	fp, r1
 801bd44:	e63a      	b.n	801b9bc <_strtod_l+0x84>
 801bd46:	9a08      	ldr	r2, [sp, #32]
 801bd48:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801bd4c:	4293      	cmp	r3, r2
 801bd4e:	db20      	blt.n	801bd92 <_strtod_l+0x45a>
 801bd50:	4c62      	ldr	r4, [pc, #392]	; (801bedc <_strtod_l+0x5a4>)
 801bd52:	f1c5 050f 	rsb	r5, r5, #15
 801bd56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801bd5a:	4652      	mov	r2, sl
 801bd5c:	465b      	mov	r3, fp
 801bd5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bd62:	f7e4 fc69 	bl	8000638 <__aeabi_dmul>
 801bd66:	9b08      	ldr	r3, [sp, #32]
 801bd68:	1b5d      	subs	r5, r3, r5
 801bd6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801bd6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801bd72:	e7e3      	b.n	801bd3c <_strtod_l+0x404>
 801bd74:	9b08      	ldr	r3, [sp, #32]
 801bd76:	3316      	adds	r3, #22
 801bd78:	db0b      	blt.n	801bd92 <_strtod_l+0x45a>
 801bd7a:	9b07      	ldr	r3, [sp, #28]
 801bd7c:	4a57      	ldr	r2, [pc, #348]	; (801bedc <_strtod_l+0x5a4>)
 801bd7e:	1b9e      	subs	r6, r3, r6
 801bd80:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801bd84:	e9d6 2300 	ldrd	r2, r3, [r6]
 801bd88:	4650      	mov	r0, sl
 801bd8a:	4659      	mov	r1, fp
 801bd8c:	f7e4 fd7e 	bl	800088c <__aeabi_ddiv>
 801bd90:	e7d6      	b.n	801bd40 <_strtod_l+0x408>
 801bd92:	9b08      	ldr	r3, [sp, #32]
 801bd94:	eba5 0808 	sub.w	r8, r5, r8
 801bd98:	4498      	add	r8, r3
 801bd9a:	f1b8 0f00 	cmp.w	r8, #0
 801bd9e:	dd71      	ble.n	801be84 <_strtod_l+0x54c>
 801bda0:	f018 030f 	ands.w	r3, r8, #15
 801bda4:	d00a      	beq.n	801bdbc <_strtod_l+0x484>
 801bda6:	494d      	ldr	r1, [pc, #308]	; (801bedc <_strtod_l+0x5a4>)
 801bda8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801bdac:	4652      	mov	r2, sl
 801bdae:	465b      	mov	r3, fp
 801bdb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bdb4:	f7e4 fc40 	bl	8000638 <__aeabi_dmul>
 801bdb8:	4682      	mov	sl, r0
 801bdba:	468b      	mov	fp, r1
 801bdbc:	f038 080f 	bics.w	r8, r8, #15
 801bdc0:	d04d      	beq.n	801be5e <_strtod_l+0x526>
 801bdc2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801bdc6:	dd22      	ble.n	801be0e <_strtod_l+0x4d6>
 801bdc8:	2500      	movs	r5, #0
 801bdca:	462e      	mov	r6, r5
 801bdcc:	9509      	str	r5, [sp, #36]	; 0x24
 801bdce:	9507      	str	r5, [sp, #28]
 801bdd0:	2322      	movs	r3, #34	; 0x22
 801bdd2:	f8df b110 	ldr.w	fp, [pc, #272]	; 801bee4 <_strtod_l+0x5ac>
 801bdd6:	6023      	str	r3, [r4, #0]
 801bdd8:	f04f 0a00 	mov.w	sl, #0
 801bddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bdde:	2b00      	cmp	r3, #0
 801bde0:	f43f adec 	beq.w	801b9bc <_strtod_l+0x84>
 801bde4:	991e      	ldr	r1, [sp, #120]	; 0x78
 801bde6:	4620      	mov	r0, r4
 801bde8:	f002 fd38 	bl	801e85c <_Bfree>
 801bdec:	9907      	ldr	r1, [sp, #28]
 801bdee:	4620      	mov	r0, r4
 801bdf0:	f002 fd34 	bl	801e85c <_Bfree>
 801bdf4:	4631      	mov	r1, r6
 801bdf6:	4620      	mov	r0, r4
 801bdf8:	f002 fd30 	bl	801e85c <_Bfree>
 801bdfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bdfe:	4620      	mov	r0, r4
 801be00:	f002 fd2c 	bl	801e85c <_Bfree>
 801be04:	4629      	mov	r1, r5
 801be06:	4620      	mov	r0, r4
 801be08:	f002 fd28 	bl	801e85c <_Bfree>
 801be0c:	e5d6      	b.n	801b9bc <_strtod_l+0x84>
 801be0e:	2300      	movs	r3, #0
 801be10:	ea4f 1828 	mov.w	r8, r8, asr #4
 801be14:	4650      	mov	r0, sl
 801be16:	4659      	mov	r1, fp
 801be18:	4699      	mov	r9, r3
 801be1a:	f1b8 0f01 	cmp.w	r8, #1
 801be1e:	dc21      	bgt.n	801be64 <_strtod_l+0x52c>
 801be20:	b10b      	cbz	r3, 801be26 <_strtod_l+0x4ee>
 801be22:	4682      	mov	sl, r0
 801be24:	468b      	mov	fp, r1
 801be26:	4b2e      	ldr	r3, [pc, #184]	; (801bee0 <_strtod_l+0x5a8>)
 801be28:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801be2c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801be30:	4652      	mov	r2, sl
 801be32:	465b      	mov	r3, fp
 801be34:	e9d9 0100 	ldrd	r0, r1, [r9]
 801be38:	f7e4 fbfe 	bl	8000638 <__aeabi_dmul>
 801be3c:	4b29      	ldr	r3, [pc, #164]	; (801bee4 <_strtod_l+0x5ac>)
 801be3e:	460a      	mov	r2, r1
 801be40:	400b      	ands	r3, r1
 801be42:	4929      	ldr	r1, [pc, #164]	; (801bee8 <_strtod_l+0x5b0>)
 801be44:	428b      	cmp	r3, r1
 801be46:	4682      	mov	sl, r0
 801be48:	d8be      	bhi.n	801bdc8 <_strtod_l+0x490>
 801be4a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801be4e:	428b      	cmp	r3, r1
 801be50:	bf86      	itte	hi
 801be52:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801beec <_strtod_l+0x5b4>
 801be56:	f04f 3aff 	movhi.w	sl, #4294967295
 801be5a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801be5e:	2300      	movs	r3, #0
 801be60:	9304      	str	r3, [sp, #16]
 801be62:	e081      	b.n	801bf68 <_strtod_l+0x630>
 801be64:	f018 0f01 	tst.w	r8, #1
 801be68:	d007      	beq.n	801be7a <_strtod_l+0x542>
 801be6a:	4b1d      	ldr	r3, [pc, #116]	; (801bee0 <_strtod_l+0x5a8>)
 801be6c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801be70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be74:	f7e4 fbe0 	bl	8000638 <__aeabi_dmul>
 801be78:	2301      	movs	r3, #1
 801be7a:	f109 0901 	add.w	r9, r9, #1
 801be7e:	ea4f 0868 	mov.w	r8, r8, asr #1
 801be82:	e7ca      	b.n	801be1a <_strtod_l+0x4e2>
 801be84:	d0eb      	beq.n	801be5e <_strtod_l+0x526>
 801be86:	f1c8 0800 	rsb	r8, r8, #0
 801be8a:	f018 020f 	ands.w	r2, r8, #15
 801be8e:	d00a      	beq.n	801bea6 <_strtod_l+0x56e>
 801be90:	4b12      	ldr	r3, [pc, #72]	; (801bedc <_strtod_l+0x5a4>)
 801be92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801be96:	4650      	mov	r0, sl
 801be98:	4659      	mov	r1, fp
 801be9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be9e:	f7e4 fcf5 	bl	800088c <__aeabi_ddiv>
 801bea2:	4682      	mov	sl, r0
 801bea4:	468b      	mov	fp, r1
 801bea6:	ea5f 1828 	movs.w	r8, r8, asr #4
 801beaa:	d0d8      	beq.n	801be5e <_strtod_l+0x526>
 801beac:	f1b8 0f1f 	cmp.w	r8, #31
 801beb0:	dd1e      	ble.n	801bef0 <_strtod_l+0x5b8>
 801beb2:	2500      	movs	r5, #0
 801beb4:	462e      	mov	r6, r5
 801beb6:	9509      	str	r5, [sp, #36]	; 0x24
 801beb8:	9507      	str	r5, [sp, #28]
 801beba:	2322      	movs	r3, #34	; 0x22
 801bebc:	f04f 0a00 	mov.w	sl, #0
 801bec0:	f04f 0b00 	mov.w	fp, #0
 801bec4:	6023      	str	r3, [r4, #0]
 801bec6:	e789      	b.n	801bddc <_strtod_l+0x4a4>
 801bec8:	0802220d 	.word	0x0802220d
 801becc:	0802224c 	.word	0x0802224c
 801bed0:	08022205 	.word	0x08022205
 801bed4:	08022364 	.word	0x08022364
 801bed8:	08022360 	.word	0x08022360
 801bedc:	080224e8 	.word	0x080224e8
 801bee0:	080224c0 	.word	0x080224c0
 801bee4:	7ff00000 	.word	0x7ff00000
 801bee8:	7ca00000 	.word	0x7ca00000
 801beec:	7fefffff 	.word	0x7fefffff
 801bef0:	f018 0310 	ands.w	r3, r8, #16
 801bef4:	bf18      	it	ne
 801bef6:	236a      	movne	r3, #106	; 0x6a
 801bef8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801c2b0 <_strtod_l+0x978>
 801befc:	9304      	str	r3, [sp, #16]
 801befe:	4650      	mov	r0, sl
 801bf00:	4659      	mov	r1, fp
 801bf02:	2300      	movs	r3, #0
 801bf04:	f018 0f01 	tst.w	r8, #1
 801bf08:	d004      	beq.n	801bf14 <_strtod_l+0x5dc>
 801bf0a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801bf0e:	f7e4 fb93 	bl	8000638 <__aeabi_dmul>
 801bf12:	2301      	movs	r3, #1
 801bf14:	ea5f 0868 	movs.w	r8, r8, asr #1
 801bf18:	f109 0908 	add.w	r9, r9, #8
 801bf1c:	d1f2      	bne.n	801bf04 <_strtod_l+0x5cc>
 801bf1e:	b10b      	cbz	r3, 801bf24 <_strtod_l+0x5ec>
 801bf20:	4682      	mov	sl, r0
 801bf22:	468b      	mov	fp, r1
 801bf24:	9b04      	ldr	r3, [sp, #16]
 801bf26:	b1bb      	cbz	r3, 801bf58 <_strtod_l+0x620>
 801bf28:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801bf2c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801bf30:	2b00      	cmp	r3, #0
 801bf32:	4659      	mov	r1, fp
 801bf34:	dd10      	ble.n	801bf58 <_strtod_l+0x620>
 801bf36:	2b1f      	cmp	r3, #31
 801bf38:	f340 8128 	ble.w	801c18c <_strtod_l+0x854>
 801bf3c:	2b34      	cmp	r3, #52	; 0x34
 801bf3e:	bfde      	ittt	le
 801bf40:	3b20      	suble	r3, #32
 801bf42:	f04f 32ff 	movle.w	r2, #4294967295
 801bf46:	fa02 f303 	lslle.w	r3, r2, r3
 801bf4a:	f04f 0a00 	mov.w	sl, #0
 801bf4e:	bfcc      	ite	gt
 801bf50:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801bf54:	ea03 0b01 	andle.w	fp, r3, r1
 801bf58:	2200      	movs	r2, #0
 801bf5a:	2300      	movs	r3, #0
 801bf5c:	4650      	mov	r0, sl
 801bf5e:	4659      	mov	r1, fp
 801bf60:	f7e4 fdd2 	bl	8000b08 <__aeabi_dcmpeq>
 801bf64:	2800      	cmp	r0, #0
 801bf66:	d1a4      	bne.n	801beb2 <_strtod_l+0x57a>
 801bf68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf6a:	9300      	str	r3, [sp, #0]
 801bf6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801bf6e:	462b      	mov	r3, r5
 801bf70:	463a      	mov	r2, r7
 801bf72:	4620      	mov	r0, r4
 801bf74:	f002 fcde 	bl	801e934 <__s2b>
 801bf78:	9009      	str	r0, [sp, #36]	; 0x24
 801bf7a:	2800      	cmp	r0, #0
 801bf7c:	f43f af24 	beq.w	801bdc8 <_strtod_l+0x490>
 801bf80:	9b07      	ldr	r3, [sp, #28]
 801bf82:	1b9e      	subs	r6, r3, r6
 801bf84:	9b08      	ldr	r3, [sp, #32]
 801bf86:	2b00      	cmp	r3, #0
 801bf88:	bfb4      	ite	lt
 801bf8a:	4633      	movlt	r3, r6
 801bf8c:	2300      	movge	r3, #0
 801bf8e:	9310      	str	r3, [sp, #64]	; 0x40
 801bf90:	9b08      	ldr	r3, [sp, #32]
 801bf92:	2500      	movs	r5, #0
 801bf94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bf98:	9318      	str	r3, [sp, #96]	; 0x60
 801bf9a:	462e      	mov	r6, r5
 801bf9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf9e:	4620      	mov	r0, r4
 801bfa0:	6859      	ldr	r1, [r3, #4]
 801bfa2:	f002 fc1b 	bl	801e7dc <_Balloc>
 801bfa6:	9007      	str	r0, [sp, #28]
 801bfa8:	2800      	cmp	r0, #0
 801bfaa:	f43f af11 	beq.w	801bdd0 <_strtod_l+0x498>
 801bfae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bfb0:	691a      	ldr	r2, [r3, #16]
 801bfb2:	3202      	adds	r2, #2
 801bfb4:	f103 010c 	add.w	r1, r3, #12
 801bfb8:	0092      	lsls	r2, r2, #2
 801bfba:	300c      	adds	r0, #12
 801bfbc:	f7fe f8c2 	bl	801a144 <memcpy>
 801bfc0:	ec4b ab10 	vmov	d0, sl, fp
 801bfc4:	aa20      	add	r2, sp, #128	; 0x80
 801bfc6:	a91f      	add	r1, sp, #124	; 0x7c
 801bfc8:	4620      	mov	r0, r4
 801bfca:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801bfce:	f002 ffed 	bl	801efac <__d2b>
 801bfd2:	901e      	str	r0, [sp, #120]	; 0x78
 801bfd4:	2800      	cmp	r0, #0
 801bfd6:	f43f aefb 	beq.w	801bdd0 <_strtod_l+0x498>
 801bfda:	2101      	movs	r1, #1
 801bfdc:	4620      	mov	r0, r4
 801bfde:	f002 fd43 	bl	801ea68 <__i2b>
 801bfe2:	4606      	mov	r6, r0
 801bfe4:	2800      	cmp	r0, #0
 801bfe6:	f43f aef3 	beq.w	801bdd0 <_strtod_l+0x498>
 801bfea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801bfec:	9904      	ldr	r1, [sp, #16]
 801bfee:	2b00      	cmp	r3, #0
 801bff0:	bfab      	itete	ge
 801bff2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801bff4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801bff6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801bff8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801bffc:	bfac      	ite	ge
 801bffe:	eb03 0902 	addge.w	r9, r3, r2
 801c002:	1ad7      	sublt	r7, r2, r3
 801c004:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c006:	eba3 0801 	sub.w	r8, r3, r1
 801c00a:	4490      	add	r8, r2
 801c00c:	4ba3      	ldr	r3, [pc, #652]	; (801c29c <_strtod_l+0x964>)
 801c00e:	f108 38ff 	add.w	r8, r8, #4294967295
 801c012:	4598      	cmp	r8, r3
 801c014:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801c018:	f280 80cc 	bge.w	801c1b4 <_strtod_l+0x87c>
 801c01c:	eba3 0308 	sub.w	r3, r3, r8
 801c020:	2b1f      	cmp	r3, #31
 801c022:	eba2 0203 	sub.w	r2, r2, r3
 801c026:	f04f 0101 	mov.w	r1, #1
 801c02a:	f300 80b6 	bgt.w	801c19a <_strtod_l+0x862>
 801c02e:	fa01 f303 	lsl.w	r3, r1, r3
 801c032:	9311      	str	r3, [sp, #68]	; 0x44
 801c034:	2300      	movs	r3, #0
 801c036:	930c      	str	r3, [sp, #48]	; 0x30
 801c038:	eb09 0802 	add.w	r8, r9, r2
 801c03c:	9b04      	ldr	r3, [sp, #16]
 801c03e:	45c1      	cmp	r9, r8
 801c040:	4417      	add	r7, r2
 801c042:	441f      	add	r7, r3
 801c044:	464b      	mov	r3, r9
 801c046:	bfa8      	it	ge
 801c048:	4643      	movge	r3, r8
 801c04a:	42bb      	cmp	r3, r7
 801c04c:	bfa8      	it	ge
 801c04e:	463b      	movge	r3, r7
 801c050:	2b00      	cmp	r3, #0
 801c052:	bfc2      	ittt	gt
 801c054:	eba8 0803 	subgt.w	r8, r8, r3
 801c058:	1aff      	subgt	r7, r7, r3
 801c05a:	eba9 0903 	subgt.w	r9, r9, r3
 801c05e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c060:	2b00      	cmp	r3, #0
 801c062:	dd17      	ble.n	801c094 <_strtod_l+0x75c>
 801c064:	4631      	mov	r1, r6
 801c066:	461a      	mov	r2, r3
 801c068:	4620      	mov	r0, r4
 801c06a:	f002 fdb9 	bl	801ebe0 <__pow5mult>
 801c06e:	4606      	mov	r6, r0
 801c070:	2800      	cmp	r0, #0
 801c072:	f43f aead 	beq.w	801bdd0 <_strtod_l+0x498>
 801c076:	4601      	mov	r1, r0
 801c078:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c07a:	4620      	mov	r0, r4
 801c07c:	f002 fd0a 	bl	801ea94 <__multiply>
 801c080:	900f      	str	r0, [sp, #60]	; 0x3c
 801c082:	2800      	cmp	r0, #0
 801c084:	f43f aea4 	beq.w	801bdd0 <_strtod_l+0x498>
 801c088:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c08a:	4620      	mov	r0, r4
 801c08c:	f002 fbe6 	bl	801e85c <_Bfree>
 801c090:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c092:	931e      	str	r3, [sp, #120]	; 0x78
 801c094:	f1b8 0f00 	cmp.w	r8, #0
 801c098:	f300 8091 	bgt.w	801c1be <_strtod_l+0x886>
 801c09c:	9b08      	ldr	r3, [sp, #32]
 801c09e:	2b00      	cmp	r3, #0
 801c0a0:	dd08      	ble.n	801c0b4 <_strtod_l+0x77c>
 801c0a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c0a4:	9907      	ldr	r1, [sp, #28]
 801c0a6:	4620      	mov	r0, r4
 801c0a8:	f002 fd9a 	bl	801ebe0 <__pow5mult>
 801c0ac:	9007      	str	r0, [sp, #28]
 801c0ae:	2800      	cmp	r0, #0
 801c0b0:	f43f ae8e 	beq.w	801bdd0 <_strtod_l+0x498>
 801c0b4:	2f00      	cmp	r7, #0
 801c0b6:	dd08      	ble.n	801c0ca <_strtod_l+0x792>
 801c0b8:	9907      	ldr	r1, [sp, #28]
 801c0ba:	463a      	mov	r2, r7
 801c0bc:	4620      	mov	r0, r4
 801c0be:	f002 fde9 	bl	801ec94 <__lshift>
 801c0c2:	9007      	str	r0, [sp, #28]
 801c0c4:	2800      	cmp	r0, #0
 801c0c6:	f43f ae83 	beq.w	801bdd0 <_strtod_l+0x498>
 801c0ca:	f1b9 0f00 	cmp.w	r9, #0
 801c0ce:	dd08      	ble.n	801c0e2 <_strtod_l+0x7aa>
 801c0d0:	4631      	mov	r1, r6
 801c0d2:	464a      	mov	r2, r9
 801c0d4:	4620      	mov	r0, r4
 801c0d6:	f002 fddd 	bl	801ec94 <__lshift>
 801c0da:	4606      	mov	r6, r0
 801c0dc:	2800      	cmp	r0, #0
 801c0de:	f43f ae77 	beq.w	801bdd0 <_strtod_l+0x498>
 801c0e2:	9a07      	ldr	r2, [sp, #28]
 801c0e4:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c0e6:	4620      	mov	r0, r4
 801c0e8:	f002 fe5c 	bl	801eda4 <__mdiff>
 801c0ec:	4605      	mov	r5, r0
 801c0ee:	2800      	cmp	r0, #0
 801c0f0:	f43f ae6e 	beq.w	801bdd0 <_strtod_l+0x498>
 801c0f4:	68c3      	ldr	r3, [r0, #12]
 801c0f6:	930f      	str	r3, [sp, #60]	; 0x3c
 801c0f8:	2300      	movs	r3, #0
 801c0fa:	60c3      	str	r3, [r0, #12]
 801c0fc:	4631      	mov	r1, r6
 801c0fe:	f002 fe35 	bl	801ed6c <__mcmp>
 801c102:	2800      	cmp	r0, #0
 801c104:	da65      	bge.n	801c1d2 <_strtod_l+0x89a>
 801c106:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c108:	ea53 030a 	orrs.w	r3, r3, sl
 801c10c:	f040 8087 	bne.w	801c21e <_strtod_l+0x8e6>
 801c110:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c114:	2b00      	cmp	r3, #0
 801c116:	f040 8082 	bne.w	801c21e <_strtod_l+0x8e6>
 801c11a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c11e:	0d1b      	lsrs	r3, r3, #20
 801c120:	051b      	lsls	r3, r3, #20
 801c122:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801c126:	d97a      	bls.n	801c21e <_strtod_l+0x8e6>
 801c128:	696b      	ldr	r3, [r5, #20]
 801c12a:	b913      	cbnz	r3, 801c132 <_strtod_l+0x7fa>
 801c12c:	692b      	ldr	r3, [r5, #16]
 801c12e:	2b01      	cmp	r3, #1
 801c130:	dd75      	ble.n	801c21e <_strtod_l+0x8e6>
 801c132:	4629      	mov	r1, r5
 801c134:	2201      	movs	r2, #1
 801c136:	4620      	mov	r0, r4
 801c138:	f002 fdac 	bl	801ec94 <__lshift>
 801c13c:	4631      	mov	r1, r6
 801c13e:	4605      	mov	r5, r0
 801c140:	f002 fe14 	bl	801ed6c <__mcmp>
 801c144:	2800      	cmp	r0, #0
 801c146:	dd6a      	ble.n	801c21e <_strtod_l+0x8e6>
 801c148:	9904      	ldr	r1, [sp, #16]
 801c14a:	4a55      	ldr	r2, [pc, #340]	; (801c2a0 <_strtod_l+0x968>)
 801c14c:	465b      	mov	r3, fp
 801c14e:	2900      	cmp	r1, #0
 801c150:	f000 8085 	beq.w	801c25e <_strtod_l+0x926>
 801c154:	ea02 010b 	and.w	r1, r2, fp
 801c158:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801c15c:	dc7f      	bgt.n	801c25e <_strtod_l+0x926>
 801c15e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801c162:	f77f aeaa 	ble.w	801beba <_strtod_l+0x582>
 801c166:	4a4f      	ldr	r2, [pc, #316]	; (801c2a4 <_strtod_l+0x96c>)
 801c168:	2300      	movs	r3, #0
 801c16a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801c16e:	4650      	mov	r0, sl
 801c170:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801c174:	4659      	mov	r1, fp
 801c176:	f7e4 fa5f 	bl	8000638 <__aeabi_dmul>
 801c17a:	460b      	mov	r3, r1
 801c17c:	4303      	orrs	r3, r0
 801c17e:	bf08      	it	eq
 801c180:	2322      	moveq	r3, #34	; 0x22
 801c182:	4682      	mov	sl, r0
 801c184:	468b      	mov	fp, r1
 801c186:	bf08      	it	eq
 801c188:	6023      	streq	r3, [r4, #0]
 801c18a:	e62b      	b.n	801bde4 <_strtod_l+0x4ac>
 801c18c:	f04f 32ff 	mov.w	r2, #4294967295
 801c190:	fa02 f303 	lsl.w	r3, r2, r3
 801c194:	ea03 0a0a 	and.w	sl, r3, sl
 801c198:	e6de      	b.n	801bf58 <_strtod_l+0x620>
 801c19a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801c19e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801c1a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801c1a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801c1aa:	fa01 f308 	lsl.w	r3, r1, r8
 801c1ae:	930c      	str	r3, [sp, #48]	; 0x30
 801c1b0:	9111      	str	r1, [sp, #68]	; 0x44
 801c1b2:	e741      	b.n	801c038 <_strtod_l+0x700>
 801c1b4:	2300      	movs	r3, #0
 801c1b6:	930c      	str	r3, [sp, #48]	; 0x30
 801c1b8:	2301      	movs	r3, #1
 801c1ba:	9311      	str	r3, [sp, #68]	; 0x44
 801c1bc:	e73c      	b.n	801c038 <_strtod_l+0x700>
 801c1be:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c1c0:	4642      	mov	r2, r8
 801c1c2:	4620      	mov	r0, r4
 801c1c4:	f002 fd66 	bl	801ec94 <__lshift>
 801c1c8:	901e      	str	r0, [sp, #120]	; 0x78
 801c1ca:	2800      	cmp	r0, #0
 801c1cc:	f47f af66 	bne.w	801c09c <_strtod_l+0x764>
 801c1d0:	e5fe      	b.n	801bdd0 <_strtod_l+0x498>
 801c1d2:	465f      	mov	r7, fp
 801c1d4:	d16e      	bne.n	801c2b4 <_strtod_l+0x97c>
 801c1d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c1d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c1dc:	b342      	cbz	r2, 801c230 <_strtod_l+0x8f8>
 801c1de:	4a32      	ldr	r2, [pc, #200]	; (801c2a8 <_strtod_l+0x970>)
 801c1e0:	4293      	cmp	r3, r2
 801c1e2:	d128      	bne.n	801c236 <_strtod_l+0x8fe>
 801c1e4:	9b04      	ldr	r3, [sp, #16]
 801c1e6:	4650      	mov	r0, sl
 801c1e8:	b1eb      	cbz	r3, 801c226 <_strtod_l+0x8ee>
 801c1ea:	4a2d      	ldr	r2, [pc, #180]	; (801c2a0 <_strtod_l+0x968>)
 801c1ec:	403a      	ands	r2, r7
 801c1ee:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801c1f2:	f04f 31ff 	mov.w	r1, #4294967295
 801c1f6:	d819      	bhi.n	801c22c <_strtod_l+0x8f4>
 801c1f8:	0d12      	lsrs	r2, r2, #20
 801c1fa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801c1fe:	fa01 f303 	lsl.w	r3, r1, r3
 801c202:	4298      	cmp	r0, r3
 801c204:	d117      	bne.n	801c236 <_strtod_l+0x8fe>
 801c206:	4b29      	ldr	r3, [pc, #164]	; (801c2ac <_strtod_l+0x974>)
 801c208:	429f      	cmp	r7, r3
 801c20a:	d102      	bne.n	801c212 <_strtod_l+0x8da>
 801c20c:	3001      	adds	r0, #1
 801c20e:	f43f addf 	beq.w	801bdd0 <_strtod_l+0x498>
 801c212:	4b23      	ldr	r3, [pc, #140]	; (801c2a0 <_strtod_l+0x968>)
 801c214:	403b      	ands	r3, r7
 801c216:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801c21a:	f04f 0a00 	mov.w	sl, #0
 801c21e:	9b04      	ldr	r3, [sp, #16]
 801c220:	2b00      	cmp	r3, #0
 801c222:	d1a0      	bne.n	801c166 <_strtod_l+0x82e>
 801c224:	e5de      	b.n	801bde4 <_strtod_l+0x4ac>
 801c226:	f04f 33ff 	mov.w	r3, #4294967295
 801c22a:	e7ea      	b.n	801c202 <_strtod_l+0x8ca>
 801c22c:	460b      	mov	r3, r1
 801c22e:	e7e8      	b.n	801c202 <_strtod_l+0x8ca>
 801c230:	ea53 030a 	orrs.w	r3, r3, sl
 801c234:	d088      	beq.n	801c148 <_strtod_l+0x810>
 801c236:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c238:	b1db      	cbz	r3, 801c272 <_strtod_l+0x93a>
 801c23a:	423b      	tst	r3, r7
 801c23c:	d0ef      	beq.n	801c21e <_strtod_l+0x8e6>
 801c23e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c240:	9a04      	ldr	r2, [sp, #16]
 801c242:	4650      	mov	r0, sl
 801c244:	4659      	mov	r1, fp
 801c246:	b1c3      	cbz	r3, 801c27a <_strtod_l+0x942>
 801c248:	f7ff fb58 	bl	801b8fc <sulp>
 801c24c:	4602      	mov	r2, r0
 801c24e:	460b      	mov	r3, r1
 801c250:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c254:	f7e4 f83a 	bl	80002cc <__adddf3>
 801c258:	4682      	mov	sl, r0
 801c25a:	468b      	mov	fp, r1
 801c25c:	e7df      	b.n	801c21e <_strtod_l+0x8e6>
 801c25e:	4013      	ands	r3, r2
 801c260:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801c264:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801c268:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801c26c:	f04f 3aff 	mov.w	sl, #4294967295
 801c270:	e7d5      	b.n	801c21e <_strtod_l+0x8e6>
 801c272:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c274:	ea13 0f0a 	tst.w	r3, sl
 801c278:	e7e0      	b.n	801c23c <_strtod_l+0x904>
 801c27a:	f7ff fb3f 	bl	801b8fc <sulp>
 801c27e:	4602      	mov	r2, r0
 801c280:	460b      	mov	r3, r1
 801c282:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c286:	f7e4 f81f 	bl	80002c8 <__aeabi_dsub>
 801c28a:	2200      	movs	r2, #0
 801c28c:	2300      	movs	r3, #0
 801c28e:	4682      	mov	sl, r0
 801c290:	468b      	mov	fp, r1
 801c292:	f7e4 fc39 	bl	8000b08 <__aeabi_dcmpeq>
 801c296:	2800      	cmp	r0, #0
 801c298:	d0c1      	beq.n	801c21e <_strtod_l+0x8e6>
 801c29a:	e60e      	b.n	801beba <_strtod_l+0x582>
 801c29c:	fffffc02 	.word	0xfffffc02
 801c2a0:	7ff00000 	.word	0x7ff00000
 801c2a4:	39500000 	.word	0x39500000
 801c2a8:	000fffff 	.word	0x000fffff
 801c2ac:	7fefffff 	.word	0x7fefffff
 801c2b0:	08022260 	.word	0x08022260
 801c2b4:	4631      	mov	r1, r6
 801c2b6:	4628      	mov	r0, r5
 801c2b8:	f002 fed4 	bl	801f064 <__ratio>
 801c2bc:	ec59 8b10 	vmov	r8, r9, d0
 801c2c0:	ee10 0a10 	vmov	r0, s0
 801c2c4:	2200      	movs	r2, #0
 801c2c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c2ca:	4649      	mov	r1, r9
 801c2cc:	f7e4 fc30 	bl	8000b30 <__aeabi_dcmple>
 801c2d0:	2800      	cmp	r0, #0
 801c2d2:	d07c      	beq.n	801c3ce <_strtod_l+0xa96>
 801c2d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c2d6:	2b00      	cmp	r3, #0
 801c2d8:	d04c      	beq.n	801c374 <_strtod_l+0xa3c>
 801c2da:	4b95      	ldr	r3, [pc, #596]	; (801c530 <_strtod_l+0xbf8>)
 801c2dc:	2200      	movs	r2, #0
 801c2de:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801c2e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801c530 <_strtod_l+0xbf8>
 801c2e6:	f04f 0800 	mov.w	r8, #0
 801c2ea:	4b92      	ldr	r3, [pc, #584]	; (801c534 <_strtod_l+0xbfc>)
 801c2ec:	403b      	ands	r3, r7
 801c2ee:	9311      	str	r3, [sp, #68]	; 0x44
 801c2f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c2f2:	4b91      	ldr	r3, [pc, #580]	; (801c538 <_strtod_l+0xc00>)
 801c2f4:	429a      	cmp	r2, r3
 801c2f6:	f040 80b2 	bne.w	801c45e <_strtod_l+0xb26>
 801c2fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c2fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c302:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801c306:	ec4b ab10 	vmov	d0, sl, fp
 801c30a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801c30e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c312:	f002 fdcf 	bl	801eeb4 <__ulp>
 801c316:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c31a:	ec53 2b10 	vmov	r2, r3, d0
 801c31e:	f7e4 f98b 	bl	8000638 <__aeabi_dmul>
 801c322:	4652      	mov	r2, sl
 801c324:	465b      	mov	r3, fp
 801c326:	f7e3 ffd1 	bl	80002cc <__adddf3>
 801c32a:	460b      	mov	r3, r1
 801c32c:	4981      	ldr	r1, [pc, #516]	; (801c534 <_strtod_l+0xbfc>)
 801c32e:	4a83      	ldr	r2, [pc, #524]	; (801c53c <_strtod_l+0xc04>)
 801c330:	4019      	ands	r1, r3
 801c332:	4291      	cmp	r1, r2
 801c334:	4682      	mov	sl, r0
 801c336:	d95e      	bls.n	801c3f6 <_strtod_l+0xabe>
 801c338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c33a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801c33e:	4293      	cmp	r3, r2
 801c340:	d103      	bne.n	801c34a <_strtod_l+0xa12>
 801c342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c344:	3301      	adds	r3, #1
 801c346:	f43f ad43 	beq.w	801bdd0 <_strtod_l+0x498>
 801c34a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801c548 <_strtod_l+0xc10>
 801c34e:	f04f 3aff 	mov.w	sl, #4294967295
 801c352:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c354:	4620      	mov	r0, r4
 801c356:	f002 fa81 	bl	801e85c <_Bfree>
 801c35a:	9907      	ldr	r1, [sp, #28]
 801c35c:	4620      	mov	r0, r4
 801c35e:	f002 fa7d 	bl	801e85c <_Bfree>
 801c362:	4631      	mov	r1, r6
 801c364:	4620      	mov	r0, r4
 801c366:	f002 fa79 	bl	801e85c <_Bfree>
 801c36a:	4629      	mov	r1, r5
 801c36c:	4620      	mov	r0, r4
 801c36e:	f002 fa75 	bl	801e85c <_Bfree>
 801c372:	e613      	b.n	801bf9c <_strtod_l+0x664>
 801c374:	f1ba 0f00 	cmp.w	sl, #0
 801c378:	d11b      	bne.n	801c3b2 <_strtod_l+0xa7a>
 801c37a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c37e:	b9f3      	cbnz	r3, 801c3be <_strtod_l+0xa86>
 801c380:	4b6b      	ldr	r3, [pc, #428]	; (801c530 <_strtod_l+0xbf8>)
 801c382:	2200      	movs	r2, #0
 801c384:	4640      	mov	r0, r8
 801c386:	4649      	mov	r1, r9
 801c388:	f7e4 fbc8 	bl	8000b1c <__aeabi_dcmplt>
 801c38c:	b9d0      	cbnz	r0, 801c3c4 <_strtod_l+0xa8c>
 801c38e:	4640      	mov	r0, r8
 801c390:	4649      	mov	r1, r9
 801c392:	4b6b      	ldr	r3, [pc, #428]	; (801c540 <_strtod_l+0xc08>)
 801c394:	2200      	movs	r2, #0
 801c396:	f7e4 f94f 	bl	8000638 <__aeabi_dmul>
 801c39a:	4680      	mov	r8, r0
 801c39c:	4689      	mov	r9, r1
 801c39e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801c3a2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801c3a6:	931b      	str	r3, [sp, #108]	; 0x6c
 801c3a8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801c3ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801c3b0:	e79b      	b.n	801c2ea <_strtod_l+0x9b2>
 801c3b2:	f1ba 0f01 	cmp.w	sl, #1
 801c3b6:	d102      	bne.n	801c3be <_strtod_l+0xa86>
 801c3b8:	2f00      	cmp	r7, #0
 801c3ba:	f43f ad7e 	beq.w	801beba <_strtod_l+0x582>
 801c3be:	4b61      	ldr	r3, [pc, #388]	; (801c544 <_strtod_l+0xc0c>)
 801c3c0:	2200      	movs	r2, #0
 801c3c2:	e78c      	b.n	801c2de <_strtod_l+0x9a6>
 801c3c4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801c540 <_strtod_l+0xc08>
 801c3c8:	f04f 0800 	mov.w	r8, #0
 801c3cc:	e7e7      	b.n	801c39e <_strtod_l+0xa66>
 801c3ce:	4b5c      	ldr	r3, [pc, #368]	; (801c540 <_strtod_l+0xc08>)
 801c3d0:	4640      	mov	r0, r8
 801c3d2:	4649      	mov	r1, r9
 801c3d4:	2200      	movs	r2, #0
 801c3d6:	f7e4 f92f 	bl	8000638 <__aeabi_dmul>
 801c3da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c3dc:	4680      	mov	r8, r0
 801c3de:	4689      	mov	r9, r1
 801c3e0:	b933      	cbnz	r3, 801c3f0 <_strtod_l+0xab8>
 801c3e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c3e6:	9012      	str	r0, [sp, #72]	; 0x48
 801c3e8:	9313      	str	r3, [sp, #76]	; 0x4c
 801c3ea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801c3ee:	e7dd      	b.n	801c3ac <_strtod_l+0xa74>
 801c3f0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801c3f4:	e7f9      	b.n	801c3ea <_strtod_l+0xab2>
 801c3f6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801c3fa:	9b04      	ldr	r3, [sp, #16]
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	d1a8      	bne.n	801c352 <_strtod_l+0xa1a>
 801c400:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c404:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c406:	0d1b      	lsrs	r3, r3, #20
 801c408:	051b      	lsls	r3, r3, #20
 801c40a:	429a      	cmp	r2, r3
 801c40c:	d1a1      	bne.n	801c352 <_strtod_l+0xa1a>
 801c40e:	4640      	mov	r0, r8
 801c410:	4649      	mov	r1, r9
 801c412:	f7e4 fcc1 	bl	8000d98 <__aeabi_d2lz>
 801c416:	f7e4 f8e1 	bl	80005dc <__aeabi_l2d>
 801c41a:	4602      	mov	r2, r0
 801c41c:	460b      	mov	r3, r1
 801c41e:	4640      	mov	r0, r8
 801c420:	4649      	mov	r1, r9
 801c422:	f7e3 ff51 	bl	80002c8 <__aeabi_dsub>
 801c426:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c428:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c42c:	ea43 030a 	orr.w	r3, r3, sl
 801c430:	4313      	orrs	r3, r2
 801c432:	4680      	mov	r8, r0
 801c434:	4689      	mov	r9, r1
 801c436:	d053      	beq.n	801c4e0 <_strtod_l+0xba8>
 801c438:	a335      	add	r3, pc, #212	; (adr r3, 801c510 <_strtod_l+0xbd8>)
 801c43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c43e:	f7e4 fb6d 	bl	8000b1c <__aeabi_dcmplt>
 801c442:	2800      	cmp	r0, #0
 801c444:	f47f acce 	bne.w	801bde4 <_strtod_l+0x4ac>
 801c448:	a333      	add	r3, pc, #204	; (adr r3, 801c518 <_strtod_l+0xbe0>)
 801c44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c44e:	4640      	mov	r0, r8
 801c450:	4649      	mov	r1, r9
 801c452:	f7e4 fb81 	bl	8000b58 <__aeabi_dcmpgt>
 801c456:	2800      	cmp	r0, #0
 801c458:	f43f af7b 	beq.w	801c352 <_strtod_l+0xa1a>
 801c45c:	e4c2      	b.n	801bde4 <_strtod_l+0x4ac>
 801c45e:	9b04      	ldr	r3, [sp, #16]
 801c460:	b333      	cbz	r3, 801c4b0 <_strtod_l+0xb78>
 801c462:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c464:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801c468:	d822      	bhi.n	801c4b0 <_strtod_l+0xb78>
 801c46a:	a32d      	add	r3, pc, #180	; (adr r3, 801c520 <_strtod_l+0xbe8>)
 801c46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c470:	4640      	mov	r0, r8
 801c472:	4649      	mov	r1, r9
 801c474:	f7e4 fb5c 	bl	8000b30 <__aeabi_dcmple>
 801c478:	b1a0      	cbz	r0, 801c4a4 <_strtod_l+0xb6c>
 801c47a:	4649      	mov	r1, r9
 801c47c:	4640      	mov	r0, r8
 801c47e:	f7e4 fbb3 	bl	8000be8 <__aeabi_d2uiz>
 801c482:	2801      	cmp	r0, #1
 801c484:	bf38      	it	cc
 801c486:	2001      	movcc	r0, #1
 801c488:	f7e4 f85c 	bl	8000544 <__aeabi_ui2d>
 801c48c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c48e:	4680      	mov	r8, r0
 801c490:	4689      	mov	r9, r1
 801c492:	bb13      	cbnz	r3, 801c4da <_strtod_l+0xba2>
 801c494:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c498:	9014      	str	r0, [sp, #80]	; 0x50
 801c49a:	9315      	str	r3, [sp, #84]	; 0x54
 801c49c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801c4a0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801c4a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c4a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c4a8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801c4ac:	1a9b      	subs	r3, r3, r2
 801c4ae:	930d      	str	r3, [sp, #52]	; 0x34
 801c4b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c4b4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801c4b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c4bc:	f002 fcfa 	bl	801eeb4 <__ulp>
 801c4c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c4c4:	ec53 2b10 	vmov	r2, r3, d0
 801c4c8:	f7e4 f8b6 	bl	8000638 <__aeabi_dmul>
 801c4cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c4d0:	f7e3 fefc 	bl	80002cc <__adddf3>
 801c4d4:	4682      	mov	sl, r0
 801c4d6:	468b      	mov	fp, r1
 801c4d8:	e78f      	b.n	801c3fa <_strtod_l+0xac2>
 801c4da:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801c4de:	e7dd      	b.n	801c49c <_strtod_l+0xb64>
 801c4e0:	a311      	add	r3, pc, #68	; (adr r3, 801c528 <_strtod_l+0xbf0>)
 801c4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4e6:	f7e4 fb19 	bl	8000b1c <__aeabi_dcmplt>
 801c4ea:	e7b4      	b.n	801c456 <_strtod_l+0xb1e>
 801c4ec:	2300      	movs	r3, #0
 801c4ee:	930e      	str	r3, [sp, #56]	; 0x38
 801c4f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c4f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c4f4:	6013      	str	r3, [r2, #0]
 801c4f6:	f7ff ba65 	b.w	801b9c4 <_strtod_l+0x8c>
 801c4fa:	2b65      	cmp	r3, #101	; 0x65
 801c4fc:	f43f ab5d 	beq.w	801bbba <_strtod_l+0x282>
 801c500:	2b45      	cmp	r3, #69	; 0x45
 801c502:	f43f ab5a 	beq.w	801bbba <_strtod_l+0x282>
 801c506:	2201      	movs	r2, #1
 801c508:	f7ff bb92 	b.w	801bc30 <_strtod_l+0x2f8>
 801c50c:	f3af 8000 	nop.w
 801c510:	94a03595 	.word	0x94a03595
 801c514:	3fdfffff 	.word	0x3fdfffff
 801c518:	35afe535 	.word	0x35afe535
 801c51c:	3fe00000 	.word	0x3fe00000
 801c520:	ffc00000 	.word	0xffc00000
 801c524:	41dfffff 	.word	0x41dfffff
 801c528:	94a03595 	.word	0x94a03595
 801c52c:	3fcfffff 	.word	0x3fcfffff
 801c530:	3ff00000 	.word	0x3ff00000
 801c534:	7ff00000 	.word	0x7ff00000
 801c538:	7fe00000 	.word	0x7fe00000
 801c53c:	7c9fffff 	.word	0x7c9fffff
 801c540:	3fe00000 	.word	0x3fe00000
 801c544:	bff00000 	.word	0xbff00000
 801c548:	7fefffff 	.word	0x7fefffff

0801c54c <_strtod_r>:
 801c54c:	4b01      	ldr	r3, [pc, #4]	; (801c554 <_strtod_r+0x8>)
 801c54e:	f7ff b9f3 	b.w	801b938 <_strtod_l>
 801c552:	bf00      	nop
 801c554:	200002c4 	.word	0x200002c4

0801c558 <strtok>:
 801c558:	4b16      	ldr	r3, [pc, #88]	; (801c5b4 <strtok+0x5c>)
 801c55a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c55c:	681e      	ldr	r6, [r3, #0]
 801c55e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801c560:	4605      	mov	r5, r0
 801c562:	b9fc      	cbnz	r4, 801c5a4 <strtok+0x4c>
 801c564:	2050      	movs	r0, #80	; 0x50
 801c566:	9101      	str	r1, [sp, #4]
 801c568:	f7fd fddc 	bl	801a124 <malloc>
 801c56c:	9901      	ldr	r1, [sp, #4]
 801c56e:	65b0      	str	r0, [r6, #88]	; 0x58
 801c570:	4602      	mov	r2, r0
 801c572:	b920      	cbnz	r0, 801c57e <strtok+0x26>
 801c574:	4b10      	ldr	r3, [pc, #64]	; (801c5b8 <strtok+0x60>)
 801c576:	4811      	ldr	r0, [pc, #68]	; (801c5bc <strtok+0x64>)
 801c578:	2157      	movs	r1, #87	; 0x57
 801c57a:	f000 fca3 	bl	801cec4 <__assert_func>
 801c57e:	e9c0 4400 	strd	r4, r4, [r0]
 801c582:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801c586:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801c58a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801c58e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801c592:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801c596:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801c59a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801c59e:	6184      	str	r4, [r0, #24]
 801c5a0:	7704      	strb	r4, [r0, #28]
 801c5a2:	6244      	str	r4, [r0, #36]	; 0x24
 801c5a4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801c5a6:	2301      	movs	r3, #1
 801c5a8:	4628      	mov	r0, r5
 801c5aa:	b002      	add	sp, #8
 801c5ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c5b0:	f000 b806 	b.w	801c5c0 <__strtok_r>
 801c5b4:	200001fc 	.word	0x200001fc
 801c5b8:	080220c8 	.word	0x080220c8
 801c5bc:	08022288 	.word	0x08022288

0801c5c0 <__strtok_r>:
 801c5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c5c2:	b908      	cbnz	r0, 801c5c8 <__strtok_r+0x8>
 801c5c4:	6810      	ldr	r0, [r2, #0]
 801c5c6:	b188      	cbz	r0, 801c5ec <__strtok_r+0x2c>
 801c5c8:	4604      	mov	r4, r0
 801c5ca:	4620      	mov	r0, r4
 801c5cc:	f814 5b01 	ldrb.w	r5, [r4], #1
 801c5d0:	460f      	mov	r7, r1
 801c5d2:	f817 6b01 	ldrb.w	r6, [r7], #1
 801c5d6:	b91e      	cbnz	r6, 801c5e0 <__strtok_r+0x20>
 801c5d8:	b965      	cbnz	r5, 801c5f4 <__strtok_r+0x34>
 801c5da:	6015      	str	r5, [r2, #0]
 801c5dc:	4628      	mov	r0, r5
 801c5de:	e005      	b.n	801c5ec <__strtok_r+0x2c>
 801c5e0:	42b5      	cmp	r5, r6
 801c5e2:	d1f6      	bne.n	801c5d2 <__strtok_r+0x12>
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	d1f0      	bne.n	801c5ca <__strtok_r+0xa>
 801c5e8:	6014      	str	r4, [r2, #0]
 801c5ea:	7003      	strb	r3, [r0, #0]
 801c5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c5ee:	461c      	mov	r4, r3
 801c5f0:	e00c      	b.n	801c60c <__strtok_r+0x4c>
 801c5f2:	b915      	cbnz	r5, 801c5fa <__strtok_r+0x3a>
 801c5f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c5f8:	460e      	mov	r6, r1
 801c5fa:	f816 5b01 	ldrb.w	r5, [r6], #1
 801c5fe:	42ab      	cmp	r3, r5
 801c600:	d1f7      	bne.n	801c5f2 <__strtok_r+0x32>
 801c602:	2b00      	cmp	r3, #0
 801c604:	d0f3      	beq.n	801c5ee <__strtok_r+0x2e>
 801c606:	2300      	movs	r3, #0
 801c608:	f804 3c01 	strb.w	r3, [r4, #-1]
 801c60c:	6014      	str	r4, [r2, #0]
 801c60e:	e7ed      	b.n	801c5ec <__strtok_r+0x2c>

0801c610 <_strtol_l.isra.0>:
 801c610:	2b01      	cmp	r3, #1
 801c612:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c616:	d001      	beq.n	801c61c <_strtol_l.isra.0+0xc>
 801c618:	2b24      	cmp	r3, #36	; 0x24
 801c61a:	d906      	bls.n	801c62a <_strtol_l.isra.0+0x1a>
 801c61c:	f7fd fb40 	bl	8019ca0 <__errno>
 801c620:	2316      	movs	r3, #22
 801c622:	6003      	str	r3, [r0, #0]
 801c624:	2000      	movs	r0, #0
 801c626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c62a:	4f3a      	ldr	r7, [pc, #232]	; (801c714 <_strtol_l.isra.0+0x104>)
 801c62c:	468e      	mov	lr, r1
 801c62e:	4676      	mov	r6, lr
 801c630:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c634:	5de5      	ldrb	r5, [r4, r7]
 801c636:	f015 0508 	ands.w	r5, r5, #8
 801c63a:	d1f8      	bne.n	801c62e <_strtol_l.isra.0+0x1e>
 801c63c:	2c2d      	cmp	r4, #45	; 0x2d
 801c63e:	d134      	bne.n	801c6aa <_strtol_l.isra.0+0x9a>
 801c640:	f89e 4000 	ldrb.w	r4, [lr]
 801c644:	f04f 0801 	mov.w	r8, #1
 801c648:	f106 0e02 	add.w	lr, r6, #2
 801c64c:	2b00      	cmp	r3, #0
 801c64e:	d05c      	beq.n	801c70a <_strtol_l.isra.0+0xfa>
 801c650:	2b10      	cmp	r3, #16
 801c652:	d10c      	bne.n	801c66e <_strtol_l.isra.0+0x5e>
 801c654:	2c30      	cmp	r4, #48	; 0x30
 801c656:	d10a      	bne.n	801c66e <_strtol_l.isra.0+0x5e>
 801c658:	f89e 4000 	ldrb.w	r4, [lr]
 801c65c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801c660:	2c58      	cmp	r4, #88	; 0x58
 801c662:	d14d      	bne.n	801c700 <_strtol_l.isra.0+0xf0>
 801c664:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801c668:	2310      	movs	r3, #16
 801c66a:	f10e 0e02 	add.w	lr, lr, #2
 801c66e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801c672:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c676:	2600      	movs	r6, #0
 801c678:	fbbc f9f3 	udiv	r9, ip, r3
 801c67c:	4635      	mov	r5, r6
 801c67e:	fb03 ca19 	mls	sl, r3, r9, ip
 801c682:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801c686:	2f09      	cmp	r7, #9
 801c688:	d818      	bhi.n	801c6bc <_strtol_l.isra.0+0xac>
 801c68a:	463c      	mov	r4, r7
 801c68c:	42a3      	cmp	r3, r4
 801c68e:	dd24      	ble.n	801c6da <_strtol_l.isra.0+0xca>
 801c690:	2e00      	cmp	r6, #0
 801c692:	db1f      	blt.n	801c6d4 <_strtol_l.isra.0+0xc4>
 801c694:	45a9      	cmp	r9, r5
 801c696:	d31d      	bcc.n	801c6d4 <_strtol_l.isra.0+0xc4>
 801c698:	d101      	bne.n	801c69e <_strtol_l.isra.0+0x8e>
 801c69a:	45a2      	cmp	sl, r4
 801c69c:	db1a      	blt.n	801c6d4 <_strtol_l.isra.0+0xc4>
 801c69e:	fb05 4503 	mla	r5, r5, r3, r4
 801c6a2:	2601      	movs	r6, #1
 801c6a4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c6a8:	e7eb      	b.n	801c682 <_strtol_l.isra.0+0x72>
 801c6aa:	2c2b      	cmp	r4, #43	; 0x2b
 801c6ac:	bf08      	it	eq
 801c6ae:	f89e 4000 	ldrbeq.w	r4, [lr]
 801c6b2:	46a8      	mov	r8, r5
 801c6b4:	bf08      	it	eq
 801c6b6:	f106 0e02 	addeq.w	lr, r6, #2
 801c6ba:	e7c7      	b.n	801c64c <_strtol_l.isra.0+0x3c>
 801c6bc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801c6c0:	2f19      	cmp	r7, #25
 801c6c2:	d801      	bhi.n	801c6c8 <_strtol_l.isra.0+0xb8>
 801c6c4:	3c37      	subs	r4, #55	; 0x37
 801c6c6:	e7e1      	b.n	801c68c <_strtol_l.isra.0+0x7c>
 801c6c8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801c6cc:	2f19      	cmp	r7, #25
 801c6ce:	d804      	bhi.n	801c6da <_strtol_l.isra.0+0xca>
 801c6d0:	3c57      	subs	r4, #87	; 0x57
 801c6d2:	e7db      	b.n	801c68c <_strtol_l.isra.0+0x7c>
 801c6d4:	f04f 36ff 	mov.w	r6, #4294967295
 801c6d8:	e7e4      	b.n	801c6a4 <_strtol_l.isra.0+0x94>
 801c6da:	2e00      	cmp	r6, #0
 801c6dc:	da05      	bge.n	801c6ea <_strtol_l.isra.0+0xda>
 801c6de:	2322      	movs	r3, #34	; 0x22
 801c6e0:	6003      	str	r3, [r0, #0]
 801c6e2:	4665      	mov	r5, ip
 801c6e4:	b942      	cbnz	r2, 801c6f8 <_strtol_l.isra.0+0xe8>
 801c6e6:	4628      	mov	r0, r5
 801c6e8:	e79d      	b.n	801c626 <_strtol_l.isra.0+0x16>
 801c6ea:	f1b8 0f00 	cmp.w	r8, #0
 801c6ee:	d000      	beq.n	801c6f2 <_strtol_l.isra.0+0xe2>
 801c6f0:	426d      	negs	r5, r5
 801c6f2:	2a00      	cmp	r2, #0
 801c6f4:	d0f7      	beq.n	801c6e6 <_strtol_l.isra.0+0xd6>
 801c6f6:	b10e      	cbz	r6, 801c6fc <_strtol_l.isra.0+0xec>
 801c6f8:	f10e 31ff 	add.w	r1, lr, #4294967295
 801c6fc:	6011      	str	r1, [r2, #0]
 801c6fe:	e7f2      	b.n	801c6e6 <_strtol_l.isra.0+0xd6>
 801c700:	2430      	movs	r4, #48	; 0x30
 801c702:	2b00      	cmp	r3, #0
 801c704:	d1b3      	bne.n	801c66e <_strtol_l.isra.0+0x5e>
 801c706:	2308      	movs	r3, #8
 801c708:	e7b1      	b.n	801c66e <_strtol_l.isra.0+0x5e>
 801c70a:	2c30      	cmp	r4, #48	; 0x30
 801c70c:	d0a4      	beq.n	801c658 <_strtol_l.isra.0+0x48>
 801c70e:	230a      	movs	r3, #10
 801c710:	e7ad      	b.n	801c66e <_strtol_l.isra.0+0x5e>
 801c712:	bf00      	nop
 801c714:	08021f61 	.word	0x08021f61

0801c718 <_strtol_r>:
 801c718:	f7ff bf7a 	b.w	801c610 <_strtol_l.isra.0>

0801c71c <strtol>:
 801c71c:	4613      	mov	r3, r2
 801c71e:	460a      	mov	r2, r1
 801c720:	4601      	mov	r1, r0
 801c722:	4802      	ldr	r0, [pc, #8]	; (801c72c <strtol+0x10>)
 801c724:	6800      	ldr	r0, [r0, #0]
 801c726:	f7ff bf73 	b.w	801c610 <_strtol_l.isra.0>
 801c72a:	bf00      	nop
 801c72c:	200001fc 	.word	0x200001fc

0801c730 <_strtoul_l.isra.0>:
 801c730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c734:	4e3b      	ldr	r6, [pc, #236]	; (801c824 <_strtoul_l.isra.0+0xf4>)
 801c736:	4686      	mov	lr, r0
 801c738:	468c      	mov	ip, r1
 801c73a:	4660      	mov	r0, ip
 801c73c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801c740:	5da5      	ldrb	r5, [r4, r6]
 801c742:	f015 0508 	ands.w	r5, r5, #8
 801c746:	d1f8      	bne.n	801c73a <_strtoul_l.isra.0+0xa>
 801c748:	2c2d      	cmp	r4, #45	; 0x2d
 801c74a:	d134      	bne.n	801c7b6 <_strtoul_l.isra.0+0x86>
 801c74c:	f89c 4000 	ldrb.w	r4, [ip]
 801c750:	f04f 0801 	mov.w	r8, #1
 801c754:	f100 0c02 	add.w	ip, r0, #2
 801c758:	2b00      	cmp	r3, #0
 801c75a:	d05e      	beq.n	801c81a <_strtoul_l.isra.0+0xea>
 801c75c:	2b10      	cmp	r3, #16
 801c75e:	d10c      	bne.n	801c77a <_strtoul_l.isra.0+0x4a>
 801c760:	2c30      	cmp	r4, #48	; 0x30
 801c762:	d10a      	bne.n	801c77a <_strtoul_l.isra.0+0x4a>
 801c764:	f89c 0000 	ldrb.w	r0, [ip]
 801c768:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801c76c:	2858      	cmp	r0, #88	; 0x58
 801c76e:	d14f      	bne.n	801c810 <_strtoul_l.isra.0+0xe0>
 801c770:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801c774:	2310      	movs	r3, #16
 801c776:	f10c 0c02 	add.w	ip, ip, #2
 801c77a:	f04f 37ff 	mov.w	r7, #4294967295
 801c77e:	2500      	movs	r5, #0
 801c780:	fbb7 f7f3 	udiv	r7, r7, r3
 801c784:	fb03 f907 	mul.w	r9, r3, r7
 801c788:	ea6f 0909 	mvn.w	r9, r9
 801c78c:	4628      	mov	r0, r5
 801c78e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801c792:	2e09      	cmp	r6, #9
 801c794:	d818      	bhi.n	801c7c8 <_strtoul_l.isra.0+0x98>
 801c796:	4634      	mov	r4, r6
 801c798:	42a3      	cmp	r3, r4
 801c79a:	dd24      	ble.n	801c7e6 <_strtoul_l.isra.0+0xb6>
 801c79c:	2d00      	cmp	r5, #0
 801c79e:	db1f      	blt.n	801c7e0 <_strtoul_l.isra.0+0xb0>
 801c7a0:	4287      	cmp	r7, r0
 801c7a2:	d31d      	bcc.n	801c7e0 <_strtoul_l.isra.0+0xb0>
 801c7a4:	d101      	bne.n	801c7aa <_strtoul_l.isra.0+0x7a>
 801c7a6:	45a1      	cmp	r9, r4
 801c7a8:	db1a      	blt.n	801c7e0 <_strtoul_l.isra.0+0xb0>
 801c7aa:	fb00 4003 	mla	r0, r0, r3, r4
 801c7ae:	2501      	movs	r5, #1
 801c7b0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801c7b4:	e7eb      	b.n	801c78e <_strtoul_l.isra.0+0x5e>
 801c7b6:	2c2b      	cmp	r4, #43	; 0x2b
 801c7b8:	bf08      	it	eq
 801c7ba:	f89c 4000 	ldrbeq.w	r4, [ip]
 801c7be:	46a8      	mov	r8, r5
 801c7c0:	bf08      	it	eq
 801c7c2:	f100 0c02 	addeq.w	ip, r0, #2
 801c7c6:	e7c7      	b.n	801c758 <_strtoul_l.isra.0+0x28>
 801c7c8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801c7cc:	2e19      	cmp	r6, #25
 801c7ce:	d801      	bhi.n	801c7d4 <_strtoul_l.isra.0+0xa4>
 801c7d0:	3c37      	subs	r4, #55	; 0x37
 801c7d2:	e7e1      	b.n	801c798 <_strtoul_l.isra.0+0x68>
 801c7d4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801c7d8:	2e19      	cmp	r6, #25
 801c7da:	d804      	bhi.n	801c7e6 <_strtoul_l.isra.0+0xb6>
 801c7dc:	3c57      	subs	r4, #87	; 0x57
 801c7de:	e7db      	b.n	801c798 <_strtoul_l.isra.0+0x68>
 801c7e0:	f04f 35ff 	mov.w	r5, #4294967295
 801c7e4:	e7e4      	b.n	801c7b0 <_strtoul_l.isra.0+0x80>
 801c7e6:	2d00      	cmp	r5, #0
 801c7e8:	da07      	bge.n	801c7fa <_strtoul_l.isra.0+0xca>
 801c7ea:	2322      	movs	r3, #34	; 0x22
 801c7ec:	f8ce 3000 	str.w	r3, [lr]
 801c7f0:	f04f 30ff 	mov.w	r0, #4294967295
 801c7f4:	b942      	cbnz	r2, 801c808 <_strtoul_l.isra.0+0xd8>
 801c7f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c7fa:	f1b8 0f00 	cmp.w	r8, #0
 801c7fe:	d000      	beq.n	801c802 <_strtoul_l.isra.0+0xd2>
 801c800:	4240      	negs	r0, r0
 801c802:	2a00      	cmp	r2, #0
 801c804:	d0f7      	beq.n	801c7f6 <_strtoul_l.isra.0+0xc6>
 801c806:	b10d      	cbz	r5, 801c80c <_strtoul_l.isra.0+0xdc>
 801c808:	f10c 31ff 	add.w	r1, ip, #4294967295
 801c80c:	6011      	str	r1, [r2, #0]
 801c80e:	e7f2      	b.n	801c7f6 <_strtoul_l.isra.0+0xc6>
 801c810:	2430      	movs	r4, #48	; 0x30
 801c812:	2b00      	cmp	r3, #0
 801c814:	d1b1      	bne.n	801c77a <_strtoul_l.isra.0+0x4a>
 801c816:	2308      	movs	r3, #8
 801c818:	e7af      	b.n	801c77a <_strtoul_l.isra.0+0x4a>
 801c81a:	2c30      	cmp	r4, #48	; 0x30
 801c81c:	d0a2      	beq.n	801c764 <_strtoul_l.isra.0+0x34>
 801c81e:	230a      	movs	r3, #10
 801c820:	e7ab      	b.n	801c77a <_strtoul_l.isra.0+0x4a>
 801c822:	bf00      	nop
 801c824:	08021f61 	.word	0x08021f61

0801c828 <_strtoul_r>:
 801c828:	f7ff bf82 	b.w	801c730 <_strtoul_l.isra.0>

0801c82c <strtoul>:
 801c82c:	4613      	mov	r3, r2
 801c82e:	460a      	mov	r2, r1
 801c830:	4601      	mov	r1, r0
 801c832:	4802      	ldr	r0, [pc, #8]	; (801c83c <strtoul+0x10>)
 801c834:	6800      	ldr	r0, [r0, #0]
 801c836:	f7ff bf7b 	b.w	801c730 <_strtoul_l.isra.0>
 801c83a:	bf00      	nop
 801c83c:	200001fc 	.word	0x200001fc

0801c840 <__tzcalc_limits>:
 801c840:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c844:	4680      	mov	r8, r0
 801c846:	f001 fe7d 	bl	801e544 <__gettzinfo>
 801c84a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801c84e:	4598      	cmp	r8, r3
 801c850:	f340 8098 	ble.w	801c984 <__tzcalc_limits+0x144>
 801c854:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801c858:	4443      	add	r3, r8
 801c85a:	109b      	asrs	r3, r3, #2
 801c85c:	f240 126d 	movw	r2, #365	; 0x16d
 801c860:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801c864:	fb02 3505 	mla	r5, r2, r5, r3
 801c868:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801c86c:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801c870:	fb93 f3f2 	sdiv	r3, r3, r2
 801c874:	441d      	add	r5, r3
 801c876:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801c87a:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801c87e:	fb98 f7f3 	sdiv	r7, r8, r3
 801c882:	fb03 8717 	mls	r7, r3, r7, r8
 801c886:	4442      	add	r2, r8
 801c888:	fab7 fc87 	clz	ip, r7
 801c88c:	fbb2 f2f3 	udiv	r2, r2, r3
 801c890:	f008 0303 	and.w	r3, r8, #3
 801c894:	4415      	add	r5, r2
 801c896:	2264      	movs	r2, #100	; 0x64
 801c898:	f8c0 8004 	str.w	r8, [r0, #4]
 801c89c:	fb98 f6f2 	sdiv	r6, r8, r2
 801c8a0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801c8a4:	fb02 8616 	mls	r6, r2, r6, r8
 801c8a8:	4604      	mov	r4, r0
 801c8aa:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801c8ae:	9300      	str	r3, [sp, #0]
 801c8b0:	f04f 0e07 	mov.w	lr, #7
 801c8b4:	7a22      	ldrb	r2, [r4, #8]
 801c8b6:	6963      	ldr	r3, [r4, #20]
 801c8b8:	2a4a      	cmp	r2, #74	; 0x4a
 801c8ba:	d128      	bne.n	801c90e <__tzcalc_limits+0xce>
 801c8bc:	9900      	ldr	r1, [sp, #0]
 801c8be:	18ea      	adds	r2, r5, r3
 801c8c0:	b901      	cbnz	r1, 801c8c4 <__tzcalc_limits+0x84>
 801c8c2:	b906      	cbnz	r6, 801c8c6 <__tzcalc_limits+0x86>
 801c8c4:	bb0f      	cbnz	r7, 801c90a <__tzcalc_limits+0xca>
 801c8c6:	2b3b      	cmp	r3, #59	; 0x3b
 801c8c8:	bfd4      	ite	le
 801c8ca:	2300      	movle	r3, #0
 801c8cc:	2301      	movgt	r3, #1
 801c8ce:	4413      	add	r3, r2
 801c8d0:	1e5a      	subs	r2, r3, #1
 801c8d2:	69a3      	ldr	r3, [r4, #24]
 801c8d4:	492c      	ldr	r1, [pc, #176]	; (801c988 <__tzcalc_limits+0x148>)
 801c8d6:	fb01 3202 	mla	r2, r1, r2, r3
 801c8da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801c8dc:	4413      	add	r3, r2
 801c8de:	461a      	mov	r2, r3
 801c8e0:	17db      	asrs	r3, r3, #31
 801c8e2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801c8e6:	3428      	adds	r4, #40	; 0x28
 801c8e8:	45a3      	cmp	fp, r4
 801c8ea:	d1e3      	bne.n	801c8b4 <__tzcalc_limits+0x74>
 801c8ec:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801c8f0:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 801c8f4:	4294      	cmp	r4, r2
 801c8f6:	eb75 0303 	sbcs.w	r3, r5, r3
 801c8fa:	bfb4      	ite	lt
 801c8fc:	2301      	movlt	r3, #1
 801c8fe:	2300      	movge	r3, #0
 801c900:	6003      	str	r3, [r0, #0]
 801c902:	2001      	movs	r0, #1
 801c904:	b003      	add	sp, #12
 801c906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c90a:	2300      	movs	r3, #0
 801c90c:	e7df      	b.n	801c8ce <__tzcalc_limits+0x8e>
 801c90e:	2a44      	cmp	r2, #68	; 0x44
 801c910:	d101      	bne.n	801c916 <__tzcalc_limits+0xd6>
 801c912:	18ea      	adds	r2, r5, r3
 801c914:	e7dd      	b.n	801c8d2 <__tzcalc_limits+0x92>
 801c916:	9a00      	ldr	r2, [sp, #0]
 801c918:	bb72      	cbnz	r2, 801c978 <__tzcalc_limits+0x138>
 801c91a:	2e00      	cmp	r6, #0
 801c91c:	bf0c      	ite	eq
 801c91e:	46e0      	moveq	r8, ip
 801c920:	f04f 0801 	movne.w	r8, #1
 801c924:	4919      	ldr	r1, [pc, #100]	; (801c98c <__tzcalc_limits+0x14c>)
 801c926:	68e2      	ldr	r2, [r4, #12]
 801c928:	9201      	str	r2, [sp, #4]
 801c92a:	f04f 0a30 	mov.w	sl, #48	; 0x30
 801c92e:	fb0a 1808 	mla	r8, sl, r8, r1
 801c932:	462a      	mov	r2, r5
 801c934:	f04f 0900 	mov.w	r9, #0
 801c938:	f1a8 0804 	sub.w	r8, r8, #4
 801c93c:	9901      	ldr	r1, [sp, #4]
 801c93e:	f109 0901 	add.w	r9, r9, #1
 801c942:	4549      	cmp	r1, r9
 801c944:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 801c948:	dc18      	bgt.n	801c97c <__tzcalc_limits+0x13c>
 801c94a:	f102 0804 	add.w	r8, r2, #4
 801c94e:	fb98 f9fe 	sdiv	r9, r8, lr
 801c952:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801c956:	eba8 0909 	sub.w	r9, r8, r9
 801c95a:	ebb3 0909 	subs.w	r9, r3, r9
 801c95e:	6923      	ldr	r3, [r4, #16]
 801c960:	f103 33ff 	add.w	r3, r3, #4294967295
 801c964:	bf48      	it	mi
 801c966:	f109 0907 	addmi.w	r9, r9, #7
 801c96a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801c96e:	444b      	add	r3, r9
 801c970:	4553      	cmp	r3, sl
 801c972:	da05      	bge.n	801c980 <__tzcalc_limits+0x140>
 801c974:	441a      	add	r2, r3
 801c976:	e7ac      	b.n	801c8d2 <__tzcalc_limits+0x92>
 801c978:	46e0      	mov	r8, ip
 801c97a:	e7d3      	b.n	801c924 <__tzcalc_limits+0xe4>
 801c97c:	4452      	add	r2, sl
 801c97e:	e7dd      	b.n	801c93c <__tzcalc_limits+0xfc>
 801c980:	3b07      	subs	r3, #7
 801c982:	e7f5      	b.n	801c970 <__tzcalc_limits+0x130>
 801c984:	2000      	movs	r0, #0
 801c986:	e7bd      	b.n	801c904 <__tzcalc_limits+0xc4>
 801c988:	00015180 	.word	0x00015180
 801c98c:	080221a0 	.word	0x080221a0

0801c990 <__tz_lock>:
 801c990:	4801      	ldr	r0, [pc, #4]	; (801c998 <__tz_lock+0x8>)
 801c992:	f7fd bbc2 	b.w	801a11a <__retarget_lock_acquire>
 801c996:	bf00      	nop
 801c998:	20008d57 	.word	0x20008d57

0801c99c <__tz_unlock>:
 801c99c:	4801      	ldr	r0, [pc, #4]	; (801c9a4 <__tz_unlock+0x8>)
 801c99e:	f7fd bbbe 	b.w	801a11e <__retarget_lock_release>
 801c9a2:	bf00      	nop
 801c9a4:	20008d57 	.word	0x20008d57

0801c9a8 <_tzset_unlocked>:
 801c9a8:	4b01      	ldr	r3, [pc, #4]	; (801c9b0 <_tzset_unlocked+0x8>)
 801c9aa:	6818      	ldr	r0, [r3, #0]
 801c9ac:	f000 b802 	b.w	801c9b4 <_tzset_unlocked_r>
 801c9b0:	200001fc 	.word	0x200001fc

0801c9b4 <_tzset_unlocked_r>:
 801c9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9b8:	b08d      	sub	sp, #52	; 0x34
 801c9ba:	4607      	mov	r7, r0
 801c9bc:	f001 fdc2 	bl	801e544 <__gettzinfo>
 801c9c0:	49ae      	ldr	r1, [pc, #696]	; (801cc7c <_tzset_unlocked_r+0x2c8>)
 801c9c2:	4eaf      	ldr	r6, [pc, #700]	; (801cc80 <_tzset_unlocked_r+0x2cc>)
 801c9c4:	4605      	mov	r5, r0
 801c9c6:	4638      	mov	r0, r7
 801c9c8:	f001 fdb4 	bl	801e534 <_getenv_r>
 801c9cc:	4604      	mov	r4, r0
 801c9ce:	b970      	cbnz	r0, 801c9ee <_tzset_unlocked_r+0x3a>
 801c9d0:	4bac      	ldr	r3, [pc, #688]	; (801cc84 <_tzset_unlocked_r+0x2d0>)
 801c9d2:	4aad      	ldr	r2, [pc, #692]	; (801cc88 <_tzset_unlocked_r+0x2d4>)
 801c9d4:	6018      	str	r0, [r3, #0]
 801c9d6:	4bad      	ldr	r3, [pc, #692]	; (801cc8c <_tzset_unlocked_r+0x2d8>)
 801c9d8:	6018      	str	r0, [r3, #0]
 801c9da:	4bad      	ldr	r3, [pc, #692]	; (801cc90 <_tzset_unlocked_r+0x2dc>)
 801c9dc:	6830      	ldr	r0, [r6, #0]
 801c9de:	e9c3 2200 	strd	r2, r2, [r3]
 801c9e2:	f7fd fba7 	bl	801a134 <free>
 801c9e6:	6034      	str	r4, [r6, #0]
 801c9e8:	b00d      	add	sp, #52	; 0x34
 801c9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9ee:	6831      	ldr	r1, [r6, #0]
 801c9f0:	2900      	cmp	r1, #0
 801c9f2:	d15f      	bne.n	801cab4 <_tzset_unlocked_r+0x100>
 801c9f4:	6830      	ldr	r0, [r6, #0]
 801c9f6:	f7fd fb9d 	bl	801a134 <free>
 801c9fa:	4620      	mov	r0, r4
 801c9fc:	f7e3 fc02 	bl	8000204 <strlen>
 801ca00:	1c41      	adds	r1, r0, #1
 801ca02:	4638      	mov	r0, r7
 801ca04:	f7fd fe9c 	bl	801a740 <_malloc_r>
 801ca08:	6030      	str	r0, [r6, #0]
 801ca0a:	2800      	cmp	r0, #0
 801ca0c:	d157      	bne.n	801cabe <_tzset_unlocked_r+0x10a>
 801ca0e:	7823      	ldrb	r3, [r4, #0]
 801ca10:	4aa0      	ldr	r2, [pc, #640]	; (801cc94 <_tzset_unlocked_r+0x2e0>)
 801ca12:	49a1      	ldr	r1, [pc, #644]	; (801cc98 <_tzset_unlocked_r+0x2e4>)
 801ca14:	2b3a      	cmp	r3, #58	; 0x3a
 801ca16:	bf08      	it	eq
 801ca18:	3401      	addeq	r4, #1
 801ca1a:	ae0a      	add	r6, sp, #40	; 0x28
 801ca1c:	4633      	mov	r3, r6
 801ca1e:	4620      	mov	r0, r4
 801ca20:	f7fe fed4 	bl	801b7cc <siscanf>
 801ca24:	2800      	cmp	r0, #0
 801ca26:	dddf      	ble.n	801c9e8 <_tzset_unlocked_r+0x34>
 801ca28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ca2a:	18e7      	adds	r7, r4, r3
 801ca2c:	5ce3      	ldrb	r3, [r4, r3]
 801ca2e:	2b2d      	cmp	r3, #45	; 0x2d
 801ca30:	d149      	bne.n	801cac6 <_tzset_unlocked_r+0x112>
 801ca32:	3701      	adds	r7, #1
 801ca34:	f04f 34ff 	mov.w	r4, #4294967295
 801ca38:	f10d 0a20 	add.w	sl, sp, #32
 801ca3c:	f10d 0b1e 	add.w	fp, sp, #30
 801ca40:	f04f 0800 	mov.w	r8, #0
 801ca44:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801ca48:	4994      	ldr	r1, [pc, #592]	; (801cc9c <_tzset_unlocked_r+0x2e8>)
 801ca4a:	9603      	str	r6, [sp, #12]
 801ca4c:	f8cd b000 	str.w	fp, [sp]
 801ca50:	4633      	mov	r3, r6
 801ca52:	aa07      	add	r2, sp, #28
 801ca54:	4638      	mov	r0, r7
 801ca56:	f8ad 801e 	strh.w	r8, [sp, #30]
 801ca5a:	f8ad 8020 	strh.w	r8, [sp, #32]
 801ca5e:	f7fe feb5 	bl	801b7cc <siscanf>
 801ca62:	4540      	cmp	r0, r8
 801ca64:	ddc0      	ble.n	801c9e8 <_tzset_unlocked_r+0x34>
 801ca66:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801ca6a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ca6e:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801cca8 <_tzset_unlocked_r+0x2f4>
 801ca72:	213c      	movs	r1, #60	; 0x3c
 801ca74:	fb01 2203 	mla	r2, r1, r3, r2
 801ca78:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801ca7c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801ca80:	fb01 2303 	mla	r3, r1, r3, r2
 801ca84:	435c      	muls	r4, r3
 801ca86:	62ac      	str	r4, [r5, #40]	; 0x28
 801ca88:	4c81      	ldr	r4, [pc, #516]	; (801cc90 <_tzset_unlocked_r+0x2dc>)
 801ca8a:	4b82      	ldr	r3, [pc, #520]	; (801cc94 <_tzset_unlocked_r+0x2e0>)
 801ca8c:	6023      	str	r3, [r4, #0]
 801ca8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ca90:	4981      	ldr	r1, [pc, #516]	; (801cc98 <_tzset_unlocked_r+0x2e4>)
 801ca92:	441f      	add	r7, r3
 801ca94:	464a      	mov	r2, r9
 801ca96:	4633      	mov	r3, r6
 801ca98:	4638      	mov	r0, r7
 801ca9a:	f7fe fe97 	bl	801b7cc <siscanf>
 801ca9e:	4540      	cmp	r0, r8
 801caa0:	dc16      	bgt.n	801cad0 <_tzset_unlocked_r+0x11c>
 801caa2:	6823      	ldr	r3, [r4, #0]
 801caa4:	6063      	str	r3, [r4, #4]
 801caa6:	4b77      	ldr	r3, [pc, #476]	; (801cc84 <_tzset_unlocked_r+0x2d0>)
 801caa8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801caaa:	601a      	str	r2, [r3, #0]
 801caac:	4b77      	ldr	r3, [pc, #476]	; (801cc8c <_tzset_unlocked_r+0x2d8>)
 801caae:	f8c3 8000 	str.w	r8, [r3]
 801cab2:	e799      	b.n	801c9e8 <_tzset_unlocked_r+0x34>
 801cab4:	f7e3 fb9c 	bl	80001f0 <strcmp>
 801cab8:	2800      	cmp	r0, #0
 801caba:	d19b      	bne.n	801c9f4 <_tzset_unlocked_r+0x40>
 801cabc:	e794      	b.n	801c9e8 <_tzset_unlocked_r+0x34>
 801cabe:	4621      	mov	r1, r4
 801cac0:	f7fe ff02 	bl	801b8c8 <strcpy>
 801cac4:	e7a3      	b.n	801ca0e <_tzset_unlocked_r+0x5a>
 801cac6:	2b2b      	cmp	r3, #43	; 0x2b
 801cac8:	bf08      	it	eq
 801caca:	3701      	addeq	r7, #1
 801cacc:	2401      	movs	r4, #1
 801cace:	e7b3      	b.n	801ca38 <_tzset_unlocked_r+0x84>
 801cad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cad2:	f8c4 9004 	str.w	r9, [r4, #4]
 801cad6:	18fc      	adds	r4, r7, r3
 801cad8:	5cfb      	ldrb	r3, [r7, r3]
 801cada:	2b2d      	cmp	r3, #45	; 0x2d
 801cadc:	f040 808b 	bne.w	801cbf6 <_tzset_unlocked_r+0x242>
 801cae0:	3401      	adds	r4, #1
 801cae2:	f04f 37ff 	mov.w	r7, #4294967295
 801cae6:	2300      	movs	r3, #0
 801cae8:	f8ad 301c 	strh.w	r3, [sp, #28]
 801caec:	f8ad 301e 	strh.w	r3, [sp, #30]
 801caf0:	f8ad 3020 	strh.w	r3, [sp, #32]
 801caf4:	930a      	str	r3, [sp, #40]	; 0x28
 801caf6:	e9cd a602 	strd	sl, r6, [sp, #8]
 801cafa:	e9cd b600 	strd	fp, r6, [sp]
 801cafe:	4967      	ldr	r1, [pc, #412]	; (801cc9c <_tzset_unlocked_r+0x2e8>)
 801cb00:	4633      	mov	r3, r6
 801cb02:	aa07      	add	r2, sp, #28
 801cb04:	4620      	mov	r0, r4
 801cb06:	f7fe fe61 	bl	801b7cc <siscanf>
 801cb0a:	2800      	cmp	r0, #0
 801cb0c:	dc78      	bgt.n	801cc00 <_tzset_unlocked_r+0x24c>
 801cb0e:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801cb10:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 801cb14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cb16:	652f      	str	r7, [r5, #80]	; 0x50
 801cb18:	441c      	add	r4, r3
 801cb1a:	462f      	mov	r7, r5
 801cb1c:	f04f 0900 	mov.w	r9, #0
 801cb20:	7823      	ldrb	r3, [r4, #0]
 801cb22:	2b2c      	cmp	r3, #44	; 0x2c
 801cb24:	bf08      	it	eq
 801cb26:	3401      	addeq	r4, #1
 801cb28:	f894 8000 	ldrb.w	r8, [r4]
 801cb2c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801cb30:	d178      	bne.n	801cc24 <_tzset_unlocked_r+0x270>
 801cb32:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801cb36:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801cb3a:	ab09      	add	r3, sp, #36	; 0x24
 801cb3c:	9300      	str	r3, [sp, #0]
 801cb3e:	4958      	ldr	r1, [pc, #352]	; (801cca0 <_tzset_unlocked_r+0x2ec>)
 801cb40:	9603      	str	r6, [sp, #12]
 801cb42:	4633      	mov	r3, r6
 801cb44:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801cb48:	4620      	mov	r0, r4
 801cb4a:	f7fe fe3f 	bl	801b7cc <siscanf>
 801cb4e:	2803      	cmp	r0, #3
 801cb50:	f47f af4a 	bne.w	801c9e8 <_tzset_unlocked_r+0x34>
 801cb54:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801cb58:	1e4b      	subs	r3, r1, #1
 801cb5a:	2b0b      	cmp	r3, #11
 801cb5c:	f63f af44 	bhi.w	801c9e8 <_tzset_unlocked_r+0x34>
 801cb60:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801cb64:	1e53      	subs	r3, r2, #1
 801cb66:	2b04      	cmp	r3, #4
 801cb68:	f63f af3e 	bhi.w	801c9e8 <_tzset_unlocked_r+0x34>
 801cb6c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801cb70:	2b06      	cmp	r3, #6
 801cb72:	f63f af39 	bhi.w	801c9e8 <_tzset_unlocked_r+0x34>
 801cb76:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801cb7a:	f887 8008 	strb.w	r8, [r7, #8]
 801cb7e:	617b      	str	r3, [r7, #20]
 801cb80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cb82:	eb04 0803 	add.w	r8, r4, r3
 801cb86:	2302      	movs	r3, #2
 801cb88:	f8ad 301c 	strh.w	r3, [sp, #28]
 801cb8c:	2300      	movs	r3, #0
 801cb8e:	f8ad 301e 	strh.w	r3, [sp, #30]
 801cb92:	f8ad 3020 	strh.w	r3, [sp, #32]
 801cb96:	930a      	str	r3, [sp, #40]	; 0x28
 801cb98:	f898 3000 	ldrb.w	r3, [r8]
 801cb9c:	2b2f      	cmp	r3, #47	; 0x2f
 801cb9e:	d109      	bne.n	801cbb4 <_tzset_unlocked_r+0x200>
 801cba0:	e9cd a602 	strd	sl, r6, [sp, #8]
 801cba4:	e9cd b600 	strd	fp, r6, [sp]
 801cba8:	493e      	ldr	r1, [pc, #248]	; (801cca4 <_tzset_unlocked_r+0x2f0>)
 801cbaa:	4633      	mov	r3, r6
 801cbac:	aa07      	add	r2, sp, #28
 801cbae:	4640      	mov	r0, r8
 801cbb0:	f7fe fe0c 	bl	801b7cc <siscanf>
 801cbb4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801cbb8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801cbbc:	213c      	movs	r1, #60	; 0x3c
 801cbbe:	fb01 2203 	mla	r2, r1, r3, r2
 801cbc2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801cbc6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801cbca:	fb01 2303 	mla	r3, r1, r3, r2
 801cbce:	61bb      	str	r3, [r7, #24]
 801cbd0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801cbd2:	3728      	adds	r7, #40	; 0x28
 801cbd4:	4444      	add	r4, r8
 801cbd6:	f1b9 0f00 	cmp.w	r9, #0
 801cbda:	d020      	beq.n	801cc1e <_tzset_unlocked_r+0x26a>
 801cbdc:	6868      	ldr	r0, [r5, #4]
 801cbde:	f7ff fe2f 	bl	801c840 <__tzcalc_limits>
 801cbe2:	4b28      	ldr	r3, [pc, #160]	; (801cc84 <_tzset_unlocked_r+0x2d0>)
 801cbe4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801cbe6:	601a      	str	r2, [r3, #0]
 801cbe8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801cbea:	1a9b      	subs	r3, r3, r2
 801cbec:	4a27      	ldr	r2, [pc, #156]	; (801cc8c <_tzset_unlocked_r+0x2d8>)
 801cbee:	bf18      	it	ne
 801cbf0:	2301      	movne	r3, #1
 801cbf2:	6013      	str	r3, [r2, #0]
 801cbf4:	e6f8      	b.n	801c9e8 <_tzset_unlocked_r+0x34>
 801cbf6:	2b2b      	cmp	r3, #43	; 0x2b
 801cbf8:	bf08      	it	eq
 801cbfa:	3401      	addeq	r4, #1
 801cbfc:	2701      	movs	r7, #1
 801cbfe:	e772      	b.n	801cae6 <_tzset_unlocked_r+0x132>
 801cc00:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801cc04:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801cc08:	213c      	movs	r1, #60	; 0x3c
 801cc0a:	fb01 2203 	mla	r2, r1, r3, r2
 801cc0e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801cc12:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801cc16:	fb01 2303 	mla	r3, r1, r3, r2
 801cc1a:	435f      	muls	r7, r3
 801cc1c:	e77a      	b.n	801cb14 <_tzset_unlocked_r+0x160>
 801cc1e:	f04f 0901 	mov.w	r9, #1
 801cc22:	e77d      	b.n	801cb20 <_tzset_unlocked_r+0x16c>
 801cc24:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801cc28:	bf06      	itte	eq
 801cc2a:	3401      	addeq	r4, #1
 801cc2c:	4643      	moveq	r3, r8
 801cc2e:	2344      	movne	r3, #68	; 0x44
 801cc30:	220a      	movs	r2, #10
 801cc32:	a90b      	add	r1, sp, #44	; 0x2c
 801cc34:	4620      	mov	r0, r4
 801cc36:	9305      	str	r3, [sp, #20]
 801cc38:	f7ff fdf8 	bl	801c82c <strtoul>
 801cc3c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801cc40:	9b05      	ldr	r3, [sp, #20]
 801cc42:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801cc46:	45a0      	cmp	r8, r4
 801cc48:	d114      	bne.n	801cc74 <_tzset_unlocked_r+0x2c0>
 801cc4a:	234d      	movs	r3, #77	; 0x4d
 801cc4c:	f1b9 0f00 	cmp.w	r9, #0
 801cc50:	d107      	bne.n	801cc62 <_tzset_unlocked_r+0x2ae>
 801cc52:	722b      	strb	r3, [r5, #8]
 801cc54:	2103      	movs	r1, #3
 801cc56:	2302      	movs	r3, #2
 801cc58:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801cc5c:	f8c5 9014 	str.w	r9, [r5, #20]
 801cc60:	e791      	b.n	801cb86 <_tzset_unlocked_r+0x1d2>
 801cc62:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801cc66:	220b      	movs	r2, #11
 801cc68:	2301      	movs	r3, #1
 801cc6a:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801cc6e:	2300      	movs	r3, #0
 801cc70:	63eb      	str	r3, [r5, #60]	; 0x3c
 801cc72:	e788      	b.n	801cb86 <_tzset_unlocked_r+0x1d2>
 801cc74:	b280      	uxth	r0, r0
 801cc76:	723b      	strb	r3, [r7, #8]
 801cc78:	6178      	str	r0, [r7, #20]
 801cc7a:	e784      	b.n	801cb86 <_tzset_unlocked_r+0x1d2>
 801cc7c:	080222e9 	.word	0x080222e9
 801cc80:	20005edc 	.word	0x20005edc
 801cc84:	20005ee4 	.word	0x20005ee4
 801cc88:	080222ec 	.word	0x080222ec
 801cc8c:	20005ee0 	.word	0x20005ee0
 801cc90:	20000260 	.word	0x20000260
 801cc94:	20005ecf 	.word	0x20005ecf
 801cc98:	080222f0 	.word	0x080222f0
 801cc9c:	08022313 	.word	0x08022313
 801cca0:	080222ff 	.word	0x080222ff
 801cca4:	08022312 	.word	0x08022312
 801cca8:	20005ec4 	.word	0x20005ec4

0801ccac <_vsniprintf_r>:
 801ccac:	b530      	push	{r4, r5, lr}
 801ccae:	1e14      	subs	r4, r2, #0
 801ccb0:	4605      	mov	r5, r0
 801ccb2:	b09b      	sub	sp, #108	; 0x6c
 801ccb4:	4618      	mov	r0, r3
 801ccb6:	da05      	bge.n	801ccc4 <_vsniprintf_r+0x18>
 801ccb8:	238b      	movs	r3, #139	; 0x8b
 801ccba:	602b      	str	r3, [r5, #0]
 801ccbc:	f04f 30ff 	mov.w	r0, #4294967295
 801ccc0:	b01b      	add	sp, #108	; 0x6c
 801ccc2:	bd30      	pop	{r4, r5, pc}
 801ccc4:	f44f 7302 	mov.w	r3, #520	; 0x208
 801ccc8:	f8ad 300c 	strh.w	r3, [sp, #12]
 801cccc:	bf14      	ite	ne
 801ccce:	f104 33ff 	addne.w	r3, r4, #4294967295
 801ccd2:	4623      	moveq	r3, r4
 801ccd4:	9302      	str	r3, [sp, #8]
 801ccd6:	9305      	str	r3, [sp, #20]
 801ccd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ccdc:	9100      	str	r1, [sp, #0]
 801ccde:	9104      	str	r1, [sp, #16]
 801cce0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801cce4:	4602      	mov	r2, r0
 801cce6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801cce8:	4669      	mov	r1, sp
 801ccea:	4628      	mov	r0, r5
 801ccec:	f002 fac2 	bl	801f274 <_svfiprintf_r>
 801ccf0:	1c43      	adds	r3, r0, #1
 801ccf2:	bfbc      	itt	lt
 801ccf4:	238b      	movlt	r3, #139	; 0x8b
 801ccf6:	602b      	strlt	r3, [r5, #0]
 801ccf8:	2c00      	cmp	r4, #0
 801ccfa:	d0e1      	beq.n	801ccc0 <_vsniprintf_r+0x14>
 801ccfc:	9b00      	ldr	r3, [sp, #0]
 801ccfe:	2200      	movs	r2, #0
 801cd00:	701a      	strb	r2, [r3, #0]
 801cd02:	e7dd      	b.n	801ccc0 <_vsniprintf_r+0x14>

0801cd04 <vsniprintf>:
 801cd04:	b507      	push	{r0, r1, r2, lr}
 801cd06:	9300      	str	r3, [sp, #0]
 801cd08:	4613      	mov	r3, r2
 801cd0a:	460a      	mov	r2, r1
 801cd0c:	4601      	mov	r1, r0
 801cd0e:	4803      	ldr	r0, [pc, #12]	; (801cd1c <vsniprintf+0x18>)
 801cd10:	6800      	ldr	r0, [r0, #0]
 801cd12:	f7ff ffcb 	bl	801ccac <_vsniprintf_r>
 801cd16:	b003      	add	sp, #12
 801cd18:	f85d fb04 	ldr.w	pc, [sp], #4
 801cd1c:	200001fc 	.word	0x200001fc

0801cd20 <__swbuf_r>:
 801cd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd22:	460e      	mov	r6, r1
 801cd24:	4614      	mov	r4, r2
 801cd26:	4605      	mov	r5, r0
 801cd28:	b118      	cbz	r0, 801cd32 <__swbuf_r+0x12>
 801cd2a:	6983      	ldr	r3, [r0, #24]
 801cd2c:	b90b      	cbnz	r3, 801cd32 <__swbuf_r+0x12>
 801cd2e:	f7fd f815 	bl	8019d5c <__sinit>
 801cd32:	4b21      	ldr	r3, [pc, #132]	; (801cdb8 <__swbuf_r+0x98>)
 801cd34:	429c      	cmp	r4, r3
 801cd36:	d12b      	bne.n	801cd90 <__swbuf_r+0x70>
 801cd38:	686c      	ldr	r4, [r5, #4]
 801cd3a:	69a3      	ldr	r3, [r4, #24]
 801cd3c:	60a3      	str	r3, [r4, #8]
 801cd3e:	89a3      	ldrh	r3, [r4, #12]
 801cd40:	071a      	lsls	r2, r3, #28
 801cd42:	d52f      	bpl.n	801cda4 <__swbuf_r+0x84>
 801cd44:	6923      	ldr	r3, [r4, #16]
 801cd46:	b36b      	cbz	r3, 801cda4 <__swbuf_r+0x84>
 801cd48:	6923      	ldr	r3, [r4, #16]
 801cd4a:	6820      	ldr	r0, [r4, #0]
 801cd4c:	1ac0      	subs	r0, r0, r3
 801cd4e:	6963      	ldr	r3, [r4, #20]
 801cd50:	b2f6      	uxtb	r6, r6
 801cd52:	4283      	cmp	r3, r0
 801cd54:	4637      	mov	r7, r6
 801cd56:	dc04      	bgt.n	801cd62 <__swbuf_r+0x42>
 801cd58:	4621      	mov	r1, r4
 801cd5a:	4628      	mov	r0, r5
 801cd5c:	f000 fff2 	bl	801dd44 <_fflush_r>
 801cd60:	bb30      	cbnz	r0, 801cdb0 <__swbuf_r+0x90>
 801cd62:	68a3      	ldr	r3, [r4, #8]
 801cd64:	3b01      	subs	r3, #1
 801cd66:	60a3      	str	r3, [r4, #8]
 801cd68:	6823      	ldr	r3, [r4, #0]
 801cd6a:	1c5a      	adds	r2, r3, #1
 801cd6c:	6022      	str	r2, [r4, #0]
 801cd6e:	701e      	strb	r6, [r3, #0]
 801cd70:	6963      	ldr	r3, [r4, #20]
 801cd72:	3001      	adds	r0, #1
 801cd74:	4283      	cmp	r3, r0
 801cd76:	d004      	beq.n	801cd82 <__swbuf_r+0x62>
 801cd78:	89a3      	ldrh	r3, [r4, #12]
 801cd7a:	07db      	lsls	r3, r3, #31
 801cd7c:	d506      	bpl.n	801cd8c <__swbuf_r+0x6c>
 801cd7e:	2e0a      	cmp	r6, #10
 801cd80:	d104      	bne.n	801cd8c <__swbuf_r+0x6c>
 801cd82:	4621      	mov	r1, r4
 801cd84:	4628      	mov	r0, r5
 801cd86:	f000 ffdd 	bl	801dd44 <_fflush_r>
 801cd8a:	b988      	cbnz	r0, 801cdb0 <__swbuf_r+0x90>
 801cd8c:	4638      	mov	r0, r7
 801cd8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cd90:	4b0a      	ldr	r3, [pc, #40]	; (801cdbc <__swbuf_r+0x9c>)
 801cd92:	429c      	cmp	r4, r3
 801cd94:	d101      	bne.n	801cd9a <__swbuf_r+0x7a>
 801cd96:	68ac      	ldr	r4, [r5, #8]
 801cd98:	e7cf      	b.n	801cd3a <__swbuf_r+0x1a>
 801cd9a:	4b09      	ldr	r3, [pc, #36]	; (801cdc0 <__swbuf_r+0xa0>)
 801cd9c:	429c      	cmp	r4, r3
 801cd9e:	bf08      	it	eq
 801cda0:	68ec      	ldreq	r4, [r5, #12]
 801cda2:	e7ca      	b.n	801cd3a <__swbuf_r+0x1a>
 801cda4:	4621      	mov	r1, r4
 801cda6:	4628      	mov	r0, r5
 801cda8:	f000 f81e 	bl	801cde8 <__swsetup_r>
 801cdac:	2800      	cmp	r0, #0
 801cdae:	d0cb      	beq.n	801cd48 <__swbuf_r+0x28>
 801cdb0:	f04f 37ff 	mov.w	r7, #4294967295
 801cdb4:	e7ea      	b.n	801cd8c <__swbuf_r+0x6c>
 801cdb6:	bf00      	nop
 801cdb8:	08022084 	.word	0x08022084
 801cdbc:	080220a4 	.word	0x080220a4
 801cdc0:	08022064 	.word	0x08022064

0801cdc4 <_write_r>:
 801cdc4:	b538      	push	{r3, r4, r5, lr}
 801cdc6:	4d07      	ldr	r5, [pc, #28]	; (801cde4 <_write_r+0x20>)
 801cdc8:	4604      	mov	r4, r0
 801cdca:	4608      	mov	r0, r1
 801cdcc:	4611      	mov	r1, r2
 801cdce:	2200      	movs	r2, #0
 801cdd0:	602a      	str	r2, [r5, #0]
 801cdd2:	461a      	mov	r2, r3
 801cdd4:	f003 f8d6 	bl	801ff84 <_write>
 801cdd8:	1c43      	adds	r3, r0, #1
 801cdda:	d102      	bne.n	801cde2 <_write_r+0x1e>
 801cddc:	682b      	ldr	r3, [r5, #0]
 801cdde:	b103      	cbz	r3, 801cde2 <_write_r+0x1e>
 801cde0:	6023      	str	r3, [r4, #0]
 801cde2:	bd38      	pop	{r3, r4, r5, pc}
 801cde4:	20008d5c 	.word	0x20008d5c

0801cde8 <__swsetup_r>:
 801cde8:	4b32      	ldr	r3, [pc, #200]	; (801ceb4 <__swsetup_r+0xcc>)
 801cdea:	b570      	push	{r4, r5, r6, lr}
 801cdec:	681d      	ldr	r5, [r3, #0]
 801cdee:	4606      	mov	r6, r0
 801cdf0:	460c      	mov	r4, r1
 801cdf2:	b125      	cbz	r5, 801cdfe <__swsetup_r+0x16>
 801cdf4:	69ab      	ldr	r3, [r5, #24]
 801cdf6:	b913      	cbnz	r3, 801cdfe <__swsetup_r+0x16>
 801cdf8:	4628      	mov	r0, r5
 801cdfa:	f7fc ffaf 	bl	8019d5c <__sinit>
 801cdfe:	4b2e      	ldr	r3, [pc, #184]	; (801ceb8 <__swsetup_r+0xd0>)
 801ce00:	429c      	cmp	r4, r3
 801ce02:	d10f      	bne.n	801ce24 <__swsetup_r+0x3c>
 801ce04:	686c      	ldr	r4, [r5, #4]
 801ce06:	89a3      	ldrh	r3, [r4, #12]
 801ce08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ce0c:	0719      	lsls	r1, r3, #28
 801ce0e:	d42c      	bmi.n	801ce6a <__swsetup_r+0x82>
 801ce10:	06dd      	lsls	r5, r3, #27
 801ce12:	d411      	bmi.n	801ce38 <__swsetup_r+0x50>
 801ce14:	2309      	movs	r3, #9
 801ce16:	6033      	str	r3, [r6, #0]
 801ce18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ce1c:	81a3      	strh	r3, [r4, #12]
 801ce1e:	f04f 30ff 	mov.w	r0, #4294967295
 801ce22:	e03e      	b.n	801cea2 <__swsetup_r+0xba>
 801ce24:	4b25      	ldr	r3, [pc, #148]	; (801cebc <__swsetup_r+0xd4>)
 801ce26:	429c      	cmp	r4, r3
 801ce28:	d101      	bne.n	801ce2e <__swsetup_r+0x46>
 801ce2a:	68ac      	ldr	r4, [r5, #8]
 801ce2c:	e7eb      	b.n	801ce06 <__swsetup_r+0x1e>
 801ce2e:	4b24      	ldr	r3, [pc, #144]	; (801cec0 <__swsetup_r+0xd8>)
 801ce30:	429c      	cmp	r4, r3
 801ce32:	bf08      	it	eq
 801ce34:	68ec      	ldreq	r4, [r5, #12]
 801ce36:	e7e6      	b.n	801ce06 <__swsetup_r+0x1e>
 801ce38:	0758      	lsls	r0, r3, #29
 801ce3a:	d512      	bpl.n	801ce62 <__swsetup_r+0x7a>
 801ce3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ce3e:	b141      	cbz	r1, 801ce52 <__swsetup_r+0x6a>
 801ce40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ce44:	4299      	cmp	r1, r3
 801ce46:	d002      	beq.n	801ce4e <__swsetup_r+0x66>
 801ce48:	4630      	mov	r0, r6
 801ce4a:	f7fd fc29 	bl	801a6a0 <_free_r>
 801ce4e:	2300      	movs	r3, #0
 801ce50:	6363      	str	r3, [r4, #52]	; 0x34
 801ce52:	89a3      	ldrh	r3, [r4, #12]
 801ce54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ce58:	81a3      	strh	r3, [r4, #12]
 801ce5a:	2300      	movs	r3, #0
 801ce5c:	6063      	str	r3, [r4, #4]
 801ce5e:	6923      	ldr	r3, [r4, #16]
 801ce60:	6023      	str	r3, [r4, #0]
 801ce62:	89a3      	ldrh	r3, [r4, #12]
 801ce64:	f043 0308 	orr.w	r3, r3, #8
 801ce68:	81a3      	strh	r3, [r4, #12]
 801ce6a:	6923      	ldr	r3, [r4, #16]
 801ce6c:	b94b      	cbnz	r3, 801ce82 <__swsetup_r+0x9a>
 801ce6e:	89a3      	ldrh	r3, [r4, #12]
 801ce70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ce74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ce78:	d003      	beq.n	801ce82 <__swsetup_r+0x9a>
 801ce7a:	4621      	mov	r1, r4
 801ce7c:	4630      	mov	r0, r6
 801ce7e:	f001 fc4f 	bl	801e720 <__smakebuf_r>
 801ce82:	89a0      	ldrh	r0, [r4, #12]
 801ce84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ce88:	f010 0301 	ands.w	r3, r0, #1
 801ce8c:	d00a      	beq.n	801cea4 <__swsetup_r+0xbc>
 801ce8e:	2300      	movs	r3, #0
 801ce90:	60a3      	str	r3, [r4, #8]
 801ce92:	6963      	ldr	r3, [r4, #20]
 801ce94:	425b      	negs	r3, r3
 801ce96:	61a3      	str	r3, [r4, #24]
 801ce98:	6923      	ldr	r3, [r4, #16]
 801ce9a:	b943      	cbnz	r3, 801ceae <__swsetup_r+0xc6>
 801ce9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801cea0:	d1ba      	bne.n	801ce18 <__swsetup_r+0x30>
 801cea2:	bd70      	pop	{r4, r5, r6, pc}
 801cea4:	0781      	lsls	r1, r0, #30
 801cea6:	bf58      	it	pl
 801cea8:	6963      	ldrpl	r3, [r4, #20]
 801ceaa:	60a3      	str	r3, [r4, #8]
 801ceac:	e7f4      	b.n	801ce98 <__swsetup_r+0xb0>
 801ceae:	2000      	movs	r0, #0
 801ceb0:	e7f7      	b.n	801cea2 <__swsetup_r+0xba>
 801ceb2:	bf00      	nop
 801ceb4:	200001fc 	.word	0x200001fc
 801ceb8:	08022084 	.word	0x08022084
 801cebc:	080220a4 	.word	0x080220a4
 801cec0:	08022064 	.word	0x08022064

0801cec4 <__assert_func>:
 801cec4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801cec6:	4614      	mov	r4, r2
 801cec8:	461a      	mov	r2, r3
 801ceca:	4b09      	ldr	r3, [pc, #36]	; (801cef0 <__assert_func+0x2c>)
 801cecc:	681b      	ldr	r3, [r3, #0]
 801cece:	4605      	mov	r5, r0
 801ced0:	68d8      	ldr	r0, [r3, #12]
 801ced2:	b14c      	cbz	r4, 801cee8 <__assert_func+0x24>
 801ced4:	4b07      	ldr	r3, [pc, #28]	; (801cef4 <__assert_func+0x30>)
 801ced6:	9100      	str	r1, [sp, #0]
 801ced8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801cedc:	4906      	ldr	r1, [pc, #24]	; (801cef8 <__assert_func+0x34>)
 801cede:	462b      	mov	r3, r5
 801cee0:	f000 ff6c 	bl	801ddbc <fiprintf>
 801cee4:	f7fc fecc 	bl	8019c80 <abort>
 801cee8:	4b04      	ldr	r3, [pc, #16]	; (801cefc <__assert_func+0x38>)
 801ceea:	461c      	mov	r4, r3
 801ceec:	e7f3      	b.n	801ced6 <__assert_func+0x12>
 801ceee:	bf00      	nop
 801cef0:	200001fc 	.word	0x200001fc
 801cef4:	08022325 	.word	0x08022325
 801cef8:	08022332 	.word	0x08022332
 801cefc:	08022360 	.word	0x08022360

0801cf00 <_close_r>:
 801cf00:	b538      	push	{r3, r4, r5, lr}
 801cf02:	4d06      	ldr	r5, [pc, #24]	; (801cf1c <_close_r+0x1c>)
 801cf04:	2300      	movs	r3, #0
 801cf06:	4604      	mov	r4, r0
 801cf08:	4608      	mov	r0, r1
 801cf0a:	602b      	str	r3, [r5, #0]
 801cf0c:	f002 fff4 	bl	801fef8 <_close>
 801cf10:	1c43      	adds	r3, r0, #1
 801cf12:	d102      	bne.n	801cf1a <_close_r+0x1a>
 801cf14:	682b      	ldr	r3, [r5, #0]
 801cf16:	b103      	cbz	r3, 801cf1a <_close_r+0x1a>
 801cf18:	6023      	str	r3, [r4, #0]
 801cf1a:	bd38      	pop	{r3, r4, r5, pc}
 801cf1c:	20008d5c 	.word	0x20008d5c

0801cf20 <div>:
 801cf20:	2900      	cmp	r1, #0
 801cf22:	b510      	push	{r4, lr}
 801cf24:	fb91 f4f2 	sdiv	r4, r1, r2
 801cf28:	fb02 1314 	mls	r3, r2, r4, r1
 801cf2c:	db06      	blt.n	801cf3c <div+0x1c>
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	da01      	bge.n	801cf36 <div+0x16>
 801cf32:	3401      	adds	r4, #1
 801cf34:	1a9b      	subs	r3, r3, r2
 801cf36:	e9c0 4300 	strd	r4, r3, [r0]
 801cf3a:	bd10      	pop	{r4, pc}
 801cf3c:	2b00      	cmp	r3, #0
 801cf3e:	bfc4      	itt	gt
 801cf40:	f104 34ff 	addgt.w	r4, r4, #4294967295
 801cf44:	189b      	addgt	r3, r3, r2
 801cf46:	e7f6      	b.n	801cf36 <div+0x16>

0801cf48 <quorem>:
 801cf48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf4c:	6903      	ldr	r3, [r0, #16]
 801cf4e:	690c      	ldr	r4, [r1, #16]
 801cf50:	42a3      	cmp	r3, r4
 801cf52:	4607      	mov	r7, r0
 801cf54:	f2c0 8081 	blt.w	801d05a <quorem+0x112>
 801cf58:	3c01      	subs	r4, #1
 801cf5a:	f101 0814 	add.w	r8, r1, #20
 801cf5e:	f100 0514 	add.w	r5, r0, #20
 801cf62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cf66:	9301      	str	r3, [sp, #4]
 801cf68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801cf6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cf70:	3301      	adds	r3, #1
 801cf72:	429a      	cmp	r2, r3
 801cf74:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801cf78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801cf7c:	fbb2 f6f3 	udiv	r6, r2, r3
 801cf80:	d331      	bcc.n	801cfe6 <quorem+0x9e>
 801cf82:	f04f 0e00 	mov.w	lr, #0
 801cf86:	4640      	mov	r0, r8
 801cf88:	46ac      	mov	ip, r5
 801cf8a:	46f2      	mov	sl, lr
 801cf8c:	f850 2b04 	ldr.w	r2, [r0], #4
 801cf90:	b293      	uxth	r3, r2
 801cf92:	fb06 e303 	mla	r3, r6, r3, lr
 801cf96:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801cf9a:	b29b      	uxth	r3, r3
 801cf9c:	ebaa 0303 	sub.w	r3, sl, r3
 801cfa0:	0c12      	lsrs	r2, r2, #16
 801cfa2:	f8dc a000 	ldr.w	sl, [ip]
 801cfa6:	fb06 e202 	mla	r2, r6, r2, lr
 801cfaa:	fa13 f38a 	uxtah	r3, r3, sl
 801cfae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801cfb2:	fa1f fa82 	uxth.w	sl, r2
 801cfb6:	f8dc 2000 	ldr.w	r2, [ip]
 801cfba:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801cfbe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801cfc2:	b29b      	uxth	r3, r3
 801cfc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cfc8:	4581      	cmp	r9, r0
 801cfca:	f84c 3b04 	str.w	r3, [ip], #4
 801cfce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801cfd2:	d2db      	bcs.n	801cf8c <quorem+0x44>
 801cfd4:	f855 300b 	ldr.w	r3, [r5, fp]
 801cfd8:	b92b      	cbnz	r3, 801cfe6 <quorem+0x9e>
 801cfda:	9b01      	ldr	r3, [sp, #4]
 801cfdc:	3b04      	subs	r3, #4
 801cfde:	429d      	cmp	r5, r3
 801cfe0:	461a      	mov	r2, r3
 801cfe2:	d32e      	bcc.n	801d042 <quorem+0xfa>
 801cfe4:	613c      	str	r4, [r7, #16]
 801cfe6:	4638      	mov	r0, r7
 801cfe8:	f001 fec0 	bl	801ed6c <__mcmp>
 801cfec:	2800      	cmp	r0, #0
 801cfee:	db24      	blt.n	801d03a <quorem+0xf2>
 801cff0:	3601      	adds	r6, #1
 801cff2:	4628      	mov	r0, r5
 801cff4:	f04f 0c00 	mov.w	ip, #0
 801cff8:	f858 2b04 	ldr.w	r2, [r8], #4
 801cffc:	f8d0 e000 	ldr.w	lr, [r0]
 801d000:	b293      	uxth	r3, r2
 801d002:	ebac 0303 	sub.w	r3, ip, r3
 801d006:	0c12      	lsrs	r2, r2, #16
 801d008:	fa13 f38e 	uxtah	r3, r3, lr
 801d00c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801d010:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d014:	b29b      	uxth	r3, r3
 801d016:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d01a:	45c1      	cmp	r9, r8
 801d01c:	f840 3b04 	str.w	r3, [r0], #4
 801d020:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d024:	d2e8      	bcs.n	801cff8 <quorem+0xb0>
 801d026:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d02a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d02e:	b922      	cbnz	r2, 801d03a <quorem+0xf2>
 801d030:	3b04      	subs	r3, #4
 801d032:	429d      	cmp	r5, r3
 801d034:	461a      	mov	r2, r3
 801d036:	d30a      	bcc.n	801d04e <quorem+0x106>
 801d038:	613c      	str	r4, [r7, #16]
 801d03a:	4630      	mov	r0, r6
 801d03c:	b003      	add	sp, #12
 801d03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d042:	6812      	ldr	r2, [r2, #0]
 801d044:	3b04      	subs	r3, #4
 801d046:	2a00      	cmp	r2, #0
 801d048:	d1cc      	bne.n	801cfe4 <quorem+0x9c>
 801d04a:	3c01      	subs	r4, #1
 801d04c:	e7c7      	b.n	801cfde <quorem+0x96>
 801d04e:	6812      	ldr	r2, [r2, #0]
 801d050:	3b04      	subs	r3, #4
 801d052:	2a00      	cmp	r2, #0
 801d054:	d1f0      	bne.n	801d038 <quorem+0xf0>
 801d056:	3c01      	subs	r4, #1
 801d058:	e7eb      	b.n	801d032 <quorem+0xea>
 801d05a:	2000      	movs	r0, #0
 801d05c:	e7ee      	b.n	801d03c <quorem+0xf4>
	...

0801d060 <_dtoa_r>:
 801d060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d064:	ed2d 8b02 	vpush	{d8}
 801d068:	ec57 6b10 	vmov	r6, r7, d0
 801d06c:	b095      	sub	sp, #84	; 0x54
 801d06e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801d070:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801d074:	9105      	str	r1, [sp, #20]
 801d076:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801d07a:	4604      	mov	r4, r0
 801d07c:	9209      	str	r2, [sp, #36]	; 0x24
 801d07e:	930f      	str	r3, [sp, #60]	; 0x3c
 801d080:	b975      	cbnz	r5, 801d0a0 <_dtoa_r+0x40>
 801d082:	2010      	movs	r0, #16
 801d084:	f7fd f84e 	bl	801a124 <malloc>
 801d088:	4602      	mov	r2, r0
 801d08a:	6260      	str	r0, [r4, #36]	; 0x24
 801d08c:	b920      	cbnz	r0, 801d098 <_dtoa_r+0x38>
 801d08e:	4bb2      	ldr	r3, [pc, #712]	; (801d358 <_dtoa_r+0x2f8>)
 801d090:	21ea      	movs	r1, #234	; 0xea
 801d092:	48b2      	ldr	r0, [pc, #712]	; (801d35c <_dtoa_r+0x2fc>)
 801d094:	f7ff ff16 	bl	801cec4 <__assert_func>
 801d098:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d09c:	6005      	str	r5, [r0, #0]
 801d09e:	60c5      	str	r5, [r0, #12]
 801d0a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d0a2:	6819      	ldr	r1, [r3, #0]
 801d0a4:	b151      	cbz	r1, 801d0bc <_dtoa_r+0x5c>
 801d0a6:	685a      	ldr	r2, [r3, #4]
 801d0a8:	604a      	str	r2, [r1, #4]
 801d0aa:	2301      	movs	r3, #1
 801d0ac:	4093      	lsls	r3, r2
 801d0ae:	608b      	str	r3, [r1, #8]
 801d0b0:	4620      	mov	r0, r4
 801d0b2:	f001 fbd3 	bl	801e85c <_Bfree>
 801d0b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d0b8:	2200      	movs	r2, #0
 801d0ba:	601a      	str	r2, [r3, #0]
 801d0bc:	1e3b      	subs	r3, r7, #0
 801d0be:	bfb9      	ittee	lt
 801d0c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801d0c4:	9303      	strlt	r3, [sp, #12]
 801d0c6:	2300      	movge	r3, #0
 801d0c8:	f8c8 3000 	strge.w	r3, [r8]
 801d0cc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801d0d0:	4ba3      	ldr	r3, [pc, #652]	; (801d360 <_dtoa_r+0x300>)
 801d0d2:	bfbc      	itt	lt
 801d0d4:	2201      	movlt	r2, #1
 801d0d6:	f8c8 2000 	strlt.w	r2, [r8]
 801d0da:	ea33 0309 	bics.w	r3, r3, r9
 801d0de:	d11b      	bne.n	801d118 <_dtoa_r+0xb8>
 801d0e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d0e2:	f242 730f 	movw	r3, #9999	; 0x270f
 801d0e6:	6013      	str	r3, [r2, #0]
 801d0e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d0ec:	4333      	orrs	r3, r6
 801d0ee:	f000 857a 	beq.w	801dbe6 <_dtoa_r+0xb86>
 801d0f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d0f4:	b963      	cbnz	r3, 801d110 <_dtoa_r+0xb0>
 801d0f6:	4b9b      	ldr	r3, [pc, #620]	; (801d364 <_dtoa_r+0x304>)
 801d0f8:	e024      	b.n	801d144 <_dtoa_r+0xe4>
 801d0fa:	4b9b      	ldr	r3, [pc, #620]	; (801d368 <_dtoa_r+0x308>)
 801d0fc:	9300      	str	r3, [sp, #0]
 801d0fe:	3308      	adds	r3, #8
 801d100:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d102:	6013      	str	r3, [r2, #0]
 801d104:	9800      	ldr	r0, [sp, #0]
 801d106:	b015      	add	sp, #84	; 0x54
 801d108:	ecbd 8b02 	vpop	{d8}
 801d10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d110:	4b94      	ldr	r3, [pc, #592]	; (801d364 <_dtoa_r+0x304>)
 801d112:	9300      	str	r3, [sp, #0]
 801d114:	3303      	adds	r3, #3
 801d116:	e7f3      	b.n	801d100 <_dtoa_r+0xa0>
 801d118:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d11c:	2200      	movs	r2, #0
 801d11e:	ec51 0b17 	vmov	r0, r1, d7
 801d122:	2300      	movs	r3, #0
 801d124:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801d128:	f7e3 fcee 	bl	8000b08 <__aeabi_dcmpeq>
 801d12c:	4680      	mov	r8, r0
 801d12e:	b158      	cbz	r0, 801d148 <_dtoa_r+0xe8>
 801d130:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d132:	2301      	movs	r3, #1
 801d134:	6013      	str	r3, [r2, #0]
 801d136:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d138:	2b00      	cmp	r3, #0
 801d13a:	f000 8551 	beq.w	801dbe0 <_dtoa_r+0xb80>
 801d13e:	488b      	ldr	r0, [pc, #556]	; (801d36c <_dtoa_r+0x30c>)
 801d140:	6018      	str	r0, [r3, #0]
 801d142:	1e43      	subs	r3, r0, #1
 801d144:	9300      	str	r3, [sp, #0]
 801d146:	e7dd      	b.n	801d104 <_dtoa_r+0xa4>
 801d148:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801d14c:	aa12      	add	r2, sp, #72	; 0x48
 801d14e:	a913      	add	r1, sp, #76	; 0x4c
 801d150:	4620      	mov	r0, r4
 801d152:	f001 ff2b 	bl	801efac <__d2b>
 801d156:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d15a:	4683      	mov	fp, r0
 801d15c:	2d00      	cmp	r5, #0
 801d15e:	d07c      	beq.n	801d25a <_dtoa_r+0x1fa>
 801d160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d162:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801d166:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d16a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801d16e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801d172:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801d176:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801d17a:	4b7d      	ldr	r3, [pc, #500]	; (801d370 <_dtoa_r+0x310>)
 801d17c:	2200      	movs	r2, #0
 801d17e:	4630      	mov	r0, r6
 801d180:	4639      	mov	r1, r7
 801d182:	f7e3 f8a1 	bl	80002c8 <__aeabi_dsub>
 801d186:	a36e      	add	r3, pc, #440	; (adr r3, 801d340 <_dtoa_r+0x2e0>)
 801d188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d18c:	f7e3 fa54 	bl	8000638 <__aeabi_dmul>
 801d190:	a36d      	add	r3, pc, #436	; (adr r3, 801d348 <_dtoa_r+0x2e8>)
 801d192:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d196:	f7e3 f899 	bl	80002cc <__adddf3>
 801d19a:	4606      	mov	r6, r0
 801d19c:	4628      	mov	r0, r5
 801d19e:	460f      	mov	r7, r1
 801d1a0:	f7e3 f9e0 	bl	8000564 <__aeabi_i2d>
 801d1a4:	a36a      	add	r3, pc, #424	; (adr r3, 801d350 <_dtoa_r+0x2f0>)
 801d1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1aa:	f7e3 fa45 	bl	8000638 <__aeabi_dmul>
 801d1ae:	4602      	mov	r2, r0
 801d1b0:	460b      	mov	r3, r1
 801d1b2:	4630      	mov	r0, r6
 801d1b4:	4639      	mov	r1, r7
 801d1b6:	f7e3 f889 	bl	80002cc <__adddf3>
 801d1ba:	4606      	mov	r6, r0
 801d1bc:	460f      	mov	r7, r1
 801d1be:	f7e3 fceb 	bl	8000b98 <__aeabi_d2iz>
 801d1c2:	2200      	movs	r2, #0
 801d1c4:	4682      	mov	sl, r0
 801d1c6:	2300      	movs	r3, #0
 801d1c8:	4630      	mov	r0, r6
 801d1ca:	4639      	mov	r1, r7
 801d1cc:	f7e3 fca6 	bl	8000b1c <__aeabi_dcmplt>
 801d1d0:	b148      	cbz	r0, 801d1e6 <_dtoa_r+0x186>
 801d1d2:	4650      	mov	r0, sl
 801d1d4:	f7e3 f9c6 	bl	8000564 <__aeabi_i2d>
 801d1d8:	4632      	mov	r2, r6
 801d1da:	463b      	mov	r3, r7
 801d1dc:	f7e3 fc94 	bl	8000b08 <__aeabi_dcmpeq>
 801d1e0:	b908      	cbnz	r0, 801d1e6 <_dtoa_r+0x186>
 801d1e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d1e6:	f1ba 0f16 	cmp.w	sl, #22
 801d1ea:	d854      	bhi.n	801d296 <_dtoa_r+0x236>
 801d1ec:	4b61      	ldr	r3, [pc, #388]	; (801d374 <_dtoa_r+0x314>)
 801d1ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801d1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801d1fa:	f7e3 fc8f 	bl	8000b1c <__aeabi_dcmplt>
 801d1fe:	2800      	cmp	r0, #0
 801d200:	d04b      	beq.n	801d29a <_dtoa_r+0x23a>
 801d202:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d206:	2300      	movs	r3, #0
 801d208:	930e      	str	r3, [sp, #56]	; 0x38
 801d20a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d20c:	1b5d      	subs	r5, r3, r5
 801d20e:	1e6b      	subs	r3, r5, #1
 801d210:	9304      	str	r3, [sp, #16]
 801d212:	bf43      	ittte	mi
 801d214:	2300      	movmi	r3, #0
 801d216:	f1c5 0801 	rsbmi	r8, r5, #1
 801d21a:	9304      	strmi	r3, [sp, #16]
 801d21c:	f04f 0800 	movpl.w	r8, #0
 801d220:	f1ba 0f00 	cmp.w	sl, #0
 801d224:	db3b      	blt.n	801d29e <_dtoa_r+0x23e>
 801d226:	9b04      	ldr	r3, [sp, #16]
 801d228:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801d22c:	4453      	add	r3, sl
 801d22e:	9304      	str	r3, [sp, #16]
 801d230:	2300      	movs	r3, #0
 801d232:	9306      	str	r3, [sp, #24]
 801d234:	9b05      	ldr	r3, [sp, #20]
 801d236:	2b09      	cmp	r3, #9
 801d238:	d869      	bhi.n	801d30e <_dtoa_r+0x2ae>
 801d23a:	2b05      	cmp	r3, #5
 801d23c:	bfc4      	itt	gt
 801d23e:	3b04      	subgt	r3, #4
 801d240:	9305      	strgt	r3, [sp, #20]
 801d242:	9b05      	ldr	r3, [sp, #20]
 801d244:	f1a3 0302 	sub.w	r3, r3, #2
 801d248:	bfcc      	ite	gt
 801d24a:	2500      	movgt	r5, #0
 801d24c:	2501      	movle	r5, #1
 801d24e:	2b03      	cmp	r3, #3
 801d250:	d869      	bhi.n	801d326 <_dtoa_r+0x2c6>
 801d252:	e8df f003 	tbb	[pc, r3]
 801d256:	4e2c      	.short	0x4e2c
 801d258:	5a4c      	.short	0x5a4c
 801d25a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801d25e:	441d      	add	r5, r3
 801d260:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801d264:	2b20      	cmp	r3, #32
 801d266:	bfc1      	itttt	gt
 801d268:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801d26c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801d270:	fa09 f303 	lslgt.w	r3, r9, r3
 801d274:	fa26 f000 	lsrgt.w	r0, r6, r0
 801d278:	bfda      	itte	le
 801d27a:	f1c3 0320 	rsble	r3, r3, #32
 801d27e:	fa06 f003 	lslle.w	r0, r6, r3
 801d282:	4318      	orrgt	r0, r3
 801d284:	f7e3 f95e 	bl	8000544 <__aeabi_ui2d>
 801d288:	2301      	movs	r3, #1
 801d28a:	4606      	mov	r6, r0
 801d28c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801d290:	3d01      	subs	r5, #1
 801d292:	9310      	str	r3, [sp, #64]	; 0x40
 801d294:	e771      	b.n	801d17a <_dtoa_r+0x11a>
 801d296:	2301      	movs	r3, #1
 801d298:	e7b6      	b.n	801d208 <_dtoa_r+0x1a8>
 801d29a:	900e      	str	r0, [sp, #56]	; 0x38
 801d29c:	e7b5      	b.n	801d20a <_dtoa_r+0x1aa>
 801d29e:	f1ca 0300 	rsb	r3, sl, #0
 801d2a2:	9306      	str	r3, [sp, #24]
 801d2a4:	2300      	movs	r3, #0
 801d2a6:	eba8 080a 	sub.w	r8, r8, sl
 801d2aa:	930d      	str	r3, [sp, #52]	; 0x34
 801d2ac:	e7c2      	b.n	801d234 <_dtoa_r+0x1d4>
 801d2ae:	2300      	movs	r3, #0
 801d2b0:	9308      	str	r3, [sp, #32]
 801d2b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2b4:	2b00      	cmp	r3, #0
 801d2b6:	dc39      	bgt.n	801d32c <_dtoa_r+0x2cc>
 801d2b8:	f04f 0901 	mov.w	r9, #1
 801d2bc:	f8cd 9004 	str.w	r9, [sp, #4]
 801d2c0:	464b      	mov	r3, r9
 801d2c2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801d2c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801d2c8:	2200      	movs	r2, #0
 801d2ca:	6042      	str	r2, [r0, #4]
 801d2cc:	2204      	movs	r2, #4
 801d2ce:	f102 0614 	add.w	r6, r2, #20
 801d2d2:	429e      	cmp	r6, r3
 801d2d4:	6841      	ldr	r1, [r0, #4]
 801d2d6:	d92f      	bls.n	801d338 <_dtoa_r+0x2d8>
 801d2d8:	4620      	mov	r0, r4
 801d2da:	f001 fa7f 	bl	801e7dc <_Balloc>
 801d2de:	9000      	str	r0, [sp, #0]
 801d2e0:	2800      	cmp	r0, #0
 801d2e2:	d14b      	bne.n	801d37c <_dtoa_r+0x31c>
 801d2e4:	4b24      	ldr	r3, [pc, #144]	; (801d378 <_dtoa_r+0x318>)
 801d2e6:	4602      	mov	r2, r0
 801d2e8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801d2ec:	e6d1      	b.n	801d092 <_dtoa_r+0x32>
 801d2ee:	2301      	movs	r3, #1
 801d2f0:	e7de      	b.n	801d2b0 <_dtoa_r+0x250>
 801d2f2:	2300      	movs	r3, #0
 801d2f4:	9308      	str	r3, [sp, #32]
 801d2f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2f8:	eb0a 0903 	add.w	r9, sl, r3
 801d2fc:	f109 0301 	add.w	r3, r9, #1
 801d300:	2b01      	cmp	r3, #1
 801d302:	9301      	str	r3, [sp, #4]
 801d304:	bfb8      	it	lt
 801d306:	2301      	movlt	r3, #1
 801d308:	e7dd      	b.n	801d2c6 <_dtoa_r+0x266>
 801d30a:	2301      	movs	r3, #1
 801d30c:	e7f2      	b.n	801d2f4 <_dtoa_r+0x294>
 801d30e:	2501      	movs	r5, #1
 801d310:	2300      	movs	r3, #0
 801d312:	9305      	str	r3, [sp, #20]
 801d314:	9508      	str	r5, [sp, #32]
 801d316:	f04f 39ff 	mov.w	r9, #4294967295
 801d31a:	2200      	movs	r2, #0
 801d31c:	f8cd 9004 	str.w	r9, [sp, #4]
 801d320:	2312      	movs	r3, #18
 801d322:	9209      	str	r2, [sp, #36]	; 0x24
 801d324:	e7cf      	b.n	801d2c6 <_dtoa_r+0x266>
 801d326:	2301      	movs	r3, #1
 801d328:	9308      	str	r3, [sp, #32]
 801d32a:	e7f4      	b.n	801d316 <_dtoa_r+0x2b6>
 801d32c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801d330:	f8cd 9004 	str.w	r9, [sp, #4]
 801d334:	464b      	mov	r3, r9
 801d336:	e7c6      	b.n	801d2c6 <_dtoa_r+0x266>
 801d338:	3101      	adds	r1, #1
 801d33a:	6041      	str	r1, [r0, #4]
 801d33c:	0052      	lsls	r2, r2, #1
 801d33e:	e7c6      	b.n	801d2ce <_dtoa_r+0x26e>
 801d340:	636f4361 	.word	0x636f4361
 801d344:	3fd287a7 	.word	0x3fd287a7
 801d348:	8b60c8b3 	.word	0x8b60c8b3
 801d34c:	3fc68a28 	.word	0x3fc68a28
 801d350:	509f79fb 	.word	0x509f79fb
 801d354:	3fd34413 	.word	0x3fd34413
 801d358:	080220c8 	.word	0x080220c8
 801d35c:	0802236e 	.word	0x0802236e
 801d360:	7ff00000 	.word	0x7ff00000
 801d364:	0802236a 	.word	0x0802236a
 801d368:	08022361 	.word	0x08022361
 801d36c:	080225d2 	.word	0x080225d2
 801d370:	3ff80000 	.word	0x3ff80000
 801d374:	080224e8 	.word	0x080224e8
 801d378:	080223cd 	.word	0x080223cd
 801d37c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d37e:	9a00      	ldr	r2, [sp, #0]
 801d380:	601a      	str	r2, [r3, #0]
 801d382:	9b01      	ldr	r3, [sp, #4]
 801d384:	2b0e      	cmp	r3, #14
 801d386:	f200 80ad 	bhi.w	801d4e4 <_dtoa_r+0x484>
 801d38a:	2d00      	cmp	r5, #0
 801d38c:	f000 80aa 	beq.w	801d4e4 <_dtoa_r+0x484>
 801d390:	f1ba 0f00 	cmp.w	sl, #0
 801d394:	dd36      	ble.n	801d404 <_dtoa_r+0x3a4>
 801d396:	4ac3      	ldr	r2, [pc, #780]	; (801d6a4 <_dtoa_r+0x644>)
 801d398:	f00a 030f 	and.w	r3, sl, #15
 801d39c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801d3a0:	ed93 7b00 	vldr	d7, [r3]
 801d3a4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801d3a8:	ea4f 172a 	mov.w	r7, sl, asr #4
 801d3ac:	eeb0 8a47 	vmov.f32	s16, s14
 801d3b0:	eef0 8a67 	vmov.f32	s17, s15
 801d3b4:	d016      	beq.n	801d3e4 <_dtoa_r+0x384>
 801d3b6:	4bbc      	ldr	r3, [pc, #752]	; (801d6a8 <_dtoa_r+0x648>)
 801d3b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801d3bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d3c0:	f7e3 fa64 	bl	800088c <__aeabi_ddiv>
 801d3c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d3c8:	f007 070f 	and.w	r7, r7, #15
 801d3cc:	2503      	movs	r5, #3
 801d3ce:	4eb6      	ldr	r6, [pc, #728]	; (801d6a8 <_dtoa_r+0x648>)
 801d3d0:	b957      	cbnz	r7, 801d3e8 <_dtoa_r+0x388>
 801d3d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d3d6:	ec53 2b18 	vmov	r2, r3, d8
 801d3da:	f7e3 fa57 	bl	800088c <__aeabi_ddiv>
 801d3de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d3e2:	e029      	b.n	801d438 <_dtoa_r+0x3d8>
 801d3e4:	2502      	movs	r5, #2
 801d3e6:	e7f2      	b.n	801d3ce <_dtoa_r+0x36e>
 801d3e8:	07f9      	lsls	r1, r7, #31
 801d3ea:	d508      	bpl.n	801d3fe <_dtoa_r+0x39e>
 801d3ec:	ec51 0b18 	vmov	r0, r1, d8
 801d3f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 801d3f4:	f7e3 f920 	bl	8000638 <__aeabi_dmul>
 801d3f8:	ec41 0b18 	vmov	d8, r0, r1
 801d3fc:	3501      	adds	r5, #1
 801d3fe:	107f      	asrs	r7, r7, #1
 801d400:	3608      	adds	r6, #8
 801d402:	e7e5      	b.n	801d3d0 <_dtoa_r+0x370>
 801d404:	f000 80a6 	beq.w	801d554 <_dtoa_r+0x4f4>
 801d408:	f1ca 0600 	rsb	r6, sl, #0
 801d40c:	4ba5      	ldr	r3, [pc, #660]	; (801d6a4 <_dtoa_r+0x644>)
 801d40e:	4fa6      	ldr	r7, [pc, #664]	; (801d6a8 <_dtoa_r+0x648>)
 801d410:	f006 020f 	and.w	r2, r6, #15
 801d414:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d41c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801d420:	f7e3 f90a 	bl	8000638 <__aeabi_dmul>
 801d424:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d428:	1136      	asrs	r6, r6, #4
 801d42a:	2300      	movs	r3, #0
 801d42c:	2502      	movs	r5, #2
 801d42e:	2e00      	cmp	r6, #0
 801d430:	f040 8085 	bne.w	801d53e <_dtoa_r+0x4de>
 801d434:	2b00      	cmp	r3, #0
 801d436:	d1d2      	bne.n	801d3de <_dtoa_r+0x37e>
 801d438:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d43a:	2b00      	cmp	r3, #0
 801d43c:	f000 808c 	beq.w	801d558 <_dtoa_r+0x4f8>
 801d440:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801d444:	4b99      	ldr	r3, [pc, #612]	; (801d6ac <_dtoa_r+0x64c>)
 801d446:	2200      	movs	r2, #0
 801d448:	4630      	mov	r0, r6
 801d44a:	4639      	mov	r1, r7
 801d44c:	f7e3 fb66 	bl	8000b1c <__aeabi_dcmplt>
 801d450:	2800      	cmp	r0, #0
 801d452:	f000 8081 	beq.w	801d558 <_dtoa_r+0x4f8>
 801d456:	9b01      	ldr	r3, [sp, #4]
 801d458:	2b00      	cmp	r3, #0
 801d45a:	d07d      	beq.n	801d558 <_dtoa_r+0x4f8>
 801d45c:	f1b9 0f00 	cmp.w	r9, #0
 801d460:	dd3c      	ble.n	801d4dc <_dtoa_r+0x47c>
 801d462:	f10a 33ff 	add.w	r3, sl, #4294967295
 801d466:	9307      	str	r3, [sp, #28]
 801d468:	2200      	movs	r2, #0
 801d46a:	4b91      	ldr	r3, [pc, #580]	; (801d6b0 <_dtoa_r+0x650>)
 801d46c:	4630      	mov	r0, r6
 801d46e:	4639      	mov	r1, r7
 801d470:	f7e3 f8e2 	bl	8000638 <__aeabi_dmul>
 801d474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d478:	3501      	adds	r5, #1
 801d47a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801d47e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801d482:	4628      	mov	r0, r5
 801d484:	f7e3 f86e 	bl	8000564 <__aeabi_i2d>
 801d488:	4632      	mov	r2, r6
 801d48a:	463b      	mov	r3, r7
 801d48c:	f7e3 f8d4 	bl	8000638 <__aeabi_dmul>
 801d490:	4b88      	ldr	r3, [pc, #544]	; (801d6b4 <_dtoa_r+0x654>)
 801d492:	2200      	movs	r2, #0
 801d494:	f7e2 ff1a 	bl	80002cc <__adddf3>
 801d498:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801d49c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d4a0:	9303      	str	r3, [sp, #12]
 801d4a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d4a4:	2b00      	cmp	r3, #0
 801d4a6:	d15c      	bne.n	801d562 <_dtoa_r+0x502>
 801d4a8:	4b83      	ldr	r3, [pc, #524]	; (801d6b8 <_dtoa_r+0x658>)
 801d4aa:	2200      	movs	r2, #0
 801d4ac:	4630      	mov	r0, r6
 801d4ae:	4639      	mov	r1, r7
 801d4b0:	f7e2 ff0a 	bl	80002c8 <__aeabi_dsub>
 801d4b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d4b8:	4606      	mov	r6, r0
 801d4ba:	460f      	mov	r7, r1
 801d4bc:	f7e3 fb4c 	bl	8000b58 <__aeabi_dcmpgt>
 801d4c0:	2800      	cmp	r0, #0
 801d4c2:	f040 8296 	bne.w	801d9f2 <_dtoa_r+0x992>
 801d4c6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801d4ca:	4630      	mov	r0, r6
 801d4cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d4d0:	4639      	mov	r1, r7
 801d4d2:	f7e3 fb23 	bl	8000b1c <__aeabi_dcmplt>
 801d4d6:	2800      	cmp	r0, #0
 801d4d8:	f040 8288 	bne.w	801d9ec <_dtoa_r+0x98c>
 801d4dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801d4e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d4e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d4e6:	2b00      	cmp	r3, #0
 801d4e8:	f2c0 8158 	blt.w	801d79c <_dtoa_r+0x73c>
 801d4ec:	f1ba 0f0e 	cmp.w	sl, #14
 801d4f0:	f300 8154 	bgt.w	801d79c <_dtoa_r+0x73c>
 801d4f4:	4b6b      	ldr	r3, [pc, #428]	; (801d6a4 <_dtoa_r+0x644>)
 801d4f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801d4fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d4fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d500:	2b00      	cmp	r3, #0
 801d502:	f280 80e3 	bge.w	801d6cc <_dtoa_r+0x66c>
 801d506:	9b01      	ldr	r3, [sp, #4]
 801d508:	2b00      	cmp	r3, #0
 801d50a:	f300 80df 	bgt.w	801d6cc <_dtoa_r+0x66c>
 801d50e:	f040 826d 	bne.w	801d9ec <_dtoa_r+0x98c>
 801d512:	4b69      	ldr	r3, [pc, #420]	; (801d6b8 <_dtoa_r+0x658>)
 801d514:	2200      	movs	r2, #0
 801d516:	4640      	mov	r0, r8
 801d518:	4649      	mov	r1, r9
 801d51a:	f7e3 f88d 	bl	8000638 <__aeabi_dmul>
 801d51e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d522:	f7e3 fb0f 	bl	8000b44 <__aeabi_dcmpge>
 801d526:	9e01      	ldr	r6, [sp, #4]
 801d528:	4637      	mov	r7, r6
 801d52a:	2800      	cmp	r0, #0
 801d52c:	f040 8243 	bne.w	801d9b6 <_dtoa_r+0x956>
 801d530:	9d00      	ldr	r5, [sp, #0]
 801d532:	2331      	movs	r3, #49	; 0x31
 801d534:	f805 3b01 	strb.w	r3, [r5], #1
 801d538:	f10a 0a01 	add.w	sl, sl, #1
 801d53c:	e23f      	b.n	801d9be <_dtoa_r+0x95e>
 801d53e:	07f2      	lsls	r2, r6, #31
 801d540:	d505      	bpl.n	801d54e <_dtoa_r+0x4ee>
 801d542:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d546:	f7e3 f877 	bl	8000638 <__aeabi_dmul>
 801d54a:	3501      	adds	r5, #1
 801d54c:	2301      	movs	r3, #1
 801d54e:	1076      	asrs	r6, r6, #1
 801d550:	3708      	adds	r7, #8
 801d552:	e76c      	b.n	801d42e <_dtoa_r+0x3ce>
 801d554:	2502      	movs	r5, #2
 801d556:	e76f      	b.n	801d438 <_dtoa_r+0x3d8>
 801d558:	9b01      	ldr	r3, [sp, #4]
 801d55a:	f8cd a01c 	str.w	sl, [sp, #28]
 801d55e:	930c      	str	r3, [sp, #48]	; 0x30
 801d560:	e78d      	b.n	801d47e <_dtoa_r+0x41e>
 801d562:	9900      	ldr	r1, [sp, #0]
 801d564:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d566:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d568:	4b4e      	ldr	r3, [pc, #312]	; (801d6a4 <_dtoa_r+0x644>)
 801d56a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d56e:	4401      	add	r1, r0
 801d570:	9102      	str	r1, [sp, #8]
 801d572:	9908      	ldr	r1, [sp, #32]
 801d574:	eeb0 8a47 	vmov.f32	s16, s14
 801d578:	eef0 8a67 	vmov.f32	s17, s15
 801d57c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d580:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d584:	2900      	cmp	r1, #0
 801d586:	d045      	beq.n	801d614 <_dtoa_r+0x5b4>
 801d588:	494c      	ldr	r1, [pc, #304]	; (801d6bc <_dtoa_r+0x65c>)
 801d58a:	2000      	movs	r0, #0
 801d58c:	f7e3 f97e 	bl	800088c <__aeabi_ddiv>
 801d590:	ec53 2b18 	vmov	r2, r3, d8
 801d594:	f7e2 fe98 	bl	80002c8 <__aeabi_dsub>
 801d598:	9d00      	ldr	r5, [sp, #0]
 801d59a:	ec41 0b18 	vmov	d8, r0, r1
 801d59e:	4639      	mov	r1, r7
 801d5a0:	4630      	mov	r0, r6
 801d5a2:	f7e3 faf9 	bl	8000b98 <__aeabi_d2iz>
 801d5a6:	900c      	str	r0, [sp, #48]	; 0x30
 801d5a8:	f7e2 ffdc 	bl	8000564 <__aeabi_i2d>
 801d5ac:	4602      	mov	r2, r0
 801d5ae:	460b      	mov	r3, r1
 801d5b0:	4630      	mov	r0, r6
 801d5b2:	4639      	mov	r1, r7
 801d5b4:	f7e2 fe88 	bl	80002c8 <__aeabi_dsub>
 801d5b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d5ba:	3330      	adds	r3, #48	; 0x30
 801d5bc:	f805 3b01 	strb.w	r3, [r5], #1
 801d5c0:	ec53 2b18 	vmov	r2, r3, d8
 801d5c4:	4606      	mov	r6, r0
 801d5c6:	460f      	mov	r7, r1
 801d5c8:	f7e3 faa8 	bl	8000b1c <__aeabi_dcmplt>
 801d5cc:	2800      	cmp	r0, #0
 801d5ce:	d165      	bne.n	801d69c <_dtoa_r+0x63c>
 801d5d0:	4632      	mov	r2, r6
 801d5d2:	463b      	mov	r3, r7
 801d5d4:	4935      	ldr	r1, [pc, #212]	; (801d6ac <_dtoa_r+0x64c>)
 801d5d6:	2000      	movs	r0, #0
 801d5d8:	f7e2 fe76 	bl	80002c8 <__aeabi_dsub>
 801d5dc:	ec53 2b18 	vmov	r2, r3, d8
 801d5e0:	f7e3 fa9c 	bl	8000b1c <__aeabi_dcmplt>
 801d5e4:	2800      	cmp	r0, #0
 801d5e6:	f040 80b9 	bne.w	801d75c <_dtoa_r+0x6fc>
 801d5ea:	9b02      	ldr	r3, [sp, #8]
 801d5ec:	429d      	cmp	r5, r3
 801d5ee:	f43f af75 	beq.w	801d4dc <_dtoa_r+0x47c>
 801d5f2:	4b2f      	ldr	r3, [pc, #188]	; (801d6b0 <_dtoa_r+0x650>)
 801d5f4:	ec51 0b18 	vmov	r0, r1, d8
 801d5f8:	2200      	movs	r2, #0
 801d5fa:	f7e3 f81d 	bl	8000638 <__aeabi_dmul>
 801d5fe:	4b2c      	ldr	r3, [pc, #176]	; (801d6b0 <_dtoa_r+0x650>)
 801d600:	ec41 0b18 	vmov	d8, r0, r1
 801d604:	2200      	movs	r2, #0
 801d606:	4630      	mov	r0, r6
 801d608:	4639      	mov	r1, r7
 801d60a:	f7e3 f815 	bl	8000638 <__aeabi_dmul>
 801d60e:	4606      	mov	r6, r0
 801d610:	460f      	mov	r7, r1
 801d612:	e7c4      	b.n	801d59e <_dtoa_r+0x53e>
 801d614:	ec51 0b17 	vmov	r0, r1, d7
 801d618:	f7e3 f80e 	bl	8000638 <__aeabi_dmul>
 801d61c:	9b02      	ldr	r3, [sp, #8]
 801d61e:	9d00      	ldr	r5, [sp, #0]
 801d620:	930c      	str	r3, [sp, #48]	; 0x30
 801d622:	ec41 0b18 	vmov	d8, r0, r1
 801d626:	4639      	mov	r1, r7
 801d628:	4630      	mov	r0, r6
 801d62a:	f7e3 fab5 	bl	8000b98 <__aeabi_d2iz>
 801d62e:	9011      	str	r0, [sp, #68]	; 0x44
 801d630:	f7e2 ff98 	bl	8000564 <__aeabi_i2d>
 801d634:	4602      	mov	r2, r0
 801d636:	460b      	mov	r3, r1
 801d638:	4630      	mov	r0, r6
 801d63a:	4639      	mov	r1, r7
 801d63c:	f7e2 fe44 	bl	80002c8 <__aeabi_dsub>
 801d640:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d642:	3330      	adds	r3, #48	; 0x30
 801d644:	f805 3b01 	strb.w	r3, [r5], #1
 801d648:	9b02      	ldr	r3, [sp, #8]
 801d64a:	429d      	cmp	r5, r3
 801d64c:	4606      	mov	r6, r0
 801d64e:	460f      	mov	r7, r1
 801d650:	f04f 0200 	mov.w	r2, #0
 801d654:	d134      	bne.n	801d6c0 <_dtoa_r+0x660>
 801d656:	4b19      	ldr	r3, [pc, #100]	; (801d6bc <_dtoa_r+0x65c>)
 801d658:	ec51 0b18 	vmov	r0, r1, d8
 801d65c:	f7e2 fe36 	bl	80002cc <__adddf3>
 801d660:	4602      	mov	r2, r0
 801d662:	460b      	mov	r3, r1
 801d664:	4630      	mov	r0, r6
 801d666:	4639      	mov	r1, r7
 801d668:	f7e3 fa76 	bl	8000b58 <__aeabi_dcmpgt>
 801d66c:	2800      	cmp	r0, #0
 801d66e:	d175      	bne.n	801d75c <_dtoa_r+0x6fc>
 801d670:	ec53 2b18 	vmov	r2, r3, d8
 801d674:	4911      	ldr	r1, [pc, #68]	; (801d6bc <_dtoa_r+0x65c>)
 801d676:	2000      	movs	r0, #0
 801d678:	f7e2 fe26 	bl	80002c8 <__aeabi_dsub>
 801d67c:	4602      	mov	r2, r0
 801d67e:	460b      	mov	r3, r1
 801d680:	4630      	mov	r0, r6
 801d682:	4639      	mov	r1, r7
 801d684:	f7e3 fa4a 	bl	8000b1c <__aeabi_dcmplt>
 801d688:	2800      	cmp	r0, #0
 801d68a:	f43f af27 	beq.w	801d4dc <_dtoa_r+0x47c>
 801d68e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d690:	1e6b      	subs	r3, r5, #1
 801d692:	930c      	str	r3, [sp, #48]	; 0x30
 801d694:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801d698:	2b30      	cmp	r3, #48	; 0x30
 801d69a:	d0f8      	beq.n	801d68e <_dtoa_r+0x62e>
 801d69c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801d6a0:	e04a      	b.n	801d738 <_dtoa_r+0x6d8>
 801d6a2:	bf00      	nop
 801d6a4:	080224e8 	.word	0x080224e8
 801d6a8:	080224c0 	.word	0x080224c0
 801d6ac:	3ff00000 	.word	0x3ff00000
 801d6b0:	40240000 	.word	0x40240000
 801d6b4:	401c0000 	.word	0x401c0000
 801d6b8:	40140000 	.word	0x40140000
 801d6bc:	3fe00000 	.word	0x3fe00000
 801d6c0:	4baf      	ldr	r3, [pc, #700]	; (801d980 <_dtoa_r+0x920>)
 801d6c2:	f7e2 ffb9 	bl	8000638 <__aeabi_dmul>
 801d6c6:	4606      	mov	r6, r0
 801d6c8:	460f      	mov	r7, r1
 801d6ca:	e7ac      	b.n	801d626 <_dtoa_r+0x5c6>
 801d6cc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801d6d0:	9d00      	ldr	r5, [sp, #0]
 801d6d2:	4642      	mov	r2, r8
 801d6d4:	464b      	mov	r3, r9
 801d6d6:	4630      	mov	r0, r6
 801d6d8:	4639      	mov	r1, r7
 801d6da:	f7e3 f8d7 	bl	800088c <__aeabi_ddiv>
 801d6de:	f7e3 fa5b 	bl	8000b98 <__aeabi_d2iz>
 801d6e2:	9002      	str	r0, [sp, #8]
 801d6e4:	f7e2 ff3e 	bl	8000564 <__aeabi_i2d>
 801d6e8:	4642      	mov	r2, r8
 801d6ea:	464b      	mov	r3, r9
 801d6ec:	f7e2 ffa4 	bl	8000638 <__aeabi_dmul>
 801d6f0:	4602      	mov	r2, r0
 801d6f2:	460b      	mov	r3, r1
 801d6f4:	4630      	mov	r0, r6
 801d6f6:	4639      	mov	r1, r7
 801d6f8:	f7e2 fde6 	bl	80002c8 <__aeabi_dsub>
 801d6fc:	9e02      	ldr	r6, [sp, #8]
 801d6fe:	9f01      	ldr	r7, [sp, #4]
 801d700:	3630      	adds	r6, #48	; 0x30
 801d702:	f805 6b01 	strb.w	r6, [r5], #1
 801d706:	9e00      	ldr	r6, [sp, #0]
 801d708:	1bae      	subs	r6, r5, r6
 801d70a:	42b7      	cmp	r7, r6
 801d70c:	4602      	mov	r2, r0
 801d70e:	460b      	mov	r3, r1
 801d710:	d137      	bne.n	801d782 <_dtoa_r+0x722>
 801d712:	f7e2 fddb 	bl	80002cc <__adddf3>
 801d716:	4642      	mov	r2, r8
 801d718:	464b      	mov	r3, r9
 801d71a:	4606      	mov	r6, r0
 801d71c:	460f      	mov	r7, r1
 801d71e:	f7e3 fa1b 	bl	8000b58 <__aeabi_dcmpgt>
 801d722:	b9c8      	cbnz	r0, 801d758 <_dtoa_r+0x6f8>
 801d724:	4642      	mov	r2, r8
 801d726:	464b      	mov	r3, r9
 801d728:	4630      	mov	r0, r6
 801d72a:	4639      	mov	r1, r7
 801d72c:	f7e3 f9ec 	bl	8000b08 <__aeabi_dcmpeq>
 801d730:	b110      	cbz	r0, 801d738 <_dtoa_r+0x6d8>
 801d732:	9b02      	ldr	r3, [sp, #8]
 801d734:	07d9      	lsls	r1, r3, #31
 801d736:	d40f      	bmi.n	801d758 <_dtoa_r+0x6f8>
 801d738:	4620      	mov	r0, r4
 801d73a:	4659      	mov	r1, fp
 801d73c:	f001 f88e 	bl	801e85c <_Bfree>
 801d740:	2300      	movs	r3, #0
 801d742:	702b      	strb	r3, [r5, #0]
 801d744:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d746:	f10a 0001 	add.w	r0, sl, #1
 801d74a:	6018      	str	r0, [r3, #0]
 801d74c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d74e:	2b00      	cmp	r3, #0
 801d750:	f43f acd8 	beq.w	801d104 <_dtoa_r+0xa4>
 801d754:	601d      	str	r5, [r3, #0]
 801d756:	e4d5      	b.n	801d104 <_dtoa_r+0xa4>
 801d758:	f8cd a01c 	str.w	sl, [sp, #28]
 801d75c:	462b      	mov	r3, r5
 801d75e:	461d      	mov	r5, r3
 801d760:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d764:	2a39      	cmp	r2, #57	; 0x39
 801d766:	d108      	bne.n	801d77a <_dtoa_r+0x71a>
 801d768:	9a00      	ldr	r2, [sp, #0]
 801d76a:	429a      	cmp	r2, r3
 801d76c:	d1f7      	bne.n	801d75e <_dtoa_r+0x6fe>
 801d76e:	9a07      	ldr	r2, [sp, #28]
 801d770:	9900      	ldr	r1, [sp, #0]
 801d772:	3201      	adds	r2, #1
 801d774:	9207      	str	r2, [sp, #28]
 801d776:	2230      	movs	r2, #48	; 0x30
 801d778:	700a      	strb	r2, [r1, #0]
 801d77a:	781a      	ldrb	r2, [r3, #0]
 801d77c:	3201      	adds	r2, #1
 801d77e:	701a      	strb	r2, [r3, #0]
 801d780:	e78c      	b.n	801d69c <_dtoa_r+0x63c>
 801d782:	4b7f      	ldr	r3, [pc, #508]	; (801d980 <_dtoa_r+0x920>)
 801d784:	2200      	movs	r2, #0
 801d786:	f7e2 ff57 	bl	8000638 <__aeabi_dmul>
 801d78a:	2200      	movs	r2, #0
 801d78c:	2300      	movs	r3, #0
 801d78e:	4606      	mov	r6, r0
 801d790:	460f      	mov	r7, r1
 801d792:	f7e3 f9b9 	bl	8000b08 <__aeabi_dcmpeq>
 801d796:	2800      	cmp	r0, #0
 801d798:	d09b      	beq.n	801d6d2 <_dtoa_r+0x672>
 801d79a:	e7cd      	b.n	801d738 <_dtoa_r+0x6d8>
 801d79c:	9a08      	ldr	r2, [sp, #32]
 801d79e:	2a00      	cmp	r2, #0
 801d7a0:	f000 80c4 	beq.w	801d92c <_dtoa_r+0x8cc>
 801d7a4:	9a05      	ldr	r2, [sp, #20]
 801d7a6:	2a01      	cmp	r2, #1
 801d7a8:	f300 80a8 	bgt.w	801d8fc <_dtoa_r+0x89c>
 801d7ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d7ae:	2a00      	cmp	r2, #0
 801d7b0:	f000 80a0 	beq.w	801d8f4 <_dtoa_r+0x894>
 801d7b4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801d7b8:	9e06      	ldr	r6, [sp, #24]
 801d7ba:	4645      	mov	r5, r8
 801d7bc:	9a04      	ldr	r2, [sp, #16]
 801d7be:	2101      	movs	r1, #1
 801d7c0:	441a      	add	r2, r3
 801d7c2:	4620      	mov	r0, r4
 801d7c4:	4498      	add	r8, r3
 801d7c6:	9204      	str	r2, [sp, #16]
 801d7c8:	f001 f94e 	bl	801ea68 <__i2b>
 801d7cc:	4607      	mov	r7, r0
 801d7ce:	2d00      	cmp	r5, #0
 801d7d0:	dd0b      	ble.n	801d7ea <_dtoa_r+0x78a>
 801d7d2:	9b04      	ldr	r3, [sp, #16]
 801d7d4:	2b00      	cmp	r3, #0
 801d7d6:	dd08      	ble.n	801d7ea <_dtoa_r+0x78a>
 801d7d8:	42ab      	cmp	r3, r5
 801d7da:	9a04      	ldr	r2, [sp, #16]
 801d7dc:	bfa8      	it	ge
 801d7de:	462b      	movge	r3, r5
 801d7e0:	eba8 0803 	sub.w	r8, r8, r3
 801d7e4:	1aed      	subs	r5, r5, r3
 801d7e6:	1ad3      	subs	r3, r2, r3
 801d7e8:	9304      	str	r3, [sp, #16]
 801d7ea:	9b06      	ldr	r3, [sp, #24]
 801d7ec:	b1fb      	cbz	r3, 801d82e <_dtoa_r+0x7ce>
 801d7ee:	9b08      	ldr	r3, [sp, #32]
 801d7f0:	2b00      	cmp	r3, #0
 801d7f2:	f000 809f 	beq.w	801d934 <_dtoa_r+0x8d4>
 801d7f6:	2e00      	cmp	r6, #0
 801d7f8:	dd11      	ble.n	801d81e <_dtoa_r+0x7be>
 801d7fa:	4639      	mov	r1, r7
 801d7fc:	4632      	mov	r2, r6
 801d7fe:	4620      	mov	r0, r4
 801d800:	f001 f9ee 	bl	801ebe0 <__pow5mult>
 801d804:	465a      	mov	r2, fp
 801d806:	4601      	mov	r1, r0
 801d808:	4607      	mov	r7, r0
 801d80a:	4620      	mov	r0, r4
 801d80c:	f001 f942 	bl	801ea94 <__multiply>
 801d810:	4659      	mov	r1, fp
 801d812:	9007      	str	r0, [sp, #28]
 801d814:	4620      	mov	r0, r4
 801d816:	f001 f821 	bl	801e85c <_Bfree>
 801d81a:	9b07      	ldr	r3, [sp, #28]
 801d81c:	469b      	mov	fp, r3
 801d81e:	9b06      	ldr	r3, [sp, #24]
 801d820:	1b9a      	subs	r2, r3, r6
 801d822:	d004      	beq.n	801d82e <_dtoa_r+0x7ce>
 801d824:	4659      	mov	r1, fp
 801d826:	4620      	mov	r0, r4
 801d828:	f001 f9da 	bl	801ebe0 <__pow5mult>
 801d82c:	4683      	mov	fp, r0
 801d82e:	2101      	movs	r1, #1
 801d830:	4620      	mov	r0, r4
 801d832:	f001 f919 	bl	801ea68 <__i2b>
 801d836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d838:	2b00      	cmp	r3, #0
 801d83a:	4606      	mov	r6, r0
 801d83c:	dd7c      	ble.n	801d938 <_dtoa_r+0x8d8>
 801d83e:	461a      	mov	r2, r3
 801d840:	4601      	mov	r1, r0
 801d842:	4620      	mov	r0, r4
 801d844:	f001 f9cc 	bl	801ebe0 <__pow5mult>
 801d848:	9b05      	ldr	r3, [sp, #20]
 801d84a:	2b01      	cmp	r3, #1
 801d84c:	4606      	mov	r6, r0
 801d84e:	dd76      	ble.n	801d93e <_dtoa_r+0x8de>
 801d850:	2300      	movs	r3, #0
 801d852:	9306      	str	r3, [sp, #24]
 801d854:	6933      	ldr	r3, [r6, #16]
 801d856:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801d85a:	6918      	ldr	r0, [r3, #16]
 801d85c:	f001 f8b4 	bl	801e9c8 <__hi0bits>
 801d860:	f1c0 0020 	rsb	r0, r0, #32
 801d864:	9b04      	ldr	r3, [sp, #16]
 801d866:	4418      	add	r0, r3
 801d868:	f010 001f 	ands.w	r0, r0, #31
 801d86c:	f000 8086 	beq.w	801d97c <_dtoa_r+0x91c>
 801d870:	f1c0 0320 	rsb	r3, r0, #32
 801d874:	2b04      	cmp	r3, #4
 801d876:	dd7f      	ble.n	801d978 <_dtoa_r+0x918>
 801d878:	f1c0 001c 	rsb	r0, r0, #28
 801d87c:	9b04      	ldr	r3, [sp, #16]
 801d87e:	4403      	add	r3, r0
 801d880:	4480      	add	r8, r0
 801d882:	4405      	add	r5, r0
 801d884:	9304      	str	r3, [sp, #16]
 801d886:	f1b8 0f00 	cmp.w	r8, #0
 801d88a:	dd05      	ble.n	801d898 <_dtoa_r+0x838>
 801d88c:	4659      	mov	r1, fp
 801d88e:	4642      	mov	r2, r8
 801d890:	4620      	mov	r0, r4
 801d892:	f001 f9ff 	bl	801ec94 <__lshift>
 801d896:	4683      	mov	fp, r0
 801d898:	9b04      	ldr	r3, [sp, #16]
 801d89a:	2b00      	cmp	r3, #0
 801d89c:	dd05      	ble.n	801d8aa <_dtoa_r+0x84a>
 801d89e:	4631      	mov	r1, r6
 801d8a0:	461a      	mov	r2, r3
 801d8a2:	4620      	mov	r0, r4
 801d8a4:	f001 f9f6 	bl	801ec94 <__lshift>
 801d8a8:	4606      	mov	r6, r0
 801d8aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d8ac:	2b00      	cmp	r3, #0
 801d8ae:	d069      	beq.n	801d984 <_dtoa_r+0x924>
 801d8b0:	4631      	mov	r1, r6
 801d8b2:	4658      	mov	r0, fp
 801d8b4:	f001 fa5a 	bl	801ed6c <__mcmp>
 801d8b8:	2800      	cmp	r0, #0
 801d8ba:	da63      	bge.n	801d984 <_dtoa_r+0x924>
 801d8bc:	2300      	movs	r3, #0
 801d8be:	4659      	mov	r1, fp
 801d8c0:	220a      	movs	r2, #10
 801d8c2:	4620      	mov	r0, r4
 801d8c4:	f000 ffec 	bl	801e8a0 <__multadd>
 801d8c8:	9b08      	ldr	r3, [sp, #32]
 801d8ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d8ce:	4683      	mov	fp, r0
 801d8d0:	2b00      	cmp	r3, #0
 801d8d2:	f000 818f 	beq.w	801dbf4 <_dtoa_r+0xb94>
 801d8d6:	4639      	mov	r1, r7
 801d8d8:	2300      	movs	r3, #0
 801d8da:	220a      	movs	r2, #10
 801d8dc:	4620      	mov	r0, r4
 801d8de:	f000 ffdf 	bl	801e8a0 <__multadd>
 801d8e2:	f1b9 0f00 	cmp.w	r9, #0
 801d8e6:	4607      	mov	r7, r0
 801d8e8:	f300 808e 	bgt.w	801da08 <_dtoa_r+0x9a8>
 801d8ec:	9b05      	ldr	r3, [sp, #20]
 801d8ee:	2b02      	cmp	r3, #2
 801d8f0:	dc50      	bgt.n	801d994 <_dtoa_r+0x934>
 801d8f2:	e089      	b.n	801da08 <_dtoa_r+0x9a8>
 801d8f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d8f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801d8fa:	e75d      	b.n	801d7b8 <_dtoa_r+0x758>
 801d8fc:	9b01      	ldr	r3, [sp, #4]
 801d8fe:	1e5e      	subs	r6, r3, #1
 801d900:	9b06      	ldr	r3, [sp, #24]
 801d902:	42b3      	cmp	r3, r6
 801d904:	bfbf      	itttt	lt
 801d906:	9b06      	ldrlt	r3, [sp, #24]
 801d908:	9606      	strlt	r6, [sp, #24]
 801d90a:	1af2      	sublt	r2, r6, r3
 801d90c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801d90e:	bfb6      	itet	lt
 801d910:	189b      	addlt	r3, r3, r2
 801d912:	1b9e      	subge	r6, r3, r6
 801d914:	930d      	strlt	r3, [sp, #52]	; 0x34
 801d916:	9b01      	ldr	r3, [sp, #4]
 801d918:	bfb8      	it	lt
 801d91a:	2600      	movlt	r6, #0
 801d91c:	2b00      	cmp	r3, #0
 801d91e:	bfb5      	itete	lt
 801d920:	eba8 0503 	sublt.w	r5, r8, r3
 801d924:	9b01      	ldrge	r3, [sp, #4]
 801d926:	2300      	movlt	r3, #0
 801d928:	4645      	movge	r5, r8
 801d92a:	e747      	b.n	801d7bc <_dtoa_r+0x75c>
 801d92c:	9e06      	ldr	r6, [sp, #24]
 801d92e:	9f08      	ldr	r7, [sp, #32]
 801d930:	4645      	mov	r5, r8
 801d932:	e74c      	b.n	801d7ce <_dtoa_r+0x76e>
 801d934:	9a06      	ldr	r2, [sp, #24]
 801d936:	e775      	b.n	801d824 <_dtoa_r+0x7c4>
 801d938:	9b05      	ldr	r3, [sp, #20]
 801d93a:	2b01      	cmp	r3, #1
 801d93c:	dc18      	bgt.n	801d970 <_dtoa_r+0x910>
 801d93e:	9b02      	ldr	r3, [sp, #8]
 801d940:	b9b3      	cbnz	r3, 801d970 <_dtoa_r+0x910>
 801d942:	9b03      	ldr	r3, [sp, #12]
 801d944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d948:	b9a3      	cbnz	r3, 801d974 <_dtoa_r+0x914>
 801d94a:	9b03      	ldr	r3, [sp, #12]
 801d94c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d950:	0d1b      	lsrs	r3, r3, #20
 801d952:	051b      	lsls	r3, r3, #20
 801d954:	b12b      	cbz	r3, 801d962 <_dtoa_r+0x902>
 801d956:	9b04      	ldr	r3, [sp, #16]
 801d958:	3301      	adds	r3, #1
 801d95a:	9304      	str	r3, [sp, #16]
 801d95c:	f108 0801 	add.w	r8, r8, #1
 801d960:	2301      	movs	r3, #1
 801d962:	9306      	str	r3, [sp, #24]
 801d964:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d966:	2b00      	cmp	r3, #0
 801d968:	f47f af74 	bne.w	801d854 <_dtoa_r+0x7f4>
 801d96c:	2001      	movs	r0, #1
 801d96e:	e779      	b.n	801d864 <_dtoa_r+0x804>
 801d970:	2300      	movs	r3, #0
 801d972:	e7f6      	b.n	801d962 <_dtoa_r+0x902>
 801d974:	9b02      	ldr	r3, [sp, #8]
 801d976:	e7f4      	b.n	801d962 <_dtoa_r+0x902>
 801d978:	d085      	beq.n	801d886 <_dtoa_r+0x826>
 801d97a:	4618      	mov	r0, r3
 801d97c:	301c      	adds	r0, #28
 801d97e:	e77d      	b.n	801d87c <_dtoa_r+0x81c>
 801d980:	40240000 	.word	0x40240000
 801d984:	9b01      	ldr	r3, [sp, #4]
 801d986:	2b00      	cmp	r3, #0
 801d988:	dc38      	bgt.n	801d9fc <_dtoa_r+0x99c>
 801d98a:	9b05      	ldr	r3, [sp, #20]
 801d98c:	2b02      	cmp	r3, #2
 801d98e:	dd35      	ble.n	801d9fc <_dtoa_r+0x99c>
 801d990:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801d994:	f1b9 0f00 	cmp.w	r9, #0
 801d998:	d10d      	bne.n	801d9b6 <_dtoa_r+0x956>
 801d99a:	4631      	mov	r1, r6
 801d99c:	464b      	mov	r3, r9
 801d99e:	2205      	movs	r2, #5
 801d9a0:	4620      	mov	r0, r4
 801d9a2:	f000 ff7d 	bl	801e8a0 <__multadd>
 801d9a6:	4601      	mov	r1, r0
 801d9a8:	4606      	mov	r6, r0
 801d9aa:	4658      	mov	r0, fp
 801d9ac:	f001 f9de 	bl	801ed6c <__mcmp>
 801d9b0:	2800      	cmp	r0, #0
 801d9b2:	f73f adbd 	bgt.w	801d530 <_dtoa_r+0x4d0>
 801d9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d9b8:	9d00      	ldr	r5, [sp, #0]
 801d9ba:	ea6f 0a03 	mvn.w	sl, r3
 801d9be:	f04f 0800 	mov.w	r8, #0
 801d9c2:	4631      	mov	r1, r6
 801d9c4:	4620      	mov	r0, r4
 801d9c6:	f000 ff49 	bl	801e85c <_Bfree>
 801d9ca:	2f00      	cmp	r7, #0
 801d9cc:	f43f aeb4 	beq.w	801d738 <_dtoa_r+0x6d8>
 801d9d0:	f1b8 0f00 	cmp.w	r8, #0
 801d9d4:	d005      	beq.n	801d9e2 <_dtoa_r+0x982>
 801d9d6:	45b8      	cmp	r8, r7
 801d9d8:	d003      	beq.n	801d9e2 <_dtoa_r+0x982>
 801d9da:	4641      	mov	r1, r8
 801d9dc:	4620      	mov	r0, r4
 801d9de:	f000 ff3d 	bl	801e85c <_Bfree>
 801d9e2:	4639      	mov	r1, r7
 801d9e4:	4620      	mov	r0, r4
 801d9e6:	f000 ff39 	bl	801e85c <_Bfree>
 801d9ea:	e6a5      	b.n	801d738 <_dtoa_r+0x6d8>
 801d9ec:	2600      	movs	r6, #0
 801d9ee:	4637      	mov	r7, r6
 801d9f0:	e7e1      	b.n	801d9b6 <_dtoa_r+0x956>
 801d9f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801d9f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801d9f8:	4637      	mov	r7, r6
 801d9fa:	e599      	b.n	801d530 <_dtoa_r+0x4d0>
 801d9fc:	9b08      	ldr	r3, [sp, #32]
 801d9fe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801da02:	2b00      	cmp	r3, #0
 801da04:	f000 80fd 	beq.w	801dc02 <_dtoa_r+0xba2>
 801da08:	2d00      	cmp	r5, #0
 801da0a:	dd05      	ble.n	801da18 <_dtoa_r+0x9b8>
 801da0c:	4639      	mov	r1, r7
 801da0e:	462a      	mov	r2, r5
 801da10:	4620      	mov	r0, r4
 801da12:	f001 f93f 	bl	801ec94 <__lshift>
 801da16:	4607      	mov	r7, r0
 801da18:	9b06      	ldr	r3, [sp, #24]
 801da1a:	2b00      	cmp	r3, #0
 801da1c:	d05c      	beq.n	801dad8 <_dtoa_r+0xa78>
 801da1e:	6879      	ldr	r1, [r7, #4]
 801da20:	4620      	mov	r0, r4
 801da22:	f000 fedb 	bl	801e7dc <_Balloc>
 801da26:	4605      	mov	r5, r0
 801da28:	b928      	cbnz	r0, 801da36 <_dtoa_r+0x9d6>
 801da2a:	4b80      	ldr	r3, [pc, #512]	; (801dc2c <_dtoa_r+0xbcc>)
 801da2c:	4602      	mov	r2, r0
 801da2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 801da32:	f7ff bb2e 	b.w	801d092 <_dtoa_r+0x32>
 801da36:	693a      	ldr	r2, [r7, #16]
 801da38:	3202      	adds	r2, #2
 801da3a:	0092      	lsls	r2, r2, #2
 801da3c:	f107 010c 	add.w	r1, r7, #12
 801da40:	300c      	adds	r0, #12
 801da42:	f7fc fb7f 	bl	801a144 <memcpy>
 801da46:	2201      	movs	r2, #1
 801da48:	4629      	mov	r1, r5
 801da4a:	4620      	mov	r0, r4
 801da4c:	f001 f922 	bl	801ec94 <__lshift>
 801da50:	9b00      	ldr	r3, [sp, #0]
 801da52:	3301      	adds	r3, #1
 801da54:	9301      	str	r3, [sp, #4]
 801da56:	9b00      	ldr	r3, [sp, #0]
 801da58:	444b      	add	r3, r9
 801da5a:	9307      	str	r3, [sp, #28]
 801da5c:	9b02      	ldr	r3, [sp, #8]
 801da5e:	f003 0301 	and.w	r3, r3, #1
 801da62:	46b8      	mov	r8, r7
 801da64:	9306      	str	r3, [sp, #24]
 801da66:	4607      	mov	r7, r0
 801da68:	9b01      	ldr	r3, [sp, #4]
 801da6a:	4631      	mov	r1, r6
 801da6c:	3b01      	subs	r3, #1
 801da6e:	4658      	mov	r0, fp
 801da70:	9302      	str	r3, [sp, #8]
 801da72:	f7ff fa69 	bl	801cf48 <quorem>
 801da76:	4603      	mov	r3, r0
 801da78:	3330      	adds	r3, #48	; 0x30
 801da7a:	9004      	str	r0, [sp, #16]
 801da7c:	4641      	mov	r1, r8
 801da7e:	4658      	mov	r0, fp
 801da80:	9308      	str	r3, [sp, #32]
 801da82:	f001 f973 	bl	801ed6c <__mcmp>
 801da86:	463a      	mov	r2, r7
 801da88:	4681      	mov	r9, r0
 801da8a:	4631      	mov	r1, r6
 801da8c:	4620      	mov	r0, r4
 801da8e:	f001 f989 	bl	801eda4 <__mdiff>
 801da92:	68c2      	ldr	r2, [r0, #12]
 801da94:	9b08      	ldr	r3, [sp, #32]
 801da96:	4605      	mov	r5, r0
 801da98:	bb02      	cbnz	r2, 801dadc <_dtoa_r+0xa7c>
 801da9a:	4601      	mov	r1, r0
 801da9c:	4658      	mov	r0, fp
 801da9e:	f001 f965 	bl	801ed6c <__mcmp>
 801daa2:	9b08      	ldr	r3, [sp, #32]
 801daa4:	4602      	mov	r2, r0
 801daa6:	4629      	mov	r1, r5
 801daa8:	4620      	mov	r0, r4
 801daaa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801daae:	f000 fed5 	bl	801e85c <_Bfree>
 801dab2:	9b05      	ldr	r3, [sp, #20]
 801dab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dab6:	9d01      	ldr	r5, [sp, #4]
 801dab8:	ea43 0102 	orr.w	r1, r3, r2
 801dabc:	9b06      	ldr	r3, [sp, #24]
 801dabe:	430b      	orrs	r3, r1
 801dac0:	9b08      	ldr	r3, [sp, #32]
 801dac2:	d10d      	bne.n	801dae0 <_dtoa_r+0xa80>
 801dac4:	2b39      	cmp	r3, #57	; 0x39
 801dac6:	d029      	beq.n	801db1c <_dtoa_r+0xabc>
 801dac8:	f1b9 0f00 	cmp.w	r9, #0
 801dacc:	dd01      	ble.n	801dad2 <_dtoa_r+0xa72>
 801dace:	9b04      	ldr	r3, [sp, #16]
 801dad0:	3331      	adds	r3, #49	; 0x31
 801dad2:	9a02      	ldr	r2, [sp, #8]
 801dad4:	7013      	strb	r3, [r2, #0]
 801dad6:	e774      	b.n	801d9c2 <_dtoa_r+0x962>
 801dad8:	4638      	mov	r0, r7
 801dada:	e7b9      	b.n	801da50 <_dtoa_r+0x9f0>
 801dadc:	2201      	movs	r2, #1
 801dade:	e7e2      	b.n	801daa6 <_dtoa_r+0xa46>
 801dae0:	f1b9 0f00 	cmp.w	r9, #0
 801dae4:	db06      	blt.n	801daf4 <_dtoa_r+0xa94>
 801dae6:	9905      	ldr	r1, [sp, #20]
 801dae8:	ea41 0909 	orr.w	r9, r1, r9
 801daec:	9906      	ldr	r1, [sp, #24]
 801daee:	ea59 0101 	orrs.w	r1, r9, r1
 801daf2:	d120      	bne.n	801db36 <_dtoa_r+0xad6>
 801daf4:	2a00      	cmp	r2, #0
 801daf6:	ddec      	ble.n	801dad2 <_dtoa_r+0xa72>
 801daf8:	4659      	mov	r1, fp
 801dafa:	2201      	movs	r2, #1
 801dafc:	4620      	mov	r0, r4
 801dafe:	9301      	str	r3, [sp, #4]
 801db00:	f001 f8c8 	bl	801ec94 <__lshift>
 801db04:	4631      	mov	r1, r6
 801db06:	4683      	mov	fp, r0
 801db08:	f001 f930 	bl	801ed6c <__mcmp>
 801db0c:	2800      	cmp	r0, #0
 801db0e:	9b01      	ldr	r3, [sp, #4]
 801db10:	dc02      	bgt.n	801db18 <_dtoa_r+0xab8>
 801db12:	d1de      	bne.n	801dad2 <_dtoa_r+0xa72>
 801db14:	07da      	lsls	r2, r3, #31
 801db16:	d5dc      	bpl.n	801dad2 <_dtoa_r+0xa72>
 801db18:	2b39      	cmp	r3, #57	; 0x39
 801db1a:	d1d8      	bne.n	801dace <_dtoa_r+0xa6e>
 801db1c:	9a02      	ldr	r2, [sp, #8]
 801db1e:	2339      	movs	r3, #57	; 0x39
 801db20:	7013      	strb	r3, [r2, #0]
 801db22:	462b      	mov	r3, r5
 801db24:	461d      	mov	r5, r3
 801db26:	3b01      	subs	r3, #1
 801db28:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801db2c:	2a39      	cmp	r2, #57	; 0x39
 801db2e:	d050      	beq.n	801dbd2 <_dtoa_r+0xb72>
 801db30:	3201      	adds	r2, #1
 801db32:	701a      	strb	r2, [r3, #0]
 801db34:	e745      	b.n	801d9c2 <_dtoa_r+0x962>
 801db36:	2a00      	cmp	r2, #0
 801db38:	dd03      	ble.n	801db42 <_dtoa_r+0xae2>
 801db3a:	2b39      	cmp	r3, #57	; 0x39
 801db3c:	d0ee      	beq.n	801db1c <_dtoa_r+0xabc>
 801db3e:	3301      	adds	r3, #1
 801db40:	e7c7      	b.n	801dad2 <_dtoa_r+0xa72>
 801db42:	9a01      	ldr	r2, [sp, #4]
 801db44:	9907      	ldr	r1, [sp, #28]
 801db46:	f802 3c01 	strb.w	r3, [r2, #-1]
 801db4a:	428a      	cmp	r2, r1
 801db4c:	d02a      	beq.n	801dba4 <_dtoa_r+0xb44>
 801db4e:	4659      	mov	r1, fp
 801db50:	2300      	movs	r3, #0
 801db52:	220a      	movs	r2, #10
 801db54:	4620      	mov	r0, r4
 801db56:	f000 fea3 	bl	801e8a0 <__multadd>
 801db5a:	45b8      	cmp	r8, r7
 801db5c:	4683      	mov	fp, r0
 801db5e:	f04f 0300 	mov.w	r3, #0
 801db62:	f04f 020a 	mov.w	r2, #10
 801db66:	4641      	mov	r1, r8
 801db68:	4620      	mov	r0, r4
 801db6a:	d107      	bne.n	801db7c <_dtoa_r+0xb1c>
 801db6c:	f000 fe98 	bl	801e8a0 <__multadd>
 801db70:	4680      	mov	r8, r0
 801db72:	4607      	mov	r7, r0
 801db74:	9b01      	ldr	r3, [sp, #4]
 801db76:	3301      	adds	r3, #1
 801db78:	9301      	str	r3, [sp, #4]
 801db7a:	e775      	b.n	801da68 <_dtoa_r+0xa08>
 801db7c:	f000 fe90 	bl	801e8a0 <__multadd>
 801db80:	4639      	mov	r1, r7
 801db82:	4680      	mov	r8, r0
 801db84:	2300      	movs	r3, #0
 801db86:	220a      	movs	r2, #10
 801db88:	4620      	mov	r0, r4
 801db8a:	f000 fe89 	bl	801e8a0 <__multadd>
 801db8e:	4607      	mov	r7, r0
 801db90:	e7f0      	b.n	801db74 <_dtoa_r+0xb14>
 801db92:	f1b9 0f00 	cmp.w	r9, #0
 801db96:	9a00      	ldr	r2, [sp, #0]
 801db98:	bfcc      	ite	gt
 801db9a:	464d      	movgt	r5, r9
 801db9c:	2501      	movle	r5, #1
 801db9e:	4415      	add	r5, r2
 801dba0:	f04f 0800 	mov.w	r8, #0
 801dba4:	4659      	mov	r1, fp
 801dba6:	2201      	movs	r2, #1
 801dba8:	4620      	mov	r0, r4
 801dbaa:	9301      	str	r3, [sp, #4]
 801dbac:	f001 f872 	bl	801ec94 <__lshift>
 801dbb0:	4631      	mov	r1, r6
 801dbb2:	4683      	mov	fp, r0
 801dbb4:	f001 f8da 	bl	801ed6c <__mcmp>
 801dbb8:	2800      	cmp	r0, #0
 801dbba:	dcb2      	bgt.n	801db22 <_dtoa_r+0xac2>
 801dbbc:	d102      	bne.n	801dbc4 <_dtoa_r+0xb64>
 801dbbe:	9b01      	ldr	r3, [sp, #4]
 801dbc0:	07db      	lsls	r3, r3, #31
 801dbc2:	d4ae      	bmi.n	801db22 <_dtoa_r+0xac2>
 801dbc4:	462b      	mov	r3, r5
 801dbc6:	461d      	mov	r5, r3
 801dbc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801dbcc:	2a30      	cmp	r2, #48	; 0x30
 801dbce:	d0fa      	beq.n	801dbc6 <_dtoa_r+0xb66>
 801dbd0:	e6f7      	b.n	801d9c2 <_dtoa_r+0x962>
 801dbd2:	9a00      	ldr	r2, [sp, #0]
 801dbd4:	429a      	cmp	r2, r3
 801dbd6:	d1a5      	bne.n	801db24 <_dtoa_r+0xac4>
 801dbd8:	f10a 0a01 	add.w	sl, sl, #1
 801dbdc:	2331      	movs	r3, #49	; 0x31
 801dbde:	e779      	b.n	801dad4 <_dtoa_r+0xa74>
 801dbe0:	4b13      	ldr	r3, [pc, #76]	; (801dc30 <_dtoa_r+0xbd0>)
 801dbe2:	f7ff baaf 	b.w	801d144 <_dtoa_r+0xe4>
 801dbe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801dbe8:	2b00      	cmp	r3, #0
 801dbea:	f47f aa86 	bne.w	801d0fa <_dtoa_r+0x9a>
 801dbee:	4b11      	ldr	r3, [pc, #68]	; (801dc34 <_dtoa_r+0xbd4>)
 801dbf0:	f7ff baa8 	b.w	801d144 <_dtoa_r+0xe4>
 801dbf4:	f1b9 0f00 	cmp.w	r9, #0
 801dbf8:	dc03      	bgt.n	801dc02 <_dtoa_r+0xba2>
 801dbfa:	9b05      	ldr	r3, [sp, #20]
 801dbfc:	2b02      	cmp	r3, #2
 801dbfe:	f73f aec9 	bgt.w	801d994 <_dtoa_r+0x934>
 801dc02:	9d00      	ldr	r5, [sp, #0]
 801dc04:	4631      	mov	r1, r6
 801dc06:	4658      	mov	r0, fp
 801dc08:	f7ff f99e 	bl	801cf48 <quorem>
 801dc0c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801dc10:	f805 3b01 	strb.w	r3, [r5], #1
 801dc14:	9a00      	ldr	r2, [sp, #0]
 801dc16:	1aaa      	subs	r2, r5, r2
 801dc18:	4591      	cmp	r9, r2
 801dc1a:	ddba      	ble.n	801db92 <_dtoa_r+0xb32>
 801dc1c:	4659      	mov	r1, fp
 801dc1e:	2300      	movs	r3, #0
 801dc20:	220a      	movs	r2, #10
 801dc22:	4620      	mov	r0, r4
 801dc24:	f000 fe3c 	bl	801e8a0 <__multadd>
 801dc28:	4683      	mov	fp, r0
 801dc2a:	e7eb      	b.n	801dc04 <_dtoa_r+0xba4>
 801dc2c:	080223cd 	.word	0x080223cd
 801dc30:	080225d1 	.word	0x080225d1
 801dc34:	08022361 	.word	0x08022361

0801dc38 <__sflush_r>:
 801dc38:	898a      	ldrh	r2, [r1, #12]
 801dc3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc3e:	4605      	mov	r5, r0
 801dc40:	0710      	lsls	r0, r2, #28
 801dc42:	460c      	mov	r4, r1
 801dc44:	d458      	bmi.n	801dcf8 <__sflush_r+0xc0>
 801dc46:	684b      	ldr	r3, [r1, #4]
 801dc48:	2b00      	cmp	r3, #0
 801dc4a:	dc05      	bgt.n	801dc58 <__sflush_r+0x20>
 801dc4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801dc4e:	2b00      	cmp	r3, #0
 801dc50:	dc02      	bgt.n	801dc58 <__sflush_r+0x20>
 801dc52:	2000      	movs	r0, #0
 801dc54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dc5a:	2e00      	cmp	r6, #0
 801dc5c:	d0f9      	beq.n	801dc52 <__sflush_r+0x1a>
 801dc5e:	2300      	movs	r3, #0
 801dc60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801dc64:	682f      	ldr	r7, [r5, #0]
 801dc66:	602b      	str	r3, [r5, #0]
 801dc68:	d032      	beq.n	801dcd0 <__sflush_r+0x98>
 801dc6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801dc6c:	89a3      	ldrh	r3, [r4, #12]
 801dc6e:	075a      	lsls	r2, r3, #29
 801dc70:	d505      	bpl.n	801dc7e <__sflush_r+0x46>
 801dc72:	6863      	ldr	r3, [r4, #4]
 801dc74:	1ac0      	subs	r0, r0, r3
 801dc76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801dc78:	b10b      	cbz	r3, 801dc7e <__sflush_r+0x46>
 801dc7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dc7c:	1ac0      	subs	r0, r0, r3
 801dc7e:	2300      	movs	r3, #0
 801dc80:	4602      	mov	r2, r0
 801dc82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dc84:	6a21      	ldr	r1, [r4, #32]
 801dc86:	4628      	mov	r0, r5
 801dc88:	47b0      	blx	r6
 801dc8a:	1c43      	adds	r3, r0, #1
 801dc8c:	89a3      	ldrh	r3, [r4, #12]
 801dc8e:	d106      	bne.n	801dc9e <__sflush_r+0x66>
 801dc90:	6829      	ldr	r1, [r5, #0]
 801dc92:	291d      	cmp	r1, #29
 801dc94:	d82c      	bhi.n	801dcf0 <__sflush_r+0xb8>
 801dc96:	4a2a      	ldr	r2, [pc, #168]	; (801dd40 <__sflush_r+0x108>)
 801dc98:	40ca      	lsrs	r2, r1
 801dc9a:	07d6      	lsls	r6, r2, #31
 801dc9c:	d528      	bpl.n	801dcf0 <__sflush_r+0xb8>
 801dc9e:	2200      	movs	r2, #0
 801dca0:	6062      	str	r2, [r4, #4]
 801dca2:	04d9      	lsls	r1, r3, #19
 801dca4:	6922      	ldr	r2, [r4, #16]
 801dca6:	6022      	str	r2, [r4, #0]
 801dca8:	d504      	bpl.n	801dcb4 <__sflush_r+0x7c>
 801dcaa:	1c42      	adds	r2, r0, #1
 801dcac:	d101      	bne.n	801dcb2 <__sflush_r+0x7a>
 801dcae:	682b      	ldr	r3, [r5, #0]
 801dcb0:	b903      	cbnz	r3, 801dcb4 <__sflush_r+0x7c>
 801dcb2:	6560      	str	r0, [r4, #84]	; 0x54
 801dcb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dcb6:	602f      	str	r7, [r5, #0]
 801dcb8:	2900      	cmp	r1, #0
 801dcba:	d0ca      	beq.n	801dc52 <__sflush_r+0x1a>
 801dcbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dcc0:	4299      	cmp	r1, r3
 801dcc2:	d002      	beq.n	801dcca <__sflush_r+0x92>
 801dcc4:	4628      	mov	r0, r5
 801dcc6:	f7fc fceb 	bl	801a6a0 <_free_r>
 801dcca:	2000      	movs	r0, #0
 801dccc:	6360      	str	r0, [r4, #52]	; 0x34
 801dcce:	e7c1      	b.n	801dc54 <__sflush_r+0x1c>
 801dcd0:	6a21      	ldr	r1, [r4, #32]
 801dcd2:	2301      	movs	r3, #1
 801dcd4:	4628      	mov	r0, r5
 801dcd6:	47b0      	blx	r6
 801dcd8:	1c41      	adds	r1, r0, #1
 801dcda:	d1c7      	bne.n	801dc6c <__sflush_r+0x34>
 801dcdc:	682b      	ldr	r3, [r5, #0]
 801dcde:	2b00      	cmp	r3, #0
 801dce0:	d0c4      	beq.n	801dc6c <__sflush_r+0x34>
 801dce2:	2b1d      	cmp	r3, #29
 801dce4:	d001      	beq.n	801dcea <__sflush_r+0xb2>
 801dce6:	2b16      	cmp	r3, #22
 801dce8:	d101      	bne.n	801dcee <__sflush_r+0xb6>
 801dcea:	602f      	str	r7, [r5, #0]
 801dcec:	e7b1      	b.n	801dc52 <__sflush_r+0x1a>
 801dcee:	89a3      	ldrh	r3, [r4, #12]
 801dcf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dcf4:	81a3      	strh	r3, [r4, #12]
 801dcf6:	e7ad      	b.n	801dc54 <__sflush_r+0x1c>
 801dcf8:	690f      	ldr	r7, [r1, #16]
 801dcfa:	2f00      	cmp	r7, #0
 801dcfc:	d0a9      	beq.n	801dc52 <__sflush_r+0x1a>
 801dcfe:	0793      	lsls	r3, r2, #30
 801dd00:	680e      	ldr	r6, [r1, #0]
 801dd02:	bf08      	it	eq
 801dd04:	694b      	ldreq	r3, [r1, #20]
 801dd06:	600f      	str	r7, [r1, #0]
 801dd08:	bf18      	it	ne
 801dd0a:	2300      	movne	r3, #0
 801dd0c:	eba6 0807 	sub.w	r8, r6, r7
 801dd10:	608b      	str	r3, [r1, #8]
 801dd12:	f1b8 0f00 	cmp.w	r8, #0
 801dd16:	dd9c      	ble.n	801dc52 <__sflush_r+0x1a>
 801dd18:	6a21      	ldr	r1, [r4, #32]
 801dd1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dd1c:	4643      	mov	r3, r8
 801dd1e:	463a      	mov	r2, r7
 801dd20:	4628      	mov	r0, r5
 801dd22:	47b0      	blx	r6
 801dd24:	2800      	cmp	r0, #0
 801dd26:	dc06      	bgt.n	801dd36 <__sflush_r+0xfe>
 801dd28:	89a3      	ldrh	r3, [r4, #12]
 801dd2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dd2e:	81a3      	strh	r3, [r4, #12]
 801dd30:	f04f 30ff 	mov.w	r0, #4294967295
 801dd34:	e78e      	b.n	801dc54 <__sflush_r+0x1c>
 801dd36:	4407      	add	r7, r0
 801dd38:	eba8 0800 	sub.w	r8, r8, r0
 801dd3c:	e7e9      	b.n	801dd12 <__sflush_r+0xda>
 801dd3e:	bf00      	nop
 801dd40:	20400001 	.word	0x20400001

0801dd44 <_fflush_r>:
 801dd44:	b538      	push	{r3, r4, r5, lr}
 801dd46:	690b      	ldr	r3, [r1, #16]
 801dd48:	4605      	mov	r5, r0
 801dd4a:	460c      	mov	r4, r1
 801dd4c:	b913      	cbnz	r3, 801dd54 <_fflush_r+0x10>
 801dd4e:	2500      	movs	r5, #0
 801dd50:	4628      	mov	r0, r5
 801dd52:	bd38      	pop	{r3, r4, r5, pc}
 801dd54:	b118      	cbz	r0, 801dd5e <_fflush_r+0x1a>
 801dd56:	6983      	ldr	r3, [r0, #24]
 801dd58:	b90b      	cbnz	r3, 801dd5e <_fflush_r+0x1a>
 801dd5a:	f7fb ffff 	bl	8019d5c <__sinit>
 801dd5e:	4b14      	ldr	r3, [pc, #80]	; (801ddb0 <_fflush_r+0x6c>)
 801dd60:	429c      	cmp	r4, r3
 801dd62:	d11b      	bne.n	801dd9c <_fflush_r+0x58>
 801dd64:	686c      	ldr	r4, [r5, #4]
 801dd66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd6a:	2b00      	cmp	r3, #0
 801dd6c:	d0ef      	beq.n	801dd4e <_fflush_r+0xa>
 801dd6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801dd70:	07d0      	lsls	r0, r2, #31
 801dd72:	d404      	bmi.n	801dd7e <_fflush_r+0x3a>
 801dd74:	0599      	lsls	r1, r3, #22
 801dd76:	d402      	bmi.n	801dd7e <_fflush_r+0x3a>
 801dd78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dd7a:	f7fc f9cf 	bl	801a11c <__retarget_lock_acquire_recursive>
 801dd7e:	4628      	mov	r0, r5
 801dd80:	4621      	mov	r1, r4
 801dd82:	f7ff ff59 	bl	801dc38 <__sflush_r>
 801dd86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dd88:	07da      	lsls	r2, r3, #31
 801dd8a:	4605      	mov	r5, r0
 801dd8c:	d4e0      	bmi.n	801dd50 <_fflush_r+0xc>
 801dd8e:	89a3      	ldrh	r3, [r4, #12]
 801dd90:	059b      	lsls	r3, r3, #22
 801dd92:	d4dd      	bmi.n	801dd50 <_fflush_r+0xc>
 801dd94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dd96:	f7fc f9c3 	bl	801a120 <__retarget_lock_release_recursive>
 801dd9a:	e7d9      	b.n	801dd50 <_fflush_r+0xc>
 801dd9c:	4b05      	ldr	r3, [pc, #20]	; (801ddb4 <_fflush_r+0x70>)
 801dd9e:	429c      	cmp	r4, r3
 801dda0:	d101      	bne.n	801dda6 <_fflush_r+0x62>
 801dda2:	68ac      	ldr	r4, [r5, #8]
 801dda4:	e7df      	b.n	801dd66 <_fflush_r+0x22>
 801dda6:	4b04      	ldr	r3, [pc, #16]	; (801ddb8 <_fflush_r+0x74>)
 801dda8:	429c      	cmp	r4, r3
 801ddaa:	bf08      	it	eq
 801ddac:	68ec      	ldreq	r4, [r5, #12]
 801ddae:	e7da      	b.n	801dd66 <_fflush_r+0x22>
 801ddb0:	08022084 	.word	0x08022084
 801ddb4:	080220a4 	.word	0x080220a4
 801ddb8:	08022064 	.word	0x08022064

0801ddbc <fiprintf>:
 801ddbc:	b40e      	push	{r1, r2, r3}
 801ddbe:	b503      	push	{r0, r1, lr}
 801ddc0:	4601      	mov	r1, r0
 801ddc2:	ab03      	add	r3, sp, #12
 801ddc4:	4805      	ldr	r0, [pc, #20]	; (801dddc <fiprintf+0x20>)
 801ddc6:	f853 2b04 	ldr.w	r2, [r3], #4
 801ddca:	6800      	ldr	r0, [r0, #0]
 801ddcc:	9301      	str	r3, [sp, #4]
 801ddce:	f001 fd4d 	bl	801f86c <_vfiprintf_r>
 801ddd2:	b002      	add	sp, #8
 801ddd4:	f85d eb04 	ldr.w	lr, [sp], #4
 801ddd8:	b003      	add	sp, #12
 801ddda:	4770      	bx	lr
 801dddc:	200001fc 	.word	0x200001fc

0801dde0 <rshift>:
 801dde0:	6903      	ldr	r3, [r0, #16]
 801dde2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801dde6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ddea:	ea4f 1261 	mov.w	r2, r1, asr #5
 801ddee:	f100 0414 	add.w	r4, r0, #20
 801ddf2:	dd45      	ble.n	801de80 <rshift+0xa0>
 801ddf4:	f011 011f 	ands.w	r1, r1, #31
 801ddf8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801ddfc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801de00:	d10c      	bne.n	801de1c <rshift+0x3c>
 801de02:	f100 0710 	add.w	r7, r0, #16
 801de06:	4629      	mov	r1, r5
 801de08:	42b1      	cmp	r1, r6
 801de0a:	d334      	bcc.n	801de76 <rshift+0x96>
 801de0c:	1a9b      	subs	r3, r3, r2
 801de0e:	009b      	lsls	r3, r3, #2
 801de10:	1eea      	subs	r2, r5, #3
 801de12:	4296      	cmp	r6, r2
 801de14:	bf38      	it	cc
 801de16:	2300      	movcc	r3, #0
 801de18:	4423      	add	r3, r4
 801de1a:	e015      	b.n	801de48 <rshift+0x68>
 801de1c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801de20:	f1c1 0820 	rsb	r8, r1, #32
 801de24:	40cf      	lsrs	r7, r1
 801de26:	f105 0e04 	add.w	lr, r5, #4
 801de2a:	46a1      	mov	r9, r4
 801de2c:	4576      	cmp	r6, lr
 801de2e:	46f4      	mov	ip, lr
 801de30:	d815      	bhi.n	801de5e <rshift+0x7e>
 801de32:	1a9b      	subs	r3, r3, r2
 801de34:	009a      	lsls	r2, r3, #2
 801de36:	3a04      	subs	r2, #4
 801de38:	3501      	adds	r5, #1
 801de3a:	42ae      	cmp	r6, r5
 801de3c:	bf38      	it	cc
 801de3e:	2200      	movcc	r2, #0
 801de40:	18a3      	adds	r3, r4, r2
 801de42:	50a7      	str	r7, [r4, r2]
 801de44:	b107      	cbz	r7, 801de48 <rshift+0x68>
 801de46:	3304      	adds	r3, #4
 801de48:	1b1a      	subs	r2, r3, r4
 801de4a:	42a3      	cmp	r3, r4
 801de4c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801de50:	bf08      	it	eq
 801de52:	2300      	moveq	r3, #0
 801de54:	6102      	str	r2, [r0, #16]
 801de56:	bf08      	it	eq
 801de58:	6143      	streq	r3, [r0, #20]
 801de5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801de5e:	f8dc c000 	ldr.w	ip, [ip]
 801de62:	fa0c fc08 	lsl.w	ip, ip, r8
 801de66:	ea4c 0707 	orr.w	r7, ip, r7
 801de6a:	f849 7b04 	str.w	r7, [r9], #4
 801de6e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801de72:	40cf      	lsrs	r7, r1
 801de74:	e7da      	b.n	801de2c <rshift+0x4c>
 801de76:	f851 cb04 	ldr.w	ip, [r1], #4
 801de7a:	f847 cf04 	str.w	ip, [r7, #4]!
 801de7e:	e7c3      	b.n	801de08 <rshift+0x28>
 801de80:	4623      	mov	r3, r4
 801de82:	e7e1      	b.n	801de48 <rshift+0x68>

0801de84 <__hexdig_fun>:
 801de84:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801de88:	2b09      	cmp	r3, #9
 801de8a:	d802      	bhi.n	801de92 <__hexdig_fun+0xe>
 801de8c:	3820      	subs	r0, #32
 801de8e:	b2c0      	uxtb	r0, r0
 801de90:	4770      	bx	lr
 801de92:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801de96:	2b05      	cmp	r3, #5
 801de98:	d801      	bhi.n	801de9e <__hexdig_fun+0x1a>
 801de9a:	3847      	subs	r0, #71	; 0x47
 801de9c:	e7f7      	b.n	801de8e <__hexdig_fun+0xa>
 801de9e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801dea2:	2b05      	cmp	r3, #5
 801dea4:	d801      	bhi.n	801deaa <__hexdig_fun+0x26>
 801dea6:	3827      	subs	r0, #39	; 0x27
 801dea8:	e7f1      	b.n	801de8e <__hexdig_fun+0xa>
 801deaa:	2000      	movs	r0, #0
 801deac:	4770      	bx	lr
	...

0801deb0 <__gethex>:
 801deb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801deb4:	ed2d 8b02 	vpush	{d8}
 801deb8:	b089      	sub	sp, #36	; 0x24
 801deba:	ee08 0a10 	vmov	s16, r0
 801debe:	9304      	str	r3, [sp, #16]
 801dec0:	4bbc      	ldr	r3, [pc, #752]	; (801e1b4 <__gethex+0x304>)
 801dec2:	681b      	ldr	r3, [r3, #0]
 801dec4:	9301      	str	r3, [sp, #4]
 801dec6:	4618      	mov	r0, r3
 801dec8:	468b      	mov	fp, r1
 801deca:	4690      	mov	r8, r2
 801decc:	f7e2 f99a 	bl	8000204 <strlen>
 801ded0:	9b01      	ldr	r3, [sp, #4]
 801ded2:	f8db 2000 	ldr.w	r2, [fp]
 801ded6:	4403      	add	r3, r0
 801ded8:	4682      	mov	sl, r0
 801deda:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801dede:	9305      	str	r3, [sp, #20]
 801dee0:	1c93      	adds	r3, r2, #2
 801dee2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801dee6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801deea:	32fe      	adds	r2, #254	; 0xfe
 801deec:	18d1      	adds	r1, r2, r3
 801deee:	461f      	mov	r7, r3
 801def0:	f813 0b01 	ldrb.w	r0, [r3], #1
 801def4:	9100      	str	r1, [sp, #0]
 801def6:	2830      	cmp	r0, #48	; 0x30
 801def8:	d0f8      	beq.n	801deec <__gethex+0x3c>
 801defa:	f7ff ffc3 	bl	801de84 <__hexdig_fun>
 801defe:	4604      	mov	r4, r0
 801df00:	2800      	cmp	r0, #0
 801df02:	d13a      	bne.n	801df7a <__gethex+0xca>
 801df04:	9901      	ldr	r1, [sp, #4]
 801df06:	4652      	mov	r2, sl
 801df08:	4638      	mov	r0, r7
 801df0a:	f7fd fce5 	bl	801b8d8 <strncmp>
 801df0e:	4605      	mov	r5, r0
 801df10:	2800      	cmp	r0, #0
 801df12:	d168      	bne.n	801dfe6 <__gethex+0x136>
 801df14:	f817 000a 	ldrb.w	r0, [r7, sl]
 801df18:	eb07 060a 	add.w	r6, r7, sl
 801df1c:	f7ff ffb2 	bl	801de84 <__hexdig_fun>
 801df20:	2800      	cmp	r0, #0
 801df22:	d062      	beq.n	801dfea <__gethex+0x13a>
 801df24:	4633      	mov	r3, r6
 801df26:	7818      	ldrb	r0, [r3, #0]
 801df28:	2830      	cmp	r0, #48	; 0x30
 801df2a:	461f      	mov	r7, r3
 801df2c:	f103 0301 	add.w	r3, r3, #1
 801df30:	d0f9      	beq.n	801df26 <__gethex+0x76>
 801df32:	f7ff ffa7 	bl	801de84 <__hexdig_fun>
 801df36:	2301      	movs	r3, #1
 801df38:	fab0 f480 	clz	r4, r0
 801df3c:	0964      	lsrs	r4, r4, #5
 801df3e:	4635      	mov	r5, r6
 801df40:	9300      	str	r3, [sp, #0]
 801df42:	463a      	mov	r2, r7
 801df44:	4616      	mov	r6, r2
 801df46:	3201      	adds	r2, #1
 801df48:	7830      	ldrb	r0, [r6, #0]
 801df4a:	f7ff ff9b 	bl	801de84 <__hexdig_fun>
 801df4e:	2800      	cmp	r0, #0
 801df50:	d1f8      	bne.n	801df44 <__gethex+0x94>
 801df52:	9901      	ldr	r1, [sp, #4]
 801df54:	4652      	mov	r2, sl
 801df56:	4630      	mov	r0, r6
 801df58:	f7fd fcbe 	bl	801b8d8 <strncmp>
 801df5c:	b980      	cbnz	r0, 801df80 <__gethex+0xd0>
 801df5e:	b94d      	cbnz	r5, 801df74 <__gethex+0xc4>
 801df60:	eb06 050a 	add.w	r5, r6, sl
 801df64:	462a      	mov	r2, r5
 801df66:	4616      	mov	r6, r2
 801df68:	3201      	adds	r2, #1
 801df6a:	7830      	ldrb	r0, [r6, #0]
 801df6c:	f7ff ff8a 	bl	801de84 <__hexdig_fun>
 801df70:	2800      	cmp	r0, #0
 801df72:	d1f8      	bne.n	801df66 <__gethex+0xb6>
 801df74:	1bad      	subs	r5, r5, r6
 801df76:	00ad      	lsls	r5, r5, #2
 801df78:	e004      	b.n	801df84 <__gethex+0xd4>
 801df7a:	2400      	movs	r4, #0
 801df7c:	4625      	mov	r5, r4
 801df7e:	e7e0      	b.n	801df42 <__gethex+0x92>
 801df80:	2d00      	cmp	r5, #0
 801df82:	d1f7      	bne.n	801df74 <__gethex+0xc4>
 801df84:	7833      	ldrb	r3, [r6, #0]
 801df86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801df8a:	2b50      	cmp	r3, #80	; 0x50
 801df8c:	d13b      	bne.n	801e006 <__gethex+0x156>
 801df8e:	7873      	ldrb	r3, [r6, #1]
 801df90:	2b2b      	cmp	r3, #43	; 0x2b
 801df92:	d02c      	beq.n	801dfee <__gethex+0x13e>
 801df94:	2b2d      	cmp	r3, #45	; 0x2d
 801df96:	d02e      	beq.n	801dff6 <__gethex+0x146>
 801df98:	1c71      	adds	r1, r6, #1
 801df9a:	f04f 0900 	mov.w	r9, #0
 801df9e:	7808      	ldrb	r0, [r1, #0]
 801dfa0:	f7ff ff70 	bl	801de84 <__hexdig_fun>
 801dfa4:	1e43      	subs	r3, r0, #1
 801dfa6:	b2db      	uxtb	r3, r3
 801dfa8:	2b18      	cmp	r3, #24
 801dfaa:	d82c      	bhi.n	801e006 <__gethex+0x156>
 801dfac:	f1a0 0210 	sub.w	r2, r0, #16
 801dfb0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801dfb4:	f7ff ff66 	bl	801de84 <__hexdig_fun>
 801dfb8:	1e43      	subs	r3, r0, #1
 801dfba:	b2db      	uxtb	r3, r3
 801dfbc:	2b18      	cmp	r3, #24
 801dfbe:	d91d      	bls.n	801dffc <__gethex+0x14c>
 801dfc0:	f1b9 0f00 	cmp.w	r9, #0
 801dfc4:	d000      	beq.n	801dfc8 <__gethex+0x118>
 801dfc6:	4252      	negs	r2, r2
 801dfc8:	4415      	add	r5, r2
 801dfca:	f8cb 1000 	str.w	r1, [fp]
 801dfce:	b1e4      	cbz	r4, 801e00a <__gethex+0x15a>
 801dfd0:	9b00      	ldr	r3, [sp, #0]
 801dfd2:	2b00      	cmp	r3, #0
 801dfd4:	bf14      	ite	ne
 801dfd6:	2700      	movne	r7, #0
 801dfd8:	2706      	moveq	r7, #6
 801dfda:	4638      	mov	r0, r7
 801dfdc:	b009      	add	sp, #36	; 0x24
 801dfde:	ecbd 8b02 	vpop	{d8}
 801dfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfe6:	463e      	mov	r6, r7
 801dfe8:	4625      	mov	r5, r4
 801dfea:	2401      	movs	r4, #1
 801dfec:	e7ca      	b.n	801df84 <__gethex+0xd4>
 801dfee:	f04f 0900 	mov.w	r9, #0
 801dff2:	1cb1      	adds	r1, r6, #2
 801dff4:	e7d3      	b.n	801df9e <__gethex+0xee>
 801dff6:	f04f 0901 	mov.w	r9, #1
 801dffa:	e7fa      	b.n	801dff2 <__gethex+0x142>
 801dffc:	230a      	movs	r3, #10
 801dffe:	fb03 0202 	mla	r2, r3, r2, r0
 801e002:	3a10      	subs	r2, #16
 801e004:	e7d4      	b.n	801dfb0 <__gethex+0x100>
 801e006:	4631      	mov	r1, r6
 801e008:	e7df      	b.n	801dfca <__gethex+0x11a>
 801e00a:	1bf3      	subs	r3, r6, r7
 801e00c:	3b01      	subs	r3, #1
 801e00e:	4621      	mov	r1, r4
 801e010:	2b07      	cmp	r3, #7
 801e012:	dc0b      	bgt.n	801e02c <__gethex+0x17c>
 801e014:	ee18 0a10 	vmov	r0, s16
 801e018:	f000 fbe0 	bl	801e7dc <_Balloc>
 801e01c:	4604      	mov	r4, r0
 801e01e:	b940      	cbnz	r0, 801e032 <__gethex+0x182>
 801e020:	4b65      	ldr	r3, [pc, #404]	; (801e1b8 <__gethex+0x308>)
 801e022:	4602      	mov	r2, r0
 801e024:	21de      	movs	r1, #222	; 0xde
 801e026:	4865      	ldr	r0, [pc, #404]	; (801e1bc <__gethex+0x30c>)
 801e028:	f7fe ff4c 	bl	801cec4 <__assert_func>
 801e02c:	3101      	adds	r1, #1
 801e02e:	105b      	asrs	r3, r3, #1
 801e030:	e7ee      	b.n	801e010 <__gethex+0x160>
 801e032:	f100 0914 	add.w	r9, r0, #20
 801e036:	f04f 0b00 	mov.w	fp, #0
 801e03a:	f1ca 0301 	rsb	r3, sl, #1
 801e03e:	f8cd 9008 	str.w	r9, [sp, #8]
 801e042:	f8cd b000 	str.w	fp, [sp]
 801e046:	9306      	str	r3, [sp, #24]
 801e048:	42b7      	cmp	r7, r6
 801e04a:	d340      	bcc.n	801e0ce <__gethex+0x21e>
 801e04c:	9802      	ldr	r0, [sp, #8]
 801e04e:	9b00      	ldr	r3, [sp, #0]
 801e050:	f840 3b04 	str.w	r3, [r0], #4
 801e054:	eba0 0009 	sub.w	r0, r0, r9
 801e058:	1080      	asrs	r0, r0, #2
 801e05a:	0146      	lsls	r6, r0, #5
 801e05c:	6120      	str	r0, [r4, #16]
 801e05e:	4618      	mov	r0, r3
 801e060:	f000 fcb2 	bl	801e9c8 <__hi0bits>
 801e064:	1a30      	subs	r0, r6, r0
 801e066:	f8d8 6000 	ldr.w	r6, [r8]
 801e06a:	42b0      	cmp	r0, r6
 801e06c:	dd63      	ble.n	801e136 <__gethex+0x286>
 801e06e:	1b87      	subs	r7, r0, r6
 801e070:	4639      	mov	r1, r7
 801e072:	4620      	mov	r0, r4
 801e074:	f001 f84c 	bl	801f110 <__any_on>
 801e078:	4682      	mov	sl, r0
 801e07a:	b1a8      	cbz	r0, 801e0a8 <__gethex+0x1f8>
 801e07c:	1e7b      	subs	r3, r7, #1
 801e07e:	1159      	asrs	r1, r3, #5
 801e080:	f003 021f 	and.w	r2, r3, #31
 801e084:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801e088:	f04f 0a01 	mov.w	sl, #1
 801e08c:	fa0a f202 	lsl.w	r2, sl, r2
 801e090:	420a      	tst	r2, r1
 801e092:	d009      	beq.n	801e0a8 <__gethex+0x1f8>
 801e094:	4553      	cmp	r3, sl
 801e096:	dd05      	ble.n	801e0a4 <__gethex+0x1f4>
 801e098:	1eb9      	subs	r1, r7, #2
 801e09a:	4620      	mov	r0, r4
 801e09c:	f001 f838 	bl	801f110 <__any_on>
 801e0a0:	2800      	cmp	r0, #0
 801e0a2:	d145      	bne.n	801e130 <__gethex+0x280>
 801e0a4:	f04f 0a02 	mov.w	sl, #2
 801e0a8:	4639      	mov	r1, r7
 801e0aa:	4620      	mov	r0, r4
 801e0ac:	f7ff fe98 	bl	801dde0 <rshift>
 801e0b0:	443d      	add	r5, r7
 801e0b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e0b6:	42ab      	cmp	r3, r5
 801e0b8:	da4c      	bge.n	801e154 <__gethex+0x2a4>
 801e0ba:	ee18 0a10 	vmov	r0, s16
 801e0be:	4621      	mov	r1, r4
 801e0c0:	f000 fbcc 	bl	801e85c <_Bfree>
 801e0c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e0c6:	2300      	movs	r3, #0
 801e0c8:	6013      	str	r3, [r2, #0]
 801e0ca:	27a3      	movs	r7, #163	; 0xa3
 801e0cc:	e785      	b.n	801dfda <__gethex+0x12a>
 801e0ce:	1e73      	subs	r3, r6, #1
 801e0d0:	9a05      	ldr	r2, [sp, #20]
 801e0d2:	9303      	str	r3, [sp, #12]
 801e0d4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801e0d8:	4293      	cmp	r3, r2
 801e0da:	d019      	beq.n	801e110 <__gethex+0x260>
 801e0dc:	f1bb 0f20 	cmp.w	fp, #32
 801e0e0:	d107      	bne.n	801e0f2 <__gethex+0x242>
 801e0e2:	9b02      	ldr	r3, [sp, #8]
 801e0e4:	9a00      	ldr	r2, [sp, #0]
 801e0e6:	f843 2b04 	str.w	r2, [r3], #4
 801e0ea:	9302      	str	r3, [sp, #8]
 801e0ec:	2300      	movs	r3, #0
 801e0ee:	9300      	str	r3, [sp, #0]
 801e0f0:	469b      	mov	fp, r3
 801e0f2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801e0f6:	f7ff fec5 	bl	801de84 <__hexdig_fun>
 801e0fa:	9b00      	ldr	r3, [sp, #0]
 801e0fc:	f000 000f 	and.w	r0, r0, #15
 801e100:	fa00 f00b 	lsl.w	r0, r0, fp
 801e104:	4303      	orrs	r3, r0
 801e106:	9300      	str	r3, [sp, #0]
 801e108:	f10b 0b04 	add.w	fp, fp, #4
 801e10c:	9b03      	ldr	r3, [sp, #12]
 801e10e:	e00d      	b.n	801e12c <__gethex+0x27c>
 801e110:	9b03      	ldr	r3, [sp, #12]
 801e112:	9a06      	ldr	r2, [sp, #24]
 801e114:	4413      	add	r3, r2
 801e116:	42bb      	cmp	r3, r7
 801e118:	d3e0      	bcc.n	801e0dc <__gethex+0x22c>
 801e11a:	4618      	mov	r0, r3
 801e11c:	9901      	ldr	r1, [sp, #4]
 801e11e:	9307      	str	r3, [sp, #28]
 801e120:	4652      	mov	r2, sl
 801e122:	f7fd fbd9 	bl	801b8d8 <strncmp>
 801e126:	9b07      	ldr	r3, [sp, #28]
 801e128:	2800      	cmp	r0, #0
 801e12a:	d1d7      	bne.n	801e0dc <__gethex+0x22c>
 801e12c:	461e      	mov	r6, r3
 801e12e:	e78b      	b.n	801e048 <__gethex+0x198>
 801e130:	f04f 0a03 	mov.w	sl, #3
 801e134:	e7b8      	b.n	801e0a8 <__gethex+0x1f8>
 801e136:	da0a      	bge.n	801e14e <__gethex+0x29e>
 801e138:	1a37      	subs	r7, r6, r0
 801e13a:	4621      	mov	r1, r4
 801e13c:	ee18 0a10 	vmov	r0, s16
 801e140:	463a      	mov	r2, r7
 801e142:	f000 fda7 	bl	801ec94 <__lshift>
 801e146:	1bed      	subs	r5, r5, r7
 801e148:	4604      	mov	r4, r0
 801e14a:	f100 0914 	add.w	r9, r0, #20
 801e14e:	f04f 0a00 	mov.w	sl, #0
 801e152:	e7ae      	b.n	801e0b2 <__gethex+0x202>
 801e154:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801e158:	42a8      	cmp	r0, r5
 801e15a:	dd72      	ble.n	801e242 <__gethex+0x392>
 801e15c:	1b45      	subs	r5, r0, r5
 801e15e:	42ae      	cmp	r6, r5
 801e160:	dc36      	bgt.n	801e1d0 <__gethex+0x320>
 801e162:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e166:	2b02      	cmp	r3, #2
 801e168:	d02a      	beq.n	801e1c0 <__gethex+0x310>
 801e16a:	2b03      	cmp	r3, #3
 801e16c:	d02c      	beq.n	801e1c8 <__gethex+0x318>
 801e16e:	2b01      	cmp	r3, #1
 801e170:	d115      	bne.n	801e19e <__gethex+0x2ee>
 801e172:	42ae      	cmp	r6, r5
 801e174:	d113      	bne.n	801e19e <__gethex+0x2ee>
 801e176:	2e01      	cmp	r6, #1
 801e178:	d10b      	bne.n	801e192 <__gethex+0x2e2>
 801e17a:	9a04      	ldr	r2, [sp, #16]
 801e17c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e180:	6013      	str	r3, [r2, #0]
 801e182:	2301      	movs	r3, #1
 801e184:	6123      	str	r3, [r4, #16]
 801e186:	f8c9 3000 	str.w	r3, [r9]
 801e18a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e18c:	2762      	movs	r7, #98	; 0x62
 801e18e:	601c      	str	r4, [r3, #0]
 801e190:	e723      	b.n	801dfda <__gethex+0x12a>
 801e192:	1e71      	subs	r1, r6, #1
 801e194:	4620      	mov	r0, r4
 801e196:	f000 ffbb 	bl	801f110 <__any_on>
 801e19a:	2800      	cmp	r0, #0
 801e19c:	d1ed      	bne.n	801e17a <__gethex+0x2ca>
 801e19e:	ee18 0a10 	vmov	r0, s16
 801e1a2:	4621      	mov	r1, r4
 801e1a4:	f000 fb5a 	bl	801e85c <_Bfree>
 801e1a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e1aa:	2300      	movs	r3, #0
 801e1ac:	6013      	str	r3, [r2, #0]
 801e1ae:	2750      	movs	r7, #80	; 0x50
 801e1b0:	e713      	b.n	801dfda <__gethex+0x12a>
 801e1b2:	bf00      	nop
 801e1b4:	08022448 	.word	0x08022448
 801e1b8:	080223cd 	.word	0x080223cd
 801e1bc:	080223de 	.word	0x080223de
 801e1c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e1c2:	2b00      	cmp	r3, #0
 801e1c4:	d1eb      	bne.n	801e19e <__gethex+0x2ee>
 801e1c6:	e7d8      	b.n	801e17a <__gethex+0x2ca>
 801e1c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e1ca:	2b00      	cmp	r3, #0
 801e1cc:	d1d5      	bne.n	801e17a <__gethex+0x2ca>
 801e1ce:	e7e6      	b.n	801e19e <__gethex+0x2ee>
 801e1d0:	1e6f      	subs	r7, r5, #1
 801e1d2:	f1ba 0f00 	cmp.w	sl, #0
 801e1d6:	d131      	bne.n	801e23c <__gethex+0x38c>
 801e1d8:	b127      	cbz	r7, 801e1e4 <__gethex+0x334>
 801e1da:	4639      	mov	r1, r7
 801e1dc:	4620      	mov	r0, r4
 801e1de:	f000 ff97 	bl	801f110 <__any_on>
 801e1e2:	4682      	mov	sl, r0
 801e1e4:	117b      	asrs	r3, r7, #5
 801e1e6:	2101      	movs	r1, #1
 801e1e8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801e1ec:	f007 071f 	and.w	r7, r7, #31
 801e1f0:	fa01 f707 	lsl.w	r7, r1, r7
 801e1f4:	421f      	tst	r7, r3
 801e1f6:	4629      	mov	r1, r5
 801e1f8:	4620      	mov	r0, r4
 801e1fa:	bf18      	it	ne
 801e1fc:	f04a 0a02 	orrne.w	sl, sl, #2
 801e200:	1b76      	subs	r6, r6, r5
 801e202:	f7ff fded 	bl	801dde0 <rshift>
 801e206:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801e20a:	2702      	movs	r7, #2
 801e20c:	f1ba 0f00 	cmp.w	sl, #0
 801e210:	d048      	beq.n	801e2a4 <__gethex+0x3f4>
 801e212:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e216:	2b02      	cmp	r3, #2
 801e218:	d015      	beq.n	801e246 <__gethex+0x396>
 801e21a:	2b03      	cmp	r3, #3
 801e21c:	d017      	beq.n	801e24e <__gethex+0x39e>
 801e21e:	2b01      	cmp	r3, #1
 801e220:	d109      	bne.n	801e236 <__gethex+0x386>
 801e222:	f01a 0f02 	tst.w	sl, #2
 801e226:	d006      	beq.n	801e236 <__gethex+0x386>
 801e228:	f8d9 0000 	ldr.w	r0, [r9]
 801e22c:	ea4a 0a00 	orr.w	sl, sl, r0
 801e230:	f01a 0f01 	tst.w	sl, #1
 801e234:	d10e      	bne.n	801e254 <__gethex+0x3a4>
 801e236:	f047 0710 	orr.w	r7, r7, #16
 801e23a:	e033      	b.n	801e2a4 <__gethex+0x3f4>
 801e23c:	f04f 0a01 	mov.w	sl, #1
 801e240:	e7d0      	b.n	801e1e4 <__gethex+0x334>
 801e242:	2701      	movs	r7, #1
 801e244:	e7e2      	b.n	801e20c <__gethex+0x35c>
 801e246:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e248:	f1c3 0301 	rsb	r3, r3, #1
 801e24c:	9315      	str	r3, [sp, #84]	; 0x54
 801e24e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e250:	2b00      	cmp	r3, #0
 801e252:	d0f0      	beq.n	801e236 <__gethex+0x386>
 801e254:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801e258:	f104 0314 	add.w	r3, r4, #20
 801e25c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801e260:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801e264:	f04f 0c00 	mov.w	ip, #0
 801e268:	4618      	mov	r0, r3
 801e26a:	f853 2b04 	ldr.w	r2, [r3], #4
 801e26e:	f1b2 3fff 	cmp.w	r2, #4294967295
 801e272:	d01c      	beq.n	801e2ae <__gethex+0x3fe>
 801e274:	3201      	adds	r2, #1
 801e276:	6002      	str	r2, [r0, #0]
 801e278:	2f02      	cmp	r7, #2
 801e27a:	f104 0314 	add.w	r3, r4, #20
 801e27e:	d13f      	bne.n	801e300 <__gethex+0x450>
 801e280:	f8d8 2000 	ldr.w	r2, [r8]
 801e284:	3a01      	subs	r2, #1
 801e286:	42b2      	cmp	r2, r6
 801e288:	d10a      	bne.n	801e2a0 <__gethex+0x3f0>
 801e28a:	1171      	asrs	r1, r6, #5
 801e28c:	2201      	movs	r2, #1
 801e28e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801e292:	f006 061f 	and.w	r6, r6, #31
 801e296:	fa02 f606 	lsl.w	r6, r2, r6
 801e29a:	421e      	tst	r6, r3
 801e29c:	bf18      	it	ne
 801e29e:	4617      	movne	r7, r2
 801e2a0:	f047 0720 	orr.w	r7, r7, #32
 801e2a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e2a6:	601c      	str	r4, [r3, #0]
 801e2a8:	9b04      	ldr	r3, [sp, #16]
 801e2aa:	601d      	str	r5, [r3, #0]
 801e2ac:	e695      	b.n	801dfda <__gethex+0x12a>
 801e2ae:	4299      	cmp	r1, r3
 801e2b0:	f843 cc04 	str.w	ip, [r3, #-4]
 801e2b4:	d8d8      	bhi.n	801e268 <__gethex+0x3b8>
 801e2b6:	68a3      	ldr	r3, [r4, #8]
 801e2b8:	459b      	cmp	fp, r3
 801e2ba:	db19      	blt.n	801e2f0 <__gethex+0x440>
 801e2bc:	6861      	ldr	r1, [r4, #4]
 801e2be:	ee18 0a10 	vmov	r0, s16
 801e2c2:	3101      	adds	r1, #1
 801e2c4:	f000 fa8a 	bl	801e7dc <_Balloc>
 801e2c8:	4681      	mov	r9, r0
 801e2ca:	b918      	cbnz	r0, 801e2d4 <__gethex+0x424>
 801e2cc:	4b1a      	ldr	r3, [pc, #104]	; (801e338 <__gethex+0x488>)
 801e2ce:	4602      	mov	r2, r0
 801e2d0:	2184      	movs	r1, #132	; 0x84
 801e2d2:	e6a8      	b.n	801e026 <__gethex+0x176>
 801e2d4:	6922      	ldr	r2, [r4, #16]
 801e2d6:	3202      	adds	r2, #2
 801e2d8:	f104 010c 	add.w	r1, r4, #12
 801e2dc:	0092      	lsls	r2, r2, #2
 801e2de:	300c      	adds	r0, #12
 801e2e0:	f7fb ff30 	bl	801a144 <memcpy>
 801e2e4:	4621      	mov	r1, r4
 801e2e6:	ee18 0a10 	vmov	r0, s16
 801e2ea:	f000 fab7 	bl	801e85c <_Bfree>
 801e2ee:	464c      	mov	r4, r9
 801e2f0:	6923      	ldr	r3, [r4, #16]
 801e2f2:	1c5a      	adds	r2, r3, #1
 801e2f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e2f8:	6122      	str	r2, [r4, #16]
 801e2fa:	2201      	movs	r2, #1
 801e2fc:	615a      	str	r2, [r3, #20]
 801e2fe:	e7bb      	b.n	801e278 <__gethex+0x3c8>
 801e300:	6922      	ldr	r2, [r4, #16]
 801e302:	455a      	cmp	r2, fp
 801e304:	dd0b      	ble.n	801e31e <__gethex+0x46e>
 801e306:	2101      	movs	r1, #1
 801e308:	4620      	mov	r0, r4
 801e30a:	f7ff fd69 	bl	801dde0 <rshift>
 801e30e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e312:	3501      	adds	r5, #1
 801e314:	42ab      	cmp	r3, r5
 801e316:	f6ff aed0 	blt.w	801e0ba <__gethex+0x20a>
 801e31a:	2701      	movs	r7, #1
 801e31c:	e7c0      	b.n	801e2a0 <__gethex+0x3f0>
 801e31e:	f016 061f 	ands.w	r6, r6, #31
 801e322:	d0fa      	beq.n	801e31a <__gethex+0x46a>
 801e324:	449a      	add	sl, r3
 801e326:	f1c6 0620 	rsb	r6, r6, #32
 801e32a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801e32e:	f000 fb4b 	bl	801e9c8 <__hi0bits>
 801e332:	42b0      	cmp	r0, r6
 801e334:	dbe7      	blt.n	801e306 <__gethex+0x456>
 801e336:	e7f0      	b.n	801e31a <__gethex+0x46a>
 801e338:	080223cd 	.word	0x080223cd

0801e33c <L_shift>:
 801e33c:	f1c2 0208 	rsb	r2, r2, #8
 801e340:	0092      	lsls	r2, r2, #2
 801e342:	b570      	push	{r4, r5, r6, lr}
 801e344:	f1c2 0620 	rsb	r6, r2, #32
 801e348:	6843      	ldr	r3, [r0, #4]
 801e34a:	6804      	ldr	r4, [r0, #0]
 801e34c:	fa03 f506 	lsl.w	r5, r3, r6
 801e350:	432c      	orrs	r4, r5
 801e352:	40d3      	lsrs	r3, r2
 801e354:	6004      	str	r4, [r0, #0]
 801e356:	f840 3f04 	str.w	r3, [r0, #4]!
 801e35a:	4288      	cmp	r0, r1
 801e35c:	d3f4      	bcc.n	801e348 <L_shift+0xc>
 801e35e:	bd70      	pop	{r4, r5, r6, pc}

0801e360 <__match>:
 801e360:	b530      	push	{r4, r5, lr}
 801e362:	6803      	ldr	r3, [r0, #0]
 801e364:	3301      	adds	r3, #1
 801e366:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e36a:	b914      	cbnz	r4, 801e372 <__match+0x12>
 801e36c:	6003      	str	r3, [r0, #0]
 801e36e:	2001      	movs	r0, #1
 801e370:	bd30      	pop	{r4, r5, pc}
 801e372:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e376:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801e37a:	2d19      	cmp	r5, #25
 801e37c:	bf98      	it	ls
 801e37e:	3220      	addls	r2, #32
 801e380:	42a2      	cmp	r2, r4
 801e382:	d0f0      	beq.n	801e366 <__match+0x6>
 801e384:	2000      	movs	r0, #0
 801e386:	e7f3      	b.n	801e370 <__match+0x10>

0801e388 <__hexnan>:
 801e388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e38c:	680b      	ldr	r3, [r1, #0]
 801e38e:	6801      	ldr	r1, [r0, #0]
 801e390:	115e      	asrs	r6, r3, #5
 801e392:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801e396:	f013 031f 	ands.w	r3, r3, #31
 801e39a:	b087      	sub	sp, #28
 801e39c:	bf18      	it	ne
 801e39e:	3604      	addne	r6, #4
 801e3a0:	2500      	movs	r5, #0
 801e3a2:	1f37      	subs	r7, r6, #4
 801e3a4:	4682      	mov	sl, r0
 801e3a6:	4690      	mov	r8, r2
 801e3a8:	9301      	str	r3, [sp, #4]
 801e3aa:	f846 5c04 	str.w	r5, [r6, #-4]
 801e3ae:	46b9      	mov	r9, r7
 801e3b0:	463c      	mov	r4, r7
 801e3b2:	9502      	str	r5, [sp, #8]
 801e3b4:	46ab      	mov	fp, r5
 801e3b6:	784a      	ldrb	r2, [r1, #1]
 801e3b8:	1c4b      	adds	r3, r1, #1
 801e3ba:	9303      	str	r3, [sp, #12]
 801e3bc:	b342      	cbz	r2, 801e410 <__hexnan+0x88>
 801e3be:	4610      	mov	r0, r2
 801e3c0:	9105      	str	r1, [sp, #20]
 801e3c2:	9204      	str	r2, [sp, #16]
 801e3c4:	f7ff fd5e 	bl	801de84 <__hexdig_fun>
 801e3c8:	2800      	cmp	r0, #0
 801e3ca:	d14f      	bne.n	801e46c <__hexnan+0xe4>
 801e3cc:	9a04      	ldr	r2, [sp, #16]
 801e3ce:	9905      	ldr	r1, [sp, #20]
 801e3d0:	2a20      	cmp	r2, #32
 801e3d2:	d818      	bhi.n	801e406 <__hexnan+0x7e>
 801e3d4:	9b02      	ldr	r3, [sp, #8]
 801e3d6:	459b      	cmp	fp, r3
 801e3d8:	dd13      	ble.n	801e402 <__hexnan+0x7a>
 801e3da:	454c      	cmp	r4, r9
 801e3dc:	d206      	bcs.n	801e3ec <__hexnan+0x64>
 801e3de:	2d07      	cmp	r5, #7
 801e3e0:	dc04      	bgt.n	801e3ec <__hexnan+0x64>
 801e3e2:	462a      	mov	r2, r5
 801e3e4:	4649      	mov	r1, r9
 801e3e6:	4620      	mov	r0, r4
 801e3e8:	f7ff ffa8 	bl	801e33c <L_shift>
 801e3ec:	4544      	cmp	r4, r8
 801e3ee:	d950      	bls.n	801e492 <__hexnan+0x10a>
 801e3f0:	2300      	movs	r3, #0
 801e3f2:	f1a4 0904 	sub.w	r9, r4, #4
 801e3f6:	f844 3c04 	str.w	r3, [r4, #-4]
 801e3fa:	f8cd b008 	str.w	fp, [sp, #8]
 801e3fe:	464c      	mov	r4, r9
 801e400:	461d      	mov	r5, r3
 801e402:	9903      	ldr	r1, [sp, #12]
 801e404:	e7d7      	b.n	801e3b6 <__hexnan+0x2e>
 801e406:	2a29      	cmp	r2, #41	; 0x29
 801e408:	d156      	bne.n	801e4b8 <__hexnan+0x130>
 801e40a:	3102      	adds	r1, #2
 801e40c:	f8ca 1000 	str.w	r1, [sl]
 801e410:	f1bb 0f00 	cmp.w	fp, #0
 801e414:	d050      	beq.n	801e4b8 <__hexnan+0x130>
 801e416:	454c      	cmp	r4, r9
 801e418:	d206      	bcs.n	801e428 <__hexnan+0xa0>
 801e41a:	2d07      	cmp	r5, #7
 801e41c:	dc04      	bgt.n	801e428 <__hexnan+0xa0>
 801e41e:	462a      	mov	r2, r5
 801e420:	4649      	mov	r1, r9
 801e422:	4620      	mov	r0, r4
 801e424:	f7ff ff8a 	bl	801e33c <L_shift>
 801e428:	4544      	cmp	r4, r8
 801e42a:	d934      	bls.n	801e496 <__hexnan+0x10e>
 801e42c:	f1a8 0204 	sub.w	r2, r8, #4
 801e430:	4623      	mov	r3, r4
 801e432:	f853 1b04 	ldr.w	r1, [r3], #4
 801e436:	f842 1f04 	str.w	r1, [r2, #4]!
 801e43a:	429f      	cmp	r7, r3
 801e43c:	d2f9      	bcs.n	801e432 <__hexnan+0xaa>
 801e43e:	1b3b      	subs	r3, r7, r4
 801e440:	f023 0303 	bic.w	r3, r3, #3
 801e444:	3304      	adds	r3, #4
 801e446:	3401      	adds	r4, #1
 801e448:	3e03      	subs	r6, #3
 801e44a:	42b4      	cmp	r4, r6
 801e44c:	bf88      	it	hi
 801e44e:	2304      	movhi	r3, #4
 801e450:	4443      	add	r3, r8
 801e452:	2200      	movs	r2, #0
 801e454:	f843 2b04 	str.w	r2, [r3], #4
 801e458:	429f      	cmp	r7, r3
 801e45a:	d2fb      	bcs.n	801e454 <__hexnan+0xcc>
 801e45c:	683b      	ldr	r3, [r7, #0]
 801e45e:	b91b      	cbnz	r3, 801e468 <__hexnan+0xe0>
 801e460:	4547      	cmp	r7, r8
 801e462:	d127      	bne.n	801e4b4 <__hexnan+0x12c>
 801e464:	2301      	movs	r3, #1
 801e466:	603b      	str	r3, [r7, #0]
 801e468:	2005      	movs	r0, #5
 801e46a:	e026      	b.n	801e4ba <__hexnan+0x132>
 801e46c:	3501      	adds	r5, #1
 801e46e:	2d08      	cmp	r5, #8
 801e470:	f10b 0b01 	add.w	fp, fp, #1
 801e474:	dd06      	ble.n	801e484 <__hexnan+0xfc>
 801e476:	4544      	cmp	r4, r8
 801e478:	d9c3      	bls.n	801e402 <__hexnan+0x7a>
 801e47a:	2300      	movs	r3, #0
 801e47c:	f844 3c04 	str.w	r3, [r4, #-4]
 801e480:	2501      	movs	r5, #1
 801e482:	3c04      	subs	r4, #4
 801e484:	6822      	ldr	r2, [r4, #0]
 801e486:	f000 000f 	and.w	r0, r0, #15
 801e48a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801e48e:	6022      	str	r2, [r4, #0]
 801e490:	e7b7      	b.n	801e402 <__hexnan+0x7a>
 801e492:	2508      	movs	r5, #8
 801e494:	e7b5      	b.n	801e402 <__hexnan+0x7a>
 801e496:	9b01      	ldr	r3, [sp, #4]
 801e498:	2b00      	cmp	r3, #0
 801e49a:	d0df      	beq.n	801e45c <__hexnan+0xd4>
 801e49c:	f04f 32ff 	mov.w	r2, #4294967295
 801e4a0:	f1c3 0320 	rsb	r3, r3, #32
 801e4a4:	fa22 f303 	lsr.w	r3, r2, r3
 801e4a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801e4ac:	401a      	ands	r2, r3
 801e4ae:	f846 2c04 	str.w	r2, [r6, #-4]
 801e4b2:	e7d3      	b.n	801e45c <__hexnan+0xd4>
 801e4b4:	3f04      	subs	r7, #4
 801e4b6:	e7d1      	b.n	801e45c <__hexnan+0xd4>
 801e4b8:	2004      	movs	r0, #4
 801e4ba:	b007      	add	sp, #28
 801e4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e4c0 <_findenv_r>:
 801e4c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4c4:	4607      	mov	r7, r0
 801e4c6:	4689      	mov	r9, r1
 801e4c8:	4616      	mov	r6, r2
 801e4ca:	f001 fcdf 	bl	801fe8c <__env_lock>
 801e4ce:	4b18      	ldr	r3, [pc, #96]	; (801e530 <_findenv_r+0x70>)
 801e4d0:	681c      	ldr	r4, [r3, #0]
 801e4d2:	469a      	mov	sl, r3
 801e4d4:	b134      	cbz	r4, 801e4e4 <_findenv_r+0x24>
 801e4d6:	464b      	mov	r3, r9
 801e4d8:	4698      	mov	r8, r3
 801e4da:	f813 1b01 	ldrb.w	r1, [r3], #1
 801e4de:	b139      	cbz	r1, 801e4f0 <_findenv_r+0x30>
 801e4e0:	293d      	cmp	r1, #61	; 0x3d
 801e4e2:	d1f9      	bne.n	801e4d8 <_findenv_r+0x18>
 801e4e4:	4638      	mov	r0, r7
 801e4e6:	f001 fcd7 	bl	801fe98 <__env_unlock>
 801e4ea:	2000      	movs	r0, #0
 801e4ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4f0:	eba8 0809 	sub.w	r8, r8, r9
 801e4f4:	46a3      	mov	fp, r4
 801e4f6:	f854 0b04 	ldr.w	r0, [r4], #4
 801e4fa:	2800      	cmp	r0, #0
 801e4fc:	d0f2      	beq.n	801e4e4 <_findenv_r+0x24>
 801e4fe:	4642      	mov	r2, r8
 801e500:	4649      	mov	r1, r9
 801e502:	f7fd f9e9 	bl	801b8d8 <strncmp>
 801e506:	2800      	cmp	r0, #0
 801e508:	d1f4      	bne.n	801e4f4 <_findenv_r+0x34>
 801e50a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801e50e:	eb03 0508 	add.w	r5, r3, r8
 801e512:	f813 3008 	ldrb.w	r3, [r3, r8]
 801e516:	2b3d      	cmp	r3, #61	; 0x3d
 801e518:	d1ec      	bne.n	801e4f4 <_findenv_r+0x34>
 801e51a:	f8da 3000 	ldr.w	r3, [sl]
 801e51e:	ebab 0303 	sub.w	r3, fp, r3
 801e522:	109b      	asrs	r3, r3, #2
 801e524:	4638      	mov	r0, r7
 801e526:	6033      	str	r3, [r6, #0]
 801e528:	f001 fcb6 	bl	801fe98 <__env_unlock>
 801e52c:	1c68      	adds	r0, r5, #1
 801e52e:	e7dd      	b.n	801e4ec <_findenv_r+0x2c>
 801e530:	20000430 	.word	0x20000430

0801e534 <_getenv_r>:
 801e534:	b507      	push	{r0, r1, r2, lr}
 801e536:	aa01      	add	r2, sp, #4
 801e538:	f7ff ffc2 	bl	801e4c0 <_findenv_r>
 801e53c:	b003      	add	sp, #12
 801e53e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801e544 <__gettzinfo>:
 801e544:	4800      	ldr	r0, [pc, #0]	; (801e548 <__gettzinfo+0x4>)
 801e546:	4770      	bx	lr
 801e548:	20000268 	.word	0x20000268

0801e54c <gmtime_r>:
 801e54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e550:	e9d0 6700 	ldrd	r6, r7, [r0]
 801e554:	460c      	mov	r4, r1
 801e556:	4a51      	ldr	r2, [pc, #324]	; (801e69c <gmtime_r+0x150>)
 801e558:	2300      	movs	r3, #0
 801e55a:	4630      	mov	r0, r6
 801e55c:	4639      	mov	r1, r7
 801e55e:	f7e2 fbb3 	bl	8000cc8 <__aeabi_ldivmod>
 801e562:	4639      	mov	r1, r7
 801e564:	4605      	mov	r5, r0
 801e566:	4a4d      	ldr	r2, [pc, #308]	; (801e69c <gmtime_r+0x150>)
 801e568:	4630      	mov	r0, r6
 801e56a:	2300      	movs	r3, #0
 801e56c:	f7e2 fbac 	bl	8000cc8 <__aeabi_ldivmod>
 801e570:	2a00      	cmp	r2, #0
 801e572:	bfbc      	itt	lt
 801e574:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 801e578:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 801e57c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801e580:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 801e584:	fbb2 f3f1 	udiv	r3, r2, r1
 801e588:	fb01 2213 	mls	r2, r1, r3, r2
 801e58c:	f04f 013c 	mov.w	r1, #60	; 0x3c
 801e590:	bfac      	ite	ge
 801e592:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 801e596:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 801e59a:	60a3      	str	r3, [r4, #8]
 801e59c:	fbb2 f3f1 	udiv	r3, r2, r1
 801e5a0:	fb01 2213 	mls	r2, r1, r3, r2
 801e5a4:	6063      	str	r3, [r4, #4]
 801e5a6:	6022      	str	r2, [r4, #0]
 801e5a8:	1cc3      	adds	r3, r0, #3
 801e5aa:	2207      	movs	r2, #7
 801e5ac:	fb93 f2f2 	sdiv	r2, r3, r2
 801e5b0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801e5b4:	1a9b      	subs	r3, r3, r2
 801e5b6:	bf48      	it	mi
 801e5b8:	3307      	addmi	r3, #7
 801e5ba:	2800      	cmp	r0, #0
 801e5bc:	61a3      	str	r3, [r4, #24]
 801e5be:	bfb8      	it	lt
 801e5c0:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 801e5c4:	4936      	ldr	r1, [pc, #216]	; (801e6a0 <gmtime_r+0x154>)
 801e5c6:	bfae      	itee	ge
 801e5c8:	fb90 f1f1 	sdivge	r1, r0, r1
 801e5cc:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 801e5d0:	fb93 f1f1 	sdivlt	r1, r3, r1
 801e5d4:	4b33      	ldr	r3, [pc, #204]	; (801e6a4 <gmtime_r+0x158>)
 801e5d6:	fb03 0001 	mla	r0, r3, r1, r0
 801e5da:	f648 62ac 	movw	r2, #36524	; 0x8eac
 801e5de:	fbb0 f2f2 	udiv	r2, r0, r2
 801e5e2:	4402      	add	r2, r0
 801e5e4:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 801e5e8:	fbb0 f3fc 	udiv	r3, r0, ip
 801e5ec:	1ad2      	subs	r2, r2, r3
 801e5ee:	f240 176d 	movw	r7, #365	; 0x16d
 801e5f2:	4b2d      	ldr	r3, [pc, #180]	; (801e6a8 <gmtime_r+0x15c>)
 801e5f4:	fbb0 f3f3 	udiv	r3, r0, r3
 801e5f8:	2664      	movs	r6, #100	; 0x64
 801e5fa:	1ad3      	subs	r3, r2, r3
 801e5fc:	fbb3 f5f7 	udiv	r5, r3, r7
 801e600:	fbb3 f3fc 	udiv	r3, r3, ip
 801e604:	fbb5 f2f6 	udiv	r2, r5, r6
 801e608:	1ad3      	subs	r3, r2, r3
 801e60a:	4403      	add	r3, r0
 801e60c:	fb07 3315 	mls	r3, r7, r5, r3
 801e610:	2099      	movs	r0, #153	; 0x99
 801e612:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801e616:	f10c 0c02 	add.w	ip, ip, #2
 801e61a:	f103 0e01 	add.w	lr, r3, #1
 801e61e:	fbbc f7f0 	udiv	r7, ip, r0
 801e622:	4378      	muls	r0, r7
 801e624:	3002      	adds	r0, #2
 801e626:	f04f 0805 	mov.w	r8, #5
 801e62a:	fbb0 f0f8 	udiv	r0, r0, r8
 801e62e:	ebae 0000 	sub.w	r0, lr, r0
 801e632:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 801e636:	45f4      	cmp	ip, lr
 801e638:	bf94      	ite	ls
 801e63a:	f04f 0c02 	movls.w	ip, #2
 801e63e:	f06f 0c09 	mvnhi.w	ip, #9
 801e642:	4467      	add	r7, ip
 801e644:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 801e648:	fb0c 5101 	mla	r1, ip, r1, r5
 801e64c:	2f01      	cmp	r7, #1
 801e64e:	bf98      	it	ls
 801e650:	3101      	addls	r1, #1
 801e652:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 801e656:	d30c      	bcc.n	801e672 <gmtime_r+0x126>
 801e658:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801e65c:	61e3      	str	r3, [r4, #28]
 801e65e:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 801e662:	2300      	movs	r3, #0
 801e664:	60e0      	str	r0, [r4, #12]
 801e666:	e9c4 7104 	strd	r7, r1, [r4, #16]
 801e66a:	6223      	str	r3, [r4, #32]
 801e66c:	4620      	mov	r0, r4
 801e66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e672:	f015 0f03 	tst.w	r5, #3
 801e676:	d102      	bne.n	801e67e <gmtime_r+0x132>
 801e678:	fb06 5212 	mls	r2, r6, r2, r5
 801e67c:	b95a      	cbnz	r2, 801e696 <gmtime_r+0x14a>
 801e67e:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801e682:	fbb5 f2f6 	udiv	r2, r5, r6
 801e686:	fb06 5212 	mls	r2, r6, r2, r5
 801e68a:	fab2 f282 	clz	r2, r2
 801e68e:	0952      	lsrs	r2, r2, #5
 801e690:	333b      	adds	r3, #59	; 0x3b
 801e692:	4413      	add	r3, r2
 801e694:	e7e2      	b.n	801e65c <gmtime_r+0x110>
 801e696:	2201      	movs	r2, #1
 801e698:	e7fa      	b.n	801e690 <gmtime_r+0x144>
 801e69a:	bf00      	nop
 801e69c:	00015180 	.word	0x00015180
 801e6a0:	00023ab1 	.word	0x00023ab1
 801e6a4:	fffdc54f 	.word	0xfffdc54f
 801e6a8:	00023ab0 	.word	0x00023ab0

0801e6ac <_localeconv_r>:
 801e6ac:	4800      	ldr	r0, [pc, #0]	; (801e6b0 <_localeconv_r+0x4>)
 801e6ae:	4770      	bx	lr
 801e6b0:	200003b4 	.word	0x200003b4

0801e6b4 <_lseek_r>:
 801e6b4:	b538      	push	{r3, r4, r5, lr}
 801e6b6:	4d07      	ldr	r5, [pc, #28]	; (801e6d4 <_lseek_r+0x20>)
 801e6b8:	4604      	mov	r4, r0
 801e6ba:	4608      	mov	r0, r1
 801e6bc:	4611      	mov	r1, r2
 801e6be:	2200      	movs	r2, #0
 801e6c0:	602a      	str	r2, [r5, #0]
 801e6c2:	461a      	mov	r2, r3
 801e6c4:	f001 fc40 	bl	801ff48 <_lseek>
 801e6c8:	1c43      	adds	r3, r0, #1
 801e6ca:	d102      	bne.n	801e6d2 <_lseek_r+0x1e>
 801e6cc:	682b      	ldr	r3, [r5, #0]
 801e6ce:	b103      	cbz	r3, 801e6d2 <_lseek_r+0x1e>
 801e6d0:	6023      	str	r3, [r4, #0]
 801e6d2:	bd38      	pop	{r3, r4, r5, pc}
 801e6d4:	20008d5c 	.word	0x20008d5c

0801e6d8 <__swhatbuf_r>:
 801e6d8:	b570      	push	{r4, r5, r6, lr}
 801e6da:	460e      	mov	r6, r1
 801e6dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e6e0:	2900      	cmp	r1, #0
 801e6e2:	b096      	sub	sp, #88	; 0x58
 801e6e4:	4614      	mov	r4, r2
 801e6e6:	461d      	mov	r5, r3
 801e6e8:	da07      	bge.n	801e6fa <__swhatbuf_r+0x22>
 801e6ea:	2300      	movs	r3, #0
 801e6ec:	602b      	str	r3, [r5, #0]
 801e6ee:	89b3      	ldrh	r3, [r6, #12]
 801e6f0:	061a      	lsls	r2, r3, #24
 801e6f2:	d410      	bmi.n	801e716 <__swhatbuf_r+0x3e>
 801e6f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e6f8:	e00e      	b.n	801e718 <__swhatbuf_r+0x40>
 801e6fa:	466a      	mov	r2, sp
 801e6fc:	f001 fbd2 	bl	801fea4 <_fstat_r>
 801e700:	2800      	cmp	r0, #0
 801e702:	dbf2      	blt.n	801e6ea <__swhatbuf_r+0x12>
 801e704:	9a01      	ldr	r2, [sp, #4]
 801e706:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e70a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e70e:	425a      	negs	r2, r3
 801e710:	415a      	adcs	r2, r3
 801e712:	602a      	str	r2, [r5, #0]
 801e714:	e7ee      	b.n	801e6f4 <__swhatbuf_r+0x1c>
 801e716:	2340      	movs	r3, #64	; 0x40
 801e718:	2000      	movs	r0, #0
 801e71a:	6023      	str	r3, [r4, #0]
 801e71c:	b016      	add	sp, #88	; 0x58
 801e71e:	bd70      	pop	{r4, r5, r6, pc}

0801e720 <__smakebuf_r>:
 801e720:	898b      	ldrh	r3, [r1, #12]
 801e722:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e724:	079d      	lsls	r5, r3, #30
 801e726:	4606      	mov	r6, r0
 801e728:	460c      	mov	r4, r1
 801e72a:	d507      	bpl.n	801e73c <__smakebuf_r+0x1c>
 801e72c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e730:	6023      	str	r3, [r4, #0]
 801e732:	6123      	str	r3, [r4, #16]
 801e734:	2301      	movs	r3, #1
 801e736:	6163      	str	r3, [r4, #20]
 801e738:	b002      	add	sp, #8
 801e73a:	bd70      	pop	{r4, r5, r6, pc}
 801e73c:	ab01      	add	r3, sp, #4
 801e73e:	466a      	mov	r2, sp
 801e740:	f7ff ffca 	bl	801e6d8 <__swhatbuf_r>
 801e744:	9900      	ldr	r1, [sp, #0]
 801e746:	4605      	mov	r5, r0
 801e748:	4630      	mov	r0, r6
 801e74a:	f7fb fff9 	bl	801a740 <_malloc_r>
 801e74e:	b948      	cbnz	r0, 801e764 <__smakebuf_r+0x44>
 801e750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e754:	059a      	lsls	r2, r3, #22
 801e756:	d4ef      	bmi.n	801e738 <__smakebuf_r+0x18>
 801e758:	f023 0303 	bic.w	r3, r3, #3
 801e75c:	f043 0302 	orr.w	r3, r3, #2
 801e760:	81a3      	strh	r3, [r4, #12]
 801e762:	e7e3      	b.n	801e72c <__smakebuf_r+0xc>
 801e764:	4b0d      	ldr	r3, [pc, #52]	; (801e79c <__smakebuf_r+0x7c>)
 801e766:	62b3      	str	r3, [r6, #40]	; 0x28
 801e768:	89a3      	ldrh	r3, [r4, #12]
 801e76a:	6020      	str	r0, [r4, #0]
 801e76c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e770:	81a3      	strh	r3, [r4, #12]
 801e772:	9b00      	ldr	r3, [sp, #0]
 801e774:	6163      	str	r3, [r4, #20]
 801e776:	9b01      	ldr	r3, [sp, #4]
 801e778:	6120      	str	r0, [r4, #16]
 801e77a:	b15b      	cbz	r3, 801e794 <__smakebuf_r+0x74>
 801e77c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e780:	4630      	mov	r0, r6
 801e782:	f001 fba1 	bl	801fec8 <_isatty_r>
 801e786:	b128      	cbz	r0, 801e794 <__smakebuf_r+0x74>
 801e788:	89a3      	ldrh	r3, [r4, #12]
 801e78a:	f023 0303 	bic.w	r3, r3, #3
 801e78e:	f043 0301 	orr.w	r3, r3, #1
 801e792:	81a3      	strh	r3, [r4, #12]
 801e794:	89a0      	ldrh	r0, [r4, #12]
 801e796:	4305      	orrs	r5, r0
 801e798:	81a5      	strh	r5, [r4, #12]
 801e79a:	e7cd      	b.n	801e738 <__smakebuf_r+0x18>
 801e79c:	08019cf5 	.word	0x08019cf5

0801e7a0 <__ascii_mbtowc>:
 801e7a0:	b082      	sub	sp, #8
 801e7a2:	b901      	cbnz	r1, 801e7a6 <__ascii_mbtowc+0x6>
 801e7a4:	a901      	add	r1, sp, #4
 801e7a6:	b142      	cbz	r2, 801e7ba <__ascii_mbtowc+0x1a>
 801e7a8:	b14b      	cbz	r3, 801e7be <__ascii_mbtowc+0x1e>
 801e7aa:	7813      	ldrb	r3, [r2, #0]
 801e7ac:	600b      	str	r3, [r1, #0]
 801e7ae:	7812      	ldrb	r2, [r2, #0]
 801e7b0:	1e10      	subs	r0, r2, #0
 801e7b2:	bf18      	it	ne
 801e7b4:	2001      	movne	r0, #1
 801e7b6:	b002      	add	sp, #8
 801e7b8:	4770      	bx	lr
 801e7ba:	4610      	mov	r0, r2
 801e7bc:	e7fb      	b.n	801e7b6 <__ascii_mbtowc+0x16>
 801e7be:	f06f 0001 	mvn.w	r0, #1
 801e7c2:	e7f8      	b.n	801e7b6 <__ascii_mbtowc+0x16>

0801e7c4 <__malloc_lock>:
 801e7c4:	4801      	ldr	r0, [pc, #4]	; (801e7cc <__malloc_lock+0x8>)
 801e7c6:	f7fb bca9 	b.w	801a11c <__retarget_lock_acquire_recursive>
 801e7ca:	bf00      	nop
 801e7cc:	20008d54 	.word	0x20008d54

0801e7d0 <__malloc_unlock>:
 801e7d0:	4801      	ldr	r0, [pc, #4]	; (801e7d8 <__malloc_unlock+0x8>)
 801e7d2:	f7fb bca5 	b.w	801a120 <__retarget_lock_release_recursive>
 801e7d6:	bf00      	nop
 801e7d8:	20008d54 	.word	0x20008d54

0801e7dc <_Balloc>:
 801e7dc:	b570      	push	{r4, r5, r6, lr}
 801e7de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e7e0:	4604      	mov	r4, r0
 801e7e2:	460d      	mov	r5, r1
 801e7e4:	b976      	cbnz	r6, 801e804 <_Balloc+0x28>
 801e7e6:	2010      	movs	r0, #16
 801e7e8:	f7fb fc9c 	bl	801a124 <malloc>
 801e7ec:	4602      	mov	r2, r0
 801e7ee:	6260      	str	r0, [r4, #36]	; 0x24
 801e7f0:	b920      	cbnz	r0, 801e7fc <_Balloc+0x20>
 801e7f2:	4b18      	ldr	r3, [pc, #96]	; (801e854 <_Balloc+0x78>)
 801e7f4:	4818      	ldr	r0, [pc, #96]	; (801e858 <_Balloc+0x7c>)
 801e7f6:	2166      	movs	r1, #102	; 0x66
 801e7f8:	f7fe fb64 	bl	801cec4 <__assert_func>
 801e7fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e800:	6006      	str	r6, [r0, #0]
 801e802:	60c6      	str	r6, [r0, #12]
 801e804:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801e806:	68f3      	ldr	r3, [r6, #12]
 801e808:	b183      	cbz	r3, 801e82c <_Balloc+0x50>
 801e80a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e80c:	68db      	ldr	r3, [r3, #12]
 801e80e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e812:	b9b8      	cbnz	r0, 801e844 <_Balloc+0x68>
 801e814:	2101      	movs	r1, #1
 801e816:	fa01 f605 	lsl.w	r6, r1, r5
 801e81a:	1d72      	adds	r2, r6, #5
 801e81c:	0092      	lsls	r2, r2, #2
 801e81e:	4620      	mov	r0, r4
 801e820:	f000 fc97 	bl	801f152 <_calloc_r>
 801e824:	b160      	cbz	r0, 801e840 <_Balloc+0x64>
 801e826:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e82a:	e00e      	b.n	801e84a <_Balloc+0x6e>
 801e82c:	2221      	movs	r2, #33	; 0x21
 801e82e:	2104      	movs	r1, #4
 801e830:	4620      	mov	r0, r4
 801e832:	f000 fc8e 	bl	801f152 <_calloc_r>
 801e836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e838:	60f0      	str	r0, [r6, #12]
 801e83a:	68db      	ldr	r3, [r3, #12]
 801e83c:	2b00      	cmp	r3, #0
 801e83e:	d1e4      	bne.n	801e80a <_Balloc+0x2e>
 801e840:	2000      	movs	r0, #0
 801e842:	bd70      	pop	{r4, r5, r6, pc}
 801e844:	6802      	ldr	r2, [r0, #0]
 801e846:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e84a:	2300      	movs	r3, #0
 801e84c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e850:	e7f7      	b.n	801e842 <_Balloc+0x66>
 801e852:	bf00      	nop
 801e854:	080220c8 	.word	0x080220c8
 801e858:	0802245c 	.word	0x0802245c

0801e85c <_Bfree>:
 801e85c:	b570      	push	{r4, r5, r6, lr}
 801e85e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e860:	4605      	mov	r5, r0
 801e862:	460c      	mov	r4, r1
 801e864:	b976      	cbnz	r6, 801e884 <_Bfree+0x28>
 801e866:	2010      	movs	r0, #16
 801e868:	f7fb fc5c 	bl	801a124 <malloc>
 801e86c:	4602      	mov	r2, r0
 801e86e:	6268      	str	r0, [r5, #36]	; 0x24
 801e870:	b920      	cbnz	r0, 801e87c <_Bfree+0x20>
 801e872:	4b09      	ldr	r3, [pc, #36]	; (801e898 <_Bfree+0x3c>)
 801e874:	4809      	ldr	r0, [pc, #36]	; (801e89c <_Bfree+0x40>)
 801e876:	218a      	movs	r1, #138	; 0x8a
 801e878:	f7fe fb24 	bl	801cec4 <__assert_func>
 801e87c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e880:	6006      	str	r6, [r0, #0]
 801e882:	60c6      	str	r6, [r0, #12]
 801e884:	b13c      	cbz	r4, 801e896 <_Bfree+0x3a>
 801e886:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801e888:	6862      	ldr	r2, [r4, #4]
 801e88a:	68db      	ldr	r3, [r3, #12]
 801e88c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e890:	6021      	str	r1, [r4, #0]
 801e892:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e896:	bd70      	pop	{r4, r5, r6, pc}
 801e898:	080220c8 	.word	0x080220c8
 801e89c:	0802245c 	.word	0x0802245c

0801e8a0 <__multadd>:
 801e8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e8a4:	690e      	ldr	r6, [r1, #16]
 801e8a6:	4607      	mov	r7, r0
 801e8a8:	4698      	mov	r8, r3
 801e8aa:	460c      	mov	r4, r1
 801e8ac:	f101 0014 	add.w	r0, r1, #20
 801e8b0:	2300      	movs	r3, #0
 801e8b2:	6805      	ldr	r5, [r0, #0]
 801e8b4:	b2a9      	uxth	r1, r5
 801e8b6:	fb02 8101 	mla	r1, r2, r1, r8
 801e8ba:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801e8be:	0c2d      	lsrs	r5, r5, #16
 801e8c0:	fb02 c505 	mla	r5, r2, r5, ip
 801e8c4:	b289      	uxth	r1, r1
 801e8c6:	3301      	adds	r3, #1
 801e8c8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801e8cc:	429e      	cmp	r6, r3
 801e8ce:	f840 1b04 	str.w	r1, [r0], #4
 801e8d2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801e8d6:	dcec      	bgt.n	801e8b2 <__multadd+0x12>
 801e8d8:	f1b8 0f00 	cmp.w	r8, #0
 801e8dc:	d022      	beq.n	801e924 <__multadd+0x84>
 801e8de:	68a3      	ldr	r3, [r4, #8]
 801e8e0:	42b3      	cmp	r3, r6
 801e8e2:	dc19      	bgt.n	801e918 <__multadd+0x78>
 801e8e4:	6861      	ldr	r1, [r4, #4]
 801e8e6:	4638      	mov	r0, r7
 801e8e8:	3101      	adds	r1, #1
 801e8ea:	f7ff ff77 	bl	801e7dc <_Balloc>
 801e8ee:	4605      	mov	r5, r0
 801e8f0:	b928      	cbnz	r0, 801e8fe <__multadd+0x5e>
 801e8f2:	4602      	mov	r2, r0
 801e8f4:	4b0d      	ldr	r3, [pc, #52]	; (801e92c <__multadd+0x8c>)
 801e8f6:	480e      	ldr	r0, [pc, #56]	; (801e930 <__multadd+0x90>)
 801e8f8:	21b5      	movs	r1, #181	; 0xb5
 801e8fa:	f7fe fae3 	bl	801cec4 <__assert_func>
 801e8fe:	6922      	ldr	r2, [r4, #16]
 801e900:	3202      	adds	r2, #2
 801e902:	f104 010c 	add.w	r1, r4, #12
 801e906:	0092      	lsls	r2, r2, #2
 801e908:	300c      	adds	r0, #12
 801e90a:	f7fb fc1b 	bl	801a144 <memcpy>
 801e90e:	4621      	mov	r1, r4
 801e910:	4638      	mov	r0, r7
 801e912:	f7ff ffa3 	bl	801e85c <_Bfree>
 801e916:	462c      	mov	r4, r5
 801e918:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801e91c:	3601      	adds	r6, #1
 801e91e:	f8c3 8014 	str.w	r8, [r3, #20]
 801e922:	6126      	str	r6, [r4, #16]
 801e924:	4620      	mov	r0, r4
 801e926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e92a:	bf00      	nop
 801e92c:	080223cd 	.word	0x080223cd
 801e930:	0802245c 	.word	0x0802245c

0801e934 <__s2b>:
 801e934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e938:	460c      	mov	r4, r1
 801e93a:	4615      	mov	r5, r2
 801e93c:	461f      	mov	r7, r3
 801e93e:	2209      	movs	r2, #9
 801e940:	3308      	adds	r3, #8
 801e942:	4606      	mov	r6, r0
 801e944:	fb93 f3f2 	sdiv	r3, r3, r2
 801e948:	2100      	movs	r1, #0
 801e94a:	2201      	movs	r2, #1
 801e94c:	429a      	cmp	r2, r3
 801e94e:	db09      	blt.n	801e964 <__s2b+0x30>
 801e950:	4630      	mov	r0, r6
 801e952:	f7ff ff43 	bl	801e7dc <_Balloc>
 801e956:	b940      	cbnz	r0, 801e96a <__s2b+0x36>
 801e958:	4602      	mov	r2, r0
 801e95a:	4b19      	ldr	r3, [pc, #100]	; (801e9c0 <__s2b+0x8c>)
 801e95c:	4819      	ldr	r0, [pc, #100]	; (801e9c4 <__s2b+0x90>)
 801e95e:	21ce      	movs	r1, #206	; 0xce
 801e960:	f7fe fab0 	bl	801cec4 <__assert_func>
 801e964:	0052      	lsls	r2, r2, #1
 801e966:	3101      	adds	r1, #1
 801e968:	e7f0      	b.n	801e94c <__s2b+0x18>
 801e96a:	9b08      	ldr	r3, [sp, #32]
 801e96c:	6143      	str	r3, [r0, #20]
 801e96e:	2d09      	cmp	r5, #9
 801e970:	f04f 0301 	mov.w	r3, #1
 801e974:	6103      	str	r3, [r0, #16]
 801e976:	dd16      	ble.n	801e9a6 <__s2b+0x72>
 801e978:	f104 0909 	add.w	r9, r4, #9
 801e97c:	46c8      	mov	r8, r9
 801e97e:	442c      	add	r4, r5
 801e980:	f818 3b01 	ldrb.w	r3, [r8], #1
 801e984:	4601      	mov	r1, r0
 801e986:	3b30      	subs	r3, #48	; 0x30
 801e988:	220a      	movs	r2, #10
 801e98a:	4630      	mov	r0, r6
 801e98c:	f7ff ff88 	bl	801e8a0 <__multadd>
 801e990:	45a0      	cmp	r8, r4
 801e992:	d1f5      	bne.n	801e980 <__s2b+0x4c>
 801e994:	f1a5 0408 	sub.w	r4, r5, #8
 801e998:	444c      	add	r4, r9
 801e99a:	1b2d      	subs	r5, r5, r4
 801e99c:	1963      	adds	r3, r4, r5
 801e99e:	42bb      	cmp	r3, r7
 801e9a0:	db04      	blt.n	801e9ac <__s2b+0x78>
 801e9a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e9a6:	340a      	adds	r4, #10
 801e9a8:	2509      	movs	r5, #9
 801e9aa:	e7f6      	b.n	801e99a <__s2b+0x66>
 801e9ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 801e9b0:	4601      	mov	r1, r0
 801e9b2:	3b30      	subs	r3, #48	; 0x30
 801e9b4:	220a      	movs	r2, #10
 801e9b6:	4630      	mov	r0, r6
 801e9b8:	f7ff ff72 	bl	801e8a0 <__multadd>
 801e9bc:	e7ee      	b.n	801e99c <__s2b+0x68>
 801e9be:	bf00      	nop
 801e9c0:	080223cd 	.word	0x080223cd
 801e9c4:	0802245c 	.word	0x0802245c

0801e9c8 <__hi0bits>:
 801e9c8:	0c03      	lsrs	r3, r0, #16
 801e9ca:	041b      	lsls	r3, r3, #16
 801e9cc:	b9d3      	cbnz	r3, 801ea04 <__hi0bits+0x3c>
 801e9ce:	0400      	lsls	r0, r0, #16
 801e9d0:	2310      	movs	r3, #16
 801e9d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801e9d6:	bf04      	itt	eq
 801e9d8:	0200      	lsleq	r0, r0, #8
 801e9da:	3308      	addeq	r3, #8
 801e9dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801e9e0:	bf04      	itt	eq
 801e9e2:	0100      	lsleq	r0, r0, #4
 801e9e4:	3304      	addeq	r3, #4
 801e9e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801e9ea:	bf04      	itt	eq
 801e9ec:	0080      	lsleq	r0, r0, #2
 801e9ee:	3302      	addeq	r3, #2
 801e9f0:	2800      	cmp	r0, #0
 801e9f2:	db05      	blt.n	801ea00 <__hi0bits+0x38>
 801e9f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801e9f8:	f103 0301 	add.w	r3, r3, #1
 801e9fc:	bf08      	it	eq
 801e9fe:	2320      	moveq	r3, #32
 801ea00:	4618      	mov	r0, r3
 801ea02:	4770      	bx	lr
 801ea04:	2300      	movs	r3, #0
 801ea06:	e7e4      	b.n	801e9d2 <__hi0bits+0xa>

0801ea08 <__lo0bits>:
 801ea08:	6803      	ldr	r3, [r0, #0]
 801ea0a:	f013 0207 	ands.w	r2, r3, #7
 801ea0e:	4601      	mov	r1, r0
 801ea10:	d00b      	beq.n	801ea2a <__lo0bits+0x22>
 801ea12:	07da      	lsls	r2, r3, #31
 801ea14:	d424      	bmi.n	801ea60 <__lo0bits+0x58>
 801ea16:	0798      	lsls	r0, r3, #30
 801ea18:	bf49      	itett	mi
 801ea1a:	085b      	lsrmi	r3, r3, #1
 801ea1c:	089b      	lsrpl	r3, r3, #2
 801ea1e:	2001      	movmi	r0, #1
 801ea20:	600b      	strmi	r3, [r1, #0]
 801ea22:	bf5c      	itt	pl
 801ea24:	600b      	strpl	r3, [r1, #0]
 801ea26:	2002      	movpl	r0, #2
 801ea28:	4770      	bx	lr
 801ea2a:	b298      	uxth	r0, r3
 801ea2c:	b9b0      	cbnz	r0, 801ea5c <__lo0bits+0x54>
 801ea2e:	0c1b      	lsrs	r3, r3, #16
 801ea30:	2010      	movs	r0, #16
 801ea32:	f013 0fff 	tst.w	r3, #255	; 0xff
 801ea36:	bf04      	itt	eq
 801ea38:	0a1b      	lsreq	r3, r3, #8
 801ea3a:	3008      	addeq	r0, #8
 801ea3c:	071a      	lsls	r2, r3, #28
 801ea3e:	bf04      	itt	eq
 801ea40:	091b      	lsreq	r3, r3, #4
 801ea42:	3004      	addeq	r0, #4
 801ea44:	079a      	lsls	r2, r3, #30
 801ea46:	bf04      	itt	eq
 801ea48:	089b      	lsreq	r3, r3, #2
 801ea4a:	3002      	addeq	r0, #2
 801ea4c:	07da      	lsls	r2, r3, #31
 801ea4e:	d403      	bmi.n	801ea58 <__lo0bits+0x50>
 801ea50:	085b      	lsrs	r3, r3, #1
 801ea52:	f100 0001 	add.w	r0, r0, #1
 801ea56:	d005      	beq.n	801ea64 <__lo0bits+0x5c>
 801ea58:	600b      	str	r3, [r1, #0]
 801ea5a:	4770      	bx	lr
 801ea5c:	4610      	mov	r0, r2
 801ea5e:	e7e8      	b.n	801ea32 <__lo0bits+0x2a>
 801ea60:	2000      	movs	r0, #0
 801ea62:	4770      	bx	lr
 801ea64:	2020      	movs	r0, #32
 801ea66:	4770      	bx	lr

0801ea68 <__i2b>:
 801ea68:	b510      	push	{r4, lr}
 801ea6a:	460c      	mov	r4, r1
 801ea6c:	2101      	movs	r1, #1
 801ea6e:	f7ff feb5 	bl	801e7dc <_Balloc>
 801ea72:	4602      	mov	r2, r0
 801ea74:	b928      	cbnz	r0, 801ea82 <__i2b+0x1a>
 801ea76:	4b05      	ldr	r3, [pc, #20]	; (801ea8c <__i2b+0x24>)
 801ea78:	4805      	ldr	r0, [pc, #20]	; (801ea90 <__i2b+0x28>)
 801ea7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801ea7e:	f7fe fa21 	bl	801cec4 <__assert_func>
 801ea82:	2301      	movs	r3, #1
 801ea84:	6144      	str	r4, [r0, #20]
 801ea86:	6103      	str	r3, [r0, #16]
 801ea88:	bd10      	pop	{r4, pc}
 801ea8a:	bf00      	nop
 801ea8c:	080223cd 	.word	0x080223cd
 801ea90:	0802245c 	.word	0x0802245c

0801ea94 <__multiply>:
 801ea94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea98:	4614      	mov	r4, r2
 801ea9a:	690a      	ldr	r2, [r1, #16]
 801ea9c:	6923      	ldr	r3, [r4, #16]
 801ea9e:	429a      	cmp	r2, r3
 801eaa0:	bfb8      	it	lt
 801eaa2:	460b      	movlt	r3, r1
 801eaa4:	460d      	mov	r5, r1
 801eaa6:	bfbc      	itt	lt
 801eaa8:	4625      	movlt	r5, r4
 801eaaa:	461c      	movlt	r4, r3
 801eaac:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801eab0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801eab4:	68ab      	ldr	r3, [r5, #8]
 801eab6:	6869      	ldr	r1, [r5, #4]
 801eab8:	eb0a 0709 	add.w	r7, sl, r9
 801eabc:	42bb      	cmp	r3, r7
 801eabe:	b085      	sub	sp, #20
 801eac0:	bfb8      	it	lt
 801eac2:	3101      	addlt	r1, #1
 801eac4:	f7ff fe8a 	bl	801e7dc <_Balloc>
 801eac8:	b930      	cbnz	r0, 801ead8 <__multiply+0x44>
 801eaca:	4602      	mov	r2, r0
 801eacc:	4b42      	ldr	r3, [pc, #264]	; (801ebd8 <__multiply+0x144>)
 801eace:	4843      	ldr	r0, [pc, #268]	; (801ebdc <__multiply+0x148>)
 801ead0:	f240 115d 	movw	r1, #349	; 0x15d
 801ead4:	f7fe f9f6 	bl	801cec4 <__assert_func>
 801ead8:	f100 0614 	add.w	r6, r0, #20
 801eadc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801eae0:	4633      	mov	r3, r6
 801eae2:	2200      	movs	r2, #0
 801eae4:	4543      	cmp	r3, r8
 801eae6:	d31e      	bcc.n	801eb26 <__multiply+0x92>
 801eae8:	f105 0c14 	add.w	ip, r5, #20
 801eaec:	f104 0314 	add.w	r3, r4, #20
 801eaf0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801eaf4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801eaf8:	9202      	str	r2, [sp, #8]
 801eafa:	ebac 0205 	sub.w	r2, ip, r5
 801eafe:	3a15      	subs	r2, #21
 801eb00:	f022 0203 	bic.w	r2, r2, #3
 801eb04:	3204      	adds	r2, #4
 801eb06:	f105 0115 	add.w	r1, r5, #21
 801eb0a:	458c      	cmp	ip, r1
 801eb0c:	bf38      	it	cc
 801eb0e:	2204      	movcc	r2, #4
 801eb10:	9201      	str	r2, [sp, #4]
 801eb12:	9a02      	ldr	r2, [sp, #8]
 801eb14:	9303      	str	r3, [sp, #12]
 801eb16:	429a      	cmp	r2, r3
 801eb18:	d808      	bhi.n	801eb2c <__multiply+0x98>
 801eb1a:	2f00      	cmp	r7, #0
 801eb1c:	dc55      	bgt.n	801ebca <__multiply+0x136>
 801eb1e:	6107      	str	r7, [r0, #16]
 801eb20:	b005      	add	sp, #20
 801eb22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb26:	f843 2b04 	str.w	r2, [r3], #4
 801eb2a:	e7db      	b.n	801eae4 <__multiply+0x50>
 801eb2c:	f8b3 a000 	ldrh.w	sl, [r3]
 801eb30:	f1ba 0f00 	cmp.w	sl, #0
 801eb34:	d020      	beq.n	801eb78 <__multiply+0xe4>
 801eb36:	f105 0e14 	add.w	lr, r5, #20
 801eb3a:	46b1      	mov	r9, r6
 801eb3c:	2200      	movs	r2, #0
 801eb3e:	f85e 4b04 	ldr.w	r4, [lr], #4
 801eb42:	f8d9 b000 	ldr.w	fp, [r9]
 801eb46:	b2a1      	uxth	r1, r4
 801eb48:	fa1f fb8b 	uxth.w	fp, fp
 801eb4c:	fb0a b101 	mla	r1, sl, r1, fp
 801eb50:	4411      	add	r1, r2
 801eb52:	f8d9 2000 	ldr.w	r2, [r9]
 801eb56:	0c24      	lsrs	r4, r4, #16
 801eb58:	0c12      	lsrs	r2, r2, #16
 801eb5a:	fb0a 2404 	mla	r4, sl, r4, r2
 801eb5e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801eb62:	b289      	uxth	r1, r1
 801eb64:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801eb68:	45f4      	cmp	ip, lr
 801eb6a:	f849 1b04 	str.w	r1, [r9], #4
 801eb6e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801eb72:	d8e4      	bhi.n	801eb3e <__multiply+0xaa>
 801eb74:	9901      	ldr	r1, [sp, #4]
 801eb76:	5072      	str	r2, [r6, r1]
 801eb78:	9a03      	ldr	r2, [sp, #12]
 801eb7a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801eb7e:	3304      	adds	r3, #4
 801eb80:	f1b9 0f00 	cmp.w	r9, #0
 801eb84:	d01f      	beq.n	801ebc6 <__multiply+0x132>
 801eb86:	6834      	ldr	r4, [r6, #0]
 801eb88:	f105 0114 	add.w	r1, r5, #20
 801eb8c:	46b6      	mov	lr, r6
 801eb8e:	f04f 0a00 	mov.w	sl, #0
 801eb92:	880a      	ldrh	r2, [r1, #0]
 801eb94:	f8be b002 	ldrh.w	fp, [lr, #2]
 801eb98:	fb09 b202 	mla	r2, r9, r2, fp
 801eb9c:	4492      	add	sl, r2
 801eb9e:	b2a4      	uxth	r4, r4
 801eba0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801eba4:	f84e 4b04 	str.w	r4, [lr], #4
 801eba8:	f851 4b04 	ldr.w	r4, [r1], #4
 801ebac:	f8be 2000 	ldrh.w	r2, [lr]
 801ebb0:	0c24      	lsrs	r4, r4, #16
 801ebb2:	fb09 2404 	mla	r4, r9, r4, r2
 801ebb6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801ebba:	458c      	cmp	ip, r1
 801ebbc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801ebc0:	d8e7      	bhi.n	801eb92 <__multiply+0xfe>
 801ebc2:	9a01      	ldr	r2, [sp, #4]
 801ebc4:	50b4      	str	r4, [r6, r2]
 801ebc6:	3604      	adds	r6, #4
 801ebc8:	e7a3      	b.n	801eb12 <__multiply+0x7e>
 801ebca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ebce:	2b00      	cmp	r3, #0
 801ebd0:	d1a5      	bne.n	801eb1e <__multiply+0x8a>
 801ebd2:	3f01      	subs	r7, #1
 801ebd4:	e7a1      	b.n	801eb1a <__multiply+0x86>
 801ebd6:	bf00      	nop
 801ebd8:	080223cd 	.word	0x080223cd
 801ebdc:	0802245c 	.word	0x0802245c

0801ebe0 <__pow5mult>:
 801ebe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ebe4:	4615      	mov	r5, r2
 801ebe6:	f012 0203 	ands.w	r2, r2, #3
 801ebea:	4606      	mov	r6, r0
 801ebec:	460f      	mov	r7, r1
 801ebee:	d007      	beq.n	801ec00 <__pow5mult+0x20>
 801ebf0:	4c25      	ldr	r4, [pc, #148]	; (801ec88 <__pow5mult+0xa8>)
 801ebf2:	3a01      	subs	r2, #1
 801ebf4:	2300      	movs	r3, #0
 801ebf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ebfa:	f7ff fe51 	bl	801e8a0 <__multadd>
 801ebfe:	4607      	mov	r7, r0
 801ec00:	10ad      	asrs	r5, r5, #2
 801ec02:	d03d      	beq.n	801ec80 <__pow5mult+0xa0>
 801ec04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801ec06:	b97c      	cbnz	r4, 801ec28 <__pow5mult+0x48>
 801ec08:	2010      	movs	r0, #16
 801ec0a:	f7fb fa8b 	bl	801a124 <malloc>
 801ec0e:	4602      	mov	r2, r0
 801ec10:	6270      	str	r0, [r6, #36]	; 0x24
 801ec12:	b928      	cbnz	r0, 801ec20 <__pow5mult+0x40>
 801ec14:	4b1d      	ldr	r3, [pc, #116]	; (801ec8c <__pow5mult+0xac>)
 801ec16:	481e      	ldr	r0, [pc, #120]	; (801ec90 <__pow5mult+0xb0>)
 801ec18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801ec1c:	f7fe f952 	bl	801cec4 <__assert_func>
 801ec20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ec24:	6004      	str	r4, [r0, #0]
 801ec26:	60c4      	str	r4, [r0, #12]
 801ec28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801ec2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ec30:	b94c      	cbnz	r4, 801ec46 <__pow5mult+0x66>
 801ec32:	f240 2171 	movw	r1, #625	; 0x271
 801ec36:	4630      	mov	r0, r6
 801ec38:	f7ff ff16 	bl	801ea68 <__i2b>
 801ec3c:	2300      	movs	r3, #0
 801ec3e:	f8c8 0008 	str.w	r0, [r8, #8]
 801ec42:	4604      	mov	r4, r0
 801ec44:	6003      	str	r3, [r0, #0]
 801ec46:	f04f 0900 	mov.w	r9, #0
 801ec4a:	07eb      	lsls	r3, r5, #31
 801ec4c:	d50a      	bpl.n	801ec64 <__pow5mult+0x84>
 801ec4e:	4639      	mov	r1, r7
 801ec50:	4622      	mov	r2, r4
 801ec52:	4630      	mov	r0, r6
 801ec54:	f7ff ff1e 	bl	801ea94 <__multiply>
 801ec58:	4639      	mov	r1, r7
 801ec5a:	4680      	mov	r8, r0
 801ec5c:	4630      	mov	r0, r6
 801ec5e:	f7ff fdfd 	bl	801e85c <_Bfree>
 801ec62:	4647      	mov	r7, r8
 801ec64:	106d      	asrs	r5, r5, #1
 801ec66:	d00b      	beq.n	801ec80 <__pow5mult+0xa0>
 801ec68:	6820      	ldr	r0, [r4, #0]
 801ec6a:	b938      	cbnz	r0, 801ec7c <__pow5mult+0x9c>
 801ec6c:	4622      	mov	r2, r4
 801ec6e:	4621      	mov	r1, r4
 801ec70:	4630      	mov	r0, r6
 801ec72:	f7ff ff0f 	bl	801ea94 <__multiply>
 801ec76:	6020      	str	r0, [r4, #0]
 801ec78:	f8c0 9000 	str.w	r9, [r0]
 801ec7c:	4604      	mov	r4, r0
 801ec7e:	e7e4      	b.n	801ec4a <__pow5mult+0x6a>
 801ec80:	4638      	mov	r0, r7
 801ec82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ec86:	bf00      	nop
 801ec88:	080225b0 	.word	0x080225b0
 801ec8c:	080220c8 	.word	0x080220c8
 801ec90:	0802245c 	.word	0x0802245c

0801ec94 <__lshift>:
 801ec94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ec98:	460c      	mov	r4, r1
 801ec9a:	6849      	ldr	r1, [r1, #4]
 801ec9c:	6923      	ldr	r3, [r4, #16]
 801ec9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801eca2:	68a3      	ldr	r3, [r4, #8]
 801eca4:	4607      	mov	r7, r0
 801eca6:	4691      	mov	r9, r2
 801eca8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ecac:	f108 0601 	add.w	r6, r8, #1
 801ecb0:	42b3      	cmp	r3, r6
 801ecb2:	db0b      	blt.n	801eccc <__lshift+0x38>
 801ecb4:	4638      	mov	r0, r7
 801ecb6:	f7ff fd91 	bl	801e7dc <_Balloc>
 801ecba:	4605      	mov	r5, r0
 801ecbc:	b948      	cbnz	r0, 801ecd2 <__lshift+0x3e>
 801ecbe:	4602      	mov	r2, r0
 801ecc0:	4b28      	ldr	r3, [pc, #160]	; (801ed64 <__lshift+0xd0>)
 801ecc2:	4829      	ldr	r0, [pc, #164]	; (801ed68 <__lshift+0xd4>)
 801ecc4:	f240 11d9 	movw	r1, #473	; 0x1d9
 801ecc8:	f7fe f8fc 	bl	801cec4 <__assert_func>
 801eccc:	3101      	adds	r1, #1
 801ecce:	005b      	lsls	r3, r3, #1
 801ecd0:	e7ee      	b.n	801ecb0 <__lshift+0x1c>
 801ecd2:	2300      	movs	r3, #0
 801ecd4:	f100 0114 	add.w	r1, r0, #20
 801ecd8:	f100 0210 	add.w	r2, r0, #16
 801ecdc:	4618      	mov	r0, r3
 801ecde:	4553      	cmp	r3, sl
 801ece0:	db33      	blt.n	801ed4a <__lshift+0xb6>
 801ece2:	6920      	ldr	r0, [r4, #16]
 801ece4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ece8:	f104 0314 	add.w	r3, r4, #20
 801ecec:	f019 091f 	ands.w	r9, r9, #31
 801ecf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ecf4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801ecf8:	d02b      	beq.n	801ed52 <__lshift+0xbe>
 801ecfa:	f1c9 0e20 	rsb	lr, r9, #32
 801ecfe:	468a      	mov	sl, r1
 801ed00:	2200      	movs	r2, #0
 801ed02:	6818      	ldr	r0, [r3, #0]
 801ed04:	fa00 f009 	lsl.w	r0, r0, r9
 801ed08:	4302      	orrs	r2, r0
 801ed0a:	f84a 2b04 	str.w	r2, [sl], #4
 801ed0e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ed12:	459c      	cmp	ip, r3
 801ed14:	fa22 f20e 	lsr.w	r2, r2, lr
 801ed18:	d8f3      	bhi.n	801ed02 <__lshift+0x6e>
 801ed1a:	ebac 0304 	sub.w	r3, ip, r4
 801ed1e:	3b15      	subs	r3, #21
 801ed20:	f023 0303 	bic.w	r3, r3, #3
 801ed24:	3304      	adds	r3, #4
 801ed26:	f104 0015 	add.w	r0, r4, #21
 801ed2a:	4584      	cmp	ip, r0
 801ed2c:	bf38      	it	cc
 801ed2e:	2304      	movcc	r3, #4
 801ed30:	50ca      	str	r2, [r1, r3]
 801ed32:	b10a      	cbz	r2, 801ed38 <__lshift+0xa4>
 801ed34:	f108 0602 	add.w	r6, r8, #2
 801ed38:	3e01      	subs	r6, #1
 801ed3a:	4638      	mov	r0, r7
 801ed3c:	612e      	str	r6, [r5, #16]
 801ed3e:	4621      	mov	r1, r4
 801ed40:	f7ff fd8c 	bl	801e85c <_Bfree>
 801ed44:	4628      	mov	r0, r5
 801ed46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ed4a:	f842 0f04 	str.w	r0, [r2, #4]!
 801ed4e:	3301      	adds	r3, #1
 801ed50:	e7c5      	b.n	801ecde <__lshift+0x4a>
 801ed52:	3904      	subs	r1, #4
 801ed54:	f853 2b04 	ldr.w	r2, [r3], #4
 801ed58:	f841 2f04 	str.w	r2, [r1, #4]!
 801ed5c:	459c      	cmp	ip, r3
 801ed5e:	d8f9      	bhi.n	801ed54 <__lshift+0xc0>
 801ed60:	e7ea      	b.n	801ed38 <__lshift+0xa4>
 801ed62:	bf00      	nop
 801ed64:	080223cd 	.word	0x080223cd
 801ed68:	0802245c 	.word	0x0802245c

0801ed6c <__mcmp>:
 801ed6c:	b530      	push	{r4, r5, lr}
 801ed6e:	6902      	ldr	r2, [r0, #16]
 801ed70:	690c      	ldr	r4, [r1, #16]
 801ed72:	1b12      	subs	r2, r2, r4
 801ed74:	d10e      	bne.n	801ed94 <__mcmp+0x28>
 801ed76:	f100 0314 	add.w	r3, r0, #20
 801ed7a:	3114      	adds	r1, #20
 801ed7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801ed80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801ed84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801ed88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801ed8c:	42a5      	cmp	r5, r4
 801ed8e:	d003      	beq.n	801ed98 <__mcmp+0x2c>
 801ed90:	d305      	bcc.n	801ed9e <__mcmp+0x32>
 801ed92:	2201      	movs	r2, #1
 801ed94:	4610      	mov	r0, r2
 801ed96:	bd30      	pop	{r4, r5, pc}
 801ed98:	4283      	cmp	r3, r0
 801ed9a:	d3f3      	bcc.n	801ed84 <__mcmp+0x18>
 801ed9c:	e7fa      	b.n	801ed94 <__mcmp+0x28>
 801ed9e:	f04f 32ff 	mov.w	r2, #4294967295
 801eda2:	e7f7      	b.n	801ed94 <__mcmp+0x28>

0801eda4 <__mdiff>:
 801eda4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eda8:	460c      	mov	r4, r1
 801edaa:	4606      	mov	r6, r0
 801edac:	4611      	mov	r1, r2
 801edae:	4620      	mov	r0, r4
 801edb0:	4617      	mov	r7, r2
 801edb2:	f7ff ffdb 	bl	801ed6c <__mcmp>
 801edb6:	1e05      	subs	r5, r0, #0
 801edb8:	d110      	bne.n	801eddc <__mdiff+0x38>
 801edba:	4629      	mov	r1, r5
 801edbc:	4630      	mov	r0, r6
 801edbe:	f7ff fd0d 	bl	801e7dc <_Balloc>
 801edc2:	b930      	cbnz	r0, 801edd2 <__mdiff+0x2e>
 801edc4:	4b39      	ldr	r3, [pc, #228]	; (801eeac <__mdiff+0x108>)
 801edc6:	4602      	mov	r2, r0
 801edc8:	f240 2132 	movw	r1, #562	; 0x232
 801edcc:	4838      	ldr	r0, [pc, #224]	; (801eeb0 <__mdiff+0x10c>)
 801edce:	f7fe f879 	bl	801cec4 <__assert_func>
 801edd2:	2301      	movs	r3, #1
 801edd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801edd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eddc:	bfa4      	itt	ge
 801edde:	463b      	movge	r3, r7
 801ede0:	4627      	movge	r7, r4
 801ede2:	4630      	mov	r0, r6
 801ede4:	6879      	ldr	r1, [r7, #4]
 801ede6:	bfa6      	itte	ge
 801ede8:	461c      	movge	r4, r3
 801edea:	2500      	movge	r5, #0
 801edec:	2501      	movlt	r5, #1
 801edee:	f7ff fcf5 	bl	801e7dc <_Balloc>
 801edf2:	b920      	cbnz	r0, 801edfe <__mdiff+0x5a>
 801edf4:	4b2d      	ldr	r3, [pc, #180]	; (801eeac <__mdiff+0x108>)
 801edf6:	4602      	mov	r2, r0
 801edf8:	f44f 7110 	mov.w	r1, #576	; 0x240
 801edfc:	e7e6      	b.n	801edcc <__mdiff+0x28>
 801edfe:	693e      	ldr	r6, [r7, #16]
 801ee00:	60c5      	str	r5, [r0, #12]
 801ee02:	6925      	ldr	r5, [r4, #16]
 801ee04:	f107 0114 	add.w	r1, r7, #20
 801ee08:	f104 0914 	add.w	r9, r4, #20
 801ee0c:	f100 0e14 	add.w	lr, r0, #20
 801ee10:	f107 0210 	add.w	r2, r7, #16
 801ee14:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801ee18:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801ee1c:	46f2      	mov	sl, lr
 801ee1e:	2700      	movs	r7, #0
 801ee20:	f859 3b04 	ldr.w	r3, [r9], #4
 801ee24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801ee28:	fa1f f883 	uxth.w	r8, r3
 801ee2c:	fa17 f78b 	uxtah	r7, r7, fp
 801ee30:	0c1b      	lsrs	r3, r3, #16
 801ee32:	eba7 0808 	sub.w	r8, r7, r8
 801ee36:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801ee3a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ee3e:	fa1f f888 	uxth.w	r8, r8
 801ee42:	141f      	asrs	r7, r3, #16
 801ee44:	454d      	cmp	r5, r9
 801ee46:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801ee4a:	f84a 3b04 	str.w	r3, [sl], #4
 801ee4e:	d8e7      	bhi.n	801ee20 <__mdiff+0x7c>
 801ee50:	1b2b      	subs	r3, r5, r4
 801ee52:	3b15      	subs	r3, #21
 801ee54:	f023 0303 	bic.w	r3, r3, #3
 801ee58:	3304      	adds	r3, #4
 801ee5a:	3415      	adds	r4, #21
 801ee5c:	42a5      	cmp	r5, r4
 801ee5e:	bf38      	it	cc
 801ee60:	2304      	movcc	r3, #4
 801ee62:	4419      	add	r1, r3
 801ee64:	4473      	add	r3, lr
 801ee66:	469e      	mov	lr, r3
 801ee68:	460d      	mov	r5, r1
 801ee6a:	4565      	cmp	r5, ip
 801ee6c:	d30e      	bcc.n	801ee8c <__mdiff+0xe8>
 801ee6e:	f10c 0203 	add.w	r2, ip, #3
 801ee72:	1a52      	subs	r2, r2, r1
 801ee74:	f022 0203 	bic.w	r2, r2, #3
 801ee78:	3903      	subs	r1, #3
 801ee7a:	458c      	cmp	ip, r1
 801ee7c:	bf38      	it	cc
 801ee7e:	2200      	movcc	r2, #0
 801ee80:	441a      	add	r2, r3
 801ee82:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801ee86:	b17b      	cbz	r3, 801eea8 <__mdiff+0x104>
 801ee88:	6106      	str	r6, [r0, #16]
 801ee8a:	e7a5      	b.n	801edd8 <__mdiff+0x34>
 801ee8c:	f855 8b04 	ldr.w	r8, [r5], #4
 801ee90:	fa17 f488 	uxtah	r4, r7, r8
 801ee94:	1422      	asrs	r2, r4, #16
 801ee96:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801ee9a:	b2a4      	uxth	r4, r4
 801ee9c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801eea0:	f84e 4b04 	str.w	r4, [lr], #4
 801eea4:	1417      	asrs	r7, r2, #16
 801eea6:	e7e0      	b.n	801ee6a <__mdiff+0xc6>
 801eea8:	3e01      	subs	r6, #1
 801eeaa:	e7ea      	b.n	801ee82 <__mdiff+0xde>
 801eeac:	080223cd 	.word	0x080223cd
 801eeb0:	0802245c 	.word	0x0802245c

0801eeb4 <__ulp>:
 801eeb4:	b082      	sub	sp, #8
 801eeb6:	ed8d 0b00 	vstr	d0, [sp]
 801eeba:	9b01      	ldr	r3, [sp, #4]
 801eebc:	4912      	ldr	r1, [pc, #72]	; (801ef08 <__ulp+0x54>)
 801eebe:	4019      	ands	r1, r3
 801eec0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801eec4:	2900      	cmp	r1, #0
 801eec6:	dd05      	ble.n	801eed4 <__ulp+0x20>
 801eec8:	2200      	movs	r2, #0
 801eeca:	460b      	mov	r3, r1
 801eecc:	ec43 2b10 	vmov	d0, r2, r3
 801eed0:	b002      	add	sp, #8
 801eed2:	4770      	bx	lr
 801eed4:	4249      	negs	r1, r1
 801eed6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801eeda:	ea4f 5021 	mov.w	r0, r1, asr #20
 801eede:	f04f 0200 	mov.w	r2, #0
 801eee2:	f04f 0300 	mov.w	r3, #0
 801eee6:	da04      	bge.n	801eef2 <__ulp+0x3e>
 801eee8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801eeec:	fa41 f300 	asr.w	r3, r1, r0
 801eef0:	e7ec      	b.n	801eecc <__ulp+0x18>
 801eef2:	f1a0 0114 	sub.w	r1, r0, #20
 801eef6:	291e      	cmp	r1, #30
 801eef8:	bfda      	itte	le
 801eefa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801eefe:	fa20 f101 	lsrle.w	r1, r0, r1
 801ef02:	2101      	movgt	r1, #1
 801ef04:	460a      	mov	r2, r1
 801ef06:	e7e1      	b.n	801eecc <__ulp+0x18>
 801ef08:	7ff00000 	.word	0x7ff00000

0801ef0c <__b2d>:
 801ef0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef0e:	6905      	ldr	r5, [r0, #16]
 801ef10:	f100 0714 	add.w	r7, r0, #20
 801ef14:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801ef18:	1f2e      	subs	r6, r5, #4
 801ef1a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801ef1e:	4620      	mov	r0, r4
 801ef20:	f7ff fd52 	bl	801e9c8 <__hi0bits>
 801ef24:	f1c0 0320 	rsb	r3, r0, #32
 801ef28:	280a      	cmp	r0, #10
 801ef2a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801efa8 <__b2d+0x9c>
 801ef2e:	600b      	str	r3, [r1, #0]
 801ef30:	dc14      	bgt.n	801ef5c <__b2d+0x50>
 801ef32:	f1c0 0e0b 	rsb	lr, r0, #11
 801ef36:	fa24 f10e 	lsr.w	r1, r4, lr
 801ef3a:	42b7      	cmp	r7, r6
 801ef3c:	ea41 030c 	orr.w	r3, r1, ip
 801ef40:	bf34      	ite	cc
 801ef42:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801ef46:	2100      	movcs	r1, #0
 801ef48:	3015      	adds	r0, #21
 801ef4a:	fa04 f000 	lsl.w	r0, r4, r0
 801ef4e:	fa21 f10e 	lsr.w	r1, r1, lr
 801ef52:	ea40 0201 	orr.w	r2, r0, r1
 801ef56:	ec43 2b10 	vmov	d0, r2, r3
 801ef5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ef5c:	42b7      	cmp	r7, r6
 801ef5e:	bf3a      	itte	cc
 801ef60:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801ef64:	f1a5 0608 	subcc.w	r6, r5, #8
 801ef68:	2100      	movcs	r1, #0
 801ef6a:	380b      	subs	r0, #11
 801ef6c:	d017      	beq.n	801ef9e <__b2d+0x92>
 801ef6e:	f1c0 0c20 	rsb	ip, r0, #32
 801ef72:	fa04 f500 	lsl.w	r5, r4, r0
 801ef76:	42be      	cmp	r6, r7
 801ef78:	fa21 f40c 	lsr.w	r4, r1, ip
 801ef7c:	ea45 0504 	orr.w	r5, r5, r4
 801ef80:	bf8c      	ite	hi
 801ef82:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801ef86:	2400      	movls	r4, #0
 801ef88:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801ef8c:	fa01 f000 	lsl.w	r0, r1, r0
 801ef90:	fa24 f40c 	lsr.w	r4, r4, ip
 801ef94:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801ef98:	ea40 0204 	orr.w	r2, r0, r4
 801ef9c:	e7db      	b.n	801ef56 <__b2d+0x4a>
 801ef9e:	ea44 030c 	orr.w	r3, r4, ip
 801efa2:	460a      	mov	r2, r1
 801efa4:	e7d7      	b.n	801ef56 <__b2d+0x4a>
 801efa6:	bf00      	nop
 801efa8:	3ff00000 	.word	0x3ff00000

0801efac <__d2b>:
 801efac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801efb0:	4689      	mov	r9, r1
 801efb2:	2101      	movs	r1, #1
 801efb4:	ec57 6b10 	vmov	r6, r7, d0
 801efb8:	4690      	mov	r8, r2
 801efba:	f7ff fc0f 	bl	801e7dc <_Balloc>
 801efbe:	4604      	mov	r4, r0
 801efc0:	b930      	cbnz	r0, 801efd0 <__d2b+0x24>
 801efc2:	4602      	mov	r2, r0
 801efc4:	4b25      	ldr	r3, [pc, #148]	; (801f05c <__d2b+0xb0>)
 801efc6:	4826      	ldr	r0, [pc, #152]	; (801f060 <__d2b+0xb4>)
 801efc8:	f240 310a 	movw	r1, #778	; 0x30a
 801efcc:	f7fd ff7a 	bl	801cec4 <__assert_func>
 801efd0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801efd4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801efd8:	bb35      	cbnz	r5, 801f028 <__d2b+0x7c>
 801efda:	2e00      	cmp	r6, #0
 801efdc:	9301      	str	r3, [sp, #4]
 801efde:	d028      	beq.n	801f032 <__d2b+0x86>
 801efe0:	4668      	mov	r0, sp
 801efe2:	9600      	str	r6, [sp, #0]
 801efe4:	f7ff fd10 	bl	801ea08 <__lo0bits>
 801efe8:	9900      	ldr	r1, [sp, #0]
 801efea:	b300      	cbz	r0, 801f02e <__d2b+0x82>
 801efec:	9a01      	ldr	r2, [sp, #4]
 801efee:	f1c0 0320 	rsb	r3, r0, #32
 801eff2:	fa02 f303 	lsl.w	r3, r2, r3
 801eff6:	430b      	orrs	r3, r1
 801eff8:	40c2      	lsrs	r2, r0
 801effa:	6163      	str	r3, [r4, #20]
 801effc:	9201      	str	r2, [sp, #4]
 801effe:	9b01      	ldr	r3, [sp, #4]
 801f000:	61a3      	str	r3, [r4, #24]
 801f002:	2b00      	cmp	r3, #0
 801f004:	bf14      	ite	ne
 801f006:	2202      	movne	r2, #2
 801f008:	2201      	moveq	r2, #1
 801f00a:	6122      	str	r2, [r4, #16]
 801f00c:	b1d5      	cbz	r5, 801f044 <__d2b+0x98>
 801f00e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801f012:	4405      	add	r5, r0
 801f014:	f8c9 5000 	str.w	r5, [r9]
 801f018:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801f01c:	f8c8 0000 	str.w	r0, [r8]
 801f020:	4620      	mov	r0, r4
 801f022:	b003      	add	sp, #12
 801f024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f028:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801f02c:	e7d5      	b.n	801efda <__d2b+0x2e>
 801f02e:	6161      	str	r1, [r4, #20]
 801f030:	e7e5      	b.n	801effe <__d2b+0x52>
 801f032:	a801      	add	r0, sp, #4
 801f034:	f7ff fce8 	bl	801ea08 <__lo0bits>
 801f038:	9b01      	ldr	r3, [sp, #4]
 801f03a:	6163      	str	r3, [r4, #20]
 801f03c:	2201      	movs	r2, #1
 801f03e:	6122      	str	r2, [r4, #16]
 801f040:	3020      	adds	r0, #32
 801f042:	e7e3      	b.n	801f00c <__d2b+0x60>
 801f044:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f048:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801f04c:	f8c9 0000 	str.w	r0, [r9]
 801f050:	6918      	ldr	r0, [r3, #16]
 801f052:	f7ff fcb9 	bl	801e9c8 <__hi0bits>
 801f056:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f05a:	e7df      	b.n	801f01c <__d2b+0x70>
 801f05c:	080223cd 	.word	0x080223cd
 801f060:	0802245c 	.word	0x0802245c

0801f064 <__ratio>:
 801f064:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f068:	4688      	mov	r8, r1
 801f06a:	4669      	mov	r1, sp
 801f06c:	4681      	mov	r9, r0
 801f06e:	f7ff ff4d 	bl	801ef0c <__b2d>
 801f072:	a901      	add	r1, sp, #4
 801f074:	4640      	mov	r0, r8
 801f076:	ec55 4b10 	vmov	r4, r5, d0
 801f07a:	f7ff ff47 	bl	801ef0c <__b2d>
 801f07e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f082:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801f086:	eba3 0c02 	sub.w	ip, r3, r2
 801f08a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801f08e:	1a9b      	subs	r3, r3, r2
 801f090:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801f094:	ec51 0b10 	vmov	r0, r1, d0
 801f098:	2b00      	cmp	r3, #0
 801f09a:	bfd6      	itet	le
 801f09c:	460a      	movle	r2, r1
 801f09e:	462a      	movgt	r2, r5
 801f0a0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801f0a4:	468b      	mov	fp, r1
 801f0a6:	462f      	mov	r7, r5
 801f0a8:	bfd4      	ite	le
 801f0aa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801f0ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801f0b2:	4620      	mov	r0, r4
 801f0b4:	ee10 2a10 	vmov	r2, s0
 801f0b8:	465b      	mov	r3, fp
 801f0ba:	4639      	mov	r1, r7
 801f0bc:	f7e1 fbe6 	bl	800088c <__aeabi_ddiv>
 801f0c0:	ec41 0b10 	vmov	d0, r0, r1
 801f0c4:	b003      	add	sp, #12
 801f0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f0ca <__copybits>:
 801f0ca:	3901      	subs	r1, #1
 801f0cc:	b570      	push	{r4, r5, r6, lr}
 801f0ce:	1149      	asrs	r1, r1, #5
 801f0d0:	6914      	ldr	r4, [r2, #16]
 801f0d2:	3101      	adds	r1, #1
 801f0d4:	f102 0314 	add.w	r3, r2, #20
 801f0d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801f0dc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f0e0:	1f05      	subs	r5, r0, #4
 801f0e2:	42a3      	cmp	r3, r4
 801f0e4:	d30c      	bcc.n	801f100 <__copybits+0x36>
 801f0e6:	1aa3      	subs	r3, r4, r2
 801f0e8:	3b11      	subs	r3, #17
 801f0ea:	f023 0303 	bic.w	r3, r3, #3
 801f0ee:	3211      	adds	r2, #17
 801f0f0:	42a2      	cmp	r2, r4
 801f0f2:	bf88      	it	hi
 801f0f4:	2300      	movhi	r3, #0
 801f0f6:	4418      	add	r0, r3
 801f0f8:	2300      	movs	r3, #0
 801f0fa:	4288      	cmp	r0, r1
 801f0fc:	d305      	bcc.n	801f10a <__copybits+0x40>
 801f0fe:	bd70      	pop	{r4, r5, r6, pc}
 801f100:	f853 6b04 	ldr.w	r6, [r3], #4
 801f104:	f845 6f04 	str.w	r6, [r5, #4]!
 801f108:	e7eb      	b.n	801f0e2 <__copybits+0x18>
 801f10a:	f840 3b04 	str.w	r3, [r0], #4
 801f10e:	e7f4      	b.n	801f0fa <__copybits+0x30>

0801f110 <__any_on>:
 801f110:	f100 0214 	add.w	r2, r0, #20
 801f114:	6900      	ldr	r0, [r0, #16]
 801f116:	114b      	asrs	r3, r1, #5
 801f118:	4298      	cmp	r0, r3
 801f11a:	b510      	push	{r4, lr}
 801f11c:	db11      	blt.n	801f142 <__any_on+0x32>
 801f11e:	dd0a      	ble.n	801f136 <__any_on+0x26>
 801f120:	f011 011f 	ands.w	r1, r1, #31
 801f124:	d007      	beq.n	801f136 <__any_on+0x26>
 801f126:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801f12a:	fa24 f001 	lsr.w	r0, r4, r1
 801f12e:	fa00 f101 	lsl.w	r1, r0, r1
 801f132:	428c      	cmp	r4, r1
 801f134:	d10b      	bne.n	801f14e <__any_on+0x3e>
 801f136:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f13a:	4293      	cmp	r3, r2
 801f13c:	d803      	bhi.n	801f146 <__any_on+0x36>
 801f13e:	2000      	movs	r0, #0
 801f140:	bd10      	pop	{r4, pc}
 801f142:	4603      	mov	r3, r0
 801f144:	e7f7      	b.n	801f136 <__any_on+0x26>
 801f146:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f14a:	2900      	cmp	r1, #0
 801f14c:	d0f5      	beq.n	801f13a <__any_on+0x2a>
 801f14e:	2001      	movs	r0, #1
 801f150:	e7f6      	b.n	801f140 <__any_on+0x30>

0801f152 <_calloc_r>:
 801f152:	b513      	push	{r0, r1, r4, lr}
 801f154:	434a      	muls	r2, r1
 801f156:	4611      	mov	r1, r2
 801f158:	9201      	str	r2, [sp, #4]
 801f15a:	f7fb faf1 	bl	801a740 <_malloc_r>
 801f15e:	4604      	mov	r4, r0
 801f160:	b118      	cbz	r0, 801f16a <_calloc_r+0x18>
 801f162:	9a01      	ldr	r2, [sp, #4]
 801f164:	2100      	movs	r1, #0
 801f166:	f7fb f815 	bl	801a194 <memset>
 801f16a:	4620      	mov	r0, r4
 801f16c:	b002      	add	sp, #8
 801f16e:	bd10      	pop	{r4, pc}

0801f170 <_realloc_r>:
 801f170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f172:	4607      	mov	r7, r0
 801f174:	4614      	mov	r4, r2
 801f176:	460e      	mov	r6, r1
 801f178:	b921      	cbnz	r1, 801f184 <_realloc_r+0x14>
 801f17a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801f17e:	4611      	mov	r1, r2
 801f180:	f7fb bade 	b.w	801a740 <_malloc_r>
 801f184:	b922      	cbnz	r2, 801f190 <_realloc_r+0x20>
 801f186:	f7fb fa8b 	bl	801a6a0 <_free_r>
 801f18a:	4625      	mov	r5, r4
 801f18c:	4628      	mov	r0, r5
 801f18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f190:	f000 feaa 	bl	801fee8 <_malloc_usable_size_r>
 801f194:	42a0      	cmp	r0, r4
 801f196:	d20f      	bcs.n	801f1b8 <_realloc_r+0x48>
 801f198:	4621      	mov	r1, r4
 801f19a:	4638      	mov	r0, r7
 801f19c:	f7fb fad0 	bl	801a740 <_malloc_r>
 801f1a0:	4605      	mov	r5, r0
 801f1a2:	2800      	cmp	r0, #0
 801f1a4:	d0f2      	beq.n	801f18c <_realloc_r+0x1c>
 801f1a6:	4631      	mov	r1, r6
 801f1a8:	4622      	mov	r2, r4
 801f1aa:	f7fa ffcb 	bl	801a144 <memcpy>
 801f1ae:	4631      	mov	r1, r6
 801f1b0:	4638      	mov	r0, r7
 801f1b2:	f7fb fa75 	bl	801a6a0 <_free_r>
 801f1b6:	e7e9      	b.n	801f18c <_realloc_r+0x1c>
 801f1b8:	4635      	mov	r5, r6
 801f1ba:	e7e7      	b.n	801f18c <_realloc_r+0x1c>

0801f1bc <__ssputs_r>:
 801f1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f1c0:	688e      	ldr	r6, [r1, #8]
 801f1c2:	429e      	cmp	r6, r3
 801f1c4:	4682      	mov	sl, r0
 801f1c6:	460c      	mov	r4, r1
 801f1c8:	4690      	mov	r8, r2
 801f1ca:	461f      	mov	r7, r3
 801f1cc:	d838      	bhi.n	801f240 <__ssputs_r+0x84>
 801f1ce:	898a      	ldrh	r2, [r1, #12]
 801f1d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801f1d4:	d032      	beq.n	801f23c <__ssputs_r+0x80>
 801f1d6:	6825      	ldr	r5, [r4, #0]
 801f1d8:	6909      	ldr	r1, [r1, #16]
 801f1da:	eba5 0901 	sub.w	r9, r5, r1
 801f1de:	6965      	ldr	r5, [r4, #20]
 801f1e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f1e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f1e8:	3301      	adds	r3, #1
 801f1ea:	444b      	add	r3, r9
 801f1ec:	106d      	asrs	r5, r5, #1
 801f1ee:	429d      	cmp	r5, r3
 801f1f0:	bf38      	it	cc
 801f1f2:	461d      	movcc	r5, r3
 801f1f4:	0553      	lsls	r3, r2, #21
 801f1f6:	d531      	bpl.n	801f25c <__ssputs_r+0xa0>
 801f1f8:	4629      	mov	r1, r5
 801f1fa:	f7fb faa1 	bl	801a740 <_malloc_r>
 801f1fe:	4606      	mov	r6, r0
 801f200:	b950      	cbnz	r0, 801f218 <__ssputs_r+0x5c>
 801f202:	230c      	movs	r3, #12
 801f204:	f8ca 3000 	str.w	r3, [sl]
 801f208:	89a3      	ldrh	r3, [r4, #12]
 801f20a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f20e:	81a3      	strh	r3, [r4, #12]
 801f210:	f04f 30ff 	mov.w	r0, #4294967295
 801f214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f218:	6921      	ldr	r1, [r4, #16]
 801f21a:	464a      	mov	r2, r9
 801f21c:	f7fa ff92 	bl	801a144 <memcpy>
 801f220:	89a3      	ldrh	r3, [r4, #12]
 801f222:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801f226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f22a:	81a3      	strh	r3, [r4, #12]
 801f22c:	6126      	str	r6, [r4, #16]
 801f22e:	6165      	str	r5, [r4, #20]
 801f230:	444e      	add	r6, r9
 801f232:	eba5 0509 	sub.w	r5, r5, r9
 801f236:	6026      	str	r6, [r4, #0]
 801f238:	60a5      	str	r5, [r4, #8]
 801f23a:	463e      	mov	r6, r7
 801f23c:	42be      	cmp	r6, r7
 801f23e:	d900      	bls.n	801f242 <__ssputs_r+0x86>
 801f240:	463e      	mov	r6, r7
 801f242:	4632      	mov	r2, r6
 801f244:	6820      	ldr	r0, [r4, #0]
 801f246:	4641      	mov	r1, r8
 801f248:	f7fa ff8a 	bl	801a160 <memmove>
 801f24c:	68a3      	ldr	r3, [r4, #8]
 801f24e:	6822      	ldr	r2, [r4, #0]
 801f250:	1b9b      	subs	r3, r3, r6
 801f252:	4432      	add	r2, r6
 801f254:	60a3      	str	r3, [r4, #8]
 801f256:	6022      	str	r2, [r4, #0]
 801f258:	2000      	movs	r0, #0
 801f25a:	e7db      	b.n	801f214 <__ssputs_r+0x58>
 801f25c:	462a      	mov	r2, r5
 801f25e:	f7ff ff87 	bl	801f170 <_realloc_r>
 801f262:	4606      	mov	r6, r0
 801f264:	2800      	cmp	r0, #0
 801f266:	d1e1      	bne.n	801f22c <__ssputs_r+0x70>
 801f268:	6921      	ldr	r1, [r4, #16]
 801f26a:	4650      	mov	r0, sl
 801f26c:	f7fb fa18 	bl	801a6a0 <_free_r>
 801f270:	e7c7      	b.n	801f202 <__ssputs_r+0x46>
	...

0801f274 <_svfiprintf_r>:
 801f274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f278:	4698      	mov	r8, r3
 801f27a:	898b      	ldrh	r3, [r1, #12]
 801f27c:	061b      	lsls	r3, r3, #24
 801f27e:	b09d      	sub	sp, #116	; 0x74
 801f280:	4607      	mov	r7, r0
 801f282:	460d      	mov	r5, r1
 801f284:	4614      	mov	r4, r2
 801f286:	d50e      	bpl.n	801f2a6 <_svfiprintf_r+0x32>
 801f288:	690b      	ldr	r3, [r1, #16]
 801f28a:	b963      	cbnz	r3, 801f2a6 <_svfiprintf_r+0x32>
 801f28c:	2140      	movs	r1, #64	; 0x40
 801f28e:	f7fb fa57 	bl	801a740 <_malloc_r>
 801f292:	6028      	str	r0, [r5, #0]
 801f294:	6128      	str	r0, [r5, #16]
 801f296:	b920      	cbnz	r0, 801f2a2 <_svfiprintf_r+0x2e>
 801f298:	230c      	movs	r3, #12
 801f29a:	603b      	str	r3, [r7, #0]
 801f29c:	f04f 30ff 	mov.w	r0, #4294967295
 801f2a0:	e0d1      	b.n	801f446 <_svfiprintf_r+0x1d2>
 801f2a2:	2340      	movs	r3, #64	; 0x40
 801f2a4:	616b      	str	r3, [r5, #20]
 801f2a6:	2300      	movs	r3, #0
 801f2a8:	9309      	str	r3, [sp, #36]	; 0x24
 801f2aa:	2320      	movs	r3, #32
 801f2ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f2b0:	f8cd 800c 	str.w	r8, [sp, #12]
 801f2b4:	2330      	movs	r3, #48	; 0x30
 801f2b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801f460 <_svfiprintf_r+0x1ec>
 801f2ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f2be:	f04f 0901 	mov.w	r9, #1
 801f2c2:	4623      	mov	r3, r4
 801f2c4:	469a      	mov	sl, r3
 801f2c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f2ca:	b10a      	cbz	r2, 801f2d0 <_svfiprintf_r+0x5c>
 801f2cc:	2a25      	cmp	r2, #37	; 0x25
 801f2ce:	d1f9      	bne.n	801f2c4 <_svfiprintf_r+0x50>
 801f2d0:	ebba 0b04 	subs.w	fp, sl, r4
 801f2d4:	d00b      	beq.n	801f2ee <_svfiprintf_r+0x7a>
 801f2d6:	465b      	mov	r3, fp
 801f2d8:	4622      	mov	r2, r4
 801f2da:	4629      	mov	r1, r5
 801f2dc:	4638      	mov	r0, r7
 801f2de:	f7ff ff6d 	bl	801f1bc <__ssputs_r>
 801f2e2:	3001      	adds	r0, #1
 801f2e4:	f000 80aa 	beq.w	801f43c <_svfiprintf_r+0x1c8>
 801f2e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f2ea:	445a      	add	r2, fp
 801f2ec:	9209      	str	r2, [sp, #36]	; 0x24
 801f2ee:	f89a 3000 	ldrb.w	r3, [sl]
 801f2f2:	2b00      	cmp	r3, #0
 801f2f4:	f000 80a2 	beq.w	801f43c <_svfiprintf_r+0x1c8>
 801f2f8:	2300      	movs	r3, #0
 801f2fa:	f04f 32ff 	mov.w	r2, #4294967295
 801f2fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f302:	f10a 0a01 	add.w	sl, sl, #1
 801f306:	9304      	str	r3, [sp, #16]
 801f308:	9307      	str	r3, [sp, #28]
 801f30a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f30e:	931a      	str	r3, [sp, #104]	; 0x68
 801f310:	4654      	mov	r4, sl
 801f312:	2205      	movs	r2, #5
 801f314:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f318:	4851      	ldr	r0, [pc, #324]	; (801f460 <_svfiprintf_r+0x1ec>)
 801f31a:	f7e0 ff81 	bl	8000220 <memchr>
 801f31e:	9a04      	ldr	r2, [sp, #16]
 801f320:	b9d8      	cbnz	r0, 801f35a <_svfiprintf_r+0xe6>
 801f322:	06d0      	lsls	r0, r2, #27
 801f324:	bf44      	itt	mi
 801f326:	2320      	movmi	r3, #32
 801f328:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f32c:	0711      	lsls	r1, r2, #28
 801f32e:	bf44      	itt	mi
 801f330:	232b      	movmi	r3, #43	; 0x2b
 801f332:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f336:	f89a 3000 	ldrb.w	r3, [sl]
 801f33a:	2b2a      	cmp	r3, #42	; 0x2a
 801f33c:	d015      	beq.n	801f36a <_svfiprintf_r+0xf6>
 801f33e:	9a07      	ldr	r2, [sp, #28]
 801f340:	4654      	mov	r4, sl
 801f342:	2000      	movs	r0, #0
 801f344:	f04f 0c0a 	mov.w	ip, #10
 801f348:	4621      	mov	r1, r4
 801f34a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f34e:	3b30      	subs	r3, #48	; 0x30
 801f350:	2b09      	cmp	r3, #9
 801f352:	d94e      	bls.n	801f3f2 <_svfiprintf_r+0x17e>
 801f354:	b1b0      	cbz	r0, 801f384 <_svfiprintf_r+0x110>
 801f356:	9207      	str	r2, [sp, #28]
 801f358:	e014      	b.n	801f384 <_svfiprintf_r+0x110>
 801f35a:	eba0 0308 	sub.w	r3, r0, r8
 801f35e:	fa09 f303 	lsl.w	r3, r9, r3
 801f362:	4313      	orrs	r3, r2
 801f364:	9304      	str	r3, [sp, #16]
 801f366:	46a2      	mov	sl, r4
 801f368:	e7d2      	b.n	801f310 <_svfiprintf_r+0x9c>
 801f36a:	9b03      	ldr	r3, [sp, #12]
 801f36c:	1d19      	adds	r1, r3, #4
 801f36e:	681b      	ldr	r3, [r3, #0]
 801f370:	9103      	str	r1, [sp, #12]
 801f372:	2b00      	cmp	r3, #0
 801f374:	bfbb      	ittet	lt
 801f376:	425b      	neglt	r3, r3
 801f378:	f042 0202 	orrlt.w	r2, r2, #2
 801f37c:	9307      	strge	r3, [sp, #28]
 801f37e:	9307      	strlt	r3, [sp, #28]
 801f380:	bfb8      	it	lt
 801f382:	9204      	strlt	r2, [sp, #16]
 801f384:	7823      	ldrb	r3, [r4, #0]
 801f386:	2b2e      	cmp	r3, #46	; 0x2e
 801f388:	d10c      	bne.n	801f3a4 <_svfiprintf_r+0x130>
 801f38a:	7863      	ldrb	r3, [r4, #1]
 801f38c:	2b2a      	cmp	r3, #42	; 0x2a
 801f38e:	d135      	bne.n	801f3fc <_svfiprintf_r+0x188>
 801f390:	9b03      	ldr	r3, [sp, #12]
 801f392:	1d1a      	adds	r2, r3, #4
 801f394:	681b      	ldr	r3, [r3, #0]
 801f396:	9203      	str	r2, [sp, #12]
 801f398:	2b00      	cmp	r3, #0
 801f39a:	bfb8      	it	lt
 801f39c:	f04f 33ff 	movlt.w	r3, #4294967295
 801f3a0:	3402      	adds	r4, #2
 801f3a2:	9305      	str	r3, [sp, #20]
 801f3a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801f470 <_svfiprintf_r+0x1fc>
 801f3a8:	7821      	ldrb	r1, [r4, #0]
 801f3aa:	2203      	movs	r2, #3
 801f3ac:	4650      	mov	r0, sl
 801f3ae:	f7e0 ff37 	bl	8000220 <memchr>
 801f3b2:	b140      	cbz	r0, 801f3c6 <_svfiprintf_r+0x152>
 801f3b4:	2340      	movs	r3, #64	; 0x40
 801f3b6:	eba0 000a 	sub.w	r0, r0, sl
 801f3ba:	fa03 f000 	lsl.w	r0, r3, r0
 801f3be:	9b04      	ldr	r3, [sp, #16]
 801f3c0:	4303      	orrs	r3, r0
 801f3c2:	3401      	adds	r4, #1
 801f3c4:	9304      	str	r3, [sp, #16]
 801f3c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f3ca:	4826      	ldr	r0, [pc, #152]	; (801f464 <_svfiprintf_r+0x1f0>)
 801f3cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f3d0:	2206      	movs	r2, #6
 801f3d2:	f7e0 ff25 	bl	8000220 <memchr>
 801f3d6:	2800      	cmp	r0, #0
 801f3d8:	d038      	beq.n	801f44c <_svfiprintf_r+0x1d8>
 801f3da:	4b23      	ldr	r3, [pc, #140]	; (801f468 <_svfiprintf_r+0x1f4>)
 801f3dc:	bb1b      	cbnz	r3, 801f426 <_svfiprintf_r+0x1b2>
 801f3de:	9b03      	ldr	r3, [sp, #12]
 801f3e0:	3307      	adds	r3, #7
 801f3e2:	f023 0307 	bic.w	r3, r3, #7
 801f3e6:	3308      	adds	r3, #8
 801f3e8:	9303      	str	r3, [sp, #12]
 801f3ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f3ec:	4433      	add	r3, r6
 801f3ee:	9309      	str	r3, [sp, #36]	; 0x24
 801f3f0:	e767      	b.n	801f2c2 <_svfiprintf_r+0x4e>
 801f3f2:	fb0c 3202 	mla	r2, ip, r2, r3
 801f3f6:	460c      	mov	r4, r1
 801f3f8:	2001      	movs	r0, #1
 801f3fa:	e7a5      	b.n	801f348 <_svfiprintf_r+0xd4>
 801f3fc:	2300      	movs	r3, #0
 801f3fe:	3401      	adds	r4, #1
 801f400:	9305      	str	r3, [sp, #20]
 801f402:	4619      	mov	r1, r3
 801f404:	f04f 0c0a 	mov.w	ip, #10
 801f408:	4620      	mov	r0, r4
 801f40a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f40e:	3a30      	subs	r2, #48	; 0x30
 801f410:	2a09      	cmp	r2, #9
 801f412:	d903      	bls.n	801f41c <_svfiprintf_r+0x1a8>
 801f414:	2b00      	cmp	r3, #0
 801f416:	d0c5      	beq.n	801f3a4 <_svfiprintf_r+0x130>
 801f418:	9105      	str	r1, [sp, #20]
 801f41a:	e7c3      	b.n	801f3a4 <_svfiprintf_r+0x130>
 801f41c:	fb0c 2101 	mla	r1, ip, r1, r2
 801f420:	4604      	mov	r4, r0
 801f422:	2301      	movs	r3, #1
 801f424:	e7f0      	b.n	801f408 <_svfiprintf_r+0x194>
 801f426:	ab03      	add	r3, sp, #12
 801f428:	9300      	str	r3, [sp, #0]
 801f42a:	462a      	mov	r2, r5
 801f42c:	4b0f      	ldr	r3, [pc, #60]	; (801f46c <_svfiprintf_r+0x1f8>)
 801f42e:	a904      	add	r1, sp, #16
 801f430:	4638      	mov	r0, r7
 801f432:	f7fb fa7f 	bl	801a934 <_printf_float>
 801f436:	1c42      	adds	r2, r0, #1
 801f438:	4606      	mov	r6, r0
 801f43a:	d1d6      	bne.n	801f3ea <_svfiprintf_r+0x176>
 801f43c:	89ab      	ldrh	r3, [r5, #12]
 801f43e:	065b      	lsls	r3, r3, #25
 801f440:	f53f af2c 	bmi.w	801f29c <_svfiprintf_r+0x28>
 801f444:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f446:	b01d      	add	sp, #116	; 0x74
 801f448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f44c:	ab03      	add	r3, sp, #12
 801f44e:	9300      	str	r3, [sp, #0]
 801f450:	462a      	mov	r2, r5
 801f452:	4b06      	ldr	r3, [pc, #24]	; (801f46c <_svfiprintf_r+0x1f8>)
 801f454:	a904      	add	r1, sp, #16
 801f456:	4638      	mov	r0, r7
 801f458:	f7fb fd10 	bl	801ae7c <_printf_i>
 801f45c:	e7eb      	b.n	801f436 <_svfiprintf_r+0x1c2>
 801f45e:	bf00      	nop
 801f460:	080225bc 	.word	0x080225bc
 801f464:	080225c6 	.word	0x080225c6
 801f468:	0801a935 	.word	0x0801a935
 801f46c:	0801f1bd 	.word	0x0801f1bd
 801f470:	080225c2 	.word	0x080225c2

0801f474 <_sungetc_r>:
 801f474:	b538      	push	{r3, r4, r5, lr}
 801f476:	1c4b      	adds	r3, r1, #1
 801f478:	4614      	mov	r4, r2
 801f47a:	d103      	bne.n	801f484 <_sungetc_r+0x10>
 801f47c:	f04f 35ff 	mov.w	r5, #4294967295
 801f480:	4628      	mov	r0, r5
 801f482:	bd38      	pop	{r3, r4, r5, pc}
 801f484:	8993      	ldrh	r3, [r2, #12]
 801f486:	f023 0320 	bic.w	r3, r3, #32
 801f48a:	8193      	strh	r3, [r2, #12]
 801f48c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f48e:	6852      	ldr	r2, [r2, #4]
 801f490:	b2cd      	uxtb	r5, r1
 801f492:	b18b      	cbz	r3, 801f4b8 <_sungetc_r+0x44>
 801f494:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801f496:	4293      	cmp	r3, r2
 801f498:	dd08      	ble.n	801f4ac <_sungetc_r+0x38>
 801f49a:	6823      	ldr	r3, [r4, #0]
 801f49c:	1e5a      	subs	r2, r3, #1
 801f49e:	6022      	str	r2, [r4, #0]
 801f4a0:	f803 5c01 	strb.w	r5, [r3, #-1]
 801f4a4:	6863      	ldr	r3, [r4, #4]
 801f4a6:	3301      	adds	r3, #1
 801f4a8:	6063      	str	r3, [r4, #4]
 801f4aa:	e7e9      	b.n	801f480 <_sungetc_r+0xc>
 801f4ac:	4621      	mov	r1, r4
 801f4ae:	f000 fca5 	bl	801fdfc <__submore>
 801f4b2:	2800      	cmp	r0, #0
 801f4b4:	d0f1      	beq.n	801f49a <_sungetc_r+0x26>
 801f4b6:	e7e1      	b.n	801f47c <_sungetc_r+0x8>
 801f4b8:	6921      	ldr	r1, [r4, #16]
 801f4ba:	6823      	ldr	r3, [r4, #0]
 801f4bc:	b151      	cbz	r1, 801f4d4 <_sungetc_r+0x60>
 801f4be:	4299      	cmp	r1, r3
 801f4c0:	d208      	bcs.n	801f4d4 <_sungetc_r+0x60>
 801f4c2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801f4c6:	42a9      	cmp	r1, r5
 801f4c8:	d104      	bne.n	801f4d4 <_sungetc_r+0x60>
 801f4ca:	3b01      	subs	r3, #1
 801f4cc:	3201      	adds	r2, #1
 801f4ce:	6023      	str	r3, [r4, #0]
 801f4d0:	6062      	str	r2, [r4, #4]
 801f4d2:	e7d5      	b.n	801f480 <_sungetc_r+0xc>
 801f4d4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801f4d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f4dc:	6363      	str	r3, [r4, #52]	; 0x34
 801f4de:	2303      	movs	r3, #3
 801f4e0:	63a3      	str	r3, [r4, #56]	; 0x38
 801f4e2:	4623      	mov	r3, r4
 801f4e4:	f803 5f46 	strb.w	r5, [r3, #70]!
 801f4e8:	6023      	str	r3, [r4, #0]
 801f4ea:	2301      	movs	r3, #1
 801f4ec:	e7dc      	b.n	801f4a8 <_sungetc_r+0x34>

0801f4ee <__ssrefill_r>:
 801f4ee:	b510      	push	{r4, lr}
 801f4f0:	460c      	mov	r4, r1
 801f4f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801f4f4:	b169      	cbz	r1, 801f512 <__ssrefill_r+0x24>
 801f4f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f4fa:	4299      	cmp	r1, r3
 801f4fc:	d001      	beq.n	801f502 <__ssrefill_r+0x14>
 801f4fe:	f7fb f8cf 	bl	801a6a0 <_free_r>
 801f502:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f504:	6063      	str	r3, [r4, #4]
 801f506:	2000      	movs	r0, #0
 801f508:	6360      	str	r0, [r4, #52]	; 0x34
 801f50a:	b113      	cbz	r3, 801f512 <__ssrefill_r+0x24>
 801f50c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801f50e:	6023      	str	r3, [r4, #0]
 801f510:	bd10      	pop	{r4, pc}
 801f512:	6923      	ldr	r3, [r4, #16]
 801f514:	6023      	str	r3, [r4, #0]
 801f516:	2300      	movs	r3, #0
 801f518:	6063      	str	r3, [r4, #4]
 801f51a:	89a3      	ldrh	r3, [r4, #12]
 801f51c:	f043 0320 	orr.w	r3, r3, #32
 801f520:	81a3      	strh	r3, [r4, #12]
 801f522:	f04f 30ff 	mov.w	r0, #4294967295
 801f526:	e7f3      	b.n	801f510 <__ssrefill_r+0x22>

0801f528 <__ssvfiscanf_r>:
 801f528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f52c:	460c      	mov	r4, r1
 801f52e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801f532:	2100      	movs	r1, #0
 801f534:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801f538:	49b2      	ldr	r1, [pc, #712]	; (801f804 <__ssvfiscanf_r+0x2dc>)
 801f53a:	91a0      	str	r1, [sp, #640]	; 0x280
 801f53c:	f10d 0804 	add.w	r8, sp, #4
 801f540:	49b1      	ldr	r1, [pc, #708]	; (801f808 <__ssvfiscanf_r+0x2e0>)
 801f542:	4fb2      	ldr	r7, [pc, #712]	; (801f80c <__ssvfiscanf_r+0x2e4>)
 801f544:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801f810 <__ssvfiscanf_r+0x2e8>
 801f548:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801f54c:	4606      	mov	r6, r0
 801f54e:	91a1      	str	r1, [sp, #644]	; 0x284
 801f550:	9300      	str	r3, [sp, #0]
 801f552:	f892 a000 	ldrb.w	sl, [r2]
 801f556:	f1ba 0f00 	cmp.w	sl, #0
 801f55a:	f000 8151 	beq.w	801f800 <__ssvfiscanf_r+0x2d8>
 801f55e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801f562:	f013 0308 	ands.w	r3, r3, #8
 801f566:	f102 0501 	add.w	r5, r2, #1
 801f56a:	d019      	beq.n	801f5a0 <__ssvfiscanf_r+0x78>
 801f56c:	6863      	ldr	r3, [r4, #4]
 801f56e:	2b00      	cmp	r3, #0
 801f570:	dd0f      	ble.n	801f592 <__ssvfiscanf_r+0x6a>
 801f572:	6823      	ldr	r3, [r4, #0]
 801f574:	781a      	ldrb	r2, [r3, #0]
 801f576:	5cba      	ldrb	r2, [r7, r2]
 801f578:	0712      	lsls	r2, r2, #28
 801f57a:	d401      	bmi.n	801f580 <__ssvfiscanf_r+0x58>
 801f57c:	462a      	mov	r2, r5
 801f57e:	e7e8      	b.n	801f552 <__ssvfiscanf_r+0x2a>
 801f580:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801f582:	3201      	adds	r2, #1
 801f584:	9245      	str	r2, [sp, #276]	; 0x114
 801f586:	6862      	ldr	r2, [r4, #4]
 801f588:	3301      	adds	r3, #1
 801f58a:	3a01      	subs	r2, #1
 801f58c:	6062      	str	r2, [r4, #4]
 801f58e:	6023      	str	r3, [r4, #0]
 801f590:	e7ec      	b.n	801f56c <__ssvfiscanf_r+0x44>
 801f592:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801f594:	4621      	mov	r1, r4
 801f596:	4630      	mov	r0, r6
 801f598:	4798      	blx	r3
 801f59a:	2800      	cmp	r0, #0
 801f59c:	d0e9      	beq.n	801f572 <__ssvfiscanf_r+0x4a>
 801f59e:	e7ed      	b.n	801f57c <__ssvfiscanf_r+0x54>
 801f5a0:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801f5a4:	f040 8083 	bne.w	801f6ae <__ssvfiscanf_r+0x186>
 801f5a8:	9341      	str	r3, [sp, #260]	; 0x104
 801f5aa:	9343      	str	r3, [sp, #268]	; 0x10c
 801f5ac:	7853      	ldrb	r3, [r2, #1]
 801f5ae:	2b2a      	cmp	r3, #42	; 0x2a
 801f5b0:	bf02      	ittt	eq
 801f5b2:	2310      	moveq	r3, #16
 801f5b4:	1c95      	addeq	r5, r2, #2
 801f5b6:	9341      	streq	r3, [sp, #260]	; 0x104
 801f5b8:	220a      	movs	r2, #10
 801f5ba:	46ab      	mov	fp, r5
 801f5bc:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801f5c0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801f5c4:	2b09      	cmp	r3, #9
 801f5c6:	d91d      	bls.n	801f604 <__ssvfiscanf_r+0xdc>
 801f5c8:	4891      	ldr	r0, [pc, #580]	; (801f810 <__ssvfiscanf_r+0x2e8>)
 801f5ca:	2203      	movs	r2, #3
 801f5cc:	f7e0 fe28 	bl	8000220 <memchr>
 801f5d0:	b140      	cbz	r0, 801f5e4 <__ssvfiscanf_r+0xbc>
 801f5d2:	2301      	movs	r3, #1
 801f5d4:	eba0 0009 	sub.w	r0, r0, r9
 801f5d8:	fa03 f000 	lsl.w	r0, r3, r0
 801f5dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801f5de:	4318      	orrs	r0, r3
 801f5e0:	9041      	str	r0, [sp, #260]	; 0x104
 801f5e2:	465d      	mov	r5, fp
 801f5e4:	f815 3b01 	ldrb.w	r3, [r5], #1
 801f5e8:	2b78      	cmp	r3, #120	; 0x78
 801f5ea:	d806      	bhi.n	801f5fa <__ssvfiscanf_r+0xd2>
 801f5ec:	2b57      	cmp	r3, #87	; 0x57
 801f5ee:	d810      	bhi.n	801f612 <__ssvfiscanf_r+0xea>
 801f5f0:	2b25      	cmp	r3, #37	; 0x25
 801f5f2:	d05c      	beq.n	801f6ae <__ssvfiscanf_r+0x186>
 801f5f4:	d856      	bhi.n	801f6a4 <__ssvfiscanf_r+0x17c>
 801f5f6:	2b00      	cmp	r3, #0
 801f5f8:	d074      	beq.n	801f6e4 <__ssvfiscanf_r+0x1bc>
 801f5fa:	2303      	movs	r3, #3
 801f5fc:	9347      	str	r3, [sp, #284]	; 0x11c
 801f5fe:	230a      	movs	r3, #10
 801f600:	9342      	str	r3, [sp, #264]	; 0x108
 801f602:	e081      	b.n	801f708 <__ssvfiscanf_r+0x1e0>
 801f604:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801f606:	fb02 1303 	mla	r3, r2, r3, r1
 801f60a:	3b30      	subs	r3, #48	; 0x30
 801f60c:	9343      	str	r3, [sp, #268]	; 0x10c
 801f60e:	465d      	mov	r5, fp
 801f610:	e7d3      	b.n	801f5ba <__ssvfiscanf_r+0x92>
 801f612:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801f616:	2a20      	cmp	r2, #32
 801f618:	d8ef      	bhi.n	801f5fa <__ssvfiscanf_r+0xd2>
 801f61a:	a101      	add	r1, pc, #4	; (adr r1, 801f620 <__ssvfiscanf_r+0xf8>)
 801f61c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801f620:	0801f6f3 	.word	0x0801f6f3
 801f624:	0801f5fb 	.word	0x0801f5fb
 801f628:	0801f5fb 	.word	0x0801f5fb
 801f62c:	0801f751 	.word	0x0801f751
 801f630:	0801f5fb 	.word	0x0801f5fb
 801f634:	0801f5fb 	.word	0x0801f5fb
 801f638:	0801f5fb 	.word	0x0801f5fb
 801f63c:	0801f5fb 	.word	0x0801f5fb
 801f640:	0801f5fb 	.word	0x0801f5fb
 801f644:	0801f5fb 	.word	0x0801f5fb
 801f648:	0801f5fb 	.word	0x0801f5fb
 801f64c:	0801f767 	.word	0x0801f767
 801f650:	0801f73d 	.word	0x0801f73d
 801f654:	0801f6ab 	.word	0x0801f6ab
 801f658:	0801f6ab 	.word	0x0801f6ab
 801f65c:	0801f6ab 	.word	0x0801f6ab
 801f660:	0801f5fb 	.word	0x0801f5fb
 801f664:	0801f741 	.word	0x0801f741
 801f668:	0801f5fb 	.word	0x0801f5fb
 801f66c:	0801f5fb 	.word	0x0801f5fb
 801f670:	0801f5fb 	.word	0x0801f5fb
 801f674:	0801f5fb 	.word	0x0801f5fb
 801f678:	0801f777 	.word	0x0801f777
 801f67c:	0801f749 	.word	0x0801f749
 801f680:	0801f6eb 	.word	0x0801f6eb
 801f684:	0801f5fb 	.word	0x0801f5fb
 801f688:	0801f5fb 	.word	0x0801f5fb
 801f68c:	0801f773 	.word	0x0801f773
 801f690:	0801f5fb 	.word	0x0801f5fb
 801f694:	0801f73d 	.word	0x0801f73d
 801f698:	0801f5fb 	.word	0x0801f5fb
 801f69c:	0801f5fb 	.word	0x0801f5fb
 801f6a0:	0801f6f3 	.word	0x0801f6f3
 801f6a4:	3b45      	subs	r3, #69	; 0x45
 801f6a6:	2b02      	cmp	r3, #2
 801f6a8:	d8a7      	bhi.n	801f5fa <__ssvfiscanf_r+0xd2>
 801f6aa:	2305      	movs	r3, #5
 801f6ac:	e02b      	b.n	801f706 <__ssvfiscanf_r+0x1de>
 801f6ae:	6863      	ldr	r3, [r4, #4]
 801f6b0:	2b00      	cmp	r3, #0
 801f6b2:	dd0d      	ble.n	801f6d0 <__ssvfiscanf_r+0x1a8>
 801f6b4:	6823      	ldr	r3, [r4, #0]
 801f6b6:	781a      	ldrb	r2, [r3, #0]
 801f6b8:	4552      	cmp	r2, sl
 801f6ba:	f040 80a1 	bne.w	801f800 <__ssvfiscanf_r+0x2d8>
 801f6be:	3301      	adds	r3, #1
 801f6c0:	6862      	ldr	r2, [r4, #4]
 801f6c2:	6023      	str	r3, [r4, #0]
 801f6c4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801f6c6:	3a01      	subs	r2, #1
 801f6c8:	3301      	adds	r3, #1
 801f6ca:	6062      	str	r2, [r4, #4]
 801f6cc:	9345      	str	r3, [sp, #276]	; 0x114
 801f6ce:	e755      	b.n	801f57c <__ssvfiscanf_r+0x54>
 801f6d0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801f6d2:	4621      	mov	r1, r4
 801f6d4:	4630      	mov	r0, r6
 801f6d6:	4798      	blx	r3
 801f6d8:	2800      	cmp	r0, #0
 801f6da:	d0eb      	beq.n	801f6b4 <__ssvfiscanf_r+0x18c>
 801f6dc:	9844      	ldr	r0, [sp, #272]	; 0x110
 801f6de:	2800      	cmp	r0, #0
 801f6e0:	f040 8084 	bne.w	801f7ec <__ssvfiscanf_r+0x2c4>
 801f6e4:	f04f 30ff 	mov.w	r0, #4294967295
 801f6e8:	e086      	b.n	801f7f8 <__ssvfiscanf_r+0x2d0>
 801f6ea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801f6ec:	f042 0220 	orr.w	r2, r2, #32
 801f6f0:	9241      	str	r2, [sp, #260]	; 0x104
 801f6f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801f6f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f6f8:	9241      	str	r2, [sp, #260]	; 0x104
 801f6fa:	2210      	movs	r2, #16
 801f6fc:	2b6f      	cmp	r3, #111	; 0x6f
 801f6fe:	9242      	str	r2, [sp, #264]	; 0x108
 801f700:	bf34      	ite	cc
 801f702:	2303      	movcc	r3, #3
 801f704:	2304      	movcs	r3, #4
 801f706:	9347      	str	r3, [sp, #284]	; 0x11c
 801f708:	6863      	ldr	r3, [r4, #4]
 801f70a:	2b00      	cmp	r3, #0
 801f70c:	dd41      	ble.n	801f792 <__ssvfiscanf_r+0x26a>
 801f70e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801f710:	0659      	lsls	r1, r3, #25
 801f712:	d404      	bmi.n	801f71e <__ssvfiscanf_r+0x1f6>
 801f714:	6823      	ldr	r3, [r4, #0]
 801f716:	781a      	ldrb	r2, [r3, #0]
 801f718:	5cba      	ldrb	r2, [r7, r2]
 801f71a:	0712      	lsls	r2, r2, #28
 801f71c:	d440      	bmi.n	801f7a0 <__ssvfiscanf_r+0x278>
 801f71e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801f720:	2b02      	cmp	r3, #2
 801f722:	dc4f      	bgt.n	801f7c4 <__ssvfiscanf_r+0x29c>
 801f724:	466b      	mov	r3, sp
 801f726:	4622      	mov	r2, r4
 801f728:	a941      	add	r1, sp, #260	; 0x104
 801f72a:	4630      	mov	r0, r6
 801f72c:	f000 f9ce 	bl	801facc <_scanf_chars>
 801f730:	2801      	cmp	r0, #1
 801f732:	d065      	beq.n	801f800 <__ssvfiscanf_r+0x2d8>
 801f734:	2802      	cmp	r0, #2
 801f736:	f47f af21 	bne.w	801f57c <__ssvfiscanf_r+0x54>
 801f73a:	e7cf      	b.n	801f6dc <__ssvfiscanf_r+0x1b4>
 801f73c:	220a      	movs	r2, #10
 801f73e:	e7dd      	b.n	801f6fc <__ssvfiscanf_r+0x1d4>
 801f740:	2300      	movs	r3, #0
 801f742:	9342      	str	r3, [sp, #264]	; 0x108
 801f744:	2303      	movs	r3, #3
 801f746:	e7de      	b.n	801f706 <__ssvfiscanf_r+0x1de>
 801f748:	2308      	movs	r3, #8
 801f74a:	9342      	str	r3, [sp, #264]	; 0x108
 801f74c:	2304      	movs	r3, #4
 801f74e:	e7da      	b.n	801f706 <__ssvfiscanf_r+0x1de>
 801f750:	4629      	mov	r1, r5
 801f752:	4640      	mov	r0, r8
 801f754:	f000 fb18 	bl	801fd88 <__sccl>
 801f758:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801f75a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f75e:	9341      	str	r3, [sp, #260]	; 0x104
 801f760:	4605      	mov	r5, r0
 801f762:	2301      	movs	r3, #1
 801f764:	e7cf      	b.n	801f706 <__ssvfiscanf_r+0x1de>
 801f766:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801f768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f76c:	9341      	str	r3, [sp, #260]	; 0x104
 801f76e:	2300      	movs	r3, #0
 801f770:	e7c9      	b.n	801f706 <__ssvfiscanf_r+0x1de>
 801f772:	2302      	movs	r3, #2
 801f774:	e7c7      	b.n	801f706 <__ssvfiscanf_r+0x1de>
 801f776:	9841      	ldr	r0, [sp, #260]	; 0x104
 801f778:	06c3      	lsls	r3, r0, #27
 801f77a:	f53f aeff 	bmi.w	801f57c <__ssvfiscanf_r+0x54>
 801f77e:	9b00      	ldr	r3, [sp, #0]
 801f780:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801f782:	1d19      	adds	r1, r3, #4
 801f784:	9100      	str	r1, [sp, #0]
 801f786:	681b      	ldr	r3, [r3, #0]
 801f788:	07c0      	lsls	r0, r0, #31
 801f78a:	bf4c      	ite	mi
 801f78c:	801a      	strhmi	r2, [r3, #0]
 801f78e:	601a      	strpl	r2, [r3, #0]
 801f790:	e6f4      	b.n	801f57c <__ssvfiscanf_r+0x54>
 801f792:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801f794:	4621      	mov	r1, r4
 801f796:	4630      	mov	r0, r6
 801f798:	4798      	blx	r3
 801f79a:	2800      	cmp	r0, #0
 801f79c:	d0b7      	beq.n	801f70e <__ssvfiscanf_r+0x1e6>
 801f79e:	e79d      	b.n	801f6dc <__ssvfiscanf_r+0x1b4>
 801f7a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801f7a2:	3201      	adds	r2, #1
 801f7a4:	9245      	str	r2, [sp, #276]	; 0x114
 801f7a6:	6862      	ldr	r2, [r4, #4]
 801f7a8:	3a01      	subs	r2, #1
 801f7aa:	2a00      	cmp	r2, #0
 801f7ac:	6062      	str	r2, [r4, #4]
 801f7ae:	dd02      	ble.n	801f7b6 <__ssvfiscanf_r+0x28e>
 801f7b0:	3301      	adds	r3, #1
 801f7b2:	6023      	str	r3, [r4, #0]
 801f7b4:	e7ae      	b.n	801f714 <__ssvfiscanf_r+0x1ec>
 801f7b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801f7b8:	4621      	mov	r1, r4
 801f7ba:	4630      	mov	r0, r6
 801f7bc:	4798      	blx	r3
 801f7be:	2800      	cmp	r0, #0
 801f7c0:	d0a8      	beq.n	801f714 <__ssvfiscanf_r+0x1ec>
 801f7c2:	e78b      	b.n	801f6dc <__ssvfiscanf_r+0x1b4>
 801f7c4:	2b04      	cmp	r3, #4
 801f7c6:	dc06      	bgt.n	801f7d6 <__ssvfiscanf_r+0x2ae>
 801f7c8:	466b      	mov	r3, sp
 801f7ca:	4622      	mov	r2, r4
 801f7cc:	a941      	add	r1, sp, #260	; 0x104
 801f7ce:	4630      	mov	r0, r6
 801f7d0:	f000 f9d4 	bl	801fb7c <_scanf_i>
 801f7d4:	e7ac      	b.n	801f730 <__ssvfiscanf_r+0x208>
 801f7d6:	4b0f      	ldr	r3, [pc, #60]	; (801f814 <__ssvfiscanf_r+0x2ec>)
 801f7d8:	2b00      	cmp	r3, #0
 801f7da:	f43f aecf 	beq.w	801f57c <__ssvfiscanf_r+0x54>
 801f7de:	466b      	mov	r3, sp
 801f7e0:	4622      	mov	r2, r4
 801f7e2:	a941      	add	r1, sp, #260	; 0x104
 801f7e4:	4630      	mov	r0, r6
 801f7e6:	f7fb fc6f 	bl	801b0c8 <_scanf_float>
 801f7ea:	e7a1      	b.n	801f730 <__ssvfiscanf_r+0x208>
 801f7ec:	89a3      	ldrh	r3, [r4, #12]
 801f7ee:	f013 0f40 	tst.w	r3, #64	; 0x40
 801f7f2:	bf18      	it	ne
 801f7f4:	f04f 30ff 	movne.w	r0, #4294967295
 801f7f8:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801f7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f800:	9844      	ldr	r0, [sp, #272]	; 0x110
 801f802:	e7f9      	b.n	801f7f8 <__ssvfiscanf_r+0x2d0>
 801f804:	0801f475 	.word	0x0801f475
 801f808:	0801f4ef 	.word	0x0801f4ef
 801f80c:	08021f61 	.word	0x08021f61
 801f810:	080225c2 	.word	0x080225c2
 801f814:	0801b0c9 	.word	0x0801b0c9

0801f818 <__sfputc_r>:
 801f818:	6893      	ldr	r3, [r2, #8]
 801f81a:	3b01      	subs	r3, #1
 801f81c:	2b00      	cmp	r3, #0
 801f81e:	b410      	push	{r4}
 801f820:	6093      	str	r3, [r2, #8]
 801f822:	da08      	bge.n	801f836 <__sfputc_r+0x1e>
 801f824:	6994      	ldr	r4, [r2, #24]
 801f826:	42a3      	cmp	r3, r4
 801f828:	db01      	blt.n	801f82e <__sfputc_r+0x16>
 801f82a:	290a      	cmp	r1, #10
 801f82c:	d103      	bne.n	801f836 <__sfputc_r+0x1e>
 801f82e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f832:	f7fd ba75 	b.w	801cd20 <__swbuf_r>
 801f836:	6813      	ldr	r3, [r2, #0]
 801f838:	1c58      	adds	r0, r3, #1
 801f83a:	6010      	str	r0, [r2, #0]
 801f83c:	7019      	strb	r1, [r3, #0]
 801f83e:	4608      	mov	r0, r1
 801f840:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f844:	4770      	bx	lr

0801f846 <__sfputs_r>:
 801f846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f848:	4606      	mov	r6, r0
 801f84a:	460f      	mov	r7, r1
 801f84c:	4614      	mov	r4, r2
 801f84e:	18d5      	adds	r5, r2, r3
 801f850:	42ac      	cmp	r4, r5
 801f852:	d101      	bne.n	801f858 <__sfputs_r+0x12>
 801f854:	2000      	movs	r0, #0
 801f856:	e007      	b.n	801f868 <__sfputs_r+0x22>
 801f858:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f85c:	463a      	mov	r2, r7
 801f85e:	4630      	mov	r0, r6
 801f860:	f7ff ffda 	bl	801f818 <__sfputc_r>
 801f864:	1c43      	adds	r3, r0, #1
 801f866:	d1f3      	bne.n	801f850 <__sfputs_r+0xa>
 801f868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f86c <_vfiprintf_r>:
 801f86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f870:	460d      	mov	r5, r1
 801f872:	b09d      	sub	sp, #116	; 0x74
 801f874:	4614      	mov	r4, r2
 801f876:	4698      	mov	r8, r3
 801f878:	4606      	mov	r6, r0
 801f87a:	b118      	cbz	r0, 801f884 <_vfiprintf_r+0x18>
 801f87c:	6983      	ldr	r3, [r0, #24]
 801f87e:	b90b      	cbnz	r3, 801f884 <_vfiprintf_r+0x18>
 801f880:	f7fa fa6c 	bl	8019d5c <__sinit>
 801f884:	4b89      	ldr	r3, [pc, #548]	; (801faac <_vfiprintf_r+0x240>)
 801f886:	429d      	cmp	r5, r3
 801f888:	d11b      	bne.n	801f8c2 <_vfiprintf_r+0x56>
 801f88a:	6875      	ldr	r5, [r6, #4]
 801f88c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f88e:	07d9      	lsls	r1, r3, #31
 801f890:	d405      	bmi.n	801f89e <_vfiprintf_r+0x32>
 801f892:	89ab      	ldrh	r3, [r5, #12]
 801f894:	059a      	lsls	r2, r3, #22
 801f896:	d402      	bmi.n	801f89e <_vfiprintf_r+0x32>
 801f898:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f89a:	f7fa fc3f 	bl	801a11c <__retarget_lock_acquire_recursive>
 801f89e:	89ab      	ldrh	r3, [r5, #12]
 801f8a0:	071b      	lsls	r3, r3, #28
 801f8a2:	d501      	bpl.n	801f8a8 <_vfiprintf_r+0x3c>
 801f8a4:	692b      	ldr	r3, [r5, #16]
 801f8a6:	b9eb      	cbnz	r3, 801f8e4 <_vfiprintf_r+0x78>
 801f8a8:	4629      	mov	r1, r5
 801f8aa:	4630      	mov	r0, r6
 801f8ac:	f7fd fa9c 	bl	801cde8 <__swsetup_r>
 801f8b0:	b1c0      	cbz	r0, 801f8e4 <_vfiprintf_r+0x78>
 801f8b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f8b4:	07dc      	lsls	r4, r3, #31
 801f8b6:	d50e      	bpl.n	801f8d6 <_vfiprintf_r+0x6a>
 801f8b8:	f04f 30ff 	mov.w	r0, #4294967295
 801f8bc:	b01d      	add	sp, #116	; 0x74
 801f8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8c2:	4b7b      	ldr	r3, [pc, #492]	; (801fab0 <_vfiprintf_r+0x244>)
 801f8c4:	429d      	cmp	r5, r3
 801f8c6:	d101      	bne.n	801f8cc <_vfiprintf_r+0x60>
 801f8c8:	68b5      	ldr	r5, [r6, #8]
 801f8ca:	e7df      	b.n	801f88c <_vfiprintf_r+0x20>
 801f8cc:	4b79      	ldr	r3, [pc, #484]	; (801fab4 <_vfiprintf_r+0x248>)
 801f8ce:	429d      	cmp	r5, r3
 801f8d0:	bf08      	it	eq
 801f8d2:	68f5      	ldreq	r5, [r6, #12]
 801f8d4:	e7da      	b.n	801f88c <_vfiprintf_r+0x20>
 801f8d6:	89ab      	ldrh	r3, [r5, #12]
 801f8d8:	0598      	lsls	r0, r3, #22
 801f8da:	d4ed      	bmi.n	801f8b8 <_vfiprintf_r+0x4c>
 801f8dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f8de:	f7fa fc1f 	bl	801a120 <__retarget_lock_release_recursive>
 801f8e2:	e7e9      	b.n	801f8b8 <_vfiprintf_r+0x4c>
 801f8e4:	2300      	movs	r3, #0
 801f8e6:	9309      	str	r3, [sp, #36]	; 0x24
 801f8e8:	2320      	movs	r3, #32
 801f8ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f8ee:	f8cd 800c 	str.w	r8, [sp, #12]
 801f8f2:	2330      	movs	r3, #48	; 0x30
 801f8f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801fab8 <_vfiprintf_r+0x24c>
 801f8f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f8fc:	f04f 0901 	mov.w	r9, #1
 801f900:	4623      	mov	r3, r4
 801f902:	469a      	mov	sl, r3
 801f904:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f908:	b10a      	cbz	r2, 801f90e <_vfiprintf_r+0xa2>
 801f90a:	2a25      	cmp	r2, #37	; 0x25
 801f90c:	d1f9      	bne.n	801f902 <_vfiprintf_r+0x96>
 801f90e:	ebba 0b04 	subs.w	fp, sl, r4
 801f912:	d00b      	beq.n	801f92c <_vfiprintf_r+0xc0>
 801f914:	465b      	mov	r3, fp
 801f916:	4622      	mov	r2, r4
 801f918:	4629      	mov	r1, r5
 801f91a:	4630      	mov	r0, r6
 801f91c:	f7ff ff93 	bl	801f846 <__sfputs_r>
 801f920:	3001      	adds	r0, #1
 801f922:	f000 80aa 	beq.w	801fa7a <_vfiprintf_r+0x20e>
 801f926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f928:	445a      	add	r2, fp
 801f92a:	9209      	str	r2, [sp, #36]	; 0x24
 801f92c:	f89a 3000 	ldrb.w	r3, [sl]
 801f930:	2b00      	cmp	r3, #0
 801f932:	f000 80a2 	beq.w	801fa7a <_vfiprintf_r+0x20e>
 801f936:	2300      	movs	r3, #0
 801f938:	f04f 32ff 	mov.w	r2, #4294967295
 801f93c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f940:	f10a 0a01 	add.w	sl, sl, #1
 801f944:	9304      	str	r3, [sp, #16]
 801f946:	9307      	str	r3, [sp, #28]
 801f948:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f94c:	931a      	str	r3, [sp, #104]	; 0x68
 801f94e:	4654      	mov	r4, sl
 801f950:	2205      	movs	r2, #5
 801f952:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f956:	4858      	ldr	r0, [pc, #352]	; (801fab8 <_vfiprintf_r+0x24c>)
 801f958:	f7e0 fc62 	bl	8000220 <memchr>
 801f95c:	9a04      	ldr	r2, [sp, #16]
 801f95e:	b9d8      	cbnz	r0, 801f998 <_vfiprintf_r+0x12c>
 801f960:	06d1      	lsls	r1, r2, #27
 801f962:	bf44      	itt	mi
 801f964:	2320      	movmi	r3, #32
 801f966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f96a:	0713      	lsls	r3, r2, #28
 801f96c:	bf44      	itt	mi
 801f96e:	232b      	movmi	r3, #43	; 0x2b
 801f970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f974:	f89a 3000 	ldrb.w	r3, [sl]
 801f978:	2b2a      	cmp	r3, #42	; 0x2a
 801f97a:	d015      	beq.n	801f9a8 <_vfiprintf_r+0x13c>
 801f97c:	9a07      	ldr	r2, [sp, #28]
 801f97e:	4654      	mov	r4, sl
 801f980:	2000      	movs	r0, #0
 801f982:	f04f 0c0a 	mov.w	ip, #10
 801f986:	4621      	mov	r1, r4
 801f988:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f98c:	3b30      	subs	r3, #48	; 0x30
 801f98e:	2b09      	cmp	r3, #9
 801f990:	d94e      	bls.n	801fa30 <_vfiprintf_r+0x1c4>
 801f992:	b1b0      	cbz	r0, 801f9c2 <_vfiprintf_r+0x156>
 801f994:	9207      	str	r2, [sp, #28]
 801f996:	e014      	b.n	801f9c2 <_vfiprintf_r+0x156>
 801f998:	eba0 0308 	sub.w	r3, r0, r8
 801f99c:	fa09 f303 	lsl.w	r3, r9, r3
 801f9a0:	4313      	orrs	r3, r2
 801f9a2:	9304      	str	r3, [sp, #16]
 801f9a4:	46a2      	mov	sl, r4
 801f9a6:	e7d2      	b.n	801f94e <_vfiprintf_r+0xe2>
 801f9a8:	9b03      	ldr	r3, [sp, #12]
 801f9aa:	1d19      	adds	r1, r3, #4
 801f9ac:	681b      	ldr	r3, [r3, #0]
 801f9ae:	9103      	str	r1, [sp, #12]
 801f9b0:	2b00      	cmp	r3, #0
 801f9b2:	bfbb      	ittet	lt
 801f9b4:	425b      	neglt	r3, r3
 801f9b6:	f042 0202 	orrlt.w	r2, r2, #2
 801f9ba:	9307      	strge	r3, [sp, #28]
 801f9bc:	9307      	strlt	r3, [sp, #28]
 801f9be:	bfb8      	it	lt
 801f9c0:	9204      	strlt	r2, [sp, #16]
 801f9c2:	7823      	ldrb	r3, [r4, #0]
 801f9c4:	2b2e      	cmp	r3, #46	; 0x2e
 801f9c6:	d10c      	bne.n	801f9e2 <_vfiprintf_r+0x176>
 801f9c8:	7863      	ldrb	r3, [r4, #1]
 801f9ca:	2b2a      	cmp	r3, #42	; 0x2a
 801f9cc:	d135      	bne.n	801fa3a <_vfiprintf_r+0x1ce>
 801f9ce:	9b03      	ldr	r3, [sp, #12]
 801f9d0:	1d1a      	adds	r2, r3, #4
 801f9d2:	681b      	ldr	r3, [r3, #0]
 801f9d4:	9203      	str	r2, [sp, #12]
 801f9d6:	2b00      	cmp	r3, #0
 801f9d8:	bfb8      	it	lt
 801f9da:	f04f 33ff 	movlt.w	r3, #4294967295
 801f9de:	3402      	adds	r4, #2
 801f9e0:	9305      	str	r3, [sp, #20]
 801f9e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801fac8 <_vfiprintf_r+0x25c>
 801f9e6:	7821      	ldrb	r1, [r4, #0]
 801f9e8:	2203      	movs	r2, #3
 801f9ea:	4650      	mov	r0, sl
 801f9ec:	f7e0 fc18 	bl	8000220 <memchr>
 801f9f0:	b140      	cbz	r0, 801fa04 <_vfiprintf_r+0x198>
 801f9f2:	2340      	movs	r3, #64	; 0x40
 801f9f4:	eba0 000a 	sub.w	r0, r0, sl
 801f9f8:	fa03 f000 	lsl.w	r0, r3, r0
 801f9fc:	9b04      	ldr	r3, [sp, #16]
 801f9fe:	4303      	orrs	r3, r0
 801fa00:	3401      	adds	r4, #1
 801fa02:	9304      	str	r3, [sp, #16]
 801fa04:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fa08:	482c      	ldr	r0, [pc, #176]	; (801fabc <_vfiprintf_r+0x250>)
 801fa0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fa0e:	2206      	movs	r2, #6
 801fa10:	f7e0 fc06 	bl	8000220 <memchr>
 801fa14:	2800      	cmp	r0, #0
 801fa16:	d03f      	beq.n	801fa98 <_vfiprintf_r+0x22c>
 801fa18:	4b29      	ldr	r3, [pc, #164]	; (801fac0 <_vfiprintf_r+0x254>)
 801fa1a:	bb1b      	cbnz	r3, 801fa64 <_vfiprintf_r+0x1f8>
 801fa1c:	9b03      	ldr	r3, [sp, #12]
 801fa1e:	3307      	adds	r3, #7
 801fa20:	f023 0307 	bic.w	r3, r3, #7
 801fa24:	3308      	adds	r3, #8
 801fa26:	9303      	str	r3, [sp, #12]
 801fa28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa2a:	443b      	add	r3, r7
 801fa2c:	9309      	str	r3, [sp, #36]	; 0x24
 801fa2e:	e767      	b.n	801f900 <_vfiprintf_r+0x94>
 801fa30:	fb0c 3202 	mla	r2, ip, r2, r3
 801fa34:	460c      	mov	r4, r1
 801fa36:	2001      	movs	r0, #1
 801fa38:	e7a5      	b.n	801f986 <_vfiprintf_r+0x11a>
 801fa3a:	2300      	movs	r3, #0
 801fa3c:	3401      	adds	r4, #1
 801fa3e:	9305      	str	r3, [sp, #20]
 801fa40:	4619      	mov	r1, r3
 801fa42:	f04f 0c0a 	mov.w	ip, #10
 801fa46:	4620      	mov	r0, r4
 801fa48:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fa4c:	3a30      	subs	r2, #48	; 0x30
 801fa4e:	2a09      	cmp	r2, #9
 801fa50:	d903      	bls.n	801fa5a <_vfiprintf_r+0x1ee>
 801fa52:	2b00      	cmp	r3, #0
 801fa54:	d0c5      	beq.n	801f9e2 <_vfiprintf_r+0x176>
 801fa56:	9105      	str	r1, [sp, #20]
 801fa58:	e7c3      	b.n	801f9e2 <_vfiprintf_r+0x176>
 801fa5a:	fb0c 2101 	mla	r1, ip, r1, r2
 801fa5e:	4604      	mov	r4, r0
 801fa60:	2301      	movs	r3, #1
 801fa62:	e7f0      	b.n	801fa46 <_vfiprintf_r+0x1da>
 801fa64:	ab03      	add	r3, sp, #12
 801fa66:	9300      	str	r3, [sp, #0]
 801fa68:	462a      	mov	r2, r5
 801fa6a:	4b16      	ldr	r3, [pc, #88]	; (801fac4 <_vfiprintf_r+0x258>)
 801fa6c:	a904      	add	r1, sp, #16
 801fa6e:	4630      	mov	r0, r6
 801fa70:	f7fa ff60 	bl	801a934 <_printf_float>
 801fa74:	4607      	mov	r7, r0
 801fa76:	1c78      	adds	r0, r7, #1
 801fa78:	d1d6      	bne.n	801fa28 <_vfiprintf_r+0x1bc>
 801fa7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fa7c:	07d9      	lsls	r1, r3, #31
 801fa7e:	d405      	bmi.n	801fa8c <_vfiprintf_r+0x220>
 801fa80:	89ab      	ldrh	r3, [r5, #12]
 801fa82:	059a      	lsls	r2, r3, #22
 801fa84:	d402      	bmi.n	801fa8c <_vfiprintf_r+0x220>
 801fa86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fa88:	f7fa fb4a 	bl	801a120 <__retarget_lock_release_recursive>
 801fa8c:	89ab      	ldrh	r3, [r5, #12]
 801fa8e:	065b      	lsls	r3, r3, #25
 801fa90:	f53f af12 	bmi.w	801f8b8 <_vfiprintf_r+0x4c>
 801fa94:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fa96:	e711      	b.n	801f8bc <_vfiprintf_r+0x50>
 801fa98:	ab03      	add	r3, sp, #12
 801fa9a:	9300      	str	r3, [sp, #0]
 801fa9c:	462a      	mov	r2, r5
 801fa9e:	4b09      	ldr	r3, [pc, #36]	; (801fac4 <_vfiprintf_r+0x258>)
 801faa0:	a904      	add	r1, sp, #16
 801faa2:	4630      	mov	r0, r6
 801faa4:	f7fb f9ea 	bl	801ae7c <_printf_i>
 801faa8:	e7e4      	b.n	801fa74 <_vfiprintf_r+0x208>
 801faaa:	bf00      	nop
 801faac:	08022084 	.word	0x08022084
 801fab0:	080220a4 	.word	0x080220a4
 801fab4:	08022064 	.word	0x08022064
 801fab8:	080225bc 	.word	0x080225bc
 801fabc:	080225c6 	.word	0x080225c6
 801fac0:	0801a935 	.word	0x0801a935
 801fac4:	0801f847 	.word	0x0801f847
 801fac8:	080225c2 	.word	0x080225c2

0801facc <_scanf_chars>:
 801facc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fad0:	4615      	mov	r5, r2
 801fad2:	688a      	ldr	r2, [r1, #8]
 801fad4:	4680      	mov	r8, r0
 801fad6:	460c      	mov	r4, r1
 801fad8:	b932      	cbnz	r2, 801fae8 <_scanf_chars+0x1c>
 801fada:	698a      	ldr	r2, [r1, #24]
 801fadc:	2a00      	cmp	r2, #0
 801fade:	bf0c      	ite	eq
 801fae0:	2201      	moveq	r2, #1
 801fae2:	f04f 32ff 	movne.w	r2, #4294967295
 801fae6:	608a      	str	r2, [r1, #8]
 801fae8:	6822      	ldr	r2, [r4, #0]
 801faea:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801fb78 <_scanf_chars+0xac>
 801faee:	06d1      	lsls	r1, r2, #27
 801faf0:	bf5f      	itttt	pl
 801faf2:	681a      	ldrpl	r2, [r3, #0]
 801faf4:	1d11      	addpl	r1, r2, #4
 801faf6:	6019      	strpl	r1, [r3, #0]
 801faf8:	6816      	ldrpl	r6, [r2, #0]
 801fafa:	2700      	movs	r7, #0
 801fafc:	69a0      	ldr	r0, [r4, #24]
 801fafe:	b188      	cbz	r0, 801fb24 <_scanf_chars+0x58>
 801fb00:	2801      	cmp	r0, #1
 801fb02:	d107      	bne.n	801fb14 <_scanf_chars+0x48>
 801fb04:	682b      	ldr	r3, [r5, #0]
 801fb06:	781a      	ldrb	r2, [r3, #0]
 801fb08:	6963      	ldr	r3, [r4, #20]
 801fb0a:	5c9b      	ldrb	r3, [r3, r2]
 801fb0c:	b953      	cbnz	r3, 801fb24 <_scanf_chars+0x58>
 801fb0e:	bb27      	cbnz	r7, 801fb5a <_scanf_chars+0x8e>
 801fb10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fb14:	2802      	cmp	r0, #2
 801fb16:	d120      	bne.n	801fb5a <_scanf_chars+0x8e>
 801fb18:	682b      	ldr	r3, [r5, #0]
 801fb1a:	781b      	ldrb	r3, [r3, #0]
 801fb1c:	f813 3009 	ldrb.w	r3, [r3, r9]
 801fb20:	071b      	lsls	r3, r3, #28
 801fb22:	d41a      	bmi.n	801fb5a <_scanf_chars+0x8e>
 801fb24:	6823      	ldr	r3, [r4, #0]
 801fb26:	06da      	lsls	r2, r3, #27
 801fb28:	bf5e      	ittt	pl
 801fb2a:	682b      	ldrpl	r3, [r5, #0]
 801fb2c:	781b      	ldrbpl	r3, [r3, #0]
 801fb2e:	f806 3b01 	strbpl.w	r3, [r6], #1
 801fb32:	682a      	ldr	r2, [r5, #0]
 801fb34:	686b      	ldr	r3, [r5, #4]
 801fb36:	3201      	adds	r2, #1
 801fb38:	602a      	str	r2, [r5, #0]
 801fb3a:	68a2      	ldr	r2, [r4, #8]
 801fb3c:	3b01      	subs	r3, #1
 801fb3e:	3a01      	subs	r2, #1
 801fb40:	606b      	str	r3, [r5, #4]
 801fb42:	3701      	adds	r7, #1
 801fb44:	60a2      	str	r2, [r4, #8]
 801fb46:	b142      	cbz	r2, 801fb5a <_scanf_chars+0x8e>
 801fb48:	2b00      	cmp	r3, #0
 801fb4a:	dcd7      	bgt.n	801fafc <_scanf_chars+0x30>
 801fb4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801fb50:	4629      	mov	r1, r5
 801fb52:	4640      	mov	r0, r8
 801fb54:	4798      	blx	r3
 801fb56:	2800      	cmp	r0, #0
 801fb58:	d0d0      	beq.n	801fafc <_scanf_chars+0x30>
 801fb5a:	6823      	ldr	r3, [r4, #0]
 801fb5c:	f013 0310 	ands.w	r3, r3, #16
 801fb60:	d105      	bne.n	801fb6e <_scanf_chars+0xa2>
 801fb62:	68e2      	ldr	r2, [r4, #12]
 801fb64:	3201      	adds	r2, #1
 801fb66:	60e2      	str	r2, [r4, #12]
 801fb68:	69a2      	ldr	r2, [r4, #24]
 801fb6a:	b102      	cbz	r2, 801fb6e <_scanf_chars+0xa2>
 801fb6c:	7033      	strb	r3, [r6, #0]
 801fb6e:	6923      	ldr	r3, [r4, #16]
 801fb70:	441f      	add	r7, r3
 801fb72:	6127      	str	r7, [r4, #16]
 801fb74:	2000      	movs	r0, #0
 801fb76:	e7cb      	b.n	801fb10 <_scanf_chars+0x44>
 801fb78:	08021f61 	.word	0x08021f61

0801fb7c <_scanf_i>:
 801fb7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb80:	4698      	mov	r8, r3
 801fb82:	4b74      	ldr	r3, [pc, #464]	; (801fd54 <_scanf_i+0x1d8>)
 801fb84:	460c      	mov	r4, r1
 801fb86:	4682      	mov	sl, r0
 801fb88:	4616      	mov	r6, r2
 801fb8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801fb8e:	b087      	sub	sp, #28
 801fb90:	ab03      	add	r3, sp, #12
 801fb92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801fb96:	4b70      	ldr	r3, [pc, #448]	; (801fd58 <_scanf_i+0x1dc>)
 801fb98:	69a1      	ldr	r1, [r4, #24]
 801fb9a:	4a70      	ldr	r2, [pc, #448]	; (801fd5c <_scanf_i+0x1e0>)
 801fb9c:	2903      	cmp	r1, #3
 801fb9e:	bf18      	it	ne
 801fba0:	461a      	movne	r2, r3
 801fba2:	68a3      	ldr	r3, [r4, #8]
 801fba4:	9201      	str	r2, [sp, #4]
 801fba6:	1e5a      	subs	r2, r3, #1
 801fba8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801fbac:	bf88      	it	hi
 801fbae:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801fbb2:	4627      	mov	r7, r4
 801fbb4:	bf82      	ittt	hi
 801fbb6:	eb03 0905 	addhi.w	r9, r3, r5
 801fbba:	f240 135d 	movwhi	r3, #349	; 0x15d
 801fbbe:	60a3      	strhi	r3, [r4, #8]
 801fbc0:	f857 3b1c 	ldr.w	r3, [r7], #28
 801fbc4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801fbc8:	bf98      	it	ls
 801fbca:	f04f 0900 	movls.w	r9, #0
 801fbce:	6023      	str	r3, [r4, #0]
 801fbd0:	463d      	mov	r5, r7
 801fbd2:	f04f 0b00 	mov.w	fp, #0
 801fbd6:	6831      	ldr	r1, [r6, #0]
 801fbd8:	ab03      	add	r3, sp, #12
 801fbda:	7809      	ldrb	r1, [r1, #0]
 801fbdc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801fbe0:	2202      	movs	r2, #2
 801fbe2:	f7e0 fb1d 	bl	8000220 <memchr>
 801fbe6:	b328      	cbz	r0, 801fc34 <_scanf_i+0xb8>
 801fbe8:	f1bb 0f01 	cmp.w	fp, #1
 801fbec:	d159      	bne.n	801fca2 <_scanf_i+0x126>
 801fbee:	6862      	ldr	r2, [r4, #4]
 801fbf0:	b92a      	cbnz	r2, 801fbfe <_scanf_i+0x82>
 801fbf2:	6822      	ldr	r2, [r4, #0]
 801fbf4:	2308      	movs	r3, #8
 801fbf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fbfa:	6063      	str	r3, [r4, #4]
 801fbfc:	6022      	str	r2, [r4, #0]
 801fbfe:	6822      	ldr	r2, [r4, #0]
 801fc00:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801fc04:	6022      	str	r2, [r4, #0]
 801fc06:	68a2      	ldr	r2, [r4, #8]
 801fc08:	1e51      	subs	r1, r2, #1
 801fc0a:	60a1      	str	r1, [r4, #8]
 801fc0c:	b192      	cbz	r2, 801fc34 <_scanf_i+0xb8>
 801fc0e:	6832      	ldr	r2, [r6, #0]
 801fc10:	1c51      	adds	r1, r2, #1
 801fc12:	6031      	str	r1, [r6, #0]
 801fc14:	7812      	ldrb	r2, [r2, #0]
 801fc16:	f805 2b01 	strb.w	r2, [r5], #1
 801fc1a:	6872      	ldr	r2, [r6, #4]
 801fc1c:	3a01      	subs	r2, #1
 801fc1e:	2a00      	cmp	r2, #0
 801fc20:	6072      	str	r2, [r6, #4]
 801fc22:	dc07      	bgt.n	801fc34 <_scanf_i+0xb8>
 801fc24:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801fc28:	4631      	mov	r1, r6
 801fc2a:	4650      	mov	r0, sl
 801fc2c:	4790      	blx	r2
 801fc2e:	2800      	cmp	r0, #0
 801fc30:	f040 8085 	bne.w	801fd3e <_scanf_i+0x1c2>
 801fc34:	f10b 0b01 	add.w	fp, fp, #1
 801fc38:	f1bb 0f03 	cmp.w	fp, #3
 801fc3c:	d1cb      	bne.n	801fbd6 <_scanf_i+0x5a>
 801fc3e:	6863      	ldr	r3, [r4, #4]
 801fc40:	b90b      	cbnz	r3, 801fc46 <_scanf_i+0xca>
 801fc42:	230a      	movs	r3, #10
 801fc44:	6063      	str	r3, [r4, #4]
 801fc46:	6863      	ldr	r3, [r4, #4]
 801fc48:	4945      	ldr	r1, [pc, #276]	; (801fd60 <_scanf_i+0x1e4>)
 801fc4a:	6960      	ldr	r0, [r4, #20]
 801fc4c:	1ac9      	subs	r1, r1, r3
 801fc4e:	f000 f89b 	bl	801fd88 <__sccl>
 801fc52:	f04f 0b00 	mov.w	fp, #0
 801fc56:	68a3      	ldr	r3, [r4, #8]
 801fc58:	6822      	ldr	r2, [r4, #0]
 801fc5a:	2b00      	cmp	r3, #0
 801fc5c:	d03d      	beq.n	801fcda <_scanf_i+0x15e>
 801fc5e:	6831      	ldr	r1, [r6, #0]
 801fc60:	6960      	ldr	r0, [r4, #20]
 801fc62:	f891 c000 	ldrb.w	ip, [r1]
 801fc66:	f810 000c 	ldrb.w	r0, [r0, ip]
 801fc6a:	2800      	cmp	r0, #0
 801fc6c:	d035      	beq.n	801fcda <_scanf_i+0x15e>
 801fc6e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801fc72:	d124      	bne.n	801fcbe <_scanf_i+0x142>
 801fc74:	0510      	lsls	r0, r2, #20
 801fc76:	d522      	bpl.n	801fcbe <_scanf_i+0x142>
 801fc78:	f10b 0b01 	add.w	fp, fp, #1
 801fc7c:	f1b9 0f00 	cmp.w	r9, #0
 801fc80:	d003      	beq.n	801fc8a <_scanf_i+0x10e>
 801fc82:	3301      	adds	r3, #1
 801fc84:	f109 39ff 	add.w	r9, r9, #4294967295
 801fc88:	60a3      	str	r3, [r4, #8]
 801fc8a:	6873      	ldr	r3, [r6, #4]
 801fc8c:	3b01      	subs	r3, #1
 801fc8e:	2b00      	cmp	r3, #0
 801fc90:	6073      	str	r3, [r6, #4]
 801fc92:	dd1b      	ble.n	801fccc <_scanf_i+0x150>
 801fc94:	6833      	ldr	r3, [r6, #0]
 801fc96:	3301      	adds	r3, #1
 801fc98:	6033      	str	r3, [r6, #0]
 801fc9a:	68a3      	ldr	r3, [r4, #8]
 801fc9c:	3b01      	subs	r3, #1
 801fc9e:	60a3      	str	r3, [r4, #8]
 801fca0:	e7d9      	b.n	801fc56 <_scanf_i+0xda>
 801fca2:	f1bb 0f02 	cmp.w	fp, #2
 801fca6:	d1ae      	bne.n	801fc06 <_scanf_i+0x8a>
 801fca8:	6822      	ldr	r2, [r4, #0]
 801fcaa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801fcae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801fcb2:	d1bf      	bne.n	801fc34 <_scanf_i+0xb8>
 801fcb4:	2310      	movs	r3, #16
 801fcb6:	6063      	str	r3, [r4, #4]
 801fcb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801fcbc:	e7a2      	b.n	801fc04 <_scanf_i+0x88>
 801fcbe:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801fcc2:	6022      	str	r2, [r4, #0]
 801fcc4:	780b      	ldrb	r3, [r1, #0]
 801fcc6:	f805 3b01 	strb.w	r3, [r5], #1
 801fcca:	e7de      	b.n	801fc8a <_scanf_i+0x10e>
 801fccc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801fcd0:	4631      	mov	r1, r6
 801fcd2:	4650      	mov	r0, sl
 801fcd4:	4798      	blx	r3
 801fcd6:	2800      	cmp	r0, #0
 801fcd8:	d0df      	beq.n	801fc9a <_scanf_i+0x11e>
 801fcda:	6823      	ldr	r3, [r4, #0]
 801fcdc:	05d9      	lsls	r1, r3, #23
 801fcde:	d50d      	bpl.n	801fcfc <_scanf_i+0x180>
 801fce0:	42bd      	cmp	r5, r7
 801fce2:	d909      	bls.n	801fcf8 <_scanf_i+0x17c>
 801fce4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801fce8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801fcec:	4632      	mov	r2, r6
 801fcee:	4650      	mov	r0, sl
 801fcf0:	4798      	blx	r3
 801fcf2:	f105 39ff 	add.w	r9, r5, #4294967295
 801fcf6:	464d      	mov	r5, r9
 801fcf8:	42bd      	cmp	r5, r7
 801fcfa:	d028      	beq.n	801fd4e <_scanf_i+0x1d2>
 801fcfc:	6822      	ldr	r2, [r4, #0]
 801fcfe:	f012 0210 	ands.w	r2, r2, #16
 801fd02:	d113      	bne.n	801fd2c <_scanf_i+0x1b0>
 801fd04:	702a      	strb	r2, [r5, #0]
 801fd06:	6863      	ldr	r3, [r4, #4]
 801fd08:	9e01      	ldr	r6, [sp, #4]
 801fd0a:	4639      	mov	r1, r7
 801fd0c:	4650      	mov	r0, sl
 801fd0e:	47b0      	blx	r6
 801fd10:	f8d8 3000 	ldr.w	r3, [r8]
 801fd14:	6821      	ldr	r1, [r4, #0]
 801fd16:	1d1a      	adds	r2, r3, #4
 801fd18:	f8c8 2000 	str.w	r2, [r8]
 801fd1c:	f011 0f20 	tst.w	r1, #32
 801fd20:	681b      	ldr	r3, [r3, #0]
 801fd22:	d00f      	beq.n	801fd44 <_scanf_i+0x1c8>
 801fd24:	6018      	str	r0, [r3, #0]
 801fd26:	68e3      	ldr	r3, [r4, #12]
 801fd28:	3301      	adds	r3, #1
 801fd2a:	60e3      	str	r3, [r4, #12]
 801fd2c:	1bed      	subs	r5, r5, r7
 801fd2e:	44ab      	add	fp, r5
 801fd30:	6925      	ldr	r5, [r4, #16]
 801fd32:	445d      	add	r5, fp
 801fd34:	6125      	str	r5, [r4, #16]
 801fd36:	2000      	movs	r0, #0
 801fd38:	b007      	add	sp, #28
 801fd3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd3e:	f04f 0b00 	mov.w	fp, #0
 801fd42:	e7ca      	b.n	801fcda <_scanf_i+0x15e>
 801fd44:	07ca      	lsls	r2, r1, #31
 801fd46:	bf4c      	ite	mi
 801fd48:	8018      	strhmi	r0, [r3, #0]
 801fd4a:	6018      	strpl	r0, [r3, #0]
 801fd4c:	e7eb      	b.n	801fd26 <_scanf_i+0x1aa>
 801fd4e:	2001      	movs	r0, #1
 801fd50:	e7f2      	b.n	801fd38 <_scanf_i+0x1bc>
 801fd52:	bf00      	nop
 801fd54:	08021d88 	.word	0x08021d88
 801fd58:	0801c829 	.word	0x0801c829
 801fd5c:	0801c719 	.word	0x0801c719
 801fd60:	080225e6 	.word	0x080225e6

0801fd64 <_read_r>:
 801fd64:	b538      	push	{r3, r4, r5, lr}
 801fd66:	4d07      	ldr	r5, [pc, #28]	; (801fd84 <_read_r+0x20>)
 801fd68:	4604      	mov	r4, r0
 801fd6a:	4608      	mov	r0, r1
 801fd6c:	4611      	mov	r1, r2
 801fd6e:	2200      	movs	r2, #0
 801fd70:	602a      	str	r2, [r5, #0]
 801fd72:	461a      	mov	r2, r3
 801fd74:	f000 f8f0 	bl	801ff58 <_read>
 801fd78:	1c43      	adds	r3, r0, #1
 801fd7a:	d102      	bne.n	801fd82 <_read_r+0x1e>
 801fd7c:	682b      	ldr	r3, [r5, #0]
 801fd7e:	b103      	cbz	r3, 801fd82 <_read_r+0x1e>
 801fd80:	6023      	str	r3, [r4, #0]
 801fd82:	bd38      	pop	{r3, r4, r5, pc}
 801fd84:	20008d5c 	.word	0x20008d5c

0801fd88 <__sccl>:
 801fd88:	b570      	push	{r4, r5, r6, lr}
 801fd8a:	780b      	ldrb	r3, [r1, #0]
 801fd8c:	4604      	mov	r4, r0
 801fd8e:	2b5e      	cmp	r3, #94	; 0x5e
 801fd90:	bf0b      	itete	eq
 801fd92:	784b      	ldrbeq	r3, [r1, #1]
 801fd94:	1c48      	addne	r0, r1, #1
 801fd96:	1c88      	addeq	r0, r1, #2
 801fd98:	2200      	movne	r2, #0
 801fd9a:	bf08      	it	eq
 801fd9c:	2201      	moveq	r2, #1
 801fd9e:	1e61      	subs	r1, r4, #1
 801fda0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801fda4:	f801 2f01 	strb.w	r2, [r1, #1]!
 801fda8:	42a9      	cmp	r1, r5
 801fdaa:	d1fb      	bne.n	801fda4 <__sccl+0x1c>
 801fdac:	b90b      	cbnz	r3, 801fdb2 <__sccl+0x2a>
 801fdae:	3801      	subs	r0, #1
 801fdb0:	bd70      	pop	{r4, r5, r6, pc}
 801fdb2:	f082 0101 	eor.w	r1, r2, #1
 801fdb6:	54e1      	strb	r1, [r4, r3]
 801fdb8:	1c42      	adds	r2, r0, #1
 801fdba:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801fdbe:	2d2d      	cmp	r5, #45	; 0x2d
 801fdc0:	f102 36ff 	add.w	r6, r2, #4294967295
 801fdc4:	4610      	mov	r0, r2
 801fdc6:	d006      	beq.n	801fdd6 <__sccl+0x4e>
 801fdc8:	2d5d      	cmp	r5, #93	; 0x5d
 801fdca:	d0f1      	beq.n	801fdb0 <__sccl+0x28>
 801fdcc:	b90d      	cbnz	r5, 801fdd2 <__sccl+0x4a>
 801fdce:	4630      	mov	r0, r6
 801fdd0:	e7ee      	b.n	801fdb0 <__sccl+0x28>
 801fdd2:	462b      	mov	r3, r5
 801fdd4:	e7ef      	b.n	801fdb6 <__sccl+0x2e>
 801fdd6:	7816      	ldrb	r6, [r2, #0]
 801fdd8:	2e5d      	cmp	r6, #93	; 0x5d
 801fdda:	d0fa      	beq.n	801fdd2 <__sccl+0x4a>
 801fddc:	42b3      	cmp	r3, r6
 801fdde:	dcf8      	bgt.n	801fdd2 <__sccl+0x4a>
 801fde0:	4618      	mov	r0, r3
 801fde2:	3001      	adds	r0, #1
 801fde4:	4286      	cmp	r6, r0
 801fde6:	5421      	strb	r1, [r4, r0]
 801fde8:	dcfb      	bgt.n	801fde2 <__sccl+0x5a>
 801fdea:	43d8      	mvns	r0, r3
 801fdec:	4430      	add	r0, r6
 801fdee:	1c5d      	adds	r5, r3, #1
 801fdf0:	42b3      	cmp	r3, r6
 801fdf2:	bfa8      	it	ge
 801fdf4:	2000      	movge	r0, #0
 801fdf6:	182b      	adds	r3, r5, r0
 801fdf8:	3202      	adds	r2, #2
 801fdfa:	e7de      	b.n	801fdba <__sccl+0x32>

0801fdfc <__submore>:
 801fdfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fe00:	460c      	mov	r4, r1
 801fe02:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801fe04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fe08:	4299      	cmp	r1, r3
 801fe0a:	d11d      	bne.n	801fe48 <__submore+0x4c>
 801fe0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801fe10:	f7fa fc96 	bl	801a740 <_malloc_r>
 801fe14:	b918      	cbnz	r0, 801fe1e <__submore+0x22>
 801fe16:	f04f 30ff 	mov.w	r0, #4294967295
 801fe1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fe1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fe22:	63a3      	str	r3, [r4, #56]	; 0x38
 801fe24:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801fe28:	6360      	str	r0, [r4, #52]	; 0x34
 801fe2a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801fe2e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801fe32:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801fe36:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801fe3a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801fe3e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801fe42:	6020      	str	r0, [r4, #0]
 801fe44:	2000      	movs	r0, #0
 801fe46:	e7e8      	b.n	801fe1a <__submore+0x1e>
 801fe48:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801fe4a:	0077      	lsls	r7, r6, #1
 801fe4c:	463a      	mov	r2, r7
 801fe4e:	f7ff f98f 	bl	801f170 <_realloc_r>
 801fe52:	4605      	mov	r5, r0
 801fe54:	2800      	cmp	r0, #0
 801fe56:	d0de      	beq.n	801fe16 <__submore+0x1a>
 801fe58:	eb00 0806 	add.w	r8, r0, r6
 801fe5c:	4601      	mov	r1, r0
 801fe5e:	4632      	mov	r2, r6
 801fe60:	4640      	mov	r0, r8
 801fe62:	f7fa f96f 	bl	801a144 <memcpy>
 801fe66:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801fe6a:	f8c4 8000 	str.w	r8, [r4]
 801fe6e:	e7e9      	b.n	801fe44 <__submore+0x48>

0801fe70 <__ascii_wctomb>:
 801fe70:	b149      	cbz	r1, 801fe86 <__ascii_wctomb+0x16>
 801fe72:	2aff      	cmp	r2, #255	; 0xff
 801fe74:	bf85      	ittet	hi
 801fe76:	238a      	movhi	r3, #138	; 0x8a
 801fe78:	6003      	strhi	r3, [r0, #0]
 801fe7a:	700a      	strbls	r2, [r1, #0]
 801fe7c:	f04f 30ff 	movhi.w	r0, #4294967295
 801fe80:	bf98      	it	ls
 801fe82:	2001      	movls	r0, #1
 801fe84:	4770      	bx	lr
 801fe86:	4608      	mov	r0, r1
 801fe88:	4770      	bx	lr
	...

0801fe8c <__env_lock>:
 801fe8c:	4801      	ldr	r0, [pc, #4]	; (801fe94 <__env_lock+0x8>)
 801fe8e:	f7fa b945 	b.w	801a11c <__retarget_lock_acquire_recursive>
 801fe92:	bf00      	nop
 801fe94:	20008d52 	.word	0x20008d52

0801fe98 <__env_unlock>:
 801fe98:	4801      	ldr	r0, [pc, #4]	; (801fea0 <__env_unlock+0x8>)
 801fe9a:	f7fa b941 	b.w	801a120 <__retarget_lock_release_recursive>
 801fe9e:	bf00      	nop
 801fea0:	20008d52 	.word	0x20008d52

0801fea4 <_fstat_r>:
 801fea4:	b538      	push	{r3, r4, r5, lr}
 801fea6:	4d07      	ldr	r5, [pc, #28]	; (801fec4 <_fstat_r+0x20>)
 801fea8:	2300      	movs	r3, #0
 801feaa:	4604      	mov	r4, r0
 801feac:	4608      	mov	r0, r1
 801feae:	4611      	mov	r1, r2
 801feb0:	602b      	str	r3, [r5, #0]
 801feb2:	f000 f829 	bl	801ff08 <_fstat>
 801feb6:	1c43      	adds	r3, r0, #1
 801feb8:	d102      	bne.n	801fec0 <_fstat_r+0x1c>
 801feba:	682b      	ldr	r3, [r5, #0]
 801febc:	b103      	cbz	r3, 801fec0 <_fstat_r+0x1c>
 801febe:	6023      	str	r3, [r4, #0]
 801fec0:	bd38      	pop	{r3, r4, r5, pc}
 801fec2:	bf00      	nop
 801fec4:	20008d5c 	.word	0x20008d5c

0801fec8 <_isatty_r>:
 801fec8:	b538      	push	{r3, r4, r5, lr}
 801feca:	4d06      	ldr	r5, [pc, #24]	; (801fee4 <_isatty_r+0x1c>)
 801fecc:	2300      	movs	r3, #0
 801fece:	4604      	mov	r4, r0
 801fed0:	4608      	mov	r0, r1
 801fed2:	602b      	str	r3, [r5, #0]
 801fed4:	f000 f828 	bl	801ff28 <_isatty>
 801fed8:	1c43      	adds	r3, r0, #1
 801feda:	d102      	bne.n	801fee2 <_isatty_r+0x1a>
 801fedc:	682b      	ldr	r3, [r5, #0]
 801fede:	b103      	cbz	r3, 801fee2 <_isatty_r+0x1a>
 801fee0:	6023      	str	r3, [r4, #0]
 801fee2:	bd38      	pop	{r3, r4, r5, pc}
 801fee4:	20008d5c 	.word	0x20008d5c

0801fee8 <_malloc_usable_size_r>:
 801fee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801feec:	1f18      	subs	r0, r3, #4
 801feee:	2b00      	cmp	r3, #0
 801fef0:	bfbc      	itt	lt
 801fef2:	580b      	ldrlt	r3, [r1, r0]
 801fef4:	18c0      	addlt	r0, r0, r3
 801fef6:	4770      	bx	lr

0801fef8 <_close>:
 801fef8:	4b02      	ldr	r3, [pc, #8]	; (801ff04 <_close+0xc>)
 801fefa:	2258      	movs	r2, #88	; 0x58
 801fefc:	601a      	str	r2, [r3, #0]
 801fefe:	f04f 30ff 	mov.w	r0, #4294967295
 801ff02:	4770      	bx	lr
 801ff04:	20008d5c 	.word	0x20008d5c

0801ff08 <_fstat>:
 801ff08:	4b02      	ldr	r3, [pc, #8]	; (801ff14 <_fstat+0xc>)
 801ff0a:	2258      	movs	r2, #88	; 0x58
 801ff0c:	601a      	str	r2, [r3, #0]
 801ff0e:	f04f 30ff 	mov.w	r0, #4294967295
 801ff12:	4770      	bx	lr
 801ff14:	20008d5c 	.word	0x20008d5c

0801ff18 <_getpid>:
 801ff18:	4b02      	ldr	r3, [pc, #8]	; (801ff24 <_getpid+0xc>)
 801ff1a:	2258      	movs	r2, #88	; 0x58
 801ff1c:	601a      	str	r2, [r3, #0]
 801ff1e:	f04f 30ff 	mov.w	r0, #4294967295
 801ff22:	4770      	bx	lr
 801ff24:	20008d5c 	.word	0x20008d5c

0801ff28 <_isatty>:
 801ff28:	4b02      	ldr	r3, [pc, #8]	; (801ff34 <_isatty+0xc>)
 801ff2a:	2258      	movs	r2, #88	; 0x58
 801ff2c:	601a      	str	r2, [r3, #0]
 801ff2e:	2000      	movs	r0, #0
 801ff30:	4770      	bx	lr
 801ff32:	bf00      	nop
 801ff34:	20008d5c 	.word	0x20008d5c

0801ff38 <_kill>:
 801ff38:	4b02      	ldr	r3, [pc, #8]	; (801ff44 <_kill+0xc>)
 801ff3a:	2258      	movs	r2, #88	; 0x58
 801ff3c:	601a      	str	r2, [r3, #0]
 801ff3e:	f04f 30ff 	mov.w	r0, #4294967295
 801ff42:	4770      	bx	lr
 801ff44:	20008d5c 	.word	0x20008d5c

0801ff48 <_lseek>:
 801ff48:	4b02      	ldr	r3, [pc, #8]	; (801ff54 <_lseek+0xc>)
 801ff4a:	2258      	movs	r2, #88	; 0x58
 801ff4c:	601a      	str	r2, [r3, #0]
 801ff4e:	f04f 30ff 	mov.w	r0, #4294967295
 801ff52:	4770      	bx	lr
 801ff54:	20008d5c 	.word	0x20008d5c

0801ff58 <_read>:
 801ff58:	4b02      	ldr	r3, [pc, #8]	; (801ff64 <_read+0xc>)
 801ff5a:	2258      	movs	r2, #88	; 0x58
 801ff5c:	601a      	str	r2, [r3, #0]
 801ff5e:	f04f 30ff 	mov.w	r0, #4294967295
 801ff62:	4770      	bx	lr
 801ff64:	20008d5c 	.word	0x20008d5c

0801ff68 <_sbrk>:
 801ff68:	4b04      	ldr	r3, [pc, #16]	; (801ff7c <_sbrk+0x14>)
 801ff6a:	6819      	ldr	r1, [r3, #0]
 801ff6c:	4602      	mov	r2, r0
 801ff6e:	b909      	cbnz	r1, 801ff74 <_sbrk+0xc>
 801ff70:	4903      	ldr	r1, [pc, #12]	; (801ff80 <_sbrk+0x18>)
 801ff72:	6019      	str	r1, [r3, #0]
 801ff74:	6818      	ldr	r0, [r3, #0]
 801ff76:	4402      	add	r2, r0
 801ff78:	601a      	str	r2, [r3, #0]
 801ff7a:	4770      	bx	lr
 801ff7c:	20005eec 	.word	0x20005eec
 801ff80:	20008d60 	.word	0x20008d60

0801ff84 <_write>:
 801ff84:	4b02      	ldr	r3, [pc, #8]	; (801ff90 <_write+0xc>)
 801ff86:	2258      	movs	r2, #88	; 0x58
 801ff88:	601a      	str	r2, [r3, #0]
 801ff8a:	f04f 30ff 	mov.w	r0, #4294967295
 801ff8e:	4770      	bx	lr
 801ff90:	20008d5c 	.word	0x20008d5c

0801ff94 <_exit>:
 801ff94:	e7fe      	b.n	801ff94 <_exit>
	...

0801ff98 <_init>:
 801ff98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff9a:	bf00      	nop
 801ff9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ff9e:	bc08      	pop	{r3}
 801ffa0:	469e      	mov	lr, r3
 801ffa2:	4770      	bx	lr

0801ffa4 <_fini>:
 801ffa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ffa6:	bf00      	nop
 801ffa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ffaa:	bc08      	pop	{r3}
 801ffac:	469e      	mov	lr, r3
 801ffae:	4770      	bx	lr
