
FC_v2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020730  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002930  080208e0  080208e0  000308e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023210  08023210  00040334  2**0
                  CONTENTS
  4 .ARM          00000008  08023210  08023210  00033210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023218  08023218  00040334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08023218  08023218  00033218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023220  08023220  00033220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  08023224  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040334  2**0
                  CONTENTS
 10 .bss          000099e8  20000334  20000334  00040334  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20009d1c  20009d1c  00040334  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040334  2**0
                  CONTENTS, READONLY
 13 .debug_info   0007ab7b  00000000  00000000  00040364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000af8b  00000000  00000000  000baedf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003e18  00000000  00000000  000c5e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003ab0  00000000  00000000  000c9c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00039671  00000000  00000000  000cd738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004b306  00000000  00000000  00106da9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00115b99  00000000  00000000  001520af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00267c48  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000124d8  00000000  00000000  00267c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  0027a174  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  0027a240  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000334 	.word	0x20000334
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080208c8 	.word	0x080208c8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000338 	.word	0x20000338
 80001ec:	080208c8 	.word	0x080208c8

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9ef 	b.w	80010c8 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a4 	b.w	80010c8 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	468c      	mov	ip, r1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8083 	bne.w	8000f1a <__udivmoddi4+0x116>
 8000e14:	428a      	cmp	r2, r1
 8000e16:	4617      	mov	r7, r2
 8000e18:	d947      	bls.n	8000eaa <__udivmoddi4+0xa6>
 8000e1a:	fab2 f282 	clz	r2, r2
 8000e1e:	b142      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e20:	f1c2 0020 	rsb	r0, r2, #32
 8000e24:	fa24 f000 	lsr.w	r0, r4, r0
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4097      	lsls	r7, r2
 8000e2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e30:	4094      	lsls	r4, r2
 8000e32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e36:	0c23      	lsrs	r3, r4, #16
 8000e38:	fbbc f6f8 	udiv	r6, ip, r8
 8000e3c:	fa1f fe87 	uxth.w	lr, r7
 8000e40:	fb08 c116 	mls	r1, r8, r6, ip
 8000e44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e48:	fb06 f10e 	mul.w	r1, r6, lr
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x60>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e56:	f080 8119 	bcs.w	800108c <__udivmoddi4+0x288>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 8116 	bls.w	800108c <__udivmoddi4+0x288>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e78:	45a6      	cmp	lr, r4
 8000e7a:	d909      	bls.n	8000e90 <__udivmoddi4+0x8c>
 8000e7c:	193c      	adds	r4, r7, r4
 8000e7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e82:	f080 8105 	bcs.w	8001090 <__udivmoddi4+0x28c>
 8000e86:	45a6      	cmp	lr, r4
 8000e88:	f240 8102 	bls.w	8001090 <__udivmoddi4+0x28c>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	443c      	add	r4, r7
 8000e90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e94:	eba4 040e 	sub.w	r4, r4, lr
 8000e98:	2600      	movs	r6, #0
 8000e9a:	b11d      	cbz	r5, 8000ea4 <__udivmoddi4+0xa0>
 8000e9c:	40d4      	lsrs	r4, r2
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	b902      	cbnz	r2, 8000eae <__udivmoddi4+0xaa>
 8000eac:	deff      	udf	#255	; 0xff
 8000eae:	fab2 f282 	clz	r2, r2
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	d150      	bne.n	8000f58 <__udivmoddi4+0x154>
 8000eb6:	1bcb      	subs	r3, r1, r7
 8000eb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebc:	fa1f f887 	uxth.w	r8, r7
 8000ec0:	2601      	movs	r6, #1
 8000ec2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ec6:	0c21      	lsrs	r1, r4, #16
 8000ec8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0xe4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0xe2>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	f200 80e9 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000ee6:	4684      	mov	ip, r0
 8000ee8:	1ac9      	subs	r1, r1, r3
 8000eea:	b2a3      	uxth	r3, r4
 8000eec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ef8:	fb08 f800 	mul.w	r8, r8, r0
 8000efc:	45a0      	cmp	r8, r4
 8000efe:	d907      	bls.n	8000f10 <__udivmoddi4+0x10c>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x10a>
 8000f08:	45a0      	cmp	r8, r4
 8000f0a:	f200 80d9 	bhi.w	80010c0 <__udivmoddi4+0x2bc>
 8000f0e:	4618      	mov	r0, r3
 8000f10:	eba4 0408 	sub.w	r4, r4, r8
 8000f14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f18:	e7bf      	b.n	8000e9a <__udivmoddi4+0x96>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d909      	bls.n	8000f32 <__udivmoddi4+0x12e>
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	f000 80b1 	beq.w	8001086 <__udivmoddi4+0x282>
 8000f24:	2600      	movs	r6, #0
 8000f26:	e9c5 0100 	strd	r0, r1, [r5]
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	4631      	mov	r1, r6
 8000f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f32:	fab3 f683 	clz	r6, r3
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	d14a      	bne.n	8000fd0 <__udivmoddi4+0x1cc>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d302      	bcc.n	8000f44 <__udivmoddi4+0x140>
 8000f3e:	4282      	cmp	r2, r0
 8000f40:	f200 80b8 	bhi.w	80010b4 <__udivmoddi4+0x2b0>
 8000f44:	1a84      	subs	r4, r0, r2
 8000f46:	eb61 0103 	sbc.w	r1, r1, r3
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	468c      	mov	ip, r1
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	d0a8      	beq.n	8000ea4 <__udivmoddi4+0xa0>
 8000f52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f56:	e7a5      	b.n	8000ea4 <__udivmoddi4+0xa0>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f60:	4097      	lsls	r7, r2
 8000f62:	fa01 f002 	lsl.w	r0, r1, r2
 8000f66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6a:	40d9      	lsrs	r1, r3
 8000f6c:	4330      	orrs	r0, r6
 8000f6e:	0c03      	lsrs	r3, r0, #16
 8000f70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f74:	fa1f f887 	uxth.w	r8, r7
 8000f78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f80:	fb06 f108 	mul.w	r1, r6, r8
 8000f84:	4299      	cmp	r1, r3
 8000f86:	fa04 f402 	lsl.w	r4, r4, r2
 8000f8a:	d909      	bls.n	8000fa0 <__udivmoddi4+0x19c>
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f92:	f080 808d 	bcs.w	80010b0 <__udivmoddi4+0x2ac>
 8000f96:	4299      	cmp	r1, r3
 8000f98:	f240 808a 	bls.w	80010b0 <__udivmoddi4+0x2ac>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	443b      	add	r3, r7
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b281      	uxth	r1, r0
 8000fa4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fa8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb0:	fb00 f308 	mul.w	r3, r0, r8
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	d907      	bls.n	8000fc8 <__udivmoddi4+0x1c4>
 8000fb8:	1879      	adds	r1, r7, r1
 8000fba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fbe:	d273      	bcs.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	d971      	bls.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	4439      	add	r1, r7
 8000fc8:	1acb      	subs	r3, r1, r3
 8000fca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fce:	e778      	b.n	8000ec2 <__udivmoddi4+0xbe>
 8000fd0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fd4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fd8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fdc:	431c      	orrs	r4, r3
 8000fde:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fe2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fe6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fee:	431f      	orrs	r7, r3
 8000ff0:	0c3b      	lsrs	r3, r7, #16
 8000ff2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff6:	fa1f f884 	uxth.w	r8, r4
 8000ffa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001002:	fb09 fa08 	mul.w	sl, r9, r8
 8001006:	458a      	cmp	sl, r1
 8001008:	fa02 f206 	lsl.w	r2, r2, r6
 800100c:	fa00 f306 	lsl.w	r3, r0, r6
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x220>
 8001012:	1861      	adds	r1, r4, r1
 8001014:	f109 30ff 	add.w	r0, r9, #4294967295
 8001018:	d248      	bcs.n	80010ac <__udivmoddi4+0x2a8>
 800101a:	458a      	cmp	sl, r1
 800101c:	d946      	bls.n	80010ac <__udivmoddi4+0x2a8>
 800101e:	f1a9 0902 	sub.w	r9, r9, #2
 8001022:	4421      	add	r1, r4
 8001024:	eba1 010a 	sub.w	r1, r1, sl
 8001028:	b2bf      	uxth	r7, r7
 800102a:	fbb1 f0fe 	udiv	r0, r1, lr
 800102e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001032:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001036:	fb00 f808 	mul.w	r8, r0, r8
 800103a:	45b8      	cmp	r8, r7
 800103c:	d907      	bls.n	800104e <__udivmoddi4+0x24a>
 800103e:	19e7      	adds	r7, r4, r7
 8001040:	f100 31ff 	add.w	r1, r0, #4294967295
 8001044:	d22e      	bcs.n	80010a4 <__udivmoddi4+0x2a0>
 8001046:	45b8      	cmp	r8, r7
 8001048:	d92c      	bls.n	80010a4 <__udivmoddi4+0x2a0>
 800104a:	3802      	subs	r0, #2
 800104c:	4427      	add	r7, r4
 800104e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001052:	eba7 0708 	sub.w	r7, r7, r8
 8001056:	fba0 8902 	umull	r8, r9, r0, r2
 800105a:	454f      	cmp	r7, r9
 800105c:	46c6      	mov	lr, r8
 800105e:	4649      	mov	r1, r9
 8001060:	d31a      	bcc.n	8001098 <__udivmoddi4+0x294>
 8001062:	d017      	beq.n	8001094 <__udivmoddi4+0x290>
 8001064:	b15d      	cbz	r5, 800107e <__udivmoddi4+0x27a>
 8001066:	ebb3 020e 	subs.w	r2, r3, lr
 800106a:	eb67 0701 	sbc.w	r7, r7, r1
 800106e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001072:	40f2      	lsrs	r2, r6
 8001074:	ea4c 0202 	orr.w	r2, ip, r2
 8001078:	40f7      	lsrs	r7, r6
 800107a:	e9c5 2700 	strd	r2, r7, [r5]
 800107e:	2600      	movs	r6, #0
 8001080:	4631      	mov	r1, r6
 8001082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e70b      	b.n	8000ea4 <__udivmoddi4+0xa0>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e9      	b.n	8000e64 <__udivmoddi4+0x60>
 8001090:	4618      	mov	r0, r3
 8001092:	e6fd      	b.n	8000e90 <__udivmoddi4+0x8c>
 8001094:	4543      	cmp	r3, r8
 8001096:	d2e5      	bcs.n	8001064 <__udivmoddi4+0x260>
 8001098:	ebb8 0e02 	subs.w	lr, r8, r2
 800109c:	eb69 0104 	sbc.w	r1, r9, r4
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7df      	b.n	8001064 <__udivmoddi4+0x260>
 80010a4:	4608      	mov	r0, r1
 80010a6:	e7d2      	b.n	800104e <__udivmoddi4+0x24a>
 80010a8:	4660      	mov	r0, ip
 80010aa:	e78d      	b.n	8000fc8 <__udivmoddi4+0x1c4>
 80010ac:	4681      	mov	r9, r0
 80010ae:	e7b9      	b.n	8001024 <__udivmoddi4+0x220>
 80010b0:	4666      	mov	r6, ip
 80010b2:	e775      	b.n	8000fa0 <__udivmoddi4+0x19c>
 80010b4:	4630      	mov	r0, r6
 80010b6:	e74a      	b.n	8000f4e <__udivmoddi4+0x14a>
 80010b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010bc:	4439      	add	r1, r7
 80010be:	e713      	b.n	8000ee8 <__udivmoddi4+0xe4>
 80010c0:	3802      	subs	r0, #2
 80010c2:	443c      	add	r4, r7
 80010c4:	e724      	b.n	8000f10 <__udivmoddi4+0x10c>
 80010c6:	bf00      	nop

080010c8 <__aeabi_idiv0>:
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <println>:

#include <MRT_helpers.h>
#include <MRT_setup.h>
#include <tim.h>

void println(char* s){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	#if PRINT
	HAL_UART_Transmit(&DEBUGUART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff f895 	bl	8000204 <strlen>
 80010da:	4603      	mov	r3, r0
 80010dc:	b29a      	uxth	r2, r3
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4806      	ldr	r0, [pc, #24]	; (8001100 <println+0x34>)
 80010e6:	f010 fde2 	bl	8011cae <HAL_UART_Transmit>
	HAL_UART_Transmit(&DEBUGUART, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	2202      	movs	r2, #2
 80010f0:	4904      	ldr	r1, [pc, #16]	; (8001104 <println+0x38>)
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <println+0x34>)
 80010f4:	f010 fddb 	bl	8011cae <HAL_UART_Transmit>
	#endif
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20008988 	.word	0x20008988
 8001104:	080208e0 	.word	0x080208e0

08001108 <print>:

void print(char* s){
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	#if PRINT
	HAL_UART_Transmit(&DEBUGUART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff f877 	bl	8000204 <strlen>
 8001116:	4603      	mov	r3, r0
 8001118:	b29a      	uxth	r2, r3
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	4803      	ldr	r0, [pc, #12]	; (8001130 <print+0x28>)
 8001122:	f010 fdc4 	bl	8011cae <HAL_UART_Transmit>
	#endif
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20008988 	.word	0x20008988

08001134 <tone_freq>:
void no_print(char* s){
	//TODO Buffer function for Iridium
}

// buzz at particular frequency
void tone_freq(uint32_t duration, uint32_t repeats, uint32_t freq) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
	#if !NO_BUZZ
	// TIM2 base frequency is 90 MHz, PSC = 90-1
	// can calculate required ARR value
	TIM2->ARR = 1000000 / freq;
 8001140:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001144:	491c      	ldr	r1, [pc, #112]	; (80011b8 <tone_freq+0x84>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	fbb1 f3f3 	udiv	r3, r1, r3
 800114c:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->EGR |= TIM_EGR_UG;
 800114e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6153      	str	r3, [r2, #20]

	for (uint32_t i = 0; i < repeats; i++) {
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	e01f      	b.n	80011a4 <tone_freq+0x70>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001164:	2108      	movs	r1, #8
 8001166:	4815      	ldr	r0, [pc, #84]	; (80011bc <tone_freq+0x88>)
 8001168:	f00f fdc2 	bl	8010cf0 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, SET);
 800116c:	2201      	movs	r2, #1
 800116e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001172:	4813      	ldr	r0, [pc, #76]	; (80011c0 <tone_freq+0x8c>)
 8001174:	f00c f8f8 	bl	800d368 <HAL_GPIO_WritePin>
		HAL_Delay(duration);
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f00b f9e9 	bl	800c550 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800117e:	2108      	movs	r1, #8
 8001180:	480e      	ldr	r0, [pc, #56]	; (80011bc <tone_freq+0x88>)
 8001182:	f00f fe7d 	bl	8010e80 <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 7100 	mov.w	r1, #512	; 0x200
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <tone_freq+0x8c>)
 800118e:	f00c f8eb 	bl	800d368 <HAL_GPIO_WritePin>
		if (repeats > 1)
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d902      	bls.n	800119e <tone_freq+0x6a>
			HAL_Delay(duration);
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f00b f9d9 	bl	800c550 <HAL_Delay>
	for (uint32_t i = 0; i < repeats; i++) {
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	3301      	adds	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d3db      	bcc.n	8001164 <tone_freq+0x30>
	}
	#endif
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	000f4240 	.word	0x000f4240
 80011bc:	200088fc 	.word	0x200088fc
 80011c0:	40020400 	.word	0x40020400

080011c4 <buzz_success>:
void buzz_success(void) { tone_freq(BUZZ_SUCCESS_DURATION, BUZZ_SUCCESS_REPEATS, BUZZ_SUCCESS_FREQ); }
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	f240 4216 	movw	r2, #1046	; 0x416
 80011cc:	2102      	movs	r1, #2
 80011ce:	204b      	movs	r0, #75	; 0x4b
 80011d0:	f7ff ffb0 	bl	8001134 <tone_freq>
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <buzz_startup_success>:
void buzz_failure(void) { tone_freq(BUZZ_FAILURE_DURATION, BUZZ_FAILURE_REPEATS, BUZZ_FAILURE_FREQ); }
void buzz_startup_success(void) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 80011de:	2300      	movs	r3, #0
 80011e0:	71fb      	strb	r3, [r7, #7]
 80011e2:	e008      	b.n	80011f6 <buzz_startup_success+0x1e>
		buzz_success();
 80011e4:	f7ff ffee 	bl	80011c4 <buzz_success>
		HAL_Delay(1000);
 80011e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ec:	f00b f9b0 	bl	800c550 <HAL_Delay>
	for (uint8_t i = 0; i < 3; i++) {
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	3301      	adds	r3, #1
 80011f4:	71fb      	strb	r3, [r7, #7]
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d9f3      	bls.n	80011e4 <buzz_startup_success+0xc>
	}
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <MRT_Init>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_Init(void){
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Init********/\r\n");
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <MRT_Init+0x3c>)
 800120e:	f7ff ff7b 	bl	8001108 <print>

	MRT_Reinitialize_Peripherals();
 8001212:	f000 f8fb 	bl	800140c <MRT_Reinitialize_Peripherals>

	//Memory
	MRT_MEMORY_Init();
 8001216:	f003 f899 	bl	800434c <MRT_MEMORY_Init>
	MRT_reset_info();
 800121a:	f000 f829 	bl	8001270 <MRT_reset_info>

	//IWDG
	#if IWDG_ACTIVE
	print((char*) "IWDG Init...");
 800121e:	480a      	ldr	r0, [pc, #40]	; (8001248 <MRT_Init+0x40>)
 8001220:	f7ff ff72 	bl	8001108 <print>
	MX_IWDG_Init();
 8001224:	f001 fbd8 	bl	80029d8 <MX_IWDG_Init>
	print((char*) "OK\r\n");
 8001228:	4808      	ldr	r0, [pc, #32]	; (800124c <MRT_Init+0x44>)
 800122a:	f7ff ff6d 	bl	8001108 <print>
	#endif

	//RTC
	HAL_IWDG_Refresh(&hiwdg);
 800122e:	4808      	ldr	r0, [pc, #32]	; (8001250 <MRT_Init+0x48>)
 8001230:	f00d f97e 	bl	800e530 <HAL_IWDG_Refresh>
	MRT_rtc_Init();
 8001234:	f001 fdac 	bl	8002d90 <MRT_rtc_Init>
		  checkForI2CDevices(huart8,hi2c1);
		  checkForI2CDevices(huart8,hi2c2);
		  checkForI2CDevices(huart8,hi2c3);
		#endif

		MRT_i2c_sensors_Init();
 8001238:	f004 fc3a 	bl	8005ab0 <MRT_i2c_sensors_Init>
	#endif


	//Telemetry
	#if TELEMETRY_THREAD
		MRT_TELEMETRY_Init();
 800123c:	f009 fec8 	bl	800afd0 <MRT_TELEMETRY_Init>
	#endif

	#if FORCED_EJECTION_STAGE
		   ejection_stage_flag = FORCED_STAGE;
	#endif
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	080208e4 	.word	0x080208e4
 8001248:	08020908 	.word	0x08020908
 800124c:	08020918 	.word	0x08020918
 8001250:	20008780 	.word	0x20008780

08001254 <MRT_Deinit>:




void MRT_Deinit(void){
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Deinit********/\r\n");
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <MRT_Deinit+0x18>)
 800125a:	f7ff ff55 	bl	8001108 <print>

	MRT_Reinitialize_Peripherals();
 800125e:	f000 f8d5 	bl	800140c <MRT_Reinitialize_Peripherals>
	#endif


	//Sensors
	#if SENSORS_THREAD
		MRT_i2c_sensors_Deinit();
 8001262:	f004 fc61 	bl	8005b28 <MRT_i2c_sensors_Deinit>
	#endif

    //TODO
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	08020920 	.word	0x08020920

08001270 <MRT_reset_info>:

//**************************************************//
//PRIVATE FUNCTIONS


void MRT_reset_info(void){
 8001270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001272:	b0a9      	sub	sp, #164	; 0xa4
 8001274:	af06      	add	r7, sp, #24

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i ::%i\r\n",
 8001276:	4b4e      	ldr	r3, [pc, #312]	; (80013b0 <MRT_reset_info+0x140>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	461e      	mov	r6, r3
 800127c:	4b4d      	ldr	r3, [pc, #308]	; (80013b4 <MRT_reset_info+0x144>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	469c      	mov	ip, r3
 8001282:	4b4d      	ldr	r3, [pc, #308]	; (80013b8 <MRT_reset_info+0x148>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	4b4c      	ldr	r3, [pc, #304]	; (80013bc <MRT_reset_info+0x14c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	4619      	mov	r1, r3
 800128e:	4b4c      	ldr	r3, [pc, #304]	; (80013c0 <MRT_reset_info+0x150>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	461c      	mov	r4, r3
 8001294:	4b4b      	ldr	r3, [pc, #300]	; (80013c4 <MRT_reset_info+0x154>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	461d      	mov	r5, r3
 800129a:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <MRT_reset_info+0x158>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80012a2:	9304      	str	r3, [sp, #16]
 80012a4:	9503      	str	r5, [sp, #12]
 80012a6:	9402      	str	r4, [sp, #8]
 80012a8:	9101      	str	r1, [sp, #4]
 80012aa:	9200      	str	r2, [sp, #0]
 80012ac:	4663      	mov	r3, ip
 80012ae:	4632      	mov	r2, r6
 80012b0:	4946      	ldr	r1, [pc, #280]	; (80013cc <MRT_reset_info+0x15c>)
 80012b2:	f01a ff05 	bl	801c0c0 <siprintf>
			  reset_flag, wu_flag, iwdg_flag, prev_hour, prev_min, prev_sec, prev_subsec);
	  print(buffer);
 80012b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ff24 	bl	8001108 <print>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 80012c0:	4b3d      	ldr	r3, [pc, #244]	; (80013b8 <MRT_reset_info+0x148>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d119      	bne.n	80012fc <MRT_reset_info+0x8c>
		  print((char*) "Deactivating IWDG\r\n");
 80012c8:	4841      	ldr	r0, [pc, #260]	; (80013d0 <MRT_reset_info+0x160>)
 80012ca:	f7ff ff1d 	bl	8001108 <print>

		  iwdg_flag = 0; //Flip flag
 80012ce:	4b3a      	ldr	r3, [pc, #232]	; (80013b8 <MRT_reset_info+0x148>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]

		  //Write new flag to memory
		  rtc_bckp_reg_iwdg = iwdg_flag;
 80012d4:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <MRT_reset_info+0x148>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	4b3e      	ldr	r3, [pc, #248]	; (80013d4 <MRT_reset_info+0x164>)
 80012dc:	601a      	str	r2, [r3, #0]
		  ext_flash_iwdg = iwdg_flag;
 80012de:	4b36      	ldr	r3, [pc, #216]	; (80013b8 <MRT_reset_info+0x148>)
 80012e0:	781a      	ldrb	r2, [r3, #0]
 80012e2:	4b3d      	ldr	r3, [pc, #244]	; (80013d8 <MRT_reset_info+0x168>)
 80012e4:	701a      	strb	r2, [r3, #0]
		  MRT_saveFlagValue(FC_STATE_IWDG);
 80012e6:	2002      	movs	r0, #2
 80012e8:	f002 fe9c 	bl	8004024 <MRT_saveFlagValue>

		  HAL_Delay(500);
 80012ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012f0:	f00b f92e 	bl	800c550 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 80012f4:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 80012f8:	f001 fdf0 	bl	8002edc <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag > 0){
 80012fc:	4b2d      	ldr	r3, [pc, #180]	; (80013b4 <MRT_reset_info+0x144>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00b      	beq.n	800131c <MRT_reset_info+0xac>
		  char buf[30];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 8001304:	4b2b      	ldr	r3, [pc, #172]	; (80013b4 <MRT_reset_info+0x144>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	4933      	ldr	r1, [pc, #204]	; (80013dc <MRT_reset_info+0x16c>)
 800130e:	4618      	mov	r0, r3
 8001310:	f01a fed6 	bl	801c0c0 <siprintf>
		  print(buf);
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fef6 	bl	8001108 <print>
	  }


	  //Check if we start from the beginning
	  if (reset_flag == 0){
 800131c:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <MRT_reset_info+0x140>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d108      	bne.n	8001336 <MRT_reset_info+0xc6>
		  print((char*) "FC restarted\r\n");
 8001324:	482e      	ldr	r0, [pc, #184]	; (80013e0 <MRT_reset_info+0x170>)
 8001326:	f7ff feef 	bl	8001108 <print>

		  reset_flag = 1; //Flip flag
 800132a:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <MRT_reset_info+0x140>)
 800132c:	2201      	movs	r2, #1
 800132e:	701a      	strb	r2, [r3, #0]

		  MRT_saveFlagValue(FC_STATE_RESET);
 8001330:	2000      	movs	r0, #0
 8001332:	f002 fe77 	bl	8004024 <MRT_saveFlagValue>
	  }


	  //Check if before or after apogee
	  if (apogee_flag == 0){
 8001336:	4b2b      	ldr	r3, [pc, #172]	; (80013e4 <MRT_reset_info+0x174>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d103      	bne.n	8001346 <MRT_reset_info+0xd6>
		  print((char*) "Pre-apogee\r\n");
 800133e:	482a      	ldr	r0, [pc, #168]	; (80013e8 <MRT_reset_info+0x178>)
 8001340:	f7ff fee2 	bl	8001108 <print>
 8001344:	e006      	b.n	8001354 <MRT_reset_info+0xe4>
	  }
	  else if(apogee_flag==1){
 8001346:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <MRT_reset_info+0x174>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d102      	bne.n	8001354 <MRT_reset_info+0xe4>
		  print((char*) "Post-apogee\r\n");
 800134e:	4827      	ldr	r0, [pc, #156]	; (80013ec <MRT_reset_info+0x17c>)
 8001350:	f7ff feda 	bl	8001108 <print>
	  }


	  //Check ejection stage
	  print((char*)"Ejection Stage: ");
 8001354:	4826      	ldr	r0, [pc, #152]	; (80013f0 <MRT_reset_info+0x180>)
 8001356:	f7ff fed7 	bl	8001108 <print>
	  if (ejection_stage_flag==PAD){
 800135a:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <MRT_reset_info+0x184>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d103      	bne.n	800136a <MRT_reset_info+0xfa>
		  print((char*)"Pad\r\n");
 8001362:	4825      	ldr	r0, [pc, #148]	; (80013f8 <MRT_reset_info+0x188>)
 8001364:	f7ff fed0 	bl	8001108 <print>
		  print((char*)"Main descent\r\n");
	  }
	  else if(ejection_stage_flag==LANDED){
		  print((char*)"Landed\r\n");
	  }
}
 8001368:	e01e      	b.n	80013a8 <MRT_reset_info+0x138>
	  else if(ejection_stage_flag==BOOST){
 800136a:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <MRT_reset_info+0x184>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d103      	bne.n	800137a <MRT_reset_info+0x10a>
		  print((char*)"Boost\r\n");
 8001372:	4822      	ldr	r0, [pc, #136]	; (80013fc <MRT_reset_info+0x18c>)
 8001374:	f7ff fec8 	bl	8001108 <print>
}
 8001378:	e016      	b.n	80013a8 <MRT_reset_info+0x138>
	  else if(ejection_stage_flag==DROGUE_DESCENT){
 800137a:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <MRT_reset_info+0x184>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b02      	cmp	r3, #2
 8001380:	d103      	bne.n	800138a <MRT_reset_info+0x11a>
		  print((char*)"Drogue descent\r\n");
 8001382:	481f      	ldr	r0, [pc, #124]	; (8001400 <MRT_reset_info+0x190>)
 8001384:	f7ff fec0 	bl	8001108 <print>
}
 8001388:	e00e      	b.n	80013a8 <MRT_reset_info+0x138>
	  else if(ejection_stage_flag==MAIN_DESCENT){
 800138a:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <MRT_reset_info+0x184>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b03      	cmp	r3, #3
 8001390:	d103      	bne.n	800139a <MRT_reset_info+0x12a>
		  print((char*)"Main descent\r\n");
 8001392:	481c      	ldr	r0, [pc, #112]	; (8001404 <MRT_reset_info+0x194>)
 8001394:	f7ff feb8 	bl	8001108 <print>
}
 8001398:	e006      	b.n	80013a8 <MRT_reset_info+0x138>
	  else if(ejection_stage_flag==LANDED){
 800139a:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <MRT_reset_info+0x184>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b04      	cmp	r3, #4
 80013a0:	d102      	bne.n	80013a8 <MRT_reset_info+0x138>
		  print((char*)"Landed\r\n");
 80013a2:	4819      	ldr	r0, [pc, #100]	; (8001408 <MRT_reset_info+0x198>)
 80013a4:	f7ff feb0 	bl	8001108 <print>
}
 80013a8:	bf00      	nop
 80013aa:	378c      	adds	r7, #140	; 0x8c
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b0:	20000415 	.word	0x20000415
 80013b4:	20000416 	.word	0x20000416
 80013b8:	20000417 	.word	0x20000417
 80013bc:	2000041a 	.word	0x2000041a
 80013c0:	2000041b 	.word	0x2000041b
 80013c4:	2000041c 	.word	0x2000041c
 80013c8:	20000420 	.word	0x20000420
 80013cc:	08020944 	.word	0x08020944
 80013d0:	08020988 	.word	0x08020988
 80013d4:	200003b0 	.word	0x200003b0
 80013d8:	200003fa 	.word	0x200003fa
 80013dc:	0802099c 	.word	0x0802099c
 80013e0:	080209ac 	.word	0x080209ac
 80013e4:	20000418 	.word	0x20000418
 80013e8:	080209bc 	.word	0x080209bc
 80013ec:	080209cc 	.word	0x080209cc
 80013f0:	080209dc 	.word	0x080209dc
 80013f4:	20000419 	.word	0x20000419
 80013f8:	080209f0 	.word	0x080209f0
 80013fc:	080209f8 	.word	0x080209f8
 8001400:	08020a00 	.word	0x08020a00
 8001404:	08020a14 	.word	0x08020a14
 8001408:	08020a24 	.word	0x08020a24

0800140c <MRT_Reinitialize_Peripherals>:


void MRT_Reinitialize_Peripherals(void){
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	  /*
	   * Reinitialize all peripherals
	   */

	  print((char*)"Reinitializing Peripherals...");
 8001410:	482f      	ldr	r0, [pc, #188]	; (80014d0 <MRT_Reinitialize_Peripherals+0xc4>)
 8001412:	f7ff fe79 	bl	8001108 <print>

	  // reset LEDs
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	2102      	movs	r1, #2
 800141a:	482e      	ldr	r0, [pc, #184]	; (80014d4 <MRT_Reinitialize_Peripherals+0xc8>)
 800141c:	f00b ffa4 	bl	800d368 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	2104      	movs	r1, #4
 8001424:	482b      	ldr	r0, [pc, #172]	; (80014d4 <MRT_Reinitialize_Peripherals+0xc8>)
 8001426:	f00b ff9f 	bl	800d368 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	2108      	movs	r1, #8
 800142e:	4829      	ldr	r0, [pc, #164]	; (80014d4 <MRT_Reinitialize_Peripherals+0xc8>)
 8001430:	f00b ff9a 	bl	800d368 <HAL_GPIO_WritePin>

	  // reset recovery pyro pins
	  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8001434:	2201      	movs	r2, #1
 8001436:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800143a:	4827      	ldr	r0, [pc, #156]	; (80014d8 <MRT_Reinitialize_Peripherals+0xcc>)
 800143c:	f00b ff94 	bl	800d368 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 8001440:	2200      	movs	r2, #0
 8001442:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001446:	4824      	ldr	r0, [pc, #144]	; (80014d8 <MRT_Reinitialize_Peripherals+0xcc>)
 8001448:	f00b ff8e 	bl	800d368 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 800144c:	2200      	movs	r2, #0
 800144e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001452:	4821      	ldr	r0, [pc, #132]	; (80014d8 <MRT_Reinitialize_Peripherals+0xcc>)
 8001454:	f00b ff88 	bl	800d368 <HAL_GPIO_WritePin>

	  // reset prop pyro pins
	  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 8001458:	2201      	movs	r2, #1
 800145a:	2102      	movs	r1, #2
 800145c:	481e      	ldr	r0, [pc, #120]	; (80014d8 <MRT_Reinitialize_Peripherals+0xcc>)
 800145e:	f00b ff83 	bl	800d368 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 8001462:	2200      	movs	r2, #0
 8001464:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001468:	481c      	ldr	r0, [pc, #112]	; (80014dc <MRT_Reinitialize_Peripherals+0xd0>)
 800146a:	f00b ff7d 	bl	800d368 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001474:	4819      	ldr	r0, [pc, #100]	; (80014dc <MRT_Reinitialize_Peripherals+0xd0>)
 8001476:	f00b ff77 	bl	800d368 <HAL_GPIO_WritePin>

	  // reset 12 V buck converter enable pin (disable converter)
	  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 800147a:	2200      	movs	r2, #0
 800147c:	2104      	movs	r1, #4
 800147e:	4818      	ldr	r0, [pc, #96]	; (80014e0 <MRT_Reinitialize_Peripherals+0xd4>)
 8001480:	f00b ff72 	bl	800d368 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
	  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


	  // reset payload EN signal
	  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 8001484:	2200      	movs	r2, #0
 8001486:	f44f 7100 	mov.w	r1, #512	; 0x200
 800148a:	4815      	ldr	r0, [pc, #84]	; (80014e0 <MRT_Reinitialize_Peripherals+0xd4>)
 800148c:	f00b ff6c 	bl	800d368 <HAL_GPIO_WritePin>

	  // set CS pin for thermocouple chip high
	  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

	  // set power off for VR
	  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 8001490:	2200      	movs	r2, #0
 8001492:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001496:	4810      	ldr	r0, [pc, #64]	; (80014d8 <MRT_Reinitialize_Peripherals+0xcc>)
 8001498:	f00b ff66 	bl	800d368 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 800149c:	2200      	movs	r2, #0
 800149e:	2180      	movs	r1, #128	; 0x80
 80014a0:	4810      	ldr	r0, [pc, #64]	; (80014e4 <MRT_Reinitialize_Peripherals+0xd8>)
 80014a2:	f00b ff61 	bl	800d368 <HAL_GPIO_WritePin>

	  // FLASH set CS, WP and IO3 pins high
	  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 80014a6:	2201      	movs	r2, #1
 80014a8:	2140      	movs	r1, #64	; 0x40
 80014aa:	480e      	ldr	r0, [pc, #56]	; (80014e4 <MRT_Reinitialize_Peripherals+0xd8>)
 80014ac:	f00b ff5c 	bl	800d368 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	2120      	movs	r1, #32
 80014b4:	480b      	ldr	r0, [pc, #44]	; (80014e4 <MRT_Reinitialize_Peripherals+0xd8>)
 80014b6:	f00b ff57 	bl	800d368 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 80014ba:	2201      	movs	r2, #1
 80014bc:	2110      	movs	r1, #16
 80014be:	4809      	ldr	r0, [pc, #36]	; (80014e4 <MRT_Reinitialize_Peripherals+0xd8>)
 80014c0:	f00b ff52 	bl	800d368 <HAL_GPIO_WritePin>

	  print((char*)"OK\r\n");
 80014c4:	4808      	ldr	r0, [pc, #32]	; (80014e8 <MRT_Reinitialize_Peripherals+0xdc>)
 80014c6:	f7ff fe1f 	bl	8001108 <print>
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	08020a30 	.word	0x08020a30
 80014d4:	40020800 	.word	0x40020800
 80014d8:	40021800 	.word	0x40021800
 80014dc:	40021400 	.word	0x40021400
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40020c00 	.word	0x40020c00
 80014e8:	08020918 	.word	0x08020918

080014ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014f2:	463b      	mov	r3, r7
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014fe:	4b21      	ldr	r3, [pc, #132]	; (8001584 <MX_ADC1_Init+0x98>)
 8001500:	4a21      	ldr	r2, [pc, #132]	; (8001588 <MX_ADC1_Init+0x9c>)
 8001502:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001504:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <MX_ADC1_Init+0x98>)
 8001506:	2200      	movs	r2, #0
 8001508:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800150a:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <MX_ADC1_Init+0x98>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001510:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <MX_ADC1_Init+0x98>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001516:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <MX_ADC1_Init+0x98>)
 8001518:	2200      	movs	r2, #0
 800151a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <MX_ADC1_Init+0x98>)
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001524:	4b17      	ldr	r3, [pc, #92]	; (8001584 <MX_ADC1_Init+0x98>)
 8001526:	2200      	movs	r2, #0
 8001528:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800152a:	4b16      	ldr	r3, [pc, #88]	; (8001584 <MX_ADC1_Init+0x98>)
 800152c:	4a17      	ldr	r2, [pc, #92]	; (800158c <MX_ADC1_Init+0xa0>)
 800152e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <MX_ADC1_Init+0x98>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001536:	4b13      	ldr	r3, [pc, #76]	; (8001584 <MX_ADC1_Init+0x98>)
 8001538:	2201      	movs	r2, #1
 800153a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <MX_ADC1_Init+0x98>)
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <MX_ADC1_Init+0x98>)
 8001546:	2201      	movs	r2, #1
 8001548:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800154a:	480e      	ldr	r0, [pc, #56]	; (8001584 <MX_ADC1_Init+0x98>)
 800154c:	f00b f824 	bl	800c598 <HAL_ADC_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001556:	f001 fb2d 	bl	8002bb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800155a:	2306      	movs	r3, #6
 800155c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800155e:	2301      	movs	r3, #1
 8001560:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001566:	463b      	mov	r3, r7
 8001568:	4619      	mov	r1, r3
 800156a:	4806      	ldr	r0, [pc, #24]	; (8001584 <MX_ADC1_Init+0x98>)
 800156c:	f00b f9f6 	bl	800c95c <HAL_ADC_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001576:	f001 fb1d 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20008664 	.word	0x20008664
 8001588:	40012000 	.word	0x40012000
 800158c:	0f000001 	.word	0x0f000001

08001590 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a17      	ldr	r2, [pc, #92]	; (800160c <HAL_ADC_MspInit+0x7c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d127      	bne.n	8001602 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <HAL_ADC_MspInit+0x80>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	4a15      	ldr	r2, [pc, #84]	; (8001610 <HAL_ADC_MspInit+0x80>)
 80015bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c0:	6453      	str	r3, [r2, #68]	; 0x44
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <HAL_ADC_MspInit+0x80>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <HAL_ADC_MspInit+0x80>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <HAL_ADC_MspInit+0x80>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <HAL_ADC_MspInit+0x80>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 80015ea:	2340      	movs	r3, #64	; 0x40
 80015ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ee:	2303      	movs	r3, #3
 80015f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <HAL_ADC_MspInit+0x84>)
 80015fe:	f00b fcef 	bl	800cfe0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001602:	bf00      	nop
 8001604:	3728      	adds	r7, #40	; 0x28
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40012000 	.word	0x40012000
 8001610:	40023800 	.word	0x40023800
 8001614:	40020000 	.word	0x40020000

08001618 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800161c:	f3bf 8f4f 	dsb	sy
}
 8001620:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <__NVIC_SystemReset+0x24>)
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800162a:	4904      	ldr	r1, [pc, #16]	; (800163c <__NVIC_SystemReset+0x24>)
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <__NVIC_SystemReset+0x28>)
 800162e:	4313      	orrs	r3, r2
 8001630:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001632:	f3bf 8f4f 	dsb	sy
}
 8001636:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <__NVIC_SystemReset+0x20>
 800163c:	e000ed00 	.word	0xe000ed00
 8001640:	05fa0004 	.word	0x05fa0004

08001644 <vApplicationDaemonTaskStartupHook>:
/* Hook prototypes */
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	MRT_Init();
 8001648:	f7ff fdde 	bl	8001208 <MRT_Init>

	println("\r\n\r\n/****Starting FC****/\r\n\r\n");
 800164c:	4820      	ldr	r0, [pc, #128]	; (80016d0 <vApplicationDaemonTaskStartupHook+0x8c>)
 800164e:	f7ff fd3d 	bl	80010cc <println>
	HAL_IWDG_Refresh(&hiwdg);
 8001652:	4820      	ldr	r0, [pc, #128]	; (80016d4 <vApplicationDaemonTaskStartupHook+0x90>)
 8001654:	f00c ff6c 	bl	800e530 <HAL_IWDG_Refresh>
	buzz_startup_success();
 8001658:	f7ff fdbe 	bl	80011d8 <buzz_startup_success>

	MRT_waitForLaunch();
 800165c:	f000 fd4a 	bl	80020f4 <MRT_waitForLaunch>

	print("\tCreating the threads...");
 8001660:	481d      	ldr	r0, [pc, #116]	; (80016d8 <vApplicationDaemonTaskStartupHook+0x94>)
 8001662:	f7ff fd51 	bl	8001108 <print>

	/* Create the thread(s) */
	/* creation of Memory0 */
	Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 8001666:	4a1d      	ldr	r2, [pc, #116]	; (80016dc <vApplicationDaemonTaskStartupHook+0x98>)
 8001668:	2100      	movs	r1, #0
 800166a:	481d      	ldr	r0, [pc, #116]	; (80016e0 <vApplicationDaemonTaskStartupHook+0x9c>)
 800166c:	f014 fb12 	bl	8015c94 <osThreadNew>
 8001670:	4603      	mov	r3, r0
 8001672:	4a1c      	ldr	r2, [pc, #112]	; (80016e4 <vApplicationDaemonTaskStartupHook+0xa0>)
 8001674:	6013      	str	r3, [r2, #0]

	/* creation of Ejection1 */
	Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 8001676:	4a1c      	ldr	r2, [pc, #112]	; (80016e8 <vApplicationDaemonTaskStartupHook+0xa4>)
 8001678:	2100      	movs	r1, #0
 800167a:	481c      	ldr	r0, [pc, #112]	; (80016ec <vApplicationDaemonTaskStartupHook+0xa8>)
 800167c:	f014 fb0a 	bl	8015c94 <osThreadNew>
 8001680:	4603      	mov	r3, r0
 8001682:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <vApplicationDaemonTaskStartupHook+0xac>)
 8001684:	6013      	str	r3, [r2, #0]

	/* creation of Telemetry2 */
	Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 8001686:	4a1b      	ldr	r2, [pc, #108]	; (80016f4 <vApplicationDaemonTaskStartupHook+0xb0>)
 8001688:	2100      	movs	r1, #0
 800168a:	481b      	ldr	r0, [pc, #108]	; (80016f8 <vApplicationDaemonTaskStartupHook+0xb4>)
 800168c:	f014 fb02 	bl	8015c94 <osThreadNew>
 8001690:	4603      	mov	r3, r0
 8001692:	4a1a      	ldr	r2, [pc, #104]	; (80016fc <vApplicationDaemonTaskStartupHook+0xb8>)
 8001694:	6013      	str	r3, [r2, #0]

	/* creation of Sensors3 */
	Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 8001696:	4a1a      	ldr	r2, [pc, #104]	; (8001700 <vApplicationDaemonTaskStartupHook+0xbc>)
 8001698:	2100      	movs	r1, #0
 800169a:	481a      	ldr	r0, [pc, #104]	; (8001704 <vApplicationDaemonTaskStartupHook+0xc0>)
 800169c:	f014 fafa 	bl	8015c94 <osThreadNew>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4a19      	ldr	r2, [pc, #100]	; (8001708 <vApplicationDaemonTaskStartupHook+0xc4>)
 80016a4:	6013      	str	r3, [r2, #0]

	/* creation of WatchDog */
	WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 80016a6:	4a19      	ldr	r2, [pc, #100]	; (800170c <vApplicationDaemonTaskStartupHook+0xc8>)
 80016a8:	2100      	movs	r1, #0
 80016aa:	4819      	ldr	r0, [pc, #100]	; (8001710 <vApplicationDaemonTaskStartupHook+0xcc>)
 80016ac:	f014 faf2 	bl	8015c94 <osThreadNew>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4a18      	ldr	r2, [pc, #96]	; (8001714 <vApplicationDaemonTaskStartupHook+0xd0>)
 80016b4:	6013      	str	r3, [r2, #0]

	/* creation of Propulsion4 */
	Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 80016b6:	4a18      	ldr	r2, [pc, #96]	; (8001718 <vApplicationDaemonTaskStartupHook+0xd4>)
 80016b8:	2100      	movs	r1, #0
 80016ba:	4818      	ldr	r0, [pc, #96]	; (800171c <vApplicationDaemonTaskStartupHook+0xd8>)
 80016bc:	f014 faea 	bl	8015c94 <osThreadNew>
 80016c0:	4603      	mov	r3, r0
 80016c2:	4a17      	ldr	r2, [pc, #92]	; (8001720 <vApplicationDaemonTaskStartupHook+0xdc>)
 80016c4:	6013      	str	r3, [r2, #0]

	println("OK");
 80016c6:	4817      	ldr	r0, [pc, #92]	; (8001724 <vApplicationDaemonTaskStartupHook+0xe0>)
 80016c8:	f7ff fd00 	bl	80010cc <println>
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	08020a94 	.word	0x08020a94
 80016d4:	20008780 	.word	0x20008780
 80016d8:	08020ab4 	.word	0x08020ab4
 80016dc:	08022928 	.word	0x08022928
 80016e0:	08001755 	.word	0x08001755
 80016e4:	200086b0 	.word	0x200086b0
 80016e8:	0802294c 	.word	0x0802294c
 80016ec:	08001871 	.word	0x08001871
 80016f0:	200086c8 	.word	0x200086c8
 80016f4:	08022970 	.word	0x08022970
 80016f8:	08001d19 	.word	0x08001d19
 80016fc:	200086cc 	.word	0x200086cc
 8001700:	08022994 	.word	0x08022994
 8001704:	08001e21 	.word	0x08001e21
 8001708:	200086d0 	.word	0x200086d0
 800170c:	080229b8 	.word	0x080229b8
 8001710:	08001e99 	.word	0x08001e99
 8001714:	200086ac 	.word	0x200086ac
 8001718:	080229dc 	.word	0x080229dc
 800171c:	080020a9 	.word	0x080020a9
 8001720:	200086d4 	.word	0x200086d4
 8001724:	08020ad0 	.word	0x08020ad0

08001728 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	println("\r\nFREERTOS Init");
 800172c:	4806      	ldr	r0, [pc, #24]	; (8001748 <MX_FREERTOS_Init+0x20>)
 800172e:	f7ff fccd 	bl	80010cc <println>
	print("\tInitializing the kernel...");
 8001732:	4806      	ldr	r0, [pc, #24]	; (800174c <MX_FREERTOS_Init+0x24>)
 8001734:	f7ff fce8 	bl	8001108 <print>
	osKernelInitialize();
 8001738:	f014 fa62 	bl	8015c00 <osKernelInitialize>
	println("OK");
 800173c:	4804      	ldr	r0, [pc, #16]	; (8001750 <MX_FREERTOS_Init+0x28>)
 800173e:	f7ff fcc5 	bl	80010cc <println>
  /* USER CODE END RTOS_THREADS */
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	08020ad4 	.word	0x08020ad4
 800174c:	08020ae4 	.word	0x08020ae4
 8001750:	08020ad0 	.word	0x08020ad0

08001754 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMemory0 */

	//Add thread id to the list
	threadsID[0]=osThreadGetId();
 800175c:	f014 fb2d 	bl	8015dba <osThreadGetId>
 8001760:	4603      	mov	r3, r0
 8001762:	4a35      	ldr	r2, [pc, #212]	; (8001838 <StartMemory0+0xe4>)
 8001764:	6013      	str	r3, [r2, #0]

	#if !MEMORY_THREAD
    osThreadExit();
	#endif

    fres = sd_open_file(filename);
 8001766:	4835      	ldr	r0, [pc, #212]	; (800183c <StartMemory0+0xe8>)
 8001768:	f002 ffb8 	bl	80046dc <sd_open_file>
 800176c:	4603      	mov	r3, r0
 800176e:	461a      	mov	r2, r3
 8001770:	4b33      	ldr	r3, [pc, #204]	; (8001840 <StartMemory0+0xec>)
 8001772:	701a      	strb	r2, [r3, #0]

    //uint8_t reset_counter = 0;
    uint8_t sync_counter = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {

	 //Get RTC time
	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001778:	2200      	movs	r2, #0
 800177a:	4932      	ldr	r1, [pc, #200]	; (8001844 <StartMemory0+0xf0>)
 800177c:	4832      	ldr	r0, [pc, #200]	; (8001848 <StartMemory0+0xf4>)
 800177e:	f00d ff25 	bl	800f5cc <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001782:	2200      	movs	r2, #0
 8001784:	4931      	ldr	r1, [pc, #196]	; (800184c <StartMemory0+0xf8>)
 8001786:	4830      	ldr	r0, [pc, #192]	; (8001848 <StartMemory0+0xf4>)
 8001788:	f00e f825 	bl	800f7d6 <HAL_RTC_GetDate>

	 //Update global variables
	 prev_hour = sTime.Hours;
 800178c:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <StartMemory0+0xf0>)
 800178e:	781a      	ldrb	r2, [r3, #0]
 8001790:	4b2f      	ldr	r3, [pc, #188]	; (8001850 <StartMemory0+0xfc>)
 8001792:	701a      	strb	r2, [r3, #0]
	 prev_min = sTime.Minutes;
 8001794:	4b2b      	ldr	r3, [pc, #172]	; (8001844 <StartMemory0+0xf0>)
 8001796:	785a      	ldrb	r2, [r3, #1]
 8001798:	4b2e      	ldr	r3, [pc, #184]	; (8001854 <StartMemory0+0x100>)
 800179a:	701a      	strb	r2, [r3, #0]
	 prev_sec = sTime.Seconds;
 800179c:	4b29      	ldr	r3, [pc, #164]	; (8001844 <StartMemory0+0xf0>)
 800179e:	789a      	ldrb	r2, [r3, #2]
 80017a0:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <StartMemory0+0x104>)
 80017a2:	701a      	strb	r2, [r3, #0]
	 if (__HAL_RTC_SHIFT_GET_FLAG(&hrtc, RTC_FLAG_SHPF)) prev_sec++; //Adjust following the user manual
 80017a4:	4b28      	ldr	r3, [pc, #160]	; (8001848 <StartMemory0+0xf4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d005      	beq.n	80017be <StartMemory0+0x6a>
 80017b2:	4b29      	ldr	r3, [pc, #164]	; (8001858 <StartMemory0+0x104>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	3301      	adds	r3, #1
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4b27      	ldr	r3, [pc, #156]	; (8001858 <StartMemory0+0x104>)
 80017bc:	701a      	strb	r2, [r3, #0]
	 prev_subsec = sTime.SubSeconds;
 80017be:	4b21      	ldr	r3, [pc, #132]	; (8001844 <StartMemory0+0xf0>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	4a26      	ldr	r2, [pc, #152]	; (800185c <StartMemory0+0x108>)
 80017c4:	6013      	str	r3, [r2, #0]

	// Save to SD card
	#if SD_CARD_
	//reset_counter++;
	sync_counter++;
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	3301      	adds	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
	MRT_formatAvionics();
 80017cc:	f002 fada 	bl	8003d84 <MRT_formatAvionics>
	//fres = sd_open_file(filename);


	if (sd_write(&fil,(uint8_t*) msg_buffer_av)<0){
 80017d0:	4923      	ldr	r1, [pc, #140]	; (8001860 <StartMemory0+0x10c>)
 80017d2:	4824      	ldr	r0, [pc, #144]	; (8001864 <StartMemory0+0x110>)
 80017d4:	f002 ff9a 	bl	800470c <sd_write>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	da09      	bge.n	80017f2 <StartMemory0+0x9e>
		f_close(&fil);
 80017de:	4821      	ldr	r0, [pc, #132]	; (8001864 <StartMemory0+0x110>)
 80017e0:	f013 fdbe 	bl	8015360 <f_close>
		fres = sd_open_file(filename);
 80017e4:	4815      	ldr	r0, [pc, #84]	; (800183c <StartMemory0+0xe8>)
 80017e6:	f002 ff79 	bl	80046dc <sd_open_file>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b14      	ldr	r3, [pc, #80]	; (8001840 <StartMemory0+0xec>)
 80017f0:	701a      	strb	r2, [r3, #0]
	if (sd_write(&fil,(uint8_t*) msg_buffer_av) >= 0){
		reset_counter=0;
	}
	*/

	if (ejection_stage_flag < MAIN_DESCENT){
 80017f2:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <StartMemory0+0x114>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d812      	bhi.n	8001820 <StartMemory0+0xcc>
		MRT_formatPropulsion();
 80017fa:	f003 ff6b 	bl	80056d4 <MRT_formatPropulsion>
		if (sd_write(&fil,(uint8_t*) msg_buffer_pr)<0){
 80017fe:	491b      	ldr	r1, [pc, #108]	; (800186c <StartMemory0+0x118>)
 8001800:	4818      	ldr	r0, [pc, #96]	; (8001864 <StartMemory0+0x110>)
 8001802:	f002 ff83 	bl	800470c <sd_write>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	da09      	bge.n	8001820 <StartMemory0+0xcc>
			f_close(&fil);
 800180c:	4815      	ldr	r0, [pc, #84]	; (8001864 <StartMemory0+0x110>)
 800180e:	f013 fda7 	bl	8015360 <f_close>
			fres = sd_open_file(filename);
 8001812:	480a      	ldr	r0, [pc, #40]	; (800183c <StartMemory0+0xe8>)
 8001814:	f002 ff62 	bl	80046dc <sd_open_file>
 8001818:	4603      	mov	r3, r0
 800181a:	461a      	mov	r2, r3
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <StartMemory0+0xec>)
 800181e:	701a      	strb	r2, [r3, #0]
		}
	}
	//f_close(&fil);
	if (sync_counter == 50) {
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	2b32      	cmp	r3, #50	; 0x32
 8001824:	d104      	bne.n	8001830 <StartMemory0+0xdc>
		sync_counter=0;
 8001826:	2300      	movs	r3, #0
 8001828:	73fb      	strb	r3, [r7, #15]
		f_sync(&fil);
 800182a:	480e      	ldr	r0, [pc, #56]	; (8001864 <StartMemory0+0x110>)
 800182c:	f013 fd0f 	bl	801524e <f_sync>
	}

	//if (reset_counter>=30) NVIC_SystemReset(); //Reset system if we haven't been able to write for some time
	#endif

	osDelay(1000/DATA_FREQ);
 8001830:	2064      	movs	r0, #100	; 0x64
 8001832:	f014 fb5d 	bl	8015ef0 <osDelay>
	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001836:	e79f      	b.n	8001778 <StartMemory0+0x24>
 8001838:	200086b4 	.word	0x200086b4
 800183c:	20000350 	.word	0x20000350
 8001840:	200094f0 	.word	0x200094f0
 8001844:	20000368 	.word	0x20000368
 8001848:	2000878c 	.word	0x2000878c
 800184c:	2000037c 	.word	0x2000037c
 8001850:	2000041a 	.word	0x2000041a
 8001854:	2000041b 	.word	0x2000041b
 8001858:	2000041c 	.word	0x2000041c
 800185c:	20000420 	.word	0x20000420
 8001860:	20008a10 	.word	0x20008a10
 8001864:	200094f4 	.word	0x200094f4
 8001868:	20000419 	.word	0x20000419
 800186c:	20009750 	.word	0x20009750

08001870 <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 8001870:	b5b0      	push	{r4, r5, r7, lr}
 8001872:	b094      	sub	sp, #80	; 0x50
 8001874:	af04      	add	r7, sp, #16
 8001876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEjection1 */

	//Add thread id to the list
	threadsID[1]=osThreadGetId();
 8001878:	f014 fa9f 	bl	8015dba <osThreadGetId>
 800187c:	4603      	mov	r3, r0
 800187e:	4ac9      	ldr	r2, [pc, #804]	; (8001ba4 <StartEjection1+0x334>)
 8001880:	6053      	str	r3, [r2, #4]
	#if !EJECTION_THREAD
	osThreadExit();
	#endif

	//Double check the state TODO bad? (say wakeup flag is raised but ground isn't reached yet
	if (ejection_stage_flag >= LANDED)  osThreadExit(); //Ground reached
 8001882:	4bc9      	ldr	r3, [pc, #804]	; (8001ba8 <StartEjection1+0x338>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b03      	cmp	r3, #3
 8001888:	d901      	bls.n	800188e <StartEjection1+0x1e>
 800188a:	f014 fafe 	bl	8015e8a <osThreadExit>

	osDelay(5000); //TODO (remove?) Let the LPS "warm up" to have a valid pressure_hPa
 800188e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001892:	f014 fb2d 	bl	8015ef0 <osDelay>

	//TODO put in setup.h?
	uint8_t counter = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t prev_alt = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  /* Infinite loop */
  for(;;)
  {
	  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 80018a2:	4bc2      	ldr	r3, [pc, #776]	; (8001bac <StartEjection1+0x33c>)
 80018a4:	edd3 7a00 	vldr	s15, [r3]
 80018a8:	eeb0 0a67 	vmov.f32	s0, s15
 80018ac:	f002 f9e8 	bl	8003c80 <MRT_getAltitude>
 80018b0:	eef0 7a40 	vmov.f32	s15, s0
 80018b4:	4bbe      	ldr	r3, [pc, #760]	; (8001bb0 <StartEjection1+0x340>)
 80018b6:	edc3 7a00 	vstr	s15, [r3]

	  //TODO UPDATE TRUE APOGEE (TESTING?)
	  if (altitude_m > rtc_bckp_reg_alt_true_apogee){
 80018ba:	4bbe      	ldr	r3, [pc, #760]	; (8001bb4 <StartEjection1+0x344>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	ee07 3a90 	vmov	s15, r3
 80018c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018c6:	4bba      	ldr	r3, [pc, #744]	; (8001bb0 <StartEjection1+0x340>)
 80018c8:	edd3 7a00 	vldr	s15, [r3]
 80018cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d4:	d514      	bpl.n	8001900 <StartEjection1+0x90>
		  rtc_bckp_reg_alt_true_apogee = altitude_m;
 80018d6:	4bb6      	ldr	r3, [pc, #728]	; (8001bb0 <StartEjection1+0x340>)
 80018d8:	edd3 7a00 	vldr	s15, [r3]
 80018dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018e0:	ee17 2a90 	vmov	r2, s15
 80018e4:	4bb3      	ldr	r3, [pc, #716]	; (8001bb4 <StartEjection1+0x344>)
 80018e6:	601a      	str	r2, [r3, #0]
		  rtc_bckp_reg_true_apogee_time = 100*prev_min + prev_sec;
 80018e8:	4bb3      	ldr	r3, [pc, #716]	; (8001bb8 <StartEjection1+0x348>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	2364      	movs	r3, #100	; 0x64
 80018f0:	fb03 f302 	mul.w	r3, r3, r2
 80018f4:	4ab1      	ldr	r2, [pc, #708]	; (8001bbc <StartEjection1+0x34c>)
 80018f6:	7812      	ldrb	r2, [r2, #0]
 80018f8:	4413      	add	r3, r2
 80018fa:	461a      	mov	r2, r3
 80018fc:	4bb0      	ldr	r3, [pc, #704]	; (8001bc0 <StartEjection1+0x350>)
 80018fe:	601a      	str	r2, [r3, #0]
	  }

	  //TODO check for apogee (starting to go down or stagnating, add to counter)
	  if(altitude_m < prev_alt || MAX(altitude_m - prev_alt, prev_alt - altitude_m) < ALT_ERROR_MARGIN){
 8001900:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001904:	ee07 3a90 	vmov	s15, r3
 8001908:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800190c:	4ba8      	ldr	r3, [pc, #672]	; (8001bb0 <StartEjection1+0x340>)
 800190e:	edd3 7a00 	vldr	s15, [r3]
 8001912:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191a:	dc3f      	bgt.n	800199c <StartEjection1+0x12c>
 800191c:	4ba4      	ldr	r3, [pc, #656]	; (8001bb0 <StartEjection1+0x340>)
 800191e:	ed93 7a00 	vldr	s14, [r3]
 8001922:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001926:	ee07 3a90 	vmov	s15, r3
 800192a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800192e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001932:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001936:	ee07 3a90 	vmov	s15, r3
 800193a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800193e:	4b9c      	ldr	r3, [pc, #624]	; (8001bb0 <StartEjection1+0x340>)
 8001940:	edd3 7a00 	vldr	s15, [r3]
 8001944:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001948:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800194c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001950:	dd12      	ble.n	8001978 <StartEjection1+0x108>
 8001952:	4b97      	ldr	r3, [pc, #604]	; (8001bb0 <StartEjection1+0x340>)
 8001954:	ed93 7a00 	vldr	s14, [r3]
 8001958:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800195c:	ee07 3a90 	vmov	s15, r3
 8001960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001968:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800196c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001974:	d412      	bmi.n	800199c <StartEjection1+0x12c>
 8001976:	e061      	b.n	8001a3c <StartEjection1+0x1cc>
 8001978:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800197c:	ee07 3a90 	vmov	s15, r3
 8001980:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001984:	4b8a      	ldr	r3, [pc, #552]	; (8001bb0 <StartEjection1+0x340>)
 8001986:	edd3 7a00 	vldr	s15, [r3]
 800198a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800198e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001992:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199a:	d54f      	bpl.n	8001a3c <StartEjection1+0x1cc>
		  counter++;
 800199c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019a0:	3301      	adds	r3, #1
 80019a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		  char buff[50];
		  sprintf(buff, "Alt: %f,  MAX:%f, counter: %i", altitude_m, MAX(altitude_m - prev_alt, prev_alt - altitude_m), counter);
 80019a6:	4b82      	ldr	r3, [pc, #520]	; (8001bb0 <StartEjection1+0x340>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fdec 	bl	8000588 <__aeabi_f2d>
 80019b0:	4604      	mov	r4, r0
 80019b2:	460d      	mov	r5, r1
 80019b4:	4b7e      	ldr	r3, [pc, #504]	; (8001bb0 <StartEjection1+0x340>)
 80019b6:	ed93 7a00 	vldr	s14, [r3]
 80019ba:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80019be:	ee07 3a90 	vmov	s15, r3
 80019c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019ca:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80019ce:	ee07 3a90 	vmov	s15, r3
 80019d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019d6:	4b76      	ldr	r3, [pc, #472]	; (8001bb0 <StartEjection1+0x340>)
 80019d8:	edd3 7a00 	vldr	s15, [r3]
 80019dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e8:	dd0b      	ble.n	8001a02 <StartEjection1+0x192>
 80019ea:	4b71      	ldr	r3, [pc, #452]	; (8001bb0 <StartEjection1+0x340>)
 80019ec:	ed93 7a00 	vldr	s14, [r3]
 80019f0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80019f4:	ee07 3a90 	vmov	s15, r3
 80019f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a00:	e00a      	b.n	8001a18 <StartEjection1+0x1a8>
 8001a02:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001a06:	ee07 3a90 	vmov	s15, r3
 8001a0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a0e:	4b68      	ldr	r3, [pc, #416]	; (8001bb0 <StartEjection1+0x340>)
 8001a10:	edd3 7a00 	vldr	s15, [r3]
 8001a14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a18:	ee17 0a90 	vmov	r0, s15
 8001a1c:	f7fe fdb4 	bl	8000588 <__aeabi_f2d>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001a28:	f107 0008 	add.w	r0, r7, #8
 8001a2c:	9102      	str	r1, [sp, #8]
 8001a2e:	e9cd 2300 	strd	r2, r3, [sp]
 8001a32:	4622      	mov	r2, r4
 8001a34:	462b      	mov	r3, r5
 8001a36:	4963      	ldr	r1, [pc, #396]	; (8001bc4 <StartEjection1+0x354>)
 8001a38:	f01a fb42 	bl	801c0c0 <siprintf>
	  }

	  if (counter >= COUNTER_THRESHOLD || ejection_stage_flag >= DROGUE_DESCENT){
 8001a3c:	4b5a      	ldr	r3, [pc, #360]	; (8001ba8 <StartEjection1+0x338>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	f240 8147 	bls.w	8001cd4 <StartEjection1+0x464>

		  if (ejection_stage_flag < DROGUE_DESCENT){
 8001a46:	4b58      	ldr	r3, [pc, #352]	; (8001ba8 <StartEjection1+0x338>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d827      	bhi.n	8001a9e <StartEjection1+0x22e>

			  //TODO update value to be saved in rtc bckp registers
			  rtc_bckp_reg_alt_apogee = altitude_m;
 8001a4e:	4b58      	ldr	r3, [pc, #352]	; (8001bb0 <StartEjection1+0x340>)
 8001a50:	edd3 7a00 	vldr	s15, [r3]
 8001a54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a58:	ee17 2a90 	vmov	r2, s15
 8001a5c:	4b5a      	ldr	r3, [pc, #360]	; (8001bc8 <StartEjection1+0x358>)
 8001a5e:	601a      	str	r2, [r3, #0]
			  rtc_bckp_reg_apogee_time = 100*prev_min + prev_sec;
 8001a60:	4b55      	ldr	r3, [pc, #340]	; (8001bb8 <StartEjection1+0x348>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	2364      	movs	r3, #100	; 0x64
 8001a68:	fb03 f302 	mul.w	r3, r3, r2
 8001a6c:	4a53      	ldr	r2, [pc, #332]	; (8001bbc <StartEjection1+0x34c>)
 8001a6e:	7812      	ldrb	r2, [r2, #0]
 8001a70:	4413      	add	r3, r2
 8001a72:	461a      	mov	r2, r3
 8001a74:	4b55      	ldr	r3, [pc, #340]	; (8001bcc <StartEjection1+0x35c>)
 8001a76:	601a      	str	r2, [r3, #0]

			  //Update state (save the state in WatchDog thread)
			  ejection_stage_flag = DROGUE_DESCENT;
 8001a78:	4b4b      	ldr	r3, [pc, #300]	; (8001ba8 <StartEjection1+0x338>)
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	701a      	strb	r2, [r3, #0]
			  apogee_flag = 1; //Apogee reached //TODO is it where we change it???
 8001a7e:	4b54      	ldr	r3, [pc, #336]	; (8001bd0 <StartEjection1+0x360>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]
			  wd_ejection_flag = 1; //Raise the flag
 8001a84:	4b53      	ldr	r3, [pc, #332]	; (8001bd4 <StartEjection1+0x364>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	701a      	strb	r2, [r3, #0]

			  println("Eject Drogue");
 8001a8a:	4853      	ldr	r0, [pc, #332]	; (8001bd8 <StartEjection1+0x368>)
 8001a8c:	f7ff fb1e 	bl	80010cc <println>
		  }

		  //Put outside of "if" such that we only need to remember the ejection stage instead if it + arming state
		  //TODO should I put a while loop, a foor loop or just "one time functions"?
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001a90:	e005      	b.n	8001a9e <StartEjection1+0x22e>
			  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8001a92:	2201      	movs	r2, #1
 8001a94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a98:	4850      	ldr	r0, [pc, #320]	; (8001bdc <StartEjection1+0x36c>)
 8001a9a:	f00b fc65 	bl	800d368 <HAL_GPIO_WritePin>
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001a9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aa2:	484e      	ldr	r0, [pc, #312]	; (8001bdc <StartEjection1+0x36c>)
 8001aa4:	f00b fc48 	bl	800d338 <HAL_GPIO_ReadPin>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f1      	beq.n	8001a92 <StartEjection1+0x222>
		  }
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin)){
 8001aae:	e005      	b.n	8001abc <StartEjection1+0x24c>
			  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, SET); //PG12 DROGUE GATE
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ab6:	4849      	ldr	r0, [pc, #292]	; (8001bdc <StartEjection1+0x36c>)
 8001ab8:	f00b fc56 	bl	800d368 <HAL_GPIO_WritePin>
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin)){
 8001abc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ac0:	4846      	ldr	r0, [pc, #280]	; (8001bdc <StartEjection1+0x36c>)
 8001ac2:	f00b fc39 	bl	800d338 <HAL_GPIO_ReadPin>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f1      	beq.n	8001ab0 <StartEjection1+0x240>
		  }
		  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001acc:	e005      	b.n	8001ada <StartEjection1+0x26a>
			  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ad4:	4841      	ldr	r0, [pc, #260]	; (8001bdc <StartEjection1+0x36c>)
 8001ad6:	f00b fc47 	bl	800d368 <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001ada:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ade:	483f      	ldr	r0, [pc, #252]	; (8001bdc <StartEjection1+0x36c>)
 8001ae0:	f00b fc2a 	bl	800d338 <HAL_GPIO_ReadPin>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f1      	bne.n	8001ace <StartEjection1+0x25e>
		  }

		  for(;;){

			  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001aea:	4b30      	ldr	r3, [pc, #192]	; (8001bac <StartEjection1+0x33c>)
 8001aec:	edd3 7a00 	vldr	s15, [r3]
 8001af0:	eeb0 0a67 	vmov.f32	s0, s15
 8001af4:	f002 f8c4 	bl	8003c80 <MRT_getAltitude>
 8001af8:	eef0 7a40 	vmov.f32	s15, s0
 8001afc:	4b2c      	ldr	r3, [pc, #176]	; (8001bb0 <StartEjection1+0x340>)
 8001afe:	edc3 7a00 	vstr	s15, [r3]

			  //We reached main deployment altitude
			  if (altitude_m < DEPLOY_ALT || ejection_stage_flag >= MAIN_DESCENT){
 8001b02:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <StartEjection1+0x340>)
 8001b04:	edd3 7a00 	vldr	s15, [r3]
 8001b08:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001be0 <StartEjection1+0x370>
 8001b0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b14:	d404      	bmi.n	8001b20 <StartEjection1+0x2b0>
 8001b16:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <StartEjection1+0x338>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	f240 80d6 	bls.w	8001ccc <StartEjection1+0x45c>

				  if (ejection_stage_flag < MAIN_DESCENT){
 8001b20:	4b21      	ldr	r3, [pc, #132]	; (8001ba8 <StartEjection1+0x338>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d824      	bhi.n	8001b72 <StartEjection1+0x302>

					  //TODO update value to be saved in rtc bckp registers
					  rtc_bckp_reg_alt_main = altitude_m;
 8001b28:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <StartEjection1+0x340>)
 8001b2a:	edd3 7a00 	vldr	s15, [r3]
 8001b2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b32:	ee17 2a90 	vmov	r2, s15
 8001b36:	4b2b      	ldr	r3, [pc, #172]	; (8001be4 <StartEjection1+0x374>)
 8001b38:	601a      	str	r2, [r3, #0]
					  rtc_bckp_reg_main_time = 100*prev_min + prev_sec;
 8001b3a:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <StartEjection1+0x348>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	2364      	movs	r3, #100	; 0x64
 8001b42:	fb03 f302 	mul.w	r3, r3, r2
 8001b46:	4a1d      	ldr	r2, [pc, #116]	; (8001bbc <StartEjection1+0x34c>)
 8001b48:	7812      	ldrb	r2, [r2, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b26      	ldr	r3, [pc, #152]	; (8001be8 <StartEjection1+0x378>)
 8001b50:	601a      	str	r2, [r3, #0]

					  //Update state (save the state in WatchDog thread)
					  ejection_stage_flag = MAIN_DESCENT;
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <StartEjection1+0x338>)
 8001b54:	2203      	movs	r2, #3
 8001b56:	701a      	strb	r2, [r3, #0]
					  wd_ejection_flag = 1; //Raise the flag
 8001b58:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <StartEjection1+0x364>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	701a      	strb	r2, [r3, #0]

					  println("Eject Main");
 8001b5e:	4823      	ldr	r0, [pc, #140]	; (8001bec <StartEjection1+0x37c>)
 8001b60:	f7ff fab4 	bl	80010cc <println>
				  }

				  //Put outside of "if" such that we only need to remember the ejection stage instead if it + arming state
				  //TODO should I put a while loop, a foor loop or just "one time functions"?
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001b64:	e005      	b.n	8001b72 <StartEjection1+0x302>
					  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8001b66:	2201      	movs	r2, #1
 8001b68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b6c:	481b      	ldr	r0, [pc, #108]	; (8001bdc <StartEjection1+0x36c>)
 8001b6e:	f00b fbfb 	bl	800d368 <HAL_GPIO_WritePin>
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001b72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b76:	4819      	ldr	r0, [pc, #100]	; (8001bdc <StartEjection1+0x36c>)
 8001b78:	f00b fbde 	bl	800d338 <HAL_GPIO_ReadPin>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f1      	beq.n	8001b66 <StartEjection1+0x2f6>
				  }
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin)){
 8001b82:	e005      	b.n	8001b90 <StartEjection1+0x320>
					  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, SET); //PG11 MAIN GATE
 8001b84:	2201      	movs	r2, #1
 8001b86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b8a:	4814      	ldr	r0, [pc, #80]	; (8001bdc <StartEjection1+0x36c>)
 8001b8c:	f00b fbec 	bl	800d368 <HAL_GPIO_WritePin>
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin)){
 8001b90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b94:	4811      	ldr	r0, [pc, #68]	; (8001bdc <StartEjection1+0x36c>)
 8001b96:	f00b fbcf 	bl	800d338 <HAL_GPIO_ReadPin>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f1      	beq.n	8001b84 <StartEjection1+0x314>
				  }
				  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001ba0:	e02c      	b.n	8001bfc <StartEjection1+0x38c>
 8001ba2:	bf00      	nop
 8001ba4:	200086b4 	.word	0x200086b4
 8001ba8:	20000419 	.word	0x20000419
 8001bac:	20000578 	.word	0x20000578
 8001bb0:	20000360 	.word	0x20000360
 8001bb4:	200003d4 	.word	0x200003d4
 8001bb8:	2000041b 	.word	0x2000041b
 8001bbc:	2000041c 	.word	0x2000041c
 8001bc0:	200003d8 	.word	0x200003d8
 8001bc4:	08020b00 	.word	0x08020b00
 8001bc8:	200003dc 	.word	0x200003dc
 8001bcc:	200003e0 	.word	0x200003e0
 8001bd0:	20000418 	.word	0x20000418
 8001bd4:	20000364 	.word	0x20000364
 8001bd8:	08020b20 	.word	0x08020b20
 8001bdc:	40021800 	.word	0x40021800
 8001be0:	44fa0000 	.word	0x44fa0000
 8001be4:	200003e4 	.word	0x200003e4
 8001be8:	200003e8 	.word	0x200003e8
 8001bec:	08020b30 	.word	0x08020b30
					  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bf6:	483e      	ldr	r0, [pc, #248]	; (8001cf0 <StartEjection1+0x480>)
 8001bf8:	f00b fbb6 	bl	800d368 <HAL_GPIO_WritePin>
				  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001bfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c00:	483b      	ldr	r0, [pc, #236]	; (8001cf0 <StartEjection1+0x480>)
 8001c02:	f00b fb99 	bl	800d338 <HAL_GPIO_ReadPin>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1f1      	bne.n	8001bf0 <StartEjection1+0x380>
				  }

				  uint8_t prev_altitude = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				  uint8_t cur_altitude = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				  uint8_t counter = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				  while(counter < 5){
 8001c1e:	e02d      	b.n	8001c7c <StartEjection1+0x40c>
					  cur_altitude = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001c20:	4b34      	ldr	r3, [pc, #208]	; (8001cf4 <StartEjection1+0x484>)
 8001c22:	edd3 7a00 	vldr	s15, [r3]
 8001c26:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2a:	f002 f829 	bl	8003c80 <MRT_getAltitude>
 8001c2e:	eef0 7a40 	vmov.f32	s15, s0
 8001c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c36:	edc7 7a00 	vstr	s15, [r7]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					  if (cur_altitude - prev_altitude < 1 && cur_altitude - prev_altitude > -1){ //TODO might need a bigger range to account for errors (gotta know what we expect to be our slowest descent speed)
 8001c40:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001c44:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	dc0c      	bgt.n	8001c68 <StartEjection1+0x3f8>
 8001c4e:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001c52:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	db05      	blt.n	8001c68 <StartEjection1+0x3f8>
						  counter++;
 8001c5c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001c60:	3301      	adds	r3, #1
 8001c62:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001c66:	e002      	b.n	8001c6e <StartEjection1+0x3fe>
					  }
					  else{
						  counter = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					  }
					  prev_altitude = cur_altitude;
 8001c6e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001c72:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					  osDelay(100);
 8001c76:	2064      	movs	r0, #100	; 0x64
 8001c78:	f014 f93a 	bl	8015ef0 <osDelay>
				  while(counter < 5){
 8001c7c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d9cd      	bls.n	8001c20 <StartEjection1+0x3b0>
				  }

				  //TODO update value to be saved in rtc bckp registers
				  rtc_bckp_reg_alt_landed = altitude_m;
 8001c84:	4b1c      	ldr	r3, [pc, #112]	; (8001cf8 <StartEjection1+0x488>)
 8001c86:	edd3 7a00 	vldr	s15, [r3]
 8001c8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c8e:	ee17 2a90 	vmov	r2, s15
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <StartEjection1+0x48c>)
 8001c94:	601a      	str	r2, [r3, #0]
				  rtc_bckp_reg_landed_time = 100*prev_min + prev_sec;
 8001c96:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <StartEjection1+0x490>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	2364      	movs	r3, #100	; 0x64
 8001c9e:	fb03 f302 	mul.w	r3, r3, r2
 8001ca2:	4a18      	ldr	r2, [pc, #96]	; (8001d04 <StartEjection1+0x494>)
 8001ca4:	7812      	ldrb	r2, [r2, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <StartEjection1+0x498>)
 8001cac:	601a      	str	r2, [r3, #0]

				  //Update state (saved state in WatchDog thread)
				  ejection_stage_flag = LANDED;
 8001cae:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <StartEjection1+0x49c>)
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	701a      	strb	r2, [r3, #0]
				  wd_ejection_flag = 1;
 8001cb4:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <StartEjection1+0x4a0>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	701a      	strb	r2, [r3, #0]

				  VR_Stop_Rec();
 8001cba:	f003 fc3d 	bl	8005538 <VR_Stop_Rec>
				  VR_Power_Off();
 8001cbe:	f003 fc23 	bl	8005508 <VR_Power_Off>

				  println("Ground Level Reached");
 8001cc2:	4814      	ldr	r0, [pc, #80]	; (8001d14 <StartEjection1+0x4a4>)
 8001cc4:	f7ff fa02 	bl	80010cc <println>
				  osThreadExit();
 8001cc8:	f014 f8df 	bl	8015e8a <osThreadExit>

			  }

			  osDelay(10);
 8001ccc:	200a      	movs	r0, #10
 8001cce:	f014 f90f 	bl	8015ef0 <osDelay>
			  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001cd2:	e70a      	b.n	8001aea <StartEjection1+0x27a>
		  }
	  }


	  //Update previous altitude
	  prev_alt = altitude_m;
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <StartEjection1+0x488>)
 8001cd6:	edd3 7a00 	vldr	s15, [r3]
 8001cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cde:	edc7 7a00 	vstr	s15, [r7]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	  osDelay(10);
 8001ce8:	200a      	movs	r0, #10
 8001cea:	f014 f901 	bl	8015ef0 <osDelay>
	  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001cee:	e5d8      	b.n	80018a2 <StartEjection1+0x32>
 8001cf0:	40021800 	.word	0x40021800
 8001cf4:	20000578 	.word	0x20000578
 8001cf8:	20000360 	.word	0x20000360
 8001cfc:	200003ec 	.word	0x200003ec
 8001d00:	2000041b 	.word	0x2000041b
 8001d04:	2000041c 	.word	0x2000041c
 8001d08:	200003f0 	.word	0x200003f0
 8001d0c:	20000419 	.word	0x20000419
 8001d10:	20000364 	.word	0x20000364
 8001d14:	08020b3c 	.word	0x08020b3c

08001d18 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b0c4      	sub	sp, #272	; 0x110
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartTelemetry2 */

	//Add thread id to the list
	threadsID[2]=osThreadGetId();
 8001d22:	f014 f84a 	bl	8015dba <osThreadGetId>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4a37      	ldr	r2, [pc, #220]	; (8001e08 <StartTelemetry2+0xf0>)
 8001d2a:	6093      	str	r3, [r2, #8]
	#if !TELEMETRY_THREAD
	osThreadExit();
	#endif

	char radio_buffer[RADIO_BUFFER_SIZE];
	uint8_t counter = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t iridium_counter = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8001d38:	2201      	movs	r2, #1
 8001d3a:	2108      	movs	r1, #8
 8001d3c:	4833      	ldr	r0, [pc, #204]	; (8001e0c <StartTelemetry2+0xf4>)
 8001d3e:	f00b fb13 	bl	800d368 <HAL_GPIO_WritePin>

	  if (apogee_flag){
 8001d42:	4b33      	ldr	r3, [pc, #204]	; (8001e10 <StartTelemetry2+0xf8>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <StartTelemetry2+0x3a>
		  osDelay(1000/POST_APOGEE_SEND_FREQ);
 8001d4a:	200a      	movs	r0, #10
 8001d4c:	f014 f8d0 	bl	8015ef0 <osDelay>
 8001d50:	e01b      	b.n	8001d8a <StartTelemetry2+0x72>
	  }
	  else{ //Only send prop data pre-apogee

		  //Send propulsion data
		  memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f018 feb3 	bl	801aac8 <memset>
		  MRT_formatPropulsion();
 8001d62:	f003 fcb7 	bl	80056d4 <MRT_formatPropulsion>
		  memcpy(radio_buffer, msg_buffer_pr, strlen(msg_buffer_pr));
 8001d66:	482b      	ldr	r0, [pc, #172]	; (8001e14 <StartTelemetry2+0xfc>)
 8001d68:	f7fe fa4c 	bl	8000204 <strlen>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	4928      	ldr	r1, [pc, #160]	; (8001e14 <StartTelemetry2+0xfc>)
 8001d74:	4618      	mov	r0, r3
 8001d76:	f018 fe7f 	bl	801aa78 <memcpy>
		  MRT_radio_tx((char*) radio_buffer);
 8001d7a:	f107 030c 	add.w	r3, r7, #12
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f009 f87c 	bl	800ae7c <MRT_radio_tx>

		  osDelay(1000/PRE_APOGEE_SEND_FREQ);
 8001d84:	2014      	movs	r0, #20
 8001d86:	f014 f8b3 	bl	8015ef0 <osDelay>
	  }

	  if (counter == SENSORS_SEND_FREQ_DIVIDER){
 8001d8a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d8e:	2b0a      	cmp	r3, #10
 8001d90:	d12e      	bne.n	8001df0 <StartTelemetry2+0xd8>
		  counter = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		  float SEC = (uint8_t) time % 60; sprintf(&SEC,"%.0f",SEC);
		  float SUBSEC = time / 3600.0; sprintf(&SUBSEC,"%.0f",SUBSEC);
		  */

	  	  //Send sensors data
		  memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 8001d98:	f107 030c 	add.w	r3, r7, #12
 8001d9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f018 fe90 	bl	801aac8 <memset>
		  MRT_formatAvionics();
 8001da8:	f001 ffec 	bl	8003d84 <MRT_formatAvionics>
		  memcpy(radio_buffer, msg_buffer_av, strlen(msg_buffer_av));
 8001dac:	481a      	ldr	r0, [pc, #104]	; (8001e18 <StartTelemetry2+0x100>)
 8001dae:	f7fe fa29 	bl	8000204 <strlen>
 8001db2:	4602      	mov	r2, r0
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	4917      	ldr	r1, [pc, #92]	; (8001e18 <StartTelemetry2+0x100>)
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f018 fe5c 	bl	801aa78 <memcpy>
		  MRT_radio_tx((char*) radio_buffer);
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f009 f859 	bl	800ae7c <MRT_radio_tx>


		  if(apogee_flag && iridium_counter == IRIDIUM_SEND_FREQ_DIVIDER){
 8001dca:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <StartTelemetry2+0xf8>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d009      	beq.n	8001de6 <StartTelemetry2+0xce>
 8001dd2:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001dd6:	2b05      	cmp	r3, #5
 8001dd8:	d105      	bne.n	8001de6 <StartTelemetry2+0xce>
			  iridium_counter = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
			  #if IRIDIUM_ //Iridium send
			  hiridium.getTime(); //TODO doesn't cost anything
 8001de0:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <StartTelemetry2+0x104>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	4798      	blx	r3

			  //TODO make a list of latest coordinates retrieved to optimize the credits we use
			  //hiridium.sendMessage(msg); TODO IT COSTS CREDITS WATCH OUT
			  #endif
		  }
		  iridium_counter++;
 8001de6:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001dea:	3301      	adds	r3, #1
 8001dec:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	  }
	  counter++;
 8001df0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001df4:	3301      	adds	r3, #1
 8001df6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f


	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2108      	movs	r1, #8
 8001dfe:	4803      	ldr	r0, [pc, #12]	; (8001e0c <StartTelemetry2+0xf4>)
 8001e00:	f00b fab2 	bl	800d368 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8001e04:	e798      	b.n	8001d38 <StartTelemetry2+0x20>
 8001e06:	bf00      	nop
 8001e08:	200086b4 	.word	0x200086b4
 8001e0c:	40020800 	.word	0x40020800
 8001e10:	20000418 	.word	0x20000418
 8001e14:	20009750 	.word	0x20009750
 8001e18:	20008a10 	.word	0x20008a10
 8001e1c:	200005a4 	.word	0x200005a4

08001e20 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//Add thread id to the list
	threadsID[3]=osThreadGetId();
 8001e28:	f013 ffc7 	bl	8015dba <osThreadGetId>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4a13      	ldr	r2, [pc, #76]	; (8001e7c <StartSensors3+0x5c>)
 8001e30:	60d3      	str	r3, [r2, #12]


  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8001e32:	2201      	movs	r2, #1
 8001e34:	2102      	movs	r1, #2
 8001e36:	4812      	ldr	r0, [pc, #72]	; (8001e80 <StartSensors3+0x60>)
 8001e38:	f00b fa96 	bl	800d368 <HAL_GPIO_WritePin>

	  //GPS
	  hgps.pollAll();
 8001e3c:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <StartSensors3+0x64>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	4798      	blx	r3

	  //LSM6DSR
	  hlsm6dsr.pollAll();
 8001e42:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <StartSensors3+0x68>)
 8001e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e46:	4798      	blx	r3

	  //LPS22HH
	  hlps22hh.pollAll();
 8001e48:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <StartSensors3+0x6c>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	4798      	blx	r3

	  //Gates continuity
	  gates_continuity = MRT_getContinuity();
 8001e4e:	f001 ff65 	bl	8003d1c <MRT_getContinuity>
 8001e52:	4603      	mov	r3, r0
 8001e54:	461a      	mov	r2, r3
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <StartSensors3+0x70>)
 8001e58:	701a      	strb	r2, [r3, #0]

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2102      	movs	r1, #2
 8001e5e:	4808      	ldr	r0, [pc, #32]	; (8001e80 <StartSensors3+0x60>)
 8001e60:	f00b fa82 	bl	800d368 <HAL_GPIO_WritePin>

	  if (apogee_flag){
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <StartSensors3+0x74>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <StartSensors3+0x54>
		  osDelay(1000/POST_APOGEE_POLL_FREQ);
 8001e6c:	200a      	movs	r0, #10
 8001e6e:	f014 f83f 	bl	8015ef0 <osDelay>
 8001e72:	e7de      	b.n	8001e32 <StartSensors3+0x12>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_POLL_FREQ);
 8001e74:	2014      	movs	r0, #20
 8001e76:	f014 f83b 	bl	8015ef0 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8001e7a:	e7da      	b.n	8001e32 <StartSensors3+0x12>
 8001e7c:	200086b4 	.word	0x200086b4
 8001e80:	40020800 	.word	0x40020800
 8001e84:	2000058c 	.word	0x2000058c
 8001e88:	2000054c 	.word	0x2000054c
 8001e8c:	20000578 	.word	0x20000578
 8001e90:	200003f7 	.word	0x200003f7
 8001e94:	20000418 	.word	0x20000418

08001e98 <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 8001e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e9c:	b0c6      	sub	sp, #280	; 0x118
 8001e9e:	af04      	add	r7, sp, #16
 8001ea0:	1d3b      	adds	r3, r7, #4
 8001ea2:	6018      	str	r0, [r3, #0]
	char buffer[WD_BUFFER_SIZE];

  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	2104      	movs	r1, #4
 8001ea8:	4860      	ldr	r0, [pc, #384]	; (800202c <StartWatchDog+0x194>)
 8001eaa:	f00b fa5d 	bl	800d368 <HAL_GPIO_WritePin>

	 HAL_IWDG_Refresh(&hiwdg);
 8001eae:	4860      	ldr	r0, [pc, #384]	; (8002030 <StartWatchDog+0x198>)
 8001eb0:	f00c fb3e 	bl	800e530 <HAL_IWDG_Refresh>
	 uint64_t* i = 0x20CDCDCD;
	 *i = 10;
	#endif

	 //TODO remove for comp
	 memset(buffer, 0, WD_BUFFER_SIZE);
 8001eb4:	f107 0308 	add.w	r3, r7, #8
 8001eb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f018 fe02 	bl	801aac8 <memset>
	 sprintf(buffer, "Time: %i:%i:%i ::%lu	Altitude: \r\n %f\r\n", prev_hour,prev_min,prev_sec,prev_subsec , altitude_m);
 8001ec4:	4b5b      	ldr	r3, [pc, #364]	; (8002034 <StartWatchDog+0x19c>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	461e      	mov	r6, r3
 8001eca:	4b5b      	ldr	r3, [pc, #364]	; (8002038 <StartWatchDog+0x1a0>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	4698      	mov	r8, r3
 8001ed0:	4b5a      	ldr	r3, [pc, #360]	; (800203c <StartWatchDog+0x1a4>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	461d      	mov	r5, r3
 8001ed6:	4b5a      	ldr	r3, [pc, #360]	; (8002040 <StartWatchDog+0x1a8>)
 8001ed8:	681c      	ldr	r4, [r3, #0]
 8001eda:	4b5a      	ldr	r3, [pc, #360]	; (8002044 <StartWatchDog+0x1ac>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fb52 	bl	8000588 <__aeabi_f2d>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	f107 0008 	add.w	r0, r7, #8
 8001eec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ef0:	9401      	str	r4, [sp, #4]
 8001ef2:	9500      	str	r5, [sp, #0]
 8001ef4:	4643      	mov	r3, r8
 8001ef6:	4632      	mov	r2, r6
 8001ef8:	4953      	ldr	r1, [pc, #332]	; (8002048 <StartWatchDog+0x1b0>)
 8001efa:	f01a f8e1 	bl	801c0c0 <siprintf>
	 println((char*) buffer);
 8001efe:	f107 0308 	add.w	r3, r7, #8
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff f8e2 	bl	80010cc <println>


	 //Check if new ejection stage to save in memory
	 if(wd_ejection_flag == 1){
 8001f08:	4b50      	ldr	r3, [pc, #320]	; (800204c <StartWatchDog+0x1b4>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d15d      	bne.n	8001fcc <StartWatchDog+0x134>

		wd_ejection_flag = 0;
 8001f10:	4b4e      	ldr	r3, [pc, #312]	; (800204c <StartWatchDog+0x1b4>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]

		//Update ejection stage flag and save it
		rtc_bckp_reg_ejection_stage = ejection_stage_flag;
 8001f16:	4b4e      	ldr	r3, [pc, #312]	; (8002050 <StartWatchDog+0x1b8>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4b4d      	ldr	r3, [pc, #308]	; (8002054 <StartWatchDog+0x1bc>)
 8001f1e:	601a      	str	r2, [r3, #0]
		ext_flash_ejection_stage = ejection_stage_flag;
 8001f20:	4b4b      	ldr	r3, [pc, #300]	; (8002050 <StartWatchDog+0x1b8>)
 8001f22:	781a      	ldrb	r2, [r3, #0]
 8001f24:	4b4c      	ldr	r3, [pc, #304]	; (8002058 <StartWatchDog+0x1c0>)
 8001f26:	701a      	strb	r2, [r3, #0]
		MRT_saveFlagValue(FC_STATE_FLIGHT);
 8001f28:	2004      	movs	r0, #4
 8001f2a:	f002 f87b 	bl	8004024 <MRT_saveFlagValue>

		//If applicable, update apogee flag
		if (ejection_stage_flag >= DROGUE_DESCENT){
 8001f2e:	4b48      	ldr	r3, [pc, #288]	; (8002050 <StartWatchDog+0x1b8>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d90e      	bls.n	8001f54 <StartWatchDog+0xbc>
			apogee_flag = 1;
 8001f36:	4b49      	ldr	r3, [pc, #292]	; (800205c <StartWatchDog+0x1c4>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	701a      	strb	r2, [r3, #0]
			rtc_bckp_reg_apogee = apogee_flag;
 8001f3c:	4b47      	ldr	r3, [pc, #284]	; (800205c <StartWatchDog+0x1c4>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b47      	ldr	r3, [pc, #284]	; (8002060 <StartWatchDog+0x1c8>)
 8001f44:	601a      	str	r2, [r3, #0]
			ext_flash_apogee = apogee_flag;
 8001f46:	4b45      	ldr	r3, [pc, #276]	; (800205c <StartWatchDog+0x1c4>)
 8001f48:	781a      	ldrb	r2, [r3, #0]
 8001f4a:	4b46      	ldr	r3, [pc, #280]	; (8002064 <StartWatchDog+0x1cc>)
 8001f4c:	701a      	strb	r2, [r3, #0]
			MRT_saveFlagValue(FC_STATE_APOGEE);
 8001f4e:	2003      	movs	r0, #3
 8001f50:	f002 f868 	bl	8004024 <MRT_saveFlagValue>
		}

		//TODO TESTING SAVE EVERY ALT REGISTERS
		MRT_RTC_setBackupReg(FC_STATE_ALT_PAD, rtc_bckp_reg_alt_pad);
 8001f54:	4b44      	ldr	r3, [pc, #272]	; (8002068 <StartWatchDog+0x1d0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	2009      	movs	r0, #9
 8001f5c:	f001 f988 	bl	8003270 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_PAD_TIME, rtc_bckp_reg_pad_time);
 8001f60:	4b42      	ldr	r3, [pc, #264]	; (800206c <StartWatchDog+0x1d4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4619      	mov	r1, r3
 8001f66:	200a      	movs	r0, #10
 8001f68:	f001 f982 	bl	8003270 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_TRUE_APOGEE, rtc_bckp_reg_alt_true_apogee);
 8001f6c:	4b40      	ldr	r3, [pc, #256]	; (8002070 <StartWatchDog+0x1d8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	200b      	movs	r0, #11
 8001f74:	f001 f97c 	bl	8003270 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_TRUE_APOGEE_TIME, rtc_bckp_reg_true_apogee_time);
 8001f78:	4b3e      	ldr	r3, [pc, #248]	; (8002074 <StartWatchDog+0x1dc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	200c      	movs	r0, #12
 8001f80:	f001 f976 	bl	8003270 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_ALT_APOGEE, rtc_bckp_reg_alt_apogee);
 8001f84:	4b3c      	ldr	r3, [pc, #240]	; (8002078 <StartWatchDog+0x1e0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	200d      	movs	r0, #13
 8001f8c:	f001 f970 	bl	8003270 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_APOGEE_TIME, rtc_bckp_reg_apogee_time);
 8001f90:	4b3a      	ldr	r3, [pc, #232]	; (800207c <StartWatchDog+0x1e4>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4619      	mov	r1, r3
 8001f96:	200e      	movs	r0, #14
 8001f98:	f001 f96a 	bl	8003270 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_ALT_MAIN, rtc_bckp_reg_alt_main);
 8001f9c:	4b38      	ldr	r3, [pc, #224]	; (8002080 <StartWatchDog+0x1e8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	200f      	movs	r0, #15
 8001fa4:	f001 f964 	bl	8003270 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_MAIN_TIME, rtc_bckp_reg_main_time);
 8001fa8:	4b36      	ldr	r3, [pc, #216]	; (8002084 <StartWatchDog+0x1ec>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4619      	mov	r1, r3
 8001fae:	2010      	movs	r0, #16
 8001fb0:	f001 f95e 	bl	8003270 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_ALT_LANDED, rtc_bckp_reg_alt_landed);
 8001fb4:	4b34      	ldr	r3, [pc, #208]	; (8002088 <StartWatchDog+0x1f0>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	2011      	movs	r0, #17
 8001fbc:	f001 f958 	bl	8003270 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_LANDED_TIME, rtc_bckp_reg_landed_time);
 8001fc0:	4b32      	ldr	r3, [pc, #200]	; (800208c <StartWatchDog+0x1f4>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	2012      	movs	r0, #18
 8001fc8:	f001 f952 	bl	8003270 <MRT_RTC_setBackupReg>
	 }

	  //Check if it's sleep time
	  if (flagA==1 || flagB==1){
 8001fcc:	4b30      	ldr	r3, [pc, #192]	; (8002090 <StartWatchDog+0x1f8>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d003      	beq.n	8001fdc <StartWatchDog+0x144>
 8001fd4:	4b2f      	ldr	r3, [pc, #188]	; (8002094 <StartWatchDog+0x1fc>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d112      	bne.n	8002002 <StartWatchDog+0x16a>
		//Update iwdg_flag
		iwdg_flag = 1;
 8001fdc:	4b2e      	ldr	r3, [pc, #184]	; (8002098 <StartWatchDog+0x200>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
		rtc_bckp_reg_iwdg = iwdg_flag;
 8001fe2:	4b2d      	ldr	r3, [pc, #180]	; (8002098 <StartWatchDog+0x200>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4b2c      	ldr	r3, [pc, #176]	; (800209c <StartWatchDog+0x204>)
 8001fea:	601a      	str	r2, [r3, #0]
		ext_flash_iwdg = iwdg_flag;
 8001fec:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <StartWatchDog+0x200>)
 8001fee:	781a      	ldrb	r2, [r3, #0]
 8001ff0:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <StartWatchDog+0x208>)
 8001ff2:	701a      	strb	r2, [r3, #0]
		MRT_saveFlagValue(FC_STATE_IWDG);
 8001ff4:	2002      	movs	r0, #2
 8001ff6:	f002 f815 	bl	8004024 <MRT_saveFlagValue>

		//Save the RTC time
		MRT_saveTotalTime();
 8001ffa:	f002 f89f 	bl	800413c <MRT_saveTotalTime>

		//Reset to deactivate IWDG
		NVIC_SystemReset();
 8001ffe:	f7ff fb0b 	bl	8001618 <__NVIC_SystemReset>
	  }

	  //Save the RTC time
	  MRT_saveTotalTime();
 8002002:	f002 f89b 	bl	800413c <MRT_saveTotalTime>


	  //Check for complete restart
	  if(restart_flag == 1){
 8002006:	4b27      	ldr	r3, [pc, #156]	; (80020a4 <StartWatchDog+0x20c>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d101      	bne.n	8002012 <StartWatchDog+0x17a>
		  MRT_resetFromStart();
 800200e:	f001 fbef 	bl	80037f0 <MRT_resetFromStart>
	  }

	  MRT_checkThreadStates();
 8002012:	f000 f999 	bl	8002348 <MRT_checkThreadStates>

	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	2104      	movs	r1, #4
 800201a:	4804      	ldr	r0, [pc, #16]	; (800202c <StartWatchDog+0x194>)
 800201c:	f00b f9a4 	bl	800d368 <HAL_GPIO_WritePin>

	  osDelay(1000/WD_FREQ);
 8002020:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002024:	f013 ff64 	bl	8015ef0 <osDelay>
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8002028:	e73c      	b.n	8001ea4 <StartWatchDog+0xc>
 800202a:	bf00      	nop
 800202c:	40020800 	.word	0x40020800
 8002030:	20008780 	.word	0x20008780
 8002034:	2000041a 	.word	0x2000041a
 8002038:	2000041b 	.word	0x2000041b
 800203c:	2000041c 	.word	0x2000041c
 8002040:	20000420 	.word	0x20000420
 8002044:	20000360 	.word	0x20000360
 8002048:	08020b54 	.word	0x08020b54
 800204c:	20000364 	.word	0x20000364
 8002050:	20000419 	.word	0x20000419
 8002054:	200003b8 	.word	0x200003b8
 8002058:	200003fc 	.word	0x200003fc
 800205c:	20000418 	.word	0x20000418
 8002060:	200003b4 	.word	0x200003b4
 8002064:	200003fb 	.word	0x200003fb
 8002068:	200003cc 	.word	0x200003cc
 800206c:	200003d0 	.word	0x200003d0
 8002070:	200003d4 	.word	0x200003d4
 8002074:	200003d8 	.word	0x200003d8
 8002078:	200003dc 	.word	0x200003dc
 800207c:	200003e0 	.word	0x200003e0
 8002080:	200003e4 	.word	0x200003e4
 8002084:	200003e8 	.word	0x200003e8
 8002088:	200003ec 	.word	0x200003ec
 800208c:	200003f0 	.word	0x200003f0
 8002090:	200003f4 	.word	0x200003f4
 8002094:	200003f5 	.word	0x200003f5
 8002098:	20000417 	.word	0x20000417
 800209c:	200003b0 	.word	0x200003b0
 80020a0:	200003fa 	.word	0x200003fa
 80020a4:	200003f6 	.word	0x200003f6

080020a8 <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */

	//Add thread id to the list
	threadsID[4]=osThreadGetId();
 80020b0:	f013 fe83 	bl	8015dba <osThreadGetId>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4a0c      	ldr	r2, [pc, #48]	; (80020e8 <StartPropulsion4+0x40>)
 80020b8:	6113      	str	r3, [r2, #16]

	#if !PROPULSION_THREAD
	osThreadExit();
	#endif

	if (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT){
 80020ba:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <StartPropulsion4+0x44>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d103      	bne.n	80020ca <StartPropulsion4+0x22>
 80020c2:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <StartPropulsion4+0x48>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d901      	bls.n	80020ce <StartPropulsion4+0x26>
		osThreadExit();
 80020ca:	f013 fede 	bl	8015e8a <osThreadExit>

  /* Infinite loop */
  for(;;)
  {
	  //Poll propulsion sensors
	  MRT_pollPropulsion();
 80020ce:	f003 fac9 	bl	8005664 <MRT_pollPropulsion>

	  if (apogee_flag){
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <StartPropulsion4+0x44>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <StartPropulsion4+0x36>
		  osThreadExit();
 80020da:	f013 fed6 	bl	8015e8a <osThreadExit>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_POLL_FREQ);
 80020de:	2014      	movs	r0, #20
 80020e0:	f013 ff06 	bl	8015ef0 <osDelay>
	  MRT_pollPropulsion();
 80020e4:	e7f3      	b.n	80020ce <StartPropulsion4+0x26>
 80020e6:	bf00      	nop
 80020e8:	200086b4 	.word	0x200086b4
 80020ec:	20000418 	.word	0x20000418
 80020f0:	20000419 	.word	0x20000419

080020f4 <MRT_waitForLaunch>:
/* USER CODE BEGIN Application */

//TODO private functions


void MRT_waitForLaunch(void){
 80020f4:	b5b0      	push	{r4, r5, r7, lr}
 80020f6:	b0c6      	sub	sp, #280	; 0x118
 80020f8:	af04      	add	r7, sp, #16

	println("Waiting for launch command from ground station\r\n");
 80020fa:	487b      	ldr	r0, [pc, #492]	; (80022e8 <MRT_waitForLaunch+0x1f4>)
 80020fc:	f7fe ffe6 	bl	80010cc <println>

	char radio_buffer[RADIO_BUFFER_SIZE];
	radio_command cmd = -1;
 8002100:	23ff      	movs	r3, #255	; 0xff
 8002102:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

	//Open SD card file
	fres = sd_open_file(filename);
 8002106:	4879      	ldr	r0, [pc, #484]	; (80022ec <MRT_waitForLaunch+0x1f8>)
 8002108:	f002 fae8 	bl	80046dc <sd_open_file>
 800210c:	4603      	mov	r3, r0
 800210e:	461a      	mov	r2, r3
 8002110:	4b77      	ldr	r3, [pc, #476]	; (80022f0 <MRT_waitForLaunch+0x1fc>)
 8002112:	701a      	strb	r2, [r3, #0]
	uint8_t sync_counter = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

	//Poll propulsion until launch command sent
	while((XTEND_ || SRADIO_) && ejection_stage_flag == PAD){
 800211a:	e0ad      	b.n	8002278 <MRT_waitForLaunch+0x184>
		HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 800211c:	2201      	movs	r2, #1
 800211e:	2108      	movs	r1, #8
 8002120:	4874      	ldr	r0, [pc, #464]	; (80022f4 <MRT_waitForLaunch+0x200>)
 8002122:	f00b f921 	bl	800d368 <HAL_GPIO_WritePin>

		HAL_IWDG_Refresh(&hiwdg);
 8002126:	4874      	ldr	r0, [pc, #464]	; (80022f8 <MRT_waitForLaunch+0x204>)
 8002128:	f00c fa02 	bl	800e530 <HAL_IWDG_Refresh>

		//Get RTC time
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800212c:	2200      	movs	r2, #0
 800212e:	4973      	ldr	r1, [pc, #460]	; (80022fc <MRT_waitForLaunch+0x208>)
 8002130:	4873      	ldr	r0, [pc, #460]	; (8002300 <MRT_waitForLaunch+0x20c>)
 8002132:	f00d fa4b 	bl	800f5cc <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002136:	2200      	movs	r2, #0
 8002138:	4972      	ldr	r1, [pc, #456]	; (8002304 <MRT_waitForLaunch+0x210>)
 800213a:	4871      	ldr	r0, [pc, #452]	; (8002300 <MRT_waitForLaunch+0x20c>)
 800213c:	f00d fb4b 	bl	800f7d6 <HAL_RTC_GetDate>

		//Update global variables
		prev_hour = sTime.Hours;
 8002140:	4b6e      	ldr	r3, [pc, #440]	; (80022fc <MRT_waitForLaunch+0x208>)
 8002142:	781a      	ldrb	r2, [r3, #0]
 8002144:	4b70      	ldr	r3, [pc, #448]	; (8002308 <MRT_waitForLaunch+0x214>)
 8002146:	701a      	strb	r2, [r3, #0]
		prev_min = sTime.Minutes;
 8002148:	4b6c      	ldr	r3, [pc, #432]	; (80022fc <MRT_waitForLaunch+0x208>)
 800214a:	785a      	ldrb	r2, [r3, #1]
 800214c:	4b6f      	ldr	r3, [pc, #444]	; (800230c <MRT_waitForLaunch+0x218>)
 800214e:	701a      	strb	r2, [r3, #0]
		prev_sec = sTime.Seconds;
 8002150:	4b6a      	ldr	r3, [pc, #424]	; (80022fc <MRT_waitForLaunch+0x208>)
 8002152:	789a      	ldrb	r2, [r3, #2]
 8002154:	4b6e      	ldr	r3, [pc, #440]	; (8002310 <MRT_waitForLaunch+0x21c>)
 8002156:	701a      	strb	r2, [r3, #0]
		if (__HAL_RTC_SHIFT_GET_FLAG(&hrtc, RTC_FLAG_SHPF)) prev_sec++; //Adjust following the user manual
 8002158:	4b69      	ldr	r3, [pc, #420]	; (8002300 <MRT_waitForLaunch+0x20c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d005      	beq.n	8002172 <MRT_waitForLaunch+0x7e>
 8002166:	4b6a      	ldr	r3, [pc, #424]	; (8002310 <MRT_waitForLaunch+0x21c>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	3301      	adds	r3, #1
 800216c:	b2da      	uxtb	r2, r3
 800216e:	4b68      	ldr	r3, [pc, #416]	; (8002310 <MRT_waitForLaunch+0x21c>)
 8002170:	701a      	strb	r2, [r3, #0]
		prev_subsec = sTime.SubSeconds;
 8002172:	4b62      	ldr	r3, [pc, #392]	; (80022fc <MRT_waitForLaunch+0x208>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	4a67      	ldr	r2, [pc, #412]	; (8002314 <MRT_waitForLaunch+0x220>)
 8002178:	6013      	str	r3, [r2, #0]

		//Save the RTC time
	    MRT_saveTotalTime();
 800217a:	f001 ffdf 	bl	800413c <MRT_saveTotalTime>

		//Poll propulsion sensors
		MRT_pollPropulsion();
 800217e:	f003 fa71 	bl	8005664 <MRT_pollPropulsion>

		//Send propulsion data
		memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 8002182:	1d3b      	adds	r3, r7, #4
 8002184:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f018 fc9c 	bl	801aac8 <memset>
		sprintf(radio_buffer,"P,%.2f,%.2f, %i,E\r\n",transducer_voltage,thermocouple_temperature,(int) valve_status);
 8002190:	4b61      	ldr	r3, [pc, #388]	; (8002318 <MRT_waitForLaunch+0x224>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe f9f7 	bl	8000588 <__aeabi_f2d>
 800219a:	4604      	mov	r4, r0
 800219c:	460d      	mov	r5, r1
 800219e:	4b5f      	ldr	r3, [pc, #380]	; (800231c <MRT_waitForLaunch+0x228>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe f9f0 	bl	8000588 <__aeabi_f2d>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	495c      	ldr	r1, [pc, #368]	; (8002320 <MRT_waitForLaunch+0x22c>)
 80021ae:	7809      	ldrb	r1, [r1, #0]
 80021b0:	1d38      	adds	r0, r7, #4
 80021b2:	9102      	str	r1, [sp, #8]
 80021b4:	e9cd 2300 	strd	r2, r3, [sp]
 80021b8:	4622      	mov	r2, r4
 80021ba:	462b      	mov	r3, r5
 80021bc:	4959      	ldr	r1, [pc, #356]	; (8002324 <MRT_waitForLaunch+0x230>)
 80021be:	f019 ff7f 	bl	801c0c0 <siprintf>
		MRT_radio_tx(radio_buffer);
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	4618      	mov	r0, r3
 80021c6:	f008 fe59 	bl	800ae7c <MRT_radio_tx>


		// Save to SD card
		#if SD_CARD_
		MRT_formatPropulsion();
 80021ca:	f003 fa83 	bl	80056d4 <MRT_formatPropulsion>
		if (sd_write(&fil,(uint8_t*) msg_buffer_pr)<0){
 80021ce:	4956      	ldr	r1, [pc, #344]	; (8002328 <MRT_waitForLaunch+0x234>)
 80021d0:	4856      	ldr	r0, [pc, #344]	; (800232c <MRT_waitForLaunch+0x238>)
 80021d2:	f002 fa9b 	bl	800470c <sd_write>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	da09      	bge.n	80021f0 <MRT_waitForLaunch+0xfc>
			f_close(&fil);
 80021dc:	4853      	ldr	r0, [pc, #332]	; (800232c <MRT_waitForLaunch+0x238>)
 80021de:	f013 f8bf 	bl	8015360 <f_close>
			fres = sd_open_file(filename);
 80021e2:	4842      	ldr	r0, [pc, #264]	; (80022ec <MRT_waitForLaunch+0x1f8>)
 80021e4:	f002 fa7a 	bl	80046dc <sd_open_file>
 80021e8:	4603      	mov	r3, r0
 80021ea:	461a      	mov	r2, r3
 80021ec:	4b40      	ldr	r3, [pc, #256]	; (80022f0 <MRT_waitForLaunch+0x1fc>)
 80021ee:	701a      	strb	r2, [r3, #0]
		}
		if (sync_counter==10){
 80021f0:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80021f4:	2b0a      	cmp	r3, #10
 80021f6:	d105      	bne.n	8002204 <MRT_waitForLaunch+0x110>
			sync_counter=0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			f_sync(&fil);
 80021fe:	484b      	ldr	r0, [pc, #300]	; (800232c <MRT_waitForLaunch+0x238>)
 8002200:	f013 f825 	bl	801524e <f_sync>
		}
		#endif


		//Check for command
		memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 8002204:	1d3b      	adds	r3, r7, #4
 8002206:	f44f 7280 	mov.w	r2, #256	; 0x100
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f018 fc5b 	bl	801aac8 <memset>
		MRT_radio_rx(radio_buffer, 2, 0x500); //Timeout is about 1.2 sec (should be less than 5 sec)
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8002218:	2102      	movs	r1, #2
 800221a:	4618      	mov	r0, r3
 800221c:	f008 fe50 	bl	800aec0 <MRT_radio_rx>
		cmd = radio_parse_command(radio_buffer);
 8002220:	1d3b      	adds	r3, r7, #4
 8002222:	4618      	mov	r0, r3
 8002224:	f008 ff16 	bl	800b054 <radio_parse_command>
 8002228:	4603      	mov	r3, r0
 800222a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

		if (cmd == LAUNCH){
 800222e:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8002232:	2b01      	cmp	r3, #1
 8002234:	d10b      	bne.n	800224e <MRT_waitForLaunch+0x15a>
			//Update ejection stage flag and save it
			ejection_stage_flag = BOOST;
 8002236:	4b3e      	ldr	r3, [pc, #248]	; (8002330 <MRT_waitForLaunch+0x23c>)
 8002238:	2201      	movs	r2, #1
 800223a:	701a      	strb	r2, [r3, #0]
			rtc_bckp_reg_ejection_stage = BOOST;
 800223c:	4b3d      	ldr	r3, [pc, #244]	; (8002334 <MRT_waitForLaunch+0x240>)
 800223e:	2201      	movs	r2, #1
 8002240:	601a      	str	r2, [r3, #0]
			ext_flash_ejection_stage = BOOST;
 8002242:	4b3d      	ldr	r3, [pc, #244]	; (8002338 <MRT_waitForLaunch+0x244>)
 8002244:	2201      	movs	r2, #1
 8002246:	701a      	strb	r2, [r3, #0]
			MRT_saveFlagValue(FC_STATE_FLIGHT);
 8002248:	2004      	movs	r0, #4
 800224a:	f001 feeb 	bl	8004024 <MRT_saveFlagValue>
		}
		execute_parsed_command(cmd);
 800224e:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8002252:	4618      	mov	r0, r3
 8002254:	f008 ff6a 	bl	800b12c <execute_parsed_command>
		MRT_radio_send_ack(cmd);
 8002258:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800225c:	4618      	mov	r0, r3
 800225e:	f008 fedf 	bl	800b020 <MRT_radio_send_ack>

		HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8002262:	2200      	movs	r2, #0
 8002264:	2108      	movs	r1, #8
 8002266:	4823      	ldr	r0, [pc, #140]	; (80022f4 <MRT_waitForLaunch+0x200>)
 8002268:	f00b f87e 	bl	800d368 <HAL_GPIO_WritePin>

		//Reset IWDG timer
		HAL_IWDG_Refresh(&hiwdg);
 800226c:	4822      	ldr	r0, [pc, #136]	; (80022f8 <MRT_waitForLaunch+0x204>)
 800226e:	f00c f95f 	bl	800e530 <HAL_IWDG_Refresh>

		HAL_Delay(1000/PRE_APOGEE_SEND_FREQ);
 8002272:	2014      	movs	r0, #20
 8002274:	f00a f96c 	bl	800c550 <HAL_Delay>
	while((XTEND_ || SRADIO_) && ejection_stage_flag == PAD){
 8002278:	4b2d      	ldr	r3, [pc, #180]	; (8002330 <MRT_waitForLaunch+0x23c>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	f43f af4d 	beq.w	800211c <MRT_waitForLaunch+0x28>
	}

	//Close SD card (reopened by FreeRTOS)
	f_close(&fil);
 8002282:	482a      	ldr	r0, [pc, #168]	; (800232c <MRT_waitForLaunch+0x238>)
 8002284:	f013 f86c 	bl	8015360 <f_close>

	//Todo to test ejection
	hlps22hh.getPressure();
 8002288:	4b2c      	ldr	r3, [pc, #176]	; (800233c <MRT_waitForLaunch+0x248>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	4798      	blx	r3
	rtc_bckp_reg_alt_pad = MRT_getAltitude(hlps22hh.pressure_hPa);
 800228e:	4b2b      	ldr	r3, [pc, #172]	; (800233c <MRT_waitForLaunch+0x248>)
 8002290:	edd3 7a00 	vldr	s15, [r3]
 8002294:	eeb0 0a67 	vmov.f32	s0, s15
 8002298:	f001 fcf2 	bl	8003c80 <MRT_getAltitude>
 800229c:	eef0 7a40 	vmov.f32	s15, s0
 80022a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022a4:	ee17 2a90 	vmov	r2, s15
 80022a8:	4b25      	ldr	r3, [pc, #148]	; (8002340 <MRT_waitForLaunch+0x24c>)
 80022aa:	601a      	str	r2, [r3, #0]
	MRT_RTC_setBackupReg(FC_STATE_ALT_PAD, rtc_bckp_reg_alt_pad);
 80022ac:	4b24      	ldr	r3, [pc, #144]	; (8002340 <MRT_waitForLaunch+0x24c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4619      	mov	r1, r3
 80022b2:	2009      	movs	r0, #9
 80022b4:	f000 ffdc 	bl	8003270 <MRT_RTC_setBackupReg>
	rtc_bckp_reg_pad_time = 100*prev_min + prev_sec;
 80022b8:	4b14      	ldr	r3, [pc, #80]	; (800230c <MRT_waitForLaunch+0x218>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	461a      	mov	r2, r3
 80022be:	2364      	movs	r3, #100	; 0x64
 80022c0:	fb03 f302 	mul.w	r3, r3, r2
 80022c4:	4a12      	ldr	r2, [pc, #72]	; (8002310 <MRT_waitForLaunch+0x21c>)
 80022c6:	7812      	ldrb	r2, [r2, #0]
 80022c8:	4413      	add	r3, r2
 80022ca:	461a      	mov	r2, r3
 80022cc:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <MRT_waitForLaunch+0x250>)
 80022ce:	601a      	str	r2, [r3, #0]
	MRT_RTC_setBackupReg(FC_PAD_TIME, rtc_bckp_reg_pad_time);
 80022d0:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <MRT_waitForLaunch+0x250>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4619      	mov	r1, r3
 80022d6:	200a      	movs	r0, #10
 80022d8:	f000 ffca 	bl	8003270 <MRT_RTC_setBackupReg>
}
 80022dc:	bf00      	nop
 80022de:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bdb0      	pop	{r4, r5, r7, pc}
 80022e6:	bf00      	nop
 80022e8:	08020b7c 	.word	0x08020b7c
 80022ec:	20000350 	.word	0x20000350
 80022f0:	200094f0 	.word	0x200094f0
 80022f4:	40020800 	.word	0x40020800
 80022f8:	20008780 	.word	0x20008780
 80022fc:	20000368 	.word	0x20000368
 8002300:	2000878c 	.word	0x2000878c
 8002304:	2000037c 	.word	0x2000037c
 8002308:	2000041a 	.word	0x2000041a
 800230c:	2000041b 	.word	0x2000041b
 8002310:	2000041c 	.word	0x2000041c
 8002314:	20000420 	.word	0x20000420
 8002318:	20009788 	.word	0x20009788
 800231c:	20009784 	.word	0x20009784
 8002320:	20009782 	.word	0x20009782
 8002324:	08020bb0 	.word	0x08020bb0
 8002328:	20009750 	.word	0x20009750
 800232c:	200094f4 	.word	0x200094f4
 8002330:	20000419 	.word	0x20000419
 8002334:	200003b8 	.word	0x200003b8
 8002338:	200003fc 	.word	0x200003fc
 800233c:	20000578 	.word	0x20000578
 8002340:	200003cc 	.word	0x200003cc
 8002344:	200003d0 	.word	0x200003d0

08002348 <MRT_checkThreadStates>:


void MRT_checkThreadStates(void){
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
	  //Check each thread state
	  #if THREAD_KEEPER

	  osThreadState_t thread_state;

	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 800234e:	2300      	movs	r3, #0
 8002350:	607b      	str	r3, [r7, #4]
 8002352:	e055      	b.n	8002400 <MRT_checkThreadStates+0xb8>

		  thread_state = osThreadGetState(threadsID[i]);
 8002354:	4a2e      	ldr	r2, [pc, #184]	; (8002410 <MRT_checkThreadStates+0xc8>)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800235c:	4618      	mov	r0, r3
 800235e:	f013 fd37 	bl	8015dd0 <osThreadGetState>
 8002362:	6038      	str	r0, [r7, #0]

		  if (thread_state == osThreadInactive ||
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <MRT_checkThreadStates+0x2e>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b03      	cmp	r3, #3
 800236e:	d002      	beq.n	8002376 <MRT_checkThreadStates+0x2e>
			  thread_state == osThreadBlocked  ||
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	2b04      	cmp	r3, #4
 8002374:	d128      	bne.n	80023c8 <MRT_checkThreadStates+0x80>
			  thread_state == osThreadTerminated){

			  //Ejection thread
			  if (i==1 && ejection_stage_flag < LANDED){
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d10a      	bne.n	8002392 <MRT_checkThreadStates+0x4a>
 800237c:	4b25      	ldr	r3, [pc, #148]	; (8002414 <MRT_checkThreadStates+0xcc>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b03      	cmp	r3, #3
 8002382:	d806      	bhi.n	8002392 <MRT_checkThreadStates+0x4a>
				 osThreadResume(threadsID[i]);
 8002384:	4a22      	ldr	r2, [pc, #136]	; (8002410 <MRT_checkThreadStates+0xc8>)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238c:	4618      	mov	r0, r3
 800238e:	f013 fd5b 	bl	8015e48 <osThreadResume>
			  }

			  //Propulsion thread
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b04      	cmp	r3, #4
 8002396:	d10f      	bne.n	80023b8 <MRT_checkThreadStates+0x70>
 8002398:	4b1f      	ldr	r3, [pc, #124]	; (8002418 <MRT_checkThreadStates+0xd0>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d103      	bne.n	80023a8 <MRT_checkThreadStates+0x60>
 80023a0:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <MRT_checkThreadStates+0xcc>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d907      	bls.n	80023b8 <MRT_checkThreadStates+0x70>
				  osThreadTerminate(threadsID[i]);
 80023a8:	4a19      	ldr	r2, [pc, #100]	; (8002410 <MRT_checkThreadStates+0xc8>)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f013 fd70 	bl	8015e96 <osThreadTerminate>
				  continue;
 80023b6:	e020      	b.n	80023fa <MRT_checkThreadStates+0xb2>
			  }
			  else {
				 //Resume otherwise
				 osThreadResume(threadsID[i]);
 80023b8:	4a15      	ldr	r2, [pc, #84]	; (8002410 <MRT_checkThreadStates+0xc8>)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f013 fd41 	bl	8015e48 <osThreadResume>
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 80023c6:	e018      	b.n	80023fa <MRT_checkThreadStates+0xb2>
			  }
		  }

		  else if (thread_state == osThreadError){
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ce:	d114      	bne.n	80023fa <MRT_checkThreadStates+0xb2>
			  //If it's the propulsion thread
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d10f      	bne.n	80023f6 <MRT_checkThreadStates+0xae>
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <MRT_checkThreadStates+0xd0>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d103      	bne.n	80023e6 <MRT_checkThreadStates+0x9e>
 80023de:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <MRT_checkThreadStates+0xcc>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d907      	bls.n	80023f6 <MRT_checkThreadStates+0xae>
				  osThreadTerminate(threadsID[i]);
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <MRT_checkThreadStates+0xc8>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f013 fd51 	bl	8015e96 <osThreadTerminate>
				  continue;
 80023f4:	e001      	b.n	80023fa <MRT_checkThreadStates+0xb2>
			  }
			  else{
				 //Reset otherwise
				 NVIC_SystemReset();
 80023f6:	f7ff f90f 	bl	8001618 <__NVIC_SystemReset>
	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3301      	adds	r3, #1
 80023fe:	607b      	str	r3, [r7, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b04      	cmp	r3, #4
 8002404:	dda6      	ble.n	8002354 <MRT_checkThreadStates+0xc>
		  else if (thread_state == osThreadReserved){ TODO not sure what is this state
		  }
		  */
	  }
	  #endif
}
 8002406:	bf00      	nop
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	200086b4 	.word	0x200086b4
 8002414:	20000419 	.word	0x20000419
 8002418:	20000418 	.word	0x20000418

0800241c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08e      	sub	sp, #56	; 0x38
 8002420:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	605a      	str	r2, [r3, #4]
 800242c:	609a      	str	r2, [r3, #8]
 800242e:	60da      	str	r2, [r3, #12]
 8002430:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	623b      	str	r3, [r7, #32]
 8002436:	4bb5      	ldr	r3, [pc, #724]	; (800270c <MX_GPIO_Init+0x2f0>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4ab4      	ldr	r2, [pc, #720]	; (800270c <MX_GPIO_Init+0x2f0>)
 800243c:	f043 0310 	orr.w	r3, r3, #16
 8002440:	6313      	str	r3, [r2, #48]	; 0x30
 8002442:	4bb2      	ldr	r3, [pc, #712]	; (800270c <MX_GPIO_Init+0x2f0>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	623b      	str	r3, [r7, #32]
 800244c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	4bae      	ldr	r3, [pc, #696]	; (800270c <MX_GPIO_Init+0x2f0>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	4aad      	ldr	r2, [pc, #692]	; (800270c <MX_GPIO_Init+0x2f0>)
 8002458:	f043 0304 	orr.w	r3, r3, #4
 800245c:	6313      	str	r3, [r2, #48]	; 0x30
 800245e:	4bab      	ldr	r3, [pc, #684]	; (800270c <MX_GPIO_Init+0x2f0>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	61fb      	str	r3, [r7, #28]
 8002468:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	4ba7      	ldr	r3, [pc, #668]	; (800270c <MX_GPIO_Init+0x2f0>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	4aa6      	ldr	r2, [pc, #664]	; (800270c <MX_GPIO_Init+0x2f0>)
 8002474:	f043 0320 	orr.w	r3, r3, #32
 8002478:	6313      	str	r3, [r2, #48]	; 0x30
 800247a:	4ba4      	ldr	r3, [pc, #656]	; (800270c <MX_GPIO_Init+0x2f0>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f003 0320 	and.w	r3, r3, #32
 8002482:	61bb      	str	r3, [r7, #24]
 8002484:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	4ba0      	ldr	r3, [pc, #640]	; (800270c <MX_GPIO_Init+0x2f0>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	4a9f      	ldr	r2, [pc, #636]	; (800270c <MX_GPIO_Init+0x2f0>)
 8002490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002494:	6313      	str	r3, [r2, #48]	; 0x30
 8002496:	4b9d      	ldr	r3, [pc, #628]	; (800270c <MX_GPIO_Init+0x2f0>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	4b99      	ldr	r3, [pc, #612]	; (800270c <MX_GPIO_Init+0x2f0>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	4a98      	ldr	r2, [pc, #608]	; (800270c <MX_GPIO_Init+0x2f0>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6313      	str	r3, [r2, #48]	; 0x30
 80024b2:	4b96      	ldr	r3, [pc, #600]	; (800270c <MX_GPIO_Init+0x2f0>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	4b92      	ldr	r3, [pc, #584]	; (800270c <MX_GPIO_Init+0x2f0>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a91      	ldr	r2, [pc, #580]	; (800270c <MX_GPIO_Init+0x2f0>)
 80024c8:	f043 0302 	orr.w	r3, r3, #2
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b8f      	ldr	r3, [pc, #572]	; (800270c <MX_GPIO_Init+0x2f0>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	4b8b      	ldr	r3, [pc, #556]	; (800270c <MX_GPIO_Init+0x2f0>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4a8a      	ldr	r2, [pc, #552]	; (800270c <MX_GPIO_Init+0x2f0>)
 80024e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ea:	4b88      	ldr	r3, [pc, #544]	; (800270c <MX_GPIO_Init+0x2f0>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	607b      	str	r3, [r7, #4]
 80024fa:	4b84      	ldr	r3, [pc, #528]	; (800270c <MX_GPIO_Init+0x2f0>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4a83      	ldr	r2, [pc, #524]	; (800270c <MX_GPIO_Init+0x2f0>)
 8002500:	f043 0308 	orr.w	r3, r3, #8
 8002504:	6313      	str	r3, [r2, #48]	; 0x30
 8002506:	4b81      	ldr	r3, [pc, #516]	; (800270c <MX_GPIO_Init+0x2f0>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	607b      	str	r3, [r7, #4]
 8002510:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8002512:	2200      	movs	r2, #0
 8002514:	f248 4184 	movw	r1, #33924	; 0x8484
 8002518:	487d      	ldr	r0, [pc, #500]	; (8002710 <MX_GPIO_Init+0x2f4>)
 800251a:	f00a ff25 	bl	800d368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800251e:	2201      	movs	r2, #1
 8002520:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002524:	487b      	ldr	r0, [pc, #492]	; (8002714 <MX_GPIO_Init+0x2f8>)
 8002526:	f00a ff1f 	bl	800d368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 800252a:	2200      	movs	r2, #0
 800252c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8002530:	4879      	ldr	r0, [pc, #484]	; (8002718 <MX_GPIO_Init+0x2fc>)
 8002532:	f00a ff19 	bl	800d368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 8002536:	2200      	movs	r2, #0
 8002538:	2108      	movs	r1, #8
 800253a:	4878      	ldr	r0, [pc, #480]	; (800271c <MX_GPIO_Init+0x300>)
 800253c:	f00a ff14 	bl	800d368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 8002540:	2200      	movs	r2, #0
 8002542:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002546:	4873      	ldr	r0, [pc, #460]	; (8002714 <MX_GPIO_Init+0x2f8>)
 8002548:	f00a ff0e 	bl	800d368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 800254c:	2200      	movs	r2, #0
 800254e:	f645 2126 	movw	r1, #23078	; 0x5a26
 8002552:	4873      	ldr	r0, [pc, #460]	; (8002720 <MX_GPIO_Init+0x304>)
 8002554:	f00a ff08 	bl	800d368 <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin, GPIO_PIN_RESET);
 8002558:	2200      	movs	r2, #0
 800255a:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 800255e:	4871      	ldr	r0, [pc, #452]	; (8002724 <MX_GPIO_Init+0x308>)
 8002560:	f00a ff02 	bl	800d368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002564:	2200      	movs	r2, #0
 8002566:	f44f 41f9 	mov.w	r1, #31872	; 0x7c80
 800256a:	486f      	ldr	r0, [pc, #444]	; (8002728 <MX_GPIO_Init+0x30c>)
 800256c:	f00a fefc 	bl	800d368 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin, GPIO_PIN_SET);
 8002570:	2201      	movs	r2, #1
 8002572:	2170      	movs	r1, #112	; 0x70
 8002574:	486c      	ldr	r0, [pc, #432]	; (8002728 <MX_GPIO_Init+0x30c>)
 8002576:	f00a fef7 	bl	800d368 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 800257a:	f248 4384 	movw	r3, #33924	; 0x8484
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002580:	2301      	movs	r3, #1
 8002582:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002588:	2300      	movs	r3, #0
 800258a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800258c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002590:	4619      	mov	r1, r3
 8002592:	485f      	ldr	r0, [pc, #380]	; (8002710 <MX_GPIO_Init+0x2f4>)
 8002594:	f00a fd24 	bl	800cfe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800259e:	2301      	movs	r3, #1
 80025a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025a2:	2301      	movs	r3, #1
 80025a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a6:	2300      	movs	r3, #0
 80025a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80025aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ae:	4619      	mov	r1, r3
 80025b0:	4858      	ldr	r0, [pc, #352]	; (8002714 <MX_GPIO_Init+0x2f8>)
 80025b2:	f00a fd15 	bl	800cfe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 80025b6:	2301      	movs	r3, #1
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80025be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 80025c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c8:	4619      	mov	r1, r3
 80025ca:	4853      	ldr	r0, [pc, #332]	; (8002718 <MX_GPIO_Init+0x2fc>)
 80025cc:	f00a fd08 	bl	800cfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 80025d0:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d6:	2301      	movs	r3, #1
 80025d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025de:	2300      	movs	r3, #0
 80025e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e6:	4619      	mov	r1, r3
 80025e8:	484b      	ldr	r0, [pc, #300]	; (8002718 <MX_GPIO_Init+0x2fc>)
 80025ea:	f00a fcf9 	bl	800cfe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 80025ee:	2308      	movs	r3, #8
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f2:	2301      	movs	r3, #1
 80025f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fa:	2300      	movs	r3, #0
 80025fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 80025fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002602:	4619      	mov	r1, r3
 8002604:	4845      	ldr	r0, [pc, #276]	; (800271c <MX_GPIO_Init+0x300>)
 8002606:	f00a fceb 	bl	800cfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 800260a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002610:	2300      	movs	r3, #0
 8002612:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800261c:	4619      	mov	r1, r3
 800261e:	483e      	ldr	r0, [pc, #248]	; (8002718 <MX_GPIO_Init+0x2fc>)
 8002620:	f00a fcde 	bl	800cfe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 8002624:	2302      	movs	r3, #2
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002628:	2300      	movs	r3, #0
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 8002630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002634:	4619      	mov	r1, r3
 8002636:	483b      	ldr	r0, [pc, #236]	; (8002724 <MX_GPIO_Init+0x308>)
 8002638:	f00a fcd2 	bl	800cfe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 800263c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002642:	2300      	movs	r3, #0
 8002644:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 800264a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800264e:	4619      	mov	r1, r3
 8002650:	4830      	ldr	r0, [pc, #192]	; (8002714 <MX_GPIO_Init+0x2f8>)
 8002652:	f00a fcc5 	bl	800cfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 8002656:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800265c:	2301      	movs	r3, #1
 800265e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002664:	2300      	movs	r3, #0
 8002666:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800266c:	4619      	mov	r1, r3
 800266e:	4829      	ldr	r0, [pc, #164]	; (8002714 <MX_GPIO_Init+0x2f8>)
 8002670:	f00a fcb6 	bl	800cfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 8002674:	f242 4319 	movw	r3, #9241	; 0x2419
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800267a:	2300      	movs	r3, #0
 800267c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002686:	4619      	mov	r1, r3
 8002688:	4825      	ldr	r0, [pc, #148]	; (8002720 <MX_GPIO_Init+0x304>)
 800268a:	f00a fca9 	bl	800cfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 800268e:	f645 2326 	movw	r3, #23078	; 0x5a26
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002694:	2301      	movs	r3, #1
 8002696:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269c:	2300      	movs	r3, #0
 800269e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026a4:	4619      	mov	r1, r3
 80026a6:	481e      	ldr	r0, [pc, #120]	; (8002720 <MX_GPIO_Init+0x304>)
 80026a8:	f00a fc9a 	bl	800cfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 80026ac:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026b2:	2300      	movs	r3, #0
 80026b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026be:	4619      	mov	r1, r3
 80026c0:	4813      	ldr	r0, [pc, #76]	; (8002710 <MX_GPIO_Init+0x2f4>)
 80026c2:	f00a fc8d 	bl	800cfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB8 PBPin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin;
 80026c6:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026cc:	2301      	movs	r3, #1
 80026ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d4:	2300      	movs	r3, #0
 80026d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026dc:	4619      	mov	r1, r3
 80026de:	4811      	ldr	r0, [pc, #68]	; (8002724 <MX_GPIO_Init+0x308>)
 80026e0:	f00a fc7e 	bl	800cfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80026e4:	f44f 43f9 	mov.w	r3, #31872	; 0x7c80
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ea:	2301      	movs	r3, #1
 80026ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f2:	2300      	movs	r3, #0
 80026f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026fa:	4619      	mov	r1, r3
 80026fc:	480a      	ldr	r0, [pc, #40]	; (8002728 <MX_GPIO_Init+0x30c>)
 80026fe:	f00a fc6f 	bl	800cfe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8002702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002708:	2300      	movs	r3, #0
 800270a:	e00f      	b.n	800272c <MX_GPIO_Init+0x310>
 800270c:	40023800 	.word	0x40023800
 8002710:	40021000 	.word	0x40021000
 8002714:	40021400 	.word	0x40021400
 8002718:	40020800 	.word	0x40020800
 800271c:	40020000 	.word	0x40020000
 8002720:	40021800 	.word	0x40021800
 8002724:	40020400 	.word	0x40020400
 8002728:	40020c00 	.word	0x40020c00
 800272c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8002732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002736:	4619      	mov	r1, r3
 8002738:	4815      	ldr	r0, [pc, #84]	; (8002790 <MX_GPIO_Init+0x374>)
 800273a:	f00a fc51 	bl	800cfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 800273e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002744:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002748:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800274e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002752:	4619      	mov	r1, r3
 8002754:	480f      	ldr	r0, [pc, #60]	; (8002794 <MX_GPIO_Init+0x378>)
 8002756:	f00a fc43 	bl	800cfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin;
 800275a:	2370      	movs	r3, #112	; 0x70
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800275e:	2301      	movs	r3, #1
 8002760:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002762:	2301      	movs	r3, #1
 8002764:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002766:	2300      	movs	r3, #0
 8002768:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800276a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800276e:	4619      	mov	r1, r3
 8002770:	4807      	ldr	r0, [pc, #28]	; (8002790 <MX_GPIO_Init+0x374>)
 8002772:	f00a fc35 	bl	800cfe0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002776:	2200      	movs	r2, #0
 8002778:	2100      	movs	r1, #0
 800277a:	2006      	movs	r0, #6
 800277c:	f00a fbf8 	bl	800cf70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002780:	2006      	movs	r0, #6
 8002782:	f00a fc11 	bl	800cfa8 <HAL_NVIC_EnableIRQ>

}
 8002786:	bf00      	nop
 8002788:	3738      	adds	r7, #56	; 0x38
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40020c00 	.word	0x40020c00
 8002794:	40021800 	.word	0x40021800

08002798 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800279c:	4b1b      	ldr	r3, [pc, #108]	; (800280c <MX_I2C2_Init+0x74>)
 800279e:	4a1c      	ldr	r2, [pc, #112]	; (8002810 <MX_I2C2_Init+0x78>)
 80027a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80027a2:	4b1a      	ldr	r3, [pc, #104]	; (800280c <MX_I2C2_Init+0x74>)
 80027a4:	4a1b      	ldr	r2, [pc, #108]	; (8002814 <MX_I2C2_Init+0x7c>)
 80027a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027a8:	4b18      	ldr	r3, [pc, #96]	; (800280c <MX_I2C2_Init+0x74>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80027ae:	4b17      	ldr	r3, [pc, #92]	; (800280c <MX_I2C2_Init+0x74>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027b4:	4b15      	ldr	r3, [pc, #84]	; (800280c <MX_I2C2_Init+0x74>)
 80027b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027bc:	4b13      	ldr	r3, [pc, #76]	; (800280c <MX_I2C2_Init+0x74>)
 80027be:	2200      	movs	r2, #0
 80027c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80027c2:	4b12      	ldr	r3, [pc, #72]	; (800280c <MX_I2C2_Init+0x74>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027c8:	4b10      	ldr	r3, [pc, #64]	; (800280c <MX_I2C2_Init+0x74>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027ce:	4b0f      	ldr	r3, [pc, #60]	; (800280c <MX_I2C2_Init+0x74>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80027d4:	480d      	ldr	r0, [pc, #52]	; (800280c <MX_I2C2_Init+0x74>)
 80027d6:	f00a fdf9 	bl	800d3cc <HAL_I2C_Init>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80027e0:	f000 f9e8 	bl	8002bb4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027e4:	2100      	movs	r1, #0
 80027e6:	4809      	ldr	r0, [pc, #36]	; (800280c <MX_I2C2_Init+0x74>)
 80027e8:	f00b fde5 	bl	800e3b6 <HAL_I2CEx_ConfigAnalogFilter>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80027f2:	f000 f9df 	bl	8002bb4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80027f6:	2100      	movs	r1, #0
 80027f8:	4804      	ldr	r0, [pc, #16]	; (800280c <MX_I2C2_Init+0x74>)
 80027fa:	f00b fe18 	bl	800e42e <HAL_I2CEx_ConfigDigitalFilter>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8002804:	f000 f9d6 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002808:	bf00      	nop
 800280a:	bd80      	pop	{r7, pc}
 800280c:	2000872c 	.word	0x2000872c
 8002810:	40005800 	.word	0x40005800
 8002814:	000186a0 	.word	0x000186a0

08002818 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800281c:	4b1b      	ldr	r3, [pc, #108]	; (800288c <MX_I2C3_Init+0x74>)
 800281e:	4a1c      	ldr	r2, [pc, #112]	; (8002890 <MX_I2C3_Init+0x78>)
 8002820:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002822:	4b1a      	ldr	r3, [pc, #104]	; (800288c <MX_I2C3_Init+0x74>)
 8002824:	4a1b      	ldr	r2, [pc, #108]	; (8002894 <MX_I2C3_Init+0x7c>)
 8002826:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002828:	4b18      	ldr	r3, [pc, #96]	; (800288c <MX_I2C3_Init+0x74>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800282e:	4b17      	ldr	r3, [pc, #92]	; (800288c <MX_I2C3_Init+0x74>)
 8002830:	2200      	movs	r2, #0
 8002832:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002834:	4b15      	ldr	r3, [pc, #84]	; (800288c <MX_I2C3_Init+0x74>)
 8002836:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800283a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800283c:	4b13      	ldr	r3, [pc, #76]	; (800288c <MX_I2C3_Init+0x74>)
 800283e:	2200      	movs	r2, #0
 8002840:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002842:	4b12      	ldr	r3, [pc, #72]	; (800288c <MX_I2C3_Init+0x74>)
 8002844:	2200      	movs	r2, #0
 8002846:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002848:	4b10      	ldr	r3, [pc, #64]	; (800288c <MX_I2C3_Init+0x74>)
 800284a:	2200      	movs	r2, #0
 800284c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800284e:	4b0f      	ldr	r3, [pc, #60]	; (800288c <MX_I2C3_Init+0x74>)
 8002850:	2200      	movs	r2, #0
 8002852:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002854:	480d      	ldr	r0, [pc, #52]	; (800288c <MX_I2C3_Init+0x74>)
 8002856:	f00a fdb9 	bl	800d3cc <HAL_I2C_Init>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002860:	f000 f9a8 	bl	8002bb4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002864:	2100      	movs	r1, #0
 8002866:	4809      	ldr	r0, [pc, #36]	; (800288c <MX_I2C3_Init+0x74>)
 8002868:	f00b fda5 	bl	800e3b6 <HAL_I2CEx_ConfigAnalogFilter>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002872:	f000 f99f 	bl	8002bb4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002876:	2100      	movs	r1, #0
 8002878:	4804      	ldr	r0, [pc, #16]	; (800288c <MX_I2C3_Init+0x74>)
 800287a:	f00b fdd8 	bl	800e42e <HAL_I2CEx_ConfigDigitalFilter>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002884:	f000 f996 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002888:	bf00      	nop
 800288a:	bd80      	pop	{r7, pc}
 800288c:	200086d8 	.word	0x200086d8
 8002890:	40005c00 	.word	0x40005c00
 8002894:	000186a0 	.word	0x000186a0

08002898 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08c      	sub	sp, #48	; 0x30
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a0:	f107 031c 	add.w	r3, r7, #28
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	60da      	str	r2, [r3, #12]
 80028ae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a42      	ldr	r2, [pc, #264]	; (80029c0 <HAL_I2C_MspInit+0x128>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d12d      	bne.n	8002916 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	61bb      	str	r3, [r7, #24]
 80028be:	4b41      	ldr	r3, [pc, #260]	; (80029c4 <HAL_I2C_MspInit+0x12c>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	4a40      	ldr	r2, [pc, #256]	; (80029c4 <HAL_I2C_MspInit+0x12c>)
 80028c4:	f043 0302 	orr.w	r3, r3, #2
 80028c8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ca:	4b3e      	ldr	r3, [pc, #248]	; (80029c4 <HAL_I2C_MspInit+0x12c>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	61bb      	str	r3, [r7, #24]
 80028d4:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028dc:	2312      	movs	r3, #18
 80028de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028e0:	2301      	movs	r3, #1
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e4:	2303      	movs	r3, #3
 80028e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80028e8:	2304      	movs	r3, #4
 80028ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ec:	f107 031c 	add.w	r3, r7, #28
 80028f0:	4619      	mov	r1, r3
 80028f2:	4835      	ldr	r0, [pc, #212]	; (80029c8 <HAL_I2C_MspInit+0x130>)
 80028f4:	f00a fb74 	bl	800cfe0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	4b31      	ldr	r3, [pc, #196]	; (80029c4 <HAL_I2C_MspInit+0x12c>)
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	4a30      	ldr	r2, [pc, #192]	; (80029c4 <HAL_I2C_MspInit+0x12c>)
 8002902:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002906:	6413      	str	r3, [r2, #64]	; 0x40
 8002908:	4b2e      	ldr	r3, [pc, #184]	; (80029c4 <HAL_I2C_MspInit+0x12c>)
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002914:	e050      	b.n	80029b8 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a2c      	ldr	r2, [pc, #176]	; (80029cc <HAL_I2C_MspInit+0x134>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d14b      	bne.n	80029b8 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002920:	2300      	movs	r3, #0
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	4b27      	ldr	r3, [pc, #156]	; (80029c4 <HAL_I2C_MspInit+0x12c>)
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	4a26      	ldr	r2, [pc, #152]	; (80029c4 <HAL_I2C_MspInit+0x12c>)
 800292a:	f043 0304 	orr.w	r3, r3, #4
 800292e:	6313      	str	r3, [r2, #48]	; 0x30
 8002930:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <HAL_I2C_MspInit+0x12c>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800293c:	2300      	movs	r3, #0
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	4b20      	ldr	r3, [pc, #128]	; (80029c4 <HAL_I2C_MspInit+0x12c>)
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	4a1f      	ldr	r2, [pc, #124]	; (80029c4 <HAL_I2C_MspInit+0x12c>)
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	6313      	str	r3, [r2, #48]	; 0x30
 800294c:	4b1d      	ldr	r3, [pc, #116]	; (80029c4 <HAL_I2C_MspInit+0x12c>)
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002958:	f44f 7300 	mov.w	r3, #512	; 0x200
 800295c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800295e:	2312      	movs	r3, #18
 8002960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002962:	2301      	movs	r3, #1
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002966:	2303      	movs	r3, #3
 8002968:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800296a:	2304      	movs	r3, #4
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800296e:	f107 031c 	add.w	r3, r7, #28
 8002972:	4619      	mov	r1, r3
 8002974:	4816      	ldr	r0, [pc, #88]	; (80029d0 <HAL_I2C_MspInit+0x138>)
 8002976:	f00a fb33 	bl	800cfe0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800297a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800297e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002980:	2312      	movs	r3, #18
 8002982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002984:	2301      	movs	r3, #1
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002988:	2303      	movs	r3, #3
 800298a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800298c:	2304      	movs	r3, #4
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002990:	f107 031c 	add.w	r3, r7, #28
 8002994:	4619      	mov	r1, r3
 8002996:	480f      	ldr	r0, [pc, #60]	; (80029d4 <HAL_I2C_MspInit+0x13c>)
 8002998:	f00a fb22 	bl	800cfe0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800299c:	2300      	movs	r3, #0
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <HAL_I2C_MspInit+0x12c>)
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	4a07      	ldr	r2, [pc, #28]	; (80029c4 <HAL_I2C_MspInit+0x12c>)
 80029a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029aa:	6413      	str	r3, [r2, #64]	; 0x40
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_I2C_MspInit+0x12c>)
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]
}
 80029b8:	bf00      	nop
 80029ba:	3730      	adds	r7, #48	; 0x30
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40005800 	.word	0x40005800
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40020400 	.word	0x40020400
 80029cc:	40005c00 	.word	0x40005c00
 80029d0:	40020800 	.word	0x40020800
 80029d4:	40020000 	.word	0x40020000

080029d8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80029dc:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <MX_IWDG_Init+0x2c>)
 80029de:	4a0a      	ldr	r2, [pc, #40]	; (8002a08 <MX_IWDG_Init+0x30>)
 80029e0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <MX_IWDG_Init+0x2c>)
 80029e4:	2204      	movs	r2, #4
 80029e6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2499;
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <MX_IWDG_Init+0x2c>)
 80029ea:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80029ee:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80029f0:	4804      	ldr	r0, [pc, #16]	; (8002a04 <MX_IWDG_Init+0x2c>)
 80029f2:	f00b fd5b 	bl	800e4ac <HAL_IWDG_Init>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80029fc:	f000 f8da 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002a00:	bf00      	nop
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20008780 	.word	0x20008780
 8002a08:	40003000 	.word	0x40003000

08002a0c <main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main(void){
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
	MRT_STM_Init();
 8002a10:	f000 f89c 	bl	8002b4c <MRT_STM_Init>
	__HAL_DBGMCU_FREEZE_IWDG();	// pause IWDG and RTC during debugging
 8002a14:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <main+0x48>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4a0e      	ldr	r2, [pc, #56]	; (8002a54 <main+0x48>)
 8002a1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a1e:	6093      	str	r3, [r2, #8]
	__HAL_FREEZE_RTC_DBGMCU();
 8002a20:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <main+0x48>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	4a0b      	ldr	r2, [pc, #44]	; (8002a54 <main+0x48>)
 8002a26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a2a:	6093      	str	r3, [r2, #8]
	println("\r\n\r\nSTM Init...OK");
 8002a2c:	480a      	ldr	r0, [pc, #40]	; (8002a58 <main+0x4c>)
 8002a2e:	f7fe fb4d 	bl	80010cc <println>

	//TODO I2C SENSORS (lsm and lps) SOMETIMES DON'T WANT TO WORK ANYMORE -> NEED TO RESET THE POWER (Enter quick standByMode?)
	//check hardfault_handler

	//Initialize the os
	MX_FREERTOS_Init();
 8002a32:	f7fe fe79 	bl	8001728 <MX_FREERTOS_Init>

	//Starting the os
	println("\r\n/****Starting the OS****/\r\n");
 8002a36:	4809      	ldr	r0, [pc, #36]	; (8002a5c <main+0x50>)
 8002a38:	f7fe fb48 	bl	80010cc <println>
	osKernelStart();
 8002a3c:	f013 f904 	bl	8015c48 <osKernelStart>

	println("SOMETHING WENT HORRIBLY WRONG, WAITING FOR WATCH DOG RESET");
 8002a40:	4807      	ldr	r0, [pc, #28]	; (8002a60 <main+0x54>)
 8002a42:	f7fe fb43 	bl	80010cc <println>
	HAL_IWDG_Refresh(&hiwdg);
 8002a46:	4807      	ldr	r0, [pc, #28]	; (8002a64 <main+0x58>)
 8002a48:	f00b fd72 	bl	800e530 <HAL_IWDG_Refresh>
	MRT_Deinit();
 8002a4c:	f7fe fc02 	bl	8001254 <MRT_Deinit>
	while (1){}
 8002a50:	e7fe      	b.n	8002a50 <main+0x44>
 8002a52:	bf00      	nop
 8002a54:	e0042000 	.word	0xe0042000
 8002a58:	08020bc4 	.word	0x08020bc4
 8002a5c:	08020bd8 	.word	0x08020bd8
 8002a60:	08020bf8 	.word	0x08020bf8
 8002a64:	20008780 	.word	0x20008780

08002a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b094      	sub	sp, #80	; 0x50
 8002a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a6e:	f107 0320 	add.w	r3, r7, #32
 8002a72:	2230      	movs	r2, #48	; 0x30
 8002a74:	2100      	movs	r1, #0
 8002a76:	4618      	mov	r0, r3
 8002a78:	f018 f826 	bl	801aac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a7c:	f107 030c 	add.w	r3, r7, #12
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	4b2c      	ldr	r3, [pc, #176]	; (8002b44 <SystemClock_Config+0xdc>)
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	4a2b      	ldr	r2, [pc, #172]	; (8002b44 <SystemClock_Config+0xdc>)
 8002a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9c:	4b29      	ldr	r3, [pc, #164]	; (8002b44 <SystemClock_Config+0xdc>)
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	607b      	str	r3, [r7, #4]
 8002aac:	4b26      	ldr	r3, [pc, #152]	; (8002b48 <SystemClock_Config+0xe0>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a25      	ldr	r2, [pc, #148]	; (8002b48 <SystemClock_Config+0xe0>)
 8002ab2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	4b23      	ldr	r3, [pc, #140]	; (8002b48 <SystemClock_Config+0xe0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ac0:	607b      	str	r3, [r7, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002ac4:	2309      	movs	r3, #9
 8002ac6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ac8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ad6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002adc:	2308      	movs	r3, #8
 8002ade:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002ae0:	23b4      	movs	r3, #180	; 0xb4
 8002ae2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aec:	f107 0320 	add.w	r3, r7, #32
 8002af0:	4618      	mov	r0, r3
 8002af2:	f00b fdbb 	bl	800e66c <HAL_RCC_OscConfig>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002afc:	f000 f85a 	bl	8002bb4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002b00:	f00b fd64 	bl	800e5cc <HAL_PWREx_EnableOverDrive>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002b0a:	f000 f853 	bl	8002bb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b0e:	230f      	movs	r3, #15
 8002b10:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b12:	2302      	movs	r3, #2
 8002b14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002b20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002b26:	f107 030c 	add.w	r3, r7, #12
 8002b2a:	2105      	movs	r1, #5
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f00c f815 	bl	800eb5c <HAL_RCC_ClockConfig>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002b38:	f000 f83c 	bl	8002bb4 <Error_Handler>
  }
}
 8002b3c:	bf00      	nop
 8002b3e:	3750      	adds	r7, #80	; 0x50
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40007000 	.word	0x40007000

08002b4c <MRT_STM_Init>:

/* USER CODE BEGIN 4 */

void MRT_STM_Init(void){
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
	HAL_Init();
 8002b50:	f009 fcbc 	bl	800c4cc <HAL_Init>
	SystemClock_Config();
 8002b54:	f7ff ff88 	bl	8002a68 <SystemClock_Config>

	MX_GPIO_Init();
 8002b58:	f7ff fc60 	bl	800241c <MX_GPIO_Init>
	MX_ADC1_Init();
 8002b5c:	f7fe fcc6 	bl	80014ec <MX_ADC1_Init>
	MX_I2C2_Init();
 8002b60:	f7ff fe1a 	bl	8002798 <MX_I2C2_Init>
	MX_I2C3_Init();
 8002b64:	f7ff fe58 	bl	8002818 <MX_I2C3_Init>
	MX_SPI2_Init();
 8002b68:	f000 fba0 	bl	80032ac <MX_SPI2_Init>
	MX_SPI4_Init();
 8002b6c:	f000 fbd4 	bl	8003318 <MX_SPI4_Init>
	MX_SPI5_Init();
 8002b70:	f000 fc08 	bl	8003384 <MX_SPI5_Init>
	MX_TIM2_Init();
 8002b74:	f000 fe58 	bl	8003828 <MX_TIM2_Init>
	MX_UART8_Init();
 8002b78:	f000 ff24 	bl	80039c4 <MX_UART8_Init>
	MX_USART3_UART_Init();
 8002b7c:	f000 ff4c 	bl	8003a18 <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 8002b80:	f000 ff74 	bl	8003a6c <MX_USART6_UART_Init>
	MX_RTC_Init();
 8002b84:	f000 f81c 	bl	8002bc0 <MX_RTC_Init>
	//MX_IWDG_Init(); TODO ADDED IN MRT_Init()
	MX_FATFS_Init();
 8002b88:	f00f fbfc 	bl	8012384 <MX_FATFS_Init>
}
 8002b8c:	bf00      	nop
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a04      	ldr	r2, [pc, #16]	; (8002bb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d101      	bne.n	8002ba6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002ba2:	f009 fcb5 	bl	800c510 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40001000 	.word	0x40001000

08002bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002bb8:	b672      	cpsid	i
}
 8002bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bbc:	e7fe      	b.n	8002bbc <Error_Handler+0x8>
	...

08002bc0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b090      	sub	sp, #64	; 0x40
 8002bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002bc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]
 8002bd0:	609a      	str	r2, [r3, #8]
 8002bd2:	60da      	str	r2, [r3, #12]
 8002bd4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002bda:	463b      	mov	r3, r7
 8002bdc:	2228      	movs	r2, #40	; 0x28
 8002bde:	2100      	movs	r1, #0
 8002be0:	4618      	mov	r0, r3
 8002be2:	f017 ff71 	bl	801aac8 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002be6:	4b4b      	ldr	r3, [pc, #300]	; (8002d14 <MX_RTC_Init+0x154>)
 8002be8:	4a4b      	ldr	r2, [pc, #300]	; (8002d18 <MX_RTC_Init+0x158>)
 8002bea:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002bec:	4b49      	ldr	r3, [pc, #292]	; (8002d14 <MX_RTC_Init+0x154>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002bf2:	4b48      	ldr	r3, [pc, #288]	; (8002d14 <MX_RTC_Init+0x154>)
 8002bf4:	227f      	movs	r2, #127	; 0x7f
 8002bf6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002bf8:	4b46      	ldr	r3, [pc, #280]	; (8002d14 <MX_RTC_Init+0x154>)
 8002bfa:	22ff      	movs	r2, #255	; 0xff
 8002bfc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002bfe:	4b45      	ldr	r3, [pc, #276]	; (8002d14 <MX_RTC_Init+0x154>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002c04:	4b43      	ldr	r3, [pc, #268]	; (8002d14 <MX_RTC_Init+0x154>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002c0a:	4b42      	ldr	r3, [pc, #264]	; (8002d14 <MX_RTC_Init+0x154>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002c10:	4840      	ldr	r0, [pc, #256]	; (8002d14 <MX_RTC_Init+0x154>)
 8002c12:	f00c fb8d 	bl	800f330 <HAL_RTC_Init>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002c1c:	f7ff ffca 	bl	8002bb4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002c20:	2300      	movs	r3, #0
 8002c22:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002c36:	2300      	movs	r3, #0
 8002c38:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002c3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c3e:	2201      	movs	r2, #1
 8002c40:	4619      	mov	r1, r3
 8002c42:	4834      	ldr	r0, [pc, #208]	; (8002d14 <MX_RTC_Init+0x154>)
 8002c44:	f00c fc05 	bl	800f452 <HAL_RTC_SetTime>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002c4e:	f7ff ffb1 	bl	8002bb4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002c52:	2301      	movs	r3, #1
 8002c54:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002c6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c6e:	2201      	movs	r2, #1
 8002c70:	4619      	mov	r1, r3
 8002c72:	4828      	ldr	r0, [pc, #160]	; (8002d14 <MX_RTC_Init+0x154>)
 8002c74:	f00c fd08 	bl	800f688 <HAL_RTC_SetDate>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8002c7e:	f7ff ff99 	bl	8002bb4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002cac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002cb2:	463b      	mov	r3, r7
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4816      	ldr	r0, [pc, #88]	; (8002d14 <MX_RTC_Init+0x154>)
 8002cba:	f00c fddb 	bl	800f874 <HAL_RTC_SetAlarm_IT>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002cc4:	f7ff ff76 	bl	8002bb4 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002cce:	463b      	mov	r3, r7
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	480f      	ldr	r0, [pc, #60]	; (8002d14 <MX_RTC_Init+0x154>)
 8002cd6:	f00c fdcd 	bl	800f874 <HAL_RTC_SetAlarm_IT>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8002ce0:	f7ff ff68 	bl	8002bb4 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <MX_RTC_Init+0x154>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <MX_RTC_Init+0x154>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002cf4:	60da      	str	r2, [r3, #12]
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	4806      	ldr	r0, [pc, #24]	; (8002d14 <MX_RTC_Init+0x154>)
 8002cfc:	f00c ffc8 	bl	800fc90 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <MX_RTC_Init+0x14a>
  {
    Error_Handler();
 8002d06:	f7ff ff55 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002d0a:	bf00      	nop
 8002d0c:	3740      	adds	r7, #64	; 0x40
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	2000878c 	.word	0x2000878c
 8002d18:	40002800 	.word	0x40002800

08002d1c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08e      	sub	sp, #56	; 0x38
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d24:	f107 0308 	add.w	r3, r7, #8
 8002d28:	2230      	movs	r2, #48	; 0x30
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f017 fecb 	bl	801aac8 <memset>
  if(rtcHandle->Instance==RTC)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a14      	ldr	r2, [pc, #80]	; (8002d88 <HAL_RTC_MspInit+0x6c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d121      	bne.n	8002d80 <HAL_RTC_MspInit+0x64>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002d3c:	2320      	movs	r3, #32
 8002d3e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002d40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d44:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d46:	f107 0308 	add.w	r3, r7, #8
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f00c f932 	bl	800efb4 <HAL_RCCEx_PeriphCLKConfig>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002d56:	f7ff ff2d 	bl	8002bb4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d5a:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <HAL_RTC_MspInit+0x70>)
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002d60:	2200      	movs	r2, #0
 8002d62:	2100      	movs	r1, #0
 8002d64:	2003      	movs	r0, #3
 8002d66:	f00a f903 	bl	800cf70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002d6a:	2003      	movs	r0, #3
 8002d6c:	f00a f91c 	bl	800cfa8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002d70:	2200      	movs	r2, #0
 8002d72:	2100      	movs	r1, #0
 8002d74:	2029      	movs	r0, #41	; 0x29
 8002d76:	f00a f8fb 	bl	800cf70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002d7a:	2029      	movs	r0, #41	; 0x29
 8002d7c:	f00a f914 	bl	800cfa8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002d80:	bf00      	nop
 8002d82:	3738      	adds	r7, #56	; 0x38
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40002800 	.word	0x40002800
 8002d8c:	42470e3c 	.word	0x42470e3c

08002d90 <MRT_rtc_Init>:


//**************************************************//
//FUNCTIONS

void MRT_rtc_Init(void){
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
	println("\r\nMRT RTC Init");
 8002d94:	4817      	ldr	r0, [pc, #92]	; (8002df4 <MRT_rtc_Init+0x64>)
 8002d96:	f7fe f999 	bl	80010cc <println>

	print("\tSetting RTC to previous time...");
 8002d9a:	4817      	ldr	r0, [pc, #92]	; (8002df8 <MRT_rtc_Init+0x68>)
 8002d9c:	f7fe f9b4 	bl	8001108 <print>
	MRT_set_rtc(prev_hour,prev_min,prev_sec);
 8002da0:	4b16      	ldr	r3, [pc, #88]	; (8002dfc <MRT_rtc_Init+0x6c>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	4a16      	ldr	r2, [pc, #88]	; (8002e00 <MRT_rtc_Init+0x70>)
 8002da6:	7811      	ldrb	r1, [r2, #0]
 8002da8:	4a16      	ldr	r2, [pc, #88]	; (8002e04 <MRT_rtc_Init+0x74>)
 8002daa:	7812      	ldrb	r2, [r2, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 f8df 	bl	8002f70 <MRT_set_rtc>
	println("OK");
 8002db2:	4815      	ldr	r0, [pc, #84]	; (8002e08 <MRT_rtc_Init+0x78>)
 8002db4:	f7fe f98a 	bl	80010cc <println>

	HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 8002db8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002dbc:	f009 fbc8 	bl	800c550 <HAL_Delay>

	//TODO for some reason, both set_alarm need to be uncommented or commented together
	//They can't be used individually (or else we get a hardfault during external flash setup??)
	#if ALARM_A_ACTIVE
		print("\tSetting alarmA...");
 8002dc0:	4812      	ldr	r0, [pc, #72]	; (8002e0c <MRT_rtc_Init+0x7c>)
 8002dc2:	f7fe f9a1 	bl	8001108 <print>
		MRT_set_alarmA(PRE_WHEN_SLEEP_TIME_HOURS, PRE_WHEN_SLEEP_TIME_MIN, PRE_WHEN_SLEEP_TIME_SEC);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	211e      	movs	r1, #30
 8002dca:	2004      	movs	r0, #4
 8002dcc:	f000 f916 	bl	8002ffc <MRT_set_alarmA>
		println("OK");
 8002dd0:	480d      	ldr	r0, [pc, #52]	; (8002e08 <MRT_rtc_Init+0x78>)
 8002dd2:	f7fe f97b 	bl	80010cc <println>
	#endif


	#if ALARM_B_ACTIVE
		print("\tSetting alarmB...");
 8002dd6:	480e      	ldr	r0, [pc, #56]	; (8002e10 <MRT_rtc_Init+0x80>)
 8002dd8:	f7fe f996 	bl	8001108 <print>
		MRT_set_alarmB(POST_WHEN_SLEEP_TIME_HOURS, POST_WHEN_SLEEP_TIME_MIN, POST_WHEN_SLEEP_TIME_SEC);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	211e      	movs	r1, #30
 8002de0:	2012      	movs	r0, #18
 8002de2:	f000 f951 	bl	8003088 <MRT_set_alarmB>
		println("OK");
 8002de6:	4808      	ldr	r0, [pc, #32]	; (8002e08 <MRT_rtc_Init+0x78>)
 8002de8:	f7fe f970 	bl	80010cc <println>
	#endif

	MRT_clear_alarms_flags();
 8002dec:	f000 f812 	bl	8002e14 <MRT_clear_alarms_flags>
}
 8002df0:	bf00      	nop
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	08020c34 	.word	0x08020c34
 8002df8:	08020c44 	.word	0x08020c44
 8002dfc:	2000041a 	.word	0x2000041a
 8002e00:	2000041b 	.word	0x2000041b
 8002e04:	2000041c 	.word	0x2000041c
 8002e08:	08020c68 	.word	0x08020c68
 8002e0c:	08020c6c 	.word	0x08020c6c
 8002e10:	08020c80 	.word	0x08020c80

08002e14 <MRT_clear_alarms_flags>:



void MRT_clear_alarms_flags(void){
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	print("Clearing the flags\r\n");
 8002e18:	482c      	ldr	r0, [pc, #176]	; (8002ecc <MRT_clear_alarms_flags+0xb8>)
 8002e1a:	f7fe f975 	bl	8001108 <print>

	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002e1e:	4b2c      	ldr	r3, [pc, #176]	; (8002ed0 <MRT_clear_alarms_flags+0xbc>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	22ca      	movs	r2, #202	; 0xca
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24
 8002e26:	4b2a      	ldr	r3, [pc, #168]	; (8002ed0 <MRT_clear_alarms_flags+0xbc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2253      	movs	r2, #83	; 0x53
 8002e2c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8002e2e:	e008      	b.n	8002e42 <MRT_clear_alarms_flags+0x2e>
		//print("Clearing alarm A flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002e30:	4b27      	ldr	r3, [pc, #156]	; (8002ed0 <MRT_clear_alarms_flags+0xbc>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	4b25      	ldr	r3, [pc, #148]	; (8002ed0 <MRT_clear_alarms_flags+0xbc>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002e40:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8002e42:	4b23      	ldr	r3, [pc, #140]	; (8002ed0 <MRT_clear_alarms_flags+0xbc>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1ef      	bne.n	8002e30 <MRT_clear_alarms_flags+0x1c>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002e50:	4b1f      	ldr	r3, [pc, #124]	; (8002ed0 <MRT_clear_alarms_flags+0xbc>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	22ff      	movs	r2, #255	; 0xff
 8002e56:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002e58:	4b1e      	ldr	r3, [pc, #120]	; (8002ed4 <MRT_clear_alarms_flags+0xc0>)
 8002e5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e5e:	615a      	str	r2, [r3, #20]



  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002e60:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <MRT_clear_alarms_flags+0xbc>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	22ca      	movs	r2, #202	; 0xca
 8002e66:	625a      	str	r2, [r3, #36]	; 0x24
 8002e68:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <MRT_clear_alarms_flags+0xbc>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2253      	movs	r2, #83	; 0x53
 8002e6e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8002e70:	e008      	b.n	8002e84 <MRT_clear_alarms_flags+0x70>
		//print("Clearing alarm B flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 8002e72:	4b17      	ldr	r3, [pc, #92]	; (8002ed0 <MRT_clear_alarms_flags+0xbc>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <MRT_clear_alarms_flags+0xbc>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002e82:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8002e84:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <MRT_clear_alarms_flags+0xbc>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1ef      	bne.n	8002e72 <MRT_clear_alarms_flags+0x5e>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002e92:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <MRT_clear_alarms_flags+0xbc>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	22ff      	movs	r2, #255	; 0xff
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002e9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <MRT_clear_alarms_flags+0xc0>)
 8002e9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ea0:	615a      	str	r2, [r3, #20]

	/* Clear the WU FLAG */
	//print("Clearing wake up flag\r\n");
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002ea2:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <MRT_clear_alarms_flags+0xc4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a0c      	ldr	r2, [pc, #48]	; (8002ed8 <MRT_clear_alarms_flags+0xc4>)
 8002ea8:	f043 0304 	orr.w	r3, r3, #4
 8002eac:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//print("Clearing RTC wake up flag\r\n");
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8002eae:	4b08      	ldr	r3, [pc, #32]	; (8002ed0 <MRT_clear_alarms_flags+0xbc>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <MRT_clear_alarms_flags+0xbc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002ebe:	60da      	str	r2, [r3, #12]
	__HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002ec0:	4b04      	ldr	r3, [pc, #16]	; (8002ed4 <MRT_clear_alarms_flags+0xc0>)
 8002ec2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002ec6:	615a      	str	r2, [r3, #20]
}
 8002ec8:	bf00      	nop
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	08020c94 	.word	0x08020c94
 8002ed0:	2000878c 	.word	0x2000878c
 8002ed4:	40013c00 	.word	0x40013c00
 8002ed8:	40007000 	.word	0x40007000

08002edc <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode(uint32_t seconds){
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08c      	sub	sp, #48	; 0x30
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
	print("\r\n/*****StandByMode*****/\r\n");
 8002ee4:	481e      	ldr	r0, [pc, #120]	; (8002f60 <MRT_StandByMode+0x84>)
 8002ee6:	f7fe f90f 	bl	8001108 <print>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8002eea:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002eee:	f00b fb2f 	bl	800e550 <HAL_PWR_EnableWakeUpPin>


	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002ef2:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <MRT_StandByMode+0x88>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	22ca      	movs	r2, #202	; 0xca
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24
 8002efa:	4b1a      	ldr	r3, [pc, #104]	; (8002f64 <MRT_StandByMode+0x88>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2253      	movs	r2, #83	; 0x53
 8002f00:	625a      	str	r2, [r3, #36]	; 0x24
	//Need this line or else alarm B will wake up the board immediately
	//Weird thing is this is not needed for alarm A
	__HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002f02:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <MRT_StandByMode+0x88>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <MRT_StandByMode+0x88>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f10:	609a      	str	r2, [r3, #8]
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002f12:	4b14      	ldr	r3, [pc, #80]	; (8002f64 <MRT_StandByMode+0x88>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	22ff      	movs	r2, #255	; 0xff
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_clear_alarms_flags();
 8002f1a:	f7ff ff7b 	bl	8002e14 <MRT_clear_alarms_flags>

	//Setup RTC wake up timer
	println("Setting up RTCW");
 8002f1e:	4812      	ldr	r0, [pc, #72]	; (8002f68 <MRT_StandByMode+0x8c>)
 8002f20:	f7fe f8d4 	bl	80010cc <println>
	  Error_Handler();
	}
	*/

	char msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds",(int) seconds);
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	f107 030c 	add.w	r3, r7, #12
 8002f2a:	4910      	ldr	r1, [pc, #64]	; (8002f6c <MRT_StandByMode+0x90>)
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f019 f8c7 	bl	801c0c0 <siprintf>
	println(msg);
 8002f32:	f107 030c 	add.w	r3, r7, #12
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fe f8c8 	bl	80010cc <println>

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4808      	ldr	r0, [pc, #32]	; (8002f64 <MRT_StandByMode+0x88>)
 8002f42:	f00c fea5 	bl	800fc90 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <MRT_StandByMode+0x74>
	{
	  Error_Handler();
 8002f4c:	f7ff fe32 	bl	8002bb4 <Error_Handler>
	}

	HAL_SuspendTick(); //System tick interrupt disabled (might not be necessary)
 8002f50:	f000 fb9c 	bl	800368c <HAL_SuspendTick>

	HAL_PWR_EnterSTANDBYMode();
 8002f54:	f00b fb22 	bl	800e59c <HAL_PWR_EnterSTANDBYMode>
}
 8002f58:	bf00      	nop
 8002f5a:	3730      	adds	r7, #48	; 0x30
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	08020cac 	.word	0x08020cac
 8002f64:	2000878c 	.word	0x2000878c
 8002f68:	08020cc8 	.word	0x08020cc8
 8002f6c:	08020cd8 	.word	0x08020cd8

08002f70 <MRT_set_rtc>:




void MRT_set_rtc(uint8_t h, uint8_t m, uint8_t s){
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b088      	sub	sp, #32
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	71fb      	strb	r3, [r7, #7]
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	71bb      	strb	r3, [r7, #6]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	717b      	strb	r3, [r7, #5]

	  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 4U, 0U);
	  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
	  */

	  sTime.Hours = int_to_hex_table[h];
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	4a1a      	ldr	r2, [pc, #104]	; (8002ff0 <MRT_set_rtc+0x80>)
 8002f86:	5cd3      	ldrb	r3, [r2, r3]
 8002f88:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 8002f8a:	79bb      	ldrb	r3, [r7, #6]
 8002f8c:	4a18      	ldr	r2, [pc, #96]	; (8002ff0 <MRT_set_rtc+0x80>)
 8002f8e:	5cd3      	ldrb	r3, [r2, r3]
 8002f90:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 8002f92:	797b      	ldrb	r3, [r7, #5]
 8002f94:	4a16      	ldr	r2, [pc, #88]	; (8002ff0 <MRT_set_rtc+0x80>)
 8002f96:	5cd3      	ldrb	r3, [r2, r3]
 8002f98:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002fa2:	f107 030c 	add.w	r3, r7, #12
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4812      	ldr	r0, [pc, #72]	; (8002ff4 <MRT_set_rtc+0x84>)
 8002fac:	f00c fa51 	bl	800f452 <HAL_RTC_SetTime>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <MRT_set_rtc+0x4a>
	  {
	    Error_Handler();
 8002fb6:	f7ff fdfd 	bl	8002bb4 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002fba:	4b0f      	ldr	r3, [pc, #60]	; (8002ff8 <MRT_set_rtc+0x88>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 8002fc0:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <MRT_set_rtc+0x88>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 8002fc6:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <MRT_set_rtc+0x88>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 8002fcc:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <MRT_set_rtc+0x88>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	4908      	ldr	r1, [pc, #32]	; (8002ff8 <MRT_set_rtc+0x88>)
 8002fd6:	4807      	ldr	r0, [pc, #28]	; (8002ff4 <MRT_set_rtc+0x84>)
 8002fd8:	f00c fb56 	bl	800f688 <HAL_RTC_SetDate>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <MRT_set_rtc+0x76>
	  {
	    Error_Handler();
 8002fe2:	f7ff fde7 	bl	8002bb4 <Error_Handler>
	  }
}
 8002fe6:	bf00      	nop
 8002fe8:	3720      	adds	r7, #32
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000000 	.word	0x20000000
 8002ff4:	2000878c 	.word	0x2000878c
 8002ff8:	2000037c 	.word	0x2000037c

08002ffc <MRT_set_alarmA>:



void MRT_set_alarmA(uint8_t h, uint8_t m, uint8_t s){
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	71fb      	strb	r3, [r7, #7]
 8003006:	460b      	mov	r3, r1
 8003008:	71bb      	strb	r3, [r7, #6]
 800300a:	4613      	mov	r3, r2
 800300c:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	4a1a      	ldr	r2, [pc, #104]	; (800307c <MRT_set_alarmA+0x80>)
 8003012:	5cd2      	ldrb	r2, [r2, r3]
 8003014:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <MRT_set_alarmA+0x84>)
 8003016:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8003018:	79bb      	ldrb	r3, [r7, #6]
 800301a:	4a18      	ldr	r2, [pc, #96]	; (800307c <MRT_set_alarmA+0x80>)
 800301c:	5cd2      	ldrb	r2, [r2, r3]
 800301e:	4b18      	ldr	r3, [pc, #96]	; (8003080 <MRT_set_alarmA+0x84>)
 8003020:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 8003022:	797b      	ldrb	r3, [r7, #5]
 8003024:	4a15      	ldr	r2, [pc, #84]	; (800307c <MRT_set_alarmA+0x80>)
 8003026:	5cd2      	ldrb	r2, [r2, r3]
 8003028:	4b15      	ldr	r3, [pc, #84]	; (8003080 <MRT_set_alarmA+0x84>)
 800302a:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 800302c:	4b14      	ldr	r3, [pc, #80]	; (8003080 <MRT_set_alarmA+0x84>)
 800302e:	2200      	movs	r2, #0
 8003030:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003032:	4b13      	ldr	r3, [pc, #76]	; (8003080 <MRT_set_alarmA+0x84>)
 8003034:	2200      	movs	r2, #0
 8003036:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003038:	4b11      	ldr	r3, [pc, #68]	; (8003080 <MRT_set_alarmA+0x84>)
 800303a:	2200      	movs	r2, #0
 800303c:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800303e:	4b10      	ldr	r3, [pc, #64]	; (8003080 <MRT_set_alarmA+0x84>)
 8003040:	2200      	movs	r2, #0
 8003042:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003044:	4b0e      	ldr	r3, [pc, #56]	; (8003080 <MRT_set_alarmA+0x84>)
 8003046:	2200      	movs	r2, #0
 8003048:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800304a:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <MRT_set_alarmA+0x84>)
 800304c:	2200      	movs	r2, #0
 800304e:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <MRT_set_alarmA+0x84>)
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8003058:	4b09      	ldr	r3, [pc, #36]	; (8003080 <MRT_set_alarmA+0x84>)
 800305a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800305e:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003060:	2201      	movs	r2, #1
 8003062:	4907      	ldr	r1, [pc, #28]	; (8003080 <MRT_set_alarmA+0x84>)
 8003064:	4807      	ldr	r0, [pc, #28]	; (8003084 <MRT_set_alarmA+0x88>)
 8003066:	f00c fc05 	bl	800f874 <HAL_RTC_SetAlarm_IT>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <MRT_set_alarmA+0x78>
	  {
	    Error_Handler();
 8003070:	f7ff fda0 	bl	8002bb4 <Error_Handler>
	  }
}
 8003074:	bf00      	nop
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	20000000 	.word	0x20000000
 8003080:	20000380 	.word	0x20000380
 8003084:	2000878c 	.word	0x2000878c

08003088 <MRT_set_alarmB>:



void MRT_set_alarmB(uint8_t h, uint8_t m, uint8_t s){
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	71fb      	strb	r3, [r7, #7]
 8003092:	460b      	mov	r3, r1
 8003094:	71bb      	strb	r3, [r7, #6]
 8003096:	4613      	mov	r3, r2
 8003098:	717b      	strb	r3, [r7, #5]
	  /** Enable the AlarmB
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	4a1a      	ldr	r2, [pc, #104]	; (8003108 <MRT_set_alarmB+0x80>)
 800309e:	5cd2      	ldrb	r2, [r2, r3]
 80030a0:	4b1a      	ldr	r3, [pc, #104]	; (800310c <MRT_set_alarmB+0x84>)
 80030a2:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 80030a4:	79bb      	ldrb	r3, [r7, #6]
 80030a6:	4a18      	ldr	r2, [pc, #96]	; (8003108 <MRT_set_alarmB+0x80>)
 80030a8:	5cd2      	ldrb	r2, [r2, r3]
 80030aa:	4b18      	ldr	r3, [pc, #96]	; (800310c <MRT_set_alarmB+0x84>)
 80030ac:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 80030ae:	797b      	ldrb	r3, [r7, #5]
 80030b0:	4a15      	ldr	r2, [pc, #84]	; (8003108 <MRT_set_alarmB+0x80>)
 80030b2:	5cd2      	ldrb	r2, [r2, r3]
 80030b4:	4b15      	ldr	r3, [pc, #84]	; (800310c <MRT_set_alarmB+0x84>)
 80030b6:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 80030b8:	4b14      	ldr	r3, [pc, #80]	; (800310c <MRT_set_alarmB+0x84>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80030be:	4b13      	ldr	r3, [pc, #76]	; (800310c <MRT_set_alarmB+0x84>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80030c4:	4b11      	ldr	r3, [pc, #68]	; (800310c <MRT_set_alarmB+0x84>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80030ca:	4b10      	ldr	r3, [pc, #64]	; (800310c <MRT_set_alarmB+0x84>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80030d0:	4b0e      	ldr	r3, [pc, #56]	; (800310c <MRT_set_alarmB+0x84>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80030d6:	4b0d      	ldr	r3, [pc, #52]	; (800310c <MRT_set_alarmB+0x84>)
 80030d8:	2200      	movs	r2, #0
 80030da:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <MRT_set_alarmB+0x84>)
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_B;
 80030e4:	4b09      	ldr	r3, [pc, #36]	; (800310c <MRT_set_alarmB+0x84>)
 80030e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ea:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80030ec:	2201      	movs	r2, #1
 80030ee:	4907      	ldr	r1, [pc, #28]	; (800310c <MRT_set_alarmB+0x84>)
 80030f0:	4807      	ldr	r0, [pc, #28]	; (8003110 <MRT_set_alarmB+0x88>)
 80030f2:	f00c fbbf 	bl	800f874 <HAL_RTC_SetAlarm_IT>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <MRT_set_alarmB+0x78>
	  {
	    Error_Handler();
 80030fc:	f7ff fd5a 	bl	8002bb4 <Error_Handler>
	  }
}
 8003100:	bf00      	nop
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	20000000 	.word	0x20000000
 800310c:	20000380 	.word	0x20000380
 8003110:	2000878c 	.word	0x2000878c

08003114 <MRT_RTC_backup_regs_Init>:
							  &rtc_bckp_reg_alt_apogee, &rtc_bckp_reg_apogee_time, &rtc_bckp_reg_alt_main, &rtc_bckp_reg_main_time,
							  &rtc_bckp_reg_alt_landed, &rtc_bckp_reg_landed_time};


//Get all the backup regs values (initialization)
void MRT_RTC_backup_regs_Init(void){
 8003114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003116:	b0cf      	sub	sp, #316	; 0x13c
 8003118:	af08      	add	r7, sp, #32
	for (int i = 0; i < NB_RTC_BCKP_REGS; i++){
 800311a:	2300      	movs	r3, #0
 800311c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003120:	e011      	b.n	8003146 <MRT_RTC_backup_regs_Init+0x32>
		*rtc_bckp_regs[i] = MRT_RTC_getBackupReg(i);
 8003122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003126:	b2da      	uxtb	r2, r3
 8003128:	4924      	ldr	r1, [pc, #144]	; (80031bc <MRT_RTC_backup_regs_Init+0xa8>)
 800312a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800312e:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8003132:	4610      	mov	r0, r2
 8003134:	f000 f87e 	bl	8003234 <MRT_RTC_getBackupReg>
 8003138:	4603      	mov	r3, r0
 800313a:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < NB_RTC_BCKP_REGS; i++){
 800313c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003140:	3301      	adds	r3, #1
 8003142:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800314a:	2b12      	cmp	r3, #18
 800314c:	dde9      	ble.n	8003122 <MRT_RTC_backup_regs_Init+0xe>
	}

	//TODO TESTING
	char buffer[256];
	sprintf(buffer, "ALTITUDES:\r\n\tGround: %i \tTime: %i"
 800314e:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <MRT_RTC_backup_regs_Init+0xac>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	4b1b      	ldr	r3, [pc, #108]	; (80031c4 <MRT_RTC_backup_regs_Init+0xb0>)
 8003156:	6819      	ldr	r1, [r3, #0]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <MRT_RTC_backup_regs_Init+0xb4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a1b      	ldr	r2, [pc, #108]	; (80031cc <MRT_RTC_backup_regs_Init+0xb8>)
 8003160:	6812      	ldr	r2, [r2, #0]
 8003162:	491b      	ldr	r1, [pc, #108]	; (80031d0 <MRT_RTC_backup_regs_Init+0xbc>)
 8003164:	6809      	ldr	r1, [r1, #0]
 8003166:	481b      	ldr	r0, [pc, #108]	; (80031d4 <MRT_RTC_backup_regs_Init+0xc0>)
 8003168:	6800      	ldr	r0, [r0, #0]
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	4c1a      	ldr	r4, [pc, #104]	; (80031d8 <MRT_RTC_backup_regs_Init+0xc4>)
 800316e:	6824      	ldr	r4, [r4, #0]
 8003170:	4d1a      	ldr	r5, [pc, #104]	; (80031dc <MRT_RTC_backup_regs_Init+0xc8>)
 8003172:	682d      	ldr	r5, [r5, #0]
 8003174:	4e1a      	ldr	r6, [pc, #104]	; (80031e0 <MRT_RTC_backup_regs_Init+0xcc>)
 8003176:	6836      	ldr	r6, [r6, #0]
 8003178:	481a      	ldr	r0, [pc, #104]	; (80031e4 <MRT_RTC_backup_regs_Init+0xd0>)
 800317a:	6800      	ldr	r0, [r0, #0]
 800317c:	f107 0c14 	add.w	ip, r7, #20
 8003180:	9007      	str	r0, [sp, #28]
 8003182:	9606      	str	r6, [sp, #24]
 8003184:	9505      	str	r5, [sp, #20]
 8003186:	9404      	str	r4, [sp, #16]
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	9003      	str	r0, [sp, #12]
 800318c:	9102      	str	r1, [sp, #8]
 800318e:	9201      	str	r2, [sp, #4]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4914      	ldr	r1, [pc, #80]	; (80031e8 <MRT_RTC_backup_regs_Init+0xd4>)
 8003198:	4660      	mov	r0, ip
 800319a:	f018 ff91 	bl	801c0c0 <siprintf>
					"\r\n\tMain: %i \tTime: %i"
					"\r\n\tLanded: %i \tTime: %i\r\n",
			rtc_bckp_reg_alt_pad, rtc_bckp_reg_pad_time,  rtc_bckp_reg_alt_true_apogee, rtc_bckp_reg_true_apogee_time,
			rtc_bckp_reg_alt_apogee, rtc_bckp_reg_apogee_time, rtc_bckp_reg_alt_main, rtc_bckp_reg_main_time,
			rtc_bckp_reg_alt_landed, rtc_bckp_reg_landed_time);
	print(buffer);
 800319e:	f107 0314 	add.w	r3, r7, #20
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fd ffb0 	bl	8001108 <print>

	HAL_Delay(2000);
 80031a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80031ac:	f009 f9d0 	bl	800c550 <HAL_Delay>
}
 80031b0:	bf00      	nop
 80031b2:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ba:	bf00      	nop
 80031bc:	2000003c 	.word	0x2000003c
 80031c0:	200003cc 	.word	0x200003cc
 80031c4:	200003d0 	.word	0x200003d0
 80031c8:	200003d4 	.word	0x200003d4
 80031cc:	200003d8 	.word	0x200003d8
 80031d0:	200003dc 	.word	0x200003dc
 80031d4:	200003e0 	.word	0x200003e0
 80031d8:	200003e4 	.word	0x200003e4
 80031dc:	200003e8 	.word	0x200003e8
 80031e0:	200003ec 	.word	0x200003ec
 80031e4:	200003f0 	.word	0x200003f0
 80031e8:	08020cf8 	.word	0x08020cf8

080031ec <MRT_RTC_clearBackupRegs>:

// initializes backup register values to zero
void MRT_RTC_clearBackupRegs(void) {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 80031f2:	4b0f      	ldr	r3, [pc, #60]	; (8003230 <MRT_RTC_clearBackupRegs+0x44>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	22ca      	movs	r2, #202	; 0xca
 80031f8:	625a      	str	r2, [r3, #36]	; 0x24
 80031fa:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <MRT_RTC_clearBackupRegs+0x44>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2253      	movs	r2, #83	; 0x53
 8003200:	625a      	str	r2, [r3, #36]	; 0x24
	for (uint8_t i = 0; i < 20; i++) {
 8003202:	2300      	movs	r3, #0
 8003204:	71fb      	strb	r3, [r7, #7]
 8003206:	e008      	b.n	800321a <MRT_RTC_clearBackupRegs+0x2e>
		HAL_RTCEx_BKUPWrite(&hrtc, i, 0);	// set all backup register values to zero
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	2200      	movs	r2, #0
 800320c:	4619      	mov	r1, r3
 800320e:	4808      	ldr	r0, [pc, #32]	; (8003230 <MRT_RTC_clearBackupRegs+0x44>)
 8003210:	f00c fe7a 	bl	800ff08 <HAL_RTCEx_BKUPWrite>
	for (uint8_t i = 0; i < 20; i++) {
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	3301      	adds	r3, #1
 8003218:	71fb      	strb	r3, [r7, #7]
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	2b13      	cmp	r3, #19
 800321e:	d9f3      	bls.n	8003208 <MRT_RTC_clearBackupRegs+0x1c>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8003220:	4b03      	ldr	r3, [pc, #12]	; (8003230 <MRT_RTC_clearBackupRegs+0x44>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	22ff      	movs	r2, #255	; 0xff
 8003226:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003228:	bf00      	nop
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	2000878c 	.word	0x2000878c

08003234 <MRT_RTC_getBackupReg>:

// gets the backup register value for the specified state
uint32_t MRT_RTC_getBackupReg(rtc_backup_reg state) {
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	71fb      	strb	r3, [r7, #7]
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 800323e:	4b0b      	ldr	r3, [pc, #44]	; (800326c <MRT_RTC_getBackupReg+0x38>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	22ca      	movs	r2, #202	; 0xca
 8003244:	625a      	str	r2, [r3, #36]	; 0x24
 8003246:	4b09      	ldr	r3, [pc, #36]	; (800326c <MRT_RTC_getBackupReg+0x38>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2253      	movs	r2, #83	; 0x53
 800324c:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, (uint32_t) state);
 800324e:	79fb      	ldrb	r3, [r7, #7]
 8003250:	4619      	mov	r1, r3
 8003252:	4806      	ldr	r0, [pc, #24]	; (800326c <MRT_RTC_getBackupReg+0x38>)
 8003254:	f00c fe72 	bl	800ff3c <HAL_RTCEx_BKUPRead>
 8003258:	60f8      	str	r0, [r7, #12]
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 800325a:	4b04      	ldr	r3, [pc, #16]	; (800326c <MRT_RTC_getBackupReg+0x38>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	22ff      	movs	r2, #255	; 0xff
 8003260:	625a      	str	r2, [r3, #36]	; 0x24
	return val;
 8003262:	68fb      	ldr	r3, [r7, #12]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	2000878c 	.word	0x2000878c

08003270 <MRT_RTC_setBackupReg>:

// sets the backup register value for the specified state
void MRT_RTC_setBackupReg(rtc_backup_reg state, uint32_t value) {
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	6039      	str	r1, [r7, #0]
 800327a:	71fb      	strb	r3, [r7, #7]
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 800327c:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <MRT_RTC_setBackupReg+0x38>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	22ca      	movs	r2, #202	; 0xca
 8003282:	625a      	str	r2, [r3, #36]	; 0x24
 8003284:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <MRT_RTC_setBackupReg+0x38>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2253      	movs	r2, #83	; 0x53
 800328a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RTCEx_BKUPWrite(&hrtc, (uint32_t) state, value);
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	4619      	mov	r1, r3
 8003292:	4805      	ldr	r0, [pc, #20]	; (80032a8 <MRT_RTC_setBackupReg+0x38>)
 8003294:	f00c fe38 	bl	800ff08 <HAL_RTCEx_BKUPWrite>
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8003298:	4b03      	ldr	r3, [pc, #12]	; (80032a8 <MRT_RTC_setBackupReg+0x38>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	22ff      	movs	r2, #255	; 0xff
 800329e:	625a      	str	r2, [r3, #36]	; 0x24
}
 80032a0:	bf00      	nop
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	2000878c 	.word	0x2000878c

080032ac <MX_SPI2_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80032b0:	4b17      	ldr	r3, [pc, #92]	; (8003310 <MX_SPI2_Init+0x64>)
 80032b2:	4a18      	ldr	r2, [pc, #96]	; (8003314 <MX_SPI2_Init+0x68>)
 80032b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80032b6:	4b16      	ldr	r3, [pc, #88]	; (8003310 <MX_SPI2_Init+0x64>)
 80032b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80032be:	4b14      	ldr	r3, [pc, #80]	; (8003310 <MX_SPI2_Init+0x64>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80032c4:	4b12      	ldr	r3, [pc, #72]	; (8003310 <MX_SPI2_Init+0x64>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032ca:	4b11      	ldr	r3, [pc, #68]	; (8003310 <MX_SPI2_Init+0x64>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032d0:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <MX_SPI2_Init+0x64>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80032d6:	4b0e      	ldr	r3, [pc, #56]	; (8003310 <MX_SPI2_Init+0x64>)
 80032d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032de:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <MX_SPI2_Init+0x64>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032e4:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <MX_SPI2_Init+0x64>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80032ea:	4b09      	ldr	r3, [pc, #36]	; (8003310 <MX_SPI2_Init+0x64>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032f0:	4b07      	ldr	r3, [pc, #28]	; (8003310 <MX_SPI2_Init+0x64>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80032f6:	4b06      	ldr	r3, [pc, #24]	; (8003310 <MX_SPI2_Init+0x64>)
 80032f8:	220a      	movs	r2, #10
 80032fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80032fc:	4804      	ldr	r0, [pc, #16]	; (8003310 <MX_SPI2_Init+0x64>)
 80032fe:	f00c fe35 	bl	800ff6c <HAL_SPI_Init>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003308:	f7ff fc54 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800330c:	bf00      	nop
 800330e:	bd80      	pop	{r7, pc}
 8003310:	200087ac 	.word	0x200087ac
 8003314:	40003800 	.word	0x40003800

08003318 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800331c:	4b17      	ldr	r3, [pc, #92]	; (800337c <MX_SPI4_Init+0x64>)
 800331e:	4a18      	ldr	r2, [pc, #96]	; (8003380 <MX_SPI4_Init+0x68>)
 8003320:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003322:	4b16      	ldr	r3, [pc, #88]	; (800337c <MX_SPI4_Init+0x64>)
 8003324:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003328:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800332a:	4b14      	ldr	r3, [pc, #80]	; (800337c <MX_SPI4_Init+0x64>)
 800332c:	2200      	movs	r2, #0
 800332e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003330:	4b12      	ldr	r3, [pc, #72]	; (800337c <MX_SPI4_Init+0x64>)
 8003332:	2200      	movs	r2, #0
 8003334:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003336:	4b11      	ldr	r3, [pc, #68]	; (800337c <MX_SPI4_Init+0x64>)
 8003338:	2200      	movs	r2, #0
 800333a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800333c:	4b0f      	ldr	r3, [pc, #60]	; (800337c <MX_SPI4_Init+0x64>)
 800333e:	2200      	movs	r2, #0
 8003340:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003342:	4b0e      	ldr	r3, [pc, #56]	; (800337c <MX_SPI4_Init+0x64>)
 8003344:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003348:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800334a:	4b0c      	ldr	r3, [pc, #48]	; (800337c <MX_SPI4_Init+0x64>)
 800334c:	2200      	movs	r2, #0
 800334e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003350:	4b0a      	ldr	r3, [pc, #40]	; (800337c <MX_SPI4_Init+0x64>)
 8003352:	2200      	movs	r2, #0
 8003354:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003356:	4b09      	ldr	r3, [pc, #36]	; (800337c <MX_SPI4_Init+0x64>)
 8003358:	2200      	movs	r2, #0
 800335a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800335c:	4b07      	ldr	r3, [pc, #28]	; (800337c <MX_SPI4_Init+0x64>)
 800335e:	2200      	movs	r2, #0
 8003360:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8003362:	4b06      	ldr	r3, [pc, #24]	; (800337c <MX_SPI4_Init+0x64>)
 8003364:	220a      	movs	r2, #10
 8003366:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003368:	4804      	ldr	r0, [pc, #16]	; (800337c <MX_SPI4_Init+0x64>)
 800336a:	f00c fdff 	bl	800ff6c <HAL_SPI_Init>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8003374:	f7ff fc1e 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003378:	bf00      	nop
 800337a:	bd80      	pop	{r7, pc}
 800337c:	2000885c 	.word	0x2000885c
 8003380:	40013400 	.word	0x40013400

08003384 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8003388:	4b17      	ldr	r3, [pc, #92]	; (80033e8 <MX_SPI5_Init+0x64>)
 800338a:	4a18      	ldr	r2, [pc, #96]	; (80033ec <MX_SPI5_Init+0x68>)
 800338c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800338e:	4b16      	ldr	r3, [pc, #88]	; (80033e8 <MX_SPI5_Init+0x64>)
 8003390:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003394:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003396:	4b14      	ldr	r3, [pc, #80]	; (80033e8 <MX_SPI5_Init+0x64>)
 8003398:	2200      	movs	r2, #0
 800339a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800339c:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <MX_SPI5_Init+0x64>)
 800339e:	2200      	movs	r2, #0
 80033a0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033a2:	4b11      	ldr	r3, [pc, #68]	; (80033e8 <MX_SPI5_Init+0x64>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033a8:	4b0f      	ldr	r3, [pc, #60]	; (80033e8 <MX_SPI5_Init+0x64>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80033ae:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <MX_SPI5_Init+0x64>)
 80033b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033b4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033b6:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <MX_SPI5_Init+0x64>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033bc:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <MX_SPI5_Init+0x64>)
 80033be:	2200      	movs	r2, #0
 80033c0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80033c2:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <MX_SPI5_Init+0x64>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033c8:	4b07      	ldr	r3, [pc, #28]	; (80033e8 <MX_SPI5_Init+0x64>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80033ce:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <MX_SPI5_Init+0x64>)
 80033d0:	220a      	movs	r2, #10
 80033d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80033d4:	4804      	ldr	r0, [pc, #16]	; (80033e8 <MX_SPI5_Init+0x64>)
 80033d6:	f00c fdc9 	bl	800ff6c <HAL_SPI_Init>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80033e0:	f7ff fbe8 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80033e4:	bf00      	nop
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	20008804 	.word	0x20008804
 80033ec:	40015000 	.word	0x40015000

080033f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08e      	sub	sp, #56	; 0x38
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	60da      	str	r2, [r3, #12]
 8003406:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a4c      	ldr	r2, [pc, #304]	; (8003540 <HAL_SPI_MspInit+0x150>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d12d      	bne.n	800346e <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	623b      	str	r3, [r7, #32]
 8003416:	4b4b      	ldr	r3, [pc, #300]	; (8003544 <HAL_SPI_MspInit+0x154>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	4a4a      	ldr	r2, [pc, #296]	; (8003544 <HAL_SPI_MspInit+0x154>)
 800341c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003420:	6413      	str	r3, [r2, #64]	; 0x40
 8003422:	4b48      	ldr	r3, [pc, #288]	; (8003544 <HAL_SPI_MspInit+0x154>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800342a:	623b      	str	r3, [r7, #32]
 800342c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	61fb      	str	r3, [r7, #28]
 8003432:	4b44      	ldr	r3, [pc, #272]	; (8003544 <HAL_SPI_MspInit+0x154>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	4a43      	ldr	r2, [pc, #268]	; (8003544 <HAL_SPI_MspInit+0x154>)
 8003438:	f043 0302 	orr.w	r3, r3, #2
 800343c:	6313      	str	r3, [r2, #48]	; 0x30
 800343e:	4b41      	ldr	r3, [pc, #260]	; (8003544 <HAL_SPI_MspInit+0x154>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	61fb      	str	r3, [r7, #28]
 8003448:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800344a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003450:	2302      	movs	r3, #2
 8003452:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003454:	2300      	movs	r3, #0
 8003456:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003458:	2303      	movs	r3, #3
 800345a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800345c:	2305      	movs	r3, #5
 800345e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003464:	4619      	mov	r1, r3
 8003466:	4838      	ldr	r0, [pc, #224]	; (8003548 <HAL_SPI_MspInit+0x158>)
 8003468:	f009 fdba 	bl	800cfe0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800346c:	e064      	b.n	8003538 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI4)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a36      	ldr	r2, [pc, #216]	; (800354c <HAL_SPI_MspInit+0x15c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d12d      	bne.n	80034d4 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003478:	2300      	movs	r3, #0
 800347a:	61bb      	str	r3, [r7, #24]
 800347c:	4b31      	ldr	r3, [pc, #196]	; (8003544 <HAL_SPI_MspInit+0x154>)
 800347e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003480:	4a30      	ldr	r2, [pc, #192]	; (8003544 <HAL_SPI_MspInit+0x154>)
 8003482:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003486:	6453      	str	r3, [r2, #68]	; 0x44
 8003488:	4b2e      	ldr	r3, [pc, #184]	; (8003544 <HAL_SPI_MspInit+0x154>)
 800348a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003490:	61bb      	str	r3, [r7, #24]
 8003492:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	4b2a      	ldr	r3, [pc, #168]	; (8003544 <HAL_SPI_MspInit+0x154>)
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	4a29      	ldr	r2, [pc, #164]	; (8003544 <HAL_SPI_MspInit+0x154>)
 800349e:	f043 0310 	orr.w	r3, r3, #16
 80034a2:	6313      	str	r3, [r2, #48]	; 0x30
 80034a4:	4b27      	ldr	r3, [pc, #156]	; (8003544 <HAL_SPI_MspInit+0x154>)
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80034b0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b6:	2302      	movs	r3, #2
 80034b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034be:	2303      	movs	r3, #3
 80034c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80034c2:	2305      	movs	r3, #5
 80034c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ca:	4619      	mov	r1, r3
 80034cc:	4820      	ldr	r0, [pc, #128]	; (8003550 <HAL_SPI_MspInit+0x160>)
 80034ce:	f009 fd87 	bl	800cfe0 <HAL_GPIO_Init>
}
 80034d2:	e031      	b.n	8003538 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI5)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a1e      	ldr	r2, [pc, #120]	; (8003554 <HAL_SPI_MspInit+0x164>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d12c      	bne.n	8003538 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80034de:	2300      	movs	r3, #0
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	4b18      	ldr	r3, [pc, #96]	; (8003544 <HAL_SPI_MspInit+0x154>)
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	4a17      	ldr	r2, [pc, #92]	; (8003544 <HAL_SPI_MspInit+0x154>)
 80034e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034ec:	6453      	str	r3, [r2, #68]	; 0x44
 80034ee:	4b15      	ldr	r3, [pc, #84]	; (8003544 <HAL_SPI_MspInit+0x154>)
 80034f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034f6:	613b      	str	r3, [r7, #16]
 80034f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	4b11      	ldr	r3, [pc, #68]	; (8003544 <HAL_SPI_MspInit+0x154>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	4a10      	ldr	r2, [pc, #64]	; (8003544 <HAL_SPI_MspInit+0x154>)
 8003504:	f043 0320 	orr.w	r3, r3, #32
 8003508:	6313      	str	r3, [r2, #48]	; 0x30
 800350a:	4b0e      	ldr	r3, [pc, #56]	; (8003544 <HAL_SPI_MspInit+0x154>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003516:	f44f 7360 	mov.w	r3, #896	; 0x380
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351c:	2302      	movs	r3, #2
 800351e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003520:	2301      	movs	r3, #1
 8003522:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003524:	2303      	movs	r3, #3
 8003526:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003528:	2305      	movs	r3, #5
 800352a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800352c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003530:	4619      	mov	r1, r3
 8003532:	4809      	ldr	r0, [pc, #36]	; (8003558 <HAL_SPI_MspInit+0x168>)
 8003534:	f009 fd54 	bl	800cfe0 <HAL_GPIO_Init>
}
 8003538:	bf00      	nop
 800353a:	3738      	adds	r7, #56	; 0x38
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40003800 	.word	0x40003800
 8003544:	40023800 	.word	0x40023800
 8003548:	40020400 	.word	0x40020400
 800354c:	40013400 	.word	0x40013400
 8003550:	40021000 	.word	0x40021000
 8003554:	40015000 	.word	0x40015000
 8003558:	40021400 	.word	0x40021400

0800355c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	607b      	str	r3, [r7, #4]
 8003566:	4b1b      	ldr	r3, [pc, #108]	; (80035d4 <HAL_MspInit+0x78>)
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	4a1a      	ldr	r2, [pc, #104]	; (80035d4 <HAL_MspInit+0x78>)
 800356c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003570:	6453      	str	r3, [r2, #68]	; 0x44
 8003572:	4b18      	ldr	r3, [pc, #96]	; (80035d4 <HAL_MspInit+0x78>)
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800357a:	607b      	str	r3, [r7, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	603b      	str	r3, [r7, #0]
 8003582:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <HAL_MspInit+0x78>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	4a13      	ldr	r2, [pc, #76]	; (80035d4 <HAL_MspInit+0x78>)
 8003588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800358c:	6413      	str	r3, [r2, #64]	; 0x40
 800358e:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <HAL_MspInit+0x78>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 5, 0);
 800359a:	2200      	movs	r2, #0
 800359c:	2105      	movs	r1, #5
 800359e:	f06f 0009 	mvn.w	r0, #9
 80035a2:	f009 fce5 	bl	800cf70 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 15, 0);
 80035a6:	2200      	movs	r2, #0
 80035a8:	210f      	movs	r1, #15
 80035aa:	f06f 0004 	mvn.w	r0, #4
 80035ae:	f009 fcdf 	bl	800cf70 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 80035b2:	2200      	movs	r2, #0
 80035b4:	2105      	movs	r1, #5
 80035b6:	f06f 0003 	mvn.w	r0, #3
 80035ba:	f009 fcd9 	bl	800cf70 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035be:	2200      	movs	r2, #0
 80035c0:	210f      	movs	r1, #15
 80035c2:	f06f 0001 	mvn.w	r0, #1
 80035c6:	f009 fcd3 	bl	800cf70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035ca:	bf00      	nop
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40023800 	.word	0x40023800

080035d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08c      	sub	sp, #48	; 0x30
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80035e8:	2200      	movs	r2, #0
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	2036      	movs	r0, #54	; 0x36
 80035ee:	f009 fcbf 	bl	800cf70 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80035f2:	2036      	movs	r0, #54	; 0x36
 80035f4:	f009 fcd8 	bl	800cfa8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80035f8:	2300      	movs	r3, #0
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	4b1f      	ldr	r3, [pc, #124]	; (800367c <HAL_InitTick+0xa4>)
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	4a1e      	ldr	r2, [pc, #120]	; (800367c <HAL_InitTick+0xa4>)
 8003602:	f043 0310 	orr.w	r3, r3, #16
 8003606:	6413      	str	r3, [r2, #64]	; 0x40
 8003608:	4b1c      	ldr	r3, [pc, #112]	; (800367c <HAL_InitTick+0xa4>)
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f003 0310 	and.w	r3, r3, #16
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003614:	f107 0210 	add.w	r2, r7, #16
 8003618:	f107 0314 	add.w	r3, r7, #20
 800361c:	4611      	mov	r1, r2
 800361e:	4618      	mov	r0, r3
 8003620:	f00b fc96 	bl	800ef50 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003624:	f00b fc6c 	bl	800ef00 <HAL_RCC_GetPCLK1Freq>
 8003628:	4603      	mov	r3, r0
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800362e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003630:	4a13      	ldr	r2, [pc, #76]	; (8003680 <HAL_InitTick+0xa8>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	0c9b      	lsrs	r3, r3, #18
 8003638:	3b01      	subs	r3, #1
 800363a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800363c:	4b11      	ldr	r3, [pc, #68]	; (8003684 <HAL_InitTick+0xac>)
 800363e:	4a12      	ldr	r2, [pc, #72]	; (8003688 <HAL_InitTick+0xb0>)
 8003640:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003642:	4b10      	ldr	r3, [pc, #64]	; (8003684 <HAL_InitTick+0xac>)
 8003644:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003648:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800364a:	4a0e      	ldr	r2, [pc, #56]	; (8003684 <HAL_InitTick+0xac>)
 800364c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003650:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <HAL_InitTick+0xac>)
 8003652:	2200      	movs	r2, #0
 8003654:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003656:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <HAL_InitTick+0xac>)
 8003658:	2200      	movs	r2, #0
 800365a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800365c:	4809      	ldr	r0, [pc, #36]	; (8003684 <HAL_InitTick+0xac>)
 800365e:	f00d fa2d 	bl	8010abc <HAL_TIM_Base_Init>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d104      	bne.n	8003672 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003668:	4806      	ldr	r0, [pc, #24]	; (8003684 <HAL_InitTick+0xac>)
 800366a:	f00d fa77 	bl	8010b5c <HAL_TIM_Base_Start_IT>
 800366e:	4603      	mov	r3, r0
 8003670:	e000      	b.n	8003674 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
}
 8003674:	4618      	mov	r0, r3
 8003676:	3730      	adds	r7, #48	; 0x30
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40023800 	.word	0x40023800
 8003680:	431bde83 	.word	0x431bde83
 8003684:	200088b4 	.word	0x200088b4
 8003688:	40001000 	.word	0x40001000

0800368c <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM6 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  /* Disable TIM6 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim6, TIM_IT_UPDATE);
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <HAL_SuspendTick+0x20>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	4b05      	ldr	r3, [pc, #20]	; (80036ac <HAL_SuspendTick+0x20>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0201 	bic.w	r2, r2, #1
 800369e:	60da      	str	r2, [r3, #12]
}
 80036a0:	bf00      	nop
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	200088b4 	.word	0x200088b4

080036b0 <__NVIC_SystemReset>:
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80036b4:	f3bf 8f4f 	dsb	sy
}
 80036b8:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80036ba:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <__NVIC_SystemReset+0x24>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80036c2:	4904      	ldr	r1, [pc, #16]	; (80036d4 <__NVIC_SystemReset+0x24>)
 80036c4:	4b04      	ldr	r3, [pc, #16]	; (80036d8 <__NVIC_SystemReset+0x28>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80036ca:	f3bf 8f4f 	dsb	sy
}
 80036ce:	bf00      	nop
    __NOP();
 80036d0:	bf00      	nop
 80036d2:	e7fd      	b.n	80036d0 <__NVIC_SystemReset+0x20>
 80036d4:	e000ed00 	.word	0xe000ed00
 80036d8:	05fa0004 	.word	0x05fa0004

080036dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036e0:	e7fe      	b.n	80036e0 <NMI_Handler+0x4>
	...

080036e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	println((char*) "Hardfault: Going into standByMode and waiting for IWDG reset");
 80036e8:	4804      	ldr	r0, [pc, #16]	; (80036fc <HardFault_Handler+0x18>)
 80036ea:	f7fd fcef 	bl	80010cc <println>
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80036ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 80036f2:	f00a ff2d 	bl	800e550 <HAL_PWR_EnableWakeUpPin>
	HAL_PWR_EnterSTANDBYMode();
 80036f6:	f00a ff51 	bl	800e59c <HAL_PWR_EnterSTANDBYMode>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036fa:	e7fe      	b.n	80036fa <HardFault_Handler+0x16>
 80036fc:	08020d7c 	.word	0x08020d7c

08003700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003704:	e7fe      	b.n	8003704 <MemManage_Handler+0x4>

08003706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003706:	b480      	push	{r7}
 8003708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800370a:	e7fe      	b.n	800370a <BusFault_Handler+0x4>

0800370c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003710:	e7fe      	b.n	8003710 <UsageFault_Handler+0x4>

08003712 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003712:	b480      	push	{r7}
 8003714:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003716:	bf00      	nop
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003724:	4802      	ldr	r0, [pc, #8]	; (8003730 <RTC_WKUP_IRQHandler+0x10>)
 8003726:	f00c fbcb 	bl	800fec0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800372a:	bf00      	nop
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	2000878c 	.word	0x2000878c

08003734 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003738:	2001      	movs	r0, #1
 800373a:	f009 fe2f 	bl	800d39c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800373e:	bf00      	nop
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003748:	4802      	ldr	r0, [pc, #8]	; (8003754 <TIM6_DAC_IRQHandler+0x10>)
 800374a:	f00d fc09 	bl	8010f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	200088b4 	.word	0x200088b4

08003758 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == IN_Button_Pin){
 8003762:	88fb      	ldrh	r3, [r7, #6]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d102      	bne.n	800376e <HAL_GPIO_EXTI_Callback+0x16>
		//Manual reset from external button
		restart_flag = 1;
 8003768:	4b04      	ldr	r3, [pc, #16]	; (800377c <HAL_GPIO_EXTI_Callback+0x24>)
 800376a:	2201      	movs	r2, #1
 800376c:	701a      	strb	r2, [r3, #0]
	}
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	200003f6 	.word	0x200003f6

08003780 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003784:	4802      	ldr	r0, [pc, #8]	; (8003790 <RTC_Alarm_IRQHandler+0x10>)
 8003786:	f00c f9ad 	bl	800fae4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	2000878c 	.word	0x2000878c

08003794 <HAL_RTC_AlarmAEventCallback>:


void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	println("\r\nAlarmA");
 800379c:	4804      	ldr	r0, [pc, #16]	; (80037b0 <HAL_RTC_AlarmAEventCallback+0x1c>)
 800379e:	f7fd fc95 	bl	80010cc <println>
	flagA = 1;
 80037a2:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <HAL_RTC_AlarmAEventCallback+0x20>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	701a      	strb	r2, [r3, #0]
	return;
 80037a8:	bf00      	nop
}
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	08020dbc 	.word	0x08020dbc
 80037b4:	200003f4 	.word	0x200003f4

080037b8 <HAL_RTCEx_AlarmBEventCallback>:


void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc){
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
	println("\r\nAlarmB");
 80037c0:	4804      	ldr	r0, [pc, #16]	; (80037d4 <HAL_RTCEx_AlarmBEventCallback+0x1c>)
 80037c2:	f7fd fc83 	bl	80010cc <println>
	flagB = 1;
 80037c6:	4b04      	ldr	r3, [pc, #16]	; (80037d8 <HAL_RTCEx_AlarmBEventCallback+0x20>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	701a      	strb	r2, [r3, #0]
	return;
 80037cc:	bf00      	nop
}
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	08020dc8 	.word	0x08020dc8
 80037d8:	200003f5 	.word	0x200003f5

080037dc <HAL_RTCEx_WakeUpTimerEventCallback>:


void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
	return;
 80037e4:	bf00      	nop
}
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <MRT_resetFromStart>:



void MRT_resetFromStart(void){
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0

	//Clear memory
	MRT_clearExternalFlash();
 80037f4:	f000 fbfc 	bl	8003ff0 <MRT_clearExternalFlash>
	MRT_RTC_clearBackupRegs();
 80037f8:	f7ff fcf8 	bl	80031ec <MRT_RTC_clearBackupRegs>

	//Shutdown Iridium
	//TODO should have deninit for every system?
	#if IRIDIUM_
	MRT_Iridium_Deinit();
 80037fc:	f006 fcce 	bl	800a19c <MRT_Iridium_Deinit>
	#endif

	//Reset function
	NVIC_SystemReset();
 8003800:	f7ff ff56 	bl	80036b0 <__NVIC_SystemReset>

08003804 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003808:	4b06      	ldr	r3, [pc, #24]	; (8003824 <SystemInit+0x20>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380e:	4a05      	ldr	r2, [pc, #20]	; (8003824 <SystemInit+0x20>)
 8003810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003818:	bf00      	nop
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	e000ed00 	.word	0xe000ed00

08003828 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08e      	sub	sp, #56	; 0x38
 800382c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800382e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	605a      	str	r2, [r3, #4]
 8003838:	609a      	str	r2, [r3, #8]
 800383a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800383c:	f107 0320 	add.w	r3, r7, #32
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003846:	1d3b      	adds	r3, r7, #4
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	605a      	str	r2, [r3, #4]
 800384e:	609a      	str	r2, [r3, #8]
 8003850:	60da      	str	r2, [r3, #12]
 8003852:	611a      	str	r2, [r3, #16]
 8003854:	615a      	str	r2, [r3, #20]
 8003856:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003858:	4b2d      	ldr	r3, [pc, #180]	; (8003910 <MX_TIM2_Init+0xe8>)
 800385a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800385e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8003860:	4b2b      	ldr	r3, [pc, #172]	; (8003910 <MX_TIM2_Init+0xe8>)
 8003862:	2259      	movs	r2, #89	; 0x59
 8003864:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003866:	4b2a      	ldr	r3, [pc, #168]	; (8003910 <MX_TIM2_Init+0xe8>)
 8003868:	2200      	movs	r2, #0
 800386a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 800386c:	4b28      	ldr	r3, [pc, #160]	; (8003910 <MX_TIM2_Init+0xe8>)
 800386e:	f240 128f 	movw	r2, #399	; 0x18f
 8003872:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003874:	4b26      	ldr	r3, [pc, #152]	; (8003910 <MX_TIM2_Init+0xe8>)
 8003876:	2200      	movs	r2, #0
 8003878:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800387a:	4b25      	ldr	r3, [pc, #148]	; (8003910 <MX_TIM2_Init+0xe8>)
 800387c:	2200      	movs	r2, #0
 800387e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003880:	4823      	ldr	r0, [pc, #140]	; (8003910 <MX_TIM2_Init+0xe8>)
 8003882:	f00d f91b 	bl	8010abc <HAL_TIM_Base_Init>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800388c:	f7ff f992 	bl	8002bb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003894:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003896:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800389a:	4619      	mov	r1, r3
 800389c:	481c      	ldr	r0, [pc, #112]	; (8003910 <MX_TIM2_Init+0xe8>)
 800389e:	f00d fd29 	bl	80112f4 <HAL_TIM_ConfigClockSource>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80038a8:	f7ff f984 	bl	8002bb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80038ac:	4818      	ldr	r0, [pc, #96]	; (8003910 <MX_TIM2_Init+0xe8>)
 80038ae:	f00d f9c5 	bl	8010c3c <HAL_TIM_PWM_Init>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80038b8:	f7ff f97c 	bl	8002bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80038bc:	2320      	movs	r3, #32
 80038be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038c0:	2300      	movs	r3, #0
 80038c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038c4:	f107 0320 	add.w	r3, r7, #32
 80038c8:	4619      	mov	r1, r3
 80038ca:	4811      	ldr	r0, [pc, #68]	; (8003910 <MX_TIM2_Init+0xe8>)
 80038cc:	f00e f912 	bl	8011af4 <HAL_TIMEx_MasterConfigSynchronization>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80038d6:	f7ff f96d 	bl	8002bb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038da:	2360      	movs	r3, #96	; 0x60
 80038dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80038de:	2364      	movs	r3, #100	; 0x64
 80038e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038e2:	2300      	movs	r3, #0
 80038e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80038ea:	1d3b      	adds	r3, r7, #4
 80038ec:	2208      	movs	r2, #8
 80038ee:	4619      	mov	r1, r3
 80038f0:	4807      	ldr	r0, [pc, #28]	; (8003910 <MX_TIM2_Init+0xe8>)
 80038f2:	f00d fc3d 	bl	8011170 <HAL_TIM_PWM_ConfigChannel>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80038fc:	f7ff f95a 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003900:	4803      	ldr	r0, [pc, #12]	; (8003910 <MX_TIM2_Init+0xe8>)
 8003902:	f000 f827 	bl	8003954 <HAL_TIM_MspPostInit>

}
 8003906:	bf00      	nop
 8003908:	3738      	adds	r7, #56	; 0x38
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	200088fc 	.word	0x200088fc

08003914 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003924:	d10d      	bne.n	8003942 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	4b09      	ldr	r3, [pc, #36]	; (8003950 <HAL_TIM_Base_MspInit+0x3c>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	4a08      	ldr	r2, [pc, #32]	; (8003950 <HAL_TIM_Base_MspInit+0x3c>)
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	6413      	str	r3, [r2, #64]	; 0x40
 8003936:	4b06      	ldr	r3, [pc, #24]	; (8003950 <HAL_TIM_Base_MspInit+0x3c>)
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003942:	bf00      	nop
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40023800 	.word	0x40023800

08003954 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b088      	sub	sp, #32
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800395c:	f107 030c 	add.w	r3, r7, #12
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	605a      	str	r2, [r3, #4]
 8003966:	609a      	str	r2, [r3, #8]
 8003968:	60da      	str	r2, [r3, #12]
 800396a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003974:	d11d      	bne.n	80039b2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	60bb      	str	r3, [r7, #8]
 800397a:	4b10      	ldr	r3, [pc, #64]	; (80039bc <HAL_TIM_MspPostInit+0x68>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	4a0f      	ldr	r2, [pc, #60]	; (80039bc <HAL_TIM_MspPostInit+0x68>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	6313      	str	r3, [r2, #48]	; 0x30
 8003986:	4b0d      	ldr	r3, [pc, #52]	; (80039bc <HAL_TIM_MspPostInit+0x68>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	60bb      	str	r3, [r7, #8]
 8003990:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8003992:	2304      	movs	r3, #4
 8003994:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003996:	2302      	movs	r3, #2
 8003998:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399e:	2300      	movs	r3, #0
 80039a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80039a2:	2301      	movs	r3, #1
 80039a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80039a6:	f107 030c 	add.w	r3, r7, #12
 80039aa:	4619      	mov	r1, r3
 80039ac:	4804      	ldr	r0, [pc, #16]	; (80039c0 <HAL_TIM_MspPostInit+0x6c>)
 80039ae:	f009 fb17 	bl	800cfe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80039b2:	bf00      	nop
 80039b4:	3720      	adds	r7, #32
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40023800 	.word	0x40023800
 80039c0:	40020000 	.word	0x40020000

080039c4 <MX_UART8_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART8 init function */
void MX_UART8_Init(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80039c8:	4b11      	ldr	r3, [pc, #68]	; (8003a10 <MX_UART8_Init+0x4c>)
 80039ca:	4a12      	ldr	r2, [pc, #72]	; (8003a14 <MX_UART8_Init+0x50>)
 80039cc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80039ce:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <MX_UART8_Init+0x4c>)
 80039d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80039d4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80039d6:	4b0e      	ldr	r3, [pc, #56]	; (8003a10 <MX_UART8_Init+0x4c>)
 80039d8:	2200      	movs	r2, #0
 80039da:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80039dc:	4b0c      	ldr	r3, [pc, #48]	; (8003a10 <MX_UART8_Init+0x4c>)
 80039de:	2200      	movs	r2, #0
 80039e0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80039e2:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <MX_UART8_Init+0x4c>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80039e8:	4b09      	ldr	r3, [pc, #36]	; (8003a10 <MX_UART8_Init+0x4c>)
 80039ea:	220c      	movs	r2, #12
 80039ec:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039ee:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <MX_UART8_Init+0x4c>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80039f4:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <MX_UART8_Init+0x4c>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80039fa:	4805      	ldr	r0, [pc, #20]	; (8003a10 <MX_UART8_Init+0x4c>)
 80039fc:	f00e f90a 	bl	8011c14 <HAL_UART_Init>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8003a06:	f7ff f8d5 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8003a0a:	bf00      	nop
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20008988 	.word	0x20008988
 8003a14:	40007c00 	.word	0x40007c00

08003a18 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003a1c:	4b11      	ldr	r3, [pc, #68]	; (8003a64 <MX_USART3_UART_Init+0x4c>)
 8003a1e:	4a12      	ldr	r2, [pc, #72]	; (8003a68 <MX_USART3_UART_Init+0x50>)
 8003a20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003a22:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <MX_USART3_UART_Init+0x4c>)
 8003a24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003a28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003a2a:	4b0e      	ldr	r3, [pc, #56]	; (8003a64 <MX_USART3_UART_Init+0x4c>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003a30:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <MX_USART3_UART_Init+0x4c>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003a36:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <MX_USART3_UART_Init+0x4c>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003a3c:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <MX_USART3_UART_Init+0x4c>)
 8003a3e:	220c      	movs	r2, #12
 8003a40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a42:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <MX_USART3_UART_Init+0x4c>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a48:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <MX_USART3_UART_Init+0x4c>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003a4e:	4805      	ldr	r0, [pc, #20]	; (8003a64 <MX_USART3_UART_Init+0x4c>)
 8003a50:	f00e f8e0 	bl	8011c14 <HAL_UART_Init>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003a5a:	f7ff f8ab 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003a5e:	bf00      	nop
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	20008944 	.word	0x20008944
 8003a68:	40004800 	.word	0x40004800

08003a6c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003a70:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <MX_USART6_UART_Init+0x4c>)
 8003a72:	4a12      	ldr	r2, [pc, #72]	; (8003abc <MX_USART6_UART_Init+0x50>)
 8003a74:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003a76:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <MX_USART6_UART_Init+0x4c>)
 8003a78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003a7c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003a7e:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <MX_USART6_UART_Init+0x4c>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003a84:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <MX_USART6_UART_Init+0x4c>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003a8a:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <MX_USART6_UART_Init+0x4c>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003a90:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <MX_USART6_UART_Init+0x4c>)
 8003a92:	220c      	movs	r2, #12
 8003a94:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a96:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <MX_USART6_UART_Init+0x4c>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a9c:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <MX_USART6_UART_Init+0x4c>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003aa2:	4805      	ldr	r0, [pc, #20]	; (8003ab8 <MX_USART6_UART_Init+0x4c>)
 8003aa4:	f00e f8b6 	bl	8011c14 <HAL_UART_Init>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003aae:	f7ff f881 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	200089cc 	.word	0x200089cc
 8003abc:	40011400 	.word	0x40011400

08003ac0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08e      	sub	sp, #56	; 0x38
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	605a      	str	r2, [r3, #4]
 8003ad2:	609a      	str	r2, [r3, #8]
 8003ad4:	60da      	str	r2, [r3, #12]
 8003ad6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a4b      	ldr	r2, [pc, #300]	; (8003c0c <HAL_UART_MspInit+0x14c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d12c      	bne.n	8003b3c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	623b      	str	r3, [r7, #32]
 8003ae6:	4b4a      	ldr	r3, [pc, #296]	; (8003c10 <HAL_UART_MspInit+0x150>)
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	4a49      	ldr	r2, [pc, #292]	; (8003c10 <HAL_UART_MspInit+0x150>)
 8003aec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003af0:	6413      	str	r3, [r2, #64]	; 0x40
 8003af2:	4b47      	ldr	r3, [pc, #284]	; (8003c10 <HAL_UART_MspInit+0x150>)
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003afa:	623b      	str	r3, [r7, #32]
 8003afc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
 8003b02:	4b43      	ldr	r3, [pc, #268]	; (8003c10 <HAL_UART_MspInit+0x150>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	4a42      	ldr	r2, [pc, #264]	; (8003c10 <HAL_UART_MspInit+0x150>)
 8003b08:	f043 0310 	orr.w	r3, r3, #16
 8003b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b0e:	4b40      	ldr	r3, [pc, #256]	; (8003c10 <HAL_UART_MspInit+0x150>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	61fb      	str	r3, [r7, #28]
 8003b18:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b1e:	2302      	movs	r3, #2
 8003b20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b26:	2303      	movs	r3, #3
 8003b28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8003b2a:	2308      	movs	r3, #8
 8003b2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b32:	4619      	mov	r1, r3
 8003b34:	4837      	ldr	r0, [pc, #220]	; (8003c14 <HAL_UART_MspInit+0x154>)
 8003b36:	f009 fa53 	bl	800cfe0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003b3a:	e063      	b.n	8003c04 <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART3)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a35      	ldr	r2, [pc, #212]	; (8003c18 <HAL_UART_MspInit+0x158>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d12d      	bne.n	8003ba2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b46:	2300      	movs	r3, #0
 8003b48:	61bb      	str	r3, [r7, #24]
 8003b4a:	4b31      	ldr	r3, [pc, #196]	; (8003c10 <HAL_UART_MspInit+0x150>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	4a30      	ldr	r2, [pc, #192]	; (8003c10 <HAL_UART_MspInit+0x150>)
 8003b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b54:	6413      	str	r3, [r2, #64]	; 0x40
 8003b56:	4b2e      	ldr	r3, [pc, #184]	; (8003c10 <HAL_UART_MspInit+0x150>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b5e:	61bb      	str	r3, [r7, #24]
 8003b60:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]
 8003b66:	4b2a      	ldr	r3, [pc, #168]	; (8003c10 <HAL_UART_MspInit+0x150>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	4a29      	ldr	r2, [pc, #164]	; (8003c10 <HAL_UART_MspInit+0x150>)
 8003b6c:	f043 0308 	orr.w	r3, r3, #8
 8003b70:	6313      	str	r3, [r2, #48]	; 0x30
 8003b72:	4b27      	ldr	r3, [pc, #156]	; (8003c10 <HAL_UART_MspInit+0x150>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8003b7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b84:	2302      	movs	r3, #2
 8003b86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003b90:	2307      	movs	r3, #7
 8003b92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4820      	ldr	r0, [pc, #128]	; (8003c1c <HAL_UART_MspInit+0x15c>)
 8003b9c:	f009 fa20 	bl	800cfe0 <HAL_GPIO_Init>
}
 8003ba0:	e030      	b.n	8003c04 <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART6)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a1e      	ldr	r2, [pc, #120]	; (8003c20 <HAL_UART_MspInit+0x160>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d12b      	bne.n	8003c04 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003bac:	2300      	movs	r3, #0
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	4b17      	ldr	r3, [pc, #92]	; (8003c10 <HAL_UART_MspInit+0x150>)
 8003bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb4:	4a16      	ldr	r2, [pc, #88]	; (8003c10 <HAL_UART_MspInit+0x150>)
 8003bb6:	f043 0320 	orr.w	r3, r3, #32
 8003bba:	6453      	str	r3, [r2, #68]	; 0x44
 8003bbc:	4b14      	ldr	r3, [pc, #80]	; (8003c10 <HAL_UART_MspInit+0x150>)
 8003bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc0:	f003 0320 	and.w	r3, r3, #32
 8003bc4:	613b      	str	r3, [r7, #16]
 8003bc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	4b10      	ldr	r3, [pc, #64]	; (8003c10 <HAL_UART_MspInit+0x150>)
 8003bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd0:	4a0f      	ldr	r2, [pc, #60]	; (8003c10 <HAL_UART_MspInit+0x150>)
 8003bd2:	f043 0304 	orr.w	r3, r3, #4
 8003bd6:	6313      	str	r3, [r2, #48]	; 0x30
 8003bd8:	4b0d      	ldr	r3, [pc, #52]	; (8003c10 <HAL_UART_MspInit+0x150>)
 8003bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8003be4:	23c0      	movs	r3, #192	; 0xc0
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be8:	2302      	movs	r3, #2
 8003bea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bec:	2300      	movs	r3, #0
 8003bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003bf4:	2308      	movs	r3, #8
 8003bf6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4809      	ldr	r0, [pc, #36]	; (8003c24 <HAL_UART_MspInit+0x164>)
 8003c00:	f009 f9ee 	bl	800cfe0 <HAL_GPIO_Init>
}
 8003c04:	bf00      	nop
 8003c06:	3738      	adds	r7, #56	; 0x38
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40007c00 	.word	0x40007c00
 8003c10:	40023800 	.word	0x40023800
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40004800 	.word	0x40004800
 8003c1c:	40020c00 	.word	0x40020c00
 8003c20:	40011400 	.word	0x40011400
 8003c24:	40020800 	.word	0x40020800

08003c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c2e:	e003      	b.n	8003c38 <LoopCopyDataInit>

08003c30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003c30:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003c32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003c34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003c36:	3104      	adds	r1, #4

08003c38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003c38:	480b      	ldr	r0, [pc, #44]	; (8003c68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003c3a:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003c3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003c3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003c40:	d3f6      	bcc.n	8003c30 <CopyDataInit>
  ldr  r2, =_sbss
 8003c42:	4a0b      	ldr	r2, [pc, #44]	; (8003c70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003c44:	e002      	b.n	8003c4c <LoopFillZerobss>

08003c46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003c46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003c48:	f842 3b04 	str.w	r3, [r2], #4

08003c4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c4c:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003c4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c50:	d3f9      	bcc.n	8003c46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c52:	f7ff fdd7 	bl	8003804 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c56:	f016 fdb9 	bl	801a7cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c5a:	f7fe fed7 	bl	8002a0c <main>
  bx  lr    
 8003c5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003c60:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003c64:	08023224 	.word	0x08023224
  ldr  r0, =_sdata
 8003c68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c6c:	20000334 	.word	0x20000334
  ldr  r2, =_sbss
 8003c70:	20000334 	.word	0x20000334
  ldr  r3, = _ebss
 8003c74:	20009d1c 	.word	0x20009d1c

08003c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c78:	e7fe      	b.n	8003c78 <ADC_IRQHandler>
 8003c7a:	0000      	movs	r0, r0
 8003c7c:	0000      	movs	r0, r0
	...

08003c80 <MRT_getAltitude>:

/*
 * Gets the altitude using temperature, pressure and sea-level pressure
 *https://www.mide.com/air-pressure-at-altitude-calculator
 */
float MRT_getAltitude(float pressure){
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	ed87 0a01 	vstr	s0, [r7, #4]
	return BASE_HEIGHT+(SEA_LEVEL_TEMPERATURE/-0.0065)*(pow(pressure/SEA_LEVEL_PRESSURE,0.190263236)-1); //(-R*-0.0065/(go*M)) = 0.190263236
 8003c8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c8e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003d10 <MRT_getAltitude+0x90>
 8003c92:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003c96:	ee16 0a90 	vmov	r0, s13
 8003c9a:	f7fc fc75 	bl	8000588 <__aeabi_f2d>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8003d00 <MRT_getAltitude+0x80>
 8003ca6:	ec43 2b10 	vmov	d0, r2, r3
 8003caa:	f015 fccf 	bl	801964c <pow>
 8003cae:	ec51 0b10 	vmov	r0, r1, d0
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	4b17      	ldr	r3, [pc, #92]	; (8003d14 <MRT_getAltitude+0x94>)
 8003cb8:	f7fc fb06 	bl	80002c8 <__aeabi_dsub>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	a310      	add	r3, pc, #64	; (adr r3, 8003d08 <MRT_getAltitude+0x88>)
 8003cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cca:	f7fc fcb5 	bl	8000638 <__aeabi_dmul>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	4610      	mov	r0, r2
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <MRT_getAltitude+0x98>)
 8003cdc:	f7fc faf6 	bl	80002cc <__adddf3>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	f7fc ff9e 	bl	8000c28 <__aeabi_d2f>
 8003cec:	4603      	mov	r3, r0
 8003cee:	ee07 3a90 	vmov	s15, r3
}
 8003cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	f3af 8000 	nop.w
 8003d00:	b4202506 	.word	0xb4202506
 8003d04:	3fc85a8b 	.word	0x3fc85a8b
 8003d08:	76276276 	.word	0x76276276
 8003d0c:	c0e481c2 	.word	0xc0e481c2
 8003d10:	447d8000 	.word	0x447d8000
 8003d14:	3ff00000 	.word	0x3ff00000
 8003d18:	40590000 	.word	0x40590000

08003d1c <MRT_getContinuity>:
 * Checks the continuity of the gates
 *
 * returns a binary number in its decimal form. Each bit is the state of a gate.
 * bit3 bit2 bit1 bit0 = drogue1 drogue2 prop1 prop2
 */
uint8_t MRT_getContinuity(void){
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
	uint8_t drogue1 = HAL_GPIO_ReadPin(IN_EJ_Drogue_Cont_GPIO_Port, IN_EJ_Drogue_Cont_Pin);
 8003d22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d26:	4815      	ldr	r0, [pc, #84]	; (8003d7c <MRT_getContinuity+0x60>)
 8003d28:	f009 fb06 	bl	800d338 <HAL_GPIO_ReadPin>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	71fb      	strb	r3, [r7, #7]
	uint8_t drogue2 = HAL_GPIO_ReadPin(IN_EJ_Main_Cont_GPIO_Port, IN_EJ_Main_Cont_Pin);
 8003d30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d34:	4811      	ldr	r0, [pc, #68]	; (8003d7c <MRT_getContinuity+0x60>)
 8003d36:	f009 faff 	bl	800d338 <HAL_GPIO_ReadPin>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	71bb      	strb	r3, [r7, #6]
	uint8_t prop1 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_1_GPIO_Port, IN_PyroValve_Cont_1_Pin);
 8003d3e:	2101      	movs	r1, #1
 8003d40:	480e      	ldr	r0, [pc, #56]	; (8003d7c <MRT_getContinuity+0x60>)
 8003d42:	f009 faf9 	bl	800d338 <HAL_GPIO_ReadPin>
 8003d46:	4603      	mov	r3, r0
 8003d48:	717b      	strb	r3, [r7, #5]
	uint8_t prop2 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_2_GPIO_Port, IN_PyroValve_Cont_2_Pin);
 8003d4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d4e:	480c      	ldr	r0, [pc, #48]	; (8003d80 <MRT_getContinuity+0x64>)
 8003d50:	f009 faf2 	bl	800d338 <HAL_GPIO_ReadPin>
 8003d54:	4603      	mov	r3, r0
 8003d56:	713b      	strb	r3, [r7, #4]
	uint8_t continuity = 8*drogue1 + 4*drogue2 + 2*prop1 + prop2;
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	005a      	lsls	r2, r3, #1
 8003d5c:	79bb      	ldrb	r3, [r7, #6]
 8003d5e:	4413      	add	r3, r2
 8003d60:	005a      	lsls	r2, r3, #1
 8003d62:	797b      	ldrb	r3, [r7, #5]
 8003d64:	4413      	add	r3, r2
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	793b      	ldrb	r3, [r7, #4]
 8003d6e:	4413      	add	r3, r2
 8003d70:	70fb      	strb	r3, [r7, #3]
	return continuity;
 8003d72:	78fb      	ldrb	r3, [r7, #3]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40021800 	.word	0x40021800
 8003d80:	40021400 	.word	0x40021400

08003d84 <MRT_formatAvionics>:


// formats avionics telemetry string using sprintf
void MRT_formatAvionics(void) {
 8003d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d88:	b0a3      	sub	sp, #140	; 0x8c
 8003d8a:	af16      	add	r7, sp, #88	; 0x58
	memset(msg_buffer_av, 0, 200);
 8003d8c:	22c8      	movs	r2, #200	; 0xc8
 8003d8e:	2100      	movs	r1, #0
 8003d90:	483c      	ldr	r0, [pc, #240]	; (8003e84 <MRT_formatAvionics+0x100>)
 8003d92:	f016 fe99 	bl	801aac8 <memset>
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 8003d96:	4b3c      	ldr	r3, [pc, #240]	; (8003e88 <MRT_formatAvionics+0x104>)
 8003d98:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fc fbf4 	bl	8000588 <__aeabi_f2d>
 8003da0:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 8003da4:	4b38      	ldr	r3, [pc, #224]	; (8003e88 <MRT_formatAvionics+0x104>)
 8003da6:	685b      	ldr	r3, [r3, #4]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7fc fbed 	bl	8000588 <__aeabi_f2d>
 8003dae:	e9c7 0108 	strd	r0, r1, [r7, #32]
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 8003db2:	4b35      	ldr	r3, [pc, #212]	; (8003e88 <MRT_formatAvionics+0x104>)
 8003db4:	689b      	ldr	r3, [r3, #8]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fc fbe6 	bl	8000588 <__aeabi_f2d>
 8003dbc:	e9c7 0106 	strd	r0, r1, [r7, #24]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 8003dc0:	4b31      	ldr	r3, [pc, #196]	; (8003e88 <MRT_formatAvionics+0x104>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fc fbdf 	bl	8000588 <__aeabi_f2d>
 8003dca:	e9c7 0104 	strd	r0, r1, [r7, #16]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 8003dce:	4b2e      	ldr	r3, [pc, #184]	; (8003e88 <MRT_formatAvionics+0x104>)
 8003dd0:	691b      	ldr	r3, [r3, #16]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fc fbd8 	bl	8000588 <__aeabi_f2d>
 8003dd8:	e9c7 0102 	strd	r0, r1, [r7, #8]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 8003ddc:	4b2a      	ldr	r3, [pc, #168]	; (8003e88 <MRT_formatAvionics+0x104>)
 8003dde:	695b      	ldr	r3, [r3, #20]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7fc fbd1 	bl	8000588 <__aeabi_f2d>
 8003de6:	e9c7 0100 	strd	r0, r1, [r7]
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 8003dea:	4b28      	ldr	r3, [pc, #160]	; (8003e8c <MRT_formatAvionics+0x108>)
 8003dec:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fc fbca 	bl	8000588 <__aeabi_f2d>
 8003df4:	4682      	mov	sl, r0
 8003df6:	468b      	mov	fp, r1
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 8003df8:	4b25      	ldr	r3, [pc, #148]	; (8003e90 <MRT_formatAvionics+0x10c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fc fbc3 	bl	8000588 <__aeabi_f2d>
 8003e02:	4680      	mov	r8, r0
 8003e04:	4689      	mov	r9, r1
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 8003e06:	4b22      	ldr	r3, [pc, #136]	; (8003e90 <MRT_formatAvionics+0x10c>)
 8003e08:	685b      	ldr	r3, [r3, #4]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fc fbbc 	bl	8000588 <__aeabi_f2d>
 8003e10:	4604      	mov	r4, r0
 8003e12:	460d      	mov	r5, r1
 8003e14:	4b1f      	ldr	r3, [pc, #124]	; (8003e94 <MRT_formatAvionics+0x110>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	461e      	mov	r6, r3
 8003e1a:	4b1f      	ldr	r3, [pc, #124]	; (8003e98 <MRT_formatAvionics+0x114>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	4b1e      	ldr	r3, [pc, #120]	; (8003e9c <MRT_formatAvionics+0x118>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b1e      	ldr	r3, [pc, #120]	; (8003ea0 <MRT_formatAvionics+0x11c>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4b1e      	ldr	r3, [pc, #120]	; (8003ea4 <MRT_formatAvionics+0x120>)
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	9314      	str	r3, [sp, #80]	; 0x50
 8003e30:	9113      	str	r1, [sp, #76]	; 0x4c
 8003e32:	9212      	str	r2, [sp, #72]	; 0x48
 8003e34:	9011      	str	r0, [sp, #68]	; 0x44
 8003e36:	9610      	str	r6, [sp, #64]	; 0x40
 8003e38:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8003e3c:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8003e40:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8003e44:	ed97 7b00 	vldr	d7, [r7]
 8003e48:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003e4c:	ed97 7b02 	vldr	d7, [r7, #8]
 8003e50:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003e54:	ed97 7b04 	vldr	d7, [r7, #16]
 8003e58:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003e5c:	ed97 7b06 	vldr	d7, [r7, #24]
 8003e60:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003e64:	ed97 7b08 	vldr	d7, [r7, #32]
 8003e68:	ed8d 7b00 	vstr	d7, [sp]
 8003e6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e70:	490d      	ldr	r1, [pc, #52]	; (8003ea8 <MRT_formatAvionics+0x124>)
 8003e72:	4804      	ldr	r0, [pc, #16]	; (8003e84 <MRT_formatAvionics+0x100>)
 8003e74:	f018 f924 	bl	801c0c0 <siprintf>
		prev_min, prev_sec, prev_subsec,
		gates_continuity,	ejection_stage_flag);
}
 8003e78:	bf00      	nop
 8003e7a:	3734      	adds	r7, #52	; 0x34
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e82:	bf00      	nop
 8003e84:	20008a10 	.word	0x20008a10
 8003e88:	2000054c 	.word	0x2000054c
 8003e8c:	20000578 	.word	0x20000578
 8003e90:	2000058c 	.word	0x2000058c
 8003e94:	2000041b 	.word	0x2000041b
 8003e98:	2000041c 	.word	0x2000041c
 8003e9c:	20000420 	.word	0x20000420
 8003ea0:	200003f7 	.word	0x200003f7
 8003ea4:	20000419 	.word	0x20000419
 8003ea8:	08020dd4 	.word	0x08020dd4

08003eac <MRT_external_flash_Init>:


//**************************************************//
//FUNCTIONS

void MRT_external_flash_Init(void){
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0

	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	607b      	str	r3, [r7, #4]
 8003eb6:	e007      	b.n	8003ec8 <MRT_external_flash_Init+0x1c>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 8003eb8:	4a13      	ldr	r2, [pc, #76]	; (8003f08 <MRT_external_flash_Init+0x5c>)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	607b      	str	r3, [r7, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	ddf4      	ble.n	8003eb8 <MRT_external_flash_Init+0xc>
	}

	if (!W25qxx_Init()) {
 8003ece:	f000 feb5 	bl	8004c3c <W25qxx_Init>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	f083 0301 	eor.w	r3, r3, #1
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <MRT_external_flash_Init+0x36>
		Error_Handler(); // hangs and blinks LEDF
 8003ede:	f7fe fe69 	bl	8002bb4 <Error_Handler>
	}

	//Retrieve flags
	W25qxx_ReadSector(ext_flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8003ee2:	2305      	movs	r3, #5
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	4808      	ldr	r0, [pc, #32]	; (8003f0c <MRT_external_flash_Init+0x60>)
 8003eea:	f001 fa81 	bl	80053f0 <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003eee:	2304      	movs	r3, #4
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	2102      	movs	r1, #2
 8003ef4:	4806      	ldr	r0, [pc, #24]	; (8003f10 <MRT_external_flash_Init+0x64>)
 8003ef6:	f001 fa7b 	bl	80053f0 <W25qxx_ReadSector>

	//Assign each value read to their variable
	MRT_updateExternalFlashValues();
 8003efa:	f000 f843 	bl	8003f84 <MRT_updateExternalFlashValues>
}
 8003efe:	bf00      	nop
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20008ad8 	.word	0x20008ad8
 8003f0c:	20008ae4 	.word	0x20008ae4
 8003f10:	20008ae0 	.word	0x20008ae0

08003f14 <MRT_updateExternalFlashBuffers>:


void MRT_updateExternalFlashBuffers(void){
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	607b      	str	r3, [r7, #4]
 8003f1e:	e00c      	b.n	8003f3a <MRT_updateExternalFlashBuffers+0x26>
		ext_flash_flags_buffer[i] = *ext_flash_flags[i];
 8003f20:	4a14      	ldr	r2, [pc, #80]	; (8003f74 <MRT_updateExternalFlashBuffers+0x60>)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f28:	7819      	ldrb	r1, [r3, #0]
 8003f2a:	4a13      	ldr	r2, [pc, #76]	; (8003f78 <MRT_updateExternalFlashBuffers+0x64>)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4413      	add	r3, r2
 8003f30:	460a      	mov	r2, r1
 8003f32:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3301      	adds	r3, #1
 8003f38:	607b      	str	r3, [r7, #4]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	ddef      	ble.n	8003f20 <MRT_updateExternalFlashBuffers+0xc>
	}
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003f40:	2300      	movs	r3, #0
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	e00c      	b.n	8003f60 <MRT_updateExternalFlashBuffers+0x4c>
		ext_flash_time_buffer[i] = *ext_flash_time[i];
 8003f46:	4a0d      	ldr	r2, [pc, #52]	; (8003f7c <MRT_updateExternalFlashBuffers+0x68>)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f4e:	7819      	ldrb	r1, [r3, #0]
 8003f50:	4a0b      	ldr	r2, [pc, #44]	; (8003f80 <MRT_updateExternalFlashBuffers+0x6c>)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	4413      	add	r3, r2
 8003f56:	460a      	mov	r2, r1
 8003f58:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	603b      	str	r3, [r7, #0]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	ddef      	ble.n	8003f46 <MRT_updateExternalFlashBuffers+0x32>
	}
}
 8003f66:	bf00      	nop
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	2000008c 	.word	0x2000008c
 8003f78:	20008ae4 	.word	0x20008ae4
 8003f7c:	200000a0 	.word	0x200000a0
 8003f80:	20008ae0 	.word	0x20008ae0

08003f84 <MRT_updateExternalFlashValues>:


void MRT_updateExternalFlashValues(void){
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	607b      	str	r3, [r7, #4]
 8003f8e:	e00b      	b.n	8003fa8 <MRT_updateExternalFlashValues+0x24>
		*ext_flash_flags[i] = ext_flash_flags_buffer[i];
 8003f90:	4a13      	ldr	r2, [pc, #76]	; (8003fe0 <MRT_updateExternalFlashValues+0x5c>)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f98:	4912      	ldr	r1, [pc, #72]	; (8003fe4 <MRT_updateExternalFlashValues+0x60>)
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	440a      	add	r2, r1
 8003f9e:	7812      	ldrb	r2, [r2, #0]
 8003fa0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	607b      	str	r3, [r7, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	ddf0      	ble.n	8003f90 <MRT_updateExternalFlashValues+0xc>
	}
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003fae:	2300      	movs	r3, #0
 8003fb0:	603b      	str	r3, [r7, #0]
 8003fb2:	e00b      	b.n	8003fcc <MRT_updateExternalFlashValues+0x48>
		*ext_flash_time[i] = ext_flash_time_buffer[i];
 8003fb4:	4a0c      	ldr	r2, [pc, #48]	; (8003fe8 <MRT_updateExternalFlashValues+0x64>)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fbc:	490b      	ldr	r1, [pc, #44]	; (8003fec <MRT_updateExternalFlashValues+0x68>)
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	440a      	add	r2, r1
 8003fc2:	7812      	ldrb	r2, [r2, #0]
 8003fc4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	ddf0      	ble.n	8003fb4 <MRT_updateExternalFlashValues+0x30>
	}
}
 8003fd2:	bf00      	nop
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	2000008c 	.word	0x2000008c
 8003fe4:	20008ae4 	.word	0x20008ae4
 8003fe8:	200000a0 	.word	0x200000a0
 8003fec:	20008ae0 	.word	0x20008ae0

08003ff0 <MRT_clearExternalFlash>:


void MRT_clearExternalFlash(void){
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
	//Clear flags
	W25qxx_EraseSector(FLAGS_SECTOR);
 8003ff4:	2001      	movs	r0, #1
 8003ff6:	f000 ff73 	bl	8004ee0 <W25qxx_EraseSector>
	W25qxx_WriteSector(FLAGS_NULL_BUFFER, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8003ffa:	2305      	movs	r3, #5
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	2101      	movs	r1, #1
 8004000:	4806      	ldr	r0, [pc, #24]	; (800401c <MRT_clearExternalFlash+0x2c>)
 8004002:	f001 f8b7 	bl	8005174 <W25qxx_WriteSector>

	//Clear RTC time (last recorded)
	W25qxx_EraseSector(RTC_SECTOR);
 8004006:	2002      	movs	r0, #2
 8004008:	f000 ff6a 	bl	8004ee0 <W25qxx_EraseSector>
	W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 800400c:	2304      	movs	r3, #4
 800400e:	2200      	movs	r2, #0
 8004010:	2102      	movs	r1, #2
 8004012:	4803      	ldr	r0, [pc, #12]	; (8004020 <MRT_clearExternalFlash+0x30>)
 8004014:	f001 f8ae 	bl	8005174 <W25qxx_WriteSector>
}
 8004018:	bf00      	nop
 800401a:	bd80      	pop	{r7, pc}
 800401c:	20008ad8 	.word	0x20008ad8
 8004020:	20000404 	.word	0x20000404

08004024 <MRT_saveFlagValue>:
//Public functions

/*
 * Save a flag value (value updated outside the function)
 */
void MRT_saveFlagValue(rtc_backup_reg state){
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	71fb      	strb	r3, [r7, #7]
	//Write new flags to flash memory
	MRT_updateExternalFlashBuffers();
 800402e:	f7ff ff71 	bl	8003f14 <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(FLAGS_SECTOR);
 8004032:	2001      	movs	r0, #1
 8004034:	f000 ff54 	bl	8004ee0 <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8004038:	2305      	movs	r3, #5
 800403a:	2200      	movs	r2, #0
 800403c:	2101      	movs	r1, #1
 800403e:	4808      	ldr	r0, [pc, #32]	; (8004060 <MRT_saveFlagValue+0x3c>)
 8004040:	f001 f898 	bl	8005174 <W25qxx_WriteSector>

	//Write new flag to RTC backup register
	MRT_RTC_setBackupReg(state, *rtc_bckp_regs[state]);
 8004044:	79fb      	ldrb	r3, [r7, #7]
 8004046:	4a07      	ldr	r2, [pc, #28]	; (8004064 <MRT_saveFlagValue+0x40>)
 8004048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	4611      	mov	r1, r2
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff f90c 	bl	8003270 <MRT_RTC_setBackupReg>
}
 8004058:	bf00      	nop
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	20008ae4 	.word	0x20008ae4
 8004064:	2000003c 	.word	0x2000003c

08004068 <MRT_checkFlagsValues>:


/*
 * Check for memory issues
 */
uint8_t MRT_checkFlagsValues(rtc_backup_reg val_index, uint32_t max_val){
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	6039      	str	r1, [r7, #0]
 8004072:	71fb      	strb	r3, [r7, #7]

	uint8_t ret = true;
 8004074:	2301      	movs	r3, #1
 8004076:	73fb      	strb	r3, [r7, #15]

	//Check for a random value (unsigned int so can't be negative)
	if (*rtc_bckp_regs[val_index] > max_val){
 8004078:	79fb      	ldrb	r3, [r7, #7]
 800407a:	4a2e      	ldr	r2, [pc, #184]	; (8004134 <MRT_checkFlagsValues+0xcc>)
 800407c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d207      	bcs.n	8004098 <MRT_checkFlagsValues+0x30>
		*rtc_bckp_regs[val_index] = 0;
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	4a2a      	ldr	r2, [pc, #168]	; (8004134 <MRT_checkFlagsValues+0xcc>)
 800408c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
		ret = false;
 8004094:	2300      	movs	r3, #0
 8004096:	73fb      	strb	r3, [r7, #15]
	}
	if (*ext_flash_flags[val_index] > max_val){
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	4a27      	ldr	r2, [pc, #156]	; (8004138 <MRT_checkFlagsValues+0xd0>)
 800409c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d207      	bcs.n	80040ba <MRT_checkFlagsValues+0x52>
		*ext_flash_flags[val_index] = 0;
 80040aa:	79fb      	ldrb	r3, [r7, #7]
 80040ac:	4a22      	ldr	r2, [pc, #136]	; (8004138 <MRT_checkFlagsValues+0xd0>)
 80040ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040b2:	2200      	movs	r2, #0
 80040b4:	701a      	strb	r2, [r3, #0]
		ret = false;
 80040b6:	2300      	movs	r3, #0
 80040b8:	73fb      	strb	r3, [r7, #15]
	}

	if (*rtc_bckp_regs[val_index] != *ext_flash_flags[val_index]){
 80040ba:	79fb      	ldrb	r3, [r7, #7]
 80040bc:	4a1d      	ldr	r2, [pc, #116]	; (8004134 <MRT_checkFlagsValues+0xcc>)
 80040be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	79fa      	ldrb	r2, [r7, #7]
 80040c6:	491c      	ldr	r1, [pc, #112]	; (8004138 <MRT_checkFlagsValues+0xd0>)
 80040c8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80040cc:	7812      	ldrb	r2, [r2, #0]
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d028      	beq.n	8004124 <MRT_checkFlagsValues+0xbc>
		*rtc_bckp_regs[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_flags[val_index]);
 80040d2:	79fb      	ldrb	r3, [r7, #7]
 80040d4:	4a18      	ldr	r2, [pc, #96]	; (8004138 <MRT_checkFlagsValues+0xd0>)
 80040d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	4618      	mov	r0, r3
 80040de:	79fb      	ldrb	r3, [r7, #7]
 80040e0:	4a14      	ldr	r2, [pc, #80]	; (8004134 <MRT_checkFlagsValues+0xcc>)
 80040e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	79fb      	ldrb	r3, [r7, #7]
 80040ea:	4912      	ldr	r1, [pc, #72]	; (8004134 <MRT_checkFlagsValues+0xcc>)
 80040ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80040f0:	4282      	cmp	r2, r0
 80040f2:	bf38      	it	cc
 80040f4:	4602      	movcc	r2, r0
 80040f6:	601a      	str	r2, [r3, #0]
		*ext_flash_flags[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_flags[val_index]);
 80040f8:	79fb      	ldrb	r3, [r7, #7]
 80040fa:	4a0f      	ldr	r2, [pc, #60]	; (8004138 <MRT_checkFlagsValues+0xd0>)
 80040fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	4619      	mov	r1, r3
 8004104:	79fb      	ldrb	r3, [r7, #7]
 8004106:	4a0b      	ldr	r2, [pc, #44]	; (8004134 <MRT_checkFlagsValues+0xcc>)
 8004108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4299      	cmp	r1, r3
 8004110:	bf38      	it	cc
 8004112:	4619      	movcc	r1, r3
 8004114:	79fb      	ldrb	r3, [r7, #7]
 8004116:	4a08      	ldr	r2, [pc, #32]	; (8004138 <MRT_checkFlagsValues+0xd0>)
 8004118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800411c:	b2ca      	uxtb	r2, r1
 800411e:	701a      	strb	r2, [r3, #0]
		ret = false;
 8004120:	2300      	movs	r3, #0
 8004122:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8004124:	7bfb      	ldrb	r3, [r7, #15]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	2000003c 	.word	0x2000003c
 8004138:	2000008c 	.word	0x2000008c

0800413c <MRT_saveTotalTime>:
//Public functions

/*
 * Update every time values in memory
 */
void MRT_saveTotalTime(void){
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0

	//Update variables
	MRT_updateTimeValues();
 8004140:	f000 f852 	bl	80041e8 <MRT_updateTimeValues>

	//Write new RTC time to external flash
	MRT_updateExternalFlashBuffers();
 8004144:	f7ff fee6 	bl	8003f14 <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(RTC_SECTOR);
 8004148:	2002      	movs	r0, #2
 800414a:	f000 fec9 	bl	8004ee0 <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 800414e:	2304      	movs	r3, #4
 8004150:	2200      	movs	r2, #0
 8004152:	2102      	movs	r1, #2
 8004154:	480e      	ldr	r0, [pc, #56]	; (8004190 <MRT_saveTotalTime+0x54>)
 8004156:	f001 f80d 	bl	8005174 <W25qxx_WriteSector>

	//Write new RTC time to backup registers
	MRT_RTC_setBackupReg(RTC_HOUR, rtc_bckp_reg_hour);
 800415a:	4b0e      	ldr	r3, [pc, #56]	; (8004194 <MRT_saveTotalTime+0x58>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4619      	mov	r1, r3
 8004160:	2005      	movs	r0, #5
 8004162:	f7ff f885 	bl	8003270 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_MINUTE, rtc_bckp_reg_min);
 8004166:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <MRT_saveTotalTime+0x5c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4619      	mov	r1, r3
 800416c:	2006      	movs	r0, #6
 800416e:	f7ff f87f 	bl	8003270 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SECOND, rtc_bckp_reg_sec);
 8004172:	4b0a      	ldr	r3, [pc, #40]	; (800419c <MRT_saveTotalTime+0x60>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4619      	mov	r1, r3
 8004178:	2007      	movs	r0, #7
 800417a:	f7ff f879 	bl	8003270 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SUBSEC, rtc_bckp_reg_subsec);
 800417e:	4b08      	ldr	r3, [pc, #32]	; (80041a0 <MRT_saveTotalTime+0x64>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4619      	mov	r1, r3
 8004184:	2008      	movs	r0, #8
 8004186:	f7ff f873 	bl	8003270 <MRT_RTC_setBackupReg>
}
 800418a:	bf00      	nop
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20008ae0 	.word	0x20008ae0
 8004194:	200003bc 	.word	0x200003bc
 8004198:	200003c0 	.word	0x200003c0
 800419c:	200003c4 	.word	0x200003c4
 80041a0:	200003c8 	.word	0x200003c8

080041a4 <MRT_saveTimeValue>:
//Private functions

/*
 * Save an RTC value (value updated outside the function)
 */
void MRT_saveTimeValue(rtc_backup_reg state){
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	4603      	mov	r3, r0
 80041ac:	71fb      	strb	r3, [r7, #7]

	//Write new RTC time to flash memory
	MRT_updateExternalFlashBuffers();
 80041ae:	f7ff feb1 	bl	8003f14 <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(RTC_SECTOR);
 80041b2:	2002      	movs	r0, #2
 80041b4:	f000 fe94 	bl	8004ee0 <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 80041b8:	2304      	movs	r3, #4
 80041ba:	2200      	movs	r2, #0
 80041bc:	2102      	movs	r1, #2
 80041be:	4808      	ldr	r0, [pc, #32]	; (80041e0 <MRT_saveTimeValue+0x3c>)
 80041c0:	f000 ffd8 	bl	8005174 <W25qxx_WriteSector>

	//Write new RTC time to backup registers
	MRT_RTC_setBackupReg(state, *rtc_bckp_regs[state]);
 80041c4:	79fb      	ldrb	r3, [r7, #7]
 80041c6:	4a07      	ldr	r2, [pc, #28]	; (80041e4 <MRT_saveTimeValue+0x40>)
 80041c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	79fb      	ldrb	r3, [r7, #7]
 80041d0:	4611      	mov	r1, r2
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff f84c 	bl	8003270 <MRT_RTC_setBackupReg>
}
 80041d8:	bf00      	nop
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	20008ae0 	.word	0x20008ae0
 80041e4:	2000003c 	.word	0x2000003c

080041e8 <MRT_updateTimeValues>:


/*
 * Update all time values
 */
void MRT_updateTimeValues(void){
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
	//External Flash
	ext_flash_hour = prev_hour;
 80041ec:	4b13      	ldr	r3, [pc, #76]	; (800423c <MRT_updateTimeValues+0x54>)
 80041ee:	781a      	ldrb	r2, [r3, #0]
 80041f0:	4b13      	ldr	r3, [pc, #76]	; (8004240 <MRT_updateTimeValues+0x58>)
 80041f2:	701a      	strb	r2, [r3, #0]
	ext_flash_min = prev_min;
 80041f4:	4b13      	ldr	r3, [pc, #76]	; (8004244 <MRT_updateTimeValues+0x5c>)
 80041f6:	781a      	ldrb	r2, [r3, #0]
 80041f8:	4b13      	ldr	r3, [pc, #76]	; (8004248 <MRT_updateTimeValues+0x60>)
 80041fa:	701a      	strb	r2, [r3, #0]
	ext_flash_sec = prev_sec;
 80041fc:	4b13      	ldr	r3, [pc, #76]	; (800424c <MRT_updateTimeValues+0x64>)
 80041fe:	781a      	ldrb	r2, [r3, #0]
 8004200:	4b13      	ldr	r3, [pc, #76]	; (8004250 <MRT_updateTimeValues+0x68>)
 8004202:	701a      	strb	r2, [r3, #0]
	ext_flash_subsec = prev_subsec;
 8004204:	4b13      	ldr	r3, [pc, #76]	; (8004254 <MRT_updateTimeValues+0x6c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a13      	ldr	r2, [pc, #76]	; (8004258 <MRT_updateTimeValues+0x70>)
 800420a:	6013      	str	r3, [r2, #0]

	//RTC backup registers
	rtc_bckp_reg_hour = prev_hour;
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <MRT_updateTimeValues+0x54>)
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	461a      	mov	r2, r3
 8004212:	4b12      	ldr	r3, [pc, #72]	; (800425c <MRT_updateTimeValues+0x74>)
 8004214:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_min = prev_min;
 8004216:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <MRT_updateTimeValues+0x5c>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	461a      	mov	r2, r3
 800421c:	4b10      	ldr	r3, [pc, #64]	; (8004260 <MRT_updateTimeValues+0x78>)
 800421e:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_sec = prev_sec;
 8004220:	4b0a      	ldr	r3, [pc, #40]	; (800424c <MRT_updateTimeValues+0x64>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	4b0f      	ldr	r3, [pc, #60]	; (8004264 <MRT_updateTimeValues+0x7c>)
 8004228:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_subsec = prev_subsec;
 800422a:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <MRT_updateTimeValues+0x6c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a0e      	ldr	r2, [pc, #56]	; (8004268 <MRT_updateTimeValues+0x80>)
 8004230:	6013      	str	r3, [r2, #0]
}
 8004232:	bf00      	nop
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	2000041a 	.word	0x2000041a
 8004240:	200003fd 	.word	0x200003fd
 8004244:	2000041b 	.word	0x2000041b
 8004248:	200003fe 	.word	0x200003fe
 800424c:	2000041c 	.word	0x2000041c
 8004250:	200003ff 	.word	0x200003ff
 8004254:	20000420 	.word	0x20000420
 8004258:	20000400 	.word	0x20000400
 800425c:	200003bc 	.word	0x200003bc
 8004260:	200003c0 	.word	0x200003c0
 8004264:	200003c4 	.word	0x200003c4
 8004268:	200003c8 	.word	0x200003c8

0800426c <MRT_checkTimeValues>:


/*
 * Check for memory issues
 */
uint8_t MRT_checkTimeValues(rtc_backup_reg val_index, uint32_t max_val){
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	6039      	str	r1, [r7, #0]
 8004276:	71fb      	strb	r3, [r7, #7]

	uint8_t ret = true;
 8004278:	2301      	movs	r3, #1
 800427a:	73fb      	strb	r3, [r7, #15]

	//Check for a random value (unsigned int so can't be negative)
	if (*rtc_bckp_regs[val_index] > max_val){
 800427c:	79fb      	ldrb	r3, [r7, #7]
 800427e:	4a31      	ldr	r2, [pc, #196]	; (8004344 <MRT_checkTimeValues+0xd8>)
 8004280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d207      	bcs.n	800429c <MRT_checkTimeValues+0x30>
		*rtc_bckp_regs[val_index] = 0;
 800428c:	79fb      	ldrb	r3, [r7, #7]
 800428e:	4a2d      	ldr	r2, [pc, #180]	; (8004344 <MRT_checkTimeValues+0xd8>)
 8004290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]
		ret = false;
 8004298:	2300      	movs	r3, #0
 800429a:	73fb      	strb	r3, [r7, #15]
	}
	if (*ext_flash_time[val_index - NB_OF_FLAGS] > max_val){
 800429c:	79fb      	ldrb	r3, [r7, #7]
 800429e:	3b05      	subs	r3, #5
 80042a0:	4a29      	ldr	r2, [pc, #164]	; (8004348 <MRT_checkTimeValues+0xdc>)
 80042a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d208      	bcs.n	80042c2 <MRT_checkTimeValues+0x56>
		*ext_flash_time[val_index - NB_OF_FLAGS] = 0;
 80042b0:	79fb      	ldrb	r3, [r7, #7]
 80042b2:	3b05      	subs	r3, #5
 80042b4:	4a24      	ldr	r2, [pc, #144]	; (8004348 <MRT_checkTimeValues+0xdc>)
 80042b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ba:	2200      	movs	r2, #0
 80042bc:	701a      	strb	r2, [r3, #0]
		ret = false;
 80042be:	2300      	movs	r3, #0
 80042c0:	73fb      	strb	r3, [r7, #15]
	}

	if (*rtc_bckp_regs[val_index] != *ext_flash_time[val_index - NB_OF_FLAGS]){
 80042c2:	79fb      	ldrb	r3, [r7, #7]
 80042c4:	4a1f      	ldr	r2, [pc, #124]	; (8004344 <MRT_checkTimeValues+0xd8>)
 80042c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	79fa      	ldrb	r2, [r7, #7]
 80042ce:	3a05      	subs	r2, #5
 80042d0:	491d      	ldr	r1, [pc, #116]	; (8004348 <MRT_checkTimeValues+0xdc>)
 80042d2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80042d6:	7812      	ldrb	r2, [r2, #0]
 80042d8:	4293      	cmp	r3, r2
 80042da:	d02b      	beq.n	8004334 <MRT_checkTimeValues+0xc8>
		*rtc_bckp_regs[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_time[val_index - NB_OF_FLAGS]);
 80042dc:	79fb      	ldrb	r3, [r7, #7]
 80042de:	3b05      	subs	r3, #5
 80042e0:	4a19      	ldr	r2, [pc, #100]	; (8004348 <MRT_checkTimeValues+0xdc>)
 80042e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	79fb      	ldrb	r3, [r7, #7]
 80042ec:	4a15      	ldr	r2, [pc, #84]	; (8004344 <MRT_checkTimeValues+0xd8>)
 80042ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	79fb      	ldrb	r3, [r7, #7]
 80042f6:	4913      	ldr	r1, [pc, #76]	; (8004344 <MRT_checkTimeValues+0xd8>)
 80042f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80042fc:	4282      	cmp	r2, r0
 80042fe:	bf38      	it	cc
 8004300:	4602      	movcc	r2, r0
 8004302:	601a      	str	r2, [r3, #0]
		*ext_flash_time[val_index - NB_OF_FLAGS] = MAX(*rtc_bckp_regs[val_index], *ext_flash_time[val_index - NB_OF_FLAGS]);
 8004304:	79fb      	ldrb	r3, [r7, #7]
 8004306:	3b05      	subs	r3, #5
 8004308:	4a0f      	ldr	r2, [pc, #60]	; (8004348 <MRT_checkTimeValues+0xdc>)
 800430a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	4619      	mov	r1, r3
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	4a0b      	ldr	r2, [pc, #44]	; (8004344 <MRT_checkTimeValues+0xd8>)
 8004316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4299      	cmp	r1, r3
 800431e:	bf38      	it	cc
 8004320:	4619      	movcc	r1, r3
 8004322:	79fb      	ldrb	r3, [r7, #7]
 8004324:	3b05      	subs	r3, #5
 8004326:	4a08      	ldr	r2, [pc, #32]	; (8004348 <MRT_checkTimeValues+0xdc>)
 8004328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800432c:	b2ca      	uxtb	r2, r1
 800432e:	701a      	strb	r2, [r3, #0]
		ret = false;
 8004330:	2300      	movs	r3, #0
 8004332:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8004334:	7bfb      	ldrb	r3, [r7, #15]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	2000003c 	.word	0x2000003c
 8004348:	200000a0 	.word	0x200000a0

0800434c <MRT_MEMORY_Init>:
//**************************************************//
//MISC


//Public
void MRT_MEMORY_Init(void){
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0

	//External flash
	MRT_external_flash_Init();
 8004350:	f7ff fdac 	bl	8003eac <MRT_external_flash_Init>

	//Backup registers
	MRT_RTC_backup_regs_Init();
 8004354:	f7fe fede 	bl	8003114 <MRT_RTC_backup_regs_Init>

	//Get the previous flags and rtc time from memory
	MRT_stateRestoration();
 8004358:	f000 f82e 	bl	80043b8 <MRT_stateRestoration>
	//TODO SD card (doesn't work)
	#if MEMORY_THREAD

		//SD card
		#if SD_CARD_
			HAL_IWDG_Refresh(&hiwdg);
 800435c:	480f      	ldr	r0, [pc, #60]	; (800439c <MRT_MEMORY_Init+0x50>)
 800435e:	f00a f8e7 	bl	800e530 <HAL_IWDG_Refresh>

			// check if SD card is inserted
			if (HAL_GPIO_ReadPin(IN_SD_CARD_DETECT_GPIO_Port, IN_SD_CARD_DETECT_Pin) == GPIO_PIN_RESET) {
 8004362:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004366:	480e      	ldr	r0, [pc, #56]	; (80043a0 <MRT_MEMORY_Init+0x54>)
 8004368:	f008 ffe6 	bl	800d338 <HAL_GPIO_ReadPin>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10f      	bne.n	8004392 <MRT_MEMORY_Init+0x46>
			  // init sd card with dynamic filename
			  fres = sd_init_dynamic_filename("AB", sd_file_header, filename);
 8004372:	4a0c      	ldr	r2, [pc, #48]	; (80043a4 <MRT_MEMORY_Init+0x58>)
 8004374:	490c      	ldr	r1, [pc, #48]	; (80043a8 <MRT_MEMORY_Init+0x5c>)
 8004376:	480d      	ldr	r0, [pc, #52]	; (80043ac <MRT_MEMORY_Init+0x60>)
 8004378:	f000 f92e 	bl	80045d8 <sd_init_dynamic_filename>
 800437c:	4603      	mov	r3, r0
 800437e:	461a      	mov	r2, r3
 8004380:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <MRT_MEMORY_Init+0x64>)
 8004382:	701a      	strb	r2, [r3, #0]
			  if (fres != FR_OK) {
 8004384:	4b0a      	ldr	r3, [pc, #40]	; (80043b0 <MRT_MEMORY_Init+0x64>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <MRT_MEMORY_Init+0x4c>
					Error_Handler();
 800438c:	f7fe fc12 	bl	8002bb4 <Error_Handler>
				println("No SD card inserted");
			  //Error_Handler(); TODO no a good idea if SD card stops working for no reason (will stop the FC)
			}
		#endif
	#endif
}
 8004390:	e002      	b.n	8004398 <MRT_MEMORY_Init+0x4c>
				println("No SD card inserted");
 8004392:	4808      	ldr	r0, [pc, #32]	; (80043b4 <MRT_MEMORY_Init+0x68>)
 8004394:	f7fc fe9a 	bl	80010cc <println>
}
 8004398:	bf00      	nop
 800439a:	bd80      	pop	{r7, pc}
 800439c:	20008780 	.word	0x20008780
 80043a0:	40020800 	.word	0x40020800
 80043a4:	20000408 	.word	0x20000408
 80043a8:	08022a18 	.word	0x08022a18
 80043ac:	08020e30 	.word	0x08020e30
 80043b0:	200094f0 	.word	0x200094f0
 80043b4:	08020e34 	.word	0x08020e34

080043b8 <MRT_stateRestoration>:


//Private

//Get the flags values and RTC time
void MRT_stateRestoration(void){
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0

	//Check for a wakeup
	MRT_checkWakeUp();
 80043bc:	f000 f8ca 	bl	8004554 <MRT_checkWakeUp>

	//If RTC detected a wake up, update the flash memory and the backup registers
	if (wu_flag == 1){
 80043c0:	4b51      	ldr	r3, [pc, #324]	; (8004508 <MRT_stateRestoration+0x150>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d111      	bne.n	80043ec <MRT_stateRestoration+0x34>

		//Update values
		ext_flash_wu += 1;
 80043c8:	4b50      	ldr	r3, [pc, #320]	; (800450c <MRT_stateRestoration+0x154>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	3301      	adds	r3, #1
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	4b4e      	ldr	r3, [pc, #312]	; (800450c <MRT_stateRestoration+0x154>)
 80043d2:	701a      	strb	r2, [r3, #0]
		rtc_bckp_reg_wu += 1;
 80043d4:	4b4e      	ldr	r3, [pc, #312]	; (8004510 <MRT_stateRestoration+0x158>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3301      	adds	r3, #1
 80043da:	4a4d      	ldr	r2, [pc, #308]	; (8004510 <MRT_stateRestoration+0x158>)
 80043dc:	6013      	str	r3, [r2, #0]

		//Check for memory issues¸
		MRT_checkFlagsValues(FC_STATE_WU, 2);
 80043de:	2102      	movs	r1, #2
 80043e0:	2001      	movs	r0, #1
 80043e2:	f7ff fe41 	bl	8004068 <MRT_checkFlagsValues>

		//Update memory
		MRT_saveFlagValue(FC_STATE_WU);
 80043e6:	2001      	movs	r0, #1
 80043e8:	f7ff fe1c 	bl	8004024 <MRT_saveFlagValue>
	}
	//Update the wu_flag value
	wu_flag = rtc_bckp_reg_wu;
 80043ec:	4b48      	ldr	r3, [pc, #288]	; (8004510 <MRT_stateRestoration+0x158>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	4b45      	ldr	r3, [pc, #276]	; (8004508 <MRT_stateRestoration+0x150>)
 80043f4:	701a      	strb	r2, [r3, #0]


	//Check flags values

	//Reset flag
	if(MRT_checkFlagsValues(FC_STATE_RESET, 1) == false)	MRT_saveFlagValue(FC_STATE_RESET);
 80043f6:	2101      	movs	r1, #1
 80043f8:	2000      	movs	r0, #0
 80043fa:	f7ff fe35 	bl	8004068 <MRT_checkFlagsValues>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d102      	bne.n	800440a <MRT_stateRestoration+0x52>
 8004404:	2000      	movs	r0, #0
 8004406:	f7ff fe0d 	bl	8004024 <MRT_saveFlagValue>
	reset_flag = rtc_bckp_reg_reset;
 800440a:	4b42      	ldr	r3, [pc, #264]	; (8004514 <MRT_stateRestoration+0x15c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	b2da      	uxtb	r2, r3
 8004410:	4b41      	ldr	r3, [pc, #260]	; (8004518 <MRT_stateRestoration+0x160>)
 8004412:	701a      	strb	r2, [r3, #0]

	//Wake up flag (TODO double check??)
	if(MRT_checkFlagsValues(FC_STATE_WU, 1) == false)	MRT_saveFlagValue(FC_STATE_WU);
 8004414:	2101      	movs	r1, #1
 8004416:	2001      	movs	r0, #1
 8004418:	f7ff fe26 	bl	8004068 <MRT_checkFlagsValues>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d102      	bne.n	8004428 <MRT_stateRestoration+0x70>
 8004422:	2001      	movs	r0, #1
 8004424:	f7ff fdfe 	bl	8004024 <MRT_saveFlagValue>
	wu_flag = rtc_bckp_reg_wu;
 8004428:	4b39      	ldr	r3, [pc, #228]	; (8004510 <MRT_stateRestoration+0x158>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	b2da      	uxtb	r2, r3
 800442e:	4b36      	ldr	r3, [pc, #216]	; (8004508 <MRT_stateRestoration+0x150>)
 8004430:	701a      	strb	r2, [r3, #0]

	//IWDG flag
	if(MRT_checkFlagsValues(FC_STATE_IWDG, 1) == false)	MRT_saveFlagValue(FC_STATE_IWDG);
 8004432:	2101      	movs	r1, #1
 8004434:	2002      	movs	r0, #2
 8004436:	f7ff fe17 	bl	8004068 <MRT_checkFlagsValues>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d102      	bne.n	8004446 <MRT_stateRestoration+0x8e>
 8004440:	2002      	movs	r0, #2
 8004442:	f7ff fdef 	bl	8004024 <MRT_saveFlagValue>
	iwdg_flag = rtc_bckp_reg_iwdg;
 8004446:	4b35      	ldr	r3, [pc, #212]	; (800451c <MRT_stateRestoration+0x164>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	b2da      	uxtb	r2, r3
 800444c:	4b34      	ldr	r3, [pc, #208]	; (8004520 <MRT_stateRestoration+0x168>)
 800444e:	701a      	strb	r2, [r3, #0]

	//Apogee flag
	if(MRT_checkFlagsValues(FC_STATE_APOGEE, 1) == false)	MRT_saveFlagValue(FC_STATE_APOGEE);
 8004450:	2101      	movs	r1, #1
 8004452:	2003      	movs	r0, #3
 8004454:	f7ff fe08 	bl	8004068 <MRT_checkFlagsValues>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d102      	bne.n	8004464 <MRT_stateRestoration+0xac>
 800445e:	2003      	movs	r0, #3
 8004460:	f7ff fde0 	bl	8004024 <MRT_saveFlagValue>
	apogee_flag = rtc_bckp_reg_apogee;
 8004464:	4b2f      	ldr	r3, [pc, #188]	; (8004524 <MRT_stateRestoration+0x16c>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	b2da      	uxtb	r2, r3
 800446a:	4b2f      	ldr	r3, [pc, #188]	; (8004528 <MRT_stateRestoration+0x170>)
 800446c:	701a      	strb	r2, [r3, #0]

	//Ejection state flag
	if(MRT_checkFlagsValues(FC_STATE_FLIGHT, 4) == false)	MRT_saveFlagValue(FC_STATE_FLIGHT);
 800446e:	2104      	movs	r1, #4
 8004470:	2004      	movs	r0, #4
 8004472:	f7ff fdf9 	bl	8004068 <MRT_checkFlagsValues>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d102      	bne.n	8004482 <MRT_stateRestoration+0xca>
 800447c:	2004      	movs	r0, #4
 800447e:	f7ff fdd1 	bl	8004024 <MRT_saveFlagValue>
	ejection_stage_flag = rtc_bckp_reg_ejection_stage;
 8004482:	4b2a      	ldr	r3, [pc, #168]	; (800452c <MRT_stateRestoration+0x174>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	b2da      	uxtb	r2, r3
 8004488:	4b29      	ldr	r3, [pc, #164]	; (8004530 <MRT_stateRestoration+0x178>)
 800448a:	701a      	strb	r2, [r3, #0]


	//Check RTC time values
	//Hours
	if(MRT_checkTimeValues(RTC_HOUR, 23) == false)	MRT_saveTimeValue(RTC_HOUR);
 800448c:	2117      	movs	r1, #23
 800448e:	2005      	movs	r0, #5
 8004490:	f7ff feec 	bl	800426c <MRT_checkTimeValues>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d102      	bne.n	80044a0 <MRT_stateRestoration+0xe8>
 800449a:	2005      	movs	r0, #5
 800449c:	f7ff fe82 	bl	80041a4 <MRT_saveTimeValue>
	prev_hour = rtc_bckp_reg_hour;
 80044a0:	4b24      	ldr	r3, [pc, #144]	; (8004534 <MRT_stateRestoration+0x17c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	4b24      	ldr	r3, [pc, #144]	; (8004538 <MRT_stateRestoration+0x180>)
 80044a8:	701a      	strb	r2, [r3, #0]

	//Minutes
	if(MRT_checkTimeValues(RTC_MINUTE, 59) == false)	MRT_saveTimeValue(RTC_MINUTE);
 80044aa:	213b      	movs	r1, #59	; 0x3b
 80044ac:	2006      	movs	r0, #6
 80044ae:	f7ff fedd 	bl	800426c <MRT_checkTimeValues>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d102      	bne.n	80044be <MRT_stateRestoration+0x106>
 80044b8:	2006      	movs	r0, #6
 80044ba:	f7ff fe73 	bl	80041a4 <MRT_saveTimeValue>
	prev_min = rtc_bckp_reg_min;
 80044be:	4b1f      	ldr	r3, [pc, #124]	; (800453c <MRT_stateRestoration+0x184>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	4b1e      	ldr	r3, [pc, #120]	; (8004540 <MRT_stateRestoration+0x188>)
 80044c6:	701a      	strb	r2, [r3, #0]

	//Seconds
	if(MRT_checkTimeValues(RTC_SECOND, 59) == false)	MRT_saveTimeValue(RTC_SECOND);
 80044c8:	213b      	movs	r1, #59	; 0x3b
 80044ca:	2007      	movs	r0, #7
 80044cc:	f7ff fece 	bl	800426c <MRT_checkTimeValues>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d102      	bne.n	80044dc <MRT_stateRestoration+0x124>
 80044d6:	2007      	movs	r0, #7
 80044d8:	f7ff fe64 	bl	80041a4 <MRT_saveTimeValue>
	prev_sec = rtc_bckp_reg_sec;
 80044dc:	4b19      	ldr	r3, [pc, #100]	; (8004544 <MRT_stateRestoration+0x18c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	4b19      	ldr	r3, [pc, #100]	; (8004548 <MRT_stateRestoration+0x190>)
 80044e4:	701a      	strb	r2, [r3, #0]

	//Sub-Seconds
	if(MRT_checkTimeValues(RTC_SUBSEC, 999) == false)	MRT_saveTimeValue(RTC_SUBSEC);
 80044e6:	f240 31e7 	movw	r1, #999	; 0x3e7
 80044ea:	2008      	movs	r0, #8
 80044ec:	f7ff febe 	bl	800426c <MRT_checkTimeValues>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d102      	bne.n	80044fc <MRT_stateRestoration+0x144>
 80044f6:	2008      	movs	r0, #8
 80044f8:	f7ff fe54 	bl	80041a4 <MRT_saveTimeValue>
	prev_subsec = rtc_bckp_reg_subsec;
 80044fc:	4b13      	ldr	r3, [pc, #76]	; (800454c <MRT_stateRestoration+0x194>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a13      	ldr	r2, [pc, #76]	; (8004550 <MRT_stateRestoration+0x198>)
 8004502:	6013      	str	r3, [r2, #0]
}
 8004504:	bf00      	nop
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20000416 	.word	0x20000416
 800450c:	200003f9 	.word	0x200003f9
 8004510:	200003ac 	.word	0x200003ac
 8004514:	200003a8 	.word	0x200003a8
 8004518:	20000415 	.word	0x20000415
 800451c:	200003b0 	.word	0x200003b0
 8004520:	20000417 	.word	0x20000417
 8004524:	200003b4 	.word	0x200003b4
 8004528:	20000418 	.word	0x20000418
 800452c:	200003b8 	.word	0x200003b8
 8004530:	20000419 	.word	0x20000419
 8004534:	200003bc 	.word	0x200003bc
 8004538:	2000041a 	.word	0x2000041a
 800453c:	200003c0 	.word	0x200003c0
 8004540:	2000041b 	.word	0x2000041b
 8004544:	200003c4 	.word	0x200003c4
 8004548:	2000041c 	.word	0x2000041c
 800454c:	200003c8 	.word	0x200003c8
 8004550:	20000420 	.word	0x20000420

08004554 <MRT_checkWakeUp>:


/*
 * Check if FC is back from wakeup
 */
void MRT_checkWakeUp(void){
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8004558:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <MRT_checkWakeUp+0x40>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b02      	cmp	r3, #2
 8004562:	d112      	bne.n	800458a <MRT_checkWakeUp+0x36>
	{

		wu_flag = 1;
 8004564:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <MRT_checkWakeUp+0x44>)
 8004566:	2201      	movs	r2, #1
 8004568:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 800456a:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <MRT_checkWakeUp+0x40>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a09      	ldr	r2, [pc, #36]	; (8004594 <MRT_checkWakeUp+0x40>)
 8004570:	f043 0308 	orr.w	r3, r3, #8
 8004574:	6013      	str	r3, [r2, #0]

		println("Wakeup from STANDBY MODE");
 8004576:	4809      	ldr	r0, [pc, #36]	; (800459c <MRT_checkWakeUp+0x48>)
 8004578:	f7fc fda8 	bl	80010cc <println>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 800457c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004580:	f009 fff8 	bl	800e574 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8004584:	4806      	ldr	r0, [pc, #24]	; (80045a0 <MRT_checkWakeUp+0x4c>)
 8004586:	f00b fc43 	bl	800fe10 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_clear_alarms_flags();
 800458a:	f7fe fc43 	bl	8002e14 <MRT_clear_alarms_flags>
}
 800458e:	bf00      	nop
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40007000 	.word	0x40007000
 8004598:	20000416 	.word	0x20000416
 800459c:	08020e48 	.word	0x08020e48
 80045a0:	2000878c 	.word	0x2000878c

080045a4 <myprintf>:


uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value);
void str2upper(char* string, char* upper);

void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 80045a4:	b40f      	push	{r0, r1, r2, r3}
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b082      	sub	sp, #8
 80045aa:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80045ac:	f107 0314 	add.w	r3, r7, #20
 80045b0:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045ba:	4806      	ldr	r0, [pc, #24]	; (80045d4 <myprintf+0x30>)
 80045bc:	f019 f83a 	bl	801d634 <vsniprintf>
  va_end(args);

  //CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
  //HAL_UART_Transmit(&DEBUGUART, (uint8_t*)buffer, strlen(buffer), -1);
  print(buffer);
 80045c0:	4804      	ldr	r0, [pc, #16]	; (80045d4 <myprintf+0x30>)
 80045c2:	f7fc fda1 	bl	8001108 <print>
}
 80045c6:	bf00      	nop
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045d0:	b004      	add	sp, #16
 80045d2:	4770      	bx	lr
 80045d4:	20000424 	.word	0x20000424

080045d8 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08a      	sub	sp, #40	; 0x28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 80045e4:	2201      	movs	r2, #1
 80045e6:	4934      	ldr	r1, [pc, #208]	; (80046b8 <sd_init_dynamic_filename+0xe0>)
 80045e8:	4834      	ldr	r0, [pc, #208]	; (80046bc <sd_init_dynamic_filename+0xe4>)
 80045ea:	f010 fa63 	bl	8014ab4 <f_mount>
 80045ee:	4603      	mov	r3, r0
 80045f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 80045f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 80045fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004600:	4619      	mov	r1, r3
 8004602:	482f      	ldr	r0, [pc, #188]	; (80046c0 <sd_init_dynamic_filename+0xe8>)
 8004604:	f7ff ffce 	bl	80045a4 <myprintf>
		return fres;
 8004608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800460c:	e050      	b.n	80046b0 <sd_init_dynamic_filename+0xd8>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 800460e:	2300      	movs	r3, #0
 8004610:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 8004612:	f107 0320 	add.w	r3, r7, #32
 8004616:	461a      	mov	r2, r3
 8004618:	68f9      	ldr	r1, [r7, #12]
 800461a:	4827      	ldr	r0, [pc, #156]	; (80046b8 <sd_init_dynamic_filename+0xe0>)
 800461c:	f000 f8a0 	bl	8004760 <scan_files>
 8004620:	4603      	mov	r3, r0
 8004622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "%s%06lu.txt", prefix, max_used_value + 1);
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	3301      	adds	r3, #1
 800462a:	f107 0010 	add.w	r0, r7, #16
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4924      	ldr	r1, [pc, #144]	; (80046c4 <sd_init_dynamic_filename+0xec>)
 8004632:	f017 fd45 	bl	801c0c0 <siprintf>
	memset(return_filename,0,13); //TODO added by MRT
 8004636:	220d      	movs	r2, #13
 8004638:	2100      	movs	r1, #0
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f016 fa44 	bl	801aac8 <memset>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 8004640:	f107 0310 	add.w	r3, r7, #16
 8004644:	4619      	mov	r1, r3
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f017 fdd8 	bl	801c1fc <strcpy>
 800464c:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 800464e:	f107 0310 	add.w	r3, r7, #16
 8004652:	221a      	movs	r2, #26
 8004654:	4619      	mov	r1, r3
 8004656:	481c      	ldr	r0, [pc, #112]	; (80046c8 <sd_init_dynamic_filename+0xf0>)
 8004658:	f010 fa90 	bl	8014b7c <f_open>
 800465c:	4603      	mov	r3, r0
 800465e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8004662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004666:	2b00      	cmp	r3, #0
 8004668:	d11a      	bne.n	80046a0 <sd_init_dynamic_filename+0xc8>
		myprintf("I was able to open filename.txt for writing\r\n");
 800466a:	4818      	ldr	r0, [pc, #96]	; (80046cc <sd_init_dynamic_filename+0xf4>)
 800466c:	f7ff ff9a 	bl	80045a4 <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8004670:	4b15      	ldr	r3, [pc, #84]	; (80046c8 <sd_init_dynamic_filename+0xf0>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	4619      	mov	r1, r3
 8004676:	4814      	ldr	r0, [pc, #80]	; (80046c8 <sd_init_dynamic_filename+0xf0>)
 8004678:	f010 fea1 	bl	80153be <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 800467c:	4914      	ldr	r1, [pc, #80]	; (80046d0 <sd_init_dynamic_filename+0xf8>)
 800467e:	4815      	ldr	r0, [pc, #84]	; (80046d4 <sd_init_dynamic_filename+0xfc>)
 8004680:	f017 fd1e 	bl	801c0c0 <siprintf>
	sd_write(&fil, msg_buffer);
 8004684:	4913      	ldr	r1, [pc, #76]	; (80046d4 <sd_init_dynamic_filename+0xfc>)
 8004686:	4810      	ldr	r0, [pc, #64]	; (80046c8 <sd_init_dynamic_filename+0xf0>)
 8004688:	f000 f840 	bl	800470c <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 800468c:	68b9      	ldr	r1, [r7, #8]
 800468e:	480e      	ldr	r0, [pc, #56]	; (80046c8 <sd_init_dynamic_filename+0xf0>)
 8004690:	f000 f83c 	bl	800470c <sd_write>
	f_close(&fil);
 8004694:	480c      	ldr	r0, [pc, #48]	; (80046c8 <sd_init_dynamic_filename+0xf0>)
 8004696:	f010 fe63 	bl	8015360 <f_close>

	return fres;
 800469a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800469e:	e007      	b.n	80046b0 <sd_init_dynamic_filename+0xd8>
		myprintf("f_open error (%i)\r\n", fres);
 80046a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046a4:	4619      	mov	r1, r3
 80046a6:	480c      	ldr	r0, [pc, #48]	; (80046d8 <sd_init_dynamic_filename+0x100>)
 80046a8:	f7ff ff7c 	bl	80045a4 <myprintf>
		return fres;
 80046ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3728      	adds	r7, #40	; 0x28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	08020e64 	.word	0x08020e64
 80046bc:	20008aec 	.word	0x20008aec
 80046c0:	08020e68 	.word	0x08020e68
 80046c4:	08020ee4 	.word	0x08020ee4
 80046c8:	200094f4 	.word	0x200094f4
 80046cc:	08020e80 	.word	0x08020e80
 80046d0:	08020ec4 	.word	0x08020ec4
 80046d4:	20008d20 	.word	0x20008d20
 80046d8:	08020eb0 	.word	0x08020eb0

080046dc <sd_open_file>:

/*
 * always open in mode FA_WRITE | FA_OPEN_ALWAYS and then appends.
 */
FRESULT sd_open_file(char *filename)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
	// write start to SD card
	FRESULT fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 80046e4:	2212      	movs	r2, #18
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	4807      	ldr	r0, [pc, #28]	; (8004708 <sd_open_file+0x2c>)
 80046ea:	f010 fa47 	bl	8014b7c <f_open>
 80046ee:	4603      	mov	r3, r0
 80046f0:	73fb      	strb	r3, [r7, #15]

	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 80046f2:	4b05      	ldr	r3, [pc, #20]	; (8004708 <sd_open_file+0x2c>)
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	4619      	mov	r1, r3
 80046f8:	4803      	ldr	r0, [pc, #12]	; (8004708 <sd_open_file+0x2c>)
 80046fa:	f010 fe60 	bl	80153be <f_lseek>

	return fres;
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	200094f4 	.word	0x200094f4

0800470c <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8004716:	6838      	ldr	r0, [r7, #0]
 8004718:	f7fb fd74 	bl	8000204 <strlen>
 800471c:	4602      	mov	r2, r0
 800471e:	f107 0308 	add.w	r3, r7, #8
 8004722:	6839      	ldr	r1, [r7, #0]
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f010 fbee 	bl	8014f06 <f_write>
 800472a:	4603      	mov	r3, r0
 800472c:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 800472e:	7bfb      	ldrb	r3, [r7, #15]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d107      	bne.n	8004744 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	4619      	mov	r1, r3
 8004738:	4807      	ldr	r0, [pc, #28]	; (8004758 <sd_write+0x4c>)
 800473a:	f7ff ff33 	bl	80045a4 <myprintf>
		return bytesWrote;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	b25b      	sxtb	r3, r3
 8004742:	e004      	b.n	800474e <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8004744:	4805      	ldr	r0, [pc, #20]	; (800475c <sd_write+0x50>)
 8004746:	f7ff ff2d 	bl	80045a4 <myprintf>
		return -1;
 800474a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	08020ef0 	.word	0x08020ef0
 800475c:	08020f14 	.word	0x08020f14

08004760 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8004760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004762:	b099      	sub	sp, #100	; 0x64
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	466b      	mov	r3, sp
 800476e:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8004770:	68b8      	ldr	r0, [r7, #8]
 8004772:	f7fb fd47 	bl	8000204 <strlen>
 8004776:	4603      	mov	r3, r0
 8004778:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 800477c:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8004780:	4623      	mov	r3, r4
 8004782:	3b01      	subs	r3, #1
 8004784:	65bb      	str	r3, [r7, #88]	; 0x58
 8004786:	b2e0      	uxtb	r0, r4
 8004788:	f04f 0100 	mov.w	r1, #0
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	00cb      	lsls	r3, r1, #3
 8004796:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800479a:	00c2      	lsls	r2, r0, #3
 800479c:	b2e0      	uxtb	r0, r4
 800479e:	f04f 0100 	mov.w	r1, #0
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	f04f 0300 	mov.w	r3, #0
 80047aa:	00cb      	lsls	r3, r1, #3
 80047ac:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80047b0:	00c2      	lsls	r2, r0, #3
 80047b2:	4623      	mov	r3, r4
 80047b4:	3307      	adds	r3, #7
 80047b6:	08db      	lsrs	r3, r3, #3
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	ebad 0d03 	sub.w	sp, sp, r3
 80047be:	466b      	mov	r3, sp
 80047c0:	3300      	adds	r3, #0
 80047c2:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 80047c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047c6:	4619      	mov	r1, r3
 80047c8:	68b8      	ldr	r0, [r7, #8]
 80047ca:	f000 f8ff 	bl	80049cc <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 80047d8:	f107 0318 	add.w	r3, r7, #24
 80047dc:	68f9      	ldr	r1, [r7, #12]
 80047de:	4618      	mov	r0, r3
 80047e0:	f011 f840 	bl	8015864 <f_opendir>
 80047e4:	4603      	mov	r3, r0
 80047e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 80047ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d16c      	bne.n	80048cc <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80047f2:	f107 0318 	add.w	r3, r7, #24
 80047f6:	4939      	ldr	r1, [pc, #228]	; (80048dc <scan_files+0x17c>)
 80047f8:	4618      	mov	r0, r3
 80047fa:	f011 f8d7 	bl	80159ac <f_readdir>
 80047fe:	4603      	mov	r3, r0
 8004800:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8004804:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004808:	2b00      	cmp	r3, #0
 800480a:	d15a      	bne.n	80048c2 <scan_files+0x162>
 800480c:	4b33      	ldr	r3, [pc, #204]	; (80048dc <scan_files+0x17c>)
 800480e:	7a5b      	ldrb	r3, [r3, #9]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d056      	beq.n	80048c2 <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8004814:	4b31      	ldr	r3, [pc, #196]	; (80048dc <scan_files+0x17c>)
 8004816:	7a1b      	ldrb	r3, [r3, #8]
 8004818:	f003 0310 	and.w	r3, r3, #16
 800481c:	2b00      	cmp	r3, #0
 800481e:	d14e      	bne.n	80048be <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8004820:	466b      	mov	r3, sp
 8004822:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8004824:	482e      	ldr	r0, [pc, #184]	; (80048e0 <scan_files+0x180>)
 8004826:	f7fb fced 	bl	8000204 <strlen>
 800482a:	4604      	mov	r4, r0
 800482c:	4623      	mov	r3, r4
 800482e:	3b01      	subs	r3, #1
 8004830:	653b      	str	r3, [r7, #80]	; 0x50
 8004832:	4620      	mov	r0, r4
 8004834:	f04f 0100 	mov.w	r1, #0
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	00cb      	lsls	r3, r1, #3
 8004842:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004846:	00c2      	lsls	r2, r0, #3
 8004848:	4620      	mov	r0, r4
 800484a:	f04f 0100 	mov.w	r1, #0
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	00cb      	lsls	r3, r1, #3
 8004858:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800485c:	00c2      	lsls	r2, r0, #3
 800485e:	1de3      	adds	r3, r4, #7
 8004860:	08db      	lsrs	r3, r3, #3
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	ebad 0d03 	sub.w	sp, sp, r3
 8004868:	466b      	mov	r3, sp
 800486a:	3300      	adds	r3, #0
 800486c:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 800486e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004870:	4619      	mov	r1, r3
 8004872:	481b      	ldr	r0, [pc, #108]	; (80048e0 <scan_files+0x180>)
 8004874:	f000 f8aa 	bl	80049cc <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 8004878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800487a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800487e:	4619      	mov	r1, r3
 8004880:	4817      	ldr	r0, [pc, #92]	; (80048e0 <scan_files+0x180>)
 8004882:	f017 fcc3 	bl	801c20c <strncmp>
 8004886:	4603      	mov	r3, r0
 8004888:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 800488c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8004890:	2b00      	cmp	r3, #0
 8004892:	d112      	bne.n	80048ba <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 8004894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004896:	f107 0214 	add.w	r2, r7, #20
 800489a:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 f820 	bl	80048e4 <extract_filename_suffix>
 80048a4:	4603      	mov	r3, r0
 80048a6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d202      	bcs.n	80048ba <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	46b5      	mov	sp, r6
 80048bc:	e799      	b.n	80047f2 <scan_files+0x92>
            	continue; // don't enter directory
 80048be:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80048c0:	e797      	b.n	80047f2 <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 80048c2:	f107 0318 	add.w	r3, r7, #24
 80048c6:	4618      	mov	r0, r3
 80048c8:	f011 f845 	bl	8015956 <f_closedir>
    }

    return res;
 80048cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80048d0:	46ad      	mov	sp, r5
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3764      	adds	r7, #100	; 0x64
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048da:	bf00      	nop
 80048dc:	20000524 	.word	0x20000524
 80048e0:	2000052d 	.word	0x2000052d

080048e4 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 80048e4:	b5b0      	push	{r4, r5, r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	460b      	mov	r3, r1
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	72fb      	strb	r3, [r7, #11]
 80048f2:	466b      	mov	r3, sp
 80048f4:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f7fb fc84 	bl	8000204 <strlen>
 80048fc:	4603      	mov	r3, r0
 80048fe:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 8004900:	2308      	movs	r3, #8
 8004902:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 8004904:	7f7c      	ldrb	r4, [r7, #29]
 8004906:	4623      	mov	r3, r4
 8004908:	3b01      	subs	r3, #1
 800490a:	61bb      	str	r3, [r7, #24]
 800490c:	b2e0      	uxtb	r0, r4
 800490e:	f04f 0100 	mov.w	r1, #0
 8004912:	f04f 0200 	mov.w	r2, #0
 8004916:	f04f 0300 	mov.w	r3, #0
 800491a:	00cb      	lsls	r3, r1, #3
 800491c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004920:	00c2      	lsls	r2, r0, #3
 8004922:	b2e0      	uxtb	r0, r4
 8004924:	f04f 0100 	mov.w	r1, #0
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	f04f 0300 	mov.w	r3, #0
 8004930:	00cb      	lsls	r3, r1, #3
 8004932:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004936:	00c2      	lsls	r2, r0, #3
 8004938:	4623      	mov	r3, r4
 800493a:	3307      	adds	r3, #7
 800493c:	08db      	lsrs	r3, r3, #3
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	ebad 0d03 	sub.w	sp, sp, r3
 8004944:	466b      	mov	r3, sp
 8004946:	3300      	adds	r3, #0
 8004948:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 800494a:	2300      	movs	r3, #0
 800494c:	77fb      	strb	r3, [r7, #31]
 800494e:	e014      	b.n	800497a <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8004950:	7afb      	ldrb	r3, [r7, #11]
 8004952:	1e5a      	subs	r2, r3, #1
 8004954:	7ffb      	ldrb	r3, [r7, #31]
 8004956:	441a      	add	r2, r3
 8004958:	7fbb      	ldrb	r3, [r7, #30]
 800495a:	3b01      	subs	r3, #1
 800495c:	429a      	cmp	r2, r3
 800495e:	da11      	bge.n	8004984 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 8004960:	7afa      	ldrb	r2, [r7, #11]
 8004962:	7ffb      	ldrb	r3, [r7, #31]
 8004964:	4413      	add	r3, r2
 8004966:	461a      	mov	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	441a      	add	r2, r3
 800496c:	7ffb      	ldrb	r3, [r7, #31]
 800496e:	7811      	ldrb	r1, [r2, #0]
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 8004974:	7ffb      	ldrb	r3, [r7, #31]
 8004976:	3301      	adds	r3, #1
 8004978:	77fb      	strb	r3, [r7, #31]
 800497a:	7ffa      	ldrb	r2, [r7, #31]
 800497c:	7f7b      	ldrb	r3, [r7, #29]
 800497e:	429a      	cmp	r2, r3
 8004980:	d3e6      	bcc.n	8004950 <extract_filename_suffix+0x6c>
 8004982:	e000      	b.n	8004986 <extract_filename_suffix+0xa2>
		}
		else break;
 8004984:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f107 0110 	add.w	r1, r7, #16
 800498c:	220a      	movs	r2, #10
 800498e:	4618      	mov	r0, r3
 8004990:	f018 fb5c 	bl	801d04c <strtol>
 8004994:	4603      	mov	r3, r0
 8004996:	461a      	mov	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d00a      	beq.n	80049ba <extract_filename_suffix+0xd6>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049ac:	d005      	beq.n	80049ba <extract_filename_suffix+0xd6>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d101      	bne.n	80049be <extract_filename_suffix+0xda>
	{
		return 1;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e000      	b.n	80049c0 <extract_filename_suffix+0xdc>
	}

	return 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	46ad      	mov	sp, r5
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3720      	adds	r7, #32
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080049cc <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 80049cc:	b590      	push	{r4, r7, lr}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 80049d6:	2300      	movs	r3, #0
 80049d8:	73fb      	strb	r3, [r7, #15]
 80049da:	e019      	b.n	8004a10 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	4413      	add	r3, r2
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	73bb      	strb	r3, [r7, #14]
 80049e6:	7bbb      	ldrb	r3, [r7, #14]
 80049e8:	3301      	adds	r3, #1
 80049ea:	4a0f      	ldr	r2, [pc, #60]	; (8004a28 <str2upper+0x5c>)
 80049ec:	4413      	add	r3, r2
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	f003 0303 	and.w	r3, r3, #3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d102      	bne.n	80049fe <str2upper+0x32>
 80049f8:	7bbb      	ldrb	r3, [r7, #14]
 80049fa:	3b20      	subs	r3, #32
 80049fc:	e000      	b.n	8004a00 <str2upper+0x34>
 80049fe:	7bbb      	ldrb	r3, [r7, #14]
 8004a00:	7bfa      	ldrb	r2, [r7, #15]
 8004a02:	6839      	ldr	r1, [r7, #0]
 8004a04:	440a      	add	r2, r1
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	73fb      	strb	r3, [r7, #15]
 8004a10:	7bfc      	ldrb	r4, [r7, #15]
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7fb fbf6 	bl	8000204 <strlen>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	429c      	cmp	r4, r3
 8004a1c:	d3de      	bcc.n	80049dc <str2upper+0x10>
	}
}
 8004a1e:	bf00      	nop
 8004a20:	bf00      	nop
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd90      	pop	{r4, r7, pc}
 8004a28:	08022b88 	.word	0x08022b88

08004a2c <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af02      	add	r7, sp, #8
 8004a32:	4603      	mov	r3, r0
 8004a34:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8004a36:	f107 020f 	add.w	r2, r7, #15
 8004a3a:	1df9      	adds	r1, r7, #7
 8004a3c:	2364      	movs	r3, #100	; 0x64
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	2301      	movs	r3, #1
 8004a42:	4804      	ldr	r0, [pc, #16]	; (8004a54 <W25qxx_Spi+0x28>)
 8004a44:	f00b fd68 	bl	8010518 <HAL_SPI_TransmitReceive>
	return ret;
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20008804 	.word	0x20008804

08004a58 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	2300      	movs	r3, #0
 8004a64:	60bb      	str	r3, [r7, #8]
 8004a66:	2300      	movs	r3, #0
 8004a68:	607b      	str	r3, [r7, #4]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004a6e:	2200      	movs	r2, #0
 8004a70:	2140      	movs	r1, #64	; 0x40
 8004a72:	4813      	ldr	r0, [pc, #76]	; (8004ac0 <W25qxx_ReadID+0x68>)
 8004a74:	f008 fc78 	bl	800d368 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8004a78:	209f      	movs	r0, #159	; 0x9f
 8004a7a:	f7ff ffd7 	bl	8004a2c <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004a7e:	20a5      	movs	r0, #165	; 0xa5
 8004a80:	f7ff ffd4 	bl	8004a2c <W25qxx_Spi>
 8004a84:	4603      	mov	r3, r0
 8004a86:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004a88:	20a5      	movs	r0, #165	; 0xa5
 8004a8a:	f7ff ffcf 	bl	8004a2c <W25qxx_Spi>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004a92:	20a5      	movs	r0, #165	; 0xa5
 8004a94:	f7ff ffca 	bl	8004a2c <W25qxx_Spi>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	2140      	movs	r1, #64	; 0x40
 8004aa0:	4807      	ldr	r0, [pc, #28]	; (8004ac0 <W25qxx_ReadID+0x68>)
 8004aa2:	f008 fc61 	bl	800d368 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	041a      	lsls	r2, r3, #16
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	021b      	lsls	r3, r3, #8
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]
	return Temp;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40020c00 	.word	0x40020c00

08004ac4 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8004ac4:	b590      	push	{r4, r7, lr}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004aca:	2200      	movs	r2, #0
 8004acc:	2140      	movs	r1, #64	; 0x40
 8004ace:	4816      	ldr	r0, [pc, #88]	; (8004b28 <W25qxx_ReadUniqID+0x64>)
 8004ad0:	f008 fc4a 	bl	800d368 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8004ad4:	204b      	movs	r0, #75	; 0x4b
 8004ad6:	f7ff ffa9 	bl	8004a2c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8004ada:	2300      	movs	r3, #0
 8004adc:	71fb      	strb	r3, [r7, #7]
 8004ade:	e005      	b.n	8004aec <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004ae0:	20a5      	movs	r0, #165	; 0xa5
 8004ae2:	f7ff ffa3 	bl	8004a2c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8004ae6:	79fb      	ldrb	r3, [r7, #7]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	71fb      	strb	r3, [r7, #7]
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	2b03      	cmp	r3, #3
 8004af0:	d9f6      	bls.n	8004ae0 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8004af2:	2300      	movs	r3, #0
 8004af4:	71bb      	strb	r3, [r7, #6]
 8004af6:	e00b      	b.n	8004b10 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004af8:	79bc      	ldrb	r4, [r7, #6]
 8004afa:	20a5      	movs	r0, #165	; 0xa5
 8004afc:	f7ff ff96 	bl	8004a2c <W25qxx_Spi>
 8004b00:	4603      	mov	r3, r0
 8004b02:	461a      	mov	r2, r3
 8004b04:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <W25qxx_ReadUniqID+0x68>)
 8004b06:	4423      	add	r3, r4
 8004b08:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8004b0a:	79bb      	ldrb	r3, [r7, #6]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	71bb      	strb	r3, [r7, #6]
 8004b10:	79bb      	ldrb	r3, [r7, #6]
 8004b12:	2b07      	cmp	r3, #7
 8004b14:	d9f0      	bls.n	8004af8 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004b16:	2201      	movs	r2, #1
 8004b18:	2140      	movs	r1, #64	; 0x40
 8004b1a:	4803      	ldr	r0, [pc, #12]	; (8004b28 <W25qxx_ReadUniqID+0x64>)
 8004b1c:	f008 fc24 	bl	800d368 <HAL_GPIO_WritePin>
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd90      	pop	{r4, r7, pc}
 8004b28:	40020c00 	.word	0x40020c00
 8004b2c:	20009724 	.word	0x20009724

08004b30 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004b34:	2200      	movs	r2, #0
 8004b36:	2140      	movs	r1, #64	; 0x40
 8004b38:	4807      	ldr	r0, [pc, #28]	; (8004b58 <W25qxx_WriteEnable+0x28>)
 8004b3a:	f008 fc15 	bl	800d368 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8004b3e:	2006      	movs	r0, #6
 8004b40:	f7ff ff74 	bl	8004a2c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004b44:	2201      	movs	r2, #1
 8004b46:	2140      	movs	r1, #64	; 0x40
 8004b48:	4803      	ldr	r0, [pc, #12]	; (8004b58 <W25qxx_WriteEnable+0x28>)
 8004b4a:	f008 fc0d 	bl	800d368 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8004b4e:	2001      	movs	r0, #1
 8004b50:	f011 f9ce 	bl	8015ef0 <osDelay>
}
 8004b54:	bf00      	nop
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40020c00 	.word	0x40020c00

08004b5c <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8004b66:	2300      	movs	r3, #0
 8004b68:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	2140      	movs	r1, #64	; 0x40
 8004b6e:	481c      	ldr	r0, [pc, #112]	; (8004be0 <W25qxx_ReadStatusRegister+0x84>)
 8004b70:	f008 fbfa 	bl	800d368 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8004b74:	79fb      	ldrb	r3, [r7, #7]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d10c      	bne.n	8004b94 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8004b7a:	2005      	movs	r0, #5
 8004b7c:	f7ff ff56 	bl	8004a2c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004b80:	20a5      	movs	r0, #165	; 0xa5
 8004b82:	f7ff ff53 	bl	8004a2c <W25qxx_Spi>
 8004b86:	4603      	mov	r3, r0
 8004b88:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8004b8a:	4a16      	ldr	r2, [pc, #88]	; (8004be4 <W25qxx_ReadStatusRegister+0x88>)
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8004b92:	e01b      	b.n	8004bcc <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8004b94:	79fb      	ldrb	r3, [r7, #7]
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d10c      	bne.n	8004bb4 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8004b9a:	2035      	movs	r0, #53	; 0x35
 8004b9c:	f7ff ff46 	bl	8004a2c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004ba0:	20a5      	movs	r0, #165	; 0xa5
 8004ba2:	f7ff ff43 	bl	8004a2c <W25qxx_Spi>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8004baa:	4a0e      	ldr	r2, [pc, #56]	; (8004be4 <W25qxx_ReadStatusRegister+0x88>)
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
 8004bae:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8004bb2:	e00b      	b.n	8004bcc <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8004bb4:	2015      	movs	r0, #21
 8004bb6:	f7ff ff39 	bl	8004a2c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004bba:	20a5      	movs	r0, #165	; 0xa5
 8004bbc:	f7ff ff36 	bl	8004a2c <W25qxx_Spi>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8004bc4:	4a07      	ldr	r2, [pc, #28]	; (8004be4 <W25qxx_ReadStatusRegister+0x88>)
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004bcc:	2201      	movs	r2, #1
 8004bce:	2140      	movs	r1, #64	; 0x40
 8004bd0:	4803      	ldr	r0, [pc, #12]	; (8004be0 <W25qxx_ReadStatusRegister+0x84>)
 8004bd2:	f008 fbc9 	bl	800d368 <HAL_GPIO_WritePin>
	return status;
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40020c00 	.word	0x40020c00
 8004be4:	20009724 	.word	0x20009724

08004be8 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8004bec:	2001      	movs	r0, #1
 8004bee:	f011 f97f 	bl	8015ef0 <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	2140      	movs	r1, #64	; 0x40
 8004bf6:	480f      	ldr	r0, [pc, #60]	; (8004c34 <W25qxx_WaitForWriteEnd+0x4c>)
 8004bf8:	f008 fbb6 	bl	800d368 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8004bfc:	2005      	movs	r0, #5
 8004bfe:	f7ff ff15 	bl	8004a2c <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004c02:	20a5      	movs	r0, #165	; 0xa5
 8004c04:	f7ff ff12 	bl	8004a2c <W25qxx_Spi>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	4b0a      	ldr	r3, [pc, #40]	; (8004c38 <W25qxx_WaitForWriteEnd+0x50>)
 8004c0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8004c12:	2001      	movs	r0, #1
 8004c14:	f011 f96c 	bl	8015ef0 <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8004c18:	4b07      	ldr	r3, [pc, #28]	; (8004c38 <W25qxx_WaitForWriteEnd+0x50>)
 8004c1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1ed      	bne.n	8004c02 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004c26:	2201      	movs	r2, #1
 8004c28:	2140      	movs	r1, #64	; 0x40
 8004c2a:	4802      	ldr	r0, [pc, #8]	; (8004c34 <W25qxx_WaitForWriteEnd+0x4c>)
 8004c2c:	f008 fb9c 	bl	800d368 <HAL_GPIO_WritePin>
}
 8004c30:	bf00      	nop
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40020c00 	.word	0x40020c00
 8004c38:	20009724 	.word	0x20009724

08004c3c <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8004c42:	4b90      	ldr	r3, [pc, #576]	; (8004e84 <W25qxx_Init+0x248>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8004c4a:	e002      	b.n	8004c52 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8004c4c:	2001      	movs	r0, #1
 8004c4e:	f011 f94f 	bl	8015ef0 <osDelay>
	while (HAL_GetTick() < 100)
 8004c52:	f007 fc71 	bl	800c538 <HAL_GetTick>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b63      	cmp	r3, #99	; 0x63
 8004c5a:	d9f7      	bls.n	8004c4c <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	2140      	movs	r1, #64	; 0x40
 8004c60:	4889      	ldr	r0, [pc, #548]	; (8004e88 <W25qxx_Init+0x24c>)
 8004c62:	f008 fb81 	bl	800d368 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8004c66:	2064      	movs	r0, #100	; 0x64
 8004c68:	f011 f942 	bl	8015ef0 <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8004c6c:	4887      	ldr	r0, [pc, #540]	; (8004e8c <W25qxx_Init+0x250>)
 8004c6e:	f017 f95b 	bl	801bf28 <puts>
#endif
	id = W25qxx_ReadID();
 8004c72:	f7ff fef1 	bl	8004a58 <W25qxx_ReadID>
 8004c76:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	4885      	ldr	r0, [pc, #532]	; (8004e90 <W25qxx_Init+0x254>)
 8004c7c:	f017 f8ce 	bl	801be1c <iprintf>
#endif
	switch (id & 0x000000FF)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	3b11      	subs	r3, #17
 8004c86:	2b0f      	cmp	r3, #15
 8004c88:	f200 808b 	bhi.w	8004da2 <W25qxx_Init+0x166>
 8004c8c:	a201      	add	r2, pc, #4	; (adr r2, 8004c94 <W25qxx_Init+0x58>)
 8004c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c92:	bf00      	nop
 8004c94:	08004d8f 	.word	0x08004d8f
 8004c98:	08004d7b 	.word	0x08004d7b
 8004c9c:	08004d67 	.word	0x08004d67
 8004ca0:	08004d53 	.word	0x08004d53
 8004ca4:	08004d3f 	.word	0x08004d3f
 8004ca8:	08004d2b 	.word	0x08004d2b
 8004cac:	08004d17 	.word	0x08004d17
 8004cb0:	08004d01 	.word	0x08004d01
 8004cb4:	08004ceb 	.word	0x08004ceb
 8004cb8:	08004da3 	.word	0x08004da3
 8004cbc:	08004da3 	.word	0x08004da3
 8004cc0:	08004da3 	.word	0x08004da3
 8004cc4:	08004da3 	.word	0x08004da3
 8004cc8:	08004da3 	.word	0x08004da3
 8004ccc:	08004da3 	.word	0x08004da3
 8004cd0:	08004cd5 	.word	0x08004cd5
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8004cd4:	4b6b      	ldr	r3, [pc, #428]	; (8004e84 <W25qxx_Init+0x248>)
 8004cd6:	220a      	movs	r2, #10
 8004cd8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8004cda:	4b6a      	ldr	r3, [pc, #424]	; (8004e84 <W25qxx_Init+0x248>)
 8004cdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ce0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 8004ce2:	486c      	ldr	r0, [pc, #432]	; (8004e94 <W25qxx_Init+0x258>)
 8004ce4:	f017 f920 	bl	801bf28 <puts>
#endif
		break;
 8004ce8:	e064      	b.n	8004db4 <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8004cea:	4b66      	ldr	r3, [pc, #408]	; (8004e84 <W25qxx_Init+0x248>)
 8004cec:	2209      	movs	r2, #9
 8004cee:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8004cf0:	4b64      	ldr	r3, [pc, #400]	; (8004e84 <W25qxx_Init+0x248>)
 8004cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cf6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8004cf8:	4867      	ldr	r0, [pc, #412]	; (8004e98 <W25qxx_Init+0x25c>)
 8004cfa:	f017 f915 	bl	801bf28 <puts>
#endif
		break;
 8004cfe:	e059      	b.n	8004db4 <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8004d00:	4b60      	ldr	r3, [pc, #384]	; (8004e84 <W25qxx_Init+0x248>)
 8004d02:	2208      	movs	r2, #8
 8004d04:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8004d06:	4b5f      	ldr	r3, [pc, #380]	; (8004e84 <W25qxx_Init+0x248>)
 8004d08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d0c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 8004d0e:	4863      	ldr	r0, [pc, #396]	; (8004e9c <W25qxx_Init+0x260>)
 8004d10:	f017 f90a 	bl	801bf28 <puts>
#endif
		break;
 8004d14:	e04e      	b.n	8004db4 <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8004d16:	4b5b      	ldr	r3, [pc, #364]	; (8004e84 <W25qxx_Init+0x248>)
 8004d18:	2207      	movs	r2, #7
 8004d1a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8004d1c:	4b59      	ldr	r3, [pc, #356]	; (8004e84 <W25qxx_Init+0x248>)
 8004d1e:	2280      	movs	r2, #128	; 0x80
 8004d20:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 8004d22:	485f      	ldr	r0, [pc, #380]	; (8004ea0 <W25qxx_Init+0x264>)
 8004d24:	f017 f900 	bl	801bf28 <puts>
#endif
		break;
 8004d28:	e044      	b.n	8004db4 <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8004d2a:	4b56      	ldr	r3, [pc, #344]	; (8004e84 <W25qxx_Init+0x248>)
 8004d2c:	2206      	movs	r2, #6
 8004d2e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8004d30:	4b54      	ldr	r3, [pc, #336]	; (8004e84 <W25qxx_Init+0x248>)
 8004d32:	2240      	movs	r2, #64	; 0x40
 8004d34:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 8004d36:	485b      	ldr	r0, [pc, #364]	; (8004ea4 <W25qxx_Init+0x268>)
 8004d38:	f017 f8f6 	bl	801bf28 <puts>
#endif
		break;
 8004d3c:	e03a      	b.n	8004db4 <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8004d3e:	4b51      	ldr	r3, [pc, #324]	; (8004e84 <W25qxx_Init+0x248>)
 8004d40:	2205      	movs	r2, #5
 8004d42:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8004d44:	4b4f      	ldr	r3, [pc, #316]	; (8004e84 <W25qxx_Init+0x248>)
 8004d46:	2220      	movs	r2, #32
 8004d48:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 8004d4a:	4857      	ldr	r0, [pc, #348]	; (8004ea8 <W25qxx_Init+0x26c>)
 8004d4c:	f017 f8ec 	bl	801bf28 <puts>
#endif
		break;
 8004d50:	e030      	b.n	8004db4 <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8004d52:	4b4c      	ldr	r3, [pc, #304]	; (8004e84 <W25qxx_Init+0x248>)
 8004d54:	2204      	movs	r2, #4
 8004d56:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8004d58:	4b4a      	ldr	r3, [pc, #296]	; (8004e84 <W25qxx_Init+0x248>)
 8004d5a:	2210      	movs	r2, #16
 8004d5c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 8004d5e:	4853      	ldr	r0, [pc, #332]	; (8004eac <W25qxx_Init+0x270>)
 8004d60:	f017 f8e2 	bl	801bf28 <puts>
#endif
		break;
 8004d64:	e026      	b.n	8004db4 <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8004d66:	4b47      	ldr	r3, [pc, #284]	; (8004e84 <W25qxx_Init+0x248>)
 8004d68:	2203      	movs	r2, #3
 8004d6a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8004d6c:	4b45      	ldr	r3, [pc, #276]	; (8004e84 <W25qxx_Init+0x248>)
 8004d6e:	2208      	movs	r2, #8
 8004d70:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 8004d72:	484f      	ldr	r0, [pc, #316]	; (8004eb0 <W25qxx_Init+0x274>)
 8004d74:	f017 f8d8 	bl	801bf28 <puts>
#endif
		break;
 8004d78:	e01c      	b.n	8004db4 <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8004d7a:	4b42      	ldr	r3, [pc, #264]	; (8004e84 <W25qxx_Init+0x248>)
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8004d80:	4b40      	ldr	r3, [pc, #256]	; (8004e84 <W25qxx_Init+0x248>)
 8004d82:	2204      	movs	r2, #4
 8004d84:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 8004d86:	484b      	ldr	r0, [pc, #300]	; (8004eb4 <W25qxx_Init+0x278>)
 8004d88:	f017 f8ce 	bl	801bf28 <puts>
#endif
		break;
 8004d8c:	e012      	b.n	8004db4 <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8004d8e:	4b3d      	ldr	r3, [pc, #244]	; (8004e84 <W25qxx_Init+0x248>)
 8004d90:	2201      	movs	r2, #1
 8004d92:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8004d94:	4b3b      	ldr	r3, [pc, #236]	; (8004e84 <W25qxx_Init+0x248>)
 8004d96:	2202      	movs	r2, #2
 8004d98:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 8004d9a:	4847      	ldr	r0, [pc, #284]	; (8004eb8 <W25qxx_Init+0x27c>)
 8004d9c:	f017 f8c4 	bl	801bf28 <puts>
#endif
		break;
 8004da0:	e008      	b.n	8004db4 <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 8004da2:	4846      	ldr	r0, [pc, #280]	; (8004ebc <W25qxx_Init+0x280>)
 8004da4:	f017 f8c0 	bl	801bf28 <puts>
#endif
		w25qxx.Lock = 0;
 8004da8:	4b36      	ldr	r3, [pc, #216]	; (8004e84 <W25qxx_Init+0x248>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8004db0:	2300      	movs	r3, #0
 8004db2:	e063      	b.n	8004e7c <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 8004db4:	4b33      	ldr	r3, [pc, #204]	; (8004e84 <W25qxx_Init+0x248>)
 8004db6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004dba:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8004dbc:	4b31      	ldr	r3, [pc, #196]	; (8004e84 <W25qxx_Init+0x248>)
 8004dbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004dc2:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8004dc4:	4b2f      	ldr	r3, [pc, #188]	; (8004e84 <W25qxx_Init+0x248>)
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	011b      	lsls	r3, r3, #4
 8004dca:	4a2e      	ldr	r2, [pc, #184]	; (8004e84 <W25qxx_Init+0x248>)
 8004dcc:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8004dce:	4b2d      	ldr	r3, [pc, #180]	; (8004e84 <W25qxx_Init+0x248>)
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	4a2c      	ldr	r2, [pc, #176]	; (8004e84 <W25qxx_Init+0x248>)
 8004dd4:	6912      	ldr	r2, [r2, #16]
 8004dd6:	fb02 f303 	mul.w	r3, r2, r3
 8004dda:	4a2a      	ldr	r2, [pc, #168]	; (8004e84 <W25qxx_Init+0x248>)
 8004ddc:	8952      	ldrh	r2, [r2, #10]
 8004dde:	fbb3 f3f2 	udiv	r3, r3, r2
 8004de2:	4a28      	ldr	r2, [pc, #160]	; (8004e84 <W25qxx_Init+0x248>)
 8004de4:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8004de6:	4b27      	ldr	r3, [pc, #156]	; (8004e84 <W25qxx_Init+0x248>)
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	4a25      	ldr	r2, [pc, #148]	; (8004e84 <W25qxx_Init+0x248>)
 8004dee:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8004df0:	4b24      	ldr	r3, [pc, #144]	; (8004e84 <W25qxx_Init+0x248>)
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	4a23      	ldr	r2, [pc, #140]	; (8004e84 <W25qxx_Init+0x248>)
 8004df6:	6912      	ldr	r2, [r2, #16]
 8004df8:	fb02 f303 	mul.w	r3, r2, r3
 8004dfc:	0a9b      	lsrs	r3, r3, #10
 8004dfe:	4a21      	ldr	r2, [pc, #132]	; (8004e84 <W25qxx_Init+0x248>)
 8004e00:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8004e02:	f7ff fe5f 	bl	8004ac4 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8004e06:	2001      	movs	r0, #1
 8004e08:	f7ff fea8 	bl	8004b5c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8004e0c:	2002      	movs	r0, #2
 8004e0e:	f7ff fea5 	bl	8004b5c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8004e12:	2003      	movs	r0, #3
 8004e14:	f7ff fea2 	bl	8004b5c <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 8004e18:	4b1a      	ldr	r3, [pc, #104]	; (8004e84 <W25qxx_Init+0x248>)
 8004e1a:	895b      	ldrh	r3, [r3, #10]
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4828      	ldr	r0, [pc, #160]	; (8004ec0 <W25qxx_Init+0x284>)
 8004e20:	f016 fffc 	bl	801be1c <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 8004e24:	4b17      	ldr	r3, [pc, #92]	; (8004e84 <W25qxx_Init+0x248>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4826      	ldr	r0, [pc, #152]	; (8004ec4 <W25qxx_Init+0x288>)
 8004e2c:	f016 fff6 	bl	801be1c <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 8004e30:	4b14      	ldr	r3, [pc, #80]	; (8004e84 <W25qxx_Init+0x248>)
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	4619      	mov	r1, r3
 8004e36:	4824      	ldr	r0, [pc, #144]	; (8004ec8 <W25qxx_Init+0x28c>)
 8004e38:	f016 fff0 	bl	801be1c <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 8004e3c:	4b11      	ldr	r3, [pc, #68]	; (8004e84 <W25qxx_Init+0x248>)
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	4619      	mov	r1, r3
 8004e42:	4822      	ldr	r0, [pc, #136]	; (8004ecc <W25qxx_Init+0x290>)
 8004e44:	f016 ffea 	bl	801be1c <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8004e48:	4b0e      	ldr	r3, [pc, #56]	; (8004e84 <W25qxx_Init+0x248>)
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4820      	ldr	r0, [pc, #128]	; (8004ed0 <W25qxx_Init+0x294>)
 8004e50:	f016 ffe4 	bl	801be1c <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 8004e54:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <W25qxx_Init+0x248>)
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	4619      	mov	r1, r3
 8004e5a:	481e      	ldr	r0, [pc, #120]	; (8004ed4 <W25qxx_Init+0x298>)
 8004e5c:	f016 ffde 	bl	801be1c <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8004e60:	4b08      	ldr	r3, [pc, #32]	; (8004e84 <W25qxx_Init+0x248>)
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	4619      	mov	r1, r3
 8004e66:	481c      	ldr	r0, [pc, #112]	; (8004ed8 <W25qxx_Init+0x29c>)
 8004e68:	f016 ffd8 	bl	801be1c <iprintf>
	printf("w25qxx Init Done\r\n");
 8004e6c:	481b      	ldr	r0, [pc, #108]	; (8004edc <W25qxx_Init+0x2a0>)
 8004e6e:	f017 f85b 	bl	801bf28 <puts>
#endif
	w25qxx.Lock = 0;
 8004e72:	4b04      	ldr	r3, [pc, #16]	; (8004e84 <W25qxx_Init+0x248>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8004e7a:	2301      	movs	r3, #1
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	20009724 	.word	0x20009724
 8004e88:	40020c00 	.word	0x40020c00
 8004e8c:	08020f2c 	.word	0x08020f2c
 8004e90:	08020f44 	.word	0x08020f44
 8004e94:	08020f58 	.word	0x08020f58
 8004e98:	08020f70 	.word	0x08020f70
 8004e9c:	08020f88 	.word	0x08020f88
 8004ea0:	08020fa0 	.word	0x08020fa0
 8004ea4:	08020fb8 	.word	0x08020fb8
 8004ea8:	08020fd0 	.word	0x08020fd0
 8004eac:	08020fe8 	.word	0x08020fe8
 8004eb0:	08021000 	.word	0x08021000
 8004eb4:	08021018 	.word	0x08021018
 8004eb8:	08021030 	.word	0x08021030
 8004ebc:	08021048 	.word	0x08021048
 8004ec0:	0802105c 	.word	0x0802105c
 8004ec4:	0802107c 	.word	0x0802107c
 8004ec8:	08021094 	.word	0x08021094
 8004ecc:	080210b4 	.word	0x080210b4
 8004ed0:	080210d0 	.word	0x080210d0
 8004ed4:	080210f0 	.word	0x080210f0
 8004ed8:	0802110c 	.word	0x0802110c
 8004edc:	0802112c 	.word	0x0802112c

08004ee0 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8004ee8:	e002      	b.n	8004ef0 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8004eea:	2001      	movs	r0, #1
 8004eec:	f011 f800 	bl	8015ef0 <osDelay>
	while (w25qxx.Lock == 1)
 8004ef0:	4b2d      	ldr	r3, [pc, #180]	; (8004fa8 <W25qxx_EraseSector+0xc8>)
 8004ef2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d0f7      	beq.n	8004eea <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8004efa:	4b2b      	ldr	r3, [pc, #172]	; (8004fa8 <W25qxx_EraseSector+0xc8>)
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 8004f02:	f007 fb19 	bl	800c538 <HAL_GetTick>
 8004f06:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 8004f08:	6879      	ldr	r1, [r7, #4]
 8004f0a:	4828      	ldr	r0, [pc, #160]	; (8004fac <W25qxx_EraseSector+0xcc>)
 8004f0c:	f016 ff86 	bl	801be1c <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 8004f10:	f7ff fe6a 	bl	8004be8 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8004f14:	4b24      	ldr	r3, [pc, #144]	; (8004fa8 <W25qxx_EraseSector+0xc8>)
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	fb02 f303 	mul.w	r3, r2, r3
 8004f1e:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8004f20:	f7ff fe06 	bl	8004b30 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004f24:	2200      	movs	r2, #0
 8004f26:	2140      	movs	r1, #64	; 0x40
 8004f28:	4821      	ldr	r0, [pc, #132]	; (8004fb0 <W25qxx_EraseSector+0xd0>)
 8004f2a:	f008 fa1d 	bl	800d368 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004f2e:	4b1e      	ldr	r3, [pc, #120]	; (8004fa8 <W25qxx_EraseSector+0xc8>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	d909      	bls.n	8004f4a <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 8004f36:	2021      	movs	r0, #33	; 0x21
 8004f38:	f7ff fd78 	bl	8004a2c <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	0e1b      	lsrs	r3, r3, #24
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff fd72 	bl	8004a2c <W25qxx_Spi>
 8004f48:	e002      	b.n	8004f50 <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 8004f4a:	2020      	movs	r0, #32
 8004f4c:	f7ff fd6e 	bl	8004a2c <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	0c1b      	lsrs	r3, r3, #16
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff fd68 	bl	8004a2c <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	0a1b      	lsrs	r3, r3, #8
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7ff fd62 	bl	8004a2c <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7ff fd5d 	bl	8004a2c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004f72:	2201      	movs	r2, #1
 8004f74:	2140      	movs	r1, #64	; 0x40
 8004f76:	480e      	ldr	r0, [pc, #56]	; (8004fb0 <W25qxx_EraseSector+0xd0>)
 8004f78:	f008 f9f6 	bl	800d368 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004f7c:	f7ff fe34 	bl	8004be8 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 8004f80:	f007 fada 	bl	800c538 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4809      	ldr	r0, [pc, #36]	; (8004fb4 <W25qxx_EraseSector+0xd4>)
 8004f8e:	f016 ff45 	bl	801be1c <iprintf>
#endif
	W25qxx_Delay(1);
 8004f92:	2001      	movs	r0, #1
 8004f94:	f010 ffac 	bl	8015ef0 <osDelay>
	w25qxx.Lock = 0;
 8004f98:	4b03      	ldr	r3, [pc, #12]	; (8004fa8 <W25qxx_EraseSector+0xc8>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004fa0:	bf00      	nop
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20009724 	.word	0x20009724
 8004fac:	08021184 	.word	0x08021184
 8004fb0:	40020c00 	.word	0x40020c00
 8004fb4:	080211a8 	.word	0x080211a8

08004fb8 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8004fc0:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <W25qxx_SectorToPage+0x28>)
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	fb02 f303 	mul.w	r3, r2, r3
 8004fca:	4a05      	ldr	r2, [pc, #20]	; (8004fe0 <W25qxx_SectorToPage+0x28>)
 8004fcc:	8952      	ldrh	r2, [r2, #10]
 8004fce:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	20009724 	.word	0x20009724

08004fe4 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004ff2:	e002      	b.n	8004ffa <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8004ff4:	2001      	movs	r0, #1
 8004ff6:	f010 ff7b 	bl	8015ef0 <osDelay>
	while (w25qxx.Lock == 1)
 8004ffa:	4b57      	ldr	r3, [pc, #348]	; (8005158 <W25qxx_WritePage+0x174>)
 8004ffc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005000:	2b01      	cmp	r3, #1
 8005002:	d0f7      	beq.n	8004ff4 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8005004:	4b54      	ldr	r3, [pc, #336]	; (8005158 <W25qxx_WritePage+0x174>)
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4413      	add	r3, r2
 8005012:	4a51      	ldr	r2, [pc, #324]	; (8005158 <W25qxx_WritePage+0x174>)
 8005014:	8952      	ldrh	r2, [r2, #10]
 8005016:	4293      	cmp	r3, r2
 8005018:	d802      	bhi.n	8005020 <W25qxx_WritePage+0x3c>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d105      	bne.n	800502c <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8005020:	4b4d      	ldr	r3, [pc, #308]	; (8005158 <W25qxx_WritePage+0x174>)
 8005022:	895b      	ldrh	r3, [r3, #10]
 8005024:	461a      	mov	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	4413      	add	r3, r2
 8005032:	4a49      	ldr	r2, [pc, #292]	; (8005158 <W25qxx_WritePage+0x174>)
 8005034:	8952      	ldrh	r2, [r2, #10]
 8005036:	4293      	cmp	r3, r2
 8005038:	d905      	bls.n	8005046 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800503a:	4b47      	ldr	r3, [pc, #284]	; (8005158 <W25qxx_WritePage+0x174>)
 800503c:	895b      	ldrh	r3, [r3, #10]
 800503e:	461a      	mov	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	68b9      	ldr	r1, [r7, #8]
 800504c:	4843      	ldr	r0, [pc, #268]	; (800515c <W25qxx_WritePage+0x178>)
 800504e:	f016 fee5 	bl	801be1c <iprintf>
	W25qxx_Delay(100);
 8005052:	2064      	movs	r0, #100	; 0x64
 8005054:	f010 ff4c 	bl	8015ef0 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8005058:	f007 fa6e 	bl	800c538 <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 800505e:	f7ff fdc3 	bl	8004be8 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8005062:	f7ff fd65 	bl	8004b30 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8005066:	2200      	movs	r2, #0
 8005068:	2140      	movs	r1, #64	; 0x40
 800506a:	483d      	ldr	r0, [pc, #244]	; (8005160 <W25qxx_WritePage+0x17c>)
 800506c:	f008 f97c 	bl	800d368 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8005070:	4b39      	ldr	r3, [pc, #228]	; (8005158 <W25qxx_WritePage+0x174>)
 8005072:	895b      	ldrh	r3, [r3, #10]
 8005074:	461a      	mov	r2, r3
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	fb03 f302 	mul.w	r3, r3, r2
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	4413      	add	r3, r2
 8005080:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8005082:	4b35      	ldr	r3, [pc, #212]	; (8005158 <W25qxx_WritePage+0x174>)
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2b08      	cmp	r3, #8
 8005088:	d909      	bls.n	800509e <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 800508a:	2012      	movs	r0, #18
 800508c:	f7ff fcce 	bl	8004a2c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	0e1b      	lsrs	r3, r3, #24
 8005094:	b2db      	uxtb	r3, r3
 8005096:	4618      	mov	r0, r3
 8005098:	f7ff fcc8 	bl	8004a2c <W25qxx_Spi>
 800509c:	e002      	b.n	80050a4 <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 800509e:	2002      	movs	r0, #2
 80050a0:	f7ff fcc4 	bl	8004a2c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	0c1b      	lsrs	r3, r3, #16
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff fcbe 	bl	8004a2c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	0a1b      	lsrs	r3, r3, #8
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7ff fcb8 	bl	8004a2c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff fcb3 	bl	8004a2c <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	2364      	movs	r3, #100	; 0x64
 80050cc:	68f9      	ldr	r1, [r7, #12]
 80050ce:	4825      	ldr	r0, [pc, #148]	; (8005164 <W25qxx_WritePage+0x180>)
 80050d0:	f00a ffd5 	bl	801007e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80050d4:	2201      	movs	r2, #1
 80050d6:	2140      	movs	r1, #64	; 0x40
 80050d8:	4821      	ldr	r0, [pc, #132]	; (8005160 <W25qxx_WritePage+0x17c>)
 80050da:	f008 f945 	bl	800d368 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80050de:	f7ff fd83 	bl	8004be8 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 80050e2:	f007 fa29 	bl	800c538 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80050ee:	2300      	movs	r3, #0
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	e018      	b.n	8005126 <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f003 0307 	and.w	r3, r3, #7
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d108      	bne.n	8005110 <W25qxx_WritePage+0x12c>
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	2b02      	cmp	r3, #2
 8005102:	d905      	bls.n	8005110 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 8005104:	4818      	ldr	r0, [pc, #96]	; (8005168 <W25qxx_WritePage+0x184>)
 8005106:	f016 ff0f 	bl	801bf28 <puts>
			W25qxx_Delay(10);
 800510a:	200a      	movs	r0, #10
 800510c:	f010 fef0 	bl	8015ef0 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	4413      	add	r3, r2
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	4619      	mov	r1, r3
 800511a:	4814      	ldr	r0, [pc, #80]	; (800516c <W25qxx_WritePage+0x188>)
 800511c:	f016 fe7e 	bl	801be1c <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	3301      	adds	r3, #1
 8005124:	617b      	str	r3, [r7, #20]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	429a      	cmp	r2, r3
 800512c:	d3e2      	bcc.n	80050f4 <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 800512e:	480e      	ldr	r0, [pc, #56]	; (8005168 <W25qxx_WritePage+0x184>)
 8005130:	f016 fefa 	bl	801bf28 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 8005134:	6939      	ldr	r1, [r7, #16]
 8005136:	480e      	ldr	r0, [pc, #56]	; (8005170 <W25qxx_WritePage+0x18c>)
 8005138:	f016 fe70 	bl	801be1c <iprintf>
	W25qxx_Delay(100);
 800513c:	2064      	movs	r0, #100	; 0x64
 800513e:	f010 fed7 	bl	8015ef0 <osDelay>
#endif
	W25qxx_Delay(1);
 8005142:	2001      	movs	r0, #1
 8005144:	f010 fed4 	bl	8015ef0 <osDelay>
	w25qxx.Lock = 0;
 8005148:	4b03      	ldr	r3, [pc, #12]	; (8005158 <W25qxx_WritePage+0x174>)
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8005150:	bf00      	nop
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	20009724 	.word	0x20009724
 800515c:	0802140c 	.word	0x0802140c
 8005160:	40020c00 	.word	0x40020c00
 8005164:	20008804 	.word	0x20008804
 8005168:	08021448 	.word	0x08021448
 800516c:	0802144c 	.word	0x0802144c
 8005170:	08021454 	.word	0x08021454

08005174 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b088      	sub	sp, #32
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8005182:	4b36      	ldr	r3, [pc, #216]	; (800525c <W25qxx_WriteSector+0xe8>)
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	429a      	cmp	r2, r3
 800518a:	d802      	bhi.n	8005192 <W25qxx_WriteSector+0x1e>
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d102      	bne.n	8005198 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8005192:	4b32      	ldr	r3, [pc, #200]	; (800525c <W25qxx_WriteSector+0xe8>)
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	68b9      	ldr	r1, [r7, #8]
 800519e:	4830      	ldr	r0, [pc, #192]	; (8005260 <W25qxx_WriteSector+0xec>)
 80051a0:	f016 fe3c 	bl	801be1c <iprintf>
	W25qxx_Delay(100);
 80051a4:	2064      	movs	r0, #100	; 0x64
 80051a6:	f010 fea3 	bl	8015ef0 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80051aa:	4b2c      	ldr	r3, [pc, #176]	; (800525c <W25qxx_WriteSector+0xe8>)
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d306      	bcc.n	80051c2 <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 80051b4:	482b      	ldr	r0, [pc, #172]	; (8005264 <W25qxx_WriteSector+0xf0>)
 80051b6:	f016 feb7 	bl	801bf28 <puts>
		W25qxx_Delay(100);
 80051ba:	2064      	movs	r0, #100	; 0x64
 80051bc:	f010 fe98 	bl	8015ef0 <osDelay>
#endif
		return;
 80051c0:	e048      	b.n	8005254 <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	441a      	add	r2, r3
 80051c8:	4b24      	ldr	r3, [pc, #144]	; (800525c <W25qxx_WriteSector+0xe8>)
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d905      	bls.n	80051dc <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 80051d0:	4b22      	ldr	r3, [pc, #136]	; (800525c <W25qxx_WriteSector+0xe8>)
 80051d2:	691a      	ldr	r2, [r3, #16]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	61bb      	str	r3, [r7, #24]
 80051da:	e001      	b.n	80051e0 <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80051e0:	68b8      	ldr	r0, [r7, #8]
 80051e2:	f7ff fee9 	bl	8004fb8 <W25qxx_SectorToPage>
 80051e6:	4602      	mov	r2, r0
 80051e8:	4b1c      	ldr	r3, [pc, #112]	; (800525c <W25qxx_WriteSector+0xe8>)
 80051ea:	895b      	ldrh	r3, [r3, #10]
 80051ec:	4619      	mov	r1, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80051f4:	4413      	add	r3, r2
 80051f6:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80051f8:	4b18      	ldr	r3, [pc, #96]	; (800525c <W25qxx_WriteSector+0xe8>)
 80051fa:	895b      	ldrh	r3, [r3, #10]
 80051fc:	461a      	mov	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	fbb3 f1f2 	udiv	r1, r3, r2
 8005204:	fb02 f201 	mul.w	r2, r2, r1
 8005208:	1a9b      	subs	r3, r3, r2
 800520a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	69f9      	ldr	r1, [r7, #28]
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f7ff fee6 	bl	8004fe4 <W25qxx_WritePage>
		StartPage++;
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	3301      	adds	r3, #1
 800521c:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 800521e:	4b0f      	ldr	r3, [pc, #60]	; (800525c <W25qxx_WriteSector+0xe8>)
 8005220:	895b      	ldrh	r3, [r3, #10]
 8005222:	461a      	mov	r2, r3
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	1a9a      	subs	r2, r3, r2
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	4413      	add	r3, r2
 800522c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800522e:	4b0b      	ldr	r3, [pc, #44]	; (800525c <W25qxx_WriteSector+0xe8>)
 8005230:	895b      	ldrh	r3, [r3, #10]
 8005232:	461a      	mov	r2, r3
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4413      	add	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800523e:	2300      	movs	r3, #0
 8005240:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	2b00      	cmp	r3, #0
 8005246:	dce1      	bgt.n	800520c <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 8005248:	4807      	ldr	r0, [pc, #28]	; (8005268 <W25qxx_WriteSector+0xf4>)
 800524a:	f016 fe6d 	bl	801bf28 <puts>
	W25qxx_Delay(100);
 800524e:	2064      	movs	r0, #100	; 0x64
 8005250:	f010 fe4e 	bl	8015ef0 <osDelay>
#endif
}
 8005254:	3720      	adds	r7, #32
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20009724 	.word	0x20009724
 8005260:	08021478 	.word	0x08021478
 8005264:	080214b8 	.word	0x080214b8
 8005268:	080214d8 	.word	0x080214d8

0800526c <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800527a:	e002      	b.n	8005282 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 800527c:	2001      	movs	r0, #1
 800527e:	f010 fe37 	bl	8015ef0 <osDelay>
	while (w25qxx.Lock == 1)
 8005282:	4b54      	ldr	r3, [pc, #336]	; (80053d4 <W25qxx_ReadPage+0x168>)
 8005284:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005288:	2b01      	cmp	r3, #1
 800528a:	d0f7      	beq.n	800527c <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 800528c:	4b51      	ldr	r3, [pc, #324]	; (80053d4 <W25qxx_ReadPage+0x168>)
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8005294:	4b4f      	ldr	r3, [pc, #316]	; (80053d4 <W25qxx_ReadPage+0x168>)
 8005296:	895b      	ldrh	r3, [r3, #10]
 8005298:	461a      	mov	r2, r3
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	4293      	cmp	r3, r2
 800529e:	d802      	bhi.n	80052a6 <W25qxx_ReadPage+0x3a>
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d102      	bne.n	80052ac <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80052a6:	4b4b      	ldr	r3, [pc, #300]	; (80053d4 <W25qxx_ReadPage+0x168>)
 80052a8:	895b      	ldrh	r3, [r3, #10]
 80052aa:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	4413      	add	r3, r2
 80052b2:	4a48      	ldr	r2, [pc, #288]	; (80053d4 <W25qxx_ReadPage+0x168>)
 80052b4:	8952      	ldrh	r2, [r2, #10]
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d905      	bls.n	80052c6 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80052ba:	4b46      	ldr	r3, [pc, #280]	; (80053d4 <W25qxx_ReadPage+0x168>)
 80052bc:	895b      	ldrh	r3, [r3, #10]
 80052be:	461a      	mov	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	68b9      	ldr	r1, [r7, #8]
 80052cc:	4842      	ldr	r0, [pc, #264]	; (80053d8 <W25qxx_ReadPage+0x16c>)
 80052ce:	f016 fda5 	bl	801be1c <iprintf>
	W25qxx_Delay(100);
 80052d2:	2064      	movs	r0, #100	; 0x64
 80052d4:	f010 fe0c 	bl	8015ef0 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 80052d8:	f007 f92e 	bl	800c538 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 80052de:	4b3d      	ldr	r3, [pc, #244]	; (80053d4 <W25qxx_ReadPage+0x168>)
 80052e0:	895b      	ldrh	r3, [r3, #10]
 80052e2:	461a      	mov	r2, r3
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	fb03 f302 	mul.w	r3, r3, r2
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	4413      	add	r3, r2
 80052ee:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80052f0:	2200      	movs	r2, #0
 80052f2:	2140      	movs	r1, #64	; 0x40
 80052f4:	4839      	ldr	r0, [pc, #228]	; (80053dc <W25qxx_ReadPage+0x170>)
 80052f6:	f008 f837 	bl	800d368 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80052fa:	4b36      	ldr	r3, [pc, #216]	; (80053d4 <W25qxx_ReadPage+0x168>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d909      	bls.n	8005316 <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 8005302:	200c      	movs	r0, #12
 8005304:	f7ff fb92 	bl	8004a2c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	0e1b      	lsrs	r3, r3, #24
 800530c:	b2db      	uxtb	r3, r3
 800530e:	4618      	mov	r0, r3
 8005310:	f7ff fb8c 	bl	8004a2c <W25qxx_Spi>
 8005314:	e002      	b.n	800531c <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8005316:	200b      	movs	r0, #11
 8005318:	f7ff fb88 	bl	8004a2c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	0c1b      	lsrs	r3, r3, #16
 8005320:	b2db      	uxtb	r3, r3
 8005322:	4618      	mov	r0, r3
 8005324:	f7ff fb82 	bl	8004a2c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	0a1b      	lsrs	r3, r3, #8
 800532c:	b2db      	uxtb	r3, r3
 800532e:	4618      	mov	r0, r3
 8005330:	f7ff fb7c 	bl	8004a2c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	b2db      	uxtb	r3, r3
 8005338:	4618      	mov	r0, r3
 800533a:	f7ff fb77 	bl	8004a2c <W25qxx_Spi>
	W25qxx_Spi(0);
 800533e:	2000      	movs	r0, #0
 8005340:	f7ff fb74 	bl	8004a2c <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	b29a      	uxth	r2, r3
 8005348:	2364      	movs	r3, #100	; 0x64
 800534a:	68f9      	ldr	r1, [r7, #12]
 800534c:	4824      	ldr	r0, [pc, #144]	; (80053e0 <W25qxx_ReadPage+0x174>)
 800534e:	f00a ffd2 	bl	80102f6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005352:	2201      	movs	r2, #1
 8005354:	2140      	movs	r1, #64	; 0x40
 8005356:	4821      	ldr	r0, [pc, #132]	; (80053dc <W25qxx_ReadPage+0x170>)
 8005358:	f008 f806 	bl	800d368 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 800535c:	f007 f8ec 	bl	800c538 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8005368:	2300      	movs	r3, #0
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	e018      	b.n	80053a0 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	2b00      	cmp	r3, #0
 8005376:	d108      	bne.n	800538a <W25qxx_ReadPage+0x11e>
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2b02      	cmp	r3, #2
 800537c:	d905      	bls.n	800538a <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 800537e:	4819      	ldr	r0, [pc, #100]	; (80053e4 <W25qxx_ReadPage+0x178>)
 8005380:	f016 fdd2 	bl	801bf28 <puts>
			W25qxx_Delay(10);
 8005384:	200a      	movs	r0, #10
 8005386:	f010 fdb3 	bl	8015ef0 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	4413      	add	r3, r2
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	4619      	mov	r1, r3
 8005394:	4814      	ldr	r0, [pc, #80]	; (80053e8 <W25qxx_ReadPage+0x17c>)
 8005396:	f016 fd41 	bl	801be1c <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	3301      	adds	r3, #1
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d3e2      	bcc.n	800536e <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 80053a8:	480e      	ldr	r0, [pc, #56]	; (80053e4 <W25qxx_ReadPage+0x178>)
 80053aa:	f016 fdbd 	bl	801bf28 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 80053ae:	6939      	ldr	r1, [r7, #16]
 80053b0:	480e      	ldr	r0, [pc, #56]	; (80053ec <W25qxx_ReadPage+0x180>)
 80053b2:	f016 fd33 	bl	801be1c <iprintf>
	W25qxx_Delay(100);
 80053b6:	2064      	movs	r0, #100	; 0x64
 80053b8:	f010 fd9a 	bl	8015ef0 <osDelay>
#endif
	W25qxx_Delay(1);
 80053bc:	2001      	movs	r0, #1
 80053be:	f010 fd97 	bl	8015ef0 <osDelay>
	w25qxx.Lock = 0;
 80053c2:	4b04      	ldr	r3, [pc, #16]	; (80053d4 <W25qxx_ReadPage+0x168>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80053ca:	bf00      	nop
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20009724 	.word	0x20009724
 80053d8:	08021624 	.word	0x08021624
 80053dc:	40020c00 	.word	0x40020c00
 80053e0:	20008804 	.word	0x20008804
 80053e4:	08021448 	.word	0x08021448
 80053e8:	0802144c 	.word	0x0802144c
 80053ec:	08021660 	.word	0x08021660

080053f0 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 80053fe:	4b36      	ldr	r3, [pc, #216]	; (80054d8 <W25qxx_ReadSector+0xe8>)
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d802      	bhi.n	800540e <W25qxx_ReadSector+0x1e>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d102      	bne.n	8005414 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 800540e:	4b32      	ldr	r3, [pc, #200]	; (80054d8 <W25qxx_ReadSector+0xe8>)
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	68b9      	ldr	r1, [r7, #8]
 800541a:	4830      	ldr	r0, [pc, #192]	; (80054dc <W25qxx_ReadSector+0xec>)
 800541c:	f016 fcfe 	bl	801be1c <iprintf>
	W25qxx_Delay(100);
 8005420:	2064      	movs	r0, #100	; 0x64
 8005422:	f010 fd65 	bl	8015ef0 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8005426:	4b2c      	ldr	r3, [pc, #176]	; (80054d8 <W25qxx_ReadSector+0xe8>)
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	429a      	cmp	r2, r3
 800542e:	d306      	bcc.n	800543e <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 8005430:	482b      	ldr	r0, [pc, #172]	; (80054e0 <W25qxx_ReadSector+0xf0>)
 8005432:	f016 fd79 	bl	801bf28 <puts>
		W25qxx_Delay(100);
 8005436:	2064      	movs	r0, #100	; 0x64
 8005438:	f010 fd5a 	bl	8015ef0 <osDelay>
#endif
		return;
 800543c:	e048      	b.n	80054d0 <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	441a      	add	r2, r3
 8005444:	4b24      	ldr	r3, [pc, #144]	; (80054d8 <W25qxx_ReadSector+0xe8>)
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	429a      	cmp	r2, r3
 800544a:	d905      	bls.n	8005458 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 800544c:	4b22      	ldr	r3, [pc, #136]	; (80054d8 <W25qxx_ReadSector+0xe8>)
 800544e:	691a      	ldr	r2, [r3, #16]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	61bb      	str	r3, [r7, #24]
 8005456:	e001      	b.n	800545c <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 800545c:	68b8      	ldr	r0, [r7, #8]
 800545e:	f7ff fdab 	bl	8004fb8 <W25qxx_SectorToPage>
 8005462:	4602      	mov	r2, r0
 8005464:	4b1c      	ldr	r3, [pc, #112]	; (80054d8 <W25qxx_ReadSector+0xe8>)
 8005466:	895b      	ldrh	r3, [r3, #10]
 8005468:	4619      	mov	r1, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005470:	4413      	add	r3, r2
 8005472:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8005474:	4b18      	ldr	r3, [pc, #96]	; (80054d8 <W25qxx_ReadSector+0xe8>)
 8005476:	895b      	ldrh	r3, [r3, #10]
 8005478:	461a      	mov	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005480:	fb02 f201 	mul.w	r2, r2, r1
 8005484:	1a9b      	subs	r3, r3, r2
 8005486:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	69f9      	ldr	r1, [r7, #28]
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f7ff feec 	bl	800526c <W25qxx_ReadPage>
		StartPage++;
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	3301      	adds	r3, #1
 8005498:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 800549a:	4b0f      	ldr	r3, [pc, #60]	; (80054d8 <W25qxx_ReadSector+0xe8>)
 800549c:	895b      	ldrh	r3, [r3, #10]
 800549e:	461a      	mov	r2, r3
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	1a9a      	subs	r2, r3, r2
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	4413      	add	r3, r2
 80054a8:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80054aa:	4b0b      	ldr	r3, [pc, #44]	; (80054d8 <W25qxx_ReadSector+0xe8>)
 80054ac:	895b      	ldrh	r3, [r3, #10]
 80054ae:	461a      	mov	r2, r3
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4413      	add	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80054ba:	2300      	movs	r3, #0
 80054bc:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	dce1      	bgt.n	8005488 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 80054c4:	4807      	ldr	r0, [pc, #28]	; (80054e4 <W25qxx_ReadSector+0xf4>)
 80054c6:	f016 fd2f 	bl	801bf28 <puts>
	W25qxx_Delay(100);
 80054ca:	2064      	movs	r0, #100	; 0x64
 80054cc:	f010 fd10 	bl	8015ef0 <osDelay>
#endif
}
 80054d0:	3720      	adds	r7, #32
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	20009724 	.word	0x20009724
 80054dc:	08021684 	.word	0x08021684
 80054e0:	080216c4 	.word	0x080216c4
 80054e4:	080216e4 	.word	0x080216e4

080054e8 <VR_Power_On>:


#include "main.h"


void VR_Power_On(void) {
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, SET);
 80054ec:	2201      	movs	r2, #1
 80054ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054f2:	4804      	ldr	r0, [pc, #16]	; (8005504 <VR_Power_On+0x1c>)
 80054f4:	f007 ff38 	bl	800d368 <HAL_GPIO_WritePin>
	// note that runcam needs around 3-5 seconds to fully power on
	HAL_Delay(5000);
 80054f8:	f241 3088 	movw	r0, #5000	; 0x1388
 80054fc:	f007 f828 	bl	800c550 <HAL_Delay>
}
 8005500:	bf00      	nop
 8005502:	bd80      	pop	{r7, pc}
 8005504:	40021800 	.word	0x40021800

08005508 <VR_Power_Off>:

void VR_Power_Off(void) {
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET);
 800550c:	2200      	movs	r2, #0
 800550e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005512:	4802      	ldr	r0, [pc, #8]	; (800551c <VR_Power_Off+0x14>)
 8005514:	f007 ff28 	bl	800d368 <HAL_GPIO_WritePin>
}
 8005518:	bf00      	nop
 800551a:	bd80      	pop	{r7, pc}
 800551c:	40021800 	.word	0x40021800

08005520 <VR_Start_Rec>:

void VR_Start_Rec(void) {
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, SET); // HIGH = start record
 8005524:	2201      	movs	r2, #1
 8005526:	2180      	movs	r1, #128	; 0x80
 8005528:	4802      	ldr	r0, [pc, #8]	; (8005534 <VR_Start_Rec+0x14>)
 800552a:	f007 ff1d 	bl	800d368 <HAL_GPIO_WritePin>
}
 800552e:	bf00      	nop
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40020c00 	.word	0x40020c00

08005538 <VR_Stop_Rec>:

void VR_Stop_Rec(void) {
 8005538:	b580      	push	{r7, lr}
 800553a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); // LOW = stop recording
 800553c:	2200      	movs	r2, #0
 800553e:	2180      	movs	r1, #128	; 0x80
 8005540:	4802      	ldr	r0, [pc, #8]	; (800554c <VR_Stop_Rec+0x14>)
 8005542:	f007 ff11 	bl	800d368 <HAL_GPIO_WritePin>
}
 8005546:	bf00      	nop
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	40020c00 	.word	0x40020c00

08005550 <Max31855_Read_Temp>:
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
float Max31855_Read_Temp(void) {
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
	int Temp = 0;                                        // Temperature Variable
 8005556:	2300      	movs	r3, #0
 8005558:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 800555a:	2200      	movs	r2, #0
 800555c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005560:	483b      	ldr	r0, [pc, #236]	; (8005650 <Max31855_Read_Temp+0x100>)
 8005562:	f007 ff01 	bl	800d368 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);                // DATA Transfer
 8005566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800556a:	2204      	movs	r2, #4
 800556c:	4939      	ldr	r1, [pc, #228]	; (8005654 <Max31855_Read_Temp+0x104>)
 800556e:	483a      	ldr	r0, [pc, #232]	; (8005658 <Max31855_Read_Temp+0x108>)
 8005570:	f00a fec1 	bl	80102f6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 8005574:	2201      	movs	r2, #1
 8005576:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800557a:	4835      	ldr	r0, [pc, #212]	; (8005650 <Max31855_Read_Temp+0x100>)
 800557c:	f007 fef4 	bl	800d368 <HAL_GPIO_WritePin>


	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 8005580:	4b34      	ldr	r3, [pc, #208]	; (8005654 <Max31855_Read_Temp+0x104>)
 8005582:	78db      	ldrb	r3, [r3, #3]
 8005584:	461a      	mov	r2, r3
 8005586:	4b33      	ldr	r3, [pc, #204]	; (8005654 <Max31855_Read_Temp+0x104>)
 8005588:	789b      	ldrb	r3, [r3, #2]
 800558a:	021b      	lsls	r3, r3, #8
 800558c:	431a      	orrs	r2, r3
 800558e:	4b31      	ldr	r3, [pc, #196]	; (8005654 <Max31855_Read_Temp+0x104>)
 8005590:	785b      	ldrb	r3, [r3, #1]
 8005592:	041b      	lsls	r3, r3, #16
 8005594:	431a      	orrs	r2, r3
 8005596:	4b2f      	ldr	r3, [pc, #188]	; (8005654 <Max31855_Read_Temp+0x104>)
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	061b      	lsls	r3, r3, #24
 800559c:	4313      	orrs	r3, r2
 800559e:	603b      	str	r3, [r7, #0]

	Error = v & 0x07;								  // Error Detection
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	f003 0307 	and.w	r3, r3, #7
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	4b2c      	ldr	r3, [pc, #176]	; (800565c <Max31855_Read_Temp+0x10c>)
 80055ac:	701a      	strb	r2, [r3, #0]



		sign = (DATARX[0] & (0x80)) >> 7;					// Sign Bit calculation
 80055ae:	4b29      	ldr	r3, [pc, #164]	; (8005654 <Max31855_Read_Temp+0x104>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	09db      	lsrs	r3, r3, #7
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	461a      	mov	r2, r3
 80055b8:	4b29      	ldr	r3, [pc, #164]	; (8005660 <Max31855_Read_Temp+0x110>)
 80055ba:	601a      	str	r2, [r3, #0]

		if (DATARX[3] & 0x07)								 // Returns Error Number
 80055bc:	4b25      	ldr	r3, [pc, #148]	; (8005654 <Max31855_Read_Temp+0x104>)
 80055be:	78db      	ldrb	r3, [r3, #3]
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d009      	beq.n	80055dc <Max31855_Read_Temp+0x8c>
			return (-1 * (DATARX[3] & 0x07));
 80055c8:	4b22      	ldr	r3, [pc, #136]	; (8005654 <Max31855_Read_Temp+0x104>)
 80055ca:	78db      	ldrb	r3, [r3, #3]
 80055cc:	f003 0307 	and.w	r3, r3, #7
 80055d0:	425b      	negs	r3, r3
 80055d2:	ee07 3a90 	vmov	s15, r3
 80055d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055da:	e033      	b.n	8005644 <Max31855_Read_Temp+0xf4>

		else if (sign == 1) {								// Negative Temperature
 80055dc:	4b20      	ldr	r3, [pc, #128]	; (8005660 <Max31855_Read_Temp+0x110>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d11d      	bne.n	8005620 <Max31855_Read_Temp+0xd0>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 80055e4:	4b1b      	ldr	r3, [pc, #108]	; (8005654 <Max31855_Read_Temp+0x104>)
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	019b      	lsls	r3, r3, #6
 80055ea:	4a1a      	ldr	r2, [pc, #104]	; (8005654 <Max31855_Read_Temp+0x104>)
 80055ec:	7852      	ldrb	r2, [r2, #1]
 80055ee:	0892      	lsrs	r2, r2, #2
 80055f0:	b2d2      	uxtb	r2, r2
 80055f2:	4313      	orrs	r3, r2
 80055f4:	607b      	str	r3, [r7, #4]
			Temp &= 0b01111111111111;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055fc:	607b      	str	r3, [r7, #4]
			Temp ^= 0b01111111111111;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 8005604:	f083 031f 	eor.w	r3, r3, #31
 8005608:	607b      	str	r3, [r7, #4]
			return ((float) -Temp / 4);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	425b      	negs	r3, r3
 800560e:	ee07 3a90 	vmov	s15, r3
 8005612:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005616:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800561a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800561e:	e011      	b.n	8005644 <Max31855_Read_Temp+0xf4>
		}

		else												 // Positive Temperature
		{
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8005620:	4b0c      	ldr	r3, [pc, #48]	; (8005654 <Max31855_Read_Temp+0x104>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	019b      	lsls	r3, r3, #6
 8005626:	4a0b      	ldr	r2, [pc, #44]	; (8005654 <Max31855_Read_Temp+0x104>)
 8005628:	7852      	ldrb	r2, [r2, #1]
 800562a:	0892      	lsrs	r2, r2, #2
 800562c:	b2d2      	uxtb	r2, r2
 800562e:	4313      	orrs	r3, r2
 8005630:	607b      	str	r3, [r7, #4]
			return ((float) Temp / 4.0);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	ee07 3a90 	vmov	s15, r3
 8005638:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800563c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005640:	eec7 7a26 	vdiv.f32	s15, s14, s13

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
	return centigrade;
	*/
}
 8005644:	eeb0 0a67 	vmov.f32	s0, s15
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	40021000 	.word	0x40021000
 8005654:	2000974c 	.word	0x2000974c
 8005658:	2000885c 	.word	0x2000885c
 800565c:	2000053c 	.word	0x2000053c
 8005660:	20000540 	.word	0x20000540

08005664 <MRT_pollPropulsion>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_pollPropulsion(void){
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
	MRT_getThermoTemp();
 8005668:	f000 f806 	bl	8005678 <MRT_getThermoTemp>
	MRT_getTransducerVoltage();
 800566c:	f000 f812 	bl	8005694 <MRT_getTransducerVoltage>
	MRT_getValveStatus();
 8005670:	f000 f820 	bl	80056b4 <MRT_getValveStatus>
}
 8005674:	bf00      	nop
 8005676:	bd80      	pop	{r7, pc}

08005678 <MRT_getThermoTemp>:

void MRT_getThermoTemp(void){
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
	thermocouple_temperature = Max31855_Read_Temp();
 800567c:	f7ff ff68 	bl	8005550 <Max31855_Read_Temp>
 8005680:	eef0 7a40 	vmov.f32	s15, s0
 8005684:	4b02      	ldr	r3, [pc, #8]	; (8005690 <MRT_getThermoTemp+0x18>)
 8005686:	edc3 7a00 	vstr	s15, [r3]
}
 800568a:	bf00      	nop
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	20009784 	.word	0x20009784

08005694 <MRT_getTransducerVoltage>:

void MRT_getTransducerVoltage(void){
 8005694:	b580      	push	{r7, lr}
 8005696:	af00      	add	r7, sp, #0
	transducer_voltage = MRT_prop_poll_pressure_transducer(&TRANSDUCER_ADC);
 8005698:	4804      	ldr	r0, [pc, #16]	; (80056ac <MRT_getTransducerVoltage+0x18>)
 800569a:	f000 f85d 	bl	8005758 <MRT_prop_poll_pressure_transducer>
 800569e:	eef0 7a40 	vmov.f32	s15, s0
 80056a2:	4b03      	ldr	r3, [pc, #12]	; (80056b0 <MRT_getTransducerVoltage+0x1c>)
 80056a4:	edc3 7a00 	vstr	s15, [r3]
}
 80056a8:	bf00      	nop
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	20008664 	.word	0x20008664
 80056b0:	20009788 	.word	0x20009788

080056b4 <MRT_getValveStatus>:

void MRT_getValveStatus(void){
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
	valve_status = HAL_GPIO_ReadPin(IN_Prop_ActuatedVent_Feedback_GPIO_Port,IN_Prop_ActuatedVent_Feedback_Pin);
 80056b8:	2102      	movs	r1, #2
 80056ba:	4804      	ldr	r0, [pc, #16]	; (80056cc <MRT_getValveStatus+0x18>)
 80056bc:	f007 fe3c 	bl	800d338 <HAL_GPIO_ReadPin>
 80056c0:	4603      	mov	r3, r0
 80056c2:	461a      	mov	r2, r3
 80056c4:	4b02      	ldr	r3, [pc, #8]	; (80056d0 <MRT_getValveStatus+0x1c>)
 80056c6:	701a      	strb	r2, [r3, #0]
}
 80056c8:	bf00      	nop
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	40020400 	.word	0x40020400
 80056d0:	20009782 	.word	0x20009782

080056d4 <MRT_formatPropulsion>:

// formats propulsion telemetry string using sprintf
void MRT_formatPropulsion(void) {
 80056d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056d6:	b089      	sub	sp, #36	; 0x24
 80056d8:	af06      	add	r7, sp, #24
	memset(msg_buffer_pr, 0, 50);
 80056da:	2232      	movs	r2, #50	; 0x32
 80056dc:	2100      	movs	r1, #0
 80056de:	4816      	ldr	r0, [pc, #88]	; (8005738 <MRT_formatPropulsion+0x64>)
 80056e0:	f015 f9f2 	bl	801aac8 <memset>
	//tank_pressure = convert_prop_tank_pressure(); // convert buffered readings to voltage TODO??
	sprintf(msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 80056e4:	4b15      	ldr	r3, [pc, #84]	; (800573c <MRT_formatPropulsion+0x68>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7fa ff4d 	bl	8000588 <__aeabi_f2d>
 80056ee:	4604      	mov	r4, r0
 80056f0:	460d      	mov	r5, r1
 80056f2:	4b13      	ldr	r3, [pc, #76]	; (8005740 <MRT_formatPropulsion+0x6c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7fa ff46 	bl	8000588 <__aeabi_f2d>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	4910      	ldr	r1, [pc, #64]	; (8005744 <MRT_formatPropulsion+0x70>)
 8005702:	7809      	ldrb	r1, [r1, #0]
 8005704:	4608      	mov	r0, r1
 8005706:	4910      	ldr	r1, [pc, #64]	; (8005748 <MRT_formatPropulsion+0x74>)
 8005708:	7809      	ldrb	r1, [r1, #0]
 800570a:	460e      	mov	r6, r1
 800570c:	490f      	ldr	r1, [pc, #60]	; (800574c <MRT_formatPropulsion+0x78>)
 800570e:	7809      	ldrb	r1, [r1, #0]
 8005710:	6079      	str	r1, [r7, #4]
 8005712:	490f      	ldr	r1, [pc, #60]	; (8005750 <MRT_formatPropulsion+0x7c>)
 8005714:	6809      	ldr	r1, [r1, #0]
 8005716:	9105      	str	r1, [sp, #20]
 8005718:	6879      	ldr	r1, [r7, #4]
 800571a:	9104      	str	r1, [sp, #16]
 800571c:	9603      	str	r6, [sp, #12]
 800571e:	9002      	str	r0, [sp, #8]
 8005720:	e9cd 2300 	strd	r2, r3, [sp]
 8005724:	4622      	mov	r2, r4
 8005726:	462b      	mov	r3, r5
 8005728:	490a      	ldr	r1, [pc, #40]	; (8005754 <MRT_formatPropulsion+0x80>)
 800572a:	4803      	ldr	r0, [pc, #12]	; (8005738 <MRT_formatPropulsion+0x64>)
 800572c:	f016 fcc8 	bl	801c0c0 <siprintf>
			transducer_voltage, thermocouple_temperature, valve_status,
			prev_min, prev_sec, prev_subsec);
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005738:	20009750 	.word	0x20009750
 800573c:	20009788 	.word	0x20009788
 8005740:	20009784 	.word	0x20009784
 8005744:	20009782 	.word	0x20009782
 8005748:	2000041b 	.word	0x2000041b
 800574c:	2000041c 	.word	0x2000041c
 8005750:	20000420 	.word	0x20000420
 8005754:	08021778 	.word	0x08021778

08005758 <MRT_prop_poll_pressure_transducer>:
//PRIVATE FUNCTIONS

/*
 * Get the pressure transducer voltage (poll ADC)
 */
float MRT_prop_poll_pressure_transducer(ADC_HandleTypeDef* hadc) {
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
	// reading adc
	HAL_ADC_Start(hadc);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f006 ff5d 	bl	800c620 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 8005766:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f007 f85d 	bl	800c82a <HAL_ADC_PollForConversion>
	uint32_t pressure_sensor_raw = HAL_ADC_GetValue(hadc);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f007 f8e5 	bl	800c940 <HAL_ADC_GetValue>
 8005776:	60f8      	str	r0, [r7, #12]
	HAL_ADC_Stop(hadc);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f007 f823 	bl	800c7c4 <HAL_ADC_Stop>

	float voltage = (float) (pressure_sensor_raw / 4095.0) * 3.3; // assuming 12 bits
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f7fa fee0 	bl	8000544 <__aeabi_ui2d>
 8005784:	a312      	add	r3, pc, #72	; (adr r3, 80057d0 <MRT_prop_poll_pressure_transducer+0x78>)
 8005786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578a:	f7fb f87f 	bl	800088c <__aeabi_ddiv>
 800578e:	4602      	mov	r2, r0
 8005790:	460b      	mov	r3, r1
 8005792:	4610      	mov	r0, r2
 8005794:	4619      	mov	r1, r3
 8005796:	f7fb fa47 	bl	8000c28 <__aeabi_d2f>
 800579a:	4603      	mov	r3, r0
 800579c:	4618      	mov	r0, r3
 800579e:	f7fa fef3 	bl	8000588 <__aeabi_f2d>
 80057a2:	a30d      	add	r3, pc, #52	; (adr r3, 80057d8 <MRT_prop_poll_pressure_transducer+0x80>)
 80057a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a8:	f7fa ff46 	bl	8000638 <__aeabi_dmul>
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4610      	mov	r0, r2
 80057b2:	4619      	mov	r1, r3
 80057b4:	f7fb fa38 	bl	8000c28 <__aeabi_d2f>
 80057b8:	4603      	mov	r3, r0
 80057ba:	60bb      	str	r3, [r7, #8]

	return voltage;
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	ee07 3a90 	vmov	s15, r3
}
 80057c2:	eeb0 0a67 	vmov.f32	s0, s15
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	f3af 8000 	nop.w
 80057d0:	00000000 	.word	0x00000000
 80057d4:	40affe00 	.word	0x40affe00
 80057d8:	66666666 	.word	0x66666666
 80057dc:	400a6666 	.word	0x400a6666

080057e0 <MRT_LSM6DSR_Constructor>:


//**************************************************//
/*****LSM6DSR STATIC FUNCTIONS*****/

void MRT_LSM6DSR_Constructor(){
 80057e0:	b598      	push	{r3, r4, r7, lr}
 80057e2:	af00      	add	r7, sp, #0
	if (lsm6dsr==NULL){
 80057e4:	4b08      	ldr	r3, [pc, #32]	; (8005808 <MRT_LSM6DSR_Constructor+0x28>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10b      	bne.n	8005804 <MRT_LSM6DSR_Constructor+0x24>
		lsm6dsr = new LSM6DSR(&LSM6DSR_I2C, (uint8_t) MRT_LSM6DSR_ADDRESS);
 80057ec:	203c      	movs	r0, #60	; 0x3c
 80057ee:	f013 fefd 	bl	80195ec <_Znwj>
 80057f2:	4603      	mov	r3, r0
 80057f4:	461c      	mov	r4, r3
 80057f6:	226a      	movs	r2, #106	; 0x6a
 80057f8:	4904      	ldr	r1, [pc, #16]	; (800580c <MRT_LSM6DSR_Constructor+0x2c>)
 80057fa:	4620      	mov	r0, r4
 80057fc:	f000 f99c 	bl	8005b38 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>
 8005800:	4b01      	ldr	r3, [pc, #4]	; (8005808 <MRT_LSM6DSR_Constructor+0x28>)
 8005802:	601c      	str	r4, [r3, #0]
	}
}
 8005804:	bf00      	nop
 8005806:	bd98      	pop	{r3, r4, r7, pc}
 8005808:	20000544 	.word	0x20000544
 800580c:	200086d8 	.word	0x200086d8

08005810 <MRT_LSM6DSR_Destructor>:

void MRT_LSM6DSR_Destructor(){
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
	if (lsm6dsr!=NULL){
 8005814:	4b05      	ldr	r3, [pc, #20]	; (800582c <MRT_LSM6DSR_Destructor+0x1c>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d002      	beq.n	8005822 <MRT_LSM6DSR_Destructor+0x12>
		lsm6dsr = NULL;
 800581c:	4b03      	ldr	r3, [pc, #12]	; (800582c <MRT_LSM6DSR_Destructor+0x1c>)
 800581e:	2200      	movs	r2, #0
 8005820:	601a      	str	r2, [r3, #0]
	}
}
 8005822:	bf00      	nop
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	20000544 	.word	0x20000544

08005830 <MRT_LSM6DSR_getAcceleration>:

void MRT_LSM6DSR_getAcceleration(void){
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
	float* temp_array = lsm6dsr->getAcceleration();
 8005836:	4b0b      	ldr	r3, [pc, #44]	; (8005864 <MRT_LSM6DSR_getAcceleration+0x34>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4618      	mov	r0, r3
 800583c:	f000 fa22 	bl	8005c84 <_ZN7LSM6DSR15getAccelerationEv>
 8005840:	6078      	str	r0, [r7, #4]
	hlsm6dsr.acceleration_mg[0] = temp_array[0];
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a08      	ldr	r2, [pc, #32]	; (8005868 <MRT_LSM6DSR_getAcceleration+0x38>)
 8005848:	6013      	str	r3, [r2, #0]
	hlsm6dsr.acceleration_mg[1] = temp_array[1];
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	4a06      	ldr	r2, [pc, #24]	; (8005868 <MRT_LSM6DSR_getAcceleration+0x38>)
 8005850:	6053      	str	r3, [r2, #4]
	hlsm6dsr.acceleration_mg[2] = temp_array[2];
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	4a04      	ldr	r2, [pc, #16]	; (8005868 <MRT_LSM6DSR_getAcceleration+0x38>)
 8005858:	6093      	str	r3, [r2, #8]
}
 800585a:	bf00      	nop
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	20000544 	.word	0x20000544
 8005868:	2000054c 	.word	0x2000054c

0800586c <MRT_LSM6DSR_getAngularRate>:
void MRT_LSM6DSR_getAngularRate(void){
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
	float* temp_array = lsm6dsr->getAngularRate();
 8005872:	4b0b      	ldr	r3, [pc, #44]	; (80058a0 <MRT_LSM6DSR_getAngularRate+0x34>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4618      	mov	r0, r3
 8005878:	f000 fa82 	bl	8005d80 <_ZN7LSM6DSR14getAngularRateEv>
 800587c:	6078      	str	r0, [r7, #4]
	hlsm6dsr.angular_rate_mdps[0] = temp_array[0];
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a08      	ldr	r2, [pc, #32]	; (80058a4 <MRT_LSM6DSR_getAngularRate+0x38>)
 8005884:	60d3      	str	r3, [r2, #12]
	hlsm6dsr.angular_rate_mdps[1] = temp_array[1];
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	4a06      	ldr	r2, [pc, #24]	; (80058a4 <MRT_LSM6DSR_getAngularRate+0x38>)
 800588c:	6113      	str	r3, [r2, #16]
	hlsm6dsr.angular_rate_mdps[2] = temp_array[2];
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	4a04      	ldr	r2, [pc, #16]	; (80058a4 <MRT_LSM6DSR_getAngularRate+0x38>)
 8005894:	6153      	str	r3, [r2, #20]
}
 8005896:	bf00      	nop
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	20000544 	.word	0x20000544
 80058a4:	2000054c 	.word	0x2000054c

080058a8 <MRT_LSM6DSR_getTemperature>:
void MRT_LSM6DSR_getTemperature(void){
 80058a8:	b580      	push	{r7, lr}
 80058aa:	af00      	add	r7, sp, #0
	lsm6dsr->getTemperature();
 80058ac:	4b05      	ldr	r3, [pc, #20]	; (80058c4 <MRT_LSM6DSR_getTemperature+0x1c>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 fa2f 	bl	8005d14 <_ZN7LSM6DSR14getTemperatureEv>
	hlsm6dsr.temperature_degC = lsm6dsr->temperature_degC;
 80058b6:	4b03      	ldr	r3, [pc, #12]	; (80058c4 <MRT_LSM6DSR_getTemperature+0x1c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	4a02      	ldr	r2, [pc, #8]	; (80058c8 <MRT_LSM6DSR_getTemperature+0x20>)
 80058be:	6193      	str	r3, [r2, #24]
}
 80058c0:	bf00      	nop
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	20000544 	.word	0x20000544
 80058c8:	2000054c 	.word	0x2000054c

080058cc <MRT_LSM6DSR_pollAll>:

void MRT_LSM6DSR_pollAll(void){
 80058cc:	b580      	push	{r7, lr}
 80058ce:	af00      	add	r7, sp, #0
	MRT_LSM6DSR_getAcceleration();
 80058d0:	f7ff ffae 	bl	8005830 <MRT_LSM6DSR_getAcceleration>
	MRT_LSM6DSR_getAngularRate();
 80058d4:	f7ff ffca 	bl	800586c <MRT_LSM6DSR_getAngularRate>
	MRT_LSM6DSR_getTemperature();
 80058d8:	f7ff ffe6 	bl	80058a8 <MRT_LSM6DSR_getTemperature>
}
 80058dc:	bf00      	nop
 80058de:	bd80      	pop	{r7, pc}

080058e0 <MRT_LPS22HH_Constructor>:


//**************************************************//
/*****LPS22HH STATIC FUNCTIONS*****/

void MRT_LPS22HH_Constructor(){
 80058e0:	b598      	push	{r3, r4, r7, lr}
 80058e2:	af00      	add	r7, sp, #0
	if (lps22hh==NULL){
 80058e4:	4b08      	ldr	r3, [pc, #32]	; (8005908 <MRT_LPS22HH_Constructor+0x28>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10b      	bne.n	8005904 <MRT_LPS22HH_Constructor+0x24>
		lps22hh = new LPS22HH(&LPS22HH_I2C, (uint8_t) MRT_LPS22HH_ADDRESS);
 80058ec:	2020      	movs	r0, #32
 80058ee:	f013 fe7d 	bl	80195ec <_Znwj>
 80058f2:	4603      	mov	r3, r0
 80058f4:	461c      	mov	r4, r3
 80058f6:	22b3      	movs	r2, #179	; 0xb3
 80058f8:	4904      	ldr	r1, [pc, #16]	; (800590c <MRT_LPS22HH_Constructor+0x2c>)
 80058fa:	4620      	mov	r0, r4
 80058fc:	f000 fac4 	bl	8005e88 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>
 8005900:	4b01      	ldr	r3, [pc, #4]	; (8005908 <MRT_LPS22HH_Constructor+0x28>)
 8005902:	601c      	str	r4, [r3, #0]
	}
}
 8005904:	bf00      	nop
 8005906:	bd98      	pop	{r3, r4, r7, pc}
 8005908:	20000548 	.word	0x20000548
 800590c:	200086d8 	.word	0x200086d8

08005910 <MRT_LPS22HH_Destructor>:

void MRT_LPS22HH_Destructor(){
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
	if (lps22hh!=NULL){
 8005914:	4b05      	ldr	r3, [pc, #20]	; (800592c <MRT_LPS22HH_Destructor+0x1c>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d002      	beq.n	8005922 <MRT_LPS22HH_Destructor+0x12>
		lps22hh = NULL;
 800591c:	4b03      	ldr	r3, [pc, #12]	; (800592c <MRT_LPS22HH_Destructor+0x1c>)
 800591e:	2200      	movs	r2, #0
 8005920:	601a      	str	r2, [r3, #0]
	}
}
 8005922:	bf00      	nop
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	20000548 	.word	0x20000548

08005930 <MRT_LPS22HH_getPressure>:

void MRT_LPS22HH_getPressure(void){
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
	hlps22hh.pressure_hPa = lps22hh->getPressure();
 8005934:	4b05      	ldr	r3, [pc, #20]	; (800594c <MRT_LPS22HH_getPressure+0x1c>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4618      	mov	r0, r3
 800593a:	f000 fb27 	bl	8005f8c <_ZN7LPS22HH11getPressureEv>
 800593e:	eef0 7a40 	vmov.f32	s15, s0
 8005942:	4b03      	ldr	r3, [pc, #12]	; (8005950 <MRT_LPS22HH_getPressure+0x20>)
 8005944:	edc3 7a00 	vstr	s15, [r3]
}
 8005948:	bf00      	nop
 800594a:	bd80      	pop	{r7, pc}
 800594c:	20000548 	.word	0x20000548
 8005950:	20000578 	.word	0x20000578

08005954 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(void){
 8005954:	b580      	push	{r7, lr}
 8005956:	af00      	add	r7, sp, #0
	hlps22hh.temperature_degC = lps22hh->getTemperature();
 8005958:	4b05      	ldr	r3, [pc, #20]	; (8005970 <MRT_LPS22HH_getTemperature+0x1c>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4618      	mov	r0, r3
 800595e:	f000 fb49 	bl	8005ff4 <_ZN7LPS22HH14getTemperatureEv>
 8005962:	eef0 7a40 	vmov.f32	s15, s0
 8005966:	4b03      	ldr	r3, [pc, #12]	; (8005974 <MRT_LPS22HH_getTemperature+0x20>)
 8005968:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800596c:	bf00      	nop
 800596e:	bd80      	pop	{r7, pc}
 8005970:	20000548 	.word	0x20000548
 8005974:	20000578 	.word	0x20000578

08005978 <MRT_LPS22HH_pollAll>:

void MRT_LPS22HH_pollAll(void){
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0
	MRT_LPS22HH_getPressure();
 800597c:	f7ff ffd8 	bl	8005930 <MRT_LPS22HH_getPressure>
	MRT_LPS22HH_getTemperature();
 8005980:	f7ff ffe8 	bl	8005954 <MRT_LPS22HH_getTemperature>
}
 8005984:	bf00      	nop
 8005986:	bd80      	pop	{r7, pc}

08005988 <MRT_GPS_pollAll>:


//**************************************************//
/*****GPS STATIC FUNCTIONS*****/

void MRT_GPS_pollAll(void){
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
	GPS_Poll(&hgps.latitude, &hgps.longitude, &hgps.time);
 800598c:	4a03      	ldr	r2, [pc, #12]	; (800599c <MRT_GPS_pollAll+0x14>)
 800598e:	4904      	ldr	r1, [pc, #16]	; (80059a0 <MRT_GPS_pollAll+0x18>)
 8005990:	4804      	ldr	r0, [pc, #16]	; (80059a4 <MRT_GPS_pollAll+0x1c>)
 8005992:	f000 fb9f 	bl	80060d4 <GPS_Poll>
}
 8005996:	bf00      	nop
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	20000594 	.word	0x20000594
 80059a0:	20000590 	.word	0x20000590
 80059a4:	2000058c 	.word	0x2000058c

080059a8 <MRT_LSM6DSR_Init>:


//**************************************************//
/*****PUBLIC STATIC FUNCTIONS*****/

HLSM6DSR MRT_LSM6DSR_Init(void){
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
	MRT_LSM6DSR_Constructor();
 80059b0:	f7ff ff16 	bl	80057e0 <MRT_LSM6DSR_Constructor>
	HLSM6DSR lsm6dsr_handler;
	lsm6dsr_handler.getAcceleration = &MRT_LSM6DSR_getAcceleration;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a16      	ldr	r2, [pc, #88]	; (8005a10 <MRT_LSM6DSR_Init+0x68>)
 80059b8:	61da      	str	r2, [r3, #28]
	lsm6dsr_handler.getAngularRate = &MRT_LSM6DSR_getAngularRate;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a15      	ldr	r2, [pc, #84]	; (8005a14 <MRT_LSM6DSR_Init+0x6c>)
 80059be:	621a      	str	r2, [r3, #32]
	lsm6dsr_handler.getTemperature = &MRT_LSM6DSR_getTemperature;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a15      	ldr	r2, [pc, #84]	; (8005a18 <MRT_LSM6DSR_Init+0x70>)
 80059c4:	625a      	str	r2, [r3, #36]	; 0x24
	lsm6dsr_handler.pollAll = &MRT_LSM6DSR_pollAll;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a14      	ldr	r2, [pc, #80]	; (8005a1c <MRT_LSM6DSR_Init+0x74>)
 80059ca:	629a      	str	r2, [r3, #40]	; 0x28

	lsm6dsr_handler.acceleration_mg[0] = 0;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f04f 0200 	mov.w	r2, #0
 80059d2:	601a      	str	r2, [r3, #0]
	lsm6dsr_handler.acceleration_mg[1] = 0;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f04f 0200 	mov.w	r2, #0
 80059da:	605a      	str	r2, [r3, #4]
	lsm6dsr_handler.acceleration_mg[2] = 0;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f04f 0200 	mov.w	r2, #0
 80059e2:	609a      	str	r2, [r3, #8]
	lsm6dsr_handler.angular_rate_mdps[0] = 0;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f04f 0200 	mov.w	r2, #0
 80059ea:	60da      	str	r2, [r3, #12]
	lsm6dsr_handler.angular_rate_mdps[1] = 0;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f04f 0200 	mov.w	r2, #0
 80059f2:	611a      	str	r2, [r3, #16]
	lsm6dsr_handler.angular_rate_mdps[2] = 0;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f04f 0200 	mov.w	r2, #0
 80059fa:	615a      	str	r2, [r3, #20]
	lsm6dsr_handler.temperature_degC = 0;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	619a      	str	r2, [r3, #24]
	return lsm6dsr_handler;
 8005a04:	bf00      	nop
}
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	08005831 	.word	0x08005831
 8005a14:	0800586d 	.word	0x0800586d
 8005a18:	080058a9 	.word	0x080058a9
 8005a1c:	080058cd 	.word	0x080058cd

08005a20 <MRT_LPS22HH_Init>:

struct HLPS22HH MRT_LPS22HH_Init(void){
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
	MRT_LPS22HH_Constructor();
 8005a28:	f7ff ff5a 	bl	80058e0 <MRT_LPS22HH_Constructor>
	struct HLPS22HH lps22hh_handler;
	lps22hh_handler.getPressure = &MRT_LPS22HH_getPressure;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a0a      	ldr	r2, [pc, #40]	; (8005a58 <MRT_LPS22HH_Init+0x38>)
 8005a30:	609a      	str	r2, [r3, #8]
	lps22hh_handler.getTemperature = &MRT_LPS22HH_getTemperature;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a09      	ldr	r2, [pc, #36]	; (8005a5c <MRT_LPS22HH_Init+0x3c>)
 8005a36:	60da      	str	r2, [r3, #12]
	lps22hh_handler.pollAll = &MRT_LPS22HH_pollAll;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a09      	ldr	r2, [pc, #36]	; (8005a60 <MRT_LPS22HH_Init+0x40>)
 8005a3c:	611a      	str	r2, [r3, #16]

	lps22hh_handler.pressure_hPa = 0;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f04f 0200 	mov.w	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]
	lps22hh_handler.temperature_degC = 0;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f04f 0200 	mov.w	r2, #0
 8005a4c:	605a      	str	r2, [r3, #4]
	return lps22hh_handler;
 8005a4e:	bf00      	nop
}
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	08005931 	.word	0x08005931
 8005a5c:	08005955 	.word	0x08005955
 8005a60:	08005979 	.word	0x08005979

08005a64 <MRT_GPS_Init>:

struct HGPS MRT_GPS_Init(void){
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
	struct HGPS gps_handler;
	gps_handler.pollAll = &MRT_GPS_pollAll;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a0c      	ldr	r2, [pc, #48]	; (8005aa0 <MRT_GPS_Init+0x3c>)
 8005a70:	60da      	str	r2, [r3, #12]
	GPS_Init(&GPS_UART, print, tone_freq);
 8005a72:	4a0c      	ldr	r2, [pc, #48]	; (8005aa4 <MRT_GPS_Init+0x40>)
 8005a74:	490c      	ldr	r1, [pc, #48]	; (8005aa8 <MRT_GPS_Init+0x44>)
 8005a76:	480d      	ldr	r0, [pc, #52]	; (8005aac <MRT_GPS_Init+0x48>)
 8005a78:	f000 fd8c 	bl	8006594 <GPS_Init>
	gps_handler.latitude = 0;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f04f 0200 	mov.w	r2, #0
 8005a82:	601a      	str	r2, [r3, #0]
	gps_handler.longitude = 0;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f04f 0200 	mov.w	r2, #0
 8005a8a:	605a      	str	r2, [r3, #4]
	gps_handler.time = 0;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f04f 0200 	mov.w	r2, #0
 8005a92:	609a      	str	r2, [r3, #8]
	return gps_handler;
 8005a94:	bf00      	nop
}
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	08005989 	.word	0x08005989
 8005aa4:	08001135 	.word	0x08001135
 8005aa8:	08001109 	.word	0x08001109
 8005aac:	200089cc 	.word	0x200089cc

08005ab0 <MRT_i2c_sensors_Init>:

void MRT_i2c_sensors_Init(void){
 8005ab0:	b5b0      	push	{r4, r5, r7, lr}
 8005ab2:	b08c      	sub	sp, #48	; 0x30
 8005ab4:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	HAL_IWDG_Refresh(&hiwdg);
 8005ab6:	4818      	ldr	r0, [pc, #96]	; (8005b18 <MRT_i2c_sensors_Init+0x68>)
 8005ab8:	f008 fd3a 	bl	800e530 <HAL_IWDG_Refresh>
	hlsm6dsr = MRT_LSM6DSR_Init();
 8005abc:	4c17      	ldr	r4, [pc, #92]	; (8005b1c <MRT_i2c_sensors_Init+0x6c>)
 8005abe:	463b      	mov	r3, r7
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7ff ff71 	bl	80059a8 <MRT_LSM6DSR_Init>
 8005ac6:	4625      	mov	r5, r4
 8005ac8:	463c      	mov	r4, r7
 8005aca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005acc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ace:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ad0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ad2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005ad6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	#endif

	//LPS22HH
	#if LPS22HH_
	HAL_IWDG_Refresh(&hiwdg);
 8005ada:	480f      	ldr	r0, [pc, #60]	; (8005b18 <MRT_i2c_sensors_Init+0x68>)
 8005adc:	f008 fd28 	bl	800e530 <HAL_IWDG_Refresh>
	hlps22hh = MRT_LPS22HH_Init();
 8005ae0:	4c0f      	ldr	r4, [pc, #60]	; (8005b20 <MRT_i2c_sensors_Init+0x70>)
 8005ae2:	463b      	mov	r3, r7
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7ff ff9b 	bl	8005a20 <MRT_LPS22HH_Init>
 8005aea:	4625      	mov	r5, r4
 8005aec:	463c      	mov	r4, r7
 8005aee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005af0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	602b      	str	r3, [r5, #0]
	#endif

	//GPS
	#if GPS_
	HAL_IWDG_Refresh(&hiwdg);
 8005af6:	4808      	ldr	r0, [pc, #32]	; (8005b18 <MRT_i2c_sensors_Init+0x68>)
 8005af8:	f008 fd1a 	bl	800e530 <HAL_IWDG_Refresh>
	hgps = MRT_GPS_Init();
 8005afc:	4c09      	ldr	r4, [pc, #36]	; (8005b24 <MRT_i2c_sensors_Init+0x74>)
 8005afe:	463b      	mov	r3, r7
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7ff ffaf 	bl	8005a64 <MRT_GPS_Init>
 8005b06:	463b      	mov	r3, r7
 8005b08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	#endif

}
 8005b0e:	bf00      	nop
 8005b10:	3730      	adds	r7, #48	; 0x30
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bdb0      	pop	{r4, r5, r7, pc}
 8005b16:	bf00      	nop
 8005b18:	20008780 	.word	0x20008780
 8005b1c:	2000054c 	.word	0x2000054c
 8005b20:	20000578 	.word	0x20000578
 8005b24:	2000058c 	.word	0x2000058c

08005b28 <MRT_i2c_sensors_Deinit>:


void MRT_i2c_sensors_Deinit(void){
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	MRT_LSM6DSR_Destructor();
 8005b2c:	f7ff fe70 	bl	8005810 <MRT_LSM6DSR_Destructor>
	#endif

	//LPS22HH
	#if LPS22HH_
	MRT_LPS22HH_Destructor();
 8005b30:	f7ff feee 	bl	8005910 <MRT_LPS22HH_Destructor>
	#endif

	//GPS
	//NO DEINIT NEEDED HERE
}
 8005b34:	bf00      	nop
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>:


//**************************************************//
/*****LSM6DSR*****/

LSM6DSR::LSM6DSR(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b088      	sub	sp, #32
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	4613      	mov	r3, r2
 8005b44:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLSM6DSR Init");
 8005b46:	4846      	ldr	r0, [pc, #280]	; (8005c60 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x128>)
 8005b48:	f7fb fac0 	bl	80010cc <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4a45      	ldr	r2, [pc, #276]	; (8005c64 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x12c>)
 8005b50:	61da      	str	r2, [r3, #28]
	ctx.read_reg = read;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4a44      	ldr	r2, [pc, #272]	; (8005c68 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x130>)
 8005b56:	621a      	str	r2, [r3, #32]
	ctx.handle = i2c_bus;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait sensor boot time */
	HAL_Delay(LSM6DSR_BOOT_TIME);
 8005b5e:	2064      	movs	r0, #100	; 0x64
 8005b60:	f006 fcf6 	bl	800c550 <HAL_Delay>
	/* Check device ID */
	lsm6dsr_device_id_get(&ctx, &whoamI);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f103 021c 	add.w	r2, r3, #28
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	3338      	adds	r3, #56	; 0x38
 8005b6e:	4619      	mov	r1, r3
 8005b70:	4610      	mov	r0, r2
 8005b72:	f001 fae5 	bl	8007140 <lsm6dsr_device_id_get>

	print((char*) "\tChecking Sensor ID...");
 8005b76:	483d      	ldr	r0, [pc, #244]	; (8005c6c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x134>)
 8005b78:	f7fb fac6 	bl	8001108 <print>
	if (whoamI != address){
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b82:	79fa      	ldrb	r2, [r7, #7]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d014      	beq.n	8005bb2 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x7a>
	  println((char*) "NOT OK");
 8005b88:	4839      	ldr	r0, [pc, #228]	; (8005c70 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x138>)
 8005b8a:	f7fb fa9f 	bl	80010cc <println>
	  print((char*) "\tThis Device is: ");
 8005b8e:	4839      	ldr	r0, [pc, #228]	; (8005c74 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x13c>)
 8005b90:	f7fb faba 	bl	8001108 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f107 0314 	add.w	r3, r7, #20
 8005ba0:	4935      	ldr	r1, [pc, #212]	; (8005c78 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x140>)
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f016 fa8c 	bl	801c0c0 <siprintf>
	  print(buffer);
 8005ba8:	f107 0314 	add.w	r3, r7, #20
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fb faab 	bl	8001108 <print>
		HAL_PWR_EnterSTANDBYMode();
		*/


	}
	println((char*) "OK");
 8005bb2:	4832      	ldr	r0, [pc, #200]	; (8005c7c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x144>)
 8005bb4:	f7fb fa8a 	bl	80010cc <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 8005bb8:	4831      	ldr	r0, [pc, #196]	; (8005c80 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x148>)
 8005bba:	f7fb faa5 	bl	8001108 <print>
	lsm6dsr_reset_set(&ctx, PROPERTY_ENABLE);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	331c      	adds	r3, #28
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f001 facc 	bl	8007162 <lsm6dsr_reset_set>
	HAL_Delay(500);
 8005bca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005bce:	f006 fcbf 	bl	800c550 <HAL_Delay>
	do {
	lsm6dsr_reset_get(&ctx, &rst);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f103 021c 	add.w	r2, r3, #28
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	3339      	adds	r3, #57	; 0x39
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4610      	mov	r0, r2
 8005be0:	f001 fae5 	bl	80071ae <lsm6dsr_reset_get>
	} while (rst);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d000      	beq.n	8005bf0 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0xb8>
	do {
 8005bee:	e7f0      	b.n	8005bd2 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x9a>
	println((char*) "OK");
 8005bf0:	4822      	ldr	r0, [pc, #136]	; (8005c7c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x144>)
 8005bf2:	f7fb fa6b 	bl	80010cc <println>

	/* Disable I3C interface */
    lsm6dsr_i3c_disable_set(&ctx, LSM6DSR_I3C_DISABLE);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	331c      	adds	r3, #28
 8005bfa:	2180      	movs	r1, #128	; 0x80
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f001 fb4d 	bl	800729c <lsm6dsr_i3c_disable_set>

	/* Enable Block Data Update */
	lsm6dsr_block_data_update_set(&ctx, PROPERTY_ENABLE);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	331c      	adds	r3, #28
 8005c06:	2101      	movs	r1, #1
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f001 f949 	bl	8006ea0 <lsm6dsr_block_data_update_set>
	/* Set Output Data Rate */
	lsm6dsr_xl_data_rate_set(&ctx, LSM6DSR_XL_ODR_12Hz5);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	331c      	adds	r3, #28
 8005c12:	2101      	movs	r1, #1
 8005c14:	4618      	mov	r0, r3
 8005c16:	f000 ff25 	bl	8006a64 <lsm6dsr_xl_data_rate_set>
	lsm6dsr_gy_data_rate_set(&ctx, LSM6DSR_GY_ODR_12Hz5);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	331c      	adds	r3, #28
 8005c1e:	2101      	movs	r1, #1
 8005c20:	4618      	mov	r0, r3
 8005c22:	f001 f841 	bl	8006ca8 <lsm6dsr_gy_data_rate_set>
	/* Set full scale */
	lsm6dsr_xl_full_scale_set(&ctx, LSM6DSR_2g);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	331c      	adds	r3, #28
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 fef3 	bl	8006a18 <lsm6dsr_xl_full_scale_set>
	lsm6dsr_gy_full_scale_set(&ctx, LSM6DSR_2000dps);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	331c      	adds	r3, #28
 8005c36:	210c      	movs	r1, #12
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f001 f80f 	bl	8006c5c <lsm6dsr_gy_full_scale_set>
	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsr_xl_hp_path_on_out_set(&ctx, LSM6DSR_LP_ODR_DIV_100);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	331c      	adds	r3, #28
 8005c42:	2104      	movs	r1, #4
 8005c44:	4618      	mov	r0, r3
 8005c46:	f001 faf1 	bl	800722c <lsm6dsr_xl_hp_path_on_out_set>
	lsm6dsr_xl_filter_lp2_set(&ctx, PROPERTY_ENABLE);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	331c      	adds	r3, #28
 8005c4e:	2101      	movs	r1, #1
 8005c50:	4618      	mov	r0, r3
 8005c52:	f001 fac5 	bl	80071e0 <lsm6dsr_xl_filter_lp2_set>
}
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3720      	adds	r7, #32
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	080217a0 	.word	0x080217a0
 8005c64:	08005e13 	.word	0x08005e13
 8005c68:	08005e4d 	.word	0x08005e4d
 8005c6c:	080217b0 	.word	0x080217b0
 8005c70:	080217c8 	.word	0x080217c8
 8005c74:	080217d0 	.word	0x080217d0
 8005c78:	080217e4 	.word	0x080217e4
 8005c7c:	080217ec 	.word	0x080217ec
 8005c80:	080217f0 	.word	0x080217f0

08005c84 <_ZN7LSM6DSR15getAccelerationEv>:


float* LSM6DSR::getAcceleration(void){
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
	lsm6dsr_xl_flag_data_ready_get(&ctx, &reg);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f103 021c 	add.w	r2, r3, #28
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	3328      	adds	r3, #40	; 0x28
 8005c96:	4619      	mov	r1, r3
 8005c98:	4610      	mov	r0, r2
 8005c9a:	f001 f927 	bl	8006eec <lsm6dsr_xl_flag_data_ready_get>

	if (reg){
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d030      	beq.n	8005d0a <_ZN7LSM6DSR15getAccelerationEv+0x86>
		// Read magnetic field data
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	332a      	adds	r3, #42	; 0x2a
 8005cac:	2206      	movs	r2, #6
 8005cae:	2100      	movs	r1, #0
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f014 ff09 	bl	801aac8 <memset>
		lsm6dsr_acceleration_raw_get(&ctx, data_raw_acceleration);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f103 021c 	add.w	r2, r3, #28
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	332a      	adds	r3, #42	; 0x2a
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	4610      	mov	r0, r2
 8005cc4:	f001 f9cb 	bl	800705e <lsm6dsr_acceleration_raw_get>
		acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[0]);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 fe56 	bl	8006980 <lsm6dsr_from_fs2g_to_mg>
 8005cd4:	eef0 7a40 	vmov.f32	s15, s0
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	edc3 7a00 	vstr	s15, [r3]
		acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[1]);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 fe4b 	bl	8006980 <lsm6dsr_from_fs2g_to_mg>
 8005cea:	eef0 7a40 	vmov.f32	s15, s0
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	edc3 7a01 	vstr	s15, [r3, #4]
		acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[2]);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 fe40 	bl	8006980 <lsm6dsr_from_fs2g_to_mg>
 8005d00:	eef0 7a40 	vmov.f32	s15, s0
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	return acceleration_mg;
 8005d0a:	687b      	ldr	r3, [r7, #4]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <_ZN7LSM6DSR14getTemperatureEv>:


float LSM6DSR::getTemperature(void){
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
    lsm6dsr_temp_flag_data_ready_get(&ctx, &reg);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f103 021c 	add.w	r2, r3, #28
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	3328      	adds	r3, #40	; 0x28
 8005d26:	4619      	mov	r1, r3
 8005d28:	4610      	mov	r0, r2
 8005d2a:	f001 f911 	bl	8006f50 <lsm6dsr_temp_flag_data_ready_get>

    if (reg){
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d01a      	beq.n	8005d6e <_ZN7LSM6DSR14getTemperatureEv+0x5a>
		// Read temperature data
		memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3336      	adds	r3, #54	; 0x36
 8005d3c:	2202      	movs	r2, #2
 8005d3e:	2100      	movs	r1, #0
 8005d40:	4618      	mov	r0, r3
 8005d42:	f014 fec1 	bl	801aac8 <memset>
		lsm6dsr_temperature_raw_get(&ctx, &data_raw_temperature);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f103 021c 	add.w	r2, r3, #28
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	3336      	adds	r3, #54	; 0x36
 8005d50:	4619      	mov	r1, r3
 8005d52:	4610      	mov	r0, r2
 8005d54:	f001 f915 	bl	8006f82 <lsm6dsr_temperature_raw_get>
		temperature_degC = lsm6dsr_from_lsb_to_celsius(data_raw_temperature);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fe3e 	bl	80069e0 <lsm6dsr_from_lsb_to_celsius>
 8005d64:	eef0 7a40 	vmov.f32	s15, s0
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	edc3 7a06 	vstr	s15, [r3, #24]
	}
    return temperature_degC;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	ee07 3a90 	vmov	s15, r3
}
 8005d76:	eeb0 0a67 	vmov.f32	s0, s15
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <_ZN7LSM6DSR14getAngularRateEv>:


float* LSM6DSR::getAngularRate(void){
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
    lsm6dsr_gy_flag_data_ready_get(&ctx, &reg);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f103 021c 	add.w	r2, r3, #28
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	3328      	adds	r3, #40	; 0x28
 8005d92:	4619      	mov	r1, r3
 8005d94:	4610      	mov	r0, r2
 8005d96:	f001 f8c2 	bl	8006f1e <lsm6dsr_gy_flag_data_ready_get>

    if (reg){
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d030      	beq.n	8005e06 <_ZN7LSM6DSR14getAngularRateEv+0x86>
		// Read magnetic field data
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3330      	adds	r3, #48	; 0x30
 8005da8:	2206      	movs	r2, #6
 8005daa:	2100      	movs	r1, #0
 8005dac:	4618      	mov	r0, r3
 8005dae:	f014 fe8b 	bl	801aac8 <memset>
		lsm6dsr_angular_rate_raw_get(&ctx, data_raw_angular_rate);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f103 021c 	add.w	r2, r3, #28
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3330      	adds	r3, #48	; 0x30
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	4610      	mov	r0, r2
 8005dc0:	f001 f902 	bl	8006fc8 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 fdf0 	bl	80069b0 <lsm6dsr_from_fs2000dps_to_mdps>
 8005dd0:	eef0 7a40 	vmov.f32	s15, s0
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	edc3 7a03 	vstr	s15, [r3, #12]
		angular_rate_mdps[1] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8005de0:	4618      	mov	r0, r3
 8005de2:	f000 fde5 	bl	80069b0 <lsm6dsr_from_fs2000dps_to_mdps>
 8005de6:	eef0 7a40 	vmov.f32	s15, s0
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	edc3 7a04 	vstr	s15, [r3, #16]
		angular_rate_mdps[2] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 fdda 	bl	80069b0 <lsm6dsr_from_fs2000dps_to_mdps>
 8005dfc:	eef0 7a40 	vmov.f32	s15, s0
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	edc3 7a05 	vstr	s15, [r3, #20]
		fs500dps_to_mdps
		fs1000dps_to_mdps
		fs2000dps_to_mdps
		*/
	}
    return angular_rate_mdps;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	330c      	adds	r3, #12
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <_ZN7LSM6DSR5writeEPvhPKht>:


int32_t LSM6DSR::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b088      	sub	sp, #32
 8005e16:	af04      	add	r7, sp, #16
 8005e18:	60f8      	str	r0, [r7, #12]
 8005e1a:	607a      	str	r2, [r7, #4]
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	460b      	mov	r3, r1
 8005e20:	72fb      	strb	r3, [r7, #11]
 8005e22:	4613      	mov	r3, r2
 8005e24:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8005e26:	7afb      	ldrb	r3, [r7, #11]
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e2e:	9302      	str	r3, [sp, #8]
 8005e30:	893b      	ldrh	r3, [r7, #8]
 8005e32:	9301      	str	r3, [sp, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	2301      	movs	r3, #1
 8005e3a:	21d5      	movs	r1, #213	; 0xd5
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f007 fc09 	bl	800d654 <HAL_I2C_Mem_Write>
  return 0;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <_ZN7LSM6DSR4readEPvhPht>:

int32_t LSM6DSR::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b088      	sub	sp, #32
 8005e50:	af04      	add	r7, sp, #16
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	607a      	str	r2, [r7, #4]
 8005e56:	461a      	mov	r2, r3
 8005e58:	460b      	mov	r3, r1
 8005e5a:	72fb      	strb	r3, [r7, #11]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8005e60:	7afb      	ldrb	r3, [r7, #11]
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e68:	9302      	str	r3, [sp, #8]
 8005e6a:	893b      	ldrh	r3, [r7, #8]
 8005e6c:	9301      	str	r3, [sp, #4]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	2301      	movs	r3, #1
 8005e74:	21d5      	movs	r1, #213	; 0xd5
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f007 fce6 	bl	800d848 <HAL_I2C_Mem_Read>
  return 0;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
	...

08005e88 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>:

//**************************************************//
/*****LPS22HH*****/


LPS22HH::LPS22HH(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b088      	sub	sp, #32
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	4613      	mov	r3, r2
 8005e94:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLPS22HH Init");
 8005e96:	4834      	ldr	r0, [pc, #208]	; (8005f68 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe0>)
 8005e98:	f7fb f918 	bl	80010cc <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4a33      	ldr	r2, [pc, #204]	; (8005f6c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe4>)
 8005ea0:	609a      	str	r2, [r3, #8]
	ctx.read_reg = read;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4a32      	ldr	r2, [pc, #200]	; (8005f70 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe8>)
 8005ea6:	60da      	str	r2, [r3, #12]
	ctx.handle = i2c_bus;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	611a      	str	r2, [r3, #16]
	/* Wait sensor boot time */
	HAL_Delay(LPS22HH_BOOT_TIME);
 8005eae:	2064      	movs	r0, #100	; 0x64
 8005eb0:	f006 fb4e 	bl	800c550 <HAL_Delay>
	/* Check device ID */
	whoamI = 0;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	779a      	strb	r2, [r3, #30]
	lps22hh_device_id_get(&ctx, &whoamI);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f103 0208 	add.w	r2, r3, #8
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	331e      	adds	r3, #30
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	f000 fcda 	bl	8006880 <lps22hh_device_id_get>


	print((char*) "\tChecking Sensor ID...");
 8005ecc:	4829      	ldr	r0, [pc, #164]	; (8005f74 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xec>)
 8005ece:	f7fb f91b 	bl	8001108 <print>
	if ( whoamI != address ){
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	7f9b      	ldrb	r3, [r3, #30]
 8005ed6:	79fa      	ldrb	r2, [r7, #7]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d013      	beq.n	8005f04 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x7c>
	  println((char*) "NOT OK");
 8005edc:	4826      	ldr	r0, [pc, #152]	; (8005f78 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf0>)
 8005ede:	f7fb f8f5 	bl	80010cc <println>
	  print((char*) "\tThis Device is: ");
 8005ee2:	4826      	ldr	r0, [pc, #152]	; (8005f7c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf4>)
 8005ee4:	f7fb f910 	bl	8001108 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	7f9b      	ldrb	r3, [r3, #30]
 8005eec:	461a      	mov	r2, r3
 8005eee:	f107 0314 	add.w	r3, r7, #20
 8005ef2:	4923      	ldr	r1, [pc, #140]	; (8005f80 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf8>)
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f016 f8e3 	bl	801c0c0 <siprintf>
	  print(buffer);
 8005efa:	f107 0314 	add.w	r3, r7, #20
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fb f902 	bl	8001108 <print>
		MRT_clear_alarms_flags();
		HAL_PWR_EnterSTANDBYMode();
		*/

	}
	println((char*) "OK");
 8005f04:	481f      	ldr	r0, [pc, #124]	; (8005f84 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xfc>)
 8005f06:	f7fb f8e1 	bl	80010cc <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 8005f0a:	481f      	ldr	r0, [pc, #124]	; (8005f88 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x100>)
 8005f0c:	f7fb f8fc 	bl	8001108 <print>
	lps22hh_reset_set(&ctx, PROPERTY_ENABLE);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	3308      	adds	r3, #8
 8005f14:	2101      	movs	r1, #1
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fcc3 	bl	80068a2 <lps22hh_reset_set>
	HAL_Delay(500);
 8005f1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f20:	f006 fb16 	bl	800c550 <HAL_Delay>
	do {
	lps22hh_reset_get(&ctx, &rst);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f103 0208 	add.w	r2, r3, #8
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	331f      	adds	r3, #31
 8005f2e:	4619      	mov	r1, r3
 8005f30:	4610      	mov	r0, r2
 8005f32:	f000 fcdc 	bl	80068ee <lps22hh_reset_get>
	} while (rst);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	7fdb      	ldrb	r3, [r3, #31]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d000      	beq.n	8005f40 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xb8>
	do {
 8005f3e:	e7f1      	b.n	8005f24 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x9c>
	println((char*) "OK");
 8005f40:	4810      	ldr	r0, [pc, #64]	; (8005f84 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xfc>)
 8005f42:	f7fb f8c3 	bl	80010cc <println>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&ctx, PROPERTY_ENABLE);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	3308      	adds	r3, #8
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f000 fba5 	bl	800669c <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&ctx, LPS22HH_75_Hz_LOW_NOISE);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3308      	adds	r3, #8
 8005f56:	2115      	movs	r1, #21
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 fbc5 	bl	80066e8 <lps22hh_data_rate_set>
}
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	4618      	mov	r0, r3
 8005f62:	3720      	adds	r7, #32
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	08021814 	.word	0x08021814
 8005f6c:	0800605f 	.word	0x0800605f
 8005f70:	08006099 	.word	0x08006099
 8005f74:	080217b0 	.word	0x080217b0
 8005f78:	080217c8 	.word	0x080217c8
 8005f7c:	080217d0 	.word	0x080217d0
 8005f80:	080217e4 	.word	0x080217e4
 8005f84:	080217ec 	.word	0x080217ec
 8005f88:	080217f0 	.word	0x080217f0

08005f8c <_ZN7LPS22HH11getPressureEv>:



float LPS22HH::getPressure(void){
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_press_flag_data_ready_get(&ctx, &reg);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f103 0208 	add.w	r2, r3, #8
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	3314      	adds	r3, #20
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	f000 fbef 	bl	8006784 <lps22hh_press_flag_data_ready_get>

	if (reg) {
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	7d1b      	ldrb	r3, [r3, #20]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d019      	beq.n	8005fe2 <_ZN7LPS22HH11getPressureEv+0x56>
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	3318      	adds	r3, #24
 8005fb2:	2204      	movs	r2, #4
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f014 fd86 	bl	801aac8 <memset>
	  lps22hh_pressure_raw_get(&ctx, &data_raw_pressure);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f103 0208 	add.w	r2, r3, #8
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	3318      	adds	r3, #24
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4610      	mov	r0, r2
 8005fca:	f000 fc0d 	bl	80067e8 <lps22hh_pressure_raw_get>
	  pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 fb30 	bl	8006638 <lps22hh_from_lsb_to_hpa>
 8005fd8:	eef0 7a40 	vmov.f32	s15, s0
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	edc3 7a00 	vstr	s15, [r3]
	}
	return pressure_hPa;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	ee07 3a90 	vmov	s15, r3
}
 8005fea:	eeb0 0a67 	vmov.f32	s0, s15
 8005fee:	3708      	adds	r7, #8
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <_ZN7LPS22HH14getTemperatureEv>:


float LPS22HH::getTemperature(void){
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_temp_flag_data_ready_get(&ctx, &reg);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f103 0208 	add.w	r2, r3, #8
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	3314      	adds	r3, #20
 8006006:	4619      	mov	r1, r3
 8006008:	4610      	mov	r0, r2
 800600a:	f000 fbd4 	bl	80067b6 <lps22hh_temp_flag_data_ready_get>

	if (reg) {
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	7d1b      	ldrb	r3, [r3, #20]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d01a      	beq.n	800604c <_ZN7LPS22HH14getTemperatureEv+0x58>
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	331c      	adds	r3, #28
 800601a:	2202      	movs	r2, #2
 800601c:	2100      	movs	r1, #0
 800601e:	4618      	mov	r0, r3
 8006020:	f014 fd52 	bl	801aac8 <memset>
	  lps22hh_temperature_raw_get(&ctx, &data_raw_temperature);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f103 0208 	add.w	r2, r3, #8
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	331c      	adds	r3, #28
 800602e:	4619      	mov	r1, r3
 8006030:	4610      	mov	r0, r2
 8006032:	f000 fc02 	bl	800683a <lps22hh_temperature_raw_get>
	  temperature_degC = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800603c:	4618      	mov	r0, r3
 800603e:	f000 fb13 	bl	8006668 <lps22hh_from_lsb_to_celsius>
 8006042:	eef0 7a40 	vmov.f32	s15, s0
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	return temperature_degC;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	ee07 3a90 	vmov	s15, r3
}
 8006054:	eeb0 0a67 	vmov.f32	s0, s15
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <_ZN7LPS22HH5writeEPvhPKht>:



int32_t LPS22HH::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 800605e:	b580      	push	{r7, lr}
 8006060:	b088      	sub	sp, #32
 8006062:	af04      	add	r7, sp, #16
 8006064:	60f8      	str	r0, [r7, #12]
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	461a      	mov	r2, r3
 800606a:	460b      	mov	r3, r1
 800606c:	72fb      	strb	r3, [r7, #11]
 800606e:	4613      	mov	r3, r2
 8006070:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8006072:	7afb      	ldrb	r3, [r7, #11]
 8006074:	b29a      	uxth	r2, r3
 8006076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800607a:	9302      	str	r3, [sp, #8]
 800607c:	893b      	ldrh	r3, [r7, #8]
 800607e:	9301      	str	r3, [sp, #4]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	2301      	movs	r3, #1
 8006086:	21b9      	movs	r1, #185	; 0xb9
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f007 fae3 	bl	800d654 <HAL_I2C_Mem_Write>
  return 0;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <_ZN7LPS22HH4readEPvhPht>:

int32_t LPS22HH::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af04      	add	r7, sp, #16
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	607a      	str	r2, [r7, #4]
 80060a2:	461a      	mov	r2, r3
 80060a4:	460b      	mov	r3, r1
 80060a6:	72fb      	strb	r3, [r7, #11]
 80060a8:	4613      	mov	r3, r2
 80060aa:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80060ac:	7afb      	ldrb	r3, [r7, #11]
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060b4:	9302      	str	r3, [sp, #8]
 80060b6:	893b      	ldrh	r3, [r7, #8]
 80060b8:	9301      	str	r3, [sp, #4]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	2301      	movs	r3, #1
 80060c0:	21b9      	movs	r1, #185	; 0xb9
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f007 fbc0 	bl	800d848 <HAL_I2C_Mem_Read>
  return 0;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <GPS_Poll>:
#define LED3_GPIO_Port	((GPIO_TypeDef *) ((0x40000000UL + 0x00020000UL) + 0x0800UL))//OUT_LED3_GPIO_Port
#define LED3_Pin	(uint16_t)0x0008//OUT_LED3_Pin


void GPS_Poll(float *latitude, float *longitude, float *time)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b08c      	sub	sp, #48	; 0x30
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 80060e0:	2364      	movs	r3, #100	; 0x64
 80060e2:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 80060e4:	2300      	movs	r3, #0
 80060e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 80060e8:	2300      	movs	r3, #0
 80060ea:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 80060ec:	e073      	b.n	80061d6 <GPS_Poll+0x102>
		HAL_UART_Receive(GPS.uart, (uint8_t*)&rx_current, 1, 100);
 80060ee:	4b3f      	ldr	r3, [pc, #252]	; (80061ec <GPS_Poll+0x118>)
 80060f0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80060f2:	2364      	movs	r3, #100	; 0x64
 80060f4:	2201      	movs	r2, #1
 80060f6:	493e      	ldr	r1, [pc, #248]	; (80061f0 <GPS_Poll+0x11c>)
 80060f8:	f00b fe6b 	bl	8011dd2 <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 80060fc:	4b3c      	ldr	r3, [pc, #240]	; (80061f0 <GPS_Poll+0x11c>)
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	2b0a      	cmp	r3, #10
 8006102:	d00f      	beq.n	8006124 <GPS_Poll+0x50>
 8006104:	4b3b      	ldr	r3, [pc, #236]	; (80061f4 <GPS_Poll+0x120>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b63      	cmp	r3, #99	; 0x63
 800610a:	d80b      	bhi.n	8006124 <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 800610c:	4b39      	ldr	r3, [pc, #228]	; (80061f4 <GPS_Poll+0x120>)
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	b2d1      	uxtb	r1, r2
 8006114:	4a37      	ldr	r2, [pc, #220]	; (80061f4 <GPS_Poll+0x120>)
 8006116:	7011      	strb	r1, [r2, #0]
 8006118:	461a      	mov	r2, r3
 800611a:	4b35      	ldr	r3, [pc, #212]	; (80061f0 <GPS_Poll+0x11c>)
 800611c:	7819      	ldrb	r1, [r3, #0]
 800611e:	4b36      	ldr	r3, [pc, #216]	; (80061f8 <GPS_Poll+0x124>)
 8006120:	5499      	strb	r1, [r3, r2]
 8006122:	e021      	b.n	8006168 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 8006124:	4834      	ldr	r0, [pc, #208]	; (80061f8 <GPS_Poll+0x124>)
 8006126:	f000 f869 	bl	80061fc <GPS_validate>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d013      	beq.n	8006158 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 8006130:	4831      	ldr	r0, [pc, #196]	; (80061f8 <GPS_Poll+0x124>)
 8006132:	f000 f8c5 	bl	80062c0 <GPS_parse>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00d      	beq.n	8006158 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 800613c:	4b2b      	ldr	r3, [pc, #172]	; (80061ec <GPS_Poll+0x118>)
 800613e:	685a      	ldr	r2, [r3, #4]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 8006144:	4b29      	ldr	r3, [pc, #164]	; (80061ec <GPS_Poll+0x118>)
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 800614c:	4b27      	ldr	r3, [pc, #156]	; (80061ec <GPS_Poll+0x118>)
 800614e:	695a      	ldr	r2, [r3, #20]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	601a      	str	r2, [r3, #0]
					done = 1;
 8006154:	2301      	movs	r3, #1
 8006156:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 8006158:	4b26      	ldr	r3, [pc, #152]	; (80061f4 <GPS_Poll+0x120>)
 800615a:	2200      	movs	r2, #0
 800615c:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 800615e:	2264      	movs	r2, #100	; 0x64
 8006160:	2100      	movs	r1, #0
 8006162:	4825      	ldr	r0, [pc, #148]	; (80061f8 <GPS_Poll+0x124>)
 8006164:	f014 fcb0 	bl	801aac8 <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS.uart);
 8006168:	2300      	movs	r3, #0
 800616a:	623b      	str	r3, [r7, #32]
 800616c:	4b1f      	ldr	r3, [pc, #124]	; (80061ec <GPS_Poll+0x118>)
 800616e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	623b      	str	r3, [r7, #32]
 8006176:	4b1d      	ldr	r3, [pc, #116]	; (80061ec <GPS_Poll+0x118>)
 8006178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	623b      	str	r3, [r7, #32]
 8006180:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS.uart);
 8006182:	2300      	movs	r3, #0
 8006184:	61fb      	str	r3, [r7, #28]
 8006186:	4b19      	ldr	r3, [pc, #100]	; (80061ec <GPS_Poll+0x118>)
 8006188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	61fb      	str	r3, [r7, #28]
 8006190:	4b16      	ldr	r3, [pc, #88]	; (80061ec <GPS_Poll+0x118>)
 8006192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	61fb      	str	r3, [r7, #28]
 800619a:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS.uart);
 800619c:	2300      	movs	r3, #0
 800619e:	61bb      	str	r3, [r7, #24]
 80061a0:	4b12      	ldr	r3, [pc, #72]	; (80061ec <GPS_Poll+0x118>)
 80061a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	61bb      	str	r3, [r7, #24]
 80061aa:	4b10      	ldr	r3, [pc, #64]	; (80061ec <GPS_Poll+0x118>)
 80061ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	61bb      	str	r3, [r7, #24]
 80061b4:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS.uart);
 80061b6:	2300      	movs	r3, #0
 80061b8:	617b      	str	r3, [r7, #20]
 80061ba:	4b0c      	ldr	r3, [pc, #48]	; (80061ec <GPS_Poll+0x118>)
 80061bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	617b      	str	r3, [r7, #20]
 80061c4:	4b09      	ldr	r3, [pc, #36]	; (80061ec <GPS_Poll+0x118>)
 80061c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	617b      	str	r3, [r7, #20]
 80061ce:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 80061d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061d2:	3301      	adds	r3, #1
 80061d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 80061d6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80061d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061da:	429a      	cmp	r2, r3
 80061dc:	d202      	bcs.n	80061e4 <GPS_Poll+0x110>
 80061de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d084      	beq.n	80060ee <GPS_Poll+0x1a>
	}
}
 80061e4:	bf00      	nop
 80061e6:	3730      	adds	r7, #48	; 0x30
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	2000978c 	.word	0x2000978c
 80061f0:	2000059c 	.word	0x2000059c
 80061f4:	2000059d 	.word	0x2000059d
 80061f8:	200097f0 	.word	0x200097f0

080061fc <GPS_validate>:

int GPS_validate(char *nmeastr){
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8006204:	2300      	movs	r3, #0
 8006206:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8006208:	2300      	movs	r3, #0
 800620a:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	4413      	add	r3, r2
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2b24      	cmp	r3, #36	; 0x24
 8006216:	d103      	bne.n	8006220 <GPS_validate+0x24>
        i++;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	3301      	adds	r3, #1
 800621c:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800621e:	e00c      	b.n	800623a <GPS_validate+0x3e>
        return 0;
 8006220:	2300      	movs	r3, #0
 8006222:	e047      	b.n	80062b4 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	4413      	add	r3, r2
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	461a      	mov	r2, r3
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	4053      	eors	r3, r2
 8006232:	613b      	str	r3, [r7, #16]
        i++;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	3301      	adds	r3, #1
 8006238:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	4413      	add	r3, r2
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d008      	beq.n	8006258 <GPS_validate+0x5c>
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	4413      	add	r3, r2
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b2a      	cmp	r3, #42	; 0x2a
 8006250:	d002      	beq.n	8006258 <GPS_validate+0x5c>
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2b4a      	cmp	r3, #74	; 0x4a
 8006256:	dde5      	ble.n	8006224 <GPS_validate+0x28>
    }

    if(i >= 75){
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	2b4a      	cmp	r3, #74	; 0x4a
 800625c:	dd01      	ble.n	8006262 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 800625e:	2300      	movs	r3, #0
 8006260:	e028      	b.n	80062b4 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	4413      	add	r3, r2
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	2b2a      	cmp	r3, #42	; 0x2a
 800626c:	d119      	bne.n	80062a2 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	3301      	adds	r3, #1
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	4413      	add	r3, r2
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	3302      	adds	r3, #2
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	4413      	add	r3, r2
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8006286:	2300      	movs	r3, #0
 8006288:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800628a:	f107 0308 	add.w	r3, r7, #8
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	490a      	ldr	r1, [pc, #40]	; (80062bc <GPS_validate+0xc0>)
 8006292:	4618      	mov	r0, r3
 8006294:	f015 ff14 	bl	801c0c0 <siprintf>
    return((checkcalcstr[0] == check[0])
 8006298:	7a3a      	ldrb	r2, [r7, #8]
 800629a:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800629c:	429a      	cmp	r2, r3
 800629e:	d108      	bne.n	80062b2 <GPS_validate+0xb6>
 80062a0:	e001      	b.n	80062a6 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 80062a2:	2300      	movs	r3, #0
 80062a4:	e006      	b.n	80062b4 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80062a6:	7a7a      	ldrb	r2, [r7, #9]
 80062a8:	7b7b      	ldrb	r3, [r7, #13]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d101      	bne.n	80062b2 <GPS_validate+0xb6>
 80062ae:	2301      	movs	r3, #1
 80062b0:	e000      	b.n	80062b4 <GPS_validate+0xb8>
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3718      	adds	r7, #24
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	08021824 	.word	0x08021824

080062c0 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b08a      	sub	sp, #40	; 0x28
 80062c4:	af08      	add	r7, sp, #32
 80062c6:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 80062c8:	2206      	movs	r2, #6
 80062ca:	496d      	ldr	r1, [pc, #436]	; (8006480 <GPS_parse+0x1c0>)
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f015 ff9d 	bl	801c20c <strncmp>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d139      	bne.n	800634c <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 80062d8:	4b6a      	ldr	r3, [pc, #424]	; (8006484 <GPS_parse+0x1c4>)
 80062da:	9307      	str	r3, [sp, #28]
 80062dc:	4b6a      	ldr	r3, [pc, #424]	; (8006488 <GPS_parse+0x1c8>)
 80062de:	9306      	str	r3, [sp, #24]
 80062e0:	4b6a      	ldr	r3, [pc, #424]	; (800648c <GPS_parse+0x1cc>)
 80062e2:	9305      	str	r3, [sp, #20]
 80062e4:	4b6a      	ldr	r3, [pc, #424]	; (8006490 <GPS_parse+0x1d0>)
 80062e6:	9304      	str	r3, [sp, #16]
 80062e8:	4b6a      	ldr	r3, [pc, #424]	; (8006494 <GPS_parse+0x1d4>)
 80062ea:	9303      	str	r3, [sp, #12]
 80062ec:	4b6a      	ldr	r3, [pc, #424]	; (8006498 <GPS_parse+0x1d8>)
 80062ee:	9302      	str	r3, [sp, #8]
 80062f0:	4b6a      	ldr	r3, [pc, #424]	; (800649c <GPS_parse+0x1dc>)
 80062f2:	9301      	str	r3, [sp, #4]
 80062f4:	4b6a      	ldr	r3, [pc, #424]	; (80064a0 <GPS_parse+0x1e0>)
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	4b6a      	ldr	r3, [pc, #424]	; (80064a4 <GPS_parse+0x1e4>)
 80062fa:	4a6b      	ldr	r2, [pc, #428]	; (80064a8 <GPS_parse+0x1e8>)
 80062fc:	496b      	ldr	r1, [pc, #428]	; (80064ac <GPS_parse+0x1ec>)
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f015 fefe 	bl	801c100 <siscanf>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	f340 80b5 	ble.w	8006476 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800630c:	4b68      	ldr	r3, [pc, #416]	; (80064b0 <GPS_parse+0x1f0>)
 800630e:	edd3 7a04 	vldr	s15, [r3, #16]
 8006312:	4b67      	ldr	r3, [pc, #412]	; (80064b0 <GPS_parse+0x1f0>)
 8006314:	7e1b      	ldrb	r3, [r3, #24]
 8006316:	4618      	mov	r0, r3
 8006318:	eeb0 0a67 	vmov.f32	s0, s15
 800631c:	f000 f8ec 	bl	80064f8 <GPS_nmea_to_dec>
 8006320:	eef0 7a40 	vmov.f32	s15, s0
 8006324:	4b62      	ldr	r3, [pc, #392]	; (80064b0 <GPS_parse+0x1f0>)
 8006326:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800632a:	4b61      	ldr	r3, [pc, #388]	; (80064b0 <GPS_parse+0x1f0>)
 800632c:	edd3 7a03 	vldr	s15, [r3, #12]
 8006330:	4b5f      	ldr	r3, [pc, #380]	; (80064b0 <GPS_parse+0x1f0>)
 8006332:	7e5b      	ldrb	r3, [r3, #25]
 8006334:	4618      	mov	r0, r3
 8006336:	eeb0 0a67 	vmov.f32	s0, s15
 800633a:	f000 f8dd 	bl	80064f8 <GPS_nmea_to_dec>
 800633e:	eef0 7a40 	vmov.f32	s15, s0
 8006342:	4b5b      	ldr	r3, [pc, #364]	; (80064b0 <GPS_parse+0x1f0>)
 8006344:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8006348:	2301      	movs	r3, #1
 800634a:	e095      	b.n	8006478 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 800634c:	2206      	movs	r2, #6
 800634e:	4959      	ldr	r1, [pc, #356]	; (80064b4 <GPS_parse+0x1f4>)
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f015 ff5b 	bl	801c20c <strncmp>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d134      	bne.n	80063c6 <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 800635c:	4b56      	ldr	r3, [pc, #344]	; (80064b8 <GPS_parse+0x1f8>)
 800635e:	9305      	str	r3, [sp, #20]
 8006360:	4b56      	ldr	r3, [pc, #344]	; (80064bc <GPS_parse+0x1fc>)
 8006362:	9304      	str	r3, [sp, #16]
 8006364:	4b56      	ldr	r3, [pc, #344]	; (80064c0 <GPS_parse+0x200>)
 8006366:	9303      	str	r3, [sp, #12]
 8006368:	4b4b      	ldr	r3, [pc, #300]	; (8006498 <GPS_parse+0x1d8>)
 800636a:	9302      	str	r3, [sp, #8]
 800636c:	4b4b      	ldr	r3, [pc, #300]	; (800649c <GPS_parse+0x1dc>)
 800636e:	9301      	str	r3, [sp, #4]
 8006370:	4b4b      	ldr	r3, [pc, #300]	; (80064a0 <GPS_parse+0x1e0>)
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	4b4b      	ldr	r3, [pc, #300]	; (80064a4 <GPS_parse+0x1e4>)
 8006376:	4a4c      	ldr	r2, [pc, #304]	; (80064a8 <GPS_parse+0x1e8>)
 8006378:	4952      	ldr	r1, [pc, #328]	; (80064c4 <GPS_parse+0x204>)
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f015 fec0 	bl	801c100 <siscanf>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	dd77      	ble.n	8006476 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8006386:	4b4a      	ldr	r3, [pc, #296]	; (80064b0 <GPS_parse+0x1f0>)
 8006388:	edd3 7a04 	vldr	s15, [r3, #16]
 800638c:	4b48      	ldr	r3, [pc, #288]	; (80064b0 <GPS_parse+0x1f0>)
 800638e:	7e1b      	ldrb	r3, [r3, #24]
 8006390:	4618      	mov	r0, r3
 8006392:	eeb0 0a67 	vmov.f32	s0, s15
 8006396:	f000 f8af 	bl	80064f8 <GPS_nmea_to_dec>
 800639a:	eef0 7a40 	vmov.f32	s15, s0
 800639e:	4b44      	ldr	r3, [pc, #272]	; (80064b0 <GPS_parse+0x1f0>)
 80063a0:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80063a4:	4b42      	ldr	r3, [pc, #264]	; (80064b0 <GPS_parse+0x1f0>)
 80063a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80063aa:	4b41      	ldr	r3, [pc, #260]	; (80064b0 <GPS_parse+0x1f0>)
 80063ac:	7e5b      	ldrb	r3, [r3, #25]
 80063ae:	4618      	mov	r0, r3
 80063b0:	eeb0 0a67 	vmov.f32	s0, s15
 80063b4:	f000 f8a0 	bl	80064f8 <GPS_nmea_to_dec>
 80063b8:	eef0 7a40 	vmov.f32	s15, s0
 80063bc:	4b3c      	ldr	r3, [pc, #240]	; (80064b0 <GPS_parse+0x1f0>)
 80063be:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e058      	b.n	8006478 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 80063c6:	2206      	movs	r2, #6
 80063c8:	493f      	ldr	r1, [pc, #252]	; (80064c8 <GPS_parse+0x208>)
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f015 ff1e 	bl	801c20c <strncmp>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d130      	bne.n	8006438 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 80063d6:	4b3d      	ldr	r3, [pc, #244]	; (80064cc <GPS_parse+0x20c>)
 80063d8:	9303      	str	r3, [sp, #12]
 80063da:	4b33      	ldr	r3, [pc, #204]	; (80064a8 <GPS_parse+0x1e8>)
 80063dc:	9302      	str	r3, [sp, #8]
 80063de:	4b2e      	ldr	r3, [pc, #184]	; (8006498 <GPS_parse+0x1d8>)
 80063e0:	9301      	str	r3, [sp, #4]
 80063e2:	4b2e      	ldr	r3, [pc, #184]	; (800649c <GPS_parse+0x1dc>)
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	4b2e      	ldr	r3, [pc, #184]	; (80064a0 <GPS_parse+0x1e0>)
 80063e8:	4a2e      	ldr	r2, [pc, #184]	; (80064a4 <GPS_parse+0x1e4>)
 80063ea:	4939      	ldr	r1, [pc, #228]	; (80064d0 <GPS_parse+0x210>)
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f015 fe87 	bl	801c100 <siscanf>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	dd3e      	ble.n	8006476 <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80063f8:	4b2d      	ldr	r3, [pc, #180]	; (80064b0 <GPS_parse+0x1f0>)
 80063fa:	edd3 7a04 	vldr	s15, [r3, #16]
 80063fe:	4b2c      	ldr	r3, [pc, #176]	; (80064b0 <GPS_parse+0x1f0>)
 8006400:	7e1b      	ldrb	r3, [r3, #24]
 8006402:	4618      	mov	r0, r3
 8006404:	eeb0 0a67 	vmov.f32	s0, s15
 8006408:	f000 f876 	bl	80064f8 <GPS_nmea_to_dec>
 800640c:	eef0 7a40 	vmov.f32	s15, s0
 8006410:	4b27      	ldr	r3, [pc, #156]	; (80064b0 <GPS_parse+0x1f0>)
 8006412:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8006416:	4b26      	ldr	r3, [pc, #152]	; (80064b0 <GPS_parse+0x1f0>)
 8006418:	edd3 7a03 	vldr	s15, [r3, #12]
 800641c:	4b24      	ldr	r3, [pc, #144]	; (80064b0 <GPS_parse+0x1f0>)
 800641e:	7e5b      	ldrb	r3, [r3, #25]
 8006420:	4618      	mov	r0, r3
 8006422:	eeb0 0a67 	vmov.f32	s0, s15
 8006426:	f000 f867 	bl	80064f8 <GPS_nmea_to_dec>
 800642a:	eef0 7a40 	vmov.f32	s15, s0
 800642e:	4b20      	ldr	r3, [pc, #128]	; (80064b0 <GPS_parse+0x1f0>)
 8006430:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 8006434:	2301      	movs	r3, #1
 8006436:	e01f      	b.n	8006478 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8006438:	2206      	movs	r2, #6
 800643a:	4926      	ldr	r1, [pc, #152]	; (80064d4 <GPS_parse+0x214>)
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f015 fee5 	bl	801c20c <strncmp>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d116      	bne.n	8006476 <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8006448:	4b23      	ldr	r3, [pc, #140]	; (80064d8 <GPS_parse+0x218>)
 800644a:	9305      	str	r3, [sp, #20]
 800644c:	4b23      	ldr	r3, [pc, #140]	; (80064dc <GPS_parse+0x21c>)
 800644e:	9304      	str	r3, [sp, #16]
 8006450:	4b23      	ldr	r3, [pc, #140]	; (80064e0 <GPS_parse+0x220>)
 8006452:	9303      	str	r3, [sp, #12]
 8006454:	4b1a      	ldr	r3, [pc, #104]	; (80064c0 <GPS_parse+0x200>)
 8006456:	9302      	str	r3, [sp, #8]
 8006458:	4b22      	ldr	r3, [pc, #136]	; (80064e4 <GPS_parse+0x224>)
 800645a:	9301      	str	r3, [sp, #4]
 800645c:	4b22      	ldr	r3, [pc, #136]	; (80064e8 <GPS_parse+0x228>)
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	4b22      	ldr	r3, [pc, #136]	; (80064ec <GPS_parse+0x22c>)
 8006462:	4a23      	ldr	r2, [pc, #140]	; (80064f0 <GPS_parse+0x230>)
 8006464:	4923      	ldr	r1, [pc, #140]	; (80064f4 <GPS_parse+0x234>)
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f015 fe4a 	bl	801c100 <siscanf>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	dd01      	ble.n	8006476 <GPS_parse+0x1b6>
            return 0;
 8006472:	2300      	movs	r3, #0
 8006474:	e000      	b.n	8006478 <GPS_parse+0x1b8>
    }
    return 0;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	0802182c 	.word	0x0802182c
 8006484:	200097b8 	.word	0x200097b8
 8006488:	200097b4 	.word	0x200097b4
 800648c:	200097b0 	.word	0x200097b0
 8006490:	200097ac 	.word	0x200097ac
 8006494:	200097a8 	.word	0x200097a8
 8006498:	200097a5 	.word	0x200097a5
 800649c:	20009798 	.word	0x20009798
 80064a0:	200097a4 	.word	0x200097a4
 80064a4:	2000979c 	.word	0x2000979c
 80064a8:	200097a0 	.word	0x200097a0
 80064ac:	08021834 	.word	0x08021834
 80064b0:	2000978c 	.word	0x2000978c
 80064b4:	0802185c 	.word	0x0802185c
 80064b8:	200097c4 	.word	0x200097c4
 80064bc:	200097c0 	.word	0x200097c0
 80064c0:	200097bc 	.word	0x200097bc
 80064c4:	08021864 	.word	0x08021864
 80064c8:	08021884 	.word	0x08021884
 80064cc:	200097c8 	.word	0x200097c8
 80064d0:	0802188c 	.word	0x0802188c
 80064d4:	080218a8 	.word	0x080218a8
 80064d8:	200097e0 	.word	0x200097e0
 80064dc:	200097dc 	.word	0x200097dc
 80064e0:	200097d9 	.word	0x200097d9
 80064e4:	200097d8 	.word	0x200097d8
 80064e8:	200097d4 	.word	0x200097d4
 80064ec:	200097d0 	.word	0x200097d0
 80064f0:	200097cc 	.word	0x200097cc
 80064f4:	080218b0 	.word	0x080218b0

080064f8 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8006502:	4603      	mov	r3, r0
 8006504:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8006506:	ed97 7a01 	vldr	s14, [r7, #4]
 800650a:	eddf 6a20 	vldr	s13, [pc, #128]	; 800658c <GPS_nmea_to_dec+0x94>
 800650e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006512:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006516:	ee17 3a90 	vmov	r3, s15
 800651a:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	2264      	movs	r2, #100	; 0x64
 8006520:	fb02 f303 	mul.w	r3, r2, r3
 8006524:	ee07 3a90 	vmov	s15, r3
 8006528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800652c:	ed97 7a01 	vldr	s14, [r7, #4]
 8006530:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006534:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8006538:	ed97 7a03 	vldr	s14, [r7, #12]
 800653c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8006590 <GPS_nmea_to_dec+0x98>
 8006540:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006544:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	ee07 3a90 	vmov	s15, r3
 800654e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006552:	ed97 7a02 	vldr	s14, [r7, #8]
 8006556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800655a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800655e:	78fb      	ldrb	r3, [r7, #3]
 8006560:	2b53      	cmp	r3, #83	; 0x53
 8006562:	d002      	beq.n	800656a <GPS_nmea_to_dec+0x72>
 8006564:	78fb      	ldrb	r3, [r7, #3]
 8006566:	2b57      	cmp	r3, #87	; 0x57
 8006568:	d105      	bne.n	8006576 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 800656a:	edd7 7a05 	vldr	s15, [r7, #20]
 800656e:	eef1 7a67 	vneg.f32	s15, s15
 8006572:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	ee07 3a90 	vmov	s15, r3
}
 800657c:	eeb0 0a67 	vmov.f32	s0, s15
 8006580:	371c      	adds	r7, #28
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	42c80000 	.word	0x42c80000
 8006590:	42700000 	.word	0x42700000

08006594 <GPS_Init>:
	}
}


void GPS_Init(UART_HandleTypeDef* data_uart, void (*gps_print)(char*),
		void (*gps_tone_freq)(uint32_t duration, uint32_t repeats, uint32_t freq)){
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
	GPS.print = gps_print;
 80065a0:	4a0a      	ldr	r2, [pc, #40]	; (80065cc <GPS_Init+0x38>)
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	65d3      	str	r3, [r2, #92]	; 0x5c
	GPS.print((char*) "\r\nGPS Init...");
 80065a6:	4b09      	ldr	r3, [pc, #36]	; (80065cc <GPS_Init+0x38>)
 80065a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065aa:	4809      	ldr	r0, [pc, #36]	; (80065d0 <GPS_Init+0x3c>)
 80065ac:	4798      	blx	r3
	GPS.uart = data_uart;
 80065ae:	4a07      	ldr	r2, [pc, #28]	; (80065cc <GPS_Init+0x38>)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6593      	str	r3, [r2, #88]	; 0x58
	GPS.tone_freq = gps_tone_freq;
 80065b4:	4a05      	ldr	r2, [pc, #20]	; (80065cc <GPS_Init+0x38>)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6613      	str	r3, [r2, #96]	; 0x60
	GPS.print((char*) "OK\r\n");
 80065ba:	4b04      	ldr	r3, [pc, #16]	; (80065cc <GPS_Init+0x38>)
 80065bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065be:	4805      	ldr	r0, [pc, #20]	; (80065d4 <GPS_Init+0x40>)
 80065c0:	4798      	blx	r3
}
 80065c2:	bf00      	nop
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	2000978c 	.word	0x2000978c
 80065d0:	080218d0 	.word	0x080218d0
 80065d4:	080218e0 	.word	0x080218e0

080065d8 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80065d8:	b590      	push	{r4, r7, lr}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	607a      	str	r2, [r7, #4]
 80065e2:	461a      	mov	r2, r3
 80065e4:	460b      	mov	r3, r1
 80065e6:	72fb      	strb	r3, [r7, #11]
 80065e8:	4613      	mov	r3, r2
 80065ea:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	685c      	ldr	r4, [r3, #4]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6898      	ldr	r0, [r3, #8]
 80065f4:	893b      	ldrh	r3, [r7, #8]
 80065f6:	7af9      	ldrb	r1, [r7, #11]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	47a0      	blx	r4
 80065fc:	6178      	str	r0, [r7, #20]

  return ret;
 80065fe:	697b      	ldr	r3, [r7, #20]
}
 8006600:	4618      	mov	r0, r3
 8006602:	371c      	adds	r7, #28
 8006604:	46bd      	mov	sp, r7
 8006606:	bd90      	pop	{r4, r7, pc}

08006608 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8006608:	b590      	push	{r4, r7, lr}
 800660a:	b087      	sub	sp, #28
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	607a      	str	r2, [r7, #4]
 8006612:	461a      	mov	r2, r3
 8006614:	460b      	mov	r3, r1
 8006616:	72fb      	strb	r3, [r7, #11]
 8006618:	4613      	mov	r3, r2
 800661a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681c      	ldr	r4, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6898      	ldr	r0, [r3, #8]
 8006624:	893b      	ldrh	r3, [r7, #8]
 8006626:	7af9      	ldrb	r1, [r7, #11]
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	47a0      	blx	r4
 800662c:	6178      	str	r0, [r7, #20]

  return ret;
 800662e:	697b      	ldr	r3, [r7, #20]
}
 8006630:	4618      	mov	r0, r3
 8006632:	371c      	adds	r7, #28
 8006634:	46bd      	mov	sp, r7
 8006636:	bd90      	pop	{r4, r7, pc}

08006638 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	ee07 3a90 	vmov	s15, r3
 8006646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800664a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006664 <lps22hh_from_lsb_to_hpa+0x2c>
 800664e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006652:	eef0 7a66 	vmov.f32	s15, s13
}
 8006656:	eeb0 0a67 	vmov.f32	s0, s15
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	49800000 	.word	0x49800000

08006668 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	4603      	mov	r3, r0
 8006670:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8006672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006676:	ee07 3a90 	vmov	s15, r3
 800667a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800667e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006698 <lps22hh_from_lsb_to_celsius+0x30>
 8006682:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006686:	eef0 7a66 	vmov.f32	s15, s13
}
 800668a:	eeb0 0a67 	vmov.f32	s0, s15
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	42c80000 	.word	0x42c80000

0800669c <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80066a8:	f107 0208 	add.w	r2, r7, #8
 80066ac:	2301      	movs	r3, #1
 80066ae:	2110      	movs	r1, #16
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7ff ff91 	bl	80065d8 <lps22hh_read_reg>
 80066b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10f      	bne.n	80066de <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80066be:	78fb      	ldrb	r3, [r7, #3]
 80066c0:	f003 0301 	and.w	r3, r3, #1
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	7a3b      	ldrb	r3, [r7, #8]
 80066c8:	f362 0341 	bfi	r3, r2, #1, #1
 80066cc:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80066ce:	f107 0208 	add.w	r2, r7, #8
 80066d2:	2301      	movs	r3, #1
 80066d4:	2110      	movs	r1, #16
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7ff ff96 	bl	8006608 <lps22hh_write_reg>
 80066dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80066de:	68fb      	ldr	r3, [r7, #12]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	460b      	mov	r3, r1
 80066f2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80066f4:	f107 0210 	add.w	r2, r7, #16
 80066f8:	2301      	movs	r3, #1
 80066fa:	2110      	movs	r1, #16
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7ff ff6b 	bl	80065d8 <lps22hh_read_reg>
 8006702:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d107      	bne.n	800671a <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800670a:	f107 020c 	add.w	r2, r7, #12
 800670e:	2301      	movs	r3, #1
 8006710:	2111      	movs	r1, #17
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7ff ff60 	bl	80065d8 <lps22hh_read_reg>
 8006718:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10f      	bne.n	8006740 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8006720:	78fb      	ldrb	r3, [r7, #3]
 8006722:	f003 0307 	and.w	r3, r3, #7
 8006726:	b2da      	uxtb	r2, r3
 8006728:	7c3b      	ldrb	r3, [r7, #16]
 800672a:	f362 1306 	bfi	r3, r2, #4, #3
 800672e:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006730:	f107 0210 	add.w	r2, r7, #16
 8006734:	2301      	movs	r3, #1
 8006736:	2110      	movs	r1, #16
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7ff ff65 	bl	8006608 <lps22hh_write_reg>
 800673e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d119      	bne.n	800677a <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8006746:	78fb      	ldrb	r3, [r7, #3]
 8006748:	091b      	lsrs	r3, r3, #4
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	b2da      	uxtb	r2, r3
 8006750:	7b3b      	ldrb	r3, [r7, #12]
 8006752:	f362 0341 	bfi	r3, r2, #1, #1
 8006756:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8006758:	78fb      	ldrb	r3, [r7, #3]
 800675a:	08db      	lsrs	r3, r3, #3
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	b2da      	uxtb	r2, r3
 8006762:	7b3b      	ldrb	r3, [r7, #12]
 8006764:	f362 0300 	bfi	r3, r2, #0, #1
 8006768:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800676a:	f107 020c 	add.w	r2, r7, #12
 800676e:	2301      	movs	r3, #1
 8006770:	2111      	movs	r1, #17
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7ff ff48 	bl	8006608 <lps22hh_write_reg>
 8006778:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800677a:	697b      	ldr	r3, [r7, #20]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3718      	adds	r7, #24
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <lps22hh_press_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_press_flag_data_ready_get(stmdev_ctx_t *ctx,
                                          uint8_t *val)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 800678e:	f107 0208 	add.w	r2, r7, #8
 8006792:	2301      	movs	r3, #1
 8006794:	2127      	movs	r1, #39	; 0x27
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7ff ff1e 	bl	80065d8 <lps22hh_read_reg>
 800679c:	60f8      	str	r0, [r7, #12]
  *val = reg.p_da;
 800679e:	7a3b      	ldrb	r3, [r7, #8]
 80067a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	461a      	mov	r2, r3
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	701a      	strb	r2, [r3, #0]

  return ret;
 80067ac:	68fb      	ldr	r3, [r7, #12]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b084      	sub	sp, #16
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 80067c0:	f107 0208 	add.w	r2, r7, #8
 80067c4:	2301      	movs	r3, #1
 80067c6:	2127      	movs	r1, #39	; 0x27
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7ff ff05 	bl	80065d8 <lps22hh_read_reg>
 80067ce:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 80067d0:	7a3b      	ldrb	r3, [r7, #8]
 80067d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	461a      	mov	r2, r3
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	701a      	strb	r2, [r3, #0]

  return ret;
 80067de:	68fb      	ldr	r3, [r7, #12]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 80067f2:	f107 0208 	add.w	r2, r7, #8
 80067f6:	2303      	movs	r3, #3
 80067f8:	2128      	movs	r1, #40	; 0x28
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7ff feec 	bl	80065d8 <lps22hh_read_reg>
 8006800:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8006802:	7abb      	ldrb	r3, [r7, #10]
 8006804:	461a      	mov	r2, r3
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	021b      	lsls	r3, r3, #8
 8006810:	7a7a      	ldrb	r2, [r7, #9]
 8006812:	441a      	add	r2, r3
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	021b      	lsls	r3, r3, #8
 800681e:	7a3a      	ldrb	r2, [r7, #8]
 8006820:	441a      	add	r2, r3
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	021a      	lsls	r2, r3, #8
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	601a      	str	r2, [r3, #0]

  return ret;
 8006830:	68fb      	ldr	r3, [r7, #12]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8006844:	f107 0208 	add.w	r2, r7, #8
 8006848:	2302      	movs	r3, #2
 800684a:	212b      	movs	r1, #43	; 0x2b
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7ff fec3 	bl	80065d8 <lps22hh_read_reg>
 8006852:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8006854:	7a7b      	ldrb	r3, [r7, #9]
 8006856:	b21a      	sxth	r2, r3
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006862:	b29b      	uxth	r3, r3
 8006864:	021b      	lsls	r3, r3, #8
 8006866:	b29a      	uxth	r2, r3
 8006868:	7a3b      	ldrb	r3, [r7, #8]
 800686a:	b29b      	uxth	r3, r3
 800686c:	4413      	add	r3, r2
 800686e:	b29b      	uxth	r3, r3
 8006870:	b21a      	sxth	r2, r3
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	801a      	strh	r2, [r3, #0]

  return ret;
 8006876:	68fb      	ldr	r3, [r7, #12]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 800688a:	2301      	movs	r3, #1
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	210f      	movs	r1, #15
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7ff fea1 	bl	80065d8 <lps22hh_read_reg>
 8006896:	60f8      	str	r0, [r7, #12]

  return ret;
 8006898:	68fb      	ldr	r3, [r7, #12]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b084      	sub	sp, #16
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	460b      	mov	r3, r1
 80068ac:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80068ae:	f107 0208 	add.w	r2, r7, #8
 80068b2:	2301      	movs	r3, #1
 80068b4:	2111      	movs	r1, #17
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7ff fe8e 	bl	80065d8 <lps22hh_read_reg>
 80068bc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10f      	bne.n	80068e4 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 80068c4:	78fb      	ldrb	r3, [r7, #3]
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	7a3b      	ldrb	r3, [r7, #8]
 80068ce:	f362 0382 	bfi	r3, r2, #2, #1
 80068d2:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80068d4:	f107 0208 	add.w	r2, r7, #8
 80068d8:	2301      	movs	r3, #1
 80068da:	2111      	movs	r1, #17
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7ff fe93 	bl	8006608 <lps22hh_write_reg>
 80068e2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80068e4:	68fb      	ldr	r3, [r7, #12]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b084      	sub	sp, #16
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80068f8:	f107 0208 	add.w	r2, r7, #8
 80068fc:	2301      	movs	r3, #1
 80068fe:	2111      	movs	r1, #17
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f7ff fe69 	bl	80065d8 <lps22hh_read_reg>
 8006906:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8006908:	7a3b      	ldrb	r3, [r7, #8]
 800690a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800690e:	b2db      	uxtb	r3, r3
 8006910:	461a      	mov	r2, r3
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	701a      	strb	r2, [r3, #0]

  return ret;
 8006916:	68fb      	ldr	r3, [r7, #12]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8006920:	b590      	push	{r4, r7, lr}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	607a      	str	r2, [r7, #4]
 800692a:	461a      	mov	r2, r3
 800692c:	460b      	mov	r3, r1
 800692e:	72fb      	strb	r3, [r7, #11]
 8006930:	4613      	mov	r3, r2
 8006932:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	685c      	ldr	r4, [r3, #4]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6898      	ldr	r0, [r3, #8]
 800693c:	893b      	ldrh	r3, [r7, #8]
 800693e:	7af9      	ldrb	r1, [r7, #11]
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	47a0      	blx	r4
 8006944:	6178      	str	r0, [r7, #20]

  return ret;
 8006946:	697b      	ldr	r3, [r7, #20]
}
 8006948:	4618      	mov	r0, r3
 800694a:	371c      	adds	r7, #28
 800694c:	46bd      	mov	sp, r7
 800694e:	bd90      	pop	{r4, r7, pc}

08006950 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8006950:	b590      	push	{r4, r7, lr}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	607a      	str	r2, [r7, #4]
 800695a:	461a      	mov	r2, r3
 800695c:	460b      	mov	r3, r1
 800695e:	72fb      	strb	r3, [r7, #11]
 8006960:	4613      	mov	r3, r2
 8006962:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681c      	ldr	r4, [r3, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6898      	ldr	r0, [r3, #8]
 800696c:	893b      	ldrh	r3, [r7, #8]
 800696e:	7af9      	ldrb	r1, [r7, #11]
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	47a0      	blx	r4
 8006974:	6178      	str	r0, [r7, #20]

  return ret;
 8006976:	697b      	ldr	r3, [r7, #20]
}
 8006978:	4618      	mov	r0, r3
 800697a:	371c      	adds	r7, #28
 800697c:	46bd      	mov	sp, r7
 800697e:	bd90      	pop	{r4, r7, pc}

08006980 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	4603      	mov	r3, r0
 8006988:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 800698a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800698e:	ee07 3a90 	vmov	s15, r3
 8006992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006996:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80069ac <lsm6dsr_from_fs2g_to_mg+0x2c>
 800699a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800699e:	eeb0 0a67 	vmov.f32	s0, s15
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	3d79db23 	.word	0x3d79db23

080069b0 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	4603      	mov	r3, r0
 80069b8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 80069ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069be:	ee07 3a90 	vmov	s15, r3
 80069c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069c6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80069dc <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 80069ca:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80069ce:	eeb0 0a67 	vmov.f32	s0, s15
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	428c0000 	.word	0x428c0000

080069e0 <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	4603      	mov	r3, r0
 80069e8:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 80069ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069ee:	ee07 3a90 	vmov	s15, r3
 80069f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069f6:	eddf 6a07 	vldr	s13, [pc, #28]	; 8006a14 <lsm6dsr_from_lsb_to_celsius+0x34>
 80069fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80069fe:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8006a02:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8006a06:	eeb0 0a67 	vmov.f32	s0, s15
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	43800000 	.word	0x43800000

08006a18 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006a24:	f107 0208 	add.w	r2, r7, #8
 8006a28:	2301      	movs	r3, #1
 8006a2a:	2110      	movs	r1, #16
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7ff ff77 	bl	8006920 <lsm6dsr_read_reg>
 8006a32:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10f      	bne.n	8006a5a <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8006a3a:	78fb      	ldrb	r3, [r7, #3]
 8006a3c:	f003 0303 	and.w	r3, r3, #3
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	7a3b      	ldrb	r3, [r7, #8]
 8006a44:	f362 0383 	bfi	r3, r2, #2, #2
 8006a48:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8006a4a:	f107 0208 	add.w	r2, r7, #8
 8006a4e:	2301      	movs	r3, #1
 8006a50:	2110      	movs	r1, #16
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7ff ff7c 	bl	8006950 <lsm6dsr_write_reg>
 8006a58:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8006a70:	78fb      	ldrb	r3, [r7, #3]
 8006a72:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8006a74:	f107 030c 	add.w	r3, r7, #12
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 fc54 	bl	8007328 <lsm6dsr_fsm_enable_get>
 8006a80:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f040 80c4 	bne.w	8006c12 <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006a8a:	7b3b      	ldrb	r3, [r7, #12]
 8006a8c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006a90:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006a92:	7b3b      	ldrb	r3, [r7, #12]
 8006a94:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006a98:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006a9e:	7b3b      	ldrb	r3, [r7, #12]
 8006aa0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006aa4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006aaa:	7b3b      	ldrb	r3, [r7, #12]
 8006aac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006ab0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006ab6:	7b3b      	ldrb	r3, [r7, #12]
 8006ab8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006abc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006ac2:	7b3b      	ldrb	r3, [r7, #12]
 8006ac4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006ac8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006aca:	4313      	orrs	r3, r2
 8006acc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006ace:	7b3b      	ldrb	r3, [r7, #12]
 8006ad0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006ad4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006ada:	7b3b      	ldrb	r3, [r7, #12]
 8006adc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006ae0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006ae6:	7b7b      	ldrb	r3, [r7, #13]
 8006ae8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006aec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006aee:	4313      	orrs	r3, r2
 8006af0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006af2:	7b7b      	ldrb	r3, [r7, #13]
 8006af4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006af8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006afa:	4313      	orrs	r3, r2
 8006afc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006afe:	7b7b      	ldrb	r3, [r7, #13]
 8006b00:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006b04:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006b06:	4313      	orrs	r3, r2
 8006b08:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006b0a:	7b7b      	ldrb	r3, [r7, #13]
 8006b0c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006b10:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006b12:	4313      	orrs	r3, r2
 8006b14:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006b16:	7b7b      	ldrb	r3, [r7, #13]
 8006b18:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006b1c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006b22:	7b7b      	ldrb	r3, [r7, #13]
 8006b24:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006b28:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006b2e:	7b7b      	ldrb	r3, [r7, #13]
 8006b30:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006b34:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006b36:	4313      	orrs	r3, r2
 8006b38:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8006b3a:	7b7b      	ldrb	r3, [r7, #13]
 8006b3c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006b40:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006b42:	4313      	orrs	r3, r2
 8006b44:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d163      	bne.n	8006c12 <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8006b4a:	f107 030b 	add.w	r3, r7, #11
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fc15 	bl	8007380 <lsm6dsr_fsm_data_rate_get>
 8006b56:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d159      	bne.n	8006c12 <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8006b5e:	7afb      	ldrb	r3, [r7, #11]
 8006b60:	2b03      	cmp	r3, #3
 8006b62:	d853      	bhi.n	8006c0c <lsm6dsr_xl_data_rate_set+0x1a8>
 8006b64:	a201      	add	r2, pc, #4	; (adr r2, 8006b6c <lsm6dsr_xl_data_rate_set+0x108>)
 8006b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6a:	bf00      	nop
 8006b6c:	08006b7d 	.word	0x08006b7d
 8006b70:	08006b8f 	.word	0x08006b8f
 8006b74:	08006bad 	.word	0x08006bad
 8006b78:	08006bd7 	.word	0x08006bd7
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006b7c:	78fb      	ldrb	r3, [r7, #3]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d102      	bne.n	8006b88 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 8006b82:	2301      	movs	r3, #1
 8006b84:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006b86:	e045      	b.n	8006c14 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006b88:	78fb      	ldrb	r3, [r7, #3]
 8006b8a:	75fb      	strb	r3, [r7, #23]
            break;
 8006b8c:	e042      	b.n	8006c14 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006b8e:	78fb      	ldrb	r3, [r7, #3]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d102      	bne.n	8006b9a <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8006b94:	2302      	movs	r3, #2
 8006b96:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006b98:	e03c      	b.n	8006c14 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8006b9a:	78fb      	ldrb	r3, [r7, #3]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d102      	bne.n	8006ba6 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	75fb      	strb	r3, [r7, #23]
            break;
 8006ba4:	e036      	b.n	8006c14 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006ba6:	78fb      	ldrb	r3, [r7, #3]
 8006ba8:	75fb      	strb	r3, [r7, #23]
            break;
 8006baa:	e033      	b.n	8006c14 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006bac:	78fb      	ldrb	r3, [r7, #3]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d102      	bne.n	8006bb8 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006bb6:	e02d      	b.n	8006c14 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8006bb8:	78fb      	ldrb	r3, [r7, #3]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d102      	bne.n	8006bc4 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	75fb      	strb	r3, [r7, #23]
            break;
 8006bc2:	e027      	b.n	8006c14 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8006bc4:	78fb      	ldrb	r3, [r7, #3]
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d102      	bne.n	8006bd0 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	75fb      	strb	r3, [r7, #23]
            break;
 8006bce:	e021      	b.n	8006c14 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006bd0:	78fb      	ldrb	r3, [r7, #3]
 8006bd2:	75fb      	strb	r3, [r7, #23]
            break;
 8006bd4:	e01e      	b.n	8006c14 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006bd6:	78fb      	ldrb	r3, [r7, #3]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d102      	bne.n	8006be2 <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006bdc:	2304      	movs	r3, #4
 8006bde:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006be0:	e018      	b.n	8006c14 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8006be2:	78fb      	ldrb	r3, [r7, #3]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d102      	bne.n	8006bee <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006be8:	2304      	movs	r3, #4
 8006bea:	75fb      	strb	r3, [r7, #23]
            break;
 8006bec:	e012      	b.n	8006c14 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8006bee:	78fb      	ldrb	r3, [r7, #3]
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d102      	bne.n	8006bfa <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006bf4:	2304      	movs	r3, #4
 8006bf6:	75fb      	strb	r3, [r7, #23]
            break;
 8006bf8:	e00c      	b.n	8006c14 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8006bfa:	78fb      	ldrb	r3, [r7, #3]
 8006bfc:	2b03      	cmp	r3, #3
 8006bfe:	d102      	bne.n	8006c06 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006c00:	2304      	movs	r3, #4
 8006c02:	75fb      	strb	r3, [r7, #23]
            break;
 8006c04:	e006      	b.n	8006c14 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006c06:	78fb      	ldrb	r3, [r7, #3]
 8006c08:	75fb      	strb	r3, [r7, #23]
            break;
 8006c0a:	e003      	b.n	8006c14 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8006c0c:	78fb      	ldrb	r3, [r7, #3]
 8006c0e:	75fb      	strb	r3, [r7, #23]
            break;
 8006c10:	e000      	b.n	8006c14 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 8006c12:	bf00      	nop
    }
  }

  if (ret == 0)
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d107      	bne.n	8006c2a <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006c1a:	f107 0208 	add.w	r2, r7, #8
 8006c1e:	2301      	movs	r3, #1
 8006c20:	2110      	movs	r1, #16
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7ff fe7c 	bl	8006920 <lsm6dsr_read_reg>
 8006c28:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10f      	bne.n	8006c50 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8006c30:	7dfb      	ldrb	r3, [r7, #23]
 8006c32:	f003 030f 	and.w	r3, r3, #15
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	7a3b      	ldrb	r3, [r7, #8]
 8006c3a:	f362 1307 	bfi	r3, r2, #4, #4
 8006c3e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8006c40:	f107 0208 	add.w	r2, r7, #8
 8006c44:	2301      	movs	r3, #1
 8006c46:	2110      	movs	r1, #16
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7ff fe81 	bl	8006950 <lsm6dsr_write_reg>
 8006c4e:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8006c50:	693b      	ldr	r3, [r7, #16]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop

08006c5c <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	460b      	mov	r3, r1
 8006c66:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006c68:	f107 0208 	add.w	r2, r7, #8
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	2111      	movs	r1, #17
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f7ff fe55 	bl	8006920 <lsm6dsr_read_reg>
 8006c76:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10f      	bne.n	8006c9e <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8006c7e:	78fb      	ldrb	r3, [r7, #3]
 8006c80:	f003 030f 	and.w	r3, r3, #15
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	7a3b      	ldrb	r3, [r7, #8]
 8006c88:	f362 0303 	bfi	r3, r2, #0, #4
 8006c8c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006c8e:	f107 0208 	add.w	r2, r7, #8
 8006c92:	2301      	movs	r3, #1
 8006c94:	2111      	movs	r1, #17
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7ff fe5a 	bl	8006950 <lsm6dsr_write_reg>
 8006c9c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8006cb4:	78fb      	ldrb	r3, [r7, #3]
 8006cb6:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8006cb8:	f107 030c 	add.w	r3, r7, #12
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fb32 	bl	8007328 <lsm6dsr_fsm_enable_get>
 8006cc4:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f040 80c4 	bne.w	8006e56 <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006cce:	7b3b      	ldrb	r3, [r7, #12]
 8006cd0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006cd4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006cd6:	7b3b      	ldrb	r3, [r7, #12]
 8006cd8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006cdc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006ce2:	7b3b      	ldrb	r3, [r7, #12]
 8006ce4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006ce8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006cea:	4313      	orrs	r3, r2
 8006cec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006cee:	7b3b      	ldrb	r3, [r7, #12]
 8006cf0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006cf4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006cfa:	7b3b      	ldrb	r3, [r7, #12]
 8006cfc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006d00:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006d02:	4313      	orrs	r3, r2
 8006d04:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006d06:	7b3b      	ldrb	r3, [r7, #12]
 8006d08:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006d0c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006d12:	7b3b      	ldrb	r3, [r7, #12]
 8006d14:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006d18:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006d1e:	7b3b      	ldrb	r3, [r7, #12]
 8006d20:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006d24:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006d26:	4313      	orrs	r3, r2
 8006d28:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006d2a:	7b7b      	ldrb	r3, [r7, #13]
 8006d2c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006d30:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006d32:	4313      	orrs	r3, r2
 8006d34:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006d36:	7b7b      	ldrb	r3, [r7, #13]
 8006d38:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006d3c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006d42:	7b7b      	ldrb	r3, [r7, #13]
 8006d44:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006d48:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006d4e:	7b7b      	ldrb	r3, [r7, #13]
 8006d50:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006d54:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006d56:	4313      	orrs	r3, r2
 8006d58:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006d5a:	7b7b      	ldrb	r3, [r7, #13]
 8006d5c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006d60:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006d62:	4313      	orrs	r3, r2
 8006d64:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006d66:	7b7b      	ldrb	r3, [r7, #13]
 8006d68:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006d6c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006d72:	7b7b      	ldrb	r3, [r7, #13]
 8006d74:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006d78:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8006d7e:	7b7b      	ldrb	r3, [r7, #13]
 8006d80:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006d84:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006d86:	4313      	orrs	r3, r2
 8006d88:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d163      	bne.n	8006e56 <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8006d8e:	f107 030b 	add.w	r3, r7, #11
 8006d92:	4619      	mov	r1, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 faf3 	bl	8007380 <lsm6dsr_fsm_data_rate_get>
 8006d9a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d159      	bne.n	8006e56 <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8006da2:	7afb      	ldrb	r3, [r7, #11]
 8006da4:	2b03      	cmp	r3, #3
 8006da6:	d853      	bhi.n	8006e50 <lsm6dsr_gy_data_rate_set+0x1a8>
 8006da8:	a201      	add	r2, pc, #4	; (adr r2, 8006db0 <lsm6dsr_gy_data_rate_set+0x108>)
 8006daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dae:	bf00      	nop
 8006db0:	08006dc1 	.word	0x08006dc1
 8006db4:	08006dd3 	.word	0x08006dd3
 8006db8:	08006df1 	.word	0x08006df1
 8006dbc:	08006e1b 	.word	0x08006e1b
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006dc0:	78fb      	ldrb	r3, [r7, #3]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d102      	bne.n	8006dcc <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006dca:	e045      	b.n	8006e58 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006dcc:	78fb      	ldrb	r3, [r7, #3]
 8006dce:	75fb      	strb	r3, [r7, #23]
            break;
 8006dd0:	e042      	b.n	8006e58 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006dd2:	78fb      	ldrb	r3, [r7, #3]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d102      	bne.n	8006dde <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8006dd8:	2302      	movs	r3, #2
 8006dda:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006ddc:	e03c      	b.n	8006e58 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8006dde:	78fb      	ldrb	r3, [r7, #3]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d102      	bne.n	8006dea <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8006de4:	2302      	movs	r3, #2
 8006de6:	75fb      	strb	r3, [r7, #23]
            break;
 8006de8:	e036      	b.n	8006e58 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006dea:	78fb      	ldrb	r3, [r7, #3]
 8006dec:	75fb      	strb	r3, [r7, #23]
            break;
 8006dee:	e033      	b.n	8006e58 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006df0:	78fb      	ldrb	r3, [r7, #3]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d102      	bne.n	8006dfc <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8006df6:	2303      	movs	r3, #3
 8006df8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006dfa:	e02d      	b.n	8006e58 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8006dfc:	78fb      	ldrb	r3, [r7, #3]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d102      	bne.n	8006e08 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8006e02:	2303      	movs	r3, #3
 8006e04:	75fb      	strb	r3, [r7, #23]
            break;
 8006e06:	e027      	b.n	8006e58 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8006e08:	78fb      	ldrb	r3, [r7, #3]
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d102      	bne.n	8006e14 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	75fb      	strb	r3, [r7, #23]
            break;
 8006e12:	e021      	b.n	8006e58 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006e14:	78fb      	ldrb	r3, [r7, #3]
 8006e16:	75fb      	strb	r3, [r7, #23]
            break;
 8006e18:	e01e      	b.n	8006e58 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006e1a:	78fb      	ldrb	r3, [r7, #3]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d102      	bne.n	8006e26 <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006e20:	2304      	movs	r3, #4
 8006e22:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006e24:	e018      	b.n	8006e58 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8006e26:	78fb      	ldrb	r3, [r7, #3]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d102      	bne.n	8006e32 <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006e2c:	2304      	movs	r3, #4
 8006e2e:	75fb      	strb	r3, [r7, #23]
            break;
 8006e30:	e012      	b.n	8006e58 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8006e32:	78fb      	ldrb	r3, [r7, #3]
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d102      	bne.n	8006e3e <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006e38:	2304      	movs	r3, #4
 8006e3a:	75fb      	strb	r3, [r7, #23]
            break;
 8006e3c:	e00c      	b.n	8006e58 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 8006e3e:	78fb      	ldrb	r3, [r7, #3]
 8006e40:	2b03      	cmp	r3, #3
 8006e42:	d102      	bne.n	8006e4a <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006e44:	2304      	movs	r3, #4
 8006e46:	75fb      	strb	r3, [r7, #23]
            break;
 8006e48:	e006      	b.n	8006e58 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006e4a:	78fb      	ldrb	r3, [r7, #3]
 8006e4c:	75fb      	strb	r3, [r7, #23]
            break;
 8006e4e:	e003      	b.n	8006e58 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8006e50:	78fb      	ldrb	r3, [r7, #3]
 8006e52:	75fb      	strb	r3, [r7, #23]
            break;
 8006e54:	e000      	b.n	8006e58 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 8006e56:	bf00      	nop
    }
  }

  if (ret == 0)
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d107      	bne.n	8006e6e <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006e5e:	f107 0208 	add.w	r2, r7, #8
 8006e62:	2301      	movs	r3, #1
 8006e64:	2111      	movs	r1, #17
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f7ff fd5a 	bl	8006920 <lsm6dsr_read_reg>
 8006e6c:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10f      	bne.n	8006e94 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8006e74:	7dfb      	ldrb	r3, [r7, #23]
 8006e76:	f003 030f 	and.w	r3, r3, #15
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	7a3b      	ldrb	r3, [r7, #8]
 8006e7e:	f362 1307 	bfi	r3, r2, #4, #4
 8006e82:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006e84:	f107 0208 	add.w	r2, r7, #8
 8006e88:	2301      	movs	r3, #1
 8006e8a:	2111      	movs	r1, #17
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7ff fd5f 	bl	8006950 <lsm6dsr_write_reg>
 8006e92:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8006e94:	693b      	ldr	r3, [r7, #16]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3718      	adds	r7, #24
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop

08006ea0 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006eac:	f107 0208 	add.w	r2, r7, #8
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	2112      	movs	r1, #18
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f7ff fd33 	bl	8006920 <lsm6dsr_read_reg>
 8006eba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10f      	bne.n	8006ee2 <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8006ec2:	78fb      	ldrb	r3, [r7, #3]
 8006ec4:	f003 0301 	and.w	r3, r3, #1
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	7a3b      	ldrb	r3, [r7, #8]
 8006ecc:	f362 1386 	bfi	r3, r2, #6, #1
 8006ed0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006ed2:	f107 0208 	add.w	r2, r7, #8
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	2112      	movs	r1, #18
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7ff fd38 	bl	8006950 <lsm6dsr_write_reg>
 8006ee0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8006ef6:	f107 0208 	add.w	r2, r7, #8
 8006efa:	2301      	movs	r3, #1
 8006efc:	211e      	movs	r1, #30
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f7ff fd0e 	bl	8006920 <lsm6dsr_read_reg>
 8006f04:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8006f06:	7a3b      	ldrb	r3, [r7, #8]
 8006f08:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	461a      	mov	r2, r3
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	701a      	strb	r2, [r3, #0]

  return ret;
 8006f14:	68fb      	ldr	r3, [r7, #12]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b084      	sub	sp, #16
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8006f28:	f107 0208 	add.w	r2, r7, #8
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	211e      	movs	r1, #30
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f7ff fcf5 	bl	8006920 <lsm6dsr_read_reg>
 8006f36:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8006f38:	7a3b      	ldrb	r3, [r7, #8]
 8006f3a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	461a      	mov	r2, r3
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	701a      	strb	r2, [r3, #0]

  return ret;
 8006f46:	68fb      	ldr	r3, [r7, #12]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8006f5a:	f107 0208 	add.w	r2, r7, #8
 8006f5e:	2301      	movs	r3, #1
 8006f60:	211e      	movs	r1, #30
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7ff fcdc 	bl	8006920 <lsm6dsr_read_reg>
 8006f68:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 8006f6a:	7a3b      	ldrb	r3, [r7, #8]
 8006f6c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	461a      	mov	r2, r3
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	701a      	strb	r2, [r3, #0]

  return ret;
 8006f78:	68fb      	ldr	r3, [r7, #12]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b084      	sub	sp, #16
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
 8006f8a:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8006f8c:	f107 0208 	add.w	r2, r7, #8
 8006f90:	2302      	movs	r3, #2
 8006f92:	2120      	movs	r1, #32
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f7ff fcc3 	bl	8006920 <lsm6dsr_read_reg>
 8006f9a:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8006f9c:	7a7b      	ldrb	r3, [r7, #9]
 8006f9e:	b21a      	sxth	r2, r3
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	021b      	lsls	r3, r3, #8
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	7a3b      	ldrb	r3, [r7, #8]
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	4413      	add	r3, r2
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	b21a      	sxth	r2, r3
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	801a      	strh	r2, [r3, #0]

  return ret;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 8006fd2:	f107 020c 	add.w	r2, r7, #12
 8006fd6:	2306      	movs	r3, #6
 8006fd8:	2122      	movs	r1, #34	; 0x22
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7ff fca0 	bl	8006920 <lsm6dsr_read_reg>
 8006fe0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006fe2:	7b7b      	ldrb	r3, [r7, #13]
 8006fe4:	b21a      	sxth	r2, r3
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	021b      	lsls	r3, r3, #8
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	7b3b      	ldrb	r3, [r7, #12]
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	4413      	add	r3, r2
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	b21a      	sxth	r2, r3
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007004:	7bfa      	ldrb	r2, [r7, #15]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	3302      	adds	r3, #2
 800700a:	b212      	sxth	r2, r2
 800700c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	3302      	adds	r3, #2
 8007012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007016:	b29b      	uxth	r3, r3
 8007018:	021b      	lsls	r3, r3, #8
 800701a:	b29a      	uxth	r2, r3
 800701c:	7bbb      	ldrb	r3, [r7, #14]
 800701e:	b29b      	uxth	r3, r3
 8007020:	4413      	add	r3, r2
 8007022:	b29a      	uxth	r2, r3
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	3302      	adds	r3, #2
 8007028:	b212      	sxth	r2, r2
 800702a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800702c:	7c7a      	ldrb	r2, [r7, #17]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	3304      	adds	r3, #4
 8007032:	b212      	sxth	r2, r2
 8007034:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	3304      	adds	r3, #4
 800703a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800703e:	b29b      	uxth	r3, r3
 8007040:	021b      	lsls	r3, r3, #8
 8007042:	b29a      	uxth	r2, r3
 8007044:	7c3b      	ldrb	r3, [r7, #16]
 8007046:	b29b      	uxth	r3, r3
 8007048:	4413      	add	r3, r2
 800704a:	b29a      	uxth	r2, r3
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	3304      	adds	r3, #4
 8007050:	b212      	sxth	r2, r2
 8007052:	801a      	strh	r2, [r3, #0]

  return ret;
 8007054:	697b      	ldr	r3, [r7, #20]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3718      	adds	r7, #24
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b086      	sub	sp, #24
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8007068:	f107 020c 	add.w	r2, r7, #12
 800706c:	2306      	movs	r3, #6
 800706e:	2128      	movs	r1, #40	; 0x28
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f7ff fc55 	bl	8006920 <lsm6dsr_read_reg>
 8007076:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007078:	7b7b      	ldrb	r3, [r7, #13]
 800707a:	b21a      	sxth	r2, r3
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007086:	b29b      	uxth	r3, r3
 8007088:	021b      	lsls	r3, r3, #8
 800708a:	b29a      	uxth	r2, r3
 800708c:	7b3b      	ldrb	r3, [r7, #12]
 800708e:	b29b      	uxth	r3, r3
 8007090:	4413      	add	r3, r2
 8007092:	b29b      	uxth	r3, r3
 8007094:	b21a      	sxth	r2, r3
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800709a:	7bfa      	ldrb	r2, [r7, #15]
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	3302      	adds	r3, #2
 80070a0:	b212      	sxth	r2, r2
 80070a2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	3302      	adds	r3, #2
 80070a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	021b      	lsls	r3, r3, #8
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	7bbb      	ldrb	r3, [r7, #14]
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	4413      	add	r3, r2
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	3302      	adds	r3, #2
 80070be:	b212      	sxth	r2, r2
 80070c0:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80070c2:	7c7a      	ldrb	r2, [r7, #17]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	3304      	adds	r3, #4
 80070c8:	b212      	sxth	r2, r2
 80070ca:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	3304      	adds	r3, #4
 80070d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	021b      	lsls	r3, r3, #8
 80070d8:	b29a      	uxth	r2, r3
 80070da:	7c3b      	ldrb	r3, [r7, #16]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	4413      	add	r3, r2
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	3304      	adds	r3, #4
 80070e6:	b212      	sxth	r2, r2
 80070e8:	801a      	strh	r2, [r3, #0]

  return ret;
 80070ea:	697b      	ldr	r3, [r7, #20]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3718      	adds	r7, #24
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	460b      	mov	r3, r1
 80070fe:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8007100:	f107 0208 	add.w	r2, r7, #8
 8007104:	2301      	movs	r3, #1
 8007106:	2101      	movs	r1, #1
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7ff fc09 	bl	8006920 <lsm6dsr_read_reg>
 800710e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10f      	bne.n	8007136 <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8007116:	78fb      	ldrb	r3, [r7, #3]
 8007118:	f003 0303 	and.w	r3, r3, #3
 800711c:	b2da      	uxtb	r2, r3
 800711e:	7a3b      	ldrb	r3, [r7, #8]
 8007120:	f362 1387 	bfi	r3, r2, #6, #2
 8007124:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8007126:	f107 0208 	add.w	r2, r7, #8
 800712a:	2301      	movs	r3, #1
 800712c:	2101      	movs	r1, #1
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7ff fc0e 	bl	8006950 <lsm6dsr_write_reg>
 8007134:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8007136:	68fb      	ldr	r3, [r7, #12]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 800714a:	2301      	movs	r3, #1
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	210f      	movs	r1, #15
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7ff fbe5 	bl	8006920 <lsm6dsr_read_reg>
 8007156:	60f8      	str	r0, [r7, #12]

  return ret;
 8007158:	68fb      	ldr	r3, [r7, #12]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b084      	sub	sp, #16
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	460b      	mov	r3, r1
 800716c:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800716e:	f107 0208 	add.w	r2, r7, #8
 8007172:	2301      	movs	r3, #1
 8007174:	2112      	movs	r1, #18
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7ff fbd2 	bl	8006920 <lsm6dsr_read_reg>
 800717c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10f      	bne.n	80071a4 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8007184:	78fb      	ldrb	r3, [r7, #3]
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	b2da      	uxtb	r2, r3
 800718c:	7a3b      	ldrb	r3, [r7, #8]
 800718e:	f362 0300 	bfi	r3, r2, #0, #1
 8007192:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007194:	f107 0208 	add.w	r2, r7, #8
 8007198:	2301      	movs	r3, #1
 800719a:	2112      	movs	r1, #18
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7ff fbd7 	bl	8006950 <lsm6dsr_write_reg>
 80071a2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80071a4:	68fb      	ldr	r3, [r7, #12]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b084      	sub	sp, #16
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
 80071b6:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80071b8:	f107 0208 	add.w	r2, r7, #8
 80071bc:	2301      	movs	r3, #1
 80071be:	2112      	movs	r1, #18
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7ff fbad 	bl	8006920 <lsm6dsr_read_reg>
 80071c6:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80071c8:	7a3b      	ldrb	r3, [r7, #8]
 80071ca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	461a      	mov	r2, r3
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	701a      	strb	r2, [r3, #0]

  return ret;
 80071d6:	68fb      	ldr	r3, [r7, #12]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <lsm6dsr_xl_filter_lp2_set>:
  * @param  val    Change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	460b      	mov	r3, r1
 80071ea:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80071ec:	f107 0208 	add.w	r2, r7, #8
 80071f0:	2301      	movs	r3, #1
 80071f2:	2110      	movs	r1, #16
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7ff fb93 	bl	8006920 <lsm6dsr_read_reg>
 80071fa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10f      	bne.n	8007222 <lsm6dsr_xl_filter_lp2_set+0x42>
  {
    ctrl1_xl.lpf2_xl_en = (uint8_t)val;
 8007202:	78fb      	ldrb	r3, [r7, #3]
 8007204:	f003 0301 	and.w	r3, r3, #1
 8007208:	b2da      	uxtb	r2, r3
 800720a:	7a3b      	ldrb	r3, [r7, #8]
 800720c:	f362 0341 	bfi	r3, r2, #1, #1
 8007210:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8007212:	f107 0208 	add.w	r2, r7, #8
 8007216:	2301      	movs	r3, #1
 8007218:	2110      	movs	r1, #16
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7ff fb98 	bl	8006950 <lsm6dsr_write_reg>
 8007220:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8007222:	68fb      	ldr	r3, [r7, #12]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <lsm6dsr_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dsr_hp_slope_xl_en_t val)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	460b      	mov	r3, r1
 8007236:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8007238:	f107 0208 	add.w	r2, r7, #8
 800723c:	2301      	movs	r3, #1
 800723e:	2117      	movs	r1, #23
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f7ff fb6d 	bl	8006920 <lsm6dsr_read_reg>
 8007246:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d121      	bne.n	8007292 <lsm6dsr_xl_hp_path_on_out_set+0x66>
  {
    ctrl8_xl.hp_slope_xl_en = (((uint8_t)val & 0x10U) >> 4);
 800724e:	78fb      	ldrb	r3, [r7, #3]
 8007250:	091b      	lsrs	r3, r3, #4
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	b2da      	uxtb	r2, r3
 8007258:	7a3b      	ldrb	r3, [r7, #8]
 800725a:	f362 0382 	bfi	r3, r2, #2, #1
 800725e:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_ref_mode_xl = (((uint8_t)val & 0x20U) >> 5);
 8007260:	78fb      	ldrb	r3, [r7, #3]
 8007262:	095b      	lsrs	r3, r3, #5
 8007264:	f003 0301 	and.w	r3, r3, #1
 8007268:	b2da      	uxtb	r2, r3
 800726a:	7a3b      	ldrb	r3, [r7, #8]
 800726c:	f362 1304 	bfi	r3, r2, #4, #1
 8007270:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 8007272:	78fb      	ldrb	r3, [r7, #3]
 8007274:	f003 0307 	and.w	r3, r3, #7
 8007278:	b2da      	uxtb	r2, r3
 800727a:	7a3b      	ldrb	r3, [r7, #8]
 800727c:	f362 1347 	bfi	r3, r2, #5, #3
 8007280:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL8_XL,
 8007282:	f107 0208 	add.w	r2, r7, #8
 8007286:	2301      	movs	r3, #1
 8007288:	2117      	movs	r1, #23
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7ff fb60 	bl	8006950 <lsm6dsr_write_reg>
 8007290:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 8007292:	68fb      	ldr	r3, [r7, #12]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	460b      	mov	r3, r1
 80072a6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80072a8:	f107 0210 	add.w	r2, r7, #16
 80072ac:	2301      	movs	r3, #1
 80072ae:	2118      	movs	r1, #24
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7ff fb35 	bl	8006920 <lsm6dsr_read_reg>
 80072b6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d111      	bne.n	80072e2 <lsm6dsr_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80072be:	78fb      	ldrb	r3, [r7, #3]
 80072c0:	09db      	lsrs	r3, r3, #7
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	f003 0301 	and.w	r3, r3, #1
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	7c3b      	ldrb	r3, [r7, #16]
 80072cc:	f362 0341 	bfi	r3, r2, #1, #1
 80072d0:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 80072d2:	f107 0210 	add.w	r2, r7, #16
 80072d6:	2301      	movs	r3, #1
 80072d8:	2118      	movs	r1, #24
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7ff fb38 	bl	8006950 <lsm6dsr_write_reg>
 80072e0:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d107      	bne.n	80072f8 <lsm6dsr_i3c_disable_set+0x5c>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 80072e8:	f107 020c 	add.w	r2, r7, #12
 80072ec:	2301      	movs	r3, #1
 80072ee:	2162      	movs	r1, #98	; 0x62
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7ff fb15 	bl	8006920 <lsm6dsr_read_reg>
 80072f6:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10f      	bne.n	800731e <lsm6dsr_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80072fe:	78fb      	ldrb	r3, [r7, #3]
 8007300:	f003 0303 	and.w	r3, r3, #3
 8007304:	b2da      	uxtb	r2, r3
 8007306:	7b3b      	ldrb	r3, [r7, #12]
 8007308:	f362 03c4 	bfi	r3, r2, #3, #2
 800730c:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 800730e:	f107 020c 	add.w	r2, r7, #12
 8007312:	2301      	movs	r3, #1
 8007314:	2162      	movs	r1, #98	; 0x62
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7ff fb1a 	bl	8006950 <lsm6dsr_write_reg>
 800731c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 800731e:	697b      	ldr	r3, [r7, #20]
}
 8007320:	4618      	mov	r0, r3
 8007322:	3718      	adds	r7, #24
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8007332:	2102      	movs	r1, #2
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f7ff fedd 	bl	80070f4 <lsm6dsr_mem_bank_set>
 800733a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d106      	bne.n	8007350 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 8007342:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 8007344:	2301      	movs	r3, #1
 8007346:	2146      	movs	r1, #70	; 0x46
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7ff fae9 	bl	8006920 <lsm6dsr_read_reg>
 800734e:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d107      	bne.n	8007366 <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 800735a:	2301      	movs	r3, #1
 800735c:	2147      	movs	r1, #71	; 0x47
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f7ff fade 	bl	8006920 <lsm6dsr_read_reg>
 8007364:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d104      	bne.n	8007376 <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800736c:	2100      	movs	r1, #0
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7ff fec0 	bl	80070f4 <lsm6dsr_mem_bank_set>
 8007374:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007376:	68fb      	ldr	r3, [r7, #12]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800738a:	2102      	movs	r1, #2
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f7ff feb1 	bl	80070f4 <lsm6dsr_mem_bank_set>
 8007392:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d107      	bne.n	80073aa <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 800739a:	f107 0208 	add.w	r2, r7, #8
 800739e:	2301      	movs	r3, #1
 80073a0:	215f      	movs	r1, #95	; 0x5f
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7ff fabc 	bl	8006920 <lsm6dsr_read_reg>
 80073a8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d104      	bne.n	80073ba <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80073b0:	2100      	movs	r1, #0
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7ff fe9e 	bl	80070f4 <lsm6dsr_mem_bank_set>
 80073b8:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 80073ba:	7a3b      	ldrb	r3, [r7, #8]
 80073bc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d81a      	bhi.n	80073fc <lsm6dsr_fsm_data_rate_get+0x7c>
 80073c6:	a201      	add	r2, pc, #4	; (adr r2, 80073cc <lsm6dsr_fsm_data_rate_get+0x4c>)
 80073c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073cc:	080073dd 	.word	0x080073dd
 80073d0:	080073e5 	.word	0x080073e5
 80073d4:	080073ed 	.word	0x080073ed
 80073d8:	080073f5 	.word	0x080073f5
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	2200      	movs	r2, #0
 80073e0:	701a      	strb	r2, [r3, #0]
      break;
 80073e2:	e00f      	b.n	8007404 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	2201      	movs	r2, #1
 80073e8:	701a      	strb	r2, [r3, #0]
      break;
 80073ea:	e00b      	b.n	8007404 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	2202      	movs	r2, #2
 80073f0:	701a      	strb	r2, [r3, #0]
      break;
 80073f2:	e007      	b.n	8007404 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	2203      	movs	r2, #3
 80073f8:	701a      	strb	r2, [r3, #0]
      break;
 80073fa:	e003      	b.n	8007404 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	2200      	movs	r2, #0
 8007400:	701a      	strb	r2, [r3, #0]
      break;
 8007402:	bf00      	nop
  }

  return ret;
 8007404:	68fb      	ldr	r3, [r7, #12]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop

08007410 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	683a      	ldr	r2, [r7, #0]
 8007422:	b2d2      	uxtb	r2, r2
 8007424:	4611      	mov	r1, r2
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	4798      	blx	r3
 800742a:	4603      	mov	r3, r0
 800742c:	4618      	mov	r0, r3
 800742e:	3708      	adds	r7, #8
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <_Z12ISBDCallbackv>:

bool ISBDCallback() __attribute__((weak));
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
 8007434:	b480      	push	{r7}
 8007436:	af00      	add	r7, sp, #0
 8007438:	2301      	movs	r3, #1
 800743a:	4618      	mov	r0, r3
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <_Z19ISBDConsoleCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	460b      	mov	r3, r1
 800744e:	70fb      	strb	r3, [r7, #3]
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	460b      	mov	r3, r1
 8007466:	70fb      	strb	r3, [r7, #3]
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <_ZN10IridiumSBD5beginEv>:



// Power on the RockBLOCK or return from sleep
int IridiumSBD::begin()
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8007482:	2b00      	cmp	r3, #0
 8007484:	d001      	beq.n	800748a <_ZN10IridiumSBD5beginEv+0x16>
      return ISBD_REENTRANT;
 8007486:	2309      	movs	r3, #9
 8007488:	e01a      	b.n	80074c0 <_ZN10IridiumSBD5beginEv+0x4c>

   this->reentrant = true;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalBegin();
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fb2a 	bl	8007aec <_ZN10IridiumSBD13internalBeginEv>
 8007498:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

   // Absent a successful startup, keep the device turned off
   if (ret != ISBD_SUCCESS)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00a      	beq.n	80074be <_ZN10IridiumSBD5beginEv+0x4a>
   {
      if (this->useSerial)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	7c5b      	ldrb	r3, [r3, #17]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d002      	beq.n	80074b6 <_ZN10IridiumSBD5beginEv+0x42>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f001 fc71 	bl	8008d98 <_ZN10IridiumSBD13endSerialPortEv>
      power(false);
 80074b6:	2100      	movs	r1, #0
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f001 fbbf 	bl	8008c3c <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 80074be:	68fb      	ldr	r3, [r7, #12]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <_ZN10IridiumSBD11sendSBDTextEPKc>:
   return ret;
}

// Transmit a text message
int IridiumSBD::sendSBDText(const char *message)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af02      	add	r7, sp, #8
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <_ZN10IridiumSBD11sendSBDTextEPKc+0x18>
      return ISBD_REENTRANT;
 80074dc:	2309      	movs	r3, #9
 80074de:	e013      	b.n	8007508 <_ZN10IridiumSBD11sendSBDTextEPKc+0x40>

   this->reentrant = true;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalSendReceiveSBD(message, NULL, 0, NULL, NULL);
 80074e8:	2300      	movs	r3, #0
 80074ea:	9301      	str	r3, [sp, #4]
 80074ec:	2300      	movs	r3, #0
 80074ee:	9300      	str	r3, [sp, #0]
 80074f0:	2300      	movs	r3, #0
 80074f2:	2200      	movs	r2, #0
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fc80 	bl	8007dfc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj>
 80074fc:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 8007506:	68fb      	ldr	r3, [r7, #12]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <_ZN10IridiumSBD16getSignalQualityERi>:
   return ret;
}

// High-level wrapper for AT+CSQ
int IridiumSBD::getSignalQuality(int &quality)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8007520:	2b00      	cmp	r3, #0
 8007522:	d001      	beq.n	8007528 <_ZN10IridiumSBD16getSignalQualityERi+0x18>
      return ISBD_REENTRANT;
 8007524:	2309      	movs	r3, #9
 8007526:	e00d      	b.n	8007544 <_ZN10IridiumSBD16getSignalQualityERi+0x34>

   this->reentrant = true;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalGetSignalQuality(quality);
 8007530:	6839      	ldr	r1, [r7, #0]
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 ff1e 	bl	8008374 <_ZN10IridiumSBD24internalGetSignalQualityERi>
 8007538:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 8007542:	68fb      	ldr	r3, [r7, #12]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <_ZN10IridiumSBD5sleepEv>:

// Gracefully put device to lower power mode (if sleep pin provided)
int IridiumSBD::sleep()
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800755a:	2b00      	cmp	r3, #0
 800755c:	d001      	beq.n	8007562 <_ZN10IridiumSBD5sleepEv+0x16>
      return ISBD_REENTRANT;
 800755e:	2309      	movs	r3, #9
 8007560:	e025      	b.n	80075ae <_ZN10IridiumSBD5sleepEv+0x62>

   if (this->useSerial && (this->sleepPin == -1))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	7c5b      	ldrb	r3, [r3, #17]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d006      	beq.n	8007578 <_ZN10IridiumSBD5sleepEv+0x2c>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800756e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007572:	d101      	bne.n	8007578 <_ZN10IridiumSBD5sleepEv+0x2c>
      return ISBD_NO_SLEEP_PIN;
 8007574:	230b      	movs	r3, #11
 8007576:	e01a      	b.n	80075ae <_ZN10IridiumSBD5sleepEv+0x62>

   this->reentrant = true;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalSleep();
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 ff7d 	bl	8008480 <_ZN10IridiumSBD13internalSleepEv>
 8007586:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

   if (ret == ISBD_SUCCESS)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10a      	bne.n	80075ac <_ZN10IridiumSBD5sleepEv+0x60>
   {
      if (this->useSerial)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	7c5b      	ldrb	r3, [r3, #17]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d002      	beq.n	80075a4 <_ZN10IridiumSBD5sleepEv+0x58>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f001 fbfa 	bl	8008d98 <_ZN10IridiumSBD13endSerialPortEv>
      power(false); // power off
 80075a4:	2100      	movs	r1, #0
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f001 fb48 	bl	8008c3c <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 80075ac:	68fb      	ldr	r3, [r7, #12]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <_ZN10IridiumSBD15adjustATTimeoutEi>:
   }
}

// Tweak AT timeout
void IridiumSBD::adjustATTimeout(int seconds)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b083      	sub	sp, #12
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	6039      	str	r1, [r7, #0]
   this->atTimeout = seconds;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	661a      	str	r2, [r3, #96]	; 0x60
}
 80075c6:	bf00      	nop
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <_ZN10IridiumSBD16enableRingAlertsEb>:
{
   this->msstmWorkaroundRequested = useWorkAround;
}

void IridiumSBD::enableRingAlerts(bool enable) // true to enable SBDRING alerts and RING signal pin
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b082      	sub	sp, #8
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
 80075da:	460b      	mov	r3, r1
 80075dc:	70fb      	strb	r3, [r7, #3]
   this->ringAlertsEnabled = enable;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	78fa      	ldrb	r2, [r7, #3]
 80075e2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
   if (enable)
 80075e6:	78fb      	ldrb	r3, [r7, #3]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00d      	beq.n	8007608 <_ZN10IridiumSBD16enableRingAlertsEb+0x36>
   {
      this->ringAsserted = false;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      if (!this->useSerial) // If we are using I2C, clear the ring indicator flag
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	7c5b      	ldrb	r3, [r3, #17]
 80075f8:	f083 0301 	eor.w	r3, r3, #1
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d002      	beq.n	8007608 <_ZN10IridiumSBD16enableRingAlertsEb+0x36>
      {
        clearRingIndicator();
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f9b2 	bl	800796c <_ZN10IridiumSBD18clearRingIndicatorEv>
      }
   }
}
 8007608:	bf00      	nop
 800760a:	3708      	adds	r7, #8
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <_ZN10IridiumSBD13getSystemTimeER2tm>:

   return ret;
}

int IridiumSBD::getSystemTime(struct tm &tm)
{
 8007610:	b5b0      	push	{r4, r5, r7, lr}
 8007612:	b09c      	sub	sp, #112	; 0x70
 8007614:	af02      	add	r7, sp, #8
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
   char msstmResponseBuf[24];

   send(F("AT-MSSTM\r"));
 800761a:	2301      	movs	r3, #1
 800761c:	2201      	movs	r2, #1
 800761e:	493f      	ldr	r1, [pc, #252]	; (800771c <_ZN10IridiumSBD13getSystemTimeER2tm+0x10c>)
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f001 fbc7 	bl	8008db4 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(msstmResponseBuf, sizeof(msstmResponseBuf), "-MSSTM: "))
 8007626:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800762a:	4b3d      	ldr	r3, [pc, #244]	; (8007720 <_ZN10IridiumSBD13getSystemTimeER2tm+0x110>)
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	4b3d      	ldr	r3, [pc, #244]	; (8007724 <_ZN10IridiumSBD13getSystemTimeER2tm+0x114>)
 8007630:	2218      	movs	r2, #24
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 ff5c 	bl	80084f0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007638:	4603      	mov	r3, r0
 800763a:	f083 0301 	eor.w	r3, r3, #1
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b00      	cmp	r3, #0
 8007642:	d009      	beq.n	8007658 <_ZN10IridiumSBD13getSystemTimeER2tm+0x48>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f001 f811 	bl	800866c <_ZN10IridiumSBD9cancelledEv>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d001      	beq.n	8007654 <_ZN10IridiumSBD13getSystemTimeER2tm+0x44>
 8007650:	2304      	movs	r3, #4
 8007652:	e05e      	b.n	8007712 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>
 8007654:	2303      	movs	r3, #3
 8007656:	e05c      	b.n	8007712 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   if (!isxdigit(msstmResponseBuf[0]))
 8007658:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800765c:	4618      	mov	r0, r3
 800765e:	f013 f8d9 	bl	801a814 <isxdigit>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <_ZN10IridiumSBD13getSystemTimeER2tm+0x5c>
      return ISBD_NO_NETWORK;
 8007668:	230c      	movs	r3, #12
 800766a:	e052      	b.n	8007712 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   // Latest epoch began at May 11, 2014, at 14:23:55 UTC.
   struct tm epoch_start;
   epoch_start.tm_year = 2014 - 1900;
 800766c:	2372      	movs	r3, #114	; 0x72
 800766e:	62bb      	str	r3, [r7, #40]	; 0x28
   epoch_start.tm_mon = 5 - 1;
 8007670:	2304      	movs	r3, #4
 8007672:	627b      	str	r3, [r7, #36]	; 0x24
   epoch_start.tm_mday = 11;
 8007674:	230b      	movs	r3, #11
 8007676:	623b      	str	r3, [r7, #32]
   epoch_start.tm_hour = 14;
 8007678:	230e      	movs	r3, #14
 800767a:	61fb      	str	r3, [r7, #28]
   epoch_start.tm_min = 23;
 800767c:	2317      	movs	r3, #23
 800767e:	61bb      	str	r3, [r7, #24]
   epoch_start.tm_sec = 55;
 8007680:	2337      	movs	r3, #55	; 0x37
 8007682:	617b      	str	r3, [r7, #20]

   unsigned long ticks_since_epoch = strtoul(msstmResponseBuf, NULL, 16);
 8007684:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007688:	2210      	movs	r2, #16
 800768a:	2100      	movs	r1, #0
 800768c:	4618      	mov	r0, r3
 800768e:	f015 fd65 	bl	801d15c <strtoul>
 8007692:	6678      	str	r0, [r7, #100]	; 0x64
      seconds less than the equivalent ticks_since_epoch. Subtract that away and
      we'll be left with a small number that won't overflow when we scale by 90/1000.

      Many thanks to Scott Weldon for this suggestion.
   */
   unsigned long secs_since_epoch = (ticks_since_epoch / 1000) * 90;
 8007694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007696:	4a24      	ldr	r2, [pc, #144]	; (8007728 <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 8007698:	fba2 2303 	umull	r2, r3, r2, r3
 800769c:	099b      	lsrs	r3, r3, #6
 800769e:	225a      	movs	r2, #90	; 0x5a
 80076a0:	fb02 f303 	mul.w	r3, r2, r3
 80076a4:	663b      	str	r3, [r7, #96]	; 0x60
   unsigned long small_ticks = ticks_since_epoch - (secs_since_epoch / 90) * 1000;
 80076a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076a8:	085b      	lsrs	r3, r3, #1
 80076aa:	4a20      	ldr	r2, [pc, #128]	; (800772c <_ZN10IridiumSBD13getSystemTimeER2tm+0x11c>)
 80076ac:	fba2 2303 	umull	r2, r3, r2, r3
 80076b0:	095b      	lsrs	r3, r3, #5
 80076b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80076b6:	fb02 f303 	mul.w	r3, r2, r3
 80076ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	65fb      	str	r3, [r7, #92]	; 0x5c
   secs_since_epoch += small_ticks * 90 / 1000;
 80076c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076c2:	225a      	movs	r2, #90	; 0x5a
 80076c4:	fb02 f303 	mul.w	r3, r2, r3
 80076c8:	4a17      	ldr	r2, [pc, #92]	; (8007728 <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 80076ca:	fba2 2303 	umull	r2, r3, r2, r3
 80076ce:	099b      	lsrs	r3, r3, #6
 80076d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80076d2:	4413      	add	r3, r2
 80076d4:	663b      	str	r3, [r7, #96]	; 0x60

   time_t epoch_time = mktime(&epoch_start);
 80076d6:	f107 0314 	add.w	r3, r7, #20
 80076da:	4618      	mov	r0, r3
 80076dc:	f013 fad4 	bl	801ac88 <mktime>
 80076e0:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
   time_t now = epoch_time + secs_since_epoch;
 80076e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076e6:	4618      	mov	r0, r3
 80076e8:	f04f 0100 	mov.w	r1, #0
 80076ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80076f0:	1884      	adds	r4, r0, r2
 80076f2:	eb41 0503 	adc.w	r5, r1, r3
 80076f6:	e9c7 4502 	strd	r4, r5, [r7, #8]
   memcpy(&tm, localtime(&now), sizeof tm);
 80076fa:	f107 0308 	add.w	r3, r7, #8
 80076fe:	4618      	mov	r0, r3
 8007700:	f013 f890 	bl	801a824 <localtime>
 8007704:	4603      	mov	r3, r0
 8007706:	2224      	movs	r2, #36	; 0x24
 8007708:	4619      	mov	r1, r3
 800770a:	6838      	ldr	r0, [r7, #0]
 800770c:	f013 f9b4 	bl	801aa78 <memcpy>
   return ISBD_SUCCESS;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3768      	adds	r7, #104	; 0x68
 8007716:	46bd      	mov	sp, r7
 8007718:	bdb0      	pop	{r4, r5, r7, pc}
 800771a:	bf00      	nop
 800771c:	08021910 	.word	0x08021910
 8007720:	08021928 	.word	0x08021928
 8007724:	0802191c 	.word	0x0802191c
 8007728:	10624dd3 	.word	0x10624dd3
 800772c:	b60b60b7 	.word	0xb60b60b7

08007730 <_ZN10IridiumSBD18getFirmwareVersionEPcj>:

int IridiumSBD::getFirmwareVersion(char *version, size_t bufferSize)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af02      	add	r7, sp, #8
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
   if (bufferSize < 8)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b07      	cmp	r3, #7
 8007740:	d801      	bhi.n	8007746 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x16>
      return ISBD_RX_OVERFLOW;
 8007742:	2308      	movs	r3, #8
 8007744:	e01e      	b.n	8007784 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   send(F("AT+CGMR\r"));
 8007746:	2301      	movs	r3, #1
 8007748:	2201      	movs	r2, #1
 800774a:	4910      	ldr	r1, [pc, #64]	; (800778c <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x5c>)
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f001 fb31 	bl	8008db4 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(version, bufferSize, "Call Processor Version: "))
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	4b0e      	ldr	r3, [pc, #56]	; (8007790 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x60>)
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	4b0e      	ldr	r3, [pc, #56]	; (8007794 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x64>)
 800775a:	68b9      	ldr	r1, [r7, #8]
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f000 fec7 	bl	80084f0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007762:	4603      	mov	r3, r0
 8007764:	f083 0301 	eor.w	r3, r3, #1
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d009      	beq.n	8007782 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x52>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f000 ff7c 	bl	800866c <_ZN10IridiumSBD9cancelledEv>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d001      	beq.n	800777e <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x4e>
 800777a:	2304      	movs	r3, #4
 800777c:	e002      	b.n	8007784 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>
 800777e:	2303      	movs	r3, #3
 8007780:	e000      	b.n	8007784 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   return ISBD_SUCCESS;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	08021930 	.word	0x08021930
 8007790:	08021928 	.word	0x08021928
 8007794:	0802193c 	.word	0x0802193c

08007798 <_ZN10IridiumSBD21enableSuperCapChargerEb>:

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	460b      	mov	r3, r1
 80077a2:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	7c5b      	ldrb	r3, [r3, #17]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d004      	beq.n	80077b6 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x1e>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 80077ac:	4918      	ldr	r1, [pc, #96]	; (8007810 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f001 fc7e 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 80077b4:	e028      	b.n	8007808 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x70>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f001 ff6b 	bl	8009692 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 80077bc:	78fb      	ldrb	r3, [r7, #3]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00b      	beq.n	80077da <_ZN10IridiumSBD21enableSuperCapChargerEb+0x42>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80077ce:	4313      	orrs	r3, r2
 80077d0:	b2da      	uxtb	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 80077d8:	e00f      	b.n	80077fa <_ZN10IridiumSBD21enableSuperCapChargerEb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80077e0:	b25a      	sxtb	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80077e8:	b25b      	sxtb	r3, r3
 80077ea:	43db      	mvns	r3, r3
 80077ec:	b25b      	sxtb	r3, r3
 80077ee:	4013      	ands	r3, r2
 80077f0:	b25b      	sxtb	r3, r3
 80077f2:	b2da      	uxtb	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8007800:	4619      	mov	r1, r3
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f001 ff7e 	bl	8009704 <_ZN10IridiumSBD11set9603pinsEh>
}
 8007808:	3708      	adds	r7, #8
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	08021958 	.word	0x08021958

08007814 <_ZN10IridiumSBD20checkSuperCapChargerEv>:

bool IridiumSBD::checkSuperCapCharger()
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial (the user will have to check PGOOD manually)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	7c5b      	ldrb	r3, [r3, #17]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d005      	beq.n	8007830 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x1c>
  {
    diagprint(F("checkSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8007824:	4912      	ldr	r1, [pc, #72]	; (8007870 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x5c>)
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f001 fc42 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 800782c:	2300      	movs	r3, #0
 800782e:	e01a      	b.n	8007866 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  }

  // Check the status of the supercapacitor charger PGOOD pin
  check9603pins(); // Update IO_REGISTER
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f001 ff2e 	bl	8009692 <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_PGOOD) // If the PGOOD bit is set, return true
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8007842:	4013      	ands	r3, r2
 8007844:	b2da      	uxtb	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8007852:	2b00      	cmp	r3, #0
 8007854:	bf14      	ite	ne
 8007856:	2301      	movne	r3, #1
 8007858:	2300      	moveq	r3, #0
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b00      	cmp	r3, #0
 800785e:	d001      	beq.n	8007864 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x50>
  {
    return(true);
 8007860:	2301      	movs	r3, #1
 8007862:	e000      	b.n	8007866 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  }
  else
  {
    return(false);
 8007864:	2300      	movs	r3, #0
  }
}
 8007866:	4618      	mov	r0, r3
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	080219a4 	.word	0x080219a4

08007874 <_ZN10IridiumSBD16enable9603NpowerEb>:

void IridiumSBD::enable9603Npower(bool enable)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	460b      	mov	r3, r1
 800787e:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	7c5b      	ldrb	r3, [r3, #17]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d004      	beq.n	8007892 <_ZN10IridiumSBD16enable9603NpowerEb+0x1e>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 8007888:	4918      	ldr	r1, [pc, #96]	; (80078ec <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f001 fc10 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8007890:	e028      	b.n	80078e4 <_ZN10IridiumSBD16enable9603NpowerEb+0x70>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f001 fefd 	bl	8009692 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8007898:	78fb      	ldrb	r3, [r7, #3]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00b      	beq.n	80078b6 <_ZN10IridiumSBD16enable9603NpowerEb+0x42>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 80078aa:	4313      	orrs	r3, r2
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 80078b4:	e00f      	b.n	80078d6 <_ZN10IridiumSBD16enable9603NpowerEb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80078bc:	b25a      	sxtb	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 80078c4:	b25b      	sxtb	r3, r3
 80078c6:	43db      	mvns	r3, r3
 80078c8:	b25b      	sxtb	r3, r3
 80078ca:	4013      	ands	r3, r2
 80078cc:	b25b      	sxtb	r3, r3
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f001 ff10 	bl	8009704 <_ZN10IridiumSBD11set9603pinsEh>
}
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	080219f0 	.word	0x080219f0

080078f0 <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	460b      	mov	r3, r1
 80078fa:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	7c5b      	ldrb	r3, [r3, #17]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d004      	beq.n	800790e <_ZN10IridiumSBD10enable9603Eb+0x1e>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 8007904:	4918      	ldr	r1, [pc, #96]	; (8007968 <_ZN10IridiumSBD10enable9603Eb+0x78>)
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f001 fbd2 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 800790c:	e028      	b.n	8007960 <_ZN10IridiumSBD10enable9603Eb+0x70>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f001 febf 	bl	8009692 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8007914:	78fb      	ldrb	r3, [r7, #3]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00b      	beq.n	8007932 <_ZN10IridiumSBD10enable9603Eb+0x42>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8007926:	4313      	orrs	r3, r2
 8007928:	b2da      	uxtb	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8007930:	e00f      	b.n	8007952 <_ZN10IridiumSBD10enable9603Eb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8007938:	b25a      	sxtb	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8007940:	b25b      	sxtb	r3, r3
 8007942:	43db      	mvns	r3, r3
 8007944:	b25b      	sxtb	r3, r3
 8007946:	4013      	ands	r3, r2
 8007948:	b25b      	sxtb	r3, r3
 800794a:	b2da      	uxtb	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f001 fed2 	bl	8009704 <_ZN10IridiumSBD11set9603pinsEh>
}
 8007960:	3708      	adds	r7, #8
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	08021a38 	.word	0x08021a38

0800796c <_ZN10IridiumSBD18clearRingIndicatorEv>:
    return(false);
  }
}

void IridiumSBD::clearRingIndicator()
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	7c5b      	ldrb	r3, [r3, #17]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d004      	beq.n	8007986 <_ZN10IridiumSBD18clearRingIndicatorEv+0x1a>
  {
    diagprint(F("clearRingIndicator is only valid when using I2C on the Qwiic Iridium\r\n"));
 800797c:	4912      	ldr	r1, [pc, #72]	; (80079c8 <_ZN10IridiumSBD18clearRingIndicatorEv+0x5c>)
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f001 fb96 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8007984:	e01d      	b.n	80079c2 <_ZN10IridiumSBD18clearRingIndicatorEv+0x56>
  }

  // Clear the 9603 RI flag
  check9603pins(); // Update IO_REGISTER
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f001 fe83 	bl	8009692 <_ZN10IridiumSBD13check9603pinsEv>
  IO_REGISTER &= ~IO_RI; // Clear the RI bit
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8007992:	b25a      	sxtb	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800799a:	b25b      	sxtb	r3, r3
 800799c:	43db      	mvns	r3, r3
 800799e:	b25b      	sxtb	r3, r3
 80079a0:	4013      	ands	r3, r2
 80079a2:	b25b      	sxtb	r3, r3
 80079a4:	b2da      	uxtb	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  set9603pins(IO_REGISTER); // Update the pins
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f001 fea5 	bl	8009704 <_ZN10IridiumSBD11set9603pinsEh>
  this->ringAsserted = false; // Also clear the ringAsserted flag
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
}
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	08021b08 	.word	0x08021b08

080079cc <_ZN10IridiumSBD21checkNetworkAvailableEv>:

bool IridiumSBD::checkNetworkAvailable()
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	7c5b      	ldrb	r3, [r3, #17]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d005      	beq.n	80079e8 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x1c>
  {
    diagprint(F("checkNetworkAvailable is only valid when using I2C on the Qwiic Iridium\r\n"));
 80079dc:	4912      	ldr	r1, [pc, #72]	; (8007a28 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x5c>)
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f001 fb66 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 80079e4:	2300      	movs	r3, #0
 80079e6:	e01a      	b.n	8007a1e <_ZN10IridiumSBD21checkNetworkAvailableEv+0x52>
  }

  // Check the status of the 9603 Network Available pin
  check9603pins(); // Update IO_REGISTER
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f001 fe52 	bl	8009692 <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_NA) // If the NA bit is set, return true
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80079fa:	4013      	ands	r3, r2
 80079fc:	b2da      	uxtb	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	bf14      	ite	ne
 8007a0e:	2301      	movne	r3, #1
 8007a10:	2300      	moveq	r3, #0
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <_ZN10IridiumSBD21checkNetworkAvailableEv+0x50>
  {
    return(true);
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e000      	b.n	8007a1e <_ZN10IridiumSBD21checkNetworkAvailableEv+0x52>
  }
  else
  {
    return(false);
 8007a1c:	2300      	movs	r3, #0
  }
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	08021b50 	.word	0x08021b50

08007a2c <_ZN10IridiumSBD12clearBuffersEi>:

// High-level wrapper for AT+SBDD
int IridiumSBD::clearBuffers(int buffers)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <_ZN10IridiumSBD12clearBuffersEi+0x18>
      return ISBD_REENTRANT;
 8007a40:	2309      	movs	r3, #9
 8007a42:	e00d      	b.n	8007a60 <_ZN10IridiumSBD12clearBuffersEi+0x34>

   this->reentrant = true;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalClearBuffers(buffers);
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f001 fee2 	bl	8009818 <_ZN10IridiumSBD20internalClearBuffersEi>
 8007a54:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <_ZN10IridiumSBD7getIMEIEPcj>:

// High-level wrapper for AT+CGSN
int IridiumSBD::getIMEI(char *IMEI, size_t bufferSize)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b086      	sub	sp, #24
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
   if (this->reentrant)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d001      	beq.n	8007a82 <_ZN10IridiumSBD7getIMEIEPcj+0x1a>
      return ISBD_REENTRANT;
 8007a7e:	2309      	movs	r3, #9
 8007a80:	e00e      	b.n	8007aa0 <_ZN10IridiumSBD7getIMEIEPcj+0x38>

   this->reentrant = true;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalGetIMEI(IMEI, bufferSize);
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	68b9      	ldr	r1, [r7, #8]
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f001 ff0e 	bl	80098b0 <_ZN10IridiumSBD15internalGetIMEIEPcj>
 8007a94:	6178      	str	r0, [r7, #20]
   this->reentrant = false;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 8007a9e:	697b      	ldr	r3, [r7, #20]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3718      	adds	r7, #24
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <_ZN10IridiumSBD11isConnectedEv>:

//Returns true if the I2C device is connected
//Always returns true for serial
//boolean IridiumSBD::isConnected() TODO
bool IridiumSBD::isConnected()
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
   if (this->useSerial) // If we are using Serial
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	7c5b      	ldrb	r3, [r3, #17]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d001      	beq.n	8007abc <_ZN10IridiumSBD11isConnectedEv+0x14>
   {
		return true;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e012      	b.n	8007ae2 <_ZN10IridiumSBD11isConnectedEv+0x3a>
   }
   else
   {
		wireport->beginTransmission((uint8_t)deviceaddress);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	68da      	ldr	r2, [r3, #12]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	7c1b      	ldrb	r3, [r3, #16]
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	4610      	mov	r0, r2
 8007ac8:	f002 fd8e 	bl	800a5e8 <_ZN7TwoWire17beginTransmissionEh>
		return (wireport->endTransmission() == 0); // Check that the device ack's
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f002 fdd3 	bl	800a67c <_ZN7TwoWire15endTransmissionEv>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	bf0c      	ite	eq
 8007adc:	2301      	moveq	r3, #1
 8007ade:	2300      	movne	r3, #0
 8007ae0:	b2db      	uxtb	r3, r3
   }
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
	...

08007aec <_ZN10IridiumSBD13internalBeginEv>:
/*
Private interface
*/

int IridiumSBD::internalBegin()
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b090      	sub	sp, #64	; 0x40
 8007af0:	af02      	add	r7, sp, #8
 8007af2:	6078      	str	r0, [r7, #4]
   diagprint(F("Calling internalBegin\r\n"));
 8007af4:	49b0      	ldr	r1, [pc, #704]	; (8007db8 <_ZN10IridiumSBD13internalBeginEv+0x2cc>)
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f001 fada 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (!this->asleep)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8007b02:	f083 0301 	eor.w	r3, r3, #1
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d001      	beq.n	8007b10 <_ZN10IridiumSBD13internalBeginEv+0x24>
      return ISBD_ALREADY_AWAKE;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e14f      	b.n	8007db0 <_ZN10IridiumSBD13internalBeginEv+0x2c4>

   if (!this->useSerial) // If we are using I2C
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	7c5b      	ldrb	r3, [r3, #17]
 8007b14:	f083 0301 	eor.w	r3, r3, #1
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d005      	beq.n	8007b2a <_ZN10IridiumSBD13internalBeginEv+0x3e>
   {
      check9603pins(); // Update IO_REGISTER with the status of the 9603 pins
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f001 fdb7 	bl	8009692 <_ZN10IridiumSBD13check9603pinsEv>
      check9603data(); // Get any waiting 9603 serial data
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f001 fce3 	bl	80094f0 <_ZN10IridiumSBD13check9603dataEv>
   }

   power(true); // power on
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f001 f885 	bl	8008c3c <_ZN10IridiumSBD5powerEb>

   bool modemAlive = false;
 8007b32:	2300      	movs	r3, #0
 8007b34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   unsigned long startupTime = 500; //ms
 8007b38:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   for (unsigned long start = millis(); millis() - start < startupTime;)
 8007b3e:	f004 fcfb 	bl	800c538 <HAL_GetTick>
 8007b42:	62b8      	str	r0, [r7, #40]	; 0x28
 8007b44:	f004 fcf8 	bl	800c538 <HAL_GetTick>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4c:	1ad3      	subs	r3, r2, r3
 8007b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b50:	429a      	cmp	r2, r3
 8007b52:	bf8c      	ite	hi
 8007b54:	2301      	movhi	r3, #1
 8007b56:	2300      	movls	r3, #0
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d007      	beq.n	8007b6e <_ZN10IridiumSBD13internalBeginEv+0x82>
      if (cancelled())
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 fd84 	bl	800866c <_ZN10IridiumSBD9cancelledEv>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d0ec      	beq.n	8007b44 <_ZN10IridiumSBD13internalBeginEv+0x58>
         return ISBD_CANCELLED;
 8007b6a:	2304      	movs	r3, #4
 8007b6c:	e120      	b.n	8007db0 <_ZN10IridiumSBD13internalBeginEv+0x2c4>

   if (this->useSerial) // If we are using Serial
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	7c5b      	ldrb	r3, [r3, #17]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d002      	beq.n	8007b7c <_ZN10IridiumSBD13internalBeginEv+0x90>
      beginSerialPort(); // Apollo3 v2.1 Serial fix - begin the Serial port 500ms after power(true)
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f001 f900 	bl	8008d7c <_ZN10IridiumSBD15beginSerialPortEv>

   // Turn on modem and wait for a response from "AT" command to begin
   for (unsigned long start = millis(); !modemAlive && millis() - start < 1000UL * this->startupTimeout;)
 8007b7c:	f004 fcdc 	bl	800c538 <HAL_GetTick>
 8007b80:	6278      	str	r0, [r7, #36]	; 0x24
 8007b82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b86:	f083 0301 	eor.w	r3, r3, #1
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00f      	beq.n	8007bb0 <_ZN10IridiumSBD13internalBeginEv+0xc4>
 8007b90:	f004 fcd2 	bl	800c538 <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b98:	1ad2      	subs	r2, r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007ba4:	fb03 f301 	mul.w	r3, r3, r1
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d201      	bcs.n	8007bb0 <_ZN10IridiumSBD13internalBeginEv+0xc4>
 8007bac:	2301      	movs	r3, #1
 8007bae:	e000      	b.n	8007bb2 <_ZN10IridiumSBD13internalBeginEv+0xc6>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d018      	beq.n	8007be8 <_ZN10IridiumSBD13internalBeginEv+0xfc>
   {
      send(F("AT\r"));
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	2201      	movs	r2, #1
 8007bba:	4980      	ldr	r1, [pc, #512]	; (8007dbc <_ZN10IridiumSBD13internalBeginEv+0x2d0>)
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f001 f8f9 	bl	8008db4 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      modemAlive = waitForATResponse();
 8007bc2:	4b7f      	ldr	r3, [pc, #508]	; (8007dc0 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	2200      	movs	r2, #0
 8007bca:	2100      	movs	r1, #0
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fc8f 	bl	80084f0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (cancelled())
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fd47 	bl	800866c <_ZN10IridiumSBD9cancelledEv>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d0ce      	beq.n	8007b82 <_ZN10IridiumSBD13internalBeginEv+0x96>
         return ISBD_CANCELLED;
 8007be4:	2304      	movs	r3, #4
 8007be6:	e0e3      	b.n	8007db0 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
   }

   if (!modemAlive)
 8007be8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007bec:	f083 0301 	eor.w	r3, r3, #1
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d005      	beq.n	8007c02 <_ZN10IridiumSBD13internalBeginEv+0x116>
   {
      diagprint(F("No modem detected.\r\n"));
 8007bf6:	4973      	ldr	r1, [pc, #460]	; (8007dc4 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f001 fa59 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      return ISBD_NO_MODEM_DETECTED;
 8007bfe:	2305      	movs	r3, #5
 8007c00:	e0d6      	b.n	8007db0 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
   }

   // The usual initialization sequence
   const char *strings[3] = { "ATE1\r", "AT&D0\r", "AT&K0\r" };
 8007c02:	4a71      	ldr	r2, [pc, #452]	; (8007dc8 <_ZN10IridiumSBD13internalBeginEv+0x2dc>)
 8007c04:	f107 0310 	add.w	r3, r7, #16
 8007c08:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   for (int i=0; i<3; ++i)
 8007c0e:	2300      	movs	r3, #0
 8007c10:	633b      	str	r3, [r7, #48]	; 0x30
 8007c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	dc26      	bgt.n	8007c66 <_ZN10IridiumSBD13internalBeginEv+0x17a>
   {
      send(strings[i]);
 8007c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007c20:	4413      	add	r3, r2
 8007c22:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8007c26:	4619      	mov	r1, r3
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f001 f91f 	bl	8008e6c <_ZN10IridiumSBD4sendEPKc>
      if (!waitForATResponse())
 8007c2e:	4b64      	ldr	r3, [pc, #400]	; (8007dc0 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	2300      	movs	r3, #0
 8007c34:	2200      	movs	r2, #0
 8007c36:	2100      	movs	r1, #0
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fc59 	bl	80084f0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	f083 0301 	eor.w	r3, r3, #1
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d009      	beq.n	8007c5e <_ZN10IridiumSBD13internalBeginEv+0x172>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fd0e 	bl	800866c <_ZN10IridiumSBD9cancelledEv>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <_ZN10IridiumSBD13internalBeginEv+0x16e>
 8007c56:	2304      	movs	r3, #4
 8007c58:	e0aa      	b.n	8007db0 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e0a8      	b.n	8007db0 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
   for (int i=0; i<3; ++i)
 8007c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c60:	3301      	adds	r3, #1
 8007c62:	633b      	str	r3, [r7, #48]	; 0x30
 8007c64:	e7d5      	b.n	8007c12 <_ZN10IridiumSBD13internalBeginEv+0x126>
   }

   // Enable or disable RING alerts as requested by user
   // By default they are on if a RING pin was supplied on constructor
   diagprint(F("Ring alerts are")); diagprint(ringAlertsEnabled ? F("") : F(" NOT")); diagprint(F(" enabled.\r\n"));
 8007c66:	4959      	ldr	r1, [pc, #356]	; (8007dcc <_ZN10IridiumSBD13internalBeginEv+0x2e0>)
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f001 fa21 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d001      	beq.n	8007c7c <_ZN10IridiumSBD13internalBeginEv+0x190>
 8007c78:	4b55      	ldr	r3, [pc, #340]	; (8007dd0 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 8007c7a:	e000      	b.n	8007c7e <_ZN10IridiumSBD13internalBeginEv+0x192>
 8007c7c:	4b55      	ldr	r3, [pc, #340]	; (8007dd4 <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f001 fa15 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8007c86:	4954      	ldr	r1, [pc, #336]	; (8007dd8 <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f001 fa11 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (ringAlertsEnabled) enableRingAlerts(true); // This will clear ringAsserted and the Ring Indicator flag
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d004      	beq.n	8007ca2 <_ZN10IridiumSBD13internalBeginEv+0x1b6>
 8007c98:	2101      	movs	r1, #1
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7ff fc99 	bl	80075d2 <_ZN10IridiumSBD16enableRingAlertsEb>
 8007ca0:	e009      	b.n	8007cb6 <_ZN10IridiumSBD13internalBeginEv+0x1ca>
   else {
	   if (!this->useSerial) clearRingIndicator(); // If ring alerts are not enabled and using I2C, make sure the Ring Indicator flag is clear
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	7c5b      	ldrb	r3, [r3, #17]
 8007ca6:	f083 0301 	eor.w	r3, r3, #1
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d002      	beq.n	8007cb6 <_ZN10IridiumSBD13internalBeginEv+0x1ca>
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f7ff fe5b 	bl	800796c <_ZN10IridiumSBD18clearRingIndicatorEv>
   }

   send(ringAlertsEnabled ? F("AT+SBDMTA=1\r") : F("AT+SBDMTA=0\r"));
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <_ZN10IridiumSBD13internalBeginEv+0x1d8>
 8007cc0:	4946      	ldr	r1, [pc, #280]	; (8007ddc <_ZN10IridiumSBD13internalBeginEv+0x2f0>)
 8007cc2:	e000      	b.n	8007cc6 <_ZN10IridiumSBD13internalBeginEv+0x1da>
 8007cc4:	4946      	ldr	r1, [pc, #280]	; (8007de0 <_ZN10IridiumSBD13internalBeginEv+0x2f4>)
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	2201      	movs	r2, #1
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f001 f872 	bl	8008db4 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   HAL_Delay(10); //TODO Added
 8007cd0:	200a      	movs	r0, #10
 8007cd2:	f004 fc3d 	bl	800c550 <HAL_Delay>
   if (!waitForATResponse())
 8007cd6:	4b3a      	ldr	r3, [pc, #232]	; (8007dc0 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	2300      	movs	r3, #0
 8007cdc:	2200      	movs	r2, #0
 8007cde:	2100      	movs	r1, #0
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fc05 	bl	80084f0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	f083 0301 	eor.w	r3, r3, #1
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d009      	beq.n	8007d06 <_ZN10IridiumSBD13internalBeginEv+0x21a>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fcba 	bl	800866c <_ZN10IridiumSBD9cancelledEv>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <_ZN10IridiumSBD13internalBeginEv+0x216>
 8007cfe:	2304      	movs	r3, #4
 8007d00:	e056      	b.n	8007db0 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
 8007d02:	2303      	movs	r3, #3
 8007d04:	e054      	b.n	8007db0 <_ZN10IridiumSBD13internalBeginEv+0x2c4>

   // Decide whether the internal MSSTM workaround should be enforced on TX/RX
   // By default it is unless the firmware rev is >= TA13001
   char version[8];
   int ret = getFirmwareVersion(version, sizeof(version));
 8007d06:	f107 0308 	add.w	r3, r7, #8
 8007d0a:	2208      	movs	r2, #8
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f7ff fd0e 	bl	8007730 <_ZN10IridiumSBD18getFirmwareVersionEPcj>
 8007d14:	6238      	str	r0, [r7, #32]
   if (ret != ISBD_SUCCESS)
 8007d16:	6a3b      	ldr	r3, [r7, #32]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d008      	beq.n	8007d2e <_ZN10IridiumSBD13internalBeginEv+0x242>
   {
      diagprint(F("Unknown FW version\r\n"));
 8007d1c:	4931      	ldr	r1, [pc, #196]	; (8007de4 <_ZN10IridiumSBD13internalBeginEv+0x2f8>)
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f001 f9c6 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      msstmWorkaroundRequested = true;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8007d2c:	e027      	b.n	8007d7e <_ZN10IridiumSBD13internalBeginEv+0x292>
   }
   else
   {
      diagprint(F("Firmware version is ")); diagprint(version); diagprint(F("\r\n"));
 8007d2e:	492e      	ldr	r1, [pc, #184]	; (8007de8 <_ZN10IridiumSBD13internalBeginEv+0x2fc>)
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f001 f9bd 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8007d36:	f107 0308 	add.w	r3, r7, #8
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f001 f9d5 	bl	80090ec <_ZN10IridiumSBD9diagprintEPKc>
 8007d42:	492a      	ldr	r1, [pc, #168]	; (8007dec <_ZN10IridiumSBD13internalBeginEv+0x300>)
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f001 f9b3 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (version[0] == 'T' && version[1] == 'A')
 8007d4a:	7a3b      	ldrb	r3, [r7, #8]
 8007d4c:	2b54      	cmp	r3, #84	; 0x54
 8007d4e:	d116      	bne.n	8007d7e <_ZN10IridiumSBD13internalBeginEv+0x292>
 8007d50:	7a7b      	ldrb	r3, [r7, #9]
 8007d52:	2b41      	cmp	r3, #65	; 0x41
 8007d54:	d113      	bne.n	8007d7e <_ZN10IridiumSBD13internalBeginEv+0x292>
      {
         unsigned long ver = strtoul(version + 2, NULL, 10);
 8007d56:	f107 0308 	add.w	r3, r7, #8
 8007d5a:	3302      	adds	r3, #2
 8007d5c:	220a      	movs	r2, #10
 8007d5e:	2100      	movs	r1, #0
 8007d60:	4618      	mov	r0, r3
 8007d62:	f015 f9fb 	bl	801d15c <strtoul>
 8007d66:	61f8      	str	r0, [r7, #28]
         msstmWorkaroundRequested = ver < ISBD_MSSTM_WORKAROUND_FW_VER;
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	bf94      	ite	ls
 8007d72:	2301      	movls	r3, #1
 8007d74:	2300      	movhi	r3, #0
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
      }
   }
   diagprint(F("MSSTM workaround is")); diagprint(msstmWorkaroundRequested ? F("") : F(" NOT")); diagprint(F(" enforced.\r\n"));
 8007d7e:	491c      	ldr	r1, [pc, #112]	; (8007df0 <_ZN10IridiumSBD13internalBeginEv+0x304>)
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f001 f995 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d001      	beq.n	8007d94 <_ZN10IridiumSBD13internalBeginEv+0x2a8>
 8007d90:	4b0f      	ldr	r3, [pc, #60]	; (8007dd0 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 8007d92:	e000      	b.n	8007d96 <_ZN10IridiumSBD13internalBeginEv+0x2aa>
 8007d94:	4b0f      	ldr	r3, [pc, #60]	; (8007dd4 <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f001 f989 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8007d9e:	4915      	ldr	r1, [pc, #84]	; (8007df4 <_ZN10IridiumSBD13internalBeginEv+0x308>)
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f001 f985 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   // Done!
   diagprint(F("InternalBegin: success!\r\n"));
 8007da6:	4914      	ldr	r1, [pc, #80]	; (8007df8 <_ZN10IridiumSBD13internalBeginEv+0x30c>)
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f001 f981 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SUCCESS;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3738      	adds	r7, #56	; 0x38
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	08021c28 	.word	0x08021c28
 8007dbc:	08021c40 	.word	0x08021c40
 8007dc0:	08021928 	.word	0x08021928
 8007dc4:	08021c44 	.word	0x08021c44
 8007dc8:	08021d18 	.word	0x08021d18
 8007dcc:	08021c5c 	.word	0x08021c5c
 8007dd0:	08021c6c 	.word	0x08021c6c
 8007dd4:	08021c70 	.word	0x08021c70
 8007dd8:	08021c78 	.word	0x08021c78
 8007ddc:	08021c84 	.word	0x08021c84
 8007de0:	08021c94 	.word	0x08021c94
 8007de4:	08021ca4 	.word	0x08021ca4
 8007de8:	08021cbc 	.word	0x08021cbc
 8007dec:	08021cd4 	.word	0x08021cd4
 8007df0:	08021cd8 	.word	0x08021cd8
 8007df4:	08021cec 	.word	0x08021cec
 8007df8:	08021cfc 	.word	0x08021cfc

08007dfc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj>:

int IridiumSBD::internalSendReceiveSBD(const char *txTxtMessage, const uint8_t *txData, size_t txDataSize, uint8_t *rxBuffer, size_t *prxBufferSize)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b096      	sub	sp, #88	; 0x58
 8007e00:	af04      	add	r7, sp, #16
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
 8007e08:	603b      	str	r3, [r7, #0]
   diagprint(F("internalSendReceive\r\n"));
 8007e0a:	49a5      	ldr	r1, [pc, #660]	; (80080a0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2a4>)
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f001 f94f 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (this->asleep)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d001      	beq.n	8007e20 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x24>
      return ISBD_IS_ASLEEP;
 8007e1c:	230a      	movs	r3, #10
 8007e1e:	e289      	b.n	8008334 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

   // Binary transmission?
   if (txData && txDataSize)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 8152 	beq.w	80080cc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2d0>
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 814e 	beq.w	80080cc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2d0>
   {
      if (txDataSize > ISBD_MAX_MESSAGE_LENGTH)
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007e36:	d901      	bls.n	8007e3c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x40>
         return ISBD_MSG_TOO_LONG;
 8007e38:	230d      	movs	r3, #13
 8007e3a:	e27b      	b.n	8008334 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

      // send will use serial or wire as appropriate
      send(F("AT+SBDWB="), true, false);
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	2201      	movs	r2, #1
 8007e40:	4998      	ldr	r1, [pc, #608]	; (80080a4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2a8>)
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f000 ffb6 	bl	8008db4 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      send(txDataSize);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f001 f8e8 	bl	8009024 <_ZN10IridiumSBD4sendEt>
      send(F("\r"), false);
 8007e54:	2301      	movs	r3, #1
 8007e56:	2200      	movs	r2, #0
 8007e58:	4993      	ldr	r1, [pc, #588]	; (80080a8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2ac>)
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f000 ffaa 	bl	8008db4 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      if (!waitForATResponse(NULL, 0, NULL, "READY\r\n"))
 8007e60:	4b92      	ldr	r3, [pc, #584]	; (80080ac <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2b0>)
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	2300      	movs	r3, #0
 8007e66:	2200      	movs	r2, #0
 8007e68:	2100      	movs	r1, #0
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	f000 fb40 	bl	80084f0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007e70:	4603      	mov	r3, r0
 8007e72:	f083 0301 	eor.w	r3, r3, #1
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d009      	beq.n	8007e90 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x94>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 fbf5 	bl	800866c <_ZN10IridiumSBD9cancelledEv>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x90>
 8007e88:	2304      	movs	r3, #4
 8007e8a:	e253      	b.n	8008334 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e251      	b.n	8008334 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

      uint16_t checksum = 0;
 8007e90:	2300      	movs	r3, #0
 8007e92:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

      if (this->useSerial)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	7c5b      	ldrb	r3, [r3, #17]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d03a      	beq.n	8007f14 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x118>
      {
         for (size_t i=0; i<txDataSize; ++i)
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	643b      	str	r3, [r7, #64]	; 0x40
 8007ea2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d21a      	bcs.n	8007ee0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0xe4>
         {
            stream->write(txData[i]);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	4618      	mov	r0, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6879      	ldr	r1, [r7, #4]
 8007eba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ebc:	440a      	add	r2, r1
 8007ebe:	7812      	ldrb	r2, [r2, #0]
 8007ec0:	4611      	mov	r1, r2
 8007ec2:	4798      	blx	r3
            checksum += (uint16_t)txData[i];
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ec8:	4413      	add	r3, r2
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
         for (size_t i=0; i<txDataSize; ++i)
 8007ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eda:	3301      	adds	r3, #1
 8007edc:	643b      	str	r3, [r7, #64]	; 0x40
 8007ede:	e7e0      	b.n	8007ea2 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0xa6>
         }
         stream->write((uint8_t)(checksum >> 8));
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007ef2:	1212      	asrs	r2, r2, #8
 8007ef4:	b2d2      	uxtb	r2, r2
 8007ef6:	4611      	mov	r1, r2
 8007ef8:	4798      	blx	r3
         stream->write((uint8_t)(checksum & 0xFF));
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	4618      	mov	r0, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007f0c:	b2d2      	uxtb	r2, r2
 8007f0e:	4611      	mov	r1, r2
 8007f10:	4798      	blx	r3
 8007f12:	e092      	b.n	800803a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x23e>
      }
      else
      {
         //lastCheck = millis(); // Update lastCheck so we enforce a full I2C_POLLING_WAIT
         // We need to make sure we don't send too much I2C data in one go (otherwise we will overflow the ATtiny841's I2C buffer)
         size_t bytes_to_send = txDataSize; // Send this many bytes in total
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	63fb      	str	r3, [r7, #60]	; 0x3c
         size_t i=0;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	63bb      	str	r3, [r7, #56]	; 0x38
         size_t nexti;
         while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 3)) // If there are too many bytes to send all in one go
 8007f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f1e:	2b1d      	cmp	r3, #29
 8007f20:	d937      	bls.n	8007f92 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x196>
         {
            nexti = i + (TINY_I2C_BUFFER_LENGTH - 3);
 8007f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f24:	331d      	adds	r3, #29
 8007f26:	637b      	str	r3, [r7, #52]	; 0x34
            wireport->beginTransmission((uint8_t)deviceaddress);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	68da      	ldr	r2, [r3, #12]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	7c1b      	ldrb	r3, [r3, #16]
 8007f30:	4619      	mov	r1, r3
 8007f32:	4610      	mov	r0, r2
 8007f34:	f002 fb58 	bl	800a5e8 <_ZN7TwoWire17beginTransmissionEh>
            wireport->write(DATA_REG); // Point to the serial data 'register'
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	21ff      	movs	r1, #255	; 0xff
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7ff fa66 	bl	8007410 <_ZN7TwoWire5writeEi>
            for (; i<nexti; ++i)
 8007f44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d219      	bcs.n	8007f80 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x184>
            {
               wireport->write(txData[i]); // Write each byte
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	68d8      	ldr	r0, [r3, #12]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	6879      	ldr	r1, [r7, #4]
 8007f5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f5c:	440a      	add	r2, r1
 8007f5e:	7812      	ldrb	r2, [r2, #0]
 8007f60:	4611      	mov	r1, r2
 8007f62:	4798      	blx	r3
               checksum += (uint16_t)txData[i];
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f68:	4413      	add	r3, r2
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007f72:	4413      	add	r3, r2
 8007f74:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            for (; i<nexti; ++i)
 8007f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f7e:	e7e1      	b.n	8007f44 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x148>
            }
            bytes_to_send = bytes_to_send - (TINY_I2C_BUFFER_LENGTH - 3); // Decrease the number of bytes still to send
 8007f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f82:	3b1d      	subs	r3, #29
 8007f84:	63fb      	str	r3, [r7, #60]	; 0x3c
            wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f002 fb76 	bl	800a67c <_ZN7TwoWire15endTransmissionEv>
         while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 3)) // If there are too many bytes to send all in one go
 8007f90:	e7c4      	b.n	8007f1c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x120>
         }
         // There are now <= (TINY_I2C_BUFFER_LENGTH - 3) bytes left to send, so send them and then release the bus
         wireport->beginTransmission((uint8_t)deviceaddress);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	68da      	ldr	r2, [r3, #12]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	7c1b      	ldrb	r3, [r3, #16]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	4610      	mov	r0, r2
 8007f9e:	f002 fb23 	bl	800a5e8 <_ZN7TwoWire17beginTransmissionEh>
         wireport->write(DATA_REG); // Point to the 'serial register'
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	21ff      	movs	r1, #255	; 0xff
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7ff fa31 	bl	8007410 <_ZN7TwoWire5writeEi>
         for (; i<txDataSize; ++i)
 8007fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d219      	bcs.n	8007fea <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x1ee>
         {
            wireport->write(txData[i]);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	68d8      	ldr	r0, [r3, #12]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6879      	ldr	r1, [r7, #4]
 8007fc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fc6:	440a      	add	r2, r1
 8007fc8:	7812      	ldrb	r2, [r2, #0]
 8007fca:	4611      	mov	r1, r2
 8007fcc:	4798      	blx	r3
            checksum += (uint16_t)txData[i];
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd2:	4413      	add	r3, r2
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007fdc:	4413      	add	r3, r2
 8007fde:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
         for (; i<txDataSize; ++i)
 8007fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fe8:	e7e1      	b.n	8007fae <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x1b2>
         }
         wireport->write((uint8_t)(checksum >> 8));
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	68d8      	ldr	r0, [r3, #12]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007ffa:	1212      	asrs	r2, r2, #8
 8007ffc:	b2d2      	uxtb	r2, r2
 8007ffe:	4611      	mov	r1, r2
 8008000:	4798      	blx	r3
         wireport->write((uint8_t)(checksum & 0xFF));
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	68da      	ldr	r2, [r3, #12]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8008012:	b2c9      	uxtb	r1, r1
 8008014:	4610      	mov	r0, r2
 8008016:	4798      	blx	r3
         if (wireport->endTransmission() != 0) //Send data and release bus
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	4618      	mov	r0, r3
 800801e:	f002 fb2d 	bl	800a67c <_ZN7TwoWire15endTransmissionEv>
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	bf14      	ite	ne
 8008028:	2301      	movne	r3, #1
 800802a:	2300      	moveq	r3, #0
 800802c:	b2db      	uxtb	r3, r3
 800802e:	2b00      	cmp	r3, #0
 8008030:	d003      	beq.n	800803a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x23e>
            diagprint(F("I2C write was not successful!\r\n"));
 8008032:	491f      	ldr	r1, [pc, #124]	; (80080b0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2b4>)
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f001 f83b 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      }

      consoleprint(F("["));
 800803a:	491e      	ldr	r1, [pc, #120]	; (80080b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2b8>)
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f001 f88f 	bl	8009160 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
      consoleprint((uint16_t)txDataSize);
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	b29b      	uxth	r3, r3
 8008046:	4619      	mov	r1, r3
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f001 f8c1 	bl	80091d0 <_ZN10IridiumSBD12consoleprintEt>
      consoleprint(F(" bytes]"));
 800804e:	491a      	ldr	r1, [pc, #104]	; (80080b8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2bc>)
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f001 f885 	bl	8009160 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

      diagprint(F("Checksum:"));
 8008056:	4919      	ldr	r1, [pc, #100]	; (80080bc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2c0>)
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f001 f829 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      diagprint(checksum);
 800805e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008062:	4619      	mov	r1, r3
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f001 f85b 	bl	8009120 <_ZN10IridiumSBD9diagprintEt>
      diagprint(F("\r\n"));
 800806a:	4915      	ldr	r1, [pc, #84]	; (80080c0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2c4>)
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f001 f81f 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

      if (!waitForATResponse(NULL, 0, NULL, "0\r\n\r\nOK\r\n"))
 8008072:	4b14      	ldr	r3, [pc, #80]	; (80080c4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2c8>)
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	2300      	movs	r3, #0
 8008078:	2200      	movs	r2, #0
 800807a:	2100      	movs	r1, #0
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 fa37 	bl	80084f0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8008082:	4603      	mov	r3, r0
 8008084:	f083 0301 	eor.w	r3, r3, #1
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b00      	cmp	r3, #0
 800808c:	f000 8091 	beq.w	80081b2 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b6>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f000 faeb 	bl	800866c <_ZN10IridiumSBD9cancelledEv>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d015      	beq.n	80080c8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2cc>
 800809c:	2304      	movs	r3, #4
 800809e:	e149      	b.n	8008334 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 80080a0:	08021d24 	.word	0x08021d24
 80080a4:	08021d3c 	.word	0x08021d3c
 80080a8:	08021d48 	.word	0x08021d48
 80080ac:	08021d4c 	.word	0x08021d4c
 80080b0:	08021d54 	.word	0x08021d54
 80080b4:	08021d74 	.word	0x08021d74
 80080b8:	08021d78 	.word	0x08021d78
 80080bc:	08021d80 	.word	0x08021d80
 80080c0:	08021cd4 	.word	0x08021cd4
 80080c4:	08021d8c 	.word	0x08021d8c
 80080c8:	2303      	movs	r3, #3
 80080ca:	e133      	b.n	8008334 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
   }

   else // Text transmission
   {
#if true // use long string implementation
      if (txTxtMessage == NULL) // It's ok to have a NULL txtTxtMessage if the transaction is RX only
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d11d      	bne.n	800810e <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x312>
      {
         send(F("AT+SBDWT=\r"));
 80080d2:	2301      	movs	r3, #1
 80080d4:	2201      	movs	r2, #1
 80080d6:	4999      	ldr	r1, [pc, #612]	; (800833c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x540>)
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f000 fe6b 	bl	8008db4 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
         if (!waitForATResponse())
 80080de:	4b98      	ldr	r3, [pc, #608]	; (8008340 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x544>)
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	2300      	movs	r3, #0
 80080e4:	2200      	movs	r2, #0
 80080e6:	2100      	movs	r1, #0
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f000 fa01 	bl	80084f0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80080ee:	4603      	mov	r3, r0
 80080f0:	f083 0301 	eor.w	r3, r3, #1
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d05c      	beq.n	80081b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b8>
            return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f000 fab6 	bl	800866c <_ZN10IridiumSBD9cancelledEv>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d001      	beq.n	800810a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x30e>
 8008106:	2304      	movs	r3, #4
 8008108:	e114      	b.n	8008334 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 800810a:	2303      	movs	r3, #3
 800810c:	e112      	b.n	8008334 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
      }
      else
      {
         // remove any embedded \r
         char *p = strchr(txTxtMessage, '\r');
 800810e:	210d      	movs	r1, #13
 8008110:	68b8      	ldr	r0, [r7, #8]
 8008112:	f014 f866 	bl	801c1e2 <strchr>
 8008116:	6338      	str	r0, [r7, #48]	; 0x30
         if (p) *p = 0;
 8008118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811a:	2b00      	cmp	r3, #0
 800811c:	d002      	beq.n	8008124 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x328>
 800811e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008120:	2200      	movs	r2, #0
 8008122:	701a      	strb	r2, [r3, #0]
         if (strlen(txTxtMessage) > ISBD_MAX_MESSAGE_LENGTH)
 8008124:	68b8      	ldr	r0, [r7, #8]
 8008126:	f7f8 f86d 	bl	8000204 <strlen>
 800812a:	4603      	mov	r3, r0
 800812c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008130:	d901      	bls.n	8008136 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x33a>
            return ISBD_MSG_TOO_LONG;
 8008132:	230d      	movs	r3, #13
 8008134:	e0fe      	b.n	8008334 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         send(F("AT+SBDWT\r"));
 8008136:	2301      	movs	r3, #1
 8008138:	2201      	movs	r2, #1
 800813a:	4982      	ldr	r1, [pc, #520]	; (8008344 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x548>)
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f000 fe39 	bl	8008db4 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
         if (!waitForATResponse(NULL, 0, NULL, "READY\r\n"))
 8008142:	4b81      	ldr	r3, [pc, #516]	; (8008348 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x54c>)
 8008144:	9300      	str	r3, [sp, #0]
 8008146:	2300      	movs	r3, #0
 8008148:	2200      	movs	r2, #0
 800814a:	2100      	movs	r1, #0
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f000 f9cf 	bl	80084f0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8008152:	4603      	mov	r3, r0
 8008154:	f083 0301 	eor.w	r3, r3, #1
 8008158:	b2db      	uxtb	r3, r3
 800815a:	2b00      	cmp	r3, #0
 800815c:	d009      	beq.n	8008172 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x376>
            return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 fa84 	bl	800866c <_ZN10IridiumSBD9cancelledEv>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x372>
 800816a:	2304      	movs	r3, #4
 800816c:	e0e2      	b.n	8008334 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 800816e:	2303      	movs	r3, #3
 8008170:	e0e0      	b.n	8008334 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         sendlong(txTxtMessage);
 8008172:	68b9      	ldr	r1, [r7, #8]
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 fec5 	bl	8008f04 <_ZN10IridiumSBD8sendlongEPKc>
         send("\r");
 800817a:	4974      	ldr	r1, [pc, #464]	; (800834c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x550>)
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f000 fe75 	bl	8008e6c <_ZN10IridiumSBD4sendEPKc>
         if (!waitForATResponse(NULL, 0, NULL, "0\r\n\r\nOK\r\n"))
 8008182:	4b73      	ldr	r3, [pc, #460]	; (8008350 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x554>)
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	2300      	movs	r3, #0
 8008188:	2200      	movs	r2, #0
 800818a:	2100      	movs	r1, #0
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f000 f9af 	bl	80084f0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8008192:	4603      	mov	r3, r0
 8008194:	f083 0301 	eor.w	r3, r3, #1
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00a      	beq.n	80081b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b8>
            return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f000 fa64 	bl	800866c <_ZN10IridiumSBD9cancelledEv>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b2>
 80081aa:	2304      	movs	r3, #4
 80081ac:	e0c2      	b.n	8008334 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 80081ae:	2303      	movs	r3, #3
 80081b0:	e0c0      	b.n	8008334 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80081b2:	bf00      	nop
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif
   }

   // Long SBDIX loop begins here
   for (unsigned long start = millis(); millis() - start < 1000UL * this->sendReceiveTimeout;)
 80081b4:	f004 f9c0 	bl	800c538 <HAL_GetTick>
 80081b8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80081ba:	f004 f9bd 	bl	800c538 <HAL_GetTick>
 80081be:	4602      	mov	r2, r0
 80081c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c2:	1ad2      	subs	r2, r2, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081c8:	4619      	mov	r1, r3
 80081ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80081ce:	fb03 f301 	mul.w	r3, r3, r1
 80081d2:	429a      	cmp	r2, r3
 80081d4:	bf34      	ite	cc
 80081d6:	2301      	movcc	r3, #1
 80081d8:	2300      	movcs	r3, #0
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f000 80a4 	beq.w	800832a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x52e>
   {
      bool okToProceed = true;
 80081e2:	2301      	movs	r3, #1
 80081e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      if (this->msstmWorkaroundRequested)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00e      	beq.n	8008210 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x414>
      {
         okToProceed = false;
 80081f2:	2300      	movs	r3, #0
 80081f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
         int ret = internalMSSTMWorkaround(okToProceed);
 80081f8:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80081fc:	4619      	mov	r1, r3
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f000 f902 	bl	8008408 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb>
 8008204:	62b8      	str	r0, [r7, #40]	; 0x28
         if (ret != ISBD_SUCCESS)
 8008206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008208:	2b00      	cmp	r3, #0
 800820a:	d001      	beq.n	8008210 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x414>
            return ret;
 800820c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820e:	e091      	b.n	8008334 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
      }

      if (okToProceed)
 8008210:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008214:	2b00      	cmp	r3, #0
 8008216:	d077      	beq.n	8008308 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50c>
      {
         uint16_t moCode = 0, moMSN = 0, mtCode = 0, mtMSN = 0, mtLen = 0, mtRemaining = 0;
 8008218:	2300      	movs	r3, #0
 800821a:	843b      	strh	r3, [r7, #32]
 800821c:	2300      	movs	r3, #0
 800821e:	83fb      	strh	r3, [r7, #30]
 8008220:	2300      	movs	r3, #0
 8008222:	83bb      	strh	r3, [r7, #28]
 8008224:	2300      	movs	r3, #0
 8008226:	837b      	strh	r3, [r7, #26]
 8008228:	2300      	movs	r3, #0
 800822a:	833b      	strh	r3, [r7, #24]
 800822c:	2300      	movs	r3, #0
 800822e:	82fb      	strh	r3, [r7, #22]
         int ret = doSBDIX(moCode, moMSN, mtCode, mtMSN, mtLen, mtRemaining);
 8008230:	f107 001c 	add.w	r0, r7, #28
 8008234:	f107 021e 	add.w	r2, r7, #30
 8008238:	f107 0120 	add.w	r1, r7, #32
 800823c:	f107 0316 	add.w	r3, r7, #22
 8008240:	9302      	str	r3, [sp, #8]
 8008242:	f107 0318 	add.w	r3, r7, #24
 8008246:	9301      	str	r3, [sp, #4]
 8008248:	f107 031a 	add.w	r3, r7, #26
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	4603      	mov	r3, r0
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	f000 fa3b 	bl	80086cc <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_>
 8008256:	6278      	str	r0, [r7, #36]	; 0x24
         if (ret != ISBD_SUCCESS)
 8008258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825a:	2b00      	cmp	r3, #0
 800825c:	d001      	beq.n	8008262 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x466>
            return ret;
 800825e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008260:	e068      	b.n	8008334 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

         diagprint(F("SBDIX MO code: "));
 8008262:	493c      	ldr	r1, [pc, #240]	; (8008354 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x558>)
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f000 ff23 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
         diagprint(moCode);
 800826a:	8c3b      	ldrh	r3, [r7, #32]
 800826c:	4619      	mov	r1, r3
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f000 ff56 	bl	8009120 <_ZN10IridiumSBD9diagprintEt>
         diagprint(F("\r\n"));
 8008274:	4938      	ldr	r1, [pc, #224]	; (8008358 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x55c>)
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f000 ff1a 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

         if (moCode <= 4) // this range indicates successful return!
 800827c:	8c3b      	ldrh	r3, [r7, #32]
 800827e:	2b04      	cmp	r3, #4
 8008280:	d820      	bhi.n	80082c4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4c8>
         {
            diagprint(F("SBDIX success!\r\n"));
 8008282:	4936      	ldr	r1, [pc, #216]	; (800835c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x560>)
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f000 ff13 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

            this->remainingMessages = mtRemaining;
 800828a:	8afb      	ldrh	r3, [r7, #22]
 800828c:	461a      	mov	r2, r3
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	675a      	str	r2, [r3, #116]	; 0x74
            if (mtCode == 1 && rxBuffer) // retrieved 1 message
 8008292:	8bbb      	ldrh	r3, [r7, #28]
 8008294:	2b01      	cmp	r3, #1
 8008296:	d10d      	bne.n	80082b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4b8>
 8008298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00a      	beq.n	80082b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4b8>
            {
               diagprint(F("Incoming message!\r\n"));
 800829e:	4930      	ldr	r1, [pc, #192]	; (8008360 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x564>)
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f000 ff05 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
               return doSBDRB(rxBuffer, prxBufferSize);
 80082a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80082a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f000 fa74 	bl	8008798 <_ZN10IridiumSBD7doSBDRBEPhPj>
 80082b0:	4603      	mov	r3, r0
 80082b2:	e028      	b.n	8008306 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50a>
            }

            else
            {
               // No data returned
               if (prxBufferSize)
 80082b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d002      	beq.n	80082c0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4c4>
                  *prxBufferSize = 0;
 80082ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082bc:	2200      	movs	r2, #0
 80082be:	601a      	str	r2, [r3, #0]
            }
            return ISBD_SUCCESS;
 80082c0:	2300      	movs	r3, #0
 80082c2:	e020      	b.n	8008306 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50a>
         }

         else if (moCode == 12 || moCode == 14 || moCode == 16) // fatal failure: no retry
 80082c4:	8c3b      	ldrh	r3, [r7, #32]
 80082c6:	2b0c      	cmp	r3, #12
 80082c8:	d005      	beq.n	80082d6 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4da>
 80082ca:	8c3b      	ldrh	r3, [r7, #32]
 80082cc:	2b0e      	cmp	r3, #14
 80082ce:	d002      	beq.n	80082d6 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4da>
 80082d0:	8c3b      	ldrh	r3, [r7, #32]
 80082d2:	2b10      	cmp	r3, #16
 80082d4:	d105      	bne.n	80082e2 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4e6>
         {
            diagprint(F("SBDIX fatal!\r\n"));
 80082d6:	4923      	ldr	r1, [pc, #140]	; (8008364 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x568>)
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f000 fee9 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
            return ISBD_SBDIX_FATAL_ERROR;
 80082de:	2306      	movs	r3, #6
 80082e0:	e011      	b.n	8008306 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50a>
         }

         else // retry
         {
            diagprint(F("Waiting for SBDIX retry...\r\n"));
 80082e2:	4921      	ldr	r1, [pc, #132]	; (8008368 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x56c>)
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f000 fee3 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
            if (!noBlockWait(sbdixInterval))
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082ee:	4619      	mov	r1, r3
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f000 f8d7 	bl	80084a4 <_ZN10IridiumSBD11noBlockWaitEi>
 80082f6:	4603      	mov	r3, r0
 80082f8:	f083 0301 	eor.w	r3, r3, #1
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f43f af5b 	beq.w	80081ba <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3be>
               return ISBD_CANCELLED;
 8008304:	2304      	movs	r3, #4
            return ret;
 8008306:	e015      	b.n	8008334 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         }
      }

      else // MSSTM check fail
      {
         diagprint(F("Waiting for MSSTM retry...\r\n"));
 8008308:	4918      	ldr	r1, [pc, #96]	; (800836c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x570>)
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f000 fed0 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
         if (!noBlockWait(ISBD_MSSTM_RETRY_INTERVAL))
 8008310:	210a      	movs	r1, #10
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f000 f8c6 	bl	80084a4 <_ZN10IridiumSBD11noBlockWaitEi>
 8008318:	4603      	mov	r3, r0
 800831a:	f083 0301 	eor.w	r3, r3, #1
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b00      	cmp	r3, #0
 8008322:	f43f af4a 	beq.w	80081ba <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3be>
            return ISBD_CANCELLED;
 8008326:	2304      	movs	r3, #4
 8008328:	e004      	b.n	8008334 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
      }
   } // big wait loop

   diagprint(F("SBDIX timeout!\r\n"));
 800832a:	4911      	ldr	r1, [pc, #68]	; (8008370 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x574>)
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f000 febf 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SENDRECEIVE_TIMEOUT;
 8008332:	2307      	movs	r3, #7
}
 8008334:	4618      	mov	r0, r3
 8008336:	3748      	adds	r7, #72	; 0x48
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	08021d98 	.word	0x08021d98
 8008340:	08021928 	.word	0x08021928
 8008344:	08021da4 	.word	0x08021da4
 8008348:	08021d4c 	.word	0x08021d4c
 800834c:	08021d48 	.word	0x08021d48
 8008350:	08021d8c 	.word	0x08021d8c
 8008354:	08021db0 	.word	0x08021db0
 8008358:	08021cd4 	.word	0x08021cd4
 800835c:	08021dc0 	.word	0x08021dc0
 8008360:	08021dd4 	.word	0x08021dd4
 8008364:	08021de8 	.word	0x08021de8
 8008368:	08021df8 	.word	0x08021df8
 800836c:	08021e18 	.word	0x08021e18
 8008370:	08021e38 	.word	0x08021e38

08008374 <_ZN10IridiumSBD24internalGetSignalQualityERi>:

int IridiumSBD::internalGetSignalQuality(int &quality)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b086      	sub	sp, #24
 8008378:	af02      	add	r7, sp, #8
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
   if (this->asleep)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8008384:	2b00      	cmp	r3, #0
 8008386:	d001      	beq.n	800838c <_ZN10IridiumSBD24internalGetSignalQualityERi+0x18>
      return ISBD_IS_ASLEEP;
 8008388:	230a      	movs	r3, #10
 800838a:	e032      	b.n	80083f2 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>

   char csqResponseBuf[2];

   send(F("AT+CSQ\r"));
 800838c:	2301      	movs	r3, #1
 800838e:	2201      	movs	r2, #1
 8008390:	491a      	ldr	r1, [pc, #104]	; (80083fc <_ZN10IridiumSBD24internalGetSignalQualityERi+0x88>)
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fd0e 	bl	8008db4 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(csqResponseBuf, sizeof(csqResponseBuf), "+CSQ:"))
 8008398:	f107 010c 	add.w	r1, r7, #12
 800839c:	4b18      	ldr	r3, [pc, #96]	; (8008400 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x8c>)
 800839e:	9300      	str	r3, [sp, #0]
 80083a0:	4b18      	ldr	r3, [pc, #96]	; (8008404 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x90>)
 80083a2:	2202      	movs	r2, #2
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f8a3 	bl	80084f0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80083aa:	4603      	mov	r3, r0
 80083ac:	f083 0301 	eor.w	r3, r3, #1
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d009      	beq.n	80083ca <_ZN10IridiumSBD24internalGetSignalQualityERi+0x56>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f958 	bl	800866c <_ZN10IridiumSBD9cancelledEv>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d001      	beq.n	80083c6 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x52>
 80083c2:	2304      	movs	r3, #4
 80083c4:	e015      	b.n	80083f2 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>
 80083c6:	2303      	movs	r3, #3
 80083c8:	e013      	b.n	80083f2 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>

   if (isdigit(csqResponseBuf[0]))
 80083ca:	7b3b      	ldrb	r3, [r7, #12]
 80083cc:	3b30      	subs	r3, #48	; 0x30
 80083ce:	2b09      	cmp	r3, #9
 80083d0:	bf94      	ite	ls
 80083d2:	2301      	movls	r3, #1
 80083d4:	2300      	movhi	r3, #0
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d009      	beq.n	80083f0 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7c>
   {
      quality = atoi(csqResponseBuf);
 80083dc:	f107 030c 	add.w	r3, r7, #12
 80083e0:	4618      	mov	r0, r3
 80083e2:	f012 f8ee 	bl	801a5c2 <atoi>
 80083e6:	4602      	mov	r2, r0
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	601a      	str	r2, [r3, #0]
      return ISBD_SUCCESS;
 80083ec:	2300      	movs	r3, #0
 80083ee:	e000      	b.n	80083f2 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>
   }

   return ISBD_PROTOCOL_ERROR;
 80083f0:	2303      	movs	r3, #3
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	08021e4c 	.word	0x08021e4c
 8008400:	08021928 	.word	0x08021928
 8008404:	08021e54 	.word	0x08021e54

08008408 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb>:

int IridiumSBD::internalMSSTMWorkaround(bool &okToProceed)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b08a      	sub	sp, #40	; 0x28
 800840c:	af02      	add	r7, sp, #8
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
   satellite. Ensuring that the received signal strength reported in response to AT command +CSQ and +CIER is above 2-3 bars
   before attempting SBD communication will protect against lockout.
   */
   char msstmResponseBuf[24];

   send(F("AT-MSSTM\r"));
 8008412:	2301      	movs	r3, #1
 8008414:	2201      	movs	r2, #1
 8008416:	4917      	ldr	r1, [pc, #92]	; (8008474 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x6c>)
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fccb 	bl	8008db4 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(msstmResponseBuf, sizeof(msstmResponseBuf), "-MSSTM: "))
 800841e:	f107 0108 	add.w	r1, r7, #8
 8008422:	4b15      	ldr	r3, [pc, #84]	; (8008478 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x70>)
 8008424:	9300      	str	r3, [sp, #0]
 8008426:	4b15      	ldr	r3, [pc, #84]	; (800847c <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x74>)
 8008428:	2218      	movs	r2, #24
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f860 	bl	80084f0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8008430:	4603      	mov	r3, r0
 8008432:	f083 0301 	eor.w	r3, r3, #1
 8008436:	b2db      	uxtb	r3, r3
 8008438:	2b00      	cmp	r3, #0
 800843a:	d009      	beq.n	8008450 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x48>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f915 	bl	800866c <_ZN10IridiumSBD9cancelledEv>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x44>
 8008448:	2304      	movs	r3, #4
 800844a:	e00e      	b.n	800846a <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x62>
 800844c:	2303      	movs	r3, #3
 800844e:	e00c      	b.n	800846a <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x62>

   // Response buf now contains either an 8-digit number or the string "no network service"
   okToProceed = isxdigit(msstmResponseBuf[0]);
 8008450:	7a3b      	ldrb	r3, [r7, #8]
 8008452:	4618      	mov	r0, r3
 8008454:	f012 f9de 	bl	801a814 <isxdigit>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	bf14      	ite	ne
 800845e:	2301      	movne	r3, #1
 8008460:	2300      	moveq	r3, #0
 8008462:	b2da      	uxtb	r2, r3
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	701a      	strb	r2, [r3, #0]
   return ISBD_SUCCESS;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3720      	adds	r7, #32
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	08021910 	.word	0x08021910
 8008478:	08021928 	.word	0x08021928
 800847c:	0802191c 	.word	0x0802191c

08008480 <_ZN10IridiumSBD13internalSleepEv>:

int IridiumSBD::internalSleep()
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
   if (this->asleep)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800848e:	2b00      	cmp	r3, #0
 8008490:	d001      	beq.n	8008496 <_ZN10IridiumSBD13internalSleepEv+0x16>
      return ISBD_IS_ASLEEP;
 8008492:	230a      	movs	r3, #10
 8008494:	e000      	b.n	8008498 <_ZN10IridiumSBD13internalSleepEv+0x18>

   if (!waitForATResponse())
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif

   return ISBD_SUCCESS;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <_ZN10IridiumSBD11noBlockWaitEi>:

bool IridiumSBD::noBlockWait(int seconds)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
   for (unsigned long start=millis(); millis() - start < 1000UL * seconds;)
 80084ae:	f004 f843 	bl	800c538 <HAL_GetTick>
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	f004 f840 	bl	800c538 <HAL_GetTick>
 80084b8:	4602      	mov	r2, r0
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	1ad2      	subs	r2, r2, r3
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80084c4:	fb01 f303 	mul.w	r3, r1, r3
 80084c8:	429a      	cmp	r2, r3
 80084ca:	bf34      	ite	cc
 80084cc:	2301      	movcc	r3, #1
 80084ce:	2300      	movcs	r3, #0
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d007      	beq.n	80084e6 <_ZN10IridiumSBD11noBlockWaitEi+0x42>
      if (cancelled())
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f8c8 	bl	800866c <_ZN10IridiumSBD9cancelledEv>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d0e8      	beq.n	80084b4 <_ZN10IridiumSBD11noBlockWaitEi+0x10>
         return false;
 80084e2:	2300      	movs	r3, #0
 80084e4:	e000      	b.n	80084e8 <_ZN10IridiumSBD11noBlockWaitEi+0x44>

   return true;
 80084e6:	2301      	movs	r3, #1
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>:

// Wait for response from previous AT command.  This process terminates when "terminator" string is seen or upon timeout.
// If "prompt" string is provided (example "+CSQ:"), then all characters following prompt up to the next CRLF are
// stored in response buffer for later parsing by caller.
bool IridiumSBD::waitForATResponse(char *response, int responseSize, const char *prompt, const char *terminator)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b08a      	sub	sp, #40	; 0x28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
 80084fc:	603b      	str	r3, [r7, #0]
   diagprint(F("Waiting for response "));
 80084fe:	4959      	ldr	r1, [pc, #356]	; (8008664 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x174>)
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f000 fdd5 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   diagprint(terminator);
 8008506:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	f000 fdef 	bl	80090ec <_ZN10IridiumSBD9diagprintEPKc>
   this->print((char*) terminator); //TODO doesn't print otherwise
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008514:	4798      	blx	r3
   diagprint(F("\r\n"));
 8008516:	4954      	ldr	r1, [pc, #336]	; (8008668 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x178>)
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f000 fdc9 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (response)
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d005      	beq.n	8008530 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x40>
      memset(response, 0, responseSize);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	461a      	mov	r2, r3
 8008528:	2100      	movs	r1, #0
 800852a:	68b8      	ldr	r0, [r7, #8]
 800852c:	f012 facc 	bl	801aac8 <memset>

   int matchPromptPos = 0; // Matches chars in prompt
 8008530:	2300      	movs	r3, #0
 8008532:	627b      	str	r3, [r7, #36]	; 0x24
   int matchTerminatorPos = 0; // Matches chars in terminator
 8008534:	2300      	movs	r3, #0
 8008536:	623b      	str	r3, [r7, #32]
   enum {LOOKING_FOR_PROMPT, GATHERING_RESPONSE, LOOKING_FOR_TERMINATOR};
   int promptState = prompt ? LOOKING_FOR_PROMPT : LOOKING_FOR_TERMINATOR;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d001      	beq.n	8008542 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x52>
 800853e:	2300      	movs	r3, #0
 8008540:	e000      	b.n	8008544 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x54>
 8008542:	2302      	movs	r3, #2
 8008544:	61fb      	str	r3, [r7, #28]
   //consoleprint(F("<< ")); //TODO If we comment out this it looks cleaner in the serial

   for (unsigned long start=millis(); millis() - start < 1000UL * atTimeout;)
 8008546:	f003 fff7 	bl	800c538 <HAL_GetTick>
 800854a:	61b8      	str	r0, [r7, #24]
 800854c:	f003 fff4 	bl	800c538 <HAL_GetTick>
 8008550:	4602      	mov	r2, r0
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	1ad2      	subs	r2, r2, r3
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800855a:	4619      	mov	r1, r3
 800855c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008560:	fb03 f301 	mul.w	r3, r3, r1
 8008564:	429a      	cmp	r2, r3
 8008566:	bf34      	ite	cc
 8008568:	2301      	movcc	r3, #1
 800856a:	2300      	movcs	r3, #0
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2b00      	cmp	r3, #0
 8008570:	d072      	beq.n	8008658 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x168>
   {
      if (cancelled())
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 f87a 	bl	800866c <_ZN10IridiumSBD9cancelledEv>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x92>
         return false;
 800857e:	2300      	movs	r3, #0
 8008580:	e06b      	b.n	800865a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x16a>

      while (filteredavailable() > 0)
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f000 ff52 	bl	800942c <_ZN10IridiumSBD17filteredavailableEv>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	bfcc      	ite	gt
 800858e:	2301      	movgt	r3, #1
 8008590:	2300      	movle	r3, #0
 8008592:	b2db      	uxtb	r3, r3
 8008594:	2b00      	cmp	r3, #0
 8008596:	d0d9      	beq.n	800854c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x5c>
      {
         char c = filteredread();
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f000 ff63 	bl	8009464 <_ZN10IridiumSBD12filteredreadEv>
 800859e:	4603      	mov	r3, r0
 80085a0:	75fb      	strb	r3, [r7, #23]
         if (prompt)
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d03b      	beq.n	8008620 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
         {
            switch (promptState)
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d003      	beq.n	80085b6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xc6>
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d01d      	beq.n	80085f0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x100>
 80085b4:	e034      	b.n	8008620 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
            {
            case LOOKING_FOR_PROMPT:
               if (c == prompt[matchPromptPos])
 80085b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b8:	683a      	ldr	r2, [r7, #0]
 80085ba:	4413      	add	r3, r2
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	7dfa      	ldrb	r2, [r7, #23]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d10b      	bne.n	80085dc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xec>
               {
                  ++matchPromptPos;
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	3301      	adds	r3, #1
 80085c8:	627b      	str	r3, [r7, #36]	; 0x24
                  if (prompt[matchPromptPos] == '\0')
 80085ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085cc:	683a      	ldr	r2, [r7, #0]
 80085ce:	4413      	add	r3, r2
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d121      	bne.n	800861a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
                     promptState = GATHERING_RESPONSE;
 80085d6:	2301      	movs	r3, #1
 80085d8:	61fb      	str	r3, [r7, #28]
               else
               {
                  matchPromptPos = c == prompt[0] ? 1 : 0;
               }

               break;
 80085da:	e01e      	b.n	800861a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
                  matchPromptPos = c == prompt[0] ? 1 : 0;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	7dfa      	ldrb	r2, [r7, #23]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d101      	bne.n	80085ea <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfa>
 80085e6:	2301      	movs	r3, #1
 80085e8:	e000      	b.n	80085ec <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfc>
 80085ea:	2300      	movs	r3, #0
 80085ec:	627b      	str	r3, [r7, #36]	; 0x24
               break;
 80085ee:	e014      	b.n	800861a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
            case GATHERING_RESPONSE: // gathering response from end of prompt to first \r
               if (response)
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d013      	beq.n	800861e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12e>
               {
                  if (c == '\r' || responseSize < 2)
 80085f6:	7dfb      	ldrb	r3, [r7, #23]
 80085f8:	2b0d      	cmp	r3, #13
 80085fa:	d002      	beq.n	8008602 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x112>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	dc02      	bgt.n	8008608 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x118>
                  {
                     promptState = LOOKING_FOR_TERMINATOR;
 8008602:	2302      	movs	r3, #2
 8008604:	61fb      	str	r3, [r7, #28]
                  {
                     *response++ = c;
                     responseSize--;
                  }
               }
               break;
 8008606:	e00a      	b.n	800861e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12e>
                     *response++ = c;
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	1c5a      	adds	r2, r3, #1
 800860c:	60ba      	str	r2, [r7, #8]
 800860e:	7dfa      	ldrb	r2, [r7, #23]
 8008610:	701a      	strb	r2, [r3, #0]
                     responseSize--;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	3b01      	subs	r3, #1
 8008616:	607b      	str	r3, [r7, #4]
               break;
 8008618:	e001      	b.n	800861e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12e>
               break;
 800861a:	bf00      	nop
 800861c:	e000      	b.n	8008620 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
               break;
 800861e:	bf00      	nop
            }
         }

         if (c == terminator[matchTerminatorPos])
 8008620:	6a3b      	ldr	r3, [r7, #32]
 8008622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008624:	4413      	add	r3, r2
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	7dfa      	ldrb	r2, [r7, #23]
 800862a:	429a      	cmp	r2, r3
 800862c:	d10a      	bne.n	8008644 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x154>
         {
            ++matchTerminatorPos;
 800862e:	6a3b      	ldr	r3, [r7, #32]
 8008630:	3301      	adds	r3, #1
 8008632:	623b      	str	r3, [r7, #32]
            if (terminator[matchTerminatorPos] == '\0')
 8008634:	6a3b      	ldr	r3, [r7, #32]
 8008636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008638:	4413      	add	r3, r2
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1a0      	bne.n	8008582 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x92>
               return true;
 8008640:	2301      	movs	r3, #1
 8008642:	e00a      	b.n	800865a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x16a>
         }
         else
         {
            matchTerminatorPos = c == terminator[0] ? 1 : 0;
 8008644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	7dfa      	ldrb	r2, [r7, #23]
 800864a:	429a      	cmp	r2, r3
 800864c:	d101      	bne.n	8008652 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x162>
 800864e:	2301      	movs	r3, #1
 8008650:	e000      	b.n	8008654 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x164>
 8008652:	2300      	movs	r3, #0
 8008654:	623b      	str	r3, [r7, #32]
      while (filteredavailable() > 0)
 8008656:	e794      	b.n	8008582 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x92>
         }
      } // while (filteredavailable() > 0)
   } // timer loop
   return false;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3728      	adds	r7, #40	; 0x28
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	08021e5c 	.word	0x08021e5c
 8008668:	08021cd4 	.word	0x08021cd4

0800866c <_ZN10IridiumSBD9cancelledEv>:

bool IridiumSBD::cancelled()
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
   if (this->useSerial)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	7c5b      	ldrb	r3, [r3, #17]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d019      	beq.n	80086b0 <_ZN10IridiumSBD9cancelledEv+0x44>
   {
	   //TODO For some reason when using digitalRead here it didn't work so simply replaced with HAL function
	   //if ((ringPin != -1) && digitalRead(ringPin) == LOW)
	     if ((ringPin != -1) && HAL_GPIO_ReadPin(ringPin_GPIO_Port,ringPin_Pin) == LOW)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008686:	d008      	beq.n	800869a <_ZN10IridiumSBD9cancelledEv+0x2e>
 8008688:	2110      	movs	r1, #16
 800868a:	480e      	ldr	r0, [pc, #56]	; (80086c4 <_ZN10IridiumSBD9cancelledEv+0x58>)
 800868c:	f004 fe54 	bl	800d338 <HAL_GPIO_ReadPin>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d101      	bne.n	800869a <_ZN10IridiumSBD9cancelledEv+0x2e>
 8008696:	2301      	movs	r3, #1
 8008698:	e000      	b.n	800869c <_ZN10IridiumSBD9cancelledEv+0x30>
 800869a:	2300      	movs	r3, #0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d007      	beq.n	80086b0 <_ZN10IridiumSBD9cancelledEv+0x44>
	  {
         ringAsserted = true;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
		 diagprint(F("ringPin seen!\r\n"));
 80086a8:	4907      	ldr	r1, [pc, #28]	; (80086c8 <_ZN10IridiumSBD9cancelledEv+0x5c>)
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fd00 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
	  }
   }

   return !ISBDCallback();
 80086b0:	f7fe fec0 	bl	8007434 <_Z12ISBDCallbackv>
 80086b4:	4603      	mov	r3, r0
 80086b6:	f083 0301 	eor.w	r3, r3, #1
 80086ba:	b2db      	uxtb	r3, r3
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3708      	adds	r7, #8
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	40020800 	.word	0x40020800
 80086c8:	08021e74 	.word	0x08021e74

080086cc <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_>:

int IridiumSBD::doSBDIX(uint16_t &moCode, uint16_t &moMSN, uint16_t &mtCode, uint16_t &mtMSN, uint16_t &mtLen, uint16_t &mtRemaining)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b096      	sub	sp, #88	; 0x58
 80086d0:	af02      	add	r7, sp, #8
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
 80086d8:	603b      	str	r3, [r7, #0]
   // Returns xx,xxxxx,xx,xxxxx,xx,xxx
   char sbdixResponseBuf[32];
   send(F("AT+SBDIX\r"));
 80086da:	2301      	movs	r3, #1
 80086dc:	2201      	movs	r2, #1
 80086de:	492a      	ldr	r1, [pc, #168]	; (8008788 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xbc>)
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f000 fb67 	bl	8008db4 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(sbdixResponseBuf, sizeof(sbdixResponseBuf), "+SBDIX: "))
 80086e6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80086ea:	4b28      	ldr	r3, [pc, #160]	; (800878c <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xc0>)
 80086ec:	9300      	str	r3, [sp, #0]
 80086ee:	4b28      	ldr	r3, [pc, #160]	; (8008790 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xc4>)
 80086f0:	2220      	movs	r2, #32
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f7ff fefc 	bl	80084f0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80086f8:	4603      	mov	r3, r0
 80086fa:	f083 0301 	eor.w	r3, r3, #1
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	2b00      	cmp	r3, #0
 8008702:	d009      	beq.n	8008718 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x4c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	f7ff ffb1 	bl	800866c <_ZN10IridiumSBD9cancelledEv>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d001      	beq.n	8008714 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x48>
 8008710:	2304      	movs	r3, #4
 8008712:	e035      	b.n	8008780 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb4>
 8008714:	2303      	movs	r3, #3
 8008716:	e033      	b.n	8008780 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb4>

   uint16_t *values[6] = { &moCode, &moMSN, &mtCode, &mtMSN, &mtLen, &mtRemaining };
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	613b      	str	r3, [r7, #16]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	617b      	str	r3, [r7, #20]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	61bb      	str	r3, [r7, #24]
 8008724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008726:	61fb      	str	r3, [r7, #28]
 8008728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800872a:	623b      	str	r3, [r7, #32]
 800872c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800872e:	627b      	str	r3, [r7, #36]	; 0x24
   for (int i=0; i<6; ++i)
 8008730:	2300      	movs	r3, #0
 8008732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008736:	2b05      	cmp	r3, #5
 8008738:	dc21      	bgt.n	800877e <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb2>
   {
      char *p = strtok(i == 0 ? sbdixResponseBuf : NULL, ", ");
 800873a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800873c:	2b00      	cmp	r3, #0
 800873e:	d102      	bne.n	8008746 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x7a>
 8008740:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008744:	e000      	b.n	8008748 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x7c>
 8008746:	2300      	movs	r3, #0
 8008748:	4912      	ldr	r1, [pc, #72]	; (8008794 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xc8>)
 800874a:	4618      	mov	r0, r3
 800874c:	f014 fb9c 	bl	801ce88 <strtok>
 8008750:	64b8      	str	r0, [r7, #72]	; 0x48
      if (p == NULL)
 8008752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008754:	2b00      	cmp	r3, #0
 8008756:	d101      	bne.n	800875c <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x90>
         return ISBD_PROTOCOL_ERROR;
 8008758:	2303      	movs	r3, #3
 800875a:	e011      	b.n	8008780 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb4>
      *values[i] = atol(p);
 800875c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800875e:	f011 ff34 	bl	801a5ca <atol>
 8008762:	4602      	mov	r2, r0
 8008764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800876c:	440b      	add	r3, r1
 800876e:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8008772:	b292      	uxth	r2, r2
 8008774:	801a      	strh	r2, [r3, #0]
   for (int i=0; i<6; ++i)
 8008776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008778:	3301      	adds	r3, #1
 800877a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800877c:	e7da      	b.n	8008734 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x68>
   }
   return ISBD_SUCCESS;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3750      	adds	r7, #80	; 0x50
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	08021e84 	.word	0x08021e84
 800878c:	08021928 	.word	0x08021928
 8008790:	08021e90 	.word	0x08021e90
 8008794:	08021e9c 	.word	0x08021e9c

08008798 <_ZN10IridiumSBD7doSBDRBEPhPj>:

int IridiumSBD::doSBDRB(uint8_t *rxBuffer, size_t *prxBufferSize)
{
 8008798:	b590      	push	{r4, r7, lr}
 800879a:	b08b      	sub	sp, #44	; 0x2c
 800879c:	af02      	add	r7, sp, #8
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
   bool rxOverflow = false;
 80087a4:	2300      	movs	r3, #0
 80087a6:	77fb      	strb	r3, [r7, #31]

   send(F("AT+SBDRB\r"));
 80087a8:	2301      	movs	r3, #1
 80087aa:	2201      	movs	r2, #1
 80087ac:	49a2      	ldr	r1, [pc, #648]	; (8008a38 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a0>)
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f000 fb00 	bl	8008db4 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(NULL, 0, NULL, "AT+SBDRB\r")) // waits for its own echo
 80087b4:	4ba0      	ldr	r3, [pc, #640]	; (8008a38 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a0>)
 80087b6:	9300      	str	r3, [sp, #0]
 80087b8:	2300      	movs	r3, #0
 80087ba:	2200      	movs	r2, #0
 80087bc:	2100      	movs	r1, #0
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f7ff fe96 	bl	80084f0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80087c4:	4603      	mov	r3, r0
 80087c6:	f083 0301 	eor.w	r3, r3, #1
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d009      	beq.n	80087e4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x4c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f7ff ff4b 	bl	800866c <_ZN10IridiumSBD9cancelledEv>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d001      	beq.n	80087e0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x48>
 80087dc:	2304      	movs	r3, #4
 80087de:	e223      	b.n	8008c28 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
 80087e0:	2303      	movs	r3, #3
 80087e2:	e221      	b.n	8008c28 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   if(!this->useSerial) check9603data(); // Check for any 9603 serial data
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	7c5b      	ldrb	r3, [r3, #17]
 80087e8:	f083 0301 	eor.w	r3, r3, #1
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d002      	beq.n	80087f8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x60>
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f000 fe7c 	bl	80094f0 <_ZN10IridiumSBD13check9603dataEv>

   // Time to read the binary data: size[2], body[size], checksum[2]
   unsigned long start = millis();
 80087f8:	f003 fe9e 	bl	800c538 <HAL_GetTick>
 80087fc:	6138      	str	r0, [r7, #16]
   while (millis() - start < 1000UL * atTimeout)
 80087fe:	f003 fe9b 	bl	800c538 <HAL_GetTick>
 8008802:	4602      	mov	r2, r0
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	1ad2      	subs	r2, r2, r3
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800880c:	4619      	mov	r1, r3
 800880e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008812:	fb03 f301 	mul.w	r3, r3, r1
 8008816:	429a      	cmp	r2, r3
 8008818:	bf34      	ite	cc
 800881a:	2301      	movcc	r3, #1
 800881c:	2300      	movcs	r3, #0
 800881e:	b2db      	uxtb	r3, r3
 8008820:	2b00      	cmp	r3, #0
 8008822:	d03c      	beq.n	800889e <_ZN10IridiumSBD7doSBDRBEPhPj+0x106>
   {
      if(!this->useSerial) check9603data(); // Keep checking for new 9603 serial data
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	7c5b      	ldrb	r3, [r3, #17]
 8008828:	f083 0301 	eor.w	r3, r3, #1
 800882c:	b2db      	uxtb	r3, r3
 800882e:	2b00      	cmp	r3, #0
 8008830:	d002      	beq.n	8008838 <_ZN10IridiumSBD7doSBDRBEPhPj+0xa0>
 8008832:	68f8      	ldr	r0, [r7, #12]
 8008834:	f000 fe5c 	bl	80094f0 <_ZN10IridiumSBD13check9603dataEv>
      if (cancelled())
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f7ff ff17 	bl	800866c <_ZN10IridiumSBD9cancelledEv>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d001      	beq.n	8008848 <_ZN10IridiumSBD7doSBDRBEPhPj+0xb0>
         return ISBD_CANCELLED;
 8008844:	2304      	movs	r3, #4
 8008846:	e1ef      	b.n	8008c28 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
      if (this->useSerial && (stream->available() >= 2))
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	7c5b      	ldrb	r3, [r3, #17]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00d      	beq.n	800886c <_ZN10IridiumSBD7doSBDRBEPhPj+0xd4>
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	689a      	ldr	r2, [r3, #8]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	3308      	adds	r3, #8
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4610      	mov	r0, r2
 8008860:	4798      	blx	r3
 8008862:	4603      	mov	r3, r0
 8008864:	2b01      	cmp	r3, #1
 8008866:	dd01      	ble.n	800886c <_ZN10IridiumSBD7doSBDRBEPhPj+0xd4>
 8008868:	2301      	movs	r3, #1
 800886a:	e000      	b.n	800886e <_ZN10IridiumSBD7doSBDRBEPhPj+0xd6>
 800886c:	2300      	movs	r3, #0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d112      	bne.n	8008898 <_ZN10IridiumSBD7doSBDRBEPhPj+0x100>
         break;
      if ((!this->useSerial) && (i2cSerAvailable() >= 2))
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	7c5b      	ldrb	r3, [r3, #17]
 8008876:	f083 0301 	eor.w	r3, r3, #1
 800887a:	b2db      	uxtb	r3, r3
 800887c:	2b00      	cmp	r3, #0
 800887e:	d007      	beq.n	8008890 <_ZN10IridiumSBD7doSBDRBEPhPj+0xf8>
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 ff65 	bl	8009750 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8008886:	4603      	mov	r3, r0
 8008888:	2b01      	cmp	r3, #1
 800888a:	dd01      	ble.n	8008890 <_ZN10IridiumSBD7doSBDRBEPhPj+0xf8>
 800888c:	2301      	movs	r3, #1
 800888e:	e000      	b.n	8008892 <_ZN10IridiumSBD7doSBDRBEPhPj+0xfa>
 8008890:	2300      	movs	r3, #0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d102      	bne.n	800889c <_ZN10IridiumSBD7doSBDRBEPhPj+0x104>
   while (millis() - start < 1000UL * atTimeout)
 8008896:	e7b2      	b.n	80087fe <_ZN10IridiumSBD7doSBDRBEPhPj+0x66>
         break;
 8008898:	bf00      	nop
 800889a:	e000      	b.n	800889e <_ZN10IridiumSBD7doSBDRBEPhPj+0x106>
         break;
 800889c:	bf00      	nop
   }

   if (this->useSerial && (stream->available() < 2))
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	7c5b      	ldrb	r3, [r3, #17]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00d      	beq.n	80088c2 <_ZN10IridiumSBD7doSBDRBEPhPj+0x12a>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	689a      	ldr	r2, [r3, #8]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	3308      	adds	r3, #8
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4610      	mov	r0, r2
 80088b6:	4798      	blx	r3
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	dc01      	bgt.n	80088c2 <_ZN10IridiumSBD7doSBDRBEPhPj+0x12a>
 80088be:	2301      	movs	r3, #1
 80088c0:	e000      	b.n	80088c4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x12c>
 80088c2:	2300      	movs	r3, #0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d001      	beq.n	80088cc <_ZN10IridiumSBD7doSBDRBEPhPj+0x134>
      return ISBD_SENDRECEIVE_TIMEOUT;
 80088c8:	2307      	movs	r3, #7
 80088ca:	e1ad      	b.n	8008c28 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
   if ((!this->useSerial) && (i2cSerAvailable() < 2))
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	7c5b      	ldrb	r3, [r3, #17]
 80088d0:	f083 0301 	eor.w	r3, r3, #1
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d007      	beq.n	80088ea <_ZN10IridiumSBD7doSBDRBEPhPj+0x152>
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f000 ff38 	bl	8009750 <_ZN10IridiumSBD15i2cSerAvailableEv>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	dc01      	bgt.n	80088ea <_ZN10IridiumSBD7doSBDRBEPhPj+0x152>
 80088e6:	2301      	movs	r3, #1
 80088e8:	e000      	b.n	80088ec <_ZN10IridiumSBD7doSBDRBEPhPj+0x154>
 80088ea:	2300      	movs	r3, #0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d001      	beq.n	80088f4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x15c>
      return ISBD_SENDRECEIVE_TIMEOUT;
 80088f0:	2307      	movs	r3, #7
 80088f2:	e199      	b.n	8008c28 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   uint16_t size;
   if (this->useSerial)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	7c5b      	ldrb	r3, [r3, #17]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d01a      	beq.n	8008932 <_ZN10IridiumSBD7doSBDRBEPhPj+0x19a>
   {
      size = 256 * stream->read() + stream->read();
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	689a      	ldr	r2, [r3, #8]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	330c      	adds	r3, #12
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4610      	mov	r0, r2
 800890c:	4798      	blx	r3
 800890e:	4603      	mov	r3, r0
 8008910:	b29b      	uxth	r3, r3
 8008912:	021b      	lsls	r3, r3, #8
 8008914:	b29c      	uxth	r4, r3
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	689a      	ldr	r2, [r3, #8]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	330c      	adds	r3, #12
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4610      	mov	r0, r2
 8008926:	4798      	blx	r3
 8008928:	4603      	mov	r3, r0
 800892a:	b29b      	uxth	r3, r3
 800892c:	4423      	add	r3, r4
 800892e:	83bb      	strh	r3, [r7, #28]
 8008930:	e00d      	b.n	800894e <_ZN10IridiumSBD7doSBDRBEPhPj+0x1b6>
   }
   else
   {
      size = 256 * i2cSerRead() + i2cSerRead();
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f000 ff24 	bl	8009780 <_ZN10IridiumSBD10i2cSerReadEv>
 8008938:	4603      	mov	r3, r0
 800893a:	b29b      	uxth	r3, r3
 800893c:	021b      	lsls	r3, r3, #8
 800893e:	b29c      	uxth	r4, r3
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f000 ff1d 	bl	8009780 <_ZN10IridiumSBD10i2cSerReadEv>
 8008946:	4603      	mov	r3, r0
 8008948:	b29b      	uxth	r3, r3
 800894a:	4423      	add	r3, r4
 800894c:	83bb      	strh	r3, [r7, #28]
   }
   consoleprint(F("[Binary size:"));
 800894e:	493b      	ldr	r1, [pc, #236]	; (8008a3c <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a4>)
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f000 fc05 	bl	8009160 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(size);
 8008956:	8bbb      	ldrh	r3, [r7, #28]
 8008958:	4619      	mov	r1, r3
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f000 fc38 	bl	80091d0 <_ZN10IridiumSBD12consoleprintEt>
   consoleprint(F("]"));
 8008960:	4937      	ldr	r1, [pc, #220]	; (8008a40 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a8>)
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	f000 fbfc 	bl	8009160 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

   for (uint16_t bytesRead = 0; bytesRead < size;)
 8008968:	2300      	movs	r3, #0
 800896a:	837b      	strh	r3, [r7, #26]
 800896c:	8b7a      	ldrh	r2, [r7, #26]
 800896e:	8bbb      	ldrh	r3, [r7, #28]
 8008970:	429a      	cmp	r2, r3
 8008972:	d27f      	bcs.n	8008a74 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2dc>
   {
      if (cancelled())
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f7ff fe79 	bl	800866c <_ZN10IridiumSBD9cancelledEv>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d001      	beq.n	8008984 <_ZN10IridiumSBD7doSBDRBEPhPj+0x1ec>
         return ISBD_CANCELLED;
 8008980:	2304      	movs	r3, #4
 8008982:	e151      	b.n	8008c28 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

      if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	7c5b      	ldrb	r3, [r3, #17]
 8008988:	f083 0301 	eor.w	r3, r3, #1
 800898c:	b2db      	uxtb	r3, r3
 800898e:	2b00      	cmp	r3, #0
 8008990:	d002      	beq.n	8008998 <_ZN10IridiumSBD7doSBDRBEPhPj+0x200>
 8008992:	68f8      	ldr	r0, [r7, #12]
 8008994:	f000 fdac 	bl	80094f0 <_ZN10IridiumSBD13check9603dataEv>

      if ((this->useSerial && (stream->available())) || ((!this->useSerial) && i2cSerAvailable()))
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	7c5b      	ldrb	r3, [r3, #17]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00b      	beq.n	80089b8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x220>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	689a      	ldr	r2, [r3, #8]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	3308      	adds	r3, #8
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4610      	mov	r0, r2
 80089b0:	4798      	blx	r3
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10c      	bne.n	80089d2 <_ZN10IridiumSBD7doSBDRBEPhPj+0x23a>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	7c5b      	ldrb	r3, [r3, #17]
 80089bc:	f083 0301 	eor.w	r3, r3, #1
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d007      	beq.n	80089d6 <_ZN10IridiumSBD7doSBDRBEPhPj+0x23e>
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f000 fec2 	bl	8009750 <_ZN10IridiumSBD15i2cSerAvailableEv>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d001      	beq.n	80089d6 <_ZN10IridiumSBD7doSBDRBEPhPj+0x23e>
 80089d2:	2301      	movs	r3, #1
 80089d4:	e000      	b.n	80089d8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x240>
 80089d6:	2300      	movs	r3, #0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d035      	beq.n	8008a48 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
      {
         uint8_t c;
         if (this->useSerial)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	7c5b      	ldrb	r3, [r3, #17]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00b      	beq.n	80089fc <_ZN10IridiumSBD7doSBDRBEPhPj+0x264>
         {
            c = stream->read();
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	689a      	ldr	r2, [r3, #8]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	330c      	adds	r3, #12
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4610      	mov	r0, r2
 80089f4:	4798      	blx	r3
 80089f6:	4603      	mov	r3, r0
 80089f8:	767b      	strb	r3, [r7, #25]
 80089fa:	e004      	b.n	8008a06 <_ZN10IridiumSBD7doSBDRBEPhPj+0x26e>
         }
         else
         {
            c = i2cSerRead();
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f000 febf 	bl	8009780 <_ZN10IridiumSBD10i2cSerReadEv>
 8008a02:	4603      	mov	r3, r0
 8008a04:	767b      	strb	r3, [r7, #25]
         }
         bytesRead++;
 8008a06:	8b7b      	ldrh	r3, [r7, #26]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	837b      	strh	r3, [r7, #26]
         if (rxBuffer && prxBufferSize)
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d01a      	beq.n	8008a48 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d017      	beq.n	8008a48 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
         {
            if (*prxBufferSize > 0)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d011      	beq.n	8008a44 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2ac>
            {
               *rxBuffer++ = c;
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	1c5a      	adds	r2, r3, #1
 8008a24:	60ba      	str	r2, [r7, #8]
 8008a26:	7e7a      	ldrb	r2, [r7, #25]
 8008a28:	701a      	strb	r2, [r3, #0]
               (*prxBufferSize)--;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	1e5a      	subs	r2, r3, #1
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	e008      	b.n	8008a48 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
 8008a36:	bf00      	nop
 8008a38:	08021ea0 	.word	0x08021ea0
 8008a3c:	08021eac 	.word	0x08021eac
 8008a40:	08021ebc 	.word	0x08021ebc
            }
            else
            {
               rxOverflow = true;
 8008a44:	2301      	movs	r3, #1
 8008a46:	77fb      	strb	r3, [r7, #31]
            }
         }
      }

      if (millis() - start >= 1000UL * atTimeout)
 8008a48:	f003 fd76 	bl	800c538 <HAL_GetTick>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	1ad2      	subs	r2, r2, r3
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a56:	4619      	mov	r1, r3
 8008a58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a5c:	fb03 f301 	mul.w	r3, r3, r1
 8008a60:	429a      	cmp	r2, r3
 8008a62:	bf2c      	ite	cs
 8008a64:	2301      	movcs	r3, #1
 8008a66:	2300      	movcc	r3, #0
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f43f af7e 	beq.w	800896c <_ZN10IridiumSBD7doSBDRBEPhPj+0x1d4>
         return ISBD_SENDRECEIVE_TIMEOUT;
 8008a70:	2307      	movs	r3, #7
 8008a72:	e0d9      	b.n	8008c28 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
   }

   while (millis() - start < 1000UL * atTimeout)
 8008a74:	f003 fd60 	bl	800c538 <HAL_GetTick>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	1ad2      	subs	r2, r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a82:	4619      	mov	r1, r3
 8008a84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a88:	fb03 f301 	mul.w	r3, r3, r1
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	bf34      	ite	cc
 8008a90:	2301      	movcc	r3, #1
 8008a92:	2300      	movcs	r3, #0
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d03c      	beq.n	8008b14 <_ZN10IridiumSBD7doSBDRBEPhPj+0x37c>
   {
      if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	7c5b      	ldrb	r3, [r3, #17]
 8008a9e:	f083 0301 	eor.w	r3, r3, #1
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d002      	beq.n	8008aae <_ZN10IridiumSBD7doSBDRBEPhPj+0x316>
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f000 fd21 	bl	80094f0 <_ZN10IridiumSBD13check9603dataEv>
      if (cancelled())
 8008aae:	68f8      	ldr	r0, [r7, #12]
 8008ab0:	f7ff fddc 	bl	800866c <_ZN10IridiumSBD9cancelledEv>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d001      	beq.n	8008abe <_ZN10IridiumSBD7doSBDRBEPhPj+0x326>
         return ISBD_CANCELLED;
 8008aba:	2304      	movs	r3, #4
 8008abc:	e0b4      	b.n	8008c28 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
      if (this->useSerial && (stream->available() >= 2))
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	7c5b      	ldrb	r3, [r3, #17]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00d      	beq.n	8008ae2 <_ZN10IridiumSBD7doSBDRBEPhPj+0x34a>
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	689a      	ldr	r2, [r3, #8]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	3308      	adds	r3, #8
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4610      	mov	r0, r2
 8008ad6:	4798      	blx	r3
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	dd01      	ble.n	8008ae2 <_ZN10IridiumSBD7doSBDRBEPhPj+0x34a>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e000      	b.n	8008ae4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x34c>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d112      	bne.n	8008b0e <_ZN10IridiumSBD7doSBDRBEPhPj+0x376>
         break;
      if ((!this->useSerial) && (i2cSerAvailable() >= 2))
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	7c5b      	ldrb	r3, [r3, #17]
 8008aec:	f083 0301 	eor.w	r3, r3, #1
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d007      	beq.n	8008b06 <_ZN10IridiumSBD7doSBDRBEPhPj+0x36e>
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f000 fe2a 	bl	8009750 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	dd01      	ble.n	8008b06 <_ZN10IridiumSBD7doSBDRBEPhPj+0x36e>
 8008b02:	2301      	movs	r3, #1
 8008b04:	e000      	b.n	8008b08 <_ZN10IridiumSBD7doSBDRBEPhPj+0x370>
 8008b06:	2300      	movs	r3, #0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d102      	bne.n	8008b12 <_ZN10IridiumSBD7doSBDRBEPhPj+0x37a>
   while (millis() - start < 1000UL * atTimeout)
 8008b0c:	e7b2      	b.n	8008a74 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2dc>
         break;
 8008b0e:	bf00      	nop
 8008b10:	e000      	b.n	8008b14 <_ZN10IridiumSBD7doSBDRBEPhPj+0x37c>
         break;
 8008b12:	bf00      	nop
   }

   if (this->useSerial && (stream->available() < 2))
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	7c5b      	ldrb	r3, [r3, #17]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00d      	beq.n	8008b38 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3a0>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	689a      	ldr	r2, [r3, #8]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	3308      	adds	r3, #8
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4610      	mov	r0, r2
 8008b2c:	4798      	blx	r3
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	dc01      	bgt.n	8008b38 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3a0>
 8008b34:	2301      	movs	r3, #1
 8008b36:	e000      	b.n	8008b3a <_ZN10IridiumSBD7doSBDRBEPhPj+0x3a2>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d001      	beq.n	8008b42 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3aa>
      return ISBD_SENDRECEIVE_TIMEOUT;
 8008b3e:	2307      	movs	r3, #7
 8008b40:	e072      	b.n	8008c28 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
   if ((!this->useSerial) && (i2cSerAvailable() < 2))
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	7c5b      	ldrb	r3, [r3, #17]
 8008b46:	f083 0301 	eor.w	r3, r3, #1
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d007      	beq.n	8008b60 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3c8>
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f000 fdfd 	bl	8009750 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	dc01      	bgt.n	8008b60 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3c8>
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e000      	b.n	8008b62 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3ca>
 8008b60:	2300      	movs	r3, #0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d001      	beq.n	8008b6a <_ZN10IridiumSBD7doSBDRBEPhPj+0x3d2>
      return ISBD_SENDRECEIVE_TIMEOUT;
 8008b66:	2307      	movs	r3, #7
 8008b68:	e05e      	b.n	8008c28 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   uint16_t checksum;
   if (this->useSerial)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	7c5b      	ldrb	r3, [r3, #17]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d01a      	beq.n	8008ba8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x410>
   {
      checksum = 256 * stream->read() + stream->read();
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	689a      	ldr	r2, [r3, #8]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	330c      	adds	r3, #12
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4610      	mov	r0, r2
 8008b82:	4798      	blx	r3
 8008b84:	4603      	mov	r3, r0
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	021b      	lsls	r3, r3, #8
 8008b8a:	b29c      	uxth	r4, r3
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	689a      	ldr	r2, [r3, #8]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	330c      	adds	r3, #12
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4610      	mov	r0, r2
 8008b9c:	4798      	blx	r3
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	4423      	add	r3, r4
 8008ba4:	82fb      	strh	r3, [r7, #22]
 8008ba6:	e00d      	b.n	8008bc4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x42c>
   }
   else
   {
      checksum = 256 * i2cSerRead() + i2cSerRead();
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f000 fde9 	bl	8009780 <_ZN10IridiumSBD10i2cSerReadEv>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	021b      	lsls	r3, r3, #8
 8008bb4:	b29c      	uxth	r4, r3
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f000 fde2 	bl	8009780 <_ZN10IridiumSBD10i2cSerReadEv>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	4423      	add	r3, r4
 8008bc2:	82fb      	strh	r3, [r7, #22]
   }
   consoleprint(F("[csum:"));
 8008bc4:	491a      	ldr	r1, [pc, #104]	; (8008c30 <_ZN10IridiumSBD7doSBDRBEPhPj+0x498>)
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f000 faca 	bl	8009160 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(checksum);
 8008bcc:	8afb      	ldrh	r3, [r7, #22]
 8008bce:	4619      	mov	r1, r3
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f000 fafd 	bl	80091d0 <_ZN10IridiumSBD12consoleprintEt>
   consoleprint(F("]"));
 8008bd6:	4917      	ldr	r1, [pc, #92]	; (8008c34 <_ZN10IridiumSBD7doSBDRBEPhPj+0x49c>)
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f000 fac1 	bl	8009160 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

   // Return actual size of returned buffer
   if (prxBufferSize)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d002      	beq.n	8008bea <_ZN10IridiumSBD7doSBDRBEPhPj+0x452>
      *prxBufferSize = (size_t)size;
 8008be4:	8bba      	ldrh	r2, [r7, #28]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	601a      	str	r2, [r3, #0]

   // Wait for final OK
   if (!waitForATResponse())
 8008bea:	4b13      	ldr	r3, [pc, #76]	; (8008c38 <_ZN10IridiumSBD7doSBDRBEPhPj+0x4a0>)
 8008bec:	9300      	str	r3, [sp, #0]
 8008bee:	2300      	movs	r3, #0
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f7ff fc7b 	bl	80084f0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	f083 0301 	eor.w	r3, r3, #1
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d009      	beq.n	8008c1a <_ZN10IridiumSBD7doSBDRBEPhPj+0x482>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f7ff fd30 	bl	800866c <_ZN10IridiumSBD9cancelledEv>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d001      	beq.n	8008c16 <_ZN10IridiumSBD7doSBDRBEPhPj+0x47e>
 8008c12:	2304      	movs	r3, #4
 8008c14:	e008      	b.n	8008c28 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
 8008c16:	2303      	movs	r3, #3
 8008c18:	e006      	b.n	8008c28 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
 8008c1a:	7ffb      	ldrb	r3, [r7, #31]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d001      	beq.n	8008c24 <_ZN10IridiumSBD7doSBDRBEPhPj+0x48c>
 8008c20:	2308      	movs	r3, #8
 8008c22:	e000      	b.n	8008c26 <_ZN10IridiumSBD7doSBDRBEPhPj+0x48e>
 8008c24:	2300      	movs	r3, #0
 8008c26:	bf00      	nop
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3724      	adds	r7, #36	; 0x24
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd90      	pop	{r4, r7, pc}
 8008c30:	08021ec0 	.word	0x08021ec0
 8008c34:	08021ebc 	.word	0x08021ebc
 8008c38:	08021928 	.word	0x08021928

08008c3c <_ZN10IridiumSBD5powerEb>:

void IridiumSBD::power(bool on)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	460b      	mov	r3, r1
 8008c46:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 8008c48:	78fb      	ldrb	r3, [r7, #3]
 8008c4a:	f083 0301 	eor.w	r3, r3, #1
 8008c4e:	b2da      	uxtb	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

   if (this->useSerial)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	7c5b      	ldrb	r3, [r3, #17]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d010      	beq.n	8008c80 <_ZN10IridiumSBD5powerEb+0x44>
   {
      if (this->sleepPin == -1)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c66:	d04a      	beq.n	8008cfe <_ZN10IridiumSBD5powerEb+0xc2>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d106      	bne.n	8008c80 <_ZN10IridiumSBD5powerEb+0x44>
          {
             configureSleepPin();
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 f84c 	bl	8008d10 <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          }
      }
   }

   if (on)
 8008c80:	78fb      	ldrb	r3, [r7, #3]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d017      	beq.n	8008cb6 <_ZN10IridiumSBD5powerEb+0x7a>
   {
      diagprint(F("Powering on modem...\r\n"));
 8008c86:	4920      	ldr	r1, [pc, #128]	; (8008d08 <_ZN10IridiumSBD5powerEb+0xcc>)
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fa11 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	7c5b      	ldrb	r3, [r3, #17]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d004      	beq.n	8008ca0 <_ZN10IridiumSBD5powerEb+0x64>
      {
         setSleepPin(HIGH); // HIGH = awake
 8008c96:	2101      	movs	r1, #1
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 f847 	bl	8008d2c <_ZN10IridiumSBD11setSleepPinEh>
 8008c9e:	e003      	b.n	8008ca8 <_ZN10IridiumSBD5powerEb+0x6c>
      }
      else
      {
         enable9603(true);
 8008ca0:	2101      	movs	r1, #1
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f7fe fe24 	bl	80078f0 <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 8008ca8:	f003 fc46 	bl	800c538 <HAL_GetTick>
 8008cac:	4602      	mov	r2, r0
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8008cb4:	e024      	b.n	8008d00 <_ZN10IridiumSBD5powerEb+0xc4>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 8008cb6:	f003 fc3f 	bl	800c538 <HAL_GetTick>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cc2:	1ad3      	subs	r3, r2, r3
 8008cc4:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008ccc:	d205      	bcs.n	8008cda <_ZN10IridiumSBD5powerEb+0x9e>
         //delay(2000UL - elapsed); TODO
    	  HAL_Delay(2000UL - elapsed);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f003 fc3b 	bl	800c550 <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 8008cda:	490c      	ldr	r1, [pc, #48]	; (8008d0c <_ZN10IridiumSBD5powerEb+0xd0>)
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f9e7 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	7c5b      	ldrb	r3, [r3, #17]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d004      	beq.n	8008cf4 <_ZN10IridiumSBD5powerEb+0xb8>
      {
         setSleepPin(LOW); // LOW = asleep
 8008cea:	2100      	movs	r1, #0
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f81d 	bl	8008d2c <_ZN10IridiumSBD11setSleepPinEh>
 8008cf2:	e005      	b.n	8008d00 <_ZN10IridiumSBD5powerEb+0xc4>
      }
      else
      {
         enable9603(false);
 8008cf4:	2100      	movs	r1, #0
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f7fe fdfa 	bl	80078f0 <_ZN10IridiumSBD10enable9603Eb>
 8008cfc:	e000      	b.n	8008d00 <_ZN10IridiumSBD5powerEb+0xc4>
         return;
 8008cfe:	bf00      	nop
      }
   }
}
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	08021ec8 	.word	0x08021ec8
 8008d0c:	08021ee0 	.word	0x08021ee0

08008d10 <_ZN10IridiumSBD17configureSleepPinEv>:

void IridiumSBD::configureSleepPin()
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
	//pinMode(sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
   //pinMode(sleepPin, OUTPUT_PP); // Make the sleep pin an output
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 8008d18:	4903      	ldr	r1, [pc, #12]	; (8008d28 <_ZN10IridiumSBD17configureSleepPinEv+0x18>)
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 f9c8 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8008d20:	bf00      	nop
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	08021ef8 	.word	0x08021ef8

08008d2c <_ZN10IridiumSBD11setSleepPinEh>:

void IridiumSBD::setSleepPin(uint8_t enable)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	460b      	mov	r3, r1
 8008d36:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 8008d38:	2201      	movs	r2, #1
 8008d3a:	2108      	movs	r1, #8
 8008d3c:	480b      	ldr	r0, [pc, #44]	; (8008d6c <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 8008d3e:	f004 fb13 	bl	800d368 <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 8008d42:	490b      	ldr	r1, [pc, #44]	; (8008d70 <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 f9b3 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 8008d4a:	78fb      	ldrb	r3, [r7, #3]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d104      	bne.n	8008d5a <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 8008d50:	4908      	ldr	r1, [pc, #32]	; (8008d74 <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f9ac 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 8008d58:	e003      	b.n	8008d62 <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 8008d5a:	4907      	ldr	r1, [pc, #28]	; (8008d78 <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f9a7 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8008d62:	bf00      	nop
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	40020800 	.word	0x40020800
 8008d70:	08021f24 	.word	0x08021f24
 8008d74:	08021f40 	.word	0x08021f40
 8008d78:	08021f48 	.word	0x08021f48

08008d7c <_ZN10IridiumSBD15beginSerialPortEv>:

void IridiumSBD::beginSerialPort()
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
 8008d84:	4903      	ldr	r1, [pc, #12]	; (8008d94 <_ZN10IridiumSBD15beginSerialPortEv+0x18>)
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f992 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8008d8c:	bf00      	nop
 8008d8e:	3708      	adds	r7, #8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	08021f50 	.word	0x08021f50

08008d98 <_ZN10IridiumSBD13endSerialPortEv>:

void IridiumSBD::endSerialPort()
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 8008da0:	4903      	ldr	r1, [pc, #12]	; (8008db0 <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f984 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8008da8:	bf00      	nop
 8008daa:	3708      	adds	r7, #8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	08021f70 	.word	0x08021f70

08008db4 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>:

void IridiumSBD::send(FlashString str, bool beginLine, bool endLine)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	71fb      	strb	r3, [r7, #7]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	71bb      	strb	r3, [r7, #6]
   if (beginLine)
 8008dca:	79fb      	ldrb	r3, [r7, #7]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d003      	beq.n	8008dd8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x24>
      consoleprint(F(">> "));
 8008dd0:	4923      	ldr	r1, [pc, #140]	; (8008e60 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xac>)
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f000 f9c4 	bl	8009160 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 8008dd8:	68b9      	ldr	r1, [r7, #8]
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f000 f9c0 	bl	8009160 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (endLine)
 8008de0:	79bb      	ldrb	r3, [r7, #6]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d003      	beq.n	8008dee <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x3a>
      consoleprint(F("\r\n"));
 8008de6:	491f      	ldr	r1, [pc, #124]	; (8008e64 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xb0>)
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f000 f9b9 	bl	8009160 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	7c5b      	ldrb	r3, [r3, #17]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d006      	beq.n	8008e04 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x50>
   {
      stream->print(str);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	68b9      	ldr	r1, [r7, #8]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f001 fa7f 	bl	800a300 <_ZN5Print5printEPK19__FlashStringHelper>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8008e02:	e029      	b.n	8008e58 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa4>
      lastCheck = millis(); // Update lastCheck so we enforce a full I2C_POLLING_WAIT //TODO Uncommented this line
 8008e04:	f003 fb98 	bl	800c538 <HAL_GetTick>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	66da      	str	r2, [r3, #108]	; 0x6c
      wireport->beginTransmission((uint8_t)deviceaddress);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	68da      	ldr	r2, [r3, #12]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	7c1b      	ldrb	r3, [r3, #16]
 8008e16:	4619      	mov	r1, r3
 8008e18:	4610      	mov	r0, r2
 8008e1a:	f001 fbe5 	bl	800a5e8 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	21ff      	movs	r1, #255	; 0xff
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7fe faf3 	bl	8007410 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	68b9      	ldr	r1, [r7, #8]
 8008e30:	4618      	mov	r0, r3
 8008e32:	f001 fa65 	bl	800a300 <_ZN5Print5printEPK19__FlashStringHelper>
      if (wireport->endTransmission() != 0) //Release bus
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f001 fc1e 	bl	800a67c <_ZN7TwoWire15endTransmissionEv>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	bf14      	ite	ne
 8008e46:	2301      	movne	r3, #1
 8008e48:	2300      	moveq	r3, #0
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d003      	beq.n	8008e58 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa4>
         diagprint(F("I2C write was not successful!\r\n"));
 8008e50:	4905      	ldr	r1, [pc, #20]	; (8008e68 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xb4>)
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	f000 f92c 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8008e58:	bf00      	nop
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	08021f8c 	.word	0x08021f8c
 8008e64:	08021cd4 	.word	0x08021cd4
 8008e68:	08021d54 	.word	0x08021d54

08008e6c <_ZN10IridiumSBD4sendEPKc>:

void IridiumSBD::send(const char *str)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 8008e76:	4920      	ldr	r1, [pc, #128]	; (8008ef8 <_ZN10IridiumSBD4sendEPKc+0x8c>)
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 f971 	bl	8009160 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 8008e7e:	6839      	ldr	r1, [r7, #0]
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 f98b 	bl	800919c <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 8008e86:	491d      	ldr	r1, [pc, #116]	; (8008efc <_ZN10IridiumSBD4sendEPKc+0x90>)
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 f969 	bl	8009160 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	7c5b      	ldrb	r3, [r3, #17]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d006      	beq.n	8008ea4 <_ZN10IridiumSBD4sendEPKc+0x38>
   {
      stream->print(str);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	6839      	ldr	r1, [r7, #0]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f001 fa3d 	bl	800a31c <_ZN5Print5printEPKc>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8008ea2:	e024      	b.n	8008eee <_ZN10IridiumSBD4sendEPKc+0x82>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	68da      	ldr	r2, [r3, #12]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	7c1b      	ldrb	r3, [r3, #16]
 8008eac:	4619      	mov	r1, r3
 8008eae:	4610      	mov	r0, r2
 8008eb0:	f001 fb9a 	bl	800a5e8 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	21ff      	movs	r1, #255	; 0xff
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fe faa8 	bl	8007410 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	6839      	ldr	r1, [r7, #0]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f001 fa28 	bl	800a31c <_ZN5Print5printEPKc>
      if (wireport->endTransmission() != 0) //Release bus
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f001 fbd3 	bl	800a67c <_ZN7TwoWire15endTransmissionEv>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	bf14      	ite	ne
 8008edc:	2301      	movne	r3, #1
 8008ede:	2300      	moveq	r3, #0
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d003      	beq.n	8008eee <_ZN10IridiumSBD4sendEPKc+0x82>
         diagprint(F("I2C write was not successful!\r\n"));
 8008ee6:	4906      	ldr	r1, [pc, #24]	; (8008f00 <_ZN10IridiumSBD4sendEPKc+0x94>)
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 f8e1 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8008eee:	bf00      	nop
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	08021f8c 	.word	0x08021f8c
 8008efc:	08021cd4 	.word	0x08021cd4
 8008f00:	08021d54 	.word	0x08021d54

08008f04 <_ZN10IridiumSBD8sendlongEPKc>:

void IridiumSBD::sendlong(const char *str)
// Send a long string that might need to be broken up for the I2C port
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b086      	sub	sp, #24
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 8008f0e:	4942      	ldr	r1, [pc, #264]	; (8009018 <_ZN10IridiumSBD8sendlongEPKc+0x114>)
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 f925 	bl	8009160 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   this->print((char*) str);//TODO doesn't print otherwise
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	6838      	ldr	r0, [r7, #0]
 8008f1c:	4798      	blx	r3
   consoleprint(str);
 8008f1e:	6839      	ldr	r1, [r7, #0]
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f93b 	bl	800919c <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 8008f26:	493d      	ldr	r1, [pc, #244]	; (800901c <_ZN10IridiumSBD8sendlongEPKc+0x118>)
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f919 	bl	8009160 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

   if (this->useSerial)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	7c5b      	ldrb	r3, [r3, #17]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d006      	beq.n	8008f44 <_ZN10IridiumSBD8sendlongEPKc+0x40>
   {
      stream->print(str); // If we are using serial then send it and don't worry about the long length
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	6839      	ldr	r1, [r7, #0]
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f001 f9ed 	bl	800a31c <_ZN5Print5printEPKc>
         wireport->write(str[i]);
      }
      if (wireport->endTransmission() != 0) //Send data and release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8008f42:	e065      	b.n	8009010 <_ZN10IridiumSBD8sendlongEPKc+0x10c>
      size_t bytes_to_send = strlen(str); // Send this many bytes in total
 8008f44:	6838      	ldr	r0, [r7, #0]
 8008f46:	f7f7 f95d 	bl	8000204 <strlen>
 8008f4a:	6178      	str	r0, [r7, #20]
      size_t txDataSize = bytes_to_send;
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	60fb      	str	r3, [r7, #12]
      size_t i=0;
 8008f50:	2300      	movs	r3, #0
 8008f52:	613b      	str	r3, [r7, #16]
      while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 1)) // If there are too many bytes to send all in one go
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	2b1f      	cmp	r3, #31
 8008f58:	d92a      	bls.n	8008fb0 <_ZN10IridiumSBD8sendlongEPKc+0xac>
         nexti = i + (TINY_I2C_BUFFER_LENGTH - 1);
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	331f      	adds	r3, #31
 8008f5e:	60bb      	str	r3, [r7, #8]
         wireport->beginTransmission((uint8_t)deviceaddress);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	68da      	ldr	r2, [r3, #12]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	7c1b      	ldrb	r3, [r3, #16]
 8008f68:	4619      	mov	r1, r3
 8008f6a:	4610      	mov	r0, r2
 8008f6c:	f001 fb3c 	bl	800a5e8 <_ZN7TwoWire17beginTransmissionEh>
         wireport->write(DATA_REG); // Point to the 'serial register'
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	21ff      	movs	r1, #255	; 0xff
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7fe fa4a 	bl	8007410 <_ZN7TwoWire5writeEi>
         for (; i<nexti; ++i)
 8008f7c:	693a      	ldr	r2, [r7, #16]
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d20c      	bcs.n	8008f9e <_ZN10IridiumSBD8sendlongEPKc+0x9a>
            wireport->write(str[i]); // Write each byte
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	68d8      	ldr	r0, [r3, #12]
 8008f88:	683a      	ldr	r2, [r7, #0]
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	4619      	mov	r1, r3
 8008f92:	f7fe fa3d 	bl	8007410 <_ZN7TwoWire5writeEi>
         for (; i<nexti; ++i)
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	613b      	str	r3, [r7, #16]
 8008f9c:	e7ee      	b.n	8008f7c <_ZN10IridiumSBD8sendlongEPKc+0x78>
         bytes_to_send = bytes_to_send - (TINY_I2C_BUFFER_LENGTH - 1); // Decrease the number of bytes still to send
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	3b1f      	subs	r3, #31
 8008fa2:	617b      	str	r3, [r7, #20]
         wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f001 fb67 	bl	800a67c <_ZN7TwoWire15endTransmissionEv>
      while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 1)) // If there are too many bytes to send all in one go
 8008fae:	e7d1      	b.n	8008f54 <_ZN10IridiumSBD8sendlongEPKc+0x50>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	68da      	ldr	r2, [r3, #12]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	7c1b      	ldrb	r3, [r3, #16]
 8008fb8:	4619      	mov	r1, r3
 8008fba:	4610      	mov	r0, r2
 8008fbc:	f001 fb14 	bl	800a5e8 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	21ff      	movs	r1, #255	; 0xff
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7fe fa22 	bl	8007410 <_ZN7TwoWire5writeEi>
      for (; i<txDataSize; ++i)
 8008fcc:	693a      	ldr	r2, [r7, #16]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d20c      	bcs.n	8008fee <_ZN10IridiumSBD8sendlongEPKc+0xea>
         wireport->write(str[i]);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	68d8      	ldr	r0, [r3, #12]
 8008fd8:	683a      	ldr	r2, [r7, #0]
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	4413      	add	r3, r2
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	f7fe fa15 	bl	8007410 <_ZN7TwoWire5writeEi>
      for (; i<txDataSize; ++i)
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	613b      	str	r3, [r7, #16]
 8008fec:	e7ee      	b.n	8008fcc <_ZN10IridiumSBD8sendlongEPKc+0xc8>
      if (wireport->endTransmission() != 0) //Send data and release bus
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f001 fb42 	bl	800a67c <_ZN7TwoWire15endTransmissionEv>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	bf14      	ite	ne
 8008ffe:	2301      	movne	r3, #1
 8009000:	2300      	moveq	r3, #0
 8009002:	b2db      	uxtb	r3, r3
 8009004:	2b00      	cmp	r3, #0
 8009006:	d003      	beq.n	8009010 <_ZN10IridiumSBD8sendlongEPKc+0x10c>
         diagprint(F("I2C write was not successful!\r\n"));
 8009008:	4905      	ldr	r1, [pc, #20]	; (8009020 <_ZN10IridiumSBD8sendlongEPKc+0x11c>)
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f850 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8009010:	bf00      	nop
 8009012:	3718      	adds	r7, #24
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	08021f8c 	.word	0x08021f8c
 800901c:	08021cd4 	.word	0x08021cd4
 8009020:	08021d54 	.word	0x08021d54

08009024 <_ZN10IridiumSBD4sendEt>:

void IridiumSBD::send(uint16_t n)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	460b      	mov	r3, r1
 800902e:	807b      	strh	r3, [r7, #2]
   consoleprint(n);
 8009030:	887b      	ldrh	r3, [r7, #2]
 8009032:	4619      	mov	r1, r3
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 f8cb 	bl	80091d0 <_ZN10IridiumSBD12consoleprintEt>
   if (this->useSerial)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	7c5b      	ldrb	r3, [r3, #17]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d008      	beq.n	8009054 <_ZN10IridiumSBD4sendEt+0x30>
   {
      stream->print(n);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	4618      	mov	r0, r3
 8009048:	887b      	ldrh	r3, [r7, #2]
 800904a:	220a      	movs	r2, #10
 800904c:	4619      	mov	r1, r3
 800904e:	f001 f985 	bl	800a35c <_ZN5Print5printEii>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(n);
      if (wireport->endTransmission() != 0) //Send data and release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8009052:	e026      	b.n	80090a2 <_ZN10IridiumSBD4sendEt+0x7e>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	68da      	ldr	r2, [r3, #12]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	7c1b      	ldrb	r3, [r3, #16]
 800905c:	4619      	mov	r1, r3
 800905e:	4610      	mov	r0, r2
 8009060:	f001 fac2 	bl	800a5e8 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	21ff      	movs	r1, #255	; 0xff
 800906a:	4618      	mov	r0, r3
 800906c:	f7fe f9d0 	bl	8007410 <_ZN7TwoWire5writeEi>
      wireport->print(n);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	4618      	mov	r0, r3
 8009076:	887b      	ldrh	r3, [r7, #2]
 8009078:	220a      	movs	r2, #10
 800907a:	4619      	mov	r1, r3
 800907c:	f001 f96e 	bl	800a35c <_ZN5Print5printEii>
      if (wireport->endTransmission() != 0) //Send data and release bus
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	4618      	mov	r0, r3
 8009086:	f001 faf9 	bl	800a67c <_ZN7TwoWire15endTransmissionEv>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	bf14      	ite	ne
 8009090:	2301      	movne	r3, #1
 8009092:	2300      	moveq	r3, #0
 8009094:	b2db      	uxtb	r3, r3
 8009096:	2b00      	cmp	r3, #0
 8009098:	d003      	beq.n	80090a2 <_ZN10IridiumSBD4sendEt+0x7e>
         diagprint(F("I2C write was not successful!\r\n"));
 800909a:	4904      	ldr	r1, [pc, #16]	; (80090ac <_ZN10IridiumSBD4sendEt+0x88>)
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 f807 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80090a2:	bf00      	nop
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	08021d54 	.word	0x08021d54

080090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:

void IridiumSBD::diagprint(FlashString str)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	1c5a      	adds	r2, r3, #1
 80090c2:	60fa      	str	r2, [r7, #12]
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 80090c8:	7afb      	ldrb	r3, [r7, #11]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d005      	beq.n	80090da <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 80090ce:	7afb      	ldrb	r3, [r7, #11]
 80090d0:	4619      	mov	r1, r3
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f7fe f9c2 	bl	800745c <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 80090d8:	e7f1      	b.n	80090be <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 80090da:	bf00      	nop

   //TODO
   this->print((char*) str);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	6838      	ldr	r0, [r7, #0]
 80090e2:	4798      	blx	r3
}
 80090e4:	bf00      	nop
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <_ZN10IridiumSBD9diagprintEPKc>:

void IridiumSBD::diagprint(const char *str)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
   while (*str)
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d008      	beq.n	8009110 <_ZN10IridiumSBD9diagprintEPKc+0x24>
      ISBDDiagsCallback(this, *str++);
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	1c5a      	adds	r2, r3, #1
 8009102:	603a      	str	r2, [r7, #0]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	4619      	mov	r1, r3
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f7fe f9a7 	bl	800745c <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   while (*str)
 800910e:	e7f2      	b.n	80090f6 <_ZN10IridiumSBD9diagprintEPKc+0xa>

   //TODO
   this->print((char*) str);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	6838      	ldr	r0, [r7, #0]
 8009116:	4798      	blx	r3
}
 8009118:	bf00      	nop
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <_ZN10IridiumSBD9diagprintEt>:

void IridiumSBD::diagprint(uint16_t n)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b086      	sub	sp, #24
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	460b      	mov	r3, r1
 800912a:	807b      	strh	r3, [r7, #2]
   char str[10];
   sprintf(str, "%u", n);
 800912c:	887a      	ldrh	r2, [r7, #2]
 800912e:	f107 030c 	add.w	r3, r7, #12
 8009132:	490a      	ldr	r1, [pc, #40]	; (800915c <_ZN10IridiumSBD9diagprintEt+0x3c>)
 8009134:	4618      	mov	r0, r3
 8009136:	f012 ffc3 	bl	801c0c0 <siprintf>
   diagprint(str);
 800913a:	f107 030c 	add.w	r3, r7, #12
 800913e:	4619      	mov	r1, r3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7ff ffd3 	bl	80090ec <_ZN10IridiumSBD9diagprintEPKc>

   //TODO
   this->print((char*) str);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f107 020c 	add.w	r2, r7, #12
 800914e:	4610      	mov	r0, r2
 8009150:	4798      	blx	r3
}
 8009152:	bf00      	nop
 8009154:	3718      	adds	r7, #24
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	08021f90 	.word	0x08021f90

08009160 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>:

void IridiumSBD::consoleprint(FlashString str)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	1c5a      	adds	r2, r3, #1
 8009172:	60fa      	str	r2, [r7, #12]
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8009178:	7afb      	ldrb	r3, [r7, #11]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d005      	beq.n	800918a <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0x2a>
      ISBDConsoleCallback(this, c);
 800917e:	7afb      	ldrb	r3, [r7, #11]
 8009180:	4619      	mov	r1, r3
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7fe f95e 	bl	8007444 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   }
 8009188:	e7f1      	b.n	800916e <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 800918a:	bf00      	nop

   //TODO
   this->print((char*) str);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	6838      	ldr	r0, [r7, #0]
 8009192:	4798      	blx	r3
}
 8009194:	bf00      	nop
 8009196:	3710      	adds	r7, #16
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <_ZN10IridiumSBD12consoleprintEPKc>:

void IridiumSBD::consoleprint(const char *str)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
   while (*str)
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d008      	beq.n	80091c0 <_ZN10IridiumSBD12consoleprintEPKc+0x24>
      ISBDConsoleCallback(this, *str++);
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	1c5a      	adds	r2, r3, #1
 80091b2:	603a      	str	r2, [r7, #0]
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	4619      	mov	r1, r3
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f7fe f943 	bl	8007444 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   while (*str)
 80091be:	e7f2      	b.n	80091a6 <_ZN10IridiumSBD12consoleprintEPKc+0xa>

   //TODO
   this->print((char*) str);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6838      	ldr	r0, [r7, #0]
 80091c6:	4798      	blx	r3
}
 80091c8:	bf00      	nop
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <_ZN10IridiumSBD12consoleprintEt>:

void IridiumSBD::consoleprint(uint16_t n)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	460b      	mov	r3, r1
 80091da:	807b      	strh	r3, [r7, #2]
   char str[10];
   sprintf(str, "%u", n);
 80091dc:	887a      	ldrh	r2, [r7, #2]
 80091de:	f107 030c 	add.w	r3, r7, #12
 80091e2:	490a      	ldr	r1, [pc, #40]	; (800920c <_ZN10IridiumSBD12consoleprintEt+0x3c>)
 80091e4:	4618      	mov	r0, r3
 80091e6:	f012 ff6b 	bl	801c0c0 <siprintf>
   consoleprint(str); //TODO
 80091ea:	f107 030c 	add.w	r3, r7, #12
 80091ee:	4619      	mov	r1, r3
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f7ff ffd3 	bl	800919c <_ZN10IridiumSBD12consoleprintEPKc>
   //consoleprint((const char*) str);
   this->print((char*) str);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f107 020c 	add.w	r2, r7, #12
 80091fe:	4610      	mov	r0, r2
 8009200:	4798      	blx	r3
}
 8009202:	bf00      	nop
 8009204:	3718      	adds	r7, #24
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	08021f90 	.word	0x08021f90

08009210 <_ZN10IridiumSBD12consoleprintEc>:

void IridiumSBD::consoleprint(char c)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	460b      	mov	r3, r1
 800921a:	70fb      	strb	r3, [r7, #3]
   ISBDConsoleCallback(this, c);
 800921c:	78fb      	ldrb	r3, [r7, #3]
 800921e:	4619      	mov	r1, r3
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f7fe f90f 	bl	8007444 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
}
 8009226:	bf00      	nop
 8009228:	3708      	adds	r7, #8
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
	...

08009230 <_ZN10IridiumSBD11SBDRINGSeenEv>:

void IridiumSBD::SBDRINGSeen()
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
   ringAsserted = true;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
   diagprint(F("SBDRING alert seen!\r\n"));
 8009240:	4903      	ldr	r1, [pc, #12]	; (8009250 <_ZN10IridiumSBD11SBDRINGSeenEv+0x20>)
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7ff ff34 	bl	80090b0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8009248:	bf00      	nop
 800924a:	3708      	adds	r7, #8
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	08021f94 	.word	0x08021f94

08009254 <_ZN10IridiumSBD13filterSBDRINGEv>:
// Read characters until we find one that doesn't match SBDRING
// If nextChar is -1 it means we are still entertaining a possible
// match with SBDRING\r\n.  Once we find a mismatch, stuff it into
// nextChar.
void IridiumSBD::filterSBDRING()
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
   if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	7c5b      	ldrb	r3, [r3, #17]
 8009260:	f083 0301 	eor.w	r3, r3, #1
 8009264:	b2db      	uxtb	r3, r3
 8009266:	2b00      	cmp	r3, #0
 8009268:	d002      	beq.n	8009270 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 f940 	bl	80094f0 <_ZN10IridiumSBD13check9603dataEv>
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	7c5b      	ldrb	r3, [r3, #17]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d00b      	beq.n	8009290 <_ZN10IridiumSBD13filterSBDRINGEv+0x3c>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	689a      	ldr	r2, [r3, #8]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	3308      	adds	r3, #8
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4610      	mov	r0, r2
 8009288:	4798      	blx	r3
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	dc0c      	bgt.n	80092aa <_ZN10IridiumSBD13filterSBDRINGEv+0x56>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	7c5b      	ldrb	r3, [r3, #17]
 8009294:	f083 0301 	eor.w	r3, r3, #1
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00d      	beq.n	80092ba <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 fa56 	bl	8009750 <_ZN10IridiumSBD15i2cSerAvailableEv>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	dd07      	ble.n	80092ba <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80092b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b4:	d101      	bne.n	80092ba <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 80092b6:	2301      	movs	r3, #1
 80092b8:	e000      	b.n	80092bc <_ZN10IridiumSBD13filterSBDRINGEv+0x68>
 80092ba:	2300      	movs	r3, #0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 80af 	beq.w	8009420 <_ZN10IridiumSBD13filterSBDRINGEv+0x1cc>
   {
      char c;
      if (this->useSerial)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	7c5b      	ldrb	r3, [r3, #17]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00b      	beq.n	80092e2 <_ZN10IridiumSBD13filterSBDRINGEv+0x8e>
      {
         c = stream->read();
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	689a      	ldr	r2, [r3, #8]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	330c      	adds	r3, #12
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4610      	mov	r0, r2
 80092da:	4798      	blx	r3
 80092dc:	4603      	mov	r3, r0
 80092de:	73fb      	strb	r3, [r7, #15]
 80092e0:	e004      	b.n	80092ec <_ZN10IridiumSBD13filterSBDRINGEv+0x98>
      }
      else
      {
         c = i2cSerRead();
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 fa4c 	bl	8009780 <_ZN10IridiumSBD10i2cSerReadEv>
 80092e8:	4603      	mov	r3, r0
 80092ea:	73fb      	strb	r3, [r7, #15]
      }
      consoleprint(c);
 80092ec:	7bfb      	ldrb	r3, [r7, #15]
 80092ee:	4619      	mov	r1, r3
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f7ff ff8d 	bl	8009210 <_ZN10IridiumSBD12consoleprintEc>
      if (*head != 0 && c == *head)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	f000 8087 	beq.w	8009412 <_ZN10IridiumSBD13filterSBDRINGEv+0x1be>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	7bfa      	ldrb	r2, [r7, #15]
 800930e:	429a      	cmp	r2, r3
 8009310:	d17f      	bne.n	8009412 <_ZN10IridiumSBD13filterSBDRINGEv+0x1be>
      {
         ++head;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009318:	1c5a      	adds	r2, r3, #1
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
         if (*head == 0)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10d      	bne.n	8009348 <_ZN10IridiumSBD13filterSBDRINGEv+0xf4>
         {
            SBDRINGSeen();
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f7ff ff7f 	bl	8009230 <_ZN10IridiumSBD11SBDRINGSeenEv>
            head = tail = SBDRING;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4a3c      	ldr	r2, [pc, #240]	; (8009428 <_ZN10IridiumSBD13filterSBDRINGEv+0x1d4>)
 8009336:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
            {
               --head;
               nextChar = c;
            }
         }
 8009346:	e069      	b.n	800941c <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
            for (unsigned long start = millis(); ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) && millis() - start < FILTERTIMEOUT; );
 8009348:	f003 f8f6 	bl	800c538 <HAL_GetTick>
 800934c:	60b8      	str	r0, [r7, #8]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	7c5b      	ldrb	r3, [r3, #17]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00b      	beq.n	800936e <_ZN10IridiumSBD13filterSBDRINGEv+0x11a>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	689a      	ldr	r2, [r3, #8]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	3308      	adds	r3, #8
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4610      	mov	r0, r2
 8009366:	4798      	blx	r3
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d00c      	beq.n	8009388 <_ZN10IridiumSBD13filterSBDRINGEv+0x134>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	7c5b      	ldrb	r3, [r3, #17]
 8009372:	f083 0301 	eor.w	r3, r3, #1
 8009376:	b2db      	uxtb	r3, r3
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00e      	beq.n	800939a <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 f9e7 	bl	8009750 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d108      	bne.n	800939a <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 8009388:	f003 f8d6 	bl	800c538 <HAL_GetTick>
 800938c:	4602      	mov	r2, r0
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	1ad3      	subs	r3, r2, r3
 8009392:	2b09      	cmp	r3, #9
 8009394:	d801      	bhi.n	800939a <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 8009396:	2301      	movs	r3, #1
 8009398:	e000      	b.n	800939c <_ZN10IridiumSBD13filterSBDRINGEv+0x148>
 800939a:	2300      	movs	r3, #0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d000      	beq.n	80093a2 <_ZN10IridiumSBD13filterSBDRINGEv+0x14e>
 80093a0:	e7d5      	b.n	800934e <_ZN10IridiumSBD13filterSBDRINGEv+0xfa>
            if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	7c5b      	ldrb	r3, [r3, #17]
 80093a6:	f083 0301 	eor.w	r3, r3, #1
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d002      	beq.n	80093b6 <_ZN10IridiumSBD13filterSBDRINGEv+0x162>
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 f89d 	bl	80094f0 <_ZN10IridiumSBD13check9603dataEv>
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	7c5b      	ldrb	r3, [r3, #17]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00b      	beq.n	80093d6 <_ZN10IridiumSBD13filterSBDRINGEv+0x182>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	689a      	ldr	r2, [r3, #8]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	3308      	adds	r3, #8
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4610      	mov	r0, r2
 80093ce:	4798      	blx	r3
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00c      	beq.n	80093f0 <_ZN10IridiumSBD13filterSBDRINGEv+0x19c>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	7c5b      	ldrb	r3, [r3, #17]
 80093da:	f083 0301 	eor.w	r3, r3, #1
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d007      	beq.n	80093f4 <_ZN10IridiumSBD13filterSBDRINGEv+0x1a0>
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 f9b3 	bl	8009750 <_ZN10IridiumSBD15i2cSerAvailableEv>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d101      	bne.n	80093f4 <_ZN10IridiumSBD13filterSBDRINGEv+0x1a0>
 80093f0:	2301      	movs	r3, #1
 80093f2:	e000      	b.n	80093f6 <_ZN10IridiumSBD13filterSBDRINGEv+0x1a2>
 80093f4:	2300      	movs	r3, #0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d010      	beq.n	800941c <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
               --head;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009400:	1e5a      	subs	r2, r3, #1
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
               nextChar = c;
 8009408:	7bfa      	ldrb	r2, [r7, #15]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
         }
 8009410:	e004      	b.n	800941c <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
      }
      else
      {
         nextChar = c;
 8009412:	7bfa      	ldrb	r2, [r7, #15]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800941a:	e729      	b.n	8009270 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
         }
 800941c:	bf00      	nop
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 800941e:	e727      	b.n	8009270 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
      }
   }
}
 8009420:	bf00      	nop
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	08022a68 	.word	0x08022a68

0800942c <_ZN10IridiumSBD17filteredavailableEv>:

const char IridiumSBD::SBDRING[] = "SBDRING\r\n";

int IridiumSBD::filteredavailable()
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f7ff ff0d 	bl	8009254 <_ZN10IridiumSBD13filterSBDRINGEv>
   return head - tail + (nextChar != -1 ? 1 : 0);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 800944e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009452:	d001      	beq.n	8009458 <_ZN10IridiumSBD17filteredavailableEv+0x2c>
 8009454:	2201      	movs	r2, #1
 8009456:	e000      	b.n	800945a <_ZN10IridiumSBD17filteredavailableEv+0x2e>
 8009458:	2200      	movs	r2, #0
 800945a:	4413      	add	r3, r2
}
 800945c:	4618      	mov	r0, r3
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <_ZN10IridiumSBD12filteredreadEv>:

int IridiumSBD::filteredread()
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f7ff fef1 	bl	8009254 <_ZN10IridiumSBD13filterSBDRINGEv>

   // Use up the queue first
   if (head > tail)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800947e:	429a      	cmp	r2, r3
 8009480:	d91c      	bls.n	80094bc <_ZN10IridiumSBD12filteredreadEv+0x58>
   {
      char c = *tail++;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009488:	1c59      	adds	r1, r3, #1
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	73bb      	strb	r3, [r7, #14]
      if (head == tail)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d109      	bne.n	80094b8 <_ZN10IridiumSBD12filteredreadEv+0x54>
         head = tail = SBDRING;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a11      	ldr	r2, [pc, #68]	; (80094ec <_ZN10IridiumSBD12filteredreadEv+0x88>)
 80094a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      return c;
 80094b8:	7bbb      	ldrb	r3, [r7, #14]
 80094ba:	e012      	b.n	80094e2 <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   // Then the "extra" char
   else if (nextChar != -1)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c6:	d00a      	beq.n	80094de <_ZN10IridiumSBD12filteredreadEv+0x7a>
   {
      char c = (char)nextChar;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094ce:	73fb      	strb	r3, [r7, #15]
      nextChar = -1;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f04f 32ff 	mov.w	r2, #4294967295
 80094d6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      return c;
 80094da:	7bfb      	ldrb	r3, [r7, #15]
 80094dc:	e001      	b.n	80094e2 <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   return -1;
 80094de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	08022a68 	.word	0x08022a68

080094f0 <_ZN10IridiumSBD13check9603dataEv>:

//Checks the number of available serial bytes
//Reads the available serial bytes (if any) and stores them in i2c_ser_buffer
void IridiumSBD::check9603data()
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  if (millis() - lastCheck >= I2C_POLLING_WAIT_MS)
 80094f8:	f003 f81e 	bl	800c538 <HAL_GetTick>
 80094fc:	4602      	mov	r2, r0
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 800950a:	4293      	cmp	r3, r2
 800950c:	bf2c      	ite	cs
 800950e:	2301      	movcs	r3, #1
 8009510:	2300      	movcc	r3, #0
 8009512:	b2db      	uxtb	r3, r3
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 80b8 	beq.w	800968a <_ZN10IridiumSBD13check9603dataEv+0x19a>
  {
    //Check how many serial bytes are waiting to be read
    uint16_t bytesAvailable = 0;
 800951a:	2300      	movs	r3, #0
 800951c:	81fb      	strh	r3, [r7, #14]
    wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	68da      	ldr	r2, [r3, #12]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	7c1b      	ldrb	r3, [r3, #16]
 8009526:	4619      	mov	r1, r3
 8009528:	4610      	mov	r0, r2
 800952a:	f001 f85d 	bl	800a5e8 <_ZN7TwoWire17beginTransmissionEh>
    wireport->write(LEN_REG); // Point to the serial buffer length
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	21fd      	movs	r1, #253	; 0xfd
 8009534:	4618      	mov	r0, r3
 8009536:	f7fd ff6b 	bl	8007410 <_ZN7TwoWire5writeEi>
    wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	4618      	mov	r0, r3
 8009540:	f001 f89c 	bl	800a67c <_ZN7TwoWire15endTransmissionEv>
    if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)2) == 2) // Request two bytes
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	68d8      	ldr	r0, [r3, #12]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	7c1b      	ldrb	r3, [r3, #16]
 800954c:	2202      	movs	r2, #2
 800954e:	4619      	mov	r1, r3
 8009550:	f001 f837 	bl	800a5c2 <_ZN7TwoWire11requestFromEhh>
 8009554:	4603      	mov	r3, r0
 8009556:	2b02      	cmp	r3, #2
 8009558:	bf0c      	ite	eq
 800955a:	2301      	moveq	r3, #1
 800955c:	2300      	movne	r3, #0
 800955e:	b2db      	uxtb	r3, r3
 8009560:	2b00      	cmp	r3, #0
 8009562:	d01d      	beq.n	80095a0 <_ZN10IridiumSBD13check9603dataEv+0xb0>
    {
      uint8_t msb = wireport->read();
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	68da      	ldr	r2, [r3, #12]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	330c      	adds	r3, #12
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4610      	mov	r0, r2
 8009574:	4798      	blx	r3
 8009576:	4603      	mov	r3, r0
 8009578:	737b      	strb	r3, [r7, #13]
      uint8_t lsb = wireport->read();
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	68da      	ldr	r2, [r3, #12]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	330c      	adds	r3, #12
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4610      	mov	r0, r2
 800958a:	4798      	blx	r3
 800958c:	4603      	mov	r3, r0
 800958e:	733b      	strb	r3, [r7, #12]
      bytesAvailable = (((uint16_t)msb) << 8) | lsb;
 8009590:	7b7b      	ldrb	r3, [r7, #13]
 8009592:	021b      	lsls	r3, r3, #8
 8009594:	b21a      	sxth	r2, r3
 8009596:	7b3b      	ldrb	r3, [r7, #12]
 8009598:	b21b      	sxth	r3, r3
 800959a:	4313      	orrs	r3, r2
 800959c:	b21b      	sxth	r3, r3
 800959e:	81fb      	strh	r3, [r7, #14]
    }

    //Now read the serial bytes (if any)
    if (bytesAvailable > 0)
 80095a0:	89fb      	ldrh	r3, [r7, #14]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d06c      	beq.n	8009680 <_ZN10IridiumSBD13check9603dataEv+0x190>
    {
      // Request the bytes
      // Poke them into the i2c_serial buffer
      // Release the bus afterwards
      wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	68da      	ldr	r2, [r3, #12]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	7c1b      	ldrb	r3, [r3, #16]
 80095ae:	4619      	mov	r1, r3
 80095b0:	4610      	mov	r0, r2
 80095b2:	f001 f819 	bl	800a5e8 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the serial buffer
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	21ff      	movs	r1, #255	; 0xff
 80095bc:	4618      	mov	r0, r3
 80095be:	f7fd ff27 	bl	8007410 <_ZN7TwoWire5writeEi>
      wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	4618      	mov	r0, r3
 80095c8:	f001 f858 	bl	800a67c <_ZN7TwoWire15endTransmissionEv>
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 80095cc:	89fb      	ldrh	r3, [r7, #14]
 80095ce:	2b08      	cmp	r3, #8
 80095d0:	d92c      	bls.n	800962c <_ZN10IridiumSBD13check9603dataEv+0x13c>
      {
        wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)SER_PACKET_SIZE, (uint8_t)false); // Request SER_PACKET_SIZE bytes, don't release the bus
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	68d8      	ldr	r0, [r3, #12]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	7c19      	ldrb	r1, [r3, #16]
 80095da:	2300      	movs	r3, #0
 80095dc:	2208      	movs	r2, #8
 80095de:	f000 ffb5 	bl	800a54c <_ZN7TwoWire11requestFromEhhh>
        while (wireport->available())
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	68da      	ldr	r2, [r3, #12]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3308      	adds	r3, #8
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4610      	mov	r0, r2
 80095f2:	4798      	blx	r3
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	bf14      	ite	ne
 80095fa:	2301      	movne	r3, #1
 80095fc:	2300      	moveq	r3, #0
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00f      	beq.n	8009624 <_ZN10IridiumSBD13check9603dataEv+0x134>
        {
          i2cSerPoke(wireport->read()); // Read and store each byte
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	68da      	ldr	r2, [r3, #12]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	330c      	adds	r3, #12
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4610      	mov	r0, r2
 8009614:	4798      	blx	r3
 8009616:	4603      	mov	r3, r0
 8009618:	b2db      	uxtb	r3, r3
 800961a:	4619      	mov	r1, r3
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 f8d5 	bl	80097cc <_ZN10IridiumSBD10i2cSerPokeEc>
        while (wireport->available())
 8009622:	e7de      	b.n	80095e2 <_ZN10IridiumSBD13check9603dataEv+0xf2>
        }
        bytesAvailable -= SER_PACKET_SIZE; // Decrease the number of bytes available by SER_PACKET_SIZE
 8009624:	89fb      	ldrh	r3, [r7, #14]
 8009626:	3b08      	subs	r3, #8
 8009628:	81fb      	strh	r3, [r7, #14]
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 800962a:	e7cf      	b.n	80095cc <_ZN10IridiumSBD13check9603dataEv+0xdc>
      }
      wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)bytesAvailable); // Request remaining bytes, release the bus
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	68d8      	ldr	r0, [r3, #12]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	7c1b      	ldrb	r3, [r3, #16]
 8009634:	89fa      	ldrh	r2, [r7, #14]
 8009636:	b2d2      	uxtb	r2, r2
 8009638:	4619      	mov	r1, r3
 800963a:	f000 ffc2 	bl	800a5c2 <_ZN7TwoWire11requestFromEhh>
      while (wireport->available())
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	68da      	ldr	r2, [r3, #12]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	3308      	adds	r3, #8
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4610      	mov	r0, r2
 800964e:	4798      	blx	r3
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	bf14      	ite	ne
 8009656:	2301      	movne	r3, #1
 8009658:	2300      	moveq	r3, #0
 800965a:	b2db      	uxtb	r3, r3
 800965c:	2b00      	cmp	r3, #0
 800965e:	d00f      	beq.n	8009680 <_ZN10IridiumSBD13check9603dataEv+0x190>
      {
        i2cSerPoke(wireport->read()); // Read and store each byte
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	68da      	ldr	r2, [r3, #12]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	330c      	adds	r3, #12
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4610      	mov	r0, r2
 8009670:	4798      	blx	r3
 8009672:	4603      	mov	r3, r0
 8009674:	b2db      	uxtb	r3, r3
 8009676:	4619      	mov	r1, r3
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 f8a7 	bl	80097cc <_ZN10IridiumSBD10i2cSerPokeEc>
      while (wireport->available())
 800967e:	e7de      	b.n	800963e <_ZN10IridiumSBD13check9603dataEv+0x14e>
      }
    }

    lastCheck = millis(); //Put off checking to avoid excessive I2C bus traffic
 8009680:	f002 ff5a 	bl	800c538 <HAL_GetTick>
 8009684:	4602      	mov	r2, r0
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800968a:	bf00      	nop
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <_ZN10IridiumSBD13check9603pinsEv>:

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 8009692:	b580      	push	{r7, lr}
 8009694:	b082      	sub	sp, #8
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	68da      	ldr	r2, [r3, #12]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	7c1b      	ldrb	r3, [r3, #16]
 80096a2:	4619      	mov	r1, r3
 80096a4:	4610      	mov	r0, r2
 80096a6:	f000 ff9f 	bl	800a5e8 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	2110      	movs	r1, #16
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7fd fead 	bl	8007410 <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	4618      	mov	r0, r3
 80096bc:	f000 ffde 	bl	800a67c <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	68d8      	ldr	r0, [r3, #12]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	7c1b      	ldrb	r3, [r3, #16]
 80096c8:	2201      	movs	r2, #1
 80096ca:	4619      	mov	r1, r3
 80096cc:	f000 ff79 	bl	800a5c2 <_ZN7TwoWire11requestFromEhh>
 80096d0:	4603      	mov	r3, r0
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	bf0c      	ite	eq
 80096d6:	2301      	moveq	r3, #1
 80096d8:	2300      	movne	r3, #0
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d00d      	beq.n	80096fc <_ZN10IridiumSBD13check9603pinsEv+0x6a>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	68da      	ldr	r2, [r3, #12]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	330c      	adds	r3, #12
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4610      	mov	r0, r2
 80096f0:	4798      	blx	r3
 80096f2:	4603      	mov	r3, r0
 80096f4:	b2da      	uxtb	r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
}
 80096fc:	bf00      	nop
 80096fe:	3708      	adds	r7, #8
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	460b      	mov	r3, r1
 800970e:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	68da      	ldr	r2, [r3, #12]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	7c1b      	ldrb	r3, [r3, #16]
 8009718:	4619      	mov	r1, r3
 800971a:	4610      	mov	r0, r2
 800971c:	f000 ff64 	bl	800a5e8 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	2110      	movs	r1, #16
 8009726:	4618      	mov	r0, r3
 8009728:	f7fd fe72 	bl	8007410 <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	68da      	ldr	r2, [r3, #12]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	78f9      	ldrb	r1, [r7, #3]
 800973a:	4610      	mov	r0, r2
 800973c:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	4618      	mov	r0, r3
 8009744:	f000 ff9a 	bl	800a67c <_ZN7TwoWire15endTransmissionEv>
}
 8009748:	bf00      	nop
 800974a:	3708      	adds	r7, #8
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <_ZN10IridiumSBD15i2cSerAvailableEv>:
    return(ISBD_SUCCESS);
}

// I2C_SER functions
int IridiumSBD::i2cSerAvailable()
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  return (i2c_ser_buffer_tail + I2C_SER_MAX_BUFF - i2c_ser_buffer_head) % I2C_SER_MAX_BUFF;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800975c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009764:	1ad3      	subs	r3, r2, r3
 8009766:	425a      	negs	r2, r3
 8009768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800976c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8009770:	bf58      	it	pl
 8009772:	4253      	negpl	r3, r2
}
 8009774:	4618      	mov	r0, r3
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <_ZN10IridiumSBD10i2cSerReadEv>:

int IridiumSBD::i2cSerRead()
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  // Empty buffer?
  if (i2c_ser_buffer_head == i2c_ser_buffer_tail)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009790:	429a      	cmp	r2, r3
 8009792:	d102      	bne.n	800979a <_ZN10IridiumSBD10i2cSerReadEv+0x1a>
    return -1;
 8009794:	f04f 33ff 	mov.w	r3, #4294967295
 8009798:	e012      	b.n	80097c0 <_ZN10IridiumSBD10i2cSerReadEv+0x40>

  // Read from "head"
  uint8_t d = i2c_ser_buffer[i2c_ser_buffer_head]; // grab next byte
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	4413      	add	r3, r2
 80097a2:	7c9b      	ldrb	r3, [r3, #18]
 80097a4:	73fb      	strb	r3, [r7, #15]
  i2c_ser_buffer_head = (i2c_ser_buffer_head + 1) % I2C_SER_MAX_BUFF; // update head
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097aa:	3301      	adds	r3, #1
 80097ac:	425a      	negs	r2, r3
 80097ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097b2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80097b6:	bf58      	it	pl
 80097b8:	4253      	negpl	r3, r2
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	6593      	str	r3, [r2, #88]	; 0x58
  return d;
 80097be:	7bfb      	ldrb	r3, [r7, #15]
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3714      	adds	r7, #20
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <_ZN10IridiumSBD10i2cSerPokeEc>:

void IridiumSBD::i2cSerPoke(char serChar)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b085      	sub	sp, #20
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	460b      	mov	r3, r1
 80097d6:	70fb      	strb	r3, [r7, #3]
  // Calculate the new value for the tail
  int next = (i2c_ser_buffer_tail + 1) % I2C_SER_MAX_BUFF;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097dc:	3301      	adds	r3, #1
 80097de:	425a      	negs	r2, r3
 80097e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097e4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80097e8:	bf58      	it	pl
 80097ea:	4253      	negpl	r3, r2
 80097ec:	60fb      	str	r3, [r7, #12]
  // If the buffer is not full (i.e. we are not about to overwrite the head byte)
  // If the buffer is full, the byte is lost
  if (next != i2c_ser_buffer_head)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d008      	beq.n	800980a <_ZN10IridiumSBD10i2cSerPokeEc+0x3e>
  {
    // save new data in buffer: tail points to where byte goes
    i2c_ser_buffer[i2c_ser_buffer_tail] = serChar; // save new byte
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	4413      	add	r3, r2
 8009800:	78fa      	ldrb	r2, [r7, #3]
 8009802:	749a      	strb	r2, [r3, #18]
    i2c_ser_buffer_tail = next;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	68fa      	ldr	r2, [r7, #12]
 8009808:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 800980a:	bf00      	nop
 800980c:	3714      	adds	r7, #20
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr
	...

08009818 <_ZN10IridiumSBD20internalClearBuffersEi>:

int IridiumSBD::internalClearBuffers(int buffers)
// Clear the MO/MT/Both buffers
// Defaults to clearing the MO buffer to avoid resending old messages
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af02      	add	r7, sp, #8
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
   if (this->asleep)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8009828:	2b00      	cmp	r3, #0
 800982a:	d001      	beq.n	8009830 <_ZN10IridiumSBD20internalClearBuffersEi+0x18>
      return ISBD_IS_ASLEEP;
 800982c:	230a      	movs	r3, #10
 800982e:	e032      	b.n	8009896 <_ZN10IridiumSBD20internalClearBuffersEi+0x7e>

   if (buffers == ISBD_CLEAR_MT) // Clear MT buffer
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	2b01      	cmp	r3, #1
 8009834:	d106      	bne.n	8009844 <_ZN10IridiumSBD20internalClearBuffersEi+0x2c>
   {
      send(F("AT+SBDD1\r"));
 8009836:	2301      	movs	r3, #1
 8009838:	2201      	movs	r2, #1
 800983a:	4919      	ldr	r1, [pc, #100]	; (80098a0 <_ZN10IridiumSBD20internalClearBuffersEi+0x88>)
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f7ff fab9 	bl	8008db4 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
 8009842:	e00f      	b.n	8009864 <_ZN10IridiumSBD20internalClearBuffersEi+0x4c>
   }
   else if (buffers == ISBD_CLEAR_BOTH) // Clear both buffers
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	2b02      	cmp	r3, #2
 8009848:	d106      	bne.n	8009858 <_ZN10IridiumSBD20internalClearBuffersEi+0x40>
   {
      send(F("AT+SBDD2\r"));
 800984a:	2301      	movs	r3, #1
 800984c:	2201      	movs	r2, #1
 800984e:	4915      	ldr	r1, [pc, #84]	; (80098a4 <_ZN10IridiumSBD20internalClearBuffersEi+0x8c>)
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f7ff faaf 	bl	8008db4 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
 8009856:	e005      	b.n	8009864 <_ZN10IridiumSBD20internalClearBuffersEi+0x4c>
   }
   else // Clear MO buffer
   {
      send(F("AT+SBDD0\r"));
 8009858:	2301      	movs	r3, #1
 800985a:	2201      	movs	r2, #1
 800985c:	4912      	ldr	r1, [pc, #72]	; (80098a8 <_ZN10IridiumSBD20internalClearBuffersEi+0x90>)
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f7ff faa8 	bl	8008db4 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   }
   if (!waitForATResponse())
 8009864:	4b11      	ldr	r3, [pc, #68]	; (80098ac <_ZN10IridiumSBD20internalClearBuffersEi+0x94>)
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	2300      	movs	r3, #0
 800986a:	2200      	movs	r2, #0
 800986c:	2100      	movs	r1, #0
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f7fe fe3e 	bl	80084f0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8009874:	4603      	mov	r3, r0
 8009876:	f083 0301 	eor.w	r3, r3, #1
 800987a:	b2db      	uxtb	r3, r3
 800987c:	2b00      	cmp	r3, #0
 800987e:	d009      	beq.n	8009894 <_ZN10IridiumSBD20internalClearBuffersEi+0x7c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f7fe fef3 	bl	800866c <_ZN10IridiumSBD9cancelledEv>
 8009886:	4603      	mov	r3, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d001      	beq.n	8009890 <_ZN10IridiumSBD20internalClearBuffersEi+0x78>
 800988c:	2304      	movs	r3, #4
 800988e:	e002      	b.n	8009896 <_ZN10IridiumSBD20internalClearBuffersEi+0x7e>
 8009890:	2303      	movs	r3, #3
 8009892:	e000      	b.n	8009896 <_ZN10IridiumSBD20internalClearBuffersEi+0x7e>

   return ISBD_SUCCESS;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3708      	adds	r7, #8
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	08021fe0 	.word	0x08021fe0
 80098a4:	08021fec 	.word	0x08021fec
 80098a8:	08021ff8 	.word	0x08021ff8
 80098ac:	08021928 	.word	0x08021928

080098b0 <_ZN10IridiumSBD15internalGetIMEIEPcj>:

int IridiumSBD::internalGetIMEI(char *IMEI, size_t bufferSize)
// Get the IMEI
// https://github.com/mikalhart/IridiumSBD/pull/21
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b086      	sub	sp, #24
 80098b4:	af02      	add	r7, sp, #8
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
   if (this->asleep)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d001      	beq.n	80098ca <_ZN10IridiumSBD15internalGetIMEIEPcj+0x1a>
      return ISBD_IS_ASLEEP;
 80098c6:	230a      	movs	r3, #10
 80098c8:	e023      	b.n	8009912 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   if (bufferSize < 16) // IMEI is 15 digits
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2b0f      	cmp	r3, #15
 80098ce:	d801      	bhi.n	80098d4 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x24>
      return ISBD_RX_OVERFLOW;
 80098d0:	2308      	movs	r3, #8
 80098d2:	e01e      	b.n	8009912 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   send(F("AT+CGSN\r"));
 80098d4:	2301      	movs	r3, #1
 80098d6:	2201      	movs	r2, #1
 80098d8:	4910      	ldr	r1, [pc, #64]	; (800991c <_ZN10IridiumSBD15internalGetIMEIEPcj+0x6c>)
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f7ff fa6a 	bl	8008db4 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(IMEI, bufferSize, "\n"))
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	4b0f      	ldr	r3, [pc, #60]	; (8009920 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x70>)
 80098e4:	9300      	str	r3, [sp, #0]
 80098e6:	4b0f      	ldr	r3, [pc, #60]	; (8009924 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x74>)
 80098e8:	68b9      	ldr	r1, [r7, #8]
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f7fe fe00 	bl	80084f0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80098f0:	4603      	mov	r3, r0
 80098f2:	f083 0301 	eor.w	r3, r3, #1
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d009      	beq.n	8009910 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x60>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f7fe feb5 	bl	800866c <_ZN10IridiumSBD9cancelledEv>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d001      	beq.n	800990c <_ZN10IridiumSBD15internalGetIMEIEPcj+0x5c>
 8009908:	2304      	movs	r3, #4
 800990a:	e002      	b.n	8009912 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>
 800990c:	2303      	movs	r3, #3
 800990e:	e000      	b.n	8009912 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   return ISBD_SUCCESS;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	08022004 	.word	0x08022004
 8009920:	08021928 	.word	0x08021928
 8009924:	08022010 	.word	0x08022010

08009928 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE>:
}
#endif


//uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart,POWERPROFILE profile){ TODO??
uint8_t IridiumSBD::MRT_Iridium_setup(uint8_t timeout, uint8_t i2c_bus, void (*iridium_print)(char*)){
 8009928:	b580      	push	{r7, lr}
 800992a:	b094      	sub	sp, #80	; 0x50
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	607b      	str	r3, [r7, #4]
 8009932:	460b      	mov	r3, r1
 8009934:	72fb      	strb	r3, [r7, #11]
 8009936:	4613      	mov	r3, r2
 8009938:	72bb      	strb	r3, [r7, #10]
	this->print = iridium_print;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	601a      	str	r2, [r3, #0]
	this->print((char*) "\r\nIridium 9603N Init\r\n");
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4868      	ldr	r0, [pc, #416]	; (8009ae8 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1c0>)
 8009946:	4798      	blx	r3

	this->print((char*) "\tSetting I2C bus...");
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4867      	ldr	r0, [pc, #412]	; (8009aec <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1c4>)
 800994e:	4798      	blx	r3
	if (i2c_bus == 1){
 8009950:	7abb      	ldrb	r3, [r7, #10]
 8009952:	2b01      	cmp	r3, #1
 8009954:	d103      	bne.n	800995e <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x36>
		this->wireport = &Wire;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	4a65      	ldr	r2, [pc, #404]	; (8009af0 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1c8>)
 800995a:	60da      	str	r2, [r3, #12]
 800995c:	e00c      	b.n	8009978 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x50>
	}
	else if (i2c_bus == 2){
 800995e:	7abb      	ldrb	r3, [r7, #10]
 8009960:	2b02      	cmp	r3, #2
 8009962:	d103      	bne.n	800996c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x44>
		this->wireport = &Wire1;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	4a63      	ldr	r2, [pc, #396]	; (8009af4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1cc>)
 8009968:	60da      	str	r2, [r3, #12]
 800996a:	e005      	b.n	8009978 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x50>
	}
	else if (i2c_bus == 3){
 800996c:	7abb      	ldrb	r3, [r7, #10]
 800996e:	2b03      	cmp	r3, #3
 8009970:	d102      	bne.n	8009978 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x50>
		this->wireport = &Wire2;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	4a60      	ldr	r2, [pc, #384]	; (8009af8 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1d0>)
 8009976:	60da      	str	r2, [r3, #12]
	}
	this->print((char*) "OK\r\n");
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	485f      	ldr	r0, [pc, #380]	; (8009afc <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1d4>)
 800997e:	4798      	blx	r3

	this->print((char*) "\tChecking device connection...");
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	485e      	ldr	r0, [pc, #376]	; (8009b00 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1d8>)
 8009986:	4798      	blx	r3
	bool connected = 0;
 8009988:	2300      	movs	r3, #0
 800998a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	for (int i=0; i<3; i++){
 800998e:	2300      	movs	r3, #0
 8009990:	64bb      	str	r3, [r7, #72]	; 0x48
 8009992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009994:	2b02      	cmp	r3, #2
 8009996:	dc2d      	bgt.n	80099f4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0xcc>
		if(this->isConnected()){
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f7fe f885 	bl	8007aa8 <_ZN10IridiumSBD11isConnectedEv>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d003      	beq.n	80099ac <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x84>
			connected=1;
 80099a4:	2301      	movs	r3, #1
 80099a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			break;
 80099aa:	e023      	b.n	80099f4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0xcc>
		}
		HAL_Delay(300);
 80099ac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80099b0:	f002 fdce 	bl	800c550 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection   ");
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4852      	ldr	r0, [pc, #328]	; (8009b04 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1dc>)
 80099ba:	4798      	blx	r3
		HAL_Delay(300);
 80099bc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80099c0:	f002 fdc6 	bl	800c550 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection.  ");
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	484f      	ldr	r0, [pc, #316]	; (8009b08 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1e0>)
 80099ca:	4798      	blx	r3
		HAL_Delay(300);
 80099cc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80099d0:	f002 fdbe 	bl	800c550 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection.. ");
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	484c      	ldr	r0, [pc, #304]	; (8009b0c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1e4>)
 80099da:	4798      	blx	r3
		HAL_Delay(300);
 80099dc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80099e0:	f002 fdb6 	bl	800c550 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection...");
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4849      	ldr	r0, [pc, #292]	; (8009b10 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1e8>)
 80099ea:	4798      	blx	r3
	for (int i=0; i<3; i++){
 80099ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099ee:	3301      	adds	r3, #1
 80099f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80099f2:	e7ce      	b.n	8009992 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x6a>
	}
	if(connected){
 80099f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d014      	beq.n	8009a26 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0xfe>
		this->print((char*) "OK\r\n");
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	483e      	ldr	r0, [pc, #248]	; (8009afc <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1d4>)
 8009a02:	4798      	blx	r3
		this->print((char*) "\tError: Iridium failed to connect. Check I2C connection\r\n");
		return -1;
	}

	//Activate the superchargers
	this->print((char*) "\tActivating the superchargers...");
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4842      	ldr	r0, [pc, #264]	; (8009b14 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1ec>)
 8009a0a:	4798      	blx	r3
	this->enableSuperCapCharger(true);
 8009a0c:	2101      	movs	r1, #1
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f7fd fec2 	bl	8007798 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	this->print((char*) "OK\r\n");
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4838      	ldr	r0, [pc, #224]	; (8009afc <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1d4>)
 8009a1a:	4798      	blx	r3


	//Wait for the supercapacitors to charge
	//int start=millis();
	this->print((char*) "\tWaiting for the supercapacitors to charge...");
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	483d      	ldr	r0, [pc, #244]	; (8009b18 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1f0>)
 8009a22:	4798      	blx	r3
 8009a24:	e009      	b.n	8009a3a <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x112>
		this->print((char*) "NOT OK\r\n");
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	483c      	ldr	r0, [pc, #240]	; (8009b1c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1f4>)
 8009a2c:	4798      	blx	r3
		this->print((char*) "\tError: Iridium failed to connect. Check I2C connection\r\n");
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	483b      	ldr	r0, [pc, #236]	; (8009b20 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1f8>)
 8009a34:	4798      	blx	r3
		return -1;
 8009a36:	23ff      	movs	r3, #255	; 0xff
 8009a38:	e052      	b.n	8009ae0 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1b8>
	while (!this->checkSuperCapCharger()){
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	f7fd feea 	bl	8007814 <_ZN10IridiumSBD20checkSuperCapChargerEv>
 8009a40:	4603      	mov	r3, r0
 8009a42:	f083 0301 	eor.w	r3, r3, #1
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d004      	beq.n	8009a56 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x12e>
		HAL_Delay(333);
 8009a4c:	f240 104d 	movw	r0, #333	; 0x14d
 8009a50:	f002 fd7e 	bl	800c550 <HAL_Delay>
	while (!this->checkSuperCapCharger()){
 8009a54:	e7f1      	b.n	8009a3a <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x112>
	}
	this->print((char*) "OK\r\n");
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4828      	ldr	r0, [pc, #160]	; (8009afc <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1d4>)
 8009a5c:	4798      	blx	r3


	//Enable power for the 9603N
	this->print((char*) "\tEnabling 9603N power...");
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4830      	ldr	r0, [pc, #192]	; (8009b24 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1fc>)
 8009a64:	4798      	blx	r3
	this->enable9603Npower(true);
 8009a66:	2101      	movs	r1, #1
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f7fd ff03 	bl	8007874 <_ZN10IridiumSBD16enable9603NpowerEb>
	this->print((char*) "OK\r\n");
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4822      	ldr	r0, [pc, #136]	; (8009afc <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1d4>)
 8009a74:	4798      	blx	r3
	/*
	 * Begin satellite modem operation
	 */

	//Power on the rockblock
	this->print((char*) "\tStarting Modem...");
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	482b      	ldr	r0, [pc, #172]	; (8009b28 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x200>)
 8009a7c:	4798      	blx	r3
	//this->setPowerProfile(profile);
	int err = this->begin();
 8009a7e:	68f8      	ldr	r0, [r7, #12]
 8009a80:	f7fd fcf8 	bl	8007474 <_ZN10IridiumSBD5beginEv>
 8009a84:	6478      	str	r0, [r7, #68]	; 0x44
	if (err != ISBD_SUCCESS)
 8009a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00b      	beq.n	8009aa4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x17c>
	  {
		this->print((char*) "Failed: ");
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4826      	ldr	r0, [pc, #152]	; (8009b2c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x204>)
 8009a92:	4798      	blx	r3
		this->MRT_Iridium_ErrorMessage(err);
 8009a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	4619      	mov	r1, r3
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f000 f8a2 	bl	8009be4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>

	    return HAL_ERROR;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e01d      	b.n	8009ae0 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1b8>
	  }
	this->print((char*) "OK\r\n");
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4814      	ldr	r0, [pc, #80]	; (8009afc <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1d4>)
 8009aaa:	4798      	blx	r3

	//Setup default IMEI to 000000000000000 (no IMEI)
	IMEI= (char*) "000000000000000";
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	4a20      	ldr	r2, [pc, #128]	; (8009b30 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x208>)
 8009ab0:	605a      	str	r2, [r3, #4]

	char str[50];
	sprintf(str, "\tSetting timeout of %i seconds...", timeout);
 8009ab2:	7afa      	ldrb	r2, [r7, #11]
 8009ab4:	f107 0310 	add.w	r3, r7, #16
 8009ab8:	491e      	ldr	r1, [pc, #120]	; (8009b34 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x20c>)
 8009aba:	4618      	mov	r0, r3
 8009abc:	f012 fb00 	bl	801c0c0 <siprintf>
	this->print((char*) str);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f107 0210 	add.w	r2, r7, #16
 8009ac8:	4610      	mov	r0, r2
 8009aca:	4798      	blx	r3
	adjustATTimeout(timeout);
 8009acc:	7afb      	ldrb	r3, [r7, #11]
 8009ace:	4619      	mov	r1, r3
 8009ad0:	68f8      	ldr	r0, [r7, #12]
 8009ad2:	f7fd fd70 	bl	80075b6 <_ZN10IridiumSBD15adjustATTimeoutEi>
	this->print((char*) "OK\r\n");
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4808      	ldr	r0, [pc, #32]	; (8009afc <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1d4>)
 8009adc:	4798      	blx	r3

	return HAL_OK;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3750      	adds	r7, #80	; 0x50
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	08022014 	.word	0x08022014
 8009aec:	0802202c 	.word	0x0802202c
 8009af0:	200005b8 	.word	0x200005b8
 8009af4:	20000670 	.word	0x20000670
 8009af8:	20000728 	.word	0x20000728
 8009afc:	08021928 	.word	0x08021928
 8009b00:	08022040 	.word	0x08022040
 8009b04:	08022060 	.word	0x08022060
 8009b08:	08022080 	.word	0x08022080
 8009b0c:	080220a0 	.word	0x080220a0
 8009b10:	080220c0 	.word	0x080220c0
 8009b14:	08022128 	.word	0x08022128
 8009b18:	0802214c 	.word	0x0802214c
 8009b1c:	080220e0 	.word	0x080220e0
 8009b20:	080220ec 	.word	0x080220ec
 8009b24:	0802217c 	.word	0x0802217c
 8009b28:	08022198 	.word	0x08022198
 8009b2c:	080221ac 	.word	0x080221ac
 8009b30:	080221b8 	.word	0x080221b8
 8009b34:	080221c8 	.word	0x080221c8

08009b38 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>:


boolean IridiumSBD::MRT_Iridium_shutdown(void){
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b08a      	sub	sp, #40	; 0x28
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]

	this->print((char*) "Iridium 9603N Deinit\r\n");
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4820      	ldr	r0, [pc, #128]	; (8009bc8 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x90>)
 8009b46:	4798      	blx	r3

	// Power down the modem
	this->print((char*) "\tPutting the 9603N to sleep...");
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	481f      	ldr	r0, [pc, #124]	; (8009bcc <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x94>)
 8009b4e:	4798      	blx	r3
	int err = this->sleep();
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f7fd fcfb 	bl	800754c <_ZN10IridiumSBD5sleepEv>
 8009b56:	6278      	str	r0, [r7, #36]	; 0x24
	if (err != ISBD_SUCCESS)
 8009b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00e      	beq.n	8009b7c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x44>
	{
		char str[24+sizeof(int)];
		sprintf(str, "sleep failed: error  %i\r\n", err);
 8009b5e:	f107 0308 	add.w	r3, r7, #8
 8009b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b64:	491a      	ldr	r1, [pc, #104]	; (8009bd0 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x98>)
 8009b66:	4618      	mov	r0, r3
 8009b68:	f012 faaa 	bl	801c0c0 <siprintf>
		this->print((char*) str);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f107 0208 	add.w	r2, r7, #8
 8009b74:	4610      	mov	r0, r2
 8009b76:	4798      	blx	r3
		return false;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	e020      	b.n	8009bbe <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x86>
	}
	this->print((char*) "OK\r\n");
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4814      	ldr	r0, [pc, #80]	; (8009bd4 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x9c>)
 8009b82:	4798      	blx	r3

	// Disable 9603N power
	this->print((char*) "\tDisabling 9603N power...");
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4813      	ldr	r0, [pc, #76]	; (8009bd8 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xa0>)
 8009b8a:	4798      	blx	r3
	this->enable9603Npower(false);
 8009b8c:	2100      	movs	r1, #0
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f7fd fe70 	bl	8007874 <_ZN10IridiumSBD16enable9603NpowerEb>
	this->print((char*) "OK\r\n");
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	480e      	ldr	r0, [pc, #56]	; (8009bd4 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x9c>)
 8009b9a:	4798      	blx	r3

	// Disable the supercapacitor charger
	this->print((char*) "\tDisabling the supercapacitor charger...");
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	480e      	ldr	r0, [pc, #56]	; (8009bdc <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xa4>)
 8009ba2:	4798      	blx	r3
	this->enableSuperCapCharger(false);
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f7fd fdf6 	bl	8007798 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	this->print((char*) "OK\r\n");
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4808      	ldr	r0, [pc, #32]	; (8009bd4 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x9c>)
 8009bb2:	4798      	blx	r3

	this->print((char*) "\tIridium successfully shutdown\r\n");
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4809      	ldr	r0, [pc, #36]	; (8009be0 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xa8>)
 8009bba:	4798      	blx	r3
	return true;
 8009bbc:	2301      	movs	r3, #1
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3728      	adds	r7, #40	; 0x28
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	080221ec 	.word	0x080221ec
 8009bcc:	08022204 	.word	0x08022204
 8009bd0:	08022224 	.word	0x08022224
 8009bd4:	08021928 	.word	0x08021928
 8009bd8:	08022240 	.word	0x08022240
 8009bdc:	0802225c 	.word	0x0802225c
 8009be0:	08022288 	.word	0x08022288

08009be4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>:



void IridiumSBD::MRT_Iridium_ErrorMessage(uint8_t error){
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	460b      	mov	r3, r1
 8009bee:	70fb      	strb	r3, [r7, #3]
	this->print((char*) "\r\n\tError:\t");
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4834      	ldr	r0, [pc, #208]	; (8009cc8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe4>)
 8009bf6:	4798      	blx	r3
	if (error == ISBD_ALREADY_AWAKE){
 8009bf8:	78fb      	ldrb	r3, [r7, #3]
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d104      	bne.n	8009c08 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x24>
		this->print((char*) "\tAlready Awake\r\n");
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4832      	ldr	r0, [pc, #200]	; (8009ccc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe8>)
 8009c04:	4798      	blx	r3
		this->print((char*) "\tDEBUG LINE REACHED\r\n");
	}
	else{
		this->print((char*) "\tUNKNOWN\r\n");
	}
}
 8009c06:	e05b      	b.n	8009cc0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_SERIAL_FAILURE){
 8009c08:	78fb      	ldrb	r3, [r7, #3]
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	d104      	bne.n	8009c18 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x34>
		this->print((char*) "\tSerial Failure\r\n");
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	482f      	ldr	r0, [pc, #188]	; (8009cd0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xec>)
 8009c14:	4798      	blx	r3
}
 8009c16:	e053      	b.n	8009cc0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_PROTOCOL_ERROR){
 8009c18:	78fb      	ldrb	r3, [r7, #3]
 8009c1a:	2b03      	cmp	r3, #3
 8009c1c:	d104      	bne.n	8009c28 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x44>
		this->print((char*) "\tProtocol Error\r\n");
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	482c      	ldr	r0, [pc, #176]	; (8009cd4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf0>)
 8009c24:	4798      	blx	r3
}
 8009c26:	e04b      	b.n	8009cc0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_CANCELLED){
 8009c28:	78fb      	ldrb	r3, [r7, #3]
 8009c2a:	2b04      	cmp	r3, #4
 8009c2c:	d104      	bne.n	8009c38 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x54>
		this->print((char*) "\tCancelled\r\n");
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4829      	ldr	r0, [pc, #164]	; (8009cd8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf4>)
 8009c34:	4798      	blx	r3
}
 8009c36:	e043      	b.n	8009cc0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_NO_MODEM_DETECTED){
 8009c38:	78fb      	ldrb	r3, [r7, #3]
 8009c3a:	2b05      	cmp	r3, #5
 8009c3c:	d104      	bne.n	8009c48 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x64>
		this->print((char*) "\tNo modem detected: check wiring.\r\n");
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4826      	ldr	r0, [pc, #152]	; (8009cdc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf8>)
 8009c44:	4798      	blx	r3
}
 8009c46:	e03b      	b.n	8009cc0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_SBDIX_FATAL_ERROR){
 8009c48:	78fb      	ldrb	r3, [r7, #3]
 8009c4a:	2b06      	cmp	r3, #6
 8009c4c:	d104      	bne.n	8009c58 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x74>
		this->print((char*) "\tSDBIX Fatal Error\r\n");
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4823      	ldr	r0, [pc, #140]	; (8009ce0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xfc>)
 8009c54:	4798      	blx	r3
}
 8009c56:	e033      	b.n	8009cc0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_SENDRECEIVE_TIMEOUT){
 8009c58:	78fb      	ldrb	r3, [r7, #3]
 8009c5a:	2b07      	cmp	r3, #7
 8009c5c:	d104      	bne.n	8009c68 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x84>
		this->print((char*) "\tSend-Receive Timeout\r\n");
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4820      	ldr	r0, [pc, #128]	; (8009ce4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x100>)
 8009c64:	4798      	blx	r3
}
 8009c66:	e02b      	b.n	8009cc0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_RX_OVERFLOW){
 8009c68:	78fb      	ldrb	r3, [r7, #3]
 8009c6a:	2b08      	cmp	r3, #8
 8009c6c:	d104      	bne.n	8009c78 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x94>
		this->print((char*) "\tRX Overflow\r\n");
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	481d      	ldr	r0, [pc, #116]	; (8009ce8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x104>)
 8009c74:	4798      	blx	r3
}
 8009c76:	e023      	b.n	8009cc0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_REENTRANT){
 8009c78:	78fb      	ldrb	r3, [r7, #3]
 8009c7a:	2b09      	cmp	r3, #9
 8009c7c:	d104      	bne.n	8009c88 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xa4>
		this->print((char*) "\tREENTRANT\r\n");
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	481a      	ldr	r0, [pc, #104]	; (8009cec <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x108>)
 8009c84:	4798      	blx	r3
}
 8009c86:	e01b      	b.n	8009cc0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_IS_ASLEEP){
 8009c88:	78fb      	ldrb	r3, [r7, #3]
 8009c8a:	2b0a      	cmp	r3, #10
 8009c8c:	d104      	bne.n	8009c98 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xb4>
		this->print((char*) "\tIs Asleep\r\n");
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4817      	ldr	r0, [pc, #92]	; (8009cf0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x10c>)
 8009c94:	4798      	blx	r3
}
 8009c96:	e013      	b.n	8009cc0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_NO_SLEEP_PIN){
 8009c98:	78fb      	ldrb	r3, [r7, #3]
 8009c9a:	2b0b      	cmp	r3, #11
 8009c9c:	d104      	bne.n	8009ca8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xc4>
		this->print((char*) "\tNo Sleep Pin\r\n");
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4814      	ldr	r0, [pc, #80]	; (8009cf4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x110>)
 8009ca4:	4798      	blx	r3
}
 8009ca6:	e00b      	b.n	8009cc0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if(error == 20){
 8009ca8:	78fb      	ldrb	r3, [r7, #3]
 8009caa:	2b14      	cmp	r3, #20
 8009cac:	d104      	bne.n	8009cb8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xd4>
		this->print((char*) "\tDEBUG LINE REACHED\r\n");
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4811      	ldr	r0, [pc, #68]	; (8009cf8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x114>)
 8009cb4:	4798      	blx	r3
}
 8009cb6:	e003      	b.n	8009cc0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
		this->print((char*) "\tUNKNOWN\r\n");
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	480f      	ldr	r0, [pc, #60]	; (8009cfc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x118>)
 8009cbe:	4798      	blx	r3
}
 8009cc0:	bf00      	nop
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	080222ac 	.word	0x080222ac
 8009ccc:	080222b8 	.word	0x080222b8
 8009cd0:	080222cc 	.word	0x080222cc
 8009cd4:	080222e0 	.word	0x080222e0
 8009cd8:	080222f4 	.word	0x080222f4
 8009cdc:	08022304 	.word	0x08022304
 8009ce0:	08022328 	.word	0x08022328
 8009ce4:	08022340 	.word	0x08022340
 8009ce8:	08022358 	.word	0x08022358
 8009cec:	08022368 	.word	0x08022368
 8009cf0:	08022378 	.word	0x08022378
 8009cf4:	08022388 	.word	0x08022388
 8009cf8:	08022398 	.word	0x08022398
 8009cfc:	080223b0 	.word	0x080223b0

08009d00 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>:


/*
 * This function requests the satellite modem's IMEI number.
 */
boolean IridiumSBD::MRT_Iridium_getIMEI(void){
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b092      	sub	sp, #72	; 0x48
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]

	//Check if we already have the IMEI
	if (strcmp(IMEI,"000000000000000")==0){
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	491f      	ldr	r1, [pc, #124]	; (8009d8c <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x8c>)
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7f6 fa6e 	bl	80001f0 <strcmp>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d124      	bne.n	8009d64 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x64>

		//Reset the IMEI
		IMEI=new char[16];
 8009d1a:	2010      	movs	r0, #16
 8009d1c:	f00f fc77 	bl	801960e <_Znaj>
 8009d20:	4603      	mov	r3, r0
 8009d22:	461a      	mov	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	605a      	str	r2, [r3, #4]

		// Get the IMEI
		this->print((char*) "\r\nIridium: Retrieving the IMEI\r\n");
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4818      	ldr	r0, [pc, #96]	; (8009d90 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x90>)
 8009d2e:	4798      	blx	r3
		int err = this->getIMEI(IMEI, 16);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	2210      	movs	r2, #16
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7fd fe95 	bl	8007a68 <_ZN10IridiumSBD7getIMEIEPcj>
 8009d3e:	6478      	str	r0, [r7, #68]	; 0x44
		if (err != ISBD_SUCCESS)
 8009d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00e      	beq.n	8009d64 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x64>
		{
			char str[24+sizeof(int)];
		    sprintf(str, "\tgetIMEI failed: error %i\r\n", err);
 8009d46:	f107 030c 	add.w	r3, r7, #12
 8009d4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d4c:	4911      	ldr	r1, [pc, #68]	; (8009d94 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x94>)
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f012 f9b6 	bl	801c0c0 <siprintf>
		    this->print((char*) str);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f107 020c 	add.w	r2, r7, #12
 8009d5c:	4610      	mov	r0, r2
 8009d5e:	4798      	blx	r3
		    return false;
 8009d60:	2300      	movs	r3, #0
 8009d62:	e00e      	b.n	8009d82 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x82>
		  }
	}

	char str[28];//IMEI is 15 integers long
	sprintf(str, "\tIMEI is %s\r\n", IMEI);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009d6c:	490a      	ldr	r1, [pc, #40]	; (8009d98 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x98>)
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f012 f9a6 	bl	801c0c0 <siprintf>
	this->print((char*) str);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009d7c:	4610      	mov	r0, r2
 8009d7e:	4798      	blx	r3
	return true;
 8009d80:	2301      	movs	r3, #1
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3748      	adds	r7, #72	; 0x48
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	080221b8 	.word	0x080221b8
 8009d90:	080223bc 	.word	0x080223bc
 8009d94:	080223e0 	.word	0x080223e0
 8009d98:	080223fc 	.word	0x080223fc

08009d9c <_ZN10IridiumSBD15MRT_Iridium_CSQEv>:
 * This sketch checks the Iridium signal quality and returns the status
 * of the Network Available signal.
 *
 * The boolean param is if you want to check for network availability
 */
int IridiumSBD::MRT_Iridium_CSQ(){
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b09e      	sub	sp, #120	; 0x78
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
	this->print((char*) "\r\nIridium: Checking Signal Quality\r\n");
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	481c      	ldr	r0, [pc, #112]	; (8009e1c <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x80>)
 8009daa:	4798      	blx	r3
	int signalQuality = -1;
 8009dac:	f04f 33ff 	mov.w	r3, #4294967295
 8009db0:	673b      	str	r3, [r7, #112]	; 0x70

	this->MRT_Iridium_getIMEI();
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f7ff ffa4 	bl	8009d00 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>

	// Check the signal quality.
	// This returns a number between 0 and 5.
	// 2 or better is preferred.
	int err = this->getSignalQuality(signalQuality);
 8009db8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f7fd fba6 	bl	8007510 <_ZN10IridiumSBD16getSignalQualityERi>
 8009dc4:	6778      	str	r0, [r7, #116]	; 0x74
	if (err != ISBD_SUCCESS)
 8009dc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d015      	beq.n	8009df8 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x5c>
	{
	  char str[34+sizeof(int)];
	  sprintf(str, "\tSignalQuality failed: error  %i\r\n", err);
 8009dcc:	f107 030c 	add.w	r3, r7, #12
 8009dd0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009dd2:	4913      	ldr	r1, [pc, #76]	; (8009e20 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x84>)
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f012 f973 	bl	801c0c0 <siprintf>
	  this->print((char*) str);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f107 020c 	add.w	r2, r7, #12
 8009de2:	4610      	mov	r0, r2
 8009de4:	4798      	blx	r3
	  this->MRT_Iridium_ErrorMessage(err);
 8009de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	4619      	mov	r1, r3
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f7ff fef9 	bl	8009be4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
	  return -1;
 8009df2:	f04f 33ff 	mov.w	r3, #4294967295
 8009df6:	e00d      	b.n	8009e14 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x78>
	}

	char str[56+sizeof(int)];
	sprintf(str, "\tOn a scale of 0 to 5, signal quality is currently  %i\r\n", signalQuality);
 8009df8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009dfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009dfe:	4909      	ldr	r1, [pc, #36]	; (8009e24 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x88>)
 8009e00:	4618      	mov	r0, r3
 8009e02:	f012 f95d 	bl	801c0c0 <siprintf>
	this->print((char*) str);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009e0e:	4610      	mov	r0, r2
 8009e10:	4798      	blx	r3

	return signalQuality;
 8009e12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3778      	adds	r7, #120	; 0x78
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	0802240c 	.word	0x0802240c
 8009e20:	08022434 	.word	0x08022434
 8009e24:	08022458 	.word	0x08022458

08009e28 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv>:


/*
 * This function checks if a network is available
 */
boolean IridiumSBD::MRT_Iridium_NetworkAvailability(void){
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]

	// Check Network Available.
	this->print((char*) "\r\nIridium: Checking if Network is Available:\t");
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	480c      	ldr	r0, [pc, #48]	; (8009e68 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x40>)
 8009e36:	4798      	blx	r3
	if (!this->checkNetworkAvailable()){
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f7fd fdc7 	bl	80079cc <_ZN10IridiumSBD21checkNetworkAvailableEv>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	f083 0301 	eor.w	r3, r3, #1
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d005      	beq.n	8009e56 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x2e>
		this->print((char*) "not available.\r\n");
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4807      	ldr	r0, [pc, #28]	; (8009e6c <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x44>)
 8009e50:	4798      	blx	r3
		//diagprint(F("(This might be because the 9603N has not yet aquired the ring channel.)\r\n"));
		return false;
 8009e52:	2300      	movs	r3, #0
 8009e54:	e004      	b.n	8009e60 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x38>
	}

	this->print((char*) "available.\r\n");
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4805      	ldr	r0, [pc, #20]	; (8009e70 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x48>)
 8009e5c:	4798      	blx	r3
	return true;
 8009e5e:	2301      	movs	r3, #1
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	08022494 	.word	0x08022494
 8009e6c:	080224c4 	.word	0x080224c4
 8009e70:	080224d8 	.word	0x080224d8

08009e74 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>:


/*
 * This function requests the time
 */
boolean IridiumSBD::MRT_Iridium_getTime(void){
 8009e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e76:	b0a1      	sub	sp, #132	; 0x84
 8009e78:	af04      	add	r7, sp, #16
 8009e7a:	6078      	str	r0, [r7, #4]
	this->print((char*) "\r\nIridium: Retrieving time\r\n");
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4820      	ldr	r0, [pc, #128]	; (8009f04 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x90>)
 8009e82:	4798      	blx	r3
	struct tm t; // struct tm is defined in time.h
	int err = this->getSystemTime(t); // Ask the 9603N for the system time
 8009e84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009e88:	4619      	mov	r1, r3
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f7fd fbc0 	bl	8007610 <_ZN10IridiumSBD13getSystemTimeER2tm>
 8009e90:	66f8      	str	r0, [r7, #108]	; 0x6c
	if (err == ISBD_SUCCESS) // Was it successful?
 8009e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d11c      	bne.n	8009ed2 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x5e>
	    {
		char buf[61];
		sprintf(buf, "\r\n\t<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 8009e98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		sprintf(buf, "\r\n\t<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 8009e9a:	f203 756c 	addw	r5, r3, #1900	; 0x76c
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 8009e9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		sprintf(buf, "\r\n\t<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 8009ea0:	1c5e      	adds	r6, r3, #1
 8009ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ea4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009ea6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009ea8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009eaa:	f107 0408 	add.w	r4, r7, #8
 8009eae:	9003      	str	r0, [sp, #12]
 8009eb0:	9102      	str	r1, [sp, #8]
 8009eb2:	9201      	str	r2, [sp, #4]
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	4633      	mov	r3, r6
 8009eb8:	462a      	mov	r2, r5
 8009eba:	4913      	ldr	r1, [pc, #76]	; (8009f08 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x94>)
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	f012 f8ff 	bl	801c0c0 <siprintf>
		this->print((char*) buf);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f107 0208 	add.w	r2, r7, #8
 8009eca:	4610      	mov	r0, r2
 8009ecc:	4798      	blx	r3
		return true;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e013      	b.n	8009efa <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x86>
	}

	else if (err == ISBD_NO_NETWORK) // Did it fail because the 9603N has not yet seen the network?
 8009ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ed4:	2b0c      	cmp	r3, #12
 8009ed6:	d105      	bne.n	8009ee4 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x70>
	     {
		 this->print((char*) "\tNo network detected.\r\n");
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	480b      	ldr	r0, [pc, #44]	; (8009f0c <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x98>)
 8009ede:	4798      	blx	r3
	   	 return false;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	e00a      	b.n	8009efa <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x86>
	}

	else
	    {
		this->print((char*) "\tUnexpected Error ");
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4809      	ldr	r0, [pc, #36]	; (8009f10 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x9c>)
 8009eea:	4798      	blx	r3
		this->MRT_Iridium_ErrorMessage(err);
 8009eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f7ff fe76 	bl	8009be4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
		return false;
 8009ef8:	2300      	movs	r3, #0
	}
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3774      	adds	r7, #116	; 0x74
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f02:	bf00      	nop
 8009f04:	080224e8 	.word	0x080224e8
 8009f08:	08022508 	.word	0x08022508
 8009f0c:	08022544 	.word	0x08022544
 8009f10:	0802255c 	.word	0x0802255c

08009f14 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc>:
 * This sketch sends a "Hello, world!" message from the satellite modem.
 * If you have activated your account and have credits, this message
 * should arrive at the endpoints (delivery group) you have configured
 * (email address or HTTP POST).
 */
boolean IridiumSBD::MRT_Iridium_sendMessage(char* msg){
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b090      	sub	sp, #64	; 0x40
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
	int temp = this->atTimeout; //Save default atTimeout
	adjustATTimeout(timeout);
*/

	// Send the message
	this->print((char*) "\r\nIridium: Trying to send the message.  This might take several minutes.\r\n");
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4828      	ldr	r0, [pc, #160]	; (8009fc4 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xb0>)
 8009f24:	4798      	blx	r3
	int err = this->sendSBDText((const char*) msg);
 8009f26:	6839      	ldr	r1, [r7, #0]
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f7fd facd 	bl	80074c8 <_ZN10IridiumSBD11sendSBDTextEPKc>
 8009f2e:	63f8      	str	r0, [r7, #60]	; 0x3c
	//int err = this->sendSBDText((const char*) "Hello, world!");
	//int err = ISBD_SENDRECEIVE_TIMEOUT;

	if (err != ISBD_SUCCESS){
 8009f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d01b      	beq.n	8009f6e <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0x5a>
		char str[50];
		sprintf(str, "\tsendSBDText failed: error -> %i\r\n", err);
 8009f36:	f107 0308 	add.w	r3, r7, #8
 8009f3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f3c:	4922      	ldr	r1, [pc, #136]	; (8009fc8 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xb4>)
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f012 f8be 	bl	801c0c0 <siprintf>
		this->print((char*) str);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f107 0208 	add.w	r2, r7, #8
 8009f4c:	4610      	mov	r0, r2
 8009f4e:	4798      	blx	r3
	    if (err == ISBD_SENDRECEIVE_TIMEOUT){
 8009f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f52:	2b07      	cmp	r3, #7
 8009f54:	d103      	bne.n	8009f5e <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0x4a>
	    	this->print((char*) "\tTry again with a better view of the sky.\r\n");
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	481c      	ldr	r0, [pc, #112]	; (8009fcc <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xb8>)
 8009f5c:	4798      	blx	r3
	    }
	    this->MRT_Iridium_ErrorMessage((uint8_t) err);
 8009f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	4619      	mov	r1, r3
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f7ff fe3d 	bl	8009be4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
	    return false;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	e025      	b.n	8009fba <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xa6>
	}

	else{
		this->print((char*) "\tMessage sent\r\n");
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4817      	ldr	r0, [pc, #92]	; (8009fd0 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xbc>)
 8009f74:	4798      	blx	r3
	}

	// Clear the Mobile Originated message buffer
	this->print((char*) "\tClearing the MO buffer.\r\n");
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4816      	ldr	r0, [pc, #88]	; (8009fd4 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xc0>)
 8009f7c:	4798      	blx	r3
	err = this->clearBuffers(ISBD_CLEAR_MO); // Clear MO buffer
 8009f7e:	2100      	movs	r1, #0
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f7fd fd53 	bl	8007a2c <_ZN10IridiumSBD12clearBuffersEi>
 8009f86:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (err != ISBD_SUCCESS){
 8009f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d014      	beq.n	8009fb8 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xa4>
		char str[50];
		sprintf(str, "clearBuffers failed: error -> %i\r\n", err);
 8009f8e:	f107 0308 	add.w	r3, r7, #8
 8009f92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f94:	4910      	ldr	r1, [pc, #64]	; (8009fd8 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xc4>)
 8009f96:	4618      	mov	r0, r3
 8009f98:	f012 f892 	bl	801c0c0 <siprintf>
		this->print((char*) str);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f107 0208 	add.w	r2, r7, #8
 8009fa4:	4610      	mov	r0, r2
 8009fa6:	4798      	blx	r3
		this->MRT_Iridium_ErrorMessage((uint8_t) err);
 8009fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	4619      	mov	r1, r3
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f7ff fe18 	bl	8009be4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
		return false;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	e000      	b.n	8009fba <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xa6>
	}
	return true;
 8009fb8:	2301      	movs	r3, #1
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3740      	adds	r7, #64	; 0x40
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	08022570 	.word	0x08022570
 8009fc8:	080225bc 	.word	0x080225bc
 8009fcc:	080225e0 	.word	0x080225e0
 8009fd0:	0802260c 	.word	0x0802260c
 8009fd4:	0802261c 	.word	0x0802261c
 8009fd8:	08022638 	.word	0x08022638

08009fdc <_ZN10IridiumSBDC1ER7TwoWireh>:
      if (ringPin != -1)
         pinMode(ringPin, INPUT);
   }
   */

IridiumSBD(TwoWire &wirePort = IRIDIUM_I2C, uint8_t deviceAddress = 0x63)
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	4613      	mov	r3, r2
 8009fe8:	71fb      	strb	r3, [r7, #7]
   {
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2200      	movs	r2, #0
 8009fee:	66da      	str	r2, [r3, #108]	; 0x6c
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2205      	movs	r2, #5
 8009ff4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2202      	movs	r2, #2
 800a004:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2204      	movs	r2, #4
 800a00c:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2208      	movs	r2, #8
 800a014:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2210      	movs	r2, #16
 800a01c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2220      	movs	r2, #32
 800a024:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2240      	movs	r2, #64	; 0x40
 800a02c:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
      useSerial = false;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2200      	movs	r2, #0
 800a034:	745a      	strb	r2, [r3, #17]
      wireport = &wirePort;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	68ba      	ldr	r2, [r7, #8]
 800a03a:	60da      	str	r2, [r3, #12]
      deviceaddress = deviceAddress;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	79fa      	ldrb	r2, [r7, #7]
 800a040:	741a      	strb	r2, [r3, #16]
      sbdixInterval = ISBD_USB_SBDIX_INTERVAL;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	221e      	movs	r2, #30
 800a046:	65da      	str	r2, [r3, #92]	; 0x5c
      atTimeout = ISBD_DEFAULT_AT_TIMEOUT;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	221e      	movs	r2, #30
 800a04c:	661a      	str	r2, [r3, #96]	; 0x60
      sendReceiveTimeout = ISBD_DEFAULT_SENDRECEIVE_TIME;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a054:	665a      	str	r2, [r3, #100]	; 0x64
      startupTimeout = ISBD_STARTUP_MAX_TIME;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	22f0      	movs	r2, #240	; 0xf0
 800a05a:	669a      	str	r2, [r3, #104]	; 0x68
      remainingMessages = -1;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f04f 32ff 	mov.w	r2, #4294967295
 800a062:	675a      	str	r2, [r3, #116]	; 0x74
      asleep = true;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2201      	movs	r2, #1
 800a068:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
      reentrant = false;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
      sleepPin = -1;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f04f 32ff 	mov.w	r2, #4294967295
 800a07a:	67da      	str	r2, [r3, #124]	; 0x7c
      sleepPinConfigured = false;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2200      	movs	r2, #0
 800a080:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      ringPin = -1;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f04f 32ff 	mov.w	r2, #4294967295
 800a08a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      msstmWorkaroundRequested = false;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2200      	movs	r2, #0
 800a092:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
      ringAlertsEnabled = true;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2201      	movs	r2, #1
 800a09a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
      ringAsserted = false;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      lastPowerOnTime = 0UL;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      head = SBDRING;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	4a0c      	ldr	r2, [pc, #48]	; (800a0e4 <_ZN10IridiumSBDC1ER7TwoWireh+0x108>)
 800a0b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      tail = SBDRING;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	4a0a      	ldr	r2, [pc, #40]	; (800a0e4 <_ZN10IridiumSBDC1ER7TwoWireh+0x108>)
 800a0ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      nextChar = -1;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a0c4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      i2c_ser_buffer_tail = 0;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	655a      	str	r2, [r3, #84]	; 0x54
      i2c_ser_buffer_head = 0;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	659a      	str	r2, [r3, #88]	; 0x58
   }
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3714      	adds	r7, #20
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr
 800a0e2:	bf00      	nop
 800a0e4:	08022a68 	.word	0x08022a68

0800a0e8 <MRT_Iridium_Constructor>:

//C structs
struct HIRIDIUM hiridium;


void MRT_Iridium_Constructor(){
 800a0e8:	b598      	push	{r3, r4, r7, lr}
 800a0ea:	af00      	add	r7, sp, #0
	if (E_T==NULL){
 800a0ec:	4b08      	ldr	r3, [pc, #32]	; (800a110 <MRT_Iridium_Constructor+0x28>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d10b      	bne.n	800a10c <MRT_Iridium_Constructor+0x24>
		E_T = new IridiumSBD();
 800a0f4:	20a4      	movs	r0, #164	; 0xa4
 800a0f6:	f00f fa79 	bl	80195ec <_Znwj>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	461c      	mov	r4, r3
 800a0fe:	2263      	movs	r2, #99	; 0x63
 800a100:	4904      	ldr	r1, [pc, #16]	; (800a114 <MRT_Iridium_Constructor+0x2c>)
 800a102:	4620      	mov	r0, r4
 800a104:	f7ff ff6a 	bl	8009fdc <_ZN10IridiumSBDC1ER7TwoWireh>
 800a108:	4b01      	ldr	r3, [pc, #4]	; (800a110 <MRT_Iridium_Constructor+0x28>)
 800a10a:	601c      	str	r4, [r3, #0]
	}
}
 800a10c:	bf00      	nop
 800a10e:	bd98      	pop	{r3, r4, r7, pc}
 800a110:	200005a0 	.word	0x200005a0
 800a114:	200005b8 	.word	0x200005b8

0800a118 <MRT_Iridium_Destructor>:

void MRT_Iridium_Destructor(){
 800a118:	b480      	push	{r7}
 800a11a:	af00      	add	r7, sp, #0
	if (E_T!=NULL){
 800a11c:	4b05      	ldr	r3, [pc, #20]	; (800a134 <MRT_Iridium_Destructor+0x1c>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d002      	beq.n	800a12a <MRT_Iridium_Destructor+0x12>
		E_T = NULL;
 800a124:	4b03      	ldr	r3, [pc, #12]	; (800a134 <MRT_Iridium_Destructor+0x1c>)
 800a126:	2200      	movs	r2, #0
 800a128:	601a      	str	r2, [r3, #0]
	}
}
 800a12a:	bf00      	nop
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr
 800a134:	200005a0 	.word	0x200005a0

0800a138 <MRT_Iridium_Init>:


struct HIRIDIUM MRT_Iridium_Init(uint8_t timeout, uint8_t i2c_bus, void (*iridium_print)(char*)){
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	607b      	str	r3, [r7, #4]
 800a142:	460b      	mov	r3, r1
 800a144:	72fb      	strb	r3, [r7, #11]
 800a146:	4613      	mov	r3, r2
 800a148:	72bb      	strb	r3, [r7, #10]
	MRT_Iridium_Constructor();
 800a14a:	f7ff ffcd 	bl	800a0e8 <MRT_Iridium_Constructor>
	E_T->MRT_Iridium_setup(timeout, i2c_bus, iridium_print);
 800a14e:	4b0d      	ldr	r3, [pc, #52]	; (800a184 <MRT_Iridium_Init+0x4c>)
 800a150:	6818      	ldr	r0, [r3, #0]
 800a152:	7aba      	ldrb	r2, [r7, #10]
 800a154:	7af9      	ldrb	r1, [r7, #11]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f7ff fbe6 	bl	8009928 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE>
	HIRIDIUM iridium_handler;
	iridium_handler.CSQ = &MRT_Iridium_CSQ;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	4a0a      	ldr	r2, [pc, #40]	; (800a188 <MRT_Iridium_Init+0x50>)
 800a160:	60da      	str	r2, [r3, #12]
	iridium_handler.getIMEI = &MRT_Iridium_getIMEI;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	4a09      	ldr	r2, [pc, #36]	; (800a18c <MRT_Iridium_Init+0x54>)
 800a166:	601a      	str	r2, [r3, #0]
	iridium_handler.getNetworkAvailability = &MRT_Iridium_NetworkAvailability;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	4a09      	ldr	r2, [pc, #36]	; (800a190 <MRT_Iridium_Init+0x58>)
 800a16c:	609a      	str	r2, [r3, #8]
	iridium_handler.getTime = &MRT_Iridium_getTime;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	4a08      	ldr	r2, [pc, #32]	; (800a194 <MRT_Iridium_Init+0x5c>)
 800a172:	605a      	str	r2, [r3, #4]
	iridium_handler.sendMessage = &MRT_Iridium_sendMessage;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	4a08      	ldr	r2, [pc, #32]	; (800a198 <MRT_Iridium_Init+0x60>)
 800a178:	611a      	str	r2, [r3, #16]
	return iridium_handler;
 800a17a:	bf00      	nop
}
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	200005a0 	.word	0x200005a0
 800a188:	0800a1f1 	.word	0x0800a1f1
 800a18c:	0800a1cd 	.word	0x0800a1cd
 800a190:	0800a209 	.word	0x0800a209
 800a194:	0800a22d 	.word	0x0800a22d
 800a198:	0800a251 	.word	0x0800a251

0800a19c <MRT_Iridium_Deinit>:

bool MRT_Iridium_Deinit(void){
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
	bool b = E_T->MRT_Iridium_shutdown();
 800a1a2:	4b09      	ldr	r3, [pc, #36]	; (800a1c8 <MRT_Iridium_Deinit+0x2c>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7ff fcc6 	bl	8009b38 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	bf14      	ite	ne
 800a1b2:	2301      	movne	r3, #1
 800a1b4:	2300      	moveq	r3, #0
 800a1b6:	71fb      	strb	r3, [r7, #7]
	MRT_Iridium_Destructor();
 800a1b8:	f7ff ffae 	bl	800a118 <MRT_Iridium_Destructor>
	return b;
 800a1bc:	79fb      	ldrb	r3, [r7, #7]
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3708      	adds	r7, #8
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	200005a0 	.word	0x200005a0

0800a1cc <MRT_Iridium_getIMEI>:

void MRT_Iridium_ErrorMessage(uint8_t error){
	return E_T->MRT_Iridium_ErrorMessage(error);
}

bool MRT_Iridium_getIMEI(void){
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_getIMEI();
 800a1d0:	4b06      	ldr	r3, [pc, #24]	; (800a1ec <MRT_Iridium_getIMEI+0x20>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f7ff fd93 	bl	8009d00 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	bf14      	ite	ne
 800a1e0:	2301      	movne	r3, #1
 800a1e2:	2300      	moveq	r3, #0
 800a1e4:	b2db      	uxtb	r3, r3
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	200005a0 	.word	0x200005a0

0800a1f0 <MRT_Iridium_CSQ>:


int MRT_Iridium_CSQ(){
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_CSQ();
 800a1f4:	4b03      	ldr	r3, [pc, #12]	; (800a204 <MRT_Iridium_CSQ+0x14>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7ff fdcf 	bl	8009d9c <_ZN10IridiumSBD15MRT_Iridium_CSQEv>
 800a1fe:	4603      	mov	r3, r0
}
 800a200:	4618      	mov	r0, r3
 800a202:	bd80      	pop	{r7, pc}
 800a204:	200005a0 	.word	0x200005a0

0800a208 <MRT_Iridium_NetworkAvailability>:

bool MRT_Iridium_NetworkAvailability(){
 800a208:	b580      	push	{r7, lr}
 800a20a:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_NetworkAvailability();
 800a20c:	4b06      	ldr	r3, [pc, #24]	; (800a228 <MRT_Iridium_NetworkAvailability+0x20>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4618      	mov	r0, r3
 800a212:	f7ff fe09 	bl	8009e28 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv>
 800a216:	4603      	mov	r3, r0
 800a218:	2b00      	cmp	r3, #0
 800a21a:	bf14      	ite	ne
 800a21c:	2301      	movne	r3, #1
 800a21e:	2300      	moveq	r3, #0
 800a220:	b2db      	uxtb	r3, r3
}
 800a222:	4618      	mov	r0, r3
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	200005a0 	.word	0x200005a0

0800a22c <MRT_Iridium_getTime>:


bool MRT_Iridium_getTime(void){
 800a22c:	b580      	push	{r7, lr}
 800a22e:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_getTime();
 800a230:	4b06      	ldr	r3, [pc, #24]	; (800a24c <MRT_Iridium_getTime+0x20>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4618      	mov	r0, r3
 800a236:	f7ff fe1d 	bl	8009e74 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	bf14      	ite	ne
 800a240:	2301      	movne	r3, #1
 800a242:	2300      	moveq	r3, #0
 800a244:	b2db      	uxtb	r3, r3
}
 800a246:	4618      	mov	r0, r3
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	200005a0 	.word	0x200005a0

0800a250 <MRT_Iridium_sendMessage>:

bool MRT_Iridium_sendMessage(char* msg){
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
	return E_T->MRT_Iridium_sendMessage(msg);
 800a258:	4b07      	ldr	r3, [pc, #28]	; (800a278 <MRT_Iridium_sendMessage+0x28>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	6879      	ldr	r1, [r7, #4]
 800a25e:	4618      	mov	r0, r3
 800a260:	f7ff fe58 	bl	8009f14 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	bf14      	ite	ne
 800a26a:	2301      	movne	r3, #1
 800a26c:	2300      	moveq	r3, #0
 800a26e:	b2db      	uxtb	r3, r3
}
 800a270:	4618      	mov	r0, r3
 800a272:	3708      	adds	r7, #8
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}
 800a278:	200005a0 	.word	0x200005a0

0800a27c <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 800a27c:	b590      	push	{r4, r7, lr}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d101      	bne.n	800a290 <_ZN5Print5writeEPKc+0x14>
 800a28c:	2300      	movs	r3, #0
 800a28e:	e00d      	b.n	800a2ac <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	3304      	adds	r3, #4
 800a296:	681c      	ldr	r4, [r3, #0]
 800a298:	6838      	ldr	r0, [r7, #0]
 800a29a:	f7f5 ffb3 	bl	8000204 <strlen>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	6839      	ldr	r1, [r7, #0]
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	47a0      	blx	r4
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	bf00      	nop
    }
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd90      	pop	{r4, r7, pc}

0800a2b4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	617b      	str	r3, [r7, #20]
  while (size--) {
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	1e5a      	subs	r2, r3, #1
 800a2c8:	607a      	str	r2, [r7, #4]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	bf14      	ite	ne
 800a2ce:	2301      	movne	r3, #1
 800a2d0:	2300      	moveq	r3, #0
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00e      	beq.n	800a2f6 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	1c59      	adds	r1, r3, #1
 800a2e2:	60b9      	str	r1, [r7, #8]
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	4790      	blx	r2
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	617b      	str	r3, [r7, #20]
  while (size--) {
 800a2f4:	e7e6      	b.n	800a2c4 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 800a2f6:	697b      	ldr	r3, [r7, #20]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3718      	adds	r7, #24
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 800a30a:	6839      	ldr	r1, [r7, #0]
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 f805 	bl	800a31c <_ZN5Print5printEPKc>
 800a312:	4603      	mov	r3, r0
}
 800a314:	4618      	mov	r0, r3
 800a316:	3708      	adds	r7, #8
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  return write(str);
 800a326:	6839      	ldr	r1, [r7, #0]
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f7ff ffa7 	bl	800a27c <_ZN5Print5writeEPKc>
 800a32e:	4603      	mov	r3, r0
}
 800a330:	4618      	mov	r0, r3
 800a332:	3708      	adds	r7, #8
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	460b      	mov	r3, r1
 800a342:	70fb      	strb	r3, [r7, #3]
  return write(c);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	78fa      	ldrb	r2, [r7, #3]
 800a34c:	4611      	mov	r1, r2
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	4798      	blx	r3
 800a352:	4603      	mov	r3, r0
}
 800a354:	4618      	mov	r0, r3
 800a356:	3708      	adds	r7, #8
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	68b9      	ldr	r1, [r7, #8]
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	f000 f805 	bl	800a37c <_ZN5Print5printEli>
 800a372:	4603      	mov	r3, r0
}
 800a374:	4618      	mov	r0, r3
 800a376:	3710      	adds	r7, #16
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b086      	sub	sp, #24
 800a380:	af00      	add	r7, sp, #0
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d109      	bne.n	800a3a2 <_ZN5Print5printEli+0x26>
    return write(n);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	68ba      	ldr	r2, [r7, #8]
 800a396:	b2d2      	uxtb	r2, r2
 800a398:	4611      	mov	r1, r2
 800a39a:	68f8      	ldr	r0, [r7, #12]
 800a39c:	4798      	blx	r3
 800a39e:	4603      	mov	r3, r0
 800a3a0:	e029      	b.n	800a3f6 <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2b0a      	cmp	r3, #10
 800a3a6:	d11d      	bne.n	800a3e4 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	da12      	bge.n	800a3d4 <_ZN5Print5printEli+0x58>
      int t = print('-');
 800a3ae:	212d      	movs	r1, #45	; 0x2d
 800a3b0:	68f8      	ldr	r0, [r7, #12]
 800a3b2:	f7ff ffc1 	bl	800a338 <_ZN5Print5printEc>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	617b      	str	r3, [r7, #20]
      n = -n;
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	425b      	negs	r3, r3
 800a3be:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	220a      	movs	r2, #10
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f000 f819 	bl	800a3fe <_ZN5Print11printNumberEmh>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	e010      	b.n	800a3f6 <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	220a      	movs	r2, #10
 800a3d8:	4619      	mov	r1, r3
 800a3da:	68f8      	ldr	r0, [r7, #12]
 800a3dc:	f000 f80f 	bl	800a3fe <_ZN5Print11printNumberEmh>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	e008      	b.n	800a3f6 <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	b2d2      	uxtb	r2, r2
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	68f8      	ldr	r0, [r7, #12]
 800a3ee:	f000 f806 	bl	800a3fe <_ZN5Print11printNumberEmh>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	bf00      	nop
  }
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3718      	adds	r7, #24
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}

0800a3fe <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b090      	sub	sp, #64	; 0x40
 800a402:	af00      	add	r7, sp, #0
 800a404:	60f8      	str	r0, [r7, #12]
 800a406:	60b9      	str	r1, [r7, #8]
 800a408:	4613      	mov	r3, r2
 800a40a:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 800a40c:	f107 0314 	add.w	r3, r7, #20
 800a410:	3320      	adds	r3, #32
 800a412:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 800a414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a416:	2200      	movs	r2, #0
 800a418:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 800a41a:	79fb      	ldrb	r3, [r7, #7]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d801      	bhi.n	800a424 <_ZN5Print11printNumberEmh+0x26>
 800a420:	230a      	movs	r3, #10
 800a422:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 800a428:	79fb      	ldrb	r3, [r7, #7]
 800a42a:	68ba      	ldr	r2, [r7, #8]
 800a42c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a430:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 800a432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a434:	b2da      	uxtb	r2, r3
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	79f9      	ldrb	r1, [r7, #7]
 800a43c:	fb11 f303 	smulbb	r3, r1, r3
 800a440:	b2db      	uxtb	r3, r3
 800a442:	1ad3      	subs	r3, r2, r3
 800a444:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 800a448:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a44c:	2b09      	cmp	r3, #9
 800a44e:	d804      	bhi.n	800a45a <_ZN5Print11printNumberEmh+0x5c>
 800a450:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a454:	3330      	adds	r3, #48	; 0x30
 800a456:	b2db      	uxtb	r3, r3
 800a458:	e003      	b.n	800a462 <_ZN5Print11printNumberEmh+0x64>
 800a45a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a45e:	3337      	adds	r3, #55	; 0x37
 800a460:	b2db      	uxtb	r3, r3
 800a462:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a464:	3a01      	subs	r2, #1
 800a466:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a468:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a46a:	7013      	strb	r3, [r2, #0]
  } while(n);
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d000      	beq.n	800a474 <_ZN5Print11printNumberEmh+0x76>
  do {
 800a472:	e7d7      	b.n	800a424 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 800a474:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a476:	68f8      	ldr	r0, [r7, #12]
 800a478:	f7ff ff00 	bl	800a27c <_ZN5Print5writeEPKc>
 800a47c:	4603      	mov	r3, r0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3740      	adds	r7, #64	; 0x40
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
	...

0800a488 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	4a06      	ldr	r2, [pc, #24]	; (800a4ac <_ZN5PrintC1Ev+0x24>)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	601a      	str	r2, [r3, #0]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	605a      	str	r2, [r3, #4]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	370c      	adds	r7, #12
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr
 800a4aa:	bf00      	nop
 800a4ac:	08022a7c 	.word	0x08022a7c

0800a4b0 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b082      	sub	sp, #8
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f7ff ffe4 	bl	800a488 <_ZN5PrintC1Ev>
 800a4c0:	4a05      	ldr	r2, [pc, #20]	; (800a4d8 <_ZN6StreamC1Ev+0x28>)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	601a      	str	r2, [r3, #0]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a4cc:	609a      	str	r2, [r3, #8]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3708      	adds	r7, #8
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	08022aac 	.word	0x08022aac

0800a4dc <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7ff ffe1 	bl	800a4b0 <_ZN6StreamC1Ev>
 800a4ee:	4a16      	ldr	r2, [pc, #88]	; (800a548 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	683a      	ldr	r2, [r7, #0]
 800a4f8:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	3390      	adds	r3, #144	; 0x90
 800a4fe:	2220      	movs	r2, #32
 800a500:	2100      	movs	r1, #0
 800a502:	4618      	mov	r0, r3
 800a504:	f010 fae0 	bl	801aac8 <memset>
  rxBufferIndex = 0;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2200      	movs	r2, #0
 800a53a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4618      	mov	r0, r3
 800a542:	3708      	adds	r7, #8
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	08022a8c 	.word	0x08022a8c

0800a54c <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af02      	add	r7, sp, #8
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	4608      	mov	r0, r1
 800a556:	4611      	mov	r1, r2
 800a558:	461a      	mov	r2, r3
 800a55a:	4603      	mov	r3, r0
 800a55c:	70fb      	strb	r3, [r7, #3]
 800a55e:	460b      	mov	r3, r1
 800a560:	70bb      	strb	r3, [r7, #2]
 800a562:	4613      	mov	r3, r2
 800a564:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 fc24 	bl	800adb4 <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 800a56c:	78bb      	ldrb	r3, [r7, #2]
 800a56e:	2b20      	cmp	r3, #32
 800a570:	d901      	bls.n	800a576 <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 800a572:	2320      	movs	r3, #32
 800a574:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 800a576:	78fb      	ldrb	r3, [r7, #3]
 800a578:	005b      	lsls	r3, r3, #1
 800a57a:	b2d9      	uxtb	r1, r3
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800a582:	78b8      	ldrb	r0, [r7, #2]
 800a584:	787b      	ldrb	r3, [r7, #1]
 800a586:	9300      	str	r3, [sp, #0]
 800a588:	4603      	mov	r3, r0
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 f9cf 	bl	800a92e <_ZN7TwoWire15i2c_master_readEhPchh>
 800a590:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	2b00      	cmp	r3, #0
 800a596:	da02      	bge.n	800a59e <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 800a598:	2300      	movs	r3, #0
 800a59a:	73fb      	strb	r3, [r7, #15]
 800a59c:	e001      	b.n	800a5a2 <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	7bfa      	ldrb	r2, [r7, #15]
 800a5ae:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 fbcc 	bl	800ad50 <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 800a5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3710      	adds	r7, #16
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b082      	sub	sp, #8
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	70fb      	strb	r3, [r7, #3]
 800a5ce:	4613      	mov	r3, r2
 800a5d0:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 800a5d2:	78ba      	ldrb	r2, [r7, #2]
 800a5d4:	78f9      	ldrb	r1, [r7, #3]
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f7ff ffb7 	bl	800a54c <_ZN7TwoWire11requestFromEhhh>
 800a5de:	4603      	mov	r3, r0
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	78fa      	ldrb	r2, [r7, #3]
 800a600:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800a612:	bf00      	nop
 800a614:	370c      	adds	r7, #12
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr

0800a61e <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 800a61e:	b580      	push	{r7, lr}
 800a620:	b086      	sub	sp, #24
 800a622:	af02      	add	r7, sp, #8
 800a624:	6078      	str	r0, [r7, #4]
 800a626:	460b      	mov	r3, r1
 800a628:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 fbc2 	bl	800adb4 <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	7c1b      	ldrb	r3, [r3, #16]
 800a634:	0059      	lsls	r1, r3, #1
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f103 0211 	add.w	r2, r3, #17
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a642:	4618      	mov	r0, r3
 800a644:	78fb      	ldrb	r3, [r7, #3]
 800a646:	9300      	str	r3, [sp, #0]
 800a648:	4603      	mov	r3, r0
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f000 fa00 	bl	800aa50 <_ZN7TwoWire16i2c_master_writeEiPKcii>
 800a650:	4603      	mov	r3, r0
 800a652:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 fb6f 	bl	800ad50 <_ZN7TwoWire15enableInterruptEv>

  return ret;
 800a672:	7bfb      	ldrb	r3, [r7, #15]
}
 800a674:	4618      	mov	r0, r3
 800a676:	3710      	adds	r7, #16
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 800a684:	2101      	movs	r1, #1
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f7ff ffc9 	bl	800a61e <_ZN7TwoWire15endTransmissionEh>
 800a68c:	4603      	mov	r3, r0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3708      	adds	r7, #8
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 800a696:	b580      	push	{r7, lr}
 800a698:	b082      	sub	sp, #8
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
 800a69e:	460b      	mov	r3, r1
 800a6a0:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d01d      	beq.n	800a6e8 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a6b2:	2b1f      	cmp	r3, #31
 800a6b4:	d901      	bls.n	800a6ba <_ZN7TwoWire5writeEh+0x24>
      return 0;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	e028      	b.n	800a70c <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	78fa      	ldrb	r2, [r7, #3]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	440b      	add	r3, r1
 800a6c8:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	b2da      	uxtb	r2, r3
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800a6e6:	e010      	b.n	800a70a <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 fb63 	bl	800adb4 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 800a6ee:	1cfb      	adds	r3, r7, #3
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 fa95 	bl	800ac24 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 fb28 	bl	800ad50 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	333c      	adds	r3, #60	; 0x3c
 800a704:	4618      	mov	r0, r3
 800a706:	f003 fac5 	bl	800dc94 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 800a70a:	2301      	movs	r3, #1
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3708      	adds	r7, #8
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b086      	sub	sp, #24
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	607a      	str	r2, [r7, #4]
  if(transmitting){
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800a726:	2b00      	cmp	r3, #0
 800a728:	d013      	beq.n	800a752 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 800a72a:	2300      	movs	r3, #0
 800a72c:	617b      	str	r3, [r7, #20]
 800a72e:	697a      	ldr	r2, [r7, #20]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	429a      	cmp	r2, r3
 800a734:	d21e      	bcs.n	800a774 <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	68b9      	ldr	r1, [r7, #8]
 800a73e:	697a      	ldr	r2, [r7, #20]
 800a740:	440a      	add	r2, r1
 800a742:	7812      	ldrb	r2, [r2, #0]
 800a744:	4611      	mov	r1, r2
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	3301      	adds	r3, #1
 800a74e:	617b      	str	r3, [r7, #20]
 800a750:	e7ed      	b.n	800a72e <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f000 fb2e 	bl	800adb4 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	461a      	mov	r2, r3
 800a75c:	68b9      	ldr	r1, [r7, #8]
 800a75e:	68f8      	ldr	r0, [r7, #12]
 800a760:	f000 fa60 	bl	800ac24 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	f000 faf3 	bl	800ad50 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	333c      	adds	r3, #60	; 0x3c
 800a76e:	4618      	mov	r0, r3
 800a770:	f003 fa90 	bl	800dc94 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 800a774:	687b      	ldr	r3, [r7, #4]
}
 800a776:	4618      	mov	r0, r3
 800a778:	3718      	adds	r7, #24
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 800a77e:	b480      	push	{r7}
 800a780:	b083      	sub	sp, #12
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	461a      	mov	r2, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800a796:	b2db      	uxtb	r3, r3
 800a798:	1ad3      	subs	r3, r2, r3
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	370c      	adds	r7, #12
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr

0800a7a6 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 800a7a6:	b480      	push	{r7}
 800a7a8:	b085      	sub	sp, #20
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
  int value = -1;
 800a7ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a7b2:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800a7ba:	b2da      	uxtb	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	bf34      	ite	cc
 800a7c8:	2301      	movcc	r3, #1
 800a7ca:	2300      	movcs	r3, #0
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d012      	beq.n	800a7f8 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	461a      	mov	r2, r3
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	4413      	add	r3, r2
 800a7e0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800a7e4:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	b2da      	uxtb	r2, r3
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3714      	adds	r7, #20
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr

0800a806 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 800a806:	b480      	push	{r7}
 800a808:	b085      	sub	sp, #20
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
  int value = -1;
 800a80e:	f04f 33ff 	mov.w	r3, #4294967295
 800a812:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800a81a:	b2da      	uxtb	r2, r3
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a822:	b2db      	uxtb	r3, r3
 800a824:	429a      	cmp	r2, r3
 800a826:	bf34      	ite	cc
 800a828:	2301      	movcc	r3, #1
 800a82a:	2300      	movcs	r3, #0
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d009      	beq.n	800a846 <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	461a      	mov	r2, r3
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4413      	add	r3, r2
 800a840:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800a844:	60fb      	str	r3, [r7, #12]
  }

  return value;
 800a846:	68fb      	ldr	r3, [r7, #12]
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3714      	adds	r7, #20
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 800a85c:	bf00      	nop
 800a85e:	370c      	adds	r7, #12
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 800a868:	b480      	push	{r7}
 800a86a:	b085      	sub	sp, #20
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a874:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a87a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a87e:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 800a880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a884:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a88e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a892:	bf0c      	ite	eq
 800a894:	2301      	moveq	r3, #1
 800a896:	2300      	movne	r3, #0
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00b      	beq.n	800a8b6 <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	1e5a      	subs	r2, r3, #1
 800a8a2:	60fa      	str	r2, [r7, #12]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	bf0c      	ite	eq
 800a8a8:	2301      	moveq	r3, #1
 800a8aa:	2300      	movne	r3, #0
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d0e9      	beq.n	800a886 <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e021      	b.n	800a8fa <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 800a8c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8c6:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8cc:	695b      	ldr	r3, [r3, #20]
 800a8ce:	f003 0301 	and.w	r3, r3, #1
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	bf14      	ite	ne
 800a8d6:	2301      	movne	r3, #1
 800a8d8:	2300      	moveq	r3, #0
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d00b      	beq.n	800a8f8 <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	1e5a      	subs	r2, r3, #1
 800a8e4:	60fa      	str	r2, [r7, #12]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	bf0c      	ite	eq
 800a8ea:	2301      	moveq	r3, #1
 800a8ec:	2300      	movne	r3, #0
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d0e9      	beq.n	800a8c8 <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e000      	b.n	800a8fa <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3714      	adds	r7, #20
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr

0800a906 <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 800a906:	b480      	push	{r7}
 800a908:	b085      	sub	sp, #20
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a912:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	601a      	str	r2, [r3, #0]

    return 0;
 800a920:	2300      	movs	r3, #0
}
 800a922:	4618      	mov	r0, r3
 800a924:	3714      	adds	r7, #20
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr

0800a92e <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 800a92e:	b580      	push	{r7, lr}
 800a930:	b08a      	sub	sp, #40	; 0x28
 800a932:	af00      	add	r7, sp, #0
 800a934:	60f8      	str	r0, [r7, #12]
 800a936:	607a      	str	r2, [r7, #4]
 800a938:	461a      	mov	r2, r3
 800a93a:	460b      	mov	r3, r1
 800a93c:	72fb      	strb	r3, [r7, #11]
 800a93e:	4613      	mov	r3, r2
 800a940:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a946:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 800a948:	68f8      	ldr	r0, [r7, #12]
 800a94a:	f7ff ff8d 	bl	800a868 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 800a94e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a952:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a958:	695b      	ldr	r3, [r3, #20]
 800a95a:	f003 0301 	and.w	r3, r3, #1
 800a95e:	2b01      	cmp	r3, #1
 800a960:	bf14      	ite	ne
 800a962:	2301      	movne	r3, #1
 800a964:	2300      	moveq	r3, #0
 800a966:	b2db      	uxtb	r3, r3
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d008      	beq.n	800a97e <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 800a96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96e:	3b01      	subs	r3, #1
 800a970:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 800a972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a974:	2b00      	cmp	r3, #0
 800a976:	d1ed      	bne.n	800a954 <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 800a978:	f04f 33ff 	mov.w	r3, #4294967295
 800a97c:	e064      	b.n	800aa48 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 800a97e:	7afb      	ldrb	r3, [r7, #11]
 800a980:	f043 0301 	orr.w	r3, r3, #1
 800a984:	b2db      	uxtb	r3, r3
 800a986:	461a      	mov	r2, r3
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 800a98c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a990:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a996:	695b      	ldr	r3, [r3, #20]
 800a998:	f003 0302 	and.w	r3, r3, #2
 800a99c:	2b02      	cmp	r3, #2
 800a99e:	bf14      	ite	ne
 800a9a0:	2301      	movne	r3, #1
 800a9a2:	2300      	moveq	r3, #0
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d008      	beq.n	800a9bc <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 800a9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ac:	3b01      	subs	r3, #1
 800a9ae:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 800a9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d1ed      	bne.n	800a992 <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 800a9b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a9ba:	e045      	b.n	800aa48 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 800a9bc:	2300      	movs	r3, #0
 800a9be:	613b      	str	r3, [r7, #16]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9c4:	695b      	ldr	r3, [r3, #20]
 800a9c6:	613b      	str	r3, [r7, #16]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9cc:	699b      	ldr	r3, [r3, #24]
 800a9ce:	613b      	str	r3, [r7, #16]
 800a9d0:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	623b      	str	r3, [r7, #32]
 800a9d6:	7abb      	ldrb	r3, [r7, #10]
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	6a3a      	ldr	r2, [r7, #32]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	da17      	bge.n	800aa10 <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 800a9e0:	f107 0314 	add.w	r3, r7, #20
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	68f8      	ldr	r0, [r7, #12]
 800a9ea:	f000 f8a4 	bl	800ab36 <_ZN7TwoWire20i2c_master_byte_readEPii>
 800a9ee:	61b8      	str	r0, [r7, #24]
        if(ret)
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d002      	beq.n	800a9fc <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 800a9f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a9fa:	e025      	b.n	800aa48 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 800a9fc:	6979      	ldr	r1, [r7, #20]
 800a9fe:	6a3b      	ldr	r3, [r7, #32]
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	4413      	add	r3, r2
 800aa04:	b2ca      	uxtb	r2, r1
 800aa06:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 800aa08:	6a3b      	ldr	r3, [r7, #32]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	623b      	str	r3, [r7, #32]
 800aa0e:	e7e2      	b.n	800a9d6 <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 800aa10:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d002      	beq.n	800aa1e <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 800aa18:	68f8      	ldr	r0, [r7, #12]
 800aa1a:	f7ff ff74 	bl	800a906 <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 800aa1e:	f107 0314 	add.w	r3, r7, #20
 800aa22:	2201      	movs	r2, #1
 800aa24:	4619      	mov	r1, r3
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	f000 f885 	bl	800ab36 <_ZN7TwoWire20i2c_master_byte_readEPii>
 800aa2c:	61b8      	str	r0, [r7, #24]
    if(ret)
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d002      	beq.n	800aa3a <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 800aa34:	f04f 33ff 	mov.w	r3, #4294967295
 800aa38:	e006      	b.n	800aa48 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 800aa3a:	6979      	ldr	r1, [r7, #20]
 800aa3c:	6a3b      	ldr	r3, [r7, #32]
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	4413      	add	r3, r2
 800aa42:	b2ca      	uxtb	r2, r1
 800aa44:	701a      	strb	r2, [r3, #0]

    return length;
 800aa46:	7abb      	ldrb	r3, [r7, #10]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3728      	adds	r7, #40	; 0x28
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b088      	sub	sp, #32
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	607a      	str	r2, [r7, #4]
 800aa5c:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa62:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 800aa64:	68f8      	ldr	r0, [r7, #12]
 800aa66:	f7ff feff 	bl	800a868 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 800aa6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa6e:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa74:	695b      	ldr	r3, [r3, #20]
 800aa76:	f003 0301 	and.w	r3, r3, #1
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	bf14      	ite	ne
 800aa7e:	2301      	movne	r3, #1
 800aa80:	2300      	moveq	r3, #0
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d007      	beq.n	800aa98 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	3b01      	subs	r3, #1
 800aa8c:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 800aa8e:	69fb      	ldr	r3, [r7, #28]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d1ed      	bne.n	800aa70 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 800aa94:	2304      	movs	r3, #4
 800aa96:	e04a      	b.n	800ab2e <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 800aaa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aaa8:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaae:	695b      	ldr	r3, [r3, #20]
 800aab0:	f003 0302 	and.w	r3, r3, #2
 800aab4:	2b02      	cmp	r3, #2
 800aab6:	bf14      	ite	ne
 800aab8:	2301      	movne	r3, #1
 800aaba:	2300      	moveq	r3, #0
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d007      	beq.n	800aad2 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 800aac2:	69fb      	ldr	r3, [r7, #28]
 800aac4:	3b01      	subs	r3, #1
 800aac6:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 800aac8:	69fb      	ldr	r3, [r7, #28]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1ed      	bne.n	800aaaa <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 800aace:	2302      	movs	r3, #2
 800aad0:	e02d      	b.n	800ab2e <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 800aad2:	2300      	movs	r3, #0
 800aad4:	613b      	str	r3, [r7, #16]
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aada:	695b      	ldr	r3, [r3, #20]
 800aadc:	613b      	str	r3, [r7, #16]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aae2:	699b      	ldr	r3, [r3, #24]
 800aae4:	613b      	str	r3, [r7, #16]
 800aae6:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 800aae8:	2300      	movs	r3, #0
 800aaea:	61bb      	str	r3, [r7, #24]
 800aaec:	69ba      	ldr	r2, [r7, #24]
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	da15      	bge.n	800ab20 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 800aaf4:	69bb      	ldr	r3, [r7, #24]
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	4413      	add	r3, r2
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	4619      	mov	r1, r3
 800aafe:	68f8      	ldr	r0, [r7, #12]
 800ab00:	f000 f85a 	bl	800abb8 <_ZN7TwoWire21i2c_master_byte_writeEi>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	bf14      	ite	ne
 800ab0a:	2301      	movne	r3, #1
 800ab0c:	2300      	moveq	r3, #0
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d001      	beq.n	800ab18 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 800ab14:	2303      	movs	r3, #3
 800ab16:	e00a      	b.n	800ab2e <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	61bb      	str	r3, [r7, #24]
 800ab1e:	e7e5      	b.n	800aaec <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 800ab20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d002      	beq.n	800ab2c <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	f7ff feed 	bl	800a906 <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 800ab2c:	2300      	movs	r3, #0
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3720      	adds	r7, #32
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 800ab36:	b480      	push	{r7}
 800ab38:	b087      	sub	sp, #28
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	60f8      	str	r0, [r7, #12]
 800ab3e:	60b9      	str	r1, [r7, #8]
 800ab40:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab46:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d006      	beq.n	800ab5c <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	601a      	str	r2, [r3, #0]
 800ab5a:	e005      	b.n	800ab68 <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 800ab68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab6c:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab72:	695b      	ldr	r3, [r3, #20]
 800ab74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab78:	2b40      	cmp	r3, #64	; 0x40
 800ab7a:	bf14      	ite	ne
 800ab7c:	2301      	movne	r3, #1
 800ab7e:	2300      	moveq	r3, #0
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00c      	beq.n	800aba0 <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	1e5a      	subs	r2, r3, #1
 800ab8a:	617a      	str	r2, [r7, #20]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	bf0c      	ite	eq
 800ab90:	2301      	moveq	r3, #1
 800ab92:	2300      	movne	r3, #0
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d0e9      	beq.n	800ab6e <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 800ab9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab9e:	e005      	b.n	800abac <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	461a      	mov	r2, r3
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	601a      	str	r2, [r3, #0]

    return 0;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	4618      	mov	r0, r3
 800abae:	371c      	adds	r7, #28
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abc6:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	461a      	mov	r2, r3
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 800abd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abd6:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abdc:	695b      	ldr	r3, [r3, #20]
 800abde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abe2:	2b80      	cmp	r3, #128	; 0x80
 800abe4:	d008      	beq.n	800abf8 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abea:	695b      	ldr	r3, [r3, #20]
 800abec:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 800abf0:	2b04      	cmp	r3, #4
 800abf2:	d001      	beq.n	800abf8 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 800abf4:	2301      	movs	r3, #1
 800abf6:	e000      	b.n	800abfa <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 800abf8:	2300      	movs	r3, #0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d00b      	beq.n	800ac16 <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	1e5a      	subs	r2, r3, #1
 800ac02:	60fa      	str	r2, [r7, #12]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	bf0c      	ite	eq
 800ac08:	2301      	moveq	r3, #1
 800ac0a:	2300      	movne	r3, #0
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d0e2      	beq.n	800abd8 <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 800ac12:	2300      	movs	r3, #0
 800ac14:	e000      	b.n	800ac18 <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 800ac16:	2301      	movs	r3, #1
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3714      	adds	r7, #20
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b089      	sub	sp, #36	; 0x24
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	60b9      	str	r1, [r7, #8]
 800ac2e:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 800ac30:	2300      	movs	r3, #0
 800ac32:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac38:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	dd41      	ble.n	800acc4 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 800ac40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac44:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac4a:	695b      	ldr	r3, [r3, #20]
 800ac4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac50:	2b80      	cmp	r3, #128	; 0x80
 800ac52:	bf14      	ite	ne
 800ac54:	2301      	movne	r3, #1
 800ac56:	2300      	moveq	r3, #0
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d008      	beq.n	800ac70 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 800ac5e:	69fb      	ldr	r3, [r7, #28]
 800ac60:	3b01      	subs	r3, #1
 800ac62:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 800ac64:	69fb      	ldr	r3, [r7, #28]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d1ed      	bne.n	800ac46 <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 800ac6a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac6e:	e068      	b.n	800ad42 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	1c5a      	adds	r2, r3, #1
 800ac74:	60ba      	str	r2, [r7, #8]
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	461a      	mov	r2, r3
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	611a      	str	r2, [r3, #16]
        length--;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	3b01      	subs	r3, #1
 800ac82:	607b      	str	r3, [r7, #4]
        size++;
 800ac84:	69bb      	ldr	r3, [r7, #24]
 800ac86:	3301      	adds	r3, #1
 800ac88:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac8e:	695b      	ldr	r3, [r3, #20]
 800ac90:	f003 0304 	and.w	r3, r3, #4
 800ac94:	2b04      	cmp	r3, #4
 800ac96:	d104      	bne.n	800aca2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d001      	beq.n	800aca2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e000      	b.n	800aca4 <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 800aca2:	2300      	movs	r3, #0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d0c8      	beq.n	800ac3a <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	1c5a      	adds	r2, r3, #1
 800acac:	60ba      	str	r2, [r7, #8]
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	461a      	mov	r2, r3
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	611a      	str	r2, [r3, #16]
            length--;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	3b01      	subs	r3, #1
 800acba:	607b      	str	r3, [r7, #4]
            size++;
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	3301      	adds	r3, #1
 800acc0:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 800acc2:	e7ba      	b.n	800ac3a <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 800acc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acc8:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acce:	695b      	ldr	r3, [r3, #20]
 800acd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acd8:	bf14      	ite	ne
 800acda:	2301      	movne	r3, #1
 800acdc:	2300      	moveq	r3, #0
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d008      	beq.n	800acf6 <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	3b01      	subs	r3, #1
 800ace8:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 800acea:	69fb      	ldr	r3, [r7, #28]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d1ec      	bne.n	800acca <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 800acf0:	f04f 33ff 	mov.w	r3, #4294967295
 800acf4:	e025      	b.n	800ad42 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acfa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800acfe:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 800ad00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad04:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad0a:	699b      	ldr	r3, [r3, #24]
 800ad0c:	f003 0302 	and.w	r3, r3, #2
 800ad10:	2b02      	cmp	r3, #2
 800ad12:	bf0c      	ite	eq
 800ad14:	2301      	moveq	r3, #1
 800ad16:	2300      	movne	r3, #0
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d008      	beq.n	800ad30 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	3b01      	subs	r3, #1
 800ad22:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d1ed      	bne.n	800ad06 <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 800ad2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad2e:	e008      	b.n	800ad42 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2220      	movs	r2, #32
 800ad34:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 800ad40:	69bb      	ldr	r3, [r7, #24]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3724      	adds	r7, #36	; 0x24
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr
	...

0800ad50 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad5c:	4a12      	ldr	r2, [pc, #72]	; (800ada8 <_ZN7TwoWire15enableInterruptEv+0x58>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d106      	bne.n	800ad70 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 800ad62:	2049      	movs	r0, #73	; 0x49
 800ad64:	f002 f920 	bl	800cfa8 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800ad68:	2048      	movs	r0, #72	; 0x48
 800ad6a:	f002 f91d 	bl	800cfa8 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 800ad6e:	e016      	b.n	800ad9e <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad74:	4a0d      	ldr	r2, [pc, #52]	; (800adac <_ZN7TwoWire15enableInterruptEv+0x5c>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d106      	bne.n	800ad88 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800ad7a:	2022      	movs	r0, #34	; 0x22
 800ad7c:	f002 f914 	bl	800cfa8 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800ad80:	2021      	movs	r0, #33	; 0x21
 800ad82:	f002 f911 	bl	800cfa8 <HAL_NVIC_EnableIRQ>
}
 800ad86:	e00a      	b.n	800ad9e <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad8c:	4a08      	ldr	r2, [pc, #32]	; (800adb0 <_ZN7TwoWire15enableInterruptEv+0x60>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d105      	bne.n	800ad9e <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800ad92:	2020      	movs	r0, #32
 800ad94:	f002 f908 	bl	800cfa8 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800ad98:	201f      	movs	r0, #31
 800ad9a:	f002 f905 	bl	800cfa8 <HAL_NVIC_EnableIRQ>
}
 800ad9e:	bf00      	nop
 800ada0:	3708      	adds	r7, #8
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	40005c00 	.word	0x40005c00
 800adac:	40005800 	.word	0x40005800
 800adb0:	40005400 	.word	0x40005400

0800adb4 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b082      	sub	sp, #8
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adc0:	4a12      	ldr	r2, [pc, #72]	; (800ae0c <_ZN7TwoWire16disableInterruptEv+0x58>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d106      	bne.n	800add4 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 800adc6:	2049      	movs	r0, #73	; 0x49
 800adc8:	f002 f8fc 	bl	800cfc4 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 800adcc:	2048      	movs	r0, #72	; 0x48
 800adce:	f002 f8f9 	bl	800cfc4 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 800add2:	e016      	b.n	800ae02 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800add8:	4a0d      	ldr	r2, [pc, #52]	; (800ae10 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d106      	bne.n	800adec <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 800adde:	2022      	movs	r0, #34	; 0x22
 800ade0:	f002 f8f0 	bl	800cfc4 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 800ade4:	2021      	movs	r0, #33	; 0x21
 800ade6:	f002 f8ed 	bl	800cfc4 <HAL_NVIC_DisableIRQ>
}
 800adea:	e00a      	b.n	800ae02 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adf0:	4a08      	ldr	r2, [pc, #32]	; (800ae14 <_ZN7TwoWire16disableInterruptEv+0x60>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d105      	bne.n	800ae02 <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800adf6:	2020      	movs	r0, #32
 800adf8:	f002 f8e4 	bl	800cfc4 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800adfc:	201f      	movs	r0, #31
 800adfe:	f002 f8e1 	bl	800cfc4 <HAL_NVIC_DisableIRQ>
}
 800ae02:	bf00      	nop
 800ae04:	3708      	adds	r7, #8
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	40005c00 	.word	0x40005c00
 800ae10:	40005800 	.word	0x40005800
 800ae14:	40005400 	.word	0x40005400

0800ae18 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2b01      	cmp	r3, #1
 800ae26:	d110      	bne.n	800ae4a <_Z41__static_initialization_and_destruction_0ii+0x32>
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d10b      	bne.n	800ae4a <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 800ae32:	4908      	ldr	r1, [pc, #32]	; (800ae54 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800ae34:	4808      	ldr	r0, [pc, #32]	; (800ae58 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800ae36:	f7ff fb51 	bl	800a4dc <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 800ae3a:	4908      	ldr	r1, [pc, #32]	; (800ae5c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800ae3c:	4808      	ldr	r0, [pc, #32]	; (800ae60 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800ae3e:	f7ff fb4d 	bl	800a4dc <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 800ae42:	4908      	ldr	r1, [pc, #32]	; (800ae64 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800ae44:	4808      	ldr	r0, [pc, #32]	; (800ae68 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800ae46:	f7ff fb49 	bl	800a4dc <_ZN7TwoWireC1EP11I2C_TypeDef>
 800ae4a:	bf00      	nop
 800ae4c:	3708      	adds	r7, #8
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop
 800ae54:	40005400 	.word	0x40005400
 800ae58:	200005b8 	.word	0x200005b8
 800ae5c:	40005800 	.word	0x40005800
 800ae60:	20000670 	.word	0x20000670
 800ae64:	40005c00 	.word	0x40005c00
 800ae68:	20000728 	.word	0x20000728

0800ae6c <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ae74:	2001      	movs	r0, #1
 800ae76:	f7ff ffcf 	bl	800ae18 <_Z41__static_initialization_and_destruction_0ii>
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <MRT_radio_tx>:
#include <iwdg.h>
#include <string.h>
#include <sx126x.h>


void MRT_radio_tx(char* buffer){
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
	#if XTEND_ //Xtend send
		if (strlen(buffer) < XTEND_BUFFER_SIZE)	HAL_UART_Transmit(&XTEND_UART,(uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
	#elif SRADIO_ //SRadio send TODO
		if (strlen(buffer) < SRADIO_BUFFER_SIZE){
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f7f5 f9bd 	bl	8000204 <strlen>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	2bff      	cmp	r3, #255	; 0xff
 800ae8e:	d80a      	bhi.n	800aea6 <MRT_radio_tx+0x2a>
			//sx126x_set_tx(&SRADIO_SPI, 1000, SRADIO_BUFFER_SIZE);
			Tx_setup();
 800ae90:	f000 fb1c 	bl	800b4cc <Tx_setup>
			TxProtocol((uint8_t*) buffer, strlen(buffer));
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f7f5 f9b5 	bl	8000204 <strlen>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	4619      	mov	r1, r3
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 fc27 	bl	800b6f4 <TxProtocol>
		}
	#endif

	print((char*) "Radio sending:\t");
 800aea6:	4805      	ldr	r0, [pc, #20]	; (800aebc <MRT_radio_tx+0x40>)
 800aea8:	f7f6 f92e 	bl	8001108 <print>
	println(buffer);
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f7f6 f90d 	bl	80010cc <println>
}
 800aeb2:	bf00      	nop
 800aeb4:	3708      	adds	r7, #8
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	080227ec 	.word	0x080227ec

0800aec0 <MRT_radio_rx>:


void MRT_radio_rx(char* buffer, uint8_t size, uint16_t timeout){
 800aec0:	b5b0      	push	{r4, r5, r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	460b      	mov	r3, r1
 800aeca:	70fb      	strb	r3, [r7, #3]
 800aecc:	4613      	mov	r3, r2
 800aece:	803b      	strh	r3, [r7, #0]
	#if XTEND_ //Xtend receive
		if (size < XTEND_BUFFER_SIZE){
			HAL_UART_Receive(&XTEND_UART,(uint8_t*) buffer, sizeof(char) * size, timeout);
		}
	#elif SRADIO_ //SRadio receive TODO
		if (size < SRADIO_BUFFER_SIZE){
 800aed0:	466b      	mov	r3, sp
 800aed2:	461d      	mov	r5, r3
			//sx126x_set_rx(&SRADIO_SPI,5000);
			Rx_setup();
 800aed4:	f000 fc4a 	bl	800b76c <Rx_setup>

			//Note: The last character is always random and needs to be removed
			char temp_buf[size];
 800aed8:	78fc      	ldrb	r4, [r7, #3]
 800aeda:	4623      	mov	r3, r4
 800aedc:	3b01      	subs	r3, #1
 800aede:	60fb      	str	r3, [r7, #12]
 800aee0:	b2e0      	uxtb	r0, r4
 800aee2:	f04f 0100 	mov.w	r1, #0
 800aee6:	f04f 0200 	mov.w	r2, #0
 800aeea:	f04f 0300 	mov.w	r3, #0
 800aeee:	00cb      	lsls	r3, r1, #3
 800aef0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800aef4:	00c2      	lsls	r2, r0, #3
 800aef6:	b2e0      	uxtb	r0, r4
 800aef8:	f04f 0100 	mov.w	r1, #0
 800aefc:	f04f 0200 	mov.w	r2, #0
 800af00:	f04f 0300 	mov.w	r3, #0
 800af04:	00cb      	lsls	r3, r1, #3
 800af06:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800af0a:	00c2      	lsls	r2, r0, #3
 800af0c:	4623      	mov	r3, r4
 800af0e:	3307      	adds	r3, #7
 800af10:	08db      	lsrs	r3, r3, #3
 800af12:	00db      	lsls	r3, r3, #3
 800af14:	ebad 0d03 	sub.w	sp, sp, r3
 800af18:	466b      	mov	r3, sp
 800af1a:	3300      	adds	r3, #0
 800af1c:	60bb      	str	r3, [r7, #8]
			memset(temp_buf,0,size);
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	78fa      	ldrb	r2, [r7, #3]
 800af22:	2100      	movs	r1, #0
 800af24:	4618      	mov	r0, r3
 800af26:	f00f fdcf 	bl	801aac8 <memset>
			RxProtocol((uint8_t*) temp_buf);
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	4618      	mov	r0, r3
 800af2e:	f000 fd11 	bl	800b954 <RxProtocol>
			//memcpy(buffer,temp_buf,strlen(temp_buf)-1);
			memcpy(buffer,temp_buf,size);
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	78fa      	ldrb	r2, [r7, #3]
 800af36:	4619      	mov	r1, r3
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f00f fd9d 	bl	801aa78 <memcpy>
 800af3e:	46ad      	mov	sp, r5
		}
	#endif

	print((char*) "Radio receiving:\t");
 800af40:	4804      	ldr	r0, [pc, #16]	; (800af54 <MRT_radio_rx+0x94>)
 800af42:	f7f6 f8e1 	bl	8001108 <print>
	println(buffer);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f7f6 f8c0 	bl	80010cc <println>
}
 800af4c:	bf00      	nop
 800af4e:	3710      	adds	r7, #16
 800af50:	46bd      	mov	sp, r7
 800af52:	bdb0      	pop	{r4, r5, r7, pc}
 800af54:	080227fc 	.word	0x080227fc

0800af58 <MRT_radio_Init>:



void MRT_radio_Init(void){
 800af58:	b590      	push	{r4, r7, lr}
 800af5a:	b093      	sub	sp, #76	; 0x4c
 800af5c:	af12      	add	r7, sp, #72	; 0x48
	println("\r\nRadio Init");
 800af5e:	4816      	ldr	r0, [pc, #88]	; (800afb8 <MRT_radio_Init+0x60>)
 800af60:	f7f6 f8b4 	bl	80010cc <println>
	#if XTEND_
	print("\tXTEND Init...");
	HAL_GPIO_WritePin(XTend_CTS_Pin, GPIO_PIN_10, GPIO_PIN_RESET);
	println("OK");
	#elif SRADIO_
	print("\tSRADIO Init...");
 800af64:	4815      	ldr	r0, [pc, #84]	; (800afbc <MRT_radio_Init+0x64>)
 800af66:	f7f6 f8cf 	bl	8001108 <print>
	set_hspi(SRADIO_SPI);
 800af6a:	4c15      	ldr	r4, [pc, #84]	; (800afc0 <MRT_radio_Init+0x68>)
 800af6c:	4668      	mov	r0, sp
 800af6e:	f104 0310 	add.w	r3, r4, #16
 800af72:	2248      	movs	r2, #72	; 0x48
 800af74:	4619      	mov	r1, r3
 800af76:	f00f fd7f 	bl	801aa78 <memcpy>
 800af7a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800af7e:	f000 fa8d 	bl	800b49c <set_hspi>
	set_NSS_pin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin);
 800af82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800af86:	480f      	ldr	r0, [pc, #60]	; (800afc4 <MRT_radio_Init+0x6c>)
 800af88:	f000 fa30 	bl	800b3ec <set_NSS_pin>
	set_BUSY_pin(SX_BUSY_GPIO_Port, SX_BUSY_Pin);
 800af8c:	2108      	movs	r1, #8
 800af8e:	480e      	ldr	r0, [pc, #56]	; (800afc8 <MRT_radio_Init+0x70>)
 800af90:	f000 fa42 	bl	800b418 <set_BUSY_pin>
	set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
 800af94:	2104      	movs	r1, #4
 800af96:	480c      	ldr	r0, [pc, #48]	; (800afc8 <MRT_radio_Init+0x70>)
 800af98:	f000 fa54 	bl	800b444 <set_NRESET_pin>
	set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
 800af9c:	2110      	movs	r1, #16
 800af9e:	480a      	ldr	r0, [pc, #40]	; (800afc8 <MRT_radio_Init+0x70>)
 800afa0:	f000 fa66 	bl	800b470 <set_DIO1_pin>
	//  set_DIO2_pin(DIO2_1_GPIO_Port, DIO2_1_Pin);
	//  set_DIO3_pin(DIO3_1_GPIO_Port, DIO3_1_Pin);
	Tx_setup();
 800afa4:	f000 fa92 	bl	800b4cc <Tx_setup>
	//Rx_setup();
	println("OK");
 800afa8:	4808      	ldr	r0, [pc, #32]	; (800afcc <MRT_radio_Init+0x74>)
 800afaa:	f7f6 f88f 	bl	80010cc <println>
	#else
	println("\tNo radio currently in use");
	#endif
}
 800afae:	bf00      	nop
 800afb0:	3704      	adds	r7, #4
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd90      	pop	{r4, r7, pc}
 800afb6:	bf00      	nop
 800afb8:	08022810 	.word	0x08022810
 800afbc:	08022820 	.word	0x08022820
 800afc0:	200087ac 	.word	0x200087ac
 800afc4:	40020400 	.word	0x40020400
 800afc8:	40021800 	.word	0x40021800
 800afcc:	08022830 	.word	0x08022830

0800afd0 <MRT_TELEMETRY_Init>:


void MRT_TELEMETRY_Init(void){
 800afd0:	b5b0      	push	{r4, r5, r7, lr}
 800afd2:	b086      	sub	sp, #24
 800afd4:	af00      	add	r7, sp, #0

	MRT_radio_Init();
 800afd6:	f7ff ffbf 	bl	800af58 <MRT_radio_Init>

	HAL_IWDG_Refresh(&hiwdg);
 800afda:	480d      	ldr	r0, [pc, #52]	; (800b010 <MRT_TELEMETRY_Init+0x40>)
 800afdc:	f003 faa8 	bl	800e530 <HAL_IWDG_Refresh>

	#if IRIDIUM_
		HAL_GPIO_WritePin(Iridium_RST_GPIO_Port, Iridium_RST_Pin, SET);
 800afe0:	2201      	movs	r2, #1
 800afe2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800afe6:	480b      	ldr	r0, [pc, #44]	; (800b014 <MRT_TELEMETRY_Init+0x44>)
 800afe8:	f002 f9be 	bl	800d368 <HAL_GPIO_WritePin>
		#if IRIDIUM_INTERNAL_PRINT
		hiridium = MRT_Iridium_Init(IRIDIUM_TIMEOUT, IRIDIUM_I2C, print);
 800afec:	4c0a      	ldr	r4, [pc, #40]	; (800b018 <MRT_TELEMETRY_Init+0x48>)
 800afee:	4638      	mov	r0, r7
 800aff0:	4b0a      	ldr	r3, [pc, #40]	; (800b01c <MRT_TELEMETRY_Init+0x4c>)
 800aff2:	2202      	movs	r2, #2
 800aff4:	2101      	movs	r1, #1
 800aff6:	f7ff f89f 	bl	800a138 <MRT_Iridium_Init>
 800affa:	4625      	mov	r5, r4
 800affc:	463c      	mov	r4, r7
 800affe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b002:	6823      	ldr	r3, [r4, #0]
 800b004:	602b      	str	r3, [r5, #0]
		#else
		hiridium = MRT_Iridium_Init(IRIDIUM_TIMEOUT, IRIDIUM_I2C, no_print); //Doesn't print the internal commands
		#endif
	#endif
}
 800b006:	bf00      	nop
 800b008:	3718      	adds	r7, #24
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bdb0      	pop	{r4, r5, r7, pc}
 800b00e:	bf00      	nop
 800b010:	20008780 	.word	0x20008780
 800b014:	40021000 	.word	0x40021000
 800b018:	200005a4 	.word	0x200005a4
 800b01c:	08001109 	.word	0x08001109

0800b020 <MRT_radio_send_ack>:



void MRT_radio_send_ack(radio_command cmd){
 800b020:	b580      	push	{r7, lr}
 800b022:	b088      	sub	sp, #32
 800b024:	af00      	add	r7, sp, #0
 800b026:	4603      	mov	r3, r0
 800b028:	71fb      	strb	r3, [r7, #7]
	if(cmd>=0 && cmd<=9){
 800b02a:	79fb      	ldrb	r3, [r7, #7]
 800b02c:	2b09      	cmp	r3, #9
 800b02e:	d80b      	bhi.n	800b048 <MRT_radio_send_ack+0x28>
		char buffer[20];
		sprintf(buffer, "radio_ack_%i\r\n",cmd);
 800b030:	79fa      	ldrb	r2, [r7, #7]
 800b032:	f107 030c 	add.w	r3, r7, #12
 800b036:	4906      	ldr	r1, [pc, #24]	; (800b050 <MRT_radio_send_ack+0x30>)
 800b038:	4618      	mov	r0, r3
 800b03a:	f011 f841 	bl	801c0c0 <siprintf>
		MRT_radio_tx(buffer);
 800b03e:	f107 030c 	add.w	r3, r7, #12
 800b042:	4618      	mov	r0, r3
 800b044:	f7ff ff1a 	bl	800ae7c <MRT_radio_tx>
	}
}
 800b048:	bf00      	nop
 800b04a:	3720      	adds	r7, #32
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	08022834 	.word	0x08022834

0800b054 <radio_parse_command>:
//extern volatile uint8_t state_arm_rcov; TODO NOT USED YET
//extern volatile uint8_t state_arm_prop; TODO NOT USED YET

//extern volatile char rx_buf[10]; // dma buffer NOT IN USE YET

radio_command radio_parse_command(char* rx_buf) {
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
		sprintf(radio_buffer,"%i",rx_buf[i]);
		println(radio_buffer);
	}
	#endif

	if (strcmp(rx_buf, "lr") == 0) { // launch command
 800b05c:	492a      	ldr	r1, [pc, #168]	; (800b108 <radio_parse_command+0xb4>)
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f7f5 f8c6 	bl	80001f0 <strcmp>
 800b064:	4603      	mov	r3, r0
 800b066:	2b00      	cmp	r3, #0
 800b068:	d101      	bne.n	800b06e <radio_parse_command+0x1a>
		return LAUNCH;
 800b06a:	2301      	movs	r3, #1
 800b06c:	e048      	b.n	800b100 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "ap") == 0) { // arm propulsion
 800b06e:	4927      	ldr	r1, [pc, #156]	; (800b10c <radio_parse_command+0xb8>)
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f7f5 f8bd 	bl	80001f0 <strcmp>
 800b076:	4603      	mov	r3, r0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d101      	bne.n	800b080 <radio_parse_command+0x2c>
		return ARM_PROP;
 800b07c:	2302      	movs	r3, #2
 800b07e:	e03f      	b.n	800b100 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "ar") == 0) { // arm recovery
 800b080:	4923      	ldr	r1, [pc, #140]	; (800b110 <radio_parse_command+0xbc>)
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f7f5 f8b4 	bl	80001f0 <strcmp>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d101      	bne.n	800b092 <radio_parse_command+0x3e>
		return ARM_RCOV;
 800b08e:	2303      	movs	r3, #3
 800b090:	e036      	b.n	800b100 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "dp") == 0) { // disarm propulsion
 800b092:	4920      	ldr	r1, [pc, #128]	; (800b114 <radio_parse_command+0xc0>)
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f7f5 f8ab 	bl	80001f0 <strcmp>
 800b09a:	4603      	mov	r3, r0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d101      	bne.n	800b0a4 <radio_parse_command+0x50>
		return DISARM_PROP;
 800b0a0:	2304      	movs	r3, #4
 800b0a2:	e02d      	b.n	800b100 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "dr") == 0) { // disarm recovery
 800b0a4:	491c      	ldr	r1, [pc, #112]	; (800b118 <radio_parse_command+0xc4>)
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f7f5 f8a2 	bl	80001f0 <strcmp>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d101      	bne.n	800b0b6 <radio_parse_command+0x62>
		return DISARM_RCOV;
 800b0b2:	2305      	movs	r3, #5
 800b0b4:	e024      	b.n	800b100 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "v1") == 0) { // vr power on
 800b0b6:	4919      	ldr	r1, [pc, #100]	; (800b11c <radio_parse_command+0xc8>)
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f7f5 f899 	bl	80001f0 <strcmp>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d101      	bne.n	800b0c8 <radio_parse_command+0x74>
		return VR_POWER_ON;
 800b0c4:	2306      	movs	r3, #6
 800b0c6:	e01b      	b.n	800b100 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "v2") == 0) { // vr start
 800b0c8:	4915      	ldr	r1, [pc, #84]	; (800b120 <radio_parse_command+0xcc>)
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f7f5 f890 	bl	80001f0 <strcmp>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d101      	bne.n	800b0da <radio_parse_command+0x86>
		return VR_REC_START;
 800b0d6:	2307      	movs	r3, #7
 800b0d8:	e012      	b.n	800b100 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "v3") == 0) { // vr stop
 800b0da:	4912      	ldr	r1, [pc, #72]	; (800b124 <radio_parse_command+0xd0>)
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f7f5 f887 	bl	80001f0 <strcmp>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d101      	bne.n	800b0ec <radio_parse_command+0x98>
		return VR_REC_STOP;
 800b0e8:	2308      	movs	r3, #8
 800b0ea:	e009      	b.n	800b100 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "v4") == 0) { // vr power off
 800b0ec:	490e      	ldr	r1, [pc, #56]	; (800b128 <radio_parse_command+0xd4>)
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f7f5 f87e 	bl	80001f0 <strcmp>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d101      	bne.n	800b0fe <radio_parse_command+0xaa>
		return VR_POWER_OFF;
 800b0fa:	2309      	movs	r3, #9
 800b0fc:	e000      	b.n	800b100 <radio_parse_command+0xac>
	}

	// all other commands are invalid, ignore.
	else{
		return -1;
 800b0fe:	23ff      	movs	r3, #255	; 0xff
	}
}
 800b100:	4618      	mov	r0, r3
 800b102:	3708      	adds	r7, #8
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}
 800b108:	08022844 	.word	0x08022844
 800b10c:	08022848 	.word	0x08022848
 800b110:	0802284c 	.word	0x0802284c
 800b114:	08022850 	.word	0x08022850
 800b118:	08022854 	.word	0x08022854
 800b11c:	08022858 	.word	0x08022858
 800b120:	0802285c 	.word	0x0802285c
 800b124:	08022860 	.word	0x08022860
 800b128:	08022864 	.word	0x08022864

0800b12c <execute_parsed_command>:

void execute_parsed_command(radio_command cmd) {
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	4603      	mov	r3, r0
 800b134:	71fb      	strb	r3, [r7, #7]
	// TODO: decide whether we want to send an ack back to ground station, maybe as special event message
	switch (cmd) {
 800b136:	79fb      	ldrb	r3, [r7, #7]
 800b138:	3b01      	subs	r3, #1
 800b13a:	2b08      	cmp	r3, #8
 800b13c:	d84a      	bhi.n	800b1d4 <execute_parsed_command+0xa8>
 800b13e:	a201      	add	r2, pc, #4	; (adr r2, 800b144 <execute_parsed_command+0x18>)
 800b140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b144:	0800b169 	.word	0x0800b169
 800b148:	0800b175 	.word	0x0800b175
 800b14c:	0800b181 	.word	0x0800b181
 800b150:	0800b18d 	.word	0x0800b18d
 800b154:	0800b199 	.word	0x0800b199
 800b158:	0800b1a5 	.word	0x0800b1a5
 800b15c:	0800b1b1 	.word	0x0800b1b1
 800b160:	0800b1bd 	.word	0x0800b1bd
 800b164:	0800b1c9 	.word	0x0800b1c9
	case LAUNCH:
		rocket_launch();
 800b168:	f000 f84c 	bl	800b204 <rocket_launch>
		println((char*) "launch");
 800b16c:	481c      	ldr	r0, [pc, #112]	; (800b1e0 <execute_parsed_command+0xb4>)
 800b16e:	f7f5 ffad 	bl	80010cc <println>
		break;
 800b172:	e030      	b.n	800b1d6 <execute_parsed_command+0xaa>

	case ARM_PROP:
		arming_propulsion();
 800b174:	f000 f860 	bl	800b238 <arming_propulsion>
		println((char*) "arm pr");
 800b178:	481a      	ldr	r0, [pc, #104]	; (800b1e4 <execute_parsed_command+0xb8>)
 800b17a:	f7f5 ffa7 	bl	80010cc <println>
		break;
 800b17e:	e02a      	b.n	800b1d6 <execute_parsed_command+0xaa>

	case ARM_RCOV:
		arming_recovery();
 800b180:	f000 f866 	bl	800b250 <arming_recovery>
		println((char*) "arm rc");
 800b184:	4818      	ldr	r0, [pc, #96]	; (800b1e8 <execute_parsed_command+0xbc>)
 800b186:	f7f5 ffa1 	bl	80010cc <println>
		break;
 800b18a:	e024      	b.n	800b1d6 <execute_parsed_command+0xaa>

	case DISARM_PROP:
		disarm_propulsion();
 800b18c:	f000 f86c 	bl	800b268 <disarm_propulsion>
		println((char*) "disarm pr");
 800b190:	4816      	ldr	r0, [pc, #88]	; (800b1ec <execute_parsed_command+0xc0>)
 800b192:	f7f5 ff9b 	bl	80010cc <println>
		break;
 800b196:	e01e      	b.n	800b1d6 <execute_parsed_command+0xaa>

	case DISARM_RCOV:
		disarm_recovery();
 800b198:	f000 f880 	bl	800b29c <disarm_recovery>
		println((char*) "disarm rc");
 800b19c:	4814      	ldr	r0, [pc, #80]	; (800b1f0 <execute_parsed_command+0xc4>)
 800b19e:	f7f5 ff95 	bl	80010cc <println>
		break;
 800b1a2:	e018      	b.n	800b1d6 <execute_parsed_command+0xaa>

	case VR_POWER_ON:
		VR_Power_On();
 800b1a4:	f7fa f9a0 	bl	80054e8 <VR_Power_On>
		println((char*) "vr on");
 800b1a8:	4812      	ldr	r0, [pc, #72]	; (800b1f4 <execute_parsed_command+0xc8>)
 800b1aa:	f7f5 ff8f 	bl	80010cc <println>
		break;
 800b1ae:	e012      	b.n	800b1d6 <execute_parsed_command+0xaa>

	case VR_REC_START:
		VR_Start_Rec();
 800b1b0:	f7fa f9b6 	bl	8005520 <VR_Start_Rec>
		println((char*) "vr start");
 800b1b4:	4810      	ldr	r0, [pc, #64]	; (800b1f8 <execute_parsed_command+0xcc>)
 800b1b6:	f7f5 ff89 	bl	80010cc <println>
		break;
 800b1ba:	e00c      	b.n	800b1d6 <execute_parsed_command+0xaa>

	case VR_REC_STOP:
		VR_Stop_Rec();
 800b1bc:	f7fa f9bc 	bl	8005538 <VR_Stop_Rec>
		println((char*) "vr stop");
 800b1c0:	480e      	ldr	r0, [pc, #56]	; (800b1fc <execute_parsed_command+0xd0>)
 800b1c2:	f7f5 ff83 	bl	80010cc <println>
		break;
 800b1c6:	e006      	b.n	800b1d6 <execute_parsed_command+0xaa>

	case VR_POWER_OFF:
		VR_Power_Off();
 800b1c8:	f7fa f99e 	bl	8005508 <VR_Power_Off>
		println((char*) "vr off");
 800b1cc:	480c      	ldr	r0, [pc, #48]	; (800b200 <execute_parsed_command+0xd4>)
 800b1ce:	f7f5 ff7d 	bl	80010cc <println>
		break;
 800b1d2:	e000      	b.n	800b1d6 <execute_parsed_command+0xaa>

	default:
		break;
 800b1d4:	bf00      	nop
	}
}
 800b1d6:	bf00      	nop
 800b1d8:	3708      	adds	r7, #8
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	08022868 	.word	0x08022868
 800b1e4:	08022870 	.word	0x08022870
 800b1e8:	08022878 	.word	0x08022878
 800b1ec:	08022880 	.word	0x08022880
 800b1f0:	0802288c 	.word	0x0802288c
 800b1f4:	08022898 	.word	0x08022898
 800b1f8:	080228a0 	.word	0x080228a0
 800b1fc:	080228ac 	.word	0x080228ac
 800b200:	080228b4 	.word	0x080228b4

0800b204 <rocket_launch>:

void rocket_launch(void) {
 800b204:	b580      	push	{r7, lr}
 800b206:	af00      	add	r7, sp, #0
	// just to be safe, set arming pin high to ensure pyro channels are armed
	HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET);
 800b208:	2201      	movs	r2, #1
 800b20a:	2102      	movs	r1, #2
 800b20c:	4808      	ldr	r0, [pc, #32]	; (800b230 <rocket_launch+0x2c>)
 800b20e:	f002 f8ab 	bl	800d368 <HAL_GPIO_WritePin>

	// open valve by firing the prop pyro ejection channels
	HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, SET);
 800b212:	2201      	movs	r2, #1
 800b214:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b218:	4806      	ldr	r0, [pc, #24]	; (800b234 <rocket_launch+0x30>)
 800b21a:	f002 f8a5 	bl	800d368 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port, OUT_PyroValve_Gate_2_Pin, SET);
 800b21e:	2201      	movs	r2, #1
 800b220:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b224:	4803      	ldr	r0, [pc, #12]	; (800b234 <rocket_launch+0x30>)
 800b226:	f002 f89f 	bl	800d368 <HAL_GPIO_WritePin>
}
 800b22a:	bf00      	nop
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	40021800 	.word	0x40021800
 800b234:	40021400 	.word	0x40021400

0800b238 <arming_propulsion>:

void arming_propulsion(void) {
 800b238:	b580      	push	{r7, lr}
 800b23a:	af00      	add	r7, sp, #0
	// arm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET);
 800b23c:	2201      	movs	r2, #1
 800b23e:	2102      	movs	r1, #2
 800b240:	4802      	ldr	r0, [pc, #8]	; (800b24c <arming_propulsion+0x14>)
 800b242:	f002 f891 	bl	800d368 <HAL_GPIO_WritePin>
	//state_arm_prop = 1;
	//set_backup_state(FC_STATE_ARM_PROP, //state_arm_prop);
}
 800b246:	bf00      	nop
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	40021800 	.word	0x40021800

0800b250 <arming_recovery>:

void arming_recovery(void) {
 800b250:	b580      	push	{r7, lr}
 800b252:	af00      	add	r7, sp, #0
	// arm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET);
 800b254:	2201      	movs	r2, #1
 800b256:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b25a:	4802      	ldr	r0, [pc, #8]	; (800b264 <arming_recovery+0x14>)
 800b25c:	f002 f884 	bl	800d368 <HAL_GPIO_WritePin>
	//state_arm_rcov = 1;
	//set_backup_state(FC_STATE_ARM_RCOV, //state_arm_rcov);
}
 800b260:	bf00      	nop
 800b262:	bd80      	pop	{r7, pc}
 800b264:	40021800 	.word	0x40021800

0800b268 <disarm_propulsion>:

void disarm_propulsion(void) {
 800b268:	b580      	push	{r7, lr}
 800b26a:	af00      	add	r7, sp, #0
	// disarm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, RESET);
 800b26c:	2200      	movs	r2, #0
 800b26e:	2102      	movs	r1, #2
 800b270:	4808      	ldr	r0, [pc, #32]	; (800b294 <disarm_propulsion+0x2c>)
 800b272:	f002 f879 	bl	800d368 <HAL_GPIO_WritePin>

	// also reset the gates in case they were high
	HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET);
 800b276:	2200      	movs	r2, #0
 800b278:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b27c:	4806      	ldr	r0, [pc, #24]	; (800b298 <disarm_propulsion+0x30>)
 800b27e:	f002 f873 	bl	800d368 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port, OUT_PyroValve_Gate_2_Pin, RESET);
 800b282:	2200      	movs	r2, #0
 800b284:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b288:	4803      	ldr	r0, [pc, #12]	; (800b298 <disarm_propulsion+0x30>)
 800b28a:	f002 f86d 	bl	800d368 <HAL_GPIO_WritePin>

	//state_arm_prop = 0;
	//set_backup_state(FC_STATE_ARM_PROP, //state_arm_prop);
}
 800b28e:	bf00      	nop
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	40021800 	.word	0x40021800
 800b298:	40021400 	.word	0x40021400

0800b29c <disarm_recovery>:

void disarm_recovery(void) {
 800b29c:	b580      	push	{r7, lr}
 800b29e:	af00      	add	r7, sp, #0
	// disarm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET);
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b2a6:	4808      	ldr	r0, [pc, #32]	; (800b2c8 <disarm_recovery+0x2c>)
 800b2a8:	f002 f85e 	bl	800d368 <HAL_GPIO_WritePin>

	// also reset the gates in case they were high
	HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET);
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b2b2:	4805      	ldr	r0, [pc, #20]	; (800b2c8 <disarm_recovery+0x2c>)
 800b2b4:	f002 f858 	bl	800d368 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET);
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b2be:	4802      	ldr	r0, [pc, #8]	; (800b2c8 <disarm_recovery+0x2c>)
 800b2c0:	f002 f852 	bl	800d368 <HAL_GPIO_WritePin>

	//state_arm_rcov = 0;
	//set_backup_state(FC_STATE_ARM_RCOV, //state_arm_rcov);
}
 800b2c4:	bf00      	nop
 800b2c6:	bd80      	pop	{r7, pc}
 800b2c8:	40021800 	.word	0x40021800

0800b2cc <sx126x_hal_write>:
 * @returns Operation status
 */


sx126x_hal_status_t sx126x_hal_write( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length ){
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b086      	sub	sp, #24
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	603b      	str	r3, [r7, #0]
 800b2d8:	4613      	mov	r3, r2
 800b2da:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO,BUSY) == GPIO_PIN_SET);
 800b2dc:	bf00      	nop
 800b2de:	4b18      	ldr	r3, [pc, #96]	; (800b340 <sx126x_hal_write+0x74>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4a18      	ldr	r2, [pc, #96]	; (800b344 <sx126x_hal_write+0x78>)
 800b2e4:	8812      	ldrh	r2, [r2, #0]
 800b2e6:	4611      	mov	r1, r2
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f002 f825 	bl	800d338 <HAL_GPIO_ReadPin>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d0f4      	beq.n	800b2de <sx126x_hal_write+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800b2f4:	4b14      	ldr	r3, [pc, #80]	; (800b348 <sx126x_hal_write+0x7c>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4a14      	ldr	r2, [pc, #80]	; (800b34c <sx126x_hal_write+0x80>)
 800b2fa:	8811      	ldrh	r1, [r2, #0]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	4618      	mov	r0, r3
 800b300:	f002 f832 	bl	800d368 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, command_length, 100);
 800b304:	88fa      	ldrh	r2, [r7, #6]
 800b306:	2364      	movs	r3, #100	; 0x64
 800b308:	68b9      	ldr	r1, [r7, #8]
 800b30a:	68f8      	ldr	r0, [r7, #12]
 800b30c:	f004 feb7 	bl	801007e <HAL_SPI_Transmit>
 800b310:	4603      	mov	r3, r0
 800b312:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_Transmit(hspi, data, data_length, 100);
 800b314:	8c3a      	ldrh	r2, [r7, #32]
 800b316:	2364      	movs	r3, #100	; 0x64
 800b318:	6839      	ldr	r1, [r7, #0]
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	f004 feaf 	bl	801007e <HAL_SPI_Transmit>
 800b320:	4603      	mov	r3, r0
 800b322:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 800b324:	4b08      	ldr	r3, [pc, #32]	; (800b348 <sx126x_hal_write+0x7c>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4a08      	ldr	r2, [pc, #32]	; (800b34c <sx126x_hal_write+0x80>)
 800b32a:	8811      	ldrh	r1, [r2, #0]
 800b32c:	2201      	movs	r2, #1
 800b32e:	4618      	mov	r0, r3
 800b330:	f002 f81a 	bl	800d368 <HAL_GPIO_WritePin>
    return status;
 800b334:	7dfb      	ldrb	r3, [r7, #23]
}
 800b336:	4618      	mov	r0, r3
 800b338:	3718      	adds	r7, #24
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	200007f4 	.word	0x200007f4
 800b344:	200007f0 	.word	0x200007f0
 800b348:	200007e4 	.word	0x200007e4
 800b34c:	200007e0 	.word	0x200007e0

0800b350 <sx126x_hal_read>:
 * @param [in] data_length      Buffer size to be received
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint8_t offset ){
 800b350:	b580      	push	{r7, lr}
 800b352:	b088      	sub	sp, #32
 800b354:	af02      	add	r7, sp, #8
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	603b      	str	r3, [r7, #0]
 800b35c:	4613      	mov	r3, r2
 800b35e:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO, BUSY) == GPIO_PIN_SET);
 800b360:	bf00      	nop
 800b362:	4b1e      	ldr	r3, [pc, #120]	; (800b3dc <sx126x_hal_read+0x8c>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4a1e      	ldr	r2, [pc, #120]	; (800b3e0 <sx126x_hal_read+0x90>)
 800b368:	8812      	ldrh	r2, [r2, #0]
 800b36a:	4611      	mov	r1, r2
 800b36c:	4618      	mov	r0, r3
 800b36e:	f001 ffe3 	bl	800d338 <HAL_GPIO_ReadPin>
 800b372:	4603      	mov	r3, r0
 800b374:	2b01      	cmp	r3, #1
 800b376:	d0f4      	beq.n	800b362 <sx126x_hal_read+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800b378:	4b1a      	ldr	r3, [pc, #104]	; (800b3e4 <sx126x_hal_read+0x94>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a1a      	ldr	r2, [pc, #104]	; (800b3e8 <sx126x_hal_read+0x98>)
 800b37e:	8811      	ldrh	r1, [r2, #0]
 800b380:	2200      	movs	r2, #0
 800b382:	4618      	mov	r0, r3
 800b384:	f001 fff0 	bl	800d368 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, offset, 100);
 800b388:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b38c:	b29a      	uxth	r2, r3
 800b38e:	2364      	movs	r3, #100	; 0x64
 800b390:	68b9      	ldr	r1, [r7, #8]
 800b392:	68f8      	ldr	r0, [r7, #12]
 800b394:	f004 fe73 	bl	801007e <HAL_SPI_Transmit>
 800b398:	4603      	mov	r3, r0
 800b39a:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_TransmitReceive(hspi, command+offset, data, command_length-offset, 100);
 800b39c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b3a0:	68ba      	ldr	r2, [r7, #8]
 800b3a2:	18d1      	adds	r1, r2, r3
 800b3a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	88fa      	ldrh	r2, [r7, #6]
 800b3ac:	1ad3      	subs	r3, r2, r3
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	2264      	movs	r2, #100	; 0x64
 800b3b2:	9200      	str	r2, [sp, #0]
 800b3b4:	683a      	ldr	r2, [r7, #0]
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	f005 f8ae 	bl	8010518 <HAL_SPI_TransmitReceive>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 800b3c0:	4b08      	ldr	r3, [pc, #32]	; (800b3e4 <sx126x_hal_read+0x94>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a08      	ldr	r2, [pc, #32]	; (800b3e8 <sx126x_hal_read+0x98>)
 800b3c6:	8811      	ldrh	r1, [r2, #0]
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f001 ffcc 	bl	800d368 <HAL_GPIO_WritePin>
    return status;
 800b3d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3718      	adds	r7, #24
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	200007f4 	.word	0x200007f4
 800b3e0:	200007f0 	.word	0x200007f0
 800b3e4:	200007e4 	.word	0x200007e4
 800b3e8:	200007e0 	.word	0x200007e0

0800b3ec <set_NSS_pin>:
    status = HAL_SPI_TransmitReceive(&hspi, (uint8_t*)params, (uint8_t*)response, numOfParams, 100);
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
    return status;
}

void set_NSS_pin(GPIO_TypeDef* _NSS_GPIO, uint16_t _NSS){
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	807b      	strh	r3, [r7, #2]
    NSS = _NSS;
 800b3f8:	4a05      	ldr	r2, [pc, #20]	; (800b410 <set_NSS_pin+0x24>)
 800b3fa:	887b      	ldrh	r3, [r7, #2]
 800b3fc:	8013      	strh	r3, [r2, #0]
    NSS_GPIO = _NSS_GPIO;
 800b3fe:	4a05      	ldr	r2, [pc, #20]	; (800b414 <set_NSS_pin+0x28>)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6013      	str	r3, [r2, #0]
}
 800b404:	bf00      	nop
 800b406:	370c      	adds	r7, #12
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr
 800b410:	200007e0 	.word	0x200007e0
 800b414:	200007e4 	.word	0x200007e4

0800b418 <set_BUSY_pin>:

void set_BUSY_pin(GPIO_TypeDef* _BUSY_GPIO, uint16_t _BUSY){
 800b418:	b480      	push	{r7}
 800b41a:	b083      	sub	sp, #12
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	460b      	mov	r3, r1
 800b422:	807b      	strh	r3, [r7, #2]
    BUSY = _BUSY;
 800b424:	4a05      	ldr	r2, [pc, #20]	; (800b43c <set_BUSY_pin+0x24>)
 800b426:	887b      	ldrh	r3, [r7, #2]
 800b428:	8013      	strh	r3, [r2, #0]
    BUSY_GPIO = _BUSY_GPIO;
 800b42a:	4a05      	ldr	r2, [pc, #20]	; (800b440 <set_BUSY_pin+0x28>)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6013      	str	r3, [r2, #0]
}
 800b430:	bf00      	nop
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr
 800b43c:	200007f0 	.word	0x200007f0
 800b440:	200007f4 	.word	0x200007f4

0800b444 <set_NRESET_pin>:

void set_NRESET_pin(GPIO_TypeDef* _NRESET_GPIO, uint16_t _NRESET){
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	460b      	mov	r3, r1
 800b44e:	807b      	strh	r3, [r7, #2]
    NRESET = _NRESET;
 800b450:	4a05      	ldr	r2, [pc, #20]	; (800b468 <set_NRESET_pin+0x24>)
 800b452:	887b      	ldrh	r3, [r7, #2]
 800b454:	8013      	strh	r3, [r2, #0]
    NRESET_GPIO = _NRESET_GPIO;
 800b456:	4a05      	ldr	r2, [pc, #20]	; (800b46c <set_NRESET_pin+0x28>)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6013      	str	r3, [r2, #0]
}
 800b45c:	bf00      	nop
 800b45e:	370c      	adds	r7, #12
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr
 800b468:	200007e8 	.word	0x200007e8
 800b46c:	200007ec 	.word	0x200007ec

0800b470 <set_DIO1_pin>:

void set_DIO1_pin(GPIO_TypeDef* _DIO1_GPIO, uint16_t _DIO1){
 800b470:	b480      	push	{r7}
 800b472:	b083      	sub	sp, #12
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	460b      	mov	r3, r1
 800b47a:	807b      	strh	r3, [r7, #2]
    DIO1 = _DIO1;
 800b47c:	4a05      	ldr	r2, [pc, #20]	; (800b494 <set_DIO1_pin+0x24>)
 800b47e:	887b      	ldrh	r3, [r7, #2]
 800b480:	8013      	strh	r3, [r2, #0]
    DIO1_GPIO = _DIO1_GPIO;
 800b482:	4a05      	ldr	r2, [pc, #20]	; (800b498 <set_DIO1_pin+0x28>)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6013      	str	r3, [r2, #0]
}
 800b488:	bf00      	nop
 800b48a:	370c      	adds	r7, #12
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr
 800b494:	200007f8 	.word	0x200007f8
 800b498:	200007fc 	.word	0x200007fc

0800b49c <set_hspi>:
void set_DIO3_pin(GPIO_TypeDef* _DIO3_GPIO, uint16_t _DIO3){
    DIO3 = _DIO3;
    DIO3_GPIO = _DIO3_GPIO;
}

void set_hspi(SPI_HandleTypeDef _hspi){
 800b49c:	b084      	sub	sp, #16
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	f107 0c08 	add.w	ip, r7, #8
 800b4a6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    hspi = _hspi;
 800b4aa:	4b07      	ldr	r3, [pc, #28]	; (800b4c8 <set_hspi+0x2c>)
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f107 0308 	add.w	r3, r7, #8
 800b4b2:	2258      	movs	r2, #88	; 0x58
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	f00f fadf 	bl	801aa78 <memcpy>
}
 800b4ba:	bf00      	nop
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b4c2:	b004      	add	sp, #16
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop
 800b4c8:	20000800 	.word	0x20000800

0800b4cc <Tx_setup>:

void Tx_setup(){
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b086      	sub	sp, #24
 800b4d0:	af02      	add	r7, sp, #8
    //NEED TO ADD COMMAND ERROR HANDLING
    HAL_GPIO_WritePin(NRESET_GPIO, NRESET, GPIO_PIN_SET);
 800b4d2:	4b66      	ldr	r3, [pc, #408]	; (800b66c <Tx_setup+0x1a0>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a66      	ldr	r2, [pc, #408]	; (800b670 <Tx_setup+0x1a4>)
 800b4d8:	8811      	ldrh	r1, [r2, #0]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f001 ff43 	bl	800d368 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800b4e2:	4b64      	ldr	r3, [pc, #400]	; (800b674 <Tx_setup+0x1a8>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a64      	ldr	r2, [pc, #400]	; (800b678 <Tx_setup+0x1ac>)
 800b4e8:	8811      	ldrh	r1, [r2, #0]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f001 ff3b 	bl	800d368 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800b4f2:	2032      	movs	r0, #50	; 0x32
 800b4f4:	f001 f82c 	bl	800c550 <HAL_Delay>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);             //make sure chip select is off
 800b4f8:	4b5e      	ldr	r3, [pc, #376]	; (800b674 <Tx_setup+0x1a8>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a5e      	ldr	r2, [pc, #376]	; (800b678 <Tx_setup+0x1ac>)
 800b4fe:	8811      	ldrh	r1, [r2, #0]
 800b500:	2201      	movs	r2, #1
 800b502:	4618      	mov	r0, r3
 800b504:	f001 ff30 	bl	800d368 <HAL_GPIO_WritePin>

    //set to standby for setup
    sx126x_set_standby(&hspi, 0);
 800b508:	2100      	movs	r1, #0
 800b50a:	485c      	ldr	r0, [pc, #368]	; (800b67c <Tx_setup+0x1b0>)
 800b50c:	f000 fa8a 	bl	800ba24 <sx126x_set_standby>

    //set general parameters
    sx126x_set_rf_freq(&hspi, frequency);                       //set rf frequency
 800b510:	4b5b      	ldr	r3, [pc, #364]	; (800b680 <Tx_setup+0x1b4>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4619      	mov	r1, r3
 800b516:	4859      	ldr	r0, [pc, #356]	; (800b67c <Tx_setup+0x1b0>)
 800b518:	f000 fdfe 	bl	800c118 <sx126x_set_rf_freq>
    sx126x_set_pkt_type(&hspi, packet_type);                    //set packet type
 800b51c:	4b59      	ldr	r3, [pc, #356]	; (800b684 <Tx_setup+0x1b8>)
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	4619      	mov	r1, r3
 800b522:	4856      	ldr	r0, [pc, #344]	; (800b67c <Tx_setup+0x1b0>)
 800b524:	f000 fe32 	bl	800c18c <sx126x_set_pkt_type>
    sx126x_set_rx_tx_fallback_mode(&hspi, fallback_mode);       //set rx tx fallback mode
 800b528:	4b57      	ldr	r3, [pc, #348]	; (800b688 <Tx_setup+0x1bc>)
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	4619      	mov	r1, r3
 800b52e:	4853      	ldr	r0, [pc, #332]	; (800b67c <Tx_setup+0x1b0>)
 800b530:	f000 fbcf 	bl	800bcd2 <sx126x_set_rx_tx_fallback_mode>
    sx126x_set_dio2_as_rf_sw_ctrl(&hspi, 1);                    //set dio2 as rf sw -> 1 is to activate it 0 would be to have it as regular irq
 800b534:	2101      	movs	r1, #1
 800b536:	4851      	ldr	r0, [pc, #324]	; (800b67c <Tx_setup+0x1b0>)
 800b538:	f000 fdac 	bl	800c094 <sx126x_set_dio2_as_rf_sw_ctrl>
    sx126x_set_dio3_as_tcxo_ctrl(&hspi, tcxo_voltage_ctrl, 100);//set dio3 as tcxo ctrl, 100 is for the delay in ms
 800b53c:	4b53      	ldr	r3, [pc, #332]	; (800b68c <Tx_setup+0x1c0>)
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	2264      	movs	r2, #100	; 0x64
 800b542:	4619      	mov	r1, r3
 800b544:	484d      	ldr	r0, [pc, #308]	; (800b67c <Tx_setup+0x1b0>)
 800b546:	f000 fdbf 	bl	800c0c8 <sx126x_set_dio3_as_tcxo_ctrl>

    //calibrate functions
    sx126x_cal(&hspi, cal_mask);                                //calibrate radio, mask chooses what to calibrate
 800b54a:	4b51      	ldr	r3, [pc, #324]	; (800b690 <Tx_setup+0x1c4>)
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	4619      	mov	r1, r3
 800b550:	484a      	ldr	r0, [pc, #296]	; (800b67c <Tx_setup+0x1b0>)
 800b552:	f000 fb5b 	bl	800bc0c <sx126x_cal>
    HAL_Delay(50);
 800b556:	2032      	movs	r0, #50	; 0x32
 800b558:	f000 fffa 	bl	800c550 <HAL_Delay>
    sx126x_set_reg_mode(&hspi, regulator_mode);                 //ldo or dc-dc
 800b55c:	4b4d      	ldr	r3, [pc, #308]	; (800b694 <Tx_setup+0x1c8>)
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	4619      	mov	r1, r3
 800b562:	4846      	ldr	r0, [pc, #280]	; (800b67c <Tx_setup+0x1b0>)
 800b564:	f000 fb38 	bl	800bbd8 <sx126x_set_reg_mode>
    sx126x_cal_img_hex(&hspi, cal_low_freq, cal_hi_freq);       //image calibration frequencies
 800b568:	4b4b      	ldr	r3, [pc, #300]	; (800b698 <Tx_setup+0x1cc>)
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	4a4b      	ldr	r2, [pc, #300]	; (800b69c <Tx_setup+0x1d0>)
 800b56e:	7812      	ldrb	r2, [r2, #0]
 800b570:	4619      	mov	r1, r3
 800b572:	4842      	ldr	r0, [pc, #264]	; (800b67c <Tx_setup+0x1b0>)
 800b574:	f000 fb64 	bl	800bc40 <sx126x_cal_img_hex>

    //set pa config
    struct sx126x_pa_cfg_params_s *params = malloc(sizeof(sx126x_pa_cfg_params_t));
 800b578:	2004      	movs	r0, #4
 800b57a:	f00f fa6d 	bl	801aa58 <malloc>
 800b57e:	4603      	mov	r3, r0
 800b580:	60fb      	str	r3, [r7, #12]
    params->pa_duty_cycle=pa_duty_cyc;
 800b582:	4b47      	ldr	r3, [pc, #284]	; (800b6a0 <Tx_setup+0x1d4>)
 800b584:	781a      	ldrb	r2, [r3, #0]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	701a      	strb	r2, [r3, #0]
    params->hp_max=pa_hp_max;
 800b58a:	4b46      	ldr	r3, [pc, #280]	; (800b6a4 <Tx_setup+0x1d8>)
 800b58c:	781a      	ldrb	r2, [r3, #0]
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	705a      	strb	r2, [r3, #1]
    params->device_sel=pa_device_sel;
 800b592:	4b45      	ldr	r3, [pc, #276]	; (800b6a8 <Tx_setup+0x1dc>)
 800b594:	781a      	ldrb	r2, [r3, #0]
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	709a      	strb	r2, [r3, #2]
    params->pa_lut=pa_lut;
 800b59a:	4b44      	ldr	r3, [pc, #272]	; (800b6ac <Tx_setup+0x1e0>)
 800b59c:	781a      	ldrb	r2, [r3, #0]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	70da      	strb	r2, [r3, #3]
    sx126x_set_pa_cfg(&hspi, params);
 800b5a2:	68f9      	ldr	r1, [r7, #12]
 800b5a4:	4835      	ldr	r0, [pc, #212]	; (800b67c <Tx_setup+0x1b0>)
 800b5a6:	f000 fb6f 	bl	800bc88 <sx126x_set_pa_cfg>
    free(params);
 800b5aa:	68f8      	ldr	r0, [r7, #12]
 800b5ac:	f00f fa5c 	bl	801aa68 <free>

    //set transmission parameters
    sx126x_set_tx_params(&hspi, tx_power, ramp_time);
 800b5b0:	4b3f      	ldr	r3, [pc, #252]	; (800b6b0 <Tx_setup+0x1e4>)
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	b25b      	sxtb	r3, r3
 800b5b6:	4a3f      	ldr	r2, [pc, #252]	; (800b6b4 <Tx_setup+0x1e8>)
 800b5b8:	7812      	ldrb	r2, [r2, #0]
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	482f      	ldr	r0, [pc, #188]	; (800b67c <Tx_setup+0x1b0>)
 800b5be:	f000 fdff 	bl	800c1c0 <sx126x_set_tx_params>
    sx126x_set_buffer_base_address(&hspi, tx_address_base, rx_address_base);
 800b5c2:	4b3d      	ldr	r3, [pc, #244]	; (800b6b8 <Tx_setup+0x1ec>)
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	4a3d      	ldr	r2, [pc, #244]	; (800b6bc <Tx_setup+0x1f0>)
 800b5c8:	7812      	ldrb	r2, [r2, #0]
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	482b      	ldr	r0, [pc, #172]	; (800b67c <Tx_setup+0x1b0>)
 800b5ce:	f000 feb5 	bl	800c33c <sx126x_set_buffer_base_address>

    //set modulation parameters
    struct sx126x_mod_params_lora_s *mod_params = malloc(sizeof(sx126x_mod_params_lora_t));
 800b5d2:	2004      	movs	r0, #4
 800b5d4:	f00f fa40 	bl	801aa58 <malloc>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	60bb      	str	r3, [r7, #8]
    mod_params->sf=lora_sf;
 800b5dc:	4b38      	ldr	r3, [pc, #224]	; (800b6c0 <Tx_setup+0x1f4>)
 800b5de:	781a      	ldrb	r2, [r3, #0]
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	701a      	strb	r2, [r3, #0]
    mod_params->bw=lora_bw;
 800b5e4:	4b37      	ldr	r3, [pc, #220]	; (800b6c4 <Tx_setup+0x1f8>)
 800b5e6:	781a      	ldrb	r2, [r3, #0]
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	705a      	strb	r2, [r3, #1]
    mod_params->cr=lora_cr;
 800b5ec:	4b36      	ldr	r3, [pc, #216]	; (800b6c8 <Tx_setup+0x1fc>)
 800b5ee:	781a      	ldrb	r2, [r3, #0]
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	709a      	strb	r2, [r3, #2]
    mod_params->ldro=lora_ldro;
 800b5f4:	4b35      	ldr	r3, [pc, #212]	; (800b6cc <Tx_setup+0x200>)
 800b5f6:	781a      	ldrb	r2, [r3, #0]
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	70da      	strb	r2, [r3, #3]
    sx126x_set_lora_mod_params(&hspi, mod_params);
 800b5fc:	68b9      	ldr	r1, [r7, #8]
 800b5fe:	481f      	ldr	r0, [pc, #124]	; (800b67c <Tx_setup+0x1b0>)
 800b600:	f000 fe02 	bl	800c208 <sx126x_set_lora_mod_params>
    free(mod_params);
 800b604:	68b8      	ldr	r0, [r7, #8]
 800b606:	f00f fa2f 	bl	801aa68 <free>

    //set lora packet params
    struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 800b60a:	2006      	movs	r0, #6
 800b60c:	f00f fa24 	bl	801aa58 <malloc>
 800b610:	4603      	mov	r3, r0
 800b612:	607b      	str	r3, [r7, #4]
    lora_params->preamble_len_in_symb=pkt_preamble_len;
 800b614:	4b2e      	ldr	r3, [pc, #184]	; (800b6d0 <Tx_setup+0x204>)
 800b616:	881a      	ldrh	r2, [r3, #0]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	801a      	strh	r2, [r3, #0]
    lora_params->header_type=header_type;
 800b61c:	4b2d      	ldr	r3, [pc, #180]	; (800b6d4 <Tx_setup+0x208>)
 800b61e:	781a      	ldrb	r2, [r3, #0]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	709a      	strb	r2, [r3, #2]
    lora_params->pld_len_in_bytes=payload_len;
 800b624:	4b2c      	ldr	r3, [pc, #176]	; (800b6d8 <Tx_setup+0x20c>)
 800b626:	781a      	ldrb	r2, [r3, #0]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	70da      	strb	r2, [r3, #3]
    lora_params->crc_is_on=crc_is_on;
 800b62c:	4b2b      	ldr	r3, [pc, #172]	; (800b6dc <Tx_setup+0x210>)
 800b62e:	781a      	ldrb	r2, [r3, #0]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	711a      	strb	r2, [r3, #4]
    lora_params->invert_iq_is_on=invert_iq_is_on;
 800b634:	4b2a      	ldr	r3, [pc, #168]	; (800b6e0 <Tx_setup+0x214>)
 800b636:	781a      	ldrb	r2, [r3, #0]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	715a      	strb	r2, [r3, #5]
    sx126x_set_lora_pkt_params(&hspi, lora_params);
 800b63c:	6879      	ldr	r1, [r7, #4]
 800b63e:	480f      	ldr	r0, [pc, #60]	; (800b67c <Tx_setup+0x1b0>)
 800b640:	f000 fe0e 	bl	800c260 <sx126x_set_lora_pkt_params>
    free(lora_params);
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f00f fa0f 	bl	801aa68 <free>

    //set dio and irq parameters
    sx126x_set_dio_irq_params(&hspi, irq_mask, dio1_mask, dio2_mask, dio3_mask);
 800b64a:	4b26      	ldr	r3, [pc, #152]	; (800b6e4 <Tx_setup+0x218>)
 800b64c:	8819      	ldrh	r1, [r3, #0]
 800b64e:	4b26      	ldr	r3, [pc, #152]	; (800b6e8 <Tx_setup+0x21c>)
 800b650:	881a      	ldrh	r2, [r3, #0]
 800b652:	4b26      	ldr	r3, [pc, #152]	; (800b6ec <Tx_setup+0x220>)
 800b654:	8818      	ldrh	r0, [r3, #0]
 800b656:	4b26      	ldr	r3, [pc, #152]	; (800b6f0 <Tx_setup+0x224>)
 800b658:	881b      	ldrh	r3, [r3, #0]
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	4603      	mov	r3, r0
 800b65e:	4807      	ldr	r0, [pc, #28]	; (800b67c <Tx_setup+0x1b0>)
 800b660:	f000 fc7c 	bl	800bf5c <sx126x_set_dio_irq_params>

}
 800b664:	bf00      	nop
 800b666:	3710      	adds	r7, #16
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}
 800b66c:	200007ec 	.word	0x200007ec
 800b670:	200007e8 	.word	0x200007e8
 800b674:	200007e4 	.word	0x200007e4
 800b678:	200007e0 	.word	0x200007e0
 800b67c:	20000800 	.word	0x20000800
 800b680:	200000b0 	.word	0x200000b0
 800b684:	200000b4 	.word	0x200000b4
 800b688:	200000b5 	.word	0x200000b5
 800b68c:	200000b6 	.word	0x200000b6
 800b690:	200000b8 	.word	0x200000b8
 800b694:	200000b7 	.word	0x200000b7
 800b698:	200000b9 	.word	0x200000b9
 800b69c:	200000ba 	.word	0x200000ba
 800b6a0:	200000bb 	.word	0x200000bb
 800b6a4:	200000bc 	.word	0x200000bc
 800b6a8:	20000858 	.word	0x20000858
 800b6ac:	200000bd 	.word	0x200000bd
 800b6b0:	200000be 	.word	0x200000be
 800b6b4:	200000bf 	.word	0x200000bf
 800b6b8:	20000859 	.word	0x20000859
 800b6bc:	2000085a 	.word	0x2000085a
 800b6c0:	200000c0 	.word	0x200000c0
 800b6c4:	200000c1 	.word	0x200000c1
 800b6c8:	200000c2 	.word	0x200000c2
 800b6cc:	2000085b 	.word	0x2000085b
 800b6d0:	200000c4 	.word	0x200000c4
 800b6d4:	2000085c 	.word	0x2000085c
 800b6d8:	200000c6 	.word	0x200000c6
 800b6dc:	200000c7 	.word	0x200000c7
 800b6e0:	2000085d 	.word	0x2000085d
 800b6e4:	200000c8 	.word	0x200000c8
 800b6e8:	200000ca 	.word	0x200000ca
 800b6ec:	20000860 	.word	0x20000860
 800b6f0:	20000862 	.word	0x20000862

0800b6f4 <TxProtocol>:

void TxProtocol(uint8_t data[], uint8_t data_length){
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	70fb      	strb	r3, [r7, #3]

    HAL_StatusTypeDef command_status;
    command_status = sx126x_clear_irq_status(&hspi, dio1_mask);
 800b700:	4b18      	ldr	r3, [pc, #96]	; (800b764 <TxProtocol+0x70>)
 800b702:	881b      	ldrh	r3, [r3, #0]
 800b704:	4619      	mov	r1, r3
 800b706:	4818      	ldr	r0, [pc, #96]	; (800b768 <TxProtocol+0x74>)
 800b708:	f000 fc9e 	bl	800c048 <sx126x_clear_irq_status>
 800b70c:	4603      	mov	r3, r0
 800b70e:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_write_buffer(&hspi, 0, data, data_length); // 0 is the offset
 800b710:	78fb      	ldrb	r3, [r7, #3]
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	2100      	movs	r1, #0
 800b716:	4814      	ldr	r0, [pc, #80]	; (800b768 <TxProtocol+0x74>)
 800b718:	f000 fb48 	bl	800bdac <sx126x_write_buffer>
 800b71c:	4603      	mov	r3, r0
 800b71e:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_set_tx(&hspi, 6000, data_length);
 800b720:	78fb      	ldrb	r3, [r7, #3]
 800b722:	461a      	mov	r2, r3
 800b724:	f241 7170 	movw	r1, #6000	; 0x1770
 800b728:	480f      	ldr	r0, [pc, #60]	; (800b768 <TxProtocol+0x74>)
 800b72a:	f000 f995 	bl	800ba58 <sx126x_set_tx>
 800b72e:	4603      	mov	r3, r0
 800b730:	73fb      	strb	r3, [r7, #15]
    osDelay(100);
 800b732:	2064      	movs	r0, #100	; 0x64
 800b734:	f00a fbdc 	bl	8015ef0 <osDelay>

    sx126x_irq_mask_t irq;
    do {
        command_status = sx126x_get_irq_status(&hspi, &irq); //reading the irq into irq
 800b738:	f107 030c 	add.w	r3, r7, #12
 800b73c:	4619      	mov	r1, r3
 800b73e:	480a      	ldr	r0, [pc, #40]	; (800b768 <TxProtocol+0x74>)
 800b740:	f000 fc50 	bl	800bfe4 <sx126x_get_irq_status>
 800b744:	4603      	mov	r3, r0
 800b746:	73fb      	strb	r3, [r7, #15]
    } while ( (!(irq & SX126X_IRQ_TX_DONE)) && (!(irq & SX126X_IRQ_TIMEOUT)) );
 800b748:	89bb      	ldrh	r3, [r7, #12]
 800b74a:	f003 0301 	and.w	r3, r3, #1
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d104      	bne.n	800b75c <TxProtocol+0x68>
 800b752:	89bb      	ldrh	r3, [r7, #12]
 800b754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d0ed      	beq.n	800b738 <TxProtocol+0x44>
}
 800b75c:	bf00      	nop
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}
 800b764:	200000ca 	.word	0x200000ca
 800b768:	20000800 	.word	0x20000800

0800b76c <Rx_setup>:

void Rx_setup(){
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af02      	add	r7, sp, #8
    //NEED TO ADD COMMAND ERROR HANDLING
    HAL_GPIO_WritePin(NRESET_GPIO, NRESET, GPIO_PIN_SET);
 800b772:	4b5a      	ldr	r3, [pc, #360]	; (800b8dc <Rx_setup+0x170>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4a5a      	ldr	r2, [pc, #360]	; (800b8e0 <Rx_setup+0x174>)
 800b778:	8811      	ldrh	r1, [r2, #0]
 800b77a:	2201      	movs	r2, #1
 800b77c:	4618      	mov	r0, r3
 800b77e:	f001 fdf3 	bl	800d368 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800b782:	4b58      	ldr	r3, [pc, #352]	; (800b8e4 <Rx_setup+0x178>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	4a58      	ldr	r2, [pc, #352]	; (800b8e8 <Rx_setup+0x17c>)
 800b788:	8811      	ldrh	r1, [r2, #0]
 800b78a:	2200      	movs	r2, #0
 800b78c:	4618      	mov	r0, r3
 800b78e:	f001 fdeb 	bl	800d368 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800b792:	2032      	movs	r0, #50	; 0x32
 800b794:	f000 fedc 	bl	800c550 <HAL_Delay>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);             //make sure chip select is off
 800b798:	4b52      	ldr	r3, [pc, #328]	; (800b8e4 <Rx_setup+0x178>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4a52      	ldr	r2, [pc, #328]	; (800b8e8 <Rx_setup+0x17c>)
 800b79e:	8811      	ldrh	r1, [r2, #0]
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f001 fde0 	bl	800d368 <HAL_GPIO_WritePin>

    //set to standby for setup
    sx126x_set_standby(&hspi, 0);
 800b7a8:	2100      	movs	r1, #0
 800b7aa:	4850      	ldr	r0, [pc, #320]	; (800b8ec <Rx_setup+0x180>)
 800b7ac:	f000 f93a 	bl	800ba24 <sx126x_set_standby>

    //set general parameters
    sx126x_set_rf_freq(&hspi, frequency);                       //set rf frequency
 800b7b0:	4b4f      	ldr	r3, [pc, #316]	; (800b8f0 <Rx_setup+0x184>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	484d      	ldr	r0, [pc, #308]	; (800b8ec <Rx_setup+0x180>)
 800b7b8:	f000 fcae 	bl	800c118 <sx126x_set_rf_freq>
    sx126x_set_pkt_type(&hspi, packet_type);                    //set packet type
 800b7bc:	4b4d      	ldr	r3, [pc, #308]	; (800b8f4 <Rx_setup+0x188>)
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	484a      	ldr	r0, [pc, #296]	; (800b8ec <Rx_setup+0x180>)
 800b7c4:	f000 fce2 	bl	800c18c <sx126x_set_pkt_type>
    sx126x_set_rx_tx_fallback_mode(&hspi, fallback_mode);       //set rx tx fallback mode
 800b7c8:	4b4b      	ldr	r3, [pc, #300]	; (800b8f8 <Rx_setup+0x18c>)
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	4847      	ldr	r0, [pc, #284]	; (800b8ec <Rx_setup+0x180>)
 800b7d0:	f000 fa7f 	bl	800bcd2 <sx126x_set_rx_tx_fallback_mode>
    sx126x_set_dio2_as_rf_sw_ctrl(&hspi, 1);                    //set dio2 as rf sw -> 1 is to activate it 0 would be to have it as regular irq
 800b7d4:	2101      	movs	r1, #1
 800b7d6:	4845      	ldr	r0, [pc, #276]	; (800b8ec <Rx_setup+0x180>)
 800b7d8:	f000 fc5c 	bl	800c094 <sx126x_set_dio2_as_rf_sw_ctrl>
    sx126x_set_dio3_as_tcxo_ctrl(&hspi, tcxo_voltage_ctrl, 100);//set dio3 as tcxo ctrl, 100 is for the delay in ms
 800b7dc:	4b47      	ldr	r3, [pc, #284]	; (800b8fc <Rx_setup+0x190>)
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	2264      	movs	r2, #100	; 0x64
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	4841      	ldr	r0, [pc, #260]	; (800b8ec <Rx_setup+0x180>)
 800b7e6:	f000 fc6f 	bl	800c0c8 <sx126x_set_dio3_as_tcxo_ctrl>

    //calibrate functions
    sx126x_cal(&hspi, cal_mask);                                //calibrate radio, mask chooses what to calibrate
 800b7ea:	4b45      	ldr	r3, [pc, #276]	; (800b900 <Rx_setup+0x194>)
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	483e      	ldr	r0, [pc, #248]	; (800b8ec <Rx_setup+0x180>)
 800b7f2:	f000 fa0b 	bl	800bc0c <sx126x_cal>
    HAL_Delay(50);
 800b7f6:	2032      	movs	r0, #50	; 0x32
 800b7f8:	f000 feaa 	bl	800c550 <HAL_Delay>
    sx126x_set_reg_mode(&hspi, regulator_mode);                 //ldo or dc-dc
 800b7fc:	4b41      	ldr	r3, [pc, #260]	; (800b904 <Rx_setup+0x198>)
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	4619      	mov	r1, r3
 800b802:	483a      	ldr	r0, [pc, #232]	; (800b8ec <Rx_setup+0x180>)
 800b804:	f000 f9e8 	bl	800bbd8 <sx126x_set_reg_mode>
    sx126x_cal_img_hex(&hspi, cal_low_freq, cal_hi_freq);       //image calibration frequencies
 800b808:	4b3f      	ldr	r3, [pc, #252]	; (800b908 <Rx_setup+0x19c>)
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	4a3f      	ldr	r2, [pc, #252]	; (800b90c <Rx_setup+0x1a0>)
 800b80e:	7812      	ldrb	r2, [r2, #0]
 800b810:	4619      	mov	r1, r3
 800b812:	4836      	ldr	r0, [pc, #216]	; (800b8ec <Rx_setup+0x180>)
 800b814:	f000 fa14 	bl	800bc40 <sx126x_cal_img_hex>

    sx126x_set_buffer_base_address(&hspi, tx_address_base, rx_address_base);
 800b818:	4b3d      	ldr	r3, [pc, #244]	; (800b910 <Rx_setup+0x1a4>)
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	4a3d      	ldr	r2, [pc, #244]	; (800b914 <Rx_setup+0x1a8>)
 800b81e:	7812      	ldrb	r2, [r2, #0]
 800b820:	4619      	mov	r1, r3
 800b822:	4832      	ldr	r0, [pc, #200]	; (800b8ec <Rx_setup+0x180>)
 800b824:	f000 fd8a 	bl	800c33c <sx126x_set_buffer_base_address>

    //set modulation parameters
    struct sx126x_mod_params_lora_s *mod_params = malloc(sizeof(sx126x_mod_params_lora_t));
 800b828:	2004      	movs	r0, #4
 800b82a:	f00f f915 	bl	801aa58 <malloc>
 800b82e:	4603      	mov	r3, r0
 800b830:	607b      	str	r3, [r7, #4]
    mod_params->sf=lora_sf;
 800b832:	4b39      	ldr	r3, [pc, #228]	; (800b918 <Rx_setup+0x1ac>)
 800b834:	781a      	ldrb	r2, [r3, #0]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	701a      	strb	r2, [r3, #0]
    mod_params->bw=lora_bw;
 800b83a:	4b38      	ldr	r3, [pc, #224]	; (800b91c <Rx_setup+0x1b0>)
 800b83c:	781a      	ldrb	r2, [r3, #0]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	705a      	strb	r2, [r3, #1]
    mod_params->cr=lora_cr;
 800b842:	4b37      	ldr	r3, [pc, #220]	; (800b920 <Rx_setup+0x1b4>)
 800b844:	781a      	ldrb	r2, [r3, #0]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	709a      	strb	r2, [r3, #2]
    mod_params->ldro=lora_ldro;
 800b84a:	4b36      	ldr	r3, [pc, #216]	; (800b924 <Rx_setup+0x1b8>)
 800b84c:	781a      	ldrb	r2, [r3, #0]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	70da      	strb	r2, [r3, #3]
    sx126x_set_lora_mod_params(&hspi, mod_params);
 800b852:	6879      	ldr	r1, [r7, #4]
 800b854:	4825      	ldr	r0, [pc, #148]	; (800b8ec <Rx_setup+0x180>)
 800b856:	f000 fcd7 	bl	800c208 <sx126x_set_lora_mod_params>
    free(mod_params);
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f00f f904 	bl	801aa68 <free>

    //set lora packet params
    struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 800b860:	2006      	movs	r0, #6
 800b862:	f00f f8f9 	bl	801aa58 <malloc>
 800b866:	4603      	mov	r3, r0
 800b868:	603b      	str	r3, [r7, #0]
    lora_params->preamble_len_in_symb=pkt_preamble_len;
 800b86a:	4b2f      	ldr	r3, [pc, #188]	; (800b928 <Rx_setup+0x1bc>)
 800b86c:	881a      	ldrh	r2, [r3, #0]
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	801a      	strh	r2, [r3, #0]
    lora_params->header_type=header_type;
 800b872:	4b2e      	ldr	r3, [pc, #184]	; (800b92c <Rx_setup+0x1c0>)
 800b874:	781a      	ldrb	r2, [r3, #0]
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	709a      	strb	r2, [r3, #2]
    lora_params->pld_len_in_bytes=payload_len;
 800b87a:	4b2d      	ldr	r3, [pc, #180]	; (800b930 <Rx_setup+0x1c4>)
 800b87c:	781a      	ldrb	r2, [r3, #0]
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	70da      	strb	r2, [r3, #3]
    lora_params->crc_is_on=crc_is_on;
 800b882:	4b2c      	ldr	r3, [pc, #176]	; (800b934 <Rx_setup+0x1c8>)
 800b884:	781a      	ldrb	r2, [r3, #0]
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	711a      	strb	r2, [r3, #4]
    lora_params->invert_iq_is_on=invert_iq_is_on;
 800b88a:	4b2b      	ldr	r3, [pc, #172]	; (800b938 <Rx_setup+0x1cc>)
 800b88c:	781a      	ldrb	r2, [r3, #0]
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	715a      	strb	r2, [r3, #5]
    sx126x_set_lora_pkt_params(&hspi, lora_params);
 800b892:	6839      	ldr	r1, [r7, #0]
 800b894:	4815      	ldr	r0, [pc, #84]	; (800b8ec <Rx_setup+0x180>)
 800b896:	f000 fce3 	bl	800c260 <sx126x_set_lora_pkt_params>
    free(lora_params);
 800b89a:	6838      	ldr	r0, [r7, #0]
 800b89c:	f00f f8e4 	bl	801aa68 <free>

    //set dio and irq parameters
    sx126x_set_dio_irq_params(&hspi, irq_mask, dio1_mask, dio2_mask, dio3_mask);
 800b8a0:	4b26      	ldr	r3, [pc, #152]	; (800b93c <Rx_setup+0x1d0>)
 800b8a2:	8819      	ldrh	r1, [r3, #0]
 800b8a4:	4b26      	ldr	r3, [pc, #152]	; (800b940 <Rx_setup+0x1d4>)
 800b8a6:	881a      	ldrh	r2, [r3, #0]
 800b8a8:	4b26      	ldr	r3, [pc, #152]	; (800b944 <Rx_setup+0x1d8>)
 800b8aa:	8818      	ldrh	r0, [r3, #0]
 800b8ac:	4b26      	ldr	r3, [pc, #152]	; (800b948 <Rx_setup+0x1dc>)
 800b8ae:	881b      	ldrh	r3, [r3, #0]
 800b8b0:	9300      	str	r3, [sp, #0]
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	480d      	ldr	r0, [pc, #52]	; (800b8ec <Rx_setup+0x180>)
 800b8b6:	f000 fb51 	bl	800bf5c <sx126x_set_dio_irq_params>

    //timer for TIMEOUT params
    sx126x_stop_timer_on_preamble(&hspi, timer_is_stopped_at_header);
 800b8ba:	4b24      	ldr	r3, [pc, #144]	; (800b94c <Rx_setup+0x1e0>)
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	4619      	mov	r1, r3
 800b8c0:	480a      	ldr	r0, [pc, #40]	; (800b8ec <Rx_setup+0x180>)
 800b8c2:	f000 f96f 	bl	800bba4 <sx126x_stop_timer_on_preamble>
    sx126x_set_lora_symb_nb_timeout(&hspi, nb_symbols_for_valid_rx);
 800b8c6:	4b22      	ldr	r3, [pc, #136]	; (800b950 <Rx_setup+0x1e4>)
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	4807      	ldr	r0, [pc, #28]	; (800b8ec <Rx_setup+0x180>)
 800b8ce:	f000 fd59 	bl	800c384 <sx126x_set_lora_symb_nb_timeout>


}
 800b8d2:	bf00      	nop
 800b8d4:	3708      	adds	r7, #8
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	200007ec 	.word	0x200007ec
 800b8e0:	200007e8 	.word	0x200007e8
 800b8e4:	200007e4 	.word	0x200007e4
 800b8e8:	200007e0 	.word	0x200007e0
 800b8ec:	20000800 	.word	0x20000800
 800b8f0:	200000b0 	.word	0x200000b0
 800b8f4:	200000b4 	.word	0x200000b4
 800b8f8:	200000b5 	.word	0x200000b5
 800b8fc:	200000b6 	.word	0x200000b6
 800b900:	200000b8 	.word	0x200000b8
 800b904:	200000b7 	.word	0x200000b7
 800b908:	200000b9 	.word	0x200000b9
 800b90c:	200000ba 	.word	0x200000ba
 800b910:	20000859 	.word	0x20000859
 800b914:	2000085a 	.word	0x2000085a
 800b918:	200000c0 	.word	0x200000c0
 800b91c:	200000c1 	.word	0x200000c1
 800b920:	200000c2 	.word	0x200000c2
 800b924:	2000085b 	.word	0x2000085b
 800b928:	200000c4 	.word	0x200000c4
 800b92c:	2000085c 	.word	0x2000085c
 800b930:	200000c6 	.word	0x200000c6
 800b934:	200000c7 	.word	0x200000c7
 800b938:	2000085d 	.word	0x2000085d
 800b93c:	200000c8 	.word	0x200000c8
 800b940:	200000ca 	.word	0x200000ca
 800b944:	20000860 	.word	0x20000860
 800b948:	20000862 	.word	0x20000862
 800b94c:	2000085e 	.word	0x2000085e
 800b950:	2000085f 	.word	0x2000085f

0800b954 <RxProtocol>:

void RxProtocol(uint8_t buffer_received[]){
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]

    HAL_StatusTypeDef command_status;
    command_status = sx126x_clear_irq_status(&hspi, dio1_mask);
 800b95c:	4b2f      	ldr	r3, [pc, #188]	; (800ba1c <RxProtocol+0xc8>)
 800b95e:	881b      	ldrh	r3, [r3, #0]
 800b960:	4619      	mov	r1, r3
 800b962:	482f      	ldr	r0, [pc, #188]	; (800ba20 <RxProtocol+0xcc>)
 800b964:	f000 fb70 	bl	800c048 <sx126x_clear_irq_status>
 800b968:	4603      	mov	r3, r0
 800b96a:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_set_rx(&hspi, 3000);
 800b96c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800b970:	482b      	ldr	r0, [pc, #172]	; (800ba20 <RxProtocol+0xcc>)
 800b972:	f000 f8dd 	bl	800bb30 <sx126x_set_rx>
 800b976:	4603      	mov	r3, r0
 800b978:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(1400);
 800b97a:	f44f 60af 	mov.w	r0, #1400	; 0x578
 800b97e:	f000 fde7 	bl	800c550 <HAL_Delay>

    sx126x_irq_mask_t irq;
    command_status = sx126x_get_irq_status(&hspi, &irq); //reading the irq into irq
 800b982:	f107 030c 	add.w	r3, r7, #12
 800b986:	4619      	mov	r1, r3
 800b988:	4825      	ldr	r0, [pc, #148]	; (800ba20 <RxProtocol+0xcc>)
 800b98a:	f000 fb2b 	bl	800bfe4 <sx126x_get_irq_status>
 800b98e:	4603      	mov	r3, r0
 800b990:	73fb      	strb	r3, [r7, #15]
    do {
        command_status = sx126x_get_irq_status(&hspi, &irq); //reading the irq into irq
 800b992:	f107 030c 	add.w	r3, r7, #12
 800b996:	4619      	mov	r1, r3
 800b998:	4821      	ldr	r0, [pc, #132]	; (800ba20 <RxProtocol+0xcc>)
 800b99a:	f000 fb23 	bl	800bfe4 <sx126x_get_irq_status>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	73fb      	strb	r3, [r7, #15]
    } while ( (!(irq & SX126X_IRQ_RX_DONE)) && (!(irq & SX126X_IRQ_TIMEOUT)) );
 800b9a2:	89bb      	ldrh	r3, [r7, #12]
 800b9a4:	f003 0302 	and.w	r3, r3, #2
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d104      	bne.n	800b9b6 <RxProtocol+0x62>
 800b9ac:	89bb      	ldrh	r3, [r7, #12]
 800b9ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d0ed      	beq.n	800b992 <RxProtocol+0x3e>

    if (irq & SX126X_IRQ_TIMEOUT) {
 800b9b6:	89bb      	ldrh	r3, [r7, #12]
 800b9b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d005      	beq.n	800b9cc <RxProtocol+0x78>
        //transmitBuffer("RX TIMEOUT!");
        sx126x_clear_irq_status(&hspi, SX126X_IRQ_TIMEOUT);
 800b9c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b9c4:	4816      	ldr	r0, [pc, #88]	; (800ba20 <RxProtocol+0xcc>)
 800b9c6:	f000 fb3f 	bl	800c048 <sx126x_clear_irq_status>
                //transmitBuffer("----- RECEIVED DATA -----");
                //transmitBuffer(buffer_received);
            }
        }
    }
}
 800b9ca:	e022      	b.n	800ba12 <RxProtocol+0xbe>
        if (irq & SX126X_IRQ_HEADER_ERROR || irq & SX126X_IRQ_CRC_ERROR) {
 800b9cc:	89bb      	ldrh	r3, [r7, #12]
 800b9ce:	f003 0320 	and.w	r3, r3, #32
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d104      	bne.n	800b9e0 <RxProtocol+0x8c>
 800b9d6:	89bb      	ldrh	r3, [r7, #12]
 800b9d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d004      	beq.n	800b9ea <RxProtocol+0x96>
            sx126x_clear_irq_status(&hspi, SX126X_IRQ_HEADER_ERROR | SX126X_IRQ_CRC_ERROR);
 800b9e0:	2160      	movs	r1, #96	; 0x60
 800b9e2:	480f      	ldr	r0, [pc, #60]	; (800ba20 <RxProtocol+0xcc>)
 800b9e4:	f000 fb30 	bl	800c048 <sx126x_clear_irq_status>
}
 800b9e8:	e013      	b.n	800ba12 <RxProtocol+0xbe>
        } else if (irq & SX126X_IRQ_RX_DONE) {
 800b9ea:	89bb      	ldrh	r3, [r7, #12]
 800b9ec:	f003 0302 	and.w	r3, r3, #2
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d00e      	beq.n	800ba12 <RxProtocol+0xbe>
            command_status = sx126x_read_buffer(&hspi, buffer_received);
 800b9f4:	6879      	ldr	r1, [r7, #4]
 800b9f6:	480a      	ldr	r0, [pc, #40]	; (800ba20 <RxProtocol+0xcc>)
 800b9f8:	f000 f9f8 	bl	800bdec <sx126x_read_buffer>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	73fb      	strb	r3, [r7, #15]
            if (command_status != SX126X_STATUS_OK) {
 800ba00:	7bfb      	ldrb	r3, [r7, #15]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d105      	bne.n	800ba12 <RxProtocol+0xbe>
                sx126x_get_irq_status(&hspi, &irq);
 800ba06:	f107 030c 	add.w	r3, r7, #12
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	4804      	ldr	r0, [pc, #16]	; (800ba20 <RxProtocol+0xcc>)
 800ba0e:	f000 fae9 	bl	800bfe4 <sx126x_get_irq_status>
}
 800ba12:	bf00      	nop
 800ba14:	3710      	adds	r7, #16
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	200000ca 	.word	0x200000ca
 800ba20:	20000800 	.word	0x20000800

0800ba24 <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b086      	sub	sp, #24
 800ba28:	af02      	add	r7, sp, #8
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_STANDBY] = { 0 };
 800ba30:	2300      	movs	r3, #0
 800ba32:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_STANDBY;
 800ba34:	2380      	movs	r3, #128	; 0x80
 800ba36:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) cfg;
 800ba38:	78fb      	ldrb	r3, [r7, #3]
 800ba3a:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 800ba3c:	f107 010c 	add.w	r1, r7, #12
 800ba40:	2300      	movs	r3, #0
 800ba42:	9300      	str	r3, [sp, #0]
 800ba44:	2300      	movs	r3, #0
 800ba46:	2202      	movs	r2, #2
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f7ff fc3f 	bl	800b2cc <sx126x_hal_write>
 800ba4e:	4603      	mov	r3, r0
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3710      	adds	r7, #16
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <sx126x_set_tx>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_FS, 0, 0 );
}

sx126x_status_t sx126x_set_tx( const void* context, const uint32_t timeout_in_ms , uint8_t lora_data_length)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b086      	sub	sp, #24
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	60f8      	str	r0, [r7, #12]
 800ba60:	60b9      	str	r1, [r7, #8]
 800ba62:	4613      	mov	r3, r2
 800ba64:	71fb      	strb	r3, [r7, #7]
    if (packet_type == SX126X_PKT_TYPE_LORA) {
 800ba66:	4b1b      	ldr	r3, [pc, #108]	; (800bad4 <sx126x_set_tx+0x7c>)
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d11e      	bne.n	800baac <sx126x_set_tx+0x54>
        struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 800ba6e:	2006      	movs	r0, #6
 800ba70:	f00e fff2 	bl	801aa58 <malloc>
 800ba74:	4603      	mov	r3, r0
 800ba76:	617b      	str	r3, [r7, #20]
        lora_params->preamble_len_in_symb=pkt_preamble_len;
 800ba78:	4b17      	ldr	r3, [pc, #92]	; (800bad8 <sx126x_set_tx+0x80>)
 800ba7a:	881a      	ldrh	r2, [r3, #0]
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	801a      	strh	r2, [r3, #0]
        lora_params->header_type=header_type;
 800ba80:	4b16      	ldr	r3, [pc, #88]	; (800badc <sx126x_set_tx+0x84>)
 800ba82:	781a      	ldrb	r2, [r3, #0]
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	709a      	strb	r2, [r3, #2]
        lora_params->pld_len_in_bytes=lora_data_length;
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	79fa      	ldrb	r2, [r7, #7]
 800ba8c:	70da      	strb	r2, [r3, #3]
        lora_params->crc_is_on=crc_is_on;
 800ba8e:	4b14      	ldr	r3, [pc, #80]	; (800bae0 <sx126x_set_tx+0x88>)
 800ba90:	781a      	ldrb	r2, [r3, #0]
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	711a      	strb	r2, [r3, #4]
        lora_params->invert_iq_is_on=invert_iq_is_on;
 800ba96:	4b13      	ldr	r3, [pc, #76]	; (800bae4 <sx126x_set_tx+0x8c>)
 800ba98:	781a      	ldrb	r2, [r3, #0]
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	715a      	strb	r2, [r3, #5]
        sx126x_set_lora_pkt_params(&hspi, lora_params);
 800ba9e:	6979      	ldr	r1, [r7, #20]
 800baa0:	4811      	ldr	r0, [pc, #68]	; (800bae8 <sx126x_set_tx+0x90>)
 800baa2:	f000 fbdd 	bl	800c260 <sx126x_set_lora_pkt_params>
        free(lora_params);
 800baa6:	6978      	ldr	r0, [r7, #20]
 800baa8:	f00e ffde 	bl	801aa68 <free>
    }

    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bab2:	d301      	bcc.n	800bab8 <sx126x_set_tx+0x60>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 800bab4:	2302      	movs	r3, #2
 800bab6:	e008      	b.n	800baca <sx126x_set_tx+0x72>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 800bab8:	68b8      	ldr	r0, [r7, #8]
 800baba:	f000 fcfb 	bl	800c4b4 <sx126x_convert_timeout_in_ms_to_rtc_step>
 800babe:	6138      	str	r0, [r7, #16]

    return sx126x_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 800bac0:	6939      	ldr	r1, [r7, #16]
 800bac2:	68f8      	ldr	r0, [r7, #12]
 800bac4:	f000 f812 	bl	800baec <sx126x_set_tx_with_timeout_in_rtc_step>
 800bac8:	4603      	mov	r3, r0
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3718      	adds	r7, #24
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	200000b4 	.word	0x200000b4
 800bad8:	200000c4 	.word	0x200000c4
 800badc:	2000085c 	.word	0x2000085c
 800bae0:	200000c7 	.word	0x200000c7
 800bae4:	2000085d 	.word	0x2000085d
 800bae8:	20000800 	.word	0x20000800

0800baec <sx126x_set_tx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b086      	sub	sp, #24
 800baf0:	af02      	add	r7, sp, #8
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_TX] = { 0 };
 800baf6:	2300      	movs	r3, #0
 800baf8:	60fb      	str	r3, [r7, #12]

    buf[0] = SX126X_SET_TX;
 800bafa:	2383      	movs	r3, #131	; 0x83
 800bafc:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( timeout_in_rtc_step >> 16 );
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	0c1b      	lsrs	r3, r3, #16
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout_in_rtc_step >> 8 );
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	0a1b      	lsrs	r3, r3, #8
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout_in_rtc_step >> 0 );
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	73fb      	strb	r3, [r7, #15]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX, 0, 0 );
 800bb14:	f107 010c 	add.w	r1, r7, #12
 800bb18:	2300      	movs	r3, #0
 800bb1a:	9300      	str	r3, [sp, #0]
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	2204      	movs	r2, #4
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f7ff fbd3 	bl	800b2cc <sx126x_hal_write>
 800bb26:	4603      	mov	r3, r0
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3710      	adds	r7, #16
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <sx126x_set_rx>:

sx126x_status_t sx126x_set_rx( const void* context, const uint32_t timeout_in_ms )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bb40:	d301      	bcc.n	800bb46 <sx126x_set_rx+0x16>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 800bb42:	2302      	movs	r3, #2
 800bb44:	e008      	b.n	800bb58 <sx126x_set_rx+0x28>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 800bb46:	6838      	ldr	r0, [r7, #0]
 800bb48:	f000 fcb4 	bl	800c4b4 <sx126x_convert_timeout_in_ms_to_rtc_step>
 800bb4c:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 800bb4e:	68f9      	ldr	r1, [r7, #12]
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 f805 	bl	800bb60 <sx126x_set_rx_with_timeout_in_rtc_step>
 800bb56:	4603      	mov	r3, r0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3710      	adds	r7, #16
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <sx126x_set_rx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_rx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b086      	sub	sp, #24
 800bb64:	af02      	add	r7, sp, #8
 800bb66:	6078      	str	r0, [r7, #4]
 800bb68:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_RX] = { 0 };
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	60fb      	str	r3, [r7, #12]

    buf[0] = SX126X_SET_RX;
 800bb6e:	2382      	movs	r3, #130	; 0x82
 800bb70:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( timeout_in_rtc_step >> 16 );
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	0c1b      	lsrs	r3, r3, #16
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout_in_rtc_step >> 8 );
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	0a1b      	lsrs	r3, r3, #8
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout_in_rtc_step >> 0 );
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	b2db      	uxtb	r3, r3
 800bb86:	73fb      	strb	r3, [r7, #15]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX, 0, 0 );
 800bb88:	f107 010c 	add.w	r1, r7, #12
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	9300      	str	r3, [sp, #0]
 800bb90:	2300      	movs	r3, #0
 800bb92:	2204      	movs	r2, #4
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f7ff fb99 	bl	800b2cc <sx126x_hal_write>
 800bb9a:	4603      	mov	r3, r0
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3710      	adds	r7, #16
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <sx126x_stop_timer_on_preamble>:

sx126x_status_t sx126x_stop_timer_on_preamble( const void* context, const bool enable )
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b086      	sub	sp, #24
 800bba8:	af02      	add	r7, sp, #8
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	460b      	mov	r3, r1
 800bbae:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_STOP_TIMER_ON_PREAMBLE] = { 0 };
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_STOP_TIMER_ON_PREAMBLE;
 800bbb4:	239f      	movs	r3, #159	; 0x9f
 800bbb6:	733b      	strb	r3, [r7, #12]

    buf[1] = ( enable == true ) ? 1 : 0;
 800bbb8:	78fb      	ldrb	r3, [r7, #3]
 800bbba:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STOP_TIMER_ON_PREAMBLE, 0, 0 );
 800bbbc:	f107 010c 	add.w	r1, r7, #12
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	9300      	str	r3, [sp, #0]
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	2202      	movs	r2, #2
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f7ff fb7f 	bl	800b2cc <sx126x_hal_write>
 800bbce:	4603      	mov	r3, r0
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3710      	adds	r7, #16
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b086      	sub	sp, #24
 800bbdc:	af02      	add	r7, sp, #8
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = { 0 };
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_REGULATOR_MODE;
 800bbe8:	2396      	movs	r3, #150	; 0x96
 800bbea:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) mode;
 800bbec:	78fb      	ldrb	r3, [r7, #3]
 800bbee:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 800bbf0:	f107 010c 	add.w	r1, r7, #12
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	9300      	str	r3, [sp, #0]
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	2202      	movs	r2, #2
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f7ff fb65 	bl	800b2cc <sx126x_hal_write>
 800bc02:	4603      	mov	r3, r0
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3710      	adds	r7, #16
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b086      	sub	sp, #24
 800bc10:	af02      	add	r7, sp, #8
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	460b      	mov	r3, r1
 800bc16:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_CALIBRATE] = { 0 };
 800bc18:	2300      	movs	r3, #0
 800bc1a:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_CALIBRATE;
 800bc1c:	2389      	movs	r3, #137	; 0x89
 800bc1e:	733b      	strb	r3, [r7, #12]

    buf[1] = param;
 800bc20:	78fb      	ldrb	r3, [r7, #3]
 800bc22:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 800bc24:	f107 010c 	add.w	r1, r7, #12
 800bc28:	2300      	movs	r3, #0
 800bc2a:	9300      	str	r3, [sp, #0]
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	2202      	movs	r2, #2
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f7ff fb4b 	bl	800b2cc <sx126x_hal_write>
 800bc36:	4603      	mov	r3, r0
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3710      	adds	r7, #16
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <sx126x_cal_img_hex>:

sx126x_status_t sx126x_cal_img_hex( const void* context, const uint8_t low_freq, const uint8_t high_freq)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b086      	sub	sp, #24
 800bc44:	af02      	add	r7, sp, #8
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	460b      	mov	r3, r1
 800bc4a:	70fb      	strb	r3, [r7, #3]
 800bc4c:	4613      	mov	r3, r2
 800bc4e:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CALIBRATE_IMAGE] = { 0 };
 800bc50:	4b0c      	ldr	r3, [pc, #48]	; (800bc84 <sx126x_cal_img_hex+0x44>)
 800bc52:	881b      	ldrh	r3, [r3, #0]
 800bc54:	81bb      	strh	r3, [r7, #12]
 800bc56:	2300      	movs	r3, #0
 800bc58:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CALIBRATE_IMAGE;
 800bc5a:	2398      	movs	r3, #152	; 0x98
 800bc5c:	733b      	strb	r3, [r7, #12]
    buf[1] = low_freq;
 800bc5e:	78fb      	ldrb	r3, [r7, #3]
 800bc60:	737b      	strb	r3, [r7, #13]
    buf[2] = high_freq;
 800bc62:	78bb      	ldrb	r3, [r7, #2]
 800bc64:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
 800bc66:	f107 010c 	add.w	r1, r7, #12
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	9300      	str	r3, [sp, #0]
 800bc6e:	2300      	movs	r3, #0
 800bc70:	2203      	movs	r2, #3
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f7ff fb2a 	bl	800b2cc <sx126x_hal_write>
 800bc78:	4603      	mov	r3, r0
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3710      	adds	r7, #16
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop
 800bc84:	080228bc 	.word	0x080228bc

0800bc88 <sx126x_set_pa_cfg>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b086      	sub	sp, #24
 800bc8c:	af02      	add	r7, sp, #8
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_PA_CFG] = { 0 };
 800bc92:	2300      	movs	r3, #0
 800bc94:	60bb      	str	r3, [r7, #8]
 800bc96:	2300      	movs	r3, #0
 800bc98:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_PA_CFG;
 800bc9a:	2395      	movs	r3, #149	; 0x95
 800bc9c:	723b      	strb	r3, [r7, #8]
    buf[1] = params->pa_duty_cycle;
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	727b      	strb	r3, [r7, #9]
    buf[2] = params->hp_max;
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	785b      	ldrb	r3, [r3, #1]
 800bca8:	72bb      	strb	r3, [r7, #10]
    buf[3] = params->device_sel;
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	789b      	ldrb	r3, [r3, #2]
 800bcae:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->pa_lut;
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	78db      	ldrb	r3, [r3, #3]
 800bcb4:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 800bcb6:	f107 0108 	add.w	r1, r7, #8
 800bcba:	2300      	movs	r3, #0
 800bcbc:	9300      	str	r3, [sp, #0]
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	2205      	movs	r2, #5
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f7ff fb02 	bl	800b2cc <sx126x_hal_write>
 800bcc8:	4603      	mov	r3, r0
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3710      	adds	r7, #16
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <sx126x_set_rx_tx_fallback_mode>:

sx126x_status_t sx126x_set_rx_tx_fallback_mode( const void* context, const sx126x_fallback_modes_t fallback_mode )
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b086      	sub	sp, #24
 800bcd6:	af02      	add	r7, sp, #8
 800bcd8:	6078      	str	r0, [r7, #4]
 800bcda:	460b      	mov	r3, r1
 800bcdc:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_RX_TX_FALLBACK_MODE] = { 0 };
 800bcde:	2300      	movs	r3, #0
 800bce0:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_RX_TX_FALLBACK_MODE;
 800bce2:	2393      	movs	r3, #147	; 0x93
 800bce4:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) fallback_mode;
 800bce6:	78fb      	ldrb	r3, [r7, #3]
 800bce8:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX_TX_FALLBACK_MODE, 0, 0 );
 800bcea:	f107 010c 	add.w	r1, r7, #12
 800bcee:	2300      	movs	r3, #0
 800bcf0:	9300      	str	r3, [sp, #0]
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	2202      	movs	r2, #2
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f7ff fae8 	bl	800b2cc <sx126x_hal_write>
 800bcfc:	4603      	mov	r3, r0
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3710      	adds	r7, #16
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
	...

0800bd08 <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b088      	sub	sp, #32
 800bd0c:	af02      	add	r7, sp, #8
 800bd0e:	60f8      	str	r0, [r7, #12]
 800bd10:	607a      	str	r2, [r7, #4]
 800bd12:	461a      	mov	r2, r3
 800bd14:	460b      	mov	r3, r1
 800bd16:	817b      	strh	r3, [r7, #10]
 800bd18:	4613      	mov	r3, r2
 800bd1a:	727b      	strb	r3, [r7, #9]
    uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = { 0 };
 800bd1c:	4b0e      	ldr	r3, [pc, #56]	; (800bd58 <sx126x_write_register+0x50>)
 800bd1e:	881b      	ldrh	r3, [r3, #0]
 800bd20:	82bb      	strh	r3, [r7, #20]
 800bd22:	2300      	movs	r3, #0
 800bd24:	75bb      	strb	r3, [r7, #22]

    buf[0] = SX126X_WRITE_REGISTER;
 800bd26:	230d      	movs	r3, #13
 800bd28:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( address >> 8 );
 800bd2a:	897b      	ldrh	r3, [r7, #10]
 800bd2c:	0a1b      	lsrs	r3, r3, #8
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	b2db      	uxtb	r3, r3
 800bd32:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( address >> 0 );
 800bd34:	897b      	ldrh	r3, [r7, #10]
 800bd36:	b2db      	uxtb	r3, r3
 800bd38:	75bb      	strb	r3, [r7, #22]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 800bd3a:	7a7b      	ldrb	r3, [r7, #9]
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	f107 0114 	add.w	r1, r7, #20
 800bd42:	9300      	str	r3, [sp, #0]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2203      	movs	r2, #3
 800bd48:	68f8      	ldr	r0, [r7, #12]
 800bd4a:	f7ff fabf 	bl	800b2cc <sx126x_hal_write>
 800bd4e:	4603      	mov	r3, r0
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3718      	adds	r7, #24
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	080228bc 	.word	0x080228bc

0800bd5c <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b088      	sub	sp, #32
 800bd60:	af02      	add	r7, sp, #8
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	607a      	str	r2, [r7, #4]
 800bd66:	461a      	mov	r2, r3
 800bd68:	460b      	mov	r3, r1
 800bd6a:	817b      	strh	r3, [r7, #10]
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	727b      	strb	r3, [r7, #9]
    uint8_t         buf[SX126X_SIZE_READ_REGISTER] = { 0 };
 800bd70:	2300      	movs	r3, #0
 800bd72:	613b      	str	r3, [r7, #16]
    sx126x_status_t status                         = SX126X_STATUS_ERROR;
 800bd74:	2303      	movs	r3, #3
 800bd76:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_READ_REGISTER;
 800bd78:	231d      	movs	r3, #29
 800bd7a:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( address >> 8 );
 800bd7c:	897b      	ldrh	r3, [r7, #10]
 800bd7e:	0a1b      	lsrs	r3, r3, #8
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	b2db      	uxtb	r3, r3
 800bd84:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( address >> 0 );
 800bd86:	897b      	ldrh	r3, [r7, #10]
 800bd88:	b2db      	uxtb	r3, r3
 800bd8a:	74bb      	strb	r3, [r7, #18]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 800bd8c:	f107 0110 	add.w	r1, r7, #16
 800bd90:	7a7b      	ldrb	r3, [r7, #9]
 800bd92:	9300      	str	r3, [sp, #0]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2204      	movs	r2, #4
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f7ff fad9 	bl	800b350 <sx126x_hal_read>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	75fb      	strb	r3, [r7, #23]

    return status;
 800bda2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3718      	adds	r7, #24
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <sx126x_write_buffer>:

sx126x_status_t sx126x_write_buffer( const void* context, const uint8_t buffer_offset, const uint8_t* buffer,
                                     const uint8_t size )
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b088      	sub	sp, #32
 800bdb0:	af02      	add	r7, sp, #8
 800bdb2:	60f8      	str	r0, [r7, #12]
 800bdb4:	607a      	str	r2, [r7, #4]
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	460b      	mov	r3, r1
 800bdba:	72fb      	strb	r3, [r7, #11]
 800bdbc:	4613      	mov	r3, r2
 800bdbe:	72bb      	strb	r3, [r7, #10]
    uint8_t buf[SX126X_SIZE_WRITE_BUFFER] = { 0 };
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	82bb      	strh	r3, [r7, #20]

    buf[0] = SX126X_WRITE_BUFFER;
 800bdc4:	230e      	movs	r3, #14
 800bdc6:	753b      	strb	r3, [r7, #20]

    buf[1] = buffer_offset;
 800bdc8:	7afb      	ldrb	r3, [r7, #11]
 800bdca:	757b      	strb	r3, [r7, #21]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_BUFFER, buffer, size );
 800bdcc:	7abb      	ldrb	r3, [r7, #10]
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	f107 0114 	add.w	r1, r7, #20
 800bdd4:	9300      	str	r3, [sp, #0]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2202      	movs	r2, #2
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f7ff fa76 	bl	800b2cc <sx126x_hal_write>
 800bde0:	4603      	mov	r3, r0
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3718      	adds	r7, #24
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
	...

0800bdec <sx126x_read_buffer>:

sx126x_status_t sx126x_read_buffer( const void* context, uint8_t* buffer)
{
 800bdec:	b5b0      	push	{r4, r5, r7, lr}
 800bdee:	b08c      	sub	sp, #48	; 0x30
 800bdf0:	af02      	add	r7, sp, #8
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
 800bdf6:	466b      	mov	r3, sp
 800bdf8:	461d      	mov	r5, r3
    sx126x_status_t status                       = SX126X_STATUS_ERROR;
 800bdfa:	2303      	movs	r3, #3
 800bdfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	sx126x_rx_buffer_status_t buffer_status;
    sx126x_get_rx_buffer_status(&hspi, &buffer_status);
 800be00:	f107 030c 	add.w	r3, r7, #12
 800be04:	4619      	mov	r1, r3
 800be06:	4854      	ldr	r0, [pc, #336]	; (800bf58 <sx126x_read_buffer+0x16c>)
 800be08:	f000 fb02 	bl	800c410 <sx126x_get_rx_buffer_status>
    uint8_t size = buffer_status.pld_len_in_bytes;
 800be0c:	7b3b      	ldrb	r3, [r7, #12]
 800be0e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    uint8_t offset = buffer_status.buffer_start_pointer;
 800be12:	7b7b      	ldrb	r3, [r7, #13]
 800be14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    uint8_t received_buf[size + 1];
 800be18:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800be1c:	1c5c      	adds	r4, r3, #1
 800be1e:	1e63      	subs	r3, r4, #1
 800be20:	61fb      	str	r3, [r7, #28]
 800be22:	4623      	mov	r3, r4
 800be24:	4618      	mov	r0, r3
 800be26:	f04f 0100 	mov.w	r1, #0
 800be2a:	f04f 0200 	mov.w	r2, #0
 800be2e:	f04f 0300 	mov.w	r3, #0
 800be32:	00cb      	lsls	r3, r1, #3
 800be34:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800be38:	00c2      	lsls	r2, r0, #3
 800be3a:	4623      	mov	r3, r4
 800be3c:	4618      	mov	r0, r3
 800be3e:	f04f 0100 	mov.w	r1, #0
 800be42:	f04f 0200 	mov.w	r2, #0
 800be46:	f04f 0300 	mov.w	r3, #0
 800be4a:	00cb      	lsls	r3, r1, #3
 800be4c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800be50:	00c2      	lsls	r2, r0, #3
 800be52:	4623      	mov	r3, r4
 800be54:	3307      	adds	r3, #7
 800be56:	08db      	lsrs	r3, r3, #3
 800be58:	00db      	lsls	r3, r3, #3
 800be5a:	ebad 0d03 	sub.w	sp, sp, r3
 800be5e:	ab02      	add	r3, sp, #8
 800be60:	3300      	adds	r3, #0
 800be62:	61bb      	str	r3, [r7, #24]
    uint8_t cmd_buf[size + 1 + SX126X_OFFSET_READ_BUFFER];
 800be64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800be68:	1cdc      	adds	r4, r3, #3
 800be6a:	1e63      	subs	r3, r4, #1
 800be6c:	617b      	str	r3, [r7, #20]
 800be6e:	4623      	mov	r3, r4
 800be70:	4618      	mov	r0, r3
 800be72:	f04f 0100 	mov.w	r1, #0
 800be76:	f04f 0200 	mov.w	r2, #0
 800be7a:	f04f 0300 	mov.w	r3, #0
 800be7e:	00cb      	lsls	r3, r1, #3
 800be80:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800be84:	00c2      	lsls	r2, r0, #3
 800be86:	4623      	mov	r3, r4
 800be88:	4618      	mov	r0, r3
 800be8a:	f04f 0100 	mov.w	r1, #0
 800be8e:	f04f 0200 	mov.w	r2, #0
 800be92:	f04f 0300 	mov.w	r3, #0
 800be96:	00cb      	lsls	r3, r1, #3
 800be98:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800be9c:	00c2      	lsls	r2, r0, #3
 800be9e:	4623      	mov	r3, r4
 800bea0:	3307      	adds	r3, #7
 800bea2:	08db      	lsrs	r3, r3, #3
 800bea4:	00db      	lsls	r3, r3, #3
 800bea6:	ebad 0d03 	sub.w	sp, sp, r3
 800beaa:	ab02      	add	r3, sp, #8
 800beac:	3300      	adds	r3, #0
 800beae:	613b      	str	r3, [r7, #16]

    for (uint8_t i=2; i<size+1+SX126X_OFFSET_READ_BUFFER; i++){
 800beb0:	2302      	movs	r3, #2
 800beb2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800beb6:	e009      	b.n	800becc <sx126x_read_buffer+0xe0>
        cmd_buf[i] = 0x00;
 800beb8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800bebc:	693a      	ldr	r2, [r7, #16]
 800bebe:	2100      	movs	r1, #0
 800bec0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i=2; i<size+1+SX126X_OFFSET_READ_BUFFER; i++){
 800bec2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800bec6:	3301      	adds	r3, #1
 800bec8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800becc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bed0:	1c9a      	adds	r2, r3, #2
 800bed2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800bed6:	429a      	cmp	r2, r3
 800bed8:	daee      	bge.n	800beb8 <sx126x_read_buffer+0xcc>
    }

    cmd_buf[0] = SX126X_READ_BUFFER;
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	221e      	movs	r2, #30
 800bede:	701a      	strb	r2, [r3, #0]
    cmd_buf[1] = offset;
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800bee6:	705a      	strb	r2, [r3, #1]

    status = ( sx126x_status_t ) sx126x_hal_read( context, cmd_buf, SX126X_OFFSET_READ_BUFFER + size, received_buf,  SX126X_OFFSET_READ_BUFFER);
 800bee8:	6939      	ldr	r1, [r7, #16]
 800beea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800beee:	b29b      	uxth	r3, r3
 800bef0:	3302      	adds	r3, #2
 800bef2:	b29a      	uxth	r2, r3
 800bef4:	69bb      	ldr	r3, [r7, #24]
 800bef6:	2002      	movs	r0, #2
 800bef8:	9000      	str	r0, [sp, #0]
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f7ff fa28 	bl	800b350 <sx126x_hal_read>
 800bf00:	4603      	mov	r3, r0
 800bf02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (status == SX126X_STATUS_OK) {
 800bf06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d11c      	bne.n	800bf48 <sx126x_read_buffer+0x15c>
        status = received_buf[0];
 800bf0e:	69bb      	ldr	r3, [r7, #24]
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        //CO U LD T R Y T O U SE SPRINTF
        for (uint8_t i=1; i<=size; i++){
 800bf16:	2301      	movs	r3, #1
 800bf18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bf1c:	e00e      	b.n	800bf3c <sx126x_read_buffer+0x150>
            buffer[i-1] = received_buf[i];
 800bf1e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bf22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bf26:	3b01      	subs	r3, #1
 800bf28:	6839      	ldr	r1, [r7, #0]
 800bf2a:	440b      	add	r3, r1
 800bf2c:	69b9      	ldr	r1, [r7, #24]
 800bf2e:	5c8a      	ldrb	r2, [r1, r2]
 800bf30:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=1; i<=size; i++){
 800bf32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bf36:	3301      	adds	r3, #1
 800bf38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bf3c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bf40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d9ea      	bls.n	800bf1e <sx126x_read_buffer+0x132>
        }
    }
    //ADD FUCKING RETURN STATUS FROM RECEIVED_BUF[0]
    return status;
 800bf48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf4c:	46ad      	mov	sp, r5
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3728      	adds	r7, #40	; 0x28
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bdb0      	pop	{r4, r5, r7, pc}
 800bf56:	bf00      	nop
 800bf58:	20000800 	.word	0x20000800

0800bf5c <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b08a      	sub	sp, #40	; 0x28
 800bf60:	af02      	add	r7, sp, #8
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	4608      	mov	r0, r1
 800bf66:	4611      	mov	r1, r2
 800bf68:	461a      	mov	r2, r3
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	817b      	strh	r3, [r7, #10]
 800bf6e:	460b      	mov	r3, r1
 800bf70:	813b      	strh	r3, [r7, #8]
 800bf72:	4613      	mov	r3, r2
 800bf74:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = { 0 };
 800bf76:	2300      	movs	r3, #0
 800bf78:	617b      	str	r3, [r7, #20]
 800bf7a:	f107 0318 	add.w	r3, r7, #24
 800bf7e:	2200      	movs	r2, #0
 800bf80:	601a      	str	r2, [r3, #0]
 800bf82:	711a      	strb	r2, [r3, #4]

    buf[0] = SX126X_SET_DIO_IRQ_PARAMS;
 800bf84:	2308      	movs	r3, #8
 800bf86:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 800bf88:	897b      	ldrh	r3, [r7, #10]
 800bf8a:	0a1b      	lsrs	r3, r3, #8
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 800bf92:	897b      	ldrh	r3, [r7, #10]
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	75bb      	strb	r3, [r7, #22]

    buf[3] = ( uint8_t )( dio1_mask >> 8 );
 800bf98:	893b      	ldrh	r3, [r7, #8]
 800bf9a:	0a1b      	lsrs	r3, r3, #8
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	75fb      	strb	r3, [r7, #23]
    buf[4] = ( uint8_t )( dio1_mask >> 0 );
 800bfa2:	893b      	ldrh	r3, [r7, #8]
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	763b      	strb	r3, [r7, #24]

    buf[5] = ( uint8_t )( dio2_mask >> 8 );
 800bfa8:	88fb      	ldrh	r3, [r7, #6]
 800bfaa:	0a1b      	lsrs	r3, r3, #8
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	b2db      	uxtb	r3, r3
 800bfb0:	767b      	strb	r3, [r7, #25]
    buf[6] = ( uint8_t )( dio2_mask >> 0 );
 800bfb2:	88fb      	ldrh	r3, [r7, #6]
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	76bb      	strb	r3, [r7, #26]

    buf[7] = ( uint8_t )( dio3_mask >> 8 );
 800bfb8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bfba:	0a1b      	lsrs	r3, r3, #8
 800bfbc:	b29b      	uxth	r3, r3
 800bfbe:	b2db      	uxtb	r3, r3
 800bfc0:	76fb      	strb	r3, [r7, #27]
    buf[8] = ( uint8_t )( dio3_mask >> 0 );
 800bfc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bfc4:	b2db      	uxtb	r3, r3
 800bfc6:	773b      	strb	r3, [r7, #28]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 800bfc8:	f107 0114 	add.w	r1, r7, #20
 800bfcc:	2300      	movs	r3, #0
 800bfce:	9300      	str	r3, [sp, #0]
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	2209      	movs	r2, #9
 800bfd4:	68f8      	ldr	r0, [r7, #12]
 800bfd6:	f7ff f979 	bl	800b2cc <sx126x_hal_write>
 800bfda:	4603      	mov	r3, r0
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3720      	adds	r7, #32
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <sx126x_get_irq_status>:

sx126x_status_t sx126x_get_irq_status( const void* context, sx126x_irq_mask_t* irq )
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b088      	sub	sp, #32
 800bfe8:	af02      	add	r7, sp, #8
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	6039      	str	r1, [r7, #0]
    uint8_t         buf[SX126X_SIZE_GET_IRQ_STATUS]             = { 0x00 }; //0x00 is no operational, its just so that theyre equal
 800bfee:	2300      	movs	r3, #0
 800bff0:	613b      	str	r3, [r7, #16]
    uint8_t         received_buf[sizeof( sx126x_irq_mask_t )+1] = { 0x00 };
 800bff2:	4b14      	ldr	r3, [pc, #80]	; (800c044 <sx126x_get_irq_status+0x60>)
 800bff4:	881b      	ldrh	r3, [r3, #0]
 800bff6:	81bb      	strh	r3, [r7, #12]
 800bff8:	2300      	movs	r3, #0
 800bffa:	73bb      	strb	r3, [r7, #14]
    sx126x_status_t status                                      = SX126X_STATUS_ERROR;
 800bffc:	2303      	movs	r3, #3
 800bffe:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_GET_IRQ_STATUS;
 800c000:	2312      	movs	r3, #18
 800c002:	743b      	strb	r3, [r7, #16]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_IRQ_STATUS, received_buf,
 800c004:	f107 030c 	add.w	r3, r7, #12
 800c008:	f107 0110 	add.w	r1, r7, #16
 800c00c:	2201      	movs	r2, #1
 800c00e:	9200      	str	r2, [sp, #0]
 800c010:	2204      	movs	r2, #4
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f7ff f99c 	bl	800b350 <sx126x_hal_read>
 800c018:	4603      	mov	r3, r0
 800c01a:	75fb      	strb	r3, [r7, #23]
                                                  SX126X_OFFSET_GET_IRQ_STATUS );

    if( status == SX126X_STATUS_OK )
 800c01c:	7dfb      	ldrb	r3, [r7, #23]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d10b      	bne.n	800c03a <sx126x_get_irq_status+0x56>
    {
        *irq = ( ( sx126x_irq_mask_t ) received_buf[1] << 8 ) | ( ( sx126x_irq_mask_t ) received_buf[2] << 0 );
 800c022:	7b7b      	ldrb	r3, [r7, #13]
 800c024:	021b      	lsls	r3, r3, #8
 800c026:	b21a      	sxth	r2, r3
 800c028:	7bbb      	ldrb	r3, [r7, #14]
 800c02a:	b21b      	sxth	r3, r3
 800c02c:	4313      	orrs	r3, r2
 800c02e:	b21b      	sxth	r3, r3
 800c030:	b29a      	uxth	r2, r3
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	801a      	strh	r2, [r3, #0]
        status = received_buf[0]; //its the status
 800c036:	7b3b      	ldrb	r3, [r7, #12]
 800c038:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 800c03a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3718      	adds	r7, #24
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	080228bc 	.word	0x080228bc

0800c048 <sx126x_clear_irq_status>:

sx126x_status_t sx126x_clear_irq_status( const void* context, const sx126x_irq_mask_t irq_mask )
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b086      	sub	sp, #24
 800c04c:	af02      	add	r7, sp, #8
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	460b      	mov	r3, r1
 800c052:	807b      	strh	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CLR_IRQ_STATUS] = { 0 };
 800c054:	4b0e      	ldr	r3, [pc, #56]	; (800c090 <sx126x_clear_irq_status+0x48>)
 800c056:	881b      	ldrh	r3, [r3, #0]
 800c058:	81bb      	strh	r3, [r7, #12]
 800c05a:	2300      	movs	r3, #0
 800c05c:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CLR_IRQ_STATUS;
 800c05e:	2302      	movs	r3, #2
 800c060:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 800c062:	887b      	ldrh	r3, [r7, #2]
 800c064:	0a1b      	lsrs	r3, r3, #8
 800c066:	b29b      	uxth	r3, r3
 800c068:	b2db      	uxtb	r3, r3
 800c06a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 800c06c:	887b      	ldrh	r3, [r7, #2]
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CLR_IRQ_STATUS, 0, 0 );
 800c072:	f107 010c 	add.w	r1, r7, #12
 800c076:	2300      	movs	r3, #0
 800c078:	9300      	str	r3, [sp, #0]
 800c07a:	2300      	movs	r3, #0
 800c07c:	2203      	movs	r2, #3
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f7ff f924 	bl	800b2cc <sx126x_hal_write>
 800c084:	4603      	mov	r3, r0
}
 800c086:	4618      	mov	r0, r3
 800c088:	3710      	adds	r7, #16
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	080228bc 	.word	0x080228bc

0800c094 <sx126x_set_dio2_as_rf_sw_ctrl>:
    }
    return status;
}

sx126x_status_t sx126x_set_dio2_as_rf_sw_ctrl( const void* context, const bool enable )
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b086      	sub	sp, #24
 800c098:	af02      	add	r7, sp, #8
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	460b      	mov	r3, r1
 800c09e:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL] = { 0 };
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_DIO2_AS_RF_SWITCH_CTRL;
 800c0a4:	239d      	movs	r3, #157	; 0x9d
 800c0a6:	733b      	strb	r3, [r7, #12]

    buf[1] = ( enable == true ) ? 1 : 0;
 800c0a8:	78fb      	ldrb	r3, [r7, #3]
 800c0aa:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
 800c0ac:	f107 010c 	add.w	r1, r7, #12
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	9300      	str	r3, [sp, #0]
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	2202      	movs	r2, #2
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f7ff f907 	bl	800b2cc <sx126x_hal_write>
 800c0be:	4603      	mov	r3, r0
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3710      	adds	r7, #16
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <sx126x_set_dio3_as_tcxo_ctrl>:

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b088      	sub	sp, #32
 800c0cc:	af02      	add	r7, sp, #8
 800c0ce:	60f8      	str	r0, [r7, #12]
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	607a      	str	r2, [r7, #4]
 800c0d4:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = { 0 };
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	613b      	str	r3, [r7, #16]
 800c0da:	2300      	movs	r3, #0
 800c0dc:	753b      	strb	r3, [r7, #20]

    buf[0] = SX126X_SET_DIO3_AS_TCXO_CTRL;
 800c0de:	2397      	movs	r3, #151	; 0x97
 800c0e0:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t ) tcxo_voltage;
 800c0e2:	7afb      	ldrb	r3, [r7, #11]
 800c0e4:	747b      	strb	r3, [r7, #17]

    buf[2] = ( uint8_t )( timeout >> 16 );
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	0c1b      	lsrs	r3, r3, #16
 800c0ea:	b2db      	uxtb	r3, r3
 800c0ec:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( timeout >> 8 );
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	0a1b      	lsrs	r3, r3, #8
 800c0f2:	b2db      	uxtb	r3, r3
 800c0f4:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( timeout >> 0 );
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	b2db      	uxtb	r3, r3
 800c0fa:	753b      	strb	r3, [r7, #20]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 800c0fc:	f107 0110 	add.w	r1, r7, #16
 800c100:	2300      	movs	r3, #0
 800c102:	9300      	str	r3, [sp, #0]
 800c104:	2300      	movs	r3, #0
 800c106:	2205      	movs	r2, #5
 800c108:	68f8      	ldr	r0, [r7, #12]
 800c10a:	f7ff f8df 	bl	800b2cc <sx126x_hal_write>
 800c10e:	4603      	mov	r3, r0
}
 800c110:	4618      	mov	r0, r3
 800c112:	3718      	adds	r7, #24
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}

0800c118 <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 800c122:	6838      	ldr	r0, [r7, #0]
 800c124:	f000 f9a0 	bl	800c468 <sx126x_convert_freq_in_hz_to_pll_step>
 800c128:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 800c12a:	68f9      	ldr	r1, [r7, #12]
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 f805 	bl	800c13c <sx126x_set_rf_freq_in_pll_steps>
 800c132:	4603      	mov	r3, r0
}
 800c134:	4618      	mov	r0, r3
 800c136:	3710      	adds	r7, #16
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b086      	sub	sp, #24
 800c140:	af02      	add	r7, sp, #8
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = { 0 };
 800c146:	2300      	movs	r3, #0
 800c148:	60bb      	str	r3, [r7, #8]
 800c14a:	2300      	movs	r3, #0
 800c14c:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_RF_FREQUENCY;
 800c14e:	2386      	movs	r3, #134	; 0x86
 800c150:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( freq >> 24 );
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	0e1b      	lsrs	r3, r3, #24
 800c156:	b2db      	uxtb	r3, r3
 800c158:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( freq >> 16 );
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	0c1b      	lsrs	r3, r3, #16
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( freq >> 8 );
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	0a1b      	lsrs	r3, r3, #8
 800c166:	b2db      	uxtb	r3, r3
 800c168:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( freq >> 0 );
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 800c170:	f107 0108 	add.w	r1, r7, #8
 800c174:	2300      	movs	r3, #0
 800c176:	9300      	str	r3, [sp, #0]
 800c178:	2300      	movs	r3, #0
 800c17a:	2205      	movs	r2, #5
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f7ff f8a5 	bl	800b2cc <sx126x_hal_write>
 800c182:	4603      	mov	r3, r0
}
 800c184:	4618      	mov	r0, r3
 800c186:	3710      	adds	r7, #16
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b086      	sub	sp, #24
 800c190:	af02      	add	r7, sp, #8
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	460b      	mov	r3, r1
 800c196:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = { 0 };
 800c198:	2300      	movs	r3, #0
 800c19a:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_PKT_TYPE;
 800c19c:	238a      	movs	r3, #138	; 0x8a
 800c19e:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pkt_type;
 800c1a0:	78fb      	ldrb	r3, [r7, #3]
 800c1a2:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 800c1a4:	f107 010c 	add.w	r1, r7, #12
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	9300      	str	r3, [sp, #0]
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	2202      	movs	r2, #2
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f7ff f88b 	bl	800b2cc <sx126x_hal_write>
 800c1b6:	4603      	mov	r3, r0
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3710      	adds	r7, #16
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <sx126x_set_tx_params>:

    return status;
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b086      	sub	sp, #24
 800c1c4:	af02      	add	r7, sp, #8
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	460b      	mov	r3, r1
 800c1ca:	70fb      	strb	r3, [r7, #3]
 800c1cc:	4613      	mov	r3, r2
 800c1ce:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = { 0 };
 800c1d0:	4b0c      	ldr	r3, [pc, #48]	; (800c204 <sx126x_set_tx_params+0x44>)
 800c1d2:	881b      	ldrh	r3, [r3, #0]
 800c1d4:	81bb      	strh	r3, [r7, #12]
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_TX_PARAMS;
 800c1da:	238e      	movs	r3, #142	; 0x8e
 800c1dc:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pwr_in_dbm;
 800c1de:	78fb      	ldrb	r3, [r7, #3]
 800c1e0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t ) ramp_time;
 800c1e2:	78bb      	ldrb	r3, [r7, #2]
 800c1e4:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 800c1e6:	f107 010c 	add.w	r1, r7, #12
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	9300      	str	r3, [sp, #0]
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	2203      	movs	r2, #3
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f7ff f86a 	bl	800b2cc <sx126x_hal_write>
 800c1f8:	4603      	mov	r3, r0
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3710      	adds	r7, #16
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
 800c202:	bf00      	nop
 800c204:	080228bc 	.word	0x080228bc

0800c208 <sx126x_set_lora_mod_params>:
    }
    return status;
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b086      	sub	sp, #24
 800c20c:	af02      	add	r7, sp, #8
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 800c212:	2303      	movs	r3, #3
 800c214:	73fb      	strb	r3, [r7, #15]

    uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = { 0 };
 800c216:	2300      	movs	r3, #0
 800c218:	60bb      	str	r3, [r7, #8]
 800c21a:	2300      	movs	r3, #0
 800c21c:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_MODULATION_PARAMS;
 800c21e:	238b      	movs	r3, #139	; 0x8b
 800c220:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( params->sf );
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( params->bw );
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	785b      	ldrb	r3, [r3, #1]
 800c22c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( params->cr );
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	789b      	ldrb	r3, [r3, #2]
 800c232:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->ldro & 0x01;
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	78db      	ldrb	r3, [r3, #3]
 800c238:	f003 0301 	and.w	r3, r3, #1
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	733b      	strb	r3, [r7, #12]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 800c240:	f107 0108 	add.w	r1, r7, #8
 800c244:	2300      	movs	r3, #0
 800c246:	9300      	str	r3, [sp, #0]
 800c248:	2300      	movs	r3, #0
 800c24a:	2205      	movs	r2, #5
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f7ff f83d 	bl	800b2cc <sx126x_hal_write>
 800c252:	4603      	mov	r3, r0
 800c254:	73fb      	strb	r3, [r7, #15]
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
        // WORKAROUND END
    }
    */

    return status;
 800c256:	7bfb      	ldrb	r3, [r7, #15]
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3710      	adds	r7, #16
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <sx126x_set_lora_pkt_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_GFSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b088      	sub	sp, #32
 800c264:	af02      	add	r7, sp, #8
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 800c26a:	2303      	movs	r3, #3
 800c26c:	75fb      	strb	r3, [r7, #23]

    uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = { 0 };
 800c26e:	2300      	movs	r3, #0
 800c270:	613b      	str	r3, [r7, #16]
 800c272:	f107 0314 	add.w	r3, r7, #20
 800c276:	2100      	movs	r1, #0
 800c278:	460a      	mov	r2, r1
 800c27a:	801a      	strh	r2, [r3, #0]
 800c27c:	460a      	mov	r2, r1
 800c27e:	709a      	strb	r2, [r3, #2]

    buf[0] = SX126X_SET_PKT_PARAMS;
 800c280:	238c      	movs	r3, #140	; 0x8c
 800c282:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( params->preamble_len_in_symb >> 8 );
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	881b      	ldrh	r3, [r3, #0]
 800c288:	0a1b      	lsrs	r3, r3, #8
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( params->preamble_len_in_symb >> 0 );
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	881b      	ldrh	r3, [r3, #0]
 800c294:	b2db      	uxtb	r3, r3
 800c296:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( params->header_type );
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	789b      	ldrb	r3, [r3, #2]
 800c29c:	74fb      	strb	r3, [r7, #19]
    buf[4] = params->pld_len_in_bytes;
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	78db      	ldrb	r3, [r3, #3]
 800c2a2:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( params->crc_is_on ? 1 : 0 );
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	791b      	ldrb	r3, [r3, #4]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d001      	beq.n	800c2b0 <sx126x_set_lora_pkt_params+0x50>
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	e000      	b.n	800c2b2 <sx126x_set_lora_pkt_params+0x52>
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( params->invert_iq_is_on ? 1 : 0 );
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	795b      	ldrb	r3, [r3, #5]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d001      	beq.n	800c2c0 <sx126x_set_lora_pkt_params+0x60>
 800c2bc:	2301      	movs	r3, #1
 800c2be:	e000      	b.n	800c2c2 <sx126x_set_lora_pkt_params+0x62>
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	75bb      	strb	r3, [r7, #22]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 800c2c4:	f107 0110 	add.w	r1, r7, #16
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	9300      	str	r3, [sp, #0]
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	2207      	movs	r2, #7
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f7fe fffb 	bl	800b2cc <sx126x_hal_write>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 800c2da:	7dfb      	ldrb	r3, [r7, #23]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d127      	bne.n	800c330 <sx126x_set_lora_pkt_params+0xd0>
    {
        uint8_t reg_value = 0;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 800c2e4:	f107 020f 	add.w	r2, r7, #15
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	f240 7136 	movw	r1, #1846	; 0x736
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f7ff fd34 	bl	800bd5c <sx126x_read_register>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 800c2f8:	7dfb      	ldrb	r3, [r7, #23]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d118      	bne.n	800c330 <sx126x_set_lora_pkt_params+0xd0>
        {
            if( params->invert_iq_is_on == true )
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	795b      	ldrb	r3, [r3, #5]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d005      	beq.n	800c312 <sx126x_set_lora_pkt_params+0xb2>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 800c306:	7bfb      	ldrb	r3, [r7, #15]
 800c308:	f023 0304 	bic.w	r3, r3, #4
 800c30c:	b2db      	uxtb	r3, r3
 800c30e:	73fb      	strb	r3, [r7, #15]
 800c310:	e004      	b.n	800c31c <sx126x_set_lora_pkt_params+0xbc>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 800c312:	7bfb      	ldrb	r3, [r7, #15]
 800c314:	f043 0304 	orr.w	r3, r3, #4
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 800c31c:	f107 020f 	add.w	r2, r7, #15
 800c320:	2301      	movs	r3, #1
 800c322:	f240 7136 	movw	r1, #1846	; 0x736
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f7ff fcee 	bl	800bd08 <sx126x_write_register>
 800c32c:	4603      	mov	r3, r0
 800c32e:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 800c330:	7dfb      	ldrb	r3, [r7, #23]
}
 800c332:	4618      	mov	r0, r3
 800c334:	3718      	adds	r7, #24
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
	...

0800c33c <sx126x_set_buffer_base_address>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_CAD_PARAMS, 0, 0 );
}

sx126x_status_t sx126x_set_buffer_base_address( const void* context, const uint8_t tx_base_address,
                                                const uint8_t rx_base_address )
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b086      	sub	sp, #24
 800c340:	af02      	add	r7, sp, #8
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	460b      	mov	r3, r1
 800c346:	70fb      	strb	r3, [r7, #3]
 800c348:	4613      	mov	r3, r2
 800c34a:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_BUFFER_BASE_ADDRESS] = { 0 };
 800c34c:	4b0c      	ldr	r3, [pc, #48]	; (800c380 <sx126x_set_buffer_base_address+0x44>)
 800c34e:	881b      	ldrh	r3, [r3, #0]
 800c350:	81bb      	strh	r3, [r7, #12]
 800c352:	2300      	movs	r3, #0
 800c354:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_BUFFER_BASE_ADDRESS;
 800c356:	238f      	movs	r3, #143	; 0x8f
 800c358:	733b      	strb	r3, [r7, #12]

    buf[1] = tx_base_address;
 800c35a:	78fb      	ldrb	r3, [r7, #3]
 800c35c:	737b      	strb	r3, [r7, #13]
    buf[2] = rx_base_address;
 800c35e:	78bb      	ldrb	r3, [r7, #2]
 800c360:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_BUFFER_BASE_ADDRESS, 0, 0 );
 800c362:	f107 010c 	add.w	r1, r7, #12
 800c366:	2300      	movs	r3, #0
 800c368:	9300      	str	r3, [sp, #0]
 800c36a:	2300      	movs	r3, #0
 800c36c:	2203      	movs	r2, #3
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f7fe ffac 	bl	800b2cc <sx126x_hal_write>
 800c374:	4603      	mov	r3, r0
}
 800c376:	4618      	mov	r0, r3
 800c378:	3710      	adds	r7, #16
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop
 800c380:	080228bc 	.word	0x080228bc

0800c384 <sx126x_set_lora_symb_nb_timeout>:

sx126x_status_t sx126x_set_lora_symb_nb_timeout( const void* context, const uint8_t nb_of_symbs )
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b088      	sub	sp, #32
 800c388:	af02      	add	r7, sp, #8
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	460b      	mov	r3, r1
 800c38e:	70fb      	strb	r3, [r7, #3]
    uint8_t         buf[SX126X_SIZE_SET_LORA_SYMB_NUM_TIMEOUT] = { 0 };
 800c390:	2300      	movs	r3, #0
 800c392:	823b      	strh	r3, [r7, #16]
    sx126x_status_t status                                     = SX126X_STATUS_ERROR;
 800c394:	2303      	movs	r3, #3
 800c396:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_SET_LORA_SYMB_NUM_TIMEOUT;
 800c398:	23a0      	movs	r3, #160	; 0xa0
 800c39a:	743b      	strb	r3, [r7, #16]

    buf[1] = nb_of_symbs;
 800c39c:	78fb      	ldrb	r3, [r7, #3]
 800c39e:	747b      	strb	r3, [r7, #17]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_LORA_SYMB_NUM_TIMEOUT, 0, 0 );
 800c3a0:	f107 0110 	add.w	r1, r7, #16
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	9300      	str	r3, [sp, #0]
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	2202      	movs	r2, #2
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f7fe ff8d 	bl	800b2cc <sx126x_hal_write>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	75fb      	strb	r3, [r7, #23]

    if( ( status == SX126X_STATUS_OK ) && ( nb_of_symbs >= 64 ) )
 800c3b6:	7dfb      	ldrb	r3, [r7, #23]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d124      	bne.n	800c406 <sx126x_set_lora_symb_nb_timeout+0x82>
 800c3bc:	78fb      	ldrb	r3, [r7, #3]
 800c3be:	2b3f      	cmp	r3, #63	; 0x3f
 800c3c0:	d921      	bls.n	800c406 <sx126x_set_lora_symb_nb_timeout+0x82>
    {
        uint8_t mant = nb_of_symbs >> 1;
 800c3c2:	78fb      	ldrb	r3, [r7, #3]
 800c3c4:	085b      	lsrs	r3, r3, #1
 800c3c6:	75bb      	strb	r3, [r7, #22]
        uint8_t exp  = 0;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	757b      	strb	r3, [r7, #21]
        uint8_t reg  = 0;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	73fb      	strb	r3, [r7, #15]

        while( mant > 31 )
 800c3d0:	e005      	b.n	800c3de <sx126x_set_lora_symb_nb_timeout+0x5a>
        {
            mant >>= 2;
 800c3d2:	7dbb      	ldrb	r3, [r7, #22]
 800c3d4:	089b      	lsrs	r3, r3, #2
 800c3d6:	75bb      	strb	r3, [r7, #22]
            exp++;
 800c3d8:	7d7b      	ldrb	r3, [r7, #21]
 800c3da:	3301      	adds	r3, #1
 800c3dc:	757b      	strb	r3, [r7, #21]
        while( mant > 31 )
 800c3de:	7dbb      	ldrb	r3, [r7, #22]
 800c3e0:	2b1f      	cmp	r3, #31
 800c3e2:	d8f6      	bhi.n	800c3d2 <sx126x_set_lora_symb_nb_timeout+0x4e>
        }

        reg    = exp + ( mant << 3 );
 800c3e4:	7dbb      	ldrb	r3, [r7, #22]
 800c3e6:	00db      	lsls	r3, r3, #3
 800c3e8:	b2da      	uxtb	r2, r3
 800c3ea:	7d7b      	ldrb	r3, [r7, #21]
 800c3ec:	4413      	add	r3, r2
 800c3ee:	b2db      	uxtb	r3, r3
 800c3f0:	73fb      	strb	r3, [r7, #15]
        status = sx126x_write_register( context, SX126X_REG_LR_SYNCH_TIMEOUT, &reg, 1 );
 800c3f2:	f107 020f 	add.w	r2, r7, #15
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	f240 7106 	movw	r1, #1798	; 0x706
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f7ff fc83 	bl	800bd08 <sx126x_write_register>
 800c402:	4603      	mov	r3, r0
 800c404:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 800c406:	7dfb      	ldrb	r3, [r7, #23]
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3718      	adds	r7, #24
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <sx126x_get_rx_buffer_status>:

    return status;
}

sx126x_status_t sx126x_get_rx_buffer_status( const void* context, sx126x_rx_buffer_status_t* rx_buffer_status )
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b088      	sub	sp, #32
 800c414:	af02      	add	r7, sp, #8
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	6039      	str	r1, [r7, #0]
    uint8_t         buf[SX126X_SIZE_GET_RX_BUFFER_STATUS]               = { 0x00 };
 800c41a:	2300      	movs	r3, #0
 800c41c:	613b      	str	r3, [r7, #16]
    uint8_t         status_local[sizeof( sx126x_rx_buffer_status_t )+1] = { 0x00 };
 800c41e:	4b11      	ldr	r3, [pc, #68]	; (800c464 <sx126x_get_rx_buffer_status+0x54>)
 800c420:	881b      	ldrh	r3, [r3, #0]
 800c422:	81bb      	strh	r3, [r7, #12]
 800c424:	2300      	movs	r3, #0
 800c426:	73bb      	strb	r3, [r7, #14]
    sx126x_status_t status                                              = SX126X_STATUS_ERROR;
 800c428:	2303      	movs	r3, #3
 800c42a:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_GET_RX_BUFFER_STATUS;
 800c42c:	2313      	movs	r3, #19
 800c42e:	743b      	strb	r3, [r7, #16]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_RX_BUFFER_STATUS, status_local,
 800c430:	f107 030c 	add.w	r3, r7, #12
 800c434:	f107 0110 	add.w	r1, r7, #16
 800c438:	2201      	movs	r2, #1
 800c43a:	9200      	str	r2, [sp, #0]
 800c43c:	2204      	movs	r2, #4
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f7fe ff86 	bl	800b350 <sx126x_hal_read>
 800c444:	4603      	mov	r3, r0
 800c446:	75fb      	strb	r3, [r7, #23]
                                                  SX126X_OFFSET_GET_RX_BUFFER_STATUS );

    if( status == SX126X_STATUS_OK )
 800c448:	7dfb      	ldrb	r3, [r7, #23]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d105      	bne.n	800c45a <sx126x_get_rx_buffer_status+0x4a>
    {
        rx_buffer_status->pld_len_in_bytes     = status_local[1];
 800c44e:	7b7a      	ldrb	r2, [r7, #13]
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	701a      	strb	r2, [r3, #0]
        rx_buffer_status->buffer_start_pointer = status_local[2];
 800c454:	7bba      	ldrb	r2, [r7, #14]
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	705a      	strb	r2, [r3, #1]
    }

    return (sx126x_status_t) status_local[0];
 800c45a:	7b3b      	ldrb	r3, [r7, #12]
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3718      	adds	r7, #24
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}
 800c464:	080228bc 	.word	0x080228bc

0800c468 <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 800c468:	b480      	push	{r7}
 800c46a:	b085      	sub	sp, #20
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	4a0f      	ldr	r2, [pc, #60]	; (800c4b0 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800c474:	fba2 2303 	umull	r2, r3, r2, r3
 800c478:	0b1b      	lsrs	r3, r3, #12
 800c47a:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f643 5209 	movw	r2, #15625	; 0x3d09
 800c482:	fb02 f303 	mul.w	r3, r2, r3
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	1ad3      	subs	r3, r2, r3
 800c48a:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	039b      	lsls	r3, r3, #14
 800c494:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 800c498:	3304      	adds	r3, #4
 800c49a:	4905      	ldr	r1, [pc, #20]	; (800c4b0 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800c49c:	fba1 1303 	umull	r1, r3, r1, r3
 800c4a0:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800c4a2:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3714      	adds	r7, #20
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr
 800c4b0:	431bde83 	.word	0x431bde83

0800c4b4 <sx126x_convert_timeout_in_ms_to_rtc_step>:

uint32_t sx126x_convert_timeout_in_ms_to_rtc_step( uint32_t timeout_in_ms )
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( timeout_in_ms * ( SX126X_RTC_FREQ_IN_HZ / 1000 ) );
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	019b      	lsls	r3, r3, #6
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	370c      	adds	r7, #12
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ca:	4770      	bx	lr

0800c4cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c4d0:	4b0e      	ldr	r3, [pc, #56]	; (800c50c <HAL_Init+0x40>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	4a0d      	ldr	r2, [pc, #52]	; (800c50c <HAL_Init+0x40>)
 800c4d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c4da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800c4dc:	4b0b      	ldr	r3, [pc, #44]	; (800c50c <HAL_Init+0x40>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a0a      	ldr	r2, [pc, #40]	; (800c50c <HAL_Init+0x40>)
 800c4e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c4e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c4e8:	4b08      	ldr	r3, [pc, #32]	; (800c50c <HAL_Init+0x40>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4a07      	ldr	r2, [pc, #28]	; (800c50c <HAL_Init+0x40>)
 800c4ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c4f4:	2003      	movs	r0, #3
 800c4f6:	f000 fd30 	bl	800cf5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c4fa:	200f      	movs	r0, #15
 800c4fc:	f7f7 f86c 	bl	80035d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800c500:	f7f7 f82c 	bl	800355c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c504:	2300      	movs	r3, #0
}
 800c506:	4618      	mov	r0, r3
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	40023c00 	.word	0x40023c00

0800c510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c510:	b480      	push	{r7}
 800c512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c514:	4b06      	ldr	r3, [pc, #24]	; (800c530 <HAL_IncTick+0x20>)
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	461a      	mov	r2, r3
 800c51a:	4b06      	ldr	r3, [pc, #24]	; (800c534 <HAL_IncTick+0x24>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	4413      	add	r3, r2
 800c520:	4a04      	ldr	r2, [pc, #16]	; (800c534 <HAL_IncTick+0x24>)
 800c522:	6013      	str	r3, [r2, #0]
}
 800c524:	bf00      	nop
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr
 800c52e:	bf00      	nop
 800c530:	200000d0 	.word	0x200000d0
 800c534:	20009854 	.word	0x20009854

0800c538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c538:	b480      	push	{r7}
 800c53a:	af00      	add	r7, sp, #0
  return uwTick;
 800c53c:	4b03      	ldr	r3, [pc, #12]	; (800c54c <HAL_GetTick+0x14>)
 800c53e:	681b      	ldr	r3, [r3, #0]
}
 800c540:	4618      	mov	r0, r3
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr
 800c54a:	bf00      	nop
 800c54c:	20009854 	.word	0x20009854

0800c550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c558:	f7ff ffee 	bl	800c538 <HAL_GetTick>
 800c55c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c568:	d005      	beq.n	800c576 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800c56a:	4b0a      	ldr	r3, [pc, #40]	; (800c594 <HAL_Delay+0x44>)
 800c56c:	781b      	ldrb	r3, [r3, #0]
 800c56e:	461a      	mov	r2, r3
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	4413      	add	r3, r2
 800c574:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800c576:	bf00      	nop
 800c578:	f7ff ffde 	bl	800c538 <HAL_GetTick>
 800c57c:	4602      	mov	r2, r0
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	1ad3      	subs	r3, r2, r3
 800c582:	68fa      	ldr	r2, [r7, #12]
 800c584:	429a      	cmp	r2, r3
 800c586:	d8f7      	bhi.n	800c578 <HAL_Delay+0x28>
  {
  }
}
 800c588:	bf00      	nop
 800c58a:	bf00      	nop
 800c58c:	3710      	adds	r7, #16
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}
 800c592:	bf00      	nop
 800c594:	200000d0 	.word	0x200000d0

0800c598 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d101      	bne.n	800c5ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	e033      	b.n	800c616 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d109      	bne.n	800c5ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f7f4 ffea 	bl	8001590 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ce:	f003 0310 	and.w	r3, r3, #16
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d118      	bne.n	800c608 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800c5de:	f023 0302 	bic.w	r3, r3, #2
 800c5e2:	f043 0202 	orr.w	r2, r3, #2
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 fae8 	bl	800cbc0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5fa:	f023 0303 	bic.w	r3, r3, #3
 800c5fe:	f043 0201 	orr.w	r2, r3, #1
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	641a      	str	r2, [r3, #64]	; 0x40
 800c606:	e001      	b.n	800c60c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800c608:	2301      	movs	r3, #1
 800c60a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2200      	movs	r2, #0
 800c610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800c614:	7bfb      	ldrb	r3, [r7, #15]
}
 800c616:	4618      	mov	r0, r3
 800c618:	3710      	adds	r7, #16
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
	...

0800c620 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800c620:	b480      	push	{r7}
 800c622:	b085      	sub	sp, #20
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800c628:	2300      	movs	r3, #0
 800c62a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c632:	2b01      	cmp	r3, #1
 800c634:	d101      	bne.n	800c63a <HAL_ADC_Start+0x1a>
 800c636:	2302      	movs	r3, #2
 800c638:	e0b2      	b.n	800c7a0 <HAL_ADC_Start+0x180>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2201      	movs	r2, #1
 800c63e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	f003 0301 	and.w	r3, r3, #1
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d018      	beq.n	800c682 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	689a      	ldr	r2, [r3, #8]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f042 0201 	orr.w	r2, r2, #1
 800c65e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800c660:	4b52      	ldr	r3, [pc, #328]	; (800c7ac <HAL_ADC_Start+0x18c>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	4a52      	ldr	r2, [pc, #328]	; (800c7b0 <HAL_ADC_Start+0x190>)
 800c666:	fba2 2303 	umull	r2, r3, r2, r3
 800c66a:	0c9a      	lsrs	r2, r3, #18
 800c66c:	4613      	mov	r3, r2
 800c66e:	005b      	lsls	r3, r3, #1
 800c670:	4413      	add	r3, r2
 800c672:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800c674:	e002      	b.n	800c67c <HAL_ADC_Start+0x5c>
    {
      counter--;
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	3b01      	subs	r3, #1
 800c67a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d1f9      	bne.n	800c676 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	689b      	ldr	r3, [r3, #8]
 800c688:	f003 0301 	and.w	r3, r3, #1
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	d17a      	bne.n	800c786 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c694:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800c698:	f023 0301 	bic.w	r3, r3, #1
 800c69c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d007      	beq.n	800c6c2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c6ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c6ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6ce:	d106      	bne.n	800c6de <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6d4:	f023 0206 	bic.w	r2, r3, #6
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	645a      	str	r2, [r3, #68]	; 0x44
 800c6dc:	e002      	b.n	800c6e4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c6ec:	4b31      	ldr	r3, [pc, #196]	; (800c7b4 <HAL_ADC_Start+0x194>)
 800c6ee:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800c6f8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	f003 031f 	and.w	r3, r3, #31
 800c702:	2b00      	cmp	r3, #0
 800c704:	d12a      	bne.n	800c75c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	4a2b      	ldr	r2, [pc, #172]	; (800c7b8 <HAL_ADC_Start+0x198>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d015      	beq.n	800c73c <HAL_ADC_Start+0x11c>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4a29      	ldr	r2, [pc, #164]	; (800c7bc <HAL_ADC_Start+0x19c>)
 800c716:	4293      	cmp	r3, r2
 800c718:	d105      	bne.n	800c726 <HAL_ADC_Start+0x106>
 800c71a:	4b26      	ldr	r3, [pc, #152]	; (800c7b4 <HAL_ADC_Start+0x194>)
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	f003 031f 	and.w	r3, r3, #31
 800c722:	2b00      	cmp	r3, #0
 800c724:	d00a      	beq.n	800c73c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	4a25      	ldr	r2, [pc, #148]	; (800c7c0 <HAL_ADC_Start+0x1a0>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d136      	bne.n	800c79e <HAL_ADC_Start+0x17e>
 800c730:	4b20      	ldr	r3, [pc, #128]	; (800c7b4 <HAL_ADC_Start+0x194>)
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	f003 0310 	and.w	r3, r3, #16
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d130      	bne.n	800c79e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	689b      	ldr	r3, [r3, #8]
 800c742:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c746:	2b00      	cmp	r3, #0
 800c748:	d129      	bne.n	800c79e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	689a      	ldr	r2, [r3, #8]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800c758:	609a      	str	r2, [r3, #8]
 800c75a:	e020      	b.n	800c79e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4a15      	ldr	r2, [pc, #84]	; (800c7b8 <HAL_ADC_Start+0x198>)
 800c762:	4293      	cmp	r3, r2
 800c764:	d11b      	bne.n	800c79e <HAL_ADC_Start+0x17e>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	689b      	ldr	r3, [r3, #8]
 800c76c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c770:	2b00      	cmp	r3, #0
 800c772:	d114      	bne.n	800c79e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	689a      	ldr	r2, [r3, #8]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800c782:	609a      	str	r2, [r3, #8]
 800c784:	e00b      	b.n	800c79e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c78a:	f043 0210 	orr.w	r2, r3, #16
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c796:	f043 0201 	orr.w	r2, r3, #1
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800c79e:	2300      	movs	r3, #0
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3714      	adds	r7, #20
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr
 800c7ac:	20000088 	.word	0x20000088
 800c7b0:	431bde83 	.word	0x431bde83
 800c7b4:	40012300 	.word	0x40012300
 800c7b8:	40012000 	.word	0x40012000
 800c7bc:	40012100 	.word	0x40012100
 800c7c0:	40012200 	.word	0x40012200

0800c7c4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b083      	sub	sp, #12
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d101      	bne.n	800c7da <HAL_ADC_Stop+0x16>
 800c7d6:	2302      	movs	r3, #2
 800c7d8:	e021      	b.n	800c81e <HAL_ADC_Stop+0x5a>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2201      	movs	r2, #1
 800c7de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	689a      	ldr	r2, [r3, #8]
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f022 0201 	bic.w	r2, r2, #1
 800c7f0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	689b      	ldr	r3, [r3, #8]
 800c7f8:	f003 0301 	and.w	r3, r3, #1
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d109      	bne.n	800c814 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c804:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800c808:	f023 0301 	bic.w	r3, r3, #1
 800c80c:	f043 0201 	orr.w	r2, r3, #1
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2200      	movs	r2, #0
 800c818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800c81c:	2300      	movs	r3, #0
}
 800c81e:	4618      	mov	r0, r3
 800c820:	370c      	adds	r7, #12
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr

0800c82a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800c82a:	b580      	push	{r7, lr}
 800c82c:	b084      	sub	sp, #16
 800c82e:	af00      	add	r7, sp, #0
 800c830:	6078      	str	r0, [r7, #4]
 800c832:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800c834:	2300      	movs	r3, #0
 800c836:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	689b      	ldr	r3, [r3, #8]
 800c83e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c846:	d113      	bne.n	800c870 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	689b      	ldr	r3, [r3, #8]
 800c84e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800c852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c856:	d10b      	bne.n	800c870 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c85c:	f043 0220 	orr.w	r2, r3, #32
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2200      	movs	r2, #0
 800c868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800c86c:	2301      	movs	r3, #1
 800c86e:	e063      	b.n	800c938 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800c870:	f7ff fe62 	bl	800c538 <HAL_GetTick>
 800c874:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800c876:	e021      	b.n	800c8bc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c87e:	d01d      	beq.n	800c8bc <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d007      	beq.n	800c896 <HAL_ADC_PollForConversion+0x6c>
 800c886:	f7ff fe57 	bl	800c538 <HAL_GetTick>
 800c88a:	4602      	mov	r2, r0
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	1ad3      	subs	r3, r2, r3
 800c890:	683a      	ldr	r2, [r7, #0]
 800c892:	429a      	cmp	r2, r3
 800c894:	d212      	bcs.n	800c8bc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f003 0302 	and.w	r3, r3, #2
 800c8a0:	2b02      	cmp	r3, #2
 800c8a2:	d00b      	beq.n	800c8bc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8a8:	f043 0204 	orr.w	r2, r3, #4
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800c8b8:	2303      	movs	r3, #3
 800c8ba:	e03d      	b.n	800c938 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f003 0302 	and.w	r3, r3, #2
 800c8c6:	2b02      	cmp	r3, #2
 800c8c8:	d1d6      	bne.n	800c878 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f06f 0212 	mvn.w	r2, #18
 800c8d2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	689b      	ldr	r3, [r3, #8]
 800c8e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d123      	bne.n	800c936 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d11f      	bne.n	800c936 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8fc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c900:	2b00      	cmp	r3, #0
 800c902:	d006      	beq.n	800c912 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	689b      	ldr	r3, [r3, #8]
 800c90a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d111      	bne.n	800c936 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c916:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c926:	2b00      	cmp	r3, #0
 800c928:	d105      	bne.n	800c936 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c92e:	f043 0201 	orr.w	r2, r3, #1
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800c936:	2300      	movs	r3, #0
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3710      	adds	r7, #16
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800c940:	b480      	push	{r7}
 800c942:	b083      	sub	sp, #12
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800c94e:	4618      	mov	r0, r3
 800c950:	370c      	adds	r7, #12
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr
	...

0800c95c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b085      	sub	sp, #20
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800c966:	2300      	movs	r3, #0
 800c968:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c970:	2b01      	cmp	r3, #1
 800c972:	d101      	bne.n	800c978 <HAL_ADC_ConfigChannel+0x1c>
 800c974:	2302      	movs	r3, #2
 800c976:	e113      	b.n	800cba0 <HAL_ADC_ConfigChannel+0x244>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2201      	movs	r2, #1
 800c97c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	2b09      	cmp	r3, #9
 800c986:	d925      	bls.n	800c9d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	68d9      	ldr	r1, [r3, #12]
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	b29b      	uxth	r3, r3
 800c994:	461a      	mov	r2, r3
 800c996:	4613      	mov	r3, r2
 800c998:	005b      	lsls	r3, r3, #1
 800c99a:	4413      	add	r3, r2
 800c99c:	3b1e      	subs	r3, #30
 800c99e:	2207      	movs	r2, #7
 800c9a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c9a4:	43da      	mvns	r2, r3
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	400a      	ands	r2, r1
 800c9ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	68d9      	ldr	r1, [r3, #12]
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	689a      	ldr	r2, [r3, #8]
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	b29b      	uxth	r3, r3
 800c9be:	4618      	mov	r0, r3
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	005b      	lsls	r3, r3, #1
 800c9c4:	4403      	add	r3, r0
 800c9c6:	3b1e      	subs	r3, #30
 800c9c8:	409a      	lsls	r2, r3
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	430a      	orrs	r2, r1
 800c9d0:	60da      	str	r2, [r3, #12]
 800c9d2:	e022      	b.n	800ca1a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	6919      	ldr	r1, [r3, #16]
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	b29b      	uxth	r3, r3
 800c9e0:	461a      	mov	r2, r3
 800c9e2:	4613      	mov	r3, r2
 800c9e4:	005b      	lsls	r3, r3, #1
 800c9e6:	4413      	add	r3, r2
 800c9e8:	2207      	movs	r2, #7
 800c9ea:	fa02 f303 	lsl.w	r3, r2, r3
 800c9ee:	43da      	mvns	r2, r3
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	400a      	ands	r2, r1
 800c9f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	6919      	ldr	r1, [r3, #16]
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	689a      	ldr	r2, [r3, #8]
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	b29b      	uxth	r3, r3
 800ca08:	4618      	mov	r0, r3
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	005b      	lsls	r3, r3, #1
 800ca0e:	4403      	add	r3, r0
 800ca10:	409a      	lsls	r2, r3
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	430a      	orrs	r2, r1
 800ca18:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	2b06      	cmp	r3, #6
 800ca20:	d824      	bhi.n	800ca6c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	685a      	ldr	r2, [r3, #4]
 800ca2c:	4613      	mov	r3, r2
 800ca2e:	009b      	lsls	r3, r3, #2
 800ca30:	4413      	add	r3, r2
 800ca32:	3b05      	subs	r3, #5
 800ca34:	221f      	movs	r2, #31
 800ca36:	fa02 f303 	lsl.w	r3, r2, r3
 800ca3a:	43da      	mvns	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	400a      	ands	r2, r1
 800ca42:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	b29b      	uxth	r3, r3
 800ca50:	4618      	mov	r0, r3
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	685a      	ldr	r2, [r3, #4]
 800ca56:	4613      	mov	r3, r2
 800ca58:	009b      	lsls	r3, r3, #2
 800ca5a:	4413      	add	r3, r2
 800ca5c:	3b05      	subs	r3, #5
 800ca5e:	fa00 f203 	lsl.w	r2, r0, r3
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	430a      	orrs	r2, r1
 800ca68:	635a      	str	r2, [r3, #52]	; 0x34
 800ca6a:	e04c      	b.n	800cb06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	2b0c      	cmp	r3, #12
 800ca72:	d824      	bhi.n	800cabe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	685a      	ldr	r2, [r3, #4]
 800ca7e:	4613      	mov	r3, r2
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	4413      	add	r3, r2
 800ca84:	3b23      	subs	r3, #35	; 0x23
 800ca86:	221f      	movs	r2, #31
 800ca88:	fa02 f303 	lsl.w	r3, r2, r3
 800ca8c:	43da      	mvns	r2, r3
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	400a      	ands	r2, r1
 800ca94:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	b29b      	uxth	r3, r3
 800caa2:	4618      	mov	r0, r3
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	685a      	ldr	r2, [r3, #4]
 800caa8:	4613      	mov	r3, r2
 800caaa:	009b      	lsls	r3, r3, #2
 800caac:	4413      	add	r3, r2
 800caae:	3b23      	subs	r3, #35	; 0x23
 800cab0:	fa00 f203 	lsl.w	r2, r0, r3
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	430a      	orrs	r2, r1
 800caba:	631a      	str	r2, [r3, #48]	; 0x30
 800cabc:	e023      	b.n	800cb06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	685a      	ldr	r2, [r3, #4]
 800cac8:	4613      	mov	r3, r2
 800caca:	009b      	lsls	r3, r3, #2
 800cacc:	4413      	add	r3, r2
 800cace:	3b41      	subs	r3, #65	; 0x41
 800cad0:	221f      	movs	r2, #31
 800cad2:	fa02 f303 	lsl.w	r3, r2, r3
 800cad6:	43da      	mvns	r2, r3
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	400a      	ands	r2, r1
 800cade:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	b29b      	uxth	r3, r3
 800caec:	4618      	mov	r0, r3
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	685a      	ldr	r2, [r3, #4]
 800caf2:	4613      	mov	r3, r2
 800caf4:	009b      	lsls	r3, r3, #2
 800caf6:	4413      	add	r3, r2
 800caf8:	3b41      	subs	r3, #65	; 0x41
 800cafa:	fa00 f203 	lsl.w	r2, r0, r3
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	430a      	orrs	r2, r1
 800cb04:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800cb06:	4b29      	ldr	r3, [pc, #164]	; (800cbac <HAL_ADC_ConfigChannel+0x250>)
 800cb08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	4a28      	ldr	r2, [pc, #160]	; (800cbb0 <HAL_ADC_ConfigChannel+0x254>)
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d10f      	bne.n	800cb34 <HAL_ADC_ConfigChannel+0x1d8>
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2b12      	cmp	r3, #18
 800cb1a:	d10b      	bne.n	800cb34 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a1d      	ldr	r2, [pc, #116]	; (800cbb0 <HAL_ADC_ConfigChannel+0x254>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d12b      	bne.n	800cb96 <HAL_ADC_ConfigChannel+0x23a>
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4a1c      	ldr	r2, [pc, #112]	; (800cbb4 <HAL_ADC_ConfigChannel+0x258>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d003      	beq.n	800cb50 <HAL_ADC_ConfigChannel+0x1f4>
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	2b11      	cmp	r3, #17
 800cb4e:	d122      	bne.n	800cb96 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	685b      	ldr	r3, [r3, #4]
 800cb54:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	4a11      	ldr	r2, [pc, #68]	; (800cbb4 <HAL_ADC_ConfigChannel+0x258>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d111      	bne.n	800cb96 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800cb72:	4b11      	ldr	r3, [pc, #68]	; (800cbb8 <HAL_ADC_ConfigChannel+0x25c>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	4a11      	ldr	r2, [pc, #68]	; (800cbbc <HAL_ADC_ConfigChannel+0x260>)
 800cb78:	fba2 2303 	umull	r2, r3, r2, r3
 800cb7c:	0c9a      	lsrs	r2, r3, #18
 800cb7e:	4613      	mov	r3, r2
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	4413      	add	r3, r2
 800cb84:	005b      	lsls	r3, r3, #1
 800cb86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800cb88:	e002      	b.n	800cb90 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	3b01      	subs	r3, #1
 800cb8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d1f9      	bne.n	800cb8a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800cb9e:	2300      	movs	r3, #0
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3714      	adds	r7, #20
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr
 800cbac:	40012300 	.word	0x40012300
 800cbb0:	40012000 	.word	0x40012000
 800cbb4:	10000012 	.word	0x10000012
 800cbb8:	20000088 	.word	0x20000088
 800cbbc:	431bde83 	.word	0x431bde83

0800cbc0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b085      	sub	sp, #20
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800cbc8:	4b79      	ldr	r3, [pc, #484]	; (800cdb0 <ADC_Init+0x1f0>)
 800cbca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	685a      	ldr	r2, [r3, #4]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	431a      	orrs	r2, r3
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	685a      	ldr	r2, [r3, #4]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cbf4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	6859      	ldr	r1, [r3, #4]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	691b      	ldr	r3, [r3, #16]
 800cc00:	021a      	lsls	r2, r3, #8
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	430a      	orrs	r2, r1
 800cc08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	685a      	ldr	r2, [r3, #4]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800cc18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	6859      	ldr	r1, [r3, #4]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	689a      	ldr	r2, [r3, #8]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	430a      	orrs	r2, r1
 800cc2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	689a      	ldr	r2, [r3, #8]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cc3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	6899      	ldr	r1, [r3, #8]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	68da      	ldr	r2, [r3, #12]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	430a      	orrs	r2, r1
 800cc4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc52:	4a58      	ldr	r2, [pc, #352]	; (800cdb4 <ADC_Init+0x1f4>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d022      	beq.n	800cc9e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	689a      	ldr	r2, [r3, #8]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800cc66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	6899      	ldr	r1, [r3, #8]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	430a      	orrs	r2, r1
 800cc78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	689a      	ldr	r2, [r3, #8]
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800cc88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	6899      	ldr	r1, [r3, #8]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	430a      	orrs	r2, r1
 800cc9a:	609a      	str	r2, [r3, #8]
 800cc9c:	e00f      	b.n	800ccbe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	689a      	ldr	r2, [r3, #8]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ccac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	689a      	ldr	r2, [r3, #8]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ccbc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	689a      	ldr	r2, [r3, #8]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f022 0202 	bic.w	r2, r2, #2
 800cccc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	6899      	ldr	r1, [r3, #8]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	7e1b      	ldrb	r3, [r3, #24]
 800ccd8:	005a      	lsls	r2, r3, #1
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	430a      	orrs	r2, r1
 800cce0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d01b      	beq.n	800cd24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	685a      	ldr	r2, [r3, #4]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ccfa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	685a      	ldr	r2, [r3, #4]
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800cd0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	6859      	ldr	r1, [r3, #4]
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd16:	3b01      	subs	r3, #1
 800cd18:	035a      	lsls	r2, r3, #13
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	430a      	orrs	r2, r1
 800cd20:	605a      	str	r2, [r3, #4]
 800cd22:	e007      	b.n	800cd34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	685a      	ldr	r2, [r3, #4]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cd32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800cd42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	69db      	ldr	r3, [r3, #28]
 800cd4e:	3b01      	subs	r3, #1
 800cd50:	051a      	lsls	r2, r3, #20
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	430a      	orrs	r2, r1
 800cd58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	689a      	ldr	r2, [r3, #8]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800cd68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	6899      	ldr	r1, [r3, #8]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd76:	025a      	lsls	r2, r3, #9
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	430a      	orrs	r2, r1
 800cd7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	689a      	ldr	r2, [r3, #8]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	6899      	ldr	r1, [r3, #8]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	695b      	ldr	r3, [r3, #20]
 800cd9a:	029a      	lsls	r2, r3, #10
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	430a      	orrs	r2, r1
 800cda2:	609a      	str	r2, [r3, #8]
}
 800cda4:	bf00      	nop
 800cda6:	3714      	adds	r7, #20
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr
 800cdb0:	40012300 	.word	0x40012300
 800cdb4:	0f000001 	.word	0x0f000001

0800cdb8 <__NVIC_SetPriorityGrouping>:
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b085      	sub	sp, #20
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f003 0307 	and.w	r3, r3, #7
 800cdc6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cdc8:	4b0c      	ldr	r3, [pc, #48]	; (800cdfc <__NVIC_SetPriorityGrouping+0x44>)
 800cdca:	68db      	ldr	r3, [r3, #12]
 800cdcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800cdce:	68ba      	ldr	r2, [r7, #8]
 800cdd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800cdd4:	4013      	ands	r3, r2
 800cdd6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800cde0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800cde4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cde8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800cdea:	4a04      	ldr	r2, [pc, #16]	; (800cdfc <__NVIC_SetPriorityGrouping+0x44>)
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	60d3      	str	r3, [r2, #12]
}
 800cdf0:	bf00      	nop
 800cdf2:	3714      	adds	r7, #20
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfa:	4770      	bx	lr
 800cdfc:	e000ed00 	.word	0xe000ed00

0800ce00 <__NVIC_GetPriorityGrouping>:
{
 800ce00:	b480      	push	{r7}
 800ce02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ce04:	4b04      	ldr	r3, [pc, #16]	; (800ce18 <__NVIC_GetPriorityGrouping+0x18>)
 800ce06:	68db      	ldr	r3, [r3, #12]
 800ce08:	0a1b      	lsrs	r3, r3, #8
 800ce0a:	f003 0307 	and.w	r3, r3, #7
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr
 800ce18:	e000ed00 	.word	0xe000ed00

0800ce1c <__NVIC_EnableIRQ>:
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b083      	sub	sp, #12
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	4603      	mov	r3, r0
 800ce24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ce26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	db0b      	blt.n	800ce46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ce2e:	79fb      	ldrb	r3, [r7, #7]
 800ce30:	f003 021f 	and.w	r2, r3, #31
 800ce34:	4907      	ldr	r1, [pc, #28]	; (800ce54 <__NVIC_EnableIRQ+0x38>)
 800ce36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce3a:	095b      	lsrs	r3, r3, #5
 800ce3c:	2001      	movs	r0, #1
 800ce3e:	fa00 f202 	lsl.w	r2, r0, r2
 800ce42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ce46:	bf00      	nop
 800ce48:	370c      	adds	r7, #12
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr
 800ce52:	bf00      	nop
 800ce54:	e000e100 	.word	0xe000e100

0800ce58 <__NVIC_DisableIRQ>:
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b083      	sub	sp, #12
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	4603      	mov	r3, r0
 800ce60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ce62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	db12      	blt.n	800ce90 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ce6a:	79fb      	ldrb	r3, [r7, #7]
 800ce6c:	f003 021f 	and.w	r2, r3, #31
 800ce70:	490a      	ldr	r1, [pc, #40]	; (800ce9c <__NVIC_DisableIRQ+0x44>)
 800ce72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce76:	095b      	lsrs	r3, r3, #5
 800ce78:	2001      	movs	r0, #1
 800ce7a:	fa00 f202 	lsl.w	r2, r0, r2
 800ce7e:	3320      	adds	r3, #32
 800ce80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800ce84:	f3bf 8f4f 	dsb	sy
}
 800ce88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ce8a:	f3bf 8f6f 	isb	sy
}
 800ce8e:	bf00      	nop
}
 800ce90:	bf00      	nop
 800ce92:	370c      	adds	r7, #12
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr
 800ce9c:	e000e100 	.word	0xe000e100

0800cea0 <__NVIC_SetPriority>:
{
 800cea0:	b480      	push	{r7}
 800cea2:	b083      	sub	sp, #12
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	4603      	mov	r3, r0
 800cea8:	6039      	str	r1, [r7, #0]
 800ceaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ceac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	db0a      	blt.n	800ceca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	b2da      	uxtb	r2, r3
 800ceb8:	490c      	ldr	r1, [pc, #48]	; (800ceec <__NVIC_SetPriority+0x4c>)
 800ceba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cebe:	0112      	lsls	r2, r2, #4
 800cec0:	b2d2      	uxtb	r2, r2
 800cec2:	440b      	add	r3, r1
 800cec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800cec8:	e00a      	b.n	800cee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	b2da      	uxtb	r2, r3
 800cece:	4908      	ldr	r1, [pc, #32]	; (800cef0 <__NVIC_SetPriority+0x50>)
 800ced0:	79fb      	ldrb	r3, [r7, #7]
 800ced2:	f003 030f 	and.w	r3, r3, #15
 800ced6:	3b04      	subs	r3, #4
 800ced8:	0112      	lsls	r2, r2, #4
 800ceda:	b2d2      	uxtb	r2, r2
 800cedc:	440b      	add	r3, r1
 800cede:	761a      	strb	r2, [r3, #24]
}
 800cee0:	bf00      	nop
 800cee2:	370c      	adds	r7, #12
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr
 800ceec:	e000e100 	.word	0xe000e100
 800cef0:	e000ed00 	.word	0xe000ed00

0800cef4 <NVIC_EncodePriority>:
{
 800cef4:	b480      	push	{r7}
 800cef6:	b089      	sub	sp, #36	; 0x24
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	60f8      	str	r0, [r7, #12]
 800cefc:	60b9      	str	r1, [r7, #8]
 800cefe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	f003 0307 	and.w	r3, r3, #7
 800cf06:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800cf08:	69fb      	ldr	r3, [r7, #28]
 800cf0a:	f1c3 0307 	rsb	r3, r3, #7
 800cf0e:	2b04      	cmp	r3, #4
 800cf10:	bf28      	it	cs
 800cf12:	2304      	movcs	r3, #4
 800cf14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800cf16:	69fb      	ldr	r3, [r7, #28]
 800cf18:	3304      	adds	r3, #4
 800cf1a:	2b06      	cmp	r3, #6
 800cf1c:	d902      	bls.n	800cf24 <NVIC_EncodePriority+0x30>
 800cf1e:	69fb      	ldr	r3, [r7, #28]
 800cf20:	3b03      	subs	r3, #3
 800cf22:	e000      	b.n	800cf26 <NVIC_EncodePriority+0x32>
 800cf24:	2300      	movs	r3, #0
 800cf26:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cf28:	f04f 32ff 	mov.w	r2, #4294967295
 800cf2c:	69bb      	ldr	r3, [r7, #24]
 800cf2e:	fa02 f303 	lsl.w	r3, r2, r3
 800cf32:	43da      	mvns	r2, r3
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	401a      	ands	r2, r3
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800cf3c:	f04f 31ff 	mov.w	r1, #4294967295
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	fa01 f303 	lsl.w	r3, r1, r3
 800cf46:	43d9      	mvns	r1, r3
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cf4c:	4313      	orrs	r3, r2
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3724      	adds	r7, #36	; 0x24
 800cf52:	46bd      	mov	sp, r7
 800cf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf58:	4770      	bx	lr

0800cf5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b082      	sub	sp, #8
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f7ff ff28 	bl	800cdb8 <__NVIC_SetPriorityGrouping>
}
 800cf68:	bf00      	nop
 800cf6a:	3708      	adds	r7, #8
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}

0800cf70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b086      	sub	sp, #24
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	4603      	mov	r3, r0
 800cf78:	60b9      	str	r1, [r7, #8]
 800cf7a:	607a      	str	r2, [r7, #4]
 800cf7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800cf82:	f7ff ff3d 	bl	800ce00 <__NVIC_GetPriorityGrouping>
 800cf86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cf88:	687a      	ldr	r2, [r7, #4]
 800cf8a:	68b9      	ldr	r1, [r7, #8]
 800cf8c:	6978      	ldr	r0, [r7, #20]
 800cf8e:	f7ff ffb1 	bl	800cef4 <NVIC_EncodePriority>
 800cf92:	4602      	mov	r2, r0
 800cf94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf98:	4611      	mov	r1, r2
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7ff ff80 	bl	800cea0 <__NVIC_SetPriority>
}
 800cfa0:	bf00      	nop
 800cfa2:	3718      	adds	r7, #24
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b082      	sub	sp, #8
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	4603      	mov	r3, r0
 800cfb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800cfb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7ff ff30 	bl	800ce1c <__NVIC_EnableIRQ>
}
 800cfbc:	bf00      	nop
 800cfbe:	3708      	adds	r7, #8
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}

0800cfc4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b082      	sub	sp, #8
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	4603      	mov	r3, r0
 800cfcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800cfce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7ff ff40 	bl	800ce58 <__NVIC_DisableIRQ>
}
 800cfd8:	bf00      	nop
 800cfda:	3708      	adds	r7, #8
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}

0800cfe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b089      	sub	sp, #36	; 0x24
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800cfea:	2300      	movs	r3, #0
 800cfec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800cfee:	2300      	movs	r3, #0
 800cff0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800cff2:	2300      	movs	r3, #0
 800cff4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cff6:	2300      	movs	r3, #0
 800cff8:	61fb      	str	r3, [r7, #28]
 800cffa:	e177      	b.n	800d2ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800cffc:	2201      	movs	r2, #1
 800cffe:	69fb      	ldr	r3, [r7, #28]
 800d000:	fa02 f303 	lsl.w	r3, r2, r3
 800d004:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	697a      	ldr	r2, [r7, #20]
 800d00c:	4013      	ands	r3, r2
 800d00e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d010:	693a      	ldr	r2, [r7, #16]
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	429a      	cmp	r2, r3
 800d016:	f040 8166 	bne.w	800d2e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	f003 0303 	and.w	r3, r3, #3
 800d022:	2b01      	cmp	r3, #1
 800d024:	d005      	beq.n	800d032 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	685b      	ldr	r3, [r3, #4]
 800d02a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d02e:	2b02      	cmp	r3, #2
 800d030:	d130      	bne.n	800d094 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d038:	69fb      	ldr	r3, [r7, #28]
 800d03a:	005b      	lsls	r3, r3, #1
 800d03c:	2203      	movs	r2, #3
 800d03e:	fa02 f303 	lsl.w	r3, r2, r3
 800d042:	43db      	mvns	r3, r3
 800d044:	69ba      	ldr	r2, [r7, #24]
 800d046:	4013      	ands	r3, r2
 800d048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	68da      	ldr	r2, [r3, #12]
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	005b      	lsls	r3, r3, #1
 800d052:	fa02 f303 	lsl.w	r3, r2, r3
 800d056:	69ba      	ldr	r2, [r7, #24]
 800d058:	4313      	orrs	r3, r2
 800d05a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	69ba      	ldr	r2, [r7, #24]
 800d060:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d068:	2201      	movs	r2, #1
 800d06a:	69fb      	ldr	r3, [r7, #28]
 800d06c:	fa02 f303 	lsl.w	r3, r2, r3
 800d070:	43db      	mvns	r3, r3
 800d072:	69ba      	ldr	r2, [r7, #24]
 800d074:	4013      	ands	r3, r2
 800d076:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	685b      	ldr	r3, [r3, #4]
 800d07c:	091b      	lsrs	r3, r3, #4
 800d07e:	f003 0201 	and.w	r2, r3, #1
 800d082:	69fb      	ldr	r3, [r7, #28]
 800d084:	fa02 f303 	lsl.w	r3, r2, r3
 800d088:	69ba      	ldr	r2, [r7, #24]
 800d08a:	4313      	orrs	r3, r2
 800d08c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	69ba      	ldr	r2, [r7, #24]
 800d092:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	685b      	ldr	r3, [r3, #4]
 800d098:	f003 0303 	and.w	r3, r3, #3
 800d09c:	2b03      	cmp	r3, #3
 800d09e:	d017      	beq.n	800d0d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	68db      	ldr	r3, [r3, #12]
 800d0a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d0a6:	69fb      	ldr	r3, [r7, #28]
 800d0a8:	005b      	lsls	r3, r3, #1
 800d0aa:	2203      	movs	r2, #3
 800d0ac:	fa02 f303 	lsl.w	r3, r2, r3
 800d0b0:	43db      	mvns	r3, r3
 800d0b2:	69ba      	ldr	r2, [r7, #24]
 800d0b4:	4013      	ands	r3, r2
 800d0b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	689a      	ldr	r2, [r3, #8]
 800d0bc:	69fb      	ldr	r3, [r7, #28]
 800d0be:	005b      	lsls	r3, r3, #1
 800d0c0:	fa02 f303 	lsl.w	r3, r2, r3
 800d0c4:	69ba      	ldr	r2, [r7, #24]
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	69ba      	ldr	r2, [r7, #24]
 800d0ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	f003 0303 	and.w	r3, r3, #3
 800d0d8:	2b02      	cmp	r3, #2
 800d0da:	d123      	bne.n	800d124 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d0dc:	69fb      	ldr	r3, [r7, #28]
 800d0de:	08da      	lsrs	r2, r3, #3
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	3208      	adds	r2, #8
 800d0e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d0ea:	69fb      	ldr	r3, [r7, #28]
 800d0ec:	f003 0307 	and.w	r3, r3, #7
 800d0f0:	009b      	lsls	r3, r3, #2
 800d0f2:	220f      	movs	r2, #15
 800d0f4:	fa02 f303 	lsl.w	r3, r2, r3
 800d0f8:	43db      	mvns	r3, r3
 800d0fa:	69ba      	ldr	r2, [r7, #24]
 800d0fc:	4013      	ands	r3, r2
 800d0fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	691a      	ldr	r2, [r3, #16]
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	f003 0307 	and.w	r3, r3, #7
 800d10a:	009b      	lsls	r3, r3, #2
 800d10c:	fa02 f303 	lsl.w	r3, r2, r3
 800d110:	69ba      	ldr	r2, [r7, #24]
 800d112:	4313      	orrs	r3, r2
 800d114:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d116:	69fb      	ldr	r3, [r7, #28]
 800d118:	08da      	lsrs	r2, r3, #3
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	3208      	adds	r2, #8
 800d11e:	69b9      	ldr	r1, [r7, #24]
 800d120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d12a:	69fb      	ldr	r3, [r7, #28]
 800d12c:	005b      	lsls	r3, r3, #1
 800d12e:	2203      	movs	r2, #3
 800d130:	fa02 f303 	lsl.w	r3, r2, r3
 800d134:	43db      	mvns	r3, r3
 800d136:	69ba      	ldr	r2, [r7, #24]
 800d138:	4013      	ands	r3, r2
 800d13a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	f003 0203 	and.w	r2, r3, #3
 800d144:	69fb      	ldr	r3, [r7, #28]
 800d146:	005b      	lsls	r3, r3, #1
 800d148:	fa02 f303 	lsl.w	r3, r2, r3
 800d14c:	69ba      	ldr	r2, [r7, #24]
 800d14e:	4313      	orrs	r3, r2
 800d150:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	69ba      	ldr	r2, [r7, #24]
 800d156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	685b      	ldr	r3, [r3, #4]
 800d15c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d160:	2b00      	cmp	r3, #0
 800d162:	f000 80c0 	beq.w	800d2e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d166:	2300      	movs	r3, #0
 800d168:	60fb      	str	r3, [r7, #12]
 800d16a:	4b66      	ldr	r3, [pc, #408]	; (800d304 <HAL_GPIO_Init+0x324>)
 800d16c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d16e:	4a65      	ldr	r2, [pc, #404]	; (800d304 <HAL_GPIO_Init+0x324>)
 800d170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d174:	6453      	str	r3, [r2, #68]	; 0x44
 800d176:	4b63      	ldr	r3, [pc, #396]	; (800d304 <HAL_GPIO_Init+0x324>)
 800d178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d17a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d17e:	60fb      	str	r3, [r7, #12]
 800d180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d182:	4a61      	ldr	r2, [pc, #388]	; (800d308 <HAL_GPIO_Init+0x328>)
 800d184:	69fb      	ldr	r3, [r7, #28]
 800d186:	089b      	lsrs	r3, r3, #2
 800d188:	3302      	adds	r3, #2
 800d18a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d18e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800d190:	69fb      	ldr	r3, [r7, #28]
 800d192:	f003 0303 	and.w	r3, r3, #3
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	220f      	movs	r2, #15
 800d19a:	fa02 f303 	lsl.w	r3, r2, r3
 800d19e:	43db      	mvns	r3, r3
 800d1a0:	69ba      	ldr	r2, [r7, #24]
 800d1a2:	4013      	ands	r3, r2
 800d1a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	4a58      	ldr	r2, [pc, #352]	; (800d30c <HAL_GPIO_Init+0x32c>)
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d037      	beq.n	800d21e <HAL_GPIO_Init+0x23e>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	4a57      	ldr	r2, [pc, #348]	; (800d310 <HAL_GPIO_Init+0x330>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d031      	beq.n	800d21a <HAL_GPIO_Init+0x23a>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	4a56      	ldr	r2, [pc, #344]	; (800d314 <HAL_GPIO_Init+0x334>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d02b      	beq.n	800d216 <HAL_GPIO_Init+0x236>
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	4a55      	ldr	r2, [pc, #340]	; (800d318 <HAL_GPIO_Init+0x338>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d025      	beq.n	800d212 <HAL_GPIO_Init+0x232>
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	4a54      	ldr	r2, [pc, #336]	; (800d31c <HAL_GPIO_Init+0x33c>)
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d01f      	beq.n	800d20e <HAL_GPIO_Init+0x22e>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	4a53      	ldr	r2, [pc, #332]	; (800d320 <HAL_GPIO_Init+0x340>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d019      	beq.n	800d20a <HAL_GPIO_Init+0x22a>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	4a52      	ldr	r2, [pc, #328]	; (800d324 <HAL_GPIO_Init+0x344>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d013      	beq.n	800d206 <HAL_GPIO_Init+0x226>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	4a51      	ldr	r2, [pc, #324]	; (800d328 <HAL_GPIO_Init+0x348>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d00d      	beq.n	800d202 <HAL_GPIO_Init+0x222>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	4a50      	ldr	r2, [pc, #320]	; (800d32c <HAL_GPIO_Init+0x34c>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d007      	beq.n	800d1fe <HAL_GPIO_Init+0x21e>
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	4a4f      	ldr	r2, [pc, #316]	; (800d330 <HAL_GPIO_Init+0x350>)
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d101      	bne.n	800d1fa <HAL_GPIO_Init+0x21a>
 800d1f6:	2309      	movs	r3, #9
 800d1f8:	e012      	b.n	800d220 <HAL_GPIO_Init+0x240>
 800d1fa:	230a      	movs	r3, #10
 800d1fc:	e010      	b.n	800d220 <HAL_GPIO_Init+0x240>
 800d1fe:	2308      	movs	r3, #8
 800d200:	e00e      	b.n	800d220 <HAL_GPIO_Init+0x240>
 800d202:	2307      	movs	r3, #7
 800d204:	e00c      	b.n	800d220 <HAL_GPIO_Init+0x240>
 800d206:	2306      	movs	r3, #6
 800d208:	e00a      	b.n	800d220 <HAL_GPIO_Init+0x240>
 800d20a:	2305      	movs	r3, #5
 800d20c:	e008      	b.n	800d220 <HAL_GPIO_Init+0x240>
 800d20e:	2304      	movs	r3, #4
 800d210:	e006      	b.n	800d220 <HAL_GPIO_Init+0x240>
 800d212:	2303      	movs	r3, #3
 800d214:	e004      	b.n	800d220 <HAL_GPIO_Init+0x240>
 800d216:	2302      	movs	r3, #2
 800d218:	e002      	b.n	800d220 <HAL_GPIO_Init+0x240>
 800d21a:	2301      	movs	r3, #1
 800d21c:	e000      	b.n	800d220 <HAL_GPIO_Init+0x240>
 800d21e:	2300      	movs	r3, #0
 800d220:	69fa      	ldr	r2, [r7, #28]
 800d222:	f002 0203 	and.w	r2, r2, #3
 800d226:	0092      	lsls	r2, r2, #2
 800d228:	4093      	lsls	r3, r2
 800d22a:	69ba      	ldr	r2, [r7, #24]
 800d22c:	4313      	orrs	r3, r2
 800d22e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d230:	4935      	ldr	r1, [pc, #212]	; (800d308 <HAL_GPIO_Init+0x328>)
 800d232:	69fb      	ldr	r3, [r7, #28]
 800d234:	089b      	lsrs	r3, r3, #2
 800d236:	3302      	adds	r3, #2
 800d238:	69ba      	ldr	r2, [r7, #24]
 800d23a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d23e:	4b3d      	ldr	r3, [pc, #244]	; (800d334 <HAL_GPIO_Init+0x354>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	43db      	mvns	r3, r3
 800d248:	69ba      	ldr	r2, [r7, #24]
 800d24a:	4013      	ands	r3, r2
 800d24c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d256:	2b00      	cmp	r3, #0
 800d258:	d003      	beq.n	800d262 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800d25a:	69ba      	ldr	r2, [r7, #24]
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	4313      	orrs	r3, r2
 800d260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d262:	4a34      	ldr	r2, [pc, #208]	; (800d334 <HAL_GPIO_Init+0x354>)
 800d264:	69bb      	ldr	r3, [r7, #24]
 800d266:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800d268:	4b32      	ldr	r3, [pc, #200]	; (800d334 <HAL_GPIO_Init+0x354>)
 800d26a:	685b      	ldr	r3, [r3, #4]
 800d26c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d26e:	693b      	ldr	r3, [r7, #16]
 800d270:	43db      	mvns	r3, r3
 800d272:	69ba      	ldr	r2, [r7, #24]
 800d274:	4013      	ands	r3, r2
 800d276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d280:	2b00      	cmp	r3, #0
 800d282:	d003      	beq.n	800d28c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800d284:	69ba      	ldr	r2, [r7, #24]
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	4313      	orrs	r3, r2
 800d28a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d28c:	4a29      	ldr	r2, [pc, #164]	; (800d334 <HAL_GPIO_Init+0x354>)
 800d28e:	69bb      	ldr	r3, [r7, #24]
 800d290:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d292:	4b28      	ldr	r3, [pc, #160]	; (800d334 <HAL_GPIO_Init+0x354>)
 800d294:	689b      	ldr	r3, [r3, #8]
 800d296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	43db      	mvns	r3, r3
 800d29c:	69ba      	ldr	r2, [r7, #24]
 800d29e:	4013      	ands	r3, r2
 800d2a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d003      	beq.n	800d2b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800d2ae:	69ba      	ldr	r2, [r7, #24]
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d2b6:	4a1f      	ldr	r2, [pc, #124]	; (800d334 <HAL_GPIO_Init+0x354>)
 800d2b8:	69bb      	ldr	r3, [r7, #24]
 800d2ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d2bc:	4b1d      	ldr	r3, [pc, #116]	; (800d334 <HAL_GPIO_Init+0x354>)
 800d2be:	68db      	ldr	r3, [r3, #12]
 800d2c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	43db      	mvns	r3, r3
 800d2c6:	69ba      	ldr	r2, [r7, #24]
 800d2c8:	4013      	ands	r3, r2
 800d2ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	685b      	ldr	r3, [r3, #4]
 800d2d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d003      	beq.n	800d2e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800d2d8:	69ba      	ldr	r2, [r7, #24]
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	4313      	orrs	r3, r2
 800d2de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d2e0:	4a14      	ldr	r2, [pc, #80]	; (800d334 <HAL_GPIO_Init+0x354>)
 800d2e2:	69bb      	ldr	r3, [r7, #24]
 800d2e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d2e6:	69fb      	ldr	r3, [r7, #28]
 800d2e8:	3301      	adds	r3, #1
 800d2ea:	61fb      	str	r3, [r7, #28]
 800d2ec:	69fb      	ldr	r3, [r7, #28]
 800d2ee:	2b0f      	cmp	r3, #15
 800d2f0:	f67f ae84 	bls.w	800cffc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800d2f4:	bf00      	nop
 800d2f6:	bf00      	nop
 800d2f8:	3724      	adds	r7, #36	; 0x24
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop
 800d304:	40023800 	.word	0x40023800
 800d308:	40013800 	.word	0x40013800
 800d30c:	40020000 	.word	0x40020000
 800d310:	40020400 	.word	0x40020400
 800d314:	40020800 	.word	0x40020800
 800d318:	40020c00 	.word	0x40020c00
 800d31c:	40021000 	.word	0x40021000
 800d320:	40021400 	.word	0x40021400
 800d324:	40021800 	.word	0x40021800
 800d328:	40021c00 	.word	0x40021c00
 800d32c:	40022000 	.word	0x40022000
 800d330:	40022400 	.word	0x40022400
 800d334:	40013c00 	.word	0x40013c00

0800d338 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d338:	b480      	push	{r7}
 800d33a:	b085      	sub	sp, #20
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	460b      	mov	r3, r1
 800d342:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	691a      	ldr	r2, [r3, #16]
 800d348:	887b      	ldrh	r3, [r7, #2]
 800d34a:	4013      	ands	r3, r2
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d002      	beq.n	800d356 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d350:	2301      	movs	r3, #1
 800d352:	73fb      	strb	r3, [r7, #15]
 800d354:	e001      	b.n	800d35a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d356:	2300      	movs	r3, #0
 800d358:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d35a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3714      	adds	r7, #20
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr

0800d368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d368:	b480      	push	{r7}
 800d36a:	b083      	sub	sp, #12
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	460b      	mov	r3, r1
 800d372:	807b      	strh	r3, [r7, #2]
 800d374:	4613      	mov	r3, r2
 800d376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d378:	787b      	ldrb	r3, [r7, #1]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d003      	beq.n	800d386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d37e:	887a      	ldrh	r2, [r7, #2]
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d384:	e003      	b.n	800d38e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d386:	887b      	ldrh	r3, [r7, #2]
 800d388:	041a      	lsls	r2, r3, #16
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	619a      	str	r2, [r3, #24]
}
 800d38e:	bf00      	nop
 800d390:	370c      	adds	r7, #12
 800d392:	46bd      	mov	sp, r7
 800d394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d398:	4770      	bx	lr
	...

0800d39c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b082      	sub	sp, #8
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800d3a6:	4b08      	ldr	r3, [pc, #32]	; (800d3c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d3a8:	695a      	ldr	r2, [r3, #20]
 800d3aa:	88fb      	ldrh	r3, [r7, #6]
 800d3ac:	4013      	ands	r3, r2
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d006      	beq.n	800d3c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800d3b2:	4a05      	ldr	r2, [pc, #20]	; (800d3c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d3b4:	88fb      	ldrh	r3, [r7, #6]
 800d3b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800d3b8:	88fb      	ldrh	r3, [r7, #6]
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f7f6 f9cc 	bl	8003758 <HAL_GPIO_EXTI_Callback>
  }
}
 800d3c0:	bf00      	nop
 800d3c2:	3708      	adds	r7, #8
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}
 800d3c8:	40013c00 	.word	0x40013c00

0800d3cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b084      	sub	sp, #16
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d101      	bne.n	800d3de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d3da:	2301      	movs	r3, #1
 800d3dc:	e12b      	b.n	800d636 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3e4:	b2db      	uxtb	r3, r3
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d106      	bne.n	800d3f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f7f5 fa50 	bl	8002898 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2224      	movs	r2, #36	; 0x24
 800d3fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	681a      	ldr	r2, [r3, #0]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f022 0201 	bic.w	r2, r2, #1
 800d40e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	681a      	ldr	r2, [r3, #0]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d41e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	681a      	ldr	r2, [r3, #0]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d42e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800d430:	f001 fd66 	bl	800ef00 <HAL_RCC_GetPCLK1Freq>
 800d434:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	4a81      	ldr	r2, [pc, #516]	; (800d640 <HAL_I2C_Init+0x274>)
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d807      	bhi.n	800d450 <HAL_I2C_Init+0x84>
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	4a80      	ldr	r2, [pc, #512]	; (800d644 <HAL_I2C_Init+0x278>)
 800d444:	4293      	cmp	r3, r2
 800d446:	bf94      	ite	ls
 800d448:	2301      	movls	r3, #1
 800d44a:	2300      	movhi	r3, #0
 800d44c:	b2db      	uxtb	r3, r3
 800d44e:	e006      	b.n	800d45e <HAL_I2C_Init+0x92>
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	4a7d      	ldr	r2, [pc, #500]	; (800d648 <HAL_I2C_Init+0x27c>)
 800d454:	4293      	cmp	r3, r2
 800d456:	bf94      	ite	ls
 800d458:	2301      	movls	r3, #1
 800d45a:	2300      	movhi	r3, #0
 800d45c:	b2db      	uxtb	r3, r3
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d001      	beq.n	800d466 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800d462:	2301      	movs	r3, #1
 800d464:	e0e7      	b.n	800d636 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	4a78      	ldr	r2, [pc, #480]	; (800d64c <HAL_I2C_Init+0x280>)
 800d46a:	fba2 2303 	umull	r2, r3, r2, r3
 800d46e:	0c9b      	lsrs	r3, r3, #18
 800d470:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	685b      	ldr	r3, [r3, #4]
 800d478:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	68ba      	ldr	r2, [r7, #8]
 800d482:	430a      	orrs	r2, r1
 800d484:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	6a1b      	ldr	r3, [r3, #32]
 800d48c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	4a6a      	ldr	r2, [pc, #424]	; (800d640 <HAL_I2C_Init+0x274>)
 800d496:	4293      	cmp	r3, r2
 800d498:	d802      	bhi.n	800d4a0 <HAL_I2C_Init+0xd4>
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	3301      	adds	r3, #1
 800d49e:	e009      	b.n	800d4b4 <HAL_I2C_Init+0xe8>
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d4a6:	fb02 f303 	mul.w	r3, r2, r3
 800d4aa:	4a69      	ldr	r2, [pc, #420]	; (800d650 <HAL_I2C_Init+0x284>)
 800d4ac:	fba2 2303 	umull	r2, r3, r2, r3
 800d4b0:	099b      	lsrs	r3, r3, #6
 800d4b2:	3301      	adds	r3, #1
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	6812      	ldr	r2, [r2, #0]
 800d4b8:	430b      	orrs	r3, r1
 800d4ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	69db      	ldr	r3, [r3, #28]
 800d4c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800d4c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	685b      	ldr	r3, [r3, #4]
 800d4ce:	495c      	ldr	r1, [pc, #368]	; (800d640 <HAL_I2C_Init+0x274>)
 800d4d0:	428b      	cmp	r3, r1
 800d4d2:	d819      	bhi.n	800d508 <HAL_I2C_Init+0x13c>
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	1e59      	subs	r1, r3, #1
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	685b      	ldr	r3, [r3, #4]
 800d4dc:	005b      	lsls	r3, r3, #1
 800d4de:	fbb1 f3f3 	udiv	r3, r1, r3
 800d4e2:	1c59      	adds	r1, r3, #1
 800d4e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d4e8:	400b      	ands	r3, r1
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d00a      	beq.n	800d504 <HAL_I2C_Init+0x138>
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	1e59      	subs	r1, r3, #1
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	685b      	ldr	r3, [r3, #4]
 800d4f6:	005b      	lsls	r3, r3, #1
 800d4f8:	fbb1 f3f3 	udiv	r3, r1, r3
 800d4fc:	3301      	adds	r3, #1
 800d4fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d502:	e051      	b.n	800d5a8 <HAL_I2C_Init+0x1dc>
 800d504:	2304      	movs	r3, #4
 800d506:	e04f      	b.n	800d5a8 <HAL_I2C_Init+0x1dc>
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	689b      	ldr	r3, [r3, #8]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d111      	bne.n	800d534 <HAL_I2C_Init+0x168>
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	1e58      	subs	r0, r3, #1
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6859      	ldr	r1, [r3, #4]
 800d518:	460b      	mov	r3, r1
 800d51a:	005b      	lsls	r3, r3, #1
 800d51c:	440b      	add	r3, r1
 800d51e:	fbb0 f3f3 	udiv	r3, r0, r3
 800d522:	3301      	adds	r3, #1
 800d524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d528:	2b00      	cmp	r3, #0
 800d52a:	bf0c      	ite	eq
 800d52c:	2301      	moveq	r3, #1
 800d52e:	2300      	movne	r3, #0
 800d530:	b2db      	uxtb	r3, r3
 800d532:	e012      	b.n	800d55a <HAL_I2C_Init+0x18e>
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	1e58      	subs	r0, r3, #1
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6859      	ldr	r1, [r3, #4]
 800d53c:	460b      	mov	r3, r1
 800d53e:	009b      	lsls	r3, r3, #2
 800d540:	440b      	add	r3, r1
 800d542:	0099      	lsls	r1, r3, #2
 800d544:	440b      	add	r3, r1
 800d546:	fbb0 f3f3 	udiv	r3, r0, r3
 800d54a:	3301      	adds	r3, #1
 800d54c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d550:	2b00      	cmp	r3, #0
 800d552:	bf0c      	ite	eq
 800d554:	2301      	moveq	r3, #1
 800d556:	2300      	movne	r3, #0
 800d558:	b2db      	uxtb	r3, r3
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d001      	beq.n	800d562 <HAL_I2C_Init+0x196>
 800d55e:	2301      	movs	r3, #1
 800d560:	e022      	b.n	800d5a8 <HAL_I2C_Init+0x1dc>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	689b      	ldr	r3, [r3, #8]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d10e      	bne.n	800d588 <HAL_I2C_Init+0x1bc>
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	1e58      	subs	r0, r3, #1
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6859      	ldr	r1, [r3, #4]
 800d572:	460b      	mov	r3, r1
 800d574:	005b      	lsls	r3, r3, #1
 800d576:	440b      	add	r3, r1
 800d578:	fbb0 f3f3 	udiv	r3, r0, r3
 800d57c:	3301      	adds	r3, #1
 800d57e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d586:	e00f      	b.n	800d5a8 <HAL_I2C_Init+0x1dc>
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	1e58      	subs	r0, r3, #1
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6859      	ldr	r1, [r3, #4]
 800d590:	460b      	mov	r3, r1
 800d592:	009b      	lsls	r3, r3, #2
 800d594:	440b      	add	r3, r1
 800d596:	0099      	lsls	r1, r3, #2
 800d598:	440b      	add	r3, r1
 800d59a:	fbb0 f3f3 	udiv	r3, r0, r3
 800d59e:	3301      	adds	r3, #1
 800d5a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d5a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d5a8:	6879      	ldr	r1, [r7, #4]
 800d5aa:	6809      	ldr	r1, [r1, #0]
 800d5ac:	4313      	orrs	r3, r2
 800d5ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	69da      	ldr	r2, [r3, #28]
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6a1b      	ldr	r3, [r3, #32]
 800d5c2:	431a      	orrs	r2, r3
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	430a      	orrs	r2, r1
 800d5ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	689b      	ldr	r3, [r3, #8]
 800d5d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800d5d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d5da:	687a      	ldr	r2, [r7, #4]
 800d5dc:	6911      	ldr	r1, [r2, #16]
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	68d2      	ldr	r2, [r2, #12]
 800d5e2:	4311      	orrs	r1, r2
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	6812      	ldr	r2, [r2, #0]
 800d5e8:	430b      	orrs	r3, r1
 800d5ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	68db      	ldr	r3, [r3, #12]
 800d5f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	695a      	ldr	r2, [r3, #20]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	699b      	ldr	r3, [r3, #24]
 800d5fe:	431a      	orrs	r2, r3
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	430a      	orrs	r2, r1
 800d606:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	f042 0201 	orr.w	r2, r2, #1
 800d616:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2200      	movs	r2, #0
 800d61c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2220      	movs	r2, #32
 800d622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2200      	movs	r2, #0
 800d62a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2200      	movs	r2, #0
 800d630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d634:	2300      	movs	r3, #0
}
 800d636:	4618      	mov	r0, r3
 800d638:	3710      	adds	r7, #16
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	000186a0 	.word	0x000186a0
 800d644:	001e847f 	.word	0x001e847f
 800d648:	003d08ff 	.word	0x003d08ff
 800d64c:	431bde83 	.word	0x431bde83
 800d650:	10624dd3 	.word	0x10624dd3

0800d654 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b088      	sub	sp, #32
 800d658:	af02      	add	r7, sp, #8
 800d65a:	60f8      	str	r0, [r7, #12]
 800d65c:	4608      	mov	r0, r1
 800d65e:	4611      	mov	r1, r2
 800d660:	461a      	mov	r2, r3
 800d662:	4603      	mov	r3, r0
 800d664:	817b      	strh	r3, [r7, #10]
 800d666:	460b      	mov	r3, r1
 800d668:	813b      	strh	r3, [r7, #8]
 800d66a:	4613      	mov	r3, r2
 800d66c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d66e:	f7fe ff63 	bl	800c538 <HAL_GetTick>
 800d672:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d67a:	b2db      	uxtb	r3, r3
 800d67c:	2b20      	cmp	r3, #32
 800d67e:	f040 80d9 	bne.w	800d834 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	9300      	str	r3, [sp, #0]
 800d686:	2319      	movs	r3, #25
 800d688:	2201      	movs	r2, #1
 800d68a:	496d      	ldr	r1, [pc, #436]	; (800d840 <HAL_I2C_Mem_Write+0x1ec>)
 800d68c:	68f8      	ldr	r0, [r7, #12]
 800d68e:	f000 fcb5 	bl	800dffc <I2C_WaitOnFlagUntilTimeout>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d001      	beq.n	800d69c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800d698:	2302      	movs	r3, #2
 800d69a:	e0cc      	b.n	800d836 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	d101      	bne.n	800d6aa <HAL_I2C_Mem_Write+0x56>
 800d6a6:	2302      	movs	r3, #2
 800d6a8:	e0c5      	b.n	800d836 <HAL_I2C_Mem_Write+0x1e2>
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f003 0301 	and.w	r3, r3, #1
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	d007      	beq.n	800d6d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	681a      	ldr	r2, [r3, #0]
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f042 0201 	orr.w	r2, r2, #1
 800d6ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d6de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	2221      	movs	r2, #33	; 0x21
 800d6e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2240      	movs	r2, #64	; 0x40
 800d6ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	6a3a      	ldr	r2, [r7, #32]
 800d6fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d700:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d706:	b29a      	uxth	r2, r3
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	4a4d      	ldr	r2, [pc, #308]	; (800d844 <HAL_I2C_Mem_Write+0x1f0>)
 800d710:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d712:	88f8      	ldrh	r0, [r7, #6]
 800d714:	893a      	ldrh	r2, [r7, #8]
 800d716:	8979      	ldrh	r1, [r7, #10]
 800d718:	697b      	ldr	r3, [r7, #20]
 800d71a:	9301      	str	r3, [sp, #4]
 800d71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d71e:	9300      	str	r3, [sp, #0]
 800d720:	4603      	mov	r3, r0
 800d722:	68f8      	ldr	r0, [r7, #12]
 800d724:	f000 faec 	bl	800dd00 <I2C_RequestMemoryWrite>
 800d728:	4603      	mov	r3, r0
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d052      	beq.n	800d7d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800d72e:	2301      	movs	r3, #1
 800d730:	e081      	b.n	800d836 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d732:	697a      	ldr	r2, [r7, #20]
 800d734:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d736:	68f8      	ldr	r0, [r7, #12]
 800d738:	f000 fd36 	bl	800e1a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800d73c:	4603      	mov	r3, r0
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d00d      	beq.n	800d75e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d746:	2b04      	cmp	r3, #4
 800d748:	d107      	bne.n	800d75a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	681a      	ldr	r2, [r3, #0]
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d758:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d75a:	2301      	movs	r3, #1
 800d75c:	e06b      	b.n	800d836 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d762:	781a      	ldrb	r2, [r3, #0]
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d76e:	1c5a      	adds	r2, r3, #1
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d778:	3b01      	subs	r3, #1
 800d77a:	b29a      	uxth	r2, r3
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d784:	b29b      	uxth	r3, r3
 800d786:	3b01      	subs	r3, #1
 800d788:	b29a      	uxth	r2, r3
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	695b      	ldr	r3, [r3, #20]
 800d794:	f003 0304 	and.w	r3, r3, #4
 800d798:	2b04      	cmp	r3, #4
 800d79a:	d11b      	bne.n	800d7d4 <HAL_I2C_Mem_Write+0x180>
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d017      	beq.n	800d7d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7a8:	781a      	ldrb	r2, [r3, #0]
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b4:	1c5a      	adds	r2, r3, #1
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d7be:	3b01      	subs	r3, #1
 800d7c0:	b29a      	uxth	r2, r3
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7ca:	b29b      	uxth	r3, r3
 800d7cc:	3b01      	subs	r3, #1
 800d7ce:	b29a      	uxth	r2, r3
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d1aa      	bne.n	800d732 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d7dc:	697a      	ldr	r2, [r7, #20]
 800d7de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d7e0:	68f8      	ldr	r0, [r7, #12]
 800d7e2:	f000 fd22 	bl	800e22a <I2C_WaitOnBTFFlagUntilTimeout>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d00d      	beq.n	800d808 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7f0:	2b04      	cmp	r3, #4
 800d7f2:	d107      	bne.n	800d804 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	681a      	ldr	r2, [r3, #0]
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d802:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d804:	2301      	movs	r3, #1
 800d806:	e016      	b.n	800d836 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	681a      	ldr	r2, [r3, #0]
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d816:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2220      	movs	r2, #32
 800d81c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	2200      	movs	r2, #0
 800d824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	2200      	movs	r2, #0
 800d82c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d830:	2300      	movs	r3, #0
 800d832:	e000      	b.n	800d836 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800d834:	2302      	movs	r3, #2
  }
}
 800d836:	4618      	mov	r0, r3
 800d838:	3718      	adds	r7, #24
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
 800d83e:	bf00      	nop
 800d840:	00100002 	.word	0x00100002
 800d844:	ffff0000 	.word	0xffff0000

0800d848 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b08c      	sub	sp, #48	; 0x30
 800d84c:	af02      	add	r7, sp, #8
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	4608      	mov	r0, r1
 800d852:	4611      	mov	r1, r2
 800d854:	461a      	mov	r2, r3
 800d856:	4603      	mov	r3, r0
 800d858:	817b      	strh	r3, [r7, #10]
 800d85a:	460b      	mov	r3, r1
 800d85c:	813b      	strh	r3, [r7, #8]
 800d85e:	4613      	mov	r3, r2
 800d860:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d862:	f7fe fe69 	bl	800c538 <HAL_GetTick>
 800d866:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d86e:	b2db      	uxtb	r3, r3
 800d870:	2b20      	cmp	r3, #32
 800d872:	f040 8208 	bne.w	800dc86 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d878:	9300      	str	r3, [sp, #0]
 800d87a:	2319      	movs	r3, #25
 800d87c:	2201      	movs	r2, #1
 800d87e:	497b      	ldr	r1, [pc, #492]	; (800da6c <HAL_I2C_Mem_Read+0x224>)
 800d880:	68f8      	ldr	r0, [r7, #12]
 800d882:	f000 fbbb 	bl	800dffc <I2C_WaitOnFlagUntilTimeout>
 800d886:	4603      	mov	r3, r0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d001      	beq.n	800d890 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800d88c:	2302      	movs	r3, #2
 800d88e:	e1fb      	b.n	800dc88 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d896:	2b01      	cmp	r3, #1
 800d898:	d101      	bne.n	800d89e <HAL_I2C_Mem_Read+0x56>
 800d89a:	2302      	movs	r3, #2
 800d89c:	e1f4      	b.n	800dc88 <HAL_I2C_Mem_Read+0x440>
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f003 0301 	and.w	r3, r3, #1
 800d8b0:	2b01      	cmp	r3, #1
 800d8b2:	d007      	beq.n	800d8c4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	681a      	ldr	r2, [r3, #0]
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	f042 0201 	orr.w	r2, r2, #1
 800d8c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	681a      	ldr	r2, [r3, #0]
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d8d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2222      	movs	r2, #34	; 0x22
 800d8d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	2240      	movs	r2, #64	; 0x40
 800d8e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d8f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d8fa:	b29a      	uxth	r2, r3
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	4a5b      	ldr	r2, [pc, #364]	; (800da70 <HAL_I2C_Mem_Read+0x228>)
 800d904:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d906:	88f8      	ldrh	r0, [r7, #6]
 800d908:	893a      	ldrh	r2, [r7, #8]
 800d90a:	8979      	ldrh	r1, [r7, #10]
 800d90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90e:	9301      	str	r3, [sp, #4]
 800d910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d912:	9300      	str	r3, [sp, #0]
 800d914:	4603      	mov	r3, r0
 800d916:	68f8      	ldr	r0, [r7, #12]
 800d918:	f000 fa88 	bl	800de2c <I2C_RequestMemoryRead>
 800d91c:	4603      	mov	r3, r0
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d001      	beq.n	800d926 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800d922:	2301      	movs	r3, #1
 800d924:	e1b0      	b.n	800dc88 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d113      	bne.n	800d956 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d92e:	2300      	movs	r3, #0
 800d930:	623b      	str	r3, [r7, #32]
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	695b      	ldr	r3, [r3, #20]
 800d938:	623b      	str	r3, [r7, #32]
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	699b      	ldr	r3, [r3, #24]
 800d940:	623b      	str	r3, [r7, #32]
 800d942:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	681a      	ldr	r2, [r3, #0]
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d952:	601a      	str	r2, [r3, #0]
 800d954:	e184      	b.n	800dc60 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	d11b      	bne.n	800d996 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	681a      	ldr	r2, [r3, #0]
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d96c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d96e:	2300      	movs	r3, #0
 800d970:	61fb      	str	r3, [r7, #28]
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	695b      	ldr	r3, [r3, #20]
 800d978:	61fb      	str	r3, [r7, #28]
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	699b      	ldr	r3, [r3, #24]
 800d980:	61fb      	str	r3, [r7, #28]
 800d982:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	681a      	ldr	r2, [r3, #0]
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d992:	601a      	str	r2, [r3, #0]
 800d994:	e164      	b.n	800dc60 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d99a:	2b02      	cmp	r3, #2
 800d99c:	d11b      	bne.n	800d9d6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	681a      	ldr	r2, [r3, #0]
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d9ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	681a      	ldr	r2, [r3, #0]
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d9bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d9be:	2300      	movs	r3, #0
 800d9c0:	61bb      	str	r3, [r7, #24]
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	695b      	ldr	r3, [r3, #20]
 800d9c8:	61bb      	str	r3, [r7, #24]
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	699b      	ldr	r3, [r3, #24]
 800d9d0:	61bb      	str	r3, [r7, #24]
 800d9d2:	69bb      	ldr	r3, [r7, #24]
 800d9d4:	e144      	b.n	800dc60 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	617b      	str	r3, [r7, #20]
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	695b      	ldr	r3, [r3, #20]
 800d9e0:	617b      	str	r3, [r7, #20]
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	699b      	ldr	r3, [r3, #24]
 800d9e8:	617b      	str	r3, [r7, #20]
 800d9ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800d9ec:	e138      	b.n	800dc60 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9f2:	2b03      	cmp	r3, #3
 800d9f4:	f200 80f1 	bhi.w	800dbda <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9fc:	2b01      	cmp	r3, #1
 800d9fe:	d123      	bne.n	800da48 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800da00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800da04:	68f8      	ldr	r0, [r7, #12]
 800da06:	f000 fc51 	bl	800e2ac <I2C_WaitOnRXNEFlagUntilTimeout>
 800da0a:	4603      	mov	r3, r0
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d001      	beq.n	800da14 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800da10:	2301      	movs	r3, #1
 800da12:	e139      	b.n	800dc88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	691a      	ldr	r2, [r3, #16]
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da1e:	b2d2      	uxtb	r2, r2
 800da20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da26:	1c5a      	adds	r2, r3, #1
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da30:	3b01      	subs	r3, #1
 800da32:	b29a      	uxth	r2, r3
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da3c:	b29b      	uxth	r3, r3
 800da3e:	3b01      	subs	r3, #1
 800da40:	b29a      	uxth	r2, r3
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	855a      	strh	r2, [r3, #42]	; 0x2a
 800da46:	e10b      	b.n	800dc60 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da4c:	2b02      	cmp	r3, #2
 800da4e:	d14e      	bne.n	800daee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800da50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da52:	9300      	str	r3, [sp, #0]
 800da54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da56:	2200      	movs	r2, #0
 800da58:	4906      	ldr	r1, [pc, #24]	; (800da74 <HAL_I2C_Mem_Read+0x22c>)
 800da5a:	68f8      	ldr	r0, [r7, #12]
 800da5c:	f000 face 	bl	800dffc <I2C_WaitOnFlagUntilTimeout>
 800da60:	4603      	mov	r3, r0
 800da62:	2b00      	cmp	r3, #0
 800da64:	d008      	beq.n	800da78 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800da66:	2301      	movs	r3, #1
 800da68:	e10e      	b.n	800dc88 <HAL_I2C_Mem_Read+0x440>
 800da6a:	bf00      	nop
 800da6c:	00100002 	.word	0x00100002
 800da70:	ffff0000 	.word	0xffff0000
 800da74:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	681a      	ldr	r2, [r3, #0]
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	691a      	ldr	r2, [r3, #16]
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da92:	b2d2      	uxtb	r2, r2
 800da94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da9a:	1c5a      	adds	r2, r3, #1
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800daa4:	3b01      	subs	r3, #1
 800daa6:	b29a      	uxth	r2, r3
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	3b01      	subs	r3, #1
 800dab4:	b29a      	uxth	r2, r3
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	691a      	ldr	r2, [r3, #16]
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dac4:	b2d2      	uxtb	r2, r2
 800dac6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dacc:	1c5a      	adds	r2, r3, #1
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dad6:	3b01      	subs	r3, #1
 800dad8:	b29a      	uxth	r2, r3
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dae2:	b29b      	uxth	r3, r3
 800dae4:	3b01      	subs	r3, #1
 800dae6:	b29a      	uxth	r2, r3
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	855a      	strh	r2, [r3, #42]	; 0x2a
 800daec:	e0b8      	b.n	800dc60 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800daee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf0:	9300      	str	r3, [sp, #0]
 800daf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf4:	2200      	movs	r2, #0
 800daf6:	4966      	ldr	r1, [pc, #408]	; (800dc90 <HAL_I2C_Mem_Read+0x448>)
 800daf8:	68f8      	ldr	r0, [r7, #12]
 800dafa:	f000 fa7f 	bl	800dffc <I2C_WaitOnFlagUntilTimeout>
 800dafe:	4603      	mov	r3, r0
 800db00:	2b00      	cmp	r3, #0
 800db02:	d001      	beq.n	800db08 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800db04:	2301      	movs	r3, #1
 800db06:	e0bf      	b.n	800dc88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	681a      	ldr	r2, [r3, #0]
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	691a      	ldr	r2, [r3, #16]
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db22:	b2d2      	uxtb	r2, r2
 800db24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db2a:	1c5a      	adds	r2, r3, #1
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db34:	3b01      	subs	r3, #1
 800db36:	b29a      	uxth	r2, r3
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db40:	b29b      	uxth	r3, r3
 800db42:	3b01      	subs	r3, #1
 800db44:	b29a      	uxth	r2, r3
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800db4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4c:	9300      	str	r3, [sp, #0]
 800db4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db50:	2200      	movs	r2, #0
 800db52:	494f      	ldr	r1, [pc, #316]	; (800dc90 <HAL_I2C_Mem_Read+0x448>)
 800db54:	68f8      	ldr	r0, [r7, #12]
 800db56:	f000 fa51 	bl	800dffc <I2C_WaitOnFlagUntilTimeout>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d001      	beq.n	800db64 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800db60:	2301      	movs	r3, #1
 800db62:	e091      	b.n	800dc88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	681a      	ldr	r2, [r3, #0]
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	691a      	ldr	r2, [r3, #16]
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db7e:	b2d2      	uxtb	r2, r2
 800db80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db86:	1c5a      	adds	r2, r3, #1
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db90:	3b01      	subs	r3, #1
 800db92:	b29a      	uxth	r2, r3
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db9c:	b29b      	uxth	r3, r3
 800db9e:	3b01      	subs	r3, #1
 800dba0:	b29a      	uxth	r2, r3
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	691a      	ldr	r2, [r3, #16]
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbb0:	b2d2      	uxtb	r2, r2
 800dbb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbb8:	1c5a      	adds	r2, r3, #1
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbc2:	3b01      	subs	r3, #1
 800dbc4:	b29a      	uxth	r2, r3
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	3b01      	subs	r3, #1
 800dbd2:	b29a      	uxth	r2, r3
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dbd8:	e042      	b.n	800dc60 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dbda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dbde:	68f8      	ldr	r0, [r7, #12]
 800dbe0:	f000 fb64 	bl	800e2ac <I2C_WaitOnRXNEFlagUntilTimeout>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d001      	beq.n	800dbee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800dbea:	2301      	movs	r3, #1
 800dbec:	e04c      	b.n	800dc88 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	691a      	ldr	r2, [r3, #16]
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf8:	b2d2      	uxtb	r2, r2
 800dbfa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc00:	1c5a      	adds	r2, r3, #1
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc0a:	3b01      	subs	r3, #1
 800dc0c:	b29a      	uxth	r2, r3
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	3b01      	subs	r3, #1
 800dc1a:	b29a      	uxth	r2, r3
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	695b      	ldr	r3, [r3, #20]
 800dc26:	f003 0304 	and.w	r3, r3, #4
 800dc2a:	2b04      	cmp	r3, #4
 800dc2c:	d118      	bne.n	800dc60 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	691a      	ldr	r2, [r3, #16]
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc38:	b2d2      	uxtb	r2, r2
 800dc3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc40:	1c5a      	adds	r2, r3, #1
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc4a:	3b01      	subs	r3, #1
 800dc4c:	b29a      	uxth	r2, r3
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc56:	b29b      	uxth	r3, r3
 800dc58:	3b01      	subs	r3, #1
 800dc5a:	b29a      	uxth	r2, r3
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	f47f aec2 	bne.w	800d9ee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	2220      	movs	r2, #32
 800dc6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	2200      	movs	r2, #0
 800dc76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800dc82:	2300      	movs	r3, #0
 800dc84:	e000      	b.n	800dc88 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800dc86:	2302      	movs	r3, #2
  }
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3728      	adds	r7, #40	; 0x28
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}
 800dc90:	00010004 	.word	0x00010004

0800dc94 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800dc94:	b480      	push	{r7}
 800dc96:	b083      	sub	sp, #12
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	2b20      	cmp	r3, #32
 800dca6:	d124      	bne.n	800dcf2 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2228      	movs	r2, #40	; 0x28
 800dcac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f003 0301 	and.w	r3, r3, #1
 800dcba:	2b01      	cmp	r3, #1
 800dcbc:	d007      	beq.n	800dcce <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	681a      	ldr	r2, [r3, #0]
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f042 0201 	orr.w	r2, r2, #1
 800dccc:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	681a      	ldr	r2, [r3, #0]
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dcdc:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	685a      	ldr	r2, [r3, #4]
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800dcec:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	e000      	b.n	800dcf4 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800dcf2:	2302      	movs	r3, #2
  }
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	370c      	adds	r7, #12
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr

0800dd00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b088      	sub	sp, #32
 800dd04:	af02      	add	r7, sp, #8
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	4608      	mov	r0, r1
 800dd0a:	4611      	mov	r1, r2
 800dd0c:	461a      	mov	r2, r3
 800dd0e:	4603      	mov	r3, r0
 800dd10:	817b      	strh	r3, [r7, #10]
 800dd12:	460b      	mov	r3, r1
 800dd14:	813b      	strh	r3, [r7, #8]
 800dd16:	4613      	mov	r3, r2
 800dd18:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	681a      	ldr	r2, [r3, #0]
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dd28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800dd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2c:	9300      	str	r3, [sp, #0]
 800dd2e:	6a3b      	ldr	r3, [r7, #32]
 800dd30:	2200      	movs	r2, #0
 800dd32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800dd36:	68f8      	ldr	r0, [r7, #12]
 800dd38:	f000 f960 	bl	800dffc <I2C_WaitOnFlagUntilTimeout>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d00d      	beq.n	800dd5e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd50:	d103      	bne.n	800dd5a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dd58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800dd5a:	2303      	movs	r3, #3
 800dd5c:	e05f      	b.n	800de1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800dd5e:	897b      	ldrh	r3, [r7, #10]
 800dd60:	b2db      	uxtb	r3, r3
 800dd62:	461a      	mov	r2, r3
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800dd6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800dd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd70:	6a3a      	ldr	r2, [r7, #32]
 800dd72:	492d      	ldr	r1, [pc, #180]	; (800de28 <I2C_RequestMemoryWrite+0x128>)
 800dd74:	68f8      	ldr	r0, [r7, #12]
 800dd76:	f000 f998 	bl	800e0aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d001      	beq.n	800dd84 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800dd80:	2301      	movs	r3, #1
 800dd82:	e04c      	b.n	800de1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dd84:	2300      	movs	r3, #0
 800dd86:	617b      	str	r3, [r7, #20]
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	695b      	ldr	r3, [r3, #20]
 800dd8e:	617b      	str	r3, [r7, #20]
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	699b      	ldr	r3, [r3, #24]
 800dd96:	617b      	str	r3, [r7, #20]
 800dd98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800dd9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd9c:	6a39      	ldr	r1, [r7, #32]
 800dd9e:	68f8      	ldr	r0, [r7, #12]
 800dda0:	f000 fa02 	bl	800e1a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800dda4:	4603      	mov	r3, r0
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d00d      	beq.n	800ddc6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddae:	2b04      	cmp	r3, #4
 800ddb0:	d107      	bne.n	800ddc2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	681a      	ldr	r2, [r3, #0]
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ddc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	e02b      	b.n	800de1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ddc6:	88fb      	ldrh	r3, [r7, #6]
 800ddc8:	2b01      	cmp	r3, #1
 800ddca:	d105      	bne.n	800ddd8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ddcc:	893b      	ldrh	r3, [r7, #8]
 800ddce:	b2da      	uxtb	r2, r3
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	611a      	str	r2, [r3, #16]
 800ddd6:	e021      	b.n	800de1c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ddd8:	893b      	ldrh	r3, [r7, #8]
 800ddda:	0a1b      	lsrs	r3, r3, #8
 800dddc:	b29b      	uxth	r3, r3
 800ddde:	b2da      	uxtb	r2, r3
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800dde6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dde8:	6a39      	ldr	r1, [r7, #32]
 800ddea:	68f8      	ldr	r0, [r7, #12]
 800ddec:	f000 f9dc 	bl	800e1a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d00d      	beq.n	800de12 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddfa:	2b04      	cmp	r3, #4
 800ddfc:	d107      	bne.n	800de0e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	681a      	ldr	r2, [r3, #0]
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800de0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800de0e:	2301      	movs	r3, #1
 800de10:	e005      	b.n	800de1e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800de12:	893b      	ldrh	r3, [r7, #8]
 800de14:	b2da      	uxtb	r2, r3
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800de1c:	2300      	movs	r3, #0
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3718      	adds	r7, #24
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}
 800de26:	bf00      	nop
 800de28:	00010002 	.word	0x00010002

0800de2c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b088      	sub	sp, #32
 800de30:	af02      	add	r7, sp, #8
 800de32:	60f8      	str	r0, [r7, #12]
 800de34:	4608      	mov	r0, r1
 800de36:	4611      	mov	r1, r2
 800de38:	461a      	mov	r2, r3
 800de3a:	4603      	mov	r3, r0
 800de3c:	817b      	strh	r3, [r7, #10]
 800de3e:	460b      	mov	r3, r1
 800de40:	813b      	strh	r3, [r7, #8]
 800de42:	4613      	mov	r3, r2
 800de44:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	681a      	ldr	r2, [r3, #0]
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800de54:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	681a      	ldr	r2, [r3, #0]
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800de64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800de66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de68:	9300      	str	r3, [sp, #0]
 800de6a:	6a3b      	ldr	r3, [r7, #32]
 800de6c:	2200      	movs	r2, #0
 800de6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800de72:	68f8      	ldr	r0, [r7, #12]
 800de74:	f000 f8c2 	bl	800dffc <I2C_WaitOnFlagUntilTimeout>
 800de78:	4603      	mov	r3, r0
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d00d      	beq.n	800de9a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de8c:	d103      	bne.n	800de96 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800de96:	2303      	movs	r3, #3
 800de98:	e0aa      	b.n	800dff0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800de9a:	897b      	ldrh	r3, [r7, #10]
 800de9c:	b2db      	uxtb	r3, r3
 800de9e:	461a      	mov	r2, r3
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800dea8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800deaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deac:	6a3a      	ldr	r2, [r7, #32]
 800deae:	4952      	ldr	r1, [pc, #328]	; (800dff8 <I2C_RequestMemoryRead+0x1cc>)
 800deb0:	68f8      	ldr	r0, [r7, #12]
 800deb2:	f000 f8fa 	bl	800e0aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800deb6:	4603      	mov	r3, r0
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d001      	beq.n	800dec0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800debc:	2301      	movs	r3, #1
 800debe:	e097      	b.n	800dff0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dec0:	2300      	movs	r3, #0
 800dec2:	617b      	str	r3, [r7, #20]
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	695b      	ldr	r3, [r3, #20]
 800deca:	617b      	str	r3, [r7, #20]
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	699b      	ldr	r3, [r3, #24]
 800ded2:	617b      	str	r3, [r7, #20]
 800ded4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ded6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ded8:	6a39      	ldr	r1, [r7, #32]
 800deda:	68f8      	ldr	r0, [r7, #12]
 800dedc:	f000 f964 	bl	800e1a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800dee0:	4603      	mov	r3, r0
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d00d      	beq.n	800df02 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deea:	2b04      	cmp	r3, #4
 800deec:	d107      	bne.n	800defe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	681a      	ldr	r2, [r3, #0]
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800defc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800defe:	2301      	movs	r3, #1
 800df00:	e076      	b.n	800dff0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800df02:	88fb      	ldrh	r3, [r7, #6]
 800df04:	2b01      	cmp	r3, #1
 800df06:	d105      	bne.n	800df14 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800df08:	893b      	ldrh	r3, [r7, #8]
 800df0a:	b2da      	uxtb	r2, r3
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	611a      	str	r2, [r3, #16]
 800df12:	e021      	b.n	800df58 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800df14:	893b      	ldrh	r3, [r7, #8]
 800df16:	0a1b      	lsrs	r3, r3, #8
 800df18:	b29b      	uxth	r3, r3
 800df1a:	b2da      	uxtb	r2, r3
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800df22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df24:	6a39      	ldr	r1, [r7, #32]
 800df26:	68f8      	ldr	r0, [r7, #12]
 800df28:	f000 f93e 	bl	800e1a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800df2c:	4603      	mov	r3, r0
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d00d      	beq.n	800df4e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df36:	2b04      	cmp	r3, #4
 800df38:	d107      	bne.n	800df4a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800df4a:	2301      	movs	r3, #1
 800df4c:	e050      	b.n	800dff0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800df4e:	893b      	ldrh	r3, [r7, #8]
 800df50:	b2da      	uxtb	r2, r3
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800df58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df5a:	6a39      	ldr	r1, [r7, #32]
 800df5c:	68f8      	ldr	r0, [r7, #12]
 800df5e:	f000 f923 	bl	800e1a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800df62:	4603      	mov	r3, r0
 800df64:	2b00      	cmp	r3, #0
 800df66:	d00d      	beq.n	800df84 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df6c:	2b04      	cmp	r3, #4
 800df6e:	d107      	bne.n	800df80 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	681a      	ldr	r2, [r3, #0]
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df7e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800df80:	2301      	movs	r3, #1
 800df82:	e035      	b.n	800dff0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	681a      	ldr	r2, [r3, #0]
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800df92:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800df94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df96:	9300      	str	r3, [sp, #0]
 800df98:	6a3b      	ldr	r3, [r7, #32]
 800df9a:	2200      	movs	r2, #0
 800df9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800dfa0:	68f8      	ldr	r0, [r7, #12]
 800dfa2:	f000 f82b 	bl	800dffc <I2C_WaitOnFlagUntilTimeout>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d00d      	beq.n	800dfc8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dfb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfba:	d103      	bne.n	800dfc4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dfc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800dfc4:	2303      	movs	r3, #3
 800dfc6:	e013      	b.n	800dff0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800dfc8:	897b      	ldrh	r3, [r7, #10]
 800dfca:	b2db      	uxtb	r3, r3
 800dfcc:	f043 0301 	orr.w	r3, r3, #1
 800dfd0:	b2da      	uxtb	r2, r3
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800dfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfda:	6a3a      	ldr	r2, [r7, #32]
 800dfdc:	4906      	ldr	r1, [pc, #24]	; (800dff8 <I2C_RequestMemoryRead+0x1cc>)
 800dfde:	68f8      	ldr	r0, [r7, #12]
 800dfe0:	f000 f863 	bl	800e0aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d001      	beq.n	800dfee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800dfea:	2301      	movs	r3, #1
 800dfec:	e000      	b.n	800dff0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800dfee:	2300      	movs	r3, #0
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3718      	adds	r7, #24
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}
 800dff8:	00010002 	.word	0x00010002

0800dffc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b084      	sub	sp, #16
 800e000:	af00      	add	r7, sp, #0
 800e002:	60f8      	str	r0, [r7, #12]
 800e004:	60b9      	str	r1, [r7, #8]
 800e006:	603b      	str	r3, [r7, #0]
 800e008:	4613      	mov	r3, r2
 800e00a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e00c:	e025      	b.n	800e05a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e014:	d021      	beq.n	800e05a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e016:	f7fe fa8f 	bl	800c538 <HAL_GetTick>
 800e01a:	4602      	mov	r2, r0
 800e01c:	69bb      	ldr	r3, [r7, #24]
 800e01e:	1ad3      	subs	r3, r2, r3
 800e020:	683a      	ldr	r2, [r7, #0]
 800e022:	429a      	cmp	r2, r3
 800e024:	d302      	bcc.n	800e02c <I2C_WaitOnFlagUntilTimeout+0x30>
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d116      	bne.n	800e05a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	2200      	movs	r2, #0
 800e030:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	2220      	movs	r2, #32
 800e036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2200      	movs	r2, #0
 800e03e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e046:	f043 0220 	orr.w	r2, r3, #32
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	2200      	movs	r2, #0
 800e052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e056:	2301      	movs	r3, #1
 800e058:	e023      	b.n	800e0a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	0c1b      	lsrs	r3, r3, #16
 800e05e:	b2db      	uxtb	r3, r3
 800e060:	2b01      	cmp	r3, #1
 800e062:	d10d      	bne.n	800e080 <I2C_WaitOnFlagUntilTimeout+0x84>
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	695b      	ldr	r3, [r3, #20]
 800e06a:	43da      	mvns	r2, r3
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	4013      	ands	r3, r2
 800e070:	b29b      	uxth	r3, r3
 800e072:	2b00      	cmp	r3, #0
 800e074:	bf0c      	ite	eq
 800e076:	2301      	moveq	r3, #1
 800e078:	2300      	movne	r3, #0
 800e07a:	b2db      	uxtb	r3, r3
 800e07c:	461a      	mov	r2, r3
 800e07e:	e00c      	b.n	800e09a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	699b      	ldr	r3, [r3, #24]
 800e086:	43da      	mvns	r2, r3
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	4013      	ands	r3, r2
 800e08c:	b29b      	uxth	r3, r3
 800e08e:	2b00      	cmp	r3, #0
 800e090:	bf0c      	ite	eq
 800e092:	2301      	moveq	r3, #1
 800e094:	2300      	movne	r3, #0
 800e096:	b2db      	uxtb	r3, r3
 800e098:	461a      	mov	r2, r3
 800e09a:	79fb      	ldrb	r3, [r7, #7]
 800e09c:	429a      	cmp	r2, r3
 800e09e:	d0b6      	beq.n	800e00e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e0a0:	2300      	movs	r3, #0
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3710      	adds	r7, #16
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}

0800e0aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e0aa:	b580      	push	{r7, lr}
 800e0ac:	b084      	sub	sp, #16
 800e0ae:	af00      	add	r7, sp, #0
 800e0b0:	60f8      	str	r0, [r7, #12]
 800e0b2:	60b9      	str	r1, [r7, #8]
 800e0b4:	607a      	str	r2, [r7, #4]
 800e0b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e0b8:	e051      	b.n	800e15e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	695b      	ldr	r3, [r3, #20]
 800e0c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e0c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e0c8:	d123      	bne.n	800e112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	681a      	ldr	r2, [r3, #0]
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e0d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e0e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2220      	movs	r2, #32
 800e0ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0fe:	f043 0204 	orr.w	r2, r3, #4
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	2200      	movs	r2, #0
 800e10a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e10e:	2301      	movs	r3, #1
 800e110:	e046      	b.n	800e1a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e118:	d021      	beq.n	800e15e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e11a:	f7fe fa0d 	bl	800c538 <HAL_GetTick>
 800e11e:	4602      	mov	r2, r0
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	1ad3      	subs	r3, r2, r3
 800e124:	687a      	ldr	r2, [r7, #4]
 800e126:	429a      	cmp	r2, r3
 800e128:	d302      	bcc.n	800e130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d116      	bne.n	800e15e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	2200      	movs	r2, #0
 800e134:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	2220      	movs	r2, #32
 800e13a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2200      	movs	r2, #0
 800e142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e14a:	f043 0220 	orr.w	r2, r3, #32
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	2200      	movs	r2, #0
 800e156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e15a:	2301      	movs	r3, #1
 800e15c:	e020      	b.n	800e1a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	0c1b      	lsrs	r3, r3, #16
 800e162:	b2db      	uxtb	r3, r3
 800e164:	2b01      	cmp	r3, #1
 800e166:	d10c      	bne.n	800e182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	695b      	ldr	r3, [r3, #20]
 800e16e:	43da      	mvns	r2, r3
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	4013      	ands	r3, r2
 800e174:	b29b      	uxth	r3, r3
 800e176:	2b00      	cmp	r3, #0
 800e178:	bf14      	ite	ne
 800e17a:	2301      	movne	r3, #1
 800e17c:	2300      	moveq	r3, #0
 800e17e:	b2db      	uxtb	r3, r3
 800e180:	e00b      	b.n	800e19a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	699b      	ldr	r3, [r3, #24]
 800e188:	43da      	mvns	r2, r3
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	4013      	ands	r3, r2
 800e18e:	b29b      	uxth	r3, r3
 800e190:	2b00      	cmp	r3, #0
 800e192:	bf14      	ite	ne
 800e194:	2301      	movne	r3, #1
 800e196:	2300      	moveq	r3, #0
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d18d      	bne.n	800e0ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800e19e:	2300      	movs	r3, #0
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3710      	adds	r7, #16
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b084      	sub	sp, #16
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	60f8      	str	r0, [r7, #12]
 800e1b0:	60b9      	str	r1, [r7, #8]
 800e1b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e1b4:	e02d      	b.n	800e212 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e1b6:	68f8      	ldr	r0, [r7, #12]
 800e1b8:	f000 f8ce 	bl	800e358 <I2C_IsAcknowledgeFailed>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d001      	beq.n	800e1c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	e02d      	b.n	800e222 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1cc:	d021      	beq.n	800e212 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e1ce:	f7fe f9b3 	bl	800c538 <HAL_GetTick>
 800e1d2:	4602      	mov	r2, r0
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	1ad3      	subs	r3, r2, r3
 800e1d8:	68ba      	ldr	r2, [r7, #8]
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	d302      	bcc.n	800e1e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d116      	bne.n	800e212 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2220      	movs	r2, #32
 800e1ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1fe:	f043 0220 	orr.w	r2, r3, #32
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	2200      	movs	r2, #0
 800e20a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e20e:	2301      	movs	r3, #1
 800e210:	e007      	b.n	800e222 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	695b      	ldr	r3, [r3, #20]
 800e218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e21c:	2b80      	cmp	r3, #128	; 0x80
 800e21e:	d1ca      	bne.n	800e1b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e220:	2300      	movs	r3, #0
}
 800e222:	4618      	mov	r0, r3
 800e224:	3710      	adds	r7, #16
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}

0800e22a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e22a:	b580      	push	{r7, lr}
 800e22c:	b084      	sub	sp, #16
 800e22e:	af00      	add	r7, sp, #0
 800e230:	60f8      	str	r0, [r7, #12]
 800e232:	60b9      	str	r1, [r7, #8]
 800e234:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e236:	e02d      	b.n	800e294 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e238:	68f8      	ldr	r0, [r7, #12]
 800e23a:	f000 f88d 	bl	800e358 <I2C_IsAcknowledgeFailed>
 800e23e:	4603      	mov	r3, r0
 800e240:	2b00      	cmp	r3, #0
 800e242:	d001      	beq.n	800e248 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e244:	2301      	movs	r3, #1
 800e246:	e02d      	b.n	800e2a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e24e:	d021      	beq.n	800e294 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e250:	f7fe f972 	bl	800c538 <HAL_GetTick>
 800e254:	4602      	mov	r2, r0
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	1ad3      	subs	r3, r2, r3
 800e25a:	68ba      	ldr	r2, [r7, #8]
 800e25c:	429a      	cmp	r2, r3
 800e25e:	d302      	bcc.n	800e266 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d116      	bne.n	800e294 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2200      	movs	r2, #0
 800e26a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	2220      	movs	r2, #32
 800e270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2200      	movs	r2, #0
 800e278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e280:	f043 0220 	orr.w	r2, r3, #32
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2200      	movs	r2, #0
 800e28c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e290:	2301      	movs	r3, #1
 800e292:	e007      	b.n	800e2a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	695b      	ldr	r3, [r3, #20]
 800e29a:	f003 0304 	and.w	r3, r3, #4
 800e29e:	2b04      	cmp	r3, #4
 800e2a0:	d1ca      	bne.n	800e238 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e2a2:	2300      	movs	r3, #0
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3710      	adds	r7, #16
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}

0800e2ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b084      	sub	sp, #16
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	60f8      	str	r0, [r7, #12]
 800e2b4:	60b9      	str	r1, [r7, #8]
 800e2b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e2b8:	e042      	b.n	800e340 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	695b      	ldr	r3, [r3, #20]
 800e2c0:	f003 0310 	and.w	r3, r3, #16
 800e2c4:	2b10      	cmp	r3, #16
 800e2c6:	d119      	bne.n	800e2fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	f06f 0210 	mvn.w	r2, #16
 800e2d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	2220      	movs	r2, #32
 800e2dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	e029      	b.n	800e350 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e2fc:	f7fe f91c 	bl	800c538 <HAL_GetTick>
 800e300:	4602      	mov	r2, r0
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	1ad3      	subs	r3, r2, r3
 800e306:	68ba      	ldr	r2, [r7, #8]
 800e308:	429a      	cmp	r2, r3
 800e30a:	d302      	bcc.n	800e312 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d116      	bne.n	800e340 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2200      	movs	r2, #0
 800e316:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	2220      	movs	r2, #32
 800e31c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	2200      	movs	r2, #0
 800e324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e32c:	f043 0220 	orr.w	r2, r3, #32
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	2200      	movs	r2, #0
 800e338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e33c:	2301      	movs	r3, #1
 800e33e:	e007      	b.n	800e350 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	695b      	ldr	r3, [r3, #20]
 800e346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e34a:	2b40      	cmp	r3, #64	; 0x40
 800e34c:	d1b5      	bne.n	800e2ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e34e:	2300      	movs	r3, #0
}
 800e350:	4618      	mov	r0, r3
 800e352:	3710      	adds	r7, #16
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}

0800e358 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800e358:	b480      	push	{r7}
 800e35a:	b083      	sub	sp, #12
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	695b      	ldr	r3, [r3, #20]
 800e366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e36a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e36e:	d11b      	bne.n	800e3a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e378:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2200      	movs	r2, #0
 800e37e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2220      	movs	r2, #32
 800e384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2200      	movs	r2, #0
 800e38c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e394:	f043 0204 	orr.w	r2, r3, #4
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	e000      	b.n	800e3aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800e3a8:	2300      	movs	r3, #0
}
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	370c      	adds	r7, #12
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b4:	4770      	bx	lr

0800e3b6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e3b6:	b480      	push	{r7}
 800e3b8:	b083      	sub	sp, #12
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	6078      	str	r0, [r7, #4]
 800e3be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	2b20      	cmp	r3, #32
 800e3ca:	d129      	bne.n	800e420 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2224      	movs	r2, #36	; 0x24
 800e3d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	681a      	ldr	r2, [r3, #0]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	f022 0201 	bic.w	r2, r2, #1
 800e3e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	f022 0210 	bic.w	r2, r2, #16
 800e3f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	683a      	ldr	r2, [r7, #0]
 800e400:	430a      	orrs	r2, r1
 800e402:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	681a      	ldr	r2, [r3, #0]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	f042 0201 	orr.w	r2, r2, #1
 800e412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2220      	movs	r2, #32
 800e418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800e41c:	2300      	movs	r3, #0
 800e41e:	e000      	b.n	800e422 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800e420:	2302      	movs	r3, #2
  }
}
 800e422:	4618      	mov	r0, r3
 800e424:	370c      	adds	r7, #12
 800e426:	46bd      	mov	sp, r7
 800e428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42c:	4770      	bx	lr

0800e42e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800e42e:	b480      	push	{r7}
 800e430:	b085      	sub	sp, #20
 800e432:	af00      	add	r7, sp, #0
 800e434:	6078      	str	r0, [r7, #4]
 800e436:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800e438:	2300      	movs	r3, #0
 800e43a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e442:	b2db      	uxtb	r3, r3
 800e444:	2b20      	cmp	r3, #32
 800e446:	d12a      	bne.n	800e49e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2224      	movs	r2, #36	; 0x24
 800e44c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	681a      	ldr	r2, [r3, #0]
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f022 0201 	bic.w	r2, r2, #1
 800e45e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e466:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800e468:	89fb      	ldrh	r3, [r7, #14]
 800e46a:	f023 030f 	bic.w	r3, r3, #15
 800e46e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	b29a      	uxth	r2, r3
 800e474:	89fb      	ldrh	r3, [r7, #14]
 800e476:	4313      	orrs	r3, r2
 800e478:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	89fa      	ldrh	r2, [r7, #14]
 800e480:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	681a      	ldr	r2, [r3, #0]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	f042 0201 	orr.w	r2, r2, #1
 800e490:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	2220      	movs	r2, #32
 800e496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800e49a:	2300      	movs	r3, #0
 800e49c:	e000      	b.n	800e4a0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800e49e:	2302      	movs	r3, #2
  }
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	3714      	adds	r7, #20
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr

0800e4ac <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b084      	sub	sp, #16
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d101      	bne.n	800e4be <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	e034      	b.n	800e528 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800e4c6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f245 5255 	movw	r2, #21845	; 0x5555
 800e4d0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	687a      	ldr	r2, [r7, #4]
 800e4d8:	6852      	ldr	r2, [r2, #4]
 800e4da:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	687a      	ldr	r2, [r7, #4]
 800e4e2:	6892      	ldr	r2, [r2, #8]
 800e4e4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800e4e6:	f7fe f827 	bl	800c538 <HAL_GetTick>
 800e4ea:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800e4ec:	e00f      	b.n	800e50e <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800e4ee:	f7fe f823 	bl	800c538 <HAL_GetTick>
 800e4f2:	4602      	mov	r2, r0
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	1ad3      	subs	r3, r2, r3
 800e4f8:	2b31      	cmp	r3, #49	; 0x31
 800e4fa:	d908      	bls.n	800e50e <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	68db      	ldr	r3, [r3, #12]
 800e502:	f003 0303 	and.w	r3, r3, #3
 800e506:	2b00      	cmp	r3, #0
 800e508:	d001      	beq.n	800e50e <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800e50a:	2303      	movs	r3, #3
 800e50c:	e00c      	b.n	800e528 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	68db      	ldr	r3, [r3, #12]
 800e514:	f003 0303 	and.w	r3, r3, #3
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d1e8      	bne.n	800e4ee <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800e524:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e526:	2300      	movs	r3, #0
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3710      	adds	r7, #16
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}

0800e530 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800e530:	b480      	push	{r7}
 800e532:	b083      	sub	sp, #12
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800e540:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e542:	2300      	movs	r3, #0
}
 800e544:	4618      	mov	r0, r3
 800e546:	370c      	adds	r7, #12
 800e548:	46bd      	mov	sp, r7
 800e54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54e:	4770      	bx	lr

0800e550 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800e550:	b480      	push	{r7}
 800e552:	b083      	sub	sp, #12
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800e558:	4b05      	ldr	r3, [pc, #20]	; (800e570 <HAL_PWR_EnableWakeUpPin+0x20>)
 800e55a:	685a      	ldr	r2, [r3, #4]
 800e55c:	4904      	ldr	r1, [pc, #16]	; (800e570 <HAL_PWR_EnableWakeUpPin+0x20>)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	4313      	orrs	r3, r2
 800e562:	604b      	str	r3, [r1, #4]
}
 800e564:	bf00      	nop
 800e566:	370c      	adds	r7, #12
 800e568:	46bd      	mov	sp, r7
 800e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56e:	4770      	bx	lr
 800e570:	40007000 	.word	0x40007000

0800e574 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800e574:	b480      	push	{r7}
 800e576:	b083      	sub	sp, #12
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 800e57c:	4b06      	ldr	r3, [pc, #24]	; (800e598 <HAL_PWR_DisableWakeUpPin+0x24>)
 800e57e:	685a      	ldr	r2, [r3, #4]
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	43db      	mvns	r3, r3
 800e584:	4904      	ldr	r1, [pc, #16]	; (800e598 <HAL_PWR_DisableWakeUpPin+0x24>)
 800e586:	4013      	ands	r3, r2
 800e588:	604b      	str	r3, [r1, #4]
}
 800e58a:	bf00      	nop
 800e58c:	370c      	adds	r7, #12
 800e58e:	46bd      	mov	sp, r7
 800e590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e594:	4770      	bx	lr
 800e596:	bf00      	nop
 800e598:	40007000 	.word	0x40007000

0800e59c <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800e59c:	b480      	push	{r7}
 800e59e:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800e5a0:	4b08      	ldr	r3, [pc, #32]	; (800e5c4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	4a07      	ldr	r2, [pc, #28]	; (800e5c4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800e5a6:	f043 0302 	orr.w	r3, r3, #2
 800e5aa:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800e5ac:	4b06      	ldr	r3, [pc, #24]	; (800e5c8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800e5ae:	691b      	ldr	r3, [r3, #16]
 800e5b0:	4a05      	ldr	r2, [pc, #20]	; (800e5c8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800e5b2:	f043 0304 	orr.w	r3, r3, #4
 800e5b6:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800e5b8:	bf30      	wfi
}
 800e5ba:	bf00      	nop
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c2:	4770      	bx	lr
 800e5c4:	40007000 	.word	0x40007000
 800e5c8:	e000ed00 	.word	0xe000ed00

0800e5cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b082      	sub	sp, #8
 800e5d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	603b      	str	r3, [r7, #0]
 800e5da:	4b20      	ldr	r3, [pc, #128]	; (800e65c <HAL_PWREx_EnableOverDrive+0x90>)
 800e5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5de:	4a1f      	ldr	r2, [pc, #124]	; (800e65c <HAL_PWREx_EnableOverDrive+0x90>)
 800e5e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e5e4:	6413      	str	r3, [r2, #64]	; 0x40
 800e5e6:	4b1d      	ldr	r3, [pc, #116]	; (800e65c <HAL_PWREx_EnableOverDrive+0x90>)
 800e5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e5ee:	603b      	str	r3, [r7, #0]
 800e5f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800e5f2:	4b1b      	ldr	r3, [pc, #108]	; (800e660 <HAL_PWREx_EnableOverDrive+0x94>)
 800e5f4:	2201      	movs	r2, #1
 800e5f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e5f8:	f7fd ff9e 	bl	800c538 <HAL_GetTick>
 800e5fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e5fe:	e009      	b.n	800e614 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e600:	f7fd ff9a 	bl	800c538 <HAL_GetTick>
 800e604:	4602      	mov	r2, r0
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	1ad3      	subs	r3, r2, r3
 800e60a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e60e:	d901      	bls.n	800e614 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800e610:	2303      	movs	r3, #3
 800e612:	e01f      	b.n	800e654 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e614:	4b13      	ldr	r3, [pc, #76]	; (800e664 <HAL_PWREx_EnableOverDrive+0x98>)
 800e616:	685b      	ldr	r3, [r3, #4]
 800e618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e61c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e620:	d1ee      	bne.n	800e600 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800e622:	4b11      	ldr	r3, [pc, #68]	; (800e668 <HAL_PWREx_EnableOverDrive+0x9c>)
 800e624:	2201      	movs	r2, #1
 800e626:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e628:	f7fd ff86 	bl	800c538 <HAL_GetTick>
 800e62c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e62e:	e009      	b.n	800e644 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e630:	f7fd ff82 	bl	800c538 <HAL_GetTick>
 800e634:	4602      	mov	r2, r0
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	1ad3      	subs	r3, r2, r3
 800e63a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e63e:	d901      	bls.n	800e644 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800e640:	2303      	movs	r3, #3
 800e642:	e007      	b.n	800e654 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e644:	4b07      	ldr	r3, [pc, #28]	; (800e664 <HAL_PWREx_EnableOverDrive+0x98>)
 800e646:	685b      	ldr	r3, [r3, #4]
 800e648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e64c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e650:	d1ee      	bne.n	800e630 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800e652:	2300      	movs	r3, #0
}
 800e654:	4618      	mov	r0, r3
 800e656:	3708      	adds	r7, #8
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}
 800e65c:	40023800 	.word	0x40023800
 800e660:	420e0040 	.word	0x420e0040
 800e664:	40007000 	.word	0x40007000
 800e668:	420e0044 	.word	0x420e0044

0800e66c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b086      	sub	sp, #24
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d101      	bne.n	800e67e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e67a:	2301      	movs	r3, #1
 800e67c:	e264      	b.n	800eb48 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f003 0301 	and.w	r3, r3, #1
 800e686:	2b00      	cmp	r3, #0
 800e688:	d075      	beq.n	800e776 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e68a:	4ba3      	ldr	r3, [pc, #652]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e68c:	689b      	ldr	r3, [r3, #8]
 800e68e:	f003 030c 	and.w	r3, r3, #12
 800e692:	2b04      	cmp	r3, #4
 800e694:	d00c      	beq.n	800e6b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e696:	4ba0      	ldr	r3, [pc, #640]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e698:	689b      	ldr	r3, [r3, #8]
 800e69a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e69e:	2b08      	cmp	r3, #8
 800e6a0:	d112      	bne.n	800e6c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e6a2:	4b9d      	ldr	r3, [pc, #628]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e6a4:	685b      	ldr	r3, [r3, #4]
 800e6a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e6aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e6ae:	d10b      	bne.n	800e6c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e6b0:	4b99      	ldr	r3, [pc, #612]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d05b      	beq.n	800e774 <HAL_RCC_OscConfig+0x108>
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	685b      	ldr	r3, [r3, #4]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d157      	bne.n	800e774 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	e23f      	b.n	800eb48 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	685b      	ldr	r3, [r3, #4]
 800e6cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6d0:	d106      	bne.n	800e6e0 <HAL_RCC_OscConfig+0x74>
 800e6d2:	4b91      	ldr	r3, [pc, #580]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	4a90      	ldr	r2, [pc, #576]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e6d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e6dc:	6013      	str	r3, [r2, #0]
 800e6de:	e01d      	b.n	800e71c <HAL_RCC_OscConfig+0xb0>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	685b      	ldr	r3, [r3, #4]
 800e6e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e6e8:	d10c      	bne.n	800e704 <HAL_RCC_OscConfig+0x98>
 800e6ea:	4b8b      	ldr	r3, [pc, #556]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	4a8a      	ldr	r2, [pc, #552]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e6f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e6f4:	6013      	str	r3, [r2, #0]
 800e6f6:	4b88      	ldr	r3, [pc, #544]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	4a87      	ldr	r2, [pc, #540]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e6fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e700:	6013      	str	r3, [r2, #0]
 800e702:	e00b      	b.n	800e71c <HAL_RCC_OscConfig+0xb0>
 800e704:	4b84      	ldr	r3, [pc, #528]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	4a83      	ldr	r2, [pc, #524]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e70a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e70e:	6013      	str	r3, [r2, #0]
 800e710:	4b81      	ldr	r3, [pc, #516]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	4a80      	ldr	r2, [pc, #512]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e71a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	685b      	ldr	r3, [r3, #4]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d013      	beq.n	800e74c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e724:	f7fd ff08 	bl	800c538 <HAL_GetTick>
 800e728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e72a:	e008      	b.n	800e73e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e72c:	f7fd ff04 	bl	800c538 <HAL_GetTick>
 800e730:	4602      	mov	r2, r0
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	1ad3      	subs	r3, r2, r3
 800e736:	2b64      	cmp	r3, #100	; 0x64
 800e738:	d901      	bls.n	800e73e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e73a:	2303      	movs	r3, #3
 800e73c:	e204      	b.n	800eb48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e73e:	4b76      	ldr	r3, [pc, #472]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e746:	2b00      	cmp	r3, #0
 800e748:	d0f0      	beq.n	800e72c <HAL_RCC_OscConfig+0xc0>
 800e74a:	e014      	b.n	800e776 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e74c:	f7fd fef4 	bl	800c538 <HAL_GetTick>
 800e750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e752:	e008      	b.n	800e766 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e754:	f7fd fef0 	bl	800c538 <HAL_GetTick>
 800e758:	4602      	mov	r2, r0
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	1ad3      	subs	r3, r2, r3
 800e75e:	2b64      	cmp	r3, #100	; 0x64
 800e760:	d901      	bls.n	800e766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e762:	2303      	movs	r3, #3
 800e764:	e1f0      	b.n	800eb48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e766:	4b6c      	ldr	r3, [pc, #432]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d1f0      	bne.n	800e754 <HAL_RCC_OscConfig+0xe8>
 800e772:	e000      	b.n	800e776 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	f003 0302 	and.w	r3, r3, #2
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d063      	beq.n	800e84a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e782:	4b65      	ldr	r3, [pc, #404]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e784:	689b      	ldr	r3, [r3, #8]
 800e786:	f003 030c 	and.w	r3, r3, #12
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d00b      	beq.n	800e7a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e78e:	4b62      	ldr	r3, [pc, #392]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e790:	689b      	ldr	r3, [r3, #8]
 800e792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e796:	2b08      	cmp	r3, #8
 800e798:	d11c      	bne.n	800e7d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e79a:	4b5f      	ldr	r3, [pc, #380]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e79c:	685b      	ldr	r3, [r3, #4]
 800e79e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d116      	bne.n	800e7d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e7a6:	4b5c      	ldr	r3, [pc, #368]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f003 0302 	and.w	r3, r3, #2
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d005      	beq.n	800e7be <HAL_RCC_OscConfig+0x152>
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	68db      	ldr	r3, [r3, #12]
 800e7b6:	2b01      	cmp	r3, #1
 800e7b8:	d001      	beq.n	800e7be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	e1c4      	b.n	800eb48 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e7be:	4b56      	ldr	r3, [pc, #344]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	691b      	ldr	r3, [r3, #16]
 800e7ca:	00db      	lsls	r3, r3, #3
 800e7cc:	4952      	ldr	r1, [pc, #328]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e7ce:	4313      	orrs	r3, r2
 800e7d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e7d2:	e03a      	b.n	800e84a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	68db      	ldr	r3, [r3, #12]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d020      	beq.n	800e81e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e7dc:	4b4f      	ldr	r3, [pc, #316]	; (800e91c <HAL_RCC_OscConfig+0x2b0>)
 800e7de:	2201      	movs	r2, #1
 800e7e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e7e2:	f7fd fea9 	bl	800c538 <HAL_GetTick>
 800e7e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e7e8:	e008      	b.n	800e7fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e7ea:	f7fd fea5 	bl	800c538 <HAL_GetTick>
 800e7ee:	4602      	mov	r2, r0
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	1ad3      	subs	r3, r2, r3
 800e7f4:	2b02      	cmp	r3, #2
 800e7f6:	d901      	bls.n	800e7fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800e7f8:	2303      	movs	r3, #3
 800e7fa:	e1a5      	b.n	800eb48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e7fc:	4b46      	ldr	r3, [pc, #280]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	f003 0302 	and.w	r3, r3, #2
 800e804:	2b00      	cmp	r3, #0
 800e806:	d0f0      	beq.n	800e7ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e808:	4b43      	ldr	r3, [pc, #268]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	691b      	ldr	r3, [r3, #16]
 800e814:	00db      	lsls	r3, r3, #3
 800e816:	4940      	ldr	r1, [pc, #256]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e818:	4313      	orrs	r3, r2
 800e81a:	600b      	str	r3, [r1, #0]
 800e81c:	e015      	b.n	800e84a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e81e:	4b3f      	ldr	r3, [pc, #252]	; (800e91c <HAL_RCC_OscConfig+0x2b0>)
 800e820:	2200      	movs	r2, #0
 800e822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e824:	f7fd fe88 	bl	800c538 <HAL_GetTick>
 800e828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e82a:	e008      	b.n	800e83e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e82c:	f7fd fe84 	bl	800c538 <HAL_GetTick>
 800e830:	4602      	mov	r2, r0
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	1ad3      	subs	r3, r2, r3
 800e836:	2b02      	cmp	r3, #2
 800e838:	d901      	bls.n	800e83e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800e83a:	2303      	movs	r3, #3
 800e83c:	e184      	b.n	800eb48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e83e:	4b36      	ldr	r3, [pc, #216]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	f003 0302 	and.w	r3, r3, #2
 800e846:	2b00      	cmp	r3, #0
 800e848:	d1f0      	bne.n	800e82c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f003 0308 	and.w	r3, r3, #8
 800e852:	2b00      	cmp	r3, #0
 800e854:	d030      	beq.n	800e8b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	695b      	ldr	r3, [r3, #20]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d016      	beq.n	800e88c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e85e:	4b30      	ldr	r3, [pc, #192]	; (800e920 <HAL_RCC_OscConfig+0x2b4>)
 800e860:	2201      	movs	r2, #1
 800e862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e864:	f7fd fe68 	bl	800c538 <HAL_GetTick>
 800e868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e86a:	e008      	b.n	800e87e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e86c:	f7fd fe64 	bl	800c538 <HAL_GetTick>
 800e870:	4602      	mov	r2, r0
 800e872:	693b      	ldr	r3, [r7, #16]
 800e874:	1ad3      	subs	r3, r2, r3
 800e876:	2b02      	cmp	r3, #2
 800e878:	d901      	bls.n	800e87e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800e87a:	2303      	movs	r3, #3
 800e87c:	e164      	b.n	800eb48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e87e:	4b26      	ldr	r3, [pc, #152]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e882:	f003 0302 	and.w	r3, r3, #2
 800e886:	2b00      	cmp	r3, #0
 800e888:	d0f0      	beq.n	800e86c <HAL_RCC_OscConfig+0x200>
 800e88a:	e015      	b.n	800e8b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e88c:	4b24      	ldr	r3, [pc, #144]	; (800e920 <HAL_RCC_OscConfig+0x2b4>)
 800e88e:	2200      	movs	r2, #0
 800e890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e892:	f7fd fe51 	bl	800c538 <HAL_GetTick>
 800e896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e898:	e008      	b.n	800e8ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e89a:	f7fd fe4d 	bl	800c538 <HAL_GetTick>
 800e89e:	4602      	mov	r2, r0
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	1ad3      	subs	r3, r2, r3
 800e8a4:	2b02      	cmp	r3, #2
 800e8a6:	d901      	bls.n	800e8ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800e8a8:	2303      	movs	r3, #3
 800e8aa:	e14d      	b.n	800eb48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e8ac:	4b1a      	ldr	r3, [pc, #104]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e8ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8b0:	f003 0302 	and.w	r3, r3, #2
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d1f0      	bne.n	800e89a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	f003 0304 	and.w	r3, r3, #4
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	f000 80a0 	beq.w	800ea06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e8ca:	4b13      	ldr	r3, [pc, #76]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d10f      	bne.n	800e8f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	60bb      	str	r3, [r7, #8]
 800e8da:	4b0f      	ldr	r3, [pc, #60]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8de:	4a0e      	ldr	r2, [pc, #56]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e8e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e8e4:	6413      	str	r3, [r2, #64]	; 0x40
 800e8e6:	4b0c      	ldr	r3, [pc, #48]	; (800e918 <HAL_RCC_OscConfig+0x2ac>)
 800e8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e8ee:	60bb      	str	r3, [r7, #8]
 800e8f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e8f6:	4b0b      	ldr	r3, [pc, #44]	; (800e924 <HAL_RCC_OscConfig+0x2b8>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d121      	bne.n	800e946 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e902:	4b08      	ldr	r3, [pc, #32]	; (800e924 <HAL_RCC_OscConfig+0x2b8>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	4a07      	ldr	r2, [pc, #28]	; (800e924 <HAL_RCC_OscConfig+0x2b8>)
 800e908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e90c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e90e:	f7fd fe13 	bl	800c538 <HAL_GetTick>
 800e912:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e914:	e011      	b.n	800e93a <HAL_RCC_OscConfig+0x2ce>
 800e916:	bf00      	nop
 800e918:	40023800 	.word	0x40023800
 800e91c:	42470000 	.word	0x42470000
 800e920:	42470e80 	.word	0x42470e80
 800e924:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e928:	f7fd fe06 	bl	800c538 <HAL_GetTick>
 800e92c:	4602      	mov	r2, r0
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	1ad3      	subs	r3, r2, r3
 800e932:	2b02      	cmp	r3, #2
 800e934:	d901      	bls.n	800e93a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800e936:	2303      	movs	r3, #3
 800e938:	e106      	b.n	800eb48 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e93a:	4b85      	ldr	r3, [pc, #532]	; (800eb50 <HAL_RCC_OscConfig+0x4e4>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e942:	2b00      	cmp	r3, #0
 800e944:	d0f0      	beq.n	800e928 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	689b      	ldr	r3, [r3, #8]
 800e94a:	2b01      	cmp	r3, #1
 800e94c:	d106      	bne.n	800e95c <HAL_RCC_OscConfig+0x2f0>
 800e94e:	4b81      	ldr	r3, [pc, #516]	; (800eb54 <HAL_RCC_OscConfig+0x4e8>)
 800e950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e952:	4a80      	ldr	r2, [pc, #512]	; (800eb54 <HAL_RCC_OscConfig+0x4e8>)
 800e954:	f043 0301 	orr.w	r3, r3, #1
 800e958:	6713      	str	r3, [r2, #112]	; 0x70
 800e95a:	e01c      	b.n	800e996 <HAL_RCC_OscConfig+0x32a>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	689b      	ldr	r3, [r3, #8]
 800e960:	2b05      	cmp	r3, #5
 800e962:	d10c      	bne.n	800e97e <HAL_RCC_OscConfig+0x312>
 800e964:	4b7b      	ldr	r3, [pc, #492]	; (800eb54 <HAL_RCC_OscConfig+0x4e8>)
 800e966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e968:	4a7a      	ldr	r2, [pc, #488]	; (800eb54 <HAL_RCC_OscConfig+0x4e8>)
 800e96a:	f043 0304 	orr.w	r3, r3, #4
 800e96e:	6713      	str	r3, [r2, #112]	; 0x70
 800e970:	4b78      	ldr	r3, [pc, #480]	; (800eb54 <HAL_RCC_OscConfig+0x4e8>)
 800e972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e974:	4a77      	ldr	r2, [pc, #476]	; (800eb54 <HAL_RCC_OscConfig+0x4e8>)
 800e976:	f043 0301 	orr.w	r3, r3, #1
 800e97a:	6713      	str	r3, [r2, #112]	; 0x70
 800e97c:	e00b      	b.n	800e996 <HAL_RCC_OscConfig+0x32a>
 800e97e:	4b75      	ldr	r3, [pc, #468]	; (800eb54 <HAL_RCC_OscConfig+0x4e8>)
 800e980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e982:	4a74      	ldr	r2, [pc, #464]	; (800eb54 <HAL_RCC_OscConfig+0x4e8>)
 800e984:	f023 0301 	bic.w	r3, r3, #1
 800e988:	6713      	str	r3, [r2, #112]	; 0x70
 800e98a:	4b72      	ldr	r3, [pc, #456]	; (800eb54 <HAL_RCC_OscConfig+0x4e8>)
 800e98c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e98e:	4a71      	ldr	r2, [pc, #452]	; (800eb54 <HAL_RCC_OscConfig+0x4e8>)
 800e990:	f023 0304 	bic.w	r3, r3, #4
 800e994:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	689b      	ldr	r3, [r3, #8]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d015      	beq.n	800e9ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e99e:	f7fd fdcb 	bl	800c538 <HAL_GetTick>
 800e9a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e9a4:	e00a      	b.n	800e9bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e9a6:	f7fd fdc7 	bl	800c538 <HAL_GetTick>
 800e9aa:	4602      	mov	r2, r0
 800e9ac:	693b      	ldr	r3, [r7, #16]
 800e9ae:	1ad3      	subs	r3, r2, r3
 800e9b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e9b4:	4293      	cmp	r3, r2
 800e9b6:	d901      	bls.n	800e9bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800e9b8:	2303      	movs	r3, #3
 800e9ba:	e0c5      	b.n	800eb48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e9bc:	4b65      	ldr	r3, [pc, #404]	; (800eb54 <HAL_RCC_OscConfig+0x4e8>)
 800e9be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9c0:	f003 0302 	and.w	r3, r3, #2
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d0ee      	beq.n	800e9a6 <HAL_RCC_OscConfig+0x33a>
 800e9c8:	e014      	b.n	800e9f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e9ca:	f7fd fdb5 	bl	800c538 <HAL_GetTick>
 800e9ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e9d0:	e00a      	b.n	800e9e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e9d2:	f7fd fdb1 	bl	800c538 <HAL_GetTick>
 800e9d6:	4602      	mov	r2, r0
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	1ad3      	subs	r3, r2, r3
 800e9dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e9e0:	4293      	cmp	r3, r2
 800e9e2:	d901      	bls.n	800e9e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800e9e4:	2303      	movs	r3, #3
 800e9e6:	e0af      	b.n	800eb48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e9e8:	4b5a      	ldr	r3, [pc, #360]	; (800eb54 <HAL_RCC_OscConfig+0x4e8>)
 800e9ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9ec:	f003 0302 	and.w	r3, r3, #2
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d1ee      	bne.n	800e9d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e9f4:	7dfb      	ldrb	r3, [r7, #23]
 800e9f6:	2b01      	cmp	r3, #1
 800e9f8:	d105      	bne.n	800ea06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e9fa:	4b56      	ldr	r3, [pc, #344]	; (800eb54 <HAL_RCC_OscConfig+0x4e8>)
 800e9fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9fe:	4a55      	ldr	r2, [pc, #340]	; (800eb54 <HAL_RCC_OscConfig+0x4e8>)
 800ea00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ea04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	699b      	ldr	r3, [r3, #24]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	f000 809b 	beq.w	800eb46 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ea10:	4b50      	ldr	r3, [pc, #320]	; (800eb54 <HAL_RCC_OscConfig+0x4e8>)
 800ea12:	689b      	ldr	r3, [r3, #8]
 800ea14:	f003 030c 	and.w	r3, r3, #12
 800ea18:	2b08      	cmp	r3, #8
 800ea1a:	d05c      	beq.n	800ead6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	699b      	ldr	r3, [r3, #24]
 800ea20:	2b02      	cmp	r3, #2
 800ea22:	d141      	bne.n	800eaa8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ea24:	4b4c      	ldr	r3, [pc, #304]	; (800eb58 <HAL_RCC_OscConfig+0x4ec>)
 800ea26:	2200      	movs	r2, #0
 800ea28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ea2a:	f7fd fd85 	bl	800c538 <HAL_GetTick>
 800ea2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ea30:	e008      	b.n	800ea44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ea32:	f7fd fd81 	bl	800c538 <HAL_GetTick>
 800ea36:	4602      	mov	r2, r0
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	1ad3      	subs	r3, r2, r3
 800ea3c:	2b02      	cmp	r3, #2
 800ea3e:	d901      	bls.n	800ea44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800ea40:	2303      	movs	r3, #3
 800ea42:	e081      	b.n	800eb48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ea44:	4b43      	ldr	r3, [pc, #268]	; (800eb54 <HAL_RCC_OscConfig+0x4e8>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d1f0      	bne.n	800ea32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	69da      	ldr	r2, [r3, #28]
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6a1b      	ldr	r3, [r3, #32]
 800ea58:	431a      	orrs	r2, r3
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea5e:	019b      	lsls	r3, r3, #6
 800ea60:	431a      	orrs	r2, r3
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea66:	085b      	lsrs	r3, r3, #1
 800ea68:	3b01      	subs	r3, #1
 800ea6a:	041b      	lsls	r3, r3, #16
 800ea6c:	431a      	orrs	r2, r3
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea72:	061b      	lsls	r3, r3, #24
 800ea74:	4937      	ldr	r1, [pc, #220]	; (800eb54 <HAL_RCC_OscConfig+0x4e8>)
 800ea76:	4313      	orrs	r3, r2
 800ea78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ea7a:	4b37      	ldr	r3, [pc, #220]	; (800eb58 <HAL_RCC_OscConfig+0x4ec>)
 800ea7c:	2201      	movs	r2, #1
 800ea7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ea80:	f7fd fd5a 	bl	800c538 <HAL_GetTick>
 800ea84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ea86:	e008      	b.n	800ea9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ea88:	f7fd fd56 	bl	800c538 <HAL_GetTick>
 800ea8c:	4602      	mov	r2, r0
 800ea8e:	693b      	ldr	r3, [r7, #16]
 800ea90:	1ad3      	subs	r3, r2, r3
 800ea92:	2b02      	cmp	r3, #2
 800ea94:	d901      	bls.n	800ea9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800ea96:	2303      	movs	r3, #3
 800ea98:	e056      	b.n	800eb48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ea9a:	4b2e      	ldr	r3, [pc, #184]	; (800eb54 <HAL_RCC_OscConfig+0x4e8>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d0f0      	beq.n	800ea88 <HAL_RCC_OscConfig+0x41c>
 800eaa6:	e04e      	b.n	800eb46 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800eaa8:	4b2b      	ldr	r3, [pc, #172]	; (800eb58 <HAL_RCC_OscConfig+0x4ec>)
 800eaaa:	2200      	movs	r2, #0
 800eaac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eaae:	f7fd fd43 	bl	800c538 <HAL_GetTick>
 800eab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eab4:	e008      	b.n	800eac8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800eab6:	f7fd fd3f 	bl	800c538 <HAL_GetTick>
 800eaba:	4602      	mov	r2, r0
 800eabc:	693b      	ldr	r3, [r7, #16]
 800eabe:	1ad3      	subs	r3, r2, r3
 800eac0:	2b02      	cmp	r3, #2
 800eac2:	d901      	bls.n	800eac8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800eac4:	2303      	movs	r3, #3
 800eac6:	e03f      	b.n	800eb48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eac8:	4b22      	ldr	r3, [pc, #136]	; (800eb54 <HAL_RCC_OscConfig+0x4e8>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d1f0      	bne.n	800eab6 <HAL_RCC_OscConfig+0x44a>
 800ead4:	e037      	b.n	800eb46 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	699b      	ldr	r3, [r3, #24]
 800eada:	2b01      	cmp	r3, #1
 800eadc:	d101      	bne.n	800eae2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800eade:	2301      	movs	r3, #1
 800eae0:	e032      	b.n	800eb48 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800eae2:	4b1c      	ldr	r3, [pc, #112]	; (800eb54 <HAL_RCC_OscConfig+0x4e8>)
 800eae4:	685b      	ldr	r3, [r3, #4]
 800eae6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	699b      	ldr	r3, [r3, #24]
 800eaec:	2b01      	cmp	r3, #1
 800eaee:	d028      	beq.n	800eb42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800eafa:	429a      	cmp	r2, r3
 800eafc:	d121      	bne.n	800eb42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d11a      	bne.n	800eb42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800eb0c:	68fa      	ldr	r2, [r7, #12]
 800eb0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800eb12:	4013      	ands	r3, r2
 800eb14:	687a      	ldr	r2, [r7, #4]
 800eb16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800eb18:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	d111      	bne.n	800eb42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb28:	085b      	lsrs	r3, r3, #1
 800eb2a:	3b01      	subs	r3, #1
 800eb2c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	d107      	bne.n	800eb42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb3c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d001      	beq.n	800eb46 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800eb42:	2301      	movs	r3, #1
 800eb44:	e000      	b.n	800eb48 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800eb46:	2300      	movs	r3, #0
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	3718      	adds	r7, #24
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}
 800eb50:	40007000 	.word	0x40007000
 800eb54:	40023800 	.word	0x40023800
 800eb58:	42470060 	.word	0x42470060

0800eb5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b084      	sub	sp, #16
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d101      	bne.n	800eb70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	e0cc      	b.n	800ed0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800eb70:	4b68      	ldr	r3, [pc, #416]	; (800ed14 <HAL_RCC_ClockConfig+0x1b8>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	f003 030f 	and.w	r3, r3, #15
 800eb78:	683a      	ldr	r2, [r7, #0]
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d90c      	bls.n	800eb98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800eb7e:	4b65      	ldr	r3, [pc, #404]	; (800ed14 <HAL_RCC_ClockConfig+0x1b8>)
 800eb80:	683a      	ldr	r2, [r7, #0]
 800eb82:	b2d2      	uxtb	r2, r2
 800eb84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800eb86:	4b63      	ldr	r3, [pc, #396]	; (800ed14 <HAL_RCC_ClockConfig+0x1b8>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	f003 030f 	and.w	r3, r3, #15
 800eb8e:	683a      	ldr	r2, [r7, #0]
 800eb90:	429a      	cmp	r2, r3
 800eb92:	d001      	beq.n	800eb98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800eb94:	2301      	movs	r3, #1
 800eb96:	e0b8      	b.n	800ed0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	f003 0302 	and.w	r3, r3, #2
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d020      	beq.n	800ebe6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	f003 0304 	and.w	r3, r3, #4
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d005      	beq.n	800ebbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ebb0:	4b59      	ldr	r3, [pc, #356]	; (800ed18 <HAL_RCC_ClockConfig+0x1bc>)
 800ebb2:	689b      	ldr	r3, [r3, #8]
 800ebb4:	4a58      	ldr	r2, [pc, #352]	; (800ed18 <HAL_RCC_ClockConfig+0x1bc>)
 800ebb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ebba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	f003 0308 	and.w	r3, r3, #8
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d005      	beq.n	800ebd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ebc8:	4b53      	ldr	r3, [pc, #332]	; (800ed18 <HAL_RCC_ClockConfig+0x1bc>)
 800ebca:	689b      	ldr	r3, [r3, #8]
 800ebcc:	4a52      	ldr	r2, [pc, #328]	; (800ed18 <HAL_RCC_ClockConfig+0x1bc>)
 800ebce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ebd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ebd4:	4b50      	ldr	r3, [pc, #320]	; (800ed18 <HAL_RCC_ClockConfig+0x1bc>)
 800ebd6:	689b      	ldr	r3, [r3, #8]
 800ebd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	689b      	ldr	r3, [r3, #8]
 800ebe0:	494d      	ldr	r1, [pc, #308]	; (800ed18 <HAL_RCC_ClockConfig+0x1bc>)
 800ebe2:	4313      	orrs	r3, r2
 800ebe4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	f003 0301 	and.w	r3, r3, #1
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d044      	beq.n	800ec7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	685b      	ldr	r3, [r3, #4]
 800ebf6:	2b01      	cmp	r3, #1
 800ebf8:	d107      	bne.n	800ec0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ebfa:	4b47      	ldr	r3, [pc, #284]	; (800ed18 <HAL_RCC_ClockConfig+0x1bc>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d119      	bne.n	800ec3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ec06:	2301      	movs	r3, #1
 800ec08:	e07f      	b.n	800ed0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	685b      	ldr	r3, [r3, #4]
 800ec0e:	2b02      	cmp	r3, #2
 800ec10:	d003      	beq.n	800ec1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ec16:	2b03      	cmp	r3, #3
 800ec18:	d107      	bne.n	800ec2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ec1a:	4b3f      	ldr	r3, [pc, #252]	; (800ed18 <HAL_RCC_ClockConfig+0x1bc>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d109      	bne.n	800ec3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ec26:	2301      	movs	r3, #1
 800ec28:	e06f      	b.n	800ed0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ec2a:	4b3b      	ldr	r3, [pc, #236]	; (800ed18 <HAL_RCC_ClockConfig+0x1bc>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	f003 0302 	and.w	r3, r3, #2
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d101      	bne.n	800ec3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ec36:	2301      	movs	r3, #1
 800ec38:	e067      	b.n	800ed0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ec3a:	4b37      	ldr	r3, [pc, #220]	; (800ed18 <HAL_RCC_ClockConfig+0x1bc>)
 800ec3c:	689b      	ldr	r3, [r3, #8]
 800ec3e:	f023 0203 	bic.w	r2, r3, #3
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	685b      	ldr	r3, [r3, #4]
 800ec46:	4934      	ldr	r1, [pc, #208]	; (800ed18 <HAL_RCC_ClockConfig+0x1bc>)
 800ec48:	4313      	orrs	r3, r2
 800ec4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ec4c:	f7fd fc74 	bl	800c538 <HAL_GetTick>
 800ec50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ec52:	e00a      	b.n	800ec6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ec54:	f7fd fc70 	bl	800c538 <HAL_GetTick>
 800ec58:	4602      	mov	r2, r0
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	1ad3      	subs	r3, r2, r3
 800ec5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec62:	4293      	cmp	r3, r2
 800ec64:	d901      	bls.n	800ec6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ec66:	2303      	movs	r3, #3
 800ec68:	e04f      	b.n	800ed0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ec6a:	4b2b      	ldr	r3, [pc, #172]	; (800ed18 <HAL_RCC_ClockConfig+0x1bc>)
 800ec6c:	689b      	ldr	r3, [r3, #8]
 800ec6e:	f003 020c 	and.w	r2, r3, #12
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	685b      	ldr	r3, [r3, #4]
 800ec76:	009b      	lsls	r3, r3, #2
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d1eb      	bne.n	800ec54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ec7c:	4b25      	ldr	r3, [pc, #148]	; (800ed14 <HAL_RCC_ClockConfig+0x1b8>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	f003 030f 	and.w	r3, r3, #15
 800ec84:	683a      	ldr	r2, [r7, #0]
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d20c      	bcs.n	800eca4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ec8a:	4b22      	ldr	r3, [pc, #136]	; (800ed14 <HAL_RCC_ClockConfig+0x1b8>)
 800ec8c:	683a      	ldr	r2, [r7, #0]
 800ec8e:	b2d2      	uxtb	r2, r2
 800ec90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ec92:	4b20      	ldr	r3, [pc, #128]	; (800ed14 <HAL_RCC_ClockConfig+0x1b8>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	f003 030f 	and.w	r3, r3, #15
 800ec9a:	683a      	ldr	r2, [r7, #0]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d001      	beq.n	800eca4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800eca0:	2301      	movs	r3, #1
 800eca2:	e032      	b.n	800ed0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f003 0304 	and.w	r3, r3, #4
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d008      	beq.n	800ecc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ecb0:	4b19      	ldr	r3, [pc, #100]	; (800ed18 <HAL_RCC_ClockConfig+0x1bc>)
 800ecb2:	689b      	ldr	r3, [r3, #8]
 800ecb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	68db      	ldr	r3, [r3, #12]
 800ecbc:	4916      	ldr	r1, [pc, #88]	; (800ed18 <HAL_RCC_ClockConfig+0x1bc>)
 800ecbe:	4313      	orrs	r3, r2
 800ecc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	f003 0308 	and.w	r3, r3, #8
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d009      	beq.n	800ece2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ecce:	4b12      	ldr	r3, [pc, #72]	; (800ed18 <HAL_RCC_ClockConfig+0x1bc>)
 800ecd0:	689b      	ldr	r3, [r3, #8]
 800ecd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	691b      	ldr	r3, [r3, #16]
 800ecda:	00db      	lsls	r3, r3, #3
 800ecdc:	490e      	ldr	r1, [pc, #56]	; (800ed18 <HAL_RCC_ClockConfig+0x1bc>)
 800ecde:	4313      	orrs	r3, r2
 800ece0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ece2:	f000 f821 	bl	800ed28 <HAL_RCC_GetSysClockFreq>
 800ece6:	4602      	mov	r2, r0
 800ece8:	4b0b      	ldr	r3, [pc, #44]	; (800ed18 <HAL_RCC_ClockConfig+0x1bc>)
 800ecea:	689b      	ldr	r3, [r3, #8]
 800ecec:	091b      	lsrs	r3, r3, #4
 800ecee:	f003 030f 	and.w	r3, r3, #15
 800ecf2:	490a      	ldr	r1, [pc, #40]	; (800ed1c <HAL_RCC_ClockConfig+0x1c0>)
 800ecf4:	5ccb      	ldrb	r3, [r1, r3]
 800ecf6:	fa22 f303 	lsr.w	r3, r2, r3
 800ecfa:	4a09      	ldr	r2, [pc, #36]	; (800ed20 <HAL_RCC_ClockConfig+0x1c4>)
 800ecfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ecfe:	4b09      	ldr	r3, [pc, #36]	; (800ed24 <HAL_RCC_ClockConfig+0x1c8>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7f4 fc68 	bl	80035d8 <HAL_InitTick>

  return HAL_OK;
 800ed08:	2300      	movs	r3, #0
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	3710      	adds	r7, #16
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	40023c00 	.word	0x40023c00
 800ed18:	40023800 	.word	0x40023800
 800ed1c:	08022a00 	.word	0x08022a00
 800ed20:	20000088 	.word	0x20000088
 800ed24:	200000cc 	.word	0x200000cc

0800ed28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ed28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ed2c:	b084      	sub	sp, #16
 800ed2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ed30:	2300      	movs	r3, #0
 800ed32:	607b      	str	r3, [r7, #4]
 800ed34:	2300      	movs	r3, #0
 800ed36:	60fb      	str	r3, [r7, #12]
 800ed38:	2300      	movs	r3, #0
 800ed3a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ed40:	4b67      	ldr	r3, [pc, #412]	; (800eee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ed42:	689b      	ldr	r3, [r3, #8]
 800ed44:	f003 030c 	and.w	r3, r3, #12
 800ed48:	2b08      	cmp	r3, #8
 800ed4a:	d00d      	beq.n	800ed68 <HAL_RCC_GetSysClockFreq+0x40>
 800ed4c:	2b08      	cmp	r3, #8
 800ed4e:	f200 80bd 	bhi.w	800eecc <HAL_RCC_GetSysClockFreq+0x1a4>
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d002      	beq.n	800ed5c <HAL_RCC_GetSysClockFreq+0x34>
 800ed56:	2b04      	cmp	r3, #4
 800ed58:	d003      	beq.n	800ed62 <HAL_RCC_GetSysClockFreq+0x3a>
 800ed5a:	e0b7      	b.n	800eecc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ed5c:	4b61      	ldr	r3, [pc, #388]	; (800eee4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800ed5e:	60bb      	str	r3, [r7, #8]
       break;
 800ed60:	e0b7      	b.n	800eed2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ed62:	4b60      	ldr	r3, [pc, #384]	; (800eee4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800ed64:	60bb      	str	r3, [r7, #8]
      break;
 800ed66:	e0b4      	b.n	800eed2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ed68:	4b5d      	ldr	r3, [pc, #372]	; (800eee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ed6a:	685b      	ldr	r3, [r3, #4]
 800ed6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed70:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ed72:	4b5b      	ldr	r3, [pc, #364]	; (800eee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ed74:	685b      	ldr	r3, [r3, #4]
 800ed76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d04d      	beq.n	800ee1a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ed7e:	4b58      	ldr	r3, [pc, #352]	; (800eee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ed80:	685b      	ldr	r3, [r3, #4]
 800ed82:	099b      	lsrs	r3, r3, #6
 800ed84:	461a      	mov	r2, r3
 800ed86:	f04f 0300 	mov.w	r3, #0
 800ed8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ed8e:	f04f 0100 	mov.w	r1, #0
 800ed92:	ea02 0800 	and.w	r8, r2, r0
 800ed96:	ea03 0901 	and.w	r9, r3, r1
 800ed9a:	4640      	mov	r0, r8
 800ed9c:	4649      	mov	r1, r9
 800ed9e:	f04f 0200 	mov.w	r2, #0
 800eda2:	f04f 0300 	mov.w	r3, #0
 800eda6:	014b      	lsls	r3, r1, #5
 800eda8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800edac:	0142      	lsls	r2, r0, #5
 800edae:	4610      	mov	r0, r2
 800edb0:	4619      	mov	r1, r3
 800edb2:	ebb0 0008 	subs.w	r0, r0, r8
 800edb6:	eb61 0109 	sbc.w	r1, r1, r9
 800edba:	f04f 0200 	mov.w	r2, #0
 800edbe:	f04f 0300 	mov.w	r3, #0
 800edc2:	018b      	lsls	r3, r1, #6
 800edc4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800edc8:	0182      	lsls	r2, r0, #6
 800edca:	1a12      	subs	r2, r2, r0
 800edcc:	eb63 0301 	sbc.w	r3, r3, r1
 800edd0:	f04f 0000 	mov.w	r0, #0
 800edd4:	f04f 0100 	mov.w	r1, #0
 800edd8:	00d9      	lsls	r1, r3, #3
 800edda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800edde:	00d0      	lsls	r0, r2, #3
 800ede0:	4602      	mov	r2, r0
 800ede2:	460b      	mov	r3, r1
 800ede4:	eb12 0208 	adds.w	r2, r2, r8
 800ede8:	eb43 0309 	adc.w	r3, r3, r9
 800edec:	f04f 0000 	mov.w	r0, #0
 800edf0:	f04f 0100 	mov.w	r1, #0
 800edf4:	0299      	lsls	r1, r3, #10
 800edf6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800edfa:	0290      	lsls	r0, r2, #10
 800edfc:	4602      	mov	r2, r0
 800edfe:	460b      	mov	r3, r1
 800ee00:	4610      	mov	r0, r2
 800ee02:	4619      	mov	r1, r3
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	461a      	mov	r2, r3
 800ee08:	f04f 0300 	mov.w	r3, #0
 800ee0c:	f7f1 ffac 	bl	8000d68 <__aeabi_uldivmod>
 800ee10:	4602      	mov	r2, r0
 800ee12:	460b      	mov	r3, r1
 800ee14:	4613      	mov	r3, r2
 800ee16:	60fb      	str	r3, [r7, #12]
 800ee18:	e04a      	b.n	800eeb0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ee1a:	4b31      	ldr	r3, [pc, #196]	; (800eee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ee1c:	685b      	ldr	r3, [r3, #4]
 800ee1e:	099b      	lsrs	r3, r3, #6
 800ee20:	461a      	mov	r2, r3
 800ee22:	f04f 0300 	mov.w	r3, #0
 800ee26:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ee2a:	f04f 0100 	mov.w	r1, #0
 800ee2e:	ea02 0400 	and.w	r4, r2, r0
 800ee32:	ea03 0501 	and.w	r5, r3, r1
 800ee36:	4620      	mov	r0, r4
 800ee38:	4629      	mov	r1, r5
 800ee3a:	f04f 0200 	mov.w	r2, #0
 800ee3e:	f04f 0300 	mov.w	r3, #0
 800ee42:	014b      	lsls	r3, r1, #5
 800ee44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ee48:	0142      	lsls	r2, r0, #5
 800ee4a:	4610      	mov	r0, r2
 800ee4c:	4619      	mov	r1, r3
 800ee4e:	1b00      	subs	r0, r0, r4
 800ee50:	eb61 0105 	sbc.w	r1, r1, r5
 800ee54:	f04f 0200 	mov.w	r2, #0
 800ee58:	f04f 0300 	mov.w	r3, #0
 800ee5c:	018b      	lsls	r3, r1, #6
 800ee5e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ee62:	0182      	lsls	r2, r0, #6
 800ee64:	1a12      	subs	r2, r2, r0
 800ee66:	eb63 0301 	sbc.w	r3, r3, r1
 800ee6a:	f04f 0000 	mov.w	r0, #0
 800ee6e:	f04f 0100 	mov.w	r1, #0
 800ee72:	00d9      	lsls	r1, r3, #3
 800ee74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ee78:	00d0      	lsls	r0, r2, #3
 800ee7a:	4602      	mov	r2, r0
 800ee7c:	460b      	mov	r3, r1
 800ee7e:	1912      	adds	r2, r2, r4
 800ee80:	eb45 0303 	adc.w	r3, r5, r3
 800ee84:	f04f 0000 	mov.w	r0, #0
 800ee88:	f04f 0100 	mov.w	r1, #0
 800ee8c:	0299      	lsls	r1, r3, #10
 800ee8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ee92:	0290      	lsls	r0, r2, #10
 800ee94:	4602      	mov	r2, r0
 800ee96:	460b      	mov	r3, r1
 800ee98:	4610      	mov	r0, r2
 800ee9a:	4619      	mov	r1, r3
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	461a      	mov	r2, r3
 800eea0:	f04f 0300 	mov.w	r3, #0
 800eea4:	f7f1 ff60 	bl	8000d68 <__aeabi_uldivmod>
 800eea8:	4602      	mov	r2, r0
 800eeaa:	460b      	mov	r3, r1
 800eeac:	4613      	mov	r3, r2
 800eeae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800eeb0:	4b0b      	ldr	r3, [pc, #44]	; (800eee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800eeb2:	685b      	ldr	r3, [r3, #4]
 800eeb4:	0c1b      	lsrs	r3, r3, #16
 800eeb6:	f003 0303 	and.w	r3, r3, #3
 800eeba:	3301      	adds	r3, #1
 800eebc:	005b      	lsls	r3, r3, #1
 800eebe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800eec0:	68fa      	ldr	r2, [r7, #12]
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	fbb2 f3f3 	udiv	r3, r2, r3
 800eec8:	60bb      	str	r3, [r7, #8]
      break;
 800eeca:	e002      	b.n	800eed2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800eecc:	4b05      	ldr	r3, [pc, #20]	; (800eee4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800eece:	60bb      	str	r3, [r7, #8]
      break;
 800eed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800eed2:	68bb      	ldr	r3, [r7, #8]
}
 800eed4:	4618      	mov	r0, r3
 800eed6:	3710      	adds	r7, #16
 800eed8:	46bd      	mov	sp, r7
 800eeda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800eede:	bf00      	nop
 800eee0:	40023800 	.word	0x40023800
 800eee4:	00f42400 	.word	0x00f42400

0800eee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800eee8:	b480      	push	{r7}
 800eeea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800eeec:	4b03      	ldr	r3, [pc, #12]	; (800eefc <HAL_RCC_GetHCLKFreq+0x14>)
 800eeee:	681b      	ldr	r3, [r3, #0]
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	46bd      	mov	sp, r7
 800eef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef8:	4770      	bx	lr
 800eefa:	bf00      	nop
 800eefc:	20000088 	.word	0x20000088

0800ef00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ef04:	f7ff fff0 	bl	800eee8 <HAL_RCC_GetHCLKFreq>
 800ef08:	4602      	mov	r2, r0
 800ef0a:	4b05      	ldr	r3, [pc, #20]	; (800ef20 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ef0c:	689b      	ldr	r3, [r3, #8]
 800ef0e:	0a9b      	lsrs	r3, r3, #10
 800ef10:	f003 0307 	and.w	r3, r3, #7
 800ef14:	4903      	ldr	r1, [pc, #12]	; (800ef24 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ef16:	5ccb      	ldrb	r3, [r1, r3]
 800ef18:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	bd80      	pop	{r7, pc}
 800ef20:	40023800 	.word	0x40023800
 800ef24:	08022a10 	.word	0x08022a10

0800ef28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ef2c:	f7ff ffdc 	bl	800eee8 <HAL_RCC_GetHCLKFreq>
 800ef30:	4602      	mov	r2, r0
 800ef32:	4b05      	ldr	r3, [pc, #20]	; (800ef48 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ef34:	689b      	ldr	r3, [r3, #8]
 800ef36:	0b5b      	lsrs	r3, r3, #13
 800ef38:	f003 0307 	and.w	r3, r3, #7
 800ef3c:	4903      	ldr	r1, [pc, #12]	; (800ef4c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ef3e:	5ccb      	ldrb	r3, [r1, r3]
 800ef40:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	bd80      	pop	{r7, pc}
 800ef48:	40023800 	.word	0x40023800
 800ef4c:	08022a10 	.word	0x08022a10

0800ef50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ef50:	b480      	push	{r7}
 800ef52:	b083      	sub	sp, #12
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
 800ef58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	220f      	movs	r2, #15
 800ef5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ef60:	4b12      	ldr	r3, [pc, #72]	; (800efac <HAL_RCC_GetClockConfig+0x5c>)
 800ef62:	689b      	ldr	r3, [r3, #8]
 800ef64:	f003 0203 	and.w	r2, r3, #3
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ef6c:	4b0f      	ldr	r3, [pc, #60]	; (800efac <HAL_RCC_GetClockConfig+0x5c>)
 800ef6e:	689b      	ldr	r3, [r3, #8]
 800ef70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ef78:	4b0c      	ldr	r3, [pc, #48]	; (800efac <HAL_RCC_GetClockConfig+0x5c>)
 800ef7a:	689b      	ldr	r3, [r3, #8]
 800ef7c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800ef84:	4b09      	ldr	r3, [pc, #36]	; (800efac <HAL_RCC_GetClockConfig+0x5c>)
 800ef86:	689b      	ldr	r3, [r3, #8]
 800ef88:	08db      	lsrs	r3, r3, #3
 800ef8a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ef92:	4b07      	ldr	r3, [pc, #28]	; (800efb0 <HAL_RCC_GetClockConfig+0x60>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	f003 020f 	and.w	r2, r3, #15
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	601a      	str	r2, [r3, #0]
}
 800ef9e:	bf00      	nop
 800efa0:	370c      	adds	r7, #12
 800efa2:	46bd      	mov	sp, r7
 800efa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa8:	4770      	bx	lr
 800efaa:	bf00      	nop
 800efac:	40023800 	.word	0x40023800
 800efb0:	40023c00 	.word	0x40023c00

0800efb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b086      	sub	sp, #24
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800efbc:	2300      	movs	r3, #0
 800efbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800efc0:	2300      	movs	r3, #0
 800efc2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	f003 0301 	and.w	r3, r3, #1
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d10b      	bne.n	800efe8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d105      	bne.n	800efe8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d075      	beq.n	800f0d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800efe8:	4bad      	ldr	r3, [pc, #692]	; (800f2a0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800efea:	2200      	movs	r2, #0
 800efec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800efee:	f7fd faa3 	bl	800c538 <HAL_GetTick>
 800eff2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800eff4:	e008      	b.n	800f008 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800eff6:	f7fd fa9f 	bl	800c538 <HAL_GetTick>
 800effa:	4602      	mov	r2, r0
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	1ad3      	subs	r3, r2, r3
 800f000:	2b02      	cmp	r3, #2
 800f002:	d901      	bls.n	800f008 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f004:	2303      	movs	r3, #3
 800f006:	e18b      	b.n	800f320 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800f008:	4ba6      	ldr	r3, [pc, #664]	; (800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f010:	2b00      	cmp	r3, #0
 800f012:	d1f0      	bne.n	800eff6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	f003 0301 	and.w	r3, r3, #1
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d009      	beq.n	800f034 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	685b      	ldr	r3, [r3, #4]
 800f024:	019a      	lsls	r2, r3, #6
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	689b      	ldr	r3, [r3, #8]
 800f02a:	071b      	lsls	r3, r3, #28
 800f02c:	499d      	ldr	r1, [pc, #628]	; (800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f02e:	4313      	orrs	r3, r2
 800f030:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	f003 0302 	and.w	r3, r3, #2
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d01f      	beq.n	800f080 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800f040:	4b98      	ldr	r3, [pc, #608]	; (800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f046:	0f1b      	lsrs	r3, r3, #28
 800f048:	f003 0307 	and.w	r3, r3, #7
 800f04c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	685b      	ldr	r3, [r3, #4]
 800f052:	019a      	lsls	r2, r3, #6
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	68db      	ldr	r3, [r3, #12]
 800f058:	061b      	lsls	r3, r3, #24
 800f05a:	431a      	orrs	r2, r3
 800f05c:	693b      	ldr	r3, [r7, #16]
 800f05e:	071b      	lsls	r3, r3, #28
 800f060:	4990      	ldr	r1, [pc, #576]	; (800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f062:	4313      	orrs	r3, r2
 800f064:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800f068:	4b8e      	ldr	r3, [pc, #568]	; (800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f06a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f06e:	f023 021f 	bic.w	r2, r3, #31
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	69db      	ldr	r3, [r3, #28]
 800f076:	3b01      	subs	r3, #1
 800f078:	498a      	ldr	r1, [pc, #552]	; (800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f07a:	4313      	orrs	r3, r2
 800f07c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d00d      	beq.n	800f0a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	685b      	ldr	r3, [r3, #4]
 800f090:	019a      	lsls	r2, r3, #6
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	68db      	ldr	r3, [r3, #12]
 800f096:	061b      	lsls	r3, r3, #24
 800f098:	431a      	orrs	r2, r3
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	689b      	ldr	r3, [r3, #8]
 800f09e:	071b      	lsls	r3, r3, #28
 800f0a0:	4980      	ldr	r1, [pc, #512]	; (800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f0a2:	4313      	orrs	r3, r2
 800f0a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800f0a8:	4b7d      	ldr	r3, [pc, #500]	; (800f2a0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800f0aa:	2201      	movs	r2, #1
 800f0ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800f0ae:	f7fd fa43 	bl	800c538 <HAL_GetTick>
 800f0b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800f0b4:	e008      	b.n	800f0c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800f0b6:	f7fd fa3f 	bl	800c538 <HAL_GetTick>
 800f0ba:	4602      	mov	r2, r0
 800f0bc:	697b      	ldr	r3, [r7, #20]
 800f0be:	1ad3      	subs	r3, r2, r3
 800f0c0:	2b02      	cmp	r3, #2
 800f0c2:	d901      	bls.n	800f0c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f0c4:	2303      	movs	r3, #3
 800f0c6:	e12b      	b.n	800f320 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800f0c8:	4b76      	ldr	r3, [pc, #472]	; (800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d0f0      	beq.n	800f0b6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	f003 0304 	and.w	r3, r3, #4
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d105      	bne.n	800f0ec <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d079      	beq.n	800f1e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800f0ec:	4b6e      	ldr	r3, [pc, #440]	; (800f2a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800f0f2:	f7fd fa21 	bl	800c538 <HAL_GetTick>
 800f0f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800f0f8:	e008      	b.n	800f10c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800f0fa:	f7fd fa1d 	bl	800c538 <HAL_GetTick>
 800f0fe:	4602      	mov	r2, r0
 800f100:	697b      	ldr	r3, [r7, #20]
 800f102:	1ad3      	subs	r3, r2, r3
 800f104:	2b02      	cmp	r3, #2
 800f106:	d901      	bls.n	800f10c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f108:	2303      	movs	r3, #3
 800f10a:	e109      	b.n	800f320 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800f10c:	4b65      	ldr	r3, [pc, #404]	; (800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f118:	d0ef      	beq.n	800f0fa <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	f003 0304 	and.w	r3, r3, #4
 800f122:	2b00      	cmp	r3, #0
 800f124:	d020      	beq.n	800f168 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800f126:	4b5f      	ldr	r3, [pc, #380]	; (800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f12c:	0f1b      	lsrs	r3, r3, #28
 800f12e:	f003 0307 	and.w	r3, r3, #7
 800f132:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	691b      	ldr	r3, [r3, #16]
 800f138:	019a      	lsls	r2, r3, #6
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	695b      	ldr	r3, [r3, #20]
 800f13e:	061b      	lsls	r3, r3, #24
 800f140:	431a      	orrs	r2, r3
 800f142:	693b      	ldr	r3, [r7, #16]
 800f144:	071b      	lsls	r3, r3, #28
 800f146:	4957      	ldr	r1, [pc, #348]	; (800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f148:	4313      	orrs	r3, r2
 800f14a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800f14e:	4b55      	ldr	r3, [pc, #340]	; (800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f154:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	6a1b      	ldr	r3, [r3, #32]
 800f15c:	3b01      	subs	r3, #1
 800f15e:	021b      	lsls	r3, r3, #8
 800f160:	4950      	ldr	r1, [pc, #320]	; (800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f162:	4313      	orrs	r3, r2
 800f164:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	f003 0308 	and.w	r3, r3, #8
 800f170:	2b00      	cmp	r3, #0
 800f172:	d01e      	beq.n	800f1b2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800f174:	4b4b      	ldr	r3, [pc, #300]	; (800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f17a:	0e1b      	lsrs	r3, r3, #24
 800f17c:	f003 030f 	and.w	r3, r3, #15
 800f180:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	691b      	ldr	r3, [r3, #16]
 800f186:	019a      	lsls	r2, r3, #6
 800f188:	693b      	ldr	r3, [r7, #16]
 800f18a:	061b      	lsls	r3, r3, #24
 800f18c:	431a      	orrs	r2, r3
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	699b      	ldr	r3, [r3, #24]
 800f192:	071b      	lsls	r3, r3, #28
 800f194:	4943      	ldr	r1, [pc, #268]	; (800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f196:	4313      	orrs	r3, r2
 800f198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800f19c:	4b41      	ldr	r3, [pc, #260]	; (800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f19e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f1a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1aa:	493e      	ldr	r1, [pc, #248]	; (800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f1ac:	4313      	orrs	r3, r2
 800f1ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800f1b2:	4b3d      	ldr	r3, [pc, #244]	; (800f2a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f1b4:	2201      	movs	r2, #1
 800f1b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800f1b8:	f7fd f9be 	bl	800c538 <HAL_GetTick>
 800f1bc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800f1be:	e008      	b.n	800f1d2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800f1c0:	f7fd f9ba 	bl	800c538 <HAL_GetTick>
 800f1c4:	4602      	mov	r2, r0
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	1ad3      	subs	r3, r2, r3
 800f1ca:	2b02      	cmp	r3, #2
 800f1cc:	d901      	bls.n	800f1d2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f1ce:	2303      	movs	r3, #3
 800f1d0:	e0a6      	b.n	800f320 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800f1d2:	4b34      	ldr	r3, [pc, #208]	; (800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f1da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f1de:	d1ef      	bne.n	800f1c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	f003 0320 	and.w	r3, r3, #32
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	f000 808d 	beq.w	800f308 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	60fb      	str	r3, [r7, #12]
 800f1f2:	4b2c      	ldr	r3, [pc, #176]	; (800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1f6:	4a2b      	ldr	r2, [pc, #172]	; (800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f1f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f1fc:	6413      	str	r3, [r2, #64]	; 0x40
 800f1fe:	4b29      	ldr	r3, [pc, #164]	; (800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f206:	60fb      	str	r3, [r7, #12]
 800f208:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800f20a:	4b28      	ldr	r3, [pc, #160]	; (800f2ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	4a27      	ldr	r2, [pc, #156]	; (800f2ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800f210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f214:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800f216:	f7fd f98f 	bl	800c538 <HAL_GetTick>
 800f21a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800f21c:	e008      	b.n	800f230 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800f21e:	f7fd f98b 	bl	800c538 <HAL_GetTick>
 800f222:	4602      	mov	r2, r0
 800f224:	697b      	ldr	r3, [r7, #20]
 800f226:	1ad3      	subs	r3, r2, r3
 800f228:	2b02      	cmp	r3, #2
 800f22a:	d901      	bls.n	800f230 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800f22c:	2303      	movs	r3, #3
 800f22e:	e077      	b.n	800f320 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800f230:	4b1e      	ldr	r3, [pc, #120]	; (800f2ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d0f0      	beq.n	800f21e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800f23c:	4b19      	ldr	r3, [pc, #100]	; (800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f23e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f244:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800f246:	693b      	ldr	r3, [r7, #16]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d039      	beq.n	800f2c0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f254:	693a      	ldr	r2, [r7, #16]
 800f256:	429a      	cmp	r2, r3
 800f258:	d032      	beq.n	800f2c0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f25a:	4b12      	ldr	r3, [pc, #72]	; (800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f25c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f25e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f262:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800f264:	4b12      	ldr	r3, [pc, #72]	; (800f2b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800f266:	2201      	movs	r2, #1
 800f268:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f26a:	4b11      	ldr	r3, [pc, #68]	; (800f2b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800f26c:	2200      	movs	r2, #0
 800f26e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800f270:	4a0c      	ldr	r2, [pc, #48]	; (800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f272:	693b      	ldr	r3, [r7, #16]
 800f274:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800f276:	4b0b      	ldr	r3, [pc, #44]	; (800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f27a:	f003 0301 	and.w	r3, r3, #1
 800f27e:	2b01      	cmp	r3, #1
 800f280:	d11e      	bne.n	800f2c0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800f282:	f7fd f959 	bl	800c538 <HAL_GetTick>
 800f286:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f288:	e014      	b.n	800f2b4 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f28a:	f7fd f955 	bl	800c538 <HAL_GetTick>
 800f28e:	4602      	mov	r2, r0
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	1ad3      	subs	r3, r2, r3
 800f294:	f241 3288 	movw	r2, #5000	; 0x1388
 800f298:	4293      	cmp	r3, r2
 800f29a:	d90b      	bls.n	800f2b4 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800f29c:	2303      	movs	r3, #3
 800f29e:	e03f      	b.n	800f320 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800f2a0:	42470068 	.word	0x42470068
 800f2a4:	40023800 	.word	0x40023800
 800f2a8:	42470070 	.word	0x42470070
 800f2ac:	40007000 	.word	0x40007000
 800f2b0:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f2b4:	4b1c      	ldr	r3, [pc, #112]	; (800f328 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800f2b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2b8:	f003 0302 	and.w	r3, r3, #2
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d0e4      	beq.n	800f28a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f2c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f2cc:	d10d      	bne.n	800f2ea <HAL_RCCEx_PeriphCLKConfig+0x336>
 800f2ce:	4b16      	ldr	r3, [pc, #88]	; (800f328 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800f2d0:	689b      	ldr	r3, [r3, #8]
 800f2d2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f2de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f2e2:	4911      	ldr	r1, [pc, #68]	; (800f328 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800f2e4:	4313      	orrs	r3, r2
 800f2e6:	608b      	str	r3, [r1, #8]
 800f2e8:	e005      	b.n	800f2f6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800f2ea:	4b0f      	ldr	r3, [pc, #60]	; (800f328 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800f2ec:	689b      	ldr	r3, [r3, #8]
 800f2ee:	4a0e      	ldr	r2, [pc, #56]	; (800f328 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800f2f0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800f2f4:	6093      	str	r3, [r2, #8]
 800f2f6:	4b0c      	ldr	r3, [pc, #48]	; (800f328 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800f2f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f302:	4909      	ldr	r1, [pc, #36]	; (800f328 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800f304:	4313      	orrs	r3, r2
 800f306:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	f003 0310 	and.w	r3, r3, #16
 800f310:	2b00      	cmp	r3, #0
 800f312:	d004      	beq.n	800f31e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800f31a:	4b04      	ldr	r3, [pc, #16]	; (800f32c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800f31c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800f31e:	2300      	movs	r3, #0
}
 800f320:	4618      	mov	r0, r3
 800f322:	3718      	adds	r7, #24
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}
 800f328:	40023800 	.word	0x40023800
 800f32c:	424711e0 	.word	0x424711e0

0800f330 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b082      	sub	sp, #8
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d101      	bne.n	800f342 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800f33e:	2301      	movs	r3, #1
 800f340:	e083      	b.n	800f44a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	7f5b      	ldrb	r3, [r3, #29]
 800f346:	b2db      	uxtb	r3, r3
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d105      	bne.n	800f358 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2200      	movs	r2, #0
 800f350:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f7f3 fce2 	bl	8002d1c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2202      	movs	r2, #2
 800f35c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	22ca      	movs	r2, #202	; 0xca
 800f364:	625a      	str	r2, [r3, #36]	; 0x24
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	2253      	movs	r2, #83	; 0x53
 800f36c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f000 fc26 	bl	800fbc0 <RTC_EnterInitMode>
 800f374:	4603      	mov	r3, r0
 800f376:	2b00      	cmp	r3, #0
 800f378:	d008      	beq.n	800f38c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	22ff      	movs	r2, #255	; 0xff
 800f380:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2204      	movs	r2, #4
 800f386:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800f388:	2301      	movs	r3, #1
 800f38a:	e05e      	b.n	800f44a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	689b      	ldr	r3, [r3, #8]
 800f392:	687a      	ldr	r2, [r7, #4]
 800f394:	6812      	ldr	r2, [r2, #0]
 800f396:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f39a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f39e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	6899      	ldr	r1, [r3, #8]
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	685a      	ldr	r2, [r3, #4]
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	691b      	ldr	r3, [r3, #16]
 800f3ae:	431a      	orrs	r2, r3
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	695b      	ldr	r3, [r3, #20]
 800f3b4:	431a      	orrs	r2, r3
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	430a      	orrs	r2, r1
 800f3bc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	687a      	ldr	r2, [r7, #4]
 800f3c4:	68d2      	ldr	r2, [r2, #12]
 800f3c6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	6919      	ldr	r1, [r3, #16]
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	689b      	ldr	r3, [r3, #8]
 800f3d2:	041a      	lsls	r2, r3, #16
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	430a      	orrs	r2, r1
 800f3da:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	68da      	ldr	r2, [r3, #12]
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f3ea:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	689b      	ldr	r3, [r3, #8]
 800f3f2:	f003 0320 	and.w	r3, r3, #32
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d10e      	bne.n	800f418 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f000 fbb8 	bl	800fb70 <HAL_RTC_WaitForSynchro>
 800f400:	4603      	mov	r3, r0
 800f402:	2b00      	cmp	r3, #0
 800f404:	d008      	beq.n	800f418 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	22ff      	movs	r2, #255	; 0xff
 800f40c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2204      	movs	r2, #4
 800f412:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800f414:	2301      	movs	r3, #1
 800f416:	e018      	b.n	800f44a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f426:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	699a      	ldr	r2, [r3, #24]
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	430a      	orrs	r2, r1
 800f438:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	22ff      	movs	r2, #255	; 0xff
 800f440:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	2201      	movs	r2, #1
 800f446:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800f448:	2300      	movs	r3, #0
  }
}
 800f44a:	4618      	mov	r0, r3
 800f44c:	3708      	adds	r7, #8
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd80      	pop	{r7, pc}

0800f452 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f452:	b590      	push	{r4, r7, lr}
 800f454:	b087      	sub	sp, #28
 800f456:	af00      	add	r7, sp, #0
 800f458:	60f8      	str	r0, [r7, #12]
 800f45a:	60b9      	str	r1, [r7, #8]
 800f45c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800f45e:	2300      	movs	r3, #0
 800f460:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	7f1b      	ldrb	r3, [r3, #28]
 800f466:	2b01      	cmp	r3, #1
 800f468:	d101      	bne.n	800f46e <HAL_RTC_SetTime+0x1c>
 800f46a:	2302      	movs	r3, #2
 800f46c:	e0aa      	b.n	800f5c4 <HAL_RTC_SetTime+0x172>
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	2201      	movs	r2, #1
 800f472:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	2202      	movs	r2, #2
 800f478:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d126      	bne.n	800f4ce <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	689b      	ldr	r3, [r3, #8]
 800f486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d102      	bne.n	800f494 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	2200      	movs	r2, #0
 800f492:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	4618      	mov	r0, r3
 800f49a:	f000 fbbd 	bl	800fc18 <RTC_ByteToBcd2>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	785b      	ldrb	r3, [r3, #1]
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f000 fbb6 	bl	800fc18 <RTC_ByteToBcd2>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800f4b0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	789b      	ldrb	r3, [r3, #2]
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f000 fbae 	bl	800fc18 <RTC_ByteToBcd2>
 800f4bc:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800f4be:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	78db      	ldrb	r3, [r3, #3]
 800f4c6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800f4c8:	4313      	orrs	r3, r2
 800f4ca:	617b      	str	r3, [r7, #20]
 800f4cc:	e018      	b.n	800f500 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	689b      	ldr	r3, [r3, #8]
 800f4d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d102      	bne.n	800f4e2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	2200      	movs	r2, #0
 800f4e0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	781b      	ldrb	r3, [r3, #0]
 800f4e6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	785b      	ldrb	r3, [r3, #1]
 800f4ec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800f4ee:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800f4f0:	68ba      	ldr	r2, [r7, #8]
 800f4f2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800f4f4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	78db      	ldrb	r3, [r3, #3]
 800f4fa:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800f4fc:	4313      	orrs	r3, r2
 800f4fe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	22ca      	movs	r2, #202	; 0xca
 800f506:	625a      	str	r2, [r3, #36]	; 0x24
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	2253      	movs	r2, #83	; 0x53
 800f50e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800f510:	68f8      	ldr	r0, [r7, #12]
 800f512:	f000 fb55 	bl	800fbc0 <RTC_EnterInitMode>
 800f516:	4603      	mov	r3, r0
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d00b      	beq.n	800f534 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	22ff      	movs	r2, #255	; 0xff
 800f522:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	2204      	movs	r2, #4
 800f528:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	2200      	movs	r2, #0
 800f52e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800f530:	2301      	movs	r3, #1
 800f532:	e047      	b.n	800f5c4 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	681a      	ldr	r2, [r3, #0]
 800f538:	697b      	ldr	r3, [r7, #20]
 800f53a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800f53e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800f542:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	689a      	ldr	r2, [r3, #8]
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f552:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	6899      	ldr	r1, [r3, #8]
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	68da      	ldr	r2, [r3, #12]
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	691b      	ldr	r3, [r3, #16]
 800f562:	431a      	orrs	r2, r3
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	430a      	orrs	r2, r1
 800f56a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	68da      	ldr	r2, [r3, #12]
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f57a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	689b      	ldr	r3, [r3, #8]
 800f582:	f003 0320 	and.w	r3, r3, #32
 800f586:	2b00      	cmp	r3, #0
 800f588:	d111      	bne.n	800f5ae <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f58a:	68f8      	ldr	r0, [r7, #12]
 800f58c:	f000 faf0 	bl	800fb70 <HAL_RTC_WaitForSynchro>
 800f590:	4603      	mov	r3, r0
 800f592:	2b00      	cmp	r3, #0
 800f594:	d00b      	beq.n	800f5ae <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	22ff      	movs	r2, #255	; 0xff
 800f59c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	2204      	movs	r2, #4
 800f5a2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	e00a      	b.n	800f5c4 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	22ff      	movs	r2, #255	; 0xff
 800f5b4:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	2201      	movs	r2, #1
 800f5ba:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	2200      	movs	r2, #0
 800f5c0:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800f5c2:	2300      	movs	r3, #0
  }
}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	371c      	adds	r7, #28
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd90      	pop	{r4, r7, pc}

0800f5cc <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b086      	sub	sp, #24
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	60f8      	str	r0, [r7, #12]
 800f5d4:	60b9      	str	r1, [r7, #8]
 800f5d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800f5d8:	2300      	movs	r3, #0
 800f5da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	691b      	ldr	r3, [r3, #16]
 800f5ec:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800f5fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800f602:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	0c1b      	lsrs	r3, r3, #16
 800f608:	b2db      	uxtb	r3, r3
 800f60a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f60e:	b2da      	uxtb	r2, r3
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800f614:	697b      	ldr	r3, [r7, #20]
 800f616:	0a1b      	lsrs	r3, r3, #8
 800f618:	b2db      	uxtb	r3, r3
 800f61a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f61e:	b2da      	uxtb	r2, r3
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	b2db      	uxtb	r3, r3
 800f628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f62c:	b2da      	uxtb	r2, r3
 800f62e:	68bb      	ldr	r3, [r7, #8]
 800f630:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	0c1b      	lsrs	r3, r3, #16
 800f636:	b2db      	uxtb	r3, r3
 800f638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f63c:	b2da      	uxtb	r2, r3
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d11a      	bne.n	800f67e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	781b      	ldrb	r3, [r3, #0]
 800f64c:	4618      	mov	r0, r3
 800f64e:	f000 fb01 	bl	800fc54 <RTC_Bcd2ToByte>
 800f652:	4603      	mov	r3, r0
 800f654:	461a      	mov	r2, r3
 800f656:	68bb      	ldr	r3, [r7, #8]
 800f658:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800f65a:	68bb      	ldr	r3, [r7, #8]
 800f65c:	785b      	ldrb	r3, [r3, #1]
 800f65e:	4618      	mov	r0, r3
 800f660:	f000 faf8 	bl	800fc54 <RTC_Bcd2ToByte>
 800f664:	4603      	mov	r3, r0
 800f666:	461a      	mov	r2, r3
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	789b      	ldrb	r3, [r3, #2]
 800f670:	4618      	mov	r0, r3
 800f672:	f000 faef 	bl	800fc54 <RTC_Bcd2ToByte>
 800f676:	4603      	mov	r3, r0
 800f678:	461a      	mov	r2, r3
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800f67e:	2300      	movs	r3, #0
}
 800f680:	4618      	mov	r0, r3
 800f682:	3718      	adds	r7, #24
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}

0800f688 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800f688:	b590      	push	{r4, r7, lr}
 800f68a:	b087      	sub	sp, #28
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	60f8      	str	r0, [r7, #12]
 800f690:	60b9      	str	r1, [r7, #8]
 800f692:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800f694:	2300      	movs	r3, #0
 800f696:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	7f1b      	ldrb	r3, [r3, #28]
 800f69c:	2b01      	cmp	r3, #1
 800f69e:	d101      	bne.n	800f6a4 <HAL_RTC_SetDate+0x1c>
 800f6a0:	2302      	movs	r3, #2
 800f6a2:	e094      	b.n	800f7ce <HAL_RTC_SetDate+0x146>
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	2201      	movs	r2, #1
 800f6a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	2202      	movs	r2, #2
 800f6ae:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d10e      	bne.n	800f6d4 <HAL_RTC_SetDate+0x4c>
 800f6b6:	68bb      	ldr	r3, [r7, #8]
 800f6b8:	785b      	ldrb	r3, [r3, #1]
 800f6ba:	f003 0310 	and.w	r3, r3, #16
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d008      	beq.n	800f6d4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	785b      	ldrb	r3, [r3, #1]
 800f6c6:	f023 0310 	bic.w	r3, r3, #16
 800f6ca:	b2db      	uxtb	r3, r3
 800f6cc:	330a      	adds	r3, #10
 800f6ce:	b2da      	uxtb	r2, r3
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d11c      	bne.n	800f714 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	78db      	ldrb	r3, [r3, #3]
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f000 fa9a 	bl	800fc18 <RTC_ByteToBcd2>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	785b      	ldrb	r3, [r3, #1]
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f000 fa93 	bl	800fc18 <RTC_ByteToBcd2>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800f6f6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	789b      	ldrb	r3, [r3, #2]
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f000 fa8b 	bl	800fc18 <RTC_ByteToBcd2>
 800f702:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800f704:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	781b      	ldrb	r3, [r3, #0]
 800f70c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800f70e:	4313      	orrs	r3, r2
 800f710:	617b      	str	r3, [r7, #20]
 800f712:	e00e      	b.n	800f732 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	78db      	ldrb	r3, [r3, #3]
 800f718:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	785b      	ldrb	r3, [r3, #1]
 800f71e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800f720:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800f722:	68ba      	ldr	r2, [r7, #8]
 800f724:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800f726:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800f728:	68bb      	ldr	r3, [r7, #8]
 800f72a:	781b      	ldrb	r3, [r3, #0]
 800f72c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800f72e:	4313      	orrs	r3, r2
 800f730:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	22ca      	movs	r2, #202	; 0xca
 800f738:	625a      	str	r2, [r3, #36]	; 0x24
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	2253      	movs	r2, #83	; 0x53
 800f740:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800f742:	68f8      	ldr	r0, [r7, #12]
 800f744:	f000 fa3c 	bl	800fbc0 <RTC_EnterInitMode>
 800f748:	4603      	mov	r3, r0
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d00b      	beq.n	800f766 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	22ff      	movs	r2, #255	; 0xff
 800f754:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	2204      	movs	r2, #4
 800f75a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	2200      	movs	r2, #0
 800f760:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800f762:	2301      	movs	r3, #1
 800f764:	e033      	b.n	800f7ce <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	681a      	ldr	r2, [r3, #0]
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f770:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f774:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	68da      	ldr	r2, [r3, #12]
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f784:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	689b      	ldr	r3, [r3, #8]
 800f78c:	f003 0320 	and.w	r3, r3, #32
 800f790:	2b00      	cmp	r3, #0
 800f792:	d111      	bne.n	800f7b8 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f794:	68f8      	ldr	r0, [r7, #12]
 800f796:	f000 f9eb 	bl	800fb70 <HAL_RTC_WaitForSynchro>
 800f79a:	4603      	mov	r3, r0
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d00b      	beq.n	800f7b8 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	22ff      	movs	r2, #255	; 0xff
 800f7a6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	2204      	movs	r2, #4
 800f7ac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	e00a      	b.n	800f7ce <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	22ff      	movs	r2, #255	; 0xff
 800f7be:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	2201      	movs	r2, #1
 800f7c4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800f7cc:	2300      	movs	r3, #0
  }
}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	371c      	adds	r7, #28
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd90      	pop	{r4, r7, pc}

0800f7d6 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800f7d6:	b580      	push	{r7, lr}
 800f7d8:	b086      	sub	sp, #24
 800f7da:	af00      	add	r7, sp, #0
 800f7dc:	60f8      	str	r0, [r7, #12]
 800f7de:	60b9      	str	r1, [r7, #8]
 800f7e0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	685b      	ldr	r3, [r3, #4]
 800f7ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f7f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f7f4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	0c1b      	lsrs	r3, r3, #16
 800f7fa:	b2da      	uxtb	r2, r3
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	0a1b      	lsrs	r3, r3, #8
 800f804:	b2db      	uxtb	r3, r3
 800f806:	f003 031f 	and.w	r3, r3, #31
 800f80a:	b2da      	uxtb	r2, r3
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	b2db      	uxtb	r3, r3
 800f814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f818:	b2da      	uxtb	r2, r3
 800f81a:	68bb      	ldr	r3, [r7, #8]
 800f81c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	0b5b      	lsrs	r3, r3, #13
 800f822:	b2db      	uxtb	r3, r3
 800f824:	f003 0307 	and.w	r3, r3, #7
 800f828:	b2da      	uxtb	r2, r3
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d11a      	bne.n	800f86a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	78db      	ldrb	r3, [r3, #3]
 800f838:	4618      	mov	r0, r3
 800f83a:	f000 fa0b 	bl	800fc54 <RTC_Bcd2ToByte>
 800f83e:	4603      	mov	r3, r0
 800f840:	461a      	mov	r2, r3
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	785b      	ldrb	r3, [r3, #1]
 800f84a:	4618      	mov	r0, r3
 800f84c:	f000 fa02 	bl	800fc54 <RTC_Bcd2ToByte>
 800f850:	4603      	mov	r3, r0
 800f852:	461a      	mov	r2, r3
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	789b      	ldrb	r3, [r3, #2]
 800f85c:	4618      	mov	r0, r3
 800f85e:	f000 f9f9 	bl	800fc54 <RTC_Bcd2ToByte>
 800f862:	4603      	mov	r3, r0
 800f864:	461a      	mov	r2, r3
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800f86a:	2300      	movs	r3, #0
}
 800f86c:	4618      	mov	r0, r3
 800f86e:	3718      	adds	r7, #24
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}

0800f874 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800f874:	b590      	push	{r4, r7, lr}
 800f876:	b089      	sub	sp, #36	; 0x24
 800f878:	af00      	add	r7, sp, #0
 800f87a:	60f8      	str	r0, [r7, #12]
 800f87c:	60b9      	str	r1, [r7, #8]
 800f87e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800f880:	2300      	movs	r3, #0
 800f882:	61fb      	str	r3, [r7, #28]
 800f884:	2300      	movs	r3, #0
 800f886:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800f888:	4b93      	ldr	r3, [pc, #588]	; (800fad8 <HAL_RTC_SetAlarm_IT+0x264>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	4a93      	ldr	r2, [pc, #588]	; (800fadc <HAL_RTC_SetAlarm_IT+0x268>)
 800f88e:	fba2 2303 	umull	r2, r3, r2, r3
 800f892:	0adb      	lsrs	r3, r3, #11
 800f894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f898:	fb02 f303 	mul.w	r3, r2, r3
 800f89c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	7f1b      	ldrb	r3, [r3, #28]
 800f8a2:	2b01      	cmp	r3, #1
 800f8a4:	d101      	bne.n	800f8aa <HAL_RTC_SetAlarm_IT+0x36>
 800f8a6:	2302      	movs	r3, #2
 800f8a8:	e111      	b.n	800face <HAL_RTC_SetAlarm_IT+0x25a>
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	2201      	movs	r2, #1
 800f8ae:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	2202      	movs	r2, #2
 800f8b4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d137      	bne.n	800f92c <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	689b      	ldr	r3, [r3, #8]
 800f8c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d102      	bne.n	800f8d0 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800f8ca:	68bb      	ldr	r3, [r7, #8]
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	781b      	ldrb	r3, [r3, #0]
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f000 f99f 	bl	800fc18 <RTC_ByteToBcd2>
 800f8da:	4603      	mov	r3, r0
 800f8dc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	785b      	ldrb	r3, [r3, #1]
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f000 f998 	bl	800fc18 <RTC_ByteToBcd2>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800f8ec:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800f8ee:	68bb      	ldr	r3, [r7, #8]
 800f8f0:	789b      	ldrb	r3, [r3, #2]
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f000 f990 	bl	800fc18 <RTC_ByteToBcd2>
 800f8f8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800f8fa:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	78db      	ldrb	r3, [r3, #3]
 800f902:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800f904:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800f908:	68bb      	ldr	r3, [r7, #8]
 800f90a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f90e:	4618      	mov	r0, r3
 800f910:	f000 f982 	bl	800fc18 <RTC_ByteToBcd2>
 800f914:	4603      	mov	r3, r0
 800f916:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800f918:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800f920:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800f926:	4313      	orrs	r3, r2
 800f928:	61fb      	str	r3, [r7, #28]
 800f92a:	e023      	b.n	800f974 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	689b      	ldr	r3, [r3, #8]
 800f932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f936:	2b00      	cmp	r3, #0
 800f938:	d102      	bne.n	800f940 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	2200      	movs	r2, #0
 800f93e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	785b      	ldrb	r3, [r3, #1]
 800f94a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800f94c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800f94e:	68ba      	ldr	r2, [r7, #8]
 800f950:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800f952:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800f954:	68bb      	ldr	r3, [r7, #8]
 800f956:	78db      	ldrb	r3, [r3, #3]
 800f958:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800f95a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f962:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800f964:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800f96a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800f970:	4313      	orrs	r3, r2
 800f972:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800f974:	68bb      	ldr	r3, [r7, #8]
 800f976:	685a      	ldr	r2, [r3, #4]
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	699b      	ldr	r3, [r3, #24]
 800f97c:	4313      	orrs	r3, r2
 800f97e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	22ca      	movs	r2, #202	; 0xca
 800f986:	625a      	str	r2, [r3, #36]	; 0x24
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	2253      	movs	r2, #83	; 0x53
 800f98e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800f990:	68bb      	ldr	r3, [r7, #8]
 800f992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f998:	d141      	bne.n	800fa1e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	689a      	ldr	r2, [r3, #8]
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f9a8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	68db      	ldr	r3, [r3, #12]
 800f9b0:	b2da      	uxtb	r2, r3
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800f9ba:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	1e5a      	subs	r2, r3, #1
 800f9c0:	617a      	str	r2, [r7, #20]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d10b      	bne.n	800f9de <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	22ff      	movs	r2, #255	; 0xff
 800f9cc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	2203      	movs	r2, #3
 800f9d2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800f9da:	2303      	movs	r3, #3
 800f9dc:	e077      	b.n	800face <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	68db      	ldr	r3, [r3, #12]
 800f9e4:	f003 0301 	and.w	r3, r3, #1
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d0e7      	beq.n	800f9bc <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	69fa      	ldr	r2, [r7, #28]
 800f9f2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	69ba      	ldr	r2, [r7, #24]
 800f9fa:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	689a      	ldr	r2, [r3, #8]
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fa0a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	689a      	ldr	r2, [r3, #8]
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fa1a:	609a      	str	r2, [r3, #8]
 800fa1c:	e040      	b.n	800faa0 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	689a      	ldr	r2, [r3, #8]
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800fa2c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	68db      	ldr	r3, [r3, #12]
 800fa34:	b2da      	uxtb	r2, r3
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800fa3e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800fa40:	697b      	ldr	r3, [r7, #20]
 800fa42:	1e5a      	subs	r2, r3, #1
 800fa44:	617a      	str	r2, [r7, #20]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d10b      	bne.n	800fa62 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	22ff      	movs	r2, #255	; 0xff
 800fa50:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	2203      	movs	r2, #3
 800fa56:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800fa5e:	2303      	movs	r3, #3
 800fa60:	e035      	b.n	800face <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	68db      	ldr	r3, [r3, #12]
 800fa68:	f003 0302 	and.w	r3, r3, #2
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d0e7      	beq.n	800fa40 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	69fa      	ldr	r2, [r7, #28]
 800fa76:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	69ba      	ldr	r2, [r7, #24]
 800fa7e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	689a      	ldr	r2, [r3, #8]
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fa8e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	689a      	ldr	r2, [r3, #8]
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fa9e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800faa0:	4b0f      	ldr	r3, [pc, #60]	; (800fae0 <HAL_RTC_SetAlarm_IT+0x26c>)
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	4a0e      	ldr	r2, [pc, #56]	; (800fae0 <HAL_RTC_SetAlarm_IT+0x26c>)
 800faa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800faaa:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800faac:	4b0c      	ldr	r3, [pc, #48]	; (800fae0 <HAL_RTC_SetAlarm_IT+0x26c>)
 800faae:	689b      	ldr	r3, [r3, #8]
 800fab0:	4a0b      	ldr	r2, [pc, #44]	; (800fae0 <HAL_RTC_SetAlarm_IT+0x26c>)
 800fab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fab6:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	22ff      	movs	r2, #255	; 0xff
 800fabe:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	2201      	movs	r2, #1
 800fac4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	2200      	movs	r2, #0
 800faca:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800facc:	2300      	movs	r3, #0
}
 800face:	4618      	mov	r0, r3
 800fad0:	3724      	adds	r7, #36	; 0x24
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd90      	pop	{r4, r7, pc}
 800fad6:	bf00      	nop
 800fad8:	20000088 	.word	0x20000088
 800fadc:	10624dd3 	.word	0x10624dd3
 800fae0:	40013c00 	.word	0x40013c00

0800fae4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b082      	sub	sp, #8
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	689b      	ldr	r3, [r3, #8]
 800faf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d012      	beq.n	800fb20 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	68db      	ldr	r3, [r3, #12]
 800fb00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d00b      	beq.n	800fb20 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f7f3 fe43 	bl	8003794 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	68db      	ldr	r3, [r3, #12]
 800fb14:	b2da      	uxtb	r2, r3
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800fb1e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	689b      	ldr	r3, [r3, #8]
 800fb26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d012      	beq.n	800fb54 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	68db      	ldr	r3, [r3, #12]
 800fb34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d00b      	beq.n	800fb54 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f7f3 fe3b 	bl	80037b8 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	68db      	ldr	r3, [r3, #12]
 800fb48:	b2da      	uxtb	r2, r3
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	f462 7220 	orn	r2, r2, #640	; 0x280
 800fb52:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800fb54:	4b05      	ldr	r3, [pc, #20]	; (800fb6c <HAL_RTC_AlarmIRQHandler+0x88>)
 800fb56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fb5a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2201      	movs	r2, #1
 800fb60:	775a      	strb	r2, [r3, #29]
}
 800fb62:	bf00      	nop
 800fb64:	3708      	adds	r7, #8
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}
 800fb6a:	bf00      	nop
 800fb6c:	40013c00 	.word	0x40013c00

0800fb70 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b084      	sub	sp, #16
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800fb78:	2300      	movs	r3, #0
 800fb7a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	68da      	ldr	r2, [r3, #12]
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800fb8a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800fb8c:	f7fc fcd4 	bl	800c538 <HAL_GetTick>
 800fb90:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800fb92:	e009      	b.n	800fba8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800fb94:	f7fc fcd0 	bl	800c538 <HAL_GetTick>
 800fb98:	4602      	mov	r2, r0
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	1ad3      	subs	r3, r2, r3
 800fb9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fba2:	d901      	bls.n	800fba8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800fba4:	2303      	movs	r3, #3
 800fba6:	e007      	b.n	800fbb8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	68db      	ldr	r3, [r3, #12]
 800fbae:	f003 0320 	and.w	r3, r3, #32
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d0ee      	beq.n	800fb94 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800fbb6:	2300      	movs	r3, #0
}
 800fbb8:	4618      	mov	r0, r3
 800fbba:	3710      	adds	r7, #16
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}

0800fbc0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b084      	sub	sp, #16
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800fbc8:	2300      	movs	r3, #0
 800fbca:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	68db      	ldr	r3, [r3, #12]
 800fbd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d119      	bne.n	800fc0e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	f04f 32ff 	mov.w	r2, #4294967295
 800fbe2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800fbe4:	f7fc fca8 	bl	800c538 <HAL_GetTick>
 800fbe8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800fbea:	e009      	b.n	800fc00 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800fbec:	f7fc fca4 	bl	800c538 <HAL_GetTick>
 800fbf0:	4602      	mov	r2, r0
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	1ad3      	subs	r3, r2, r3
 800fbf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fbfa:	d901      	bls.n	800fc00 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800fbfc:	2303      	movs	r3, #3
 800fbfe:	e007      	b.n	800fc10 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	68db      	ldr	r3, [r3, #12]
 800fc06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d0ee      	beq.n	800fbec <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800fc0e:	2300      	movs	r3, #0
}
 800fc10:	4618      	mov	r0, r3
 800fc12:	3710      	adds	r7, #16
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd80      	pop	{r7, pc}

0800fc18 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b085      	sub	sp, #20
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	4603      	mov	r3, r0
 800fc20:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800fc22:	2300      	movs	r3, #0
 800fc24:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800fc26:	e005      	b.n	800fc34 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	3301      	adds	r3, #1
 800fc2c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800fc2e:	79fb      	ldrb	r3, [r7, #7]
 800fc30:	3b0a      	subs	r3, #10
 800fc32:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800fc34:	79fb      	ldrb	r3, [r7, #7]
 800fc36:	2b09      	cmp	r3, #9
 800fc38:	d8f6      	bhi.n	800fc28 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	b2db      	uxtb	r3, r3
 800fc3e:	011b      	lsls	r3, r3, #4
 800fc40:	b2da      	uxtb	r2, r3
 800fc42:	79fb      	ldrb	r3, [r7, #7]
 800fc44:	4313      	orrs	r3, r2
 800fc46:	b2db      	uxtb	r3, r3
}
 800fc48:	4618      	mov	r0, r3
 800fc4a:	3714      	adds	r7, #20
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc52:	4770      	bx	lr

0800fc54 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800fc54:	b480      	push	{r7}
 800fc56:	b085      	sub	sp, #20
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800fc5e:	2300      	movs	r3, #0
 800fc60:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800fc62:	79fb      	ldrb	r3, [r7, #7]
 800fc64:	091b      	lsrs	r3, r3, #4
 800fc66:	b2db      	uxtb	r3, r3
 800fc68:	461a      	mov	r2, r3
 800fc6a:	4613      	mov	r3, r2
 800fc6c:	009b      	lsls	r3, r3, #2
 800fc6e:	4413      	add	r3, r2
 800fc70:	005b      	lsls	r3, r3, #1
 800fc72:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800fc74:	79fb      	ldrb	r3, [r7, #7]
 800fc76:	f003 030f 	and.w	r3, r3, #15
 800fc7a:	b2da      	uxtb	r2, r3
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	b2db      	uxtb	r3, r3
 800fc80:	4413      	add	r3, r2
 800fc82:	b2db      	uxtb	r3, r3
}
 800fc84:	4618      	mov	r0, r3
 800fc86:	3714      	adds	r7, #20
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8e:	4770      	bx	lr

0800fc90 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800fc90:	b480      	push	{r7}
 800fc92:	b087      	sub	sp, #28
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	60f8      	str	r0, [r7, #12]
 800fc98:	60b9      	str	r1, [r7, #8]
 800fc9a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	7f1b      	ldrb	r3, [r3, #28]
 800fca0:	2b01      	cmp	r3, #1
 800fca2:	d101      	bne.n	800fca8 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800fca4:	2302      	movs	r3, #2
 800fca6:	e0a6      	b.n	800fdf6 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	2201      	movs	r2, #1
 800fcac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	2202      	movs	r2, #2
 800fcb2:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	22ca      	movs	r2, #202	; 0xca
 800fcba:	625a      	str	r2, [r3, #36]	; 0x24
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	2253      	movs	r2, #83	; 0x53
 800fcc2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	689b      	ldr	r3, [r3, #8]
 800fcca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d022      	beq.n	800fd18 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800fcd2:	4b4c      	ldr	r3, [pc, #304]	; (800fe04 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	4a4c      	ldr	r2, [pc, #304]	; (800fe08 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800fcd8:	fba2 2303 	umull	r2, r3, r2, r3
 800fcdc:	0adb      	lsrs	r3, r3, #11
 800fcde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fce2:	fb02 f303 	mul.w	r3, r2, r3
 800fce6:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	1e5a      	subs	r2, r3, #1
 800fcec:	617a      	str	r2, [r7, #20]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d10b      	bne.n	800fd0a <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	22ff      	movs	r2, #255	; 0xff
 800fcf8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	2203      	movs	r2, #3
 800fcfe:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	2200      	movs	r2, #0
 800fd04:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800fd06:	2303      	movs	r3, #3
 800fd08:	e075      	b.n	800fdf6 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	68db      	ldr	r3, [r3, #12]
 800fd10:	f003 0304 	and.w	r3, r3, #4
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d1e7      	bne.n	800fce8 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	689a      	ldr	r2, [r3, #8]
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fd26:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800fd28:	4b36      	ldr	r3, [pc, #216]	; (800fe04 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	4a36      	ldr	r2, [pc, #216]	; (800fe08 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800fd2e:	fba2 2303 	umull	r2, r3, r2, r3
 800fd32:	0adb      	lsrs	r3, r3, #11
 800fd34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fd38:	fb02 f303 	mul.w	r3, r2, r3
 800fd3c:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800fd3e:	697b      	ldr	r3, [r7, #20]
 800fd40:	1e5a      	subs	r2, r3, #1
 800fd42:	617a      	str	r2, [r7, #20]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d10b      	bne.n	800fd60 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	22ff      	movs	r2, #255	; 0xff
 800fd4e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	2203      	movs	r2, #3
 800fd54:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	2200      	movs	r2, #0
 800fd5a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800fd5c:	2303      	movs	r3, #3
 800fd5e:	e04a      	b.n	800fdf6 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	68db      	ldr	r3, [r3, #12]
 800fd66:	f003 0304 	and.w	r3, r3, #4
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d0e7      	beq.n	800fd3e <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	68ba      	ldr	r2, [r7, #8]
 800fd74:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	689a      	ldr	r2, [r3, #8]
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	f022 0207 	bic.w	r2, r2, #7
 800fd84:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	6899      	ldr	r1, [r3, #8]
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	687a      	ldr	r2, [r7, #4]
 800fd92:	430a      	orrs	r2, r1
 800fd94:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800fd96:	4b1d      	ldr	r3, [pc, #116]	; (800fe0c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	4a1c      	ldr	r2, [pc, #112]	; (800fe0c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800fd9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800fda0:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800fda2:	4b1a      	ldr	r3, [pc, #104]	; (800fe0c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800fda4:	689b      	ldr	r3, [r3, #8]
 800fda6:	4a19      	ldr	r2, [pc, #100]	; (800fe0c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800fda8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800fdac:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	68db      	ldr	r3, [r3, #12]
 800fdb4:	b2da      	uxtb	r2, r3
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800fdbe:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	689a      	ldr	r2, [r3, #8]
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fdce:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	689a      	ldr	r2, [r3, #8]
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fdde:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	22ff      	movs	r2, #255	; 0xff
 800fde6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	2201      	movs	r2, #1
 800fdec:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800fdf4:	2300      	movs	r3, #0
}
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	371c      	adds	r7, #28
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe00:	4770      	bx	lr
 800fe02:	bf00      	nop
 800fe04:	20000088 	.word	0x20000088
 800fe08:	10624dd3 	.word	0x10624dd3
 800fe0c:	40013c00 	.word	0x40013c00

0800fe10 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b084      	sub	sp, #16
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800fe18:	2300      	movs	r3, #0
 800fe1a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	7f1b      	ldrb	r3, [r3, #28]
 800fe20:	2b01      	cmp	r3, #1
 800fe22:	d101      	bne.n	800fe28 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800fe24:	2302      	movs	r3, #2
 800fe26:	e047      	b.n	800feb8 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2201      	movs	r2, #1
 800fe2c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	2202      	movs	r2, #2
 800fe32:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	22ca      	movs	r2, #202	; 0xca
 800fe3a:	625a      	str	r2, [r3, #36]	; 0x24
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	2253      	movs	r2, #83	; 0x53
 800fe42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	689a      	ldr	r2, [r3, #8]
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fe52:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	689a      	ldr	r2, [r3, #8]
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800fe62:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800fe64:	f7fc fb68 	bl	800c538 <HAL_GetTick>
 800fe68:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800fe6a:	e013      	b.n	800fe94 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800fe6c:	f7fc fb64 	bl	800c538 <HAL_GetTick>
 800fe70:	4602      	mov	r2, r0
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	1ad3      	subs	r3, r2, r3
 800fe76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fe7a:	d90b      	bls.n	800fe94 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	22ff      	movs	r2, #255	; 0xff
 800fe82:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2203      	movs	r2, #3
 800fe88:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800fe90:	2303      	movs	r3, #3
 800fe92:	e011      	b.n	800feb8 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	68db      	ldr	r3, [r3, #12]
 800fe9a:	f003 0304 	and.w	r3, r3, #4
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d0e4      	beq.n	800fe6c <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	22ff      	movs	r2, #255	; 0xff
 800fea8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	2201      	movs	r2, #1
 800feae:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2200      	movs	r2, #0
 800feb4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800feb6:	2300      	movs	r3, #0
}
 800feb8:	4618      	mov	r0, r3
 800feba:	3710      	adds	r7, #16
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}

0800fec0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b082      	sub	sp, #8
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != (uint32_t)RESET)
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	68db      	ldr	r3, [r3, #12]
 800fece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d00b      	beq.n	800feee <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	f7f3 fc80 	bl	80037dc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	68db      	ldr	r3, [r3, #12]
 800fee2:	b2da      	uxtb	r2, r3
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800feec:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800feee:	4b05      	ldr	r3, [pc, #20]	; (800ff04 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 800fef0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800fef4:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	2201      	movs	r2, #1
 800fefa:	775a      	strb	r2, [r3, #29]
}
 800fefc:	bf00      	nop
 800fefe:	3708      	adds	r7, #8
 800ff00:	46bd      	mov	sp, r7
 800ff02:	bd80      	pop	{r7, pc}
 800ff04:	40013c00 	.word	0x40013c00

0800ff08 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800ff08:	b480      	push	{r7}
 800ff0a:	b087      	sub	sp, #28
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	60f8      	str	r0, [r7, #12]
 800ff10:	60b9      	str	r1, [r7, #8]
 800ff12:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800ff14:	2300      	movs	r3, #0
 800ff16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	3350      	adds	r3, #80	; 0x50
 800ff1e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800ff20:	68bb      	ldr	r3, [r7, #8]
 800ff22:	009b      	lsls	r3, r3, #2
 800ff24:	697a      	ldr	r2, [r7, #20]
 800ff26:	4413      	add	r3, r2
 800ff28:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800ff2a:	697b      	ldr	r3, [r7, #20]
 800ff2c:	687a      	ldr	r2, [r7, #4]
 800ff2e:	601a      	str	r2, [r3, #0]
}
 800ff30:	bf00      	nop
 800ff32:	371c      	adds	r7, #28
 800ff34:	46bd      	mov	sp, r7
 800ff36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3a:	4770      	bx	lr

0800ff3c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800ff3c:	b480      	push	{r7}
 800ff3e:	b085      	sub	sp, #20
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
 800ff44:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800ff46:	2300      	movs	r3, #0
 800ff48:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	3350      	adds	r3, #80	; 0x50
 800ff50:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	009b      	lsls	r3, r3, #2
 800ff56:	68fa      	ldr	r2, [r7, #12]
 800ff58:	4413      	add	r3, r2
 800ff5a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	681b      	ldr	r3, [r3, #0]
}
 800ff60:	4618      	mov	r0, r3
 800ff62:	3714      	adds	r7, #20
 800ff64:	46bd      	mov	sp, r7
 800ff66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6a:	4770      	bx	lr

0800ff6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b082      	sub	sp, #8
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d101      	bne.n	800ff7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	e07b      	b.n	8010076 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d108      	bne.n	800ff98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	685b      	ldr	r3, [r3, #4]
 800ff8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ff8e:	d009      	beq.n	800ffa4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2200      	movs	r2, #0
 800ff94:	61da      	str	r2, [r3, #28]
 800ff96:	e005      	b.n	800ffa4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ffb0:	b2db      	uxtb	r3, r3
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d106      	bne.n	800ffc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2200      	movs	r2, #0
 800ffba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	f7f3 fa16 	bl	80033f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	2202      	movs	r2, #2
 800ffc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	681a      	ldr	r2, [r3, #0]
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ffda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	685b      	ldr	r3, [r3, #4]
 800ffe0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	689b      	ldr	r3, [r3, #8]
 800ffe8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ffec:	431a      	orrs	r2, r3
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	68db      	ldr	r3, [r3, #12]
 800fff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fff6:	431a      	orrs	r2, r3
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	691b      	ldr	r3, [r3, #16]
 800fffc:	f003 0302 	and.w	r3, r3, #2
 8010000:	431a      	orrs	r2, r3
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	695b      	ldr	r3, [r3, #20]
 8010006:	f003 0301 	and.w	r3, r3, #1
 801000a:	431a      	orrs	r2, r3
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	699b      	ldr	r3, [r3, #24]
 8010010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010014:	431a      	orrs	r2, r3
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	69db      	ldr	r3, [r3, #28]
 801001a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801001e:	431a      	orrs	r2, r3
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	6a1b      	ldr	r3, [r3, #32]
 8010024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010028:	ea42 0103 	orr.w	r1, r2, r3
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010030:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	430a      	orrs	r2, r1
 801003a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	699b      	ldr	r3, [r3, #24]
 8010040:	0c1b      	lsrs	r3, r3, #16
 8010042:	f003 0104 	and.w	r1, r3, #4
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801004a:	f003 0210 	and.w	r2, r3, #16
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	430a      	orrs	r2, r1
 8010054:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	69da      	ldr	r2, [r3, #28]
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010064:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2200      	movs	r2, #0
 801006a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2201      	movs	r2, #1
 8010070:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8010074:	2300      	movs	r3, #0
}
 8010076:	4618      	mov	r0, r3
 8010078:	3708      	adds	r7, #8
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}

0801007e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801007e:	b580      	push	{r7, lr}
 8010080:	b088      	sub	sp, #32
 8010082:	af00      	add	r7, sp, #0
 8010084:	60f8      	str	r0, [r7, #12]
 8010086:	60b9      	str	r1, [r7, #8]
 8010088:	603b      	str	r3, [r7, #0]
 801008a:	4613      	mov	r3, r2
 801008c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801008e:	2300      	movs	r3, #0
 8010090:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010098:	2b01      	cmp	r3, #1
 801009a:	d101      	bne.n	80100a0 <HAL_SPI_Transmit+0x22>
 801009c:	2302      	movs	r3, #2
 801009e:	e126      	b.n	80102ee <HAL_SPI_Transmit+0x270>
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	2201      	movs	r2, #1
 80100a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80100a8:	f7fc fa46 	bl	800c538 <HAL_GetTick>
 80100ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80100ae:	88fb      	ldrh	r3, [r7, #6]
 80100b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80100b8:	b2db      	uxtb	r3, r3
 80100ba:	2b01      	cmp	r3, #1
 80100bc:	d002      	beq.n	80100c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80100be:	2302      	movs	r3, #2
 80100c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80100c2:	e10b      	b.n	80102dc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80100c4:	68bb      	ldr	r3, [r7, #8]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d002      	beq.n	80100d0 <HAL_SPI_Transmit+0x52>
 80100ca:	88fb      	ldrh	r3, [r7, #6]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d102      	bne.n	80100d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80100d0:	2301      	movs	r3, #1
 80100d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80100d4:	e102      	b.n	80102dc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	2203      	movs	r2, #3
 80100da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	2200      	movs	r2, #0
 80100e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	68ba      	ldr	r2, [r7, #8]
 80100e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	88fa      	ldrh	r2, [r7, #6]
 80100ee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	88fa      	ldrh	r2, [r7, #6]
 80100f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	2200      	movs	r2, #0
 80100fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	2200      	movs	r2, #0
 8010100:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	2200      	movs	r2, #0
 8010106:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	2200      	movs	r2, #0
 801010c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	2200      	movs	r2, #0
 8010112:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	689b      	ldr	r3, [r3, #8]
 8010118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801011c:	d10f      	bne.n	801013e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	681a      	ldr	r2, [r3, #0]
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801012c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	681a      	ldr	r2, [r3, #0]
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801013c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010148:	2b40      	cmp	r3, #64	; 0x40
 801014a:	d007      	beq.n	801015c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	681a      	ldr	r2, [r3, #0]
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801015a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	68db      	ldr	r3, [r3, #12]
 8010160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010164:	d14b      	bne.n	80101fe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	685b      	ldr	r3, [r3, #4]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d002      	beq.n	8010174 <HAL_SPI_Transmit+0xf6>
 801016e:	8afb      	ldrh	r3, [r7, #22]
 8010170:	2b01      	cmp	r3, #1
 8010172:	d13e      	bne.n	80101f2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010178:	881a      	ldrh	r2, [r3, #0]
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010184:	1c9a      	adds	r2, r3, #2
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801018e:	b29b      	uxth	r3, r3
 8010190:	3b01      	subs	r3, #1
 8010192:	b29a      	uxth	r2, r3
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8010198:	e02b      	b.n	80101f2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	689b      	ldr	r3, [r3, #8]
 80101a0:	f003 0302 	and.w	r3, r3, #2
 80101a4:	2b02      	cmp	r3, #2
 80101a6:	d112      	bne.n	80101ce <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101ac:	881a      	ldrh	r2, [r3, #0]
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101b8:	1c9a      	adds	r2, r3, #2
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80101c2:	b29b      	uxth	r3, r3
 80101c4:	3b01      	subs	r3, #1
 80101c6:	b29a      	uxth	r2, r3
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80101cc:	e011      	b.n	80101f2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80101ce:	f7fc f9b3 	bl	800c538 <HAL_GetTick>
 80101d2:	4602      	mov	r2, r0
 80101d4:	69bb      	ldr	r3, [r7, #24]
 80101d6:	1ad3      	subs	r3, r2, r3
 80101d8:	683a      	ldr	r2, [r7, #0]
 80101da:	429a      	cmp	r2, r3
 80101dc:	d803      	bhi.n	80101e6 <HAL_SPI_Transmit+0x168>
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101e4:	d102      	bne.n	80101ec <HAL_SPI_Transmit+0x16e>
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d102      	bne.n	80101f2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80101ec:	2303      	movs	r3, #3
 80101ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80101f0:	e074      	b.n	80102dc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80101f6:	b29b      	uxth	r3, r3
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d1ce      	bne.n	801019a <HAL_SPI_Transmit+0x11c>
 80101fc:	e04c      	b.n	8010298 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	685b      	ldr	r3, [r3, #4]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d002      	beq.n	801020c <HAL_SPI_Transmit+0x18e>
 8010206:	8afb      	ldrh	r3, [r7, #22]
 8010208:	2b01      	cmp	r3, #1
 801020a:	d140      	bne.n	801028e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	330c      	adds	r3, #12
 8010216:	7812      	ldrb	r2, [r2, #0]
 8010218:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801021e:	1c5a      	adds	r2, r3, #1
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010228:	b29b      	uxth	r3, r3
 801022a:	3b01      	subs	r3, #1
 801022c:	b29a      	uxth	r2, r3
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8010232:	e02c      	b.n	801028e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	689b      	ldr	r3, [r3, #8]
 801023a:	f003 0302 	and.w	r3, r3, #2
 801023e:	2b02      	cmp	r3, #2
 8010240:	d113      	bne.n	801026a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	330c      	adds	r3, #12
 801024c:	7812      	ldrb	r2, [r2, #0]
 801024e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010254:	1c5a      	adds	r2, r3, #1
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801025e:	b29b      	uxth	r3, r3
 8010260:	3b01      	subs	r3, #1
 8010262:	b29a      	uxth	r2, r3
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	86da      	strh	r2, [r3, #54]	; 0x36
 8010268:	e011      	b.n	801028e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801026a:	f7fc f965 	bl	800c538 <HAL_GetTick>
 801026e:	4602      	mov	r2, r0
 8010270:	69bb      	ldr	r3, [r7, #24]
 8010272:	1ad3      	subs	r3, r2, r3
 8010274:	683a      	ldr	r2, [r7, #0]
 8010276:	429a      	cmp	r2, r3
 8010278:	d803      	bhi.n	8010282 <HAL_SPI_Transmit+0x204>
 801027a:	683b      	ldr	r3, [r7, #0]
 801027c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010280:	d102      	bne.n	8010288 <HAL_SPI_Transmit+0x20a>
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d102      	bne.n	801028e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8010288:	2303      	movs	r3, #3
 801028a:	77fb      	strb	r3, [r7, #31]
          goto error;
 801028c:	e026      	b.n	80102dc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010292:	b29b      	uxth	r3, r3
 8010294:	2b00      	cmp	r3, #0
 8010296:	d1cd      	bne.n	8010234 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010298:	69ba      	ldr	r2, [r7, #24]
 801029a:	6839      	ldr	r1, [r7, #0]
 801029c:	68f8      	ldr	r0, [r7, #12]
 801029e:	f000 fbcb 	bl	8010a38 <SPI_EndRxTxTransaction>
 80102a2:	4603      	mov	r3, r0
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d002      	beq.n	80102ae <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	2220      	movs	r2, #32
 80102ac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	689b      	ldr	r3, [r3, #8]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d10a      	bne.n	80102cc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80102b6:	2300      	movs	r3, #0
 80102b8:	613b      	str	r3, [r7, #16]
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	68db      	ldr	r3, [r3, #12]
 80102c0:	613b      	str	r3, [r7, #16]
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	689b      	ldr	r3, [r3, #8]
 80102c8:	613b      	str	r3, [r7, #16]
 80102ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d002      	beq.n	80102da <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80102d4:	2301      	movs	r3, #1
 80102d6:	77fb      	strb	r3, [r7, #31]
 80102d8:	e000      	b.n	80102dc <HAL_SPI_Transmit+0x25e>
  }

error:
 80102da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	2201      	movs	r2, #1
 80102e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	2200      	movs	r2, #0
 80102e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80102ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80102ee:	4618      	mov	r0, r3
 80102f0:	3720      	adds	r7, #32
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd80      	pop	{r7, pc}

080102f6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80102f6:	b580      	push	{r7, lr}
 80102f8:	b088      	sub	sp, #32
 80102fa:	af02      	add	r7, sp, #8
 80102fc:	60f8      	str	r0, [r7, #12]
 80102fe:	60b9      	str	r1, [r7, #8]
 8010300:	603b      	str	r3, [r7, #0]
 8010302:	4613      	mov	r3, r2
 8010304:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010306:	2300      	movs	r3, #0
 8010308:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	685b      	ldr	r3, [r3, #4]
 801030e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010312:	d112      	bne.n	801033a <HAL_SPI_Receive+0x44>
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	689b      	ldr	r3, [r3, #8]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d10e      	bne.n	801033a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	2204      	movs	r2, #4
 8010320:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8010324:	88fa      	ldrh	r2, [r7, #6]
 8010326:	683b      	ldr	r3, [r7, #0]
 8010328:	9300      	str	r3, [sp, #0]
 801032a:	4613      	mov	r3, r2
 801032c:	68ba      	ldr	r2, [r7, #8]
 801032e:	68b9      	ldr	r1, [r7, #8]
 8010330:	68f8      	ldr	r0, [r7, #12]
 8010332:	f000 f8f1 	bl	8010518 <HAL_SPI_TransmitReceive>
 8010336:	4603      	mov	r3, r0
 8010338:	e0ea      	b.n	8010510 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010340:	2b01      	cmp	r3, #1
 8010342:	d101      	bne.n	8010348 <HAL_SPI_Receive+0x52>
 8010344:	2302      	movs	r3, #2
 8010346:	e0e3      	b.n	8010510 <HAL_SPI_Receive+0x21a>
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	2201      	movs	r2, #1
 801034c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010350:	f7fc f8f2 	bl	800c538 <HAL_GetTick>
 8010354:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801035c:	b2db      	uxtb	r3, r3
 801035e:	2b01      	cmp	r3, #1
 8010360:	d002      	beq.n	8010368 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8010362:	2302      	movs	r3, #2
 8010364:	75fb      	strb	r3, [r7, #23]
    goto error;
 8010366:	e0ca      	b.n	80104fe <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8010368:	68bb      	ldr	r3, [r7, #8]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d002      	beq.n	8010374 <HAL_SPI_Receive+0x7e>
 801036e:	88fb      	ldrh	r3, [r7, #6]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d102      	bne.n	801037a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8010374:	2301      	movs	r3, #1
 8010376:	75fb      	strb	r3, [r7, #23]
    goto error;
 8010378:	e0c1      	b.n	80104fe <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	2204      	movs	r2, #4
 801037e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	2200      	movs	r2, #0
 8010386:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	68ba      	ldr	r2, [r7, #8]
 801038c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	88fa      	ldrh	r2, [r7, #6]
 8010392:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	88fa      	ldrh	r2, [r7, #6]
 8010398:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	2200      	movs	r2, #0
 801039e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	2200      	movs	r2, #0
 80103a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	2200      	movs	r2, #0
 80103aa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	2200      	movs	r2, #0
 80103b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	2200      	movs	r2, #0
 80103b6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	689b      	ldr	r3, [r3, #8]
 80103bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80103c0:	d10f      	bne.n	80103e2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	681a      	ldr	r2, [r3, #0]
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80103d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	681a      	ldr	r2, [r3, #0]
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80103e0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103ec:	2b40      	cmp	r3, #64	; 0x40
 80103ee:	d007      	beq.n	8010400 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	681a      	ldr	r2, [r3, #0]
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80103fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	68db      	ldr	r3, [r3, #12]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d162      	bne.n	80104ce <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8010408:	e02e      	b.n	8010468 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	689b      	ldr	r3, [r3, #8]
 8010410:	f003 0301 	and.w	r3, r3, #1
 8010414:	2b01      	cmp	r3, #1
 8010416:	d115      	bne.n	8010444 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	f103 020c 	add.w	r2, r3, #12
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010424:	7812      	ldrb	r2, [r2, #0]
 8010426:	b2d2      	uxtb	r2, r2
 8010428:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801042e:	1c5a      	adds	r2, r3, #1
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010438:	b29b      	uxth	r3, r3
 801043a:	3b01      	subs	r3, #1
 801043c:	b29a      	uxth	r2, r3
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010442:	e011      	b.n	8010468 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010444:	f7fc f878 	bl	800c538 <HAL_GetTick>
 8010448:	4602      	mov	r2, r0
 801044a:	693b      	ldr	r3, [r7, #16]
 801044c:	1ad3      	subs	r3, r2, r3
 801044e:	683a      	ldr	r2, [r7, #0]
 8010450:	429a      	cmp	r2, r3
 8010452:	d803      	bhi.n	801045c <HAL_SPI_Receive+0x166>
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	f1b3 3fff 	cmp.w	r3, #4294967295
 801045a:	d102      	bne.n	8010462 <HAL_SPI_Receive+0x16c>
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d102      	bne.n	8010468 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8010462:	2303      	movs	r3, #3
 8010464:	75fb      	strb	r3, [r7, #23]
          goto error;
 8010466:	e04a      	b.n	80104fe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801046c:	b29b      	uxth	r3, r3
 801046e:	2b00      	cmp	r3, #0
 8010470:	d1cb      	bne.n	801040a <HAL_SPI_Receive+0x114>
 8010472:	e031      	b.n	80104d8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	689b      	ldr	r3, [r3, #8]
 801047a:	f003 0301 	and.w	r3, r3, #1
 801047e:	2b01      	cmp	r3, #1
 8010480:	d113      	bne.n	80104aa <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	68da      	ldr	r2, [r3, #12]
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801048c:	b292      	uxth	r2, r2
 801048e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010494:	1c9a      	adds	r2, r3, #2
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801049e:	b29b      	uxth	r3, r3
 80104a0:	3b01      	subs	r3, #1
 80104a2:	b29a      	uxth	r2, r3
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80104a8:	e011      	b.n	80104ce <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80104aa:	f7fc f845 	bl	800c538 <HAL_GetTick>
 80104ae:	4602      	mov	r2, r0
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	1ad3      	subs	r3, r2, r3
 80104b4:	683a      	ldr	r2, [r7, #0]
 80104b6:	429a      	cmp	r2, r3
 80104b8:	d803      	bhi.n	80104c2 <HAL_SPI_Receive+0x1cc>
 80104ba:	683b      	ldr	r3, [r7, #0]
 80104bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104c0:	d102      	bne.n	80104c8 <HAL_SPI_Receive+0x1d2>
 80104c2:	683b      	ldr	r3, [r7, #0]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d102      	bne.n	80104ce <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80104c8:	2303      	movs	r3, #3
 80104ca:	75fb      	strb	r3, [r7, #23]
          goto error;
 80104cc:	e017      	b.n	80104fe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80104d2:	b29b      	uxth	r3, r3
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d1cd      	bne.n	8010474 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80104d8:	693a      	ldr	r2, [r7, #16]
 80104da:	6839      	ldr	r1, [r7, #0]
 80104dc:	68f8      	ldr	r0, [r7, #12]
 80104de:	f000 fa45 	bl	801096c <SPI_EndRxTransaction>
 80104e2:	4603      	mov	r3, r0
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d002      	beq.n	80104ee <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	2220      	movs	r2, #32
 80104ec:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d002      	beq.n	80104fc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80104f6:	2301      	movs	r3, #1
 80104f8:	75fb      	strb	r3, [r7, #23]
 80104fa:	e000      	b.n	80104fe <HAL_SPI_Receive+0x208>
  }

error :
 80104fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	2201      	movs	r2, #1
 8010502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	2200      	movs	r2, #0
 801050a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801050e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010510:	4618      	mov	r0, r3
 8010512:	3718      	adds	r7, #24
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}

08010518 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b08c      	sub	sp, #48	; 0x30
 801051c:	af00      	add	r7, sp, #0
 801051e:	60f8      	str	r0, [r7, #12]
 8010520:	60b9      	str	r1, [r7, #8]
 8010522:	607a      	str	r2, [r7, #4]
 8010524:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8010526:	2301      	movs	r3, #1
 8010528:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801052a:	2300      	movs	r3, #0
 801052c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010536:	2b01      	cmp	r3, #1
 8010538:	d101      	bne.n	801053e <HAL_SPI_TransmitReceive+0x26>
 801053a:	2302      	movs	r3, #2
 801053c:	e18a      	b.n	8010854 <HAL_SPI_TransmitReceive+0x33c>
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	2201      	movs	r2, #1
 8010542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010546:	f7fb fff7 	bl	800c538 <HAL_GetTick>
 801054a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	685b      	ldr	r3, [r3, #4]
 801055a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801055c:	887b      	ldrh	r3, [r7, #2]
 801055e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010560:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010564:	2b01      	cmp	r3, #1
 8010566:	d00f      	beq.n	8010588 <HAL_SPI_TransmitReceive+0x70>
 8010568:	69fb      	ldr	r3, [r7, #28]
 801056a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801056e:	d107      	bne.n	8010580 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	689b      	ldr	r3, [r3, #8]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d103      	bne.n	8010580 <HAL_SPI_TransmitReceive+0x68>
 8010578:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801057c:	2b04      	cmp	r3, #4
 801057e:	d003      	beq.n	8010588 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8010580:	2302      	movs	r3, #2
 8010582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8010586:	e15b      	b.n	8010840 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8010588:	68bb      	ldr	r3, [r7, #8]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d005      	beq.n	801059a <HAL_SPI_TransmitReceive+0x82>
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d002      	beq.n	801059a <HAL_SPI_TransmitReceive+0x82>
 8010594:	887b      	ldrh	r3, [r7, #2]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d103      	bne.n	80105a2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801059a:	2301      	movs	r3, #1
 801059c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80105a0:	e14e      	b.n	8010840 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80105a8:	b2db      	uxtb	r3, r3
 80105aa:	2b04      	cmp	r3, #4
 80105ac:	d003      	beq.n	80105b6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	2205      	movs	r2, #5
 80105b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	2200      	movs	r2, #0
 80105ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	687a      	ldr	r2, [r7, #4]
 80105c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	887a      	ldrh	r2, [r7, #2]
 80105c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	887a      	ldrh	r2, [r7, #2]
 80105cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	68ba      	ldr	r2, [r7, #8]
 80105d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	887a      	ldrh	r2, [r7, #2]
 80105d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	887a      	ldrh	r2, [r7, #2]
 80105de:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	2200      	movs	r2, #0
 80105e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	2200      	movs	r2, #0
 80105ea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105f6:	2b40      	cmp	r3, #64	; 0x40
 80105f8:	d007      	beq.n	801060a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	681a      	ldr	r2, [r3, #0]
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010608:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	68db      	ldr	r3, [r3, #12]
 801060e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010612:	d178      	bne.n	8010706 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	685b      	ldr	r3, [r3, #4]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d002      	beq.n	8010622 <HAL_SPI_TransmitReceive+0x10a>
 801061c:	8b7b      	ldrh	r3, [r7, #26]
 801061e:	2b01      	cmp	r3, #1
 8010620:	d166      	bne.n	80106f0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010626:	881a      	ldrh	r2, [r3, #0]
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010632:	1c9a      	adds	r2, r3, #2
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801063c:	b29b      	uxth	r3, r3
 801063e:	3b01      	subs	r3, #1
 8010640:	b29a      	uxth	r2, r3
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010646:	e053      	b.n	80106f0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	689b      	ldr	r3, [r3, #8]
 801064e:	f003 0302 	and.w	r3, r3, #2
 8010652:	2b02      	cmp	r3, #2
 8010654:	d11b      	bne.n	801068e <HAL_SPI_TransmitReceive+0x176>
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801065a:	b29b      	uxth	r3, r3
 801065c:	2b00      	cmp	r3, #0
 801065e:	d016      	beq.n	801068e <HAL_SPI_TransmitReceive+0x176>
 8010660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010662:	2b01      	cmp	r3, #1
 8010664:	d113      	bne.n	801068e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801066a:	881a      	ldrh	r2, [r3, #0]
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010676:	1c9a      	adds	r2, r3, #2
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010680:	b29b      	uxth	r3, r3
 8010682:	3b01      	subs	r3, #1
 8010684:	b29a      	uxth	r2, r3
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801068a:	2300      	movs	r3, #0
 801068c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	689b      	ldr	r3, [r3, #8]
 8010694:	f003 0301 	and.w	r3, r3, #1
 8010698:	2b01      	cmp	r3, #1
 801069a:	d119      	bne.n	80106d0 <HAL_SPI_TransmitReceive+0x1b8>
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80106a0:	b29b      	uxth	r3, r3
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d014      	beq.n	80106d0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	68da      	ldr	r2, [r3, #12]
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106b0:	b292      	uxth	r2, r2
 80106b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106b8:	1c9a      	adds	r2, r3, #2
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80106c2:	b29b      	uxth	r3, r3
 80106c4:	3b01      	subs	r3, #1
 80106c6:	b29a      	uxth	r2, r3
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80106cc:	2301      	movs	r3, #1
 80106ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80106d0:	f7fb ff32 	bl	800c538 <HAL_GetTick>
 80106d4:	4602      	mov	r2, r0
 80106d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d8:	1ad3      	subs	r3, r2, r3
 80106da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80106dc:	429a      	cmp	r2, r3
 80106de:	d807      	bhi.n	80106f0 <HAL_SPI_TransmitReceive+0x1d8>
 80106e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106e6:	d003      	beq.n	80106f0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80106e8:	2303      	movs	r3, #3
 80106ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80106ee:	e0a7      	b.n	8010840 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80106f4:	b29b      	uxth	r3, r3
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d1a6      	bne.n	8010648 <HAL_SPI_TransmitReceive+0x130>
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80106fe:	b29b      	uxth	r3, r3
 8010700:	2b00      	cmp	r3, #0
 8010702:	d1a1      	bne.n	8010648 <HAL_SPI_TransmitReceive+0x130>
 8010704:	e07c      	b.n	8010800 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	685b      	ldr	r3, [r3, #4]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d002      	beq.n	8010714 <HAL_SPI_TransmitReceive+0x1fc>
 801070e:	8b7b      	ldrh	r3, [r7, #26]
 8010710:	2b01      	cmp	r3, #1
 8010712:	d16b      	bne.n	80107ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	330c      	adds	r3, #12
 801071e:	7812      	ldrb	r2, [r2, #0]
 8010720:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010726:	1c5a      	adds	r2, r3, #1
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010730:	b29b      	uxth	r3, r3
 8010732:	3b01      	subs	r3, #1
 8010734:	b29a      	uxth	r2, r3
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801073a:	e057      	b.n	80107ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	689b      	ldr	r3, [r3, #8]
 8010742:	f003 0302 	and.w	r3, r3, #2
 8010746:	2b02      	cmp	r3, #2
 8010748:	d11c      	bne.n	8010784 <HAL_SPI_TransmitReceive+0x26c>
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801074e:	b29b      	uxth	r3, r3
 8010750:	2b00      	cmp	r3, #0
 8010752:	d017      	beq.n	8010784 <HAL_SPI_TransmitReceive+0x26c>
 8010754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010756:	2b01      	cmp	r3, #1
 8010758:	d114      	bne.n	8010784 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	330c      	adds	r3, #12
 8010764:	7812      	ldrb	r2, [r2, #0]
 8010766:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801076c:	1c5a      	adds	r2, r3, #1
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010776:	b29b      	uxth	r3, r3
 8010778:	3b01      	subs	r3, #1
 801077a:	b29a      	uxth	r2, r3
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010780:	2300      	movs	r3, #0
 8010782:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	689b      	ldr	r3, [r3, #8]
 801078a:	f003 0301 	and.w	r3, r3, #1
 801078e:	2b01      	cmp	r3, #1
 8010790:	d119      	bne.n	80107c6 <HAL_SPI_TransmitReceive+0x2ae>
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010796:	b29b      	uxth	r3, r3
 8010798:	2b00      	cmp	r3, #0
 801079a:	d014      	beq.n	80107c6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	68da      	ldr	r2, [r3, #12]
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107a6:	b2d2      	uxtb	r2, r2
 80107a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107ae:	1c5a      	adds	r2, r3, #1
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80107b8:	b29b      	uxth	r3, r3
 80107ba:	3b01      	subs	r3, #1
 80107bc:	b29a      	uxth	r2, r3
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80107c2:	2301      	movs	r3, #1
 80107c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80107c6:	f7fb feb7 	bl	800c538 <HAL_GetTick>
 80107ca:	4602      	mov	r2, r0
 80107cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ce:	1ad3      	subs	r3, r2, r3
 80107d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80107d2:	429a      	cmp	r2, r3
 80107d4:	d803      	bhi.n	80107de <HAL_SPI_TransmitReceive+0x2c6>
 80107d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107dc:	d102      	bne.n	80107e4 <HAL_SPI_TransmitReceive+0x2cc>
 80107de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d103      	bne.n	80107ec <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80107e4:	2303      	movs	r3, #3
 80107e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80107ea:	e029      	b.n	8010840 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80107f0:	b29b      	uxth	r3, r3
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d1a2      	bne.n	801073c <HAL_SPI_TransmitReceive+0x224>
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80107fa:	b29b      	uxth	r3, r3
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d19d      	bne.n	801073c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010802:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010804:	68f8      	ldr	r0, [r7, #12]
 8010806:	f000 f917 	bl	8010a38 <SPI_EndRxTxTransaction>
 801080a:	4603      	mov	r3, r0
 801080c:	2b00      	cmp	r3, #0
 801080e:	d006      	beq.n	801081e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8010810:	2301      	movs	r3, #1
 8010812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	2220      	movs	r2, #32
 801081a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 801081c:	e010      	b.n	8010840 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	689b      	ldr	r3, [r3, #8]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d10b      	bne.n	801083e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010826:	2300      	movs	r3, #0
 8010828:	617b      	str	r3, [r7, #20]
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	68db      	ldr	r3, [r3, #12]
 8010830:	617b      	str	r3, [r7, #20]
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	689b      	ldr	r3, [r3, #8]
 8010838:	617b      	str	r3, [r7, #20]
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	e000      	b.n	8010840 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801083e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	2201      	movs	r2, #1
 8010844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	2200      	movs	r2, #0
 801084c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010850:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8010854:	4618      	mov	r0, r3
 8010856:	3730      	adds	r7, #48	; 0x30
 8010858:	46bd      	mov	sp, r7
 801085a:	bd80      	pop	{r7, pc}

0801085c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b088      	sub	sp, #32
 8010860:	af00      	add	r7, sp, #0
 8010862:	60f8      	str	r0, [r7, #12]
 8010864:	60b9      	str	r1, [r7, #8]
 8010866:	603b      	str	r3, [r7, #0]
 8010868:	4613      	mov	r3, r2
 801086a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801086c:	f7fb fe64 	bl	800c538 <HAL_GetTick>
 8010870:	4602      	mov	r2, r0
 8010872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010874:	1a9b      	subs	r3, r3, r2
 8010876:	683a      	ldr	r2, [r7, #0]
 8010878:	4413      	add	r3, r2
 801087a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801087c:	f7fb fe5c 	bl	800c538 <HAL_GetTick>
 8010880:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8010882:	4b39      	ldr	r3, [pc, #228]	; (8010968 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	015b      	lsls	r3, r3, #5
 8010888:	0d1b      	lsrs	r3, r3, #20
 801088a:	69fa      	ldr	r2, [r7, #28]
 801088c:	fb02 f303 	mul.w	r3, r2, r3
 8010890:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010892:	e054      	b.n	801093e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8010894:	683b      	ldr	r3, [r7, #0]
 8010896:	f1b3 3fff 	cmp.w	r3, #4294967295
 801089a:	d050      	beq.n	801093e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801089c:	f7fb fe4c 	bl	800c538 <HAL_GetTick>
 80108a0:	4602      	mov	r2, r0
 80108a2:	69bb      	ldr	r3, [r7, #24]
 80108a4:	1ad3      	subs	r3, r2, r3
 80108a6:	69fa      	ldr	r2, [r7, #28]
 80108a8:	429a      	cmp	r2, r3
 80108aa:	d902      	bls.n	80108b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80108ac:	69fb      	ldr	r3, [r7, #28]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d13d      	bne.n	801092e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	685a      	ldr	r2, [r3, #4]
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80108c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	685b      	ldr	r3, [r3, #4]
 80108c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80108ca:	d111      	bne.n	80108f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	689b      	ldr	r3, [r3, #8]
 80108d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80108d4:	d004      	beq.n	80108e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	689b      	ldr	r3, [r3, #8]
 80108da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80108de:	d107      	bne.n	80108f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	681a      	ldr	r2, [r3, #0]
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80108ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80108f8:	d10f      	bne.n	801091a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	681a      	ldr	r2, [r3, #0]
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010908:	601a      	str	r2, [r3, #0]
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	681a      	ldr	r2, [r3, #0]
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010918:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	2201      	movs	r2, #1
 801091e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	2200      	movs	r2, #0
 8010926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801092a:	2303      	movs	r3, #3
 801092c:	e017      	b.n	801095e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 801092e:	697b      	ldr	r3, [r7, #20]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d101      	bne.n	8010938 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8010934:	2300      	movs	r3, #0
 8010936:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8010938:	697b      	ldr	r3, [r7, #20]
 801093a:	3b01      	subs	r3, #1
 801093c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	689a      	ldr	r2, [r3, #8]
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	4013      	ands	r3, r2
 8010948:	68ba      	ldr	r2, [r7, #8]
 801094a:	429a      	cmp	r2, r3
 801094c:	bf0c      	ite	eq
 801094e:	2301      	moveq	r3, #1
 8010950:	2300      	movne	r3, #0
 8010952:	b2db      	uxtb	r3, r3
 8010954:	461a      	mov	r2, r3
 8010956:	79fb      	ldrb	r3, [r7, #7]
 8010958:	429a      	cmp	r2, r3
 801095a:	d19b      	bne.n	8010894 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801095c:	2300      	movs	r3, #0
}
 801095e:	4618      	mov	r0, r3
 8010960:	3720      	adds	r7, #32
 8010962:	46bd      	mov	sp, r7
 8010964:	bd80      	pop	{r7, pc}
 8010966:	bf00      	nop
 8010968:	20000088 	.word	0x20000088

0801096c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b086      	sub	sp, #24
 8010970:	af02      	add	r7, sp, #8
 8010972:	60f8      	str	r0, [r7, #12]
 8010974:	60b9      	str	r1, [r7, #8]
 8010976:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	685b      	ldr	r3, [r3, #4]
 801097c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010980:	d111      	bne.n	80109a6 <SPI_EndRxTransaction+0x3a>
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	689b      	ldr	r3, [r3, #8]
 8010986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801098a:	d004      	beq.n	8010996 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	689b      	ldr	r3, [r3, #8]
 8010990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010994:	d107      	bne.n	80109a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	681a      	ldr	r2, [r3, #0]
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80109a4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	685b      	ldr	r3, [r3, #4]
 80109aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80109ae:	d12a      	bne.n	8010a06 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	689b      	ldr	r3, [r3, #8]
 80109b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80109b8:	d012      	beq.n	80109e0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	9300      	str	r3, [sp, #0]
 80109be:	68bb      	ldr	r3, [r7, #8]
 80109c0:	2200      	movs	r2, #0
 80109c2:	2180      	movs	r1, #128	; 0x80
 80109c4:	68f8      	ldr	r0, [r7, #12]
 80109c6:	f7ff ff49 	bl	801085c <SPI_WaitFlagStateUntilTimeout>
 80109ca:	4603      	mov	r3, r0
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d02d      	beq.n	8010a2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109d4:	f043 0220 	orr.w	r2, r3, #32
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80109dc:	2303      	movs	r3, #3
 80109de:	e026      	b.n	8010a2e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	9300      	str	r3, [sp, #0]
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	2200      	movs	r2, #0
 80109e8:	2101      	movs	r1, #1
 80109ea:	68f8      	ldr	r0, [r7, #12]
 80109ec:	f7ff ff36 	bl	801085c <SPI_WaitFlagStateUntilTimeout>
 80109f0:	4603      	mov	r3, r0
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d01a      	beq.n	8010a2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109fa:	f043 0220 	orr.w	r2, r3, #32
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8010a02:	2303      	movs	r3, #3
 8010a04:	e013      	b.n	8010a2e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	9300      	str	r3, [sp, #0]
 8010a0a:	68bb      	ldr	r3, [r7, #8]
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	2101      	movs	r1, #1
 8010a10:	68f8      	ldr	r0, [r7, #12]
 8010a12:	f7ff ff23 	bl	801085c <SPI_WaitFlagStateUntilTimeout>
 8010a16:	4603      	mov	r3, r0
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d007      	beq.n	8010a2c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a20:	f043 0220 	orr.w	r2, r3, #32
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8010a28:	2303      	movs	r3, #3
 8010a2a:	e000      	b.n	8010a2e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8010a2c:	2300      	movs	r3, #0
}
 8010a2e:	4618      	mov	r0, r3
 8010a30:	3710      	adds	r7, #16
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}
	...

08010a38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b088      	sub	sp, #32
 8010a3c:	af02      	add	r7, sp, #8
 8010a3e:	60f8      	str	r0, [r7, #12]
 8010a40:	60b9      	str	r1, [r7, #8]
 8010a42:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8010a44:	4b1b      	ldr	r3, [pc, #108]	; (8010ab4 <SPI_EndRxTxTransaction+0x7c>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	4a1b      	ldr	r2, [pc, #108]	; (8010ab8 <SPI_EndRxTxTransaction+0x80>)
 8010a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8010a4e:	0d5b      	lsrs	r3, r3, #21
 8010a50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010a54:	fb02 f303 	mul.w	r3, r2, r3
 8010a58:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	685b      	ldr	r3, [r3, #4]
 8010a5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010a62:	d112      	bne.n	8010a8a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	9300      	str	r3, [sp, #0]
 8010a68:	68bb      	ldr	r3, [r7, #8]
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	2180      	movs	r1, #128	; 0x80
 8010a6e:	68f8      	ldr	r0, [r7, #12]
 8010a70:	f7ff fef4 	bl	801085c <SPI_WaitFlagStateUntilTimeout>
 8010a74:	4603      	mov	r3, r0
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d016      	beq.n	8010aa8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a7e:	f043 0220 	orr.w	r2, r3, #32
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8010a86:	2303      	movs	r3, #3
 8010a88:	e00f      	b.n	8010aaa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8010a8a:	697b      	ldr	r3, [r7, #20]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d00a      	beq.n	8010aa6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8010a90:	697b      	ldr	r3, [r7, #20]
 8010a92:	3b01      	subs	r3, #1
 8010a94:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	689b      	ldr	r3, [r3, #8]
 8010a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010aa0:	2b80      	cmp	r3, #128	; 0x80
 8010aa2:	d0f2      	beq.n	8010a8a <SPI_EndRxTxTransaction+0x52>
 8010aa4:	e000      	b.n	8010aa8 <SPI_EndRxTxTransaction+0x70>
        break;
 8010aa6:	bf00      	nop
  }

  return HAL_OK;
 8010aa8:	2300      	movs	r3, #0
}
 8010aaa:	4618      	mov	r0, r3
 8010aac:	3718      	adds	r7, #24
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	bd80      	pop	{r7, pc}
 8010ab2:	bf00      	nop
 8010ab4:	20000088 	.word	0x20000088
 8010ab8:	165e9f81 	.word	0x165e9f81

08010abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b082      	sub	sp, #8
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d101      	bne.n	8010ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010aca:	2301      	movs	r3, #1
 8010acc:	e041      	b.n	8010b52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010ad4:	b2db      	uxtb	r3, r3
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d106      	bne.n	8010ae8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	2200      	movs	r2, #0
 8010ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f7f2 ff16 	bl	8003914 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2202      	movs	r2, #2
 8010aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	681a      	ldr	r2, [r3, #0]
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	3304      	adds	r3, #4
 8010af8:	4619      	mov	r1, r3
 8010afa:	4610      	mov	r0, r2
 8010afc:	f000 fcea 	bl	80114d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2201      	movs	r2, #1
 8010b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2201      	movs	r2, #1
 8010b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	2201      	movs	r2, #1
 8010b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	2201      	movs	r2, #1
 8010b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	2201      	movs	r2, #1
 8010b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2201      	movs	r2, #1
 8010b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2201      	movs	r2, #1
 8010b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	2201      	movs	r2, #1
 8010b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2201      	movs	r2, #1
 8010b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	2201      	movs	r2, #1
 8010b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010b50:	2300      	movs	r3, #0
}
 8010b52:	4618      	mov	r0, r3
 8010b54:	3708      	adds	r7, #8
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}
	...

08010b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010b5c:	b480      	push	{r7}
 8010b5e:	b085      	sub	sp, #20
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010b6a:	b2db      	uxtb	r3, r3
 8010b6c:	2b01      	cmp	r3, #1
 8010b6e:	d001      	beq.n	8010b74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010b70:	2301      	movs	r3, #1
 8010b72:	e04e      	b.n	8010c12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2202      	movs	r2, #2
 8010b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	68da      	ldr	r2, [r3, #12]
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	f042 0201 	orr.w	r2, r2, #1
 8010b8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	4a23      	ldr	r2, [pc, #140]	; (8010c20 <HAL_TIM_Base_Start_IT+0xc4>)
 8010b92:	4293      	cmp	r3, r2
 8010b94:	d022      	beq.n	8010bdc <HAL_TIM_Base_Start_IT+0x80>
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010b9e:	d01d      	beq.n	8010bdc <HAL_TIM_Base_Start_IT+0x80>
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	4a1f      	ldr	r2, [pc, #124]	; (8010c24 <HAL_TIM_Base_Start_IT+0xc8>)
 8010ba6:	4293      	cmp	r3, r2
 8010ba8:	d018      	beq.n	8010bdc <HAL_TIM_Base_Start_IT+0x80>
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	4a1e      	ldr	r2, [pc, #120]	; (8010c28 <HAL_TIM_Base_Start_IT+0xcc>)
 8010bb0:	4293      	cmp	r3, r2
 8010bb2:	d013      	beq.n	8010bdc <HAL_TIM_Base_Start_IT+0x80>
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	4a1c      	ldr	r2, [pc, #112]	; (8010c2c <HAL_TIM_Base_Start_IT+0xd0>)
 8010bba:	4293      	cmp	r3, r2
 8010bbc:	d00e      	beq.n	8010bdc <HAL_TIM_Base_Start_IT+0x80>
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	4a1b      	ldr	r2, [pc, #108]	; (8010c30 <HAL_TIM_Base_Start_IT+0xd4>)
 8010bc4:	4293      	cmp	r3, r2
 8010bc6:	d009      	beq.n	8010bdc <HAL_TIM_Base_Start_IT+0x80>
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	4a19      	ldr	r2, [pc, #100]	; (8010c34 <HAL_TIM_Base_Start_IT+0xd8>)
 8010bce:	4293      	cmp	r3, r2
 8010bd0:	d004      	beq.n	8010bdc <HAL_TIM_Base_Start_IT+0x80>
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	4a18      	ldr	r2, [pc, #96]	; (8010c38 <HAL_TIM_Base_Start_IT+0xdc>)
 8010bd8:	4293      	cmp	r3, r2
 8010bda:	d111      	bne.n	8010c00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	689b      	ldr	r3, [r3, #8]
 8010be2:	f003 0307 	and.w	r3, r3, #7
 8010be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	2b06      	cmp	r3, #6
 8010bec:	d010      	beq.n	8010c10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	681a      	ldr	r2, [r3, #0]
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	f042 0201 	orr.w	r2, r2, #1
 8010bfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010bfe:	e007      	b.n	8010c10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	681a      	ldr	r2, [r3, #0]
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	f042 0201 	orr.w	r2, r2, #1
 8010c0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010c10:	2300      	movs	r3, #0
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	3714      	adds	r7, #20
 8010c16:	46bd      	mov	sp, r7
 8010c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1c:	4770      	bx	lr
 8010c1e:	bf00      	nop
 8010c20:	40010000 	.word	0x40010000
 8010c24:	40000400 	.word	0x40000400
 8010c28:	40000800 	.word	0x40000800
 8010c2c:	40000c00 	.word	0x40000c00
 8010c30:	40010400 	.word	0x40010400
 8010c34:	40014000 	.word	0x40014000
 8010c38:	40001800 	.word	0x40001800

08010c3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b082      	sub	sp, #8
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d101      	bne.n	8010c4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010c4a:	2301      	movs	r3, #1
 8010c4c:	e041      	b.n	8010cd2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010c54:	b2db      	uxtb	r3, r3
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d106      	bne.n	8010c68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010c62:	6878      	ldr	r0, [r7, #4]
 8010c64:	f000 f839 	bl	8010cda <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2202      	movs	r2, #2
 8010c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	681a      	ldr	r2, [r3, #0]
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	3304      	adds	r3, #4
 8010c78:	4619      	mov	r1, r3
 8010c7a:	4610      	mov	r0, r2
 8010c7c:	f000 fc2a 	bl	80114d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	2201      	movs	r2, #1
 8010c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	2201      	movs	r2, #1
 8010c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2201      	movs	r2, #1
 8010c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2201      	movs	r2, #1
 8010c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	2201      	movs	r2, #1
 8010ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2201      	movs	r2, #1
 8010cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2201      	movs	r2, #1
 8010cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2201      	movs	r2, #1
 8010cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	2201      	movs	r2, #1
 8010cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	2201      	movs	r2, #1
 8010ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010cd0:	2300      	movs	r3, #0
}
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	3708      	adds	r7, #8
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	bd80      	pop	{r7, pc}

08010cda <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8010cda:	b480      	push	{r7}
 8010cdc:	b083      	sub	sp, #12
 8010cde:	af00      	add	r7, sp, #0
 8010ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8010ce2:	bf00      	nop
 8010ce4:	370c      	adds	r7, #12
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cec:	4770      	bx	lr
	...

08010cf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b084      	sub	sp, #16
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
 8010cf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010cfa:	683b      	ldr	r3, [r7, #0]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d109      	bne.n	8010d14 <HAL_TIM_PWM_Start+0x24>
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010d06:	b2db      	uxtb	r3, r3
 8010d08:	2b01      	cmp	r3, #1
 8010d0a:	bf14      	ite	ne
 8010d0c:	2301      	movne	r3, #1
 8010d0e:	2300      	moveq	r3, #0
 8010d10:	b2db      	uxtb	r3, r3
 8010d12:	e022      	b.n	8010d5a <HAL_TIM_PWM_Start+0x6a>
 8010d14:	683b      	ldr	r3, [r7, #0]
 8010d16:	2b04      	cmp	r3, #4
 8010d18:	d109      	bne.n	8010d2e <HAL_TIM_PWM_Start+0x3e>
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010d20:	b2db      	uxtb	r3, r3
 8010d22:	2b01      	cmp	r3, #1
 8010d24:	bf14      	ite	ne
 8010d26:	2301      	movne	r3, #1
 8010d28:	2300      	moveq	r3, #0
 8010d2a:	b2db      	uxtb	r3, r3
 8010d2c:	e015      	b.n	8010d5a <HAL_TIM_PWM_Start+0x6a>
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	2b08      	cmp	r3, #8
 8010d32:	d109      	bne.n	8010d48 <HAL_TIM_PWM_Start+0x58>
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d3a:	b2db      	uxtb	r3, r3
 8010d3c:	2b01      	cmp	r3, #1
 8010d3e:	bf14      	ite	ne
 8010d40:	2301      	movne	r3, #1
 8010d42:	2300      	moveq	r3, #0
 8010d44:	b2db      	uxtb	r3, r3
 8010d46:	e008      	b.n	8010d5a <HAL_TIM_PWM_Start+0x6a>
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010d4e:	b2db      	uxtb	r3, r3
 8010d50:	2b01      	cmp	r3, #1
 8010d52:	bf14      	ite	ne
 8010d54:	2301      	movne	r3, #1
 8010d56:	2300      	moveq	r3, #0
 8010d58:	b2db      	uxtb	r3, r3
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d001      	beq.n	8010d62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8010d5e:	2301      	movs	r3, #1
 8010d60:	e07c      	b.n	8010e5c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d104      	bne.n	8010d72 <HAL_TIM_PWM_Start+0x82>
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	2202      	movs	r2, #2
 8010d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010d70:	e013      	b.n	8010d9a <HAL_TIM_PWM_Start+0xaa>
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	2b04      	cmp	r3, #4
 8010d76:	d104      	bne.n	8010d82 <HAL_TIM_PWM_Start+0x92>
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2202      	movs	r2, #2
 8010d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010d80:	e00b      	b.n	8010d9a <HAL_TIM_PWM_Start+0xaa>
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	2b08      	cmp	r3, #8
 8010d86:	d104      	bne.n	8010d92 <HAL_TIM_PWM_Start+0xa2>
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2202      	movs	r2, #2
 8010d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010d90:	e003      	b.n	8010d9a <HAL_TIM_PWM_Start+0xaa>
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	2202      	movs	r2, #2
 8010d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	2201      	movs	r2, #1
 8010da0:	6839      	ldr	r1, [r7, #0]
 8010da2:	4618      	mov	r0, r3
 8010da4:	f000 fe80 	bl	8011aa8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	4a2d      	ldr	r2, [pc, #180]	; (8010e64 <HAL_TIM_PWM_Start+0x174>)
 8010dae:	4293      	cmp	r3, r2
 8010db0:	d004      	beq.n	8010dbc <HAL_TIM_PWM_Start+0xcc>
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	4a2c      	ldr	r2, [pc, #176]	; (8010e68 <HAL_TIM_PWM_Start+0x178>)
 8010db8:	4293      	cmp	r3, r2
 8010dba:	d101      	bne.n	8010dc0 <HAL_TIM_PWM_Start+0xd0>
 8010dbc:	2301      	movs	r3, #1
 8010dbe:	e000      	b.n	8010dc2 <HAL_TIM_PWM_Start+0xd2>
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d007      	beq.n	8010dd6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010dd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	4a22      	ldr	r2, [pc, #136]	; (8010e64 <HAL_TIM_PWM_Start+0x174>)
 8010ddc:	4293      	cmp	r3, r2
 8010dde:	d022      	beq.n	8010e26 <HAL_TIM_PWM_Start+0x136>
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010de8:	d01d      	beq.n	8010e26 <HAL_TIM_PWM_Start+0x136>
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	4a1f      	ldr	r2, [pc, #124]	; (8010e6c <HAL_TIM_PWM_Start+0x17c>)
 8010df0:	4293      	cmp	r3, r2
 8010df2:	d018      	beq.n	8010e26 <HAL_TIM_PWM_Start+0x136>
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	4a1d      	ldr	r2, [pc, #116]	; (8010e70 <HAL_TIM_PWM_Start+0x180>)
 8010dfa:	4293      	cmp	r3, r2
 8010dfc:	d013      	beq.n	8010e26 <HAL_TIM_PWM_Start+0x136>
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	4a1c      	ldr	r2, [pc, #112]	; (8010e74 <HAL_TIM_PWM_Start+0x184>)
 8010e04:	4293      	cmp	r3, r2
 8010e06:	d00e      	beq.n	8010e26 <HAL_TIM_PWM_Start+0x136>
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	4a16      	ldr	r2, [pc, #88]	; (8010e68 <HAL_TIM_PWM_Start+0x178>)
 8010e0e:	4293      	cmp	r3, r2
 8010e10:	d009      	beq.n	8010e26 <HAL_TIM_PWM_Start+0x136>
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	4a18      	ldr	r2, [pc, #96]	; (8010e78 <HAL_TIM_PWM_Start+0x188>)
 8010e18:	4293      	cmp	r3, r2
 8010e1a:	d004      	beq.n	8010e26 <HAL_TIM_PWM_Start+0x136>
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	4a16      	ldr	r2, [pc, #88]	; (8010e7c <HAL_TIM_PWM_Start+0x18c>)
 8010e22:	4293      	cmp	r3, r2
 8010e24:	d111      	bne.n	8010e4a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	689b      	ldr	r3, [r3, #8]
 8010e2c:	f003 0307 	and.w	r3, r3, #7
 8010e30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	2b06      	cmp	r3, #6
 8010e36:	d010      	beq.n	8010e5a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	681a      	ldr	r2, [r3, #0]
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	f042 0201 	orr.w	r2, r2, #1
 8010e46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e48:	e007      	b.n	8010e5a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	681a      	ldr	r2, [r3, #0]
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	f042 0201 	orr.w	r2, r2, #1
 8010e58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010e5a:	2300      	movs	r3, #0
}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3710      	adds	r7, #16
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}
 8010e64:	40010000 	.word	0x40010000
 8010e68:	40010400 	.word	0x40010400
 8010e6c:	40000400 	.word	0x40000400
 8010e70:	40000800 	.word	0x40000800
 8010e74:	40000c00 	.word	0x40000c00
 8010e78:	40014000 	.word	0x40014000
 8010e7c:	40001800 	.word	0x40001800

08010e80 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b082      	sub	sp, #8
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
 8010e88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	2200      	movs	r2, #0
 8010e90:	6839      	ldr	r1, [r7, #0]
 8010e92:	4618      	mov	r0, r3
 8010e94:	f000 fe08 	bl	8011aa8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	4a2e      	ldr	r2, [pc, #184]	; (8010f58 <HAL_TIM_PWM_Stop+0xd8>)
 8010e9e:	4293      	cmp	r3, r2
 8010ea0:	d004      	beq.n	8010eac <HAL_TIM_PWM_Stop+0x2c>
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	4a2d      	ldr	r2, [pc, #180]	; (8010f5c <HAL_TIM_PWM_Stop+0xdc>)
 8010ea8:	4293      	cmp	r3, r2
 8010eaa:	d101      	bne.n	8010eb0 <HAL_TIM_PWM_Stop+0x30>
 8010eac:	2301      	movs	r3, #1
 8010eae:	e000      	b.n	8010eb2 <HAL_TIM_PWM_Stop+0x32>
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d017      	beq.n	8010ee6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	6a1a      	ldr	r2, [r3, #32]
 8010ebc:	f241 1311 	movw	r3, #4369	; 0x1111
 8010ec0:	4013      	ands	r3, r2
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d10f      	bne.n	8010ee6 <HAL_TIM_PWM_Stop+0x66>
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	6a1a      	ldr	r2, [r3, #32]
 8010ecc:	f240 4344 	movw	r3, #1092	; 0x444
 8010ed0:	4013      	ands	r3, r2
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d107      	bne.n	8010ee6 <HAL_TIM_PWM_Stop+0x66>
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010ee4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	6a1a      	ldr	r2, [r3, #32]
 8010eec:	f241 1311 	movw	r3, #4369	; 0x1111
 8010ef0:	4013      	ands	r3, r2
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d10f      	bne.n	8010f16 <HAL_TIM_PWM_Stop+0x96>
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	6a1a      	ldr	r2, [r3, #32]
 8010efc:	f240 4344 	movw	r3, #1092	; 0x444
 8010f00:	4013      	ands	r3, r2
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d107      	bne.n	8010f16 <HAL_TIM_PWM_Stop+0x96>
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	681a      	ldr	r2, [r3, #0]
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	f022 0201 	bic.w	r2, r2, #1
 8010f14:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010f16:	683b      	ldr	r3, [r7, #0]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d104      	bne.n	8010f26 <HAL_TIM_PWM_Stop+0xa6>
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	2201      	movs	r2, #1
 8010f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010f24:	e013      	b.n	8010f4e <HAL_TIM_PWM_Stop+0xce>
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	2b04      	cmp	r3, #4
 8010f2a:	d104      	bne.n	8010f36 <HAL_TIM_PWM_Stop+0xb6>
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2201      	movs	r2, #1
 8010f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010f34:	e00b      	b.n	8010f4e <HAL_TIM_PWM_Stop+0xce>
 8010f36:	683b      	ldr	r3, [r7, #0]
 8010f38:	2b08      	cmp	r3, #8
 8010f3a:	d104      	bne.n	8010f46 <HAL_TIM_PWM_Stop+0xc6>
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2201      	movs	r2, #1
 8010f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010f44:	e003      	b.n	8010f4e <HAL_TIM_PWM_Stop+0xce>
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	2201      	movs	r2, #1
 8010f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8010f4e:	2300      	movs	r3, #0
}
 8010f50:	4618      	mov	r0, r3
 8010f52:	3708      	adds	r7, #8
 8010f54:	46bd      	mov	sp, r7
 8010f56:	bd80      	pop	{r7, pc}
 8010f58:	40010000 	.word	0x40010000
 8010f5c:	40010400 	.word	0x40010400

08010f60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b082      	sub	sp, #8
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	691b      	ldr	r3, [r3, #16]
 8010f6e:	f003 0302 	and.w	r3, r3, #2
 8010f72:	2b02      	cmp	r3, #2
 8010f74:	d122      	bne.n	8010fbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	68db      	ldr	r3, [r3, #12]
 8010f7c:	f003 0302 	and.w	r3, r3, #2
 8010f80:	2b02      	cmp	r3, #2
 8010f82:	d11b      	bne.n	8010fbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	f06f 0202 	mvn.w	r2, #2
 8010f8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	2201      	movs	r2, #1
 8010f92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	699b      	ldr	r3, [r3, #24]
 8010f9a:	f003 0303 	and.w	r3, r3, #3
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d003      	beq.n	8010faa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010fa2:	6878      	ldr	r0, [r7, #4]
 8010fa4:	f000 fa77 	bl	8011496 <HAL_TIM_IC_CaptureCallback>
 8010fa8:	e005      	b.n	8010fb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010faa:	6878      	ldr	r0, [r7, #4]
 8010fac:	f000 fa69 	bl	8011482 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010fb0:	6878      	ldr	r0, [r7, #4]
 8010fb2:	f000 fa7a 	bl	80114aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	2200      	movs	r2, #0
 8010fba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	691b      	ldr	r3, [r3, #16]
 8010fc2:	f003 0304 	and.w	r3, r3, #4
 8010fc6:	2b04      	cmp	r3, #4
 8010fc8:	d122      	bne.n	8011010 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	68db      	ldr	r3, [r3, #12]
 8010fd0:	f003 0304 	and.w	r3, r3, #4
 8010fd4:	2b04      	cmp	r3, #4
 8010fd6:	d11b      	bne.n	8011010 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	f06f 0204 	mvn.w	r2, #4
 8010fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	2202      	movs	r2, #2
 8010fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	699b      	ldr	r3, [r3, #24]
 8010fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d003      	beq.n	8010ffe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f000 fa4d 	bl	8011496 <HAL_TIM_IC_CaptureCallback>
 8010ffc:	e005      	b.n	801100a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010ffe:	6878      	ldr	r0, [r7, #4]
 8011000:	f000 fa3f 	bl	8011482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011004:	6878      	ldr	r0, [r7, #4]
 8011006:	f000 fa50 	bl	80114aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	2200      	movs	r2, #0
 801100e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	691b      	ldr	r3, [r3, #16]
 8011016:	f003 0308 	and.w	r3, r3, #8
 801101a:	2b08      	cmp	r3, #8
 801101c:	d122      	bne.n	8011064 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	68db      	ldr	r3, [r3, #12]
 8011024:	f003 0308 	and.w	r3, r3, #8
 8011028:	2b08      	cmp	r3, #8
 801102a:	d11b      	bne.n	8011064 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	f06f 0208 	mvn.w	r2, #8
 8011034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	2204      	movs	r2, #4
 801103a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	69db      	ldr	r3, [r3, #28]
 8011042:	f003 0303 	and.w	r3, r3, #3
 8011046:	2b00      	cmp	r3, #0
 8011048:	d003      	beq.n	8011052 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f000 fa23 	bl	8011496 <HAL_TIM_IC_CaptureCallback>
 8011050:	e005      	b.n	801105e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f000 fa15 	bl	8011482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f000 fa26 	bl	80114aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2200      	movs	r2, #0
 8011062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	691b      	ldr	r3, [r3, #16]
 801106a:	f003 0310 	and.w	r3, r3, #16
 801106e:	2b10      	cmp	r3, #16
 8011070:	d122      	bne.n	80110b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	68db      	ldr	r3, [r3, #12]
 8011078:	f003 0310 	and.w	r3, r3, #16
 801107c:	2b10      	cmp	r3, #16
 801107e:	d11b      	bne.n	80110b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	f06f 0210 	mvn.w	r2, #16
 8011088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	2208      	movs	r2, #8
 801108e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	69db      	ldr	r3, [r3, #28]
 8011096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801109a:	2b00      	cmp	r3, #0
 801109c:	d003      	beq.n	80110a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801109e:	6878      	ldr	r0, [r7, #4]
 80110a0:	f000 f9f9 	bl	8011496 <HAL_TIM_IC_CaptureCallback>
 80110a4:	e005      	b.n	80110b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	f000 f9eb 	bl	8011482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	f000 f9fc 	bl	80114aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2200      	movs	r2, #0
 80110b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	691b      	ldr	r3, [r3, #16]
 80110be:	f003 0301 	and.w	r3, r3, #1
 80110c2:	2b01      	cmp	r3, #1
 80110c4:	d10e      	bne.n	80110e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	68db      	ldr	r3, [r3, #12]
 80110cc:	f003 0301 	and.w	r3, r3, #1
 80110d0:	2b01      	cmp	r3, #1
 80110d2:	d107      	bne.n	80110e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	f06f 0201 	mvn.w	r2, #1
 80110dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f7f1 fd56 	bl	8002b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	691b      	ldr	r3, [r3, #16]
 80110ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80110ee:	2b80      	cmp	r3, #128	; 0x80
 80110f0:	d10e      	bne.n	8011110 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	68db      	ldr	r3, [r3, #12]
 80110f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80110fc:	2b80      	cmp	r3, #128	; 0x80
 80110fe:	d107      	bne.n	8011110 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8011108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801110a:	6878      	ldr	r0, [r7, #4]
 801110c:	f000 fd78 	bl	8011c00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	691b      	ldr	r3, [r3, #16]
 8011116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801111a:	2b40      	cmp	r3, #64	; 0x40
 801111c:	d10e      	bne.n	801113c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	68db      	ldr	r3, [r3, #12]
 8011124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011128:	2b40      	cmp	r3, #64	; 0x40
 801112a:	d107      	bne.n	801113c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011136:	6878      	ldr	r0, [r7, #4]
 8011138:	f000 f9c1 	bl	80114be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	691b      	ldr	r3, [r3, #16]
 8011142:	f003 0320 	and.w	r3, r3, #32
 8011146:	2b20      	cmp	r3, #32
 8011148:	d10e      	bne.n	8011168 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	68db      	ldr	r3, [r3, #12]
 8011150:	f003 0320 	and.w	r3, r3, #32
 8011154:	2b20      	cmp	r3, #32
 8011156:	d107      	bne.n	8011168 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	f06f 0220 	mvn.w	r2, #32
 8011160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011162:	6878      	ldr	r0, [r7, #4]
 8011164:	f000 fd42 	bl	8011bec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011168:	bf00      	nop
 801116a:	3708      	adds	r7, #8
 801116c:	46bd      	mov	sp, r7
 801116e:	bd80      	pop	{r7, pc}

08011170 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b086      	sub	sp, #24
 8011174:	af00      	add	r7, sp, #0
 8011176:	60f8      	str	r0, [r7, #12]
 8011178:	60b9      	str	r1, [r7, #8]
 801117a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801117c:	2300      	movs	r3, #0
 801117e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011186:	2b01      	cmp	r3, #1
 8011188:	d101      	bne.n	801118e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801118a:	2302      	movs	r3, #2
 801118c:	e0ae      	b.n	80112ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	2201      	movs	r2, #1
 8011192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	2b0c      	cmp	r3, #12
 801119a:	f200 809f 	bhi.w	80112dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 801119e:	a201      	add	r2, pc, #4	; (adr r2, 80111a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80111a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111a4:	080111d9 	.word	0x080111d9
 80111a8:	080112dd 	.word	0x080112dd
 80111ac:	080112dd 	.word	0x080112dd
 80111b0:	080112dd 	.word	0x080112dd
 80111b4:	08011219 	.word	0x08011219
 80111b8:	080112dd 	.word	0x080112dd
 80111bc:	080112dd 	.word	0x080112dd
 80111c0:	080112dd 	.word	0x080112dd
 80111c4:	0801125b 	.word	0x0801125b
 80111c8:	080112dd 	.word	0x080112dd
 80111cc:	080112dd 	.word	0x080112dd
 80111d0:	080112dd 	.word	0x080112dd
 80111d4:	0801129b 	.word	0x0801129b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	68b9      	ldr	r1, [r7, #8]
 80111de:	4618      	mov	r0, r3
 80111e0:	f000 fa18 	bl	8011614 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	699a      	ldr	r2, [r3, #24]
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	f042 0208 	orr.w	r2, r2, #8
 80111f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	699a      	ldr	r2, [r3, #24]
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	f022 0204 	bic.w	r2, r2, #4
 8011202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	6999      	ldr	r1, [r3, #24]
 801120a:	68bb      	ldr	r3, [r7, #8]
 801120c:	691a      	ldr	r2, [r3, #16]
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	430a      	orrs	r2, r1
 8011214:	619a      	str	r2, [r3, #24]
      break;
 8011216:	e064      	b.n	80112e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	68b9      	ldr	r1, [r7, #8]
 801121e:	4618      	mov	r0, r3
 8011220:	f000 fa68 	bl	80116f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	699a      	ldr	r2, [r3, #24]
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	699a      	ldr	r2, [r3, #24]
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	6999      	ldr	r1, [r3, #24]
 801124a:	68bb      	ldr	r3, [r7, #8]
 801124c:	691b      	ldr	r3, [r3, #16]
 801124e:	021a      	lsls	r2, r3, #8
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	430a      	orrs	r2, r1
 8011256:	619a      	str	r2, [r3, #24]
      break;
 8011258:	e043      	b.n	80112e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	68b9      	ldr	r1, [r7, #8]
 8011260:	4618      	mov	r0, r3
 8011262:	f000 fabd 	bl	80117e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	69da      	ldr	r2, [r3, #28]
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	f042 0208 	orr.w	r2, r2, #8
 8011274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	69da      	ldr	r2, [r3, #28]
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	f022 0204 	bic.w	r2, r2, #4
 8011284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	69d9      	ldr	r1, [r3, #28]
 801128c:	68bb      	ldr	r3, [r7, #8]
 801128e:	691a      	ldr	r2, [r3, #16]
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	430a      	orrs	r2, r1
 8011296:	61da      	str	r2, [r3, #28]
      break;
 8011298:	e023      	b.n	80112e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	68b9      	ldr	r1, [r7, #8]
 80112a0:	4618      	mov	r0, r3
 80112a2:	f000 fb11 	bl	80118c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	69da      	ldr	r2, [r3, #28]
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80112b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	69da      	ldr	r2, [r3, #28]
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80112c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	69d9      	ldr	r1, [r3, #28]
 80112cc:	68bb      	ldr	r3, [r7, #8]
 80112ce:	691b      	ldr	r3, [r3, #16]
 80112d0:	021a      	lsls	r2, r3, #8
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	430a      	orrs	r2, r1
 80112d8:	61da      	str	r2, [r3, #28]
      break;
 80112da:	e002      	b.n	80112e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80112dc:	2301      	movs	r3, #1
 80112de:	75fb      	strb	r3, [r7, #23]
      break;
 80112e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	2200      	movs	r2, #0
 80112e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80112ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80112ec:	4618      	mov	r0, r3
 80112ee:	3718      	adds	r7, #24
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}

080112f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b084      	sub	sp, #16
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80112fe:	2300      	movs	r3, #0
 8011300:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011308:	2b01      	cmp	r3, #1
 801130a:	d101      	bne.n	8011310 <HAL_TIM_ConfigClockSource+0x1c>
 801130c:	2302      	movs	r3, #2
 801130e:	e0b4      	b.n	801147a <HAL_TIM_ConfigClockSource+0x186>
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	2201      	movs	r2, #1
 8011314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	2202      	movs	r2, #2
 801131c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	689b      	ldr	r3, [r3, #8]
 8011326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801132e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011336:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	68ba      	ldr	r2, [r7, #8]
 801133e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011348:	d03e      	beq.n	80113c8 <HAL_TIM_ConfigClockSource+0xd4>
 801134a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801134e:	f200 8087 	bhi.w	8011460 <HAL_TIM_ConfigClockSource+0x16c>
 8011352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011356:	f000 8086 	beq.w	8011466 <HAL_TIM_ConfigClockSource+0x172>
 801135a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801135e:	d87f      	bhi.n	8011460 <HAL_TIM_ConfigClockSource+0x16c>
 8011360:	2b70      	cmp	r3, #112	; 0x70
 8011362:	d01a      	beq.n	801139a <HAL_TIM_ConfigClockSource+0xa6>
 8011364:	2b70      	cmp	r3, #112	; 0x70
 8011366:	d87b      	bhi.n	8011460 <HAL_TIM_ConfigClockSource+0x16c>
 8011368:	2b60      	cmp	r3, #96	; 0x60
 801136a:	d050      	beq.n	801140e <HAL_TIM_ConfigClockSource+0x11a>
 801136c:	2b60      	cmp	r3, #96	; 0x60
 801136e:	d877      	bhi.n	8011460 <HAL_TIM_ConfigClockSource+0x16c>
 8011370:	2b50      	cmp	r3, #80	; 0x50
 8011372:	d03c      	beq.n	80113ee <HAL_TIM_ConfigClockSource+0xfa>
 8011374:	2b50      	cmp	r3, #80	; 0x50
 8011376:	d873      	bhi.n	8011460 <HAL_TIM_ConfigClockSource+0x16c>
 8011378:	2b40      	cmp	r3, #64	; 0x40
 801137a:	d058      	beq.n	801142e <HAL_TIM_ConfigClockSource+0x13a>
 801137c:	2b40      	cmp	r3, #64	; 0x40
 801137e:	d86f      	bhi.n	8011460 <HAL_TIM_ConfigClockSource+0x16c>
 8011380:	2b30      	cmp	r3, #48	; 0x30
 8011382:	d064      	beq.n	801144e <HAL_TIM_ConfigClockSource+0x15a>
 8011384:	2b30      	cmp	r3, #48	; 0x30
 8011386:	d86b      	bhi.n	8011460 <HAL_TIM_ConfigClockSource+0x16c>
 8011388:	2b20      	cmp	r3, #32
 801138a:	d060      	beq.n	801144e <HAL_TIM_ConfigClockSource+0x15a>
 801138c:	2b20      	cmp	r3, #32
 801138e:	d867      	bhi.n	8011460 <HAL_TIM_ConfigClockSource+0x16c>
 8011390:	2b00      	cmp	r3, #0
 8011392:	d05c      	beq.n	801144e <HAL_TIM_ConfigClockSource+0x15a>
 8011394:	2b10      	cmp	r3, #16
 8011396:	d05a      	beq.n	801144e <HAL_TIM_ConfigClockSource+0x15a>
 8011398:	e062      	b.n	8011460 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	6818      	ldr	r0, [r3, #0]
 801139e:	683b      	ldr	r3, [r7, #0]
 80113a0:	6899      	ldr	r1, [r3, #8]
 80113a2:	683b      	ldr	r3, [r7, #0]
 80113a4:	685a      	ldr	r2, [r3, #4]
 80113a6:	683b      	ldr	r3, [r7, #0]
 80113a8:	68db      	ldr	r3, [r3, #12]
 80113aa:	f000 fb5d 	bl	8011a68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	689b      	ldr	r3, [r3, #8]
 80113b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80113b6:	68bb      	ldr	r3, [r7, #8]
 80113b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80113bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	68ba      	ldr	r2, [r7, #8]
 80113c4:	609a      	str	r2, [r3, #8]
      break;
 80113c6:	e04f      	b.n	8011468 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	6818      	ldr	r0, [r3, #0]
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	6899      	ldr	r1, [r3, #8]
 80113d0:	683b      	ldr	r3, [r7, #0]
 80113d2:	685a      	ldr	r2, [r3, #4]
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	68db      	ldr	r3, [r3, #12]
 80113d8:	f000 fb46 	bl	8011a68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	689a      	ldr	r2, [r3, #8]
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80113ea:	609a      	str	r2, [r3, #8]
      break;
 80113ec:	e03c      	b.n	8011468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	6818      	ldr	r0, [r3, #0]
 80113f2:	683b      	ldr	r3, [r7, #0]
 80113f4:	6859      	ldr	r1, [r3, #4]
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	68db      	ldr	r3, [r3, #12]
 80113fa:	461a      	mov	r2, r3
 80113fc:	f000 faba 	bl	8011974 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	2150      	movs	r1, #80	; 0x50
 8011406:	4618      	mov	r0, r3
 8011408:	f000 fb13 	bl	8011a32 <TIM_ITRx_SetConfig>
      break;
 801140c:	e02c      	b.n	8011468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	6818      	ldr	r0, [r3, #0]
 8011412:	683b      	ldr	r3, [r7, #0]
 8011414:	6859      	ldr	r1, [r3, #4]
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	68db      	ldr	r3, [r3, #12]
 801141a:	461a      	mov	r2, r3
 801141c:	f000 fad9 	bl	80119d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	2160      	movs	r1, #96	; 0x60
 8011426:	4618      	mov	r0, r3
 8011428:	f000 fb03 	bl	8011a32 <TIM_ITRx_SetConfig>
      break;
 801142c:	e01c      	b.n	8011468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	6818      	ldr	r0, [r3, #0]
 8011432:	683b      	ldr	r3, [r7, #0]
 8011434:	6859      	ldr	r1, [r3, #4]
 8011436:	683b      	ldr	r3, [r7, #0]
 8011438:	68db      	ldr	r3, [r3, #12]
 801143a:	461a      	mov	r2, r3
 801143c:	f000 fa9a 	bl	8011974 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	2140      	movs	r1, #64	; 0x40
 8011446:	4618      	mov	r0, r3
 8011448:	f000 faf3 	bl	8011a32 <TIM_ITRx_SetConfig>
      break;
 801144c:	e00c      	b.n	8011468 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	681a      	ldr	r2, [r3, #0]
 8011452:	683b      	ldr	r3, [r7, #0]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	4619      	mov	r1, r3
 8011458:	4610      	mov	r0, r2
 801145a:	f000 faea 	bl	8011a32 <TIM_ITRx_SetConfig>
      break;
 801145e:	e003      	b.n	8011468 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8011460:	2301      	movs	r3, #1
 8011462:	73fb      	strb	r3, [r7, #15]
      break;
 8011464:	e000      	b.n	8011468 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8011466:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	2201      	movs	r2, #1
 801146c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	2200      	movs	r2, #0
 8011474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011478:	7bfb      	ldrb	r3, [r7, #15]
}
 801147a:	4618      	mov	r0, r3
 801147c:	3710      	adds	r7, #16
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}

08011482 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011482:	b480      	push	{r7}
 8011484:	b083      	sub	sp, #12
 8011486:	af00      	add	r7, sp, #0
 8011488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801148a:	bf00      	nop
 801148c:	370c      	adds	r7, #12
 801148e:	46bd      	mov	sp, r7
 8011490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011494:	4770      	bx	lr

08011496 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011496:	b480      	push	{r7}
 8011498:	b083      	sub	sp, #12
 801149a:	af00      	add	r7, sp, #0
 801149c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801149e:	bf00      	nop
 80114a0:	370c      	adds	r7, #12
 80114a2:	46bd      	mov	sp, r7
 80114a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a8:	4770      	bx	lr

080114aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80114aa:	b480      	push	{r7}
 80114ac:	b083      	sub	sp, #12
 80114ae:	af00      	add	r7, sp, #0
 80114b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80114b2:	bf00      	nop
 80114b4:	370c      	adds	r7, #12
 80114b6:	46bd      	mov	sp, r7
 80114b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114bc:	4770      	bx	lr

080114be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80114be:	b480      	push	{r7}
 80114c0:	b083      	sub	sp, #12
 80114c2:	af00      	add	r7, sp, #0
 80114c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80114c6:	bf00      	nop
 80114c8:	370c      	adds	r7, #12
 80114ca:	46bd      	mov	sp, r7
 80114cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d0:	4770      	bx	lr
	...

080114d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80114d4:	b480      	push	{r7}
 80114d6:	b085      	sub	sp, #20
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
 80114dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	4a40      	ldr	r2, [pc, #256]	; (80115e8 <TIM_Base_SetConfig+0x114>)
 80114e8:	4293      	cmp	r3, r2
 80114ea:	d013      	beq.n	8011514 <TIM_Base_SetConfig+0x40>
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80114f2:	d00f      	beq.n	8011514 <TIM_Base_SetConfig+0x40>
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	4a3d      	ldr	r2, [pc, #244]	; (80115ec <TIM_Base_SetConfig+0x118>)
 80114f8:	4293      	cmp	r3, r2
 80114fa:	d00b      	beq.n	8011514 <TIM_Base_SetConfig+0x40>
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	4a3c      	ldr	r2, [pc, #240]	; (80115f0 <TIM_Base_SetConfig+0x11c>)
 8011500:	4293      	cmp	r3, r2
 8011502:	d007      	beq.n	8011514 <TIM_Base_SetConfig+0x40>
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	4a3b      	ldr	r2, [pc, #236]	; (80115f4 <TIM_Base_SetConfig+0x120>)
 8011508:	4293      	cmp	r3, r2
 801150a:	d003      	beq.n	8011514 <TIM_Base_SetConfig+0x40>
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	4a3a      	ldr	r2, [pc, #232]	; (80115f8 <TIM_Base_SetConfig+0x124>)
 8011510:	4293      	cmp	r3, r2
 8011512:	d108      	bne.n	8011526 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801151a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801151c:	683b      	ldr	r3, [r7, #0]
 801151e:	685b      	ldr	r3, [r3, #4]
 8011520:	68fa      	ldr	r2, [r7, #12]
 8011522:	4313      	orrs	r3, r2
 8011524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	4a2f      	ldr	r2, [pc, #188]	; (80115e8 <TIM_Base_SetConfig+0x114>)
 801152a:	4293      	cmp	r3, r2
 801152c:	d02b      	beq.n	8011586 <TIM_Base_SetConfig+0xb2>
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011534:	d027      	beq.n	8011586 <TIM_Base_SetConfig+0xb2>
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	4a2c      	ldr	r2, [pc, #176]	; (80115ec <TIM_Base_SetConfig+0x118>)
 801153a:	4293      	cmp	r3, r2
 801153c:	d023      	beq.n	8011586 <TIM_Base_SetConfig+0xb2>
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	4a2b      	ldr	r2, [pc, #172]	; (80115f0 <TIM_Base_SetConfig+0x11c>)
 8011542:	4293      	cmp	r3, r2
 8011544:	d01f      	beq.n	8011586 <TIM_Base_SetConfig+0xb2>
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	4a2a      	ldr	r2, [pc, #168]	; (80115f4 <TIM_Base_SetConfig+0x120>)
 801154a:	4293      	cmp	r3, r2
 801154c:	d01b      	beq.n	8011586 <TIM_Base_SetConfig+0xb2>
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	4a29      	ldr	r2, [pc, #164]	; (80115f8 <TIM_Base_SetConfig+0x124>)
 8011552:	4293      	cmp	r3, r2
 8011554:	d017      	beq.n	8011586 <TIM_Base_SetConfig+0xb2>
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	4a28      	ldr	r2, [pc, #160]	; (80115fc <TIM_Base_SetConfig+0x128>)
 801155a:	4293      	cmp	r3, r2
 801155c:	d013      	beq.n	8011586 <TIM_Base_SetConfig+0xb2>
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	4a27      	ldr	r2, [pc, #156]	; (8011600 <TIM_Base_SetConfig+0x12c>)
 8011562:	4293      	cmp	r3, r2
 8011564:	d00f      	beq.n	8011586 <TIM_Base_SetConfig+0xb2>
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	4a26      	ldr	r2, [pc, #152]	; (8011604 <TIM_Base_SetConfig+0x130>)
 801156a:	4293      	cmp	r3, r2
 801156c:	d00b      	beq.n	8011586 <TIM_Base_SetConfig+0xb2>
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	4a25      	ldr	r2, [pc, #148]	; (8011608 <TIM_Base_SetConfig+0x134>)
 8011572:	4293      	cmp	r3, r2
 8011574:	d007      	beq.n	8011586 <TIM_Base_SetConfig+0xb2>
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	4a24      	ldr	r2, [pc, #144]	; (801160c <TIM_Base_SetConfig+0x138>)
 801157a:	4293      	cmp	r3, r2
 801157c:	d003      	beq.n	8011586 <TIM_Base_SetConfig+0xb2>
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	4a23      	ldr	r2, [pc, #140]	; (8011610 <TIM_Base_SetConfig+0x13c>)
 8011582:	4293      	cmp	r3, r2
 8011584:	d108      	bne.n	8011598 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801158c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801158e:	683b      	ldr	r3, [r7, #0]
 8011590:	68db      	ldr	r3, [r3, #12]
 8011592:	68fa      	ldr	r2, [r7, #12]
 8011594:	4313      	orrs	r3, r2
 8011596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	695b      	ldr	r3, [r3, #20]
 80115a2:	4313      	orrs	r3, r2
 80115a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	68fa      	ldr	r2, [r7, #12]
 80115aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80115ac:	683b      	ldr	r3, [r7, #0]
 80115ae:	689a      	ldr	r2, [r3, #8]
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80115b4:	683b      	ldr	r3, [r7, #0]
 80115b6:	681a      	ldr	r2, [r3, #0]
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	4a0a      	ldr	r2, [pc, #40]	; (80115e8 <TIM_Base_SetConfig+0x114>)
 80115c0:	4293      	cmp	r3, r2
 80115c2:	d003      	beq.n	80115cc <TIM_Base_SetConfig+0xf8>
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	4a0c      	ldr	r2, [pc, #48]	; (80115f8 <TIM_Base_SetConfig+0x124>)
 80115c8:	4293      	cmp	r3, r2
 80115ca:	d103      	bne.n	80115d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	691a      	ldr	r2, [r3, #16]
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	2201      	movs	r2, #1
 80115d8:	615a      	str	r2, [r3, #20]
}
 80115da:	bf00      	nop
 80115dc:	3714      	adds	r7, #20
 80115de:	46bd      	mov	sp, r7
 80115e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e4:	4770      	bx	lr
 80115e6:	bf00      	nop
 80115e8:	40010000 	.word	0x40010000
 80115ec:	40000400 	.word	0x40000400
 80115f0:	40000800 	.word	0x40000800
 80115f4:	40000c00 	.word	0x40000c00
 80115f8:	40010400 	.word	0x40010400
 80115fc:	40014000 	.word	0x40014000
 8011600:	40014400 	.word	0x40014400
 8011604:	40014800 	.word	0x40014800
 8011608:	40001800 	.word	0x40001800
 801160c:	40001c00 	.word	0x40001c00
 8011610:	40002000 	.word	0x40002000

08011614 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011614:	b480      	push	{r7}
 8011616:	b087      	sub	sp, #28
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
 801161c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	6a1b      	ldr	r3, [r3, #32]
 8011622:	f023 0201 	bic.w	r2, r3, #1
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6a1b      	ldr	r3, [r3, #32]
 801162e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	685b      	ldr	r3, [r3, #4]
 8011634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	699b      	ldr	r3, [r3, #24]
 801163a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	f023 0303 	bic.w	r3, r3, #3
 801164a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801164c:	683b      	ldr	r3, [r7, #0]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	68fa      	ldr	r2, [r7, #12]
 8011652:	4313      	orrs	r3, r2
 8011654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011656:	697b      	ldr	r3, [r7, #20]
 8011658:	f023 0302 	bic.w	r3, r3, #2
 801165c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801165e:	683b      	ldr	r3, [r7, #0]
 8011660:	689b      	ldr	r3, [r3, #8]
 8011662:	697a      	ldr	r2, [r7, #20]
 8011664:	4313      	orrs	r3, r2
 8011666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	4a20      	ldr	r2, [pc, #128]	; (80116ec <TIM_OC1_SetConfig+0xd8>)
 801166c:	4293      	cmp	r3, r2
 801166e:	d003      	beq.n	8011678 <TIM_OC1_SetConfig+0x64>
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	4a1f      	ldr	r2, [pc, #124]	; (80116f0 <TIM_OC1_SetConfig+0xdc>)
 8011674:	4293      	cmp	r3, r2
 8011676:	d10c      	bne.n	8011692 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011678:	697b      	ldr	r3, [r7, #20]
 801167a:	f023 0308 	bic.w	r3, r3, #8
 801167e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011680:	683b      	ldr	r3, [r7, #0]
 8011682:	68db      	ldr	r3, [r3, #12]
 8011684:	697a      	ldr	r2, [r7, #20]
 8011686:	4313      	orrs	r3, r2
 8011688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801168a:	697b      	ldr	r3, [r7, #20]
 801168c:	f023 0304 	bic.w	r3, r3, #4
 8011690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	4a15      	ldr	r2, [pc, #84]	; (80116ec <TIM_OC1_SetConfig+0xd8>)
 8011696:	4293      	cmp	r3, r2
 8011698:	d003      	beq.n	80116a2 <TIM_OC1_SetConfig+0x8e>
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	4a14      	ldr	r2, [pc, #80]	; (80116f0 <TIM_OC1_SetConfig+0xdc>)
 801169e:	4293      	cmp	r3, r2
 80116a0:	d111      	bne.n	80116c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80116a2:	693b      	ldr	r3, [r7, #16]
 80116a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80116a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80116aa:	693b      	ldr	r3, [r7, #16]
 80116ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80116b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	695b      	ldr	r3, [r3, #20]
 80116b6:	693a      	ldr	r2, [r7, #16]
 80116b8:	4313      	orrs	r3, r2
 80116ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	699b      	ldr	r3, [r3, #24]
 80116c0:	693a      	ldr	r2, [r7, #16]
 80116c2:	4313      	orrs	r3, r2
 80116c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	693a      	ldr	r2, [r7, #16]
 80116ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	68fa      	ldr	r2, [r7, #12]
 80116d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80116d2:	683b      	ldr	r3, [r7, #0]
 80116d4:	685a      	ldr	r2, [r3, #4]
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	697a      	ldr	r2, [r7, #20]
 80116de:	621a      	str	r2, [r3, #32]
}
 80116e0:	bf00      	nop
 80116e2:	371c      	adds	r7, #28
 80116e4:	46bd      	mov	sp, r7
 80116e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ea:	4770      	bx	lr
 80116ec:	40010000 	.word	0x40010000
 80116f0:	40010400 	.word	0x40010400

080116f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80116f4:	b480      	push	{r7}
 80116f6:	b087      	sub	sp, #28
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
 80116fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	6a1b      	ldr	r3, [r3, #32]
 8011702:	f023 0210 	bic.w	r2, r3, #16
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	6a1b      	ldr	r3, [r3, #32]
 801170e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	685b      	ldr	r3, [r3, #4]
 8011714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	699b      	ldr	r3, [r3, #24]
 801171a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801172a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	021b      	lsls	r3, r3, #8
 8011732:	68fa      	ldr	r2, [r7, #12]
 8011734:	4313      	orrs	r3, r2
 8011736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011738:	697b      	ldr	r3, [r7, #20]
 801173a:	f023 0320 	bic.w	r3, r3, #32
 801173e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011740:	683b      	ldr	r3, [r7, #0]
 8011742:	689b      	ldr	r3, [r3, #8]
 8011744:	011b      	lsls	r3, r3, #4
 8011746:	697a      	ldr	r2, [r7, #20]
 8011748:	4313      	orrs	r3, r2
 801174a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	4a22      	ldr	r2, [pc, #136]	; (80117d8 <TIM_OC2_SetConfig+0xe4>)
 8011750:	4293      	cmp	r3, r2
 8011752:	d003      	beq.n	801175c <TIM_OC2_SetConfig+0x68>
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	4a21      	ldr	r2, [pc, #132]	; (80117dc <TIM_OC2_SetConfig+0xe8>)
 8011758:	4293      	cmp	r3, r2
 801175a:	d10d      	bne.n	8011778 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011764:	683b      	ldr	r3, [r7, #0]
 8011766:	68db      	ldr	r3, [r3, #12]
 8011768:	011b      	lsls	r3, r3, #4
 801176a:	697a      	ldr	r2, [r7, #20]
 801176c:	4313      	orrs	r3, r2
 801176e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011770:	697b      	ldr	r3, [r7, #20]
 8011772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011776:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	4a17      	ldr	r2, [pc, #92]	; (80117d8 <TIM_OC2_SetConfig+0xe4>)
 801177c:	4293      	cmp	r3, r2
 801177e:	d003      	beq.n	8011788 <TIM_OC2_SetConfig+0x94>
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	4a16      	ldr	r2, [pc, #88]	; (80117dc <TIM_OC2_SetConfig+0xe8>)
 8011784:	4293      	cmp	r3, r2
 8011786:	d113      	bne.n	80117b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011788:	693b      	ldr	r3, [r7, #16]
 801178a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801178e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011790:	693b      	ldr	r3, [r7, #16]
 8011792:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011796:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011798:	683b      	ldr	r3, [r7, #0]
 801179a:	695b      	ldr	r3, [r3, #20]
 801179c:	009b      	lsls	r3, r3, #2
 801179e:	693a      	ldr	r2, [r7, #16]
 80117a0:	4313      	orrs	r3, r2
 80117a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80117a4:	683b      	ldr	r3, [r7, #0]
 80117a6:	699b      	ldr	r3, [r3, #24]
 80117a8:	009b      	lsls	r3, r3, #2
 80117aa:	693a      	ldr	r2, [r7, #16]
 80117ac:	4313      	orrs	r3, r2
 80117ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	693a      	ldr	r2, [r7, #16]
 80117b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	68fa      	ldr	r2, [r7, #12]
 80117ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	685a      	ldr	r2, [r3, #4]
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	697a      	ldr	r2, [r7, #20]
 80117c8:	621a      	str	r2, [r3, #32]
}
 80117ca:	bf00      	nop
 80117cc:	371c      	adds	r7, #28
 80117ce:	46bd      	mov	sp, r7
 80117d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d4:	4770      	bx	lr
 80117d6:	bf00      	nop
 80117d8:	40010000 	.word	0x40010000
 80117dc:	40010400 	.word	0x40010400

080117e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80117e0:	b480      	push	{r7}
 80117e2:	b087      	sub	sp, #28
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
 80117e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	6a1b      	ldr	r3, [r3, #32]
 80117ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	6a1b      	ldr	r3, [r3, #32]
 80117fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	685b      	ldr	r3, [r3, #4]
 8011800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	69db      	ldr	r3, [r3, #28]
 8011806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801180e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	f023 0303 	bic.w	r3, r3, #3
 8011816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011818:	683b      	ldr	r3, [r7, #0]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	68fa      	ldr	r2, [r7, #12]
 801181e:	4313      	orrs	r3, r2
 8011820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011822:	697b      	ldr	r3, [r7, #20]
 8011824:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	689b      	ldr	r3, [r3, #8]
 801182e:	021b      	lsls	r3, r3, #8
 8011830:	697a      	ldr	r2, [r7, #20]
 8011832:	4313      	orrs	r3, r2
 8011834:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	4a21      	ldr	r2, [pc, #132]	; (80118c0 <TIM_OC3_SetConfig+0xe0>)
 801183a:	4293      	cmp	r3, r2
 801183c:	d003      	beq.n	8011846 <TIM_OC3_SetConfig+0x66>
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	4a20      	ldr	r2, [pc, #128]	; (80118c4 <TIM_OC3_SetConfig+0xe4>)
 8011842:	4293      	cmp	r3, r2
 8011844:	d10d      	bne.n	8011862 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011846:	697b      	ldr	r3, [r7, #20]
 8011848:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801184c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	68db      	ldr	r3, [r3, #12]
 8011852:	021b      	lsls	r3, r3, #8
 8011854:	697a      	ldr	r2, [r7, #20]
 8011856:	4313      	orrs	r3, r2
 8011858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801185a:	697b      	ldr	r3, [r7, #20]
 801185c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	4a16      	ldr	r2, [pc, #88]	; (80118c0 <TIM_OC3_SetConfig+0xe0>)
 8011866:	4293      	cmp	r3, r2
 8011868:	d003      	beq.n	8011872 <TIM_OC3_SetConfig+0x92>
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	4a15      	ldr	r2, [pc, #84]	; (80118c4 <TIM_OC3_SetConfig+0xe4>)
 801186e:	4293      	cmp	r3, r2
 8011870:	d113      	bne.n	801189a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011872:	693b      	ldr	r3, [r7, #16]
 8011874:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801187a:	693b      	ldr	r3, [r7, #16]
 801187c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011882:	683b      	ldr	r3, [r7, #0]
 8011884:	695b      	ldr	r3, [r3, #20]
 8011886:	011b      	lsls	r3, r3, #4
 8011888:	693a      	ldr	r2, [r7, #16]
 801188a:	4313      	orrs	r3, r2
 801188c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	699b      	ldr	r3, [r3, #24]
 8011892:	011b      	lsls	r3, r3, #4
 8011894:	693a      	ldr	r2, [r7, #16]
 8011896:	4313      	orrs	r3, r2
 8011898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	693a      	ldr	r2, [r7, #16]
 801189e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	68fa      	ldr	r2, [r7, #12]
 80118a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	685a      	ldr	r2, [r3, #4]
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	697a      	ldr	r2, [r7, #20]
 80118b2:	621a      	str	r2, [r3, #32]
}
 80118b4:	bf00      	nop
 80118b6:	371c      	adds	r7, #28
 80118b8:	46bd      	mov	sp, r7
 80118ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118be:	4770      	bx	lr
 80118c0:	40010000 	.word	0x40010000
 80118c4:	40010400 	.word	0x40010400

080118c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80118c8:	b480      	push	{r7}
 80118ca:	b087      	sub	sp, #28
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
 80118d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	6a1b      	ldr	r3, [r3, #32]
 80118d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	6a1b      	ldr	r3, [r3, #32]
 80118e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	685b      	ldr	r3, [r3, #4]
 80118e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	69db      	ldr	r3, [r3, #28]
 80118ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80118f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80118fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	021b      	lsls	r3, r3, #8
 8011906:	68fa      	ldr	r2, [r7, #12]
 8011908:	4313      	orrs	r3, r2
 801190a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801190c:	693b      	ldr	r3, [r7, #16]
 801190e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011912:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011914:	683b      	ldr	r3, [r7, #0]
 8011916:	689b      	ldr	r3, [r3, #8]
 8011918:	031b      	lsls	r3, r3, #12
 801191a:	693a      	ldr	r2, [r7, #16]
 801191c:	4313      	orrs	r3, r2
 801191e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	4a12      	ldr	r2, [pc, #72]	; (801196c <TIM_OC4_SetConfig+0xa4>)
 8011924:	4293      	cmp	r3, r2
 8011926:	d003      	beq.n	8011930 <TIM_OC4_SetConfig+0x68>
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	4a11      	ldr	r2, [pc, #68]	; (8011970 <TIM_OC4_SetConfig+0xa8>)
 801192c:	4293      	cmp	r3, r2
 801192e:	d109      	bne.n	8011944 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011930:	697b      	ldr	r3, [r7, #20]
 8011932:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011936:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011938:	683b      	ldr	r3, [r7, #0]
 801193a:	695b      	ldr	r3, [r3, #20]
 801193c:	019b      	lsls	r3, r3, #6
 801193e:	697a      	ldr	r2, [r7, #20]
 8011940:	4313      	orrs	r3, r2
 8011942:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	697a      	ldr	r2, [r7, #20]
 8011948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	68fa      	ldr	r2, [r7, #12]
 801194e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011950:	683b      	ldr	r3, [r7, #0]
 8011952:	685a      	ldr	r2, [r3, #4]
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	693a      	ldr	r2, [r7, #16]
 801195c:	621a      	str	r2, [r3, #32]
}
 801195e:	bf00      	nop
 8011960:	371c      	adds	r7, #28
 8011962:	46bd      	mov	sp, r7
 8011964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011968:	4770      	bx	lr
 801196a:	bf00      	nop
 801196c:	40010000 	.word	0x40010000
 8011970:	40010400 	.word	0x40010400

08011974 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011974:	b480      	push	{r7}
 8011976:	b087      	sub	sp, #28
 8011978:	af00      	add	r7, sp, #0
 801197a:	60f8      	str	r0, [r7, #12]
 801197c:	60b9      	str	r1, [r7, #8]
 801197e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	6a1b      	ldr	r3, [r3, #32]
 8011984:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	6a1b      	ldr	r3, [r3, #32]
 801198a:	f023 0201 	bic.w	r2, r3, #1
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	699b      	ldr	r3, [r3, #24]
 8011996:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011998:	693b      	ldr	r3, [r7, #16]
 801199a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801199e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	011b      	lsls	r3, r3, #4
 80119a4:	693a      	ldr	r2, [r7, #16]
 80119a6:	4313      	orrs	r3, r2
 80119a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80119aa:	697b      	ldr	r3, [r7, #20]
 80119ac:	f023 030a 	bic.w	r3, r3, #10
 80119b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80119b2:	697a      	ldr	r2, [r7, #20]
 80119b4:	68bb      	ldr	r3, [r7, #8]
 80119b6:	4313      	orrs	r3, r2
 80119b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	693a      	ldr	r2, [r7, #16]
 80119be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	697a      	ldr	r2, [r7, #20]
 80119c4:	621a      	str	r2, [r3, #32]
}
 80119c6:	bf00      	nop
 80119c8:	371c      	adds	r7, #28
 80119ca:	46bd      	mov	sp, r7
 80119cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d0:	4770      	bx	lr

080119d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80119d2:	b480      	push	{r7}
 80119d4:	b087      	sub	sp, #28
 80119d6:	af00      	add	r7, sp, #0
 80119d8:	60f8      	str	r0, [r7, #12]
 80119da:	60b9      	str	r1, [r7, #8]
 80119dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	6a1b      	ldr	r3, [r3, #32]
 80119e2:	f023 0210 	bic.w	r2, r3, #16
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	699b      	ldr	r3, [r3, #24]
 80119ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	6a1b      	ldr	r3, [r3, #32]
 80119f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80119f6:	697b      	ldr	r3, [r7, #20]
 80119f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80119fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	031b      	lsls	r3, r3, #12
 8011a02:	697a      	ldr	r2, [r7, #20]
 8011a04:	4313      	orrs	r3, r2
 8011a06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011a08:	693b      	ldr	r3, [r7, #16]
 8011a0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011a0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011a10:	68bb      	ldr	r3, [r7, #8]
 8011a12:	011b      	lsls	r3, r3, #4
 8011a14:	693a      	ldr	r2, [r7, #16]
 8011a16:	4313      	orrs	r3, r2
 8011a18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	697a      	ldr	r2, [r7, #20]
 8011a1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	693a      	ldr	r2, [r7, #16]
 8011a24:	621a      	str	r2, [r3, #32]
}
 8011a26:	bf00      	nop
 8011a28:	371c      	adds	r7, #28
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a30:	4770      	bx	lr

08011a32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011a32:	b480      	push	{r7}
 8011a34:	b085      	sub	sp, #20
 8011a36:	af00      	add	r7, sp, #0
 8011a38:	6078      	str	r0, [r7, #4]
 8011a3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	689b      	ldr	r3, [r3, #8]
 8011a40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011a48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011a4a:	683a      	ldr	r2, [r7, #0]
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	4313      	orrs	r3, r2
 8011a50:	f043 0307 	orr.w	r3, r3, #7
 8011a54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	68fa      	ldr	r2, [r7, #12]
 8011a5a:	609a      	str	r2, [r3, #8]
}
 8011a5c:	bf00      	nop
 8011a5e:	3714      	adds	r7, #20
 8011a60:	46bd      	mov	sp, r7
 8011a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a66:	4770      	bx	lr

08011a68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011a68:	b480      	push	{r7}
 8011a6a:	b087      	sub	sp, #28
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	60f8      	str	r0, [r7, #12]
 8011a70:	60b9      	str	r1, [r7, #8]
 8011a72:	607a      	str	r2, [r7, #4]
 8011a74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	689b      	ldr	r3, [r3, #8]
 8011a7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011a7c:	697b      	ldr	r3, [r7, #20]
 8011a7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011a82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	021a      	lsls	r2, r3, #8
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	431a      	orrs	r2, r3
 8011a8c:	68bb      	ldr	r3, [r7, #8]
 8011a8e:	4313      	orrs	r3, r2
 8011a90:	697a      	ldr	r2, [r7, #20]
 8011a92:	4313      	orrs	r3, r2
 8011a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	697a      	ldr	r2, [r7, #20]
 8011a9a:	609a      	str	r2, [r3, #8]
}
 8011a9c:	bf00      	nop
 8011a9e:	371c      	adds	r7, #28
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa6:	4770      	bx	lr

08011aa8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011aa8:	b480      	push	{r7}
 8011aaa:	b087      	sub	sp, #28
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	60f8      	str	r0, [r7, #12]
 8011ab0:	60b9      	str	r1, [r7, #8]
 8011ab2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	f003 031f 	and.w	r3, r3, #31
 8011aba:	2201      	movs	r2, #1
 8011abc:	fa02 f303 	lsl.w	r3, r2, r3
 8011ac0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	6a1a      	ldr	r2, [r3, #32]
 8011ac6:	697b      	ldr	r3, [r7, #20]
 8011ac8:	43db      	mvns	r3, r3
 8011aca:	401a      	ands	r2, r3
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	6a1a      	ldr	r2, [r3, #32]
 8011ad4:	68bb      	ldr	r3, [r7, #8]
 8011ad6:	f003 031f 	and.w	r3, r3, #31
 8011ada:	6879      	ldr	r1, [r7, #4]
 8011adc:	fa01 f303 	lsl.w	r3, r1, r3
 8011ae0:	431a      	orrs	r2, r3
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	621a      	str	r2, [r3, #32]
}
 8011ae6:	bf00      	nop
 8011ae8:	371c      	adds	r7, #28
 8011aea:	46bd      	mov	sp, r7
 8011aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af0:	4770      	bx	lr
	...

08011af4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011af4:	b480      	push	{r7}
 8011af6:	b085      	sub	sp, #20
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
 8011afc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011b04:	2b01      	cmp	r3, #1
 8011b06:	d101      	bne.n	8011b0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011b08:	2302      	movs	r3, #2
 8011b0a:	e05a      	b.n	8011bc2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	2201      	movs	r2, #1
 8011b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2202      	movs	r2, #2
 8011b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	685b      	ldr	r3, [r3, #4]
 8011b22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	689b      	ldr	r3, [r3, #8]
 8011b2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011b32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011b34:	683b      	ldr	r3, [r7, #0]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	68fa      	ldr	r2, [r7, #12]
 8011b3a:	4313      	orrs	r3, r2
 8011b3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	68fa      	ldr	r2, [r7, #12]
 8011b44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	4a21      	ldr	r2, [pc, #132]	; (8011bd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8011b4c:	4293      	cmp	r3, r2
 8011b4e:	d022      	beq.n	8011b96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011b58:	d01d      	beq.n	8011b96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	4a1d      	ldr	r2, [pc, #116]	; (8011bd4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8011b60:	4293      	cmp	r3, r2
 8011b62:	d018      	beq.n	8011b96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	4a1b      	ldr	r2, [pc, #108]	; (8011bd8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8011b6a:	4293      	cmp	r3, r2
 8011b6c:	d013      	beq.n	8011b96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	4a1a      	ldr	r2, [pc, #104]	; (8011bdc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8011b74:	4293      	cmp	r3, r2
 8011b76:	d00e      	beq.n	8011b96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	4a18      	ldr	r2, [pc, #96]	; (8011be0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8011b7e:	4293      	cmp	r3, r2
 8011b80:	d009      	beq.n	8011b96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	4a17      	ldr	r2, [pc, #92]	; (8011be4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8011b88:	4293      	cmp	r3, r2
 8011b8a:	d004      	beq.n	8011b96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	4a15      	ldr	r2, [pc, #84]	; (8011be8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8011b92:	4293      	cmp	r3, r2
 8011b94:	d10c      	bne.n	8011bb0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011b96:	68bb      	ldr	r3, [r7, #8]
 8011b98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011b9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011b9e:	683b      	ldr	r3, [r7, #0]
 8011ba0:	685b      	ldr	r3, [r3, #4]
 8011ba2:	68ba      	ldr	r2, [r7, #8]
 8011ba4:	4313      	orrs	r3, r2
 8011ba6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	68ba      	ldr	r2, [r7, #8]
 8011bae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	2201      	movs	r2, #1
 8011bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	2200      	movs	r2, #0
 8011bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011bc0:	2300      	movs	r3, #0
}
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	3714      	adds	r7, #20
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bcc:	4770      	bx	lr
 8011bce:	bf00      	nop
 8011bd0:	40010000 	.word	0x40010000
 8011bd4:	40000400 	.word	0x40000400
 8011bd8:	40000800 	.word	0x40000800
 8011bdc:	40000c00 	.word	0x40000c00
 8011be0:	40010400 	.word	0x40010400
 8011be4:	40014000 	.word	0x40014000
 8011be8:	40001800 	.word	0x40001800

08011bec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011bec:	b480      	push	{r7}
 8011bee:	b083      	sub	sp, #12
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011bf4:	bf00      	nop
 8011bf6:	370c      	adds	r7, #12
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfe:	4770      	bx	lr

08011c00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011c00:	b480      	push	{r7}
 8011c02:	b083      	sub	sp, #12
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011c08:	bf00      	nop
 8011c0a:	370c      	adds	r7, #12
 8011c0c:	46bd      	mov	sp, r7
 8011c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c12:	4770      	bx	lr

08011c14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b082      	sub	sp, #8
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d101      	bne.n	8011c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011c22:	2301      	movs	r3, #1
 8011c24:	e03f      	b.n	8011ca6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011c2c:	b2db      	uxtb	r3, r3
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d106      	bne.n	8011c40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	2200      	movs	r2, #0
 8011c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011c3a:	6878      	ldr	r0, [r7, #4]
 8011c3c:	f7f1 ff40 	bl	8003ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	2224      	movs	r2, #36	; 0x24
 8011c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	68da      	ldr	r2, [r3, #12]
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011c56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011c58:	6878      	ldr	r0, [r7, #4]
 8011c5a:	f000 f9cb 	bl	8011ff4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	691a      	ldr	r2, [r3, #16]
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011c6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	695a      	ldr	r2, [r3, #20]
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011c7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	68da      	ldr	r2, [r3, #12]
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011c8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	2200      	movs	r2, #0
 8011c92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	2220      	movs	r2, #32
 8011c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	2220      	movs	r2, #32
 8011ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8011ca4:	2300      	movs	r3, #0
}
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	3708      	adds	r7, #8
 8011caa:	46bd      	mov	sp, r7
 8011cac:	bd80      	pop	{r7, pc}

08011cae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011cae:	b580      	push	{r7, lr}
 8011cb0:	b08a      	sub	sp, #40	; 0x28
 8011cb2:	af02      	add	r7, sp, #8
 8011cb4:	60f8      	str	r0, [r7, #12]
 8011cb6:	60b9      	str	r1, [r7, #8]
 8011cb8:	603b      	str	r3, [r7, #0]
 8011cba:	4613      	mov	r3, r2
 8011cbc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011cc8:	b2db      	uxtb	r3, r3
 8011cca:	2b20      	cmp	r3, #32
 8011ccc:	d17c      	bne.n	8011dc8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8011cce:	68bb      	ldr	r3, [r7, #8]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d002      	beq.n	8011cda <HAL_UART_Transmit+0x2c>
 8011cd4:	88fb      	ldrh	r3, [r7, #6]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d101      	bne.n	8011cde <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8011cda:	2301      	movs	r3, #1
 8011cdc:	e075      	b.n	8011dca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011ce4:	2b01      	cmp	r3, #1
 8011ce6:	d101      	bne.n	8011cec <HAL_UART_Transmit+0x3e>
 8011ce8:	2302      	movs	r3, #2
 8011cea:	e06e      	b.n	8011dca <HAL_UART_Transmit+0x11c>
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	2201      	movs	r2, #1
 8011cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	2221      	movs	r2, #33	; 0x21
 8011cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011d02:	f7fa fc19 	bl	800c538 <HAL_GetTick>
 8011d06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	88fa      	ldrh	r2, [r7, #6]
 8011d0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	88fa      	ldrh	r2, [r7, #6]
 8011d12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	689b      	ldr	r3, [r3, #8]
 8011d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011d1c:	d108      	bne.n	8011d30 <HAL_UART_Transmit+0x82>
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	691b      	ldr	r3, [r3, #16]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d104      	bne.n	8011d30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8011d26:	2300      	movs	r3, #0
 8011d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8011d2a:	68bb      	ldr	r3, [r7, #8]
 8011d2c:	61bb      	str	r3, [r7, #24]
 8011d2e:	e003      	b.n	8011d38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8011d30:	68bb      	ldr	r3, [r7, #8]
 8011d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011d34:	2300      	movs	r3, #0
 8011d36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	2200      	movs	r2, #0
 8011d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8011d40:	e02a      	b.n	8011d98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	9300      	str	r3, [sp, #0]
 8011d46:	697b      	ldr	r3, [r7, #20]
 8011d48:	2200      	movs	r2, #0
 8011d4a:	2180      	movs	r1, #128	; 0x80
 8011d4c:	68f8      	ldr	r0, [r7, #12]
 8011d4e:	f000 f8e2 	bl	8011f16 <UART_WaitOnFlagUntilTimeout>
 8011d52:	4603      	mov	r3, r0
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d001      	beq.n	8011d5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8011d58:	2303      	movs	r3, #3
 8011d5a:	e036      	b.n	8011dca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8011d5c:	69fb      	ldr	r3, [r7, #28]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d10b      	bne.n	8011d7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011d62:	69bb      	ldr	r3, [r7, #24]
 8011d64:	881b      	ldrh	r3, [r3, #0]
 8011d66:	461a      	mov	r2, r3
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011d70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8011d72:	69bb      	ldr	r3, [r7, #24]
 8011d74:	3302      	adds	r3, #2
 8011d76:	61bb      	str	r3, [r7, #24]
 8011d78:	e007      	b.n	8011d8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8011d7a:	69fb      	ldr	r3, [r7, #28]
 8011d7c:	781a      	ldrb	r2, [r3, #0]
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8011d84:	69fb      	ldr	r3, [r7, #28]
 8011d86:	3301      	adds	r3, #1
 8011d88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011d8e:	b29b      	uxth	r3, r3
 8011d90:	3b01      	subs	r3, #1
 8011d92:	b29a      	uxth	r2, r3
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011d9c:	b29b      	uxth	r3, r3
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d1cf      	bne.n	8011d42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011da2:	683b      	ldr	r3, [r7, #0]
 8011da4:	9300      	str	r3, [sp, #0]
 8011da6:	697b      	ldr	r3, [r7, #20]
 8011da8:	2200      	movs	r2, #0
 8011daa:	2140      	movs	r1, #64	; 0x40
 8011dac:	68f8      	ldr	r0, [r7, #12]
 8011dae:	f000 f8b2 	bl	8011f16 <UART_WaitOnFlagUntilTimeout>
 8011db2:	4603      	mov	r3, r0
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d001      	beq.n	8011dbc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8011db8:	2303      	movs	r3, #3
 8011dba:	e006      	b.n	8011dca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	2220      	movs	r2, #32
 8011dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	e000      	b.n	8011dca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8011dc8:	2302      	movs	r3, #2
  }
}
 8011dca:	4618      	mov	r0, r3
 8011dcc:	3720      	adds	r7, #32
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	bd80      	pop	{r7, pc}

08011dd2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011dd2:	b580      	push	{r7, lr}
 8011dd4:	b08a      	sub	sp, #40	; 0x28
 8011dd6:	af02      	add	r7, sp, #8
 8011dd8:	60f8      	str	r0, [r7, #12]
 8011dda:	60b9      	str	r1, [r7, #8]
 8011ddc:	603b      	str	r3, [r7, #0]
 8011dde:	4613      	mov	r3, r2
 8011de0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8011de2:	2300      	movs	r3, #0
 8011de4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011dec:	b2db      	uxtb	r3, r3
 8011dee:	2b20      	cmp	r3, #32
 8011df0:	f040 808c 	bne.w	8011f0c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8011df4:	68bb      	ldr	r3, [r7, #8]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d002      	beq.n	8011e00 <HAL_UART_Receive+0x2e>
 8011dfa:	88fb      	ldrh	r3, [r7, #6]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d101      	bne.n	8011e04 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8011e00:	2301      	movs	r3, #1
 8011e02:	e084      	b.n	8011f0e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011e0a:	2b01      	cmp	r3, #1
 8011e0c:	d101      	bne.n	8011e12 <HAL_UART_Receive+0x40>
 8011e0e:	2302      	movs	r3, #2
 8011e10:	e07d      	b.n	8011f0e <HAL_UART_Receive+0x13c>
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	2201      	movs	r2, #1
 8011e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	2200      	movs	r2, #0
 8011e1e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	2222      	movs	r2, #34	; 0x22
 8011e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011e2e:	f7fa fb83 	bl	800c538 <HAL_GetTick>
 8011e32:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	88fa      	ldrh	r2, [r7, #6]
 8011e38:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	88fa      	ldrh	r2, [r7, #6]
 8011e3e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	689b      	ldr	r3, [r3, #8]
 8011e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011e48:	d108      	bne.n	8011e5c <HAL_UART_Receive+0x8a>
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	691b      	ldr	r3, [r3, #16]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d104      	bne.n	8011e5c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8011e52:	2300      	movs	r3, #0
 8011e54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8011e56:	68bb      	ldr	r3, [r7, #8]
 8011e58:	61bb      	str	r3, [r7, #24]
 8011e5a:	e003      	b.n	8011e64 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8011e5c:	68bb      	ldr	r3, [r7, #8]
 8011e5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011e60:	2300      	movs	r3, #0
 8011e62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	2200      	movs	r2, #0
 8011e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8011e6c:	e043      	b.n	8011ef6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	9300      	str	r3, [sp, #0]
 8011e72:	697b      	ldr	r3, [r7, #20]
 8011e74:	2200      	movs	r2, #0
 8011e76:	2120      	movs	r1, #32
 8011e78:	68f8      	ldr	r0, [r7, #12]
 8011e7a:	f000 f84c 	bl	8011f16 <UART_WaitOnFlagUntilTimeout>
 8011e7e:	4603      	mov	r3, r0
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d001      	beq.n	8011e88 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8011e84:	2303      	movs	r3, #3
 8011e86:	e042      	b.n	8011f0e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8011e88:	69fb      	ldr	r3, [r7, #28]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d10c      	bne.n	8011ea8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	685b      	ldr	r3, [r3, #4]
 8011e94:	b29b      	uxth	r3, r3
 8011e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e9a:	b29a      	uxth	r2, r3
 8011e9c:	69bb      	ldr	r3, [r7, #24]
 8011e9e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8011ea0:	69bb      	ldr	r3, [r7, #24]
 8011ea2:	3302      	adds	r3, #2
 8011ea4:	61bb      	str	r3, [r7, #24]
 8011ea6:	e01f      	b.n	8011ee8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	689b      	ldr	r3, [r3, #8]
 8011eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011eb0:	d007      	beq.n	8011ec2 <HAL_UART_Receive+0xf0>
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	689b      	ldr	r3, [r3, #8]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d10a      	bne.n	8011ed0 <HAL_UART_Receive+0xfe>
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	691b      	ldr	r3, [r3, #16]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d106      	bne.n	8011ed0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	685b      	ldr	r3, [r3, #4]
 8011ec8:	b2da      	uxtb	r2, r3
 8011eca:	69fb      	ldr	r3, [r7, #28]
 8011ecc:	701a      	strb	r2, [r3, #0]
 8011ece:	e008      	b.n	8011ee2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	685b      	ldr	r3, [r3, #4]
 8011ed6:	b2db      	uxtb	r3, r3
 8011ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011edc:	b2da      	uxtb	r2, r3
 8011ede:	69fb      	ldr	r3, [r7, #28]
 8011ee0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8011ee2:	69fb      	ldr	r3, [r7, #28]
 8011ee4:	3301      	adds	r3, #1
 8011ee6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011eec:	b29b      	uxth	r3, r3
 8011eee:	3b01      	subs	r3, #1
 8011ef0:	b29a      	uxth	r2, r3
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011efa:	b29b      	uxth	r3, r3
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d1b6      	bne.n	8011e6e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	2220      	movs	r2, #32
 8011f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8011f08:	2300      	movs	r3, #0
 8011f0a:	e000      	b.n	8011f0e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8011f0c:	2302      	movs	r3, #2
  }
}
 8011f0e:	4618      	mov	r0, r3
 8011f10:	3720      	adds	r7, #32
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd80      	pop	{r7, pc}

08011f16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8011f16:	b580      	push	{r7, lr}
 8011f18:	b090      	sub	sp, #64	; 0x40
 8011f1a:	af00      	add	r7, sp, #0
 8011f1c:	60f8      	str	r0, [r7, #12]
 8011f1e:	60b9      	str	r1, [r7, #8]
 8011f20:	603b      	str	r3, [r7, #0]
 8011f22:	4613      	mov	r3, r2
 8011f24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011f26:	e050      	b.n	8011fca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f2e:	d04c      	beq.n	8011fca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d007      	beq.n	8011f46 <UART_WaitOnFlagUntilTimeout+0x30>
 8011f36:	f7fa faff 	bl	800c538 <HAL_GetTick>
 8011f3a:	4602      	mov	r2, r0
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	1ad3      	subs	r3, r2, r3
 8011f40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f42:	429a      	cmp	r2, r3
 8011f44:	d241      	bcs.n	8011fca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	330c      	adds	r3, #12
 8011f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f50:	e853 3f00 	ldrex	r3, [r3]
 8011f54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	330c      	adds	r3, #12
 8011f64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011f66:	637a      	str	r2, [r7, #52]	; 0x34
 8011f68:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011f6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f6e:	e841 2300 	strex	r3, r2, [r1]
 8011f72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d1e5      	bne.n	8011f46 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	3314      	adds	r3, #20
 8011f80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f82:	697b      	ldr	r3, [r7, #20]
 8011f84:	e853 3f00 	ldrex	r3, [r3]
 8011f88:	613b      	str	r3, [r7, #16]
   return(result);
 8011f8a:	693b      	ldr	r3, [r7, #16]
 8011f8c:	f023 0301 	bic.w	r3, r3, #1
 8011f90:	63bb      	str	r3, [r7, #56]	; 0x38
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	3314      	adds	r3, #20
 8011f98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f9a:	623a      	str	r2, [r7, #32]
 8011f9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f9e:	69f9      	ldr	r1, [r7, #28]
 8011fa0:	6a3a      	ldr	r2, [r7, #32]
 8011fa2:	e841 2300 	strex	r3, r2, [r1]
 8011fa6:	61bb      	str	r3, [r7, #24]
   return(result);
 8011fa8:	69bb      	ldr	r3, [r7, #24]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d1e5      	bne.n	8011f7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	2220      	movs	r2, #32
 8011fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	2220      	movs	r2, #32
 8011fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8011fc6:	2303      	movs	r3, #3
 8011fc8:	e00f      	b.n	8011fea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	681a      	ldr	r2, [r3, #0]
 8011fd0:	68bb      	ldr	r3, [r7, #8]
 8011fd2:	4013      	ands	r3, r2
 8011fd4:	68ba      	ldr	r2, [r7, #8]
 8011fd6:	429a      	cmp	r2, r3
 8011fd8:	bf0c      	ite	eq
 8011fda:	2301      	moveq	r3, #1
 8011fdc:	2300      	movne	r3, #0
 8011fde:	b2db      	uxtb	r3, r3
 8011fe0:	461a      	mov	r2, r3
 8011fe2:	79fb      	ldrb	r3, [r7, #7]
 8011fe4:	429a      	cmp	r2, r3
 8011fe6:	d09f      	beq.n	8011f28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011fe8:	2300      	movs	r3, #0
}
 8011fea:	4618      	mov	r0, r3
 8011fec:	3740      	adds	r7, #64	; 0x40
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bd80      	pop	{r7, pc}
	...

08011ff4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ff8:	b09f      	sub	sp, #124	; 0x7c
 8011ffa:	af00      	add	r7, sp, #0
 8011ffc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	691b      	ldr	r3, [r3, #16]
 8012004:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8012008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801200a:	68d9      	ldr	r1, [r3, #12]
 801200c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801200e:	681a      	ldr	r2, [r3, #0]
 8012010:	ea40 0301 	orr.w	r3, r0, r1
 8012014:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8012016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012018:	689a      	ldr	r2, [r3, #8]
 801201a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801201c:	691b      	ldr	r3, [r3, #16]
 801201e:	431a      	orrs	r2, r3
 8012020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012022:	695b      	ldr	r3, [r3, #20]
 8012024:	431a      	orrs	r2, r3
 8012026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012028:	69db      	ldr	r3, [r3, #28]
 801202a:	4313      	orrs	r3, r2
 801202c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 801202e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	68db      	ldr	r3, [r3, #12]
 8012034:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8012038:	f021 010c 	bic.w	r1, r1, #12
 801203c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801203e:	681a      	ldr	r2, [r3, #0]
 8012040:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012042:	430b      	orrs	r3, r1
 8012044:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8012046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	695b      	ldr	r3, [r3, #20]
 801204c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8012050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012052:	6999      	ldr	r1, [r3, #24]
 8012054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012056:	681a      	ldr	r2, [r3, #0]
 8012058:	ea40 0301 	orr.w	r3, r0, r1
 801205c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801205e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012060:	681a      	ldr	r2, [r3, #0]
 8012062:	4bc5      	ldr	r3, [pc, #788]	; (8012378 <UART_SetConfig+0x384>)
 8012064:	429a      	cmp	r2, r3
 8012066:	d004      	beq.n	8012072 <UART_SetConfig+0x7e>
 8012068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801206a:	681a      	ldr	r2, [r3, #0]
 801206c:	4bc3      	ldr	r3, [pc, #780]	; (801237c <UART_SetConfig+0x388>)
 801206e:	429a      	cmp	r2, r3
 8012070:	d103      	bne.n	801207a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8012072:	f7fc ff59 	bl	800ef28 <HAL_RCC_GetPCLK2Freq>
 8012076:	6778      	str	r0, [r7, #116]	; 0x74
 8012078:	e002      	b.n	8012080 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801207a:	f7fc ff41 	bl	800ef00 <HAL_RCC_GetPCLK1Freq>
 801207e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012082:	69db      	ldr	r3, [r3, #28]
 8012084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012088:	f040 80b6 	bne.w	80121f8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801208c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801208e:	461c      	mov	r4, r3
 8012090:	f04f 0500 	mov.w	r5, #0
 8012094:	4622      	mov	r2, r4
 8012096:	462b      	mov	r3, r5
 8012098:	1891      	adds	r1, r2, r2
 801209a:	6439      	str	r1, [r7, #64]	; 0x40
 801209c:	415b      	adcs	r3, r3
 801209e:	647b      	str	r3, [r7, #68]	; 0x44
 80120a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80120a4:	1912      	adds	r2, r2, r4
 80120a6:	eb45 0303 	adc.w	r3, r5, r3
 80120aa:	f04f 0000 	mov.w	r0, #0
 80120ae:	f04f 0100 	mov.w	r1, #0
 80120b2:	00d9      	lsls	r1, r3, #3
 80120b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80120b8:	00d0      	lsls	r0, r2, #3
 80120ba:	4602      	mov	r2, r0
 80120bc:	460b      	mov	r3, r1
 80120be:	1911      	adds	r1, r2, r4
 80120c0:	6639      	str	r1, [r7, #96]	; 0x60
 80120c2:	416b      	adcs	r3, r5
 80120c4:	667b      	str	r3, [r7, #100]	; 0x64
 80120c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80120c8:	685b      	ldr	r3, [r3, #4]
 80120ca:	461a      	mov	r2, r3
 80120cc:	f04f 0300 	mov.w	r3, #0
 80120d0:	1891      	adds	r1, r2, r2
 80120d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80120d4:	415b      	adcs	r3, r3
 80120d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80120d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80120dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80120e0:	f7ee fe42 	bl	8000d68 <__aeabi_uldivmod>
 80120e4:	4602      	mov	r2, r0
 80120e6:	460b      	mov	r3, r1
 80120e8:	4ba5      	ldr	r3, [pc, #660]	; (8012380 <UART_SetConfig+0x38c>)
 80120ea:	fba3 2302 	umull	r2, r3, r3, r2
 80120ee:	095b      	lsrs	r3, r3, #5
 80120f0:	011e      	lsls	r6, r3, #4
 80120f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80120f4:	461c      	mov	r4, r3
 80120f6:	f04f 0500 	mov.w	r5, #0
 80120fa:	4622      	mov	r2, r4
 80120fc:	462b      	mov	r3, r5
 80120fe:	1891      	adds	r1, r2, r2
 8012100:	6339      	str	r1, [r7, #48]	; 0x30
 8012102:	415b      	adcs	r3, r3
 8012104:	637b      	str	r3, [r7, #52]	; 0x34
 8012106:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801210a:	1912      	adds	r2, r2, r4
 801210c:	eb45 0303 	adc.w	r3, r5, r3
 8012110:	f04f 0000 	mov.w	r0, #0
 8012114:	f04f 0100 	mov.w	r1, #0
 8012118:	00d9      	lsls	r1, r3, #3
 801211a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801211e:	00d0      	lsls	r0, r2, #3
 8012120:	4602      	mov	r2, r0
 8012122:	460b      	mov	r3, r1
 8012124:	1911      	adds	r1, r2, r4
 8012126:	65b9      	str	r1, [r7, #88]	; 0x58
 8012128:	416b      	adcs	r3, r5
 801212a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801212c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801212e:	685b      	ldr	r3, [r3, #4]
 8012130:	461a      	mov	r2, r3
 8012132:	f04f 0300 	mov.w	r3, #0
 8012136:	1891      	adds	r1, r2, r2
 8012138:	62b9      	str	r1, [r7, #40]	; 0x28
 801213a:	415b      	adcs	r3, r3
 801213c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801213e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012142:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8012146:	f7ee fe0f 	bl	8000d68 <__aeabi_uldivmod>
 801214a:	4602      	mov	r2, r0
 801214c:	460b      	mov	r3, r1
 801214e:	4b8c      	ldr	r3, [pc, #560]	; (8012380 <UART_SetConfig+0x38c>)
 8012150:	fba3 1302 	umull	r1, r3, r3, r2
 8012154:	095b      	lsrs	r3, r3, #5
 8012156:	2164      	movs	r1, #100	; 0x64
 8012158:	fb01 f303 	mul.w	r3, r1, r3
 801215c:	1ad3      	subs	r3, r2, r3
 801215e:	00db      	lsls	r3, r3, #3
 8012160:	3332      	adds	r3, #50	; 0x32
 8012162:	4a87      	ldr	r2, [pc, #540]	; (8012380 <UART_SetConfig+0x38c>)
 8012164:	fba2 2303 	umull	r2, r3, r2, r3
 8012168:	095b      	lsrs	r3, r3, #5
 801216a:	005b      	lsls	r3, r3, #1
 801216c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8012170:	441e      	add	r6, r3
 8012172:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012174:	4618      	mov	r0, r3
 8012176:	f04f 0100 	mov.w	r1, #0
 801217a:	4602      	mov	r2, r0
 801217c:	460b      	mov	r3, r1
 801217e:	1894      	adds	r4, r2, r2
 8012180:	623c      	str	r4, [r7, #32]
 8012182:	415b      	adcs	r3, r3
 8012184:	627b      	str	r3, [r7, #36]	; 0x24
 8012186:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801218a:	1812      	adds	r2, r2, r0
 801218c:	eb41 0303 	adc.w	r3, r1, r3
 8012190:	f04f 0400 	mov.w	r4, #0
 8012194:	f04f 0500 	mov.w	r5, #0
 8012198:	00dd      	lsls	r5, r3, #3
 801219a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801219e:	00d4      	lsls	r4, r2, #3
 80121a0:	4622      	mov	r2, r4
 80121a2:	462b      	mov	r3, r5
 80121a4:	1814      	adds	r4, r2, r0
 80121a6:	653c      	str	r4, [r7, #80]	; 0x50
 80121a8:	414b      	adcs	r3, r1
 80121aa:	657b      	str	r3, [r7, #84]	; 0x54
 80121ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80121ae:	685b      	ldr	r3, [r3, #4]
 80121b0:	461a      	mov	r2, r3
 80121b2:	f04f 0300 	mov.w	r3, #0
 80121b6:	1891      	adds	r1, r2, r2
 80121b8:	61b9      	str	r1, [r7, #24]
 80121ba:	415b      	adcs	r3, r3
 80121bc:	61fb      	str	r3, [r7, #28]
 80121be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80121c2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80121c6:	f7ee fdcf 	bl	8000d68 <__aeabi_uldivmod>
 80121ca:	4602      	mov	r2, r0
 80121cc:	460b      	mov	r3, r1
 80121ce:	4b6c      	ldr	r3, [pc, #432]	; (8012380 <UART_SetConfig+0x38c>)
 80121d0:	fba3 1302 	umull	r1, r3, r3, r2
 80121d4:	095b      	lsrs	r3, r3, #5
 80121d6:	2164      	movs	r1, #100	; 0x64
 80121d8:	fb01 f303 	mul.w	r3, r1, r3
 80121dc:	1ad3      	subs	r3, r2, r3
 80121de:	00db      	lsls	r3, r3, #3
 80121e0:	3332      	adds	r3, #50	; 0x32
 80121e2:	4a67      	ldr	r2, [pc, #412]	; (8012380 <UART_SetConfig+0x38c>)
 80121e4:	fba2 2303 	umull	r2, r3, r2, r3
 80121e8:	095b      	lsrs	r3, r3, #5
 80121ea:	f003 0207 	and.w	r2, r3, #7
 80121ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	4432      	add	r2, r6
 80121f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80121f6:	e0b9      	b.n	801236c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80121f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80121fa:	461c      	mov	r4, r3
 80121fc:	f04f 0500 	mov.w	r5, #0
 8012200:	4622      	mov	r2, r4
 8012202:	462b      	mov	r3, r5
 8012204:	1891      	adds	r1, r2, r2
 8012206:	6139      	str	r1, [r7, #16]
 8012208:	415b      	adcs	r3, r3
 801220a:	617b      	str	r3, [r7, #20]
 801220c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012210:	1912      	adds	r2, r2, r4
 8012212:	eb45 0303 	adc.w	r3, r5, r3
 8012216:	f04f 0000 	mov.w	r0, #0
 801221a:	f04f 0100 	mov.w	r1, #0
 801221e:	00d9      	lsls	r1, r3, #3
 8012220:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8012224:	00d0      	lsls	r0, r2, #3
 8012226:	4602      	mov	r2, r0
 8012228:	460b      	mov	r3, r1
 801222a:	eb12 0804 	adds.w	r8, r2, r4
 801222e:	eb43 0905 	adc.w	r9, r3, r5
 8012232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012234:	685b      	ldr	r3, [r3, #4]
 8012236:	4618      	mov	r0, r3
 8012238:	f04f 0100 	mov.w	r1, #0
 801223c:	f04f 0200 	mov.w	r2, #0
 8012240:	f04f 0300 	mov.w	r3, #0
 8012244:	008b      	lsls	r3, r1, #2
 8012246:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801224a:	0082      	lsls	r2, r0, #2
 801224c:	4640      	mov	r0, r8
 801224e:	4649      	mov	r1, r9
 8012250:	f7ee fd8a 	bl	8000d68 <__aeabi_uldivmod>
 8012254:	4602      	mov	r2, r0
 8012256:	460b      	mov	r3, r1
 8012258:	4b49      	ldr	r3, [pc, #292]	; (8012380 <UART_SetConfig+0x38c>)
 801225a:	fba3 2302 	umull	r2, r3, r3, r2
 801225e:	095b      	lsrs	r3, r3, #5
 8012260:	011e      	lsls	r6, r3, #4
 8012262:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012264:	4618      	mov	r0, r3
 8012266:	f04f 0100 	mov.w	r1, #0
 801226a:	4602      	mov	r2, r0
 801226c:	460b      	mov	r3, r1
 801226e:	1894      	adds	r4, r2, r2
 8012270:	60bc      	str	r4, [r7, #8]
 8012272:	415b      	adcs	r3, r3
 8012274:	60fb      	str	r3, [r7, #12]
 8012276:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801227a:	1812      	adds	r2, r2, r0
 801227c:	eb41 0303 	adc.w	r3, r1, r3
 8012280:	f04f 0400 	mov.w	r4, #0
 8012284:	f04f 0500 	mov.w	r5, #0
 8012288:	00dd      	lsls	r5, r3, #3
 801228a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801228e:	00d4      	lsls	r4, r2, #3
 8012290:	4622      	mov	r2, r4
 8012292:	462b      	mov	r3, r5
 8012294:	1814      	adds	r4, r2, r0
 8012296:	64bc      	str	r4, [r7, #72]	; 0x48
 8012298:	414b      	adcs	r3, r1
 801229a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801229c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801229e:	685b      	ldr	r3, [r3, #4]
 80122a0:	4618      	mov	r0, r3
 80122a2:	f04f 0100 	mov.w	r1, #0
 80122a6:	f04f 0200 	mov.w	r2, #0
 80122aa:	f04f 0300 	mov.w	r3, #0
 80122ae:	008b      	lsls	r3, r1, #2
 80122b0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80122b4:	0082      	lsls	r2, r0, #2
 80122b6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80122ba:	f7ee fd55 	bl	8000d68 <__aeabi_uldivmod>
 80122be:	4602      	mov	r2, r0
 80122c0:	460b      	mov	r3, r1
 80122c2:	4b2f      	ldr	r3, [pc, #188]	; (8012380 <UART_SetConfig+0x38c>)
 80122c4:	fba3 1302 	umull	r1, r3, r3, r2
 80122c8:	095b      	lsrs	r3, r3, #5
 80122ca:	2164      	movs	r1, #100	; 0x64
 80122cc:	fb01 f303 	mul.w	r3, r1, r3
 80122d0:	1ad3      	subs	r3, r2, r3
 80122d2:	011b      	lsls	r3, r3, #4
 80122d4:	3332      	adds	r3, #50	; 0x32
 80122d6:	4a2a      	ldr	r2, [pc, #168]	; (8012380 <UART_SetConfig+0x38c>)
 80122d8:	fba2 2303 	umull	r2, r3, r2, r3
 80122dc:	095b      	lsrs	r3, r3, #5
 80122de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80122e2:	441e      	add	r6, r3
 80122e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80122e6:	4618      	mov	r0, r3
 80122e8:	f04f 0100 	mov.w	r1, #0
 80122ec:	4602      	mov	r2, r0
 80122ee:	460b      	mov	r3, r1
 80122f0:	1894      	adds	r4, r2, r2
 80122f2:	603c      	str	r4, [r7, #0]
 80122f4:	415b      	adcs	r3, r3
 80122f6:	607b      	str	r3, [r7, #4]
 80122f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80122fc:	1812      	adds	r2, r2, r0
 80122fe:	eb41 0303 	adc.w	r3, r1, r3
 8012302:	f04f 0400 	mov.w	r4, #0
 8012306:	f04f 0500 	mov.w	r5, #0
 801230a:	00dd      	lsls	r5, r3, #3
 801230c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8012310:	00d4      	lsls	r4, r2, #3
 8012312:	4622      	mov	r2, r4
 8012314:	462b      	mov	r3, r5
 8012316:	eb12 0a00 	adds.w	sl, r2, r0
 801231a:	eb43 0b01 	adc.w	fp, r3, r1
 801231e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012320:	685b      	ldr	r3, [r3, #4]
 8012322:	4618      	mov	r0, r3
 8012324:	f04f 0100 	mov.w	r1, #0
 8012328:	f04f 0200 	mov.w	r2, #0
 801232c:	f04f 0300 	mov.w	r3, #0
 8012330:	008b      	lsls	r3, r1, #2
 8012332:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8012336:	0082      	lsls	r2, r0, #2
 8012338:	4650      	mov	r0, sl
 801233a:	4659      	mov	r1, fp
 801233c:	f7ee fd14 	bl	8000d68 <__aeabi_uldivmod>
 8012340:	4602      	mov	r2, r0
 8012342:	460b      	mov	r3, r1
 8012344:	4b0e      	ldr	r3, [pc, #56]	; (8012380 <UART_SetConfig+0x38c>)
 8012346:	fba3 1302 	umull	r1, r3, r3, r2
 801234a:	095b      	lsrs	r3, r3, #5
 801234c:	2164      	movs	r1, #100	; 0x64
 801234e:	fb01 f303 	mul.w	r3, r1, r3
 8012352:	1ad3      	subs	r3, r2, r3
 8012354:	011b      	lsls	r3, r3, #4
 8012356:	3332      	adds	r3, #50	; 0x32
 8012358:	4a09      	ldr	r2, [pc, #36]	; (8012380 <UART_SetConfig+0x38c>)
 801235a:	fba2 2303 	umull	r2, r3, r2, r3
 801235e:	095b      	lsrs	r3, r3, #5
 8012360:	f003 020f 	and.w	r2, r3, #15
 8012364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	4432      	add	r2, r6
 801236a:	609a      	str	r2, [r3, #8]
}
 801236c:	bf00      	nop
 801236e:	377c      	adds	r7, #124	; 0x7c
 8012370:	46bd      	mov	sp, r7
 8012372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012376:	bf00      	nop
 8012378:	40011000 	.word	0x40011000
 801237c:	40011400 	.word	0x40011400
 8012380:	51eb851f 	.word	0x51eb851f

08012384 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012384:	b580      	push	{r7, lr}
 8012386:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8012388:	4904      	ldr	r1, [pc, #16]	; (801239c <MX_FATFS_Init+0x18>)
 801238a:	4805      	ldr	r0, [pc, #20]	; (80123a0 <MX_FATFS_Init+0x1c>)
 801238c:	f003 fb9e 	bl	8015acc <FATFS_LinkDriver>
 8012390:	4603      	mov	r3, r0
 8012392:	461a      	mov	r2, r3
 8012394:	4b03      	ldr	r3, [pc, #12]	; (80123a4 <MX_FATFS_Init+0x20>)
 8012396:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012398:	bf00      	nop
 801239a:	bd80      	pop	{r7, pc}
 801239c:	20009858 	.word	0x20009858
 80123a0:	200000d4 	.word	0x200000d4
 80123a4:	2000985c 	.word	0x2000985c

080123a8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80123a8:	b480      	push	{r7}
 80123aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80123ac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80123ae:	4618      	mov	r0, r3
 80123b0:	46bd      	mov	sp, r7
 80123b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b6:	4770      	bx	lr

080123b8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b082      	sub	sp, #8
 80123bc:	af00      	add	r7, sp, #0
 80123be:	4603      	mov	r3, r0
 80123c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80123c2:	79fb      	ldrb	r3, [r7, #7]
 80123c4:	4618      	mov	r0, r3
 80123c6:	f000 f9dd 	bl	8012784 <USER_SPI_initialize>
 80123ca:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80123cc:	4618      	mov	r0, r3
 80123ce:	3708      	adds	r7, #8
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd80      	pop	{r7, pc}

080123d4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b082      	sub	sp, #8
 80123d8:	af00      	add	r7, sp, #0
 80123da:	4603      	mov	r3, r0
 80123dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80123de:	79fb      	ldrb	r3, [r7, #7]
 80123e0:	4618      	mov	r0, r3
 80123e2:	f000 fab9 	bl	8012958 <USER_SPI_status>
 80123e6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80123e8:	4618      	mov	r0, r3
 80123ea:	3708      	adds	r7, #8
 80123ec:	46bd      	mov	sp, r7
 80123ee:	bd80      	pop	{r7, pc}

080123f0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b084      	sub	sp, #16
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	60b9      	str	r1, [r7, #8]
 80123f8:	607a      	str	r2, [r7, #4]
 80123fa:	603b      	str	r3, [r7, #0]
 80123fc:	4603      	mov	r3, r0
 80123fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8012400:	7bf8      	ldrb	r0, [r7, #15]
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	687a      	ldr	r2, [r7, #4]
 8012406:	68b9      	ldr	r1, [r7, #8]
 8012408:	f000 fabc 	bl	8012984 <USER_SPI_read>
 801240c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 801240e:	4618      	mov	r0, r3
 8012410:	3710      	adds	r7, #16
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}

08012416 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8012416:	b580      	push	{r7, lr}
 8012418:	b084      	sub	sp, #16
 801241a:	af00      	add	r7, sp, #0
 801241c:	60b9      	str	r1, [r7, #8]
 801241e:	607a      	str	r2, [r7, #4]
 8012420:	603b      	str	r3, [r7, #0]
 8012422:	4603      	mov	r3, r0
 8012424:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8012426:	7bf8      	ldrb	r0, [r7, #15]
 8012428:	683b      	ldr	r3, [r7, #0]
 801242a:	687a      	ldr	r2, [r7, #4]
 801242c:	68b9      	ldr	r1, [r7, #8]
 801242e:	f000 fb0f 	bl	8012a50 <USER_SPI_write>
 8012432:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8012434:	4618      	mov	r0, r3
 8012436:	3710      	adds	r7, #16
 8012438:	46bd      	mov	sp, r7
 801243a:	bd80      	pop	{r7, pc}

0801243c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b082      	sub	sp, #8
 8012440:	af00      	add	r7, sp, #0
 8012442:	4603      	mov	r3, r0
 8012444:	603a      	str	r2, [r7, #0]
 8012446:	71fb      	strb	r3, [r7, #7]
 8012448:	460b      	mov	r3, r1
 801244a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 801244c:	79b9      	ldrb	r1, [r7, #6]
 801244e:	79fb      	ldrb	r3, [r7, #7]
 8012450:	683a      	ldr	r2, [r7, #0]
 8012452:	4618      	mov	r0, r3
 8012454:	f000 fb78 	bl	8012b48 <USER_SPI_ioctl>
 8012458:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 801245a:	4618      	mov	r0, r3
 801245c:	3708      	adds	r7, #8
 801245e:	46bd      	mov	sp, r7
 8012460:	bd80      	pop	{r7, pc}
	...

08012464 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8012464:	b580      	push	{r7, lr}
 8012466:	b082      	sub	sp, #8
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 801246c:	f7fa f864 	bl	800c538 <HAL_GetTick>
 8012470:	4603      	mov	r3, r0
 8012472:	4a04      	ldr	r2, [pc, #16]	; (8012484 <SPI_Timer_On+0x20>)
 8012474:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8012476:	4a04      	ldr	r2, [pc, #16]	; (8012488 <SPI_Timer_On+0x24>)
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	6013      	str	r3, [r2, #0]
}
 801247c:	bf00      	nop
 801247e:	3708      	adds	r7, #8
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}
 8012484:	20009cc4 	.word	0x20009cc4
 8012488:	20009cc8 	.word	0x20009cc8

0801248c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 801248c:	b580      	push	{r7, lr}
 801248e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8012490:	f7fa f852 	bl	800c538 <HAL_GetTick>
 8012494:	4602      	mov	r2, r0
 8012496:	4b06      	ldr	r3, [pc, #24]	; (80124b0 <SPI_Timer_Status+0x24>)
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	1ad2      	subs	r2, r2, r3
 801249c:	4b05      	ldr	r3, [pc, #20]	; (80124b4 <SPI_Timer_Status+0x28>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	429a      	cmp	r2, r3
 80124a2:	bf34      	ite	cc
 80124a4:	2301      	movcc	r3, #1
 80124a6:	2300      	movcs	r3, #0
 80124a8:	b2db      	uxtb	r3, r3
}
 80124aa:	4618      	mov	r0, r3
 80124ac:	bd80      	pop	{r7, pc}
 80124ae:	bf00      	nop
 80124b0:	20009cc4 	.word	0x20009cc4
 80124b4:	20009cc8 	.word	0x20009cc8

080124b8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b086      	sub	sp, #24
 80124bc:	af02      	add	r7, sp, #8
 80124be:	4603      	mov	r3, r0
 80124c0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80124c2:	f107 020f 	add.w	r2, r7, #15
 80124c6:	1df9      	adds	r1, r7, #7
 80124c8:	2332      	movs	r3, #50	; 0x32
 80124ca:	9300      	str	r3, [sp, #0]
 80124cc:	2301      	movs	r3, #1
 80124ce:	4804      	ldr	r0, [pc, #16]	; (80124e0 <xchg_spi+0x28>)
 80124d0:	f7fe f822 	bl	8010518 <HAL_SPI_TransmitReceive>
    return rxDat;
 80124d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80124d6:	4618      	mov	r0, r3
 80124d8:	3710      	adds	r7, #16
 80124da:	46bd      	mov	sp, r7
 80124dc:	bd80      	pop	{r7, pc}
 80124de:	bf00      	nop
 80124e0:	20008804 	.word	0x20008804

080124e4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80124e4:	b590      	push	{r4, r7, lr}
 80124e6:	b085      	sub	sp, #20
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80124ee:	2300      	movs	r3, #0
 80124f0:	60fb      	str	r3, [r7, #12]
 80124f2:	e00a      	b.n	801250a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80124f4:	687a      	ldr	r2, [r7, #4]
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	18d4      	adds	r4, r2, r3
 80124fa:	20ff      	movs	r0, #255	; 0xff
 80124fc:	f7ff ffdc 	bl	80124b8 <xchg_spi>
 8012500:	4603      	mov	r3, r0
 8012502:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	3301      	adds	r3, #1
 8012508:	60fb      	str	r3, [r7, #12]
 801250a:	68fa      	ldr	r2, [r7, #12]
 801250c:	683b      	ldr	r3, [r7, #0]
 801250e:	429a      	cmp	r2, r3
 8012510:	d3f0      	bcc.n	80124f4 <rcvr_spi_multi+0x10>
	}
}
 8012512:	bf00      	nop
 8012514:	bf00      	nop
 8012516:	3714      	adds	r7, #20
 8012518:	46bd      	mov	sp, r7
 801251a:	bd90      	pop	{r4, r7, pc}

0801251c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b084      	sub	sp, #16
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
 8012524:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8012526:	2300      	movs	r3, #0
 8012528:	60fb      	str	r3, [r7, #12]
 801252a:	e009      	b.n	8012540 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 801252c:	687a      	ldr	r2, [r7, #4]
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	4413      	add	r3, r2
 8012532:	781b      	ldrb	r3, [r3, #0]
 8012534:	4618      	mov	r0, r3
 8012536:	f7ff ffbf 	bl	80124b8 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	3301      	adds	r3, #1
 801253e:	60fb      	str	r3, [r7, #12]
 8012540:	68fa      	ldr	r2, [r7, #12]
 8012542:	683b      	ldr	r3, [r7, #0]
 8012544:	429a      	cmp	r2, r3
 8012546:	d3f1      	bcc.n	801252c <xmit_spi_multi+0x10>
	}
}
 8012548:	bf00      	nop
 801254a:	bf00      	nop
 801254c:	3710      	adds	r7, #16
 801254e:	46bd      	mov	sp, r7
 8012550:	bd80      	pop	{r7, pc}

08012552 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8012552:	b580      	push	{r7, lr}
 8012554:	b086      	sub	sp, #24
 8012556:	af00      	add	r7, sp, #0
 8012558:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 801255a:	f7f9 ffed 	bl	800c538 <HAL_GetTick>
 801255e:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8012564:	20ff      	movs	r0, #255	; 0xff
 8012566:	f7ff ffa7 	bl	80124b8 <xchg_spi>
 801256a:	4603      	mov	r3, r0
 801256c:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 801256e:	7bfb      	ldrb	r3, [r7, #15]
 8012570:	2bff      	cmp	r3, #255	; 0xff
 8012572:	d007      	beq.n	8012584 <wait_ready+0x32>
 8012574:	f7f9 ffe0 	bl	800c538 <HAL_GetTick>
 8012578:	4602      	mov	r2, r0
 801257a:	697b      	ldr	r3, [r7, #20]
 801257c:	1ad3      	subs	r3, r2, r3
 801257e:	693a      	ldr	r2, [r7, #16]
 8012580:	429a      	cmp	r2, r3
 8012582:	d8ef      	bhi.n	8012564 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8012584:	7bfb      	ldrb	r3, [r7, #15]
 8012586:	2bff      	cmp	r3, #255	; 0xff
 8012588:	bf0c      	ite	eq
 801258a:	2301      	moveq	r3, #1
 801258c:	2300      	movne	r3, #0
 801258e:	b2db      	uxtb	r3, r3
}
 8012590:	4618      	mov	r0, r3
 8012592:	3718      	adds	r7, #24
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}

08012598 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8012598:	b580      	push	{r7, lr}
 801259a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 801259c:	2201      	movs	r2, #1
 801259e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80125a2:	4804      	ldr	r0, [pc, #16]	; (80125b4 <despiselect+0x1c>)
 80125a4:	f7fa fee0 	bl	800d368 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80125a8:	20ff      	movs	r0, #255	; 0xff
 80125aa:	f7ff ff85 	bl	80124b8 <xchg_spi>

}
 80125ae:	bf00      	nop
 80125b0:	bd80      	pop	{r7, pc}
 80125b2:	bf00      	nop
 80125b4:	40021400 	.word	0x40021400

080125b8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80125bc:	2200      	movs	r2, #0
 80125be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80125c2:	480a      	ldr	r0, [pc, #40]	; (80125ec <spiselect+0x34>)
 80125c4:	f7fa fed0 	bl	800d368 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80125c8:	20ff      	movs	r0, #255	; 0xff
 80125ca:	f7ff ff75 	bl	80124b8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80125ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80125d2:	f7ff ffbe 	bl	8012552 <wait_ready>
 80125d6:	4603      	mov	r3, r0
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d001      	beq.n	80125e0 <spiselect+0x28>
 80125dc:	2301      	movs	r3, #1
 80125de:	e002      	b.n	80125e6 <spiselect+0x2e>

	despiselect();
 80125e0:	f7ff ffda 	bl	8012598 <despiselect>
	return 0;	/* Timeout */
 80125e4:	2300      	movs	r3, #0
}
 80125e6:	4618      	mov	r0, r3
 80125e8:	bd80      	pop	{r7, pc}
 80125ea:	bf00      	nop
 80125ec:	40021400 	.word	0x40021400

080125f0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b084      	sub	sp, #16
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
 80125f8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80125fa:	20c8      	movs	r0, #200	; 0xc8
 80125fc:	f7ff ff32 	bl	8012464 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8012600:	20ff      	movs	r0, #255	; 0xff
 8012602:	f7ff ff59 	bl	80124b8 <xchg_spi>
 8012606:	4603      	mov	r3, r0
 8012608:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 801260a:	7bfb      	ldrb	r3, [r7, #15]
 801260c:	2bff      	cmp	r3, #255	; 0xff
 801260e:	d104      	bne.n	801261a <rcvr_datablock+0x2a>
 8012610:	f7ff ff3c 	bl	801248c <SPI_Timer_Status>
 8012614:	4603      	mov	r3, r0
 8012616:	2b00      	cmp	r3, #0
 8012618:	d1f2      	bne.n	8012600 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 801261a:	7bfb      	ldrb	r3, [r7, #15]
 801261c:	2bfe      	cmp	r3, #254	; 0xfe
 801261e:	d001      	beq.n	8012624 <rcvr_datablock+0x34>
 8012620:	2300      	movs	r3, #0
 8012622:	e00a      	b.n	801263a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8012624:	6839      	ldr	r1, [r7, #0]
 8012626:	6878      	ldr	r0, [r7, #4]
 8012628:	f7ff ff5c 	bl	80124e4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 801262c:	20ff      	movs	r0, #255	; 0xff
 801262e:	f7ff ff43 	bl	80124b8 <xchg_spi>
 8012632:	20ff      	movs	r0, #255	; 0xff
 8012634:	f7ff ff40 	bl	80124b8 <xchg_spi>

	return 1;						/* Function succeeded */
 8012638:	2301      	movs	r3, #1
}
 801263a:	4618      	mov	r0, r3
 801263c:	3710      	adds	r7, #16
 801263e:	46bd      	mov	sp, r7
 8012640:	bd80      	pop	{r7, pc}

08012642 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8012642:	b580      	push	{r7, lr}
 8012644:	b084      	sub	sp, #16
 8012646:	af00      	add	r7, sp, #0
 8012648:	6078      	str	r0, [r7, #4]
 801264a:	460b      	mov	r3, r1
 801264c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 801264e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8012652:	f7ff ff7e 	bl	8012552 <wait_ready>
 8012656:	4603      	mov	r3, r0
 8012658:	2b00      	cmp	r3, #0
 801265a:	d101      	bne.n	8012660 <xmit_datablock+0x1e>
 801265c:	2300      	movs	r3, #0
 801265e:	e01e      	b.n	801269e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8012660:	78fb      	ldrb	r3, [r7, #3]
 8012662:	4618      	mov	r0, r3
 8012664:	f7ff ff28 	bl	80124b8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8012668:	78fb      	ldrb	r3, [r7, #3]
 801266a:	2bfd      	cmp	r3, #253	; 0xfd
 801266c:	d016      	beq.n	801269c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 801266e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012672:	6878      	ldr	r0, [r7, #4]
 8012674:	f7ff ff52 	bl	801251c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8012678:	20ff      	movs	r0, #255	; 0xff
 801267a:	f7ff ff1d 	bl	80124b8 <xchg_spi>
 801267e:	20ff      	movs	r0, #255	; 0xff
 8012680:	f7ff ff1a 	bl	80124b8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8012684:	20ff      	movs	r0, #255	; 0xff
 8012686:	f7ff ff17 	bl	80124b8 <xchg_spi>
 801268a:	4603      	mov	r3, r0
 801268c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 801268e:	7bfb      	ldrb	r3, [r7, #15]
 8012690:	f003 031f 	and.w	r3, r3, #31
 8012694:	2b05      	cmp	r3, #5
 8012696:	d001      	beq.n	801269c <xmit_datablock+0x5a>
 8012698:	2300      	movs	r3, #0
 801269a:	e000      	b.n	801269e <xmit_datablock+0x5c>
	}
	return 1;
 801269c:	2301      	movs	r3, #1
}
 801269e:	4618      	mov	r0, r3
 80126a0:	3710      	adds	r7, #16
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}

080126a6 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80126a6:	b580      	push	{r7, lr}
 80126a8:	b084      	sub	sp, #16
 80126aa:	af00      	add	r7, sp, #0
 80126ac:	4603      	mov	r3, r0
 80126ae:	6039      	str	r1, [r7, #0]
 80126b0:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80126b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	da0e      	bge.n	80126d8 <send_cmd+0x32>
		cmd &= 0x7F;
 80126ba:	79fb      	ldrb	r3, [r7, #7]
 80126bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80126c0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80126c2:	2100      	movs	r1, #0
 80126c4:	2037      	movs	r0, #55	; 0x37
 80126c6:	f7ff ffee 	bl	80126a6 <send_cmd>
 80126ca:	4603      	mov	r3, r0
 80126cc:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80126ce:	7bbb      	ldrb	r3, [r7, #14]
 80126d0:	2b01      	cmp	r3, #1
 80126d2:	d901      	bls.n	80126d8 <send_cmd+0x32>
 80126d4:	7bbb      	ldrb	r3, [r7, #14]
 80126d6:	e051      	b.n	801277c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80126d8:	79fb      	ldrb	r3, [r7, #7]
 80126da:	2b0c      	cmp	r3, #12
 80126dc:	d008      	beq.n	80126f0 <send_cmd+0x4a>
		despiselect();
 80126de:	f7ff ff5b 	bl	8012598 <despiselect>
		if (!spiselect()) return 0xFF;
 80126e2:	f7ff ff69 	bl	80125b8 <spiselect>
 80126e6:	4603      	mov	r3, r0
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d101      	bne.n	80126f0 <send_cmd+0x4a>
 80126ec:	23ff      	movs	r3, #255	; 0xff
 80126ee:	e045      	b.n	801277c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80126f0:	79fb      	ldrb	r3, [r7, #7]
 80126f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80126f6:	b2db      	uxtb	r3, r3
 80126f8:	4618      	mov	r0, r3
 80126fa:	f7ff fedd 	bl	80124b8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80126fe:	683b      	ldr	r3, [r7, #0]
 8012700:	0e1b      	lsrs	r3, r3, #24
 8012702:	b2db      	uxtb	r3, r3
 8012704:	4618      	mov	r0, r3
 8012706:	f7ff fed7 	bl	80124b8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 801270a:	683b      	ldr	r3, [r7, #0]
 801270c:	0c1b      	lsrs	r3, r3, #16
 801270e:	b2db      	uxtb	r3, r3
 8012710:	4618      	mov	r0, r3
 8012712:	f7ff fed1 	bl	80124b8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8012716:	683b      	ldr	r3, [r7, #0]
 8012718:	0a1b      	lsrs	r3, r3, #8
 801271a:	b2db      	uxtb	r3, r3
 801271c:	4618      	mov	r0, r3
 801271e:	f7ff fecb 	bl	80124b8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8012722:	683b      	ldr	r3, [r7, #0]
 8012724:	b2db      	uxtb	r3, r3
 8012726:	4618      	mov	r0, r3
 8012728:	f7ff fec6 	bl	80124b8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 801272c:	2301      	movs	r3, #1
 801272e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8012730:	79fb      	ldrb	r3, [r7, #7]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d101      	bne.n	801273a <send_cmd+0x94>
 8012736:	2395      	movs	r3, #149	; 0x95
 8012738:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 801273a:	79fb      	ldrb	r3, [r7, #7]
 801273c:	2b08      	cmp	r3, #8
 801273e:	d101      	bne.n	8012744 <send_cmd+0x9e>
 8012740:	2387      	movs	r3, #135	; 0x87
 8012742:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8012744:	7bfb      	ldrb	r3, [r7, #15]
 8012746:	4618      	mov	r0, r3
 8012748:	f7ff feb6 	bl	80124b8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 801274c:	79fb      	ldrb	r3, [r7, #7]
 801274e:	2b0c      	cmp	r3, #12
 8012750:	d102      	bne.n	8012758 <send_cmd+0xb2>
 8012752:	20ff      	movs	r0, #255	; 0xff
 8012754:	f7ff feb0 	bl	80124b8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8012758:	230a      	movs	r3, #10
 801275a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 801275c:	20ff      	movs	r0, #255	; 0xff
 801275e:	f7ff feab 	bl	80124b8 <xchg_spi>
 8012762:	4603      	mov	r3, r0
 8012764:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8012766:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801276a:	2b00      	cmp	r3, #0
 801276c:	da05      	bge.n	801277a <send_cmd+0xd4>
 801276e:	7bfb      	ldrb	r3, [r7, #15]
 8012770:	3b01      	subs	r3, #1
 8012772:	73fb      	strb	r3, [r7, #15]
 8012774:	7bfb      	ldrb	r3, [r7, #15]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d1f0      	bne.n	801275c <send_cmd+0xb6>

	return res;							/* Return received response */
 801277a:	7bbb      	ldrb	r3, [r7, #14]
}
 801277c:	4618      	mov	r0, r3
 801277e:	3710      	adds	r7, #16
 8012780:	46bd      	mov	sp, r7
 8012782:	bd80      	pop	{r7, pc}

08012784 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8012784:	b590      	push	{r4, r7, lr}
 8012786:	b085      	sub	sp, #20
 8012788:	af00      	add	r7, sp, #0
 801278a:	4603      	mov	r3, r0
 801278c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 801278e:	79fb      	ldrb	r3, [r7, #7]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d001      	beq.n	8012798 <USER_SPI_initialize+0x14>
 8012794:	2301      	movs	r3, #1
 8012796:	e0d4      	b.n	8012942 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8012798:	4b6c      	ldr	r3, [pc, #432]	; (801294c <USER_SPI_initialize+0x1c8>)
 801279a:	781b      	ldrb	r3, [r3, #0]
 801279c:	b2db      	uxtb	r3, r3
 801279e:	f003 0302 	and.w	r3, r3, #2
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d003      	beq.n	80127ae <USER_SPI_initialize+0x2a>
 80127a6:	4b69      	ldr	r3, [pc, #420]	; (801294c <USER_SPI_initialize+0x1c8>)
 80127a8:	781b      	ldrb	r3, [r3, #0]
 80127aa:	b2db      	uxtb	r3, r3
 80127ac:	e0c9      	b.n	8012942 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 80127ae:	4b68      	ldr	r3, [pc, #416]	; (8012950 <USER_SPI_initialize+0x1cc>)
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	681a      	ldr	r2, [r3, #0]
 80127b4:	4b66      	ldr	r3, [pc, #408]	; (8012950 <USER_SPI_initialize+0x1cc>)
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 80127bc:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80127be:	230a      	movs	r3, #10
 80127c0:	73fb      	strb	r3, [r7, #15]
 80127c2:	e005      	b.n	80127d0 <USER_SPI_initialize+0x4c>
 80127c4:	20ff      	movs	r0, #255	; 0xff
 80127c6:	f7ff fe77 	bl	80124b8 <xchg_spi>
 80127ca:	7bfb      	ldrb	r3, [r7, #15]
 80127cc:	3b01      	subs	r3, #1
 80127ce:	73fb      	strb	r3, [r7, #15]
 80127d0:	7bfb      	ldrb	r3, [r7, #15]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d1f6      	bne.n	80127c4 <USER_SPI_initialize+0x40>

	ty = 0;
 80127d6:	2300      	movs	r3, #0
 80127d8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80127da:	2100      	movs	r1, #0
 80127dc:	2000      	movs	r0, #0
 80127de:	f7ff ff62 	bl	80126a6 <send_cmd>
 80127e2:	4603      	mov	r3, r0
 80127e4:	2b01      	cmp	r3, #1
 80127e6:	f040 808b 	bne.w	8012900 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80127ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80127ee:	f7ff fe39 	bl	8012464 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80127f2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80127f6:	2008      	movs	r0, #8
 80127f8:	f7ff ff55 	bl	80126a6 <send_cmd>
 80127fc:	4603      	mov	r3, r0
 80127fe:	2b01      	cmp	r3, #1
 8012800:	d151      	bne.n	80128a6 <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8012802:	2300      	movs	r3, #0
 8012804:	73fb      	strb	r3, [r7, #15]
 8012806:	e00d      	b.n	8012824 <USER_SPI_initialize+0xa0>
 8012808:	7bfc      	ldrb	r4, [r7, #15]
 801280a:	20ff      	movs	r0, #255	; 0xff
 801280c:	f7ff fe54 	bl	80124b8 <xchg_spi>
 8012810:	4603      	mov	r3, r0
 8012812:	461a      	mov	r2, r3
 8012814:	f107 0310 	add.w	r3, r7, #16
 8012818:	4423      	add	r3, r4
 801281a:	f803 2c08 	strb.w	r2, [r3, #-8]
 801281e:	7bfb      	ldrb	r3, [r7, #15]
 8012820:	3301      	adds	r3, #1
 8012822:	73fb      	strb	r3, [r7, #15]
 8012824:	7bfb      	ldrb	r3, [r7, #15]
 8012826:	2b03      	cmp	r3, #3
 8012828:	d9ee      	bls.n	8012808 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 801282a:	7abb      	ldrb	r3, [r7, #10]
 801282c:	2b01      	cmp	r3, #1
 801282e:	d167      	bne.n	8012900 <USER_SPI_initialize+0x17c>
 8012830:	7afb      	ldrb	r3, [r7, #11]
 8012832:	2baa      	cmp	r3, #170	; 0xaa
 8012834:	d164      	bne.n	8012900 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8012836:	bf00      	nop
 8012838:	f7ff fe28 	bl	801248c <SPI_Timer_Status>
 801283c:	4603      	mov	r3, r0
 801283e:	2b00      	cmp	r3, #0
 8012840:	d007      	beq.n	8012852 <USER_SPI_initialize+0xce>
 8012842:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8012846:	20a9      	movs	r0, #169	; 0xa9
 8012848:	f7ff ff2d 	bl	80126a6 <send_cmd>
 801284c:	4603      	mov	r3, r0
 801284e:	2b00      	cmp	r3, #0
 8012850:	d1f2      	bne.n	8012838 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8012852:	f7ff fe1b 	bl	801248c <SPI_Timer_Status>
 8012856:	4603      	mov	r3, r0
 8012858:	2b00      	cmp	r3, #0
 801285a:	d051      	beq.n	8012900 <USER_SPI_initialize+0x17c>
 801285c:	2100      	movs	r1, #0
 801285e:	203a      	movs	r0, #58	; 0x3a
 8012860:	f7ff ff21 	bl	80126a6 <send_cmd>
 8012864:	4603      	mov	r3, r0
 8012866:	2b00      	cmp	r3, #0
 8012868:	d14a      	bne.n	8012900 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 801286a:	2300      	movs	r3, #0
 801286c:	73fb      	strb	r3, [r7, #15]
 801286e:	e00d      	b.n	801288c <USER_SPI_initialize+0x108>
 8012870:	7bfc      	ldrb	r4, [r7, #15]
 8012872:	20ff      	movs	r0, #255	; 0xff
 8012874:	f7ff fe20 	bl	80124b8 <xchg_spi>
 8012878:	4603      	mov	r3, r0
 801287a:	461a      	mov	r2, r3
 801287c:	f107 0310 	add.w	r3, r7, #16
 8012880:	4423      	add	r3, r4
 8012882:	f803 2c08 	strb.w	r2, [r3, #-8]
 8012886:	7bfb      	ldrb	r3, [r7, #15]
 8012888:	3301      	adds	r3, #1
 801288a:	73fb      	strb	r3, [r7, #15]
 801288c:	7bfb      	ldrb	r3, [r7, #15]
 801288e:	2b03      	cmp	r3, #3
 8012890:	d9ee      	bls.n	8012870 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8012892:	7a3b      	ldrb	r3, [r7, #8]
 8012894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012898:	2b00      	cmp	r3, #0
 801289a:	d001      	beq.n	80128a0 <USER_SPI_initialize+0x11c>
 801289c:	230c      	movs	r3, #12
 801289e:	e000      	b.n	80128a2 <USER_SPI_initialize+0x11e>
 80128a0:	2304      	movs	r3, #4
 80128a2:	737b      	strb	r3, [r7, #13]
 80128a4:	e02c      	b.n	8012900 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80128a6:	2100      	movs	r1, #0
 80128a8:	20a9      	movs	r0, #169	; 0xa9
 80128aa:	f7ff fefc 	bl	80126a6 <send_cmd>
 80128ae:	4603      	mov	r3, r0
 80128b0:	2b01      	cmp	r3, #1
 80128b2:	d804      	bhi.n	80128be <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80128b4:	2302      	movs	r3, #2
 80128b6:	737b      	strb	r3, [r7, #13]
 80128b8:	23a9      	movs	r3, #169	; 0xa9
 80128ba:	73bb      	strb	r3, [r7, #14]
 80128bc:	e003      	b.n	80128c6 <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80128be:	2301      	movs	r3, #1
 80128c0:	737b      	strb	r3, [r7, #13]
 80128c2:	2301      	movs	r3, #1
 80128c4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80128c6:	bf00      	nop
 80128c8:	f7ff fde0 	bl	801248c <SPI_Timer_Status>
 80128cc:	4603      	mov	r3, r0
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d007      	beq.n	80128e2 <USER_SPI_initialize+0x15e>
 80128d2:	7bbb      	ldrb	r3, [r7, #14]
 80128d4:	2100      	movs	r1, #0
 80128d6:	4618      	mov	r0, r3
 80128d8:	f7ff fee5 	bl	80126a6 <send_cmd>
 80128dc:	4603      	mov	r3, r0
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d1f2      	bne.n	80128c8 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80128e2:	f7ff fdd3 	bl	801248c <SPI_Timer_Status>
 80128e6:	4603      	mov	r3, r0
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d007      	beq.n	80128fc <USER_SPI_initialize+0x178>
 80128ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80128f0:	2010      	movs	r0, #16
 80128f2:	f7ff fed8 	bl	80126a6 <send_cmd>
 80128f6:	4603      	mov	r3, r0
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d001      	beq.n	8012900 <USER_SPI_initialize+0x17c>
				ty = 0;
 80128fc:	2300      	movs	r3, #0
 80128fe:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8012900:	4a14      	ldr	r2, [pc, #80]	; (8012954 <USER_SPI_initialize+0x1d0>)
 8012902:	7b7b      	ldrb	r3, [r7, #13]
 8012904:	7013      	strb	r3, [r2, #0]
	despiselect();
 8012906:	f7ff fe47 	bl	8012598 <despiselect>

	if (ty) {			/* OK */
 801290a:	7b7b      	ldrb	r3, [r7, #13]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d012      	beq.n	8012936 <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8012910:	4b0f      	ldr	r3, [pc, #60]	; (8012950 <USER_SPI_initialize+0x1cc>)
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 801291a:	4b0d      	ldr	r3, [pc, #52]	; (8012950 <USER_SPI_initialize+0x1cc>)
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	f042 0208 	orr.w	r2, r2, #8
 8012922:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8012924:	4b09      	ldr	r3, [pc, #36]	; (801294c <USER_SPI_initialize+0x1c8>)
 8012926:	781b      	ldrb	r3, [r3, #0]
 8012928:	b2db      	uxtb	r3, r3
 801292a:	f023 0301 	bic.w	r3, r3, #1
 801292e:	b2da      	uxtb	r2, r3
 8012930:	4b06      	ldr	r3, [pc, #24]	; (801294c <USER_SPI_initialize+0x1c8>)
 8012932:	701a      	strb	r2, [r3, #0]
 8012934:	e002      	b.n	801293c <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8012936:	4b05      	ldr	r3, [pc, #20]	; (801294c <USER_SPI_initialize+0x1c8>)
 8012938:	2201      	movs	r2, #1
 801293a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 801293c:	4b03      	ldr	r3, [pc, #12]	; (801294c <USER_SPI_initialize+0x1c8>)
 801293e:	781b      	ldrb	r3, [r3, #0]
 8012940:	b2db      	uxtb	r3, r3
}
 8012942:	4618      	mov	r0, r3
 8012944:	3714      	adds	r7, #20
 8012946:	46bd      	mov	sp, r7
 8012948:	bd90      	pop	{r4, r7, pc}
 801294a:	bf00      	nop
 801294c:	200000e8 	.word	0x200000e8
 8012950:	20008804 	.word	0x20008804
 8012954:	20000864 	.word	0x20000864

08012958 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8012958:	b480      	push	{r7}
 801295a:	b083      	sub	sp, #12
 801295c:	af00      	add	r7, sp, #0
 801295e:	4603      	mov	r3, r0
 8012960:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8012962:	79fb      	ldrb	r3, [r7, #7]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d001      	beq.n	801296c <USER_SPI_status+0x14>
 8012968:	2301      	movs	r3, #1
 801296a:	e002      	b.n	8012972 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 801296c:	4b04      	ldr	r3, [pc, #16]	; (8012980 <USER_SPI_status+0x28>)
 801296e:	781b      	ldrb	r3, [r3, #0]
 8012970:	b2db      	uxtb	r3, r3
}
 8012972:	4618      	mov	r0, r3
 8012974:	370c      	adds	r7, #12
 8012976:	46bd      	mov	sp, r7
 8012978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297c:	4770      	bx	lr
 801297e:	bf00      	nop
 8012980:	200000e8 	.word	0x200000e8

08012984 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8012984:	b580      	push	{r7, lr}
 8012986:	b084      	sub	sp, #16
 8012988:	af00      	add	r7, sp, #0
 801298a:	60b9      	str	r1, [r7, #8]
 801298c:	607a      	str	r2, [r7, #4]
 801298e:	603b      	str	r3, [r7, #0]
 8012990:	4603      	mov	r3, r0
 8012992:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8012994:	7bfb      	ldrb	r3, [r7, #15]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d102      	bne.n	80129a0 <USER_SPI_read+0x1c>
 801299a:	683b      	ldr	r3, [r7, #0]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d101      	bne.n	80129a4 <USER_SPI_read+0x20>
 80129a0:	2304      	movs	r3, #4
 80129a2:	e04d      	b.n	8012a40 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80129a4:	4b28      	ldr	r3, [pc, #160]	; (8012a48 <USER_SPI_read+0xc4>)
 80129a6:	781b      	ldrb	r3, [r3, #0]
 80129a8:	b2db      	uxtb	r3, r3
 80129aa:	f003 0301 	and.w	r3, r3, #1
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d001      	beq.n	80129b6 <USER_SPI_read+0x32>
 80129b2:	2303      	movs	r3, #3
 80129b4:	e044      	b.n	8012a40 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80129b6:	4b25      	ldr	r3, [pc, #148]	; (8012a4c <USER_SPI_read+0xc8>)
 80129b8:	781b      	ldrb	r3, [r3, #0]
 80129ba:	f003 0308 	and.w	r3, r3, #8
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d102      	bne.n	80129c8 <USER_SPI_read+0x44>
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	025b      	lsls	r3, r3, #9
 80129c6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80129c8:	683b      	ldr	r3, [r7, #0]
 80129ca:	2b01      	cmp	r3, #1
 80129cc:	d111      	bne.n	80129f2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80129ce:	6879      	ldr	r1, [r7, #4]
 80129d0:	2011      	movs	r0, #17
 80129d2:	f7ff fe68 	bl	80126a6 <send_cmd>
 80129d6:	4603      	mov	r3, r0
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d129      	bne.n	8012a30 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80129dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80129e0:	68b8      	ldr	r0, [r7, #8]
 80129e2:	f7ff fe05 	bl	80125f0 <rcvr_datablock>
 80129e6:	4603      	mov	r3, r0
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d021      	beq.n	8012a30 <USER_SPI_read+0xac>
			count = 0;
 80129ec:	2300      	movs	r3, #0
 80129ee:	603b      	str	r3, [r7, #0]
 80129f0:	e01e      	b.n	8012a30 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80129f2:	6879      	ldr	r1, [r7, #4]
 80129f4:	2012      	movs	r0, #18
 80129f6:	f7ff fe56 	bl	80126a6 <send_cmd>
 80129fa:	4603      	mov	r3, r0
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d117      	bne.n	8012a30 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8012a00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012a04:	68b8      	ldr	r0, [r7, #8]
 8012a06:	f7ff fdf3 	bl	80125f0 <rcvr_datablock>
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d00a      	beq.n	8012a26 <USER_SPI_read+0xa2>
				buff += 512;
 8012a10:	68bb      	ldr	r3, [r7, #8]
 8012a12:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8012a16:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8012a18:	683b      	ldr	r3, [r7, #0]
 8012a1a:	3b01      	subs	r3, #1
 8012a1c:	603b      	str	r3, [r7, #0]
 8012a1e:	683b      	ldr	r3, [r7, #0]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d1ed      	bne.n	8012a00 <USER_SPI_read+0x7c>
 8012a24:	e000      	b.n	8012a28 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8012a26:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8012a28:	2100      	movs	r1, #0
 8012a2a:	200c      	movs	r0, #12
 8012a2c:	f7ff fe3b 	bl	80126a6 <send_cmd>
		}
	}
	despiselect();
 8012a30:	f7ff fdb2 	bl	8012598 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8012a34:	683b      	ldr	r3, [r7, #0]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	bf14      	ite	ne
 8012a3a:	2301      	movne	r3, #1
 8012a3c:	2300      	moveq	r3, #0
 8012a3e:	b2db      	uxtb	r3, r3
}
 8012a40:	4618      	mov	r0, r3
 8012a42:	3710      	adds	r7, #16
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd80      	pop	{r7, pc}
 8012a48:	200000e8 	.word	0x200000e8
 8012a4c:	20000864 	.word	0x20000864

08012a50 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b084      	sub	sp, #16
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	60b9      	str	r1, [r7, #8]
 8012a58:	607a      	str	r2, [r7, #4]
 8012a5a:	603b      	str	r3, [r7, #0]
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8012a60:	7bfb      	ldrb	r3, [r7, #15]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d102      	bne.n	8012a6c <USER_SPI_write+0x1c>
 8012a66:	683b      	ldr	r3, [r7, #0]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d101      	bne.n	8012a70 <USER_SPI_write+0x20>
 8012a6c:	2304      	movs	r3, #4
 8012a6e:	e063      	b.n	8012b38 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8012a70:	4b33      	ldr	r3, [pc, #204]	; (8012b40 <USER_SPI_write+0xf0>)
 8012a72:	781b      	ldrb	r3, [r3, #0]
 8012a74:	b2db      	uxtb	r3, r3
 8012a76:	f003 0301 	and.w	r3, r3, #1
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d001      	beq.n	8012a82 <USER_SPI_write+0x32>
 8012a7e:	2303      	movs	r3, #3
 8012a80:	e05a      	b.n	8012b38 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8012a82:	4b2f      	ldr	r3, [pc, #188]	; (8012b40 <USER_SPI_write+0xf0>)
 8012a84:	781b      	ldrb	r3, [r3, #0]
 8012a86:	b2db      	uxtb	r3, r3
 8012a88:	f003 0304 	and.w	r3, r3, #4
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d001      	beq.n	8012a94 <USER_SPI_write+0x44>
 8012a90:	2302      	movs	r3, #2
 8012a92:	e051      	b.n	8012b38 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8012a94:	4b2b      	ldr	r3, [pc, #172]	; (8012b44 <USER_SPI_write+0xf4>)
 8012a96:	781b      	ldrb	r3, [r3, #0]
 8012a98:	f003 0308 	and.w	r3, r3, #8
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d102      	bne.n	8012aa6 <USER_SPI_write+0x56>
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	025b      	lsls	r3, r3, #9
 8012aa4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8012aa6:	683b      	ldr	r3, [r7, #0]
 8012aa8:	2b01      	cmp	r3, #1
 8012aaa:	d110      	bne.n	8012ace <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8012aac:	6879      	ldr	r1, [r7, #4]
 8012aae:	2018      	movs	r0, #24
 8012ab0:	f7ff fdf9 	bl	80126a6 <send_cmd>
 8012ab4:	4603      	mov	r3, r0
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d136      	bne.n	8012b28 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8012aba:	21fe      	movs	r1, #254	; 0xfe
 8012abc:	68b8      	ldr	r0, [r7, #8]
 8012abe:	f7ff fdc0 	bl	8012642 <xmit_datablock>
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d02f      	beq.n	8012b28 <USER_SPI_write+0xd8>
			count = 0;
 8012ac8:	2300      	movs	r3, #0
 8012aca:	603b      	str	r3, [r7, #0]
 8012acc:	e02c      	b.n	8012b28 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8012ace:	4b1d      	ldr	r3, [pc, #116]	; (8012b44 <USER_SPI_write+0xf4>)
 8012ad0:	781b      	ldrb	r3, [r3, #0]
 8012ad2:	f003 0306 	and.w	r3, r3, #6
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d003      	beq.n	8012ae2 <USER_SPI_write+0x92>
 8012ada:	6839      	ldr	r1, [r7, #0]
 8012adc:	2097      	movs	r0, #151	; 0x97
 8012ade:	f7ff fde2 	bl	80126a6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8012ae2:	6879      	ldr	r1, [r7, #4]
 8012ae4:	2019      	movs	r0, #25
 8012ae6:	f7ff fdde 	bl	80126a6 <send_cmd>
 8012aea:	4603      	mov	r3, r0
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d11b      	bne.n	8012b28 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8012af0:	21fc      	movs	r1, #252	; 0xfc
 8012af2:	68b8      	ldr	r0, [r7, #8]
 8012af4:	f7ff fda5 	bl	8012642 <xmit_datablock>
 8012af8:	4603      	mov	r3, r0
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d00a      	beq.n	8012b14 <USER_SPI_write+0xc4>
				buff += 512;
 8012afe:	68bb      	ldr	r3, [r7, #8]
 8012b00:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8012b04:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8012b06:	683b      	ldr	r3, [r7, #0]
 8012b08:	3b01      	subs	r3, #1
 8012b0a:	603b      	str	r3, [r7, #0]
 8012b0c:	683b      	ldr	r3, [r7, #0]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d1ee      	bne.n	8012af0 <USER_SPI_write+0xa0>
 8012b12:	e000      	b.n	8012b16 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8012b14:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8012b16:	21fd      	movs	r1, #253	; 0xfd
 8012b18:	2000      	movs	r0, #0
 8012b1a:	f7ff fd92 	bl	8012642 <xmit_datablock>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d101      	bne.n	8012b28 <USER_SPI_write+0xd8>
 8012b24:	2301      	movs	r3, #1
 8012b26:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8012b28:	f7ff fd36 	bl	8012598 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8012b2c:	683b      	ldr	r3, [r7, #0]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	bf14      	ite	ne
 8012b32:	2301      	movne	r3, #1
 8012b34:	2300      	moveq	r3, #0
 8012b36:	b2db      	uxtb	r3, r3
}
 8012b38:	4618      	mov	r0, r3
 8012b3a:	3710      	adds	r7, #16
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	bd80      	pop	{r7, pc}
 8012b40:	200000e8 	.word	0x200000e8
 8012b44:	20000864 	.word	0x20000864

08012b48 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b08c      	sub	sp, #48	; 0x30
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	4603      	mov	r3, r0
 8012b50:	603a      	str	r2, [r7, #0]
 8012b52:	71fb      	strb	r3, [r7, #7]
 8012b54:	460b      	mov	r3, r1
 8012b56:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8012b58:	79fb      	ldrb	r3, [r7, #7]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d001      	beq.n	8012b62 <USER_SPI_ioctl+0x1a>
 8012b5e:	2304      	movs	r3, #4
 8012b60:	e15a      	b.n	8012e18 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8012b62:	4baf      	ldr	r3, [pc, #700]	; (8012e20 <USER_SPI_ioctl+0x2d8>)
 8012b64:	781b      	ldrb	r3, [r3, #0]
 8012b66:	b2db      	uxtb	r3, r3
 8012b68:	f003 0301 	and.w	r3, r3, #1
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d001      	beq.n	8012b74 <USER_SPI_ioctl+0x2c>
 8012b70:	2303      	movs	r3, #3
 8012b72:	e151      	b.n	8012e18 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8012b74:	2301      	movs	r3, #1
 8012b76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8012b7a:	79bb      	ldrb	r3, [r7, #6]
 8012b7c:	2b04      	cmp	r3, #4
 8012b7e:	f200 8136 	bhi.w	8012dee <USER_SPI_ioctl+0x2a6>
 8012b82:	a201      	add	r2, pc, #4	; (adr r2, 8012b88 <USER_SPI_ioctl+0x40>)
 8012b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b88:	08012b9d 	.word	0x08012b9d
 8012b8c:	08012bb1 	.word	0x08012bb1
 8012b90:	08012def 	.word	0x08012def
 8012b94:	08012c5d 	.word	0x08012c5d
 8012b98:	08012d53 	.word	0x08012d53
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8012b9c:	f7ff fd0c 	bl	80125b8 <spiselect>
 8012ba0:	4603      	mov	r3, r0
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	f000 8127 	beq.w	8012df6 <USER_SPI_ioctl+0x2ae>
 8012ba8:	2300      	movs	r3, #0
 8012baa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8012bae:	e122      	b.n	8012df6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8012bb0:	2100      	movs	r1, #0
 8012bb2:	2009      	movs	r0, #9
 8012bb4:	f7ff fd77 	bl	80126a6 <send_cmd>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	f040 811d 	bne.w	8012dfa <USER_SPI_ioctl+0x2b2>
 8012bc0:	f107 030c 	add.w	r3, r7, #12
 8012bc4:	2110      	movs	r1, #16
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f7ff fd12 	bl	80125f0 <rcvr_datablock>
 8012bcc:	4603      	mov	r3, r0
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	f000 8113 	beq.w	8012dfa <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8012bd4:	7b3b      	ldrb	r3, [r7, #12]
 8012bd6:	099b      	lsrs	r3, r3, #6
 8012bd8:	b2db      	uxtb	r3, r3
 8012bda:	2b01      	cmp	r3, #1
 8012bdc:	d111      	bne.n	8012c02 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8012bde:	7d7b      	ldrb	r3, [r7, #21]
 8012be0:	461a      	mov	r2, r3
 8012be2:	7d3b      	ldrb	r3, [r7, #20]
 8012be4:	021b      	lsls	r3, r3, #8
 8012be6:	4413      	add	r3, r2
 8012be8:	461a      	mov	r2, r3
 8012bea:	7cfb      	ldrb	r3, [r7, #19]
 8012bec:	041b      	lsls	r3, r3, #16
 8012bee:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8012bf2:	4413      	add	r3, r2
 8012bf4:	3301      	adds	r3, #1
 8012bf6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8012bf8:	69fb      	ldr	r3, [r7, #28]
 8012bfa:	029a      	lsls	r2, r3, #10
 8012bfc:	683b      	ldr	r3, [r7, #0]
 8012bfe:	601a      	str	r2, [r3, #0]
 8012c00:	e028      	b.n	8012c54 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8012c02:	7c7b      	ldrb	r3, [r7, #17]
 8012c04:	f003 030f 	and.w	r3, r3, #15
 8012c08:	b2da      	uxtb	r2, r3
 8012c0a:	7dbb      	ldrb	r3, [r7, #22]
 8012c0c:	09db      	lsrs	r3, r3, #7
 8012c0e:	b2db      	uxtb	r3, r3
 8012c10:	4413      	add	r3, r2
 8012c12:	b2da      	uxtb	r2, r3
 8012c14:	7d7b      	ldrb	r3, [r7, #21]
 8012c16:	005b      	lsls	r3, r3, #1
 8012c18:	b2db      	uxtb	r3, r3
 8012c1a:	f003 0306 	and.w	r3, r3, #6
 8012c1e:	b2db      	uxtb	r3, r3
 8012c20:	4413      	add	r3, r2
 8012c22:	b2db      	uxtb	r3, r3
 8012c24:	3302      	adds	r3, #2
 8012c26:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8012c2a:	7d3b      	ldrb	r3, [r7, #20]
 8012c2c:	099b      	lsrs	r3, r3, #6
 8012c2e:	b2db      	uxtb	r3, r3
 8012c30:	461a      	mov	r2, r3
 8012c32:	7cfb      	ldrb	r3, [r7, #19]
 8012c34:	009b      	lsls	r3, r3, #2
 8012c36:	441a      	add	r2, r3
 8012c38:	7cbb      	ldrb	r3, [r7, #18]
 8012c3a:	029b      	lsls	r3, r3, #10
 8012c3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8012c40:	4413      	add	r3, r2
 8012c42:	3301      	adds	r3, #1
 8012c44:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8012c46:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8012c4a:	3b09      	subs	r3, #9
 8012c4c:	69fa      	ldr	r2, [r7, #28]
 8012c4e:	409a      	lsls	r2, r3
 8012c50:	683b      	ldr	r3, [r7, #0]
 8012c52:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8012c54:	2300      	movs	r3, #0
 8012c56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8012c5a:	e0ce      	b.n	8012dfa <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8012c5c:	4b71      	ldr	r3, [pc, #452]	; (8012e24 <USER_SPI_ioctl+0x2dc>)
 8012c5e:	781b      	ldrb	r3, [r3, #0]
 8012c60:	f003 0304 	and.w	r3, r3, #4
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d031      	beq.n	8012ccc <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8012c68:	2100      	movs	r1, #0
 8012c6a:	208d      	movs	r0, #141	; 0x8d
 8012c6c:	f7ff fd1b 	bl	80126a6 <send_cmd>
 8012c70:	4603      	mov	r3, r0
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	f040 80c3 	bne.w	8012dfe <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8012c78:	20ff      	movs	r0, #255	; 0xff
 8012c7a:	f7ff fc1d 	bl	80124b8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8012c7e:	f107 030c 	add.w	r3, r7, #12
 8012c82:	2110      	movs	r1, #16
 8012c84:	4618      	mov	r0, r3
 8012c86:	f7ff fcb3 	bl	80125f0 <rcvr_datablock>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	f000 80b6 	beq.w	8012dfe <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8012c92:	2330      	movs	r3, #48	; 0x30
 8012c94:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8012c98:	e007      	b.n	8012caa <USER_SPI_ioctl+0x162>
 8012c9a:	20ff      	movs	r0, #255	; 0xff
 8012c9c:	f7ff fc0c 	bl	80124b8 <xchg_spi>
 8012ca0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8012ca4:	3b01      	subs	r3, #1
 8012ca6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8012caa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d1f3      	bne.n	8012c9a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8012cb2:	7dbb      	ldrb	r3, [r7, #22]
 8012cb4:	091b      	lsrs	r3, r3, #4
 8012cb6:	b2db      	uxtb	r3, r3
 8012cb8:	461a      	mov	r2, r3
 8012cba:	2310      	movs	r3, #16
 8012cbc:	fa03 f202 	lsl.w	r2, r3, r2
 8012cc0:	683b      	ldr	r3, [r7, #0]
 8012cc2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8012cca:	e098      	b.n	8012dfe <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8012ccc:	2100      	movs	r1, #0
 8012cce:	2009      	movs	r0, #9
 8012cd0:	f7ff fce9 	bl	80126a6 <send_cmd>
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	f040 8091 	bne.w	8012dfe <USER_SPI_ioctl+0x2b6>
 8012cdc:	f107 030c 	add.w	r3, r7, #12
 8012ce0:	2110      	movs	r1, #16
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	f7ff fc84 	bl	80125f0 <rcvr_datablock>
 8012ce8:	4603      	mov	r3, r0
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	f000 8087 	beq.w	8012dfe <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8012cf0:	4b4c      	ldr	r3, [pc, #304]	; (8012e24 <USER_SPI_ioctl+0x2dc>)
 8012cf2:	781b      	ldrb	r3, [r3, #0]
 8012cf4:	f003 0302 	and.w	r3, r3, #2
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d012      	beq.n	8012d22 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8012cfc:	7dbb      	ldrb	r3, [r7, #22]
 8012cfe:	005b      	lsls	r3, r3, #1
 8012d00:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8012d04:	7dfa      	ldrb	r2, [r7, #23]
 8012d06:	09d2      	lsrs	r2, r2, #7
 8012d08:	b2d2      	uxtb	r2, r2
 8012d0a:	4413      	add	r3, r2
 8012d0c:	1c5a      	adds	r2, r3, #1
 8012d0e:	7e7b      	ldrb	r3, [r7, #25]
 8012d10:	099b      	lsrs	r3, r3, #6
 8012d12:	b2db      	uxtb	r3, r3
 8012d14:	3b01      	subs	r3, #1
 8012d16:	fa02 f303 	lsl.w	r3, r2, r3
 8012d1a:	461a      	mov	r2, r3
 8012d1c:	683b      	ldr	r3, [r7, #0]
 8012d1e:	601a      	str	r2, [r3, #0]
 8012d20:	e013      	b.n	8012d4a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8012d22:	7dbb      	ldrb	r3, [r7, #22]
 8012d24:	109b      	asrs	r3, r3, #2
 8012d26:	b29b      	uxth	r3, r3
 8012d28:	f003 031f 	and.w	r3, r3, #31
 8012d2c:	3301      	adds	r3, #1
 8012d2e:	7dfa      	ldrb	r2, [r7, #23]
 8012d30:	00d2      	lsls	r2, r2, #3
 8012d32:	f002 0218 	and.w	r2, r2, #24
 8012d36:	7df9      	ldrb	r1, [r7, #23]
 8012d38:	0949      	lsrs	r1, r1, #5
 8012d3a:	b2c9      	uxtb	r1, r1
 8012d3c:	440a      	add	r2, r1
 8012d3e:	3201      	adds	r2, #1
 8012d40:	fb02 f303 	mul.w	r3, r2, r3
 8012d44:	461a      	mov	r2, r3
 8012d46:	683b      	ldr	r3, [r7, #0]
 8012d48:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8012d50:	e055      	b.n	8012dfe <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8012d52:	4b34      	ldr	r3, [pc, #208]	; (8012e24 <USER_SPI_ioctl+0x2dc>)
 8012d54:	781b      	ldrb	r3, [r3, #0]
 8012d56:	f003 0306 	and.w	r3, r3, #6
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d051      	beq.n	8012e02 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8012d5e:	f107 020c 	add.w	r2, r7, #12
 8012d62:	79fb      	ldrb	r3, [r7, #7]
 8012d64:	210b      	movs	r1, #11
 8012d66:	4618      	mov	r0, r3
 8012d68:	f7ff feee 	bl	8012b48 <USER_SPI_ioctl>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d149      	bne.n	8012e06 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8012d72:	7b3b      	ldrb	r3, [r7, #12]
 8012d74:	099b      	lsrs	r3, r3, #6
 8012d76:	b2db      	uxtb	r3, r3
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d104      	bne.n	8012d86 <USER_SPI_ioctl+0x23e>
 8012d7c:	7dbb      	ldrb	r3, [r7, #22]
 8012d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d041      	beq.n	8012e0a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8012d86:	683b      	ldr	r3, [r7, #0]
 8012d88:	623b      	str	r3, [r7, #32]
 8012d8a:	6a3b      	ldr	r3, [r7, #32]
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012d90:	6a3b      	ldr	r3, [r7, #32]
 8012d92:	685b      	ldr	r3, [r3, #4]
 8012d94:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8012d96:	4b23      	ldr	r3, [pc, #140]	; (8012e24 <USER_SPI_ioctl+0x2dc>)
 8012d98:	781b      	ldrb	r3, [r3, #0]
 8012d9a:	f003 0308 	and.w	r3, r3, #8
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d105      	bne.n	8012dae <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8012da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012da4:	025b      	lsls	r3, r3, #9
 8012da6:	62bb      	str	r3, [r7, #40]	; 0x28
 8012da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012daa:	025b      	lsls	r3, r3, #9
 8012dac:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8012dae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012db0:	2020      	movs	r0, #32
 8012db2:	f7ff fc78 	bl	80126a6 <send_cmd>
 8012db6:	4603      	mov	r3, r0
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d128      	bne.n	8012e0e <USER_SPI_ioctl+0x2c6>
 8012dbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012dbe:	2021      	movs	r0, #33	; 0x21
 8012dc0:	f7ff fc71 	bl	80126a6 <send_cmd>
 8012dc4:	4603      	mov	r3, r0
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d121      	bne.n	8012e0e <USER_SPI_ioctl+0x2c6>
 8012dca:	2100      	movs	r1, #0
 8012dcc:	2026      	movs	r0, #38	; 0x26
 8012dce:	f7ff fc6a 	bl	80126a6 <send_cmd>
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d11a      	bne.n	8012e0e <USER_SPI_ioctl+0x2c6>
 8012dd8:	f247 5030 	movw	r0, #30000	; 0x7530
 8012ddc:	f7ff fbb9 	bl	8012552 <wait_ready>
 8012de0:	4603      	mov	r3, r0
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d013      	beq.n	8012e0e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8012de6:	2300      	movs	r3, #0
 8012de8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8012dec:	e00f      	b.n	8012e0e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8012dee:	2304      	movs	r3, #4
 8012df0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8012df4:	e00c      	b.n	8012e10 <USER_SPI_ioctl+0x2c8>
		break;
 8012df6:	bf00      	nop
 8012df8:	e00a      	b.n	8012e10 <USER_SPI_ioctl+0x2c8>
		break;
 8012dfa:	bf00      	nop
 8012dfc:	e008      	b.n	8012e10 <USER_SPI_ioctl+0x2c8>
		break;
 8012dfe:	bf00      	nop
 8012e00:	e006      	b.n	8012e10 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8012e02:	bf00      	nop
 8012e04:	e004      	b.n	8012e10 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8012e06:	bf00      	nop
 8012e08:	e002      	b.n	8012e10 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8012e0a:	bf00      	nop
 8012e0c:	e000      	b.n	8012e10 <USER_SPI_ioctl+0x2c8>
		break;
 8012e0e:	bf00      	nop
	}

	despiselect();
 8012e10:	f7ff fbc2 	bl	8012598 <despiselect>

	return res;
 8012e14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012e18:	4618      	mov	r0, r3
 8012e1a:	3730      	adds	r7, #48	; 0x30
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	bd80      	pop	{r7, pc}
 8012e20:	200000e8 	.word	0x200000e8
 8012e24:	20000864 	.word	0x20000864

08012e28 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b084      	sub	sp, #16
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	4603      	mov	r3, r0
 8012e30:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012e32:	79fb      	ldrb	r3, [r7, #7]
 8012e34:	4a08      	ldr	r2, [pc, #32]	; (8012e58 <disk_status+0x30>)
 8012e36:	009b      	lsls	r3, r3, #2
 8012e38:	4413      	add	r3, r2
 8012e3a:	685b      	ldr	r3, [r3, #4]
 8012e3c:	685b      	ldr	r3, [r3, #4]
 8012e3e:	79fa      	ldrb	r2, [r7, #7]
 8012e40:	4905      	ldr	r1, [pc, #20]	; (8012e58 <disk_status+0x30>)
 8012e42:	440a      	add	r2, r1
 8012e44:	7a12      	ldrb	r2, [r2, #8]
 8012e46:	4610      	mov	r0, r2
 8012e48:	4798      	blx	r3
 8012e4a:	4603      	mov	r3, r0
 8012e4c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e50:	4618      	mov	r0, r3
 8012e52:	3710      	adds	r7, #16
 8012e54:	46bd      	mov	sp, r7
 8012e56:	bd80      	pop	{r7, pc}
 8012e58:	20000890 	.word	0x20000890

08012e5c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b084      	sub	sp, #16
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	4603      	mov	r3, r0
 8012e64:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012e66:	2300      	movs	r3, #0
 8012e68:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012e6a:	79fb      	ldrb	r3, [r7, #7]
 8012e6c:	4a0d      	ldr	r2, [pc, #52]	; (8012ea4 <disk_initialize+0x48>)
 8012e6e:	5cd3      	ldrb	r3, [r2, r3]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d111      	bne.n	8012e98 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012e74:	79fb      	ldrb	r3, [r7, #7]
 8012e76:	4a0b      	ldr	r2, [pc, #44]	; (8012ea4 <disk_initialize+0x48>)
 8012e78:	2101      	movs	r1, #1
 8012e7a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012e7c:	79fb      	ldrb	r3, [r7, #7]
 8012e7e:	4a09      	ldr	r2, [pc, #36]	; (8012ea4 <disk_initialize+0x48>)
 8012e80:	009b      	lsls	r3, r3, #2
 8012e82:	4413      	add	r3, r2
 8012e84:	685b      	ldr	r3, [r3, #4]
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	79fa      	ldrb	r2, [r7, #7]
 8012e8a:	4906      	ldr	r1, [pc, #24]	; (8012ea4 <disk_initialize+0x48>)
 8012e8c:	440a      	add	r2, r1
 8012e8e:	7a12      	ldrb	r2, [r2, #8]
 8012e90:	4610      	mov	r0, r2
 8012e92:	4798      	blx	r3
 8012e94:	4603      	mov	r3, r0
 8012e96:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	3710      	adds	r7, #16
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	bd80      	pop	{r7, pc}
 8012ea2:	bf00      	nop
 8012ea4:	20000890 	.word	0x20000890

08012ea8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012ea8:	b590      	push	{r4, r7, lr}
 8012eaa:	b087      	sub	sp, #28
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	60b9      	str	r1, [r7, #8]
 8012eb0:	607a      	str	r2, [r7, #4]
 8012eb2:	603b      	str	r3, [r7, #0]
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012eb8:	7bfb      	ldrb	r3, [r7, #15]
 8012eba:	4a0a      	ldr	r2, [pc, #40]	; (8012ee4 <disk_read+0x3c>)
 8012ebc:	009b      	lsls	r3, r3, #2
 8012ebe:	4413      	add	r3, r2
 8012ec0:	685b      	ldr	r3, [r3, #4]
 8012ec2:	689c      	ldr	r4, [r3, #8]
 8012ec4:	7bfb      	ldrb	r3, [r7, #15]
 8012ec6:	4a07      	ldr	r2, [pc, #28]	; (8012ee4 <disk_read+0x3c>)
 8012ec8:	4413      	add	r3, r2
 8012eca:	7a18      	ldrb	r0, [r3, #8]
 8012ecc:	683b      	ldr	r3, [r7, #0]
 8012ece:	687a      	ldr	r2, [r7, #4]
 8012ed0:	68b9      	ldr	r1, [r7, #8]
 8012ed2:	47a0      	blx	r4
 8012ed4:	4603      	mov	r3, r0
 8012ed6:	75fb      	strb	r3, [r7, #23]
  return res;
 8012ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8012eda:	4618      	mov	r0, r3
 8012edc:	371c      	adds	r7, #28
 8012ede:	46bd      	mov	sp, r7
 8012ee0:	bd90      	pop	{r4, r7, pc}
 8012ee2:	bf00      	nop
 8012ee4:	20000890 	.word	0x20000890

08012ee8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012ee8:	b590      	push	{r4, r7, lr}
 8012eea:	b087      	sub	sp, #28
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	60b9      	str	r1, [r7, #8]
 8012ef0:	607a      	str	r2, [r7, #4]
 8012ef2:	603b      	str	r3, [r7, #0]
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012ef8:	7bfb      	ldrb	r3, [r7, #15]
 8012efa:	4a0a      	ldr	r2, [pc, #40]	; (8012f24 <disk_write+0x3c>)
 8012efc:	009b      	lsls	r3, r3, #2
 8012efe:	4413      	add	r3, r2
 8012f00:	685b      	ldr	r3, [r3, #4]
 8012f02:	68dc      	ldr	r4, [r3, #12]
 8012f04:	7bfb      	ldrb	r3, [r7, #15]
 8012f06:	4a07      	ldr	r2, [pc, #28]	; (8012f24 <disk_write+0x3c>)
 8012f08:	4413      	add	r3, r2
 8012f0a:	7a18      	ldrb	r0, [r3, #8]
 8012f0c:	683b      	ldr	r3, [r7, #0]
 8012f0e:	687a      	ldr	r2, [r7, #4]
 8012f10:	68b9      	ldr	r1, [r7, #8]
 8012f12:	47a0      	blx	r4
 8012f14:	4603      	mov	r3, r0
 8012f16:	75fb      	strb	r3, [r7, #23]
  return res;
 8012f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	371c      	adds	r7, #28
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bd90      	pop	{r4, r7, pc}
 8012f22:	bf00      	nop
 8012f24:	20000890 	.word	0x20000890

08012f28 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b084      	sub	sp, #16
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	4603      	mov	r3, r0
 8012f30:	603a      	str	r2, [r7, #0]
 8012f32:	71fb      	strb	r3, [r7, #7]
 8012f34:	460b      	mov	r3, r1
 8012f36:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012f38:	79fb      	ldrb	r3, [r7, #7]
 8012f3a:	4a09      	ldr	r2, [pc, #36]	; (8012f60 <disk_ioctl+0x38>)
 8012f3c:	009b      	lsls	r3, r3, #2
 8012f3e:	4413      	add	r3, r2
 8012f40:	685b      	ldr	r3, [r3, #4]
 8012f42:	691b      	ldr	r3, [r3, #16]
 8012f44:	79fa      	ldrb	r2, [r7, #7]
 8012f46:	4906      	ldr	r1, [pc, #24]	; (8012f60 <disk_ioctl+0x38>)
 8012f48:	440a      	add	r2, r1
 8012f4a:	7a10      	ldrb	r0, [r2, #8]
 8012f4c:	79b9      	ldrb	r1, [r7, #6]
 8012f4e:	683a      	ldr	r2, [r7, #0]
 8012f50:	4798      	blx	r3
 8012f52:	4603      	mov	r3, r0
 8012f54:	73fb      	strb	r3, [r7, #15]
  return res;
 8012f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f58:	4618      	mov	r0, r3
 8012f5a:	3710      	adds	r7, #16
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd80      	pop	{r7, pc}
 8012f60:	20000890 	.word	0x20000890

08012f64 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012f64:	b480      	push	{r7}
 8012f66:	b085      	sub	sp, #20
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	3301      	adds	r3, #1
 8012f70:	781b      	ldrb	r3, [r3, #0]
 8012f72:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012f74:	89fb      	ldrh	r3, [r7, #14]
 8012f76:	021b      	lsls	r3, r3, #8
 8012f78:	b21a      	sxth	r2, r3
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	781b      	ldrb	r3, [r3, #0]
 8012f7e:	b21b      	sxth	r3, r3
 8012f80:	4313      	orrs	r3, r2
 8012f82:	b21b      	sxth	r3, r3
 8012f84:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012f86:	89fb      	ldrh	r3, [r7, #14]
}
 8012f88:	4618      	mov	r0, r3
 8012f8a:	3714      	adds	r7, #20
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f92:	4770      	bx	lr

08012f94 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012f94:	b480      	push	{r7}
 8012f96:	b085      	sub	sp, #20
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	3303      	adds	r3, #3
 8012fa0:	781b      	ldrb	r3, [r3, #0]
 8012fa2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	021b      	lsls	r3, r3, #8
 8012fa8:	687a      	ldr	r2, [r7, #4]
 8012faa:	3202      	adds	r2, #2
 8012fac:	7812      	ldrb	r2, [r2, #0]
 8012fae:	4313      	orrs	r3, r2
 8012fb0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	021b      	lsls	r3, r3, #8
 8012fb6:	687a      	ldr	r2, [r7, #4]
 8012fb8:	3201      	adds	r2, #1
 8012fba:	7812      	ldrb	r2, [r2, #0]
 8012fbc:	4313      	orrs	r3, r2
 8012fbe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	021b      	lsls	r3, r3, #8
 8012fc4:	687a      	ldr	r2, [r7, #4]
 8012fc6:	7812      	ldrb	r2, [r2, #0]
 8012fc8:	4313      	orrs	r3, r2
 8012fca:	60fb      	str	r3, [r7, #12]
	return rv;
 8012fcc:	68fb      	ldr	r3, [r7, #12]
}
 8012fce:	4618      	mov	r0, r3
 8012fd0:	3714      	adds	r7, #20
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd8:	4770      	bx	lr

08012fda <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012fda:	b480      	push	{r7}
 8012fdc:	b083      	sub	sp, #12
 8012fde:	af00      	add	r7, sp, #0
 8012fe0:	6078      	str	r0, [r7, #4]
 8012fe2:	460b      	mov	r3, r1
 8012fe4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	1c5a      	adds	r2, r3, #1
 8012fea:	607a      	str	r2, [r7, #4]
 8012fec:	887a      	ldrh	r2, [r7, #2]
 8012fee:	b2d2      	uxtb	r2, r2
 8012ff0:	701a      	strb	r2, [r3, #0]
 8012ff2:	887b      	ldrh	r3, [r7, #2]
 8012ff4:	0a1b      	lsrs	r3, r3, #8
 8012ff6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	1c5a      	adds	r2, r3, #1
 8012ffc:	607a      	str	r2, [r7, #4]
 8012ffe:	887a      	ldrh	r2, [r7, #2]
 8013000:	b2d2      	uxtb	r2, r2
 8013002:	701a      	strb	r2, [r3, #0]
}
 8013004:	bf00      	nop
 8013006:	370c      	adds	r7, #12
 8013008:	46bd      	mov	sp, r7
 801300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300e:	4770      	bx	lr

08013010 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8013010:	b480      	push	{r7}
 8013012:	b083      	sub	sp, #12
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
 8013018:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	1c5a      	adds	r2, r3, #1
 801301e:	607a      	str	r2, [r7, #4]
 8013020:	683a      	ldr	r2, [r7, #0]
 8013022:	b2d2      	uxtb	r2, r2
 8013024:	701a      	strb	r2, [r3, #0]
 8013026:	683b      	ldr	r3, [r7, #0]
 8013028:	0a1b      	lsrs	r3, r3, #8
 801302a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	1c5a      	adds	r2, r3, #1
 8013030:	607a      	str	r2, [r7, #4]
 8013032:	683a      	ldr	r2, [r7, #0]
 8013034:	b2d2      	uxtb	r2, r2
 8013036:	701a      	strb	r2, [r3, #0]
 8013038:	683b      	ldr	r3, [r7, #0]
 801303a:	0a1b      	lsrs	r3, r3, #8
 801303c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	1c5a      	adds	r2, r3, #1
 8013042:	607a      	str	r2, [r7, #4]
 8013044:	683a      	ldr	r2, [r7, #0]
 8013046:	b2d2      	uxtb	r2, r2
 8013048:	701a      	strb	r2, [r3, #0]
 801304a:	683b      	ldr	r3, [r7, #0]
 801304c:	0a1b      	lsrs	r3, r3, #8
 801304e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	1c5a      	adds	r2, r3, #1
 8013054:	607a      	str	r2, [r7, #4]
 8013056:	683a      	ldr	r2, [r7, #0]
 8013058:	b2d2      	uxtb	r2, r2
 801305a:	701a      	strb	r2, [r3, #0]
}
 801305c:	bf00      	nop
 801305e:	370c      	adds	r7, #12
 8013060:	46bd      	mov	sp, r7
 8013062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013066:	4770      	bx	lr

08013068 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8013068:	b480      	push	{r7}
 801306a:	b087      	sub	sp, #28
 801306c:	af00      	add	r7, sp, #0
 801306e:	60f8      	str	r0, [r7, #12]
 8013070:	60b9      	str	r1, [r7, #8]
 8013072:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8013078:	68bb      	ldr	r3, [r7, #8]
 801307a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d00d      	beq.n	801309e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8013082:	693a      	ldr	r2, [r7, #16]
 8013084:	1c53      	adds	r3, r2, #1
 8013086:	613b      	str	r3, [r7, #16]
 8013088:	697b      	ldr	r3, [r7, #20]
 801308a:	1c59      	adds	r1, r3, #1
 801308c:	6179      	str	r1, [r7, #20]
 801308e:	7812      	ldrb	r2, [r2, #0]
 8013090:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	3b01      	subs	r3, #1
 8013096:	607b      	str	r3, [r7, #4]
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d1f1      	bne.n	8013082 <mem_cpy+0x1a>
	}
}
 801309e:	bf00      	nop
 80130a0:	371c      	adds	r7, #28
 80130a2:	46bd      	mov	sp, r7
 80130a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a8:	4770      	bx	lr

080130aa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80130aa:	b480      	push	{r7}
 80130ac:	b087      	sub	sp, #28
 80130ae:	af00      	add	r7, sp, #0
 80130b0:	60f8      	str	r0, [r7, #12]
 80130b2:	60b9      	str	r1, [r7, #8]
 80130b4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80130ba:	697b      	ldr	r3, [r7, #20]
 80130bc:	1c5a      	adds	r2, r3, #1
 80130be:	617a      	str	r2, [r7, #20]
 80130c0:	68ba      	ldr	r2, [r7, #8]
 80130c2:	b2d2      	uxtb	r2, r2
 80130c4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	3b01      	subs	r3, #1
 80130ca:	607b      	str	r3, [r7, #4]
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d1f3      	bne.n	80130ba <mem_set+0x10>
}
 80130d2:	bf00      	nop
 80130d4:	bf00      	nop
 80130d6:	371c      	adds	r7, #28
 80130d8:	46bd      	mov	sp, r7
 80130da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130de:	4770      	bx	lr

080130e0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80130e0:	b480      	push	{r7}
 80130e2:	b089      	sub	sp, #36	; 0x24
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	60f8      	str	r0, [r7, #12]
 80130e8:	60b9      	str	r1, [r7, #8]
 80130ea:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	61fb      	str	r3, [r7, #28]
 80130f0:	68bb      	ldr	r3, [r7, #8]
 80130f2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80130f4:	2300      	movs	r3, #0
 80130f6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80130f8:	69fb      	ldr	r3, [r7, #28]
 80130fa:	1c5a      	adds	r2, r3, #1
 80130fc:	61fa      	str	r2, [r7, #28]
 80130fe:	781b      	ldrb	r3, [r3, #0]
 8013100:	4619      	mov	r1, r3
 8013102:	69bb      	ldr	r3, [r7, #24]
 8013104:	1c5a      	adds	r2, r3, #1
 8013106:	61ba      	str	r2, [r7, #24]
 8013108:	781b      	ldrb	r3, [r3, #0]
 801310a:	1acb      	subs	r3, r1, r3
 801310c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	3b01      	subs	r3, #1
 8013112:	607b      	str	r3, [r7, #4]
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d002      	beq.n	8013120 <mem_cmp+0x40>
 801311a:	697b      	ldr	r3, [r7, #20]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d0eb      	beq.n	80130f8 <mem_cmp+0x18>

	return r;
 8013120:	697b      	ldr	r3, [r7, #20]
}
 8013122:	4618      	mov	r0, r3
 8013124:	3724      	adds	r7, #36	; 0x24
 8013126:	46bd      	mov	sp, r7
 8013128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312c:	4770      	bx	lr

0801312e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801312e:	b480      	push	{r7}
 8013130:	b083      	sub	sp, #12
 8013132:	af00      	add	r7, sp, #0
 8013134:	6078      	str	r0, [r7, #4]
 8013136:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8013138:	e002      	b.n	8013140 <chk_chr+0x12>
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	3301      	adds	r3, #1
 801313e:	607b      	str	r3, [r7, #4]
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	781b      	ldrb	r3, [r3, #0]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d005      	beq.n	8013154 <chk_chr+0x26>
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	781b      	ldrb	r3, [r3, #0]
 801314c:	461a      	mov	r2, r3
 801314e:	683b      	ldr	r3, [r7, #0]
 8013150:	4293      	cmp	r3, r2
 8013152:	d1f2      	bne.n	801313a <chk_chr+0xc>
	return *str;
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	781b      	ldrb	r3, [r3, #0]
}
 8013158:	4618      	mov	r0, r3
 801315a:	370c      	adds	r7, #12
 801315c:	46bd      	mov	sp, r7
 801315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013162:	4770      	bx	lr

08013164 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8013164:	b580      	push	{r7, lr}
 8013166:	b082      	sub	sp, #8
 8013168:	af00      	add	r7, sp, #0
 801316a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d009      	beq.n	8013186 <lock_fs+0x22>
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	68db      	ldr	r3, [r3, #12]
 8013176:	4618      	mov	r0, r3
 8013178:	f002 fcde 	bl	8015b38 <ff_req_grant>
 801317c:	4603      	mov	r3, r0
 801317e:	2b00      	cmp	r3, #0
 8013180:	d001      	beq.n	8013186 <lock_fs+0x22>
 8013182:	2301      	movs	r3, #1
 8013184:	e000      	b.n	8013188 <lock_fs+0x24>
 8013186:	2300      	movs	r3, #0
}
 8013188:	4618      	mov	r0, r3
 801318a:	3708      	adds	r7, #8
 801318c:	46bd      	mov	sp, r7
 801318e:	bd80      	pop	{r7, pc}

08013190 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b082      	sub	sp, #8
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
 8013198:	460b      	mov	r3, r1
 801319a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d00d      	beq.n	80131be <unlock_fs+0x2e>
 80131a2:	78fb      	ldrb	r3, [r7, #3]
 80131a4:	2b0c      	cmp	r3, #12
 80131a6:	d00a      	beq.n	80131be <unlock_fs+0x2e>
 80131a8:	78fb      	ldrb	r3, [r7, #3]
 80131aa:	2b0b      	cmp	r3, #11
 80131ac:	d007      	beq.n	80131be <unlock_fs+0x2e>
 80131ae:	78fb      	ldrb	r3, [r7, #3]
 80131b0:	2b0f      	cmp	r3, #15
 80131b2:	d004      	beq.n	80131be <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	68db      	ldr	r3, [r3, #12]
 80131b8:	4618      	mov	r0, r3
 80131ba:	f002 fcd2 	bl	8015b62 <ff_rel_grant>
	}
}
 80131be:	bf00      	nop
 80131c0:	3708      	adds	r7, #8
 80131c2:	46bd      	mov	sp, r7
 80131c4:	bd80      	pop	{r7, pc}
	...

080131c8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80131c8:	b480      	push	{r7}
 80131ca:	b085      	sub	sp, #20
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	6078      	str	r0, [r7, #4]
 80131d0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80131d2:	2300      	movs	r3, #0
 80131d4:	60bb      	str	r3, [r7, #8]
 80131d6:	68bb      	ldr	r3, [r7, #8]
 80131d8:	60fb      	str	r3, [r7, #12]
 80131da:	e029      	b.n	8013230 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80131dc:	4a27      	ldr	r2, [pc, #156]	; (801327c <chk_lock+0xb4>)
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	011b      	lsls	r3, r3, #4
 80131e2:	4413      	add	r3, r2
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d01d      	beq.n	8013226 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80131ea:	4a24      	ldr	r2, [pc, #144]	; (801327c <chk_lock+0xb4>)
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	011b      	lsls	r3, r3, #4
 80131f0:	4413      	add	r3, r2
 80131f2:	681a      	ldr	r2, [r3, #0]
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	429a      	cmp	r2, r3
 80131fa:	d116      	bne.n	801322a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80131fc:	4a1f      	ldr	r2, [pc, #124]	; (801327c <chk_lock+0xb4>)
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	011b      	lsls	r3, r3, #4
 8013202:	4413      	add	r3, r2
 8013204:	3304      	adds	r3, #4
 8013206:	681a      	ldr	r2, [r3, #0]
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801320c:	429a      	cmp	r2, r3
 801320e:	d10c      	bne.n	801322a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8013210:	4a1a      	ldr	r2, [pc, #104]	; (801327c <chk_lock+0xb4>)
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	011b      	lsls	r3, r3, #4
 8013216:	4413      	add	r3, r2
 8013218:	3308      	adds	r3, #8
 801321a:	681a      	ldr	r2, [r3, #0]
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8013220:	429a      	cmp	r2, r3
 8013222:	d102      	bne.n	801322a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8013224:	e007      	b.n	8013236 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8013226:	2301      	movs	r3, #1
 8013228:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	3301      	adds	r3, #1
 801322e:	60fb      	str	r3, [r7, #12]
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	2b01      	cmp	r3, #1
 8013234:	d9d2      	bls.n	80131dc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	2b02      	cmp	r3, #2
 801323a:	d109      	bne.n	8013250 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801323c:	68bb      	ldr	r3, [r7, #8]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d102      	bne.n	8013248 <chk_lock+0x80>
 8013242:	683b      	ldr	r3, [r7, #0]
 8013244:	2b02      	cmp	r3, #2
 8013246:	d101      	bne.n	801324c <chk_lock+0x84>
 8013248:	2300      	movs	r3, #0
 801324a:	e010      	b.n	801326e <chk_lock+0xa6>
 801324c:	2312      	movs	r3, #18
 801324e:	e00e      	b.n	801326e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8013250:	683b      	ldr	r3, [r7, #0]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d108      	bne.n	8013268 <chk_lock+0xa0>
 8013256:	4a09      	ldr	r2, [pc, #36]	; (801327c <chk_lock+0xb4>)
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	011b      	lsls	r3, r3, #4
 801325c:	4413      	add	r3, r2
 801325e:	330c      	adds	r3, #12
 8013260:	881b      	ldrh	r3, [r3, #0]
 8013262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013266:	d101      	bne.n	801326c <chk_lock+0xa4>
 8013268:	2310      	movs	r3, #16
 801326a:	e000      	b.n	801326e <chk_lock+0xa6>
 801326c:	2300      	movs	r3, #0
}
 801326e:	4618      	mov	r0, r3
 8013270:	3714      	adds	r7, #20
 8013272:	46bd      	mov	sp, r7
 8013274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013278:	4770      	bx	lr
 801327a:	bf00      	nop
 801327c:	20000870 	.word	0x20000870

08013280 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8013280:	b480      	push	{r7}
 8013282:	b083      	sub	sp, #12
 8013284:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013286:	2300      	movs	r3, #0
 8013288:	607b      	str	r3, [r7, #4]
 801328a:	e002      	b.n	8013292 <enq_lock+0x12>
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	3301      	adds	r3, #1
 8013290:	607b      	str	r3, [r7, #4]
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	2b01      	cmp	r3, #1
 8013296:	d806      	bhi.n	80132a6 <enq_lock+0x26>
 8013298:	4a09      	ldr	r2, [pc, #36]	; (80132c0 <enq_lock+0x40>)
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	011b      	lsls	r3, r3, #4
 801329e:	4413      	add	r3, r2
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d1f2      	bne.n	801328c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	2b02      	cmp	r3, #2
 80132aa:	bf14      	ite	ne
 80132ac:	2301      	movne	r3, #1
 80132ae:	2300      	moveq	r3, #0
 80132b0:	b2db      	uxtb	r3, r3
}
 80132b2:	4618      	mov	r0, r3
 80132b4:	370c      	adds	r7, #12
 80132b6:	46bd      	mov	sp, r7
 80132b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132bc:	4770      	bx	lr
 80132be:	bf00      	nop
 80132c0:	20000870 	.word	0x20000870

080132c4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80132c4:	b480      	push	{r7}
 80132c6:	b085      	sub	sp, #20
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
 80132cc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80132ce:	2300      	movs	r3, #0
 80132d0:	60fb      	str	r3, [r7, #12]
 80132d2:	e01f      	b.n	8013314 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80132d4:	4a41      	ldr	r2, [pc, #260]	; (80133dc <inc_lock+0x118>)
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	011b      	lsls	r3, r3, #4
 80132da:	4413      	add	r3, r2
 80132dc:	681a      	ldr	r2, [r3, #0]
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	429a      	cmp	r2, r3
 80132e4:	d113      	bne.n	801330e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80132e6:	4a3d      	ldr	r2, [pc, #244]	; (80133dc <inc_lock+0x118>)
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	011b      	lsls	r3, r3, #4
 80132ec:	4413      	add	r3, r2
 80132ee:	3304      	adds	r3, #4
 80132f0:	681a      	ldr	r2, [r3, #0]
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80132f6:	429a      	cmp	r2, r3
 80132f8:	d109      	bne.n	801330e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80132fa:	4a38      	ldr	r2, [pc, #224]	; (80133dc <inc_lock+0x118>)
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	011b      	lsls	r3, r3, #4
 8013300:	4413      	add	r3, r2
 8013302:	3308      	adds	r3, #8
 8013304:	681a      	ldr	r2, [r3, #0]
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801330a:	429a      	cmp	r2, r3
 801330c:	d006      	beq.n	801331c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	3301      	adds	r3, #1
 8013312:	60fb      	str	r3, [r7, #12]
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	2b01      	cmp	r3, #1
 8013318:	d9dc      	bls.n	80132d4 <inc_lock+0x10>
 801331a:	e000      	b.n	801331e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801331c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	2b02      	cmp	r3, #2
 8013322:	d132      	bne.n	801338a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013324:	2300      	movs	r3, #0
 8013326:	60fb      	str	r3, [r7, #12]
 8013328:	e002      	b.n	8013330 <inc_lock+0x6c>
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	3301      	adds	r3, #1
 801332e:	60fb      	str	r3, [r7, #12]
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	2b01      	cmp	r3, #1
 8013334:	d806      	bhi.n	8013344 <inc_lock+0x80>
 8013336:	4a29      	ldr	r2, [pc, #164]	; (80133dc <inc_lock+0x118>)
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	011b      	lsls	r3, r3, #4
 801333c:	4413      	add	r3, r2
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d1f2      	bne.n	801332a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	2b02      	cmp	r3, #2
 8013348:	d101      	bne.n	801334e <inc_lock+0x8a>
 801334a:	2300      	movs	r3, #0
 801334c:	e040      	b.n	80133d0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	681a      	ldr	r2, [r3, #0]
 8013352:	4922      	ldr	r1, [pc, #136]	; (80133dc <inc_lock+0x118>)
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	011b      	lsls	r3, r3, #4
 8013358:	440b      	add	r3, r1
 801335a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	689a      	ldr	r2, [r3, #8]
 8013360:	491e      	ldr	r1, [pc, #120]	; (80133dc <inc_lock+0x118>)
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	011b      	lsls	r3, r3, #4
 8013366:	440b      	add	r3, r1
 8013368:	3304      	adds	r3, #4
 801336a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	695a      	ldr	r2, [r3, #20]
 8013370:	491a      	ldr	r1, [pc, #104]	; (80133dc <inc_lock+0x118>)
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	011b      	lsls	r3, r3, #4
 8013376:	440b      	add	r3, r1
 8013378:	3308      	adds	r3, #8
 801337a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801337c:	4a17      	ldr	r2, [pc, #92]	; (80133dc <inc_lock+0x118>)
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	011b      	lsls	r3, r3, #4
 8013382:	4413      	add	r3, r2
 8013384:	330c      	adds	r3, #12
 8013386:	2200      	movs	r2, #0
 8013388:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801338a:	683b      	ldr	r3, [r7, #0]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d009      	beq.n	80133a4 <inc_lock+0xe0>
 8013390:	4a12      	ldr	r2, [pc, #72]	; (80133dc <inc_lock+0x118>)
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	011b      	lsls	r3, r3, #4
 8013396:	4413      	add	r3, r2
 8013398:	330c      	adds	r3, #12
 801339a:	881b      	ldrh	r3, [r3, #0]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d001      	beq.n	80133a4 <inc_lock+0xe0>
 80133a0:	2300      	movs	r3, #0
 80133a2:	e015      	b.n	80133d0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80133a4:	683b      	ldr	r3, [r7, #0]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d108      	bne.n	80133bc <inc_lock+0xf8>
 80133aa:	4a0c      	ldr	r2, [pc, #48]	; (80133dc <inc_lock+0x118>)
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	011b      	lsls	r3, r3, #4
 80133b0:	4413      	add	r3, r2
 80133b2:	330c      	adds	r3, #12
 80133b4:	881b      	ldrh	r3, [r3, #0]
 80133b6:	3301      	adds	r3, #1
 80133b8:	b29a      	uxth	r2, r3
 80133ba:	e001      	b.n	80133c0 <inc_lock+0xfc>
 80133bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80133c0:	4906      	ldr	r1, [pc, #24]	; (80133dc <inc_lock+0x118>)
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	011b      	lsls	r3, r3, #4
 80133c6:	440b      	add	r3, r1
 80133c8:	330c      	adds	r3, #12
 80133ca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	3301      	adds	r3, #1
}
 80133d0:	4618      	mov	r0, r3
 80133d2:	3714      	adds	r7, #20
 80133d4:	46bd      	mov	sp, r7
 80133d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133da:	4770      	bx	lr
 80133dc:	20000870 	.word	0x20000870

080133e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80133e0:	b480      	push	{r7}
 80133e2:	b085      	sub	sp, #20
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	3b01      	subs	r3, #1
 80133ec:	607b      	str	r3, [r7, #4]
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	2b01      	cmp	r3, #1
 80133f2:	d825      	bhi.n	8013440 <dec_lock+0x60>
		n = Files[i].ctr;
 80133f4:	4a17      	ldr	r2, [pc, #92]	; (8013454 <dec_lock+0x74>)
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	011b      	lsls	r3, r3, #4
 80133fa:	4413      	add	r3, r2
 80133fc:	330c      	adds	r3, #12
 80133fe:	881b      	ldrh	r3, [r3, #0]
 8013400:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8013402:	89fb      	ldrh	r3, [r7, #14]
 8013404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013408:	d101      	bne.n	801340e <dec_lock+0x2e>
 801340a:	2300      	movs	r3, #0
 801340c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801340e:	89fb      	ldrh	r3, [r7, #14]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d002      	beq.n	801341a <dec_lock+0x3a>
 8013414:	89fb      	ldrh	r3, [r7, #14]
 8013416:	3b01      	subs	r3, #1
 8013418:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801341a:	4a0e      	ldr	r2, [pc, #56]	; (8013454 <dec_lock+0x74>)
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	011b      	lsls	r3, r3, #4
 8013420:	4413      	add	r3, r2
 8013422:	330c      	adds	r3, #12
 8013424:	89fa      	ldrh	r2, [r7, #14]
 8013426:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8013428:	89fb      	ldrh	r3, [r7, #14]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d105      	bne.n	801343a <dec_lock+0x5a>
 801342e:	4a09      	ldr	r2, [pc, #36]	; (8013454 <dec_lock+0x74>)
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	011b      	lsls	r3, r3, #4
 8013434:	4413      	add	r3, r2
 8013436:	2200      	movs	r2, #0
 8013438:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801343a:	2300      	movs	r3, #0
 801343c:	737b      	strb	r3, [r7, #13]
 801343e:	e001      	b.n	8013444 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8013440:	2302      	movs	r3, #2
 8013442:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8013444:	7b7b      	ldrb	r3, [r7, #13]
}
 8013446:	4618      	mov	r0, r3
 8013448:	3714      	adds	r7, #20
 801344a:	46bd      	mov	sp, r7
 801344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013450:	4770      	bx	lr
 8013452:	bf00      	nop
 8013454:	20000870 	.word	0x20000870

08013458 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8013458:	b480      	push	{r7}
 801345a:	b085      	sub	sp, #20
 801345c:	af00      	add	r7, sp, #0
 801345e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8013460:	2300      	movs	r3, #0
 8013462:	60fb      	str	r3, [r7, #12]
 8013464:	e010      	b.n	8013488 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8013466:	4a0d      	ldr	r2, [pc, #52]	; (801349c <clear_lock+0x44>)
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	011b      	lsls	r3, r3, #4
 801346c:	4413      	add	r3, r2
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	687a      	ldr	r2, [r7, #4]
 8013472:	429a      	cmp	r2, r3
 8013474:	d105      	bne.n	8013482 <clear_lock+0x2a>
 8013476:	4a09      	ldr	r2, [pc, #36]	; (801349c <clear_lock+0x44>)
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	011b      	lsls	r3, r3, #4
 801347c:	4413      	add	r3, r2
 801347e:	2200      	movs	r2, #0
 8013480:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	3301      	adds	r3, #1
 8013486:	60fb      	str	r3, [r7, #12]
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	2b01      	cmp	r3, #1
 801348c:	d9eb      	bls.n	8013466 <clear_lock+0xe>
	}
}
 801348e:	bf00      	nop
 8013490:	bf00      	nop
 8013492:	3714      	adds	r7, #20
 8013494:	46bd      	mov	sp, r7
 8013496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349a:	4770      	bx	lr
 801349c:	20000870 	.word	0x20000870

080134a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b086      	sub	sp, #24
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80134a8:	2300      	movs	r3, #0
 80134aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	78db      	ldrb	r3, [r3, #3]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d034      	beq.n	801351e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134b8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	7858      	ldrb	r0, [r3, #1]
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80134c4:	2301      	movs	r3, #1
 80134c6:	697a      	ldr	r2, [r7, #20]
 80134c8:	f7ff fd0e 	bl	8012ee8 <disk_write>
 80134cc:	4603      	mov	r3, r0
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d002      	beq.n	80134d8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80134d2:	2301      	movs	r3, #1
 80134d4:	73fb      	strb	r3, [r7, #15]
 80134d6:	e022      	b.n	801351e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	2200      	movs	r2, #0
 80134dc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134e2:	697a      	ldr	r2, [r7, #20]
 80134e4:	1ad2      	subs	r2, r2, r3
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	69db      	ldr	r3, [r3, #28]
 80134ea:	429a      	cmp	r2, r3
 80134ec:	d217      	bcs.n	801351e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	789b      	ldrb	r3, [r3, #2]
 80134f2:	613b      	str	r3, [r7, #16]
 80134f4:	e010      	b.n	8013518 <sync_window+0x78>
					wsect += fs->fsize;
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	69db      	ldr	r3, [r3, #28]
 80134fa:	697a      	ldr	r2, [r7, #20]
 80134fc:	4413      	add	r3, r2
 80134fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	7858      	ldrb	r0, [r3, #1]
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801350a:	2301      	movs	r3, #1
 801350c:	697a      	ldr	r2, [r7, #20]
 801350e:	f7ff fceb 	bl	8012ee8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013512:	693b      	ldr	r3, [r7, #16]
 8013514:	3b01      	subs	r3, #1
 8013516:	613b      	str	r3, [r7, #16]
 8013518:	693b      	ldr	r3, [r7, #16]
 801351a:	2b01      	cmp	r3, #1
 801351c:	d8eb      	bhi.n	80134f6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801351e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013520:	4618      	mov	r0, r3
 8013522:	3718      	adds	r7, #24
 8013524:	46bd      	mov	sp, r7
 8013526:	bd80      	pop	{r7, pc}

08013528 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b084      	sub	sp, #16
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
 8013530:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8013532:	2300      	movs	r3, #0
 8013534:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801353a:	683a      	ldr	r2, [r7, #0]
 801353c:	429a      	cmp	r2, r3
 801353e:	d01b      	beq.n	8013578 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8013540:	6878      	ldr	r0, [r7, #4]
 8013542:	f7ff ffad 	bl	80134a0 <sync_window>
 8013546:	4603      	mov	r3, r0
 8013548:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801354a:	7bfb      	ldrb	r3, [r7, #15]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d113      	bne.n	8013578 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	7858      	ldrb	r0, [r3, #1]
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801355a:	2301      	movs	r3, #1
 801355c:	683a      	ldr	r2, [r7, #0]
 801355e:	f7ff fca3 	bl	8012ea8 <disk_read>
 8013562:	4603      	mov	r3, r0
 8013564:	2b00      	cmp	r3, #0
 8013566:	d004      	beq.n	8013572 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013568:	f04f 33ff 	mov.w	r3, #4294967295
 801356c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801356e:	2301      	movs	r3, #1
 8013570:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	683a      	ldr	r2, [r7, #0]
 8013576:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8013578:	7bfb      	ldrb	r3, [r7, #15]
}
 801357a:	4618      	mov	r0, r3
 801357c:	3710      	adds	r7, #16
 801357e:	46bd      	mov	sp, r7
 8013580:	bd80      	pop	{r7, pc}
	...

08013584 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8013584:	b580      	push	{r7, lr}
 8013586:	b084      	sub	sp, #16
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801358c:	6878      	ldr	r0, [r7, #4]
 801358e:	f7ff ff87 	bl	80134a0 <sync_window>
 8013592:	4603      	mov	r3, r0
 8013594:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013596:	7bfb      	ldrb	r3, [r7, #15]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d158      	bne.n	801364e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	781b      	ldrb	r3, [r3, #0]
 80135a0:	2b03      	cmp	r3, #3
 80135a2:	d148      	bne.n	8013636 <sync_fs+0xb2>
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	791b      	ldrb	r3, [r3, #4]
 80135a8:	2b01      	cmp	r3, #1
 80135aa:	d144      	bne.n	8013636 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	3334      	adds	r3, #52	; 0x34
 80135b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80135b4:	2100      	movs	r1, #0
 80135b6:	4618      	mov	r0, r3
 80135b8:	f7ff fd77 	bl	80130aa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	3334      	adds	r3, #52	; 0x34
 80135c0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80135c4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80135c8:	4618      	mov	r0, r3
 80135ca:	f7ff fd06 	bl	8012fda <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	3334      	adds	r3, #52	; 0x34
 80135d2:	4921      	ldr	r1, [pc, #132]	; (8013658 <sync_fs+0xd4>)
 80135d4:	4618      	mov	r0, r3
 80135d6:	f7ff fd1b 	bl	8013010 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	3334      	adds	r3, #52	; 0x34
 80135de:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80135e2:	491e      	ldr	r1, [pc, #120]	; (801365c <sync_fs+0xd8>)
 80135e4:	4618      	mov	r0, r3
 80135e6:	f7ff fd13 	bl	8013010 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	3334      	adds	r3, #52	; 0x34
 80135ee:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	695b      	ldr	r3, [r3, #20]
 80135f6:	4619      	mov	r1, r3
 80135f8:	4610      	mov	r0, r2
 80135fa:	f7ff fd09 	bl	8013010 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	3334      	adds	r3, #52	; 0x34
 8013602:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	691b      	ldr	r3, [r3, #16]
 801360a:	4619      	mov	r1, r3
 801360c:	4610      	mov	r0, r2
 801360e:	f7ff fcff 	bl	8013010 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	6a1b      	ldr	r3, [r3, #32]
 8013616:	1c5a      	adds	r2, r3, #1
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	7858      	ldrb	r0, [r3, #1]
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801362a:	2301      	movs	r3, #1
 801362c:	f7ff fc5c 	bl	8012ee8 <disk_write>
			fs->fsi_flag = 0;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	2200      	movs	r2, #0
 8013634:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	785b      	ldrb	r3, [r3, #1]
 801363a:	2200      	movs	r2, #0
 801363c:	2100      	movs	r1, #0
 801363e:	4618      	mov	r0, r3
 8013640:	f7ff fc72 	bl	8012f28 <disk_ioctl>
 8013644:	4603      	mov	r3, r0
 8013646:	2b00      	cmp	r3, #0
 8013648:	d001      	beq.n	801364e <sync_fs+0xca>
 801364a:	2301      	movs	r3, #1
 801364c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801364e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013650:	4618      	mov	r0, r3
 8013652:	3710      	adds	r7, #16
 8013654:	46bd      	mov	sp, r7
 8013656:	bd80      	pop	{r7, pc}
 8013658:	41615252 	.word	0x41615252
 801365c:	61417272 	.word	0x61417272

08013660 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013660:	b480      	push	{r7}
 8013662:	b083      	sub	sp, #12
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]
 8013668:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801366a:	683b      	ldr	r3, [r7, #0]
 801366c:	3b02      	subs	r3, #2
 801366e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	699b      	ldr	r3, [r3, #24]
 8013674:	3b02      	subs	r3, #2
 8013676:	683a      	ldr	r2, [r7, #0]
 8013678:	429a      	cmp	r2, r3
 801367a:	d301      	bcc.n	8013680 <clust2sect+0x20>
 801367c:	2300      	movs	r3, #0
 801367e:	e008      	b.n	8013692 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	895b      	ldrh	r3, [r3, #10]
 8013684:	461a      	mov	r2, r3
 8013686:	683b      	ldr	r3, [r7, #0]
 8013688:	fb03 f202 	mul.w	r2, r3, r2
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013690:	4413      	add	r3, r2
}
 8013692:	4618      	mov	r0, r3
 8013694:	370c      	adds	r7, #12
 8013696:	46bd      	mov	sp, r7
 8013698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369c:	4770      	bx	lr

0801369e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801369e:	b580      	push	{r7, lr}
 80136a0:	b086      	sub	sp, #24
 80136a2:	af00      	add	r7, sp, #0
 80136a4:	6078      	str	r0, [r7, #4]
 80136a6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80136ae:	683b      	ldr	r3, [r7, #0]
 80136b0:	2b01      	cmp	r3, #1
 80136b2:	d904      	bls.n	80136be <get_fat+0x20>
 80136b4:	693b      	ldr	r3, [r7, #16]
 80136b6:	699b      	ldr	r3, [r3, #24]
 80136b8:	683a      	ldr	r2, [r7, #0]
 80136ba:	429a      	cmp	r2, r3
 80136bc:	d302      	bcc.n	80136c4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80136be:	2301      	movs	r3, #1
 80136c0:	617b      	str	r3, [r7, #20]
 80136c2:	e08f      	b.n	80137e4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80136c4:	f04f 33ff 	mov.w	r3, #4294967295
 80136c8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80136ca:	693b      	ldr	r3, [r7, #16]
 80136cc:	781b      	ldrb	r3, [r3, #0]
 80136ce:	2b03      	cmp	r3, #3
 80136d0:	d062      	beq.n	8013798 <get_fat+0xfa>
 80136d2:	2b03      	cmp	r3, #3
 80136d4:	dc7c      	bgt.n	80137d0 <get_fat+0x132>
 80136d6:	2b01      	cmp	r3, #1
 80136d8:	d002      	beq.n	80136e0 <get_fat+0x42>
 80136da:	2b02      	cmp	r3, #2
 80136dc:	d042      	beq.n	8013764 <get_fat+0xc6>
 80136de:	e077      	b.n	80137d0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80136e0:	683b      	ldr	r3, [r7, #0]
 80136e2:	60fb      	str	r3, [r7, #12]
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	085b      	lsrs	r3, r3, #1
 80136e8:	68fa      	ldr	r2, [r7, #12]
 80136ea:	4413      	add	r3, r2
 80136ec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80136ee:	693b      	ldr	r3, [r7, #16]
 80136f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	0a5b      	lsrs	r3, r3, #9
 80136f6:	4413      	add	r3, r2
 80136f8:	4619      	mov	r1, r3
 80136fa:	6938      	ldr	r0, [r7, #16]
 80136fc:	f7ff ff14 	bl	8013528 <move_window>
 8013700:	4603      	mov	r3, r0
 8013702:	2b00      	cmp	r3, #0
 8013704:	d167      	bne.n	80137d6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	1c5a      	adds	r2, r3, #1
 801370a:	60fa      	str	r2, [r7, #12]
 801370c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013710:	693a      	ldr	r2, [r7, #16]
 8013712:	4413      	add	r3, r2
 8013714:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013718:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801371a:	693b      	ldr	r3, [r7, #16]
 801371c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	0a5b      	lsrs	r3, r3, #9
 8013722:	4413      	add	r3, r2
 8013724:	4619      	mov	r1, r3
 8013726:	6938      	ldr	r0, [r7, #16]
 8013728:	f7ff fefe 	bl	8013528 <move_window>
 801372c:	4603      	mov	r3, r0
 801372e:	2b00      	cmp	r3, #0
 8013730:	d153      	bne.n	80137da <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013738:	693a      	ldr	r2, [r7, #16]
 801373a:	4413      	add	r3, r2
 801373c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013740:	021b      	lsls	r3, r3, #8
 8013742:	461a      	mov	r2, r3
 8013744:	68bb      	ldr	r3, [r7, #8]
 8013746:	4313      	orrs	r3, r2
 8013748:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801374a:	683b      	ldr	r3, [r7, #0]
 801374c:	f003 0301 	and.w	r3, r3, #1
 8013750:	2b00      	cmp	r3, #0
 8013752:	d002      	beq.n	801375a <get_fat+0xbc>
 8013754:	68bb      	ldr	r3, [r7, #8]
 8013756:	091b      	lsrs	r3, r3, #4
 8013758:	e002      	b.n	8013760 <get_fat+0xc2>
 801375a:	68bb      	ldr	r3, [r7, #8]
 801375c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013760:	617b      	str	r3, [r7, #20]
			break;
 8013762:	e03f      	b.n	80137e4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013764:	693b      	ldr	r3, [r7, #16]
 8013766:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013768:	683b      	ldr	r3, [r7, #0]
 801376a:	0a1b      	lsrs	r3, r3, #8
 801376c:	4413      	add	r3, r2
 801376e:	4619      	mov	r1, r3
 8013770:	6938      	ldr	r0, [r7, #16]
 8013772:	f7ff fed9 	bl	8013528 <move_window>
 8013776:	4603      	mov	r3, r0
 8013778:	2b00      	cmp	r3, #0
 801377a:	d130      	bne.n	80137de <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801377c:	693b      	ldr	r3, [r7, #16]
 801377e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013782:	683b      	ldr	r3, [r7, #0]
 8013784:	005b      	lsls	r3, r3, #1
 8013786:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801378a:	4413      	add	r3, r2
 801378c:	4618      	mov	r0, r3
 801378e:	f7ff fbe9 	bl	8012f64 <ld_word>
 8013792:	4603      	mov	r3, r0
 8013794:	617b      	str	r3, [r7, #20]
			break;
 8013796:	e025      	b.n	80137e4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013798:	693b      	ldr	r3, [r7, #16]
 801379a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801379c:	683b      	ldr	r3, [r7, #0]
 801379e:	09db      	lsrs	r3, r3, #7
 80137a0:	4413      	add	r3, r2
 80137a2:	4619      	mov	r1, r3
 80137a4:	6938      	ldr	r0, [r7, #16]
 80137a6:	f7ff febf 	bl	8013528 <move_window>
 80137aa:	4603      	mov	r3, r0
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d118      	bne.n	80137e2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80137b0:	693b      	ldr	r3, [r7, #16]
 80137b2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80137b6:	683b      	ldr	r3, [r7, #0]
 80137b8:	009b      	lsls	r3, r3, #2
 80137ba:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80137be:	4413      	add	r3, r2
 80137c0:	4618      	mov	r0, r3
 80137c2:	f7ff fbe7 	bl	8012f94 <ld_dword>
 80137c6:	4603      	mov	r3, r0
 80137c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80137cc:	617b      	str	r3, [r7, #20]
			break;
 80137ce:	e009      	b.n	80137e4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80137d0:	2301      	movs	r3, #1
 80137d2:	617b      	str	r3, [r7, #20]
 80137d4:	e006      	b.n	80137e4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80137d6:	bf00      	nop
 80137d8:	e004      	b.n	80137e4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80137da:	bf00      	nop
 80137dc:	e002      	b.n	80137e4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80137de:	bf00      	nop
 80137e0:	e000      	b.n	80137e4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80137e2:	bf00      	nop
		}
	}

	return val;
 80137e4:	697b      	ldr	r3, [r7, #20]
}
 80137e6:	4618      	mov	r0, r3
 80137e8:	3718      	adds	r7, #24
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bd80      	pop	{r7, pc}

080137ee <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80137ee:	b590      	push	{r4, r7, lr}
 80137f0:	b089      	sub	sp, #36	; 0x24
 80137f2:	af00      	add	r7, sp, #0
 80137f4:	60f8      	str	r0, [r7, #12]
 80137f6:	60b9      	str	r1, [r7, #8]
 80137f8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80137fa:	2302      	movs	r3, #2
 80137fc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80137fe:	68bb      	ldr	r3, [r7, #8]
 8013800:	2b01      	cmp	r3, #1
 8013802:	f240 80d2 	bls.w	80139aa <put_fat+0x1bc>
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	699b      	ldr	r3, [r3, #24]
 801380a:	68ba      	ldr	r2, [r7, #8]
 801380c:	429a      	cmp	r2, r3
 801380e:	f080 80cc 	bcs.w	80139aa <put_fat+0x1bc>
		switch (fs->fs_type) {
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	781b      	ldrb	r3, [r3, #0]
 8013816:	2b03      	cmp	r3, #3
 8013818:	f000 8096 	beq.w	8013948 <put_fat+0x15a>
 801381c:	2b03      	cmp	r3, #3
 801381e:	f300 80cd 	bgt.w	80139bc <put_fat+0x1ce>
 8013822:	2b01      	cmp	r3, #1
 8013824:	d002      	beq.n	801382c <put_fat+0x3e>
 8013826:	2b02      	cmp	r3, #2
 8013828:	d06e      	beq.n	8013908 <put_fat+0x11a>
 801382a:	e0c7      	b.n	80139bc <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801382c:	68bb      	ldr	r3, [r7, #8]
 801382e:	61bb      	str	r3, [r7, #24]
 8013830:	69bb      	ldr	r3, [r7, #24]
 8013832:	085b      	lsrs	r3, r3, #1
 8013834:	69ba      	ldr	r2, [r7, #24]
 8013836:	4413      	add	r3, r2
 8013838:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801383e:	69bb      	ldr	r3, [r7, #24]
 8013840:	0a5b      	lsrs	r3, r3, #9
 8013842:	4413      	add	r3, r2
 8013844:	4619      	mov	r1, r3
 8013846:	68f8      	ldr	r0, [r7, #12]
 8013848:	f7ff fe6e 	bl	8013528 <move_window>
 801384c:	4603      	mov	r3, r0
 801384e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013850:	7ffb      	ldrb	r3, [r7, #31]
 8013852:	2b00      	cmp	r3, #0
 8013854:	f040 80ab 	bne.w	80139ae <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801385e:	69bb      	ldr	r3, [r7, #24]
 8013860:	1c59      	adds	r1, r3, #1
 8013862:	61b9      	str	r1, [r7, #24]
 8013864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013868:	4413      	add	r3, r2
 801386a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801386c:	68bb      	ldr	r3, [r7, #8]
 801386e:	f003 0301 	and.w	r3, r3, #1
 8013872:	2b00      	cmp	r3, #0
 8013874:	d00d      	beq.n	8013892 <put_fat+0xa4>
 8013876:	697b      	ldr	r3, [r7, #20]
 8013878:	781b      	ldrb	r3, [r3, #0]
 801387a:	b25b      	sxtb	r3, r3
 801387c:	f003 030f 	and.w	r3, r3, #15
 8013880:	b25a      	sxtb	r2, r3
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	b2db      	uxtb	r3, r3
 8013886:	011b      	lsls	r3, r3, #4
 8013888:	b25b      	sxtb	r3, r3
 801388a:	4313      	orrs	r3, r2
 801388c:	b25b      	sxtb	r3, r3
 801388e:	b2db      	uxtb	r3, r3
 8013890:	e001      	b.n	8013896 <put_fat+0xa8>
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	b2db      	uxtb	r3, r3
 8013896:	697a      	ldr	r2, [r7, #20]
 8013898:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	2201      	movs	r2, #1
 801389e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80138a4:	69bb      	ldr	r3, [r7, #24]
 80138a6:	0a5b      	lsrs	r3, r3, #9
 80138a8:	4413      	add	r3, r2
 80138aa:	4619      	mov	r1, r3
 80138ac:	68f8      	ldr	r0, [r7, #12]
 80138ae:	f7ff fe3b 	bl	8013528 <move_window>
 80138b2:	4603      	mov	r3, r0
 80138b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80138b6:	7ffb      	ldrb	r3, [r7, #31]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d17a      	bne.n	80139b2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80138c2:	69bb      	ldr	r3, [r7, #24]
 80138c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80138c8:	4413      	add	r3, r2
 80138ca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80138cc:	68bb      	ldr	r3, [r7, #8]
 80138ce:	f003 0301 	and.w	r3, r3, #1
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d003      	beq.n	80138de <put_fat+0xf0>
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	091b      	lsrs	r3, r3, #4
 80138da:	b2db      	uxtb	r3, r3
 80138dc:	e00e      	b.n	80138fc <put_fat+0x10e>
 80138de:	697b      	ldr	r3, [r7, #20]
 80138e0:	781b      	ldrb	r3, [r3, #0]
 80138e2:	b25b      	sxtb	r3, r3
 80138e4:	f023 030f 	bic.w	r3, r3, #15
 80138e8:	b25a      	sxtb	r2, r3
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	0a1b      	lsrs	r3, r3, #8
 80138ee:	b25b      	sxtb	r3, r3
 80138f0:	f003 030f 	and.w	r3, r3, #15
 80138f4:	b25b      	sxtb	r3, r3
 80138f6:	4313      	orrs	r3, r2
 80138f8:	b25b      	sxtb	r3, r3
 80138fa:	b2db      	uxtb	r3, r3
 80138fc:	697a      	ldr	r2, [r7, #20]
 80138fe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	2201      	movs	r2, #1
 8013904:	70da      	strb	r2, [r3, #3]
			break;
 8013906:	e059      	b.n	80139bc <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801390c:	68bb      	ldr	r3, [r7, #8]
 801390e:	0a1b      	lsrs	r3, r3, #8
 8013910:	4413      	add	r3, r2
 8013912:	4619      	mov	r1, r3
 8013914:	68f8      	ldr	r0, [r7, #12]
 8013916:	f7ff fe07 	bl	8013528 <move_window>
 801391a:	4603      	mov	r3, r0
 801391c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801391e:	7ffb      	ldrb	r3, [r7, #31]
 8013920:	2b00      	cmp	r3, #0
 8013922:	d148      	bne.n	80139b6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801392a:	68bb      	ldr	r3, [r7, #8]
 801392c:	005b      	lsls	r3, r3, #1
 801392e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8013932:	4413      	add	r3, r2
 8013934:	687a      	ldr	r2, [r7, #4]
 8013936:	b292      	uxth	r2, r2
 8013938:	4611      	mov	r1, r2
 801393a:	4618      	mov	r0, r3
 801393c:	f7ff fb4d 	bl	8012fda <st_word>
			fs->wflag = 1;
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	2201      	movs	r2, #1
 8013944:	70da      	strb	r2, [r3, #3]
			break;
 8013946:	e039      	b.n	80139bc <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801394c:	68bb      	ldr	r3, [r7, #8]
 801394e:	09db      	lsrs	r3, r3, #7
 8013950:	4413      	add	r3, r2
 8013952:	4619      	mov	r1, r3
 8013954:	68f8      	ldr	r0, [r7, #12]
 8013956:	f7ff fde7 	bl	8013528 <move_window>
 801395a:	4603      	mov	r3, r0
 801395c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801395e:	7ffb      	ldrb	r3, [r7, #31]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d12a      	bne.n	80139ba <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013970:	68bb      	ldr	r3, [r7, #8]
 8013972:	009b      	lsls	r3, r3, #2
 8013974:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013978:	4413      	add	r3, r2
 801397a:	4618      	mov	r0, r3
 801397c:	f7ff fb0a 	bl	8012f94 <ld_dword>
 8013980:	4603      	mov	r3, r0
 8013982:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013986:	4323      	orrs	r3, r4
 8013988:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013990:	68bb      	ldr	r3, [r7, #8]
 8013992:	009b      	lsls	r3, r3, #2
 8013994:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013998:	4413      	add	r3, r2
 801399a:	6879      	ldr	r1, [r7, #4]
 801399c:	4618      	mov	r0, r3
 801399e:	f7ff fb37 	bl	8013010 <st_dword>
			fs->wflag = 1;
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	2201      	movs	r2, #1
 80139a6:	70da      	strb	r2, [r3, #3]
			break;
 80139a8:	e008      	b.n	80139bc <put_fat+0x1ce>
		}
	}
 80139aa:	bf00      	nop
 80139ac:	e006      	b.n	80139bc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80139ae:	bf00      	nop
 80139b0:	e004      	b.n	80139bc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80139b2:	bf00      	nop
 80139b4:	e002      	b.n	80139bc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80139b6:	bf00      	nop
 80139b8:	e000      	b.n	80139bc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80139ba:	bf00      	nop
	return res;
 80139bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80139be:	4618      	mov	r0, r3
 80139c0:	3724      	adds	r7, #36	; 0x24
 80139c2:	46bd      	mov	sp, r7
 80139c4:	bd90      	pop	{r4, r7, pc}

080139c6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80139c6:	b580      	push	{r7, lr}
 80139c8:	b088      	sub	sp, #32
 80139ca:	af00      	add	r7, sp, #0
 80139cc:	60f8      	str	r0, [r7, #12]
 80139ce:	60b9      	str	r1, [r7, #8]
 80139d0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80139d2:	2300      	movs	r3, #0
 80139d4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80139dc:	68bb      	ldr	r3, [r7, #8]
 80139de:	2b01      	cmp	r3, #1
 80139e0:	d904      	bls.n	80139ec <remove_chain+0x26>
 80139e2:	69bb      	ldr	r3, [r7, #24]
 80139e4:	699b      	ldr	r3, [r3, #24]
 80139e6:	68ba      	ldr	r2, [r7, #8]
 80139e8:	429a      	cmp	r2, r3
 80139ea:	d301      	bcc.n	80139f0 <remove_chain+0x2a>
 80139ec:	2302      	movs	r3, #2
 80139ee:	e04b      	b.n	8013a88 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d00c      	beq.n	8013a10 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80139f6:	f04f 32ff 	mov.w	r2, #4294967295
 80139fa:	6879      	ldr	r1, [r7, #4]
 80139fc:	69b8      	ldr	r0, [r7, #24]
 80139fe:	f7ff fef6 	bl	80137ee <put_fat>
 8013a02:	4603      	mov	r3, r0
 8013a04:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8013a06:	7ffb      	ldrb	r3, [r7, #31]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d001      	beq.n	8013a10 <remove_chain+0x4a>
 8013a0c:	7ffb      	ldrb	r3, [r7, #31]
 8013a0e:	e03b      	b.n	8013a88 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013a10:	68b9      	ldr	r1, [r7, #8]
 8013a12:	68f8      	ldr	r0, [r7, #12]
 8013a14:	f7ff fe43 	bl	801369e <get_fat>
 8013a18:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013a1a:	697b      	ldr	r3, [r7, #20]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d031      	beq.n	8013a84 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013a20:	697b      	ldr	r3, [r7, #20]
 8013a22:	2b01      	cmp	r3, #1
 8013a24:	d101      	bne.n	8013a2a <remove_chain+0x64>
 8013a26:	2302      	movs	r3, #2
 8013a28:	e02e      	b.n	8013a88 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013a2a:	697b      	ldr	r3, [r7, #20]
 8013a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a30:	d101      	bne.n	8013a36 <remove_chain+0x70>
 8013a32:	2301      	movs	r3, #1
 8013a34:	e028      	b.n	8013a88 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013a36:	2200      	movs	r2, #0
 8013a38:	68b9      	ldr	r1, [r7, #8]
 8013a3a:	69b8      	ldr	r0, [r7, #24]
 8013a3c:	f7ff fed7 	bl	80137ee <put_fat>
 8013a40:	4603      	mov	r3, r0
 8013a42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8013a44:	7ffb      	ldrb	r3, [r7, #31]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d001      	beq.n	8013a4e <remove_chain+0x88>
 8013a4a:	7ffb      	ldrb	r3, [r7, #31]
 8013a4c:	e01c      	b.n	8013a88 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013a4e:	69bb      	ldr	r3, [r7, #24]
 8013a50:	695a      	ldr	r2, [r3, #20]
 8013a52:	69bb      	ldr	r3, [r7, #24]
 8013a54:	699b      	ldr	r3, [r3, #24]
 8013a56:	3b02      	subs	r3, #2
 8013a58:	429a      	cmp	r2, r3
 8013a5a:	d20b      	bcs.n	8013a74 <remove_chain+0xae>
			fs->free_clst++;
 8013a5c:	69bb      	ldr	r3, [r7, #24]
 8013a5e:	695b      	ldr	r3, [r3, #20]
 8013a60:	1c5a      	adds	r2, r3, #1
 8013a62:	69bb      	ldr	r3, [r7, #24]
 8013a64:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8013a66:	69bb      	ldr	r3, [r7, #24]
 8013a68:	791b      	ldrb	r3, [r3, #4]
 8013a6a:	f043 0301 	orr.w	r3, r3, #1
 8013a6e:	b2da      	uxtb	r2, r3
 8013a70:	69bb      	ldr	r3, [r7, #24]
 8013a72:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8013a74:	697b      	ldr	r3, [r7, #20]
 8013a76:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013a78:	69bb      	ldr	r3, [r7, #24]
 8013a7a:	699b      	ldr	r3, [r3, #24]
 8013a7c:	68ba      	ldr	r2, [r7, #8]
 8013a7e:	429a      	cmp	r2, r3
 8013a80:	d3c6      	bcc.n	8013a10 <remove_chain+0x4a>
 8013a82:	e000      	b.n	8013a86 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8013a84:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8013a86:	2300      	movs	r3, #0
}
 8013a88:	4618      	mov	r0, r3
 8013a8a:	3720      	adds	r7, #32
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	bd80      	pop	{r7, pc}

08013a90 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b088      	sub	sp, #32
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
 8013a98:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013aa0:	683b      	ldr	r3, [r7, #0]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d10d      	bne.n	8013ac2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013aa6:	693b      	ldr	r3, [r7, #16]
 8013aa8:	691b      	ldr	r3, [r3, #16]
 8013aaa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013aac:	69bb      	ldr	r3, [r7, #24]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d004      	beq.n	8013abc <create_chain+0x2c>
 8013ab2:	693b      	ldr	r3, [r7, #16]
 8013ab4:	699b      	ldr	r3, [r3, #24]
 8013ab6:	69ba      	ldr	r2, [r7, #24]
 8013ab8:	429a      	cmp	r2, r3
 8013aba:	d31b      	bcc.n	8013af4 <create_chain+0x64>
 8013abc:	2301      	movs	r3, #1
 8013abe:	61bb      	str	r3, [r7, #24]
 8013ac0:	e018      	b.n	8013af4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8013ac2:	6839      	ldr	r1, [r7, #0]
 8013ac4:	6878      	ldr	r0, [r7, #4]
 8013ac6:	f7ff fdea 	bl	801369e <get_fat>
 8013aca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	2b01      	cmp	r3, #1
 8013ad0:	d801      	bhi.n	8013ad6 <create_chain+0x46>
 8013ad2:	2301      	movs	r3, #1
 8013ad4:	e070      	b.n	8013bb8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013adc:	d101      	bne.n	8013ae2 <create_chain+0x52>
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	e06a      	b.n	8013bb8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013ae2:	693b      	ldr	r3, [r7, #16]
 8013ae4:	699b      	ldr	r3, [r3, #24]
 8013ae6:	68fa      	ldr	r2, [r7, #12]
 8013ae8:	429a      	cmp	r2, r3
 8013aea:	d201      	bcs.n	8013af0 <create_chain+0x60>
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	e063      	b.n	8013bb8 <create_chain+0x128>
		scl = clst;
 8013af0:	683b      	ldr	r3, [r7, #0]
 8013af2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8013af4:	69bb      	ldr	r3, [r7, #24]
 8013af6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013af8:	69fb      	ldr	r3, [r7, #28]
 8013afa:	3301      	adds	r3, #1
 8013afc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013afe:	693b      	ldr	r3, [r7, #16]
 8013b00:	699b      	ldr	r3, [r3, #24]
 8013b02:	69fa      	ldr	r2, [r7, #28]
 8013b04:	429a      	cmp	r2, r3
 8013b06:	d307      	bcc.n	8013b18 <create_chain+0x88>
				ncl = 2;
 8013b08:	2302      	movs	r3, #2
 8013b0a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013b0c:	69fa      	ldr	r2, [r7, #28]
 8013b0e:	69bb      	ldr	r3, [r7, #24]
 8013b10:	429a      	cmp	r2, r3
 8013b12:	d901      	bls.n	8013b18 <create_chain+0x88>
 8013b14:	2300      	movs	r3, #0
 8013b16:	e04f      	b.n	8013bb8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013b18:	69f9      	ldr	r1, [r7, #28]
 8013b1a:	6878      	ldr	r0, [r7, #4]
 8013b1c:	f7ff fdbf 	bl	801369e <get_fat>
 8013b20:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d00e      	beq.n	8013b46 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	2b01      	cmp	r3, #1
 8013b2c:	d003      	beq.n	8013b36 <create_chain+0xa6>
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b34:	d101      	bne.n	8013b3a <create_chain+0xaa>
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	e03e      	b.n	8013bb8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013b3a:	69fa      	ldr	r2, [r7, #28]
 8013b3c:	69bb      	ldr	r3, [r7, #24]
 8013b3e:	429a      	cmp	r2, r3
 8013b40:	d1da      	bne.n	8013af8 <create_chain+0x68>
 8013b42:	2300      	movs	r3, #0
 8013b44:	e038      	b.n	8013bb8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013b46:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013b48:	f04f 32ff 	mov.w	r2, #4294967295
 8013b4c:	69f9      	ldr	r1, [r7, #28]
 8013b4e:	6938      	ldr	r0, [r7, #16]
 8013b50:	f7ff fe4d 	bl	80137ee <put_fat>
 8013b54:	4603      	mov	r3, r0
 8013b56:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013b58:	7dfb      	ldrb	r3, [r7, #23]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d109      	bne.n	8013b72 <create_chain+0xe2>
 8013b5e:	683b      	ldr	r3, [r7, #0]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d006      	beq.n	8013b72 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013b64:	69fa      	ldr	r2, [r7, #28]
 8013b66:	6839      	ldr	r1, [r7, #0]
 8013b68:	6938      	ldr	r0, [r7, #16]
 8013b6a:	f7ff fe40 	bl	80137ee <put_fat>
 8013b6e:	4603      	mov	r3, r0
 8013b70:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8013b72:	7dfb      	ldrb	r3, [r7, #23]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d116      	bne.n	8013ba6 <create_chain+0x116>
		fs->last_clst = ncl;
 8013b78:	693b      	ldr	r3, [r7, #16]
 8013b7a:	69fa      	ldr	r2, [r7, #28]
 8013b7c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013b7e:	693b      	ldr	r3, [r7, #16]
 8013b80:	695a      	ldr	r2, [r3, #20]
 8013b82:	693b      	ldr	r3, [r7, #16]
 8013b84:	699b      	ldr	r3, [r3, #24]
 8013b86:	3b02      	subs	r3, #2
 8013b88:	429a      	cmp	r2, r3
 8013b8a:	d804      	bhi.n	8013b96 <create_chain+0x106>
 8013b8c:	693b      	ldr	r3, [r7, #16]
 8013b8e:	695b      	ldr	r3, [r3, #20]
 8013b90:	1e5a      	subs	r2, r3, #1
 8013b92:	693b      	ldr	r3, [r7, #16]
 8013b94:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8013b96:	693b      	ldr	r3, [r7, #16]
 8013b98:	791b      	ldrb	r3, [r3, #4]
 8013b9a:	f043 0301 	orr.w	r3, r3, #1
 8013b9e:	b2da      	uxtb	r2, r3
 8013ba0:	693b      	ldr	r3, [r7, #16]
 8013ba2:	711a      	strb	r2, [r3, #4]
 8013ba4:	e007      	b.n	8013bb6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8013ba6:	7dfb      	ldrb	r3, [r7, #23]
 8013ba8:	2b01      	cmp	r3, #1
 8013baa:	d102      	bne.n	8013bb2 <create_chain+0x122>
 8013bac:	f04f 33ff 	mov.w	r3, #4294967295
 8013bb0:	e000      	b.n	8013bb4 <create_chain+0x124>
 8013bb2:	2301      	movs	r3, #1
 8013bb4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8013bb6:	69fb      	ldr	r3, [r7, #28]
}
 8013bb8:	4618      	mov	r0, r3
 8013bba:	3720      	adds	r7, #32
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	bd80      	pop	{r7, pc}

08013bc0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013bc0:	b480      	push	{r7}
 8013bc2:	b087      	sub	sp, #28
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
 8013bc8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bd4:	3304      	adds	r3, #4
 8013bd6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013bd8:	683b      	ldr	r3, [r7, #0]
 8013bda:	0a5b      	lsrs	r3, r3, #9
 8013bdc:	68fa      	ldr	r2, [r7, #12]
 8013bde:	8952      	ldrh	r2, [r2, #10]
 8013be0:	fbb3 f3f2 	udiv	r3, r3, r2
 8013be4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013be6:	693b      	ldr	r3, [r7, #16]
 8013be8:	1d1a      	adds	r2, r3, #4
 8013bea:	613a      	str	r2, [r7, #16]
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013bf0:	68bb      	ldr	r3, [r7, #8]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d101      	bne.n	8013bfa <clmt_clust+0x3a>
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	e010      	b.n	8013c1c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8013bfa:	697a      	ldr	r2, [r7, #20]
 8013bfc:	68bb      	ldr	r3, [r7, #8]
 8013bfe:	429a      	cmp	r2, r3
 8013c00:	d307      	bcc.n	8013c12 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8013c02:	697a      	ldr	r2, [r7, #20]
 8013c04:	68bb      	ldr	r3, [r7, #8]
 8013c06:	1ad3      	subs	r3, r2, r3
 8013c08:	617b      	str	r3, [r7, #20]
 8013c0a:	693b      	ldr	r3, [r7, #16]
 8013c0c:	3304      	adds	r3, #4
 8013c0e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013c10:	e7e9      	b.n	8013be6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8013c12:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013c14:	693b      	ldr	r3, [r7, #16]
 8013c16:	681a      	ldr	r2, [r3, #0]
 8013c18:	697b      	ldr	r3, [r7, #20]
 8013c1a:	4413      	add	r3, r2
}
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	371c      	adds	r7, #28
 8013c20:	46bd      	mov	sp, r7
 8013c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c26:	4770      	bx	lr

08013c28 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b086      	sub	sp, #24
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
 8013c30:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013c38:	683b      	ldr	r3, [r7, #0]
 8013c3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013c3e:	d204      	bcs.n	8013c4a <dir_sdi+0x22>
 8013c40:	683b      	ldr	r3, [r7, #0]
 8013c42:	f003 031f 	and.w	r3, r3, #31
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d001      	beq.n	8013c4e <dir_sdi+0x26>
		return FR_INT_ERR;
 8013c4a:	2302      	movs	r3, #2
 8013c4c:	e063      	b.n	8013d16 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	683a      	ldr	r2, [r7, #0]
 8013c52:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	689b      	ldr	r3, [r3, #8]
 8013c58:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013c5a:	697b      	ldr	r3, [r7, #20]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d106      	bne.n	8013c6e <dir_sdi+0x46>
 8013c60:	693b      	ldr	r3, [r7, #16]
 8013c62:	781b      	ldrb	r3, [r3, #0]
 8013c64:	2b02      	cmp	r3, #2
 8013c66:	d902      	bls.n	8013c6e <dir_sdi+0x46>
		clst = fs->dirbase;
 8013c68:	693b      	ldr	r3, [r7, #16]
 8013c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c6c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013c6e:	697b      	ldr	r3, [r7, #20]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d10c      	bne.n	8013c8e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013c74:	683b      	ldr	r3, [r7, #0]
 8013c76:	095b      	lsrs	r3, r3, #5
 8013c78:	693a      	ldr	r2, [r7, #16]
 8013c7a:	8912      	ldrh	r2, [r2, #8]
 8013c7c:	4293      	cmp	r3, r2
 8013c7e:	d301      	bcc.n	8013c84 <dir_sdi+0x5c>
 8013c80:	2302      	movs	r3, #2
 8013c82:	e048      	b.n	8013d16 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8013c84:	693b      	ldr	r3, [r7, #16]
 8013c86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	61da      	str	r2, [r3, #28]
 8013c8c:	e029      	b.n	8013ce2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013c8e:	693b      	ldr	r3, [r7, #16]
 8013c90:	895b      	ldrh	r3, [r3, #10]
 8013c92:	025b      	lsls	r3, r3, #9
 8013c94:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013c96:	e019      	b.n	8013ccc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	6979      	ldr	r1, [r7, #20]
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	f7ff fcfe 	bl	801369e <get_fat>
 8013ca2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013ca4:	697b      	ldr	r3, [r7, #20]
 8013ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013caa:	d101      	bne.n	8013cb0 <dir_sdi+0x88>
 8013cac:	2301      	movs	r3, #1
 8013cae:	e032      	b.n	8013d16 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013cb0:	697b      	ldr	r3, [r7, #20]
 8013cb2:	2b01      	cmp	r3, #1
 8013cb4:	d904      	bls.n	8013cc0 <dir_sdi+0x98>
 8013cb6:	693b      	ldr	r3, [r7, #16]
 8013cb8:	699b      	ldr	r3, [r3, #24]
 8013cba:	697a      	ldr	r2, [r7, #20]
 8013cbc:	429a      	cmp	r2, r3
 8013cbe:	d301      	bcc.n	8013cc4 <dir_sdi+0x9c>
 8013cc0:	2302      	movs	r3, #2
 8013cc2:	e028      	b.n	8013d16 <dir_sdi+0xee>
			ofs -= csz;
 8013cc4:	683a      	ldr	r2, [r7, #0]
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	1ad3      	subs	r3, r2, r3
 8013cca:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013ccc:	683a      	ldr	r2, [r7, #0]
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	429a      	cmp	r2, r3
 8013cd2:	d2e1      	bcs.n	8013c98 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8013cd4:	6979      	ldr	r1, [r7, #20]
 8013cd6:	6938      	ldr	r0, [r7, #16]
 8013cd8:	f7ff fcc2 	bl	8013660 <clust2sect>
 8013cdc:	4602      	mov	r2, r0
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	697a      	ldr	r2, [r7, #20]
 8013ce6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	69db      	ldr	r3, [r3, #28]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d101      	bne.n	8013cf4 <dir_sdi+0xcc>
 8013cf0:	2302      	movs	r3, #2
 8013cf2:	e010      	b.n	8013d16 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	69da      	ldr	r2, [r3, #28]
 8013cf8:	683b      	ldr	r3, [r7, #0]
 8013cfa:	0a5b      	lsrs	r3, r3, #9
 8013cfc:	441a      	add	r2, r3
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013d02:	693b      	ldr	r3, [r7, #16]
 8013d04:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013d08:	683b      	ldr	r3, [r7, #0]
 8013d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d0e:	441a      	add	r2, r3
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013d14:	2300      	movs	r3, #0
}
 8013d16:	4618      	mov	r0, r3
 8013d18:	3718      	adds	r7, #24
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	bd80      	pop	{r7, pc}

08013d1e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013d1e:	b580      	push	{r7, lr}
 8013d20:	b086      	sub	sp, #24
 8013d22:	af00      	add	r7, sp, #0
 8013d24:	6078      	str	r0, [r7, #4]
 8013d26:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	695b      	ldr	r3, [r3, #20]
 8013d32:	3320      	adds	r3, #32
 8013d34:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	69db      	ldr	r3, [r3, #28]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d003      	beq.n	8013d46 <dir_next+0x28>
 8013d3e:	68bb      	ldr	r3, [r7, #8]
 8013d40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013d44:	d301      	bcc.n	8013d4a <dir_next+0x2c>
 8013d46:	2304      	movs	r3, #4
 8013d48:	e0aa      	b.n	8013ea0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013d4a:	68bb      	ldr	r3, [r7, #8]
 8013d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	f040 8098 	bne.w	8013e86 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	69db      	ldr	r3, [r3, #28]
 8013d5a:	1c5a      	adds	r2, r3, #1
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	699b      	ldr	r3, [r3, #24]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d10b      	bne.n	8013d80 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013d68:	68bb      	ldr	r3, [r7, #8]
 8013d6a:	095b      	lsrs	r3, r3, #5
 8013d6c:	68fa      	ldr	r2, [r7, #12]
 8013d6e:	8912      	ldrh	r2, [r2, #8]
 8013d70:	4293      	cmp	r3, r2
 8013d72:	f0c0 8088 	bcc.w	8013e86 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	2200      	movs	r2, #0
 8013d7a:	61da      	str	r2, [r3, #28]
 8013d7c:	2304      	movs	r3, #4
 8013d7e:	e08f      	b.n	8013ea0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013d80:	68bb      	ldr	r3, [r7, #8]
 8013d82:	0a5b      	lsrs	r3, r3, #9
 8013d84:	68fa      	ldr	r2, [r7, #12]
 8013d86:	8952      	ldrh	r2, [r2, #10]
 8013d88:	3a01      	subs	r2, #1
 8013d8a:	4013      	ands	r3, r2
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d17a      	bne.n	8013e86 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013d90:	687a      	ldr	r2, [r7, #4]
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	699b      	ldr	r3, [r3, #24]
 8013d96:	4619      	mov	r1, r3
 8013d98:	4610      	mov	r0, r2
 8013d9a:	f7ff fc80 	bl	801369e <get_fat>
 8013d9e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013da0:	697b      	ldr	r3, [r7, #20]
 8013da2:	2b01      	cmp	r3, #1
 8013da4:	d801      	bhi.n	8013daa <dir_next+0x8c>
 8013da6:	2302      	movs	r3, #2
 8013da8:	e07a      	b.n	8013ea0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013daa:	697b      	ldr	r3, [r7, #20]
 8013dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013db0:	d101      	bne.n	8013db6 <dir_next+0x98>
 8013db2:	2301      	movs	r3, #1
 8013db4:	e074      	b.n	8013ea0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	699b      	ldr	r3, [r3, #24]
 8013dba:	697a      	ldr	r2, [r7, #20]
 8013dbc:	429a      	cmp	r2, r3
 8013dbe:	d358      	bcc.n	8013e72 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013dc0:	683b      	ldr	r3, [r7, #0]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d104      	bne.n	8013dd0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	2200      	movs	r2, #0
 8013dca:	61da      	str	r2, [r3, #28]
 8013dcc:	2304      	movs	r3, #4
 8013dce:	e067      	b.n	8013ea0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013dd0:	687a      	ldr	r2, [r7, #4]
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	699b      	ldr	r3, [r3, #24]
 8013dd6:	4619      	mov	r1, r3
 8013dd8:	4610      	mov	r0, r2
 8013dda:	f7ff fe59 	bl	8013a90 <create_chain>
 8013dde:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013de0:	697b      	ldr	r3, [r7, #20]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d101      	bne.n	8013dea <dir_next+0xcc>
 8013de6:	2307      	movs	r3, #7
 8013de8:	e05a      	b.n	8013ea0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013dea:	697b      	ldr	r3, [r7, #20]
 8013dec:	2b01      	cmp	r3, #1
 8013dee:	d101      	bne.n	8013df4 <dir_next+0xd6>
 8013df0:	2302      	movs	r3, #2
 8013df2:	e055      	b.n	8013ea0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013df4:	697b      	ldr	r3, [r7, #20]
 8013df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dfa:	d101      	bne.n	8013e00 <dir_next+0xe2>
 8013dfc:	2301      	movs	r3, #1
 8013dfe:	e04f      	b.n	8013ea0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013e00:	68f8      	ldr	r0, [r7, #12]
 8013e02:	f7ff fb4d 	bl	80134a0 <sync_window>
 8013e06:	4603      	mov	r3, r0
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d001      	beq.n	8013e10 <dir_next+0xf2>
 8013e0c:	2301      	movs	r3, #1
 8013e0e:	e047      	b.n	8013ea0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	3334      	adds	r3, #52	; 0x34
 8013e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013e18:	2100      	movs	r1, #0
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	f7ff f945 	bl	80130aa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013e20:	2300      	movs	r3, #0
 8013e22:	613b      	str	r3, [r7, #16]
 8013e24:	6979      	ldr	r1, [r7, #20]
 8013e26:	68f8      	ldr	r0, [r7, #12]
 8013e28:	f7ff fc1a 	bl	8013660 <clust2sect>
 8013e2c:	4602      	mov	r2, r0
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	631a      	str	r2, [r3, #48]	; 0x30
 8013e32:	e012      	b.n	8013e5a <dir_next+0x13c>
						fs->wflag = 1;
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	2201      	movs	r2, #1
 8013e38:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013e3a:	68f8      	ldr	r0, [r7, #12]
 8013e3c:	f7ff fb30 	bl	80134a0 <sync_window>
 8013e40:	4603      	mov	r3, r0
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d001      	beq.n	8013e4a <dir_next+0x12c>
 8013e46:	2301      	movs	r3, #1
 8013e48:	e02a      	b.n	8013ea0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013e4a:	693b      	ldr	r3, [r7, #16]
 8013e4c:	3301      	adds	r3, #1
 8013e4e:	613b      	str	r3, [r7, #16]
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e54:	1c5a      	adds	r2, r3, #1
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	631a      	str	r2, [r3, #48]	; 0x30
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	895b      	ldrh	r3, [r3, #10]
 8013e5e:	461a      	mov	r2, r3
 8013e60:	693b      	ldr	r3, [r7, #16]
 8013e62:	4293      	cmp	r3, r2
 8013e64:	d3e6      	bcc.n	8013e34 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013e6a:	693b      	ldr	r3, [r7, #16]
 8013e6c:	1ad2      	subs	r2, r2, r3
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	697a      	ldr	r2, [r7, #20]
 8013e76:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013e78:	6979      	ldr	r1, [r7, #20]
 8013e7a:	68f8      	ldr	r0, [r7, #12]
 8013e7c:	f7ff fbf0 	bl	8013660 <clust2sect>
 8013e80:	4602      	mov	r2, r0
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	68ba      	ldr	r2, [r7, #8]
 8013e8a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013e92:	68bb      	ldr	r3, [r7, #8]
 8013e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e98:	441a      	add	r2, r3
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013e9e:	2300      	movs	r3, #0
}
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	3718      	adds	r7, #24
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	bd80      	pop	{r7, pc}

08013ea8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b086      	sub	sp, #24
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
 8013eb0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013eb8:	2100      	movs	r1, #0
 8013eba:	6878      	ldr	r0, [r7, #4]
 8013ebc:	f7ff feb4 	bl	8013c28 <dir_sdi>
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013ec4:	7dfb      	ldrb	r3, [r7, #23]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d12b      	bne.n	8013f22 <dir_alloc+0x7a>
		n = 0;
 8013eca:	2300      	movs	r3, #0
 8013ecc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	69db      	ldr	r3, [r3, #28]
 8013ed2:	4619      	mov	r1, r3
 8013ed4:	68f8      	ldr	r0, [r7, #12]
 8013ed6:	f7ff fb27 	bl	8013528 <move_window>
 8013eda:	4603      	mov	r3, r0
 8013edc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013ede:	7dfb      	ldrb	r3, [r7, #23]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d11d      	bne.n	8013f20 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	6a1b      	ldr	r3, [r3, #32]
 8013ee8:	781b      	ldrb	r3, [r3, #0]
 8013eea:	2be5      	cmp	r3, #229	; 0xe5
 8013eec:	d004      	beq.n	8013ef8 <dir_alloc+0x50>
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	6a1b      	ldr	r3, [r3, #32]
 8013ef2:	781b      	ldrb	r3, [r3, #0]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d107      	bne.n	8013f08 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013ef8:	693b      	ldr	r3, [r7, #16]
 8013efa:	3301      	adds	r3, #1
 8013efc:	613b      	str	r3, [r7, #16]
 8013efe:	693a      	ldr	r2, [r7, #16]
 8013f00:	683b      	ldr	r3, [r7, #0]
 8013f02:	429a      	cmp	r2, r3
 8013f04:	d102      	bne.n	8013f0c <dir_alloc+0x64>
 8013f06:	e00c      	b.n	8013f22 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013f08:	2300      	movs	r3, #0
 8013f0a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013f0c:	2101      	movs	r1, #1
 8013f0e:	6878      	ldr	r0, [r7, #4]
 8013f10:	f7ff ff05 	bl	8013d1e <dir_next>
 8013f14:	4603      	mov	r3, r0
 8013f16:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013f18:	7dfb      	ldrb	r3, [r7, #23]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d0d7      	beq.n	8013ece <dir_alloc+0x26>
 8013f1e:	e000      	b.n	8013f22 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013f20:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013f22:	7dfb      	ldrb	r3, [r7, #23]
 8013f24:	2b04      	cmp	r3, #4
 8013f26:	d101      	bne.n	8013f2c <dir_alloc+0x84>
 8013f28:	2307      	movs	r3, #7
 8013f2a:	75fb      	strb	r3, [r7, #23]
	return res;
 8013f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f2e:	4618      	mov	r0, r3
 8013f30:	3718      	adds	r7, #24
 8013f32:	46bd      	mov	sp, r7
 8013f34:	bd80      	pop	{r7, pc}

08013f36 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013f36:	b580      	push	{r7, lr}
 8013f38:	b084      	sub	sp, #16
 8013f3a:	af00      	add	r7, sp, #0
 8013f3c:	6078      	str	r0, [r7, #4]
 8013f3e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013f40:	683b      	ldr	r3, [r7, #0]
 8013f42:	331a      	adds	r3, #26
 8013f44:	4618      	mov	r0, r3
 8013f46:	f7ff f80d 	bl	8012f64 <ld_word>
 8013f4a:	4603      	mov	r3, r0
 8013f4c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	781b      	ldrb	r3, [r3, #0]
 8013f52:	2b03      	cmp	r3, #3
 8013f54:	d109      	bne.n	8013f6a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013f56:	683b      	ldr	r3, [r7, #0]
 8013f58:	3314      	adds	r3, #20
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	f7ff f802 	bl	8012f64 <ld_word>
 8013f60:	4603      	mov	r3, r0
 8013f62:	041b      	lsls	r3, r3, #16
 8013f64:	68fa      	ldr	r2, [r7, #12]
 8013f66:	4313      	orrs	r3, r2
 8013f68:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013f6a:	68fb      	ldr	r3, [r7, #12]
}
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	3710      	adds	r7, #16
 8013f70:	46bd      	mov	sp, r7
 8013f72:	bd80      	pop	{r7, pc}

08013f74 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013f74:	b580      	push	{r7, lr}
 8013f76:	b084      	sub	sp, #16
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	60f8      	str	r0, [r7, #12]
 8013f7c:	60b9      	str	r1, [r7, #8]
 8013f7e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013f80:	68bb      	ldr	r3, [r7, #8]
 8013f82:	331a      	adds	r3, #26
 8013f84:	687a      	ldr	r2, [r7, #4]
 8013f86:	b292      	uxth	r2, r2
 8013f88:	4611      	mov	r1, r2
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	f7ff f825 	bl	8012fda <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	781b      	ldrb	r3, [r3, #0]
 8013f94:	2b03      	cmp	r3, #3
 8013f96:	d109      	bne.n	8013fac <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013f98:	68bb      	ldr	r3, [r7, #8]
 8013f9a:	f103 0214 	add.w	r2, r3, #20
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	0c1b      	lsrs	r3, r3, #16
 8013fa2:	b29b      	uxth	r3, r3
 8013fa4:	4619      	mov	r1, r3
 8013fa6:	4610      	mov	r0, r2
 8013fa8:	f7ff f817 	bl	8012fda <st_word>
	}
}
 8013fac:	bf00      	nop
 8013fae:	3710      	adds	r7, #16
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	bd80      	pop	{r7, pc}

08013fb4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b086      	sub	sp, #24
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
 8013fbc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8013fbe:	2304      	movs	r3, #4
 8013fc0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8013fc8:	e03c      	b.n	8014044 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	69db      	ldr	r3, [r3, #28]
 8013fce:	4619      	mov	r1, r3
 8013fd0:	6938      	ldr	r0, [r7, #16]
 8013fd2:	f7ff faa9 	bl	8013528 <move_window>
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013fda:	7dfb      	ldrb	r3, [r7, #23]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d136      	bne.n	801404e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	6a1b      	ldr	r3, [r3, #32]
 8013fe4:	781b      	ldrb	r3, [r3, #0]
 8013fe6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8013fe8:	7bfb      	ldrb	r3, [r7, #15]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d102      	bne.n	8013ff4 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8013fee:	2304      	movs	r3, #4
 8013ff0:	75fb      	strb	r3, [r7, #23]
 8013ff2:	e031      	b.n	8014058 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	6a1b      	ldr	r3, [r3, #32]
 8013ff8:	330b      	adds	r3, #11
 8013ffa:	781b      	ldrb	r3, [r3, #0]
 8013ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014000:	73bb      	strb	r3, [r7, #14]
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	7bba      	ldrb	r2, [r7, #14]
 8014006:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8014008:	7bfb      	ldrb	r3, [r7, #15]
 801400a:	2be5      	cmp	r3, #229	; 0xe5
 801400c:	d011      	beq.n	8014032 <dir_read+0x7e>
 801400e:	7bfb      	ldrb	r3, [r7, #15]
 8014010:	2b2e      	cmp	r3, #46	; 0x2e
 8014012:	d00e      	beq.n	8014032 <dir_read+0x7e>
 8014014:	7bbb      	ldrb	r3, [r7, #14]
 8014016:	2b0f      	cmp	r3, #15
 8014018:	d00b      	beq.n	8014032 <dir_read+0x7e>
 801401a:	7bbb      	ldrb	r3, [r7, #14]
 801401c:	f023 0320 	bic.w	r3, r3, #32
 8014020:	2b08      	cmp	r3, #8
 8014022:	bf0c      	ite	eq
 8014024:	2301      	moveq	r3, #1
 8014026:	2300      	movne	r3, #0
 8014028:	b2db      	uxtb	r3, r3
 801402a:	461a      	mov	r2, r3
 801402c:	683b      	ldr	r3, [r7, #0]
 801402e:	4293      	cmp	r3, r2
 8014030:	d00f      	beq.n	8014052 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8014032:	2100      	movs	r1, #0
 8014034:	6878      	ldr	r0, [r7, #4]
 8014036:	f7ff fe72 	bl	8013d1e <dir_next>
 801403a:	4603      	mov	r3, r0
 801403c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801403e:	7dfb      	ldrb	r3, [r7, #23]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d108      	bne.n	8014056 <dir_read+0xa2>
	while (dp->sect) {
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	69db      	ldr	r3, [r3, #28]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d1be      	bne.n	8013fca <dir_read+0x16>
 801404c:	e004      	b.n	8014058 <dir_read+0xa4>
		if (res != FR_OK) break;
 801404e:	bf00      	nop
 8014050:	e002      	b.n	8014058 <dir_read+0xa4>
				break;
 8014052:	bf00      	nop
 8014054:	e000      	b.n	8014058 <dir_read+0xa4>
		if (res != FR_OK) break;
 8014056:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8014058:	7dfb      	ldrb	r3, [r7, #23]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d002      	beq.n	8014064 <dir_read+0xb0>
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	2200      	movs	r2, #0
 8014062:	61da      	str	r2, [r3, #28]
	return res;
 8014064:	7dfb      	ldrb	r3, [r7, #23]
}
 8014066:	4618      	mov	r0, r3
 8014068:	3718      	adds	r7, #24
 801406a:	46bd      	mov	sp, r7
 801406c:	bd80      	pop	{r7, pc}

0801406e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801406e:	b580      	push	{r7, lr}
 8014070:	b086      	sub	sp, #24
 8014072:	af00      	add	r7, sp, #0
 8014074:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801407c:	2100      	movs	r1, #0
 801407e:	6878      	ldr	r0, [r7, #4]
 8014080:	f7ff fdd2 	bl	8013c28 <dir_sdi>
 8014084:	4603      	mov	r3, r0
 8014086:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8014088:	7dfb      	ldrb	r3, [r7, #23]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d001      	beq.n	8014092 <dir_find+0x24>
 801408e:	7dfb      	ldrb	r3, [r7, #23]
 8014090:	e03e      	b.n	8014110 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	69db      	ldr	r3, [r3, #28]
 8014096:	4619      	mov	r1, r3
 8014098:	6938      	ldr	r0, [r7, #16]
 801409a:	f7ff fa45 	bl	8013528 <move_window>
 801409e:	4603      	mov	r3, r0
 80140a0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80140a2:	7dfb      	ldrb	r3, [r7, #23]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d12f      	bne.n	8014108 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	6a1b      	ldr	r3, [r3, #32]
 80140ac:	781b      	ldrb	r3, [r3, #0]
 80140ae:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80140b0:	7bfb      	ldrb	r3, [r7, #15]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d102      	bne.n	80140bc <dir_find+0x4e>
 80140b6:	2304      	movs	r3, #4
 80140b8:	75fb      	strb	r3, [r7, #23]
 80140ba:	e028      	b.n	801410e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	6a1b      	ldr	r3, [r3, #32]
 80140c0:	330b      	adds	r3, #11
 80140c2:	781b      	ldrb	r3, [r3, #0]
 80140c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80140c8:	b2da      	uxtb	r2, r3
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	6a1b      	ldr	r3, [r3, #32]
 80140d2:	330b      	adds	r3, #11
 80140d4:	781b      	ldrb	r3, [r3, #0]
 80140d6:	f003 0308 	and.w	r3, r3, #8
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d10a      	bne.n	80140f4 <dir_find+0x86>
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	6a18      	ldr	r0, [r3, #32]
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	3324      	adds	r3, #36	; 0x24
 80140e6:	220b      	movs	r2, #11
 80140e8:	4619      	mov	r1, r3
 80140ea:	f7fe fff9 	bl	80130e0 <mem_cmp>
 80140ee:	4603      	mov	r3, r0
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d00b      	beq.n	801410c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80140f4:	2100      	movs	r1, #0
 80140f6:	6878      	ldr	r0, [r7, #4]
 80140f8:	f7ff fe11 	bl	8013d1e <dir_next>
 80140fc:	4603      	mov	r3, r0
 80140fe:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8014100:	7dfb      	ldrb	r3, [r7, #23]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d0c5      	beq.n	8014092 <dir_find+0x24>
 8014106:	e002      	b.n	801410e <dir_find+0xa0>
		if (res != FR_OK) break;
 8014108:	bf00      	nop
 801410a:	e000      	b.n	801410e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801410c:	bf00      	nop

	return res;
 801410e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014110:	4618      	mov	r0, r3
 8014112:	3718      	adds	r7, #24
 8014114:	46bd      	mov	sp, r7
 8014116:	bd80      	pop	{r7, pc}

08014118 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8014118:	b580      	push	{r7, lr}
 801411a:	b084      	sub	sp, #16
 801411c:	af00      	add	r7, sp, #0
 801411e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8014126:	2101      	movs	r1, #1
 8014128:	6878      	ldr	r0, [r7, #4]
 801412a:	f7ff febd 	bl	8013ea8 <dir_alloc>
 801412e:	4603      	mov	r3, r0
 8014130:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8014132:	7bfb      	ldrb	r3, [r7, #15]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d11c      	bne.n	8014172 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	69db      	ldr	r3, [r3, #28]
 801413c:	4619      	mov	r1, r3
 801413e:	68b8      	ldr	r0, [r7, #8]
 8014140:	f7ff f9f2 	bl	8013528 <move_window>
 8014144:	4603      	mov	r3, r0
 8014146:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014148:	7bfb      	ldrb	r3, [r7, #15]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d111      	bne.n	8014172 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	6a1b      	ldr	r3, [r3, #32]
 8014152:	2220      	movs	r2, #32
 8014154:	2100      	movs	r1, #0
 8014156:	4618      	mov	r0, r3
 8014158:	f7fe ffa7 	bl	80130aa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	6a18      	ldr	r0, [r3, #32]
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	3324      	adds	r3, #36	; 0x24
 8014164:	220b      	movs	r2, #11
 8014166:	4619      	mov	r1, r3
 8014168:	f7fe ff7e 	bl	8013068 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801416c:	68bb      	ldr	r3, [r7, #8]
 801416e:	2201      	movs	r2, #1
 8014170:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8014172:	7bfb      	ldrb	r3, [r7, #15]
}
 8014174:	4618      	mov	r0, r3
 8014176:	3710      	adds	r7, #16
 8014178:	46bd      	mov	sp, r7
 801417a:	bd80      	pop	{r7, pc}

0801417c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801417c:	b580      	push	{r7, lr}
 801417e:	b086      	sub	sp, #24
 8014180:	af00      	add	r7, sp, #0
 8014182:	6078      	str	r0, [r7, #4]
 8014184:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8014186:	683b      	ldr	r3, [r7, #0]
 8014188:	2200      	movs	r2, #0
 801418a:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	69db      	ldr	r3, [r3, #28]
 8014190:	2b00      	cmp	r3, #0
 8014192:	d04e      	beq.n	8014232 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8014194:	2300      	movs	r3, #0
 8014196:	613b      	str	r3, [r7, #16]
 8014198:	693b      	ldr	r3, [r7, #16]
 801419a:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 801419c:	e021      	b.n	80141e2 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	6a1a      	ldr	r2, [r3, #32]
 80141a2:	697b      	ldr	r3, [r7, #20]
 80141a4:	1c59      	adds	r1, r3, #1
 80141a6:	6179      	str	r1, [r7, #20]
 80141a8:	4413      	add	r3, r2
 80141aa:	781b      	ldrb	r3, [r3, #0]
 80141ac:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80141ae:	7bfb      	ldrb	r3, [r7, #15]
 80141b0:	2b20      	cmp	r3, #32
 80141b2:	d100      	bne.n	80141b6 <get_fileinfo+0x3a>
 80141b4:	e015      	b.n	80141e2 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80141b6:	7bfb      	ldrb	r3, [r7, #15]
 80141b8:	2b05      	cmp	r3, #5
 80141ba:	d101      	bne.n	80141c0 <get_fileinfo+0x44>
 80141bc:	23e5      	movs	r3, #229	; 0xe5
 80141be:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80141c0:	697b      	ldr	r3, [r7, #20]
 80141c2:	2b09      	cmp	r3, #9
 80141c4:	d106      	bne.n	80141d4 <get_fileinfo+0x58>
 80141c6:	693b      	ldr	r3, [r7, #16]
 80141c8:	1c5a      	adds	r2, r3, #1
 80141ca:	613a      	str	r2, [r7, #16]
 80141cc:	683a      	ldr	r2, [r7, #0]
 80141ce:	4413      	add	r3, r2
 80141d0:	222e      	movs	r2, #46	; 0x2e
 80141d2:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80141d4:	693b      	ldr	r3, [r7, #16]
 80141d6:	1c5a      	adds	r2, r3, #1
 80141d8:	613a      	str	r2, [r7, #16]
 80141da:	683a      	ldr	r2, [r7, #0]
 80141dc:	4413      	add	r3, r2
 80141de:	7bfa      	ldrb	r2, [r7, #15]
 80141e0:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80141e2:	697b      	ldr	r3, [r7, #20]
 80141e4:	2b0a      	cmp	r3, #10
 80141e6:	d9da      	bls.n	801419e <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80141e8:	683a      	ldr	r2, [r7, #0]
 80141ea:	693b      	ldr	r3, [r7, #16]
 80141ec:	4413      	add	r3, r2
 80141ee:	3309      	adds	r3, #9
 80141f0:	2200      	movs	r2, #0
 80141f2:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	6a1b      	ldr	r3, [r3, #32]
 80141f8:	7ada      	ldrb	r2, [r3, #11]
 80141fa:	683b      	ldr	r3, [r7, #0]
 80141fc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	6a1b      	ldr	r3, [r3, #32]
 8014202:	331c      	adds	r3, #28
 8014204:	4618      	mov	r0, r3
 8014206:	f7fe fec5 	bl	8012f94 <ld_dword>
 801420a:	4602      	mov	r2, r0
 801420c:	683b      	ldr	r3, [r7, #0]
 801420e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	6a1b      	ldr	r3, [r3, #32]
 8014214:	3316      	adds	r3, #22
 8014216:	4618      	mov	r0, r3
 8014218:	f7fe febc 	bl	8012f94 <ld_dword>
 801421c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801421e:	68bb      	ldr	r3, [r7, #8]
 8014220:	b29a      	uxth	r2, r3
 8014222:	683b      	ldr	r3, [r7, #0]
 8014224:	80da      	strh	r2, [r3, #6]
 8014226:	68bb      	ldr	r3, [r7, #8]
 8014228:	0c1b      	lsrs	r3, r3, #16
 801422a:	b29a      	uxth	r2, r3
 801422c:	683b      	ldr	r3, [r7, #0]
 801422e:	809a      	strh	r2, [r3, #4]
 8014230:	e000      	b.n	8014234 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8014232:	bf00      	nop
}
 8014234:	3718      	adds	r7, #24
 8014236:	46bd      	mov	sp, r7
 8014238:	bd80      	pop	{r7, pc}
	...

0801423c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801423c:	b580      	push	{r7, lr}
 801423e:	b088      	sub	sp, #32
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
 8014244:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8014246:	683b      	ldr	r3, [r7, #0]
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	60fb      	str	r3, [r7, #12]
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	3324      	adds	r3, #36	; 0x24
 8014250:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8014252:	220b      	movs	r2, #11
 8014254:	2120      	movs	r1, #32
 8014256:	68b8      	ldr	r0, [r7, #8]
 8014258:	f7fe ff27 	bl	80130aa <mem_set>
	si = i = 0; ni = 8;
 801425c:	2300      	movs	r3, #0
 801425e:	613b      	str	r3, [r7, #16]
 8014260:	693b      	ldr	r3, [r7, #16]
 8014262:	61fb      	str	r3, [r7, #28]
 8014264:	2308      	movs	r3, #8
 8014266:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8014268:	69fb      	ldr	r3, [r7, #28]
 801426a:	1c5a      	adds	r2, r3, #1
 801426c:	61fa      	str	r2, [r7, #28]
 801426e:	68fa      	ldr	r2, [r7, #12]
 8014270:	4413      	add	r3, r2
 8014272:	781b      	ldrb	r3, [r3, #0]
 8014274:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8014276:	7efb      	ldrb	r3, [r7, #27]
 8014278:	2b20      	cmp	r3, #32
 801427a:	d94e      	bls.n	801431a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801427c:	7efb      	ldrb	r3, [r7, #27]
 801427e:	2b2f      	cmp	r3, #47	; 0x2f
 8014280:	d006      	beq.n	8014290 <create_name+0x54>
 8014282:	7efb      	ldrb	r3, [r7, #27]
 8014284:	2b5c      	cmp	r3, #92	; 0x5c
 8014286:	d110      	bne.n	80142aa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8014288:	e002      	b.n	8014290 <create_name+0x54>
 801428a:	69fb      	ldr	r3, [r7, #28]
 801428c:	3301      	adds	r3, #1
 801428e:	61fb      	str	r3, [r7, #28]
 8014290:	68fa      	ldr	r2, [r7, #12]
 8014292:	69fb      	ldr	r3, [r7, #28]
 8014294:	4413      	add	r3, r2
 8014296:	781b      	ldrb	r3, [r3, #0]
 8014298:	2b2f      	cmp	r3, #47	; 0x2f
 801429a:	d0f6      	beq.n	801428a <create_name+0x4e>
 801429c:	68fa      	ldr	r2, [r7, #12]
 801429e:	69fb      	ldr	r3, [r7, #28]
 80142a0:	4413      	add	r3, r2
 80142a2:	781b      	ldrb	r3, [r3, #0]
 80142a4:	2b5c      	cmp	r3, #92	; 0x5c
 80142a6:	d0f0      	beq.n	801428a <create_name+0x4e>
			break;
 80142a8:	e038      	b.n	801431c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80142aa:	7efb      	ldrb	r3, [r7, #27]
 80142ac:	2b2e      	cmp	r3, #46	; 0x2e
 80142ae:	d003      	beq.n	80142b8 <create_name+0x7c>
 80142b0:	693a      	ldr	r2, [r7, #16]
 80142b2:	697b      	ldr	r3, [r7, #20]
 80142b4:	429a      	cmp	r2, r3
 80142b6:	d30c      	bcc.n	80142d2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80142b8:	697b      	ldr	r3, [r7, #20]
 80142ba:	2b0b      	cmp	r3, #11
 80142bc:	d002      	beq.n	80142c4 <create_name+0x88>
 80142be:	7efb      	ldrb	r3, [r7, #27]
 80142c0:	2b2e      	cmp	r3, #46	; 0x2e
 80142c2:	d001      	beq.n	80142c8 <create_name+0x8c>
 80142c4:	2306      	movs	r3, #6
 80142c6:	e044      	b.n	8014352 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80142c8:	2308      	movs	r3, #8
 80142ca:	613b      	str	r3, [r7, #16]
 80142cc:	230b      	movs	r3, #11
 80142ce:	617b      	str	r3, [r7, #20]
			continue;
 80142d0:	e022      	b.n	8014318 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80142d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	da04      	bge.n	80142e4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80142da:	7efb      	ldrb	r3, [r7, #27]
 80142dc:	3b80      	subs	r3, #128	; 0x80
 80142de:	4a1f      	ldr	r2, [pc, #124]	; (801435c <create_name+0x120>)
 80142e0:	5cd3      	ldrb	r3, [r2, r3]
 80142e2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80142e4:	7efb      	ldrb	r3, [r7, #27]
 80142e6:	4619      	mov	r1, r3
 80142e8:	481d      	ldr	r0, [pc, #116]	; (8014360 <create_name+0x124>)
 80142ea:	f7fe ff20 	bl	801312e <chk_chr>
 80142ee:	4603      	mov	r3, r0
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d001      	beq.n	80142f8 <create_name+0xbc>
 80142f4:	2306      	movs	r3, #6
 80142f6:	e02c      	b.n	8014352 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80142f8:	7efb      	ldrb	r3, [r7, #27]
 80142fa:	2b60      	cmp	r3, #96	; 0x60
 80142fc:	d905      	bls.n	801430a <create_name+0xce>
 80142fe:	7efb      	ldrb	r3, [r7, #27]
 8014300:	2b7a      	cmp	r3, #122	; 0x7a
 8014302:	d802      	bhi.n	801430a <create_name+0xce>
 8014304:	7efb      	ldrb	r3, [r7, #27]
 8014306:	3b20      	subs	r3, #32
 8014308:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801430a:	693b      	ldr	r3, [r7, #16]
 801430c:	1c5a      	adds	r2, r3, #1
 801430e:	613a      	str	r2, [r7, #16]
 8014310:	68ba      	ldr	r2, [r7, #8]
 8014312:	4413      	add	r3, r2
 8014314:	7efa      	ldrb	r2, [r7, #27]
 8014316:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8014318:	e7a6      	b.n	8014268 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801431a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801431c:	68fa      	ldr	r2, [r7, #12]
 801431e:	69fb      	ldr	r3, [r7, #28]
 8014320:	441a      	add	r2, r3
 8014322:	683b      	ldr	r3, [r7, #0]
 8014324:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8014326:	693b      	ldr	r3, [r7, #16]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d101      	bne.n	8014330 <create_name+0xf4>
 801432c:	2306      	movs	r3, #6
 801432e:	e010      	b.n	8014352 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8014330:	68bb      	ldr	r3, [r7, #8]
 8014332:	781b      	ldrb	r3, [r3, #0]
 8014334:	2be5      	cmp	r3, #229	; 0xe5
 8014336:	d102      	bne.n	801433e <create_name+0x102>
 8014338:	68bb      	ldr	r3, [r7, #8]
 801433a:	2205      	movs	r2, #5
 801433c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801433e:	7efb      	ldrb	r3, [r7, #27]
 8014340:	2b20      	cmp	r3, #32
 8014342:	d801      	bhi.n	8014348 <create_name+0x10c>
 8014344:	2204      	movs	r2, #4
 8014346:	e000      	b.n	801434a <create_name+0x10e>
 8014348:	2200      	movs	r2, #0
 801434a:	68bb      	ldr	r3, [r7, #8]
 801434c:	330b      	adds	r3, #11
 801434e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8014350:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8014352:	4618      	mov	r0, r3
 8014354:	3720      	adds	r7, #32
 8014356:	46bd      	mov	sp, r7
 8014358:	bd80      	pop	{r7, pc}
 801435a:	bf00      	nop
 801435c:	08022ac4 	.word	0x08022ac4
 8014360:	080228c0 	.word	0x080228c0

08014364 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8014364:	b580      	push	{r7, lr}
 8014366:	b086      	sub	sp, #24
 8014368:	af00      	add	r7, sp, #0
 801436a:	6078      	str	r0, [r7, #4]
 801436c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8014372:	693b      	ldr	r3, [r7, #16]
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8014378:	e002      	b.n	8014380 <follow_path+0x1c>
 801437a:	683b      	ldr	r3, [r7, #0]
 801437c:	3301      	adds	r3, #1
 801437e:	603b      	str	r3, [r7, #0]
 8014380:	683b      	ldr	r3, [r7, #0]
 8014382:	781b      	ldrb	r3, [r3, #0]
 8014384:	2b2f      	cmp	r3, #47	; 0x2f
 8014386:	d0f8      	beq.n	801437a <follow_path+0x16>
 8014388:	683b      	ldr	r3, [r7, #0]
 801438a:	781b      	ldrb	r3, [r3, #0]
 801438c:	2b5c      	cmp	r3, #92	; 0x5c
 801438e:	d0f4      	beq.n	801437a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8014390:	693b      	ldr	r3, [r7, #16]
 8014392:	2200      	movs	r2, #0
 8014394:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8014396:	683b      	ldr	r3, [r7, #0]
 8014398:	781b      	ldrb	r3, [r3, #0]
 801439a:	2b1f      	cmp	r3, #31
 801439c:	d80a      	bhi.n	80143b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	2280      	movs	r2, #128	; 0x80
 80143a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80143a6:	2100      	movs	r1, #0
 80143a8:	6878      	ldr	r0, [r7, #4]
 80143aa:	f7ff fc3d 	bl	8013c28 <dir_sdi>
 80143ae:	4603      	mov	r3, r0
 80143b0:	75fb      	strb	r3, [r7, #23]
 80143b2:	e043      	b.n	801443c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80143b4:	463b      	mov	r3, r7
 80143b6:	4619      	mov	r1, r3
 80143b8:	6878      	ldr	r0, [r7, #4]
 80143ba:	f7ff ff3f 	bl	801423c <create_name>
 80143be:	4603      	mov	r3, r0
 80143c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80143c2:	7dfb      	ldrb	r3, [r7, #23]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d134      	bne.n	8014432 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80143c8:	6878      	ldr	r0, [r7, #4]
 80143ca:	f7ff fe50 	bl	801406e <dir_find>
 80143ce:	4603      	mov	r3, r0
 80143d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80143d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80143da:	7dfb      	ldrb	r3, [r7, #23]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d00a      	beq.n	80143f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80143e0:	7dfb      	ldrb	r3, [r7, #23]
 80143e2:	2b04      	cmp	r3, #4
 80143e4:	d127      	bne.n	8014436 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80143e6:	7afb      	ldrb	r3, [r7, #11]
 80143e8:	f003 0304 	and.w	r3, r3, #4
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d122      	bne.n	8014436 <follow_path+0xd2>
 80143f0:	2305      	movs	r3, #5
 80143f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80143f4:	e01f      	b.n	8014436 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80143f6:	7afb      	ldrb	r3, [r7, #11]
 80143f8:	f003 0304 	and.w	r3, r3, #4
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d11c      	bne.n	801443a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8014400:	693b      	ldr	r3, [r7, #16]
 8014402:	799b      	ldrb	r3, [r3, #6]
 8014404:	f003 0310 	and.w	r3, r3, #16
 8014408:	2b00      	cmp	r3, #0
 801440a:	d102      	bne.n	8014412 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801440c:	2305      	movs	r3, #5
 801440e:	75fb      	strb	r3, [r7, #23]
 8014410:	e014      	b.n	801443c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	695b      	ldr	r3, [r3, #20]
 801441c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014420:	4413      	add	r3, r2
 8014422:	4619      	mov	r1, r3
 8014424:	68f8      	ldr	r0, [r7, #12]
 8014426:	f7ff fd86 	bl	8013f36 <ld_clust>
 801442a:	4602      	mov	r2, r0
 801442c:	693b      	ldr	r3, [r7, #16]
 801442e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014430:	e7c0      	b.n	80143b4 <follow_path+0x50>
			if (res != FR_OK) break;
 8014432:	bf00      	nop
 8014434:	e002      	b.n	801443c <follow_path+0xd8>
				break;
 8014436:	bf00      	nop
 8014438:	e000      	b.n	801443c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801443a:	bf00      	nop
			}
		}
	}

	return res;
 801443c:	7dfb      	ldrb	r3, [r7, #23]
}
 801443e:	4618      	mov	r0, r3
 8014440:	3718      	adds	r7, #24
 8014442:	46bd      	mov	sp, r7
 8014444:	bd80      	pop	{r7, pc}

08014446 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8014446:	b480      	push	{r7}
 8014448:	b087      	sub	sp, #28
 801444a:	af00      	add	r7, sp, #0
 801444c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801444e:	f04f 33ff 	mov.w	r3, #4294967295
 8014452:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d031      	beq.n	80144c0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	617b      	str	r3, [r7, #20]
 8014462:	e002      	b.n	801446a <get_ldnumber+0x24>
 8014464:	697b      	ldr	r3, [r7, #20]
 8014466:	3301      	adds	r3, #1
 8014468:	617b      	str	r3, [r7, #20]
 801446a:	697b      	ldr	r3, [r7, #20]
 801446c:	781b      	ldrb	r3, [r3, #0]
 801446e:	2b20      	cmp	r3, #32
 8014470:	d903      	bls.n	801447a <get_ldnumber+0x34>
 8014472:	697b      	ldr	r3, [r7, #20]
 8014474:	781b      	ldrb	r3, [r3, #0]
 8014476:	2b3a      	cmp	r3, #58	; 0x3a
 8014478:	d1f4      	bne.n	8014464 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801447a:	697b      	ldr	r3, [r7, #20]
 801447c:	781b      	ldrb	r3, [r3, #0]
 801447e:	2b3a      	cmp	r3, #58	; 0x3a
 8014480:	d11c      	bne.n	80144bc <get_ldnumber+0x76>
			tp = *path;
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	1c5a      	adds	r2, r3, #1
 801448c:	60fa      	str	r2, [r7, #12]
 801448e:	781b      	ldrb	r3, [r3, #0]
 8014490:	3b30      	subs	r3, #48	; 0x30
 8014492:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8014494:	68bb      	ldr	r3, [r7, #8]
 8014496:	2b09      	cmp	r3, #9
 8014498:	d80e      	bhi.n	80144b8 <get_ldnumber+0x72>
 801449a:	68fa      	ldr	r2, [r7, #12]
 801449c:	697b      	ldr	r3, [r7, #20]
 801449e:	429a      	cmp	r2, r3
 80144a0:	d10a      	bne.n	80144b8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80144a2:	68bb      	ldr	r3, [r7, #8]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d107      	bne.n	80144b8 <get_ldnumber+0x72>
					vol = (int)i;
 80144a8:	68bb      	ldr	r3, [r7, #8]
 80144aa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80144ac:	697b      	ldr	r3, [r7, #20]
 80144ae:	3301      	adds	r3, #1
 80144b0:	617b      	str	r3, [r7, #20]
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	697a      	ldr	r2, [r7, #20]
 80144b6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80144b8:	693b      	ldr	r3, [r7, #16]
 80144ba:	e002      	b.n	80144c2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80144bc:	2300      	movs	r3, #0
 80144be:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80144c0:	693b      	ldr	r3, [r7, #16]
}
 80144c2:	4618      	mov	r0, r3
 80144c4:	371c      	adds	r7, #28
 80144c6:	46bd      	mov	sp, r7
 80144c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144cc:	4770      	bx	lr
	...

080144d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b082      	sub	sp, #8
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	6078      	str	r0, [r7, #4]
 80144d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	2200      	movs	r2, #0
 80144de:	70da      	strb	r2, [r3, #3]
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	f04f 32ff 	mov.w	r2, #4294967295
 80144e6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80144e8:	6839      	ldr	r1, [r7, #0]
 80144ea:	6878      	ldr	r0, [r7, #4]
 80144ec:	f7ff f81c 	bl	8013528 <move_window>
 80144f0:	4603      	mov	r3, r0
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d001      	beq.n	80144fa <check_fs+0x2a>
 80144f6:	2304      	movs	r3, #4
 80144f8:	e038      	b.n	801456c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	3334      	adds	r3, #52	; 0x34
 80144fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014502:	4618      	mov	r0, r3
 8014504:	f7fe fd2e 	bl	8012f64 <ld_word>
 8014508:	4603      	mov	r3, r0
 801450a:	461a      	mov	r2, r3
 801450c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014510:	429a      	cmp	r2, r3
 8014512:	d001      	beq.n	8014518 <check_fs+0x48>
 8014514:	2303      	movs	r3, #3
 8014516:	e029      	b.n	801456c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801451e:	2be9      	cmp	r3, #233	; 0xe9
 8014520:	d009      	beq.n	8014536 <check_fs+0x66>
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014528:	2beb      	cmp	r3, #235	; 0xeb
 801452a:	d11e      	bne.n	801456a <check_fs+0x9a>
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8014532:	2b90      	cmp	r3, #144	; 0x90
 8014534:	d119      	bne.n	801456a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	3334      	adds	r3, #52	; 0x34
 801453a:	3336      	adds	r3, #54	; 0x36
 801453c:	4618      	mov	r0, r3
 801453e:	f7fe fd29 	bl	8012f94 <ld_dword>
 8014542:	4603      	mov	r3, r0
 8014544:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014548:	4a0a      	ldr	r2, [pc, #40]	; (8014574 <check_fs+0xa4>)
 801454a:	4293      	cmp	r3, r2
 801454c:	d101      	bne.n	8014552 <check_fs+0x82>
 801454e:	2300      	movs	r3, #0
 8014550:	e00c      	b.n	801456c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	3334      	adds	r3, #52	; 0x34
 8014556:	3352      	adds	r3, #82	; 0x52
 8014558:	4618      	mov	r0, r3
 801455a:	f7fe fd1b 	bl	8012f94 <ld_dword>
 801455e:	4603      	mov	r3, r0
 8014560:	4a05      	ldr	r2, [pc, #20]	; (8014578 <check_fs+0xa8>)
 8014562:	4293      	cmp	r3, r2
 8014564:	d101      	bne.n	801456a <check_fs+0x9a>
 8014566:	2300      	movs	r3, #0
 8014568:	e000      	b.n	801456c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801456a:	2302      	movs	r3, #2
}
 801456c:	4618      	mov	r0, r3
 801456e:	3708      	adds	r7, #8
 8014570:	46bd      	mov	sp, r7
 8014572:	bd80      	pop	{r7, pc}
 8014574:	00544146 	.word	0x00544146
 8014578:	33544146 	.word	0x33544146

0801457c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801457c:	b580      	push	{r7, lr}
 801457e:	b096      	sub	sp, #88	; 0x58
 8014580:	af00      	add	r7, sp, #0
 8014582:	60f8      	str	r0, [r7, #12]
 8014584:	60b9      	str	r1, [r7, #8]
 8014586:	4613      	mov	r3, r2
 8014588:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801458a:	68bb      	ldr	r3, [r7, #8]
 801458c:	2200      	movs	r2, #0
 801458e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014590:	68f8      	ldr	r0, [r7, #12]
 8014592:	f7ff ff58 	bl	8014446 <get_ldnumber>
 8014596:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801459a:	2b00      	cmp	r3, #0
 801459c:	da01      	bge.n	80145a2 <find_volume+0x26>
 801459e:	230b      	movs	r3, #11
 80145a0:	e236      	b.n	8014a10 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80145a2:	4aac      	ldr	r2, [pc, #688]	; (8014854 <find_volume+0x2d8>)
 80145a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80145aa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80145ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d101      	bne.n	80145b6 <find_volume+0x3a>
 80145b2:	230c      	movs	r3, #12
 80145b4:	e22c      	b.n	8014a10 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 80145b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80145b8:	f7fe fdd4 	bl	8013164 <lock_fs>
 80145bc:	4603      	mov	r3, r0
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d101      	bne.n	80145c6 <find_volume+0x4a>
 80145c2:	230f      	movs	r3, #15
 80145c4:	e224      	b.n	8014a10 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 80145c6:	68bb      	ldr	r3, [r7, #8]
 80145c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80145ca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80145cc:	79fb      	ldrb	r3, [r7, #7]
 80145ce:	f023 0301 	bic.w	r3, r3, #1
 80145d2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80145d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145d6:	781b      	ldrb	r3, [r3, #0]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d01a      	beq.n	8014612 <find_volume+0x96>
		stat = disk_status(fs->drv);
 80145dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145de:	785b      	ldrb	r3, [r3, #1]
 80145e0:	4618      	mov	r0, r3
 80145e2:	f7fe fc21 	bl	8012e28 <disk_status>
 80145e6:	4603      	mov	r3, r0
 80145e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80145ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80145f0:	f003 0301 	and.w	r3, r3, #1
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d10c      	bne.n	8014612 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80145f8:	79fb      	ldrb	r3, [r7, #7]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d007      	beq.n	801460e <find_volume+0x92>
 80145fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014602:	f003 0304 	and.w	r3, r3, #4
 8014606:	2b00      	cmp	r3, #0
 8014608:	d001      	beq.n	801460e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801460a:	230a      	movs	r3, #10
 801460c:	e200      	b.n	8014a10 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 801460e:	2300      	movs	r3, #0
 8014610:	e1fe      	b.n	8014a10 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8014612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014614:	2200      	movs	r2, #0
 8014616:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801461a:	b2da      	uxtb	r2, r3
 801461c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801461e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8014620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014622:	785b      	ldrb	r3, [r3, #1]
 8014624:	4618      	mov	r0, r3
 8014626:	f7fe fc19 	bl	8012e5c <disk_initialize>
 801462a:	4603      	mov	r3, r0
 801462c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8014630:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014634:	f003 0301 	and.w	r3, r3, #1
 8014638:	2b00      	cmp	r3, #0
 801463a:	d001      	beq.n	8014640 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801463c:	2303      	movs	r3, #3
 801463e:	e1e7      	b.n	8014a10 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8014640:	79fb      	ldrb	r3, [r7, #7]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d007      	beq.n	8014656 <find_volume+0xda>
 8014646:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801464a:	f003 0304 	and.w	r3, r3, #4
 801464e:	2b00      	cmp	r3, #0
 8014650:	d001      	beq.n	8014656 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8014652:	230a      	movs	r3, #10
 8014654:	e1dc      	b.n	8014a10 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8014656:	2300      	movs	r3, #0
 8014658:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801465a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801465c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801465e:	f7ff ff37 	bl	80144d0 <check_fs>
 8014662:	4603      	mov	r3, r0
 8014664:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8014668:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801466c:	2b02      	cmp	r3, #2
 801466e:	d14b      	bne.n	8014708 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014670:	2300      	movs	r3, #0
 8014672:	643b      	str	r3, [r7, #64]	; 0x40
 8014674:	e01f      	b.n	80146b6 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8014676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014678:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801467c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801467e:	011b      	lsls	r3, r3, #4
 8014680:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8014684:	4413      	add	r3, r2
 8014686:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801468a:	3304      	adds	r3, #4
 801468c:	781b      	ldrb	r3, [r3, #0]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d006      	beq.n	80146a0 <find_volume+0x124>
 8014692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014694:	3308      	adds	r3, #8
 8014696:	4618      	mov	r0, r3
 8014698:	f7fe fc7c 	bl	8012f94 <ld_dword>
 801469c:	4602      	mov	r2, r0
 801469e:	e000      	b.n	80146a2 <find_volume+0x126>
 80146a0:	2200      	movs	r2, #0
 80146a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146a4:	009b      	lsls	r3, r3, #2
 80146a6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80146aa:	440b      	add	r3, r1
 80146ac:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80146b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146b2:	3301      	adds	r3, #1
 80146b4:	643b      	str	r3, [r7, #64]	; 0x40
 80146b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146b8:	2b03      	cmp	r3, #3
 80146ba:	d9dc      	bls.n	8014676 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80146bc:	2300      	movs	r3, #0
 80146be:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80146c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d002      	beq.n	80146cc <find_volume+0x150>
 80146c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146c8:	3b01      	subs	r3, #1
 80146ca:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80146cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146ce:	009b      	lsls	r3, r3, #2
 80146d0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80146d4:	4413      	add	r3, r2
 80146d6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80146da:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80146dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d005      	beq.n	80146ee <find_volume+0x172>
 80146e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80146e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80146e6:	f7ff fef3 	bl	80144d0 <check_fs>
 80146ea:	4603      	mov	r3, r0
 80146ec:	e000      	b.n	80146f0 <find_volume+0x174>
 80146ee:	2303      	movs	r3, #3
 80146f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80146f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80146f8:	2b01      	cmp	r3, #1
 80146fa:	d905      	bls.n	8014708 <find_volume+0x18c>
 80146fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146fe:	3301      	adds	r3, #1
 8014700:	643b      	str	r3, [r7, #64]	; 0x40
 8014702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014704:	2b03      	cmp	r3, #3
 8014706:	d9e1      	bls.n	80146cc <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014708:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801470c:	2b04      	cmp	r3, #4
 801470e:	d101      	bne.n	8014714 <find_volume+0x198>
 8014710:	2301      	movs	r3, #1
 8014712:	e17d      	b.n	8014a10 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014714:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014718:	2b01      	cmp	r3, #1
 801471a:	d901      	bls.n	8014720 <find_volume+0x1a4>
 801471c:	230d      	movs	r3, #13
 801471e:	e177      	b.n	8014a10 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8014720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014722:	3334      	adds	r3, #52	; 0x34
 8014724:	330b      	adds	r3, #11
 8014726:	4618      	mov	r0, r3
 8014728:	f7fe fc1c 	bl	8012f64 <ld_word>
 801472c:	4603      	mov	r3, r0
 801472e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014732:	d001      	beq.n	8014738 <find_volume+0x1bc>
 8014734:	230d      	movs	r3, #13
 8014736:	e16b      	b.n	8014a10 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8014738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801473a:	3334      	adds	r3, #52	; 0x34
 801473c:	3316      	adds	r3, #22
 801473e:	4618      	mov	r0, r3
 8014740:	f7fe fc10 	bl	8012f64 <ld_word>
 8014744:	4603      	mov	r3, r0
 8014746:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8014748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801474a:	2b00      	cmp	r3, #0
 801474c:	d106      	bne.n	801475c <find_volume+0x1e0>
 801474e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014750:	3334      	adds	r3, #52	; 0x34
 8014752:	3324      	adds	r3, #36	; 0x24
 8014754:	4618      	mov	r0, r3
 8014756:	f7fe fc1d 	bl	8012f94 <ld_dword>
 801475a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801475c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801475e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014760:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8014762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014764:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8014768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801476a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801476c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801476e:	789b      	ldrb	r3, [r3, #2]
 8014770:	2b01      	cmp	r3, #1
 8014772:	d005      	beq.n	8014780 <find_volume+0x204>
 8014774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014776:	789b      	ldrb	r3, [r3, #2]
 8014778:	2b02      	cmp	r3, #2
 801477a:	d001      	beq.n	8014780 <find_volume+0x204>
 801477c:	230d      	movs	r3, #13
 801477e:	e147      	b.n	8014a10 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8014780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014782:	789b      	ldrb	r3, [r3, #2]
 8014784:	461a      	mov	r2, r3
 8014786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014788:	fb02 f303 	mul.w	r3, r2, r3
 801478c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801478e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014794:	b29a      	uxth	r2, r3
 8014796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014798:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801479a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801479c:	895b      	ldrh	r3, [r3, #10]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d008      	beq.n	80147b4 <find_volume+0x238>
 80147a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147a4:	895b      	ldrh	r3, [r3, #10]
 80147a6:	461a      	mov	r2, r3
 80147a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147aa:	895b      	ldrh	r3, [r3, #10]
 80147ac:	3b01      	subs	r3, #1
 80147ae:	4013      	ands	r3, r2
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d001      	beq.n	80147b8 <find_volume+0x23c>
 80147b4:	230d      	movs	r3, #13
 80147b6:	e12b      	b.n	8014a10 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80147b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147ba:	3334      	adds	r3, #52	; 0x34
 80147bc:	3311      	adds	r3, #17
 80147be:	4618      	mov	r0, r3
 80147c0:	f7fe fbd0 	bl	8012f64 <ld_word>
 80147c4:	4603      	mov	r3, r0
 80147c6:	461a      	mov	r2, r3
 80147c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147ca:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80147cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147ce:	891b      	ldrh	r3, [r3, #8]
 80147d0:	f003 030f 	and.w	r3, r3, #15
 80147d4:	b29b      	uxth	r3, r3
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d001      	beq.n	80147de <find_volume+0x262>
 80147da:	230d      	movs	r3, #13
 80147dc:	e118      	b.n	8014a10 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80147de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147e0:	3334      	adds	r3, #52	; 0x34
 80147e2:	3313      	adds	r3, #19
 80147e4:	4618      	mov	r0, r3
 80147e6:	f7fe fbbd 	bl	8012f64 <ld_word>
 80147ea:	4603      	mov	r3, r0
 80147ec:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80147ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d106      	bne.n	8014802 <find_volume+0x286>
 80147f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147f6:	3334      	adds	r3, #52	; 0x34
 80147f8:	3320      	adds	r3, #32
 80147fa:	4618      	mov	r0, r3
 80147fc:	f7fe fbca 	bl	8012f94 <ld_dword>
 8014800:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8014802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014804:	3334      	adds	r3, #52	; 0x34
 8014806:	330e      	adds	r3, #14
 8014808:	4618      	mov	r0, r3
 801480a:	f7fe fbab 	bl	8012f64 <ld_word>
 801480e:	4603      	mov	r3, r0
 8014810:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8014812:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014814:	2b00      	cmp	r3, #0
 8014816:	d101      	bne.n	801481c <find_volume+0x2a0>
 8014818:	230d      	movs	r3, #13
 801481a:	e0f9      	b.n	8014a10 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801481c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801481e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014820:	4413      	add	r3, r2
 8014822:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014824:	8912      	ldrh	r2, [r2, #8]
 8014826:	0912      	lsrs	r2, r2, #4
 8014828:	b292      	uxth	r2, r2
 801482a:	4413      	add	r3, r2
 801482c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801482e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014832:	429a      	cmp	r2, r3
 8014834:	d201      	bcs.n	801483a <find_volume+0x2be>
 8014836:	230d      	movs	r3, #13
 8014838:	e0ea      	b.n	8014a10 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801483a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801483e:	1ad3      	subs	r3, r2, r3
 8014840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014842:	8952      	ldrh	r2, [r2, #10]
 8014844:	fbb3 f3f2 	udiv	r3, r3, r2
 8014848:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801484c:	2b00      	cmp	r3, #0
 801484e:	d103      	bne.n	8014858 <find_volume+0x2dc>
 8014850:	230d      	movs	r3, #13
 8014852:	e0dd      	b.n	8014a10 <find_volume+0x494>
 8014854:	20000868 	.word	0x20000868
		fmt = FS_FAT32;
 8014858:	2303      	movs	r3, #3
 801485a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014860:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8014864:	4293      	cmp	r3, r2
 8014866:	d802      	bhi.n	801486e <find_volume+0x2f2>
 8014868:	2302      	movs	r3, #2
 801486a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014870:	f640 72f5 	movw	r2, #4085	; 0xff5
 8014874:	4293      	cmp	r3, r2
 8014876:	d802      	bhi.n	801487e <find_volume+0x302>
 8014878:	2301      	movs	r3, #1
 801487a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014880:	1c9a      	adds	r2, r3, #2
 8014882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014884:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8014886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014888:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801488a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801488c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801488e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014890:	441a      	add	r2, r3
 8014892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014894:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8014896:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801489a:	441a      	add	r2, r3
 801489c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801489e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80148a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80148a4:	2b03      	cmp	r3, #3
 80148a6:	d11e      	bne.n	80148e6 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80148a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148aa:	3334      	adds	r3, #52	; 0x34
 80148ac:	332a      	adds	r3, #42	; 0x2a
 80148ae:	4618      	mov	r0, r3
 80148b0:	f7fe fb58 	bl	8012f64 <ld_word>
 80148b4:	4603      	mov	r3, r0
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d001      	beq.n	80148be <find_volume+0x342>
 80148ba:	230d      	movs	r3, #13
 80148bc:	e0a8      	b.n	8014a10 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80148be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148c0:	891b      	ldrh	r3, [r3, #8]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d001      	beq.n	80148ca <find_volume+0x34e>
 80148c6:	230d      	movs	r3, #13
 80148c8:	e0a2      	b.n	8014a10 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80148ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148cc:	3334      	adds	r3, #52	; 0x34
 80148ce:	332c      	adds	r3, #44	; 0x2c
 80148d0:	4618      	mov	r0, r3
 80148d2:	f7fe fb5f 	bl	8012f94 <ld_dword>
 80148d6:	4602      	mov	r2, r0
 80148d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148da:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80148dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148de:	699b      	ldr	r3, [r3, #24]
 80148e0:	009b      	lsls	r3, r3, #2
 80148e2:	647b      	str	r3, [r7, #68]	; 0x44
 80148e4:	e01f      	b.n	8014926 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80148e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148e8:	891b      	ldrh	r3, [r3, #8]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d101      	bne.n	80148f2 <find_volume+0x376>
 80148ee:	230d      	movs	r3, #13
 80148f0:	e08e      	b.n	8014a10 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80148f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80148f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148f8:	441a      	add	r2, r3
 80148fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148fc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80148fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014902:	2b02      	cmp	r3, #2
 8014904:	d103      	bne.n	801490e <find_volume+0x392>
 8014906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014908:	699b      	ldr	r3, [r3, #24]
 801490a:	005b      	lsls	r3, r3, #1
 801490c:	e00a      	b.n	8014924 <find_volume+0x3a8>
 801490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014910:	699a      	ldr	r2, [r3, #24]
 8014912:	4613      	mov	r3, r2
 8014914:	005b      	lsls	r3, r3, #1
 8014916:	4413      	add	r3, r2
 8014918:	085a      	lsrs	r2, r3, #1
 801491a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801491c:	699b      	ldr	r3, [r3, #24]
 801491e:	f003 0301 	and.w	r3, r3, #1
 8014922:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8014924:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014928:	69da      	ldr	r2, [r3, #28]
 801492a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801492c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8014930:	0a5b      	lsrs	r3, r3, #9
 8014932:	429a      	cmp	r2, r3
 8014934:	d201      	bcs.n	801493a <find_volume+0x3be>
 8014936:	230d      	movs	r3, #13
 8014938:	e06a      	b.n	8014a10 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801493a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801493c:	f04f 32ff 	mov.w	r2, #4294967295
 8014940:	615a      	str	r2, [r3, #20]
 8014942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014944:	695a      	ldr	r2, [r3, #20]
 8014946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014948:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801494a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801494c:	2280      	movs	r2, #128	; 0x80
 801494e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014950:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014954:	2b03      	cmp	r3, #3
 8014956:	d149      	bne.n	80149ec <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801495a:	3334      	adds	r3, #52	; 0x34
 801495c:	3330      	adds	r3, #48	; 0x30
 801495e:	4618      	mov	r0, r3
 8014960:	f7fe fb00 	bl	8012f64 <ld_word>
 8014964:	4603      	mov	r3, r0
 8014966:	2b01      	cmp	r3, #1
 8014968:	d140      	bne.n	80149ec <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 801496a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801496c:	3301      	adds	r3, #1
 801496e:	4619      	mov	r1, r3
 8014970:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014972:	f7fe fdd9 	bl	8013528 <move_window>
 8014976:	4603      	mov	r3, r0
 8014978:	2b00      	cmp	r3, #0
 801497a:	d137      	bne.n	80149ec <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 801497c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801497e:	2200      	movs	r2, #0
 8014980:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014984:	3334      	adds	r3, #52	; 0x34
 8014986:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801498a:	4618      	mov	r0, r3
 801498c:	f7fe faea 	bl	8012f64 <ld_word>
 8014990:	4603      	mov	r3, r0
 8014992:	461a      	mov	r2, r3
 8014994:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014998:	429a      	cmp	r2, r3
 801499a:	d127      	bne.n	80149ec <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801499c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801499e:	3334      	adds	r3, #52	; 0x34
 80149a0:	4618      	mov	r0, r3
 80149a2:	f7fe faf7 	bl	8012f94 <ld_dword>
 80149a6:	4603      	mov	r3, r0
 80149a8:	4a1b      	ldr	r2, [pc, #108]	; (8014a18 <find_volume+0x49c>)
 80149aa:	4293      	cmp	r3, r2
 80149ac:	d11e      	bne.n	80149ec <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80149ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149b0:	3334      	adds	r3, #52	; 0x34
 80149b2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80149b6:	4618      	mov	r0, r3
 80149b8:	f7fe faec 	bl	8012f94 <ld_dword>
 80149bc:	4603      	mov	r3, r0
 80149be:	4a17      	ldr	r2, [pc, #92]	; (8014a1c <find_volume+0x4a0>)
 80149c0:	4293      	cmp	r3, r2
 80149c2:	d113      	bne.n	80149ec <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80149c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149c6:	3334      	adds	r3, #52	; 0x34
 80149c8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80149cc:	4618      	mov	r0, r3
 80149ce:	f7fe fae1 	bl	8012f94 <ld_dword>
 80149d2:	4602      	mov	r2, r0
 80149d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149d6:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80149d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149da:	3334      	adds	r3, #52	; 0x34
 80149dc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80149e0:	4618      	mov	r0, r3
 80149e2:	f7fe fad7 	bl	8012f94 <ld_dword>
 80149e6:	4602      	mov	r2, r0
 80149e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149ea:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80149ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149ee:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80149f2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80149f4:	4b0a      	ldr	r3, [pc, #40]	; (8014a20 <find_volume+0x4a4>)
 80149f6:	881b      	ldrh	r3, [r3, #0]
 80149f8:	3301      	adds	r3, #1
 80149fa:	b29a      	uxth	r2, r3
 80149fc:	4b08      	ldr	r3, [pc, #32]	; (8014a20 <find_volume+0x4a4>)
 80149fe:	801a      	strh	r2, [r3, #0]
 8014a00:	4b07      	ldr	r3, [pc, #28]	; (8014a20 <find_volume+0x4a4>)
 8014a02:	881a      	ldrh	r2, [r3, #0]
 8014a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a06:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014a08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014a0a:	f7fe fd25 	bl	8013458 <clear_lock>
#endif
	return FR_OK;
 8014a0e:	2300      	movs	r3, #0
}
 8014a10:	4618      	mov	r0, r3
 8014a12:	3758      	adds	r7, #88	; 0x58
 8014a14:	46bd      	mov	sp, r7
 8014a16:	bd80      	pop	{r7, pc}
 8014a18:	41615252 	.word	0x41615252
 8014a1c:	61417272 	.word	0x61417272
 8014a20:	2000086c 	.word	0x2000086c

08014a24 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8014a24:	b580      	push	{r7, lr}
 8014a26:	b084      	sub	sp, #16
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	6078      	str	r0, [r7, #4]
 8014a2c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014a2e:	2309      	movs	r3, #9
 8014a30:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d02e      	beq.n	8014a96 <validate+0x72>
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d02a      	beq.n	8014a96 <validate+0x72>
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	781b      	ldrb	r3, [r3, #0]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d025      	beq.n	8014a96 <validate+0x72>
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	889a      	ldrh	r2, [r3, #4]
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	88db      	ldrh	r3, [r3, #6]
 8014a54:	429a      	cmp	r2, r3
 8014a56:	d11e      	bne.n	8014a96 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	f7fe fb81 	bl	8013164 <lock_fs>
 8014a62:	4603      	mov	r3, r0
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d014      	beq.n	8014a92 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	785b      	ldrb	r3, [r3, #1]
 8014a6e:	4618      	mov	r0, r3
 8014a70:	f7fe f9da 	bl	8012e28 <disk_status>
 8014a74:	4603      	mov	r3, r0
 8014a76:	f003 0301 	and.w	r3, r3, #1
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d102      	bne.n	8014a84 <validate+0x60>
				res = FR_OK;
 8014a7e:	2300      	movs	r3, #0
 8014a80:	73fb      	strb	r3, [r7, #15]
 8014a82:	e008      	b.n	8014a96 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	2100      	movs	r1, #0
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	f7fe fb80 	bl	8013190 <unlock_fs>
 8014a90:	e001      	b.n	8014a96 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8014a92:	230f      	movs	r3, #15
 8014a94:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014a96:	7bfb      	ldrb	r3, [r7, #15]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d102      	bne.n	8014aa2 <validate+0x7e>
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	e000      	b.n	8014aa4 <validate+0x80>
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	683a      	ldr	r2, [r7, #0]
 8014aa6:	6013      	str	r3, [r2, #0]
	return res;
 8014aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8014aaa:	4618      	mov	r0, r3
 8014aac:	3710      	adds	r7, #16
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	bd80      	pop	{r7, pc}
	...

08014ab4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b088      	sub	sp, #32
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	60f8      	str	r0, [r7, #12]
 8014abc:	60b9      	str	r1, [r7, #8]
 8014abe:	4613      	mov	r3, r2
 8014ac0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014ac2:	68bb      	ldr	r3, [r7, #8]
 8014ac4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8014ac6:	f107 0310 	add.w	r3, r7, #16
 8014aca:	4618      	mov	r0, r3
 8014acc:	f7ff fcbb 	bl	8014446 <get_ldnumber>
 8014ad0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014ad2:	69fb      	ldr	r3, [r7, #28]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	da01      	bge.n	8014adc <f_mount+0x28>
 8014ad8:	230b      	movs	r3, #11
 8014ada:	e048      	b.n	8014b6e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014adc:	4a26      	ldr	r2, [pc, #152]	; (8014b78 <f_mount+0xc4>)
 8014ade:	69fb      	ldr	r3, [r7, #28]
 8014ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ae4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8014ae6:	69bb      	ldr	r3, [r7, #24]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d00f      	beq.n	8014b0c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014aec:	69b8      	ldr	r0, [r7, #24]
 8014aee:	f7fe fcb3 	bl	8013458 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8014af2:	69bb      	ldr	r3, [r7, #24]
 8014af4:	68db      	ldr	r3, [r3, #12]
 8014af6:	4618      	mov	r0, r3
 8014af8:	f001 f812 	bl	8015b20 <ff_del_syncobj>
 8014afc:	4603      	mov	r3, r0
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d101      	bne.n	8014b06 <f_mount+0x52>
 8014b02:	2302      	movs	r3, #2
 8014b04:	e033      	b.n	8014b6e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014b06:	69bb      	ldr	r3, [r7, #24]
 8014b08:	2200      	movs	r2, #0
 8014b0a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d00f      	beq.n	8014b32 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	2200      	movs	r2, #0
 8014b16:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8014b18:	69fb      	ldr	r3, [r7, #28]
 8014b1a:	b2da      	uxtb	r2, r3
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	330c      	adds	r3, #12
 8014b20:	4619      	mov	r1, r3
 8014b22:	4610      	mov	r0, r2
 8014b24:	f000 ffe1 	bl	8015aea <ff_cre_syncobj>
 8014b28:	4603      	mov	r3, r0
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d101      	bne.n	8014b32 <f_mount+0x7e>
 8014b2e:	2302      	movs	r3, #2
 8014b30:	e01d      	b.n	8014b6e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014b32:	68fa      	ldr	r2, [r7, #12]
 8014b34:	4910      	ldr	r1, [pc, #64]	; (8014b78 <f_mount+0xc4>)
 8014b36:	69fb      	ldr	r3, [r7, #28]
 8014b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d002      	beq.n	8014b48 <f_mount+0x94>
 8014b42:	79fb      	ldrb	r3, [r7, #7]
 8014b44:	2b01      	cmp	r3, #1
 8014b46:	d001      	beq.n	8014b4c <f_mount+0x98>
 8014b48:	2300      	movs	r3, #0
 8014b4a:	e010      	b.n	8014b6e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014b4c:	f107 010c 	add.w	r1, r7, #12
 8014b50:	f107 0308 	add.w	r3, r7, #8
 8014b54:	2200      	movs	r2, #0
 8014b56:	4618      	mov	r0, r3
 8014b58:	f7ff fd10 	bl	801457c <find_volume>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	7dfa      	ldrb	r2, [r7, #23]
 8014b64:	4611      	mov	r1, r2
 8014b66:	4618      	mov	r0, r3
 8014b68:	f7fe fb12 	bl	8013190 <unlock_fs>
 8014b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b6e:	4618      	mov	r0, r3
 8014b70:	3720      	adds	r7, #32
 8014b72:	46bd      	mov	sp, r7
 8014b74:	bd80      	pop	{r7, pc}
 8014b76:	bf00      	nop
 8014b78:	20000868 	.word	0x20000868

08014b7c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014b7c:	b580      	push	{r7, lr}
 8014b7e:	b098      	sub	sp, #96	; 0x60
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	60f8      	str	r0, [r7, #12]
 8014b84:	60b9      	str	r1, [r7, #8]
 8014b86:	4613      	mov	r3, r2
 8014b88:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d101      	bne.n	8014b94 <f_open+0x18>
 8014b90:	2309      	movs	r3, #9
 8014b92:	e1b4      	b.n	8014efe <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014b94:	79fb      	ldrb	r3, [r7, #7]
 8014b96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014b9a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014b9c:	79fa      	ldrb	r2, [r7, #7]
 8014b9e:	f107 0110 	add.w	r1, r7, #16
 8014ba2:	f107 0308 	add.w	r3, r7, #8
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f7ff fce8 	bl	801457c <find_volume>
 8014bac:	4603      	mov	r3, r0
 8014bae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8014bb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	f040 8191 	bne.w	8014ede <f_open+0x362>
		dj.obj.fs = fs;
 8014bbc:	693b      	ldr	r3, [r7, #16]
 8014bbe:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014bc0:	68ba      	ldr	r2, [r7, #8]
 8014bc2:	f107 0314 	add.w	r3, r7, #20
 8014bc6:	4611      	mov	r1, r2
 8014bc8:	4618      	mov	r0, r3
 8014bca:	f7ff fbcb 	bl	8014364 <follow_path>
 8014bce:	4603      	mov	r3, r0
 8014bd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014bd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d11a      	bne.n	8014c12 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014bdc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014be0:	b25b      	sxtb	r3, r3
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	da03      	bge.n	8014bee <f_open+0x72>
				res = FR_INVALID_NAME;
 8014be6:	2306      	movs	r3, #6
 8014be8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014bec:	e011      	b.n	8014c12 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014bee:	79fb      	ldrb	r3, [r7, #7]
 8014bf0:	f023 0301 	bic.w	r3, r3, #1
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	bf14      	ite	ne
 8014bf8:	2301      	movne	r3, #1
 8014bfa:	2300      	moveq	r3, #0
 8014bfc:	b2db      	uxtb	r3, r3
 8014bfe:	461a      	mov	r2, r3
 8014c00:	f107 0314 	add.w	r3, r7, #20
 8014c04:	4611      	mov	r1, r2
 8014c06:	4618      	mov	r0, r3
 8014c08:	f7fe fade 	bl	80131c8 <chk_lock>
 8014c0c:	4603      	mov	r3, r0
 8014c0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014c12:	79fb      	ldrb	r3, [r7, #7]
 8014c14:	f003 031c 	and.w	r3, r3, #28
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d07f      	beq.n	8014d1c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8014c1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d017      	beq.n	8014c54 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014c24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014c28:	2b04      	cmp	r3, #4
 8014c2a:	d10e      	bne.n	8014c4a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014c2c:	f7fe fb28 	bl	8013280 <enq_lock>
 8014c30:	4603      	mov	r3, r0
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d006      	beq.n	8014c44 <f_open+0xc8>
 8014c36:	f107 0314 	add.w	r3, r7, #20
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	f7ff fa6c 	bl	8014118 <dir_register>
 8014c40:	4603      	mov	r3, r0
 8014c42:	e000      	b.n	8014c46 <f_open+0xca>
 8014c44:	2312      	movs	r3, #18
 8014c46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014c4a:	79fb      	ldrb	r3, [r7, #7]
 8014c4c:	f043 0308 	orr.w	r3, r3, #8
 8014c50:	71fb      	strb	r3, [r7, #7]
 8014c52:	e010      	b.n	8014c76 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014c54:	7ebb      	ldrb	r3, [r7, #26]
 8014c56:	f003 0311 	and.w	r3, r3, #17
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d003      	beq.n	8014c66 <f_open+0xea>
					res = FR_DENIED;
 8014c5e:	2307      	movs	r3, #7
 8014c60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014c64:	e007      	b.n	8014c76 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014c66:	79fb      	ldrb	r3, [r7, #7]
 8014c68:	f003 0304 	and.w	r3, r3, #4
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d002      	beq.n	8014c76 <f_open+0xfa>
 8014c70:	2308      	movs	r3, #8
 8014c72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014c76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d168      	bne.n	8014d50 <f_open+0x1d4>
 8014c7e:	79fb      	ldrb	r3, [r7, #7]
 8014c80:	f003 0308 	and.w	r3, r3, #8
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d063      	beq.n	8014d50 <f_open+0x1d4>
				dw = GET_FATTIME();
 8014c88:	f7fd fb8e 	bl	80123a8 <get_fattime>
 8014c8c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c90:	330e      	adds	r3, #14
 8014c92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014c94:	4618      	mov	r0, r3
 8014c96:	f7fe f9bb 	bl	8013010 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c9c:	3316      	adds	r3, #22
 8014c9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	f7fe f9b5 	bl	8013010 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ca8:	330b      	adds	r3, #11
 8014caa:	2220      	movs	r2, #32
 8014cac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014cae:	693b      	ldr	r3, [r7, #16]
 8014cb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014cb2:	4611      	mov	r1, r2
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	f7ff f93e 	bl	8013f36 <ld_clust>
 8014cba:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014cbc:	693b      	ldr	r3, [r7, #16]
 8014cbe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014cc0:	2200      	movs	r2, #0
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	f7ff f956 	bl	8013f74 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cca:	331c      	adds	r3, #28
 8014ccc:	2100      	movs	r1, #0
 8014cce:	4618      	mov	r0, r3
 8014cd0:	f7fe f99e 	bl	8013010 <st_dword>
					fs->wflag = 1;
 8014cd4:	693b      	ldr	r3, [r7, #16]
 8014cd6:	2201      	movs	r2, #1
 8014cd8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d037      	beq.n	8014d50 <f_open+0x1d4>
						dw = fs->winsect;
 8014ce0:	693b      	ldr	r3, [r7, #16]
 8014ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ce4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8014ce6:	f107 0314 	add.w	r3, r7, #20
 8014cea:	2200      	movs	r2, #0
 8014cec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014cee:	4618      	mov	r0, r3
 8014cf0:	f7fe fe69 	bl	80139c6 <remove_chain>
 8014cf4:	4603      	mov	r3, r0
 8014cf6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8014cfa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d126      	bne.n	8014d50 <f_open+0x1d4>
							res = move_window(fs, dw);
 8014d02:	693b      	ldr	r3, [r7, #16]
 8014d04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014d06:	4618      	mov	r0, r3
 8014d08:	f7fe fc0e 	bl	8013528 <move_window>
 8014d0c:	4603      	mov	r3, r0
 8014d0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014d12:	693b      	ldr	r3, [r7, #16]
 8014d14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014d16:	3a01      	subs	r2, #1
 8014d18:	611a      	str	r2, [r3, #16]
 8014d1a:	e019      	b.n	8014d50 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014d1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d115      	bne.n	8014d50 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014d24:	7ebb      	ldrb	r3, [r7, #26]
 8014d26:	f003 0310 	and.w	r3, r3, #16
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d003      	beq.n	8014d36 <f_open+0x1ba>
					res = FR_NO_FILE;
 8014d2e:	2304      	movs	r3, #4
 8014d30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014d34:	e00c      	b.n	8014d50 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014d36:	79fb      	ldrb	r3, [r7, #7]
 8014d38:	f003 0302 	and.w	r3, r3, #2
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d007      	beq.n	8014d50 <f_open+0x1d4>
 8014d40:	7ebb      	ldrb	r3, [r7, #26]
 8014d42:	f003 0301 	and.w	r3, r3, #1
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d002      	beq.n	8014d50 <f_open+0x1d4>
						res = FR_DENIED;
 8014d4a:	2307      	movs	r3, #7
 8014d4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8014d50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d128      	bne.n	8014daa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014d58:	79fb      	ldrb	r3, [r7, #7]
 8014d5a:	f003 0308 	and.w	r3, r3, #8
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d003      	beq.n	8014d6a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8014d62:	79fb      	ldrb	r3, [r7, #7]
 8014d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d68:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014d6a:	693b      	ldr	r3, [r7, #16]
 8014d6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8014d72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014d78:	79fb      	ldrb	r3, [r7, #7]
 8014d7a:	f023 0301 	bic.w	r3, r3, #1
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	bf14      	ite	ne
 8014d82:	2301      	movne	r3, #1
 8014d84:	2300      	moveq	r3, #0
 8014d86:	b2db      	uxtb	r3, r3
 8014d88:	461a      	mov	r2, r3
 8014d8a:	f107 0314 	add.w	r3, r7, #20
 8014d8e:	4611      	mov	r1, r2
 8014d90:	4618      	mov	r0, r3
 8014d92:	f7fe fa97 	bl	80132c4 <inc_lock>
 8014d96:	4602      	mov	r2, r0
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	691b      	ldr	r3, [r3, #16]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d102      	bne.n	8014daa <f_open+0x22e>
 8014da4:	2302      	movs	r3, #2
 8014da6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014daa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	f040 8095 	bne.w	8014ede <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014db4:	693b      	ldr	r3, [r7, #16]
 8014db6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014db8:	4611      	mov	r1, r2
 8014dba:	4618      	mov	r0, r3
 8014dbc:	f7ff f8bb 	bl	8013f36 <ld_clust>
 8014dc0:	4602      	mov	r2, r0
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dc8:	331c      	adds	r3, #28
 8014dca:	4618      	mov	r0, r3
 8014dcc:	f7fe f8e2 	bl	8012f94 <ld_dword>
 8014dd0:	4602      	mov	r2, r0
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	2200      	movs	r2, #0
 8014dda:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014ddc:	693a      	ldr	r2, [r7, #16]
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014de2:	693b      	ldr	r3, [r7, #16]
 8014de4:	88da      	ldrh	r2, [r3, #6]
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	79fa      	ldrb	r2, [r7, #7]
 8014dee:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	2200      	movs	r2, #0
 8014df4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	2200      	movs	r2, #0
 8014dfa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	2200      	movs	r2, #0
 8014e00:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	3330      	adds	r3, #48	; 0x30
 8014e06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014e0a:	2100      	movs	r1, #0
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	f7fe f94c 	bl	80130aa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014e12:	79fb      	ldrb	r3, [r7, #7]
 8014e14:	f003 0320 	and.w	r3, r3, #32
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d060      	beq.n	8014ede <f_open+0x362>
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	68db      	ldr	r3, [r3, #12]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d05c      	beq.n	8014ede <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	68da      	ldr	r2, [r3, #12]
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014e2c:	693b      	ldr	r3, [r7, #16]
 8014e2e:	895b      	ldrh	r3, [r3, #10]
 8014e30:	025b      	lsls	r3, r3, #9
 8014e32:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	689b      	ldr	r3, [r3, #8]
 8014e38:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	68db      	ldr	r3, [r3, #12]
 8014e3e:	657b      	str	r3, [r7, #84]	; 0x54
 8014e40:	e016      	b.n	8014e70 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014e46:	4618      	mov	r0, r3
 8014e48:	f7fe fc29 	bl	801369e <get_fat>
 8014e4c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8014e4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014e50:	2b01      	cmp	r3, #1
 8014e52:	d802      	bhi.n	8014e5a <f_open+0x2de>
 8014e54:	2302      	movs	r3, #2
 8014e56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014e5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e60:	d102      	bne.n	8014e68 <f_open+0x2ec>
 8014e62:	2301      	movs	r3, #1
 8014e64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014e68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e6c:	1ad3      	subs	r3, r2, r3
 8014e6e:	657b      	str	r3, [r7, #84]	; 0x54
 8014e70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d103      	bne.n	8014e80 <f_open+0x304>
 8014e78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e7c:	429a      	cmp	r2, r3
 8014e7e:	d8e0      	bhi.n	8014e42 <f_open+0x2c6>
				}
				fp->clust = clst;
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014e84:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014e86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d127      	bne.n	8014ede <f_open+0x362>
 8014e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d022      	beq.n	8014ede <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014e98:	693b      	ldr	r3, [r7, #16]
 8014e9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	f7fe fbdf 	bl	8013660 <clust2sect>
 8014ea2:	6478      	str	r0, [r7, #68]	; 0x44
 8014ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d103      	bne.n	8014eb2 <f_open+0x336>
						res = FR_INT_ERR;
 8014eaa:	2302      	movs	r3, #2
 8014eac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014eb0:	e015      	b.n	8014ede <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014eb4:	0a5a      	lsrs	r2, r3, #9
 8014eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014eb8:	441a      	add	r2, r3
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014ebe:	693b      	ldr	r3, [r7, #16]
 8014ec0:	7858      	ldrb	r0, [r3, #1]
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	6a1a      	ldr	r2, [r3, #32]
 8014ecc:	2301      	movs	r3, #1
 8014ece:	f7fd ffeb 	bl	8012ea8 <disk_read>
 8014ed2:	4603      	mov	r3, r0
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d002      	beq.n	8014ede <f_open+0x362>
 8014ed8:	2301      	movs	r3, #1
 8014eda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014ede:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d002      	beq.n	8014eec <f_open+0x370>
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	2200      	movs	r2, #0
 8014eea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014eec:	693b      	ldr	r3, [r7, #16]
 8014eee:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8014ef2:	4611      	mov	r1, r2
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	f7fe f94b 	bl	8013190 <unlock_fs>
 8014efa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8014efe:	4618      	mov	r0, r3
 8014f00:	3760      	adds	r7, #96	; 0x60
 8014f02:	46bd      	mov	sp, r7
 8014f04:	bd80      	pop	{r7, pc}

08014f06 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014f06:	b580      	push	{r7, lr}
 8014f08:	b08c      	sub	sp, #48	; 0x30
 8014f0a:	af00      	add	r7, sp, #0
 8014f0c:	60f8      	str	r0, [r7, #12]
 8014f0e:	60b9      	str	r1, [r7, #8]
 8014f10:	607a      	str	r2, [r7, #4]
 8014f12:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014f14:	68bb      	ldr	r3, [r7, #8]
 8014f16:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014f18:	683b      	ldr	r3, [r7, #0]
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	f107 0210 	add.w	r2, r7, #16
 8014f24:	4611      	mov	r1, r2
 8014f26:	4618      	mov	r0, r3
 8014f28:	f7ff fd7c 	bl	8014a24 <validate>
 8014f2c:	4603      	mov	r3, r0
 8014f2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014f32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d107      	bne.n	8014f4a <f_write+0x44>
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	7d5b      	ldrb	r3, [r3, #21]
 8014f3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014f42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d009      	beq.n	8014f5e <f_write+0x58>
 8014f4a:	693b      	ldr	r3, [r7, #16]
 8014f4c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014f50:	4611      	mov	r1, r2
 8014f52:	4618      	mov	r0, r3
 8014f54:	f7fe f91c 	bl	8013190 <unlock_fs>
 8014f58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014f5c:	e173      	b.n	8015246 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	7d1b      	ldrb	r3, [r3, #20]
 8014f62:	f003 0302 	and.w	r3, r3, #2
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d106      	bne.n	8014f78 <f_write+0x72>
 8014f6a:	693b      	ldr	r3, [r7, #16]
 8014f6c:	2107      	movs	r1, #7
 8014f6e:	4618      	mov	r0, r3
 8014f70:	f7fe f90e 	bl	8013190 <unlock_fs>
 8014f74:	2307      	movs	r3, #7
 8014f76:	e166      	b.n	8015246 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	699a      	ldr	r2, [r3, #24]
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	441a      	add	r2, r3
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	699b      	ldr	r3, [r3, #24]
 8014f84:	429a      	cmp	r2, r3
 8014f86:	f080 814b 	bcs.w	8015220 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	699b      	ldr	r3, [r3, #24]
 8014f8e:	43db      	mvns	r3, r3
 8014f90:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014f92:	e145      	b.n	8015220 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	699b      	ldr	r3, [r3, #24]
 8014f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	f040 8101 	bne.w	80151a4 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	699b      	ldr	r3, [r3, #24]
 8014fa6:	0a5b      	lsrs	r3, r3, #9
 8014fa8:	693a      	ldr	r2, [r7, #16]
 8014faa:	8952      	ldrh	r2, [r2, #10]
 8014fac:	3a01      	subs	r2, #1
 8014fae:	4013      	ands	r3, r2
 8014fb0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8014fb2:	69bb      	ldr	r3, [r7, #24]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d14d      	bne.n	8015054 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	699b      	ldr	r3, [r3, #24]
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d10c      	bne.n	8014fda <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	689b      	ldr	r3, [r3, #8]
 8014fc4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8014fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d11a      	bne.n	8015002 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	2100      	movs	r1, #0
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	f7fe fd5d 	bl	8013a90 <create_chain>
 8014fd6:	62b8      	str	r0, [r7, #40]	; 0x28
 8014fd8:	e013      	b.n	8015002 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d007      	beq.n	8014ff2 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	699b      	ldr	r3, [r3, #24]
 8014fe6:	4619      	mov	r1, r3
 8014fe8:	68f8      	ldr	r0, [r7, #12]
 8014fea:	f7fe fde9 	bl	8013bc0 <clmt_clust>
 8014fee:	62b8      	str	r0, [r7, #40]	; 0x28
 8014ff0:	e007      	b.n	8015002 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014ff2:	68fa      	ldr	r2, [r7, #12]
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	69db      	ldr	r3, [r3, #28]
 8014ff8:	4619      	mov	r1, r3
 8014ffa:	4610      	mov	r0, r2
 8014ffc:	f7fe fd48 	bl	8013a90 <create_chain>
 8015000:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015004:	2b00      	cmp	r3, #0
 8015006:	f000 8110 	beq.w	801522a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801500a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801500c:	2b01      	cmp	r3, #1
 801500e:	d109      	bne.n	8015024 <f_write+0x11e>
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	2202      	movs	r2, #2
 8015014:	755a      	strb	r2, [r3, #21]
 8015016:	693b      	ldr	r3, [r7, #16]
 8015018:	2102      	movs	r1, #2
 801501a:	4618      	mov	r0, r3
 801501c:	f7fe f8b8 	bl	8013190 <unlock_fs>
 8015020:	2302      	movs	r3, #2
 8015022:	e110      	b.n	8015246 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015026:	f1b3 3fff 	cmp.w	r3, #4294967295
 801502a:	d109      	bne.n	8015040 <f_write+0x13a>
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	2201      	movs	r2, #1
 8015030:	755a      	strb	r2, [r3, #21]
 8015032:	693b      	ldr	r3, [r7, #16]
 8015034:	2101      	movs	r1, #1
 8015036:	4618      	mov	r0, r3
 8015038:	f7fe f8aa 	bl	8013190 <unlock_fs>
 801503c:	2301      	movs	r3, #1
 801503e:	e102      	b.n	8015246 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015044:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	689b      	ldr	r3, [r3, #8]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d102      	bne.n	8015054 <f_write+0x14e>
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015052:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	7d1b      	ldrb	r3, [r3, #20]
 8015058:	b25b      	sxtb	r3, r3
 801505a:	2b00      	cmp	r3, #0
 801505c:	da1d      	bge.n	801509a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801505e:	693b      	ldr	r3, [r7, #16]
 8015060:	7858      	ldrb	r0, [r3, #1]
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	6a1a      	ldr	r2, [r3, #32]
 801506c:	2301      	movs	r3, #1
 801506e:	f7fd ff3b 	bl	8012ee8 <disk_write>
 8015072:	4603      	mov	r3, r0
 8015074:	2b00      	cmp	r3, #0
 8015076:	d009      	beq.n	801508c <f_write+0x186>
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	2201      	movs	r2, #1
 801507c:	755a      	strb	r2, [r3, #21]
 801507e:	693b      	ldr	r3, [r7, #16]
 8015080:	2101      	movs	r1, #1
 8015082:	4618      	mov	r0, r3
 8015084:	f7fe f884 	bl	8013190 <unlock_fs>
 8015088:	2301      	movs	r3, #1
 801508a:	e0dc      	b.n	8015246 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	7d1b      	ldrb	r3, [r3, #20]
 8015090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015094:	b2da      	uxtb	r2, r3
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801509a:	693a      	ldr	r2, [r7, #16]
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	69db      	ldr	r3, [r3, #28]
 80150a0:	4619      	mov	r1, r3
 80150a2:	4610      	mov	r0, r2
 80150a4:	f7fe fadc 	bl	8013660 <clust2sect>
 80150a8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80150aa:	697b      	ldr	r3, [r7, #20]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d109      	bne.n	80150c4 <f_write+0x1be>
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	2202      	movs	r2, #2
 80150b4:	755a      	strb	r2, [r3, #21]
 80150b6:	693b      	ldr	r3, [r7, #16]
 80150b8:	2102      	movs	r1, #2
 80150ba:	4618      	mov	r0, r3
 80150bc:	f7fe f868 	bl	8013190 <unlock_fs>
 80150c0:	2302      	movs	r3, #2
 80150c2:	e0c0      	b.n	8015246 <f_write+0x340>
			sect += csect;
 80150c4:	697a      	ldr	r2, [r7, #20]
 80150c6:	69bb      	ldr	r3, [r7, #24]
 80150c8:	4413      	add	r3, r2
 80150ca:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	0a5b      	lsrs	r3, r3, #9
 80150d0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80150d2:	6a3b      	ldr	r3, [r7, #32]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d041      	beq.n	801515c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80150d8:	69ba      	ldr	r2, [r7, #24]
 80150da:	6a3b      	ldr	r3, [r7, #32]
 80150dc:	4413      	add	r3, r2
 80150de:	693a      	ldr	r2, [r7, #16]
 80150e0:	8952      	ldrh	r2, [r2, #10]
 80150e2:	4293      	cmp	r3, r2
 80150e4:	d905      	bls.n	80150f2 <f_write+0x1ec>
					cc = fs->csize - csect;
 80150e6:	693b      	ldr	r3, [r7, #16]
 80150e8:	895b      	ldrh	r3, [r3, #10]
 80150ea:	461a      	mov	r2, r3
 80150ec:	69bb      	ldr	r3, [r7, #24]
 80150ee:	1ad3      	subs	r3, r2, r3
 80150f0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80150f2:	693b      	ldr	r3, [r7, #16]
 80150f4:	7858      	ldrb	r0, [r3, #1]
 80150f6:	6a3b      	ldr	r3, [r7, #32]
 80150f8:	697a      	ldr	r2, [r7, #20]
 80150fa:	69f9      	ldr	r1, [r7, #28]
 80150fc:	f7fd fef4 	bl	8012ee8 <disk_write>
 8015100:	4603      	mov	r3, r0
 8015102:	2b00      	cmp	r3, #0
 8015104:	d009      	beq.n	801511a <f_write+0x214>
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	2201      	movs	r2, #1
 801510a:	755a      	strb	r2, [r3, #21]
 801510c:	693b      	ldr	r3, [r7, #16]
 801510e:	2101      	movs	r1, #1
 8015110:	4618      	mov	r0, r3
 8015112:	f7fe f83d 	bl	8013190 <unlock_fs>
 8015116:	2301      	movs	r3, #1
 8015118:	e095      	b.n	8015246 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	6a1a      	ldr	r2, [r3, #32]
 801511e:	697b      	ldr	r3, [r7, #20]
 8015120:	1ad3      	subs	r3, r2, r3
 8015122:	6a3a      	ldr	r2, [r7, #32]
 8015124:	429a      	cmp	r2, r3
 8015126:	d915      	bls.n	8015154 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	6a1a      	ldr	r2, [r3, #32]
 8015132:	697b      	ldr	r3, [r7, #20]
 8015134:	1ad3      	subs	r3, r2, r3
 8015136:	025b      	lsls	r3, r3, #9
 8015138:	69fa      	ldr	r2, [r7, #28]
 801513a:	4413      	add	r3, r2
 801513c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015140:	4619      	mov	r1, r3
 8015142:	f7fd ff91 	bl	8013068 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	7d1b      	ldrb	r3, [r3, #20]
 801514a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801514e:	b2da      	uxtb	r2, r3
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8015154:	6a3b      	ldr	r3, [r7, #32]
 8015156:	025b      	lsls	r3, r3, #9
 8015158:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801515a:	e044      	b.n	80151e6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	6a1b      	ldr	r3, [r3, #32]
 8015160:	697a      	ldr	r2, [r7, #20]
 8015162:	429a      	cmp	r2, r3
 8015164:	d01b      	beq.n	801519e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	699a      	ldr	r2, [r3, #24]
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801516e:	429a      	cmp	r2, r3
 8015170:	d215      	bcs.n	801519e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8015172:	693b      	ldr	r3, [r7, #16]
 8015174:	7858      	ldrb	r0, [r3, #1]
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801517c:	2301      	movs	r3, #1
 801517e:	697a      	ldr	r2, [r7, #20]
 8015180:	f7fd fe92 	bl	8012ea8 <disk_read>
 8015184:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8015186:	2b00      	cmp	r3, #0
 8015188:	d009      	beq.n	801519e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	2201      	movs	r2, #1
 801518e:	755a      	strb	r2, [r3, #21]
 8015190:	693b      	ldr	r3, [r7, #16]
 8015192:	2101      	movs	r1, #1
 8015194:	4618      	mov	r0, r3
 8015196:	f7fd fffb 	bl	8013190 <unlock_fs>
 801519a:	2301      	movs	r3, #1
 801519c:	e053      	b.n	8015246 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	697a      	ldr	r2, [r7, #20]
 80151a2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	699b      	ldr	r3, [r3, #24]
 80151a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80151ac:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80151b0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80151b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	429a      	cmp	r2, r3
 80151b8:	d901      	bls.n	80151be <f_write+0x2b8>
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	699b      	ldr	r3, [r3, #24]
 80151c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80151cc:	4413      	add	r3, r2
 80151ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151d0:	69f9      	ldr	r1, [r7, #28]
 80151d2:	4618      	mov	r0, r3
 80151d4:	f7fd ff48 	bl	8013068 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	7d1b      	ldrb	r3, [r3, #20]
 80151dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80151e0:	b2da      	uxtb	r2, r3
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80151e6:	69fa      	ldr	r2, [r7, #28]
 80151e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ea:	4413      	add	r3, r2
 80151ec:	61fb      	str	r3, [r7, #28]
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	699a      	ldr	r2, [r3, #24]
 80151f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151f4:	441a      	add	r2, r3
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	619a      	str	r2, [r3, #24]
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	68da      	ldr	r2, [r3, #12]
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	699b      	ldr	r3, [r3, #24]
 8015202:	429a      	cmp	r2, r3
 8015204:	bf38      	it	cc
 8015206:	461a      	movcc	r2, r3
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	60da      	str	r2, [r3, #12]
 801520c:	683b      	ldr	r3, [r7, #0]
 801520e:	681a      	ldr	r2, [r3, #0]
 8015210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015212:	441a      	add	r2, r3
 8015214:	683b      	ldr	r3, [r7, #0]
 8015216:	601a      	str	r2, [r3, #0]
 8015218:	687a      	ldr	r2, [r7, #4]
 801521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801521c:	1ad3      	subs	r3, r2, r3
 801521e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	2b00      	cmp	r3, #0
 8015224:	f47f aeb6 	bne.w	8014f94 <f_write+0x8e>
 8015228:	e000      	b.n	801522c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801522a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	7d1b      	ldrb	r3, [r3, #20]
 8015230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015234:	b2da      	uxtb	r2, r3
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801523a:	693b      	ldr	r3, [r7, #16]
 801523c:	2100      	movs	r1, #0
 801523e:	4618      	mov	r0, r3
 8015240:	f7fd ffa6 	bl	8013190 <unlock_fs>
 8015244:	2300      	movs	r3, #0
}
 8015246:	4618      	mov	r0, r3
 8015248:	3730      	adds	r7, #48	; 0x30
 801524a:	46bd      	mov	sp, r7
 801524c:	bd80      	pop	{r7, pc}

0801524e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801524e:	b580      	push	{r7, lr}
 8015250:	b086      	sub	sp, #24
 8015252:	af00      	add	r7, sp, #0
 8015254:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	f107 0208 	add.w	r2, r7, #8
 801525c:	4611      	mov	r1, r2
 801525e:	4618      	mov	r0, r3
 8015260:	f7ff fbe0 	bl	8014a24 <validate>
 8015264:	4603      	mov	r3, r0
 8015266:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015268:	7dfb      	ldrb	r3, [r7, #23]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d16d      	bne.n	801534a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	7d1b      	ldrb	r3, [r3, #20]
 8015272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015276:	2b00      	cmp	r3, #0
 8015278:	d067      	beq.n	801534a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	7d1b      	ldrb	r3, [r3, #20]
 801527e:	b25b      	sxtb	r3, r3
 8015280:	2b00      	cmp	r3, #0
 8015282:	da1a      	bge.n	80152ba <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8015284:	68bb      	ldr	r3, [r7, #8]
 8015286:	7858      	ldrb	r0, [r3, #1]
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	6a1a      	ldr	r2, [r3, #32]
 8015292:	2301      	movs	r3, #1
 8015294:	f7fd fe28 	bl	8012ee8 <disk_write>
 8015298:	4603      	mov	r3, r0
 801529a:	2b00      	cmp	r3, #0
 801529c:	d006      	beq.n	80152ac <f_sync+0x5e>
 801529e:	68bb      	ldr	r3, [r7, #8]
 80152a0:	2101      	movs	r1, #1
 80152a2:	4618      	mov	r0, r3
 80152a4:	f7fd ff74 	bl	8013190 <unlock_fs>
 80152a8:	2301      	movs	r3, #1
 80152aa:	e055      	b.n	8015358 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	7d1b      	ldrb	r3, [r3, #20]
 80152b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80152b4:	b2da      	uxtb	r2, r3
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80152ba:	f7fd f875 	bl	80123a8 <get_fattime>
 80152be:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80152c0:	68ba      	ldr	r2, [r7, #8]
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152c6:	4619      	mov	r1, r3
 80152c8:	4610      	mov	r0, r2
 80152ca:	f7fe f92d 	bl	8013528 <move_window>
 80152ce:	4603      	mov	r3, r0
 80152d0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80152d2:	7dfb      	ldrb	r3, [r7, #23]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d138      	bne.n	801534a <f_sync+0xfc>
					dir = fp->dir_ptr;
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80152dc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	330b      	adds	r3, #11
 80152e2:	781a      	ldrb	r2, [r3, #0]
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	330b      	adds	r3, #11
 80152e8:	f042 0220 	orr.w	r2, r2, #32
 80152ec:	b2d2      	uxtb	r2, r2
 80152ee:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	6818      	ldr	r0, [r3, #0]
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	689b      	ldr	r3, [r3, #8]
 80152f8:	461a      	mov	r2, r3
 80152fa:	68f9      	ldr	r1, [r7, #12]
 80152fc:	f7fe fe3a 	bl	8013f74 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	f103 021c 	add.w	r2, r3, #28
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	68db      	ldr	r3, [r3, #12]
 801530a:	4619      	mov	r1, r3
 801530c:	4610      	mov	r0, r2
 801530e:	f7fd fe7f 	bl	8013010 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	3316      	adds	r3, #22
 8015316:	6939      	ldr	r1, [r7, #16]
 8015318:	4618      	mov	r0, r3
 801531a:	f7fd fe79 	bl	8013010 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	3312      	adds	r3, #18
 8015322:	2100      	movs	r1, #0
 8015324:	4618      	mov	r0, r3
 8015326:	f7fd fe58 	bl	8012fda <st_word>
					fs->wflag = 1;
 801532a:	68bb      	ldr	r3, [r7, #8]
 801532c:	2201      	movs	r2, #1
 801532e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8015330:	68bb      	ldr	r3, [r7, #8]
 8015332:	4618      	mov	r0, r3
 8015334:	f7fe f926 	bl	8013584 <sync_fs>
 8015338:	4603      	mov	r3, r0
 801533a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	7d1b      	ldrb	r3, [r3, #20]
 8015340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015344:	b2da      	uxtb	r2, r3
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801534a:	68bb      	ldr	r3, [r7, #8]
 801534c:	7dfa      	ldrb	r2, [r7, #23]
 801534e:	4611      	mov	r1, r2
 8015350:	4618      	mov	r0, r3
 8015352:	f7fd ff1d 	bl	8013190 <unlock_fs>
 8015356:	7dfb      	ldrb	r3, [r7, #23]
}
 8015358:	4618      	mov	r0, r3
 801535a:	3718      	adds	r7, #24
 801535c:	46bd      	mov	sp, r7
 801535e:	bd80      	pop	{r7, pc}

08015360 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8015360:	b580      	push	{r7, lr}
 8015362:	b084      	sub	sp, #16
 8015364:	af00      	add	r7, sp, #0
 8015366:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8015368:	6878      	ldr	r0, [r7, #4]
 801536a:	f7ff ff70 	bl	801524e <f_sync>
 801536e:	4603      	mov	r3, r0
 8015370:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8015372:	7bfb      	ldrb	r3, [r7, #15]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d11d      	bne.n	80153b4 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	f107 0208 	add.w	r2, r7, #8
 801537e:	4611      	mov	r1, r2
 8015380:	4618      	mov	r0, r3
 8015382:	f7ff fb4f 	bl	8014a24 <validate>
 8015386:	4603      	mov	r3, r0
 8015388:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801538a:	7bfb      	ldrb	r3, [r7, #15]
 801538c:	2b00      	cmp	r3, #0
 801538e:	d111      	bne.n	80153b4 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	691b      	ldr	r3, [r3, #16]
 8015394:	4618      	mov	r0, r3
 8015396:	f7fe f823 	bl	80133e0 <dec_lock>
 801539a:	4603      	mov	r3, r0
 801539c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801539e:	7bfb      	ldrb	r3, [r7, #15]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d102      	bne.n	80153aa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	2200      	movs	r2, #0
 80153a8:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80153aa:	68bb      	ldr	r3, [r7, #8]
 80153ac:	2100      	movs	r1, #0
 80153ae:	4618      	mov	r0, r3
 80153b0:	f7fd feee 	bl	8013190 <unlock_fs>
#endif
		}
	}
	return res;
 80153b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80153b6:	4618      	mov	r0, r3
 80153b8:	3710      	adds	r7, #16
 80153ba:	46bd      	mov	sp, r7
 80153bc:	bd80      	pop	{r7, pc}

080153be <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80153be:	b580      	push	{r7, lr}
 80153c0:	b090      	sub	sp, #64	; 0x40
 80153c2:	af00      	add	r7, sp, #0
 80153c4:	6078      	str	r0, [r7, #4]
 80153c6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	f107 0208 	add.w	r2, r7, #8
 80153ce:	4611      	mov	r1, r2
 80153d0:	4618      	mov	r0, r3
 80153d2:	f7ff fb27 	bl	8014a24 <validate>
 80153d6:	4603      	mov	r3, r0
 80153d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80153dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d103      	bne.n	80153ec <f_lseek+0x2e>
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	7d5b      	ldrb	r3, [r3, #21]
 80153e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80153ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d009      	beq.n	8015408 <f_lseek+0x4a>
 80153f4:	68bb      	ldr	r3, [r7, #8]
 80153f6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80153fa:	4611      	mov	r1, r2
 80153fc:	4618      	mov	r0, r3
 80153fe:	f7fd fec7 	bl	8013190 <unlock_fs>
 8015402:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015406:	e229      	b.n	801585c <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801540c:	2b00      	cmp	r3, #0
 801540e:	f000 80ea 	beq.w	80155e6 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8015412:	683b      	ldr	r3, [r7, #0]
 8015414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015418:	d164      	bne.n	80154e4 <f_lseek+0x126>
			tbl = fp->cltbl;
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801541e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8015420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015422:	1d1a      	adds	r2, r3, #4
 8015424:	627a      	str	r2, [r7, #36]	; 0x24
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	617b      	str	r3, [r7, #20]
 801542a:	2302      	movs	r3, #2
 801542c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	689b      	ldr	r3, [r3, #8]
 8015432:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8015434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015436:	2b00      	cmp	r3, #0
 8015438:	d044      	beq.n	80154c4 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801543a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801543c:	613b      	str	r3, [r7, #16]
 801543e:	2300      	movs	r3, #0
 8015440:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015444:	3302      	adds	r3, #2
 8015446:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8015448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801544a:	60fb      	str	r3, [r7, #12]
 801544c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801544e:	3301      	adds	r3, #1
 8015450:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015456:	4618      	mov	r0, r3
 8015458:	f7fe f921 	bl	801369e <get_fat>
 801545c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015460:	2b01      	cmp	r3, #1
 8015462:	d809      	bhi.n	8015478 <f_lseek+0xba>
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	2202      	movs	r2, #2
 8015468:	755a      	strb	r2, [r3, #21]
 801546a:	68bb      	ldr	r3, [r7, #8]
 801546c:	2102      	movs	r1, #2
 801546e:	4618      	mov	r0, r3
 8015470:	f7fd fe8e 	bl	8013190 <unlock_fs>
 8015474:	2302      	movs	r3, #2
 8015476:	e1f1      	b.n	801585c <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801547a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801547e:	d109      	bne.n	8015494 <f_lseek+0xd6>
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	2201      	movs	r2, #1
 8015484:	755a      	strb	r2, [r3, #21]
 8015486:	68bb      	ldr	r3, [r7, #8]
 8015488:	2101      	movs	r1, #1
 801548a:	4618      	mov	r0, r3
 801548c:	f7fd fe80 	bl	8013190 <unlock_fs>
 8015490:	2301      	movs	r3, #1
 8015492:	e1e3      	b.n	801585c <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	3301      	adds	r3, #1
 8015498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801549a:	429a      	cmp	r2, r3
 801549c:	d0d4      	beq.n	8015448 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801549e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80154a0:	697b      	ldr	r3, [r7, #20]
 80154a2:	429a      	cmp	r2, r3
 80154a4:	d809      	bhi.n	80154ba <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 80154a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154a8:	1d1a      	adds	r2, r3, #4
 80154aa:	627a      	str	r2, [r7, #36]	; 0x24
 80154ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80154ae:	601a      	str	r2, [r3, #0]
 80154b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154b2:	1d1a      	adds	r2, r3, #4
 80154b4:	627a      	str	r2, [r7, #36]	; 0x24
 80154b6:	693a      	ldr	r2, [r7, #16]
 80154b8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80154ba:	68bb      	ldr	r3, [r7, #8]
 80154bc:	699b      	ldr	r3, [r3, #24]
 80154be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80154c0:	429a      	cmp	r2, r3
 80154c2:	d3ba      	bcc.n	801543a <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80154ca:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80154cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80154ce:	697b      	ldr	r3, [r7, #20]
 80154d0:	429a      	cmp	r2, r3
 80154d2:	d803      	bhi.n	80154dc <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 80154d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154d6:	2200      	movs	r2, #0
 80154d8:	601a      	str	r2, [r3, #0]
 80154da:	e1b6      	b.n	801584a <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80154dc:	2311      	movs	r3, #17
 80154de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80154e2:	e1b2      	b.n	801584a <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	68db      	ldr	r3, [r3, #12]
 80154e8:	683a      	ldr	r2, [r7, #0]
 80154ea:	429a      	cmp	r2, r3
 80154ec:	d902      	bls.n	80154f4 <f_lseek+0x136>
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	68db      	ldr	r3, [r3, #12]
 80154f2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	683a      	ldr	r2, [r7, #0]
 80154f8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80154fa:	683b      	ldr	r3, [r7, #0]
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	f000 81a4 	beq.w	801584a <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8015502:	683b      	ldr	r3, [r7, #0]
 8015504:	3b01      	subs	r3, #1
 8015506:	4619      	mov	r1, r3
 8015508:	6878      	ldr	r0, [r7, #4]
 801550a:	f7fe fb59 	bl	8013bc0 <clmt_clust>
 801550e:	4602      	mov	r2, r0
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8015514:	68ba      	ldr	r2, [r7, #8]
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	69db      	ldr	r3, [r3, #28]
 801551a:	4619      	mov	r1, r3
 801551c:	4610      	mov	r0, r2
 801551e:	f7fe f89f 	bl	8013660 <clust2sect>
 8015522:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8015524:	69bb      	ldr	r3, [r7, #24]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d109      	bne.n	801553e <f_lseek+0x180>
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	2202      	movs	r2, #2
 801552e:	755a      	strb	r2, [r3, #21]
 8015530:	68bb      	ldr	r3, [r7, #8]
 8015532:	2102      	movs	r1, #2
 8015534:	4618      	mov	r0, r3
 8015536:	f7fd fe2b 	bl	8013190 <unlock_fs>
 801553a:	2302      	movs	r3, #2
 801553c:	e18e      	b.n	801585c <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801553e:	683b      	ldr	r3, [r7, #0]
 8015540:	3b01      	subs	r3, #1
 8015542:	0a5b      	lsrs	r3, r3, #9
 8015544:	68ba      	ldr	r2, [r7, #8]
 8015546:	8952      	ldrh	r2, [r2, #10]
 8015548:	3a01      	subs	r2, #1
 801554a:	4013      	ands	r3, r2
 801554c:	69ba      	ldr	r2, [r7, #24]
 801554e:	4413      	add	r3, r2
 8015550:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	699b      	ldr	r3, [r3, #24]
 8015556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801555a:	2b00      	cmp	r3, #0
 801555c:	f000 8175 	beq.w	801584a <f_lseek+0x48c>
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	6a1b      	ldr	r3, [r3, #32]
 8015564:	69ba      	ldr	r2, [r7, #24]
 8015566:	429a      	cmp	r2, r3
 8015568:	f000 816f 	beq.w	801584a <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	7d1b      	ldrb	r3, [r3, #20]
 8015570:	b25b      	sxtb	r3, r3
 8015572:	2b00      	cmp	r3, #0
 8015574:	da1d      	bge.n	80155b2 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015576:	68bb      	ldr	r3, [r7, #8]
 8015578:	7858      	ldrb	r0, [r3, #1]
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	6a1a      	ldr	r2, [r3, #32]
 8015584:	2301      	movs	r3, #1
 8015586:	f7fd fcaf 	bl	8012ee8 <disk_write>
 801558a:	4603      	mov	r3, r0
 801558c:	2b00      	cmp	r3, #0
 801558e:	d009      	beq.n	80155a4 <f_lseek+0x1e6>
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	2201      	movs	r2, #1
 8015594:	755a      	strb	r2, [r3, #21]
 8015596:	68bb      	ldr	r3, [r7, #8]
 8015598:	2101      	movs	r1, #1
 801559a:	4618      	mov	r0, r3
 801559c:	f7fd fdf8 	bl	8013190 <unlock_fs>
 80155a0:	2301      	movs	r3, #1
 80155a2:	e15b      	b.n	801585c <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	7d1b      	ldrb	r3, [r3, #20]
 80155a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80155ac:	b2da      	uxtb	r2, r3
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80155b2:	68bb      	ldr	r3, [r7, #8]
 80155b4:	7858      	ldrb	r0, [r3, #1]
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80155bc:	2301      	movs	r3, #1
 80155be:	69ba      	ldr	r2, [r7, #24]
 80155c0:	f7fd fc72 	bl	8012ea8 <disk_read>
 80155c4:	4603      	mov	r3, r0
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d009      	beq.n	80155de <f_lseek+0x220>
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	2201      	movs	r2, #1
 80155ce:	755a      	strb	r2, [r3, #21]
 80155d0:	68bb      	ldr	r3, [r7, #8]
 80155d2:	2101      	movs	r1, #1
 80155d4:	4618      	mov	r0, r3
 80155d6:	f7fd fddb 	bl	8013190 <unlock_fs>
 80155da:	2301      	movs	r3, #1
 80155dc:	e13e      	b.n	801585c <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	69ba      	ldr	r2, [r7, #24]
 80155e2:	621a      	str	r2, [r3, #32]
 80155e4:	e131      	b.n	801584a <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	68db      	ldr	r3, [r3, #12]
 80155ea:	683a      	ldr	r2, [r7, #0]
 80155ec:	429a      	cmp	r2, r3
 80155ee:	d908      	bls.n	8015602 <f_lseek+0x244>
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	7d1b      	ldrb	r3, [r3, #20]
 80155f4:	f003 0302 	and.w	r3, r3, #2
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d102      	bne.n	8015602 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	68db      	ldr	r3, [r3, #12]
 8015600:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	699b      	ldr	r3, [r3, #24]
 8015606:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8015608:	2300      	movs	r3, #0
 801560a:	637b      	str	r3, [r7, #52]	; 0x34
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015610:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8015612:	683b      	ldr	r3, [r7, #0]
 8015614:	2b00      	cmp	r3, #0
 8015616:	f000 80c0 	beq.w	801579a <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801561a:	68bb      	ldr	r3, [r7, #8]
 801561c:	895b      	ldrh	r3, [r3, #10]
 801561e:	025b      	lsls	r3, r3, #9
 8015620:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8015622:	6a3b      	ldr	r3, [r7, #32]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d01b      	beq.n	8015660 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8015628:	683b      	ldr	r3, [r7, #0]
 801562a:	1e5a      	subs	r2, r3, #1
 801562c:	69fb      	ldr	r3, [r7, #28]
 801562e:	fbb2 f2f3 	udiv	r2, r2, r3
 8015632:	6a3b      	ldr	r3, [r7, #32]
 8015634:	1e59      	subs	r1, r3, #1
 8015636:	69fb      	ldr	r3, [r7, #28]
 8015638:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801563c:	429a      	cmp	r2, r3
 801563e:	d30f      	bcc.n	8015660 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8015640:	6a3b      	ldr	r3, [r7, #32]
 8015642:	1e5a      	subs	r2, r3, #1
 8015644:	69fb      	ldr	r3, [r7, #28]
 8015646:	425b      	negs	r3, r3
 8015648:	401a      	ands	r2, r3
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	699b      	ldr	r3, [r3, #24]
 8015652:	683a      	ldr	r2, [r7, #0]
 8015654:	1ad3      	subs	r3, r2, r3
 8015656:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	69db      	ldr	r3, [r3, #28]
 801565c:	63bb      	str	r3, [r7, #56]	; 0x38
 801565e:	e02c      	b.n	80156ba <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	689b      	ldr	r3, [r3, #8]
 8015664:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8015666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015668:	2b00      	cmp	r3, #0
 801566a:	d123      	bne.n	80156b4 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	2100      	movs	r1, #0
 8015670:	4618      	mov	r0, r3
 8015672:	f7fe fa0d 	bl	8013a90 <create_chain>
 8015676:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801567a:	2b01      	cmp	r3, #1
 801567c:	d109      	bne.n	8015692 <f_lseek+0x2d4>
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	2202      	movs	r2, #2
 8015682:	755a      	strb	r2, [r3, #21]
 8015684:	68bb      	ldr	r3, [r7, #8]
 8015686:	2102      	movs	r1, #2
 8015688:	4618      	mov	r0, r3
 801568a:	f7fd fd81 	bl	8013190 <unlock_fs>
 801568e:	2302      	movs	r3, #2
 8015690:	e0e4      	b.n	801585c <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015698:	d109      	bne.n	80156ae <f_lseek+0x2f0>
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	2201      	movs	r2, #1
 801569e:	755a      	strb	r2, [r3, #21]
 80156a0:	68bb      	ldr	r3, [r7, #8]
 80156a2:	2101      	movs	r1, #1
 80156a4:	4618      	mov	r0, r3
 80156a6:	f7fd fd73 	bl	8013190 <unlock_fs>
 80156aa:	2301      	movs	r3, #1
 80156ac:	e0d6      	b.n	801585c <f_lseek+0x49e>
					fp->obj.sclust = clst;
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80156b2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80156b8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80156ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d06c      	beq.n	801579a <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 80156c0:	e044      	b.n	801574c <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 80156c2:	683a      	ldr	r2, [r7, #0]
 80156c4:	69fb      	ldr	r3, [r7, #28]
 80156c6:	1ad3      	subs	r3, r2, r3
 80156c8:	603b      	str	r3, [r7, #0]
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	699a      	ldr	r2, [r3, #24]
 80156ce:	69fb      	ldr	r3, [r7, #28]
 80156d0:	441a      	add	r2, r3
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	7d1b      	ldrb	r3, [r3, #20]
 80156da:	f003 0302 	and.w	r3, r3, #2
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d00b      	beq.n	80156fa <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80156e6:	4618      	mov	r0, r3
 80156e8:	f7fe f9d2 	bl	8013a90 <create_chain>
 80156ec:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80156ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d108      	bne.n	8015706 <f_lseek+0x348>
							ofs = 0; break;
 80156f4:	2300      	movs	r3, #0
 80156f6:	603b      	str	r3, [r7, #0]
 80156f8:	e02c      	b.n	8015754 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80156fe:	4618      	mov	r0, r3
 8015700:	f7fd ffcd 	bl	801369e <get_fat>
 8015704:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015708:	f1b3 3fff 	cmp.w	r3, #4294967295
 801570c:	d109      	bne.n	8015722 <f_lseek+0x364>
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	2201      	movs	r2, #1
 8015712:	755a      	strb	r2, [r3, #21]
 8015714:	68bb      	ldr	r3, [r7, #8]
 8015716:	2101      	movs	r1, #1
 8015718:	4618      	mov	r0, r3
 801571a:	f7fd fd39 	bl	8013190 <unlock_fs>
 801571e:	2301      	movs	r3, #1
 8015720:	e09c      	b.n	801585c <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8015722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015724:	2b01      	cmp	r3, #1
 8015726:	d904      	bls.n	8015732 <f_lseek+0x374>
 8015728:	68bb      	ldr	r3, [r7, #8]
 801572a:	699b      	ldr	r3, [r3, #24]
 801572c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801572e:	429a      	cmp	r2, r3
 8015730:	d309      	bcc.n	8015746 <f_lseek+0x388>
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	2202      	movs	r2, #2
 8015736:	755a      	strb	r2, [r3, #21]
 8015738:	68bb      	ldr	r3, [r7, #8]
 801573a:	2102      	movs	r1, #2
 801573c:	4618      	mov	r0, r3
 801573e:	f7fd fd27 	bl	8013190 <unlock_fs>
 8015742:	2302      	movs	r3, #2
 8015744:	e08a      	b.n	801585c <f_lseek+0x49e>
					fp->clust = clst;
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801574a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801574c:	683a      	ldr	r2, [r7, #0]
 801574e:	69fb      	ldr	r3, [r7, #28]
 8015750:	429a      	cmp	r2, r3
 8015752:	d8b6      	bhi.n	80156c2 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	699a      	ldr	r2, [r3, #24]
 8015758:	683b      	ldr	r3, [r7, #0]
 801575a:	441a      	add	r2, r3
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8015760:	683b      	ldr	r3, [r7, #0]
 8015762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015766:	2b00      	cmp	r3, #0
 8015768:	d017      	beq.n	801579a <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801576a:	68bb      	ldr	r3, [r7, #8]
 801576c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801576e:	4618      	mov	r0, r3
 8015770:	f7fd ff76 	bl	8013660 <clust2sect>
 8015774:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8015776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015778:	2b00      	cmp	r3, #0
 801577a:	d109      	bne.n	8015790 <f_lseek+0x3d2>
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	2202      	movs	r2, #2
 8015780:	755a      	strb	r2, [r3, #21]
 8015782:	68bb      	ldr	r3, [r7, #8]
 8015784:	2102      	movs	r1, #2
 8015786:	4618      	mov	r0, r3
 8015788:	f7fd fd02 	bl	8013190 <unlock_fs>
 801578c:	2302      	movs	r3, #2
 801578e:	e065      	b.n	801585c <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8015790:	683b      	ldr	r3, [r7, #0]
 8015792:	0a5b      	lsrs	r3, r3, #9
 8015794:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015796:	4413      	add	r3, r2
 8015798:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	699a      	ldr	r2, [r3, #24]
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	68db      	ldr	r3, [r3, #12]
 80157a2:	429a      	cmp	r2, r3
 80157a4:	d90a      	bls.n	80157bc <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	699a      	ldr	r2, [r3, #24]
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	7d1b      	ldrb	r3, [r3, #20]
 80157b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80157b6:	b2da      	uxtb	r2, r3
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	699b      	ldr	r3, [r3, #24]
 80157c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d040      	beq.n	801584a <f_lseek+0x48c>
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	6a1b      	ldr	r3, [r3, #32]
 80157cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80157ce:	429a      	cmp	r2, r3
 80157d0:	d03b      	beq.n	801584a <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	7d1b      	ldrb	r3, [r3, #20]
 80157d6:	b25b      	sxtb	r3, r3
 80157d8:	2b00      	cmp	r3, #0
 80157da:	da1d      	bge.n	8015818 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80157dc:	68bb      	ldr	r3, [r7, #8]
 80157de:	7858      	ldrb	r0, [r3, #1]
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	6a1a      	ldr	r2, [r3, #32]
 80157ea:	2301      	movs	r3, #1
 80157ec:	f7fd fb7c 	bl	8012ee8 <disk_write>
 80157f0:	4603      	mov	r3, r0
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d009      	beq.n	801580a <f_lseek+0x44c>
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	2201      	movs	r2, #1
 80157fa:	755a      	strb	r2, [r3, #21]
 80157fc:	68bb      	ldr	r3, [r7, #8]
 80157fe:	2101      	movs	r1, #1
 8015800:	4618      	mov	r0, r3
 8015802:	f7fd fcc5 	bl	8013190 <unlock_fs>
 8015806:	2301      	movs	r3, #1
 8015808:	e028      	b.n	801585c <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	7d1b      	ldrb	r3, [r3, #20]
 801580e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015812:	b2da      	uxtb	r2, r3
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8015818:	68bb      	ldr	r3, [r7, #8]
 801581a:	7858      	ldrb	r0, [r3, #1]
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015822:	2301      	movs	r3, #1
 8015824:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015826:	f7fd fb3f 	bl	8012ea8 <disk_read>
 801582a:	4603      	mov	r3, r0
 801582c:	2b00      	cmp	r3, #0
 801582e:	d009      	beq.n	8015844 <f_lseek+0x486>
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	2201      	movs	r2, #1
 8015834:	755a      	strb	r2, [r3, #21]
 8015836:	68bb      	ldr	r3, [r7, #8]
 8015838:	2101      	movs	r1, #1
 801583a:	4618      	mov	r0, r3
 801583c:	f7fd fca8 	bl	8013190 <unlock_fs>
 8015840:	2301      	movs	r3, #1
 8015842:	e00b      	b.n	801585c <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015848:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801584a:	68bb      	ldr	r3, [r7, #8]
 801584c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8015850:	4611      	mov	r1, r2
 8015852:	4618      	mov	r0, r3
 8015854:	f7fd fc9c 	bl	8013190 <unlock_fs>
 8015858:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801585c:	4618      	mov	r0, r3
 801585e:	3740      	adds	r7, #64	; 0x40
 8015860:	46bd      	mov	sp, r7
 8015862:	bd80      	pop	{r7, pc}

08015864 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8015864:	b580      	push	{r7, lr}
 8015866:	b086      	sub	sp, #24
 8015868:	af00      	add	r7, sp, #0
 801586a:	6078      	str	r0, [r7, #4]
 801586c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d101      	bne.n	8015878 <f_opendir+0x14>
 8015874:	2309      	movs	r3, #9
 8015876:	e06a      	b.n	801594e <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801587c:	f107 010c 	add.w	r1, r7, #12
 8015880:	463b      	mov	r3, r7
 8015882:	2200      	movs	r2, #0
 8015884:	4618      	mov	r0, r3
 8015886:	f7fe fe79 	bl	801457c <find_volume>
 801588a:	4603      	mov	r3, r0
 801588c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801588e:	7dfb      	ldrb	r3, [r7, #23]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d14f      	bne.n	8015934 <f_opendir+0xd0>
		obj->fs = fs;
 8015894:	68fa      	ldr	r2, [r7, #12]
 8015896:	693b      	ldr	r3, [r7, #16]
 8015898:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801589a:	683b      	ldr	r3, [r7, #0]
 801589c:	4619      	mov	r1, r3
 801589e:	6878      	ldr	r0, [r7, #4]
 80158a0:	f7fe fd60 	bl	8014364 <follow_path>
 80158a4:	4603      	mov	r3, r0
 80158a6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80158a8:	7dfb      	ldrb	r3, [r7, #23]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d13d      	bne.n	801592a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80158b4:	b25b      	sxtb	r3, r3
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	db12      	blt.n	80158e0 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80158ba:	693b      	ldr	r3, [r7, #16]
 80158bc:	799b      	ldrb	r3, [r3, #6]
 80158be:	f003 0310 	and.w	r3, r3, #16
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d00a      	beq.n	80158dc <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80158c6:	68fa      	ldr	r2, [r7, #12]
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	6a1b      	ldr	r3, [r3, #32]
 80158cc:	4619      	mov	r1, r3
 80158ce:	4610      	mov	r0, r2
 80158d0:	f7fe fb31 	bl	8013f36 <ld_clust>
 80158d4:	4602      	mov	r2, r0
 80158d6:	693b      	ldr	r3, [r7, #16]
 80158d8:	609a      	str	r2, [r3, #8]
 80158da:	e001      	b.n	80158e0 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80158dc:	2305      	movs	r3, #5
 80158de:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80158e0:	7dfb      	ldrb	r3, [r7, #23]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d121      	bne.n	801592a <f_opendir+0xc6>
				obj->id = fs->id;
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	88da      	ldrh	r2, [r3, #6]
 80158ea:	693b      	ldr	r3, [r7, #16]
 80158ec:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80158ee:	2100      	movs	r1, #0
 80158f0:	6878      	ldr	r0, [r7, #4]
 80158f2:	f7fe f999 	bl	8013c28 <dir_sdi>
 80158f6:	4603      	mov	r3, r0
 80158f8:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80158fa:	7dfb      	ldrb	r3, [r7, #23]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d114      	bne.n	801592a <f_opendir+0xc6>
					if (obj->sclust) {
 8015900:	693b      	ldr	r3, [r7, #16]
 8015902:	689b      	ldr	r3, [r3, #8]
 8015904:	2b00      	cmp	r3, #0
 8015906:	d00d      	beq.n	8015924 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8015908:	2100      	movs	r1, #0
 801590a:	6878      	ldr	r0, [r7, #4]
 801590c:	f7fd fcda 	bl	80132c4 <inc_lock>
 8015910:	4602      	mov	r2, r0
 8015912:	693b      	ldr	r3, [r7, #16]
 8015914:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8015916:	693b      	ldr	r3, [r7, #16]
 8015918:	691b      	ldr	r3, [r3, #16]
 801591a:	2b00      	cmp	r3, #0
 801591c:	d105      	bne.n	801592a <f_opendir+0xc6>
 801591e:	2312      	movs	r3, #18
 8015920:	75fb      	strb	r3, [r7, #23]
 8015922:	e002      	b.n	801592a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8015924:	693b      	ldr	r3, [r7, #16]
 8015926:	2200      	movs	r2, #0
 8015928:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801592a:	7dfb      	ldrb	r3, [r7, #23]
 801592c:	2b04      	cmp	r3, #4
 801592e:	d101      	bne.n	8015934 <f_opendir+0xd0>
 8015930:	2305      	movs	r3, #5
 8015932:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8015934:	7dfb      	ldrb	r3, [r7, #23]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d002      	beq.n	8015940 <f_opendir+0xdc>
 801593a:	693b      	ldr	r3, [r7, #16]
 801593c:	2200      	movs	r2, #0
 801593e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015940:	68fb      	ldr	r3, [r7, #12]
 8015942:	7dfa      	ldrb	r2, [r7, #23]
 8015944:	4611      	mov	r1, r2
 8015946:	4618      	mov	r0, r3
 8015948:	f7fd fc22 	bl	8013190 <unlock_fs>
 801594c:	7dfb      	ldrb	r3, [r7, #23]
}
 801594e:	4618      	mov	r0, r3
 8015950:	3718      	adds	r7, #24
 8015952:	46bd      	mov	sp, r7
 8015954:	bd80      	pop	{r7, pc}

08015956 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8015956:	b580      	push	{r7, lr}
 8015958:	b084      	sub	sp, #16
 801595a:	af00      	add	r7, sp, #0
 801595c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	f107 0208 	add.w	r2, r7, #8
 8015964:	4611      	mov	r1, r2
 8015966:	4618      	mov	r0, r3
 8015968:	f7ff f85c 	bl	8014a24 <validate>
 801596c:	4603      	mov	r3, r0
 801596e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015970:	7bfb      	ldrb	r3, [r7, #15]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d115      	bne.n	80159a2 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	691b      	ldr	r3, [r3, #16]
 801597a:	2b00      	cmp	r3, #0
 801597c:	d006      	beq.n	801598c <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	691b      	ldr	r3, [r3, #16]
 8015982:	4618      	mov	r0, r3
 8015984:	f7fd fd2c 	bl	80133e0 <dec_lock>
 8015988:	4603      	mov	r3, r0
 801598a:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801598c:	7bfb      	ldrb	r3, [r7, #15]
 801598e:	2b00      	cmp	r3, #0
 8015990:	d102      	bne.n	8015998 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	2200      	movs	r2, #0
 8015996:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8015998:	68bb      	ldr	r3, [r7, #8]
 801599a:	2100      	movs	r1, #0
 801599c:	4618      	mov	r0, r3
 801599e:	f7fd fbf7 	bl	8013190 <unlock_fs>
#endif
	}
	return res;
 80159a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80159a4:	4618      	mov	r0, r3
 80159a6:	3710      	adds	r7, #16
 80159a8:	46bd      	mov	sp, r7
 80159aa:	bd80      	pop	{r7, pc}

080159ac <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80159ac:	b580      	push	{r7, lr}
 80159ae:	b084      	sub	sp, #16
 80159b0:	af00      	add	r7, sp, #0
 80159b2:	6078      	str	r0, [r7, #4]
 80159b4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	f107 0208 	add.w	r2, r7, #8
 80159bc:	4611      	mov	r1, r2
 80159be:	4618      	mov	r0, r3
 80159c0:	f7ff f830 	bl	8014a24 <validate>
 80159c4:	4603      	mov	r3, r0
 80159c6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80159c8:	7bfb      	ldrb	r3, [r7, #15]
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d126      	bne.n	8015a1c <f_readdir+0x70>
		if (!fno) {
 80159ce:	683b      	ldr	r3, [r7, #0]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d106      	bne.n	80159e2 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80159d4:	2100      	movs	r1, #0
 80159d6:	6878      	ldr	r0, [r7, #4]
 80159d8:	f7fe f926 	bl	8013c28 <dir_sdi>
 80159dc:	4603      	mov	r3, r0
 80159de:	73fb      	strb	r3, [r7, #15]
 80159e0:	e01c      	b.n	8015a1c <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80159e2:	2100      	movs	r1, #0
 80159e4:	6878      	ldr	r0, [r7, #4]
 80159e6:	f7fe fae5 	bl	8013fb4 <dir_read>
 80159ea:	4603      	mov	r3, r0
 80159ec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80159ee:	7bfb      	ldrb	r3, [r7, #15]
 80159f0:	2b04      	cmp	r3, #4
 80159f2:	d101      	bne.n	80159f8 <f_readdir+0x4c>
 80159f4:	2300      	movs	r3, #0
 80159f6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80159f8:	7bfb      	ldrb	r3, [r7, #15]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d10e      	bne.n	8015a1c <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80159fe:	6839      	ldr	r1, [r7, #0]
 8015a00:	6878      	ldr	r0, [r7, #4]
 8015a02:	f7fe fbbb 	bl	801417c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8015a06:	2100      	movs	r1, #0
 8015a08:	6878      	ldr	r0, [r7, #4]
 8015a0a:	f7fe f988 	bl	8013d1e <dir_next>
 8015a0e:	4603      	mov	r3, r0
 8015a10:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8015a12:	7bfb      	ldrb	r3, [r7, #15]
 8015a14:	2b04      	cmp	r3, #4
 8015a16:	d101      	bne.n	8015a1c <f_readdir+0x70>
 8015a18:	2300      	movs	r3, #0
 8015a1a:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8015a1c:	68bb      	ldr	r3, [r7, #8]
 8015a1e:	7bfa      	ldrb	r2, [r7, #15]
 8015a20:	4611      	mov	r1, r2
 8015a22:	4618      	mov	r0, r3
 8015a24:	f7fd fbb4 	bl	8013190 <unlock_fs>
 8015a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	3710      	adds	r7, #16
 8015a2e:	46bd      	mov	sp, r7
 8015a30:	bd80      	pop	{r7, pc}
	...

08015a34 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015a34:	b480      	push	{r7}
 8015a36:	b087      	sub	sp, #28
 8015a38:	af00      	add	r7, sp, #0
 8015a3a:	60f8      	str	r0, [r7, #12]
 8015a3c:	60b9      	str	r1, [r7, #8]
 8015a3e:	4613      	mov	r3, r2
 8015a40:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015a42:	2301      	movs	r3, #1
 8015a44:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015a46:	2300      	movs	r3, #0
 8015a48:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015a4a:	4b1f      	ldr	r3, [pc, #124]	; (8015ac8 <FATFS_LinkDriverEx+0x94>)
 8015a4c:	7a5b      	ldrb	r3, [r3, #9]
 8015a4e:	b2db      	uxtb	r3, r3
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d131      	bne.n	8015ab8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015a54:	4b1c      	ldr	r3, [pc, #112]	; (8015ac8 <FATFS_LinkDriverEx+0x94>)
 8015a56:	7a5b      	ldrb	r3, [r3, #9]
 8015a58:	b2db      	uxtb	r3, r3
 8015a5a:	461a      	mov	r2, r3
 8015a5c:	4b1a      	ldr	r3, [pc, #104]	; (8015ac8 <FATFS_LinkDriverEx+0x94>)
 8015a5e:	2100      	movs	r1, #0
 8015a60:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015a62:	4b19      	ldr	r3, [pc, #100]	; (8015ac8 <FATFS_LinkDriverEx+0x94>)
 8015a64:	7a5b      	ldrb	r3, [r3, #9]
 8015a66:	b2db      	uxtb	r3, r3
 8015a68:	4a17      	ldr	r2, [pc, #92]	; (8015ac8 <FATFS_LinkDriverEx+0x94>)
 8015a6a:	009b      	lsls	r3, r3, #2
 8015a6c:	4413      	add	r3, r2
 8015a6e:	68fa      	ldr	r2, [r7, #12]
 8015a70:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015a72:	4b15      	ldr	r3, [pc, #84]	; (8015ac8 <FATFS_LinkDriverEx+0x94>)
 8015a74:	7a5b      	ldrb	r3, [r3, #9]
 8015a76:	b2db      	uxtb	r3, r3
 8015a78:	461a      	mov	r2, r3
 8015a7a:	4b13      	ldr	r3, [pc, #76]	; (8015ac8 <FATFS_LinkDriverEx+0x94>)
 8015a7c:	4413      	add	r3, r2
 8015a7e:	79fa      	ldrb	r2, [r7, #7]
 8015a80:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015a82:	4b11      	ldr	r3, [pc, #68]	; (8015ac8 <FATFS_LinkDriverEx+0x94>)
 8015a84:	7a5b      	ldrb	r3, [r3, #9]
 8015a86:	b2db      	uxtb	r3, r3
 8015a88:	1c5a      	adds	r2, r3, #1
 8015a8a:	b2d1      	uxtb	r1, r2
 8015a8c:	4a0e      	ldr	r2, [pc, #56]	; (8015ac8 <FATFS_LinkDriverEx+0x94>)
 8015a8e:	7251      	strb	r1, [r2, #9]
 8015a90:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015a92:	7dbb      	ldrb	r3, [r7, #22]
 8015a94:	3330      	adds	r3, #48	; 0x30
 8015a96:	b2da      	uxtb	r2, r3
 8015a98:	68bb      	ldr	r3, [r7, #8]
 8015a9a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015a9c:	68bb      	ldr	r3, [r7, #8]
 8015a9e:	3301      	adds	r3, #1
 8015aa0:	223a      	movs	r2, #58	; 0x3a
 8015aa2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015aa4:	68bb      	ldr	r3, [r7, #8]
 8015aa6:	3302      	adds	r3, #2
 8015aa8:	222f      	movs	r2, #47	; 0x2f
 8015aaa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015aac:	68bb      	ldr	r3, [r7, #8]
 8015aae:	3303      	adds	r3, #3
 8015ab0:	2200      	movs	r2, #0
 8015ab2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8015aba:	4618      	mov	r0, r3
 8015abc:	371c      	adds	r7, #28
 8015abe:	46bd      	mov	sp, r7
 8015ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ac4:	4770      	bx	lr
 8015ac6:	bf00      	nop
 8015ac8:	20000890 	.word	0x20000890

08015acc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015acc:	b580      	push	{r7, lr}
 8015ace:	b082      	sub	sp, #8
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	6078      	str	r0, [r7, #4]
 8015ad4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015ad6:	2200      	movs	r2, #0
 8015ad8:	6839      	ldr	r1, [r7, #0]
 8015ada:	6878      	ldr	r0, [r7, #4]
 8015adc:	f7ff ffaa 	bl	8015a34 <FATFS_LinkDriverEx>
 8015ae0:	4603      	mov	r3, r0
}
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	3708      	adds	r7, #8
 8015ae6:	46bd      	mov	sp, r7
 8015ae8:	bd80      	pop	{r7, pc}

08015aea <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8015aea:	b580      	push	{r7, lr}
 8015aec:	b084      	sub	sp, #16
 8015aee:	af00      	add	r7, sp, #0
 8015af0:	4603      	mov	r3, r0
 8015af2:	6039      	str	r1, [r7, #0]
 8015af4:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8015af6:	2200      	movs	r2, #0
 8015af8:	2101      	movs	r1, #1
 8015afa:	2001      	movs	r0, #1
 8015afc:	f000 fa13 	bl	8015f26 <osSemaphoreNew>
 8015b00:	4602      	mov	r2, r0
 8015b02:	683b      	ldr	r3, [r7, #0]
 8015b04:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8015b06:	683b      	ldr	r3, [r7, #0]
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	bf14      	ite	ne
 8015b0e:	2301      	movne	r3, #1
 8015b10:	2300      	moveq	r3, #0
 8015b12:	b2db      	uxtb	r3, r3
 8015b14:	60fb      	str	r3, [r7, #12]

    return ret;
 8015b16:	68fb      	ldr	r3, [r7, #12]
}
 8015b18:	4618      	mov	r0, r3
 8015b1a:	3710      	adds	r7, #16
 8015b1c:	46bd      	mov	sp, r7
 8015b1e:	bd80      	pop	{r7, pc}

08015b20 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b082      	sub	sp, #8
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8015b28:	6878      	ldr	r0, [r7, #4]
 8015b2a:	f000 fb1b 	bl	8016164 <osSemaphoreDelete>
#endif
    return 1;
 8015b2e:	2301      	movs	r3, #1
}
 8015b30:	4618      	mov	r0, r3
 8015b32:	3708      	adds	r7, #8
 8015b34:	46bd      	mov	sp, r7
 8015b36:	bd80      	pop	{r7, pc}

08015b38 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	b084      	sub	sp, #16
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8015b40:	2300      	movs	r3, #0
 8015b42:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8015b44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015b48:	6878      	ldr	r0, [r7, #4]
 8015b4a:	f000 fa75 	bl	8016038 <osSemaphoreAcquire>
 8015b4e:	4603      	mov	r3, r0
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d101      	bne.n	8015b58 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8015b54:	2301      	movs	r3, #1
 8015b56:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015b58:	68fb      	ldr	r3, [r7, #12]
}
 8015b5a:	4618      	mov	r0, r3
 8015b5c:	3710      	adds	r7, #16
 8015b5e:	46bd      	mov	sp, r7
 8015b60:	bd80      	pop	{r7, pc}

08015b62 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8015b62:	b580      	push	{r7, lr}
 8015b64:	b082      	sub	sp, #8
 8015b66:	af00      	add	r7, sp, #0
 8015b68:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8015b6a:	6878      	ldr	r0, [r7, #4]
 8015b6c:	f000 fab6 	bl	80160dc <osSemaphoreRelease>
#endif
}
 8015b70:	bf00      	nop
 8015b72:	3708      	adds	r7, #8
 8015b74:	46bd      	mov	sp, r7
 8015b76:	bd80      	pop	{r7, pc}

08015b78 <__NVIC_SetPriority>:
{
 8015b78:	b480      	push	{r7}
 8015b7a:	b083      	sub	sp, #12
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	4603      	mov	r3, r0
 8015b80:	6039      	str	r1, [r7, #0]
 8015b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	db0a      	blt.n	8015ba2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015b8c:	683b      	ldr	r3, [r7, #0]
 8015b8e:	b2da      	uxtb	r2, r3
 8015b90:	490c      	ldr	r1, [pc, #48]	; (8015bc4 <__NVIC_SetPriority+0x4c>)
 8015b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015b96:	0112      	lsls	r2, r2, #4
 8015b98:	b2d2      	uxtb	r2, r2
 8015b9a:	440b      	add	r3, r1
 8015b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015ba0:	e00a      	b.n	8015bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015ba2:	683b      	ldr	r3, [r7, #0]
 8015ba4:	b2da      	uxtb	r2, r3
 8015ba6:	4908      	ldr	r1, [pc, #32]	; (8015bc8 <__NVIC_SetPriority+0x50>)
 8015ba8:	79fb      	ldrb	r3, [r7, #7]
 8015baa:	f003 030f 	and.w	r3, r3, #15
 8015bae:	3b04      	subs	r3, #4
 8015bb0:	0112      	lsls	r2, r2, #4
 8015bb2:	b2d2      	uxtb	r2, r2
 8015bb4:	440b      	add	r3, r1
 8015bb6:	761a      	strb	r2, [r3, #24]
}
 8015bb8:	bf00      	nop
 8015bba:	370c      	adds	r7, #12
 8015bbc:	46bd      	mov	sp, r7
 8015bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc2:	4770      	bx	lr
 8015bc4:	e000e100 	.word	0xe000e100
 8015bc8:	e000ed00 	.word	0xe000ed00

08015bcc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8015bcc:	b580      	push	{r7, lr}
 8015bce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8015bd0:	4b05      	ldr	r3, [pc, #20]	; (8015be8 <SysTick_Handler+0x1c>)
 8015bd2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8015bd4:	f002 fba0 	bl	8018318 <xTaskGetSchedulerState>
 8015bd8:	4603      	mov	r3, r0
 8015bda:	2b01      	cmp	r3, #1
 8015bdc:	d001      	beq.n	8015be2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8015bde:	f003 fa8b 	bl	80190f8 <xPortSysTickHandler>
  }
}
 8015be2:	bf00      	nop
 8015be4:	bd80      	pop	{r7, pc}
 8015be6:	bf00      	nop
 8015be8:	e000e010 	.word	0xe000e010

08015bec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8015bec:	b580      	push	{r7, lr}
 8015bee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8015bf0:	2100      	movs	r1, #0
 8015bf2:	f06f 0004 	mvn.w	r0, #4
 8015bf6:	f7ff ffbf 	bl	8015b78 <__NVIC_SetPriority>
#endif
}
 8015bfa:	bf00      	nop
 8015bfc:	bd80      	pop	{r7, pc}
	...

08015c00 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015c00:	b480      	push	{r7}
 8015c02:	b083      	sub	sp, #12
 8015c04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015c06:	f3ef 8305 	mrs	r3, IPSR
 8015c0a:	603b      	str	r3, [r7, #0]
  return(result);
 8015c0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d003      	beq.n	8015c1a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8015c12:	f06f 0305 	mvn.w	r3, #5
 8015c16:	607b      	str	r3, [r7, #4]
 8015c18:	e00c      	b.n	8015c34 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8015c1a:	4b0a      	ldr	r3, [pc, #40]	; (8015c44 <osKernelInitialize+0x44>)
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d105      	bne.n	8015c2e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8015c22:	4b08      	ldr	r3, [pc, #32]	; (8015c44 <osKernelInitialize+0x44>)
 8015c24:	2201      	movs	r2, #1
 8015c26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015c28:	2300      	movs	r3, #0
 8015c2a:	607b      	str	r3, [r7, #4]
 8015c2c:	e002      	b.n	8015c34 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8015c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8015c32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015c34:	687b      	ldr	r3, [r7, #4]
}
 8015c36:	4618      	mov	r0, r3
 8015c38:	370c      	adds	r7, #12
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c40:	4770      	bx	lr
 8015c42:	bf00      	nop
 8015c44:	2000089c 	.word	0x2000089c

08015c48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	b082      	sub	sp, #8
 8015c4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015c4e:	f3ef 8305 	mrs	r3, IPSR
 8015c52:	603b      	str	r3, [r7, #0]
  return(result);
 8015c54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d003      	beq.n	8015c62 <osKernelStart+0x1a>
    stat = osErrorISR;
 8015c5a:	f06f 0305 	mvn.w	r3, #5
 8015c5e:	607b      	str	r3, [r7, #4]
 8015c60:	e010      	b.n	8015c84 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8015c62:	4b0b      	ldr	r3, [pc, #44]	; (8015c90 <osKernelStart+0x48>)
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	2b01      	cmp	r3, #1
 8015c68:	d109      	bne.n	8015c7e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8015c6a:	f7ff ffbf 	bl	8015bec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015c6e:	4b08      	ldr	r3, [pc, #32]	; (8015c90 <osKernelStart+0x48>)
 8015c70:	2202      	movs	r2, #2
 8015c72:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015c74:	f001 fee4 	bl	8017a40 <vTaskStartScheduler>
      stat = osOK;
 8015c78:	2300      	movs	r3, #0
 8015c7a:	607b      	str	r3, [r7, #4]
 8015c7c:	e002      	b.n	8015c84 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8015c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8015c82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015c84:	687b      	ldr	r3, [r7, #4]
}
 8015c86:	4618      	mov	r0, r3
 8015c88:	3708      	adds	r7, #8
 8015c8a:	46bd      	mov	sp, r7
 8015c8c:	bd80      	pop	{r7, pc}
 8015c8e:	bf00      	nop
 8015c90:	2000089c 	.word	0x2000089c

08015c94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015c94:	b580      	push	{r7, lr}
 8015c96:	b08e      	sub	sp, #56	; 0x38
 8015c98:	af04      	add	r7, sp, #16
 8015c9a:	60f8      	str	r0, [r7, #12]
 8015c9c:	60b9      	str	r1, [r7, #8]
 8015c9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015ca0:	2300      	movs	r3, #0
 8015ca2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015ca4:	f3ef 8305 	mrs	r3, IPSR
 8015ca8:	617b      	str	r3, [r7, #20]
  return(result);
 8015caa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d17f      	bne.n	8015db0 <osThreadNew+0x11c>
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d07c      	beq.n	8015db0 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8015cb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015cba:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8015cbc:	2318      	movs	r3, #24
 8015cbe:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8015cc0:	2300      	movs	r3, #0
 8015cc2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8015cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8015cc8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d045      	beq.n	8015d5c <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d002      	beq.n	8015cde <osThreadNew+0x4a>
        name = attr->name;
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	699b      	ldr	r3, [r3, #24]
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d002      	beq.n	8015cec <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	699b      	ldr	r3, [r3, #24]
 8015cea:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8015cec:	69fb      	ldr	r3, [r7, #28]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d008      	beq.n	8015d04 <osThreadNew+0x70>
 8015cf2:	69fb      	ldr	r3, [r7, #28]
 8015cf4:	2b38      	cmp	r3, #56	; 0x38
 8015cf6:	d805      	bhi.n	8015d04 <osThreadNew+0x70>
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	685b      	ldr	r3, [r3, #4]
 8015cfc:	f003 0301 	and.w	r3, r3, #1
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d001      	beq.n	8015d08 <osThreadNew+0x74>
        return (NULL);
 8015d04:	2300      	movs	r3, #0
 8015d06:	e054      	b.n	8015db2 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	695b      	ldr	r3, [r3, #20]
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d003      	beq.n	8015d18 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	695b      	ldr	r3, [r3, #20]
 8015d14:	089b      	lsrs	r3, r3, #2
 8015d16:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	689b      	ldr	r3, [r3, #8]
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d00e      	beq.n	8015d3e <osThreadNew+0xaa>
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	68db      	ldr	r3, [r3, #12]
 8015d24:	2bbb      	cmp	r3, #187	; 0xbb
 8015d26:	d90a      	bls.n	8015d3e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d006      	beq.n	8015d3e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	695b      	ldr	r3, [r3, #20]
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d002      	beq.n	8015d3e <osThreadNew+0xaa>
        mem = 1;
 8015d38:	2301      	movs	r3, #1
 8015d3a:	61bb      	str	r3, [r7, #24]
 8015d3c:	e010      	b.n	8015d60 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	689b      	ldr	r3, [r3, #8]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d10c      	bne.n	8015d60 <osThreadNew+0xcc>
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	68db      	ldr	r3, [r3, #12]
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d108      	bne.n	8015d60 <osThreadNew+0xcc>
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	691b      	ldr	r3, [r3, #16]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d104      	bne.n	8015d60 <osThreadNew+0xcc>
          mem = 0;
 8015d56:	2300      	movs	r3, #0
 8015d58:	61bb      	str	r3, [r7, #24]
 8015d5a:	e001      	b.n	8015d60 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8015d5c:	2300      	movs	r3, #0
 8015d5e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015d60:	69bb      	ldr	r3, [r7, #24]
 8015d62:	2b01      	cmp	r3, #1
 8015d64:	d110      	bne.n	8015d88 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8015d6a:	687a      	ldr	r2, [r7, #4]
 8015d6c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015d6e:	9202      	str	r2, [sp, #8]
 8015d70:	9301      	str	r3, [sp, #4]
 8015d72:	69fb      	ldr	r3, [r7, #28]
 8015d74:	9300      	str	r3, [sp, #0]
 8015d76:	68bb      	ldr	r3, [r7, #8]
 8015d78:	6a3a      	ldr	r2, [r7, #32]
 8015d7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015d7c:	68f8      	ldr	r0, [r7, #12]
 8015d7e:	f001 fb0b 	bl	8017398 <xTaskCreateStatic>
 8015d82:	4603      	mov	r3, r0
 8015d84:	613b      	str	r3, [r7, #16]
 8015d86:	e013      	b.n	8015db0 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8015d88:	69bb      	ldr	r3, [r7, #24]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d110      	bne.n	8015db0 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8015d8e:	6a3b      	ldr	r3, [r7, #32]
 8015d90:	b29a      	uxth	r2, r3
 8015d92:	f107 0310 	add.w	r3, r7, #16
 8015d96:	9301      	str	r3, [sp, #4]
 8015d98:	69fb      	ldr	r3, [r7, #28]
 8015d9a:	9300      	str	r3, [sp, #0]
 8015d9c:	68bb      	ldr	r3, [r7, #8]
 8015d9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015da0:	68f8      	ldr	r0, [r7, #12]
 8015da2:	f001 fb56 	bl	8017452 <xTaskCreate>
 8015da6:	4603      	mov	r3, r0
 8015da8:	2b01      	cmp	r3, #1
 8015daa:	d001      	beq.n	8015db0 <osThreadNew+0x11c>
            hTask = NULL;
 8015dac:	2300      	movs	r3, #0
 8015dae:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8015db0:	693b      	ldr	r3, [r7, #16]
}
 8015db2:	4618      	mov	r0, r3
 8015db4:	3728      	adds	r7, #40	; 0x28
 8015db6:	46bd      	mov	sp, r7
 8015db8:	bd80      	pop	{r7, pc}

08015dba <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8015dba:	b580      	push	{r7, lr}
 8015dbc:	b082      	sub	sp, #8
 8015dbe:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8015dc0:	f002 fa9a 	bl	80182f8 <xTaskGetCurrentTaskHandle>
 8015dc4:	6078      	str	r0, [r7, #4]

  return (id);
 8015dc6:	687b      	ldr	r3, [r7, #4]
}
 8015dc8:	4618      	mov	r0, r3
 8015dca:	3708      	adds	r7, #8
 8015dcc:	46bd      	mov	sp, r7
 8015dce:	bd80      	pop	{r7, pc}

08015dd0 <osThreadGetState>:

osThreadState_t osThreadGetState (osThreadId_t thread_id) {
 8015dd0:	b580      	push	{r7, lr}
 8015dd2:	b086      	sub	sp, #24
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015ddc:	f3ef 8305 	mrs	r3, IPSR
 8015de0:	60fb      	str	r3, [r7, #12]
  return(result);
 8015de2:	68fb      	ldr	r3, [r7, #12]
  osThreadState_t state;

  if (IS_IRQ() || (hTask == NULL)) {
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d102      	bne.n	8015dee <osThreadGetState+0x1e>
 8015de8:	693b      	ldr	r3, [r7, #16]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d103      	bne.n	8015df6 <osThreadGetState+0x26>
    state = osThreadError;
 8015dee:	f04f 33ff 	mov.w	r3, #4294967295
 8015df2:	617b      	str	r3, [r7, #20]
 8015df4:	e022      	b.n	8015e3c <osThreadGetState+0x6c>
  }
  else {
    switch (eTaskGetState (hTask)) {
 8015df6:	6938      	ldr	r0, [r7, #16]
 8015df8:	f001 fd2c 	bl	8017854 <eTaskGetState>
 8015dfc:	4603      	mov	r3, r0
 8015dfe:	2b04      	cmp	r3, #4
 8015e00:	d818      	bhi.n	8015e34 <osThreadGetState+0x64>
 8015e02:	a201      	add	r2, pc, #4	; (adr r2, 8015e08 <osThreadGetState+0x38>)
 8015e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e08:	08015e1d 	.word	0x08015e1d
 8015e0c:	08015e23 	.word	0x08015e23
 8015e10:	08015e29 	.word	0x08015e29
 8015e14:	08015e29 	.word	0x08015e29
 8015e18:	08015e2f 	.word	0x08015e2f
      case eRunning:   state = osThreadRunning;    break;
 8015e1c:	2302      	movs	r3, #2
 8015e1e:	617b      	str	r3, [r7, #20]
 8015e20:	e00c      	b.n	8015e3c <osThreadGetState+0x6c>
      case eReady:     state = osThreadReady;      break;
 8015e22:	2301      	movs	r3, #1
 8015e24:	617b      	str	r3, [r7, #20]
 8015e26:	e009      	b.n	8015e3c <osThreadGetState+0x6c>
      case eBlocked:
      case eSuspended: state = osThreadBlocked;    break;
 8015e28:	2303      	movs	r3, #3
 8015e2a:	617b      	str	r3, [r7, #20]
 8015e2c:	e006      	b.n	8015e3c <osThreadGetState+0x6c>
      case eDeleted:   state = osThreadTerminated; break;
 8015e2e:	2304      	movs	r3, #4
 8015e30:	617b      	str	r3, [r7, #20]
 8015e32:	e003      	b.n	8015e3c <osThreadGetState+0x6c>
      case eInvalid:
      default:         state = osThreadError;      break;
 8015e34:	f04f 33ff 	mov.w	r3, #4294967295
 8015e38:	617b      	str	r3, [r7, #20]
 8015e3a:	bf00      	nop
    }
  }

  return (state);
 8015e3c:	697b      	ldr	r3, [r7, #20]
}
 8015e3e:	4618      	mov	r0, r3
 8015e40:	3718      	adds	r7, #24
 8015e42:	46bd      	mov	sp, r7
 8015e44:	bd80      	pop	{r7, pc}
 8015e46:	bf00      	nop

08015e48 <osThreadResume>:
  }

  return (stat);
}

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b086      	sub	sp, #24
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015e54:	f3ef 8305 	mrs	r3, IPSR
 8015e58:	60fb      	str	r3, [r7, #12]
  return(result);
 8015e5a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d003      	beq.n	8015e68 <osThreadResume+0x20>
    stat = osErrorISR;
 8015e60:	f06f 0305 	mvn.w	r3, #5
 8015e64:	617b      	str	r3, [r7, #20]
 8015e66:	e00b      	b.n	8015e80 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8015e68:	693b      	ldr	r3, [r7, #16]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d103      	bne.n	8015e76 <osThreadResume+0x2e>
    stat = osErrorParameter;
 8015e6e:	f06f 0303 	mvn.w	r3, #3
 8015e72:	617b      	str	r3, [r7, #20]
 8015e74:	e004      	b.n	8015e80 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8015e76:	2300      	movs	r3, #0
 8015e78:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8015e7a:	6938      	ldr	r0, [r7, #16]
 8015e7c:	f001 fd82 	bl	8017984 <vTaskResume>
  }

  return (stat);
 8015e80:	697b      	ldr	r3, [r7, #20]
}
 8015e82:	4618      	mov	r0, r3
 8015e84:	3718      	adds	r7, #24
 8015e86:	46bd      	mov	sp, r7
 8015e88:	bd80      	pop	{r7, pc}

08015e8a <osThreadExit>:
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8015e8a:	b580      	push	{r7, lr}
 8015e8c:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8015e8e:	2000      	movs	r0, #0
 8015e90:	f001 fc3a 	bl	8017708 <vTaskDelete>
#endif
  for (;;);
 8015e94:	e7fe      	b.n	8015e94 <osThreadExit+0xa>

08015e96 <osThreadTerminate>:
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8015e96:	b580      	push	{r7, lr}
 8015e98:	b086      	sub	sp, #24
 8015e9a:	af00      	add	r7, sp, #0
 8015e9c:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015ea2:	f3ef 8305 	mrs	r3, IPSR
 8015ea6:	60bb      	str	r3, [r7, #8]
  return(result);
 8015ea8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d003      	beq.n	8015eb6 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8015eae:	f06f 0305 	mvn.w	r3, #5
 8015eb2:	617b      	str	r3, [r7, #20]
 8015eb4:	e017      	b.n	8015ee6 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8015eb6:	693b      	ldr	r3, [r7, #16]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d103      	bne.n	8015ec4 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8015ebc:	f06f 0303 	mvn.w	r3, #3
 8015ec0:	617b      	str	r3, [r7, #20]
 8015ec2:	e010      	b.n	8015ee6 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8015ec4:	6938      	ldr	r0, [r7, #16]
 8015ec6:	f001 fcc5 	bl	8017854 <eTaskGetState>
 8015eca:	4603      	mov	r3, r0
 8015ecc:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8015ece:	7bfb      	ldrb	r3, [r7, #15]
 8015ed0:	2b04      	cmp	r3, #4
 8015ed2:	d005      	beq.n	8015ee0 <osThreadTerminate+0x4a>
      stat = osOK;
 8015ed4:	2300      	movs	r3, #0
 8015ed6:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8015ed8:	6938      	ldr	r0, [r7, #16]
 8015eda:	f001 fc15 	bl	8017708 <vTaskDelete>
 8015ede:	e002      	b.n	8015ee6 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8015ee0:	f06f 0302 	mvn.w	r3, #2
 8015ee4:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8015ee6:	697b      	ldr	r3, [r7, #20]
}
 8015ee8:	4618      	mov	r0, r3
 8015eea:	3718      	adds	r7, #24
 8015eec:	46bd      	mov	sp, r7
 8015eee:	bd80      	pop	{r7, pc}

08015ef0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8015ef0:	b580      	push	{r7, lr}
 8015ef2:	b084      	sub	sp, #16
 8015ef4:	af00      	add	r7, sp, #0
 8015ef6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015ef8:	f3ef 8305 	mrs	r3, IPSR
 8015efc:	60bb      	str	r3, [r7, #8]
  return(result);
 8015efe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d003      	beq.n	8015f0c <osDelay+0x1c>
    stat = osErrorISR;
 8015f04:	f06f 0305 	mvn.w	r3, #5
 8015f08:	60fb      	str	r3, [r7, #12]
 8015f0a:	e007      	b.n	8015f1c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d002      	beq.n	8015f1c <osDelay+0x2c>
      vTaskDelay(ticks);
 8015f16:	6878      	ldr	r0, [r7, #4]
 8015f18:	f001 fc68 	bl	80177ec <vTaskDelay>
    }
  }

  return (stat);
 8015f1c:	68fb      	ldr	r3, [r7, #12]
}
 8015f1e:	4618      	mov	r0, r3
 8015f20:	3710      	adds	r7, #16
 8015f22:	46bd      	mov	sp, r7
 8015f24:	bd80      	pop	{r7, pc}

08015f26 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8015f26:	b580      	push	{r7, lr}
 8015f28:	b08a      	sub	sp, #40	; 0x28
 8015f2a:	af02      	add	r7, sp, #8
 8015f2c:	60f8      	str	r0, [r7, #12]
 8015f2e:	60b9      	str	r1, [r7, #8]
 8015f30:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8015f32:	2300      	movs	r3, #0
 8015f34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015f36:	f3ef 8305 	mrs	r3, IPSR
 8015f3a:	613b      	str	r3, [r7, #16]
  return(result);
 8015f3c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d175      	bne.n	801602e <osSemaphoreNew+0x108>
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d072      	beq.n	801602e <osSemaphoreNew+0x108>
 8015f48:	68ba      	ldr	r2, [r7, #8]
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	429a      	cmp	r2, r3
 8015f4e:	d86e      	bhi.n	801602e <osSemaphoreNew+0x108>
    mem = -1;
 8015f50:	f04f 33ff 	mov.w	r3, #4294967295
 8015f54:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d015      	beq.n	8015f88 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	689b      	ldr	r3, [r3, #8]
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d006      	beq.n	8015f72 <osSemaphoreNew+0x4c>
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	68db      	ldr	r3, [r3, #12]
 8015f68:	2b4f      	cmp	r3, #79	; 0x4f
 8015f6a:	d902      	bls.n	8015f72 <osSemaphoreNew+0x4c>
        mem = 1;
 8015f6c:	2301      	movs	r3, #1
 8015f6e:	61bb      	str	r3, [r7, #24]
 8015f70:	e00c      	b.n	8015f8c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	689b      	ldr	r3, [r3, #8]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d108      	bne.n	8015f8c <osSemaphoreNew+0x66>
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	68db      	ldr	r3, [r3, #12]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d104      	bne.n	8015f8c <osSemaphoreNew+0x66>
          mem = 0;
 8015f82:	2300      	movs	r3, #0
 8015f84:	61bb      	str	r3, [r7, #24]
 8015f86:	e001      	b.n	8015f8c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8015f88:	2300      	movs	r3, #0
 8015f8a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8015f8c:	69bb      	ldr	r3, [r7, #24]
 8015f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f92:	d04c      	beq.n	801602e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	2b01      	cmp	r3, #1
 8015f98:	d128      	bne.n	8015fec <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8015f9a:	69bb      	ldr	r3, [r7, #24]
 8015f9c:	2b01      	cmp	r3, #1
 8015f9e:	d10a      	bne.n	8015fb6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	689b      	ldr	r3, [r3, #8]
 8015fa4:	2203      	movs	r2, #3
 8015fa6:	9200      	str	r2, [sp, #0]
 8015fa8:	2200      	movs	r2, #0
 8015faa:	2100      	movs	r1, #0
 8015fac:	2001      	movs	r0, #1
 8015fae:	f000 fa4d 	bl	801644c <xQueueGenericCreateStatic>
 8015fb2:	61f8      	str	r0, [r7, #28]
 8015fb4:	e005      	b.n	8015fc2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8015fb6:	2203      	movs	r2, #3
 8015fb8:	2100      	movs	r1, #0
 8015fba:	2001      	movs	r0, #1
 8015fbc:	f000 fabe 	bl	801653c <xQueueGenericCreate>
 8015fc0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8015fc2:	69fb      	ldr	r3, [r7, #28]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d022      	beq.n	801600e <osSemaphoreNew+0xe8>
 8015fc8:	68bb      	ldr	r3, [r7, #8]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d01f      	beq.n	801600e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015fce:	2300      	movs	r3, #0
 8015fd0:	2200      	movs	r2, #0
 8015fd2:	2100      	movs	r1, #0
 8015fd4:	69f8      	ldr	r0, [r7, #28]
 8015fd6:	f000 fb79 	bl	80166cc <xQueueGenericSend>
 8015fda:	4603      	mov	r3, r0
 8015fdc:	2b01      	cmp	r3, #1
 8015fde:	d016      	beq.n	801600e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8015fe0:	69f8      	ldr	r0, [r7, #28]
 8015fe2:	f001 f805 	bl	8016ff0 <vQueueDelete>
            hSemaphore = NULL;
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	61fb      	str	r3, [r7, #28]
 8015fea:	e010      	b.n	801600e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8015fec:	69bb      	ldr	r3, [r7, #24]
 8015fee:	2b01      	cmp	r3, #1
 8015ff0:	d108      	bne.n	8016004 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	689b      	ldr	r3, [r3, #8]
 8015ff6:	461a      	mov	r2, r3
 8015ff8:	68b9      	ldr	r1, [r7, #8]
 8015ffa:	68f8      	ldr	r0, [r7, #12]
 8015ffc:	f000 fafb 	bl	80165f6 <xQueueCreateCountingSemaphoreStatic>
 8016000:	61f8      	str	r0, [r7, #28]
 8016002:	e004      	b.n	801600e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8016004:	68b9      	ldr	r1, [r7, #8]
 8016006:	68f8      	ldr	r0, [r7, #12]
 8016008:	f000 fb2c 	bl	8016664 <xQueueCreateCountingSemaphore>
 801600c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801600e:	69fb      	ldr	r3, [r7, #28]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d00c      	beq.n	801602e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	2b00      	cmp	r3, #0
 8016018:	d003      	beq.n	8016022 <osSemaphoreNew+0xfc>
          name = attr->name;
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	617b      	str	r3, [r7, #20]
 8016020:	e001      	b.n	8016026 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8016022:	2300      	movs	r3, #0
 8016024:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8016026:	6979      	ldr	r1, [r7, #20]
 8016028:	69f8      	ldr	r0, [r7, #28]
 801602a:	f001 f92d 	bl	8017288 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801602e:	69fb      	ldr	r3, [r7, #28]
}
 8016030:	4618      	mov	r0, r3
 8016032:	3720      	adds	r7, #32
 8016034:	46bd      	mov	sp, r7
 8016036:	bd80      	pop	{r7, pc}

08016038 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8016038:	b580      	push	{r7, lr}
 801603a:	b086      	sub	sp, #24
 801603c:	af00      	add	r7, sp, #0
 801603e:	6078      	str	r0, [r7, #4]
 8016040:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8016046:	2300      	movs	r3, #0
 8016048:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801604a:	693b      	ldr	r3, [r7, #16]
 801604c:	2b00      	cmp	r3, #0
 801604e:	d103      	bne.n	8016058 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8016050:	f06f 0303 	mvn.w	r3, #3
 8016054:	617b      	str	r3, [r7, #20]
 8016056:	e039      	b.n	80160cc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016058:	f3ef 8305 	mrs	r3, IPSR
 801605c:	60fb      	str	r3, [r7, #12]
  return(result);
 801605e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016060:	2b00      	cmp	r3, #0
 8016062:	d022      	beq.n	80160aa <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8016064:	683b      	ldr	r3, [r7, #0]
 8016066:	2b00      	cmp	r3, #0
 8016068:	d003      	beq.n	8016072 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 801606a:	f06f 0303 	mvn.w	r3, #3
 801606e:	617b      	str	r3, [r7, #20]
 8016070:	e02c      	b.n	80160cc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8016072:	2300      	movs	r3, #0
 8016074:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8016076:	f107 0308 	add.w	r3, r7, #8
 801607a:	461a      	mov	r2, r3
 801607c:	2100      	movs	r1, #0
 801607e:	6938      	ldr	r0, [r7, #16]
 8016080:	f000 ff36 	bl	8016ef0 <xQueueReceiveFromISR>
 8016084:	4603      	mov	r3, r0
 8016086:	2b01      	cmp	r3, #1
 8016088:	d003      	beq.n	8016092 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 801608a:	f06f 0302 	mvn.w	r3, #2
 801608e:	617b      	str	r3, [r7, #20]
 8016090:	e01c      	b.n	80160cc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8016092:	68bb      	ldr	r3, [r7, #8]
 8016094:	2b00      	cmp	r3, #0
 8016096:	d019      	beq.n	80160cc <osSemaphoreAcquire+0x94>
 8016098:	4b0f      	ldr	r3, [pc, #60]	; (80160d8 <osSemaphoreAcquire+0xa0>)
 801609a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801609e:	601a      	str	r2, [r3, #0]
 80160a0:	f3bf 8f4f 	dsb	sy
 80160a4:	f3bf 8f6f 	isb	sy
 80160a8:	e010      	b.n	80160cc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80160aa:	6839      	ldr	r1, [r7, #0]
 80160ac:	6938      	ldr	r0, [r7, #16]
 80160ae:	f000 fe13 	bl	8016cd8 <xQueueSemaphoreTake>
 80160b2:	4603      	mov	r3, r0
 80160b4:	2b01      	cmp	r3, #1
 80160b6:	d009      	beq.n	80160cc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80160b8:	683b      	ldr	r3, [r7, #0]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d003      	beq.n	80160c6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80160be:	f06f 0301 	mvn.w	r3, #1
 80160c2:	617b      	str	r3, [r7, #20]
 80160c4:	e002      	b.n	80160cc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80160c6:	f06f 0302 	mvn.w	r3, #2
 80160ca:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80160cc:	697b      	ldr	r3, [r7, #20]
}
 80160ce:	4618      	mov	r0, r3
 80160d0:	3718      	adds	r7, #24
 80160d2:	46bd      	mov	sp, r7
 80160d4:	bd80      	pop	{r7, pc}
 80160d6:	bf00      	nop
 80160d8:	e000ed04 	.word	0xe000ed04

080160dc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80160dc:	b580      	push	{r7, lr}
 80160de:	b086      	sub	sp, #24
 80160e0:	af00      	add	r7, sp, #0
 80160e2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80160e8:	2300      	movs	r3, #0
 80160ea:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80160ec:	693b      	ldr	r3, [r7, #16]
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d103      	bne.n	80160fa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80160f2:	f06f 0303 	mvn.w	r3, #3
 80160f6:	617b      	str	r3, [r7, #20]
 80160f8:	e02c      	b.n	8016154 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80160fa:	f3ef 8305 	mrs	r3, IPSR
 80160fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8016100:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016102:	2b00      	cmp	r3, #0
 8016104:	d01a      	beq.n	801613c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8016106:	2300      	movs	r3, #0
 8016108:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801610a:	f107 0308 	add.w	r3, r7, #8
 801610e:	4619      	mov	r1, r3
 8016110:	6938      	ldr	r0, [r7, #16]
 8016112:	f000 fc74 	bl	80169fe <xQueueGiveFromISR>
 8016116:	4603      	mov	r3, r0
 8016118:	2b01      	cmp	r3, #1
 801611a:	d003      	beq.n	8016124 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 801611c:	f06f 0302 	mvn.w	r3, #2
 8016120:	617b      	str	r3, [r7, #20]
 8016122:	e017      	b.n	8016154 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8016124:	68bb      	ldr	r3, [r7, #8]
 8016126:	2b00      	cmp	r3, #0
 8016128:	d014      	beq.n	8016154 <osSemaphoreRelease+0x78>
 801612a:	4b0d      	ldr	r3, [pc, #52]	; (8016160 <osSemaphoreRelease+0x84>)
 801612c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016130:	601a      	str	r2, [r3, #0]
 8016132:	f3bf 8f4f 	dsb	sy
 8016136:	f3bf 8f6f 	isb	sy
 801613a:	e00b      	b.n	8016154 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801613c:	2300      	movs	r3, #0
 801613e:	2200      	movs	r2, #0
 8016140:	2100      	movs	r1, #0
 8016142:	6938      	ldr	r0, [r7, #16]
 8016144:	f000 fac2 	bl	80166cc <xQueueGenericSend>
 8016148:	4603      	mov	r3, r0
 801614a:	2b01      	cmp	r3, #1
 801614c:	d002      	beq.n	8016154 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 801614e:	f06f 0302 	mvn.w	r3, #2
 8016152:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8016154:	697b      	ldr	r3, [r7, #20]
}
 8016156:	4618      	mov	r0, r3
 8016158:	3718      	adds	r7, #24
 801615a:	46bd      	mov	sp, r7
 801615c:	bd80      	pop	{r7, pc}
 801615e:	bf00      	nop
 8016160:	e000ed04 	.word	0xe000ed04

08016164 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8016164:	b580      	push	{r7, lr}
 8016166:	b086      	sub	sp, #24
 8016168:	af00      	add	r7, sp, #0
 801616a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016170:	f3ef 8305 	mrs	r3, IPSR
 8016174:	60fb      	str	r3, [r7, #12]
  return(result);
 8016176:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8016178:	2b00      	cmp	r3, #0
 801617a:	d003      	beq.n	8016184 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 801617c:	f06f 0305 	mvn.w	r3, #5
 8016180:	617b      	str	r3, [r7, #20]
 8016182:	e00e      	b.n	80161a2 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8016184:	693b      	ldr	r3, [r7, #16]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d103      	bne.n	8016192 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 801618a:	f06f 0303 	mvn.w	r3, #3
 801618e:	617b      	str	r3, [r7, #20]
 8016190:	e007      	b.n	80161a2 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8016192:	6938      	ldr	r0, [r7, #16]
 8016194:	f001 f8a2 	bl	80172dc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8016198:	2300      	movs	r3, #0
 801619a:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 801619c:	6938      	ldr	r0, [r7, #16]
 801619e:	f000 ff27 	bl	8016ff0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80161a2:	697b      	ldr	r3, [r7, #20]
}
 80161a4:	4618      	mov	r0, r3
 80161a6:	3718      	adds	r7, #24
 80161a8:	46bd      	mov	sp, r7
 80161aa:	bd80      	pop	{r7, pc}

080161ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80161ac:	b480      	push	{r7}
 80161ae:	b085      	sub	sp, #20
 80161b0:	af00      	add	r7, sp, #0
 80161b2:	60f8      	str	r0, [r7, #12]
 80161b4:	60b9      	str	r1, [r7, #8]
 80161b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	4a07      	ldr	r2, [pc, #28]	; (80161d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80161bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80161be:	68bb      	ldr	r3, [r7, #8]
 80161c0:	4a06      	ldr	r2, [pc, #24]	; (80161dc <vApplicationGetIdleTaskMemory+0x30>)
 80161c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80161ca:	601a      	str	r2, [r3, #0]
}
 80161cc:	bf00      	nop
 80161ce:	3714      	adds	r7, #20
 80161d0:	46bd      	mov	sp, r7
 80161d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161d6:	4770      	bx	lr
 80161d8:	200008a0 	.word	0x200008a0
 80161dc:	2000095c 	.word	0x2000095c

080161e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80161e0:	b480      	push	{r7}
 80161e2:	b085      	sub	sp, #20
 80161e4:	af00      	add	r7, sp, #0
 80161e6:	60f8      	str	r0, [r7, #12]
 80161e8:	60b9      	str	r1, [r7, #8]
 80161ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	4a07      	ldr	r2, [pc, #28]	; (801620c <vApplicationGetTimerTaskMemory+0x2c>)
 80161f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80161f2:	68bb      	ldr	r3, [r7, #8]
 80161f4:	4a06      	ldr	r2, [pc, #24]	; (8016210 <vApplicationGetTimerTaskMemory+0x30>)
 80161f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80161fe:	601a      	str	r2, [r3, #0]
}
 8016200:	bf00      	nop
 8016202:	3714      	adds	r7, #20
 8016204:	46bd      	mov	sp, r7
 8016206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801620a:	4770      	bx	lr
 801620c:	2000115c 	.word	0x2000115c
 8016210:	20001218 	.word	0x20001218

08016214 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8016214:	b480      	push	{r7}
 8016216:	b083      	sub	sp, #12
 8016218:	af00      	add	r7, sp, #0
 801621a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	f103 0208 	add.w	r2, r3, #8
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	f04f 32ff 	mov.w	r2, #4294967295
 801622c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	f103 0208 	add.w	r2, r3, #8
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	f103 0208 	add.w	r2, r3, #8
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	2200      	movs	r2, #0
 8016246:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016248:	bf00      	nop
 801624a:	370c      	adds	r7, #12
 801624c:	46bd      	mov	sp, r7
 801624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016252:	4770      	bx	lr

08016254 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016254:	b480      	push	{r7}
 8016256:	b083      	sub	sp, #12
 8016258:	af00      	add	r7, sp, #0
 801625a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	2200      	movs	r2, #0
 8016260:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016262:	bf00      	nop
 8016264:	370c      	adds	r7, #12
 8016266:	46bd      	mov	sp, r7
 8016268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801626c:	4770      	bx	lr

0801626e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801626e:	b480      	push	{r7}
 8016270:	b085      	sub	sp, #20
 8016272:	af00      	add	r7, sp, #0
 8016274:	6078      	str	r0, [r7, #4]
 8016276:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	685b      	ldr	r3, [r3, #4]
 801627c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801627e:	683b      	ldr	r3, [r7, #0]
 8016280:	68fa      	ldr	r2, [r7, #12]
 8016282:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	689a      	ldr	r2, [r3, #8]
 8016288:	683b      	ldr	r3, [r7, #0]
 801628a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	689b      	ldr	r3, [r3, #8]
 8016290:	683a      	ldr	r2, [r7, #0]
 8016292:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	683a      	ldr	r2, [r7, #0]
 8016298:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801629a:	683b      	ldr	r3, [r7, #0]
 801629c:	687a      	ldr	r2, [r7, #4]
 801629e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	1c5a      	adds	r2, r3, #1
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	601a      	str	r2, [r3, #0]
}
 80162aa:	bf00      	nop
 80162ac:	3714      	adds	r7, #20
 80162ae:	46bd      	mov	sp, r7
 80162b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162b4:	4770      	bx	lr

080162b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80162b6:	b480      	push	{r7}
 80162b8:	b085      	sub	sp, #20
 80162ba:	af00      	add	r7, sp, #0
 80162bc:	6078      	str	r0, [r7, #4]
 80162be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80162c0:	683b      	ldr	r3, [r7, #0]
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80162c6:	68bb      	ldr	r3, [r7, #8]
 80162c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162cc:	d103      	bne.n	80162d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	691b      	ldr	r3, [r3, #16]
 80162d2:	60fb      	str	r3, [r7, #12]
 80162d4:	e00c      	b.n	80162f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	3308      	adds	r3, #8
 80162da:	60fb      	str	r3, [r7, #12]
 80162dc:	e002      	b.n	80162e4 <vListInsert+0x2e>
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	685b      	ldr	r3, [r3, #4]
 80162e2:	60fb      	str	r3, [r7, #12]
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	685b      	ldr	r3, [r3, #4]
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	68ba      	ldr	r2, [r7, #8]
 80162ec:	429a      	cmp	r2, r3
 80162ee:	d2f6      	bcs.n	80162de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	685a      	ldr	r2, [r3, #4]
 80162f4:	683b      	ldr	r3, [r7, #0]
 80162f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80162f8:	683b      	ldr	r3, [r7, #0]
 80162fa:	685b      	ldr	r3, [r3, #4]
 80162fc:	683a      	ldr	r2, [r7, #0]
 80162fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016300:	683b      	ldr	r3, [r7, #0]
 8016302:	68fa      	ldr	r2, [r7, #12]
 8016304:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	683a      	ldr	r2, [r7, #0]
 801630a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801630c:	683b      	ldr	r3, [r7, #0]
 801630e:	687a      	ldr	r2, [r7, #4]
 8016310:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	1c5a      	adds	r2, r3, #1
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	601a      	str	r2, [r3, #0]
}
 801631c:	bf00      	nop
 801631e:	3714      	adds	r7, #20
 8016320:	46bd      	mov	sp, r7
 8016322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016326:	4770      	bx	lr

08016328 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016328:	b480      	push	{r7}
 801632a:	b085      	sub	sp, #20
 801632c:	af00      	add	r7, sp, #0
 801632e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	691b      	ldr	r3, [r3, #16]
 8016334:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	685b      	ldr	r3, [r3, #4]
 801633a:	687a      	ldr	r2, [r7, #4]
 801633c:	6892      	ldr	r2, [r2, #8]
 801633e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	689b      	ldr	r3, [r3, #8]
 8016344:	687a      	ldr	r2, [r7, #4]
 8016346:	6852      	ldr	r2, [r2, #4]
 8016348:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	685b      	ldr	r3, [r3, #4]
 801634e:	687a      	ldr	r2, [r7, #4]
 8016350:	429a      	cmp	r2, r3
 8016352:	d103      	bne.n	801635c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	689a      	ldr	r2, [r3, #8]
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	2200      	movs	r2, #0
 8016360:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	1e5a      	subs	r2, r3, #1
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	681b      	ldr	r3, [r3, #0]
}
 8016370:	4618      	mov	r0, r3
 8016372:	3714      	adds	r7, #20
 8016374:	46bd      	mov	sp, r7
 8016376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801637a:	4770      	bx	lr

0801637c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801637c:	b580      	push	{r7, lr}
 801637e:	b084      	sub	sp, #16
 8016380:	af00      	add	r7, sp, #0
 8016382:	6078      	str	r0, [r7, #4]
 8016384:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	2b00      	cmp	r3, #0
 801638e:	d10a      	bne.n	80163a6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016394:	f383 8811 	msr	BASEPRI, r3
 8016398:	f3bf 8f6f 	isb	sy
 801639c:	f3bf 8f4f 	dsb	sy
 80163a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80163a2:	bf00      	nop
 80163a4:	e7fe      	b.n	80163a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80163a6:	f002 fe15 	bl	8018fd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	681a      	ldr	r2, [r3, #0]
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80163b2:	68f9      	ldr	r1, [r7, #12]
 80163b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80163b6:	fb01 f303 	mul.w	r3, r1, r3
 80163ba:	441a      	add	r2, r3
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	2200      	movs	r2, #0
 80163c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	681a      	ldr	r2, [r3, #0]
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	681a      	ldr	r2, [r3, #0]
 80163d2:	68fb      	ldr	r3, [r7, #12]
 80163d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80163d6:	3b01      	subs	r3, #1
 80163d8:	68f9      	ldr	r1, [r7, #12]
 80163da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80163dc:	fb01 f303 	mul.w	r3, r1, r3
 80163e0:	441a      	add	r2, r3
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	22ff      	movs	r2, #255	; 0xff
 80163ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	22ff      	movs	r2, #255	; 0xff
 80163f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80163f6:	683b      	ldr	r3, [r7, #0]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d114      	bne.n	8016426 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	691b      	ldr	r3, [r3, #16]
 8016400:	2b00      	cmp	r3, #0
 8016402:	d01a      	beq.n	801643a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	3310      	adds	r3, #16
 8016408:	4618      	mov	r0, r3
 801640a:	f001 fdb3 	bl	8017f74 <xTaskRemoveFromEventList>
 801640e:	4603      	mov	r3, r0
 8016410:	2b00      	cmp	r3, #0
 8016412:	d012      	beq.n	801643a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8016414:	4b0c      	ldr	r3, [pc, #48]	; (8016448 <xQueueGenericReset+0xcc>)
 8016416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801641a:	601a      	str	r2, [r3, #0]
 801641c:	f3bf 8f4f 	dsb	sy
 8016420:	f3bf 8f6f 	isb	sy
 8016424:	e009      	b.n	801643a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	3310      	adds	r3, #16
 801642a:	4618      	mov	r0, r3
 801642c:	f7ff fef2 	bl	8016214 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	3324      	adds	r3, #36	; 0x24
 8016434:	4618      	mov	r0, r3
 8016436:	f7ff feed 	bl	8016214 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801643a:	f002 fdfb 	bl	8019034 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801643e:	2301      	movs	r3, #1
}
 8016440:	4618      	mov	r0, r3
 8016442:	3710      	adds	r7, #16
 8016444:	46bd      	mov	sp, r7
 8016446:	bd80      	pop	{r7, pc}
 8016448:	e000ed04 	.word	0xe000ed04

0801644c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801644c:	b580      	push	{r7, lr}
 801644e:	b08e      	sub	sp, #56	; 0x38
 8016450:	af02      	add	r7, sp, #8
 8016452:	60f8      	str	r0, [r7, #12]
 8016454:	60b9      	str	r1, [r7, #8]
 8016456:	607a      	str	r2, [r7, #4]
 8016458:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d10a      	bne.n	8016476 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8016460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016464:	f383 8811 	msr	BASEPRI, r3
 8016468:	f3bf 8f6f 	isb	sy
 801646c:	f3bf 8f4f 	dsb	sy
 8016470:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016472:	bf00      	nop
 8016474:	e7fe      	b.n	8016474 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8016476:	683b      	ldr	r3, [r7, #0]
 8016478:	2b00      	cmp	r3, #0
 801647a:	d10a      	bne.n	8016492 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801647c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016480:	f383 8811 	msr	BASEPRI, r3
 8016484:	f3bf 8f6f 	isb	sy
 8016488:	f3bf 8f4f 	dsb	sy
 801648c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801648e:	bf00      	nop
 8016490:	e7fe      	b.n	8016490 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	2b00      	cmp	r3, #0
 8016496:	d002      	beq.n	801649e <xQueueGenericCreateStatic+0x52>
 8016498:	68bb      	ldr	r3, [r7, #8]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d001      	beq.n	80164a2 <xQueueGenericCreateStatic+0x56>
 801649e:	2301      	movs	r3, #1
 80164a0:	e000      	b.n	80164a4 <xQueueGenericCreateStatic+0x58>
 80164a2:	2300      	movs	r3, #0
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d10a      	bne.n	80164be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80164a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164ac:	f383 8811 	msr	BASEPRI, r3
 80164b0:	f3bf 8f6f 	isb	sy
 80164b4:	f3bf 8f4f 	dsb	sy
 80164b8:	623b      	str	r3, [r7, #32]
}
 80164ba:	bf00      	nop
 80164bc:	e7fe      	b.n	80164bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d102      	bne.n	80164ca <xQueueGenericCreateStatic+0x7e>
 80164c4:	68bb      	ldr	r3, [r7, #8]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d101      	bne.n	80164ce <xQueueGenericCreateStatic+0x82>
 80164ca:	2301      	movs	r3, #1
 80164cc:	e000      	b.n	80164d0 <xQueueGenericCreateStatic+0x84>
 80164ce:	2300      	movs	r3, #0
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d10a      	bne.n	80164ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80164d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164d8:	f383 8811 	msr	BASEPRI, r3
 80164dc:	f3bf 8f6f 	isb	sy
 80164e0:	f3bf 8f4f 	dsb	sy
 80164e4:	61fb      	str	r3, [r7, #28]
}
 80164e6:	bf00      	nop
 80164e8:	e7fe      	b.n	80164e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80164ea:	2350      	movs	r3, #80	; 0x50
 80164ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80164ee:	697b      	ldr	r3, [r7, #20]
 80164f0:	2b50      	cmp	r3, #80	; 0x50
 80164f2:	d00a      	beq.n	801650a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80164f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164f8:	f383 8811 	msr	BASEPRI, r3
 80164fc:	f3bf 8f6f 	isb	sy
 8016500:	f3bf 8f4f 	dsb	sy
 8016504:	61bb      	str	r3, [r7, #24]
}
 8016506:	bf00      	nop
 8016508:	e7fe      	b.n	8016508 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801650a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801650c:	683b      	ldr	r3, [r7, #0]
 801650e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8016510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016512:	2b00      	cmp	r3, #0
 8016514:	d00d      	beq.n	8016532 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016518:	2201      	movs	r2, #1
 801651a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801651e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016524:	9300      	str	r3, [sp, #0]
 8016526:	4613      	mov	r3, r2
 8016528:	687a      	ldr	r2, [r7, #4]
 801652a:	68b9      	ldr	r1, [r7, #8]
 801652c:	68f8      	ldr	r0, [r7, #12]
 801652e:	f000 f83f 	bl	80165b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8016534:	4618      	mov	r0, r3
 8016536:	3730      	adds	r7, #48	; 0x30
 8016538:	46bd      	mov	sp, r7
 801653a:	bd80      	pop	{r7, pc}

0801653c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801653c:	b580      	push	{r7, lr}
 801653e:	b08a      	sub	sp, #40	; 0x28
 8016540:	af02      	add	r7, sp, #8
 8016542:	60f8      	str	r0, [r7, #12]
 8016544:	60b9      	str	r1, [r7, #8]
 8016546:	4613      	mov	r3, r2
 8016548:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d10a      	bne.n	8016566 <xQueueGenericCreate+0x2a>
	__asm volatile
 8016550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016554:	f383 8811 	msr	BASEPRI, r3
 8016558:	f3bf 8f6f 	isb	sy
 801655c:	f3bf 8f4f 	dsb	sy
 8016560:	613b      	str	r3, [r7, #16]
}
 8016562:	bf00      	nop
 8016564:	e7fe      	b.n	8016564 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	68ba      	ldr	r2, [r7, #8]
 801656a:	fb02 f303 	mul.w	r3, r2, r3
 801656e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016570:	69fb      	ldr	r3, [r7, #28]
 8016572:	3350      	adds	r3, #80	; 0x50
 8016574:	4618      	mov	r0, r3
 8016576:	f002 fe4f 	bl	8019218 <pvPortMalloc>
 801657a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801657c:	69bb      	ldr	r3, [r7, #24]
 801657e:	2b00      	cmp	r3, #0
 8016580:	d011      	beq.n	80165a6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016582:	69bb      	ldr	r3, [r7, #24]
 8016584:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016586:	697b      	ldr	r3, [r7, #20]
 8016588:	3350      	adds	r3, #80	; 0x50
 801658a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801658c:	69bb      	ldr	r3, [r7, #24]
 801658e:	2200      	movs	r2, #0
 8016590:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016594:	79fa      	ldrb	r2, [r7, #7]
 8016596:	69bb      	ldr	r3, [r7, #24]
 8016598:	9300      	str	r3, [sp, #0]
 801659a:	4613      	mov	r3, r2
 801659c:	697a      	ldr	r2, [r7, #20]
 801659e:	68b9      	ldr	r1, [r7, #8]
 80165a0:	68f8      	ldr	r0, [r7, #12]
 80165a2:	f000 f805 	bl	80165b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80165a6:	69bb      	ldr	r3, [r7, #24]
	}
 80165a8:	4618      	mov	r0, r3
 80165aa:	3720      	adds	r7, #32
 80165ac:	46bd      	mov	sp, r7
 80165ae:	bd80      	pop	{r7, pc}

080165b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b084      	sub	sp, #16
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	60f8      	str	r0, [r7, #12]
 80165b8:	60b9      	str	r1, [r7, #8]
 80165ba:	607a      	str	r2, [r7, #4]
 80165bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80165be:	68bb      	ldr	r3, [r7, #8]
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d103      	bne.n	80165cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80165c4:	69bb      	ldr	r3, [r7, #24]
 80165c6:	69ba      	ldr	r2, [r7, #24]
 80165c8:	601a      	str	r2, [r3, #0]
 80165ca:	e002      	b.n	80165d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80165cc:	69bb      	ldr	r3, [r7, #24]
 80165ce:	687a      	ldr	r2, [r7, #4]
 80165d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80165d2:	69bb      	ldr	r3, [r7, #24]
 80165d4:	68fa      	ldr	r2, [r7, #12]
 80165d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80165d8:	69bb      	ldr	r3, [r7, #24]
 80165da:	68ba      	ldr	r2, [r7, #8]
 80165dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80165de:	2101      	movs	r1, #1
 80165e0:	69b8      	ldr	r0, [r7, #24]
 80165e2:	f7ff fecb 	bl	801637c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80165e6:	69bb      	ldr	r3, [r7, #24]
 80165e8:	78fa      	ldrb	r2, [r7, #3]
 80165ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80165ee:	bf00      	nop
 80165f0:	3710      	adds	r7, #16
 80165f2:	46bd      	mov	sp, r7
 80165f4:	bd80      	pop	{r7, pc}

080165f6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80165f6:	b580      	push	{r7, lr}
 80165f8:	b08a      	sub	sp, #40	; 0x28
 80165fa:	af02      	add	r7, sp, #8
 80165fc:	60f8      	str	r0, [r7, #12]
 80165fe:	60b9      	str	r1, [r7, #8]
 8016600:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	2b00      	cmp	r3, #0
 8016606:	d10a      	bne.n	801661e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8016608:	f04f 0350 	mov.w	r3, #80	; 0x50
 801660c:	f383 8811 	msr	BASEPRI, r3
 8016610:	f3bf 8f6f 	isb	sy
 8016614:	f3bf 8f4f 	dsb	sy
 8016618:	61bb      	str	r3, [r7, #24]
}
 801661a:	bf00      	nop
 801661c:	e7fe      	b.n	801661c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801661e:	68ba      	ldr	r2, [r7, #8]
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	429a      	cmp	r2, r3
 8016624:	d90a      	bls.n	801663c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8016626:	f04f 0350 	mov.w	r3, #80	; 0x50
 801662a:	f383 8811 	msr	BASEPRI, r3
 801662e:	f3bf 8f6f 	isb	sy
 8016632:	f3bf 8f4f 	dsb	sy
 8016636:	617b      	str	r3, [r7, #20]
}
 8016638:	bf00      	nop
 801663a:	e7fe      	b.n	801663a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801663c:	2302      	movs	r3, #2
 801663e:	9300      	str	r3, [sp, #0]
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	2200      	movs	r2, #0
 8016644:	2100      	movs	r1, #0
 8016646:	68f8      	ldr	r0, [r7, #12]
 8016648:	f7ff ff00 	bl	801644c <xQueueGenericCreateStatic>
 801664c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801664e:	69fb      	ldr	r3, [r7, #28]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d002      	beq.n	801665a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016654:	69fb      	ldr	r3, [r7, #28]
 8016656:	68ba      	ldr	r2, [r7, #8]
 8016658:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801665a:	69fb      	ldr	r3, [r7, #28]
	}
 801665c:	4618      	mov	r0, r3
 801665e:	3720      	adds	r7, #32
 8016660:	46bd      	mov	sp, r7
 8016662:	bd80      	pop	{r7, pc}

08016664 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8016664:	b580      	push	{r7, lr}
 8016666:	b086      	sub	sp, #24
 8016668:	af00      	add	r7, sp, #0
 801666a:	6078      	str	r0, [r7, #4]
 801666c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	2b00      	cmp	r3, #0
 8016672:	d10a      	bne.n	801668a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8016674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016678:	f383 8811 	msr	BASEPRI, r3
 801667c:	f3bf 8f6f 	isb	sy
 8016680:	f3bf 8f4f 	dsb	sy
 8016684:	613b      	str	r3, [r7, #16]
}
 8016686:	bf00      	nop
 8016688:	e7fe      	b.n	8016688 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801668a:	683a      	ldr	r2, [r7, #0]
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	429a      	cmp	r2, r3
 8016690:	d90a      	bls.n	80166a8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8016692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016696:	f383 8811 	msr	BASEPRI, r3
 801669a:	f3bf 8f6f 	isb	sy
 801669e:	f3bf 8f4f 	dsb	sy
 80166a2:	60fb      	str	r3, [r7, #12]
}
 80166a4:	bf00      	nop
 80166a6:	e7fe      	b.n	80166a6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80166a8:	2202      	movs	r2, #2
 80166aa:	2100      	movs	r1, #0
 80166ac:	6878      	ldr	r0, [r7, #4]
 80166ae:	f7ff ff45 	bl	801653c <xQueueGenericCreate>
 80166b2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80166b4:	697b      	ldr	r3, [r7, #20]
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d002      	beq.n	80166c0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80166ba:	697b      	ldr	r3, [r7, #20]
 80166bc:	683a      	ldr	r2, [r7, #0]
 80166be:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80166c0:	697b      	ldr	r3, [r7, #20]
	}
 80166c2:	4618      	mov	r0, r3
 80166c4:	3718      	adds	r7, #24
 80166c6:	46bd      	mov	sp, r7
 80166c8:	bd80      	pop	{r7, pc}
	...

080166cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80166cc:	b580      	push	{r7, lr}
 80166ce:	b08e      	sub	sp, #56	; 0x38
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	60f8      	str	r0, [r7, #12]
 80166d4:	60b9      	str	r1, [r7, #8]
 80166d6:	607a      	str	r2, [r7, #4]
 80166d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80166da:	2300      	movs	r3, #0
 80166dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80166e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d10a      	bne.n	80166fe <xQueueGenericSend+0x32>
	__asm volatile
 80166e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166ec:	f383 8811 	msr	BASEPRI, r3
 80166f0:	f3bf 8f6f 	isb	sy
 80166f4:	f3bf 8f4f 	dsb	sy
 80166f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80166fa:	bf00      	nop
 80166fc:	e7fe      	b.n	80166fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80166fe:	68bb      	ldr	r3, [r7, #8]
 8016700:	2b00      	cmp	r3, #0
 8016702:	d103      	bne.n	801670c <xQueueGenericSend+0x40>
 8016704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016708:	2b00      	cmp	r3, #0
 801670a:	d101      	bne.n	8016710 <xQueueGenericSend+0x44>
 801670c:	2301      	movs	r3, #1
 801670e:	e000      	b.n	8016712 <xQueueGenericSend+0x46>
 8016710:	2300      	movs	r3, #0
 8016712:	2b00      	cmp	r3, #0
 8016714:	d10a      	bne.n	801672c <xQueueGenericSend+0x60>
	__asm volatile
 8016716:	f04f 0350 	mov.w	r3, #80	; 0x50
 801671a:	f383 8811 	msr	BASEPRI, r3
 801671e:	f3bf 8f6f 	isb	sy
 8016722:	f3bf 8f4f 	dsb	sy
 8016726:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016728:	bf00      	nop
 801672a:	e7fe      	b.n	801672a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801672c:	683b      	ldr	r3, [r7, #0]
 801672e:	2b02      	cmp	r3, #2
 8016730:	d103      	bne.n	801673a <xQueueGenericSend+0x6e>
 8016732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016736:	2b01      	cmp	r3, #1
 8016738:	d101      	bne.n	801673e <xQueueGenericSend+0x72>
 801673a:	2301      	movs	r3, #1
 801673c:	e000      	b.n	8016740 <xQueueGenericSend+0x74>
 801673e:	2300      	movs	r3, #0
 8016740:	2b00      	cmp	r3, #0
 8016742:	d10a      	bne.n	801675a <xQueueGenericSend+0x8e>
	__asm volatile
 8016744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016748:	f383 8811 	msr	BASEPRI, r3
 801674c:	f3bf 8f6f 	isb	sy
 8016750:	f3bf 8f4f 	dsb	sy
 8016754:	623b      	str	r3, [r7, #32]
}
 8016756:	bf00      	nop
 8016758:	e7fe      	b.n	8016758 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801675a:	f001 fddd 	bl	8018318 <xTaskGetSchedulerState>
 801675e:	4603      	mov	r3, r0
 8016760:	2b00      	cmp	r3, #0
 8016762:	d102      	bne.n	801676a <xQueueGenericSend+0x9e>
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	2b00      	cmp	r3, #0
 8016768:	d101      	bne.n	801676e <xQueueGenericSend+0xa2>
 801676a:	2301      	movs	r3, #1
 801676c:	e000      	b.n	8016770 <xQueueGenericSend+0xa4>
 801676e:	2300      	movs	r3, #0
 8016770:	2b00      	cmp	r3, #0
 8016772:	d10a      	bne.n	801678a <xQueueGenericSend+0xbe>
	__asm volatile
 8016774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016778:	f383 8811 	msr	BASEPRI, r3
 801677c:	f3bf 8f6f 	isb	sy
 8016780:	f3bf 8f4f 	dsb	sy
 8016784:	61fb      	str	r3, [r7, #28]
}
 8016786:	bf00      	nop
 8016788:	e7fe      	b.n	8016788 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801678a:	f002 fc23 	bl	8018fd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016796:	429a      	cmp	r2, r3
 8016798:	d302      	bcc.n	80167a0 <xQueueGenericSend+0xd4>
 801679a:	683b      	ldr	r3, [r7, #0]
 801679c:	2b02      	cmp	r3, #2
 801679e:	d129      	bne.n	80167f4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80167a0:	683a      	ldr	r2, [r7, #0]
 80167a2:	68b9      	ldr	r1, [r7, #8]
 80167a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80167a6:	f000 fc5e 	bl	8017066 <prvCopyDataToQueue>
 80167aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80167ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d010      	beq.n	80167d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80167b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167b6:	3324      	adds	r3, #36	; 0x24
 80167b8:	4618      	mov	r0, r3
 80167ba:	f001 fbdb 	bl	8017f74 <xTaskRemoveFromEventList>
 80167be:	4603      	mov	r3, r0
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d013      	beq.n	80167ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80167c4:	4b3f      	ldr	r3, [pc, #252]	; (80168c4 <xQueueGenericSend+0x1f8>)
 80167c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80167ca:	601a      	str	r2, [r3, #0]
 80167cc:	f3bf 8f4f 	dsb	sy
 80167d0:	f3bf 8f6f 	isb	sy
 80167d4:	e00a      	b.n	80167ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80167d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d007      	beq.n	80167ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80167dc:	4b39      	ldr	r3, [pc, #228]	; (80168c4 <xQueueGenericSend+0x1f8>)
 80167de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80167e2:	601a      	str	r2, [r3, #0]
 80167e4:	f3bf 8f4f 	dsb	sy
 80167e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80167ec:	f002 fc22 	bl	8019034 <vPortExitCritical>
				return pdPASS;
 80167f0:	2301      	movs	r3, #1
 80167f2:	e063      	b.n	80168bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d103      	bne.n	8016802 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80167fa:	f002 fc1b 	bl	8019034 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80167fe:	2300      	movs	r3, #0
 8016800:	e05c      	b.n	80168bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016804:	2b00      	cmp	r3, #0
 8016806:	d106      	bne.n	8016816 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016808:	f107 0314 	add.w	r3, r7, #20
 801680c:	4618      	mov	r0, r3
 801680e:	f001 fc15 	bl	801803c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016812:	2301      	movs	r3, #1
 8016814:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016816:	f002 fc0d 	bl	8019034 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801681a:	f001 f981 	bl	8017b20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801681e:	f002 fbd9 	bl	8018fd4 <vPortEnterCritical>
 8016822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016824:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016828:	b25b      	sxtb	r3, r3
 801682a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801682e:	d103      	bne.n	8016838 <xQueueGenericSend+0x16c>
 8016830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016832:	2200      	movs	r2, #0
 8016834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801683a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801683e:	b25b      	sxtb	r3, r3
 8016840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016844:	d103      	bne.n	801684e <xQueueGenericSend+0x182>
 8016846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016848:	2200      	movs	r2, #0
 801684a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801684e:	f002 fbf1 	bl	8019034 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016852:	1d3a      	adds	r2, r7, #4
 8016854:	f107 0314 	add.w	r3, r7, #20
 8016858:	4611      	mov	r1, r2
 801685a:	4618      	mov	r0, r3
 801685c:	f001 fc04 	bl	8018068 <xTaskCheckForTimeOut>
 8016860:	4603      	mov	r3, r0
 8016862:	2b00      	cmp	r3, #0
 8016864:	d124      	bne.n	80168b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016866:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016868:	f000 fcf5 	bl	8017256 <prvIsQueueFull>
 801686c:	4603      	mov	r3, r0
 801686e:	2b00      	cmp	r3, #0
 8016870:	d018      	beq.n	80168a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016874:	3310      	adds	r3, #16
 8016876:	687a      	ldr	r2, [r7, #4]
 8016878:	4611      	mov	r1, r2
 801687a:	4618      	mov	r0, r3
 801687c:	f001 fb2a 	bl	8017ed4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016880:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016882:	f000 fc80 	bl	8017186 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016886:	f001 f959 	bl	8017b3c <xTaskResumeAll>
 801688a:	4603      	mov	r3, r0
 801688c:	2b00      	cmp	r3, #0
 801688e:	f47f af7c 	bne.w	801678a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8016892:	4b0c      	ldr	r3, [pc, #48]	; (80168c4 <xQueueGenericSend+0x1f8>)
 8016894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016898:	601a      	str	r2, [r3, #0]
 801689a:	f3bf 8f4f 	dsb	sy
 801689e:	f3bf 8f6f 	isb	sy
 80168a2:	e772      	b.n	801678a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80168a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80168a6:	f000 fc6e 	bl	8017186 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80168aa:	f001 f947 	bl	8017b3c <xTaskResumeAll>
 80168ae:	e76c      	b.n	801678a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80168b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80168b2:	f000 fc68 	bl	8017186 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80168b6:	f001 f941 	bl	8017b3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80168ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80168bc:	4618      	mov	r0, r3
 80168be:	3738      	adds	r7, #56	; 0x38
 80168c0:	46bd      	mov	sp, r7
 80168c2:	bd80      	pop	{r7, pc}
 80168c4:	e000ed04 	.word	0xe000ed04

080168c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b090      	sub	sp, #64	; 0x40
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	60f8      	str	r0, [r7, #12]
 80168d0:	60b9      	str	r1, [r7, #8]
 80168d2:	607a      	str	r2, [r7, #4]
 80168d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80168da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d10a      	bne.n	80168f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80168e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168e4:	f383 8811 	msr	BASEPRI, r3
 80168e8:	f3bf 8f6f 	isb	sy
 80168ec:	f3bf 8f4f 	dsb	sy
 80168f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80168f2:	bf00      	nop
 80168f4:	e7fe      	b.n	80168f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80168f6:	68bb      	ldr	r3, [r7, #8]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d103      	bne.n	8016904 <xQueueGenericSendFromISR+0x3c>
 80168fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016900:	2b00      	cmp	r3, #0
 8016902:	d101      	bne.n	8016908 <xQueueGenericSendFromISR+0x40>
 8016904:	2301      	movs	r3, #1
 8016906:	e000      	b.n	801690a <xQueueGenericSendFromISR+0x42>
 8016908:	2300      	movs	r3, #0
 801690a:	2b00      	cmp	r3, #0
 801690c:	d10a      	bne.n	8016924 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016912:	f383 8811 	msr	BASEPRI, r3
 8016916:	f3bf 8f6f 	isb	sy
 801691a:	f3bf 8f4f 	dsb	sy
 801691e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016920:	bf00      	nop
 8016922:	e7fe      	b.n	8016922 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016924:	683b      	ldr	r3, [r7, #0]
 8016926:	2b02      	cmp	r3, #2
 8016928:	d103      	bne.n	8016932 <xQueueGenericSendFromISR+0x6a>
 801692a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801692c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801692e:	2b01      	cmp	r3, #1
 8016930:	d101      	bne.n	8016936 <xQueueGenericSendFromISR+0x6e>
 8016932:	2301      	movs	r3, #1
 8016934:	e000      	b.n	8016938 <xQueueGenericSendFromISR+0x70>
 8016936:	2300      	movs	r3, #0
 8016938:	2b00      	cmp	r3, #0
 801693a:	d10a      	bne.n	8016952 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801693c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016940:	f383 8811 	msr	BASEPRI, r3
 8016944:	f3bf 8f6f 	isb	sy
 8016948:	f3bf 8f4f 	dsb	sy
 801694c:	623b      	str	r3, [r7, #32]
}
 801694e:	bf00      	nop
 8016950:	e7fe      	b.n	8016950 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016952:	f002 fc21 	bl	8019198 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016956:	f3ef 8211 	mrs	r2, BASEPRI
 801695a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801695e:	f383 8811 	msr	BASEPRI, r3
 8016962:	f3bf 8f6f 	isb	sy
 8016966:	f3bf 8f4f 	dsb	sy
 801696a:	61fa      	str	r2, [r7, #28]
 801696c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801696e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016970:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801697a:	429a      	cmp	r2, r3
 801697c:	d302      	bcc.n	8016984 <xQueueGenericSendFromISR+0xbc>
 801697e:	683b      	ldr	r3, [r7, #0]
 8016980:	2b02      	cmp	r3, #2
 8016982:	d12f      	bne.n	80169e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016986:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801698a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801698e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016992:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016994:	683a      	ldr	r2, [r7, #0]
 8016996:	68b9      	ldr	r1, [r7, #8]
 8016998:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801699a:	f000 fb64 	bl	8017066 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801699e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80169a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169a6:	d112      	bne.n	80169ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80169a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d016      	beq.n	80169de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80169b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169b2:	3324      	adds	r3, #36	; 0x24
 80169b4:	4618      	mov	r0, r3
 80169b6:	f001 fadd 	bl	8017f74 <xTaskRemoveFromEventList>
 80169ba:	4603      	mov	r3, r0
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d00e      	beq.n	80169de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d00b      	beq.n	80169de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	2201      	movs	r2, #1
 80169ca:	601a      	str	r2, [r3, #0]
 80169cc:	e007      	b.n	80169de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80169ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80169d2:	3301      	adds	r3, #1
 80169d4:	b2db      	uxtb	r3, r3
 80169d6:	b25a      	sxtb	r2, r3
 80169d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80169de:	2301      	movs	r3, #1
 80169e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80169e2:	e001      	b.n	80169e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80169e4:	2300      	movs	r3, #0
 80169e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80169e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80169ec:	697b      	ldr	r3, [r7, #20]
 80169ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80169f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80169f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80169f6:	4618      	mov	r0, r3
 80169f8:	3740      	adds	r7, #64	; 0x40
 80169fa:	46bd      	mov	sp, r7
 80169fc:	bd80      	pop	{r7, pc}

080169fe <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80169fe:	b580      	push	{r7, lr}
 8016a00:	b08e      	sub	sp, #56	; 0x38
 8016a02:	af00      	add	r7, sp, #0
 8016a04:	6078      	str	r0, [r7, #4]
 8016a06:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8016a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d10a      	bne.n	8016a28 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8016a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a16:	f383 8811 	msr	BASEPRI, r3
 8016a1a:	f3bf 8f6f 	isb	sy
 8016a1e:	f3bf 8f4f 	dsb	sy
 8016a22:	623b      	str	r3, [r7, #32]
}
 8016a24:	bf00      	nop
 8016a26:	e7fe      	b.n	8016a26 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d00a      	beq.n	8016a46 <xQueueGiveFromISR+0x48>
	__asm volatile
 8016a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a34:	f383 8811 	msr	BASEPRI, r3
 8016a38:	f3bf 8f6f 	isb	sy
 8016a3c:	f3bf 8f4f 	dsb	sy
 8016a40:	61fb      	str	r3, [r7, #28]
}
 8016a42:	bf00      	nop
 8016a44:	e7fe      	b.n	8016a44 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8016a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d103      	bne.n	8016a56 <xQueueGiveFromISR+0x58>
 8016a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a50:	689b      	ldr	r3, [r3, #8]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d101      	bne.n	8016a5a <xQueueGiveFromISR+0x5c>
 8016a56:	2301      	movs	r3, #1
 8016a58:	e000      	b.n	8016a5c <xQueueGiveFromISR+0x5e>
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d10a      	bne.n	8016a76 <xQueueGiveFromISR+0x78>
	__asm volatile
 8016a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a64:	f383 8811 	msr	BASEPRI, r3
 8016a68:	f3bf 8f6f 	isb	sy
 8016a6c:	f3bf 8f4f 	dsb	sy
 8016a70:	61bb      	str	r3, [r7, #24]
}
 8016a72:	bf00      	nop
 8016a74:	e7fe      	b.n	8016a74 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016a76:	f002 fb8f 	bl	8019198 <vPortValidateInterruptPriority>
	__asm volatile
 8016a7a:	f3ef 8211 	mrs	r2, BASEPRI
 8016a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a82:	f383 8811 	msr	BASEPRI, r3
 8016a86:	f3bf 8f6f 	isb	sy
 8016a8a:	f3bf 8f4f 	dsb	sy
 8016a8e:	617a      	str	r2, [r7, #20]
 8016a90:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8016a92:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016a94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a9a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8016a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016aa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016aa2:	429a      	cmp	r2, r3
 8016aa4:	d22b      	bcs.n	8016afe <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ab2:	1c5a      	adds	r2, r3, #1
 8016ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ab6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016ab8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ac0:	d112      	bne.n	8016ae8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d016      	beq.n	8016af8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016acc:	3324      	adds	r3, #36	; 0x24
 8016ace:	4618      	mov	r0, r3
 8016ad0:	f001 fa50 	bl	8017f74 <xTaskRemoveFromEventList>
 8016ad4:	4603      	mov	r3, r0
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d00e      	beq.n	8016af8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016ada:	683b      	ldr	r3, [r7, #0]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d00b      	beq.n	8016af8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016ae0:	683b      	ldr	r3, [r7, #0]
 8016ae2:	2201      	movs	r2, #1
 8016ae4:	601a      	str	r2, [r3, #0]
 8016ae6:	e007      	b.n	8016af8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016aec:	3301      	adds	r3, #1
 8016aee:	b2db      	uxtb	r3, r3
 8016af0:	b25a      	sxtb	r2, r3
 8016af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016af8:	2301      	movs	r3, #1
 8016afa:	637b      	str	r3, [r7, #52]	; 0x34
 8016afc:	e001      	b.n	8016b02 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016afe:	2300      	movs	r3, #0
 8016b00:	637b      	str	r3, [r7, #52]	; 0x34
 8016b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b04:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	f383 8811 	msr	BASEPRI, r3
}
 8016b0c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016b10:	4618      	mov	r0, r3
 8016b12:	3738      	adds	r7, #56	; 0x38
 8016b14:	46bd      	mov	sp, r7
 8016b16:	bd80      	pop	{r7, pc}

08016b18 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016b18:	b580      	push	{r7, lr}
 8016b1a:	b08c      	sub	sp, #48	; 0x30
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	60f8      	str	r0, [r7, #12]
 8016b20:	60b9      	str	r1, [r7, #8]
 8016b22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016b24:	2300      	movs	r3, #0
 8016b26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d10a      	bne.n	8016b48 <xQueueReceive+0x30>
	__asm volatile
 8016b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b36:	f383 8811 	msr	BASEPRI, r3
 8016b3a:	f3bf 8f6f 	isb	sy
 8016b3e:	f3bf 8f4f 	dsb	sy
 8016b42:	623b      	str	r3, [r7, #32]
}
 8016b44:	bf00      	nop
 8016b46:	e7fe      	b.n	8016b46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016b48:	68bb      	ldr	r3, [r7, #8]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d103      	bne.n	8016b56 <xQueueReceive+0x3e>
 8016b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d101      	bne.n	8016b5a <xQueueReceive+0x42>
 8016b56:	2301      	movs	r3, #1
 8016b58:	e000      	b.n	8016b5c <xQueueReceive+0x44>
 8016b5a:	2300      	movs	r3, #0
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d10a      	bne.n	8016b76 <xQueueReceive+0x5e>
	__asm volatile
 8016b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b64:	f383 8811 	msr	BASEPRI, r3
 8016b68:	f3bf 8f6f 	isb	sy
 8016b6c:	f3bf 8f4f 	dsb	sy
 8016b70:	61fb      	str	r3, [r7, #28]
}
 8016b72:	bf00      	nop
 8016b74:	e7fe      	b.n	8016b74 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016b76:	f001 fbcf 	bl	8018318 <xTaskGetSchedulerState>
 8016b7a:	4603      	mov	r3, r0
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d102      	bne.n	8016b86 <xQueueReceive+0x6e>
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d101      	bne.n	8016b8a <xQueueReceive+0x72>
 8016b86:	2301      	movs	r3, #1
 8016b88:	e000      	b.n	8016b8c <xQueueReceive+0x74>
 8016b8a:	2300      	movs	r3, #0
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d10a      	bne.n	8016ba6 <xQueueReceive+0x8e>
	__asm volatile
 8016b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b94:	f383 8811 	msr	BASEPRI, r3
 8016b98:	f3bf 8f6f 	isb	sy
 8016b9c:	f3bf 8f4f 	dsb	sy
 8016ba0:	61bb      	str	r3, [r7, #24]
}
 8016ba2:	bf00      	nop
 8016ba4:	e7fe      	b.n	8016ba4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016ba6:	f002 fa15 	bl	8018fd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016bae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d01f      	beq.n	8016bf6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016bb6:	68b9      	ldr	r1, [r7, #8]
 8016bb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016bba:	f000 fabe 	bl	801713a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bc0:	1e5a      	subs	r2, r3, #1
 8016bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bc4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bc8:	691b      	ldr	r3, [r3, #16]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d00f      	beq.n	8016bee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bd0:	3310      	adds	r3, #16
 8016bd2:	4618      	mov	r0, r3
 8016bd4:	f001 f9ce 	bl	8017f74 <xTaskRemoveFromEventList>
 8016bd8:	4603      	mov	r3, r0
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d007      	beq.n	8016bee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016bde:	4b3d      	ldr	r3, [pc, #244]	; (8016cd4 <xQueueReceive+0x1bc>)
 8016be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016be4:	601a      	str	r2, [r3, #0]
 8016be6:	f3bf 8f4f 	dsb	sy
 8016bea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016bee:	f002 fa21 	bl	8019034 <vPortExitCritical>
				return pdPASS;
 8016bf2:	2301      	movs	r3, #1
 8016bf4:	e069      	b.n	8016cca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d103      	bne.n	8016c04 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016bfc:	f002 fa1a 	bl	8019034 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016c00:	2300      	movs	r3, #0
 8016c02:	e062      	b.n	8016cca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d106      	bne.n	8016c18 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016c0a:	f107 0310 	add.w	r3, r7, #16
 8016c0e:	4618      	mov	r0, r3
 8016c10:	f001 fa14 	bl	801803c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016c14:	2301      	movs	r3, #1
 8016c16:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016c18:	f002 fa0c 	bl	8019034 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016c1c:	f000 ff80 	bl	8017b20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016c20:	f002 f9d8 	bl	8018fd4 <vPortEnterCritical>
 8016c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016c2a:	b25b      	sxtb	r3, r3
 8016c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c30:	d103      	bne.n	8016c3a <xQueueReceive+0x122>
 8016c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c34:	2200      	movs	r2, #0
 8016c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016c40:	b25b      	sxtb	r3, r3
 8016c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c46:	d103      	bne.n	8016c50 <xQueueReceive+0x138>
 8016c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c4a:	2200      	movs	r2, #0
 8016c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016c50:	f002 f9f0 	bl	8019034 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016c54:	1d3a      	adds	r2, r7, #4
 8016c56:	f107 0310 	add.w	r3, r7, #16
 8016c5a:	4611      	mov	r1, r2
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	f001 fa03 	bl	8018068 <xTaskCheckForTimeOut>
 8016c62:	4603      	mov	r3, r0
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	d123      	bne.n	8016cb0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016c68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016c6a:	f000 fade 	bl	801722a <prvIsQueueEmpty>
 8016c6e:	4603      	mov	r3, r0
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d017      	beq.n	8016ca4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c76:	3324      	adds	r3, #36	; 0x24
 8016c78:	687a      	ldr	r2, [r7, #4]
 8016c7a:	4611      	mov	r1, r2
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	f001 f929 	bl	8017ed4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016c82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016c84:	f000 fa7f 	bl	8017186 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016c88:	f000 ff58 	bl	8017b3c <xTaskResumeAll>
 8016c8c:	4603      	mov	r3, r0
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d189      	bne.n	8016ba6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8016c92:	4b10      	ldr	r3, [pc, #64]	; (8016cd4 <xQueueReceive+0x1bc>)
 8016c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016c98:	601a      	str	r2, [r3, #0]
 8016c9a:	f3bf 8f4f 	dsb	sy
 8016c9e:	f3bf 8f6f 	isb	sy
 8016ca2:	e780      	b.n	8016ba6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ca6:	f000 fa6e 	bl	8017186 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016caa:	f000 ff47 	bl	8017b3c <xTaskResumeAll>
 8016cae:	e77a      	b.n	8016ba6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016cb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016cb2:	f000 fa68 	bl	8017186 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016cb6:	f000 ff41 	bl	8017b3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016cbc:	f000 fab5 	bl	801722a <prvIsQueueEmpty>
 8016cc0:	4603      	mov	r3, r0
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	f43f af6f 	beq.w	8016ba6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016cc8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016cca:	4618      	mov	r0, r3
 8016ccc:	3730      	adds	r7, #48	; 0x30
 8016cce:	46bd      	mov	sp, r7
 8016cd0:	bd80      	pop	{r7, pc}
 8016cd2:	bf00      	nop
 8016cd4:	e000ed04 	.word	0xe000ed04

08016cd8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8016cd8:	b580      	push	{r7, lr}
 8016cda:	b08e      	sub	sp, #56	; 0x38
 8016cdc:	af00      	add	r7, sp, #0
 8016cde:	6078      	str	r0, [r7, #4]
 8016ce0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8016ce2:	2300      	movs	r3, #0
 8016ce4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8016cea:	2300      	movs	r3, #0
 8016cec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d10a      	bne.n	8016d0a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8016cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cf8:	f383 8811 	msr	BASEPRI, r3
 8016cfc:	f3bf 8f6f 	isb	sy
 8016d00:	f3bf 8f4f 	dsb	sy
 8016d04:	623b      	str	r3, [r7, #32]
}
 8016d06:	bf00      	nop
 8016d08:	e7fe      	b.n	8016d08 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d00a      	beq.n	8016d28 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8016d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d16:	f383 8811 	msr	BASEPRI, r3
 8016d1a:	f3bf 8f6f 	isb	sy
 8016d1e:	f3bf 8f4f 	dsb	sy
 8016d22:	61fb      	str	r3, [r7, #28]
}
 8016d24:	bf00      	nop
 8016d26:	e7fe      	b.n	8016d26 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016d28:	f001 faf6 	bl	8018318 <xTaskGetSchedulerState>
 8016d2c:	4603      	mov	r3, r0
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d102      	bne.n	8016d38 <xQueueSemaphoreTake+0x60>
 8016d32:	683b      	ldr	r3, [r7, #0]
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d101      	bne.n	8016d3c <xQueueSemaphoreTake+0x64>
 8016d38:	2301      	movs	r3, #1
 8016d3a:	e000      	b.n	8016d3e <xQueueSemaphoreTake+0x66>
 8016d3c:	2300      	movs	r3, #0
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d10a      	bne.n	8016d58 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8016d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d46:	f383 8811 	msr	BASEPRI, r3
 8016d4a:	f3bf 8f6f 	isb	sy
 8016d4e:	f3bf 8f4f 	dsb	sy
 8016d52:	61bb      	str	r3, [r7, #24]
}
 8016d54:	bf00      	nop
 8016d56:	e7fe      	b.n	8016d56 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016d58:	f002 f93c 	bl	8018fd4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d60:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8016d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d024      	beq.n	8016db2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8016d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d6a:	1e5a      	subs	r2, r3, #1
 8016d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d6e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d104      	bne.n	8016d82 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8016d78:	f001 fc44 	bl	8018604 <pvTaskIncrementMutexHeldCount>
 8016d7c:	4602      	mov	r2, r0
 8016d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d80:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d84:	691b      	ldr	r3, [r3, #16]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d00f      	beq.n	8016daa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d8c:	3310      	adds	r3, #16
 8016d8e:	4618      	mov	r0, r3
 8016d90:	f001 f8f0 	bl	8017f74 <xTaskRemoveFromEventList>
 8016d94:	4603      	mov	r3, r0
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d007      	beq.n	8016daa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016d9a:	4b54      	ldr	r3, [pc, #336]	; (8016eec <xQueueSemaphoreTake+0x214>)
 8016d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016da0:	601a      	str	r2, [r3, #0]
 8016da2:	f3bf 8f4f 	dsb	sy
 8016da6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016daa:	f002 f943 	bl	8019034 <vPortExitCritical>
				return pdPASS;
 8016dae:	2301      	movs	r3, #1
 8016db0:	e097      	b.n	8016ee2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016db2:	683b      	ldr	r3, [r7, #0]
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d111      	bne.n	8016ddc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8016db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d00a      	beq.n	8016dd4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8016dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dc2:	f383 8811 	msr	BASEPRI, r3
 8016dc6:	f3bf 8f6f 	isb	sy
 8016dca:	f3bf 8f4f 	dsb	sy
 8016dce:	617b      	str	r3, [r7, #20]
}
 8016dd0:	bf00      	nop
 8016dd2:	e7fe      	b.n	8016dd2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8016dd4:	f002 f92e 	bl	8019034 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016dd8:	2300      	movs	r3, #0
 8016dda:	e082      	b.n	8016ee2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d106      	bne.n	8016df0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016de2:	f107 030c 	add.w	r3, r7, #12
 8016de6:	4618      	mov	r0, r3
 8016de8:	f001 f928 	bl	801803c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016dec:	2301      	movs	r3, #1
 8016dee:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016df0:	f002 f920 	bl	8019034 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016df4:	f000 fe94 	bl	8017b20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016df8:	f002 f8ec 	bl	8018fd4 <vPortEnterCritical>
 8016dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016e02:	b25b      	sxtb	r3, r3
 8016e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e08:	d103      	bne.n	8016e12 <xQueueSemaphoreTake+0x13a>
 8016e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e0c:	2200      	movs	r2, #0
 8016e0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016e18:	b25b      	sxtb	r3, r3
 8016e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e1e:	d103      	bne.n	8016e28 <xQueueSemaphoreTake+0x150>
 8016e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e22:	2200      	movs	r2, #0
 8016e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016e28:	f002 f904 	bl	8019034 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016e2c:	463a      	mov	r2, r7
 8016e2e:	f107 030c 	add.w	r3, r7, #12
 8016e32:	4611      	mov	r1, r2
 8016e34:	4618      	mov	r0, r3
 8016e36:	f001 f917 	bl	8018068 <xTaskCheckForTimeOut>
 8016e3a:	4603      	mov	r3, r0
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d132      	bne.n	8016ea6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016e40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016e42:	f000 f9f2 	bl	801722a <prvIsQueueEmpty>
 8016e46:	4603      	mov	r3, r0
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d026      	beq.n	8016e9a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d109      	bne.n	8016e68 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8016e54:	f002 f8be 	bl	8018fd4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e5a:	689b      	ldr	r3, [r3, #8]
 8016e5c:	4618      	mov	r0, r3
 8016e5e:	f001 fa79 	bl	8018354 <xTaskPriorityInherit>
 8016e62:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8016e64:	f002 f8e6 	bl	8019034 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e6a:	3324      	adds	r3, #36	; 0x24
 8016e6c:	683a      	ldr	r2, [r7, #0]
 8016e6e:	4611      	mov	r1, r2
 8016e70:	4618      	mov	r0, r3
 8016e72:	f001 f82f 	bl	8017ed4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016e76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016e78:	f000 f985 	bl	8017186 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016e7c:	f000 fe5e 	bl	8017b3c <xTaskResumeAll>
 8016e80:	4603      	mov	r3, r0
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	f47f af68 	bne.w	8016d58 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8016e88:	4b18      	ldr	r3, [pc, #96]	; (8016eec <xQueueSemaphoreTake+0x214>)
 8016e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e8e:	601a      	str	r2, [r3, #0]
 8016e90:	f3bf 8f4f 	dsb	sy
 8016e94:	f3bf 8f6f 	isb	sy
 8016e98:	e75e      	b.n	8016d58 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8016e9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016e9c:	f000 f973 	bl	8017186 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016ea0:	f000 fe4c 	bl	8017b3c <xTaskResumeAll>
 8016ea4:	e758      	b.n	8016d58 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8016ea6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016ea8:	f000 f96d 	bl	8017186 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016eac:	f000 fe46 	bl	8017b3c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016eb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016eb2:	f000 f9ba 	bl	801722a <prvIsQueueEmpty>
 8016eb6:	4603      	mov	r3, r0
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	f43f af4d 	beq.w	8016d58 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8016ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d00d      	beq.n	8016ee0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8016ec4:	f002 f886 	bl	8018fd4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8016ec8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016eca:	f000 f8b4 	bl	8017036 <prvGetDisinheritPriorityAfterTimeout>
 8016ece:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8016ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ed2:	689b      	ldr	r3, [r3, #8]
 8016ed4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	f001 fb12 	bl	8018500 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8016edc:	f002 f8aa 	bl	8019034 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016ee0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	3738      	adds	r7, #56	; 0x38
 8016ee6:	46bd      	mov	sp, r7
 8016ee8:	bd80      	pop	{r7, pc}
 8016eea:	bf00      	nop
 8016eec:	e000ed04 	.word	0xe000ed04

08016ef0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016ef0:	b580      	push	{r7, lr}
 8016ef2:	b08e      	sub	sp, #56	; 0x38
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	60f8      	str	r0, [r7, #12]
 8016ef8:	60b9      	str	r1, [r7, #8]
 8016efa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016efc:	68fb      	ldr	r3, [r7, #12]
 8016efe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d10a      	bne.n	8016f1c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8016f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f0a:	f383 8811 	msr	BASEPRI, r3
 8016f0e:	f3bf 8f6f 	isb	sy
 8016f12:	f3bf 8f4f 	dsb	sy
 8016f16:	623b      	str	r3, [r7, #32]
}
 8016f18:	bf00      	nop
 8016f1a:	e7fe      	b.n	8016f1a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016f1c:	68bb      	ldr	r3, [r7, #8]
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d103      	bne.n	8016f2a <xQueueReceiveFromISR+0x3a>
 8016f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d101      	bne.n	8016f2e <xQueueReceiveFromISR+0x3e>
 8016f2a:	2301      	movs	r3, #1
 8016f2c:	e000      	b.n	8016f30 <xQueueReceiveFromISR+0x40>
 8016f2e:	2300      	movs	r3, #0
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d10a      	bne.n	8016f4a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8016f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f38:	f383 8811 	msr	BASEPRI, r3
 8016f3c:	f3bf 8f6f 	isb	sy
 8016f40:	f3bf 8f4f 	dsb	sy
 8016f44:	61fb      	str	r3, [r7, #28]
}
 8016f46:	bf00      	nop
 8016f48:	e7fe      	b.n	8016f48 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016f4a:	f002 f925 	bl	8019198 <vPortValidateInterruptPriority>
	__asm volatile
 8016f4e:	f3ef 8211 	mrs	r2, BASEPRI
 8016f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f56:	f383 8811 	msr	BASEPRI, r3
 8016f5a:	f3bf 8f6f 	isb	sy
 8016f5e:	f3bf 8f4f 	dsb	sy
 8016f62:	61ba      	str	r2, [r7, #24]
 8016f64:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8016f66:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016f68:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f6e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d02f      	beq.n	8016fd6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8016f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016f80:	68b9      	ldr	r1, [r7, #8]
 8016f82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f84:	f000 f8d9 	bl	801713a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f8a:	1e5a      	subs	r2, r3, #1
 8016f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f8e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8016f90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f98:	d112      	bne.n	8016fc0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f9c:	691b      	ldr	r3, [r3, #16]
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d016      	beq.n	8016fd0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fa4:	3310      	adds	r3, #16
 8016fa6:	4618      	mov	r0, r3
 8016fa8:	f000 ffe4 	bl	8017f74 <xTaskRemoveFromEventList>
 8016fac:	4603      	mov	r3, r0
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d00e      	beq.n	8016fd0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d00b      	beq.n	8016fd0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	2201      	movs	r2, #1
 8016fbc:	601a      	str	r2, [r3, #0]
 8016fbe:	e007      	b.n	8016fd0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8016fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016fc4:	3301      	adds	r3, #1
 8016fc6:	b2db      	uxtb	r3, r3
 8016fc8:	b25a      	sxtb	r2, r3
 8016fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8016fd0:	2301      	movs	r3, #1
 8016fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8016fd4:	e001      	b.n	8016fda <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8016fd6:	2300      	movs	r3, #0
 8016fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8016fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fdc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8016fde:	693b      	ldr	r3, [r7, #16]
 8016fe0:	f383 8811 	msr	BASEPRI, r3
}
 8016fe4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016fe8:	4618      	mov	r0, r3
 8016fea:	3738      	adds	r7, #56	; 0x38
 8016fec:	46bd      	mov	sp, r7
 8016fee:	bd80      	pop	{r7, pc}

08016ff0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8016ff0:	b580      	push	{r7, lr}
 8016ff2:	b084      	sub	sp, #16
 8016ff4:	af00      	add	r7, sp, #0
 8016ff6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d10a      	bne.n	8017018 <vQueueDelete+0x28>
	__asm volatile
 8017002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017006:	f383 8811 	msr	BASEPRI, r3
 801700a:	f3bf 8f6f 	isb	sy
 801700e:	f3bf 8f4f 	dsb	sy
 8017012:	60bb      	str	r3, [r7, #8]
}
 8017014:	bf00      	nop
 8017016:	e7fe      	b.n	8017016 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8017018:	68f8      	ldr	r0, [r7, #12]
 801701a:	f000 f95f 	bl	80172dc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8017024:	2b00      	cmp	r3, #0
 8017026:	d102      	bne.n	801702e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8017028:	68f8      	ldr	r0, [r7, #12]
 801702a:	f002 f9c1 	bl	80193b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801702e:	bf00      	nop
 8017030:	3710      	adds	r7, #16
 8017032:	46bd      	mov	sp, r7
 8017034:	bd80      	pop	{r7, pc}

08017036 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8017036:	b480      	push	{r7}
 8017038:	b085      	sub	sp, #20
 801703a:	af00      	add	r7, sp, #0
 801703c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017042:	2b00      	cmp	r3, #0
 8017044:	d006      	beq.n	8017054 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8017050:	60fb      	str	r3, [r7, #12]
 8017052:	e001      	b.n	8017058 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8017054:	2300      	movs	r3, #0
 8017056:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8017058:	68fb      	ldr	r3, [r7, #12]
	}
 801705a:	4618      	mov	r0, r3
 801705c:	3714      	adds	r7, #20
 801705e:	46bd      	mov	sp, r7
 8017060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017064:	4770      	bx	lr

08017066 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017066:	b580      	push	{r7, lr}
 8017068:	b086      	sub	sp, #24
 801706a:	af00      	add	r7, sp, #0
 801706c:	60f8      	str	r0, [r7, #12]
 801706e:	60b9      	str	r1, [r7, #8]
 8017070:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017072:	2300      	movs	r3, #0
 8017074:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801707a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801707c:	68fb      	ldr	r3, [r7, #12]
 801707e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017080:	2b00      	cmp	r3, #0
 8017082:	d10d      	bne.n	80170a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	2b00      	cmp	r3, #0
 801708a:	d14d      	bne.n	8017128 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801708c:	68fb      	ldr	r3, [r7, #12]
 801708e:	689b      	ldr	r3, [r3, #8]
 8017090:	4618      	mov	r0, r3
 8017092:	f001 f9c7 	bl	8018424 <xTaskPriorityDisinherit>
 8017096:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	2200      	movs	r2, #0
 801709c:	609a      	str	r2, [r3, #8]
 801709e:	e043      	b.n	8017128 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d119      	bne.n	80170da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	6858      	ldr	r0, [r3, #4]
 80170aa:	68fb      	ldr	r3, [r7, #12]
 80170ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170ae:	461a      	mov	r2, r3
 80170b0:	68b9      	ldr	r1, [r7, #8]
 80170b2:	f003 fce1 	bl	801aa78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	685a      	ldr	r2, [r3, #4]
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170be:	441a      	add	r2, r3
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	685a      	ldr	r2, [r3, #4]
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	689b      	ldr	r3, [r3, #8]
 80170cc:	429a      	cmp	r2, r3
 80170ce:	d32b      	bcc.n	8017128 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	681a      	ldr	r2, [r3, #0]
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	605a      	str	r2, [r3, #4]
 80170d8:	e026      	b.n	8017128 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	68d8      	ldr	r0, [r3, #12]
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170e2:	461a      	mov	r2, r3
 80170e4:	68b9      	ldr	r1, [r7, #8]
 80170e6:	f003 fcc7 	bl	801aa78 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	68da      	ldr	r2, [r3, #12]
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170f2:	425b      	negs	r3, r3
 80170f4:	441a      	add	r2, r3
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	68da      	ldr	r2, [r3, #12]
 80170fe:	68fb      	ldr	r3, [r7, #12]
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	429a      	cmp	r2, r3
 8017104:	d207      	bcs.n	8017116 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	689a      	ldr	r2, [r3, #8]
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801710e:	425b      	negs	r3, r3
 8017110:	441a      	add	r2, r3
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	2b02      	cmp	r3, #2
 801711a:	d105      	bne.n	8017128 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801711c:	693b      	ldr	r3, [r7, #16]
 801711e:	2b00      	cmp	r3, #0
 8017120:	d002      	beq.n	8017128 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017122:	693b      	ldr	r3, [r7, #16]
 8017124:	3b01      	subs	r3, #1
 8017126:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017128:	693b      	ldr	r3, [r7, #16]
 801712a:	1c5a      	adds	r2, r3, #1
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017130:	697b      	ldr	r3, [r7, #20]
}
 8017132:	4618      	mov	r0, r3
 8017134:	3718      	adds	r7, #24
 8017136:	46bd      	mov	sp, r7
 8017138:	bd80      	pop	{r7, pc}

0801713a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801713a:	b580      	push	{r7, lr}
 801713c:	b082      	sub	sp, #8
 801713e:	af00      	add	r7, sp, #0
 8017140:	6078      	str	r0, [r7, #4]
 8017142:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017148:	2b00      	cmp	r3, #0
 801714a:	d018      	beq.n	801717e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	68da      	ldr	r2, [r3, #12]
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017154:	441a      	add	r2, r3
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	68da      	ldr	r2, [r3, #12]
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	689b      	ldr	r3, [r3, #8]
 8017162:	429a      	cmp	r2, r3
 8017164:	d303      	bcc.n	801716e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	681a      	ldr	r2, [r3, #0]
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	68d9      	ldr	r1, [r3, #12]
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017176:	461a      	mov	r2, r3
 8017178:	6838      	ldr	r0, [r7, #0]
 801717a:	f003 fc7d 	bl	801aa78 <memcpy>
	}
}
 801717e:	bf00      	nop
 8017180:	3708      	adds	r7, #8
 8017182:	46bd      	mov	sp, r7
 8017184:	bd80      	pop	{r7, pc}

08017186 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017186:	b580      	push	{r7, lr}
 8017188:	b084      	sub	sp, #16
 801718a:	af00      	add	r7, sp, #0
 801718c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801718e:	f001 ff21 	bl	8018fd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017198:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801719a:	e011      	b.n	80171c0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d012      	beq.n	80171ca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	3324      	adds	r3, #36	; 0x24
 80171a8:	4618      	mov	r0, r3
 80171aa:	f000 fee3 	bl	8017f74 <xTaskRemoveFromEventList>
 80171ae:	4603      	mov	r3, r0
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d001      	beq.n	80171b8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80171b4:	f000 ffba 	bl	801812c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80171b8:	7bfb      	ldrb	r3, [r7, #15]
 80171ba:	3b01      	subs	r3, #1
 80171bc:	b2db      	uxtb	r3, r3
 80171be:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80171c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	dce9      	bgt.n	801719c <prvUnlockQueue+0x16>
 80171c8:	e000      	b.n	80171cc <prvUnlockQueue+0x46>
					break;
 80171ca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	22ff      	movs	r2, #255	; 0xff
 80171d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80171d4:	f001 ff2e 	bl	8019034 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80171d8:	f001 fefc 	bl	8018fd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80171e2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80171e4:	e011      	b.n	801720a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	691b      	ldr	r3, [r3, #16]
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d012      	beq.n	8017214 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	3310      	adds	r3, #16
 80171f2:	4618      	mov	r0, r3
 80171f4:	f000 febe 	bl	8017f74 <xTaskRemoveFromEventList>
 80171f8:	4603      	mov	r3, r0
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d001      	beq.n	8017202 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80171fe:	f000 ff95 	bl	801812c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017202:	7bbb      	ldrb	r3, [r7, #14]
 8017204:	3b01      	subs	r3, #1
 8017206:	b2db      	uxtb	r3, r3
 8017208:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801720a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801720e:	2b00      	cmp	r3, #0
 8017210:	dce9      	bgt.n	80171e6 <prvUnlockQueue+0x60>
 8017212:	e000      	b.n	8017216 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017214:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	22ff      	movs	r2, #255	; 0xff
 801721a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801721e:	f001 ff09 	bl	8019034 <vPortExitCritical>
}
 8017222:	bf00      	nop
 8017224:	3710      	adds	r7, #16
 8017226:	46bd      	mov	sp, r7
 8017228:	bd80      	pop	{r7, pc}

0801722a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801722a:	b580      	push	{r7, lr}
 801722c:	b084      	sub	sp, #16
 801722e:	af00      	add	r7, sp, #0
 8017230:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017232:	f001 fecf 	bl	8018fd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801723a:	2b00      	cmp	r3, #0
 801723c:	d102      	bne.n	8017244 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801723e:	2301      	movs	r3, #1
 8017240:	60fb      	str	r3, [r7, #12]
 8017242:	e001      	b.n	8017248 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017244:	2300      	movs	r3, #0
 8017246:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017248:	f001 fef4 	bl	8019034 <vPortExitCritical>

	return xReturn;
 801724c:	68fb      	ldr	r3, [r7, #12]
}
 801724e:	4618      	mov	r0, r3
 8017250:	3710      	adds	r7, #16
 8017252:	46bd      	mov	sp, r7
 8017254:	bd80      	pop	{r7, pc}

08017256 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017256:	b580      	push	{r7, lr}
 8017258:	b084      	sub	sp, #16
 801725a:	af00      	add	r7, sp, #0
 801725c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801725e:	f001 feb9 	bl	8018fd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801726a:	429a      	cmp	r2, r3
 801726c:	d102      	bne.n	8017274 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801726e:	2301      	movs	r3, #1
 8017270:	60fb      	str	r3, [r7, #12]
 8017272:	e001      	b.n	8017278 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017274:	2300      	movs	r3, #0
 8017276:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017278:	f001 fedc 	bl	8019034 <vPortExitCritical>

	return xReturn;
 801727c:	68fb      	ldr	r3, [r7, #12]
}
 801727e:	4618      	mov	r0, r3
 8017280:	3710      	adds	r7, #16
 8017282:	46bd      	mov	sp, r7
 8017284:	bd80      	pop	{r7, pc}
	...

08017288 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017288:	b480      	push	{r7}
 801728a:	b085      	sub	sp, #20
 801728c:	af00      	add	r7, sp, #0
 801728e:	6078      	str	r0, [r7, #4]
 8017290:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017292:	2300      	movs	r3, #0
 8017294:	60fb      	str	r3, [r7, #12]
 8017296:	e014      	b.n	80172c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017298:	4a0f      	ldr	r2, [pc, #60]	; (80172d8 <vQueueAddToRegistry+0x50>)
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d10b      	bne.n	80172bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80172a4:	490c      	ldr	r1, [pc, #48]	; (80172d8 <vQueueAddToRegistry+0x50>)
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	683a      	ldr	r2, [r7, #0]
 80172aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80172ae:	4a0a      	ldr	r2, [pc, #40]	; (80172d8 <vQueueAddToRegistry+0x50>)
 80172b0:	68fb      	ldr	r3, [r7, #12]
 80172b2:	00db      	lsls	r3, r3, #3
 80172b4:	4413      	add	r3, r2
 80172b6:	687a      	ldr	r2, [r7, #4]
 80172b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80172ba:	e006      	b.n	80172ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	3301      	adds	r3, #1
 80172c0:	60fb      	str	r3, [r7, #12]
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	2b07      	cmp	r3, #7
 80172c6:	d9e7      	bls.n	8017298 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80172c8:	bf00      	nop
 80172ca:	bf00      	nop
 80172cc:	3714      	adds	r7, #20
 80172ce:	46bd      	mov	sp, r7
 80172d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172d4:	4770      	bx	lr
 80172d6:	bf00      	nop
 80172d8:	20009ccc 	.word	0x20009ccc

080172dc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80172dc:	b480      	push	{r7}
 80172de:	b085      	sub	sp, #20
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80172e4:	2300      	movs	r3, #0
 80172e6:	60fb      	str	r3, [r7, #12]
 80172e8:	e016      	b.n	8017318 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80172ea:	4a10      	ldr	r2, [pc, #64]	; (801732c <vQueueUnregisterQueue+0x50>)
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	00db      	lsls	r3, r3, #3
 80172f0:	4413      	add	r3, r2
 80172f2:	685b      	ldr	r3, [r3, #4]
 80172f4:	687a      	ldr	r2, [r7, #4]
 80172f6:	429a      	cmp	r2, r3
 80172f8:	d10b      	bne.n	8017312 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80172fa:	4a0c      	ldr	r2, [pc, #48]	; (801732c <vQueueUnregisterQueue+0x50>)
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	2100      	movs	r1, #0
 8017300:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8017304:	4a09      	ldr	r2, [pc, #36]	; (801732c <vQueueUnregisterQueue+0x50>)
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	00db      	lsls	r3, r3, #3
 801730a:	4413      	add	r3, r2
 801730c:	2200      	movs	r2, #0
 801730e:	605a      	str	r2, [r3, #4]
				break;
 8017310:	e006      	b.n	8017320 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	3301      	adds	r3, #1
 8017316:	60fb      	str	r3, [r7, #12]
 8017318:	68fb      	ldr	r3, [r7, #12]
 801731a:	2b07      	cmp	r3, #7
 801731c:	d9e5      	bls.n	80172ea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801731e:	bf00      	nop
 8017320:	bf00      	nop
 8017322:	3714      	adds	r7, #20
 8017324:	46bd      	mov	sp, r7
 8017326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801732a:	4770      	bx	lr
 801732c:	20009ccc 	.word	0x20009ccc

08017330 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017330:	b580      	push	{r7, lr}
 8017332:	b086      	sub	sp, #24
 8017334:	af00      	add	r7, sp, #0
 8017336:	60f8      	str	r0, [r7, #12]
 8017338:	60b9      	str	r1, [r7, #8]
 801733a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801733c:	68fb      	ldr	r3, [r7, #12]
 801733e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017340:	f001 fe48 	bl	8018fd4 <vPortEnterCritical>
 8017344:	697b      	ldr	r3, [r7, #20]
 8017346:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801734a:	b25b      	sxtb	r3, r3
 801734c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017350:	d103      	bne.n	801735a <vQueueWaitForMessageRestricted+0x2a>
 8017352:	697b      	ldr	r3, [r7, #20]
 8017354:	2200      	movs	r2, #0
 8017356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801735a:	697b      	ldr	r3, [r7, #20]
 801735c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017360:	b25b      	sxtb	r3, r3
 8017362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017366:	d103      	bne.n	8017370 <vQueueWaitForMessageRestricted+0x40>
 8017368:	697b      	ldr	r3, [r7, #20]
 801736a:	2200      	movs	r2, #0
 801736c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017370:	f001 fe60 	bl	8019034 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017374:	697b      	ldr	r3, [r7, #20]
 8017376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017378:	2b00      	cmp	r3, #0
 801737a:	d106      	bne.n	801738a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801737c:	697b      	ldr	r3, [r7, #20]
 801737e:	3324      	adds	r3, #36	; 0x24
 8017380:	687a      	ldr	r2, [r7, #4]
 8017382:	68b9      	ldr	r1, [r7, #8]
 8017384:	4618      	mov	r0, r3
 8017386:	f000 fdc9 	bl	8017f1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801738a:	6978      	ldr	r0, [r7, #20]
 801738c:	f7ff fefb 	bl	8017186 <prvUnlockQueue>
	}
 8017390:	bf00      	nop
 8017392:	3718      	adds	r7, #24
 8017394:	46bd      	mov	sp, r7
 8017396:	bd80      	pop	{r7, pc}

08017398 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017398:	b580      	push	{r7, lr}
 801739a:	b08e      	sub	sp, #56	; 0x38
 801739c:	af04      	add	r7, sp, #16
 801739e:	60f8      	str	r0, [r7, #12]
 80173a0:	60b9      	str	r1, [r7, #8]
 80173a2:	607a      	str	r2, [r7, #4]
 80173a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80173a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d10a      	bne.n	80173c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80173ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173b0:	f383 8811 	msr	BASEPRI, r3
 80173b4:	f3bf 8f6f 	isb	sy
 80173b8:	f3bf 8f4f 	dsb	sy
 80173bc:	623b      	str	r3, [r7, #32]
}
 80173be:	bf00      	nop
 80173c0:	e7fe      	b.n	80173c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80173c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d10a      	bne.n	80173de <xTaskCreateStatic+0x46>
	__asm volatile
 80173c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173cc:	f383 8811 	msr	BASEPRI, r3
 80173d0:	f3bf 8f6f 	isb	sy
 80173d4:	f3bf 8f4f 	dsb	sy
 80173d8:	61fb      	str	r3, [r7, #28]
}
 80173da:	bf00      	nop
 80173dc:	e7fe      	b.n	80173dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80173de:	23bc      	movs	r3, #188	; 0xbc
 80173e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80173e2:	693b      	ldr	r3, [r7, #16]
 80173e4:	2bbc      	cmp	r3, #188	; 0xbc
 80173e6:	d00a      	beq.n	80173fe <xTaskCreateStatic+0x66>
	__asm volatile
 80173e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173ec:	f383 8811 	msr	BASEPRI, r3
 80173f0:	f3bf 8f6f 	isb	sy
 80173f4:	f3bf 8f4f 	dsb	sy
 80173f8:	61bb      	str	r3, [r7, #24]
}
 80173fa:	bf00      	nop
 80173fc:	e7fe      	b.n	80173fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80173fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017402:	2b00      	cmp	r3, #0
 8017404:	d01e      	beq.n	8017444 <xTaskCreateStatic+0xac>
 8017406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017408:	2b00      	cmp	r3, #0
 801740a:	d01b      	beq.n	8017444 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801740c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801740e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017414:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017418:	2202      	movs	r2, #2
 801741a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801741e:	2300      	movs	r3, #0
 8017420:	9303      	str	r3, [sp, #12]
 8017422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017424:	9302      	str	r3, [sp, #8]
 8017426:	f107 0314 	add.w	r3, r7, #20
 801742a:	9301      	str	r3, [sp, #4]
 801742c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801742e:	9300      	str	r3, [sp, #0]
 8017430:	683b      	ldr	r3, [r7, #0]
 8017432:	687a      	ldr	r2, [r7, #4]
 8017434:	68b9      	ldr	r1, [r7, #8]
 8017436:	68f8      	ldr	r0, [r7, #12]
 8017438:	f000 f850 	bl	80174dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801743c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801743e:	f000 f8f3 	bl	8017628 <prvAddNewTaskToReadyList>
 8017442:	e001      	b.n	8017448 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8017444:	2300      	movs	r3, #0
 8017446:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017448:	697b      	ldr	r3, [r7, #20]
	}
 801744a:	4618      	mov	r0, r3
 801744c:	3728      	adds	r7, #40	; 0x28
 801744e:	46bd      	mov	sp, r7
 8017450:	bd80      	pop	{r7, pc}

08017452 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017452:	b580      	push	{r7, lr}
 8017454:	b08c      	sub	sp, #48	; 0x30
 8017456:	af04      	add	r7, sp, #16
 8017458:	60f8      	str	r0, [r7, #12]
 801745a:	60b9      	str	r1, [r7, #8]
 801745c:	603b      	str	r3, [r7, #0]
 801745e:	4613      	mov	r3, r2
 8017460:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017462:	88fb      	ldrh	r3, [r7, #6]
 8017464:	009b      	lsls	r3, r3, #2
 8017466:	4618      	mov	r0, r3
 8017468:	f001 fed6 	bl	8019218 <pvPortMalloc>
 801746c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801746e:	697b      	ldr	r3, [r7, #20]
 8017470:	2b00      	cmp	r3, #0
 8017472:	d00e      	beq.n	8017492 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017474:	20bc      	movs	r0, #188	; 0xbc
 8017476:	f001 fecf 	bl	8019218 <pvPortMalloc>
 801747a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801747c:	69fb      	ldr	r3, [r7, #28]
 801747e:	2b00      	cmp	r3, #0
 8017480:	d003      	beq.n	801748a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017482:	69fb      	ldr	r3, [r7, #28]
 8017484:	697a      	ldr	r2, [r7, #20]
 8017486:	631a      	str	r2, [r3, #48]	; 0x30
 8017488:	e005      	b.n	8017496 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801748a:	6978      	ldr	r0, [r7, #20]
 801748c:	f001 ff90 	bl	80193b0 <vPortFree>
 8017490:	e001      	b.n	8017496 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017492:	2300      	movs	r3, #0
 8017494:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017496:	69fb      	ldr	r3, [r7, #28]
 8017498:	2b00      	cmp	r3, #0
 801749a:	d017      	beq.n	80174cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801749c:	69fb      	ldr	r3, [r7, #28]
 801749e:	2200      	movs	r2, #0
 80174a0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80174a4:	88fa      	ldrh	r2, [r7, #6]
 80174a6:	2300      	movs	r3, #0
 80174a8:	9303      	str	r3, [sp, #12]
 80174aa:	69fb      	ldr	r3, [r7, #28]
 80174ac:	9302      	str	r3, [sp, #8]
 80174ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174b0:	9301      	str	r3, [sp, #4]
 80174b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174b4:	9300      	str	r3, [sp, #0]
 80174b6:	683b      	ldr	r3, [r7, #0]
 80174b8:	68b9      	ldr	r1, [r7, #8]
 80174ba:	68f8      	ldr	r0, [r7, #12]
 80174bc:	f000 f80e 	bl	80174dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80174c0:	69f8      	ldr	r0, [r7, #28]
 80174c2:	f000 f8b1 	bl	8017628 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80174c6:	2301      	movs	r3, #1
 80174c8:	61bb      	str	r3, [r7, #24]
 80174ca:	e002      	b.n	80174d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80174cc:	f04f 33ff 	mov.w	r3, #4294967295
 80174d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80174d2:	69bb      	ldr	r3, [r7, #24]
	}
 80174d4:	4618      	mov	r0, r3
 80174d6:	3720      	adds	r7, #32
 80174d8:	46bd      	mov	sp, r7
 80174da:	bd80      	pop	{r7, pc}

080174dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80174dc:	b580      	push	{r7, lr}
 80174de:	b088      	sub	sp, #32
 80174e0:	af00      	add	r7, sp, #0
 80174e2:	60f8      	str	r0, [r7, #12]
 80174e4:	60b9      	str	r1, [r7, #8]
 80174e6:	607a      	str	r2, [r7, #4]
 80174e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80174ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	009b      	lsls	r3, r3, #2
 80174f2:	461a      	mov	r2, r3
 80174f4:	21a5      	movs	r1, #165	; 0xa5
 80174f6:	f003 fae7 	bl	801aac8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80174fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8017504:	3b01      	subs	r3, #1
 8017506:	009b      	lsls	r3, r3, #2
 8017508:	4413      	add	r3, r2
 801750a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801750c:	69bb      	ldr	r3, [r7, #24]
 801750e:	f023 0307 	bic.w	r3, r3, #7
 8017512:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017514:	69bb      	ldr	r3, [r7, #24]
 8017516:	f003 0307 	and.w	r3, r3, #7
 801751a:	2b00      	cmp	r3, #0
 801751c:	d00a      	beq.n	8017534 <prvInitialiseNewTask+0x58>
	__asm volatile
 801751e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017522:	f383 8811 	msr	BASEPRI, r3
 8017526:	f3bf 8f6f 	isb	sy
 801752a:	f3bf 8f4f 	dsb	sy
 801752e:	617b      	str	r3, [r7, #20]
}
 8017530:	bf00      	nop
 8017532:	e7fe      	b.n	8017532 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017534:	68bb      	ldr	r3, [r7, #8]
 8017536:	2b00      	cmp	r3, #0
 8017538:	d01f      	beq.n	801757a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801753a:	2300      	movs	r3, #0
 801753c:	61fb      	str	r3, [r7, #28]
 801753e:	e012      	b.n	8017566 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017540:	68ba      	ldr	r2, [r7, #8]
 8017542:	69fb      	ldr	r3, [r7, #28]
 8017544:	4413      	add	r3, r2
 8017546:	7819      	ldrb	r1, [r3, #0]
 8017548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801754a:	69fb      	ldr	r3, [r7, #28]
 801754c:	4413      	add	r3, r2
 801754e:	3334      	adds	r3, #52	; 0x34
 8017550:	460a      	mov	r2, r1
 8017552:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017554:	68ba      	ldr	r2, [r7, #8]
 8017556:	69fb      	ldr	r3, [r7, #28]
 8017558:	4413      	add	r3, r2
 801755a:	781b      	ldrb	r3, [r3, #0]
 801755c:	2b00      	cmp	r3, #0
 801755e:	d006      	beq.n	801756e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017560:	69fb      	ldr	r3, [r7, #28]
 8017562:	3301      	adds	r3, #1
 8017564:	61fb      	str	r3, [r7, #28]
 8017566:	69fb      	ldr	r3, [r7, #28]
 8017568:	2b0f      	cmp	r3, #15
 801756a:	d9e9      	bls.n	8017540 <prvInitialiseNewTask+0x64>
 801756c:	e000      	b.n	8017570 <prvInitialiseNewTask+0x94>
			{
				break;
 801756e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017572:	2200      	movs	r2, #0
 8017574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017578:	e003      	b.n	8017582 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801757c:	2200      	movs	r2, #0
 801757e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017584:	2b37      	cmp	r3, #55	; 0x37
 8017586:	d901      	bls.n	801758c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017588:	2337      	movs	r3, #55	; 0x37
 801758a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801758c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801758e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017590:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017596:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801759a:	2200      	movs	r2, #0
 801759c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801759e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175a0:	3304      	adds	r3, #4
 80175a2:	4618      	mov	r0, r3
 80175a4:	f7fe fe56 	bl	8016254 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80175a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175aa:	3318      	adds	r3, #24
 80175ac:	4618      	mov	r0, r3
 80175ae:	f7fe fe51 	bl	8016254 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80175b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80175b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80175b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80175be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80175c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80175c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80175c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175ca:	2200      	movs	r2, #0
 80175cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80175d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175d2:	2200      	movs	r2, #0
 80175d4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80175d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175da:	3354      	adds	r3, #84	; 0x54
 80175dc:	2260      	movs	r2, #96	; 0x60
 80175de:	2100      	movs	r1, #0
 80175e0:	4618      	mov	r0, r3
 80175e2:	f003 fa71 	bl	801aac8 <memset>
 80175e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175e8:	4a0c      	ldr	r2, [pc, #48]	; (801761c <prvInitialiseNewTask+0x140>)
 80175ea:	659a      	str	r2, [r3, #88]	; 0x58
 80175ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175ee:	4a0c      	ldr	r2, [pc, #48]	; (8017620 <prvInitialiseNewTask+0x144>)
 80175f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80175f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175f4:	4a0b      	ldr	r2, [pc, #44]	; (8017624 <prvInitialiseNewTask+0x148>)
 80175f6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80175f8:	683a      	ldr	r2, [r7, #0]
 80175fa:	68f9      	ldr	r1, [r7, #12]
 80175fc:	69b8      	ldr	r0, [r7, #24]
 80175fe:	f001 fbb9 	bl	8018d74 <pxPortInitialiseStack>
 8017602:	4602      	mov	r2, r0
 8017604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017606:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801760a:	2b00      	cmp	r3, #0
 801760c:	d002      	beq.n	8017614 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801760e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017612:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017614:	bf00      	nop
 8017616:	3720      	adds	r7, #32
 8017618:	46bd      	mov	sp, r7
 801761a:	bd80      	pop	{r7, pc}
 801761c:	08022cac 	.word	0x08022cac
 8017620:	08022ccc 	.word	0x08022ccc
 8017624:	08022c8c 	.word	0x08022c8c

08017628 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017628:	b580      	push	{r7, lr}
 801762a:	b082      	sub	sp, #8
 801762c:	af00      	add	r7, sp, #0
 801762e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017630:	f001 fcd0 	bl	8018fd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017634:	4b2d      	ldr	r3, [pc, #180]	; (80176ec <prvAddNewTaskToReadyList+0xc4>)
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	3301      	adds	r3, #1
 801763a:	4a2c      	ldr	r2, [pc, #176]	; (80176ec <prvAddNewTaskToReadyList+0xc4>)
 801763c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801763e:	4b2c      	ldr	r3, [pc, #176]	; (80176f0 <prvAddNewTaskToReadyList+0xc8>)
 8017640:	681b      	ldr	r3, [r3, #0]
 8017642:	2b00      	cmp	r3, #0
 8017644:	d109      	bne.n	801765a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017646:	4a2a      	ldr	r2, [pc, #168]	; (80176f0 <prvAddNewTaskToReadyList+0xc8>)
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801764c:	4b27      	ldr	r3, [pc, #156]	; (80176ec <prvAddNewTaskToReadyList+0xc4>)
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	2b01      	cmp	r3, #1
 8017652:	d110      	bne.n	8017676 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017654:	f000 fd8e 	bl	8018174 <prvInitialiseTaskLists>
 8017658:	e00d      	b.n	8017676 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801765a:	4b26      	ldr	r3, [pc, #152]	; (80176f4 <prvAddNewTaskToReadyList+0xcc>)
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d109      	bne.n	8017676 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017662:	4b23      	ldr	r3, [pc, #140]	; (80176f0 <prvAddNewTaskToReadyList+0xc8>)
 8017664:	681b      	ldr	r3, [r3, #0]
 8017666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801766c:	429a      	cmp	r2, r3
 801766e:	d802      	bhi.n	8017676 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017670:	4a1f      	ldr	r2, [pc, #124]	; (80176f0 <prvAddNewTaskToReadyList+0xc8>)
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017676:	4b20      	ldr	r3, [pc, #128]	; (80176f8 <prvAddNewTaskToReadyList+0xd0>)
 8017678:	681b      	ldr	r3, [r3, #0]
 801767a:	3301      	adds	r3, #1
 801767c:	4a1e      	ldr	r2, [pc, #120]	; (80176f8 <prvAddNewTaskToReadyList+0xd0>)
 801767e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017680:	4b1d      	ldr	r3, [pc, #116]	; (80176f8 <prvAddNewTaskToReadyList+0xd0>)
 8017682:	681a      	ldr	r2, [r3, #0]
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801768c:	4b1b      	ldr	r3, [pc, #108]	; (80176fc <prvAddNewTaskToReadyList+0xd4>)
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	429a      	cmp	r2, r3
 8017692:	d903      	bls.n	801769c <prvAddNewTaskToReadyList+0x74>
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017698:	4a18      	ldr	r2, [pc, #96]	; (80176fc <prvAddNewTaskToReadyList+0xd4>)
 801769a:	6013      	str	r3, [r2, #0]
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176a0:	4613      	mov	r3, r2
 80176a2:	009b      	lsls	r3, r3, #2
 80176a4:	4413      	add	r3, r2
 80176a6:	009b      	lsls	r3, r3, #2
 80176a8:	4a15      	ldr	r2, [pc, #84]	; (8017700 <prvAddNewTaskToReadyList+0xd8>)
 80176aa:	441a      	add	r2, r3
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	3304      	adds	r3, #4
 80176b0:	4619      	mov	r1, r3
 80176b2:	4610      	mov	r0, r2
 80176b4:	f7fe fddb 	bl	801626e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80176b8:	f001 fcbc 	bl	8019034 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80176bc:	4b0d      	ldr	r3, [pc, #52]	; (80176f4 <prvAddNewTaskToReadyList+0xcc>)
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d00e      	beq.n	80176e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80176c4:	4b0a      	ldr	r3, [pc, #40]	; (80176f0 <prvAddNewTaskToReadyList+0xc8>)
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176ce:	429a      	cmp	r2, r3
 80176d0:	d207      	bcs.n	80176e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80176d2:	4b0c      	ldr	r3, [pc, #48]	; (8017704 <prvAddNewTaskToReadyList+0xdc>)
 80176d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80176d8:	601a      	str	r2, [r3, #0]
 80176da:	f3bf 8f4f 	dsb	sy
 80176de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80176e2:	bf00      	nop
 80176e4:	3708      	adds	r7, #8
 80176e6:	46bd      	mov	sp, r7
 80176e8:	bd80      	pop	{r7, pc}
 80176ea:	bf00      	nop
 80176ec:	200026ec 	.word	0x200026ec
 80176f0:	20002218 	.word	0x20002218
 80176f4:	200026f8 	.word	0x200026f8
 80176f8:	20002708 	.word	0x20002708
 80176fc:	200026f4 	.word	0x200026f4
 8017700:	2000221c 	.word	0x2000221c
 8017704:	e000ed04 	.word	0xe000ed04

08017708 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8017708:	b580      	push	{r7, lr}
 801770a:	b084      	sub	sp, #16
 801770c:	af00      	add	r7, sp, #0
 801770e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8017710:	f001 fc60 	bl	8018fd4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	2b00      	cmp	r3, #0
 8017718:	d102      	bne.n	8017720 <vTaskDelete+0x18>
 801771a:	4b2c      	ldr	r3, [pc, #176]	; (80177cc <vTaskDelete+0xc4>)
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	e000      	b.n	8017722 <vTaskDelete+0x1a>
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	3304      	adds	r3, #4
 8017728:	4618      	mov	r0, r3
 801772a:	f7fe fdfd 	bl	8016328 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017732:	2b00      	cmp	r3, #0
 8017734:	d004      	beq.n	8017740 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017736:	68fb      	ldr	r3, [r7, #12]
 8017738:	3318      	adds	r3, #24
 801773a:	4618      	mov	r0, r3
 801773c:	f7fe fdf4 	bl	8016328 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8017740:	4b23      	ldr	r3, [pc, #140]	; (80177d0 <vTaskDelete+0xc8>)
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	3301      	adds	r3, #1
 8017746:	4a22      	ldr	r2, [pc, #136]	; (80177d0 <vTaskDelete+0xc8>)
 8017748:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801774a:	4b20      	ldr	r3, [pc, #128]	; (80177cc <vTaskDelete+0xc4>)
 801774c:	681b      	ldr	r3, [r3, #0]
 801774e:	68fa      	ldr	r2, [r7, #12]
 8017750:	429a      	cmp	r2, r3
 8017752:	d10b      	bne.n	801776c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	3304      	adds	r3, #4
 8017758:	4619      	mov	r1, r3
 801775a:	481e      	ldr	r0, [pc, #120]	; (80177d4 <vTaskDelete+0xcc>)
 801775c:	f7fe fd87 	bl	801626e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8017760:	4b1d      	ldr	r3, [pc, #116]	; (80177d8 <vTaskDelete+0xd0>)
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	3301      	adds	r3, #1
 8017766:	4a1c      	ldr	r2, [pc, #112]	; (80177d8 <vTaskDelete+0xd0>)
 8017768:	6013      	str	r3, [r2, #0]
 801776a:	e009      	b.n	8017780 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 801776c:	4b1b      	ldr	r3, [pc, #108]	; (80177dc <vTaskDelete+0xd4>)
 801776e:	681b      	ldr	r3, [r3, #0]
 8017770:	3b01      	subs	r3, #1
 8017772:	4a1a      	ldr	r2, [pc, #104]	; (80177dc <vTaskDelete+0xd4>)
 8017774:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8017776:	68f8      	ldr	r0, [r7, #12]
 8017778:	f000 fd6a 	bl	8018250 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 801777c:	f000 fd9c 	bl	80182b8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8017780:	f001 fc58 	bl	8019034 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8017784:	4b16      	ldr	r3, [pc, #88]	; (80177e0 <vTaskDelete+0xd8>)
 8017786:	681b      	ldr	r3, [r3, #0]
 8017788:	2b00      	cmp	r3, #0
 801778a:	d01b      	beq.n	80177c4 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 801778c:	4b0f      	ldr	r3, [pc, #60]	; (80177cc <vTaskDelete+0xc4>)
 801778e:	681b      	ldr	r3, [r3, #0]
 8017790:	68fa      	ldr	r2, [r7, #12]
 8017792:	429a      	cmp	r2, r3
 8017794:	d116      	bne.n	80177c4 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8017796:	4b13      	ldr	r3, [pc, #76]	; (80177e4 <vTaskDelete+0xdc>)
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	2b00      	cmp	r3, #0
 801779c:	d00a      	beq.n	80177b4 <vTaskDelete+0xac>
	__asm volatile
 801779e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177a2:	f383 8811 	msr	BASEPRI, r3
 80177a6:	f3bf 8f6f 	isb	sy
 80177aa:	f3bf 8f4f 	dsb	sy
 80177ae:	60bb      	str	r3, [r7, #8]
}
 80177b0:	bf00      	nop
 80177b2:	e7fe      	b.n	80177b2 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80177b4:	4b0c      	ldr	r3, [pc, #48]	; (80177e8 <vTaskDelete+0xe0>)
 80177b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80177ba:	601a      	str	r2, [r3, #0]
 80177bc:	f3bf 8f4f 	dsb	sy
 80177c0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80177c4:	bf00      	nop
 80177c6:	3710      	adds	r7, #16
 80177c8:	46bd      	mov	sp, r7
 80177ca:	bd80      	pop	{r7, pc}
 80177cc:	20002218 	.word	0x20002218
 80177d0:	20002708 	.word	0x20002708
 80177d4:	200026c0 	.word	0x200026c0
 80177d8:	200026d4 	.word	0x200026d4
 80177dc:	200026ec 	.word	0x200026ec
 80177e0:	200026f8 	.word	0x200026f8
 80177e4:	20002714 	.word	0x20002714
 80177e8:	e000ed04 	.word	0xe000ed04

080177ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80177ec:	b580      	push	{r7, lr}
 80177ee:	b084      	sub	sp, #16
 80177f0:	af00      	add	r7, sp, #0
 80177f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80177f4:	2300      	movs	r3, #0
 80177f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d017      	beq.n	801782e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80177fe:	4b13      	ldr	r3, [pc, #76]	; (801784c <vTaskDelay+0x60>)
 8017800:	681b      	ldr	r3, [r3, #0]
 8017802:	2b00      	cmp	r3, #0
 8017804:	d00a      	beq.n	801781c <vTaskDelay+0x30>
	__asm volatile
 8017806:	f04f 0350 	mov.w	r3, #80	; 0x50
 801780a:	f383 8811 	msr	BASEPRI, r3
 801780e:	f3bf 8f6f 	isb	sy
 8017812:	f3bf 8f4f 	dsb	sy
 8017816:	60bb      	str	r3, [r7, #8]
}
 8017818:	bf00      	nop
 801781a:	e7fe      	b.n	801781a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801781c:	f000 f980 	bl	8017b20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017820:	2100      	movs	r1, #0
 8017822:	6878      	ldr	r0, [r7, #4]
 8017824:	f000 ff02 	bl	801862c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017828:	f000 f988 	bl	8017b3c <xTaskResumeAll>
 801782c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	2b00      	cmp	r3, #0
 8017832:	d107      	bne.n	8017844 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8017834:	4b06      	ldr	r3, [pc, #24]	; (8017850 <vTaskDelay+0x64>)
 8017836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801783a:	601a      	str	r2, [r3, #0]
 801783c:	f3bf 8f4f 	dsb	sy
 8017840:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017844:	bf00      	nop
 8017846:	3710      	adds	r7, #16
 8017848:	46bd      	mov	sp, r7
 801784a:	bd80      	pop	{r7, pc}
 801784c:	20002714 	.word	0x20002714
 8017850:	e000ed04 	.word	0xe000ed04

08017854 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8017854:	b580      	push	{r7, lr}
 8017856:	b088      	sub	sp, #32
 8017858:	af00      	add	r7, sp, #0
 801785a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8017860:	69bb      	ldr	r3, [r7, #24]
 8017862:	2b00      	cmp	r3, #0
 8017864:	d10a      	bne.n	801787c <eTaskGetState+0x28>
	__asm volatile
 8017866:	f04f 0350 	mov.w	r3, #80	; 0x50
 801786a:	f383 8811 	msr	BASEPRI, r3
 801786e:	f3bf 8f6f 	isb	sy
 8017872:	f3bf 8f4f 	dsb	sy
 8017876:	60bb      	str	r3, [r7, #8]
}
 8017878:	bf00      	nop
 801787a:	e7fe      	b.n	801787a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 801787c:	4b23      	ldr	r3, [pc, #140]	; (801790c <eTaskGetState+0xb8>)
 801787e:	681b      	ldr	r3, [r3, #0]
 8017880:	69ba      	ldr	r2, [r7, #24]
 8017882:	429a      	cmp	r2, r3
 8017884:	d102      	bne.n	801788c <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8017886:	2300      	movs	r3, #0
 8017888:	77fb      	strb	r3, [r7, #31]
 801788a:	e03a      	b.n	8017902 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 801788c:	f001 fba2 	bl	8018fd4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8017890:	69bb      	ldr	r3, [r7, #24]
 8017892:	695b      	ldr	r3, [r3, #20]
 8017894:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8017896:	4b1e      	ldr	r3, [pc, #120]	; (8017910 <eTaskGetState+0xbc>)
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 801789c:	4b1d      	ldr	r3, [pc, #116]	; (8017914 <eTaskGetState+0xc0>)
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80178a2:	f001 fbc7 	bl	8019034 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80178a6:	697a      	ldr	r2, [r7, #20]
 80178a8:	693b      	ldr	r3, [r7, #16]
 80178aa:	429a      	cmp	r2, r3
 80178ac:	d003      	beq.n	80178b6 <eTaskGetState+0x62>
 80178ae:	697a      	ldr	r2, [r7, #20]
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	429a      	cmp	r2, r3
 80178b4:	d102      	bne.n	80178bc <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80178b6:	2302      	movs	r3, #2
 80178b8:	77fb      	strb	r3, [r7, #31]
 80178ba:	e022      	b.n	8017902 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80178bc:	697b      	ldr	r3, [r7, #20]
 80178be:	4a16      	ldr	r2, [pc, #88]	; (8017918 <eTaskGetState+0xc4>)
 80178c0:	4293      	cmp	r3, r2
 80178c2:	d112      	bne.n	80178ea <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80178c4:	69bb      	ldr	r3, [r7, #24]
 80178c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d10b      	bne.n	80178e4 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80178cc:	69bb      	ldr	r3, [r7, #24]
 80178ce:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80178d2:	b2db      	uxtb	r3, r3
 80178d4:	2b01      	cmp	r3, #1
 80178d6:	d102      	bne.n	80178de <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 80178d8:	2302      	movs	r3, #2
 80178da:	77fb      	strb	r3, [r7, #31]
 80178dc:	e011      	b.n	8017902 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 80178de:	2303      	movs	r3, #3
 80178e0:	77fb      	strb	r3, [r7, #31]
 80178e2:	e00e      	b.n	8017902 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80178e4:	2302      	movs	r3, #2
 80178e6:	77fb      	strb	r3, [r7, #31]
 80178e8:	e00b      	b.n	8017902 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80178ea:	697b      	ldr	r3, [r7, #20]
 80178ec:	4a0b      	ldr	r2, [pc, #44]	; (801791c <eTaskGetState+0xc8>)
 80178ee:	4293      	cmp	r3, r2
 80178f0:	d002      	beq.n	80178f8 <eTaskGetState+0xa4>
 80178f2:	697b      	ldr	r3, [r7, #20]
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d102      	bne.n	80178fe <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80178f8:	2304      	movs	r3, #4
 80178fa:	77fb      	strb	r3, [r7, #31]
 80178fc:	e001      	b.n	8017902 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80178fe:	2301      	movs	r3, #1
 8017900:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8017902:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8017904:	4618      	mov	r0, r3
 8017906:	3720      	adds	r7, #32
 8017908:	46bd      	mov	sp, r7
 801790a:	bd80      	pop	{r7, pc}
 801790c:	20002218 	.word	0x20002218
 8017910:	200026a4 	.word	0x200026a4
 8017914:	200026a8 	.word	0x200026a8
 8017918:	200026d8 	.word	0x200026d8
 801791c:	200026c0 	.word	0x200026c0

08017920 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8017920:	b480      	push	{r7}
 8017922:	b087      	sub	sp, #28
 8017924:	af00      	add	r7, sp, #0
 8017926:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8017928:	2300      	movs	r3, #0
 801792a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	2b00      	cmp	r3, #0
 8017934:	d10a      	bne.n	801794c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8017936:	f04f 0350 	mov.w	r3, #80	; 0x50
 801793a:	f383 8811 	msr	BASEPRI, r3
 801793e:	f3bf 8f6f 	isb	sy
 8017942:	f3bf 8f4f 	dsb	sy
 8017946:	60fb      	str	r3, [r7, #12]
}
 8017948:	bf00      	nop
 801794a:	e7fe      	b.n	801794a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801794c:	693b      	ldr	r3, [r7, #16]
 801794e:	695b      	ldr	r3, [r3, #20]
 8017950:	4a0a      	ldr	r2, [pc, #40]	; (801797c <prvTaskIsTaskSuspended+0x5c>)
 8017952:	4293      	cmp	r3, r2
 8017954:	d10a      	bne.n	801796c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8017956:	693b      	ldr	r3, [r7, #16]
 8017958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801795a:	4a09      	ldr	r2, [pc, #36]	; (8017980 <prvTaskIsTaskSuspended+0x60>)
 801795c:	4293      	cmp	r3, r2
 801795e:	d005      	beq.n	801796c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8017960:	693b      	ldr	r3, [r7, #16]
 8017962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017964:	2b00      	cmp	r3, #0
 8017966:	d101      	bne.n	801796c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8017968:	2301      	movs	r3, #1
 801796a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801796c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801796e:	4618      	mov	r0, r3
 8017970:	371c      	adds	r7, #28
 8017972:	46bd      	mov	sp, r7
 8017974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017978:	4770      	bx	lr
 801797a:	bf00      	nop
 801797c:	200026d8 	.word	0x200026d8
 8017980:	200026ac 	.word	0x200026ac

08017984 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8017984:	b580      	push	{r7, lr}
 8017986:	b084      	sub	sp, #16
 8017988:	af00      	add	r7, sp, #0
 801798a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	2b00      	cmp	r3, #0
 8017994:	d10a      	bne.n	80179ac <vTaskResume+0x28>
	__asm volatile
 8017996:	f04f 0350 	mov.w	r3, #80	; 0x50
 801799a:	f383 8811 	msr	BASEPRI, r3
 801799e:	f3bf 8f6f 	isb	sy
 80179a2:	f3bf 8f4f 	dsb	sy
 80179a6:	60bb      	str	r3, [r7, #8]
}
 80179a8:	bf00      	nop
 80179aa:	e7fe      	b.n	80179aa <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80179ac:	4b20      	ldr	r3, [pc, #128]	; (8017a30 <vTaskResume+0xac>)
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	68fa      	ldr	r2, [r7, #12]
 80179b2:	429a      	cmp	r2, r3
 80179b4:	d038      	beq.n	8017a28 <vTaskResume+0xa4>
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d035      	beq.n	8017a28 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80179bc:	f001 fb0a 	bl	8018fd4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80179c0:	68f8      	ldr	r0, [r7, #12]
 80179c2:	f7ff ffad 	bl	8017920 <prvTaskIsTaskSuspended>
 80179c6:	4603      	mov	r3, r0
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d02b      	beq.n	8017a24 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80179cc:	68fb      	ldr	r3, [r7, #12]
 80179ce:	3304      	adds	r3, #4
 80179d0:	4618      	mov	r0, r3
 80179d2:	f7fe fca9 	bl	8016328 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80179d6:	68fb      	ldr	r3, [r7, #12]
 80179d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179da:	4b16      	ldr	r3, [pc, #88]	; (8017a34 <vTaskResume+0xb0>)
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	429a      	cmp	r2, r3
 80179e0:	d903      	bls.n	80179ea <vTaskResume+0x66>
 80179e2:	68fb      	ldr	r3, [r7, #12]
 80179e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179e6:	4a13      	ldr	r2, [pc, #76]	; (8017a34 <vTaskResume+0xb0>)
 80179e8:	6013      	str	r3, [r2, #0]
 80179ea:	68fb      	ldr	r3, [r7, #12]
 80179ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179ee:	4613      	mov	r3, r2
 80179f0:	009b      	lsls	r3, r3, #2
 80179f2:	4413      	add	r3, r2
 80179f4:	009b      	lsls	r3, r3, #2
 80179f6:	4a10      	ldr	r2, [pc, #64]	; (8017a38 <vTaskResume+0xb4>)
 80179f8:	441a      	add	r2, r3
 80179fa:	68fb      	ldr	r3, [r7, #12]
 80179fc:	3304      	adds	r3, #4
 80179fe:	4619      	mov	r1, r3
 8017a00:	4610      	mov	r0, r2
 8017a02:	f7fe fc34 	bl	801626e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a0a:	4b09      	ldr	r3, [pc, #36]	; (8017a30 <vTaskResume+0xac>)
 8017a0c:	681b      	ldr	r3, [r3, #0]
 8017a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a10:	429a      	cmp	r2, r3
 8017a12:	d307      	bcc.n	8017a24 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8017a14:	4b09      	ldr	r3, [pc, #36]	; (8017a3c <vTaskResume+0xb8>)
 8017a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a1a:	601a      	str	r2, [r3, #0]
 8017a1c:	f3bf 8f4f 	dsb	sy
 8017a20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8017a24:	f001 fb06 	bl	8019034 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017a28:	bf00      	nop
 8017a2a:	3710      	adds	r7, #16
 8017a2c:	46bd      	mov	sp, r7
 8017a2e:	bd80      	pop	{r7, pc}
 8017a30:	20002218 	.word	0x20002218
 8017a34:	200026f4 	.word	0x200026f4
 8017a38:	2000221c 	.word	0x2000221c
 8017a3c:	e000ed04 	.word	0xe000ed04

08017a40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017a40:	b580      	push	{r7, lr}
 8017a42:	b08a      	sub	sp, #40	; 0x28
 8017a44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017a46:	2300      	movs	r3, #0
 8017a48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017a4a:	2300      	movs	r3, #0
 8017a4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017a4e:	463a      	mov	r2, r7
 8017a50:	1d39      	adds	r1, r7, #4
 8017a52:	f107 0308 	add.w	r3, r7, #8
 8017a56:	4618      	mov	r0, r3
 8017a58:	f7fe fba8 	bl	80161ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017a5c:	6839      	ldr	r1, [r7, #0]
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	68ba      	ldr	r2, [r7, #8]
 8017a62:	9202      	str	r2, [sp, #8]
 8017a64:	9301      	str	r3, [sp, #4]
 8017a66:	2300      	movs	r3, #0
 8017a68:	9300      	str	r3, [sp, #0]
 8017a6a:	2300      	movs	r3, #0
 8017a6c:	460a      	mov	r2, r1
 8017a6e:	4924      	ldr	r1, [pc, #144]	; (8017b00 <vTaskStartScheduler+0xc0>)
 8017a70:	4824      	ldr	r0, [pc, #144]	; (8017b04 <vTaskStartScheduler+0xc4>)
 8017a72:	f7ff fc91 	bl	8017398 <xTaskCreateStatic>
 8017a76:	4603      	mov	r3, r0
 8017a78:	4a23      	ldr	r2, [pc, #140]	; (8017b08 <vTaskStartScheduler+0xc8>)
 8017a7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017a7c:	4b22      	ldr	r3, [pc, #136]	; (8017b08 <vTaskStartScheduler+0xc8>)
 8017a7e:	681b      	ldr	r3, [r3, #0]
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d002      	beq.n	8017a8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017a84:	2301      	movs	r3, #1
 8017a86:	617b      	str	r3, [r7, #20]
 8017a88:	e001      	b.n	8017a8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8017a8e:	697b      	ldr	r3, [r7, #20]
 8017a90:	2b01      	cmp	r3, #1
 8017a92:	d102      	bne.n	8017a9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8017a94:	f000 fe1e 	bl	80186d4 <xTimerCreateTimerTask>
 8017a98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017a9a:	697b      	ldr	r3, [r7, #20]
 8017a9c:	2b01      	cmp	r3, #1
 8017a9e:	d11b      	bne.n	8017ad8 <vTaskStartScheduler+0x98>
	__asm volatile
 8017aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017aa4:	f383 8811 	msr	BASEPRI, r3
 8017aa8:	f3bf 8f6f 	isb	sy
 8017aac:	f3bf 8f4f 	dsb	sy
 8017ab0:	613b      	str	r3, [r7, #16]
}
 8017ab2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017ab4:	4b15      	ldr	r3, [pc, #84]	; (8017b0c <vTaskStartScheduler+0xcc>)
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	3354      	adds	r3, #84	; 0x54
 8017aba:	4a15      	ldr	r2, [pc, #84]	; (8017b10 <vTaskStartScheduler+0xd0>)
 8017abc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8017abe:	4b15      	ldr	r3, [pc, #84]	; (8017b14 <vTaskStartScheduler+0xd4>)
 8017ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8017ac4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017ac6:	4b14      	ldr	r3, [pc, #80]	; (8017b18 <vTaskStartScheduler+0xd8>)
 8017ac8:	2201      	movs	r2, #1
 8017aca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017acc:	4b13      	ldr	r3, [pc, #76]	; (8017b1c <vTaskStartScheduler+0xdc>)
 8017ace:	2200      	movs	r2, #0
 8017ad0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017ad2:	f001 f9dd 	bl	8018e90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017ad6:	e00e      	b.n	8017af6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017ad8:	697b      	ldr	r3, [r7, #20]
 8017ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ade:	d10a      	bne.n	8017af6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8017ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ae4:	f383 8811 	msr	BASEPRI, r3
 8017ae8:	f3bf 8f6f 	isb	sy
 8017aec:	f3bf 8f4f 	dsb	sy
 8017af0:	60fb      	str	r3, [r7, #12]
}
 8017af2:	bf00      	nop
 8017af4:	e7fe      	b.n	8017af4 <vTaskStartScheduler+0xb4>
}
 8017af6:	bf00      	nop
 8017af8:	3718      	adds	r7, #24
 8017afa:	46bd      	mov	sp, r7
 8017afc:	bd80      	pop	{r7, pc}
 8017afe:	bf00      	nop
 8017b00:	08022904 	.word	0x08022904
 8017b04:	08018145 	.word	0x08018145
 8017b08:	20002710 	.word	0x20002710
 8017b0c:	20002218 	.word	0x20002218
 8017b10:	200000f8 	.word	0x200000f8
 8017b14:	2000270c 	.word	0x2000270c
 8017b18:	200026f8 	.word	0x200026f8
 8017b1c:	200026f0 	.word	0x200026f0

08017b20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017b20:	b480      	push	{r7}
 8017b22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8017b24:	4b04      	ldr	r3, [pc, #16]	; (8017b38 <vTaskSuspendAll+0x18>)
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	3301      	adds	r3, #1
 8017b2a:	4a03      	ldr	r2, [pc, #12]	; (8017b38 <vTaskSuspendAll+0x18>)
 8017b2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8017b2e:	bf00      	nop
 8017b30:	46bd      	mov	sp, r7
 8017b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b36:	4770      	bx	lr
 8017b38:	20002714 	.word	0x20002714

08017b3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017b3c:	b580      	push	{r7, lr}
 8017b3e:	b084      	sub	sp, #16
 8017b40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017b42:	2300      	movs	r3, #0
 8017b44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8017b46:	2300      	movs	r3, #0
 8017b48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8017b4a:	4b42      	ldr	r3, [pc, #264]	; (8017c54 <xTaskResumeAll+0x118>)
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	d10a      	bne.n	8017b68 <xTaskResumeAll+0x2c>
	__asm volatile
 8017b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b56:	f383 8811 	msr	BASEPRI, r3
 8017b5a:	f3bf 8f6f 	isb	sy
 8017b5e:	f3bf 8f4f 	dsb	sy
 8017b62:	603b      	str	r3, [r7, #0]
}
 8017b64:	bf00      	nop
 8017b66:	e7fe      	b.n	8017b66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8017b68:	f001 fa34 	bl	8018fd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017b6c:	4b39      	ldr	r3, [pc, #228]	; (8017c54 <xTaskResumeAll+0x118>)
 8017b6e:	681b      	ldr	r3, [r3, #0]
 8017b70:	3b01      	subs	r3, #1
 8017b72:	4a38      	ldr	r2, [pc, #224]	; (8017c54 <xTaskResumeAll+0x118>)
 8017b74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017b76:	4b37      	ldr	r3, [pc, #220]	; (8017c54 <xTaskResumeAll+0x118>)
 8017b78:	681b      	ldr	r3, [r3, #0]
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d162      	bne.n	8017c44 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017b7e:	4b36      	ldr	r3, [pc, #216]	; (8017c58 <xTaskResumeAll+0x11c>)
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d05e      	beq.n	8017c44 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017b86:	e02f      	b.n	8017be8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017b88:	4b34      	ldr	r3, [pc, #208]	; (8017c5c <xTaskResumeAll+0x120>)
 8017b8a:	68db      	ldr	r3, [r3, #12]
 8017b8c:	68db      	ldr	r3, [r3, #12]
 8017b8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	3318      	adds	r3, #24
 8017b94:	4618      	mov	r0, r3
 8017b96:	f7fe fbc7 	bl	8016328 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017b9a:	68fb      	ldr	r3, [r7, #12]
 8017b9c:	3304      	adds	r3, #4
 8017b9e:	4618      	mov	r0, r3
 8017ba0:	f7fe fbc2 	bl	8016328 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ba8:	4b2d      	ldr	r3, [pc, #180]	; (8017c60 <xTaskResumeAll+0x124>)
 8017baa:	681b      	ldr	r3, [r3, #0]
 8017bac:	429a      	cmp	r2, r3
 8017bae:	d903      	bls.n	8017bb8 <xTaskResumeAll+0x7c>
 8017bb0:	68fb      	ldr	r3, [r7, #12]
 8017bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bb4:	4a2a      	ldr	r2, [pc, #168]	; (8017c60 <xTaskResumeAll+0x124>)
 8017bb6:	6013      	str	r3, [r2, #0]
 8017bb8:	68fb      	ldr	r3, [r7, #12]
 8017bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017bbc:	4613      	mov	r3, r2
 8017bbe:	009b      	lsls	r3, r3, #2
 8017bc0:	4413      	add	r3, r2
 8017bc2:	009b      	lsls	r3, r3, #2
 8017bc4:	4a27      	ldr	r2, [pc, #156]	; (8017c64 <xTaskResumeAll+0x128>)
 8017bc6:	441a      	add	r2, r3
 8017bc8:	68fb      	ldr	r3, [r7, #12]
 8017bca:	3304      	adds	r3, #4
 8017bcc:	4619      	mov	r1, r3
 8017bce:	4610      	mov	r0, r2
 8017bd0:	f7fe fb4d 	bl	801626e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017bd8:	4b23      	ldr	r3, [pc, #140]	; (8017c68 <xTaskResumeAll+0x12c>)
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bde:	429a      	cmp	r2, r3
 8017be0:	d302      	bcc.n	8017be8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8017be2:	4b22      	ldr	r3, [pc, #136]	; (8017c6c <xTaskResumeAll+0x130>)
 8017be4:	2201      	movs	r2, #1
 8017be6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017be8:	4b1c      	ldr	r3, [pc, #112]	; (8017c5c <xTaskResumeAll+0x120>)
 8017bea:	681b      	ldr	r3, [r3, #0]
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d1cb      	bne.n	8017b88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d001      	beq.n	8017bfa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017bf6:	f000 fb5f 	bl	80182b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8017bfa:	4b1d      	ldr	r3, [pc, #116]	; (8017c70 <xTaskResumeAll+0x134>)
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d010      	beq.n	8017c28 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017c06:	f000 f847 	bl	8017c98 <xTaskIncrementTick>
 8017c0a:	4603      	mov	r3, r0
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d002      	beq.n	8017c16 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8017c10:	4b16      	ldr	r3, [pc, #88]	; (8017c6c <xTaskResumeAll+0x130>)
 8017c12:	2201      	movs	r2, #1
 8017c14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	3b01      	subs	r3, #1
 8017c1a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d1f1      	bne.n	8017c06 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8017c22:	4b13      	ldr	r3, [pc, #76]	; (8017c70 <xTaskResumeAll+0x134>)
 8017c24:	2200      	movs	r2, #0
 8017c26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017c28:	4b10      	ldr	r3, [pc, #64]	; (8017c6c <xTaskResumeAll+0x130>)
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d009      	beq.n	8017c44 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017c30:	2301      	movs	r3, #1
 8017c32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017c34:	4b0f      	ldr	r3, [pc, #60]	; (8017c74 <xTaskResumeAll+0x138>)
 8017c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017c3a:	601a      	str	r2, [r3, #0]
 8017c3c:	f3bf 8f4f 	dsb	sy
 8017c40:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017c44:	f001 f9f6 	bl	8019034 <vPortExitCritical>

	return xAlreadyYielded;
 8017c48:	68bb      	ldr	r3, [r7, #8]
}
 8017c4a:	4618      	mov	r0, r3
 8017c4c:	3710      	adds	r7, #16
 8017c4e:	46bd      	mov	sp, r7
 8017c50:	bd80      	pop	{r7, pc}
 8017c52:	bf00      	nop
 8017c54:	20002714 	.word	0x20002714
 8017c58:	200026ec 	.word	0x200026ec
 8017c5c:	200026ac 	.word	0x200026ac
 8017c60:	200026f4 	.word	0x200026f4
 8017c64:	2000221c 	.word	0x2000221c
 8017c68:	20002218 	.word	0x20002218
 8017c6c:	20002700 	.word	0x20002700
 8017c70:	200026fc 	.word	0x200026fc
 8017c74:	e000ed04 	.word	0xe000ed04

08017c78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017c78:	b480      	push	{r7}
 8017c7a:	b083      	sub	sp, #12
 8017c7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017c7e:	4b05      	ldr	r3, [pc, #20]	; (8017c94 <xTaskGetTickCount+0x1c>)
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017c84:	687b      	ldr	r3, [r7, #4]
}
 8017c86:	4618      	mov	r0, r3
 8017c88:	370c      	adds	r7, #12
 8017c8a:	46bd      	mov	sp, r7
 8017c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c90:	4770      	bx	lr
 8017c92:	bf00      	nop
 8017c94:	200026f0 	.word	0x200026f0

08017c98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017c98:	b580      	push	{r7, lr}
 8017c9a:	b086      	sub	sp, #24
 8017c9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017ca2:	4b4f      	ldr	r3, [pc, #316]	; (8017de0 <xTaskIncrementTick+0x148>)
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	f040 808f 	bne.w	8017dca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017cac:	4b4d      	ldr	r3, [pc, #308]	; (8017de4 <xTaskIncrementTick+0x14c>)
 8017cae:	681b      	ldr	r3, [r3, #0]
 8017cb0:	3301      	adds	r3, #1
 8017cb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017cb4:	4a4b      	ldr	r2, [pc, #300]	; (8017de4 <xTaskIncrementTick+0x14c>)
 8017cb6:	693b      	ldr	r3, [r7, #16]
 8017cb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017cba:	693b      	ldr	r3, [r7, #16]
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d120      	bne.n	8017d02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8017cc0:	4b49      	ldr	r3, [pc, #292]	; (8017de8 <xTaskIncrementTick+0x150>)
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d00a      	beq.n	8017ce0 <xTaskIncrementTick+0x48>
	__asm volatile
 8017cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cce:	f383 8811 	msr	BASEPRI, r3
 8017cd2:	f3bf 8f6f 	isb	sy
 8017cd6:	f3bf 8f4f 	dsb	sy
 8017cda:	603b      	str	r3, [r7, #0]
}
 8017cdc:	bf00      	nop
 8017cde:	e7fe      	b.n	8017cde <xTaskIncrementTick+0x46>
 8017ce0:	4b41      	ldr	r3, [pc, #260]	; (8017de8 <xTaskIncrementTick+0x150>)
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	60fb      	str	r3, [r7, #12]
 8017ce6:	4b41      	ldr	r3, [pc, #260]	; (8017dec <xTaskIncrementTick+0x154>)
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	4a3f      	ldr	r2, [pc, #252]	; (8017de8 <xTaskIncrementTick+0x150>)
 8017cec:	6013      	str	r3, [r2, #0]
 8017cee:	4a3f      	ldr	r2, [pc, #252]	; (8017dec <xTaskIncrementTick+0x154>)
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	6013      	str	r3, [r2, #0]
 8017cf4:	4b3e      	ldr	r3, [pc, #248]	; (8017df0 <xTaskIncrementTick+0x158>)
 8017cf6:	681b      	ldr	r3, [r3, #0]
 8017cf8:	3301      	adds	r3, #1
 8017cfa:	4a3d      	ldr	r2, [pc, #244]	; (8017df0 <xTaskIncrementTick+0x158>)
 8017cfc:	6013      	str	r3, [r2, #0]
 8017cfe:	f000 fadb 	bl	80182b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017d02:	4b3c      	ldr	r3, [pc, #240]	; (8017df4 <xTaskIncrementTick+0x15c>)
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	693a      	ldr	r2, [r7, #16]
 8017d08:	429a      	cmp	r2, r3
 8017d0a:	d349      	bcc.n	8017da0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017d0c:	4b36      	ldr	r3, [pc, #216]	; (8017de8 <xTaskIncrementTick+0x150>)
 8017d0e:	681b      	ldr	r3, [r3, #0]
 8017d10:	681b      	ldr	r3, [r3, #0]
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d104      	bne.n	8017d20 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017d16:	4b37      	ldr	r3, [pc, #220]	; (8017df4 <xTaskIncrementTick+0x15c>)
 8017d18:	f04f 32ff 	mov.w	r2, #4294967295
 8017d1c:	601a      	str	r2, [r3, #0]
					break;
 8017d1e:	e03f      	b.n	8017da0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017d20:	4b31      	ldr	r3, [pc, #196]	; (8017de8 <xTaskIncrementTick+0x150>)
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	68db      	ldr	r3, [r3, #12]
 8017d26:	68db      	ldr	r3, [r3, #12]
 8017d28:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017d2a:	68bb      	ldr	r3, [r7, #8]
 8017d2c:	685b      	ldr	r3, [r3, #4]
 8017d2e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017d30:	693a      	ldr	r2, [r7, #16]
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	429a      	cmp	r2, r3
 8017d36:	d203      	bcs.n	8017d40 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017d38:	4a2e      	ldr	r2, [pc, #184]	; (8017df4 <xTaskIncrementTick+0x15c>)
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017d3e:	e02f      	b.n	8017da0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017d40:	68bb      	ldr	r3, [r7, #8]
 8017d42:	3304      	adds	r3, #4
 8017d44:	4618      	mov	r0, r3
 8017d46:	f7fe faef 	bl	8016328 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017d4a:	68bb      	ldr	r3, [r7, #8]
 8017d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d004      	beq.n	8017d5c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017d52:	68bb      	ldr	r3, [r7, #8]
 8017d54:	3318      	adds	r3, #24
 8017d56:	4618      	mov	r0, r3
 8017d58:	f7fe fae6 	bl	8016328 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017d5c:	68bb      	ldr	r3, [r7, #8]
 8017d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017d60:	4b25      	ldr	r3, [pc, #148]	; (8017df8 <xTaskIncrementTick+0x160>)
 8017d62:	681b      	ldr	r3, [r3, #0]
 8017d64:	429a      	cmp	r2, r3
 8017d66:	d903      	bls.n	8017d70 <xTaskIncrementTick+0xd8>
 8017d68:	68bb      	ldr	r3, [r7, #8]
 8017d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d6c:	4a22      	ldr	r2, [pc, #136]	; (8017df8 <xTaskIncrementTick+0x160>)
 8017d6e:	6013      	str	r3, [r2, #0]
 8017d70:	68bb      	ldr	r3, [r7, #8]
 8017d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017d74:	4613      	mov	r3, r2
 8017d76:	009b      	lsls	r3, r3, #2
 8017d78:	4413      	add	r3, r2
 8017d7a:	009b      	lsls	r3, r3, #2
 8017d7c:	4a1f      	ldr	r2, [pc, #124]	; (8017dfc <xTaskIncrementTick+0x164>)
 8017d7e:	441a      	add	r2, r3
 8017d80:	68bb      	ldr	r3, [r7, #8]
 8017d82:	3304      	adds	r3, #4
 8017d84:	4619      	mov	r1, r3
 8017d86:	4610      	mov	r0, r2
 8017d88:	f7fe fa71 	bl	801626e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017d8c:	68bb      	ldr	r3, [r7, #8]
 8017d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017d90:	4b1b      	ldr	r3, [pc, #108]	; (8017e00 <xTaskIncrementTick+0x168>)
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d96:	429a      	cmp	r2, r3
 8017d98:	d3b8      	bcc.n	8017d0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8017d9a:	2301      	movs	r3, #1
 8017d9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017d9e:	e7b5      	b.n	8017d0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017da0:	4b17      	ldr	r3, [pc, #92]	; (8017e00 <xTaskIncrementTick+0x168>)
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017da6:	4915      	ldr	r1, [pc, #84]	; (8017dfc <xTaskIncrementTick+0x164>)
 8017da8:	4613      	mov	r3, r2
 8017daa:	009b      	lsls	r3, r3, #2
 8017dac:	4413      	add	r3, r2
 8017dae:	009b      	lsls	r3, r3, #2
 8017db0:	440b      	add	r3, r1
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	2b01      	cmp	r3, #1
 8017db6:	d901      	bls.n	8017dbc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8017db8:	2301      	movs	r3, #1
 8017dba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8017dbc:	4b11      	ldr	r3, [pc, #68]	; (8017e04 <xTaskIncrementTick+0x16c>)
 8017dbe:	681b      	ldr	r3, [r3, #0]
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d007      	beq.n	8017dd4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8017dc4:	2301      	movs	r3, #1
 8017dc6:	617b      	str	r3, [r7, #20]
 8017dc8:	e004      	b.n	8017dd4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8017dca:	4b0f      	ldr	r3, [pc, #60]	; (8017e08 <xTaskIncrementTick+0x170>)
 8017dcc:	681b      	ldr	r3, [r3, #0]
 8017dce:	3301      	adds	r3, #1
 8017dd0:	4a0d      	ldr	r2, [pc, #52]	; (8017e08 <xTaskIncrementTick+0x170>)
 8017dd2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8017dd4:	697b      	ldr	r3, [r7, #20]
}
 8017dd6:	4618      	mov	r0, r3
 8017dd8:	3718      	adds	r7, #24
 8017dda:	46bd      	mov	sp, r7
 8017ddc:	bd80      	pop	{r7, pc}
 8017dde:	bf00      	nop
 8017de0:	20002714 	.word	0x20002714
 8017de4:	200026f0 	.word	0x200026f0
 8017de8:	200026a4 	.word	0x200026a4
 8017dec:	200026a8 	.word	0x200026a8
 8017df0:	20002704 	.word	0x20002704
 8017df4:	2000270c 	.word	0x2000270c
 8017df8:	200026f4 	.word	0x200026f4
 8017dfc:	2000221c 	.word	0x2000221c
 8017e00:	20002218 	.word	0x20002218
 8017e04:	20002700 	.word	0x20002700
 8017e08:	200026fc 	.word	0x200026fc

08017e0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017e0c:	b480      	push	{r7}
 8017e0e:	b085      	sub	sp, #20
 8017e10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017e12:	4b2a      	ldr	r3, [pc, #168]	; (8017ebc <vTaskSwitchContext+0xb0>)
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d003      	beq.n	8017e22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017e1a:	4b29      	ldr	r3, [pc, #164]	; (8017ec0 <vTaskSwitchContext+0xb4>)
 8017e1c:	2201      	movs	r2, #1
 8017e1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017e20:	e046      	b.n	8017eb0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8017e22:	4b27      	ldr	r3, [pc, #156]	; (8017ec0 <vTaskSwitchContext+0xb4>)
 8017e24:	2200      	movs	r2, #0
 8017e26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017e28:	4b26      	ldr	r3, [pc, #152]	; (8017ec4 <vTaskSwitchContext+0xb8>)
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	60fb      	str	r3, [r7, #12]
 8017e2e:	e010      	b.n	8017e52 <vTaskSwitchContext+0x46>
 8017e30:	68fb      	ldr	r3, [r7, #12]
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d10a      	bne.n	8017e4c <vTaskSwitchContext+0x40>
	__asm volatile
 8017e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e3a:	f383 8811 	msr	BASEPRI, r3
 8017e3e:	f3bf 8f6f 	isb	sy
 8017e42:	f3bf 8f4f 	dsb	sy
 8017e46:	607b      	str	r3, [r7, #4]
}
 8017e48:	bf00      	nop
 8017e4a:	e7fe      	b.n	8017e4a <vTaskSwitchContext+0x3e>
 8017e4c:	68fb      	ldr	r3, [r7, #12]
 8017e4e:	3b01      	subs	r3, #1
 8017e50:	60fb      	str	r3, [r7, #12]
 8017e52:	491d      	ldr	r1, [pc, #116]	; (8017ec8 <vTaskSwitchContext+0xbc>)
 8017e54:	68fa      	ldr	r2, [r7, #12]
 8017e56:	4613      	mov	r3, r2
 8017e58:	009b      	lsls	r3, r3, #2
 8017e5a:	4413      	add	r3, r2
 8017e5c:	009b      	lsls	r3, r3, #2
 8017e5e:	440b      	add	r3, r1
 8017e60:	681b      	ldr	r3, [r3, #0]
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d0e4      	beq.n	8017e30 <vTaskSwitchContext+0x24>
 8017e66:	68fa      	ldr	r2, [r7, #12]
 8017e68:	4613      	mov	r3, r2
 8017e6a:	009b      	lsls	r3, r3, #2
 8017e6c:	4413      	add	r3, r2
 8017e6e:	009b      	lsls	r3, r3, #2
 8017e70:	4a15      	ldr	r2, [pc, #84]	; (8017ec8 <vTaskSwitchContext+0xbc>)
 8017e72:	4413      	add	r3, r2
 8017e74:	60bb      	str	r3, [r7, #8]
 8017e76:	68bb      	ldr	r3, [r7, #8]
 8017e78:	685b      	ldr	r3, [r3, #4]
 8017e7a:	685a      	ldr	r2, [r3, #4]
 8017e7c:	68bb      	ldr	r3, [r7, #8]
 8017e7e:	605a      	str	r2, [r3, #4]
 8017e80:	68bb      	ldr	r3, [r7, #8]
 8017e82:	685a      	ldr	r2, [r3, #4]
 8017e84:	68bb      	ldr	r3, [r7, #8]
 8017e86:	3308      	adds	r3, #8
 8017e88:	429a      	cmp	r2, r3
 8017e8a:	d104      	bne.n	8017e96 <vTaskSwitchContext+0x8a>
 8017e8c:	68bb      	ldr	r3, [r7, #8]
 8017e8e:	685b      	ldr	r3, [r3, #4]
 8017e90:	685a      	ldr	r2, [r3, #4]
 8017e92:	68bb      	ldr	r3, [r7, #8]
 8017e94:	605a      	str	r2, [r3, #4]
 8017e96:	68bb      	ldr	r3, [r7, #8]
 8017e98:	685b      	ldr	r3, [r3, #4]
 8017e9a:	68db      	ldr	r3, [r3, #12]
 8017e9c:	4a0b      	ldr	r2, [pc, #44]	; (8017ecc <vTaskSwitchContext+0xc0>)
 8017e9e:	6013      	str	r3, [r2, #0]
 8017ea0:	4a08      	ldr	r2, [pc, #32]	; (8017ec4 <vTaskSwitchContext+0xb8>)
 8017ea2:	68fb      	ldr	r3, [r7, #12]
 8017ea4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017ea6:	4b09      	ldr	r3, [pc, #36]	; (8017ecc <vTaskSwitchContext+0xc0>)
 8017ea8:	681b      	ldr	r3, [r3, #0]
 8017eaa:	3354      	adds	r3, #84	; 0x54
 8017eac:	4a08      	ldr	r2, [pc, #32]	; (8017ed0 <vTaskSwitchContext+0xc4>)
 8017eae:	6013      	str	r3, [r2, #0]
}
 8017eb0:	bf00      	nop
 8017eb2:	3714      	adds	r7, #20
 8017eb4:	46bd      	mov	sp, r7
 8017eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eba:	4770      	bx	lr
 8017ebc:	20002714 	.word	0x20002714
 8017ec0:	20002700 	.word	0x20002700
 8017ec4:	200026f4 	.word	0x200026f4
 8017ec8:	2000221c 	.word	0x2000221c
 8017ecc:	20002218 	.word	0x20002218
 8017ed0:	200000f8 	.word	0x200000f8

08017ed4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017ed4:	b580      	push	{r7, lr}
 8017ed6:	b084      	sub	sp, #16
 8017ed8:	af00      	add	r7, sp, #0
 8017eda:	6078      	str	r0, [r7, #4]
 8017edc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d10a      	bne.n	8017efa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8017ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ee8:	f383 8811 	msr	BASEPRI, r3
 8017eec:	f3bf 8f6f 	isb	sy
 8017ef0:	f3bf 8f4f 	dsb	sy
 8017ef4:	60fb      	str	r3, [r7, #12]
}
 8017ef6:	bf00      	nop
 8017ef8:	e7fe      	b.n	8017ef8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017efa:	4b07      	ldr	r3, [pc, #28]	; (8017f18 <vTaskPlaceOnEventList+0x44>)
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	3318      	adds	r3, #24
 8017f00:	4619      	mov	r1, r3
 8017f02:	6878      	ldr	r0, [r7, #4]
 8017f04:	f7fe f9d7 	bl	80162b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017f08:	2101      	movs	r1, #1
 8017f0a:	6838      	ldr	r0, [r7, #0]
 8017f0c:	f000 fb8e 	bl	801862c <prvAddCurrentTaskToDelayedList>
}
 8017f10:	bf00      	nop
 8017f12:	3710      	adds	r7, #16
 8017f14:	46bd      	mov	sp, r7
 8017f16:	bd80      	pop	{r7, pc}
 8017f18:	20002218 	.word	0x20002218

08017f1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017f1c:	b580      	push	{r7, lr}
 8017f1e:	b086      	sub	sp, #24
 8017f20:	af00      	add	r7, sp, #0
 8017f22:	60f8      	str	r0, [r7, #12]
 8017f24:	60b9      	str	r1, [r7, #8]
 8017f26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017f28:	68fb      	ldr	r3, [r7, #12]
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d10a      	bne.n	8017f44 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8017f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f32:	f383 8811 	msr	BASEPRI, r3
 8017f36:	f3bf 8f6f 	isb	sy
 8017f3a:	f3bf 8f4f 	dsb	sy
 8017f3e:	617b      	str	r3, [r7, #20]
}
 8017f40:	bf00      	nop
 8017f42:	e7fe      	b.n	8017f42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017f44:	4b0a      	ldr	r3, [pc, #40]	; (8017f70 <vTaskPlaceOnEventListRestricted+0x54>)
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	3318      	adds	r3, #24
 8017f4a:	4619      	mov	r1, r3
 8017f4c:	68f8      	ldr	r0, [r7, #12]
 8017f4e:	f7fe f98e 	bl	801626e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d002      	beq.n	8017f5e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8017f58:	f04f 33ff 	mov.w	r3, #4294967295
 8017f5c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017f5e:	6879      	ldr	r1, [r7, #4]
 8017f60:	68b8      	ldr	r0, [r7, #8]
 8017f62:	f000 fb63 	bl	801862c <prvAddCurrentTaskToDelayedList>
	}
 8017f66:	bf00      	nop
 8017f68:	3718      	adds	r7, #24
 8017f6a:	46bd      	mov	sp, r7
 8017f6c:	bd80      	pop	{r7, pc}
 8017f6e:	bf00      	nop
 8017f70:	20002218 	.word	0x20002218

08017f74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017f74:	b580      	push	{r7, lr}
 8017f76:	b086      	sub	sp, #24
 8017f78:	af00      	add	r7, sp, #0
 8017f7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	68db      	ldr	r3, [r3, #12]
 8017f80:	68db      	ldr	r3, [r3, #12]
 8017f82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017f84:	693b      	ldr	r3, [r7, #16]
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d10a      	bne.n	8017fa0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8017f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f8e:	f383 8811 	msr	BASEPRI, r3
 8017f92:	f3bf 8f6f 	isb	sy
 8017f96:	f3bf 8f4f 	dsb	sy
 8017f9a:	60fb      	str	r3, [r7, #12]
}
 8017f9c:	bf00      	nop
 8017f9e:	e7fe      	b.n	8017f9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017fa0:	693b      	ldr	r3, [r7, #16]
 8017fa2:	3318      	adds	r3, #24
 8017fa4:	4618      	mov	r0, r3
 8017fa6:	f7fe f9bf 	bl	8016328 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017faa:	4b1e      	ldr	r3, [pc, #120]	; (8018024 <xTaskRemoveFromEventList+0xb0>)
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d11d      	bne.n	8017fee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017fb2:	693b      	ldr	r3, [r7, #16]
 8017fb4:	3304      	adds	r3, #4
 8017fb6:	4618      	mov	r0, r3
 8017fb8:	f7fe f9b6 	bl	8016328 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017fbc:	693b      	ldr	r3, [r7, #16]
 8017fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017fc0:	4b19      	ldr	r3, [pc, #100]	; (8018028 <xTaskRemoveFromEventList+0xb4>)
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	429a      	cmp	r2, r3
 8017fc6:	d903      	bls.n	8017fd0 <xTaskRemoveFromEventList+0x5c>
 8017fc8:	693b      	ldr	r3, [r7, #16]
 8017fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fcc:	4a16      	ldr	r2, [pc, #88]	; (8018028 <xTaskRemoveFromEventList+0xb4>)
 8017fce:	6013      	str	r3, [r2, #0]
 8017fd0:	693b      	ldr	r3, [r7, #16]
 8017fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017fd4:	4613      	mov	r3, r2
 8017fd6:	009b      	lsls	r3, r3, #2
 8017fd8:	4413      	add	r3, r2
 8017fda:	009b      	lsls	r3, r3, #2
 8017fdc:	4a13      	ldr	r2, [pc, #76]	; (801802c <xTaskRemoveFromEventList+0xb8>)
 8017fde:	441a      	add	r2, r3
 8017fe0:	693b      	ldr	r3, [r7, #16]
 8017fe2:	3304      	adds	r3, #4
 8017fe4:	4619      	mov	r1, r3
 8017fe6:	4610      	mov	r0, r2
 8017fe8:	f7fe f941 	bl	801626e <vListInsertEnd>
 8017fec:	e005      	b.n	8017ffa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017fee:	693b      	ldr	r3, [r7, #16]
 8017ff0:	3318      	adds	r3, #24
 8017ff2:	4619      	mov	r1, r3
 8017ff4:	480e      	ldr	r0, [pc, #56]	; (8018030 <xTaskRemoveFromEventList+0xbc>)
 8017ff6:	f7fe f93a 	bl	801626e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017ffa:	693b      	ldr	r3, [r7, #16]
 8017ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ffe:	4b0d      	ldr	r3, [pc, #52]	; (8018034 <xTaskRemoveFromEventList+0xc0>)
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018004:	429a      	cmp	r2, r3
 8018006:	d905      	bls.n	8018014 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018008:	2301      	movs	r3, #1
 801800a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801800c:	4b0a      	ldr	r3, [pc, #40]	; (8018038 <xTaskRemoveFromEventList+0xc4>)
 801800e:	2201      	movs	r2, #1
 8018010:	601a      	str	r2, [r3, #0]
 8018012:	e001      	b.n	8018018 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8018014:	2300      	movs	r3, #0
 8018016:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018018:	697b      	ldr	r3, [r7, #20]
}
 801801a:	4618      	mov	r0, r3
 801801c:	3718      	adds	r7, #24
 801801e:	46bd      	mov	sp, r7
 8018020:	bd80      	pop	{r7, pc}
 8018022:	bf00      	nop
 8018024:	20002714 	.word	0x20002714
 8018028:	200026f4 	.word	0x200026f4
 801802c:	2000221c 	.word	0x2000221c
 8018030:	200026ac 	.word	0x200026ac
 8018034:	20002218 	.word	0x20002218
 8018038:	20002700 	.word	0x20002700

0801803c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801803c:	b480      	push	{r7}
 801803e:	b083      	sub	sp, #12
 8018040:	af00      	add	r7, sp, #0
 8018042:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018044:	4b06      	ldr	r3, [pc, #24]	; (8018060 <vTaskInternalSetTimeOutState+0x24>)
 8018046:	681a      	ldr	r2, [r3, #0]
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801804c:	4b05      	ldr	r3, [pc, #20]	; (8018064 <vTaskInternalSetTimeOutState+0x28>)
 801804e:	681a      	ldr	r2, [r3, #0]
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	605a      	str	r2, [r3, #4]
}
 8018054:	bf00      	nop
 8018056:	370c      	adds	r7, #12
 8018058:	46bd      	mov	sp, r7
 801805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801805e:	4770      	bx	lr
 8018060:	20002704 	.word	0x20002704
 8018064:	200026f0 	.word	0x200026f0

08018068 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018068:	b580      	push	{r7, lr}
 801806a:	b088      	sub	sp, #32
 801806c:	af00      	add	r7, sp, #0
 801806e:	6078      	str	r0, [r7, #4]
 8018070:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	2b00      	cmp	r3, #0
 8018076:	d10a      	bne.n	801808e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8018078:	f04f 0350 	mov.w	r3, #80	; 0x50
 801807c:	f383 8811 	msr	BASEPRI, r3
 8018080:	f3bf 8f6f 	isb	sy
 8018084:	f3bf 8f4f 	dsb	sy
 8018088:	613b      	str	r3, [r7, #16]
}
 801808a:	bf00      	nop
 801808c:	e7fe      	b.n	801808c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801808e:	683b      	ldr	r3, [r7, #0]
 8018090:	2b00      	cmp	r3, #0
 8018092:	d10a      	bne.n	80180aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8018094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018098:	f383 8811 	msr	BASEPRI, r3
 801809c:	f3bf 8f6f 	isb	sy
 80180a0:	f3bf 8f4f 	dsb	sy
 80180a4:	60fb      	str	r3, [r7, #12]
}
 80180a6:	bf00      	nop
 80180a8:	e7fe      	b.n	80180a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80180aa:	f000 ff93 	bl	8018fd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80180ae:	4b1d      	ldr	r3, [pc, #116]	; (8018124 <xTaskCheckForTimeOut+0xbc>)
 80180b0:	681b      	ldr	r3, [r3, #0]
 80180b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	685b      	ldr	r3, [r3, #4]
 80180b8:	69ba      	ldr	r2, [r7, #24]
 80180ba:	1ad3      	subs	r3, r2, r3
 80180bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80180be:	683b      	ldr	r3, [r7, #0]
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80180c6:	d102      	bne.n	80180ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80180c8:	2300      	movs	r3, #0
 80180ca:	61fb      	str	r3, [r7, #28]
 80180cc:	e023      	b.n	8018116 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	681a      	ldr	r2, [r3, #0]
 80180d2:	4b15      	ldr	r3, [pc, #84]	; (8018128 <xTaskCheckForTimeOut+0xc0>)
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	429a      	cmp	r2, r3
 80180d8:	d007      	beq.n	80180ea <xTaskCheckForTimeOut+0x82>
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	685b      	ldr	r3, [r3, #4]
 80180de:	69ba      	ldr	r2, [r7, #24]
 80180e0:	429a      	cmp	r2, r3
 80180e2:	d302      	bcc.n	80180ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80180e4:	2301      	movs	r3, #1
 80180e6:	61fb      	str	r3, [r7, #28]
 80180e8:	e015      	b.n	8018116 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80180ea:	683b      	ldr	r3, [r7, #0]
 80180ec:	681b      	ldr	r3, [r3, #0]
 80180ee:	697a      	ldr	r2, [r7, #20]
 80180f0:	429a      	cmp	r2, r3
 80180f2:	d20b      	bcs.n	801810c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80180f4:	683b      	ldr	r3, [r7, #0]
 80180f6:	681a      	ldr	r2, [r3, #0]
 80180f8:	697b      	ldr	r3, [r7, #20]
 80180fa:	1ad2      	subs	r2, r2, r3
 80180fc:	683b      	ldr	r3, [r7, #0]
 80180fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018100:	6878      	ldr	r0, [r7, #4]
 8018102:	f7ff ff9b 	bl	801803c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018106:	2300      	movs	r3, #0
 8018108:	61fb      	str	r3, [r7, #28]
 801810a:	e004      	b.n	8018116 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801810c:	683b      	ldr	r3, [r7, #0]
 801810e:	2200      	movs	r2, #0
 8018110:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018112:	2301      	movs	r3, #1
 8018114:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018116:	f000 ff8d 	bl	8019034 <vPortExitCritical>

	return xReturn;
 801811a:	69fb      	ldr	r3, [r7, #28]
}
 801811c:	4618      	mov	r0, r3
 801811e:	3720      	adds	r7, #32
 8018120:	46bd      	mov	sp, r7
 8018122:	bd80      	pop	{r7, pc}
 8018124:	200026f0 	.word	0x200026f0
 8018128:	20002704 	.word	0x20002704

0801812c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801812c:	b480      	push	{r7}
 801812e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018130:	4b03      	ldr	r3, [pc, #12]	; (8018140 <vTaskMissedYield+0x14>)
 8018132:	2201      	movs	r2, #1
 8018134:	601a      	str	r2, [r3, #0]
}
 8018136:	bf00      	nop
 8018138:	46bd      	mov	sp, r7
 801813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801813e:	4770      	bx	lr
 8018140:	20002700 	.word	0x20002700

08018144 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018144:	b580      	push	{r7, lr}
 8018146:	b082      	sub	sp, #8
 8018148:	af00      	add	r7, sp, #0
 801814a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801814c:	f000 f852 	bl	80181f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018150:	4b06      	ldr	r3, [pc, #24]	; (801816c <prvIdleTask+0x28>)
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	2b01      	cmp	r3, #1
 8018156:	d9f9      	bls.n	801814c <prvIdleTask+0x8>
			{
				taskYIELD();
 8018158:	4b05      	ldr	r3, [pc, #20]	; (8018170 <prvIdleTask+0x2c>)
 801815a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801815e:	601a      	str	r2, [r3, #0]
 8018160:	f3bf 8f4f 	dsb	sy
 8018164:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018168:	e7f0      	b.n	801814c <prvIdleTask+0x8>
 801816a:	bf00      	nop
 801816c:	2000221c 	.word	0x2000221c
 8018170:	e000ed04 	.word	0xe000ed04

08018174 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018174:	b580      	push	{r7, lr}
 8018176:	b082      	sub	sp, #8
 8018178:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801817a:	2300      	movs	r3, #0
 801817c:	607b      	str	r3, [r7, #4]
 801817e:	e00c      	b.n	801819a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018180:	687a      	ldr	r2, [r7, #4]
 8018182:	4613      	mov	r3, r2
 8018184:	009b      	lsls	r3, r3, #2
 8018186:	4413      	add	r3, r2
 8018188:	009b      	lsls	r3, r3, #2
 801818a:	4a12      	ldr	r2, [pc, #72]	; (80181d4 <prvInitialiseTaskLists+0x60>)
 801818c:	4413      	add	r3, r2
 801818e:	4618      	mov	r0, r3
 8018190:	f7fe f840 	bl	8016214 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	3301      	adds	r3, #1
 8018198:	607b      	str	r3, [r7, #4]
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	2b37      	cmp	r3, #55	; 0x37
 801819e:	d9ef      	bls.n	8018180 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80181a0:	480d      	ldr	r0, [pc, #52]	; (80181d8 <prvInitialiseTaskLists+0x64>)
 80181a2:	f7fe f837 	bl	8016214 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80181a6:	480d      	ldr	r0, [pc, #52]	; (80181dc <prvInitialiseTaskLists+0x68>)
 80181a8:	f7fe f834 	bl	8016214 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80181ac:	480c      	ldr	r0, [pc, #48]	; (80181e0 <prvInitialiseTaskLists+0x6c>)
 80181ae:	f7fe f831 	bl	8016214 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80181b2:	480c      	ldr	r0, [pc, #48]	; (80181e4 <prvInitialiseTaskLists+0x70>)
 80181b4:	f7fe f82e 	bl	8016214 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80181b8:	480b      	ldr	r0, [pc, #44]	; (80181e8 <prvInitialiseTaskLists+0x74>)
 80181ba:	f7fe f82b 	bl	8016214 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80181be:	4b0b      	ldr	r3, [pc, #44]	; (80181ec <prvInitialiseTaskLists+0x78>)
 80181c0:	4a05      	ldr	r2, [pc, #20]	; (80181d8 <prvInitialiseTaskLists+0x64>)
 80181c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80181c4:	4b0a      	ldr	r3, [pc, #40]	; (80181f0 <prvInitialiseTaskLists+0x7c>)
 80181c6:	4a05      	ldr	r2, [pc, #20]	; (80181dc <prvInitialiseTaskLists+0x68>)
 80181c8:	601a      	str	r2, [r3, #0]
}
 80181ca:	bf00      	nop
 80181cc:	3708      	adds	r7, #8
 80181ce:	46bd      	mov	sp, r7
 80181d0:	bd80      	pop	{r7, pc}
 80181d2:	bf00      	nop
 80181d4:	2000221c 	.word	0x2000221c
 80181d8:	2000267c 	.word	0x2000267c
 80181dc:	20002690 	.word	0x20002690
 80181e0:	200026ac 	.word	0x200026ac
 80181e4:	200026c0 	.word	0x200026c0
 80181e8:	200026d8 	.word	0x200026d8
 80181ec:	200026a4 	.word	0x200026a4
 80181f0:	200026a8 	.word	0x200026a8

080181f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80181f4:	b580      	push	{r7, lr}
 80181f6:	b082      	sub	sp, #8
 80181f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80181fa:	e019      	b.n	8018230 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80181fc:	f000 feea 	bl	8018fd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018200:	4b10      	ldr	r3, [pc, #64]	; (8018244 <prvCheckTasksWaitingTermination+0x50>)
 8018202:	68db      	ldr	r3, [r3, #12]
 8018204:	68db      	ldr	r3, [r3, #12]
 8018206:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	3304      	adds	r3, #4
 801820c:	4618      	mov	r0, r3
 801820e:	f7fe f88b 	bl	8016328 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018212:	4b0d      	ldr	r3, [pc, #52]	; (8018248 <prvCheckTasksWaitingTermination+0x54>)
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	3b01      	subs	r3, #1
 8018218:	4a0b      	ldr	r2, [pc, #44]	; (8018248 <prvCheckTasksWaitingTermination+0x54>)
 801821a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801821c:	4b0b      	ldr	r3, [pc, #44]	; (801824c <prvCheckTasksWaitingTermination+0x58>)
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	3b01      	subs	r3, #1
 8018222:	4a0a      	ldr	r2, [pc, #40]	; (801824c <prvCheckTasksWaitingTermination+0x58>)
 8018224:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018226:	f000 ff05 	bl	8019034 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801822a:	6878      	ldr	r0, [r7, #4]
 801822c:	f000 f810 	bl	8018250 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018230:	4b06      	ldr	r3, [pc, #24]	; (801824c <prvCheckTasksWaitingTermination+0x58>)
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	2b00      	cmp	r3, #0
 8018236:	d1e1      	bne.n	80181fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018238:	bf00      	nop
 801823a:	bf00      	nop
 801823c:	3708      	adds	r7, #8
 801823e:	46bd      	mov	sp, r7
 8018240:	bd80      	pop	{r7, pc}
 8018242:	bf00      	nop
 8018244:	200026c0 	.word	0x200026c0
 8018248:	200026ec 	.word	0x200026ec
 801824c:	200026d4 	.word	0x200026d4

08018250 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018250:	b580      	push	{r7, lr}
 8018252:	b084      	sub	sp, #16
 8018254:	af00      	add	r7, sp, #0
 8018256:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	3354      	adds	r3, #84	; 0x54
 801825c:	4618      	mov	r0, r3
 801825e:	f003 fe79 	bl	801bf54 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8018268:	2b00      	cmp	r3, #0
 801826a:	d108      	bne.n	801827e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018270:	4618      	mov	r0, r3
 8018272:	f001 f89d 	bl	80193b0 <vPortFree>
				vPortFree( pxTCB );
 8018276:	6878      	ldr	r0, [r7, #4]
 8018278:	f001 f89a 	bl	80193b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801827c:	e018      	b.n	80182b0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8018284:	2b01      	cmp	r3, #1
 8018286:	d103      	bne.n	8018290 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8018288:	6878      	ldr	r0, [r7, #4]
 801828a:	f001 f891 	bl	80193b0 <vPortFree>
	}
 801828e:	e00f      	b.n	80182b0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8018296:	2b02      	cmp	r3, #2
 8018298:	d00a      	beq.n	80182b0 <prvDeleteTCB+0x60>
	__asm volatile
 801829a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801829e:	f383 8811 	msr	BASEPRI, r3
 80182a2:	f3bf 8f6f 	isb	sy
 80182a6:	f3bf 8f4f 	dsb	sy
 80182aa:	60fb      	str	r3, [r7, #12]
}
 80182ac:	bf00      	nop
 80182ae:	e7fe      	b.n	80182ae <prvDeleteTCB+0x5e>
	}
 80182b0:	bf00      	nop
 80182b2:	3710      	adds	r7, #16
 80182b4:	46bd      	mov	sp, r7
 80182b6:	bd80      	pop	{r7, pc}

080182b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80182b8:	b480      	push	{r7}
 80182ba:	b083      	sub	sp, #12
 80182bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80182be:	4b0c      	ldr	r3, [pc, #48]	; (80182f0 <prvResetNextTaskUnblockTime+0x38>)
 80182c0:	681b      	ldr	r3, [r3, #0]
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d104      	bne.n	80182d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80182c8:	4b0a      	ldr	r3, [pc, #40]	; (80182f4 <prvResetNextTaskUnblockTime+0x3c>)
 80182ca:	f04f 32ff 	mov.w	r2, #4294967295
 80182ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80182d0:	e008      	b.n	80182e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80182d2:	4b07      	ldr	r3, [pc, #28]	; (80182f0 <prvResetNextTaskUnblockTime+0x38>)
 80182d4:	681b      	ldr	r3, [r3, #0]
 80182d6:	68db      	ldr	r3, [r3, #12]
 80182d8:	68db      	ldr	r3, [r3, #12]
 80182da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	685b      	ldr	r3, [r3, #4]
 80182e0:	4a04      	ldr	r2, [pc, #16]	; (80182f4 <prvResetNextTaskUnblockTime+0x3c>)
 80182e2:	6013      	str	r3, [r2, #0]
}
 80182e4:	bf00      	nop
 80182e6:	370c      	adds	r7, #12
 80182e8:	46bd      	mov	sp, r7
 80182ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182ee:	4770      	bx	lr
 80182f0:	200026a4 	.word	0x200026a4
 80182f4:	2000270c 	.word	0x2000270c

080182f8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80182f8:	b480      	push	{r7}
 80182fa:	b083      	sub	sp, #12
 80182fc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80182fe:	4b05      	ldr	r3, [pc, #20]	; (8018314 <xTaskGetCurrentTaskHandle+0x1c>)
 8018300:	681b      	ldr	r3, [r3, #0]
 8018302:	607b      	str	r3, [r7, #4]

		return xReturn;
 8018304:	687b      	ldr	r3, [r7, #4]
	}
 8018306:	4618      	mov	r0, r3
 8018308:	370c      	adds	r7, #12
 801830a:	46bd      	mov	sp, r7
 801830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018310:	4770      	bx	lr
 8018312:	bf00      	nop
 8018314:	20002218 	.word	0x20002218

08018318 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018318:	b480      	push	{r7}
 801831a:	b083      	sub	sp, #12
 801831c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801831e:	4b0b      	ldr	r3, [pc, #44]	; (801834c <xTaskGetSchedulerState+0x34>)
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	2b00      	cmp	r3, #0
 8018324:	d102      	bne.n	801832c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018326:	2301      	movs	r3, #1
 8018328:	607b      	str	r3, [r7, #4]
 801832a:	e008      	b.n	801833e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801832c:	4b08      	ldr	r3, [pc, #32]	; (8018350 <xTaskGetSchedulerState+0x38>)
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	2b00      	cmp	r3, #0
 8018332:	d102      	bne.n	801833a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018334:	2302      	movs	r3, #2
 8018336:	607b      	str	r3, [r7, #4]
 8018338:	e001      	b.n	801833e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801833a:	2300      	movs	r3, #0
 801833c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801833e:	687b      	ldr	r3, [r7, #4]
	}
 8018340:	4618      	mov	r0, r3
 8018342:	370c      	adds	r7, #12
 8018344:	46bd      	mov	sp, r7
 8018346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801834a:	4770      	bx	lr
 801834c:	200026f8 	.word	0x200026f8
 8018350:	20002714 	.word	0x20002714

08018354 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8018354:	b580      	push	{r7, lr}
 8018356:	b084      	sub	sp, #16
 8018358:	af00      	add	r7, sp, #0
 801835a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8018360:	2300      	movs	r3, #0
 8018362:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	2b00      	cmp	r3, #0
 8018368:	d051      	beq.n	801840e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801836a:	68bb      	ldr	r3, [r7, #8]
 801836c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801836e:	4b2a      	ldr	r3, [pc, #168]	; (8018418 <xTaskPriorityInherit+0xc4>)
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018374:	429a      	cmp	r2, r3
 8018376:	d241      	bcs.n	80183fc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018378:	68bb      	ldr	r3, [r7, #8]
 801837a:	699b      	ldr	r3, [r3, #24]
 801837c:	2b00      	cmp	r3, #0
 801837e:	db06      	blt.n	801838e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018380:	4b25      	ldr	r3, [pc, #148]	; (8018418 <xTaskPriorityInherit+0xc4>)
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018386:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801838a:	68bb      	ldr	r3, [r7, #8]
 801838c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801838e:	68bb      	ldr	r3, [r7, #8]
 8018390:	6959      	ldr	r1, [r3, #20]
 8018392:	68bb      	ldr	r3, [r7, #8]
 8018394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018396:	4613      	mov	r3, r2
 8018398:	009b      	lsls	r3, r3, #2
 801839a:	4413      	add	r3, r2
 801839c:	009b      	lsls	r3, r3, #2
 801839e:	4a1f      	ldr	r2, [pc, #124]	; (801841c <xTaskPriorityInherit+0xc8>)
 80183a0:	4413      	add	r3, r2
 80183a2:	4299      	cmp	r1, r3
 80183a4:	d122      	bne.n	80183ec <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80183a6:	68bb      	ldr	r3, [r7, #8]
 80183a8:	3304      	adds	r3, #4
 80183aa:	4618      	mov	r0, r3
 80183ac:	f7fd ffbc 	bl	8016328 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80183b0:	4b19      	ldr	r3, [pc, #100]	; (8018418 <xTaskPriorityInherit+0xc4>)
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183b6:	68bb      	ldr	r3, [r7, #8]
 80183b8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80183ba:	68bb      	ldr	r3, [r7, #8]
 80183bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183be:	4b18      	ldr	r3, [pc, #96]	; (8018420 <xTaskPriorityInherit+0xcc>)
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	429a      	cmp	r2, r3
 80183c4:	d903      	bls.n	80183ce <xTaskPriorityInherit+0x7a>
 80183c6:	68bb      	ldr	r3, [r7, #8]
 80183c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183ca:	4a15      	ldr	r2, [pc, #84]	; (8018420 <xTaskPriorityInherit+0xcc>)
 80183cc:	6013      	str	r3, [r2, #0]
 80183ce:	68bb      	ldr	r3, [r7, #8]
 80183d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183d2:	4613      	mov	r3, r2
 80183d4:	009b      	lsls	r3, r3, #2
 80183d6:	4413      	add	r3, r2
 80183d8:	009b      	lsls	r3, r3, #2
 80183da:	4a10      	ldr	r2, [pc, #64]	; (801841c <xTaskPriorityInherit+0xc8>)
 80183dc:	441a      	add	r2, r3
 80183de:	68bb      	ldr	r3, [r7, #8]
 80183e0:	3304      	adds	r3, #4
 80183e2:	4619      	mov	r1, r3
 80183e4:	4610      	mov	r0, r2
 80183e6:	f7fd ff42 	bl	801626e <vListInsertEnd>
 80183ea:	e004      	b.n	80183f6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80183ec:	4b0a      	ldr	r3, [pc, #40]	; (8018418 <xTaskPriorityInherit+0xc4>)
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183f2:	68bb      	ldr	r3, [r7, #8]
 80183f4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80183f6:	2301      	movs	r3, #1
 80183f8:	60fb      	str	r3, [r7, #12]
 80183fa:	e008      	b.n	801840e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80183fc:	68bb      	ldr	r3, [r7, #8]
 80183fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018400:	4b05      	ldr	r3, [pc, #20]	; (8018418 <xTaskPriorityInherit+0xc4>)
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018406:	429a      	cmp	r2, r3
 8018408:	d201      	bcs.n	801840e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801840a:	2301      	movs	r3, #1
 801840c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801840e:	68fb      	ldr	r3, [r7, #12]
	}
 8018410:	4618      	mov	r0, r3
 8018412:	3710      	adds	r7, #16
 8018414:	46bd      	mov	sp, r7
 8018416:	bd80      	pop	{r7, pc}
 8018418:	20002218 	.word	0x20002218
 801841c:	2000221c 	.word	0x2000221c
 8018420:	200026f4 	.word	0x200026f4

08018424 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018424:	b580      	push	{r7, lr}
 8018426:	b086      	sub	sp, #24
 8018428:	af00      	add	r7, sp, #0
 801842a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018430:	2300      	movs	r3, #0
 8018432:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	2b00      	cmp	r3, #0
 8018438:	d056      	beq.n	80184e8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801843a:	4b2e      	ldr	r3, [pc, #184]	; (80184f4 <xTaskPriorityDisinherit+0xd0>)
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	693a      	ldr	r2, [r7, #16]
 8018440:	429a      	cmp	r2, r3
 8018442:	d00a      	beq.n	801845a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018448:	f383 8811 	msr	BASEPRI, r3
 801844c:	f3bf 8f6f 	isb	sy
 8018450:	f3bf 8f4f 	dsb	sy
 8018454:	60fb      	str	r3, [r7, #12]
}
 8018456:	bf00      	nop
 8018458:	e7fe      	b.n	8018458 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801845a:	693b      	ldr	r3, [r7, #16]
 801845c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801845e:	2b00      	cmp	r3, #0
 8018460:	d10a      	bne.n	8018478 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8018462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018466:	f383 8811 	msr	BASEPRI, r3
 801846a:	f3bf 8f6f 	isb	sy
 801846e:	f3bf 8f4f 	dsb	sy
 8018472:	60bb      	str	r3, [r7, #8]
}
 8018474:	bf00      	nop
 8018476:	e7fe      	b.n	8018476 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8018478:	693b      	ldr	r3, [r7, #16]
 801847a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801847c:	1e5a      	subs	r2, r3, #1
 801847e:	693b      	ldr	r3, [r7, #16]
 8018480:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018482:	693b      	ldr	r3, [r7, #16]
 8018484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018486:	693b      	ldr	r3, [r7, #16]
 8018488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801848a:	429a      	cmp	r2, r3
 801848c:	d02c      	beq.n	80184e8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801848e:	693b      	ldr	r3, [r7, #16]
 8018490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018492:	2b00      	cmp	r3, #0
 8018494:	d128      	bne.n	80184e8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018496:	693b      	ldr	r3, [r7, #16]
 8018498:	3304      	adds	r3, #4
 801849a:	4618      	mov	r0, r3
 801849c:	f7fd ff44 	bl	8016328 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80184a0:	693b      	ldr	r3, [r7, #16]
 80184a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80184a4:	693b      	ldr	r3, [r7, #16]
 80184a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80184a8:	693b      	ldr	r3, [r7, #16]
 80184aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80184b0:	693b      	ldr	r3, [r7, #16]
 80184b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80184b4:	693b      	ldr	r3, [r7, #16]
 80184b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80184b8:	4b0f      	ldr	r3, [pc, #60]	; (80184f8 <xTaskPriorityDisinherit+0xd4>)
 80184ba:	681b      	ldr	r3, [r3, #0]
 80184bc:	429a      	cmp	r2, r3
 80184be:	d903      	bls.n	80184c8 <xTaskPriorityDisinherit+0xa4>
 80184c0:	693b      	ldr	r3, [r7, #16]
 80184c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184c4:	4a0c      	ldr	r2, [pc, #48]	; (80184f8 <xTaskPriorityDisinherit+0xd4>)
 80184c6:	6013      	str	r3, [r2, #0]
 80184c8:	693b      	ldr	r3, [r7, #16]
 80184ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80184cc:	4613      	mov	r3, r2
 80184ce:	009b      	lsls	r3, r3, #2
 80184d0:	4413      	add	r3, r2
 80184d2:	009b      	lsls	r3, r3, #2
 80184d4:	4a09      	ldr	r2, [pc, #36]	; (80184fc <xTaskPriorityDisinherit+0xd8>)
 80184d6:	441a      	add	r2, r3
 80184d8:	693b      	ldr	r3, [r7, #16]
 80184da:	3304      	adds	r3, #4
 80184dc:	4619      	mov	r1, r3
 80184de:	4610      	mov	r0, r2
 80184e0:	f7fd fec5 	bl	801626e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80184e4:	2301      	movs	r3, #1
 80184e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80184e8:	697b      	ldr	r3, [r7, #20]
	}
 80184ea:	4618      	mov	r0, r3
 80184ec:	3718      	adds	r7, #24
 80184ee:	46bd      	mov	sp, r7
 80184f0:	bd80      	pop	{r7, pc}
 80184f2:	bf00      	nop
 80184f4:	20002218 	.word	0x20002218
 80184f8:	200026f4 	.word	0x200026f4
 80184fc:	2000221c 	.word	0x2000221c

08018500 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8018500:	b580      	push	{r7, lr}
 8018502:	b088      	sub	sp, #32
 8018504:	af00      	add	r7, sp, #0
 8018506:	6078      	str	r0, [r7, #4]
 8018508:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801850e:	2301      	movs	r3, #1
 8018510:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	2b00      	cmp	r3, #0
 8018516:	d06a      	beq.n	80185ee <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8018518:	69bb      	ldr	r3, [r7, #24]
 801851a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801851c:	2b00      	cmp	r3, #0
 801851e:	d10a      	bne.n	8018536 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8018520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018524:	f383 8811 	msr	BASEPRI, r3
 8018528:	f3bf 8f6f 	isb	sy
 801852c:	f3bf 8f4f 	dsb	sy
 8018530:	60fb      	str	r3, [r7, #12]
}
 8018532:	bf00      	nop
 8018534:	e7fe      	b.n	8018534 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8018536:	69bb      	ldr	r3, [r7, #24]
 8018538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801853a:	683a      	ldr	r2, [r7, #0]
 801853c:	429a      	cmp	r2, r3
 801853e:	d902      	bls.n	8018546 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8018540:	683b      	ldr	r3, [r7, #0]
 8018542:	61fb      	str	r3, [r7, #28]
 8018544:	e002      	b.n	801854c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8018546:	69bb      	ldr	r3, [r7, #24]
 8018548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801854a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801854c:	69bb      	ldr	r3, [r7, #24]
 801854e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018550:	69fa      	ldr	r2, [r7, #28]
 8018552:	429a      	cmp	r2, r3
 8018554:	d04b      	beq.n	80185ee <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8018556:	69bb      	ldr	r3, [r7, #24]
 8018558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801855a:	697a      	ldr	r2, [r7, #20]
 801855c:	429a      	cmp	r2, r3
 801855e:	d146      	bne.n	80185ee <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8018560:	4b25      	ldr	r3, [pc, #148]	; (80185f8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8018562:	681b      	ldr	r3, [r3, #0]
 8018564:	69ba      	ldr	r2, [r7, #24]
 8018566:	429a      	cmp	r2, r3
 8018568:	d10a      	bne.n	8018580 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801856a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801856e:	f383 8811 	msr	BASEPRI, r3
 8018572:	f3bf 8f6f 	isb	sy
 8018576:	f3bf 8f4f 	dsb	sy
 801857a:	60bb      	str	r3, [r7, #8]
}
 801857c:	bf00      	nop
 801857e:	e7fe      	b.n	801857e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8018580:	69bb      	ldr	r3, [r7, #24]
 8018582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018584:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8018586:	69bb      	ldr	r3, [r7, #24]
 8018588:	69fa      	ldr	r2, [r7, #28]
 801858a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801858c:	69bb      	ldr	r3, [r7, #24]
 801858e:	699b      	ldr	r3, [r3, #24]
 8018590:	2b00      	cmp	r3, #0
 8018592:	db04      	blt.n	801859e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018594:	69fb      	ldr	r3, [r7, #28]
 8018596:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801859a:	69bb      	ldr	r3, [r7, #24]
 801859c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801859e:	69bb      	ldr	r3, [r7, #24]
 80185a0:	6959      	ldr	r1, [r3, #20]
 80185a2:	693a      	ldr	r2, [r7, #16]
 80185a4:	4613      	mov	r3, r2
 80185a6:	009b      	lsls	r3, r3, #2
 80185a8:	4413      	add	r3, r2
 80185aa:	009b      	lsls	r3, r3, #2
 80185ac:	4a13      	ldr	r2, [pc, #76]	; (80185fc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80185ae:	4413      	add	r3, r2
 80185b0:	4299      	cmp	r1, r3
 80185b2:	d11c      	bne.n	80185ee <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80185b4:	69bb      	ldr	r3, [r7, #24]
 80185b6:	3304      	adds	r3, #4
 80185b8:	4618      	mov	r0, r3
 80185ba:	f7fd feb5 	bl	8016328 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80185be:	69bb      	ldr	r3, [r7, #24]
 80185c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185c2:	4b0f      	ldr	r3, [pc, #60]	; (8018600 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80185c4:	681b      	ldr	r3, [r3, #0]
 80185c6:	429a      	cmp	r2, r3
 80185c8:	d903      	bls.n	80185d2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80185ca:	69bb      	ldr	r3, [r7, #24]
 80185cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185ce:	4a0c      	ldr	r2, [pc, #48]	; (8018600 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80185d0:	6013      	str	r3, [r2, #0]
 80185d2:	69bb      	ldr	r3, [r7, #24]
 80185d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185d6:	4613      	mov	r3, r2
 80185d8:	009b      	lsls	r3, r3, #2
 80185da:	4413      	add	r3, r2
 80185dc:	009b      	lsls	r3, r3, #2
 80185de:	4a07      	ldr	r2, [pc, #28]	; (80185fc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80185e0:	441a      	add	r2, r3
 80185e2:	69bb      	ldr	r3, [r7, #24]
 80185e4:	3304      	adds	r3, #4
 80185e6:	4619      	mov	r1, r3
 80185e8:	4610      	mov	r0, r2
 80185ea:	f7fd fe40 	bl	801626e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80185ee:	bf00      	nop
 80185f0:	3720      	adds	r7, #32
 80185f2:	46bd      	mov	sp, r7
 80185f4:	bd80      	pop	{r7, pc}
 80185f6:	bf00      	nop
 80185f8:	20002218 	.word	0x20002218
 80185fc:	2000221c 	.word	0x2000221c
 8018600:	200026f4 	.word	0x200026f4

08018604 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8018604:	b480      	push	{r7}
 8018606:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018608:	4b07      	ldr	r3, [pc, #28]	; (8018628 <pvTaskIncrementMutexHeldCount+0x24>)
 801860a:	681b      	ldr	r3, [r3, #0]
 801860c:	2b00      	cmp	r3, #0
 801860e:	d004      	beq.n	801861a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8018610:	4b05      	ldr	r3, [pc, #20]	; (8018628 <pvTaskIncrementMutexHeldCount+0x24>)
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018616:	3201      	adds	r2, #1
 8018618:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801861a:	4b03      	ldr	r3, [pc, #12]	; (8018628 <pvTaskIncrementMutexHeldCount+0x24>)
 801861c:	681b      	ldr	r3, [r3, #0]
	}
 801861e:	4618      	mov	r0, r3
 8018620:	46bd      	mov	sp, r7
 8018622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018626:	4770      	bx	lr
 8018628:	20002218 	.word	0x20002218

0801862c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801862c:	b580      	push	{r7, lr}
 801862e:	b084      	sub	sp, #16
 8018630:	af00      	add	r7, sp, #0
 8018632:	6078      	str	r0, [r7, #4]
 8018634:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018636:	4b21      	ldr	r3, [pc, #132]	; (80186bc <prvAddCurrentTaskToDelayedList+0x90>)
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801863c:	4b20      	ldr	r3, [pc, #128]	; (80186c0 <prvAddCurrentTaskToDelayedList+0x94>)
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	3304      	adds	r3, #4
 8018642:	4618      	mov	r0, r3
 8018644:	f7fd fe70 	bl	8016328 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801864e:	d10a      	bne.n	8018666 <prvAddCurrentTaskToDelayedList+0x3a>
 8018650:	683b      	ldr	r3, [r7, #0]
 8018652:	2b00      	cmp	r3, #0
 8018654:	d007      	beq.n	8018666 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018656:	4b1a      	ldr	r3, [pc, #104]	; (80186c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	3304      	adds	r3, #4
 801865c:	4619      	mov	r1, r3
 801865e:	4819      	ldr	r0, [pc, #100]	; (80186c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8018660:	f7fd fe05 	bl	801626e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018664:	e026      	b.n	80186b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018666:	68fa      	ldr	r2, [r7, #12]
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	4413      	add	r3, r2
 801866c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801866e:	4b14      	ldr	r3, [pc, #80]	; (80186c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	68ba      	ldr	r2, [r7, #8]
 8018674:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018676:	68ba      	ldr	r2, [r7, #8]
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	429a      	cmp	r2, r3
 801867c:	d209      	bcs.n	8018692 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801867e:	4b12      	ldr	r3, [pc, #72]	; (80186c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8018680:	681a      	ldr	r2, [r3, #0]
 8018682:	4b0f      	ldr	r3, [pc, #60]	; (80186c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	3304      	adds	r3, #4
 8018688:	4619      	mov	r1, r3
 801868a:	4610      	mov	r0, r2
 801868c:	f7fd fe13 	bl	80162b6 <vListInsert>
}
 8018690:	e010      	b.n	80186b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018692:	4b0e      	ldr	r3, [pc, #56]	; (80186cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8018694:	681a      	ldr	r2, [r3, #0]
 8018696:	4b0a      	ldr	r3, [pc, #40]	; (80186c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	3304      	adds	r3, #4
 801869c:	4619      	mov	r1, r3
 801869e:	4610      	mov	r0, r2
 80186a0:	f7fd fe09 	bl	80162b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80186a4:	4b0a      	ldr	r3, [pc, #40]	; (80186d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	68ba      	ldr	r2, [r7, #8]
 80186aa:	429a      	cmp	r2, r3
 80186ac:	d202      	bcs.n	80186b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80186ae:	4a08      	ldr	r2, [pc, #32]	; (80186d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80186b0:	68bb      	ldr	r3, [r7, #8]
 80186b2:	6013      	str	r3, [r2, #0]
}
 80186b4:	bf00      	nop
 80186b6:	3710      	adds	r7, #16
 80186b8:	46bd      	mov	sp, r7
 80186ba:	bd80      	pop	{r7, pc}
 80186bc:	200026f0 	.word	0x200026f0
 80186c0:	20002218 	.word	0x20002218
 80186c4:	200026d8 	.word	0x200026d8
 80186c8:	200026a8 	.word	0x200026a8
 80186cc:	200026a4 	.word	0x200026a4
 80186d0:	2000270c 	.word	0x2000270c

080186d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80186d4:	b580      	push	{r7, lr}
 80186d6:	b08a      	sub	sp, #40	; 0x28
 80186d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80186da:	2300      	movs	r3, #0
 80186dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80186de:	f000 fb09 	bl	8018cf4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80186e2:	4b1c      	ldr	r3, [pc, #112]	; (8018754 <xTimerCreateTimerTask+0x80>)
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d021      	beq.n	801872e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80186ea:	2300      	movs	r3, #0
 80186ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80186ee:	2300      	movs	r3, #0
 80186f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80186f2:	1d3a      	adds	r2, r7, #4
 80186f4:	f107 0108 	add.w	r1, r7, #8
 80186f8:	f107 030c 	add.w	r3, r7, #12
 80186fc:	4618      	mov	r0, r3
 80186fe:	f7fd fd6f 	bl	80161e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018702:	6879      	ldr	r1, [r7, #4]
 8018704:	68bb      	ldr	r3, [r7, #8]
 8018706:	68fa      	ldr	r2, [r7, #12]
 8018708:	9202      	str	r2, [sp, #8]
 801870a:	9301      	str	r3, [sp, #4]
 801870c:	2337      	movs	r3, #55	; 0x37
 801870e:	9300      	str	r3, [sp, #0]
 8018710:	2300      	movs	r3, #0
 8018712:	460a      	mov	r2, r1
 8018714:	4910      	ldr	r1, [pc, #64]	; (8018758 <xTimerCreateTimerTask+0x84>)
 8018716:	4811      	ldr	r0, [pc, #68]	; (801875c <xTimerCreateTimerTask+0x88>)
 8018718:	f7fe fe3e 	bl	8017398 <xTaskCreateStatic>
 801871c:	4603      	mov	r3, r0
 801871e:	4a10      	ldr	r2, [pc, #64]	; (8018760 <xTimerCreateTimerTask+0x8c>)
 8018720:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018722:	4b0f      	ldr	r3, [pc, #60]	; (8018760 <xTimerCreateTimerTask+0x8c>)
 8018724:	681b      	ldr	r3, [r3, #0]
 8018726:	2b00      	cmp	r3, #0
 8018728:	d001      	beq.n	801872e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801872a:	2301      	movs	r3, #1
 801872c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801872e:	697b      	ldr	r3, [r7, #20]
 8018730:	2b00      	cmp	r3, #0
 8018732:	d10a      	bne.n	801874a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018738:	f383 8811 	msr	BASEPRI, r3
 801873c:	f3bf 8f6f 	isb	sy
 8018740:	f3bf 8f4f 	dsb	sy
 8018744:	613b      	str	r3, [r7, #16]
}
 8018746:	bf00      	nop
 8018748:	e7fe      	b.n	8018748 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801874a:	697b      	ldr	r3, [r7, #20]
}
 801874c:	4618      	mov	r0, r3
 801874e:	3718      	adds	r7, #24
 8018750:	46bd      	mov	sp, r7
 8018752:	bd80      	pop	{r7, pc}
 8018754:	20002748 	.word	0x20002748
 8018758:	0802290c 	.word	0x0802290c
 801875c:	08018899 	.word	0x08018899
 8018760:	2000274c 	.word	0x2000274c

08018764 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018764:	b580      	push	{r7, lr}
 8018766:	b08a      	sub	sp, #40	; 0x28
 8018768:	af00      	add	r7, sp, #0
 801876a:	60f8      	str	r0, [r7, #12]
 801876c:	60b9      	str	r1, [r7, #8]
 801876e:	607a      	str	r2, [r7, #4]
 8018770:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018772:	2300      	movs	r3, #0
 8018774:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018776:	68fb      	ldr	r3, [r7, #12]
 8018778:	2b00      	cmp	r3, #0
 801877a:	d10a      	bne.n	8018792 <xTimerGenericCommand+0x2e>
	__asm volatile
 801877c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018780:	f383 8811 	msr	BASEPRI, r3
 8018784:	f3bf 8f6f 	isb	sy
 8018788:	f3bf 8f4f 	dsb	sy
 801878c:	623b      	str	r3, [r7, #32]
}
 801878e:	bf00      	nop
 8018790:	e7fe      	b.n	8018790 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018792:	4b1a      	ldr	r3, [pc, #104]	; (80187fc <xTimerGenericCommand+0x98>)
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	2b00      	cmp	r3, #0
 8018798:	d02a      	beq.n	80187f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801879a:	68bb      	ldr	r3, [r7, #8]
 801879c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80187a2:	68fb      	ldr	r3, [r7, #12]
 80187a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80187a6:	68bb      	ldr	r3, [r7, #8]
 80187a8:	2b05      	cmp	r3, #5
 80187aa:	dc18      	bgt.n	80187de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80187ac:	f7ff fdb4 	bl	8018318 <xTaskGetSchedulerState>
 80187b0:	4603      	mov	r3, r0
 80187b2:	2b02      	cmp	r3, #2
 80187b4:	d109      	bne.n	80187ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80187b6:	4b11      	ldr	r3, [pc, #68]	; (80187fc <xTimerGenericCommand+0x98>)
 80187b8:	6818      	ldr	r0, [r3, #0]
 80187ba:	f107 0110 	add.w	r1, r7, #16
 80187be:	2300      	movs	r3, #0
 80187c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80187c2:	f7fd ff83 	bl	80166cc <xQueueGenericSend>
 80187c6:	6278      	str	r0, [r7, #36]	; 0x24
 80187c8:	e012      	b.n	80187f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80187ca:	4b0c      	ldr	r3, [pc, #48]	; (80187fc <xTimerGenericCommand+0x98>)
 80187cc:	6818      	ldr	r0, [r3, #0]
 80187ce:	f107 0110 	add.w	r1, r7, #16
 80187d2:	2300      	movs	r3, #0
 80187d4:	2200      	movs	r2, #0
 80187d6:	f7fd ff79 	bl	80166cc <xQueueGenericSend>
 80187da:	6278      	str	r0, [r7, #36]	; 0x24
 80187dc:	e008      	b.n	80187f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80187de:	4b07      	ldr	r3, [pc, #28]	; (80187fc <xTimerGenericCommand+0x98>)
 80187e0:	6818      	ldr	r0, [r3, #0]
 80187e2:	f107 0110 	add.w	r1, r7, #16
 80187e6:	2300      	movs	r3, #0
 80187e8:	683a      	ldr	r2, [r7, #0]
 80187ea:	f7fe f86d 	bl	80168c8 <xQueueGenericSendFromISR>
 80187ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80187f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80187f2:	4618      	mov	r0, r3
 80187f4:	3728      	adds	r7, #40	; 0x28
 80187f6:	46bd      	mov	sp, r7
 80187f8:	bd80      	pop	{r7, pc}
 80187fa:	bf00      	nop
 80187fc:	20002748 	.word	0x20002748

08018800 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018800:	b580      	push	{r7, lr}
 8018802:	b088      	sub	sp, #32
 8018804:	af02      	add	r7, sp, #8
 8018806:	6078      	str	r0, [r7, #4]
 8018808:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801880a:	4b22      	ldr	r3, [pc, #136]	; (8018894 <prvProcessExpiredTimer+0x94>)
 801880c:	681b      	ldr	r3, [r3, #0]
 801880e:	68db      	ldr	r3, [r3, #12]
 8018810:	68db      	ldr	r3, [r3, #12]
 8018812:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018814:	697b      	ldr	r3, [r7, #20]
 8018816:	3304      	adds	r3, #4
 8018818:	4618      	mov	r0, r3
 801881a:	f7fd fd85 	bl	8016328 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801881e:	697b      	ldr	r3, [r7, #20]
 8018820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018824:	f003 0304 	and.w	r3, r3, #4
 8018828:	2b00      	cmp	r3, #0
 801882a:	d022      	beq.n	8018872 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801882c:	697b      	ldr	r3, [r7, #20]
 801882e:	699a      	ldr	r2, [r3, #24]
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	18d1      	adds	r1, r2, r3
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	683a      	ldr	r2, [r7, #0]
 8018838:	6978      	ldr	r0, [r7, #20]
 801883a:	f000 f8d3 	bl	80189e4 <prvInsertTimerInActiveList>
 801883e:	4603      	mov	r3, r0
 8018840:	2b00      	cmp	r3, #0
 8018842:	d01f      	beq.n	8018884 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018844:	2300      	movs	r3, #0
 8018846:	9300      	str	r3, [sp, #0]
 8018848:	2300      	movs	r3, #0
 801884a:	687a      	ldr	r2, [r7, #4]
 801884c:	2100      	movs	r1, #0
 801884e:	6978      	ldr	r0, [r7, #20]
 8018850:	f7ff ff88 	bl	8018764 <xTimerGenericCommand>
 8018854:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018856:	693b      	ldr	r3, [r7, #16]
 8018858:	2b00      	cmp	r3, #0
 801885a:	d113      	bne.n	8018884 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801885c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018860:	f383 8811 	msr	BASEPRI, r3
 8018864:	f3bf 8f6f 	isb	sy
 8018868:	f3bf 8f4f 	dsb	sy
 801886c:	60fb      	str	r3, [r7, #12]
}
 801886e:	bf00      	nop
 8018870:	e7fe      	b.n	8018870 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018872:	697b      	ldr	r3, [r7, #20]
 8018874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018878:	f023 0301 	bic.w	r3, r3, #1
 801887c:	b2da      	uxtb	r2, r3
 801887e:	697b      	ldr	r3, [r7, #20]
 8018880:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018884:	697b      	ldr	r3, [r7, #20]
 8018886:	6a1b      	ldr	r3, [r3, #32]
 8018888:	6978      	ldr	r0, [r7, #20]
 801888a:	4798      	blx	r3
}
 801888c:	bf00      	nop
 801888e:	3718      	adds	r7, #24
 8018890:	46bd      	mov	sp, r7
 8018892:	bd80      	pop	{r7, pc}
 8018894:	20002740 	.word	0x20002740

08018898 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018898:	b580      	push	{r7, lr}
 801889a:	b084      	sub	sp, #16
 801889c:	af00      	add	r7, sp, #0
 801889e:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 80188a0:	f7e8 fed0 	bl	8001644 <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80188a4:	f107 0308 	add.w	r3, r7, #8
 80188a8:	4618      	mov	r0, r3
 80188aa:	f000 f857 	bl	801895c <prvGetNextExpireTime>
 80188ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80188b0:	68bb      	ldr	r3, [r7, #8]
 80188b2:	4619      	mov	r1, r3
 80188b4:	68f8      	ldr	r0, [r7, #12]
 80188b6:	f000 f803 	bl	80188c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80188ba:	f000 f8d5 	bl	8018a68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80188be:	e7f1      	b.n	80188a4 <prvTimerTask+0xc>

080188c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80188c0:	b580      	push	{r7, lr}
 80188c2:	b084      	sub	sp, #16
 80188c4:	af00      	add	r7, sp, #0
 80188c6:	6078      	str	r0, [r7, #4]
 80188c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80188ca:	f7ff f929 	bl	8017b20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80188ce:	f107 0308 	add.w	r3, r7, #8
 80188d2:	4618      	mov	r0, r3
 80188d4:	f000 f866 	bl	80189a4 <prvSampleTimeNow>
 80188d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80188da:	68bb      	ldr	r3, [r7, #8]
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d130      	bne.n	8018942 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80188e0:	683b      	ldr	r3, [r7, #0]
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d10a      	bne.n	80188fc <prvProcessTimerOrBlockTask+0x3c>
 80188e6:	687a      	ldr	r2, [r7, #4]
 80188e8:	68fb      	ldr	r3, [r7, #12]
 80188ea:	429a      	cmp	r2, r3
 80188ec:	d806      	bhi.n	80188fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80188ee:	f7ff f925 	bl	8017b3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80188f2:	68f9      	ldr	r1, [r7, #12]
 80188f4:	6878      	ldr	r0, [r7, #4]
 80188f6:	f7ff ff83 	bl	8018800 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80188fa:	e024      	b.n	8018946 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80188fc:	683b      	ldr	r3, [r7, #0]
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d008      	beq.n	8018914 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018902:	4b13      	ldr	r3, [pc, #76]	; (8018950 <prvProcessTimerOrBlockTask+0x90>)
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	681b      	ldr	r3, [r3, #0]
 8018908:	2b00      	cmp	r3, #0
 801890a:	d101      	bne.n	8018910 <prvProcessTimerOrBlockTask+0x50>
 801890c:	2301      	movs	r3, #1
 801890e:	e000      	b.n	8018912 <prvProcessTimerOrBlockTask+0x52>
 8018910:	2300      	movs	r3, #0
 8018912:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018914:	4b0f      	ldr	r3, [pc, #60]	; (8018954 <prvProcessTimerOrBlockTask+0x94>)
 8018916:	6818      	ldr	r0, [r3, #0]
 8018918:	687a      	ldr	r2, [r7, #4]
 801891a:	68fb      	ldr	r3, [r7, #12]
 801891c:	1ad3      	subs	r3, r2, r3
 801891e:	683a      	ldr	r2, [r7, #0]
 8018920:	4619      	mov	r1, r3
 8018922:	f7fe fd05 	bl	8017330 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018926:	f7ff f909 	bl	8017b3c <xTaskResumeAll>
 801892a:	4603      	mov	r3, r0
 801892c:	2b00      	cmp	r3, #0
 801892e:	d10a      	bne.n	8018946 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018930:	4b09      	ldr	r3, [pc, #36]	; (8018958 <prvProcessTimerOrBlockTask+0x98>)
 8018932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018936:	601a      	str	r2, [r3, #0]
 8018938:	f3bf 8f4f 	dsb	sy
 801893c:	f3bf 8f6f 	isb	sy
}
 8018940:	e001      	b.n	8018946 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018942:	f7ff f8fb 	bl	8017b3c <xTaskResumeAll>
}
 8018946:	bf00      	nop
 8018948:	3710      	adds	r7, #16
 801894a:	46bd      	mov	sp, r7
 801894c:	bd80      	pop	{r7, pc}
 801894e:	bf00      	nop
 8018950:	20002744 	.word	0x20002744
 8018954:	20002748 	.word	0x20002748
 8018958:	e000ed04 	.word	0xe000ed04

0801895c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801895c:	b480      	push	{r7}
 801895e:	b085      	sub	sp, #20
 8018960:	af00      	add	r7, sp, #0
 8018962:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018964:	4b0e      	ldr	r3, [pc, #56]	; (80189a0 <prvGetNextExpireTime+0x44>)
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	681b      	ldr	r3, [r3, #0]
 801896a:	2b00      	cmp	r3, #0
 801896c:	d101      	bne.n	8018972 <prvGetNextExpireTime+0x16>
 801896e:	2201      	movs	r2, #1
 8018970:	e000      	b.n	8018974 <prvGetNextExpireTime+0x18>
 8018972:	2200      	movs	r2, #0
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	681b      	ldr	r3, [r3, #0]
 801897c:	2b00      	cmp	r3, #0
 801897e:	d105      	bne.n	801898c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018980:	4b07      	ldr	r3, [pc, #28]	; (80189a0 <prvGetNextExpireTime+0x44>)
 8018982:	681b      	ldr	r3, [r3, #0]
 8018984:	68db      	ldr	r3, [r3, #12]
 8018986:	681b      	ldr	r3, [r3, #0]
 8018988:	60fb      	str	r3, [r7, #12]
 801898a:	e001      	b.n	8018990 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801898c:	2300      	movs	r3, #0
 801898e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018990:	68fb      	ldr	r3, [r7, #12]
}
 8018992:	4618      	mov	r0, r3
 8018994:	3714      	adds	r7, #20
 8018996:	46bd      	mov	sp, r7
 8018998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801899c:	4770      	bx	lr
 801899e:	bf00      	nop
 80189a0:	20002740 	.word	0x20002740

080189a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80189a4:	b580      	push	{r7, lr}
 80189a6:	b084      	sub	sp, #16
 80189a8:	af00      	add	r7, sp, #0
 80189aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80189ac:	f7ff f964 	bl	8017c78 <xTaskGetTickCount>
 80189b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80189b2:	4b0b      	ldr	r3, [pc, #44]	; (80189e0 <prvSampleTimeNow+0x3c>)
 80189b4:	681b      	ldr	r3, [r3, #0]
 80189b6:	68fa      	ldr	r2, [r7, #12]
 80189b8:	429a      	cmp	r2, r3
 80189ba:	d205      	bcs.n	80189c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80189bc:	f000 f936 	bl	8018c2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	2201      	movs	r2, #1
 80189c4:	601a      	str	r2, [r3, #0]
 80189c6:	e002      	b.n	80189ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	2200      	movs	r2, #0
 80189cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80189ce:	4a04      	ldr	r2, [pc, #16]	; (80189e0 <prvSampleTimeNow+0x3c>)
 80189d0:	68fb      	ldr	r3, [r7, #12]
 80189d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80189d4:	68fb      	ldr	r3, [r7, #12]
}
 80189d6:	4618      	mov	r0, r3
 80189d8:	3710      	adds	r7, #16
 80189da:	46bd      	mov	sp, r7
 80189dc:	bd80      	pop	{r7, pc}
 80189de:	bf00      	nop
 80189e0:	20002750 	.word	0x20002750

080189e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80189e4:	b580      	push	{r7, lr}
 80189e6:	b086      	sub	sp, #24
 80189e8:	af00      	add	r7, sp, #0
 80189ea:	60f8      	str	r0, [r7, #12]
 80189ec:	60b9      	str	r1, [r7, #8]
 80189ee:	607a      	str	r2, [r7, #4]
 80189f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80189f2:	2300      	movs	r3, #0
 80189f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80189f6:	68fb      	ldr	r3, [r7, #12]
 80189f8:	68ba      	ldr	r2, [r7, #8]
 80189fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80189fc:	68fb      	ldr	r3, [r7, #12]
 80189fe:	68fa      	ldr	r2, [r7, #12]
 8018a00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8018a02:	68ba      	ldr	r2, [r7, #8]
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	429a      	cmp	r2, r3
 8018a08:	d812      	bhi.n	8018a30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018a0a:	687a      	ldr	r2, [r7, #4]
 8018a0c:	683b      	ldr	r3, [r7, #0]
 8018a0e:	1ad2      	subs	r2, r2, r3
 8018a10:	68fb      	ldr	r3, [r7, #12]
 8018a12:	699b      	ldr	r3, [r3, #24]
 8018a14:	429a      	cmp	r2, r3
 8018a16:	d302      	bcc.n	8018a1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018a18:	2301      	movs	r3, #1
 8018a1a:	617b      	str	r3, [r7, #20]
 8018a1c:	e01b      	b.n	8018a56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018a1e:	4b10      	ldr	r3, [pc, #64]	; (8018a60 <prvInsertTimerInActiveList+0x7c>)
 8018a20:	681a      	ldr	r2, [r3, #0]
 8018a22:	68fb      	ldr	r3, [r7, #12]
 8018a24:	3304      	adds	r3, #4
 8018a26:	4619      	mov	r1, r3
 8018a28:	4610      	mov	r0, r2
 8018a2a:	f7fd fc44 	bl	80162b6 <vListInsert>
 8018a2e:	e012      	b.n	8018a56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018a30:	687a      	ldr	r2, [r7, #4]
 8018a32:	683b      	ldr	r3, [r7, #0]
 8018a34:	429a      	cmp	r2, r3
 8018a36:	d206      	bcs.n	8018a46 <prvInsertTimerInActiveList+0x62>
 8018a38:	68ba      	ldr	r2, [r7, #8]
 8018a3a:	683b      	ldr	r3, [r7, #0]
 8018a3c:	429a      	cmp	r2, r3
 8018a3e:	d302      	bcc.n	8018a46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018a40:	2301      	movs	r3, #1
 8018a42:	617b      	str	r3, [r7, #20]
 8018a44:	e007      	b.n	8018a56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018a46:	4b07      	ldr	r3, [pc, #28]	; (8018a64 <prvInsertTimerInActiveList+0x80>)
 8018a48:	681a      	ldr	r2, [r3, #0]
 8018a4a:	68fb      	ldr	r3, [r7, #12]
 8018a4c:	3304      	adds	r3, #4
 8018a4e:	4619      	mov	r1, r3
 8018a50:	4610      	mov	r0, r2
 8018a52:	f7fd fc30 	bl	80162b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8018a56:	697b      	ldr	r3, [r7, #20]
}
 8018a58:	4618      	mov	r0, r3
 8018a5a:	3718      	adds	r7, #24
 8018a5c:	46bd      	mov	sp, r7
 8018a5e:	bd80      	pop	{r7, pc}
 8018a60:	20002744 	.word	0x20002744
 8018a64:	20002740 	.word	0x20002740

08018a68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018a68:	b580      	push	{r7, lr}
 8018a6a:	b08e      	sub	sp, #56	; 0x38
 8018a6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018a6e:	e0ca      	b.n	8018c06 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	da18      	bge.n	8018aa8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8018a76:	1d3b      	adds	r3, r7, #4
 8018a78:	3304      	adds	r3, #4
 8018a7a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a7e:	2b00      	cmp	r3, #0
 8018a80:	d10a      	bne.n	8018a98 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8018a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a86:	f383 8811 	msr	BASEPRI, r3
 8018a8a:	f3bf 8f6f 	isb	sy
 8018a8e:	f3bf 8f4f 	dsb	sy
 8018a92:	61fb      	str	r3, [r7, #28]
}
 8018a94:	bf00      	nop
 8018a96:	e7fe      	b.n	8018a96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a9a:	681b      	ldr	r3, [r3, #0]
 8018a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018a9e:	6850      	ldr	r0, [r2, #4]
 8018aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018aa2:	6892      	ldr	r2, [r2, #8]
 8018aa4:	4611      	mov	r1, r2
 8018aa6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	f2c0 80aa 	blt.w	8018c04 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018ab0:	68fb      	ldr	r3, [r7, #12]
 8018ab2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ab6:	695b      	ldr	r3, [r3, #20]
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	d004      	beq.n	8018ac6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018abe:	3304      	adds	r3, #4
 8018ac0:	4618      	mov	r0, r3
 8018ac2:	f7fd fc31 	bl	8016328 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018ac6:	463b      	mov	r3, r7
 8018ac8:	4618      	mov	r0, r3
 8018aca:	f7ff ff6b 	bl	80189a4 <prvSampleTimeNow>
 8018ace:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	2b09      	cmp	r3, #9
 8018ad4:	f200 8097 	bhi.w	8018c06 <prvProcessReceivedCommands+0x19e>
 8018ad8:	a201      	add	r2, pc, #4	; (adr r2, 8018ae0 <prvProcessReceivedCommands+0x78>)
 8018ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ade:	bf00      	nop
 8018ae0:	08018b09 	.word	0x08018b09
 8018ae4:	08018b09 	.word	0x08018b09
 8018ae8:	08018b09 	.word	0x08018b09
 8018aec:	08018b7d 	.word	0x08018b7d
 8018af0:	08018b91 	.word	0x08018b91
 8018af4:	08018bdb 	.word	0x08018bdb
 8018af8:	08018b09 	.word	0x08018b09
 8018afc:	08018b09 	.word	0x08018b09
 8018b00:	08018b7d 	.word	0x08018b7d
 8018b04:	08018b91 	.word	0x08018b91
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018b0e:	f043 0301 	orr.w	r3, r3, #1
 8018b12:	b2da      	uxtb	r2, r3
 8018b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018b1a:	68ba      	ldr	r2, [r7, #8]
 8018b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b1e:	699b      	ldr	r3, [r3, #24]
 8018b20:	18d1      	adds	r1, r2, r3
 8018b22:	68bb      	ldr	r3, [r7, #8]
 8018b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018b26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018b28:	f7ff ff5c 	bl	80189e4 <prvInsertTimerInActiveList>
 8018b2c:	4603      	mov	r3, r0
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d069      	beq.n	8018c06 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b34:	6a1b      	ldr	r3, [r3, #32]
 8018b36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018b38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018b40:	f003 0304 	and.w	r3, r3, #4
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d05e      	beq.n	8018c06 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018b48:	68ba      	ldr	r2, [r7, #8]
 8018b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b4c:	699b      	ldr	r3, [r3, #24]
 8018b4e:	441a      	add	r2, r3
 8018b50:	2300      	movs	r3, #0
 8018b52:	9300      	str	r3, [sp, #0]
 8018b54:	2300      	movs	r3, #0
 8018b56:	2100      	movs	r1, #0
 8018b58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018b5a:	f7ff fe03 	bl	8018764 <xTimerGenericCommand>
 8018b5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018b60:	6a3b      	ldr	r3, [r7, #32]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d14f      	bne.n	8018c06 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8018b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b6a:	f383 8811 	msr	BASEPRI, r3
 8018b6e:	f3bf 8f6f 	isb	sy
 8018b72:	f3bf 8f4f 	dsb	sy
 8018b76:	61bb      	str	r3, [r7, #24]
}
 8018b78:	bf00      	nop
 8018b7a:	e7fe      	b.n	8018b7a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018b82:	f023 0301 	bic.w	r3, r3, #1
 8018b86:	b2da      	uxtb	r2, r3
 8018b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8018b8e:	e03a      	b.n	8018c06 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018b96:	f043 0301 	orr.w	r3, r3, #1
 8018b9a:	b2da      	uxtb	r2, r3
 8018b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018ba2:	68ba      	ldr	r2, [r7, #8]
 8018ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ba6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018baa:	699b      	ldr	r3, [r3, #24]
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d10a      	bne.n	8018bc6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8018bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bb4:	f383 8811 	msr	BASEPRI, r3
 8018bb8:	f3bf 8f6f 	isb	sy
 8018bbc:	f3bf 8f4f 	dsb	sy
 8018bc0:	617b      	str	r3, [r7, #20]
}
 8018bc2:	bf00      	nop
 8018bc4:	e7fe      	b.n	8018bc4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8018bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bc8:	699a      	ldr	r2, [r3, #24]
 8018bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bcc:	18d1      	adds	r1, r2, r3
 8018bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018bd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018bd4:	f7ff ff06 	bl	80189e4 <prvInsertTimerInActiveList>
					break;
 8018bd8:	e015      	b.n	8018c06 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018be0:	f003 0302 	and.w	r3, r3, #2
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d103      	bne.n	8018bf0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8018be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018bea:	f000 fbe1 	bl	80193b0 <vPortFree>
 8018bee:	e00a      	b.n	8018c06 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018bf6:	f023 0301 	bic.w	r3, r3, #1
 8018bfa:	b2da      	uxtb	r2, r3
 8018bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8018c02:	e000      	b.n	8018c06 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8018c04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018c06:	4b08      	ldr	r3, [pc, #32]	; (8018c28 <prvProcessReceivedCommands+0x1c0>)
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	1d39      	adds	r1, r7, #4
 8018c0c:	2200      	movs	r2, #0
 8018c0e:	4618      	mov	r0, r3
 8018c10:	f7fd ff82 	bl	8016b18 <xQueueReceive>
 8018c14:	4603      	mov	r3, r0
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	f47f af2a 	bne.w	8018a70 <prvProcessReceivedCommands+0x8>
	}
}
 8018c1c:	bf00      	nop
 8018c1e:	bf00      	nop
 8018c20:	3730      	adds	r7, #48	; 0x30
 8018c22:	46bd      	mov	sp, r7
 8018c24:	bd80      	pop	{r7, pc}
 8018c26:	bf00      	nop
 8018c28:	20002748 	.word	0x20002748

08018c2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8018c2c:	b580      	push	{r7, lr}
 8018c2e:	b088      	sub	sp, #32
 8018c30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018c32:	e048      	b.n	8018cc6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018c34:	4b2d      	ldr	r3, [pc, #180]	; (8018cec <prvSwitchTimerLists+0xc0>)
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	68db      	ldr	r3, [r3, #12]
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018c3e:	4b2b      	ldr	r3, [pc, #172]	; (8018cec <prvSwitchTimerLists+0xc0>)
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	68db      	ldr	r3, [r3, #12]
 8018c44:	68db      	ldr	r3, [r3, #12]
 8018c46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018c48:	68fb      	ldr	r3, [r7, #12]
 8018c4a:	3304      	adds	r3, #4
 8018c4c:	4618      	mov	r0, r3
 8018c4e:	f7fd fb6b 	bl	8016328 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018c52:	68fb      	ldr	r3, [r7, #12]
 8018c54:	6a1b      	ldr	r3, [r3, #32]
 8018c56:	68f8      	ldr	r0, [r7, #12]
 8018c58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018c5a:	68fb      	ldr	r3, [r7, #12]
 8018c5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018c60:	f003 0304 	and.w	r3, r3, #4
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d02e      	beq.n	8018cc6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018c68:	68fb      	ldr	r3, [r7, #12]
 8018c6a:	699b      	ldr	r3, [r3, #24]
 8018c6c:	693a      	ldr	r2, [r7, #16]
 8018c6e:	4413      	add	r3, r2
 8018c70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8018c72:	68ba      	ldr	r2, [r7, #8]
 8018c74:	693b      	ldr	r3, [r7, #16]
 8018c76:	429a      	cmp	r2, r3
 8018c78:	d90e      	bls.n	8018c98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8018c7a:	68fb      	ldr	r3, [r7, #12]
 8018c7c:	68ba      	ldr	r2, [r7, #8]
 8018c7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	68fa      	ldr	r2, [r7, #12]
 8018c84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018c86:	4b19      	ldr	r3, [pc, #100]	; (8018cec <prvSwitchTimerLists+0xc0>)
 8018c88:	681a      	ldr	r2, [r3, #0]
 8018c8a:	68fb      	ldr	r3, [r7, #12]
 8018c8c:	3304      	adds	r3, #4
 8018c8e:	4619      	mov	r1, r3
 8018c90:	4610      	mov	r0, r2
 8018c92:	f7fd fb10 	bl	80162b6 <vListInsert>
 8018c96:	e016      	b.n	8018cc6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018c98:	2300      	movs	r3, #0
 8018c9a:	9300      	str	r3, [sp, #0]
 8018c9c:	2300      	movs	r3, #0
 8018c9e:	693a      	ldr	r2, [r7, #16]
 8018ca0:	2100      	movs	r1, #0
 8018ca2:	68f8      	ldr	r0, [r7, #12]
 8018ca4:	f7ff fd5e 	bl	8018764 <xTimerGenericCommand>
 8018ca8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d10a      	bne.n	8018cc6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8018cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cb4:	f383 8811 	msr	BASEPRI, r3
 8018cb8:	f3bf 8f6f 	isb	sy
 8018cbc:	f3bf 8f4f 	dsb	sy
 8018cc0:	603b      	str	r3, [r7, #0]
}
 8018cc2:	bf00      	nop
 8018cc4:	e7fe      	b.n	8018cc4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018cc6:	4b09      	ldr	r3, [pc, #36]	; (8018cec <prvSwitchTimerLists+0xc0>)
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	681b      	ldr	r3, [r3, #0]
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	d1b1      	bne.n	8018c34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8018cd0:	4b06      	ldr	r3, [pc, #24]	; (8018cec <prvSwitchTimerLists+0xc0>)
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8018cd6:	4b06      	ldr	r3, [pc, #24]	; (8018cf0 <prvSwitchTimerLists+0xc4>)
 8018cd8:	681b      	ldr	r3, [r3, #0]
 8018cda:	4a04      	ldr	r2, [pc, #16]	; (8018cec <prvSwitchTimerLists+0xc0>)
 8018cdc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8018cde:	4a04      	ldr	r2, [pc, #16]	; (8018cf0 <prvSwitchTimerLists+0xc4>)
 8018ce0:	697b      	ldr	r3, [r7, #20]
 8018ce2:	6013      	str	r3, [r2, #0]
}
 8018ce4:	bf00      	nop
 8018ce6:	3718      	adds	r7, #24
 8018ce8:	46bd      	mov	sp, r7
 8018cea:	bd80      	pop	{r7, pc}
 8018cec:	20002740 	.word	0x20002740
 8018cf0:	20002744 	.word	0x20002744

08018cf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8018cf4:	b580      	push	{r7, lr}
 8018cf6:	b082      	sub	sp, #8
 8018cf8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8018cfa:	f000 f96b 	bl	8018fd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8018cfe:	4b15      	ldr	r3, [pc, #84]	; (8018d54 <prvCheckForValidListAndQueue+0x60>)
 8018d00:	681b      	ldr	r3, [r3, #0]
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d120      	bne.n	8018d48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8018d06:	4814      	ldr	r0, [pc, #80]	; (8018d58 <prvCheckForValidListAndQueue+0x64>)
 8018d08:	f7fd fa84 	bl	8016214 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018d0c:	4813      	ldr	r0, [pc, #76]	; (8018d5c <prvCheckForValidListAndQueue+0x68>)
 8018d0e:	f7fd fa81 	bl	8016214 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8018d12:	4b13      	ldr	r3, [pc, #76]	; (8018d60 <prvCheckForValidListAndQueue+0x6c>)
 8018d14:	4a10      	ldr	r2, [pc, #64]	; (8018d58 <prvCheckForValidListAndQueue+0x64>)
 8018d16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8018d18:	4b12      	ldr	r3, [pc, #72]	; (8018d64 <prvCheckForValidListAndQueue+0x70>)
 8018d1a:	4a10      	ldr	r2, [pc, #64]	; (8018d5c <prvCheckForValidListAndQueue+0x68>)
 8018d1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018d1e:	2300      	movs	r3, #0
 8018d20:	9300      	str	r3, [sp, #0]
 8018d22:	4b11      	ldr	r3, [pc, #68]	; (8018d68 <prvCheckForValidListAndQueue+0x74>)
 8018d24:	4a11      	ldr	r2, [pc, #68]	; (8018d6c <prvCheckForValidListAndQueue+0x78>)
 8018d26:	2110      	movs	r1, #16
 8018d28:	200a      	movs	r0, #10
 8018d2a:	f7fd fb8f 	bl	801644c <xQueueGenericCreateStatic>
 8018d2e:	4603      	mov	r3, r0
 8018d30:	4a08      	ldr	r2, [pc, #32]	; (8018d54 <prvCheckForValidListAndQueue+0x60>)
 8018d32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8018d34:	4b07      	ldr	r3, [pc, #28]	; (8018d54 <prvCheckForValidListAndQueue+0x60>)
 8018d36:	681b      	ldr	r3, [r3, #0]
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d005      	beq.n	8018d48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018d3c:	4b05      	ldr	r3, [pc, #20]	; (8018d54 <prvCheckForValidListAndQueue+0x60>)
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	490b      	ldr	r1, [pc, #44]	; (8018d70 <prvCheckForValidListAndQueue+0x7c>)
 8018d42:	4618      	mov	r0, r3
 8018d44:	f7fe faa0 	bl	8017288 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018d48:	f000 f974 	bl	8019034 <vPortExitCritical>
}
 8018d4c:	bf00      	nop
 8018d4e:	46bd      	mov	sp, r7
 8018d50:	bd80      	pop	{r7, pc}
 8018d52:	bf00      	nop
 8018d54:	20002748 	.word	0x20002748
 8018d58:	20002718 	.word	0x20002718
 8018d5c:	2000272c 	.word	0x2000272c
 8018d60:	20002740 	.word	0x20002740
 8018d64:	20002744 	.word	0x20002744
 8018d68:	200027f4 	.word	0x200027f4
 8018d6c:	20002754 	.word	0x20002754
 8018d70:	08022914 	.word	0x08022914

08018d74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018d74:	b480      	push	{r7}
 8018d76:	b085      	sub	sp, #20
 8018d78:	af00      	add	r7, sp, #0
 8018d7a:	60f8      	str	r0, [r7, #12]
 8018d7c:	60b9      	str	r1, [r7, #8]
 8018d7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018d80:	68fb      	ldr	r3, [r7, #12]
 8018d82:	3b04      	subs	r3, #4
 8018d84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018d86:	68fb      	ldr	r3, [r7, #12]
 8018d88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8018d8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018d8e:	68fb      	ldr	r3, [r7, #12]
 8018d90:	3b04      	subs	r3, #4
 8018d92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018d94:	68bb      	ldr	r3, [r7, #8]
 8018d96:	f023 0201 	bic.w	r2, r3, #1
 8018d9a:	68fb      	ldr	r3, [r7, #12]
 8018d9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018d9e:	68fb      	ldr	r3, [r7, #12]
 8018da0:	3b04      	subs	r3, #4
 8018da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018da4:	4a0c      	ldr	r2, [pc, #48]	; (8018dd8 <pxPortInitialiseStack+0x64>)
 8018da6:	68fb      	ldr	r3, [r7, #12]
 8018da8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8018daa:	68fb      	ldr	r3, [r7, #12]
 8018dac:	3b14      	subs	r3, #20
 8018dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018db0:	687a      	ldr	r2, [r7, #4]
 8018db2:	68fb      	ldr	r3, [r7, #12]
 8018db4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018db6:	68fb      	ldr	r3, [r7, #12]
 8018db8:	3b04      	subs	r3, #4
 8018dba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018dbc:	68fb      	ldr	r3, [r7, #12]
 8018dbe:	f06f 0202 	mvn.w	r2, #2
 8018dc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018dc4:	68fb      	ldr	r3, [r7, #12]
 8018dc6:	3b20      	subs	r3, #32
 8018dc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8018dca:	68fb      	ldr	r3, [r7, #12]
}
 8018dcc:	4618      	mov	r0, r3
 8018dce:	3714      	adds	r7, #20
 8018dd0:	46bd      	mov	sp, r7
 8018dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dd6:	4770      	bx	lr
 8018dd8:	08018ddd 	.word	0x08018ddd

08018ddc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018ddc:	b480      	push	{r7}
 8018dde:	b085      	sub	sp, #20
 8018de0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018de2:	2300      	movs	r3, #0
 8018de4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018de6:	4b12      	ldr	r3, [pc, #72]	; (8018e30 <prvTaskExitError+0x54>)
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018dee:	d00a      	beq.n	8018e06 <prvTaskExitError+0x2a>
	__asm volatile
 8018df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018df4:	f383 8811 	msr	BASEPRI, r3
 8018df8:	f3bf 8f6f 	isb	sy
 8018dfc:	f3bf 8f4f 	dsb	sy
 8018e00:	60fb      	str	r3, [r7, #12]
}
 8018e02:	bf00      	nop
 8018e04:	e7fe      	b.n	8018e04 <prvTaskExitError+0x28>
	__asm volatile
 8018e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e0a:	f383 8811 	msr	BASEPRI, r3
 8018e0e:	f3bf 8f6f 	isb	sy
 8018e12:	f3bf 8f4f 	dsb	sy
 8018e16:	60bb      	str	r3, [r7, #8]
}
 8018e18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018e1a:	bf00      	nop
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d0fc      	beq.n	8018e1c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018e22:	bf00      	nop
 8018e24:	bf00      	nop
 8018e26:	3714      	adds	r7, #20
 8018e28:	46bd      	mov	sp, r7
 8018e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e2e:	4770      	bx	lr
 8018e30:	200000ec 	.word	0x200000ec
	...

08018e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018e40:	4b07      	ldr	r3, [pc, #28]	; (8018e60 <pxCurrentTCBConst2>)
 8018e42:	6819      	ldr	r1, [r3, #0]
 8018e44:	6808      	ldr	r0, [r1, #0]
 8018e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e4a:	f380 8809 	msr	PSP, r0
 8018e4e:	f3bf 8f6f 	isb	sy
 8018e52:	f04f 0000 	mov.w	r0, #0
 8018e56:	f380 8811 	msr	BASEPRI, r0
 8018e5a:	4770      	bx	lr
 8018e5c:	f3af 8000 	nop.w

08018e60 <pxCurrentTCBConst2>:
 8018e60:	20002218 	.word	0x20002218
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018e64:	bf00      	nop
 8018e66:	bf00      	nop

08018e68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018e68:	4808      	ldr	r0, [pc, #32]	; (8018e8c <prvPortStartFirstTask+0x24>)
 8018e6a:	6800      	ldr	r0, [r0, #0]
 8018e6c:	6800      	ldr	r0, [r0, #0]
 8018e6e:	f380 8808 	msr	MSP, r0
 8018e72:	f04f 0000 	mov.w	r0, #0
 8018e76:	f380 8814 	msr	CONTROL, r0
 8018e7a:	b662      	cpsie	i
 8018e7c:	b661      	cpsie	f
 8018e7e:	f3bf 8f4f 	dsb	sy
 8018e82:	f3bf 8f6f 	isb	sy
 8018e86:	df00      	svc	0
 8018e88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018e8a:	bf00      	nop
 8018e8c:	e000ed08 	.word	0xe000ed08

08018e90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018e90:	b580      	push	{r7, lr}
 8018e92:	b086      	sub	sp, #24
 8018e94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018e96:	4b46      	ldr	r3, [pc, #280]	; (8018fb0 <xPortStartScheduler+0x120>)
 8018e98:	681b      	ldr	r3, [r3, #0]
 8018e9a:	4a46      	ldr	r2, [pc, #280]	; (8018fb4 <xPortStartScheduler+0x124>)
 8018e9c:	4293      	cmp	r3, r2
 8018e9e:	d10a      	bne.n	8018eb6 <xPortStartScheduler+0x26>
	__asm volatile
 8018ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ea4:	f383 8811 	msr	BASEPRI, r3
 8018ea8:	f3bf 8f6f 	isb	sy
 8018eac:	f3bf 8f4f 	dsb	sy
 8018eb0:	613b      	str	r3, [r7, #16]
}
 8018eb2:	bf00      	nop
 8018eb4:	e7fe      	b.n	8018eb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018eb6:	4b3e      	ldr	r3, [pc, #248]	; (8018fb0 <xPortStartScheduler+0x120>)
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	4a3f      	ldr	r2, [pc, #252]	; (8018fb8 <xPortStartScheduler+0x128>)
 8018ebc:	4293      	cmp	r3, r2
 8018ebe:	d10a      	bne.n	8018ed6 <xPortStartScheduler+0x46>
	__asm volatile
 8018ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ec4:	f383 8811 	msr	BASEPRI, r3
 8018ec8:	f3bf 8f6f 	isb	sy
 8018ecc:	f3bf 8f4f 	dsb	sy
 8018ed0:	60fb      	str	r3, [r7, #12]
}
 8018ed2:	bf00      	nop
 8018ed4:	e7fe      	b.n	8018ed4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018ed6:	4b39      	ldr	r3, [pc, #228]	; (8018fbc <xPortStartScheduler+0x12c>)
 8018ed8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018eda:	697b      	ldr	r3, [r7, #20]
 8018edc:	781b      	ldrb	r3, [r3, #0]
 8018ede:	b2db      	uxtb	r3, r3
 8018ee0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018ee2:	697b      	ldr	r3, [r7, #20]
 8018ee4:	22ff      	movs	r2, #255	; 0xff
 8018ee6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018ee8:	697b      	ldr	r3, [r7, #20]
 8018eea:	781b      	ldrb	r3, [r3, #0]
 8018eec:	b2db      	uxtb	r3, r3
 8018eee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018ef0:	78fb      	ldrb	r3, [r7, #3]
 8018ef2:	b2db      	uxtb	r3, r3
 8018ef4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018ef8:	b2da      	uxtb	r2, r3
 8018efa:	4b31      	ldr	r3, [pc, #196]	; (8018fc0 <xPortStartScheduler+0x130>)
 8018efc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018efe:	4b31      	ldr	r3, [pc, #196]	; (8018fc4 <xPortStartScheduler+0x134>)
 8018f00:	2207      	movs	r2, #7
 8018f02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018f04:	e009      	b.n	8018f1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8018f06:	4b2f      	ldr	r3, [pc, #188]	; (8018fc4 <xPortStartScheduler+0x134>)
 8018f08:	681b      	ldr	r3, [r3, #0]
 8018f0a:	3b01      	subs	r3, #1
 8018f0c:	4a2d      	ldr	r2, [pc, #180]	; (8018fc4 <xPortStartScheduler+0x134>)
 8018f0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018f10:	78fb      	ldrb	r3, [r7, #3]
 8018f12:	b2db      	uxtb	r3, r3
 8018f14:	005b      	lsls	r3, r3, #1
 8018f16:	b2db      	uxtb	r3, r3
 8018f18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018f1a:	78fb      	ldrb	r3, [r7, #3]
 8018f1c:	b2db      	uxtb	r3, r3
 8018f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018f22:	2b80      	cmp	r3, #128	; 0x80
 8018f24:	d0ef      	beq.n	8018f06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018f26:	4b27      	ldr	r3, [pc, #156]	; (8018fc4 <xPortStartScheduler+0x134>)
 8018f28:	681b      	ldr	r3, [r3, #0]
 8018f2a:	f1c3 0307 	rsb	r3, r3, #7
 8018f2e:	2b04      	cmp	r3, #4
 8018f30:	d00a      	beq.n	8018f48 <xPortStartScheduler+0xb8>
	__asm volatile
 8018f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f36:	f383 8811 	msr	BASEPRI, r3
 8018f3a:	f3bf 8f6f 	isb	sy
 8018f3e:	f3bf 8f4f 	dsb	sy
 8018f42:	60bb      	str	r3, [r7, #8]
}
 8018f44:	bf00      	nop
 8018f46:	e7fe      	b.n	8018f46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018f48:	4b1e      	ldr	r3, [pc, #120]	; (8018fc4 <xPortStartScheduler+0x134>)
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	021b      	lsls	r3, r3, #8
 8018f4e:	4a1d      	ldr	r2, [pc, #116]	; (8018fc4 <xPortStartScheduler+0x134>)
 8018f50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018f52:	4b1c      	ldr	r3, [pc, #112]	; (8018fc4 <xPortStartScheduler+0x134>)
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018f5a:	4a1a      	ldr	r2, [pc, #104]	; (8018fc4 <xPortStartScheduler+0x134>)
 8018f5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	b2da      	uxtb	r2, r3
 8018f62:	697b      	ldr	r3, [r7, #20]
 8018f64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018f66:	4b18      	ldr	r3, [pc, #96]	; (8018fc8 <xPortStartScheduler+0x138>)
 8018f68:	681b      	ldr	r3, [r3, #0]
 8018f6a:	4a17      	ldr	r2, [pc, #92]	; (8018fc8 <xPortStartScheduler+0x138>)
 8018f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018f70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018f72:	4b15      	ldr	r3, [pc, #84]	; (8018fc8 <xPortStartScheduler+0x138>)
 8018f74:	681b      	ldr	r3, [r3, #0]
 8018f76:	4a14      	ldr	r2, [pc, #80]	; (8018fc8 <xPortStartScheduler+0x138>)
 8018f78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8018f7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8018f7e:	f000 f8dd 	bl	801913c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018f82:	4b12      	ldr	r3, [pc, #72]	; (8018fcc <xPortStartScheduler+0x13c>)
 8018f84:	2200      	movs	r2, #0
 8018f86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018f88:	f000 f8fc 	bl	8019184 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018f8c:	4b10      	ldr	r3, [pc, #64]	; (8018fd0 <xPortStartScheduler+0x140>)
 8018f8e:	681b      	ldr	r3, [r3, #0]
 8018f90:	4a0f      	ldr	r2, [pc, #60]	; (8018fd0 <xPortStartScheduler+0x140>)
 8018f92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018f96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018f98:	f7ff ff66 	bl	8018e68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8018f9c:	f7fe ff36 	bl	8017e0c <vTaskSwitchContext>
	prvTaskExitError();
 8018fa0:	f7ff ff1c 	bl	8018ddc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018fa4:	2300      	movs	r3, #0
}
 8018fa6:	4618      	mov	r0, r3
 8018fa8:	3718      	adds	r7, #24
 8018faa:	46bd      	mov	sp, r7
 8018fac:	bd80      	pop	{r7, pc}
 8018fae:	bf00      	nop
 8018fb0:	e000ed00 	.word	0xe000ed00
 8018fb4:	410fc271 	.word	0x410fc271
 8018fb8:	410fc270 	.word	0x410fc270
 8018fbc:	e000e400 	.word	0xe000e400
 8018fc0:	20002844 	.word	0x20002844
 8018fc4:	20002848 	.word	0x20002848
 8018fc8:	e000ed20 	.word	0xe000ed20
 8018fcc:	200000ec 	.word	0x200000ec
 8018fd0:	e000ef34 	.word	0xe000ef34

08018fd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8018fd4:	b480      	push	{r7}
 8018fd6:	b083      	sub	sp, #12
 8018fd8:	af00      	add	r7, sp, #0
	__asm volatile
 8018fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fde:	f383 8811 	msr	BASEPRI, r3
 8018fe2:	f3bf 8f6f 	isb	sy
 8018fe6:	f3bf 8f4f 	dsb	sy
 8018fea:	607b      	str	r3, [r7, #4]
}
 8018fec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8018fee:	4b0f      	ldr	r3, [pc, #60]	; (801902c <vPortEnterCritical+0x58>)
 8018ff0:	681b      	ldr	r3, [r3, #0]
 8018ff2:	3301      	adds	r3, #1
 8018ff4:	4a0d      	ldr	r2, [pc, #52]	; (801902c <vPortEnterCritical+0x58>)
 8018ff6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018ff8:	4b0c      	ldr	r3, [pc, #48]	; (801902c <vPortEnterCritical+0x58>)
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	2b01      	cmp	r3, #1
 8018ffe:	d10f      	bne.n	8019020 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019000:	4b0b      	ldr	r3, [pc, #44]	; (8019030 <vPortEnterCritical+0x5c>)
 8019002:	681b      	ldr	r3, [r3, #0]
 8019004:	b2db      	uxtb	r3, r3
 8019006:	2b00      	cmp	r3, #0
 8019008:	d00a      	beq.n	8019020 <vPortEnterCritical+0x4c>
	__asm volatile
 801900a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801900e:	f383 8811 	msr	BASEPRI, r3
 8019012:	f3bf 8f6f 	isb	sy
 8019016:	f3bf 8f4f 	dsb	sy
 801901a:	603b      	str	r3, [r7, #0]
}
 801901c:	bf00      	nop
 801901e:	e7fe      	b.n	801901e <vPortEnterCritical+0x4a>
	}
}
 8019020:	bf00      	nop
 8019022:	370c      	adds	r7, #12
 8019024:	46bd      	mov	sp, r7
 8019026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801902a:	4770      	bx	lr
 801902c:	200000ec 	.word	0x200000ec
 8019030:	e000ed04 	.word	0xe000ed04

08019034 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019034:	b480      	push	{r7}
 8019036:	b083      	sub	sp, #12
 8019038:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801903a:	4b12      	ldr	r3, [pc, #72]	; (8019084 <vPortExitCritical+0x50>)
 801903c:	681b      	ldr	r3, [r3, #0]
 801903e:	2b00      	cmp	r3, #0
 8019040:	d10a      	bne.n	8019058 <vPortExitCritical+0x24>
	__asm volatile
 8019042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019046:	f383 8811 	msr	BASEPRI, r3
 801904a:	f3bf 8f6f 	isb	sy
 801904e:	f3bf 8f4f 	dsb	sy
 8019052:	607b      	str	r3, [r7, #4]
}
 8019054:	bf00      	nop
 8019056:	e7fe      	b.n	8019056 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019058:	4b0a      	ldr	r3, [pc, #40]	; (8019084 <vPortExitCritical+0x50>)
 801905a:	681b      	ldr	r3, [r3, #0]
 801905c:	3b01      	subs	r3, #1
 801905e:	4a09      	ldr	r2, [pc, #36]	; (8019084 <vPortExitCritical+0x50>)
 8019060:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019062:	4b08      	ldr	r3, [pc, #32]	; (8019084 <vPortExitCritical+0x50>)
 8019064:	681b      	ldr	r3, [r3, #0]
 8019066:	2b00      	cmp	r3, #0
 8019068:	d105      	bne.n	8019076 <vPortExitCritical+0x42>
 801906a:	2300      	movs	r3, #0
 801906c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801906e:	683b      	ldr	r3, [r7, #0]
 8019070:	f383 8811 	msr	BASEPRI, r3
}
 8019074:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019076:	bf00      	nop
 8019078:	370c      	adds	r7, #12
 801907a:	46bd      	mov	sp, r7
 801907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019080:	4770      	bx	lr
 8019082:	bf00      	nop
 8019084:	200000ec 	.word	0x200000ec
	...

08019090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019090:	f3ef 8009 	mrs	r0, PSP
 8019094:	f3bf 8f6f 	isb	sy
 8019098:	4b15      	ldr	r3, [pc, #84]	; (80190f0 <pxCurrentTCBConst>)
 801909a:	681a      	ldr	r2, [r3, #0]
 801909c:	f01e 0f10 	tst.w	lr, #16
 80190a0:	bf08      	it	eq
 80190a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80190a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190aa:	6010      	str	r0, [r2, #0]
 80190ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80190b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80190b4:	f380 8811 	msr	BASEPRI, r0
 80190b8:	f3bf 8f4f 	dsb	sy
 80190bc:	f3bf 8f6f 	isb	sy
 80190c0:	f7fe fea4 	bl	8017e0c <vTaskSwitchContext>
 80190c4:	f04f 0000 	mov.w	r0, #0
 80190c8:	f380 8811 	msr	BASEPRI, r0
 80190cc:	bc09      	pop	{r0, r3}
 80190ce:	6819      	ldr	r1, [r3, #0]
 80190d0:	6808      	ldr	r0, [r1, #0]
 80190d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190d6:	f01e 0f10 	tst.w	lr, #16
 80190da:	bf08      	it	eq
 80190dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80190e0:	f380 8809 	msr	PSP, r0
 80190e4:	f3bf 8f6f 	isb	sy
 80190e8:	4770      	bx	lr
 80190ea:	bf00      	nop
 80190ec:	f3af 8000 	nop.w

080190f0 <pxCurrentTCBConst>:
 80190f0:	20002218 	.word	0x20002218
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80190f4:	bf00      	nop
 80190f6:	bf00      	nop

080190f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80190f8:	b580      	push	{r7, lr}
 80190fa:	b082      	sub	sp, #8
 80190fc:	af00      	add	r7, sp, #0
	__asm volatile
 80190fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019102:	f383 8811 	msr	BASEPRI, r3
 8019106:	f3bf 8f6f 	isb	sy
 801910a:	f3bf 8f4f 	dsb	sy
 801910e:	607b      	str	r3, [r7, #4]
}
 8019110:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019112:	f7fe fdc1 	bl	8017c98 <xTaskIncrementTick>
 8019116:	4603      	mov	r3, r0
 8019118:	2b00      	cmp	r3, #0
 801911a:	d003      	beq.n	8019124 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801911c:	4b06      	ldr	r3, [pc, #24]	; (8019138 <xPortSysTickHandler+0x40>)
 801911e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019122:	601a      	str	r2, [r3, #0]
 8019124:	2300      	movs	r3, #0
 8019126:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019128:	683b      	ldr	r3, [r7, #0]
 801912a:	f383 8811 	msr	BASEPRI, r3
}
 801912e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019130:	bf00      	nop
 8019132:	3708      	adds	r7, #8
 8019134:	46bd      	mov	sp, r7
 8019136:	bd80      	pop	{r7, pc}
 8019138:	e000ed04 	.word	0xe000ed04

0801913c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801913c:	b480      	push	{r7}
 801913e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019140:	4b0b      	ldr	r3, [pc, #44]	; (8019170 <vPortSetupTimerInterrupt+0x34>)
 8019142:	2200      	movs	r2, #0
 8019144:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019146:	4b0b      	ldr	r3, [pc, #44]	; (8019174 <vPortSetupTimerInterrupt+0x38>)
 8019148:	2200      	movs	r2, #0
 801914a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801914c:	4b0a      	ldr	r3, [pc, #40]	; (8019178 <vPortSetupTimerInterrupt+0x3c>)
 801914e:	681b      	ldr	r3, [r3, #0]
 8019150:	4a0a      	ldr	r2, [pc, #40]	; (801917c <vPortSetupTimerInterrupt+0x40>)
 8019152:	fba2 2303 	umull	r2, r3, r2, r3
 8019156:	099b      	lsrs	r3, r3, #6
 8019158:	4a09      	ldr	r2, [pc, #36]	; (8019180 <vPortSetupTimerInterrupt+0x44>)
 801915a:	3b01      	subs	r3, #1
 801915c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801915e:	4b04      	ldr	r3, [pc, #16]	; (8019170 <vPortSetupTimerInterrupt+0x34>)
 8019160:	2207      	movs	r2, #7
 8019162:	601a      	str	r2, [r3, #0]
}
 8019164:	bf00      	nop
 8019166:	46bd      	mov	sp, r7
 8019168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801916c:	4770      	bx	lr
 801916e:	bf00      	nop
 8019170:	e000e010 	.word	0xe000e010
 8019174:	e000e018 	.word	0xe000e018
 8019178:	20000088 	.word	0x20000088
 801917c:	10624dd3 	.word	0x10624dd3
 8019180:	e000e014 	.word	0xe000e014

08019184 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019184:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019194 <vPortEnableVFP+0x10>
 8019188:	6801      	ldr	r1, [r0, #0]
 801918a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801918e:	6001      	str	r1, [r0, #0]
 8019190:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019192:	bf00      	nop
 8019194:	e000ed88 	.word	0xe000ed88

08019198 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019198:	b480      	push	{r7}
 801919a:	b085      	sub	sp, #20
 801919c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801919e:	f3ef 8305 	mrs	r3, IPSR
 80191a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80191a4:	68fb      	ldr	r3, [r7, #12]
 80191a6:	2b0f      	cmp	r3, #15
 80191a8:	d914      	bls.n	80191d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80191aa:	4a17      	ldr	r2, [pc, #92]	; (8019208 <vPortValidateInterruptPriority+0x70>)
 80191ac:	68fb      	ldr	r3, [r7, #12]
 80191ae:	4413      	add	r3, r2
 80191b0:	781b      	ldrb	r3, [r3, #0]
 80191b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80191b4:	4b15      	ldr	r3, [pc, #84]	; (801920c <vPortValidateInterruptPriority+0x74>)
 80191b6:	781b      	ldrb	r3, [r3, #0]
 80191b8:	7afa      	ldrb	r2, [r7, #11]
 80191ba:	429a      	cmp	r2, r3
 80191bc:	d20a      	bcs.n	80191d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80191be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191c2:	f383 8811 	msr	BASEPRI, r3
 80191c6:	f3bf 8f6f 	isb	sy
 80191ca:	f3bf 8f4f 	dsb	sy
 80191ce:	607b      	str	r3, [r7, #4]
}
 80191d0:	bf00      	nop
 80191d2:	e7fe      	b.n	80191d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80191d4:	4b0e      	ldr	r3, [pc, #56]	; (8019210 <vPortValidateInterruptPriority+0x78>)
 80191d6:	681b      	ldr	r3, [r3, #0]
 80191d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80191dc:	4b0d      	ldr	r3, [pc, #52]	; (8019214 <vPortValidateInterruptPriority+0x7c>)
 80191de:	681b      	ldr	r3, [r3, #0]
 80191e0:	429a      	cmp	r2, r3
 80191e2:	d90a      	bls.n	80191fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80191e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191e8:	f383 8811 	msr	BASEPRI, r3
 80191ec:	f3bf 8f6f 	isb	sy
 80191f0:	f3bf 8f4f 	dsb	sy
 80191f4:	603b      	str	r3, [r7, #0]
}
 80191f6:	bf00      	nop
 80191f8:	e7fe      	b.n	80191f8 <vPortValidateInterruptPriority+0x60>
	}
 80191fa:	bf00      	nop
 80191fc:	3714      	adds	r7, #20
 80191fe:	46bd      	mov	sp, r7
 8019200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019204:	4770      	bx	lr
 8019206:	bf00      	nop
 8019208:	e000e3f0 	.word	0xe000e3f0
 801920c:	20002844 	.word	0x20002844
 8019210:	e000ed0c 	.word	0xe000ed0c
 8019214:	20002848 	.word	0x20002848

08019218 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019218:	b580      	push	{r7, lr}
 801921a:	b08a      	sub	sp, #40	; 0x28
 801921c:	af00      	add	r7, sp, #0
 801921e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019220:	2300      	movs	r3, #0
 8019222:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019224:	f7fe fc7c 	bl	8017b20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019228:	4b5b      	ldr	r3, [pc, #364]	; (8019398 <pvPortMalloc+0x180>)
 801922a:	681b      	ldr	r3, [r3, #0]
 801922c:	2b00      	cmp	r3, #0
 801922e:	d101      	bne.n	8019234 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019230:	f000 f920 	bl	8019474 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019234:	4b59      	ldr	r3, [pc, #356]	; (801939c <pvPortMalloc+0x184>)
 8019236:	681a      	ldr	r2, [r3, #0]
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	4013      	ands	r3, r2
 801923c:	2b00      	cmp	r3, #0
 801923e:	f040 8093 	bne.w	8019368 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	2b00      	cmp	r3, #0
 8019246:	d01d      	beq.n	8019284 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8019248:	2208      	movs	r2, #8
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	4413      	add	r3, r2
 801924e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	f003 0307 	and.w	r3, r3, #7
 8019256:	2b00      	cmp	r3, #0
 8019258:	d014      	beq.n	8019284 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	f023 0307 	bic.w	r3, r3, #7
 8019260:	3308      	adds	r3, #8
 8019262:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	f003 0307 	and.w	r3, r3, #7
 801926a:	2b00      	cmp	r3, #0
 801926c:	d00a      	beq.n	8019284 <pvPortMalloc+0x6c>
	__asm volatile
 801926e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019272:	f383 8811 	msr	BASEPRI, r3
 8019276:	f3bf 8f6f 	isb	sy
 801927a:	f3bf 8f4f 	dsb	sy
 801927e:	617b      	str	r3, [r7, #20]
}
 8019280:	bf00      	nop
 8019282:	e7fe      	b.n	8019282 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	2b00      	cmp	r3, #0
 8019288:	d06e      	beq.n	8019368 <pvPortMalloc+0x150>
 801928a:	4b45      	ldr	r3, [pc, #276]	; (80193a0 <pvPortMalloc+0x188>)
 801928c:	681b      	ldr	r3, [r3, #0]
 801928e:	687a      	ldr	r2, [r7, #4]
 8019290:	429a      	cmp	r2, r3
 8019292:	d869      	bhi.n	8019368 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019294:	4b43      	ldr	r3, [pc, #268]	; (80193a4 <pvPortMalloc+0x18c>)
 8019296:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019298:	4b42      	ldr	r3, [pc, #264]	; (80193a4 <pvPortMalloc+0x18c>)
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801929e:	e004      	b.n	80192aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80192a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80192a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192a6:	681b      	ldr	r3, [r3, #0]
 80192a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80192aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192ac:	685b      	ldr	r3, [r3, #4]
 80192ae:	687a      	ldr	r2, [r7, #4]
 80192b0:	429a      	cmp	r2, r3
 80192b2:	d903      	bls.n	80192bc <pvPortMalloc+0xa4>
 80192b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d1f1      	bne.n	80192a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80192bc:	4b36      	ldr	r3, [pc, #216]	; (8019398 <pvPortMalloc+0x180>)
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80192c2:	429a      	cmp	r2, r3
 80192c4:	d050      	beq.n	8019368 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80192c6:	6a3b      	ldr	r3, [r7, #32]
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	2208      	movs	r2, #8
 80192cc:	4413      	add	r3, r2
 80192ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80192d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192d2:	681a      	ldr	r2, [r3, #0]
 80192d4:	6a3b      	ldr	r3, [r7, #32]
 80192d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80192d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192da:	685a      	ldr	r2, [r3, #4]
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	1ad2      	subs	r2, r2, r3
 80192e0:	2308      	movs	r3, #8
 80192e2:	005b      	lsls	r3, r3, #1
 80192e4:	429a      	cmp	r2, r3
 80192e6:	d91f      	bls.n	8019328 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80192e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	4413      	add	r3, r2
 80192ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80192f0:	69bb      	ldr	r3, [r7, #24]
 80192f2:	f003 0307 	and.w	r3, r3, #7
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d00a      	beq.n	8019310 <pvPortMalloc+0xf8>
	__asm volatile
 80192fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192fe:	f383 8811 	msr	BASEPRI, r3
 8019302:	f3bf 8f6f 	isb	sy
 8019306:	f3bf 8f4f 	dsb	sy
 801930a:	613b      	str	r3, [r7, #16]
}
 801930c:	bf00      	nop
 801930e:	e7fe      	b.n	801930e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019312:	685a      	ldr	r2, [r3, #4]
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	1ad2      	subs	r2, r2, r3
 8019318:	69bb      	ldr	r3, [r7, #24]
 801931a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801931c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801931e:	687a      	ldr	r2, [r7, #4]
 8019320:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019322:	69b8      	ldr	r0, [r7, #24]
 8019324:	f000 f908 	bl	8019538 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019328:	4b1d      	ldr	r3, [pc, #116]	; (80193a0 <pvPortMalloc+0x188>)
 801932a:	681a      	ldr	r2, [r3, #0]
 801932c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801932e:	685b      	ldr	r3, [r3, #4]
 8019330:	1ad3      	subs	r3, r2, r3
 8019332:	4a1b      	ldr	r2, [pc, #108]	; (80193a0 <pvPortMalloc+0x188>)
 8019334:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019336:	4b1a      	ldr	r3, [pc, #104]	; (80193a0 <pvPortMalloc+0x188>)
 8019338:	681a      	ldr	r2, [r3, #0]
 801933a:	4b1b      	ldr	r3, [pc, #108]	; (80193a8 <pvPortMalloc+0x190>)
 801933c:	681b      	ldr	r3, [r3, #0]
 801933e:	429a      	cmp	r2, r3
 8019340:	d203      	bcs.n	801934a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019342:	4b17      	ldr	r3, [pc, #92]	; (80193a0 <pvPortMalloc+0x188>)
 8019344:	681b      	ldr	r3, [r3, #0]
 8019346:	4a18      	ldr	r2, [pc, #96]	; (80193a8 <pvPortMalloc+0x190>)
 8019348:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801934a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801934c:	685a      	ldr	r2, [r3, #4]
 801934e:	4b13      	ldr	r3, [pc, #76]	; (801939c <pvPortMalloc+0x184>)
 8019350:	681b      	ldr	r3, [r3, #0]
 8019352:	431a      	orrs	r2, r3
 8019354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019356:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801935a:	2200      	movs	r2, #0
 801935c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801935e:	4b13      	ldr	r3, [pc, #76]	; (80193ac <pvPortMalloc+0x194>)
 8019360:	681b      	ldr	r3, [r3, #0]
 8019362:	3301      	adds	r3, #1
 8019364:	4a11      	ldr	r2, [pc, #68]	; (80193ac <pvPortMalloc+0x194>)
 8019366:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019368:	f7fe fbe8 	bl	8017b3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801936c:	69fb      	ldr	r3, [r7, #28]
 801936e:	f003 0307 	and.w	r3, r3, #7
 8019372:	2b00      	cmp	r3, #0
 8019374:	d00a      	beq.n	801938c <pvPortMalloc+0x174>
	__asm volatile
 8019376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801937a:	f383 8811 	msr	BASEPRI, r3
 801937e:	f3bf 8f6f 	isb	sy
 8019382:	f3bf 8f4f 	dsb	sy
 8019386:	60fb      	str	r3, [r7, #12]
}
 8019388:	bf00      	nop
 801938a:	e7fe      	b.n	801938a <pvPortMalloc+0x172>
	return pvReturn;
 801938c:	69fb      	ldr	r3, [r7, #28]
}
 801938e:	4618      	mov	r0, r3
 8019390:	3728      	adds	r7, #40	; 0x28
 8019392:	46bd      	mov	sp, r7
 8019394:	bd80      	pop	{r7, pc}
 8019396:	bf00      	nop
 8019398:	20008614 	.word	0x20008614
 801939c:	20008628 	.word	0x20008628
 80193a0:	20008618 	.word	0x20008618
 80193a4:	2000860c 	.word	0x2000860c
 80193a8:	2000861c 	.word	0x2000861c
 80193ac:	20008620 	.word	0x20008620

080193b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80193b0:	b580      	push	{r7, lr}
 80193b2:	b086      	sub	sp, #24
 80193b4:	af00      	add	r7, sp, #0
 80193b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d04d      	beq.n	801945e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80193c2:	2308      	movs	r3, #8
 80193c4:	425b      	negs	r3, r3
 80193c6:	697a      	ldr	r2, [r7, #20]
 80193c8:	4413      	add	r3, r2
 80193ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80193cc:	697b      	ldr	r3, [r7, #20]
 80193ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80193d0:	693b      	ldr	r3, [r7, #16]
 80193d2:	685a      	ldr	r2, [r3, #4]
 80193d4:	4b24      	ldr	r3, [pc, #144]	; (8019468 <vPortFree+0xb8>)
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	4013      	ands	r3, r2
 80193da:	2b00      	cmp	r3, #0
 80193dc:	d10a      	bne.n	80193f4 <vPortFree+0x44>
	__asm volatile
 80193de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193e2:	f383 8811 	msr	BASEPRI, r3
 80193e6:	f3bf 8f6f 	isb	sy
 80193ea:	f3bf 8f4f 	dsb	sy
 80193ee:	60fb      	str	r3, [r7, #12]
}
 80193f0:	bf00      	nop
 80193f2:	e7fe      	b.n	80193f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80193f4:	693b      	ldr	r3, [r7, #16]
 80193f6:	681b      	ldr	r3, [r3, #0]
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d00a      	beq.n	8019412 <vPortFree+0x62>
	__asm volatile
 80193fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019400:	f383 8811 	msr	BASEPRI, r3
 8019404:	f3bf 8f6f 	isb	sy
 8019408:	f3bf 8f4f 	dsb	sy
 801940c:	60bb      	str	r3, [r7, #8]
}
 801940e:	bf00      	nop
 8019410:	e7fe      	b.n	8019410 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019412:	693b      	ldr	r3, [r7, #16]
 8019414:	685a      	ldr	r2, [r3, #4]
 8019416:	4b14      	ldr	r3, [pc, #80]	; (8019468 <vPortFree+0xb8>)
 8019418:	681b      	ldr	r3, [r3, #0]
 801941a:	4013      	ands	r3, r2
 801941c:	2b00      	cmp	r3, #0
 801941e:	d01e      	beq.n	801945e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019420:	693b      	ldr	r3, [r7, #16]
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	2b00      	cmp	r3, #0
 8019426:	d11a      	bne.n	801945e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019428:	693b      	ldr	r3, [r7, #16]
 801942a:	685a      	ldr	r2, [r3, #4]
 801942c:	4b0e      	ldr	r3, [pc, #56]	; (8019468 <vPortFree+0xb8>)
 801942e:	681b      	ldr	r3, [r3, #0]
 8019430:	43db      	mvns	r3, r3
 8019432:	401a      	ands	r2, r3
 8019434:	693b      	ldr	r3, [r7, #16]
 8019436:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019438:	f7fe fb72 	bl	8017b20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801943c:	693b      	ldr	r3, [r7, #16]
 801943e:	685a      	ldr	r2, [r3, #4]
 8019440:	4b0a      	ldr	r3, [pc, #40]	; (801946c <vPortFree+0xbc>)
 8019442:	681b      	ldr	r3, [r3, #0]
 8019444:	4413      	add	r3, r2
 8019446:	4a09      	ldr	r2, [pc, #36]	; (801946c <vPortFree+0xbc>)
 8019448:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801944a:	6938      	ldr	r0, [r7, #16]
 801944c:	f000 f874 	bl	8019538 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019450:	4b07      	ldr	r3, [pc, #28]	; (8019470 <vPortFree+0xc0>)
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	3301      	adds	r3, #1
 8019456:	4a06      	ldr	r2, [pc, #24]	; (8019470 <vPortFree+0xc0>)
 8019458:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801945a:	f7fe fb6f 	bl	8017b3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801945e:	bf00      	nop
 8019460:	3718      	adds	r7, #24
 8019462:	46bd      	mov	sp, r7
 8019464:	bd80      	pop	{r7, pc}
 8019466:	bf00      	nop
 8019468:	20008628 	.word	0x20008628
 801946c:	20008618 	.word	0x20008618
 8019470:	20008624 	.word	0x20008624

08019474 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019474:	b480      	push	{r7}
 8019476:	b085      	sub	sp, #20
 8019478:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801947a:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 801947e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019480:	4b27      	ldr	r3, [pc, #156]	; (8019520 <prvHeapInit+0xac>)
 8019482:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	f003 0307 	and.w	r3, r3, #7
 801948a:	2b00      	cmp	r3, #0
 801948c:	d00c      	beq.n	80194a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801948e:	68fb      	ldr	r3, [r7, #12]
 8019490:	3307      	adds	r3, #7
 8019492:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019494:	68fb      	ldr	r3, [r7, #12]
 8019496:	f023 0307 	bic.w	r3, r3, #7
 801949a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801949c:	68ba      	ldr	r2, [r7, #8]
 801949e:	68fb      	ldr	r3, [r7, #12]
 80194a0:	1ad3      	subs	r3, r2, r3
 80194a2:	4a1f      	ldr	r2, [pc, #124]	; (8019520 <prvHeapInit+0xac>)
 80194a4:	4413      	add	r3, r2
 80194a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80194a8:	68fb      	ldr	r3, [r7, #12]
 80194aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80194ac:	4a1d      	ldr	r2, [pc, #116]	; (8019524 <prvHeapInit+0xb0>)
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80194b2:	4b1c      	ldr	r3, [pc, #112]	; (8019524 <prvHeapInit+0xb0>)
 80194b4:	2200      	movs	r2, #0
 80194b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	68ba      	ldr	r2, [r7, #8]
 80194bc:	4413      	add	r3, r2
 80194be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80194c0:	2208      	movs	r2, #8
 80194c2:	68fb      	ldr	r3, [r7, #12]
 80194c4:	1a9b      	subs	r3, r3, r2
 80194c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80194c8:	68fb      	ldr	r3, [r7, #12]
 80194ca:	f023 0307 	bic.w	r3, r3, #7
 80194ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80194d0:	68fb      	ldr	r3, [r7, #12]
 80194d2:	4a15      	ldr	r2, [pc, #84]	; (8019528 <prvHeapInit+0xb4>)
 80194d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80194d6:	4b14      	ldr	r3, [pc, #80]	; (8019528 <prvHeapInit+0xb4>)
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	2200      	movs	r2, #0
 80194dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80194de:	4b12      	ldr	r3, [pc, #72]	; (8019528 <prvHeapInit+0xb4>)
 80194e0:	681b      	ldr	r3, [r3, #0]
 80194e2:	2200      	movs	r2, #0
 80194e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80194ea:	683b      	ldr	r3, [r7, #0]
 80194ec:	68fa      	ldr	r2, [r7, #12]
 80194ee:	1ad2      	subs	r2, r2, r3
 80194f0:	683b      	ldr	r3, [r7, #0]
 80194f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80194f4:	4b0c      	ldr	r3, [pc, #48]	; (8019528 <prvHeapInit+0xb4>)
 80194f6:	681a      	ldr	r2, [r3, #0]
 80194f8:	683b      	ldr	r3, [r7, #0]
 80194fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80194fc:	683b      	ldr	r3, [r7, #0]
 80194fe:	685b      	ldr	r3, [r3, #4]
 8019500:	4a0a      	ldr	r2, [pc, #40]	; (801952c <prvHeapInit+0xb8>)
 8019502:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019504:	683b      	ldr	r3, [r7, #0]
 8019506:	685b      	ldr	r3, [r3, #4]
 8019508:	4a09      	ldr	r2, [pc, #36]	; (8019530 <prvHeapInit+0xbc>)
 801950a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801950c:	4b09      	ldr	r3, [pc, #36]	; (8019534 <prvHeapInit+0xc0>)
 801950e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019512:	601a      	str	r2, [r3, #0]
}
 8019514:	bf00      	nop
 8019516:	3714      	adds	r7, #20
 8019518:	46bd      	mov	sp, r7
 801951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801951e:	4770      	bx	lr
 8019520:	2000284c 	.word	0x2000284c
 8019524:	2000860c 	.word	0x2000860c
 8019528:	20008614 	.word	0x20008614
 801952c:	2000861c 	.word	0x2000861c
 8019530:	20008618 	.word	0x20008618
 8019534:	20008628 	.word	0x20008628

08019538 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019538:	b480      	push	{r7}
 801953a:	b085      	sub	sp, #20
 801953c:	af00      	add	r7, sp, #0
 801953e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019540:	4b28      	ldr	r3, [pc, #160]	; (80195e4 <prvInsertBlockIntoFreeList+0xac>)
 8019542:	60fb      	str	r3, [r7, #12]
 8019544:	e002      	b.n	801954c <prvInsertBlockIntoFreeList+0x14>
 8019546:	68fb      	ldr	r3, [r7, #12]
 8019548:	681b      	ldr	r3, [r3, #0]
 801954a:	60fb      	str	r3, [r7, #12]
 801954c:	68fb      	ldr	r3, [r7, #12]
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	687a      	ldr	r2, [r7, #4]
 8019552:	429a      	cmp	r2, r3
 8019554:	d8f7      	bhi.n	8019546 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019556:	68fb      	ldr	r3, [r7, #12]
 8019558:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801955a:	68fb      	ldr	r3, [r7, #12]
 801955c:	685b      	ldr	r3, [r3, #4]
 801955e:	68ba      	ldr	r2, [r7, #8]
 8019560:	4413      	add	r3, r2
 8019562:	687a      	ldr	r2, [r7, #4]
 8019564:	429a      	cmp	r2, r3
 8019566:	d108      	bne.n	801957a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019568:	68fb      	ldr	r3, [r7, #12]
 801956a:	685a      	ldr	r2, [r3, #4]
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	685b      	ldr	r3, [r3, #4]
 8019570:	441a      	add	r2, r3
 8019572:	68fb      	ldr	r3, [r7, #12]
 8019574:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019576:	68fb      	ldr	r3, [r7, #12]
 8019578:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	685b      	ldr	r3, [r3, #4]
 8019582:	68ba      	ldr	r2, [r7, #8]
 8019584:	441a      	add	r2, r3
 8019586:	68fb      	ldr	r3, [r7, #12]
 8019588:	681b      	ldr	r3, [r3, #0]
 801958a:	429a      	cmp	r2, r3
 801958c:	d118      	bne.n	80195c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801958e:	68fb      	ldr	r3, [r7, #12]
 8019590:	681a      	ldr	r2, [r3, #0]
 8019592:	4b15      	ldr	r3, [pc, #84]	; (80195e8 <prvInsertBlockIntoFreeList+0xb0>)
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	429a      	cmp	r2, r3
 8019598:	d00d      	beq.n	80195b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	685a      	ldr	r2, [r3, #4]
 801959e:	68fb      	ldr	r3, [r7, #12]
 80195a0:	681b      	ldr	r3, [r3, #0]
 80195a2:	685b      	ldr	r3, [r3, #4]
 80195a4:	441a      	add	r2, r3
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80195aa:	68fb      	ldr	r3, [r7, #12]
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	681a      	ldr	r2, [r3, #0]
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	601a      	str	r2, [r3, #0]
 80195b4:	e008      	b.n	80195c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80195b6:	4b0c      	ldr	r3, [pc, #48]	; (80195e8 <prvInsertBlockIntoFreeList+0xb0>)
 80195b8:	681a      	ldr	r2, [r3, #0]
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	601a      	str	r2, [r3, #0]
 80195be:	e003      	b.n	80195c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80195c0:	68fb      	ldr	r3, [r7, #12]
 80195c2:	681a      	ldr	r2, [r3, #0]
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80195c8:	68fa      	ldr	r2, [r7, #12]
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	429a      	cmp	r2, r3
 80195ce:	d002      	beq.n	80195d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80195d0:	68fb      	ldr	r3, [r7, #12]
 80195d2:	687a      	ldr	r2, [r7, #4]
 80195d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80195d6:	bf00      	nop
 80195d8:	3714      	adds	r7, #20
 80195da:	46bd      	mov	sp, r7
 80195dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195e0:	4770      	bx	lr
 80195e2:	bf00      	nop
 80195e4:	2000860c 	.word	0x2000860c
 80195e8:	20008614 	.word	0x20008614

080195ec <_Znwj>:
 80195ec:	2801      	cmp	r0, #1
 80195ee:	bf38      	it	cc
 80195f0:	2001      	movcc	r0, #1
 80195f2:	b510      	push	{r4, lr}
 80195f4:	4604      	mov	r4, r0
 80195f6:	4620      	mov	r0, r4
 80195f8:	f001 fa2e 	bl	801aa58 <malloc>
 80195fc:	b930      	cbnz	r0, 801960c <_Znwj+0x20>
 80195fe:	f000 f81d 	bl	801963c <_ZSt15get_new_handlerv>
 8019602:	b908      	cbnz	r0, 8019608 <_Znwj+0x1c>
 8019604:	f000 ffd6 	bl	801a5b4 <abort>
 8019608:	4780      	blx	r0
 801960a:	e7f4      	b.n	80195f6 <_Znwj+0xa>
 801960c:	bd10      	pop	{r4, pc}

0801960e <_Znaj>:
 801960e:	f7ff bfed 	b.w	80195ec <_Znwj>

08019612 <__cxa_pure_virtual>:
 8019612:	b508      	push	{r3, lr}
 8019614:	f000 f80c 	bl	8019630 <_ZSt9terminatev>

08019618 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8019618:	b508      	push	{r3, lr}
 801961a:	4780      	blx	r0
 801961c:	f000 ffca 	bl	801a5b4 <abort>

08019620 <_ZSt13get_terminatev>:
 8019620:	4b02      	ldr	r3, [pc, #8]	; (801962c <_ZSt13get_terminatev+0xc>)
 8019622:	6818      	ldr	r0, [r3, #0]
 8019624:	f3bf 8f5b 	dmb	ish
 8019628:	4770      	bx	lr
 801962a:	bf00      	nop
 801962c:	200000f0 	.word	0x200000f0

08019630 <_ZSt9terminatev>:
 8019630:	b508      	push	{r3, lr}
 8019632:	f7ff fff5 	bl	8019620 <_ZSt13get_terminatev>
 8019636:	f7ff ffef 	bl	8019618 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0801963c <_ZSt15get_new_handlerv>:
 801963c:	4b02      	ldr	r3, [pc, #8]	; (8019648 <_ZSt15get_new_handlerv+0xc>)
 801963e:	6818      	ldr	r0, [r3, #0]
 8019640:	f3bf 8f5b 	dmb	ish
 8019644:	4770      	bx	lr
 8019646:	bf00      	nop
 8019648:	2000862c 	.word	0x2000862c

0801964c <pow>:
 801964c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019650:	ec59 8b10 	vmov	r8, r9, d0
 8019654:	ec57 6b11 	vmov	r6, r7, d1
 8019658:	f000 f8a6 	bl	80197a8 <__ieee754_pow>
 801965c:	4b4e      	ldr	r3, [pc, #312]	; (8019798 <pow+0x14c>)
 801965e:	f993 3000 	ldrsb.w	r3, [r3]
 8019662:	3301      	adds	r3, #1
 8019664:	ec55 4b10 	vmov	r4, r5, d0
 8019668:	d015      	beq.n	8019696 <pow+0x4a>
 801966a:	4632      	mov	r2, r6
 801966c:	463b      	mov	r3, r7
 801966e:	4630      	mov	r0, r6
 8019670:	4639      	mov	r1, r7
 8019672:	f7e7 fa7b 	bl	8000b6c <__aeabi_dcmpun>
 8019676:	b970      	cbnz	r0, 8019696 <pow+0x4a>
 8019678:	4642      	mov	r2, r8
 801967a:	464b      	mov	r3, r9
 801967c:	4640      	mov	r0, r8
 801967e:	4649      	mov	r1, r9
 8019680:	f7e7 fa74 	bl	8000b6c <__aeabi_dcmpun>
 8019684:	2200      	movs	r2, #0
 8019686:	2300      	movs	r3, #0
 8019688:	b148      	cbz	r0, 801969e <pow+0x52>
 801968a:	4630      	mov	r0, r6
 801968c:	4639      	mov	r1, r7
 801968e:	f7e7 fa3b 	bl	8000b08 <__aeabi_dcmpeq>
 8019692:	2800      	cmp	r0, #0
 8019694:	d17d      	bne.n	8019792 <pow+0x146>
 8019696:	ec45 4b10 	vmov	d0, r4, r5
 801969a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801969e:	4640      	mov	r0, r8
 80196a0:	4649      	mov	r1, r9
 80196a2:	f7e7 fa31 	bl	8000b08 <__aeabi_dcmpeq>
 80196a6:	b1e0      	cbz	r0, 80196e2 <pow+0x96>
 80196a8:	2200      	movs	r2, #0
 80196aa:	2300      	movs	r3, #0
 80196ac:	4630      	mov	r0, r6
 80196ae:	4639      	mov	r1, r7
 80196b0:	f7e7 fa2a 	bl	8000b08 <__aeabi_dcmpeq>
 80196b4:	2800      	cmp	r0, #0
 80196b6:	d16c      	bne.n	8019792 <pow+0x146>
 80196b8:	ec47 6b10 	vmov	d0, r6, r7
 80196bc:	f000 fe53 	bl	801a366 <finite>
 80196c0:	2800      	cmp	r0, #0
 80196c2:	d0e8      	beq.n	8019696 <pow+0x4a>
 80196c4:	2200      	movs	r2, #0
 80196c6:	2300      	movs	r3, #0
 80196c8:	4630      	mov	r0, r6
 80196ca:	4639      	mov	r1, r7
 80196cc:	f7e7 fa26 	bl	8000b1c <__aeabi_dcmplt>
 80196d0:	2800      	cmp	r0, #0
 80196d2:	d0e0      	beq.n	8019696 <pow+0x4a>
 80196d4:	f000 ff7e 	bl	801a5d4 <__errno>
 80196d8:	2321      	movs	r3, #33	; 0x21
 80196da:	6003      	str	r3, [r0, #0]
 80196dc:	2400      	movs	r4, #0
 80196de:	4d2f      	ldr	r5, [pc, #188]	; (801979c <pow+0x150>)
 80196e0:	e7d9      	b.n	8019696 <pow+0x4a>
 80196e2:	ec45 4b10 	vmov	d0, r4, r5
 80196e6:	f000 fe3e 	bl	801a366 <finite>
 80196ea:	bbb8      	cbnz	r0, 801975c <pow+0x110>
 80196ec:	ec49 8b10 	vmov	d0, r8, r9
 80196f0:	f000 fe39 	bl	801a366 <finite>
 80196f4:	b390      	cbz	r0, 801975c <pow+0x110>
 80196f6:	ec47 6b10 	vmov	d0, r6, r7
 80196fa:	f000 fe34 	bl	801a366 <finite>
 80196fe:	b368      	cbz	r0, 801975c <pow+0x110>
 8019700:	4622      	mov	r2, r4
 8019702:	462b      	mov	r3, r5
 8019704:	4620      	mov	r0, r4
 8019706:	4629      	mov	r1, r5
 8019708:	f7e7 fa30 	bl	8000b6c <__aeabi_dcmpun>
 801970c:	b160      	cbz	r0, 8019728 <pow+0xdc>
 801970e:	f000 ff61 	bl	801a5d4 <__errno>
 8019712:	2321      	movs	r3, #33	; 0x21
 8019714:	6003      	str	r3, [r0, #0]
 8019716:	2200      	movs	r2, #0
 8019718:	2300      	movs	r3, #0
 801971a:	4610      	mov	r0, r2
 801971c:	4619      	mov	r1, r3
 801971e:	f7e7 f8b5 	bl	800088c <__aeabi_ddiv>
 8019722:	4604      	mov	r4, r0
 8019724:	460d      	mov	r5, r1
 8019726:	e7b6      	b.n	8019696 <pow+0x4a>
 8019728:	f000 ff54 	bl	801a5d4 <__errno>
 801972c:	2322      	movs	r3, #34	; 0x22
 801972e:	6003      	str	r3, [r0, #0]
 8019730:	2200      	movs	r2, #0
 8019732:	2300      	movs	r3, #0
 8019734:	4640      	mov	r0, r8
 8019736:	4649      	mov	r1, r9
 8019738:	f7e7 f9f0 	bl	8000b1c <__aeabi_dcmplt>
 801973c:	2400      	movs	r4, #0
 801973e:	b158      	cbz	r0, 8019758 <pow+0x10c>
 8019740:	ec47 6b10 	vmov	d0, r6, r7
 8019744:	f000 fe24 	bl	801a390 <rint>
 8019748:	4632      	mov	r2, r6
 801974a:	ec51 0b10 	vmov	r0, r1, d0
 801974e:	463b      	mov	r3, r7
 8019750:	f7e7 f9da 	bl	8000b08 <__aeabi_dcmpeq>
 8019754:	2800      	cmp	r0, #0
 8019756:	d0c2      	beq.n	80196de <pow+0x92>
 8019758:	4d11      	ldr	r5, [pc, #68]	; (80197a0 <pow+0x154>)
 801975a:	e79c      	b.n	8019696 <pow+0x4a>
 801975c:	2200      	movs	r2, #0
 801975e:	2300      	movs	r3, #0
 8019760:	4620      	mov	r0, r4
 8019762:	4629      	mov	r1, r5
 8019764:	f7e7 f9d0 	bl	8000b08 <__aeabi_dcmpeq>
 8019768:	2800      	cmp	r0, #0
 801976a:	d094      	beq.n	8019696 <pow+0x4a>
 801976c:	ec49 8b10 	vmov	d0, r8, r9
 8019770:	f000 fdf9 	bl	801a366 <finite>
 8019774:	2800      	cmp	r0, #0
 8019776:	d08e      	beq.n	8019696 <pow+0x4a>
 8019778:	ec47 6b10 	vmov	d0, r6, r7
 801977c:	f000 fdf3 	bl	801a366 <finite>
 8019780:	2800      	cmp	r0, #0
 8019782:	d088      	beq.n	8019696 <pow+0x4a>
 8019784:	f000 ff26 	bl	801a5d4 <__errno>
 8019788:	2322      	movs	r3, #34	; 0x22
 801978a:	6003      	str	r3, [r0, #0]
 801978c:	2400      	movs	r4, #0
 801978e:	2500      	movs	r5, #0
 8019790:	e781      	b.n	8019696 <pow+0x4a>
 8019792:	4d04      	ldr	r5, [pc, #16]	; (80197a4 <pow+0x158>)
 8019794:	2400      	movs	r4, #0
 8019796:	e77e      	b.n	8019696 <pow+0x4a>
 8019798:	200000f4 	.word	0x200000f4
 801979c:	fff00000 	.word	0xfff00000
 80197a0:	7ff00000 	.word	0x7ff00000
 80197a4:	3ff00000 	.word	0x3ff00000

080197a8 <__ieee754_pow>:
 80197a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197ac:	ed2d 8b06 	vpush	{d8-d10}
 80197b0:	b08d      	sub	sp, #52	; 0x34
 80197b2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80197b6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80197ba:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80197be:	ea56 0100 	orrs.w	r1, r6, r0
 80197c2:	ec53 2b10 	vmov	r2, r3, d0
 80197c6:	f000 84d1 	beq.w	801a16c <__ieee754_pow+0x9c4>
 80197ca:	497f      	ldr	r1, [pc, #508]	; (80199c8 <__ieee754_pow+0x220>)
 80197cc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80197d0:	428c      	cmp	r4, r1
 80197d2:	ee10 8a10 	vmov	r8, s0
 80197d6:	4699      	mov	r9, r3
 80197d8:	dc09      	bgt.n	80197ee <__ieee754_pow+0x46>
 80197da:	d103      	bne.n	80197e4 <__ieee754_pow+0x3c>
 80197dc:	b97a      	cbnz	r2, 80197fe <__ieee754_pow+0x56>
 80197de:	42a6      	cmp	r6, r4
 80197e0:	dd02      	ble.n	80197e8 <__ieee754_pow+0x40>
 80197e2:	e00c      	b.n	80197fe <__ieee754_pow+0x56>
 80197e4:	428e      	cmp	r6, r1
 80197e6:	dc02      	bgt.n	80197ee <__ieee754_pow+0x46>
 80197e8:	428e      	cmp	r6, r1
 80197ea:	d110      	bne.n	801980e <__ieee754_pow+0x66>
 80197ec:	b178      	cbz	r0, 801980e <__ieee754_pow+0x66>
 80197ee:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80197f2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80197f6:	ea54 0308 	orrs.w	r3, r4, r8
 80197fa:	f000 84b7 	beq.w	801a16c <__ieee754_pow+0x9c4>
 80197fe:	4873      	ldr	r0, [pc, #460]	; (80199cc <__ieee754_pow+0x224>)
 8019800:	b00d      	add	sp, #52	; 0x34
 8019802:	ecbd 8b06 	vpop	{d8-d10}
 8019806:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801980a:	f000 bdb9 	b.w	801a380 <nan>
 801980e:	f1b9 0f00 	cmp.w	r9, #0
 8019812:	da36      	bge.n	8019882 <__ieee754_pow+0xda>
 8019814:	496e      	ldr	r1, [pc, #440]	; (80199d0 <__ieee754_pow+0x228>)
 8019816:	428e      	cmp	r6, r1
 8019818:	dc51      	bgt.n	80198be <__ieee754_pow+0x116>
 801981a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801981e:	428e      	cmp	r6, r1
 8019820:	f340 84af 	ble.w	801a182 <__ieee754_pow+0x9da>
 8019824:	1531      	asrs	r1, r6, #20
 8019826:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801982a:	2914      	cmp	r1, #20
 801982c:	dd0f      	ble.n	801984e <__ieee754_pow+0xa6>
 801982e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8019832:	fa20 fc01 	lsr.w	ip, r0, r1
 8019836:	fa0c f101 	lsl.w	r1, ip, r1
 801983a:	4281      	cmp	r1, r0
 801983c:	f040 84a1 	bne.w	801a182 <__ieee754_pow+0x9da>
 8019840:	f00c 0c01 	and.w	ip, ip, #1
 8019844:	f1cc 0102 	rsb	r1, ip, #2
 8019848:	9100      	str	r1, [sp, #0]
 801984a:	b180      	cbz	r0, 801986e <__ieee754_pow+0xc6>
 801984c:	e059      	b.n	8019902 <__ieee754_pow+0x15a>
 801984e:	2800      	cmp	r0, #0
 8019850:	d155      	bne.n	80198fe <__ieee754_pow+0x156>
 8019852:	f1c1 0114 	rsb	r1, r1, #20
 8019856:	fa46 fc01 	asr.w	ip, r6, r1
 801985a:	fa0c f101 	lsl.w	r1, ip, r1
 801985e:	42b1      	cmp	r1, r6
 8019860:	f040 848c 	bne.w	801a17c <__ieee754_pow+0x9d4>
 8019864:	f00c 0c01 	and.w	ip, ip, #1
 8019868:	f1cc 0102 	rsb	r1, ip, #2
 801986c:	9100      	str	r1, [sp, #0]
 801986e:	4959      	ldr	r1, [pc, #356]	; (80199d4 <__ieee754_pow+0x22c>)
 8019870:	428e      	cmp	r6, r1
 8019872:	d12d      	bne.n	80198d0 <__ieee754_pow+0x128>
 8019874:	2f00      	cmp	r7, #0
 8019876:	da79      	bge.n	801996c <__ieee754_pow+0x1c4>
 8019878:	4956      	ldr	r1, [pc, #344]	; (80199d4 <__ieee754_pow+0x22c>)
 801987a:	2000      	movs	r0, #0
 801987c:	f7e7 f806 	bl	800088c <__aeabi_ddiv>
 8019880:	e016      	b.n	80198b0 <__ieee754_pow+0x108>
 8019882:	2100      	movs	r1, #0
 8019884:	9100      	str	r1, [sp, #0]
 8019886:	2800      	cmp	r0, #0
 8019888:	d13b      	bne.n	8019902 <__ieee754_pow+0x15a>
 801988a:	494f      	ldr	r1, [pc, #316]	; (80199c8 <__ieee754_pow+0x220>)
 801988c:	428e      	cmp	r6, r1
 801988e:	d1ee      	bne.n	801986e <__ieee754_pow+0xc6>
 8019890:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8019894:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8019898:	ea53 0308 	orrs.w	r3, r3, r8
 801989c:	f000 8466 	beq.w	801a16c <__ieee754_pow+0x9c4>
 80198a0:	4b4d      	ldr	r3, [pc, #308]	; (80199d8 <__ieee754_pow+0x230>)
 80198a2:	429c      	cmp	r4, r3
 80198a4:	dd0d      	ble.n	80198c2 <__ieee754_pow+0x11a>
 80198a6:	2f00      	cmp	r7, #0
 80198a8:	f280 8464 	bge.w	801a174 <__ieee754_pow+0x9cc>
 80198ac:	2000      	movs	r0, #0
 80198ae:	2100      	movs	r1, #0
 80198b0:	ec41 0b10 	vmov	d0, r0, r1
 80198b4:	b00d      	add	sp, #52	; 0x34
 80198b6:	ecbd 8b06 	vpop	{d8-d10}
 80198ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198be:	2102      	movs	r1, #2
 80198c0:	e7e0      	b.n	8019884 <__ieee754_pow+0xdc>
 80198c2:	2f00      	cmp	r7, #0
 80198c4:	daf2      	bge.n	80198ac <__ieee754_pow+0x104>
 80198c6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80198ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80198ce:	e7ef      	b.n	80198b0 <__ieee754_pow+0x108>
 80198d0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80198d4:	d104      	bne.n	80198e0 <__ieee754_pow+0x138>
 80198d6:	4610      	mov	r0, r2
 80198d8:	4619      	mov	r1, r3
 80198da:	f7e6 fead 	bl	8000638 <__aeabi_dmul>
 80198de:	e7e7      	b.n	80198b0 <__ieee754_pow+0x108>
 80198e0:	493e      	ldr	r1, [pc, #248]	; (80199dc <__ieee754_pow+0x234>)
 80198e2:	428f      	cmp	r7, r1
 80198e4:	d10d      	bne.n	8019902 <__ieee754_pow+0x15a>
 80198e6:	f1b9 0f00 	cmp.w	r9, #0
 80198ea:	db0a      	blt.n	8019902 <__ieee754_pow+0x15a>
 80198ec:	ec43 2b10 	vmov	d0, r2, r3
 80198f0:	b00d      	add	sp, #52	; 0x34
 80198f2:	ecbd 8b06 	vpop	{d8-d10}
 80198f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198fa:	f000 bc77 	b.w	801a1ec <__ieee754_sqrt>
 80198fe:	2100      	movs	r1, #0
 8019900:	9100      	str	r1, [sp, #0]
 8019902:	ec43 2b10 	vmov	d0, r2, r3
 8019906:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801990a:	f000 fd23 	bl	801a354 <fabs>
 801990e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019912:	ec51 0b10 	vmov	r0, r1, d0
 8019916:	f1b8 0f00 	cmp.w	r8, #0
 801991a:	d12a      	bne.n	8019972 <__ieee754_pow+0x1ca>
 801991c:	b12c      	cbz	r4, 801992a <__ieee754_pow+0x182>
 801991e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80199d4 <__ieee754_pow+0x22c>
 8019922:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8019926:	45e6      	cmp	lr, ip
 8019928:	d123      	bne.n	8019972 <__ieee754_pow+0x1ca>
 801992a:	2f00      	cmp	r7, #0
 801992c:	da05      	bge.n	801993a <__ieee754_pow+0x192>
 801992e:	4602      	mov	r2, r0
 8019930:	460b      	mov	r3, r1
 8019932:	2000      	movs	r0, #0
 8019934:	4927      	ldr	r1, [pc, #156]	; (80199d4 <__ieee754_pow+0x22c>)
 8019936:	f7e6 ffa9 	bl	800088c <__aeabi_ddiv>
 801993a:	f1b9 0f00 	cmp.w	r9, #0
 801993e:	dab7      	bge.n	80198b0 <__ieee754_pow+0x108>
 8019940:	9b00      	ldr	r3, [sp, #0]
 8019942:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8019946:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801994a:	4323      	orrs	r3, r4
 801994c:	d108      	bne.n	8019960 <__ieee754_pow+0x1b8>
 801994e:	4602      	mov	r2, r0
 8019950:	460b      	mov	r3, r1
 8019952:	4610      	mov	r0, r2
 8019954:	4619      	mov	r1, r3
 8019956:	f7e6 fcb7 	bl	80002c8 <__aeabi_dsub>
 801995a:	4602      	mov	r2, r0
 801995c:	460b      	mov	r3, r1
 801995e:	e78d      	b.n	801987c <__ieee754_pow+0xd4>
 8019960:	9b00      	ldr	r3, [sp, #0]
 8019962:	2b01      	cmp	r3, #1
 8019964:	d1a4      	bne.n	80198b0 <__ieee754_pow+0x108>
 8019966:	4602      	mov	r2, r0
 8019968:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801996c:	4610      	mov	r0, r2
 801996e:	4619      	mov	r1, r3
 8019970:	e79e      	b.n	80198b0 <__ieee754_pow+0x108>
 8019972:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8019976:	f10c 35ff 	add.w	r5, ip, #4294967295
 801997a:	950a      	str	r5, [sp, #40]	; 0x28
 801997c:	9d00      	ldr	r5, [sp, #0]
 801997e:	46ac      	mov	ip, r5
 8019980:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8019982:	ea5c 0505 	orrs.w	r5, ip, r5
 8019986:	d0e4      	beq.n	8019952 <__ieee754_pow+0x1aa>
 8019988:	4b15      	ldr	r3, [pc, #84]	; (80199e0 <__ieee754_pow+0x238>)
 801998a:	429e      	cmp	r6, r3
 801998c:	f340 80fc 	ble.w	8019b88 <__ieee754_pow+0x3e0>
 8019990:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8019994:	429e      	cmp	r6, r3
 8019996:	4b10      	ldr	r3, [pc, #64]	; (80199d8 <__ieee754_pow+0x230>)
 8019998:	dd07      	ble.n	80199aa <__ieee754_pow+0x202>
 801999a:	429c      	cmp	r4, r3
 801999c:	dc0a      	bgt.n	80199b4 <__ieee754_pow+0x20c>
 801999e:	2f00      	cmp	r7, #0
 80199a0:	da84      	bge.n	80198ac <__ieee754_pow+0x104>
 80199a2:	a307      	add	r3, pc, #28	; (adr r3, 80199c0 <__ieee754_pow+0x218>)
 80199a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199a8:	e795      	b.n	80198d6 <__ieee754_pow+0x12e>
 80199aa:	429c      	cmp	r4, r3
 80199ac:	dbf7      	blt.n	801999e <__ieee754_pow+0x1f6>
 80199ae:	4b09      	ldr	r3, [pc, #36]	; (80199d4 <__ieee754_pow+0x22c>)
 80199b0:	429c      	cmp	r4, r3
 80199b2:	dd17      	ble.n	80199e4 <__ieee754_pow+0x23c>
 80199b4:	2f00      	cmp	r7, #0
 80199b6:	dcf4      	bgt.n	80199a2 <__ieee754_pow+0x1fa>
 80199b8:	e778      	b.n	80198ac <__ieee754_pow+0x104>
 80199ba:	bf00      	nop
 80199bc:	f3af 8000 	nop.w
 80199c0:	8800759c 	.word	0x8800759c
 80199c4:	7e37e43c 	.word	0x7e37e43c
 80199c8:	7ff00000 	.word	0x7ff00000
 80199cc:	08022f88 	.word	0x08022f88
 80199d0:	433fffff 	.word	0x433fffff
 80199d4:	3ff00000 	.word	0x3ff00000
 80199d8:	3fefffff 	.word	0x3fefffff
 80199dc:	3fe00000 	.word	0x3fe00000
 80199e0:	41e00000 	.word	0x41e00000
 80199e4:	4b64      	ldr	r3, [pc, #400]	; (8019b78 <__ieee754_pow+0x3d0>)
 80199e6:	2200      	movs	r2, #0
 80199e8:	f7e6 fc6e 	bl	80002c8 <__aeabi_dsub>
 80199ec:	a356      	add	r3, pc, #344	; (adr r3, 8019b48 <__ieee754_pow+0x3a0>)
 80199ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199f2:	4604      	mov	r4, r0
 80199f4:	460d      	mov	r5, r1
 80199f6:	f7e6 fe1f 	bl	8000638 <__aeabi_dmul>
 80199fa:	a355      	add	r3, pc, #340	; (adr r3, 8019b50 <__ieee754_pow+0x3a8>)
 80199fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a00:	4606      	mov	r6, r0
 8019a02:	460f      	mov	r7, r1
 8019a04:	4620      	mov	r0, r4
 8019a06:	4629      	mov	r1, r5
 8019a08:	f7e6 fe16 	bl	8000638 <__aeabi_dmul>
 8019a0c:	4b5b      	ldr	r3, [pc, #364]	; (8019b7c <__ieee754_pow+0x3d4>)
 8019a0e:	4682      	mov	sl, r0
 8019a10:	468b      	mov	fp, r1
 8019a12:	2200      	movs	r2, #0
 8019a14:	4620      	mov	r0, r4
 8019a16:	4629      	mov	r1, r5
 8019a18:	f7e6 fe0e 	bl	8000638 <__aeabi_dmul>
 8019a1c:	4602      	mov	r2, r0
 8019a1e:	460b      	mov	r3, r1
 8019a20:	a14d      	add	r1, pc, #308	; (adr r1, 8019b58 <__ieee754_pow+0x3b0>)
 8019a22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a26:	f7e6 fc4f 	bl	80002c8 <__aeabi_dsub>
 8019a2a:	4622      	mov	r2, r4
 8019a2c:	462b      	mov	r3, r5
 8019a2e:	f7e6 fe03 	bl	8000638 <__aeabi_dmul>
 8019a32:	4602      	mov	r2, r0
 8019a34:	460b      	mov	r3, r1
 8019a36:	2000      	movs	r0, #0
 8019a38:	4951      	ldr	r1, [pc, #324]	; (8019b80 <__ieee754_pow+0x3d8>)
 8019a3a:	f7e6 fc45 	bl	80002c8 <__aeabi_dsub>
 8019a3e:	4622      	mov	r2, r4
 8019a40:	4680      	mov	r8, r0
 8019a42:	4689      	mov	r9, r1
 8019a44:	462b      	mov	r3, r5
 8019a46:	4620      	mov	r0, r4
 8019a48:	4629      	mov	r1, r5
 8019a4a:	f7e6 fdf5 	bl	8000638 <__aeabi_dmul>
 8019a4e:	4602      	mov	r2, r0
 8019a50:	460b      	mov	r3, r1
 8019a52:	4640      	mov	r0, r8
 8019a54:	4649      	mov	r1, r9
 8019a56:	f7e6 fdef 	bl	8000638 <__aeabi_dmul>
 8019a5a:	a341      	add	r3, pc, #260	; (adr r3, 8019b60 <__ieee754_pow+0x3b8>)
 8019a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a60:	f7e6 fdea 	bl	8000638 <__aeabi_dmul>
 8019a64:	4602      	mov	r2, r0
 8019a66:	460b      	mov	r3, r1
 8019a68:	4650      	mov	r0, sl
 8019a6a:	4659      	mov	r1, fp
 8019a6c:	f7e6 fc2c 	bl	80002c8 <__aeabi_dsub>
 8019a70:	4602      	mov	r2, r0
 8019a72:	460b      	mov	r3, r1
 8019a74:	4680      	mov	r8, r0
 8019a76:	4689      	mov	r9, r1
 8019a78:	4630      	mov	r0, r6
 8019a7a:	4639      	mov	r1, r7
 8019a7c:	f7e6 fc26 	bl	80002cc <__adddf3>
 8019a80:	2400      	movs	r4, #0
 8019a82:	4632      	mov	r2, r6
 8019a84:	463b      	mov	r3, r7
 8019a86:	4620      	mov	r0, r4
 8019a88:	460d      	mov	r5, r1
 8019a8a:	f7e6 fc1d 	bl	80002c8 <__aeabi_dsub>
 8019a8e:	4602      	mov	r2, r0
 8019a90:	460b      	mov	r3, r1
 8019a92:	4640      	mov	r0, r8
 8019a94:	4649      	mov	r1, r9
 8019a96:	f7e6 fc17 	bl	80002c8 <__aeabi_dsub>
 8019a9a:	9b00      	ldr	r3, [sp, #0]
 8019a9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019a9e:	3b01      	subs	r3, #1
 8019aa0:	4313      	orrs	r3, r2
 8019aa2:	4682      	mov	sl, r0
 8019aa4:	468b      	mov	fp, r1
 8019aa6:	f040 81f1 	bne.w	8019e8c <__ieee754_pow+0x6e4>
 8019aaa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8019b68 <__ieee754_pow+0x3c0>
 8019aae:	eeb0 8a47 	vmov.f32	s16, s14
 8019ab2:	eef0 8a67 	vmov.f32	s17, s15
 8019ab6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8019aba:	2600      	movs	r6, #0
 8019abc:	4632      	mov	r2, r6
 8019abe:	463b      	mov	r3, r7
 8019ac0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019ac4:	f7e6 fc00 	bl	80002c8 <__aeabi_dsub>
 8019ac8:	4622      	mov	r2, r4
 8019aca:	462b      	mov	r3, r5
 8019acc:	f7e6 fdb4 	bl	8000638 <__aeabi_dmul>
 8019ad0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019ad4:	4680      	mov	r8, r0
 8019ad6:	4689      	mov	r9, r1
 8019ad8:	4650      	mov	r0, sl
 8019ada:	4659      	mov	r1, fp
 8019adc:	f7e6 fdac 	bl	8000638 <__aeabi_dmul>
 8019ae0:	4602      	mov	r2, r0
 8019ae2:	460b      	mov	r3, r1
 8019ae4:	4640      	mov	r0, r8
 8019ae6:	4649      	mov	r1, r9
 8019ae8:	f7e6 fbf0 	bl	80002cc <__adddf3>
 8019aec:	4632      	mov	r2, r6
 8019aee:	463b      	mov	r3, r7
 8019af0:	4680      	mov	r8, r0
 8019af2:	4689      	mov	r9, r1
 8019af4:	4620      	mov	r0, r4
 8019af6:	4629      	mov	r1, r5
 8019af8:	f7e6 fd9e 	bl	8000638 <__aeabi_dmul>
 8019afc:	460b      	mov	r3, r1
 8019afe:	4604      	mov	r4, r0
 8019b00:	460d      	mov	r5, r1
 8019b02:	4602      	mov	r2, r0
 8019b04:	4649      	mov	r1, r9
 8019b06:	4640      	mov	r0, r8
 8019b08:	f7e6 fbe0 	bl	80002cc <__adddf3>
 8019b0c:	4b1d      	ldr	r3, [pc, #116]	; (8019b84 <__ieee754_pow+0x3dc>)
 8019b0e:	4299      	cmp	r1, r3
 8019b10:	ec45 4b19 	vmov	d9, r4, r5
 8019b14:	4606      	mov	r6, r0
 8019b16:	460f      	mov	r7, r1
 8019b18:	468b      	mov	fp, r1
 8019b1a:	f340 82fe 	ble.w	801a11a <__ieee754_pow+0x972>
 8019b1e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8019b22:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8019b26:	4303      	orrs	r3, r0
 8019b28:	f000 81f0 	beq.w	8019f0c <__ieee754_pow+0x764>
 8019b2c:	a310      	add	r3, pc, #64	; (adr r3, 8019b70 <__ieee754_pow+0x3c8>)
 8019b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b32:	ec51 0b18 	vmov	r0, r1, d8
 8019b36:	f7e6 fd7f 	bl	8000638 <__aeabi_dmul>
 8019b3a:	a30d      	add	r3, pc, #52	; (adr r3, 8019b70 <__ieee754_pow+0x3c8>)
 8019b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b40:	e6cb      	b.n	80198da <__ieee754_pow+0x132>
 8019b42:	bf00      	nop
 8019b44:	f3af 8000 	nop.w
 8019b48:	60000000 	.word	0x60000000
 8019b4c:	3ff71547 	.word	0x3ff71547
 8019b50:	f85ddf44 	.word	0xf85ddf44
 8019b54:	3e54ae0b 	.word	0x3e54ae0b
 8019b58:	55555555 	.word	0x55555555
 8019b5c:	3fd55555 	.word	0x3fd55555
 8019b60:	652b82fe 	.word	0x652b82fe
 8019b64:	3ff71547 	.word	0x3ff71547
 8019b68:	00000000 	.word	0x00000000
 8019b6c:	bff00000 	.word	0xbff00000
 8019b70:	8800759c 	.word	0x8800759c
 8019b74:	7e37e43c 	.word	0x7e37e43c
 8019b78:	3ff00000 	.word	0x3ff00000
 8019b7c:	3fd00000 	.word	0x3fd00000
 8019b80:	3fe00000 	.word	0x3fe00000
 8019b84:	408fffff 	.word	0x408fffff
 8019b88:	4bd7      	ldr	r3, [pc, #860]	; (8019ee8 <__ieee754_pow+0x740>)
 8019b8a:	ea03 0309 	and.w	r3, r3, r9
 8019b8e:	2200      	movs	r2, #0
 8019b90:	b92b      	cbnz	r3, 8019b9e <__ieee754_pow+0x3f6>
 8019b92:	4bd6      	ldr	r3, [pc, #856]	; (8019eec <__ieee754_pow+0x744>)
 8019b94:	f7e6 fd50 	bl	8000638 <__aeabi_dmul>
 8019b98:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8019b9c:	460c      	mov	r4, r1
 8019b9e:	1523      	asrs	r3, r4, #20
 8019ba0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019ba4:	4413      	add	r3, r2
 8019ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8019ba8:	4bd1      	ldr	r3, [pc, #836]	; (8019ef0 <__ieee754_pow+0x748>)
 8019baa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8019bae:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8019bb2:	429c      	cmp	r4, r3
 8019bb4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019bb8:	dd08      	ble.n	8019bcc <__ieee754_pow+0x424>
 8019bba:	4bce      	ldr	r3, [pc, #824]	; (8019ef4 <__ieee754_pow+0x74c>)
 8019bbc:	429c      	cmp	r4, r3
 8019bbe:	f340 8163 	ble.w	8019e88 <__ieee754_pow+0x6e0>
 8019bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019bc4:	3301      	adds	r3, #1
 8019bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8019bc8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8019bcc:	2400      	movs	r4, #0
 8019bce:	00e3      	lsls	r3, r4, #3
 8019bd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8019bd2:	4bc9      	ldr	r3, [pc, #804]	; (8019ef8 <__ieee754_pow+0x750>)
 8019bd4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019bd8:	ed93 7b00 	vldr	d7, [r3]
 8019bdc:	4629      	mov	r1, r5
 8019bde:	ec53 2b17 	vmov	r2, r3, d7
 8019be2:	eeb0 8a47 	vmov.f32	s16, s14
 8019be6:	eef0 8a67 	vmov.f32	s17, s15
 8019bea:	4682      	mov	sl, r0
 8019bec:	f7e6 fb6c 	bl	80002c8 <__aeabi_dsub>
 8019bf0:	4652      	mov	r2, sl
 8019bf2:	4606      	mov	r6, r0
 8019bf4:	460f      	mov	r7, r1
 8019bf6:	462b      	mov	r3, r5
 8019bf8:	ec51 0b18 	vmov	r0, r1, d8
 8019bfc:	f7e6 fb66 	bl	80002cc <__adddf3>
 8019c00:	4602      	mov	r2, r0
 8019c02:	460b      	mov	r3, r1
 8019c04:	2000      	movs	r0, #0
 8019c06:	49bd      	ldr	r1, [pc, #756]	; (8019efc <__ieee754_pow+0x754>)
 8019c08:	f7e6 fe40 	bl	800088c <__aeabi_ddiv>
 8019c0c:	ec41 0b19 	vmov	d9, r0, r1
 8019c10:	4602      	mov	r2, r0
 8019c12:	460b      	mov	r3, r1
 8019c14:	4630      	mov	r0, r6
 8019c16:	4639      	mov	r1, r7
 8019c18:	f7e6 fd0e 	bl	8000638 <__aeabi_dmul>
 8019c1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019c20:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019c24:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8019c28:	2300      	movs	r3, #0
 8019c2a:	9304      	str	r3, [sp, #16]
 8019c2c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8019c30:	46ab      	mov	fp, r5
 8019c32:	106d      	asrs	r5, r5, #1
 8019c34:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8019c38:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8019c3c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8019c40:	2200      	movs	r2, #0
 8019c42:	4640      	mov	r0, r8
 8019c44:	4649      	mov	r1, r9
 8019c46:	4614      	mov	r4, r2
 8019c48:	461d      	mov	r5, r3
 8019c4a:	f7e6 fcf5 	bl	8000638 <__aeabi_dmul>
 8019c4e:	4602      	mov	r2, r0
 8019c50:	460b      	mov	r3, r1
 8019c52:	4630      	mov	r0, r6
 8019c54:	4639      	mov	r1, r7
 8019c56:	f7e6 fb37 	bl	80002c8 <__aeabi_dsub>
 8019c5a:	ec53 2b18 	vmov	r2, r3, d8
 8019c5e:	4606      	mov	r6, r0
 8019c60:	460f      	mov	r7, r1
 8019c62:	4620      	mov	r0, r4
 8019c64:	4629      	mov	r1, r5
 8019c66:	f7e6 fb2f 	bl	80002c8 <__aeabi_dsub>
 8019c6a:	4602      	mov	r2, r0
 8019c6c:	460b      	mov	r3, r1
 8019c6e:	4650      	mov	r0, sl
 8019c70:	4659      	mov	r1, fp
 8019c72:	f7e6 fb29 	bl	80002c8 <__aeabi_dsub>
 8019c76:	4642      	mov	r2, r8
 8019c78:	464b      	mov	r3, r9
 8019c7a:	f7e6 fcdd 	bl	8000638 <__aeabi_dmul>
 8019c7e:	4602      	mov	r2, r0
 8019c80:	460b      	mov	r3, r1
 8019c82:	4630      	mov	r0, r6
 8019c84:	4639      	mov	r1, r7
 8019c86:	f7e6 fb1f 	bl	80002c8 <__aeabi_dsub>
 8019c8a:	ec53 2b19 	vmov	r2, r3, d9
 8019c8e:	f7e6 fcd3 	bl	8000638 <__aeabi_dmul>
 8019c92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019c96:	ec41 0b18 	vmov	d8, r0, r1
 8019c9a:	4610      	mov	r0, r2
 8019c9c:	4619      	mov	r1, r3
 8019c9e:	f7e6 fccb 	bl	8000638 <__aeabi_dmul>
 8019ca2:	a37d      	add	r3, pc, #500	; (adr r3, 8019e98 <__ieee754_pow+0x6f0>)
 8019ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ca8:	4604      	mov	r4, r0
 8019caa:	460d      	mov	r5, r1
 8019cac:	f7e6 fcc4 	bl	8000638 <__aeabi_dmul>
 8019cb0:	a37b      	add	r3, pc, #492	; (adr r3, 8019ea0 <__ieee754_pow+0x6f8>)
 8019cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cb6:	f7e6 fb09 	bl	80002cc <__adddf3>
 8019cba:	4622      	mov	r2, r4
 8019cbc:	462b      	mov	r3, r5
 8019cbe:	f7e6 fcbb 	bl	8000638 <__aeabi_dmul>
 8019cc2:	a379      	add	r3, pc, #484	; (adr r3, 8019ea8 <__ieee754_pow+0x700>)
 8019cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cc8:	f7e6 fb00 	bl	80002cc <__adddf3>
 8019ccc:	4622      	mov	r2, r4
 8019cce:	462b      	mov	r3, r5
 8019cd0:	f7e6 fcb2 	bl	8000638 <__aeabi_dmul>
 8019cd4:	a376      	add	r3, pc, #472	; (adr r3, 8019eb0 <__ieee754_pow+0x708>)
 8019cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cda:	f7e6 faf7 	bl	80002cc <__adddf3>
 8019cde:	4622      	mov	r2, r4
 8019ce0:	462b      	mov	r3, r5
 8019ce2:	f7e6 fca9 	bl	8000638 <__aeabi_dmul>
 8019ce6:	a374      	add	r3, pc, #464	; (adr r3, 8019eb8 <__ieee754_pow+0x710>)
 8019ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cec:	f7e6 faee 	bl	80002cc <__adddf3>
 8019cf0:	4622      	mov	r2, r4
 8019cf2:	462b      	mov	r3, r5
 8019cf4:	f7e6 fca0 	bl	8000638 <__aeabi_dmul>
 8019cf8:	a371      	add	r3, pc, #452	; (adr r3, 8019ec0 <__ieee754_pow+0x718>)
 8019cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cfe:	f7e6 fae5 	bl	80002cc <__adddf3>
 8019d02:	4622      	mov	r2, r4
 8019d04:	4606      	mov	r6, r0
 8019d06:	460f      	mov	r7, r1
 8019d08:	462b      	mov	r3, r5
 8019d0a:	4620      	mov	r0, r4
 8019d0c:	4629      	mov	r1, r5
 8019d0e:	f7e6 fc93 	bl	8000638 <__aeabi_dmul>
 8019d12:	4602      	mov	r2, r0
 8019d14:	460b      	mov	r3, r1
 8019d16:	4630      	mov	r0, r6
 8019d18:	4639      	mov	r1, r7
 8019d1a:	f7e6 fc8d 	bl	8000638 <__aeabi_dmul>
 8019d1e:	4642      	mov	r2, r8
 8019d20:	4604      	mov	r4, r0
 8019d22:	460d      	mov	r5, r1
 8019d24:	464b      	mov	r3, r9
 8019d26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019d2a:	f7e6 facf 	bl	80002cc <__adddf3>
 8019d2e:	ec53 2b18 	vmov	r2, r3, d8
 8019d32:	f7e6 fc81 	bl	8000638 <__aeabi_dmul>
 8019d36:	4622      	mov	r2, r4
 8019d38:	462b      	mov	r3, r5
 8019d3a:	f7e6 fac7 	bl	80002cc <__adddf3>
 8019d3e:	4642      	mov	r2, r8
 8019d40:	4682      	mov	sl, r0
 8019d42:	468b      	mov	fp, r1
 8019d44:	464b      	mov	r3, r9
 8019d46:	4640      	mov	r0, r8
 8019d48:	4649      	mov	r1, r9
 8019d4a:	f7e6 fc75 	bl	8000638 <__aeabi_dmul>
 8019d4e:	4b6c      	ldr	r3, [pc, #432]	; (8019f00 <__ieee754_pow+0x758>)
 8019d50:	2200      	movs	r2, #0
 8019d52:	4606      	mov	r6, r0
 8019d54:	460f      	mov	r7, r1
 8019d56:	f7e6 fab9 	bl	80002cc <__adddf3>
 8019d5a:	4652      	mov	r2, sl
 8019d5c:	465b      	mov	r3, fp
 8019d5e:	f7e6 fab5 	bl	80002cc <__adddf3>
 8019d62:	9c04      	ldr	r4, [sp, #16]
 8019d64:	460d      	mov	r5, r1
 8019d66:	4622      	mov	r2, r4
 8019d68:	460b      	mov	r3, r1
 8019d6a:	4640      	mov	r0, r8
 8019d6c:	4649      	mov	r1, r9
 8019d6e:	f7e6 fc63 	bl	8000638 <__aeabi_dmul>
 8019d72:	4b63      	ldr	r3, [pc, #396]	; (8019f00 <__ieee754_pow+0x758>)
 8019d74:	4680      	mov	r8, r0
 8019d76:	4689      	mov	r9, r1
 8019d78:	2200      	movs	r2, #0
 8019d7a:	4620      	mov	r0, r4
 8019d7c:	4629      	mov	r1, r5
 8019d7e:	f7e6 faa3 	bl	80002c8 <__aeabi_dsub>
 8019d82:	4632      	mov	r2, r6
 8019d84:	463b      	mov	r3, r7
 8019d86:	f7e6 fa9f 	bl	80002c8 <__aeabi_dsub>
 8019d8a:	4602      	mov	r2, r0
 8019d8c:	460b      	mov	r3, r1
 8019d8e:	4650      	mov	r0, sl
 8019d90:	4659      	mov	r1, fp
 8019d92:	f7e6 fa99 	bl	80002c8 <__aeabi_dsub>
 8019d96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019d9a:	f7e6 fc4d 	bl	8000638 <__aeabi_dmul>
 8019d9e:	4622      	mov	r2, r4
 8019da0:	4606      	mov	r6, r0
 8019da2:	460f      	mov	r7, r1
 8019da4:	462b      	mov	r3, r5
 8019da6:	ec51 0b18 	vmov	r0, r1, d8
 8019daa:	f7e6 fc45 	bl	8000638 <__aeabi_dmul>
 8019dae:	4602      	mov	r2, r0
 8019db0:	460b      	mov	r3, r1
 8019db2:	4630      	mov	r0, r6
 8019db4:	4639      	mov	r1, r7
 8019db6:	f7e6 fa89 	bl	80002cc <__adddf3>
 8019dba:	4606      	mov	r6, r0
 8019dbc:	460f      	mov	r7, r1
 8019dbe:	4602      	mov	r2, r0
 8019dc0:	460b      	mov	r3, r1
 8019dc2:	4640      	mov	r0, r8
 8019dc4:	4649      	mov	r1, r9
 8019dc6:	f7e6 fa81 	bl	80002cc <__adddf3>
 8019dca:	9c04      	ldr	r4, [sp, #16]
 8019dcc:	a33e      	add	r3, pc, #248	; (adr r3, 8019ec8 <__ieee754_pow+0x720>)
 8019dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dd2:	4620      	mov	r0, r4
 8019dd4:	460d      	mov	r5, r1
 8019dd6:	f7e6 fc2f 	bl	8000638 <__aeabi_dmul>
 8019dda:	4642      	mov	r2, r8
 8019ddc:	ec41 0b18 	vmov	d8, r0, r1
 8019de0:	464b      	mov	r3, r9
 8019de2:	4620      	mov	r0, r4
 8019de4:	4629      	mov	r1, r5
 8019de6:	f7e6 fa6f 	bl	80002c8 <__aeabi_dsub>
 8019dea:	4602      	mov	r2, r0
 8019dec:	460b      	mov	r3, r1
 8019dee:	4630      	mov	r0, r6
 8019df0:	4639      	mov	r1, r7
 8019df2:	f7e6 fa69 	bl	80002c8 <__aeabi_dsub>
 8019df6:	a336      	add	r3, pc, #216	; (adr r3, 8019ed0 <__ieee754_pow+0x728>)
 8019df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dfc:	f7e6 fc1c 	bl	8000638 <__aeabi_dmul>
 8019e00:	a335      	add	r3, pc, #212	; (adr r3, 8019ed8 <__ieee754_pow+0x730>)
 8019e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e06:	4606      	mov	r6, r0
 8019e08:	460f      	mov	r7, r1
 8019e0a:	4620      	mov	r0, r4
 8019e0c:	4629      	mov	r1, r5
 8019e0e:	f7e6 fc13 	bl	8000638 <__aeabi_dmul>
 8019e12:	4602      	mov	r2, r0
 8019e14:	460b      	mov	r3, r1
 8019e16:	4630      	mov	r0, r6
 8019e18:	4639      	mov	r1, r7
 8019e1a:	f7e6 fa57 	bl	80002cc <__adddf3>
 8019e1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019e20:	4b38      	ldr	r3, [pc, #224]	; (8019f04 <__ieee754_pow+0x75c>)
 8019e22:	4413      	add	r3, r2
 8019e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e28:	f7e6 fa50 	bl	80002cc <__adddf3>
 8019e2c:	4682      	mov	sl, r0
 8019e2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019e30:	468b      	mov	fp, r1
 8019e32:	f7e6 fb97 	bl	8000564 <__aeabi_i2d>
 8019e36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019e38:	4b33      	ldr	r3, [pc, #204]	; (8019f08 <__ieee754_pow+0x760>)
 8019e3a:	4413      	add	r3, r2
 8019e3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019e40:	4606      	mov	r6, r0
 8019e42:	460f      	mov	r7, r1
 8019e44:	4652      	mov	r2, sl
 8019e46:	465b      	mov	r3, fp
 8019e48:	ec51 0b18 	vmov	r0, r1, d8
 8019e4c:	f7e6 fa3e 	bl	80002cc <__adddf3>
 8019e50:	4642      	mov	r2, r8
 8019e52:	464b      	mov	r3, r9
 8019e54:	f7e6 fa3a 	bl	80002cc <__adddf3>
 8019e58:	4632      	mov	r2, r6
 8019e5a:	463b      	mov	r3, r7
 8019e5c:	f7e6 fa36 	bl	80002cc <__adddf3>
 8019e60:	9c04      	ldr	r4, [sp, #16]
 8019e62:	4632      	mov	r2, r6
 8019e64:	463b      	mov	r3, r7
 8019e66:	4620      	mov	r0, r4
 8019e68:	460d      	mov	r5, r1
 8019e6a:	f7e6 fa2d 	bl	80002c8 <__aeabi_dsub>
 8019e6e:	4642      	mov	r2, r8
 8019e70:	464b      	mov	r3, r9
 8019e72:	f7e6 fa29 	bl	80002c8 <__aeabi_dsub>
 8019e76:	ec53 2b18 	vmov	r2, r3, d8
 8019e7a:	f7e6 fa25 	bl	80002c8 <__aeabi_dsub>
 8019e7e:	4602      	mov	r2, r0
 8019e80:	460b      	mov	r3, r1
 8019e82:	4650      	mov	r0, sl
 8019e84:	4659      	mov	r1, fp
 8019e86:	e606      	b.n	8019a96 <__ieee754_pow+0x2ee>
 8019e88:	2401      	movs	r4, #1
 8019e8a:	e6a0      	b.n	8019bce <__ieee754_pow+0x426>
 8019e8c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8019ee0 <__ieee754_pow+0x738>
 8019e90:	e60d      	b.n	8019aae <__ieee754_pow+0x306>
 8019e92:	bf00      	nop
 8019e94:	f3af 8000 	nop.w
 8019e98:	4a454eef 	.word	0x4a454eef
 8019e9c:	3fca7e28 	.word	0x3fca7e28
 8019ea0:	93c9db65 	.word	0x93c9db65
 8019ea4:	3fcd864a 	.word	0x3fcd864a
 8019ea8:	a91d4101 	.word	0xa91d4101
 8019eac:	3fd17460 	.word	0x3fd17460
 8019eb0:	518f264d 	.word	0x518f264d
 8019eb4:	3fd55555 	.word	0x3fd55555
 8019eb8:	db6fabff 	.word	0xdb6fabff
 8019ebc:	3fdb6db6 	.word	0x3fdb6db6
 8019ec0:	33333303 	.word	0x33333303
 8019ec4:	3fe33333 	.word	0x3fe33333
 8019ec8:	e0000000 	.word	0xe0000000
 8019ecc:	3feec709 	.word	0x3feec709
 8019ed0:	dc3a03fd 	.word	0xdc3a03fd
 8019ed4:	3feec709 	.word	0x3feec709
 8019ed8:	145b01f5 	.word	0x145b01f5
 8019edc:	be3e2fe0 	.word	0xbe3e2fe0
 8019ee0:	00000000 	.word	0x00000000
 8019ee4:	3ff00000 	.word	0x3ff00000
 8019ee8:	7ff00000 	.word	0x7ff00000
 8019eec:	43400000 	.word	0x43400000
 8019ef0:	0003988e 	.word	0x0003988e
 8019ef4:	000bb679 	.word	0x000bb679
 8019ef8:	08022b48 	.word	0x08022b48
 8019efc:	3ff00000 	.word	0x3ff00000
 8019f00:	40080000 	.word	0x40080000
 8019f04:	08022b68 	.word	0x08022b68
 8019f08:	08022b58 	.word	0x08022b58
 8019f0c:	a3b5      	add	r3, pc, #724	; (adr r3, 801a1e4 <__ieee754_pow+0xa3c>)
 8019f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f12:	4640      	mov	r0, r8
 8019f14:	4649      	mov	r1, r9
 8019f16:	f7e6 f9d9 	bl	80002cc <__adddf3>
 8019f1a:	4622      	mov	r2, r4
 8019f1c:	ec41 0b1a 	vmov	d10, r0, r1
 8019f20:	462b      	mov	r3, r5
 8019f22:	4630      	mov	r0, r6
 8019f24:	4639      	mov	r1, r7
 8019f26:	f7e6 f9cf 	bl	80002c8 <__aeabi_dsub>
 8019f2a:	4602      	mov	r2, r0
 8019f2c:	460b      	mov	r3, r1
 8019f2e:	ec51 0b1a 	vmov	r0, r1, d10
 8019f32:	f7e6 fe11 	bl	8000b58 <__aeabi_dcmpgt>
 8019f36:	2800      	cmp	r0, #0
 8019f38:	f47f adf8 	bne.w	8019b2c <__ieee754_pow+0x384>
 8019f3c:	4aa4      	ldr	r2, [pc, #656]	; (801a1d0 <__ieee754_pow+0xa28>)
 8019f3e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8019f42:	4293      	cmp	r3, r2
 8019f44:	f340 810b 	ble.w	801a15e <__ieee754_pow+0x9b6>
 8019f48:	151b      	asrs	r3, r3, #20
 8019f4a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8019f4e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8019f52:	fa4a f303 	asr.w	r3, sl, r3
 8019f56:	445b      	add	r3, fp
 8019f58:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8019f5c:	4e9d      	ldr	r6, [pc, #628]	; (801a1d4 <__ieee754_pow+0xa2c>)
 8019f5e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8019f62:	4116      	asrs	r6, r2
 8019f64:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8019f68:	2000      	movs	r0, #0
 8019f6a:	ea23 0106 	bic.w	r1, r3, r6
 8019f6e:	f1c2 0214 	rsb	r2, r2, #20
 8019f72:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8019f76:	fa4a fa02 	asr.w	sl, sl, r2
 8019f7a:	f1bb 0f00 	cmp.w	fp, #0
 8019f7e:	4602      	mov	r2, r0
 8019f80:	460b      	mov	r3, r1
 8019f82:	4620      	mov	r0, r4
 8019f84:	4629      	mov	r1, r5
 8019f86:	bfb8      	it	lt
 8019f88:	f1ca 0a00 	rsblt	sl, sl, #0
 8019f8c:	f7e6 f99c 	bl	80002c8 <__aeabi_dsub>
 8019f90:	ec41 0b19 	vmov	d9, r0, r1
 8019f94:	4642      	mov	r2, r8
 8019f96:	464b      	mov	r3, r9
 8019f98:	ec51 0b19 	vmov	r0, r1, d9
 8019f9c:	f7e6 f996 	bl	80002cc <__adddf3>
 8019fa0:	2400      	movs	r4, #0
 8019fa2:	a379      	add	r3, pc, #484	; (adr r3, 801a188 <__ieee754_pow+0x9e0>)
 8019fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fa8:	4620      	mov	r0, r4
 8019faa:	460d      	mov	r5, r1
 8019fac:	f7e6 fb44 	bl	8000638 <__aeabi_dmul>
 8019fb0:	ec53 2b19 	vmov	r2, r3, d9
 8019fb4:	4606      	mov	r6, r0
 8019fb6:	460f      	mov	r7, r1
 8019fb8:	4620      	mov	r0, r4
 8019fba:	4629      	mov	r1, r5
 8019fbc:	f7e6 f984 	bl	80002c8 <__aeabi_dsub>
 8019fc0:	4602      	mov	r2, r0
 8019fc2:	460b      	mov	r3, r1
 8019fc4:	4640      	mov	r0, r8
 8019fc6:	4649      	mov	r1, r9
 8019fc8:	f7e6 f97e 	bl	80002c8 <__aeabi_dsub>
 8019fcc:	a370      	add	r3, pc, #448	; (adr r3, 801a190 <__ieee754_pow+0x9e8>)
 8019fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fd2:	f7e6 fb31 	bl	8000638 <__aeabi_dmul>
 8019fd6:	a370      	add	r3, pc, #448	; (adr r3, 801a198 <__ieee754_pow+0x9f0>)
 8019fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fdc:	4680      	mov	r8, r0
 8019fde:	4689      	mov	r9, r1
 8019fe0:	4620      	mov	r0, r4
 8019fe2:	4629      	mov	r1, r5
 8019fe4:	f7e6 fb28 	bl	8000638 <__aeabi_dmul>
 8019fe8:	4602      	mov	r2, r0
 8019fea:	460b      	mov	r3, r1
 8019fec:	4640      	mov	r0, r8
 8019fee:	4649      	mov	r1, r9
 8019ff0:	f7e6 f96c 	bl	80002cc <__adddf3>
 8019ff4:	4604      	mov	r4, r0
 8019ff6:	460d      	mov	r5, r1
 8019ff8:	4602      	mov	r2, r0
 8019ffa:	460b      	mov	r3, r1
 8019ffc:	4630      	mov	r0, r6
 8019ffe:	4639      	mov	r1, r7
 801a000:	f7e6 f964 	bl	80002cc <__adddf3>
 801a004:	4632      	mov	r2, r6
 801a006:	463b      	mov	r3, r7
 801a008:	4680      	mov	r8, r0
 801a00a:	4689      	mov	r9, r1
 801a00c:	f7e6 f95c 	bl	80002c8 <__aeabi_dsub>
 801a010:	4602      	mov	r2, r0
 801a012:	460b      	mov	r3, r1
 801a014:	4620      	mov	r0, r4
 801a016:	4629      	mov	r1, r5
 801a018:	f7e6 f956 	bl	80002c8 <__aeabi_dsub>
 801a01c:	4642      	mov	r2, r8
 801a01e:	4606      	mov	r6, r0
 801a020:	460f      	mov	r7, r1
 801a022:	464b      	mov	r3, r9
 801a024:	4640      	mov	r0, r8
 801a026:	4649      	mov	r1, r9
 801a028:	f7e6 fb06 	bl	8000638 <__aeabi_dmul>
 801a02c:	a35c      	add	r3, pc, #368	; (adr r3, 801a1a0 <__ieee754_pow+0x9f8>)
 801a02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a032:	4604      	mov	r4, r0
 801a034:	460d      	mov	r5, r1
 801a036:	f7e6 faff 	bl	8000638 <__aeabi_dmul>
 801a03a:	a35b      	add	r3, pc, #364	; (adr r3, 801a1a8 <__ieee754_pow+0xa00>)
 801a03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a040:	f7e6 f942 	bl	80002c8 <__aeabi_dsub>
 801a044:	4622      	mov	r2, r4
 801a046:	462b      	mov	r3, r5
 801a048:	f7e6 faf6 	bl	8000638 <__aeabi_dmul>
 801a04c:	a358      	add	r3, pc, #352	; (adr r3, 801a1b0 <__ieee754_pow+0xa08>)
 801a04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a052:	f7e6 f93b 	bl	80002cc <__adddf3>
 801a056:	4622      	mov	r2, r4
 801a058:	462b      	mov	r3, r5
 801a05a:	f7e6 faed 	bl	8000638 <__aeabi_dmul>
 801a05e:	a356      	add	r3, pc, #344	; (adr r3, 801a1b8 <__ieee754_pow+0xa10>)
 801a060:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a064:	f7e6 f930 	bl	80002c8 <__aeabi_dsub>
 801a068:	4622      	mov	r2, r4
 801a06a:	462b      	mov	r3, r5
 801a06c:	f7e6 fae4 	bl	8000638 <__aeabi_dmul>
 801a070:	a353      	add	r3, pc, #332	; (adr r3, 801a1c0 <__ieee754_pow+0xa18>)
 801a072:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a076:	f7e6 f929 	bl	80002cc <__adddf3>
 801a07a:	4622      	mov	r2, r4
 801a07c:	462b      	mov	r3, r5
 801a07e:	f7e6 fadb 	bl	8000638 <__aeabi_dmul>
 801a082:	4602      	mov	r2, r0
 801a084:	460b      	mov	r3, r1
 801a086:	4640      	mov	r0, r8
 801a088:	4649      	mov	r1, r9
 801a08a:	f7e6 f91d 	bl	80002c8 <__aeabi_dsub>
 801a08e:	4604      	mov	r4, r0
 801a090:	460d      	mov	r5, r1
 801a092:	4602      	mov	r2, r0
 801a094:	460b      	mov	r3, r1
 801a096:	4640      	mov	r0, r8
 801a098:	4649      	mov	r1, r9
 801a09a:	f7e6 facd 	bl	8000638 <__aeabi_dmul>
 801a09e:	2200      	movs	r2, #0
 801a0a0:	ec41 0b19 	vmov	d9, r0, r1
 801a0a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a0a8:	4620      	mov	r0, r4
 801a0aa:	4629      	mov	r1, r5
 801a0ac:	f7e6 f90c 	bl	80002c8 <__aeabi_dsub>
 801a0b0:	4602      	mov	r2, r0
 801a0b2:	460b      	mov	r3, r1
 801a0b4:	ec51 0b19 	vmov	r0, r1, d9
 801a0b8:	f7e6 fbe8 	bl	800088c <__aeabi_ddiv>
 801a0bc:	4632      	mov	r2, r6
 801a0be:	4604      	mov	r4, r0
 801a0c0:	460d      	mov	r5, r1
 801a0c2:	463b      	mov	r3, r7
 801a0c4:	4640      	mov	r0, r8
 801a0c6:	4649      	mov	r1, r9
 801a0c8:	f7e6 fab6 	bl	8000638 <__aeabi_dmul>
 801a0cc:	4632      	mov	r2, r6
 801a0ce:	463b      	mov	r3, r7
 801a0d0:	f7e6 f8fc 	bl	80002cc <__adddf3>
 801a0d4:	4602      	mov	r2, r0
 801a0d6:	460b      	mov	r3, r1
 801a0d8:	4620      	mov	r0, r4
 801a0da:	4629      	mov	r1, r5
 801a0dc:	f7e6 f8f4 	bl	80002c8 <__aeabi_dsub>
 801a0e0:	4642      	mov	r2, r8
 801a0e2:	464b      	mov	r3, r9
 801a0e4:	f7e6 f8f0 	bl	80002c8 <__aeabi_dsub>
 801a0e8:	460b      	mov	r3, r1
 801a0ea:	4602      	mov	r2, r0
 801a0ec:	493a      	ldr	r1, [pc, #232]	; (801a1d8 <__ieee754_pow+0xa30>)
 801a0ee:	2000      	movs	r0, #0
 801a0f0:	f7e6 f8ea 	bl	80002c8 <__aeabi_dsub>
 801a0f4:	e9cd 0100 	strd	r0, r1, [sp]
 801a0f8:	9b01      	ldr	r3, [sp, #4]
 801a0fa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801a0fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a102:	da2f      	bge.n	801a164 <__ieee754_pow+0x9bc>
 801a104:	4650      	mov	r0, sl
 801a106:	ed9d 0b00 	vldr	d0, [sp]
 801a10a:	f000 f9cd 	bl	801a4a8 <scalbn>
 801a10e:	ec51 0b10 	vmov	r0, r1, d0
 801a112:	ec53 2b18 	vmov	r2, r3, d8
 801a116:	f7ff bbe0 	b.w	80198da <__ieee754_pow+0x132>
 801a11a:	4b30      	ldr	r3, [pc, #192]	; (801a1dc <__ieee754_pow+0xa34>)
 801a11c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801a120:	429e      	cmp	r6, r3
 801a122:	f77f af0b 	ble.w	8019f3c <__ieee754_pow+0x794>
 801a126:	4b2e      	ldr	r3, [pc, #184]	; (801a1e0 <__ieee754_pow+0xa38>)
 801a128:	440b      	add	r3, r1
 801a12a:	4303      	orrs	r3, r0
 801a12c:	d00b      	beq.n	801a146 <__ieee754_pow+0x99e>
 801a12e:	a326      	add	r3, pc, #152	; (adr r3, 801a1c8 <__ieee754_pow+0xa20>)
 801a130:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a134:	ec51 0b18 	vmov	r0, r1, d8
 801a138:	f7e6 fa7e 	bl	8000638 <__aeabi_dmul>
 801a13c:	a322      	add	r3, pc, #136	; (adr r3, 801a1c8 <__ieee754_pow+0xa20>)
 801a13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a142:	f7ff bbca 	b.w	80198da <__ieee754_pow+0x132>
 801a146:	4622      	mov	r2, r4
 801a148:	462b      	mov	r3, r5
 801a14a:	f7e6 f8bd 	bl	80002c8 <__aeabi_dsub>
 801a14e:	4642      	mov	r2, r8
 801a150:	464b      	mov	r3, r9
 801a152:	f7e6 fcf7 	bl	8000b44 <__aeabi_dcmpge>
 801a156:	2800      	cmp	r0, #0
 801a158:	f43f aef0 	beq.w	8019f3c <__ieee754_pow+0x794>
 801a15c:	e7e7      	b.n	801a12e <__ieee754_pow+0x986>
 801a15e:	f04f 0a00 	mov.w	sl, #0
 801a162:	e717      	b.n	8019f94 <__ieee754_pow+0x7ec>
 801a164:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a168:	4619      	mov	r1, r3
 801a16a:	e7d2      	b.n	801a112 <__ieee754_pow+0x96a>
 801a16c:	491a      	ldr	r1, [pc, #104]	; (801a1d8 <__ieee754_pow+0xa30>)
 801a16e:	2000      	movs	r0, #0
 801a170:	f7ff bb9e 	b.w	80198b0 <__ieee754_pow+0x108>
 801a174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a178:	f7ff bb9a 	b.w	80198b0 <__ieee754_pow+0x108>
 801a17c:	9000      	str	r0, [sp, #0]
 801a17e:	f7ff bb76 	b.w	801986e <__ieee754_pow+0xc6>
 801a182:	2100      	movs	r1, #0
 801a184:	f7ff bb60 	b.w	8019848 <__ieee754_pow+0xa0>
 801a188:	00000000 	.word	0x00000000
 801a18c:	3fe62e43 	.word	0x3fe62e43
 801a190:	fefa39ef 	.word	0xfefa39ef
 801a194:	3fe62e42 	.word	0x3fe62e42
 801a198:	0ca86c39 	.word	0x0ca86c39
 801a19c:	be205c61 	.word	0xbe205c61
 801a1a0:	72bea4d0 	.word	0x72bea4d0
 801a1a4:	3e663769 	.word	0x3e663769
 801a1a8:	c5d26bf1 	.word	0xc5d26bf1
 801a1ac:	3ebbbd41 	.word	0x3ebbbd41
 801a1b0:	af25de2c 	.word	0xaf25de2c
 801a1b4:	3f11566a 	.word	0x3f11566a
 801a1b8:	16bebd93 	.word	0x16bebd93
 801a1bc:	3f66c16c 	.word	0x3f66c16c
 801a1c0:	5555553e 	.word	0x5555553e
 801a1c4:	3fc55555 	.word	0x3fc55555
 801a1c8:	c2f8f359 	.word	0xc2f8f359
 801a1cc:	01a56e1f 	.word	0x01a56e1f
 801a1d0:	3fe00000 	.word	0x3fe00000
 801a1d4:	000fffff 	.word	0x000fffff
 801a1d8:	3ff00000 	.word	0x3ff00000
 801a1dc:	4090cbff 	.word	0x4090cbff
 801a1e0:	3f6f3400 	.word	0x3f6f3400
 801a1e4:	652b82fe 	.word	0x652b82fe
 801a1e8:	3c971547 	.word	0x3c971547

0801a1ec <__ieee754_sqrt>:
 801a1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1f0:	ec55 4b10 	vmov	r4, r5, d0
 801a1f4:	4e56      	ldr	r6, [pc, #344]	; (801a350 <__ieee754_sqrt+0x164>)
 801a1f6:	43ae      	bics	r6, r5
 801a1f8:	ee10 0a10 	vmov	r0, s0
 801a1fc:	ee10 3a10 	vmov	r3, s0
 801a200:	4629      	mov	r1, r5
 801a202:	462a      	mov	r2, r5
 801a204:	d110      	bne.n	801a228 <__ieee754_sqrt+0x3c>
 801a206:	ee10 2a10 	vmov	r2, s0
 801a20a:	462b      	mov	r3, r5
 801a20c:	f7e6 fa14 	bl	8000638 <__aeabi_dmul>
 801a210:	4602      	mov	r2, r0
 801a212:	460b      	mov	r3, r1
 801a214:	4620      	mov	r0, r4
 801a216:	4629      	mov	r1, r5
 801a218:	f7e6 f858 	bl	80002cc <__adddf3>
 801a21c:	4604      	mov	r4, r0
 801a21e:	460d      	mov	r5, r1
 801a220:	ec45 4b10 	vmov	d0, r4, r5
 801a224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a228:	2d00      	cmp	r5, #0
 801a22a:	dc10      	bgt.n	801a24e <__ieee754_sqrt+0x62>
 801a22c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a230:	4330      	orrs	r0, r6
 801a232:	d0f5      	beq.n	801a220 <__ieee754_sqrt+0x34>
 801a234:	b15d      	cbz	r5, 801a24e <__ieee754_sqrt+0x62>
 801a236:	ee10 2a10 	vmov	r2, s0
 801a23a:	462b      	mov	r3, r5
 801a23c:	ee10 0a10 	vmov	r0, s0
 801a240:	f7e6 f842 	bl	80002c8 <__aeabi_dsub>
 801a244:	4602      	mov	r2, r0
 801a246:	460b      	mov	r3, r1
 801a248:	f7e6 fb20 	bl	800088c <__aeabi_ddiv>
 801a24c:	e7e6      	b.n	801a21c <__ieee754_sqrt+0x30>
 801a24e:	1509      	asrs	r1, r1, #20
 801a250:	d076      	beq.n	801a340 <__ieee754_sqrt+0x154>
 801a252:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801a256:	07ce      	lsls	r6, r1, #31
 801a258:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801a25c:	bf5e      	ittt	pl
 801a25e:	0fda      	lsrpl	r2, r3, #31
 801a260:	005b      	lslpl	r3, r3, #1
 801a262:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801a266:	0fda      	lsrs	r2, r3, #31
 801a268:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801a26c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801a270:	2000      	movs	r0, #0
 801a272:	106d      	asrs	r5, r5, #1
 801a274:	005b      	lsls	r3, r3, #1
 801a276:	f04f 0e16 	mov.w	lr, #22
 801a27a:	4684      	mov	ip, r0
 801a27c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801a280:	eb0c 0401 	add.w	r4, ip, r1
 801a284:	4294      	cmp	r4, r2
 801a286:	bfde      	ittt	le
 801a288:	1b12      	suble	r2, r2, r4
 801a28a:	eb04 0c01 	addle.w	ip, r4, r1
 801a28e:	1840      	addle	r0, r0, r1
 801a290:	0052      	lsls	r2, r2, #1
 801a292:	f1be 0e01 	subs.w	lr, lr, #1
 801a296:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801a29a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801a29e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a2a2:	d1ed      	bne.n	801a280 <__ieee754_sqrt+0x94>
 801a2a4:	4671      	mov	r1, lr
 801a2a6:	2720      	movs	r7, #32
 801a2a8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801a2ac:	4562      	cmp	r2, ip
 801a2ae:	eb04 060e 	add.w	r6, r4, lr
 801a2b2:	dc02      	bgt.n	801a2ba <__ieee754_sqrt+0xce>
 801a2b4:	d113      	bne.n	801a2de <__ieee754_sqrt+0xf2>
 801a2b6:	429e      	cmp	r6, r3
 801a2b8:	d811      	bhi.n	801a2de <__ieee754_sqrt+0xf2>
 801a2ba:	2e00      	cmp	r6, #0
 801a2bc:	eb06 0e04 	add.w	lr, r6, r4
 801a2c0:	da43      	bge.n	801a34a <__ieee754_sqrt+0x15e>
 801a2c2:	f1be 0f00 	cmp.w	lr, #0
 801a2c6:	db40      	blt.n	801a34a <__ieee754_sqrt+0x15e>
 801a2c8:	f10c 0801 	add.w	r8, ip, #1
 801a2cc:	eba2 020c 	sub.w	r2, r2, ip
 801a2d0:	429e      	cmp	r6, r3
 801a2d2:	bf88      	it	hi
 801a2d4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801a2d8:	1b9b      	subs	r3, r3, r6
 801a2da:	4421      	add	r1, r4
 801a2dc:	46c4      	mov	ip, r8
 801a2de:	0052      	lsls	r2, r2, #1
 801a2e0:	3f01      	subs	r7, #1
 801a2e2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801a2e6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801a2ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a2ee:	d1dd      	bne.n	801a2ac <__ieee754_sqrt+0xc0>
 801a2f0:	4313      	orrs	r3, r2
 801a2f2:	d006      	beq.n	801a302 <__ieee754_sqrt+0x116>
 801a2f4:	1c4c      	adds	r4, r1, #1
 801a2f6:	bf13      	iteet	ne
 801a2f8:	3101      	addne	r1, #1
 801a2fa:	3001      	addeq	r0, #1
 801a2fc:	4639      	moveq	r1, r7
 801a2fe:	f021 0101 	bicne.w	r1, r1, #1
 801a302:	1043      	asrs	r3, r0, #1
 801a304:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801a308:	0849      	lsrs	r1, r1, #1
 801a30a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801a30e:	07c2      	lsls	r2, r0, #31
 801a310:	bf48      	it	mi
 801a312:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801a316:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801a31a:	460c      	mov	r4, r1
 801a31c:	463d      	mov	r5, r7
 801a31e:	e77f      	b.n	801a220 <__ieee754_sqrt+0x34>
 801a320:	0ada      	lsrs	r2, r3, #11
 801a322:	3815      	subs	r0, #21
 801a324:	055b      	lsls	r3, r3, #21
 801a326:	2a00      	cmp	r2, #0
 801a328:	d0fa      	beq.n	801a320 <__ieee754_sqrt+0x134>
 801a32a:	02d7      	lsls	r7, r2, #11
 801a32c:	d50a      	bpl.n	801a344 <__ieee754_sqrt+0x158>
 801a32e:	f1c1 0420 	rsb	r4, r1, #32
 801a332:	fa23 f404 	lsr.w	r4, r3, r4
 801a336:	1e4d      	subs	r5, r1, #1
 801a338:	408b      	lsls	r3, r1
 801a33a:	4322      	orrs	r2, r4
 801a33c:	1b41      	subs	r1, r0, r5
 801a33e:	e788      	b.n	801a252 <__ieee754_sqrt+0x66>
 801a340:	4608      	mov	r0, r1
 801a342:	e7f0      	b.n	801a326 <__ieee754_sqrt+0x13a>
 801a344:	0052      	lsls	r2, r2, #1
 801a346:	3101      	adds	r1, #1
 801a348:	e7ef      	b.n	801a32a <__ieee754_sqrt+0x13e>
 801a34a:	46e0      	mov	r8, ip
 801a34c:	e7be      	b.n	801a2cc <__ieee754_sqrt+0xe0>
 801a34e:	bf00      	nop
 801a350:	7ff00000 	.word	0x7ff00000

0801a354 <fabs>:
 801a354:	ec51 0b10 	vmov	r0, r1, d0
 801a358:	ee10 2a10 	vmov	r2, s0
 801a35c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a360:	ec43 2b10 	vmov	d0, r2, r3
 801a364:	4770      	bx	lr

0801a366 <finite>:
 801a366:	b082      	sub	sp, #8
 801a368:	ed8d 0b00 	vstr	d0, [sp]
 801a36c:	9801      	ldr	r0, [sp, #4]
 801a36e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801a372:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801a376:	0fc0      	lsrs	r0, r0, #31
 801a378:	b002      	add	sp, #8
 801a37a:	4770      	bx	lr
 801a37c:	0000      	movs	r0, r0
	...

0801a380 <nan>:
 801a380:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a388 <nan+0x8>
 801a384:	4770      	bx	lr
 801a386:	bf00      	nop
 801a388:	00000000 	.word	0x00000000
 801a38c:	7ff80000 	.word	0x7ff80000

0801a390 <rint>:
 801a390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a392:	ec51 0b10 	vmov	r0, r1, d0
 801a396:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801a39a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801a39e:	2e13      	cmp	r6, #19
 801a3a0:	ee10 4a10 	vmov	r4, s0
 801a3a4:	460b      	mov	r3, r1
 801a3a6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801a3aa:	dc58      	bgt.n	801a45e <rint+0xce>
 801a3ac:	2e00      	cmp	r6, #0
 801a3ae:	da2b      	bge.n	801a408 <rint+0x78>
 801a3b0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801a3b4:	4302      	orrs	r2, r0
 801a3b6:	d023      	beq.n	801a400 <rint+0x70>
 801a3b8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801a3bc:	4302      	orrs	r2, r0
 801a3be:	4254      	negs	r4, r2
 801a3c0:	4314      	orrs	r4, r2
 801a3c2:	0c4b      	lsrs	r3, r1, #17
 801a3c4:	0b24      	lsrs	r4, r4, #12
 801a3c6:	045b      	lsls	r3, r3, #17
 801a3c8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801a3cc:	ea44 0103 	orr.w	r1, r4, r3
 801a3d0:	4b32      	ldr	r3, [pc, #200]	; (801a49c <rint+0x10c>)
 801a3d2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a3d6:	e9d3 6700 	ldrd	r6, r7, [r3]
 801a3da:	4602      	mov	r2, r0
 801a3dc:	460b      	mov	r3, r1
 801a3de:	4630      	mov	r0, r6
 801a3e0:	4639      	mov	r1, r7
 801a3e2:	f7e5 ff73 	bl	80002cc <__adddf3>
 801a3e6:	e9cd 0100 	strd	r0, r1, [sp]
 801a3ea:	463b      	mov	r3, r7
 801a3ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a3f0:	4632      	mov	r2, r6
 801a3f2:	f7e5 ff69 	bl	80002c8 <__aeabi_dsub>
 801a3f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a3fa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801a3fe:	4639      	mov	r1, r7
 801a400:	ec41 0b10 	vmov	d0, r0, r1
 801a404:	b003      	add	sp, #12
 801a406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a408:	4a25      	ldr	r2, [pc, #148]	; (801a4a0 <rint+0x110>)
 801a40a:	4132      	asrs	r2, r6
 801a40c:	ea01 0702 	and.w	r7, r1, r2
 801a410:	4307      	orrs	r7, r0
 801a412:	d0f5      	beq.n	801a400 <rint+0x70>
 801a414:	0851      	lsrs	r1, r2, #1
 801a416:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801a41a:	4314      	orrs	r4, r2
 801a41c:	d00c      	beq.n	801a438 <rint+0xa8>
 801a41e:	ea23 0201 	bic.w	r2, r3, r1
 801a422:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801a426:	2e13      	cmp	r6, #19
 801a428:	fa43 f606 	asr.w	r6, r3, r6
 801a42c:	bf0c      	ite	eq
 801a42e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801a432:	2400      	movne	r4, #0
 801a434:	ea42 0306 	orr.w	r3, r2, r6
 801a438:	4918      	ldr	r1, [pc, #96]	; (801a49c <rint+0x10c>)
 801a43a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801a43e:	4622      	mov	r2, r4
 801a440:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a444:	4620      	mov	r0, r4
 801a446:	4629      	mov	r1, r5
 801a448:	f7e5 ff40 	bl	80002cc <__adddf3>
 801a44c:	e9cd 0100 	strd	r0, r1, [sp]
 801a450:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a454:	4622      	mov	r2, r4
 801a456:	462b      	mov	r3, r5
 801a458:	f7e5 ff36 	bl	80002c8 <__aeabi_dsub>
 801a45c:	e7d0      	b.n	801a400 <rint+0x70>
 801a45e:	2e33      	cmp	r6, #51	; 0x33
 801a460:	dd07      	ble.n	801a472 <rint+0xe2>
 801a462:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801a466:	d1cb      	bne.n	801a400 <rint+0x70>
 801a468:	ee10 2a10 	vmov	r2, s0
 801a46c:	f7e5 ff2e 	bl	80002cc <__adddf3>
 801a470:	e7c6      	b.n	801a400 <rint+0x70>
 801a472:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801a476:	f04f 36ff 	mov.w	r6, #4294967295
 801a47a:	40d6      	lsrs	r6, r2
 801a47c:	4230      	tst	r0, r6
 801a47e:	d0bf      	beq.n	801a400 <rint+0x70>
 801a480:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801a484:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801a488:	bf1f      	itttt	ne
 801a48a:	ea24 0101 	bicne.w	r1, r4, r1
 801a48e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801a492:	fa44 f202 	asrne.w	r2, r4, r2
 801a496:	ea41 0402 	orrne.w	r4, r1, r2
 801a49a:	e7cd      	b.n	801a438 <rint+0xa8>
 801a49c:	08022b78 	.word	0x08022b78
 801a4a0:	000fffff 	.word	0x000fffff
 801a4a4:	00000000 	.word	0x00000000

0801a4a8 <scalbn>:
 801a4a8:	b570      	push	{r4, r5, r6, lr}
 801a4aa:	ec55 4b10 	vmov	r4, r5, d0
 801a4ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801a4b2:	4606      	mov	r6, r0
 801a4b4:	462b      	mov	r3, r5
 801a4b6:	b99a      	cbnz	r2, 801a4e0 <scalbn+0x38>
 801a4b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a4bc:	4323      	orrs	r3, r4
 801a4be:	d036      	beq.n	801a52e <scalbn+0x86>
 801a4c0:	4b39      	ldr	r3, [pc, #228]	; (801a5a8 <scalbn+0x100>)
 801a4c2:	4629      	mov	r1, r5
 801a4c4:	ee10 0a10 	vmov	r0, s0
 801a4c8:	2200      	movs	r2, #0
 801a4ca:	f7e6 f8b5 	bl	8000638 <__aeabi_dmul>
 801a4ce:	4b37      	ldr	r3, [pc, #220]	; (801a5ac <scalbn+0x104>)
 801a4d0:	429e      	cmp	r6, r3
 801a4d2:	4604      	mov	r4, r0
 801a4d4:	460d      	mov	r5, r1
 801a4d6:	da10      	bge.n	801a4fa <scalbn+0x52>
 801a4d8:	a32b      	add	r3, pc, #172	; (adr r3, 801a588 <scalbn+0xe0>)
 801a4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4de:	e03a      	b.n	801a556 <scalbn+0xae>
 801a4e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801a4e4:	428a      	cmp	r2, r1
 801a4e6:	d10c      	bne.n	801a502 <scalbn+0x5a>
 801a4e8:	ee10 2a10 	vmov	r2, s0
 801a4ec:	4620      	mov	r0, r4
 801a4ee:	4629      	mov	r1, r5
 801a4f0:	f7e5 feec 	bl	80002cc <__adddf3>
 801a4f4:	4604      	mov	r4, r0
 801a4f6:	460d      	mov	r5, r1
 801a4f8:	e019      	b.n	801a52e <scalbn+0x86>
 801a4fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801a4fe:	460b      	mov	r3, r1
 801a500:	3a36      	subs	r2, #54	; 0x36
 801a502:	4432      	add	r2, r6
 801a504:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801a508:	428a      	cmp	r2, r1
 801a50a:	dd08      	ble.n	801a51e <scalbn+0x76>
 801a50c:	2d00      	cmp	r5, #0
 801a50e:	a120      	add	r1, pc, #128	; (adr r1, 801a590 <scalbn+0xe8>)
 801a510:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a514:	da1c      	bge.n	801a550 <scalbn+0xa8>
 801a516:	a120      	add	r1, pc, #128	; (adr r1, 801a598 <scalbn+0xf0>)
 801a518:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a51c:	e018      	b.n	801a550 <scalbn+0xa8>
 801a51e:	2a00      	cmp	r2, #0
 801a520:	dd08      	ble.n	801a534 <scalbn+0x8c>
 801a522:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a526:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a52a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801a52e:	ec45 4b10 	vmov	d0, r4, r5
 801a532:	bd70      	pop	{r4, r5, r6, pc}
 801a534:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801a538:	da19      	bge.n	801a56e <scalbn+0xc6>
 801a53a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a53e:	429e      	cmp	r6, r3
 801a540:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801a544:	dd0a      	ble.n	801a55c <scalbn+0xb4>
 801a546:	a112      	add	r1, pc, #72	; (adr r1, 801a590 <scalbn+0xe8>)
 801a548:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	d1e2      	bne.n	801a516 <scalbn+0x6e>
 801a550:	a30f      	add	r3, pc, #60	; (adr r3, 801a590 <scalbn+0xe8>)
 801a552:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a556:	f7e6 f86f 	bl	8000638 <__aeabi_dmul>
 801a55a:	e7cb      	b.n	801a4f4 <scalbn+0x4c>
 801a55c:	a10a      	add	r1, pc, #40	; (adr r1, 801a588 <scalbn+0xe0>)
 801a55e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a562:	2b00      	cmp	r3, #0
 801a564:	d0b8      	beq.n	801a4d8 <scalbn+0x30>
 801a566:	a10e      	add	r1, pc, #56	; (adr r1, 801a5a0 <scalbn+0xf8>)
 801a568:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a56c:	e7b4      	b.n	801a4d8 <scalbn+0x30>
 801a56e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a572:	3236      	adds	r2, #54	; 0x36
 801a574:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a578:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801a57c:	4620      	mov	r0, r4
 801a57e:	4b0c      	ldr	r3, [pc, #48]	; (801a5b0 <scalbn+0x108>)
 801a580:	2200      	movs	r2, #0
 801a582:	e7e8      	b.n	801a556 <scalbn+0xae>
 801a584:	f3af 8000 	nop.w
 801a588:	c2f8f359 	.word	0xc2f8f359
 801a58c:	01a56e1f 	.word	0x01a56e1f
 801a590:	8800759c 	.word	0x8800759c
 801a594:	7e37e43c 	.word	0x7e37e43c
 801a598:	8800759c 	.word	0x8800759c
 801a59c:	fe37e43c 	.word	0xfe37e43c
 801a5a0:	c2f8f359 	.word	0xc2f8f359
 801a5a4:	81a56e1f 	.word	0x81a56e1f
 801a5a8:	43500000 	.word	0x43500000
 801a5ac:	ffff3cb0 	.word	0xffff3cb0
 801a5b0:	3c900000 	.word	0x3c900000

0801a5b4 <abort>:
 801a5b4:	b508      	push	{r3, lr}
 801a5b6:	2006      	movs	r0, #6
 801a5b8:	f001 fd66 	bl	801c088 <raise>
 801a5bc:	2001      	movs	r0, #1
 801a5be:	f006 f981 	bl	80208c4 <_exit>

0801a5c2 <atoi>:
 801a5c2:	220a      	movs	r2, #10
 801a5c4:	2100      	movs	r1, #0
 801a5c6:	f002 bd41 	b.w	801d04c <strtol>

0801a5ca <atol>:
 801a5ca:	220a      	movs	r2, #10
 801a5cc:	2100      	movs	r1, #0
 801a5ce:	f002 bd3d 	b.w	801d04c <strtol>
	...

0801a5d4 <__errno>:
 801a5d4:	4b01      	ldr	r3, [pc, #4]	; (801a5dc <__errno+0x8>)
 801a5d6:	6818      	ldr	r0, [r3, #0]
 801a5d8:	4770      	bx	lr
 801a5da:	bf00      	nop
 801a5dc:	200000f8 	.word	0x200000f8

0801a5e0 <std>:
 801a5e0:	2300      	movs	r3, #0
 801a5e2:	b510      	push	{r4, lr}
 801a5e4:	4604      	mov	r4, r0
 801a5e6:	e9c0 3300 	strd	r3, r3, [r0]
 801a5ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a5ee:	6083      	str	r3, [r0, #8]
 801a5f0:	8181      	strh	r1, [r0, #12]
 801a5f2:	6643      	str	r3, [r0, #100]	; 0x64
 801a5f4:	81c2      	strh	r2, [r0, #14]
 801a5f6:	6183      	str	r3, [r0, #24]
 801a5f8:	4619      	mov	r1, r3
 801a5fa:	2208      	movs	r2, #8
 801a5fc:	305c      	adds	r0, #92	; 0x5c
 801a5fe:	f000 fa63 	bl	801aac8 <memset>
 801a602:	4b05      	ldr	r3, [pc, #20]	; (801a618 <std+0x38>)
 801a604:	6263      	str	r3, [r4, #36]	; 0x24
 801a606:	4b05      	ldr	r3, [pc, #20]	; (801a61c <std+0x3c>)
 801a608:	62a3      	str	r3, [r4, #40]	; 0x28
 801a60a:	4b05      	ldr	r3, [pc, #20]	; (801a620 <std+0x40>)
 801a60c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a60e:	4b05      	ldr	r3, [pc, #20]	; (801a624 <std+0x44>)
 801a610:	6224      	str	r4, [r4, #32]
 801a612:	6323      	str	r3, [r4, #48]	; 0x30
 801a614:	bd10      	pop	{r4, pc}
 801a616:	bf00      	nop
 801a618:	0801c159 	.word	0x0801c159
 801a61c:	0801c17f 	.word	0x0801c17f
 801a620:	0801c1b7 	.word	0x0801c1b7
 801a624:	0801c1db 	.word	0x0801c1db

0801a628 <_cleanup_r>:
 801a628:	4901      	ldr	r1, [pc, #4]	; (801a630 <_cleanup_r+0x8>)
 801a62a:	f000 b8af 	b.w	801a78c <_fwalk_reent>
 801a62e:	bf00      	nop
 801a630:	0801e675 	.word	0x0801e675

0801a634 <__sfmoreglue>:
 801a634:	b570      	push	{r4, r5, r6, lr}
 801a636:	1e4a      	subs	r2, r1, #1
 801a638:	2568      	movs	r5, #104	; 0x68
 801a63a:	4355      	muls	r5, r2
 801a63c:	460e      	mov	r6, r1
 801a63e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a642:	f000 fd17 	bl	801b074 <_malloc_r>
 801a646:	4604      	mov	r4, r0
 801a648:	b140      	cbz	r0, 801a65c <__sfmoreglue+0x28>
 801a64a:	2100      	movs	r1, #0
 801a64c:	e9c0 1600 	strd	r1, r6, [r0]
 801a650:	300c      	adds	r0, #12
 801a652:	60a0      	str	r0, [r4, #8]
 801a654:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a658:	f000 fa36 	bl	801aac8 <memset>
 801a65c:	4620      	mov	r0, r4
 801a65e:	bd70      	pop	{r4, r5, r6, pc}

0801a660 <__sfp_lock_acquire>:
 801a660:	4801      	ldr	r0, [pc, #4]	; (801a668 <__sfp_lock_acquire+0x8>)
 801a662:	f000 b9f5 	b.w	801aa50 <__retarget_lock_acquire_recursive>
 801a666:	bf00      	nop
 801a668:	20009d14 	.word	0x20009d14

0801a66c <__sfp_lock_release>:
 801a66c:	4801      	ldr	r0, [pc, #4]	; (801a674 <__sfp_lock_release+0x8>)
 801a66e:	f000 b9f1 	b.w	801aa54 <__retarget_lock_release_recursive>
 801a672:	bf00      	nop
 801a674:	20009d14 	.word	0x20009d14

0801a678 <__sinit_lock_acquire>:
 801a678:	4801      	ldr	r0, [pc, #4]	; (801a680 <__sinit_lock_acquire+0x8>)
 801a67a:	f000 b9e9 	b.w	801aa50 <__retarget_lock_acquire_recursive>
 801a67e:	bf00      	nop
 801a680:	20009d0f 	.word	0x20009d0f

0801a684 <__sinit_lock_release>:
 801a684:	4801      	ldr	r0, [pc, #4]	; (801a68c <__sinit_lock_release+0x8>)
 801a686:	f000 b9e5 	b.w	801aa54 <__retarget_lock_release_recursive>
 801a68a:	bf00      	nop
 801a68c:	20009d0f 	.word	0x20009d0f

0801a690 <__sinit>:
 801a690:	b510      	push	{r4, lr}
 801a692:	4604      	mov	r4, r0
 801a694:	f7ff fff0 	bl	801a678 <__sinit_lock_acquire>
 801a698:	69a3      	ldr	r3, [r4, #24]
 801a69a:	b11b      	cbz	r3, 801a6a4 <__sinit+0x14>
 801a69c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a6a0:	f7ff bff0 	b.w	801a684 <__sinit_lock_release>
 801a6a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a6a8:	6523      	str	r3, [r4, #80]	; 0x50
 801a6aa:	4b13      	ldr	r3, [pc, #76]	; (801a6f8 <__sinit+0x68>)
 801a6ac:	4a13      	ldr	r2, [pc, #76]	; (801a6fc <__sinit+0x6c>)
 801a6ae:	681b      	ldr	r3, [r3, #0]
 801a6b0:	62a2      	str	r2, [r4, #40]	; 0x28
 801a6b2:	42a3      	cmp	r3, r4
 801a6b4:	bf04      	itt	eq
 801a6b6:	2301      	moveq	r3, #1
 801a6b8:	61a3      	streq	r3, [r4, #24]
 801a6ba:	4620      	mov	r0, r4
 801a6bc:	f000 f820 	bl	801a700 <__sfp>
 801a6c0:	6060      	str	r0, [r4, #4]
 801a6c2:	4620      	mov	r0, r4
 801a6c4:	f000 f81c 	bl	801a700 <__sfp>
 801a6c8:	60a0      	str	r0, [r4, #8]
 801a6ca:	4620      	mov	r0, r4
 801a6cc:	f000 f818 	bl	801a700 <__sfp>
 801a6d0:	2200      	movs	r2, #0
 801a6d2:	60e0      	str	r0, [r4, #12]
 801a6d4:	2104      	movs	r1, #4
 801a6d6:	6860      	ldr	r0, [r4, #4]
 801a6d8:	f7ff ff82 	bl	801a5e0 <std>
 801a6dc:	68a0      	ldr	r0, [r4, #8]
 801a6de:	2201      	movs	r2, #1
 801a6e0:	2109      	movs	r1, #9
 801a6e2:	f7ff ff7d 	bl	801a5e0 <std>
 801a6e6:	68e0      	ldr	r0, [r4, #12]
 801a6e8:	2202      	movs	r2, #2
 801a6ea:	2112      	movs	r1, #18
 801a6ec:	f7ff ff78 	bl	801a5e0 <std>
 801a6f0:	2301      	movs	r3, #1
 801a6f2:	61a3      	str	r3, [r4, #24]
 801a6f4:	e7d2      	b.n	801a69c <__sinit+0xc>
 801a6f6:	bf00      	nop
 801a6f8:	08022cec 	.word	0x08022cec
 801a6fc:	0801a629 	.word	0x0801a629

0801a700 <__sfp>:
 801a700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a702:	4607      	mov	r7, r0
 801a704:	f7ff ffac 	bl	801a660 <__sfp_lock_acquire>
 801a708:	4b1e      	ldr	r3, [pc, #120]	; (801a784 <__sfp+0x84>)
 801a70a:	681e      	ldr	r6, [r3, #0]
 801a70c:	69b3      	ldr	r3, [r6, #24]
 801a70e:	b913      	cbnz	r3, 801a716 <__sfp+0x16>
 801a710:	4630      	mov	r0, r6
 801a712:	f7ff ffbd 	bl	801a690 <__sinit>
 801a716:	3648      	adds	r6, #72	; 0x48
 801a718:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a71c:	3b01      	subs	r3, #1
 801a71e:	d503      	bpl.n	801a728 <__sfp+0x28>
 801a720:	6833      	ldr	r3, [r6, #0]
 801a722:	b30b      	cbz	r3, 801a768 <__sfp+0x68>
 801a724:	6836      	ldr	r6, [r6, #0]
 801a726:	e7f7      	b.n	801a718 <__sfp+0x18>
 801a728:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a72c:	b9d5      	cbnz	r5, 801a764 <__sfp+0x64>
 801a72e:	4b16      	ldr	r3, [pc, #88]	; (801a788 <__sfp+0x88>)
 801a730:	60e3      	str	r3, [r4, #12]
 801a732:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a736:	6665      	str	r5, [r4, #100]	; 0x64
 801a738:	f000 f988 	bl	801aa4c <__retarget_lock_init_recursive>
 801a73c:	f7ff ff96 	bl	801a66c <__sfp_lock_release>
 801a740:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a744:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a748:	6025      	str	r5, [r4, #0]
 801a74a:	61a5      	str	r5, [r4, #24]
 801a74c:	2208      	movs	r2, #8
 801a74e:	4629      	mov	r1, r5
 801a750:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a754:	f000 f9b8 	bl	801aac8 <memset>
 801a758:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a75c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a760:	4620      	mov	r0, r4
 801a762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a764:	3468      	adds	r4, #104	; 0x68
 801a766:	e7d9      	b.n	801a71c <__sfp+0x1c>
 801a768:	2104      	movs	r1, #4
 801a76a:	4638      	mov	r0, r7
 801a76c:	f7ff ff62 	bl	801a634 <__sfmoreglue>
 801a770:	4604      	mov	r4, r0
 801a772:	6030      	str	r0, [r6, #0]
 801a774:	2800      	cmp	r0, #0
 801a776:	d1d5      	bne.n	801a724 <__sfp+0x24>
 801a778:	f7ff ff78 	bl	801a66c <__sfp_lock_release>
 801a77c:	230c      	movs	r3, #12
 801a77e:	603b      	str	r3, [r7, #0]
 801a780:	e7ee      	b.n	801a760 <__sfp+0x60>
 801a782:	bf00      	nop
 801a784:	08022cec 	.word	0x08022cec
 801a788:	ffff0001 	.word	0xffff0001

0801a78c <_fwalk_reent>:
 801a78c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a790:	4606      	mov	r6, r0
 801a792:	4688      	mov	r8, r1
 801a794:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a798:	2700      	movs	r7, #0
 801a79a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a79e:	f1b9 0901 	subs.w	r9, r9, #1
 801a7a2:	d505      	bpl.n	801a7b0 <_fwalk_reent+0x24>
 801a7a4:	6824      	ldr	r4, [r4, #0]
 801a7a6:	2c00      	cmp	r4, #0
 801a7a8:	d1f7      	bne.n	801a79a <_fwalk_reent+0xe>
 801a7aa:	4638      	mov	r0, r7
 801a7ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a7b0:	89ab      	ldrh	r3, [r5, #12]
 801a7b2:	2b01      	cmp	r3, #1
 801a7b4:	d907      	bls.n	801a7c6 <_fwalk_reent+0x3a>
 801a7b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a7ba:	3301      	adds	r3, #1
 801a7bc:	d003      	beq.n	801a7c6 <_fwalk_reent+0x3a>
 801a7be:	4629      	mov	r1, r5
 801a7c0:	4630      	mov	r0, r6
 801a7c2:	47c0      	blx	r8
 801a7c4:	4307      	orrs	r7, r0
 801a7c6:	3568      	adds	r5, #104	; 0x68
 801a7c8:	e7e9      	b.n	801a79e <_fwalk_reent+0x12>
	...

0801a7cc <__libc_init_array>:
 801a7cc:	b570      	push	{r4, r5, r6, lr}
 801a7ce:	4d0d      	ldr	r5, [pc, #52]	; (801a804 <__libc_init_array+0x38>)
 801a7d0:	4c0d      	ldr	r4, [pc, #52]	; (801a808 <__libc_init_array+0x3c>)
 801a7d2:	1b64      	subs	r4, r4, r5
 801a7d4:	10a4      	asrs	r4, r4, #2
 801a7d6:	2600      	movs	r6, #0
 801a7d8:	42a6      	cmp	r6, r4
 801a7da:	d109      	bne.n	801a7f0 <__libc_init_array+0x24>
 801a7dc:	4d0b      	ldr	r5, [pc, #44]	; (801a80c <__libc_init_array+0x40>)
 801a7de:	4c0c      	ldr	r4, [pc, #48]	; (801a810 <__libc_init_array+0x44>)
 801a7e0:	f006 f872 	bl	80208c8 <_init>
 801a7e4:	1b64      	subs	r4, r4, r5
 801a7e6:	10a4      	asrs	r4, r4, #2
 801a7e8:	2600      	movs	r6, #0
 801a7ea:	42a6      	cmp	r6, r4
 801a7ec:	d105      	bne.n	801a7fa <__libc_init_array+0x2e>
 801a7ee:	bd70      	pop	{r4, r5, r6, pc}
 801a7f0:	f855 3b04 	ldr.w	r3, [r5], #4
 801a7f4:	4798      	blx	r3
 801a7f6:	3601      	adds	r6, #1
 801a7f8:	e7ee      	b.n	801a7d8 <__libc_init_array+0xc>
 801a7fa:	f855 3b04 	ldr.w	r3, [r5], #4
 801a7fe:	4798      	blx	r3
 801a800:	3601      	adds	r6, #1
 801a802:	e7f2      	b.n	801a7ea <__libc_init_array+0x1e>
 801a804:	08023218 	.word	0x08023218
 801a808:	08023218 	.word	0x08023218
 801a80c:	08023218 	.word	0x08023218
 801a810:	08023220 	.word	0x08023220

0801a814 <isxdigit>:
 801a814:	4b02      	ldr	r3, [pc, #8]	; (801a820 <isxdigit+0xc>)
 801a816:	4418      	add	r0, r3
 801a818:	7840      	ldrb	r0, [r0, #1]
 801a81a:	f000 0044 	and.w	r0, r0, #68	; 0x44
 801a81e:	4770      	bx	lr
 801a820:	08022b88 	.word	0x08022b88

0801a824 <localtime>:
 801a824:	b538      	push	{r3, r4, r5, lr}
 801a826:	4b0b      	ldr	r3, [pc, #44]	; (801a854 <localtime+0x30>)
 801a828:	681d      	ldr	r5, [r3, #0]
 801a82a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801a82c:	4604      	mov	r4, r0
 801a82e:	b953      	cbnz	r3, 801a846 <localtime+0x22>
 801a830:	2024      	movs	r0, #36	; 0x24
 801a832:	f000 f911 	bl	801aa58 <malloc>
 801a836:	4602      	mov	r2, r0
 801a838:	63e8      	str	r0, [r5, #60]	; 0x3c
 801a83a:	b920      	cbnz	r0, 801a846 <localtime+0x22>
 801a83c:	4b06      	ldr	r3, [pc, #24]	; (801a858 <localtime+0x34>)
 801a83e:	4807      	ldr	r0, [pc, #28]	; (801a85c <localtime+0x38>)
 801a840:	2132      	movs	r1, #50	; 0x32
 801a842:	f002 ffd7 	bl	801d7f4 <__assert_func>
 801a846:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 801a848:	4620      	mov	r0, r4
 801a84a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a84e:	f000 b807 	b.w	801a860 <localtime_r>
 801a852:	bf00      	nop
 801a854:	200000f8 	.word	0x200000f8
 801a858:	08022cf0 	.word	0x08022cf0
 801a85c:	08022d07 	.word	0x08022d07

0801a860 <localtime_r>:
 801a860:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801a864:	4607      	mov	r7, r0
 801a866:	9101      	str	r1, [sp, #4]
 801a868:	f004 fb04 	bl	801ee74 <__gettzinfo>
 801a86c:	9901      	ldr	r1, [sp, #4]
 801a86e:	4680      	mov	r8, r0
 801a870:	4638      	mov	r0, r7
 801a872:	f004 fb03 	bl	801ee7c <gmtime_r>
 801a876:	6943      	ldr	r3, [r0, #20]
 801a878:	079a      	lsls	r2, r3, #30
 801a87a:	4604      	mov	r4, r0
 801a87c:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801a880:	d105      	bne.n	801a88e <localtime_r+0x2e>
 801a882:	2264      	movs	r2, #100	; 0x64
 801a884:	fb96 f3f2 	sdiv	r3, r6, r2
 801a888:	fb02 6313 	mls	r3, r2, r3, r6
 801a88c:	bb7b      	cbnz	r3, 801a8ee <localtime_r+0x8e>
 801a88e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801a892:	fb96 f5f3 	sdiv	r5, r6, r3
 801a896:	fb03 6515 	mls	r5, r3, r5, r6
 801a89a:	fab5 f585 	clz	r5, r5
 801a89e:	096d      	lsrs	r5, r5, #5
 801a8a0:	4b68      	ldr	r3, [pc, #416]	; (801aa44 <localtime_r+0x1e4>)
 801a8a2:	2230      	movs	r2, #48	; 0x30
 801a8a4:	fb02 3505 	mla	r5, r2, r5, r3
 801a8a8:	f002 fd0a 	bl	801d2c0 <__tz_lock>
 801a8ac:	f002 fd14 	bl	801d2d8 <_tzset_unlocked>
 801a8b0:	4b65      	ldr	r3, [pc, #404]	; (801aa48 <localtime_r+0x1e8>)
 801a8b2:	681b      	ldr	r3, [r3, #0]
 801a8b4:	b353      	cbz	r3, 801a90c <localtime_r+0xac>
 801a8b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801a8ba:	42b3      	cmp	r3, r6
 801a8bc:	d119      	bne.n	801a8f2 <localtime_r+0x92>
 801a8be:	f8d8 1000 	ldr.w	r1, [r8]
 801a8c2:	e9d7 6700 	ldrd	r6, r7, [r7]
 801a8c6:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801a8ca:	b9d1      	cbnz	r1, 801a902 <localtime_r+0xa2>
 801a8cc:	4296      	cmp	r6, r2
 801a8ce:	eb77 0303 	sbcs.w	r3, r7, r3
 801a8d2:	da23      	bge.n	801a91c <localtime_r+0xbc>
 801a8d4:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801a8d8:	4296      	cmp	r6, r2
 801a8da:	eb77 0303 	sbcs.w	r3, r7, r3
 801a8de:	bfb4      	ite	lt
 801a8e0:	2301      	movlt	r3, #1
 801a8e2:	2300      	movge	r3, #0
 801a8e4:	6223      	str	r3, [r4, #32]
 801a8e6:	db1b      	blt.n	801a920 <localtime_r+0xc0>
 801a8e8:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801a8ec:	e01a      	b.n	801a924 <localtime_r+0xc4>
 801a8ee:	2501      	movs	r5, #1
 801a8f0:	e7d6      	b.n	801a8a0 <localtime_r+0x40>
 801a8f2:	4630      	mov	r0, r6
 801a8f4:	f002 fc3c 	bl	801d170 <__tzcalc_limits>
 801a8f8:	2800      	cmp	r0, #0
 801a8fa:	d1e0      	bne.n	801a8be <localtime_r+0x5e>
 801a8fc:	f04f 33ff 	mov.w	r3, #4294967295
 801a900:	e004      	b.n	801a90c <localtime_r+0xac>
 801a902:	4296      	cmp	r6, r2
 801a904:	eb77 0303 	sbcs.w	r3, r7, r3
 801a908:	da02      	bge.n	801a910 <localtime_r+0xb0>
 801a90a:	2300      	movs	r3, #0
 801a90c:	6223      	str	r3, [r4, #32]
 801a90e:	e7eb      	b.n	801a8e8 <localtime_r+0x88>
 801a910:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801a914:	4296      	cmp	r6, r2
 801a916:	eb77 0303 	sbcs.w	r3, r7, r3
 801a91a:	daf6      	bge.n	801a90a <localtime_r+0xaa>
 801a91c:	2301      	movs	r3, #1
 801a91e:	6223      	str	r3, [r4, #32]
 801a920:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801a924:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801a928:	203c      	movs	r0, #60	; 0x3c
 801a92a:	fb91 f6f3 	sdiv	r6, r1, r3
 801a92e:	fb03 1316 	mls	r3, r3, r6, r1
 801a932:	6861      	ldr	r1, [r4, #4]
 801a934:	fb93 f2f0 	sdiv	r2, r3, r0
 801a938:	fb00 3012 	mls	r0, r0, r2, r3
 801a93c:	6823      	ldr	r3, [r4, #0]
 801a93e:	1a89      	subs	r1, r1, r2
 801a940:	68a2      	ldr	r2, [r4, #8]
 801a942:	6061      	str	r1, [r4, #4]
 801a944:	1a1b      	subs	r3, r3, r0
 801a946:	1b92      	subs	r2, r2, r6
 801a948:	2b3b      	cmp	r3, #59	; 0x3b
 801a94a:	6023      	str	r3, [r4, #0]
 801a94c:	60a2      	str	r2, [r4, #8]
 801a94e:	dd35      	ble.n	801a9bc <localtime_r+0x15c>
 801a950:	3101      	adds	r1, #1
 801a952:	6061      	str	r1, [r4, #4]
 801a954:	3b3c      	subs	r3, #60	; 0x3c
 801a956:	6023      	str	r3, [r4, #0]
 801a958:	6863      	ldr	r3, [r4, #4]
 801a95a:	2b3b      	cmp	r3, #59	; 0x3b
 801a95c:	dd34      	ble.n	801a9c8 <localtime_r+0x168>
 801a95e:	3201      	adds	r2, #1
 801a960:	60a2      	str	r2, [r4, #8]
 801a962:	3b3c      	subs	r3, #60	; 0x3c
 801a964:	6063      	str	r3, [r4, #4]
 801a966:	68a3      	ldr	r3, [r4, #8]
 801a968:	2b17      	cmp	r3, #23
 801a96a:	dd33      	ble.n	801a9d4 <localtime_r+0x174>
 801a96c:	69e2      	ldr	r2, [r4, #28]
 801a96e:	3201      	adds	r2, #1
 801a970:	61e2      	str	r2, [r4, #28]
 801a972:	69a2      	ldr	r2, [r4, #24]
 801a974:	3201      	adds	r2, #1
 801a976:	2a06      	cmp	r2, #6
 801a978:	bfc8      	it	gt
 801a97a:	2200      	movgt	r2, #0
 801a97c:	61a2      	str	r2, [r4, #24]
 801a97e:	68e2      	ldr	r2, [r4, #12]
 801a980:	3b18      	subs	r3, #24
 801a982:	3201      	adds	r2, #1
 801a984:	60a3      	str	r3, [r4, #8]
 801a986:	6923      	ldr	r3, [r4, #16]
 801a988:	60e2      	str	r2, [r4, #12]
 801a98a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801a98e:	428a      	cmp	r2, r1
 801a990:	dd0e      	ble.n	801a9b0 <localtime_r+0x150>
 801a992:	2b0b      	cmp	r3, #11
 801a994:	eba2 0201 	sub.w	r2, r2, r1
 801a998:	60e2      	str	r2, [r4, #12]
 801a99a:	f103 0201 	add.w	r2, r3, #1
 801a99e:	bf09      	itett	eq
 801a9a0:	6963      	ldreq	r3, [r4, #20]
 801a9a2:	6122      	strne	r2, [r4, #16]
 801a9a4:	2200      	moveq	r2, #0
 801a9a6:	3301      	addeq	r3, #1
 801a9a8:	bf02      	ittt	eq
 801a9aa:	6122      	streq	r2, [r4, #16]
 801a9ac:	6163      	streq	r3, [r4, #20]
 801a9ae:	61e2      	streq	r2, [r4, #28]
 801a9b0:	f002 fc8c 	bl	801d2cc <__tz_unlock>
 801a9b4:	4620      	mov	r0, r4
 801a9b6:	b002      	add	sp, #8
 801a9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9bc:	2b00      	cmp	r3, #0
 801a9be:	dacb      	bge.n	801a958 <localtime_r+0xf8>
 801a9c0:	3901      	subs	r1, #1
 801a9c2:	6061      	str	r1, [r4, #4]
 801a9c4:	333c      	adds	r3, #60	; 0x3c
 801a9c6:	e7c6      	b.n	801a956 <localtime_r+0xf6>
 801a9c8:	2b00      	cmp	r3, #0
 801a9ca:	dacc      	bge.n	801a966 <localtime_r+0x106>
 801a9cc:	3a01      	subs	r2, #1
 801a9ce:	60a2      	str	r2, [r4, #8]
 801a9d0:	333c      	adds	r3, #60	; 0x3c
 801a9d2:	e7c7      	b.n	801a964 <localtime_r+0x104>
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	daeb      	bge.n	801a9b0 <localtime_r+0x150>
 801a9d8:	69e2      	ldr	r2, [r4, #28]
 801a9da:	3a01      	subs	r2, #1
 801a9dc:	61e2      	str	r2, [r4, #28]
 801a9de:	69a2      	ldr	r2, [r4, #24]
 801a9e0:	3a01      	subs	r2, #1
 801a9e2:	bf48      	it	mi
 801a9e4:	2206      	movmi	r2, #6
 801a9e6:	61a2      	str	r2, [r4, #24]
 801a9e8:	68e2      	ldr	r2, [r4, #12]
 801a9ea:	3318      	adds	r3, #24
 801a9ec:	3a01      	subs	r2, #1
 801a9ee:	60e2      	str	r2, [r4, #12]
 801a9f0:	60a3      	str	r3, [r4, #8]
 801a9f2:	2a00      	cmp	r2, #0
 801a9f4:	d1dc      	bne.n	801a9b0 <localtime_r+0x150>
 801a9f6:	6923      	ldr	r3, [r4, #16]
 801a9f8:	3b01      	subs	r3, #1
 801a9fa:	d405      	bmi.n	801aa08 <localtime_r+0x1a8>
 801a9fc:	6123      	str	r3, [r4, #16]
 801a9fe:	6923      	ldr	r3, [r4, #16]
 801aa00:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801aa04:	60e3      	str	r3, [r4, #12]
 801aa06:	e7d3      	b.n	801a9b0 <localtime_r+0x150>
 801aa08:	230b      	movs	r3, #11
 801aa0a:	6123      	str	r3, [r4, #16]
 801aa0c:	6963      	ldr	r3, [r4, #20]
 801aa0e:	1e5a      	subs	r2, r3, #1
 801aa10:	6162      	str	r2, [r4, #20]
 801aa12:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801aa16:	0793      	lsls	r3, r2, #30
 801aa18:	d105      	bne.n	801aa26 <localtime_r+0x1c6>
 801aa1a:	2164      	movs	r1, #100	; 0x64
 801aa1c:	fb92 f3f1 	sdiv	r3, r2, r1
 801aa20:	fb01 2313 	mls	r3, r1, r3, r2
 801aa24:	b963      	cbnz	r3, 801aa40 <localtime_r+0x1e0>
 801aa26:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801aa2a:	fb92 f3f1 	sdiv	r3, r2, r1
 801aa2e:	fb01 2313 	mls	r3, r1, r3, r2
 801aa32:	fab3 f383 	clz	r3, r3
 801aa36:	095b      	lsrs	r3, r3, #5
 801aa38:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801aa3c:	61e3      	str	r3, [r4, #28]
 801aa3e:	e7de      	b.n	801a9fe <localtime_r+0x19e>
 801aa40:	2301      	movs	r3, #1
 801aa42:	e7f9      	b.n	801aa38 <localtime_r+0x1d8>
 801aa44:	08022dc8 	.word	0x08022dc8
 801aa48:	20008654 	.word	0x20008654

0801aa4c <__retarget_lock_init_recursive>:
 801aa4c:	4770      	bx	lr

0801aa4e <__retarget_lock_acquire>:
 801aa4e:	4770      	bx	lr

0801aa50 <__retarget_lock_acquire_recursive>:
 801aa50:	4770      	bx	lr

0801aa52 <__retarget_lock_release>:
 801aa52:	4770      	bx	lr

0801aa54 <__retarget_lock_release_recursive>:
 801aa54:	4770      	bx	lr
	...

0801aa58 <malloc>:
 801aa58:	4b02      	ldr	r3, [pc, #8]	; (801aa64 <malloc+0xc>)
 801aa5a:	4601      	mov	r1, r0
 801aa5c:	6818      	ldr	r0, [r3, #0]
 801aa5e:	f000 bb09 	b.w	801b074 <_malloc_r>
 801aa62:	bf00      	nop
 801aa64:	200000f8 	.word	0x200000f8

0801aa68 <free>:
 801aa68:	4b02      	ldr	r3, [pc, #8]	; (801aa74 <free+0xc>)
 801aa6a:	4601      	mov	r1, r0
 801aa6c:	6818      	ldr	r0, [r3, #0]
 801aa6e:	f000 bab1 	b.w	801afd4 <_free_r>
 801aa72:	bf00      	nop
 801aa74:	200000f8 	.word	0x200000f8

0801aa78 <memcpy>:
 801aa78:	440a      	add	r2, r1
 801aa7a:	4291      	cmp	r1, r2
 801aa7c:	f100 33ff 	add.w	r3, r0, #4294967295
 801aa80:	d100      	bne.n	801aa84 <memcpy+0xc>
 801aa82:	4770      	bx	lr
 801aa84:	b510      	push	{r4, lr}
 801aa86:	f811 4b01 	ldrb.w	r4, [r1], #1
 801aa8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801aa8e:	4291      	cmp	r1, r2
 801aa90:	d1f9      	bne.n	801aa86 <memcpy+0xe>
 801aa92:	bd10      	pop	{r4, pc}

0801aa94 <memmove>:
 801aa94:	4288      	cmp	r0, r1
 801aa96:	b510      	push	{r4, lr}
 801aa98:	eb01 0402 	add.w	r4, r1, r2
 801aa9c:	d902      	bls.n	801aaa4 <memmove+0x10>
 801aa9e:	4284      	cmp	r4, r0
 801aaa0:	4623      	mov	r3, r4
 801aaa2:	d807      	bhi.n	801aab4 <memmove+0x20>
 801aaa4:	1e43      	subs	r3, r0, #1
 801aaa6:	42a1      	cmp	r1, r4
 801aaa8:	d008      	beq.n	801aabc <memmove+0x28>
 801aaaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 801aaae:	f803 2f01 	strb.w	r2, [r3, #1]!
 801aab2:	e7f8      	b.n	801aaa6 <memmove+0x12>
 801aab4:	4402      	add	r2, r0
 801aab6:	4601      	mov	r1, r0
 801aab8:	428a      	cmp	r2, r1
 801aaba:	d100      	bne.n	801aabe <memmove+0x2a>
 801aabc:	bd10      	pop	{r4, pc}
 801aabe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801aac2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801aac6:	e7f7      	b.n	801aab8 <memmove+0x24>

0801aac8 <memset>:
 801aac8:	4402      	add	r2, r0
 801aaca:	4603      	mov	r3, r0
 801aacc:	4293      	cmp	r3, r2
 801aace:	d100      	bne.n	801aad2 <memset+0xa>
 801aad0:	4770      	bx	lr
 801aad2:	f803 1b01 	strb.w	r1, [r3], #1
 801aad6:	e7f9      	b.n	801aacc <memset+0x4>

0801aad8 <validate_structure>:
 801aad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801aada:	6801      	ldr	r1, [r0, #0]
 801aadc:	293b      	cmp	r1, #59	; 0x3b
 801aade:	4604      	mov	r4, r0
 801aae0:	d911      	bls.n	801ab06 <validate_structure+0x2e>
 801aae2:	223c      	movs	r2, #60	; 0x3c
 801aae4:	4668      	mov	r0, sp
 801aae6:	f002 feb3 	bl	801d850 <div>
 801aaea:	9a01      	ldr	r2, [sp, #4]
 801aaec:	6863      	ldr	r3, [r4, #4]
 801aaee:	9900      	ldr	r1, [sp, #0]
 801aaf0:	2a00      	cmp	r2, #0
 801aaf2:	440b      	add	r3, r1
 801aaf4:	6063      	str	r3, [r4, #4]
 801aaf6:	bfbb      	ittet	lt
 801aaf8:	323c      	addlt	r2, #60	; 0x3c
 801aafa:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801aafe:	6022      	strge	r2, [r4, #0]
 801ab00:	6022      	strlt	r2, [r4, #0]
 801ab02:	bfb8      	it	lt
 801ab04:	6063      	strlt	r3, [r4, #4]
 801ab06:	6861      	ldr	r1, [r4, #4]
 801ab08:	293b      	cmp	r1, #59	; 0x3b
 801ab0a:	d911      	bls.n	801ab30 <validate_structure+0x58>
 801ab0c:	223c      	movs	r2, #60	; 0x3c
 801ab0e:	4668      	mov	r0, sp
 801ab10:	f002 fe9e 	bl	801d850 <div>
 801ab14:	9a01      	ldr	r2, [sp, #4]
 801ab16:	68a3      	ldr	r3, [r4, #8]
 801ab18:	9900      	ldr	r1, [sp, #0]
 801ab1a:	2a00      	cmp	r2, #0
 801ab1c:	440b      	add	r3, r1
 801ab1e:	60a3      	str	r3, [r4, #8]
 801ab20:	bfbb      	ittet	lt
 801ab22:	323c      	addlt	r2, #60	; 0x3c
 801ab24:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801ab28:	6062      	strge	r2, [r4, #4]
 801ab2a:	6062      	strlt	r2, [r4, #4]
 801ab2c:	bfb8      	it	lt
 801ab2e:	60a3      	strlt	r3, [r4, #8]
 801ab30:	68a1      	ldr	r1, [r4, #8]
 801ab32:	2917      	cmp	r1, #23
 801ab34:	d911      	bls.n	801ab5a <validate_structure+0x82>
 801ab36:	2218      	movs	r2, #24
 801ab38:	4668      	mov	r0, sp
 801ab3a:	f002 fe89 	bl	801d850 <div>
 801ab3e:	9a01      	ldr	r2, [sp, #4]
 801ab40:	68e3      	ldr	r3, [r4, #12]
 801ab42:	9900      	ldr	r1, [sp, #0]
 801ab44:	2a00      	cmp	r2, #0
 801ab46:	440b      	add	r3, r1
 801ab48:	60e3      	str	r3, [r4, #12]
 801ab4a:	bfbb      	ittet	lt
 801ab4c:	3218      	addlt	r2, #24
 801ab4e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801ab52:	60a2      	strge	r2, [r4, #8]
 801ab54:	60a2      	strlt	r2, [r4, #8]
 801ab56:	bfb8      	it	lt
 801ab58:	60e3      	strlt	r3, [r4, #12]
 801ab5a:	6921      	ldr	r1, [r4, #16]
 801ab5c:	290b      	cmp	r1, #11
 801ab5e:	d911      	bls.n	801ab84 <validate_structure+0xac>
 801ab60:	220c      	movs	r2, #12
 801ab62:	4668      	mov	r0, sp
 801ab64:	f002 fe74 	bl	801d850 <div>
 801ab68:	9a01      	ldr	r2, [sp, #4]
 801ab6a:	6963      	ldr	r3, [r4, #20]
 801ab6c:	9900      	ldr	r1, [sp, #0]
 801ab6e:	2a00      	cmp	r2, #0
 801ab70:	440b      	add	r3, r1
 801ab72:	6163      	str	r3, [r4, #20]
 801ab74:	bfbb      	ittet	lt
 801ab76:	320c      	addlt	r2, #12
 801ab78:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801ab7c:	6122      	strge	r2, [r4, #16]
 801ab7e:	6122      	strlt	r2, [r4, #16]
 801ab80:	bfb8      	it	lt
 801ab82:	6163      	strlt	r3, [r4, #20]
 801ab84:	6963      	ldr	r3, [r4, #20]
 801ab86:	0799      	lsls	r1, r3, #30
 801ab88:	d120      	bne.n	801abcc <validate_structure+0xf4>
 801ab8a:	2164      	movs	r1, #100	; 0x64
 801ab8c:	fb93 f2f1 	sdiv	r2, r3, r1
 801ab90:	fb01 3212 	mls	r2, r1, r2, r3
 801ab94:	b9e2      	cbnz	r2, 801abd0 <validate_structure+0xf8>
 801ab96:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801ab9a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801ab9e:	fb93 f2f1 	sdiv	r2, r3, r1
 801aba2:	fb01 3312 	mls	r3, r1, r2, r3
 801aba6:	2b00      	cmp	r3, #0
 801aba8:	bf14      	ite	ne
 801abaa:	231c      	movne	r3, #28
 801abac:	231d      	moveq	r3, #29
 801abae:	68e2      	ldr	r2, [r4, #12]
 801abb0:	2a00      	cmp	r2, #0
 801abb2:	dc0f      	bgt.n	801abd4 <validate_structure+0xfc>
 801abb4:	4f33      	ldr	r7, [pc, #204]	; (801ac84 <validate_structure+0x1ac>)
 801abb6:	260b      	movs	r6, #11
 801abb8:	2064      	movs	r0, #100	; 0x64
 801abba:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801abbe:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801abc2:	f1bc 0f00 	cmp.w	ip, #0
 801abc6:	dd31      	ble.n	801ac2c <validate_structure+0x154>
 801abc8:	b003      	add	sp, #12
 801abca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801abcc:	231c      	movs	r3, #28
 801abce:	e7ee      	b.n	801abae <validate_structure+0xd6>
 801abd0:	231d      	movs	r3, #29
 801abd2:	e7ec      	b.n	801abae <validate_structure+0xd6>
 801abd4:	4f2b      	ldr	r7, [pc, #172]	; (801ac84 <validate_structure+0x1ac>)
 801abd6:	f04f 0c00 	mov.w	ip, #0
 801abda:	2564      	movs	r5, #100	; 0x64
 801abdc:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801abe0:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801abe4:	2a01      	cmp	r2, #1
 801abe6:	bf14      	ite	ne
 801abe8:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 801abec:	4618      	moveq	r0, r3
 801abee:	4281      	cmp	r1, r0
 801abf0:	ddea      	ble.n	801abc8 <validate_structure+0xf0>
 801abf2:	3201      	adds	r2, #1
 801abf4:	1a09      	subs	r1, r1, r0
 801abf6:	2a0c      	cmp	r2, #12
 801abf8:	60e1      	str	r1, [r4, #12]
 801abfa:	6122      	str	r2, [r4, #16]
 801abfc:	d1f0      	bne.n	801abe0 <validate_structure+0x108>
 801abfe:	6963      	ldr	r3, [r4, #20]
 801ac00:	1c5a      	adds	r2, r3, #1
 801ac02:	0791      	lsls	r1, r2, #30
 801ac04:	e9c4 c204 	strd	ip, r2, [r4, #16]
 801ac08:	d137      	bne.n	801ac7a <validate_structure+0x1a2>
 801ac0a:	fb92 f1f5 	sdiv	r1, r2, r5
 801ac0e:	fb05 2211 	mls	r2, r5, r1, r2
 801ac12:	2a00      	cmp	r2, #0
 801ac14:	d133      	bne.n	801ac7e <validate_structure+0x1a6>
 801ac16:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 801ac1a:	fb93 f2f6 	sdiv	r2, r3, r6
 801ac1e:	fb06 3312 	mls	r3, r6, r2, r3
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	bf14      	ite	ne
 801ac26:	231c      	movne	r3, #28
 801ac28:	231d      	moveq	r3, #29
 801ac2a:	e7d9      	b.n	801abe0 <validate_structure+0x108>
 801ac2c:	6921      	ldr	r1, [r4, #16]
 801ac2e:	3901      	subs	r1, #1
 801ac30:	6121      	str	r1, [r4, #16]
 801ac32:	3101      	adds	r1, #1
 801ac34:	d114      	bne.n	801ac60 <validate_structure+0x188>
 801ac36:	6963      	ldr	r3, [r4, #20]
 801ac38:	1e59      	subs	r1, r3, #1
 801ac3a:	078a      	lsls	r2, r1, #30
 801ac3c:	e9c4 6104 	strd	r6, r1, [r4, #16]
 801ac40:	d117      	bne.n	801ac72 <validate_structure+0x19a>
 801ac42:	fb91 f2f0 	sdiv	r2, r1, r0
 801ac46:	fb00 1112 	mls	r1, r0, r2, r1
 801ac4a:	b9a1      	cbnz	r1, 801ac76 <validate_structure+0x19e>
 801ac4c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801ac50:	fb93 f2f5 	sdiv	r2, r3, r5
 801ac54:	fb05 3312 	mls	r3, r5, r2, r3
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	bf14      	ite	ne
 801ac5c:	231c      	movne	r3, #28
 801ac5e:	231d      	moveq	r3, #29
 801ac60:	6922      	ldr	r2, [r4, #16]
 801ac62:	2a01      	cmp	r2, #1
 801ac64:	bf14      	ite	ne
 801ac66:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 801ac6a:	461a      	moveq	r2, r3
 801ac6c:	4462      	add	r2, ip
 801ac6e:	60e2      	str	r2, [r4, #12]
 801ac70:	e7a5      	b.n	801abbe <validate_structure+0xe6>
 801ac72:	231c      	movs	r3, #28
 801ac74:	e7f4      	b.n	801ac60 <validate_structure+0x188>
 801ac76:	231d      	movs	r3, #29
 801ac78:	e7f2      	b.n	801ac60 <validate_structure+0x188>
 801ac7a:	231c      	movs	r3, #28
 801ac7c:	e7b0      	b.n	801abe0 <validate_structure+0x108>
 801ac7e:	231d      	movs	r3, #29
 801ac80:	e7ae      	b.n	801abe0 <validate_structure+0x108>
 801ac82:	bf00      	nop
 801ac84:	08022d68 	.word	0x08022d68

0801ac88 <mktime>:
 801ac88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac8c:	b08b      	sub	sp, #44	; 0x2c
 801ac8e:	4605      	mov	r5, r0
 801ac90:	f004 f8f0 	bl	801ee74 <__gettzinfo>
 801ac94:	4607      	mov	r7, r0
 801ac96:	4628      	mov	r0, r5
 801ac98:	f7ff ff1e 	bl	801aad8 <validate_structure>
 801ac9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801aca0:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 801aca4:	68a8      	ldr	r0, [r5, #8]
 801aca6:	696e      	ldr	r6, [r5, #20]
 801aca8:	fb0a 2303 	mla	r3, sl, r3, r2
 801acac:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 801acb0:	fb0a 3a00 	mla	sl, sl, r0, r3
 801acb4:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 801acb8:	4ac3      	ldr	r2, [pc, #780]	; (801afc8 <mktime+0x340>)
 801acba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801acbe:	3c01      	subs	r4, #1
 801acc0:	2b01      	cmp	r3, #1
 801acc2:	4414      	add	r4, r2
 801acc4:	dd11      	ble.n	801acea <mktime+0x62>
 801acc6:	07b1      	lsls	r1, r6, #30
 801acc8:	d10f      	bne.n	801acea <mktime+0x62>
 801acca:	2264      	movs	r2, #100	; 0x64
 801accc:	fb96 f3f2 	sdiv	r3, r6, r2
 801acd0:	fb02 6313 	mls	r3, r2, r3, r6
 801acd4:	b943      	cbnz	r3, 801ace8 <mktime+0x60>
 801acd6:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801acda:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801acde:	fb91 f3f2 	sdiv	r3, r1, r2
 801ace2:	fb02 1313 	mls	r3, r2, r3, r1
 801ace6:	b903      	cbnz	r3, 801acea <mktime+0x62>
 801ace8:	3401      	adds	r4, #1
 801acea:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 801acee:	3310      	adds	r3, #16
 801acf0:	f644 6220 	movw	r2, #20000	; 0x4e20
 801acf4:	4293      	cmp	r3, r2
 801acf6:	61ec      	str	r4, [r5, #28]
 801acf8:	f200 8161 	bhi.w	801afbe <mktime+0x336>
 801acfc:	2e46      	cmp	r6, #70	; 0x46
 801acfe:	dd77      	ble.n	801adf0 <mktime+0x168>
 801ad00:	2346      	movs	r3, #70	; 0x46
 801ad02:	f240 1e6d 	movw	lr, #365	; 0x16d
 801ad06:	2164      	movs	r1, #100	; 0x64
 801ad08:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801ad0c:	079a      	lsls	r2, r3, #30
 801ad0e:	d169      	bne.n	801ade4 <mktime+0x15c>
 801ad10:	fb93 f2f1 	sdiv	r2, r3, r1
 801ad14:	fb01 3212 	mls	r2, r1, r2, r3
 801ad18:	2a00      	cmp	r2, #0
 801ad1a:	d166      	bne.n	801adea <mktime+0x162>
 801ad1c:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801ad20:	fb9c f2f0 	sdiv	r2, ip, r0
 801ad24:	fb00 c212 	mls	r2, r0, r2, ip
 801ad28:	2a00      	cmp	r2, #0
 801ad2a:	bf14      	ite	ne
 801ad2c:	4672      	movne	r2, lr
 801ad2e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801ad32:	3301      	adds	r3, #1
 801ad34:	429e      	cmp	r6, r3
 801ad36:	4414      	add	r4, r2
 801ad38:	d1e8      	bne.n	801ad0c <mktime+0x84>
 801ad3a:	4ba4      	ldr	r3, [pc, #656]	; (801afcc <mktime+0x344>)
 801ad3c:	ea4f 7bea 	mov.w	fp, sl, asr #31
 801ad40:	fbc3 ab04 	smlal	sl, fp, r3, r4
 801ad44:	f002 fabc 	bl	801d2c0 <__tz_lock>
 801ad48:	f002 fac6 	bl	801d2d8 <_tzset_unlocked>
 801ad4c:	4ba0      	ldr	r3, [pc, #640]	; (801afd0 <mktime+0x348>)
 801ad4e:	f8d3 9000 	ldr.w	r9, [r3]
 801ad52:	f1b9 0f00 	cmp.w	r9, #0
 801ad56:	d03f      	beq.n	801add8 <mktime+0x150>
 801ad58:	f8d5 9020 	ldr.w	r9, [r5, #32]
 801ad5c:	6968      	ldr	r0, [r5, #20]
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	f1b9 0f01 	cmp.w	r9, #1
 801ad64:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801ad68:	46c8      	mov	r8, r9
 801ad6a:	bfa8      	it	ge
 801ad6c:	f04f 0801 	movge.w	r8, #1
 801ad70:	4283      	cmp	r3, r0
 801ad72:	d17f      	bne.n	801ae74 <mktime+0x1ec>
 801ad74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ad76:	4619      	mov	r1, r3
 801ad78:	17da      	asrs	r2, r3, #31
 801ad7a:	e9cd 1200 	strd	r1, r2, [sp]
 801ad7e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801ad82:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801ad86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ad8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ad8c:	1a80      	subs	r0, r0, r2
 801ad8e:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 801ad92:	4582      	cmp	sl, r0
 801ad94:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ad98:	eb7b 0101 	sbcs.w	r1, fp, r1
 801ad9c:	da71      	bge.n	801ae82 <mktime+0x1fa>
 801ad9e:	9800      	ldr	r0, [sp, #0]
 801ada0:	6a39      	ldr	r1, [r7, #32]
 801ada2:	1a09      	subs	r1, r1, r0
 801ada4:	9104      	str	r1, [sp, #16]
 801ada6:	9801      	ldr	r0, [sp, #4]
 801ada8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801adaa:	eb61 0100 	sbc.w	r1, r1, r0
 801adae:	9105      	str	r1, [sp, #20]
 801adb0:	6839      	ldr	r1, [r7, #0]
 801adb2:	2900      	cmp	r1, #0
 801adb4:	d075      	beq.n	801aea2 <mktime+0x21a>
 801adb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801adba:	4582      	cmp	sl, r0
 801adbc:	eb7b 0101 	sbcs.w	r1, fp, r1
 801adc0:	db05      	blt.n	801adce <mktime+0x146>
 801adc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801adc6:	4582      	cmp	sl, r0
 801adc8:	eb7b 0101 	sbcs.w	r1, fp, r1
 801adcc:	db6f      	blt.n	801aeae <mktime+0x226>
 801adce:	f1b9 0f00 	cmp.w	r9, #0
 801add2:	f04f 0900 	mov.w	r9, #0
 801add6:	da6f      	bge.n	801aeb8 <mktime+0x230>
 801add8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adda:	eb1a 0a03 	adds.w	sl, sl, r3
 801adde:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801ade2:	e0ae      	b.n	801af42 <mktime+0x2ba>
 801ade4:	f240 126d 	movw	r2, #365	; 0x16d
 801ade8:	e7a3      	b.n	801ad32 <mktime+0xaa>
 801adea:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801adee:	e7a0      	b.n	801ad32 <mktime+0xaa>
 801adf0:	d0a3      	beq.n	801ad3a <mktime+0xb2>
 801adf2:	2345      	movs	r3, #69	; 0x45
 801adf4:	f240 1e6d 	movw	lr, #365	; 0x16d
 801adf8:	2164      	movs	r1, #100	; 0x64
 801adfa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801adfe:	e012      	b.n	801ae26 <mktime+0x19e>
 801ae00:	bb62      	cbnz	r2, 801ae5c <mktime+0x1d4>
 801ae02:	fb93 f2f1 	sdiv	r2, r3, r1
 801ae06:	fb01 3212 	mls	r2, r1, r2, r3
 801ae0a:	bb52      	cbnz	r2, 801ae62 <mktime+0x1da>
 801ae0c:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801ae10:	fb9c f2f0 	sdiv	r2, ip, r0
 801ae14:	fb00 c212 	mls	r2, r0, r2, ip
 801ae18:	2a00      	cmp	r2, #0
 801ae1a:	bf14      	ite	ne
 801ae1c:	4672      	movne	r2, lr
 801ae1e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801ae22:	1aa4      	subs	r4, r4, r2
 801ae24:	3b01      	subs	r3, #1
 801ae26:	429e      	cmp	r6, r3
 801ae28:	f003 0203 	and.w	r2, r3, #3
 801ae2c:	dbe8      	blt.n	801ae00 <mktime+0x178>
 801ae2e:	b9da      	cbnz	r2, 801ae68 <mktime+0x1e0>
 801ae30:	2264      	movs	r2, #100	; 0x64
 801ae32:	fb96 f3f2 	sdiv	r3, r6, r2
 801ae36:	fb02 6313 	mls	r3, r2, r3, r6
 801ae3a:	b9c3      	cbnz	r3, 801ae6e <mktime+0x1e6>
 801ae3c:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801ae40:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801ae44:	fb91 f3f2 	sdiv	r3, r1, r2
 801ae48:	fb02 1313 	mls	r3, r2, r3, r1
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	f240 136d 	movw	r3, #365	; 0x16d
 801ae52:	bf08      	it	eq
 801ae54:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801ae58:	1ae4      	subs	r4, r4, r3
 801ae5a:	e76e      	b.n	801ad3a <mktime+0xb2>
 801ae5c:	f240 126d 	movw	r2, #365	; 0x16d
 801ae60:	e7df      	b.n	801ae22 <mktime+0x19a>
 801ae62:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801ae66:	e7dc      	b.n	801ae22 <mktime+0x19a>
 801ae68:	f240 136d 	movw	r3, #365	; 0x16d
 801ae6c:	e7f4      	b.n	801ae58 <mktime+0x1d0>
 801ae6e:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 801ae72:	e7f1      	b.n	801ae58 <mktime+0x1d0>
 801ae74:	f002 f97c 	bl	801d170 <__tzcalc_limits>
 801ae78:	2800      	cmp	r0, #0
 801ae7a:	f47f af7b 	bne.w	801ad74 <mktime+0xec>
 801ae7e:	46c1      	mov	r9, r8
 801ae80:	e054      	b.n	801af2c <mktime+0x2a4>
 801ae82:	9800      	ldr	r0, [sp, #0]
 801ae84:	9902      	ldr	r1, [sp, #8]
 801ae86:	1a09      	subs	r1, r1, r0
 801ae88:	9108      	str	r1, [sp, #32]
 801ae8a:	9801      	ldr	r0, [sp, #4]
 801ae8c:	9903      	ldr	r1, [sp, #12]
 801ae8e:	eb61 0100 	sbc.w	r1, r1, r0
 801ae92:	9109      	str	r1, [sp, #36]	; 0x24
 801ae94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801ae98:	4582      	cmp	sl, r0
 801ae9a:	eb7b 0101 	sbcs.w	r1, fp, r1
 801ae9e:	dbee      	blt.n	801ae7e <mktime+0x1f6>
 801aea0:	e77d      	b.n	801ad9e <mktime+0x116>
 801aea2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801aea6:	4582      	cmp	sl, r0
 801aea8:	eb7b 0101 	sbcs.w	r1, fp, r1
 801aeac:	db89      	blt.n	801adc2 <mktime+0x13a>
 801aeae:	f1b9 0f00 	cmp.w	r9, #0
 801aeb2:	db3f      	blt.n	801af34 <mktime+0x2ac>
 801aeb4:	f04f 0901 	mov.w	r9, #1
 801aeb8:	ea88 0809 	eor.w	r8, r8, r9
 801aebc:	f1b8 0f01 	cmp.w	r8, #1
 801aec0:	d134      	bne.n	801af2c <mktime+0x2a4>
 801aec2:	f1b9 0f00 	cmp.w	r9, #0
 801aec6:	d04f      	beq.n	801af68 <mktime+0x2e0>
 801aec8:	1ad3      	subs	r3, r2, r3
 801aeca:	682a      	ldr	r2, [r5, #0]
 801aecc:	f8d5 800c 	ldr.w	r8, [r5, #12]
 801aed0:	441a      	add	r2, r3
 801aed2:	eb1a 0a03 	adds.w	sl, sl, r3
 801aed6:	602a      	str	r2, [r5, #0]
 801aed8:	4628      	mov	r0, r5
 801aeda:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801aede:	f7ff fdfb 	bl	801aad8 <validate_structure>
 801aee2:	68ea      	ldr	r2, [r5, #12]
 801aee4:	ebb2 0208 	subs.w	r2, r2, r8
 801aee8:	d020      	beq.n	801af2c <mktime+0x2a4>
 801aeea:	2a01      	cmp	r2, #1
 801aeec:	dc3e      	bgt.n	801af6c <mktime+0x2e4>
 801aeee:	1c90      	adds	r0, r2, #2
 801aef0:	bfd8      	it	le
 801aef2:	2201      	movle	r2, #1
 801aef4:	69eb      	ldr	r3, [r5, #28]
 801aef6:	18d3      	adds	r3, r2, r3
 801aef8:	4414      	add	r4, r2
 801aefa:	d540      	bpl.n	801af7e <mktime+0x2f6>
 801aefc:	1e72      	subs	r2, r6, #1
 801aefe:	0791      	lsls	r1, r2, #30
 801af00:	d137      	bne.n	801af72 <mktime+0x2ea>
 801af02:	2164      	movs	r1, #100	; 0x64
 801af04:	fb92 f3f1 	sdiv	r3, r2, r1
 801af08:	fb01 2313 	mls	r3, r1, r3, r2
 801af0c:	bba3      	cbnz	r3, 801af78 <mktime+0x2f0>
 801af0e:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 801af12:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801af16:	fb96 f3f2 	sdiv	r3, r6, r2
 801af1a:	fb02 6613 	mls	r6, r2, r3, r6
 801af1e:	2e00      	cmp	r6, #0
 801af20:	f240 136d 	movw	r3, #365	; 0x16d
 801af24:	bf18      	it	ne
 801af26:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 801af2a:	61eb      	str	r3, [r5, #28]
 801af2c:	f1b9 0f01 	cmp.w	r9, #1
 801af30:	f47f af52 	bne.w	801add8 <mktime+0x150>
 801af34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801af36:	eb1a 0a03 	adds.w	sl, sl, r3
 801af3a:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801af3e:	f04f 0901 	mov.w	r9, #1
 801af42:	f002 f9c3 	bl	801d2cc <__tz_unlock>
 801af46:	3404      	adds	r4, #4
 801af48:	2307      	movs	r3, #7
 801af4a:	fb94 f3f3 	sdiv	r3, r4, r3
 801af4e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801af52:	1ae4      	subs	r4, r4, r3
 801af54:	bf48      	it	mi
 801af56:	3407      	addmi	r4, #7
 801af58:	f8c5 9020 	str.w	r9, [r5, #32]
 801af5c:	61ac      	str	r4, [r5, #24]
 801af5e:	4650      	mov	r0, sl
 801af60:	4659      	mov	r1, fp
 801af62:	b00b      	add	sp, #44	; 0x2c
 801af64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af68:	1a9b      	subs	r3, r3, r2
 801af6a:	e7ae      	b.n	801aeca <mktime+0x242>
 801af6c:	f04f 32ff 	mov.w	r2, #4294967295
 801af70:	e7c0      	b.n	801aef4 <mktime+0x26c>
 801af72:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 801af76:	e7d8      	b.n	801af2a <mktime+0x2a2>
 801af78:	f240 136d 	movw	r3, #365	; 0x16d
 801af7c:	e7d5      	b.n	801af2a <mktime+0x2a2>
 801af7e:	07b2      	lsls	r2, r6, #30
 801af80:	d117      	bne.n	801afb2 <mktime+0x32a>
 801af82:	2164      	movs	r1, #100	; 0x64
 801af84:	fb96 f2f1 	sdiv	r2, r6, r1
 801af88:	fb01 6212 	mls	r2, r1, r2, r6
 801af8c:	b9a2      	cbnz	r2, 801afb8 <mktime+0x330>
 801af8e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 801af92:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801af96:	fb96 f2f1 	sdiv	r2, r6, r1
 801af9a:	fb01 6612 	mls	r6, r1, r2, r6
 801af9e:	2e00      	cmp	r6, #0
 801afa0:	f240 126d 	movw	r2, #365	; 0x16d
 801afa4:	bf08      	it	eq
 801afa6:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801afaa:	4293      	cmp	r3, r2
 801afac:	bfa8      	it	ge
 801afae:	1a9b      	subge	r3, r3, r2
 801afb0:	e7bb      	b.n	801af2a <mktime+0x2a2>
 801afb2:	f240 126d 	movw	r2, #365	; 0x16d
 801afb6:	e7f8      	b.n	801afaa <mktime+0x322>
 801afb8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801afbc:	e7f5      	b.n	801afaa <mktime+0x322>
 801afbe:	f04f 3aff 	mov.w	sl, #4294967295
 801afc2:	f04f 3bff 	mov.w	fp, #4294967295
 801afc6:	e7ca      	b.n	801af5e <mktime+0x2d6>
 801afc8:	08022d98 	.word	0x08022d98
 801afcc:	00015180 	.word	0x00015180
 801afd0:	20008654 	.word	0x20008654

0801afd4 <_free_r>:
 801afd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801afd6:	2900      	cmp	r1, #0
 801afd8:	d048      	beq.n	801b06c <_free_r+0x98>
 801afda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801afde:	9001      	str	r0, [sp, #4]
 801afe0:	2b00      	cmp	r3, #0
 801afe2:	f1a1 0404 	sub.w	r4, r1, #4
 801afe6:	bfb8      	it	lt
 801afe8:	18e4      	addlt	r4, r4, r3
 801afea:	f004 f883 	bl	801f0f4 <__malloc_lock>
 801afee:	4a20      	ldr	r2, [pc, #128]	; (801b070 <_free_r+0x9c>)
 801aff0:	9801      	ldr	r0, [sp, #4]
 801aff2:	6813      	ldr	r3, [r2, #0]
 801aff4:	4615      	mov	r5, r2
 801aff6:	b933      	cbnz	r3, 801b006 <_free_r+0x32>
 801aff8:	6063      	str	r3, [r4, #4]
 801affa:	6014      	str	r4, [r2, #0]
 801affc:	b003      	add	sp, #12
 801affe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b002:	f004 b87d 	b.w	801f100 <__malloc_unlock>
 801b006:	42a3      	cmp	r3, r4
 801b008:	d90b      	bls.n	801b022 <_free_r+0x4e>
 801b00a:	6821      	ldr	r1, [r4, #0]
 801b00c:	1862      	adds	r2, r4, r1
 801b00e:	4293      	cmp	r3, r2
 801b010:	bf04      	itt	eq
 801b012:	681a      	ldreq	r2, [r3, #0]
 801b014:	685b      	ldreq	r3, [r3, #4]
 801b016:	6063      	str	r3, [r4, #4]
 801b018:	bf04      	itt	eq
 801b01a:	1852      	addeq	r2, r2, r1
 801b01c:	6022      	streq	r2, [r4, #0]
 801b01e:	602c      	str	r4, [r5, #0]
 801b020:	e7ec      	b.n	801affc <_free_r+0x28>
 801b022:	461a      	mov	r2, r3
 801b024:	685b      	ldr	r3, [r3, #4]
 801b026:	b10b      	cbz	r3, 801b02c <_free_r+0x58>
 801b028:	42a3      	cmp	r3, r4
 801b02a:	d9fa      	bls.n	801b022 <_free_r+0x4e>
 801b02c:	6811      	ldr	r1, [r2, #0]
 801b02e:	1855      	adds	r5, r2, r1
 801b030:	42a5      	cmp	r5, r4
 801b032:	d10b      	bne.n	801b04c <_free_r+0x78>
 801b034:	6824      	ldr	r4, [r4, #0]
 801b036:	4421      	add	r1, r4
 801b038:	1854      	adds	r4, r2, r1
 801b03a:	42a3      	cmp	r3, r4
 801b03c:	6011      	str	r1, [r2, #0]
 801b03e:	d1dd      	bne.n	801affc <_free_r+0x28>
 801b040:	681c      	ldr	r4, [r3, #0]
 801b042:	685b      	ldr	r3, [r3, #4]
 801b044:	6053      	str	r3, [r2, #4]
 801b046:	4421      	add	r1, r4
 801b048:	6011      	str	r1, [r2, #0]
 801b04a:	e7d7      	b.n	801affc <_free_r+0x28>
 801b04c:	d902      	bls.n	801b054 <_free_r+0x80>
 801b04e:	230c      	movs	r3, #12
 801b050:	6003      	str	r3, [r0, #0]
 801b052:	e7d3      	b.n	801affc <_free_r+0x28>
 801b054:	6825      	ldr	r5, [r4, #0]
 801b056:	1961      	adds	r1, r4, r5
 801b058:	428b      	cmp	r3, r1
 801b05a:	bf04      	itt	eq
 801b05c:	6819      	ldreq	r1, [r3, #0]
 801b05e:	685b      	ldreq	r3, [r3, #4]
 801b060:	6063      	str	r3, [r4, #4]
 801b062:	bf04      	itt	eq
 801b064:	1949      	addeq	r1, r1, r5
 801b066:	6021      	streq	r1, [r4, #0]
 801b068:	6054      	str	r4, [r2, #4]
 801b06a:	e7c7      	b.n	801affc <_free_r+0x28>
 801b06c:	b003      	add	sp, #12
 801b06e:	bd30      	pop	{r4, r5, pc}
 801b070:	20008630 	.word	0x20008630

0801b074 <_malloc_r>:
 801b074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b076:	1ccd      	adds	r5, r1, #3
 801b078:	f025 0503 	bic.w	r5, r5, #3
 801b07c:	3508      	adds	r5, #8
 801b07e:	2d0c      	cmp	r5, #12
 801b080:	bf38      	it	cc
 801b082:	250c      	movcc	r5, #12
 801b084:	2d00      	cmp	r5, #0
 801b086:	4606      	mov	r6, r0
 801b088:	db01      	blt.n	801b08e <_malloc_r+0x1a>
 801b08a:	42a9      	cmp	r1, r5
 801b08c:	d903      	bls.n	801b096 <_malloc_r+0x22>
 801b08e:	230c      	movs	r3, #12
 801b090:	6033      	str	r3, [r6, #0]
 801b092:	2000      	movs	r0, #0
 801b094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b096:	f004 f82d 	bl	801f0f4 <__malloc_lock>
 801b09a:	4921      	ldr	r1, [pc, #132]	; (801b120 <_malloc_r+0xac>)
 801b09c:	680a      	ldr	r2, [r1, #0]
 801b09e:	4614      	mov	r4, r2
 801b0a0:	b99c      	cbnz	r4, 801b0ca <_malloc_r+0x56>
 801b0a2:	4f20      	ldr	r7, [pc, #128]	; (801b124 <_malloc_r+0xb0>)
 801b0a4:	683b      	ldr	r3, [r7, #0]
 801b0a6:	b923      	cbnz	r3, 801b0b2 <_malloc_r+0x3e>
 801b0a8:	4621      	mov	r1, r4
 801b0aa:	4630      	mov	r0, r6
 801b0ac:	f000 ffae 	bl	801c00c <_sbrk_r>
 801b0b0:	6038      	str	r0, [r7, #0]
 801b0b2:	4629      	mov	r1, r5
 801b0b4:	4630      	mov	r0, r6
 801b0b6:	f000 ffa9 	bl	801c00c <_sbrk_r>
 801b0ba:	1c43      	adds	r3, r0, #1
 801b0bc:	d123      	bne.n	801b106 <_malloc_r+0x92>
 801b0be:	230c      	movs	r3, #12
 801b0c0:	6033      	str	r3, [r6, #0]
 801b0c2:	4630      	mov	r0, r6
 801b0c4:	f004 f81c 	bl	801f100 <__malloc_unlock>
 801b0c8:	e7e3      	b.n	801b092 <_malloc_r+0x1e>
 801b0ca:	6823      	ldr	r3, [r4, #0]
 801b0cc:	1b5b      	subs	r3, r3, r5
 801b0ce:	d417      	bmi.n	801b100 <_malloc_r+0x8c>
 801b0d0:	2b0b      	cmp	r3, #11
 801b0d2:	d903      	bls.n	801b0dc <_malloc_r+0x68>
 801b0d4:	6023      	str	r3, [r4, #0]
 801b0d6:	441c      	add	r4, r3
 801b0d8:	6025      	str	r5, [r4, #0]
 801b0da:	e004      	b.n	801b0e6 <_malloc_r+0x72>
 801b0dc:	6863      	ldr	r3, [r4, #4]
 801b0de:	42a2      	cmp	r2, r4
 801b0e0:	bf0c      	ite	eq
 801b0e2:	600b      	streq	r3, [r1, #0]
 801b0e4:	6053      	strne	r3, [r2, #4]
 801b0e6:	4630      	mov	r0, r6
 801b0e8:	f004 f80a 	bl	801f100 <__malloc_unlock>
 801b0ec:	f104 000b 	add.w	r0, r4, #11
 801b0f0:	1d23      	adds	r3, r4, #4
 801b0f2:	f020 0007 	bic.w	r0, r0, #7
 801b0f6:	1ac2      	subs	r2, r0, r3
 801b0f8:	d0cc      	beq.n	801b094 <_malloc_r+0x20>
 801b0fa:	1a1b      	subs	r3, r3, r0
 801b0fc:	50a3      	str	r3, [r4, r2]
 801b0fe:	e7c9      	b.n	801b094 <_malloc_r+0x20>
 801b100:	4622      	mov	r2, r4
 801b102:	6864      	ldr	r4, [r4, #4]
 801b104:	e7cc      	b.n	801b0a0 <_malloc_r+0x2c>
 801b106:	1cc4      	adds	r4, r0, #3
 801b108:	f024 0403 	bic.w	r4, r4, #3
 801b10c:	42a0      	cmp	r0, r4
 801b10e:	d0e3      	beq.n	801b0d8 <_malloc_r+0x64>
 801b110:	1a21      	subs	r1, r4, r0
 801b112:	4630      	mov	r0, r6
 801b114:	f000 ff7a 	bl	801c00c <_sbrk_r>
 801b118:	3001      	adds	r0, #1
 801b11a:	d1dd      	bne.n	801b0d8 <_malloc_r+0x64>
 801b11c:	e7cf      	b.n	801b0be <_malloc_r+0x4a>
 801b11e:	bf00      	nop
 801b120:	20008630 	.word	0x20008630
 801b124:	20008634 	.word	0x20008634

0801b128 <__cvt>:
 801b128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b12c:	ec55 4b10 	vmov	r4, r5, d0
 801b130:	2d00      	cmp	r5, #0
 801b132:	460e      	mov	r6, r1
 801b134:	4619      	mov	r1, r3
 801b136:	462b      	mov	r3, r5
 801b138:	bfbb      	ittet	lt
 801b13a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801b13e:	461d      	movlt	r5, r3
 801b140:	2300      	movge	r3, #0
 801b142:	232d      	movlt	r3, #45	; 0x2d
 801b144:	700b      	strb	r3, [r1, #0]
 801b146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b148:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801b14c:	4691      	mov	r9, r2
 801b14e:	f023 0820 	bic.w	r8, r3, #32
 801b152:	bfbc      	itt	lt
 801b154:	4622      	movlt	r2, r4
 801b156:	4614      	movlt	r4, r2
 801b158:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801b15c:	d005      	beq.n	801b16a <__cvt+0x42>
 801b15e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801b162:	d100      	bne.n	801b166 <__cvt+0x3e>
 801b164:	3601      	adds	r6, #1
 801b166:	2102      	movs	r1, #2
 801b168:	e000      	b.n	801b16c <__cvt+0x44>
 801b16a:	2103      	movs	r1, #3
 801b16c:	ab03      	add	r3, sp, #12
 801b16e:	9301      	str	r3, [sp, #4]
 801b170:	ab02      	add	r3, sp, #8
 801b172:	9300      	str	r3, [sp, #0]
 801b174:	ec45 4b10 	vmov	d0, r4, r5
 801b178:	4653      	mov	r3, sl
 801b17a:	4632      	mov	r2, r6
 801b17c:	f002 fc08 	bl	801d990 <_dtoa_r>
 801b180:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801b184:	4607      	mov	r7, r0
 801b186:	d102      	bne.n	801b18e <__cvt+0x66>
 801b188:	f019 0f01 	tst.w	r9, #1
 801b18c:	d022      	beq.n	801b1d4 <__cvt+0xac>
 801b18e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801b192:	eb07 0906 	add.w	r9, r7, r6
 801b196:	d110      	bne.n	801b1ba <__cvt+0x92>
 801b198:	783b      	ldrb	r3, [r7, #0]
 801b19a:	2b30      	cmp	r3, #48	; 0x30
 801b19c:	d10a      	bne.n	801b1b4 <__cvt+0x8c>
 801b19e:	2200      	movs	r2, #0
 801b1a0:	2300      	movs	r3, #0
 801b1a2:	4620      	mov	r0, r4
 801b1a4:	4629      	mov	r1, r5
 801b1a6:	f7e5 fcaf 	bl	8000b08 <__aeabi_dcmpeq>
 801b1aa:	b918      	cbnz	r0, 801b1b4 <__cvt+0x8c>
 801b1ac:	f1c6 0601 	rsb	r6, r6, #1
 801b1b0:	f8ca 6000 	str.w	r6, [sl]
 801b1b4:	f8da 3000 	ldr.w	r3, [sl]
 801b1b8:	4499      	add	r9, r3
 801b1ba:	2200      	movs	r2, #0
 801b1bc:	2300      	movs	r3, #0
 801b1be:	4620      	mov	r0, r4
 801b1c0:	4629      	mov	r1, r5
 801b1c2:	f7e5 fca1 	bl	8000b08 <__aeabi_dcmpeq>
 801b1c6:	b108      	cbz	r0, 801b1cc <__cvt+0xa4>
 801b1c8:	f8cd 900c 	str.w	r9, [sp, #12]
 801b1cc:	2230      	movs	r2, #48	; 0x30
 801b1ce:	9b03      	ldr	r3, [sp, #12]
 801b1d0:	454b      	cmp	r3, r9
 801b1d2:	d307      	bcc.n	801b1e4 <__cvt+0xbc>
 801b1d4:	9b03      	ldr	r3, [sp, #12]
 801b1d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b1d8:	1bdb      	subs	r3, r3, r7
 801b1da:	4638      	mov	r0, r7
 801b1dc:	6013      	str	r3, [r2, #0]
 801b1de:	b004      	add	sp, #16
 801b1e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b1e4:	1c59      	adds	r1, r3, #1
 801b1e6:	9103      	str	r1, [sp, #12]
 801b1e8:	701a      	strb	r2, [r3, #0]
 801b1ea:	e7f0      	b.n	801b1ce <__cvt+0xa6>

0801b1ec <__exponent>:
 801b1ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b1ee:	4603      	mov	r3, r0
 801b1f0:	2900      	cmp	r1, #0
 801b1f2:	bfb8      	it	lt
 801b1f4:	4249      	neglt	r1, r1
 801b1f6:	f803 2b02 	strb.w	r2, [r3], #2
 801b1fa:	bfb4      	ite	lt
 801b1fc:	222d      	movlt	r2, #45	; 0x2d
 801b1fe:	222b      	movge	r2, #43	; 0x2b
 801b200:	2909      	cmp	r1, #9
 801b202:	7042      	strb	r2, [r0, #1]
 801b204:	dd2a      	ble.n	801b25c <__exponent+0x70>
 801b206:	f10d 0407 	add.w	r4, sp, #7
 801b20a:	46a4      	mov	ip, r4
 801b20c:	270a      	movs	r7, #10
 801b20e:	46a6      	mov	lr, r4
 801b210:	460a      	mov	r2, r1
 801b212:	fb91 f6f7 	sdiv	r6, r1, r7
 801b216:	fb07 1516 	mls	r5, r7, r6, r1
 801b21a:	3530      	adds	r5, #48	; 0x30
 801b21c:	2a63      	cmp	r2, #99	; 0x63
 801b21e:	f104 34ff 	add.w	r4, r4, #4294967295
 801b222:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801b226:	4631      	mov	r1, r6
 801b228:	dcf1      	bgt.n	801b20e <__exponent+0x22>
 801b22a:	3130      	adds	r1, #48	; 0x30
 801b22c:	f1ae 0502 	sub.w	r5, lr, #2
 801b230:	f804 1c01 	strb.w	r1, [r4, #-1]
 801b234:	1c44      	adds	r4, r0, #1
 801b236:	4629      	mov	r1, r5
 801b238:	4561      	cmp	r1, ip
 801b23a:	d30a      	bcc.n	801b252 <__exponent+0x66>
 801b23c:	f10d 0209 	add.w	r2, sp, #9
 801b240:	eba2 020e 	sub.w	r2, r2, lr
 801b244:	4565      	cmp	r5, ip
 801b246:	bf88      	it	hi
 801b248:	2200      	movhi	r2, #0
 801b24a:	4413      	add	r3, r2
 801b24c:	1a18      	subs	r0, r3, r0
 801b24e:	b003      	add	sp, #12
 801b250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b252:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b256:	f804 2f01 	strb.w	r2, [r4, #1]!
 801b25a:	e7ed      	b.n	801b238 <__exponent+0x4c>
 801b25c:	2330      	movs	r3, #48	; 0x30
 801b25e:	3130      	adds	r1, #48	; 0x30
 801b260:	7083      	strb	r3, [r0, #2]
 801b262:	70c1      	strb	r1, [r0, #3]
 801b264:	1d03      	adds	r3, r0, #4
 801b266:	e7f1      	b.n	801b24c <__exponent+0x60>

0801b268 <_printf_float>:
 801b268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b26c:	ed2d 8b02 	vpush	{d8}
 801b270:	b08d      	sub	sp, #52	; 0x34
 801b272:	460c      	mov	r4, r1
 801b274:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801b278:	4616      	mov	r6, r2
 801b27a:	461f      	mov	r7, r3
 801b27c:	4605      	mov	r5, r0
 801b27e:	f003 fead 	bl	801efdc <_localeconv_r>
 801b282:	f8d0 a000 	ldr.w	sl, [r0]
 801b286:	4650      	mov	r0, sl
 801b288:	f7e4 ffbc 	bl	8000204 <strlen>
 801b28c:	2300      	movs	r3, #0
 801b28e:	930a      	str	r3, [sp, #40]	; 0x28
 801b290:	6823      	ldr	r3, [r4, #0]
 801b292:	9305      	str	r3, [sp, #20]
 801b294:	f8d8 3000 	ldr.w	r3, [r8]
 801b298:	f894 b018 	ldrb.w	fp, [r4, #24]
 801b29c:	3307      	adds	r3, #7
 801b29e:	f023 0307 	bic.w	r3, r3, #7
 801b2a2:	f103 0208 	add.w	r2, r3, #8
 801b2a6:	f8c8 2000 	str.w	r2, [r8]
 801b2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801b2b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801b2b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801b2ba:	9307      	str	r3, [sp, #28]
 801b2bc:	f8cd 8018 	str.w	r8, [sp, #24]
 801b2c0:	ee08 0a10 	vmov	s16, r0
 801b2c4:	4b9f      	ldr	r3, [pc, #636]	; (801b544 <_printf_float+0x2dc>)
 801b2c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b2ca:	f04f 32ff 	mov.w	r2, #4294967295
 801b2ce:	f7e5 fc4d 	bl	8000b6c <__aeabi_dcmpun>
 801b2d2:	bb88      	cbnz	r0, 801b338 <_printf_float+0xd0>
 801b2d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b2d8:	4b9a      	ldr	r3, [pc, #616]	; (801b544 <_printf_float+0x2dc>)
 801b2da:	f04f 32ff 	mov.w	r2, #4294967295
 801b2de:	f7e5 fc27 	bl	8000b30 <__aeabi_dcmple>
 801b2e2:	bb48      	cbnz	r0, 801b338 <_printf_float+0xd0>
 801b2e4:	2200      	movs	r2, #0
 801b2e6:	2300      	movs	r3, #0
 801b2e8:	4640      	mov	r0, r8
 801b2ea:	4649      	mov	r1, r9
 801b2ec:	f7e5 fc16 	bl	8000b1c <__aeabi_dcmplt>
 801b2f0:	b110      	cbz	r0, 801b2f8 <_printf_float+0x90>
 801b2f2:	232d      	movs	r3, #45	; 0x2d
 801b2f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b2f8:	4b93      	ldr	r3, [pc, #588]	; (801b548 <_printf_float+0x2e0>)
 801b2fa:	4894      	ldr	r0, [pc, #592]	; (801b54c <_printf_float+0x2e4>)
 801b2fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801b300:	bf94      	ite	ls
 801b302:	4698      	movls	r8, r3
 801b304:	4680      	movhi	r8, r0
 801b306:	2303      	movs	r3, #3
 801b308:	6123      	str	r3, [r4, #16]
 801b30a:	9b05      	ldr	r3, [sp, #20]
 801b30c:	f023 0204 	bic.w	r2, r3, #4
 801b310:	6022      	str	r2, [r4, #0]
 801b312:	f04f 0900 	mov.w	r9, #0
 801b316:	9700      	str	r7, [sp, #0]
 801b318:	4633      	mov	r3, r6
 801b31a:	aa0b      	add	r2, sp, #44	; 0x2c
 801b31c:	4621      	mov	r1, r4
 801b31e:	4628      	mov	r0, r5
 801b320:	f000 f9d8 	bl	801b6d4 <_printf_common>
 801b324:	3001      	adds	r0, #1
 801b326:	f040 8090 	bne.w	801b44a <_printf_float+0x1e2>
 801b32a:	f04f 30ff 	mov.w	r0, #4294967295
 801b32e:	b00d      	add	sp, #52	; 0x34
 801b330:	ecbd 8b02 	vpop	{d8}
 801b334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b338:	4642      	mov	r2, r8
 801b33a:	464b      	mov	r3, r9
 801b33c:	4640      	mov	r0, r8
 801b33e:	4649      	mov	r1, r9
 801b340:	f7e5 fc14 	bl	8000b6c <__aeabi_dcmpun>
 801b344:	b140      	cbz	r0, 801b358 <_printf_float+0xf0>
 801b346:	464b      	mov	r3, r9
 801b348:	2b00      	cmp	r3, #0
 801b34a:	bfbc      	itt	lt
 801b34c:	232d      	movlt	r3, #45	; 0x2d
 801b34e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801b352:	487f      	ldr	r0, [pc, #508]	; (801b550 <_printf_float+0x2e8>)
 801b354:	4b7f      	ldr	r3, [pc, #508]	; (801b554 <_printf_float+0x2ec>)
 801b356:	e7d1      	b.n	801b2fc <_printf_float+0x94>
 801b358:	6863      	ldr	r3, [r4, #4]
 801b35a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801b35e:	9206      	str	r2, [sp, #24]
 801b360:	1c5a      	adds	r2, r3, #1
 801b362:	d13f      	bne.n	801b3e4 <_printf_float+0x17c>
 801b364:	2306      	movs	r3, #6
 801b366:	6063      	str	r3, [r4, #4]
 801b368:	9b05      	ldr	r3, [sp, #20]
 801b36a:	6861      	ldr	r1, [r4, #4]
 801b36c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801b370:	2300      	movs	r3, #0
 801b372:	9303      	str	r3, [sp, #12]
 801b374:	ab0a      	add	r3, sp, #40	; 0x28
 801b376:	e9cd b301 	strd	fp, r3, [sp, #4]
 801b37a:	ab09      	add	r3, sp, #36	; 0x24
 801b37c:	ec49 8b10 	vmov	d0, r8, r9
 801b380:	9300      	str	r3, [sp, #0]
 801b382:	6022      	str	r2, [r4, #0]
 801b384:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801b388:	4628      	mov	r0, r5
 801b38a:	f7ff fecd 	bl	801b128 <__cvt>
 801b38e:	9b06      	ldr	r3, [sp, #24]
 801b390:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b392:	2b47      	cmp	r3, #71	; 0x47
 801b394:	4680      	mov	r8, r0
 801b396:	d108      	bne.n	801b3aa <_printf_float+0x142>
 801b398:	1cc8      	adds	r0, r1, #3
 801b39a:	db02      	blt.n	801b3a2 <_printf_float+0x13a>
 801b39c:	6863      	ldr	r3, [r4, #4]
 801b39e:	4299      	cmp	r1, r3
 801b3a0:	dd41      	ble.n	801b426 <_printf_float+0x1be>
 801b3a2:	f1ab 0b02 	sub.w	fp, fp, #2
 801b3a6:	fa5f fb8b 	uxtb.w	fp, fp
 801b3aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801b3ae:	d820      	bhi.n	801b3f2 <_printf_float+0x18a>
 801b3b0:	3901      	subs	r1, #1
 801b3b2:	465a      	mov	r2, fp
 801b3b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b3b8:	9109      	str	r1, [sp, #36]	; 0x24
 801b3ba:	f7ff ff17 	bl	801b1ec <__exponent>
 801b3be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b3c0:	1813      	adds	r3, r2, r0
 801b3c2:	2a01      	cmp	r2, #1
 801b3c4:	4681      	mov	r9, r0
 801b3c6:	6123      	str	r3, [r4, #16]
 801b3c8:	dc02      	bgt.n	801b3d0 <_printf_float+0x168>
 801b3ca:	6822      	ldr	r2, [r4, #0]
 801b3cc:	07d2      	lsls	r2, r2, #31
 801b3ce:	d501      	bpl.n	801b3d4 <_printf_float+0x16c>
 801b3d0:	3301      	adds	r3, #1
 801b3d2:	6123      	str	r3, [r4, #16]
 801b3d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801b3d8:	2b00      	cmp	r3, #0
 801b3da:	d09c      	beq.n	801b316 <_printf_float+0xae>
 801b3dc:	232d      	movs	r3, #45	; 0x2d
 801b3de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b3e2:	e798      	b.n	801b316 <_printf_float+0xae>
 801b3e4:	9a06      	ldr	r2, [sp, #24]
 801b3e6:	2a47      	cmp	r2, #71	; 0x47
 801b3e8:	d1be      	bne.n	801b368 <_printf_float+0x100>
 801b3ea:	2b00      	cmp	r3, #0
 801b3ec:	d1bc      	bne.n	801b368 <_printf_float+0x100>
 801b3ee:	2301      	movs	r3, #1
 801b3f0:	e7b9      	b.n	801b366 <_printf_float+0xfe>
 801b3f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801b3f6:	d118      	bne.n	801b42a <_printf_float+0x1c2>
 801b3f8:	2900      	cmp	r1, #0
 801b3fa:	6863      	ldr	r3, [r4, #4]
 801b3fc:	dd0b      	ble.n	801b416 <_printf_float+0x1ae>
 801b3fe:	6121      	str	r1, [r4, #16]
 801b400:	b913      	cbnz	r3, 801b408 <_printf_float+0x1a0>
 801b402:	6822      	ldr	r2, [r4, #0]
 801b404:	07d0      	lsls	r0, r2, #31
 801b406:	d502      	bpl.n	801b40e <_printf_float+0x1a6>
 801b408:	3301      	adds	r3, #1
 801b40a:	440b      	add	r3, r1
 801b40c:	6123      	str	r3, [r4, #16]
 801b40e:	65a1      	str	r1, [r4, #88]	; 0x58
 801b410:	f04f 0900 	mov.w	r9, #0
 801b414:	e7de      	b.n	801b3d4 <_printf_float+0x16c>
 801b416:	b913      	cbnz	r3, 801b41e <_printf_float+0x1b6>
 801b418:	6822      	ldr	r2, [r4, #0]
 801b41a:	07d2      	lsls	r2, r2, #31
 801b41c:	d501      	bpl.n	801b422 <_printf_float+0x1ba>
 801b41e:	3302      	adds	r3, #2
 801b420:	e7f4      	b.n	801b40c <_printf_float+0x1a4>
 801b422:	2301      	movs	r3, #1
 801b424:	e7f2      	b.n	801b40c <_printf_float+0x1a4>
 801b426:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801b42a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b42c:	4299      	cmp	r1, r3
 801b42e:	db05      	blt.n	801b43c <_printf_float+0x1d4>
 801b430:	6823      	ldr	r3, [r4, #0]
 801b432:	6121      	str	r1, [r4, #16]
 801b434:	07d8      	lsls	r0, r3, #31
 801b436:	d5ea      	bpl.n	801b40e <_printf_float+0x1a6>
 801b438:	1c4b      	adds	r3, r1, #1
 801b43a:	e7e7      	b.n	801b40c <_printf_float+0x1a4>
 801b43c:	2900      	cmp	r1, #0
 801b43e:	bfd4      	ite	le
 801b440:	f1c1 0202 	rsble	r2, r1, #2
 801b444:	2201      	movgt	r2, #1
 801b446:	4413      	add	r3, r2
 801b448:	e7e0      	b.n	801b40c <_printf_float+0x1a4>
 801b44a:	6823      	ldr	r3, [r4, #0]
 801b44c:	055a      	lsls	r2, r3, #21
 801b44e:	d407      	bmi.n	801b460 <_printf_float+0x1f8>
 801b450:	6923      	ldr	r3, [r4, #16]
 801b452:	4642      	mov	r2, r8
 801b454:	4631      	mov	r1, r6
 801b456:	4628      	mov	r0, r5
 801b458:	47b8      	blx	r7
 801b45a:	3001      	adds	r0, #1
 801b45c:	d12c      	bne.n	801b4b8 <_printf_float+0x250>
 801b45e:	e764      	b.n	801b32a <_printf_float+0xc2>
 801b460:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801b464:	f240 80e0 	bls.w	801b628 <_printf_float+0x3c0>
 801b468:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b46c:	2200      	movs	r2, #0
 801b46e:	2300      	movs	r3, #0
 801b470:	f7e5 fb4a 	bl	8000b08 <__aeabi_dcmpeq>
 801b474:	2800      	cmp	r0, #0
 801b476:	d034      	beq.n	801b4e2 <_printf_float+0x27a>
 801b478:	4a37      	ldr	r2, [pc, #220]	; (801b558 <_printf_float+0x2f0>)
 801b47a:	2301      	movs	r3, #1
 801b47c:	4631      	mov	r1, r6
 801b47e:	4628      	mov	r0, r5
 801b480:	47b8      	blx	r7
 801b482:	3001      	adds	r0, #1
 801b484:	f43f af51 	beq.w	801b32a <_printf_float+0xc2>
 801b488:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b48c:	429a      	cmp	r2, r3
 801b48e:	db02      	blt.n	801b496 <_printf_float+0x22e>
 801b490:	6823      	ldr	r3, [r4, #0]
 801b492:	07d8      	lsls	r0, r3, #31
 801b494:	d510      	bpl.n	801b4b8 <_printf_float+0x250>
 801b496:	ee18 3a10 	vmov	r3, s16
 801b49a:	4652      	mov	r2, sl
 801b49c:	4631      	mov	r1, r6
 801b49e:	4628      	mov	r0, r5
 801b4a0:	47b8      	blx	r7
 801b4a2:	3001      	adds	r0, #1
 801b4a4:	f43f af41 	beq.w	801b32a <_printf_float+0xc2>
 801b4a8:	f04f 0800 	mov.w	r8, #0
 801b4ac:	f104 091a 	add.w	r9, r4, #26
 801b4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b4b2:	3b01      	subs	r3, #1
 801b4b4:	4543      	cmp	r3, r8
 801b4b6:	dc09      	bgt.n	801b4cc <_printf_float+0x264>
 801b4b8:	6823      	ldr	r3, [r4, #0]
 801b4ba:	079b      	lsls	r3, r3, #30
 801b4bc:	f100 8105 	bmi.w	801b6ca <_printf_float+0x462>
 801b4c0:	68e0      	ldr	r0, [r4, #12]
 801b4c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b4c4:	4298      	cmp	r0, r3
 801b4c6:	bfb8      	it	lt
 801b4c8:	4618      	movlt	r0, r3
 801b4ca:	e730      	b.n	801b32e <_printf_float+0xc6>
 801b4cc:	2301      	movs	r3, #1
 801b4ce:	464a      	mov	r2, r9
 801b4d0:	4631      	mov	r1, r6
 801b4d2:	4628      	mov	r0, r5
 801b4d4:	47b8      	blx	r7
 801b4d6:	3001      	adds	r0, #1
 801b4d8:	f43f af27 	beq.w	801b32a <_printf_float+0xc2>
 801b4dc:	f108 0801 	add.w	r8, r8, #1
 801b4e0:	e7e6      	b.n	801b4b0 <_printf_float+0x248>
 801b4e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b4e4:	2b00      	cmp	r3, #0
 801b4e6:	dc39      	bgt.n	801b55c <_printf_float+0x2f4>
 801b4e8:	4a1b      	ldr	r2, [pc, #108]	; (801b558 <_printf_float+0x2f0>)
 801b4ea:	2301      	movs	r3, #1
 801b4ec:	4631      	mov	r1, r6
 801b4ee:	4628      	mov	r0, r5
 801b4f0:	47b8      	blx	r7
 801b4f2:	3001      	adds	r0, #1
 801b4f4:	f43f af19 	beq.w	801b32a <_printf_float+0xc2>
 801b4f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b4fc:	4313      	orrs	r3, r2
 801b4fe:	d102      	bne.n	801b506 <_printf_float+0x29e>
 801b500:	6823      	ldr	r3, [r4, #0]
 801b502:	07d9      	lsls	r1, r3, #31
 801b504:	d5d8      	bpl.n	801b4b8 <_printf_float+0x250>
 801b506:	ee18 3a10 	vmov	r3, s16
 801b50a:	4652      	mov	r2, sl
 801b50c:	4631      	mov	r1, r6
 801b50e:	4628      	mov	r0, r5
 801b510:	47b8      	blx	r7
 801b512:	3001      	adds	r0, #1
 801b514:	f43f af09 	beq.w	801b32a <_printf_float+0xc2>
 801b518:	f04f 0900 	mov.w	r9, #0
 801b51c:	f104 0a1a 	add.w	sl, r4, #26
 801b520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b522:	425b      	negs	r3, r3
 801b524:	454b      	cmp	r3, r9
 801b526:	dc01      	bgt.n	801b52c <_printf_float+0x2c4>
 801b528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b52a:	e792      	b.n	801b452 <_printf_float+0x1ea>
 801b52c:	2301      	movs	r3, #1
 801b52e:	4652      	mov	r2, sl
 801b530:	4631      	mov	r1, r6
 801b532:	4628      	mov	r0, r5
 801b534:	47b8      	blx	r7
 801b536:	3001      	adds	r0, #1
 801b538:	f43f aef7 	beq.w	801b32a <_printf_float+0xc2>
 801b53c:	f109 0901 	add.w	r9, r9, #1
 801b540:	e7ee      	b.n	801b520 <_printf_float+0x2b8>
 801b542:	bf00      	nop
 801b544:	7fefffff 	.word	0x7fefffff
 801b548:	08022e28 	.word	0x08022e28
 801b54c:	08022e2c 	.word	0x08022e2c
 801b550:	08022e34 	.word	0x08022e34
 801b554:	08022e30 	.word	0x08022e30
 801b558:	080231f9 	.word	0x080231f9
 801b55c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b55e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b560:	429a      	cmp	r2, r3
 801b562:	bfa8      	it	ge
 801b564:	461a      	movge	r2, r3
 801b566:	2a00      	cmp	r2, #0
 801b568:	4691      	mov	r9, r2
 801b56a:	dc37      	bgt.n	801b5dc <_printf_float+0x374>
 801b56c:	f04f 0b00 	mov.w	fp, #0
 801b570:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b574:	f104 021a 	add.w	r2, r4, #26
 801b578:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b57a:	9305      	str	r3, [sp, #20]
 801b57c:	eba3 0309 	sub.w	r3, r3, r9
 801b580:	455b      	cmp	r3, fp
 801b582:	dc33      	bgt.n	801b5ec <_printf_float+0x384>
 801b584:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b588:	429a      	cmp	r2, r3
 801b58a:	db3b      	blt.n	801b604 <_printf_float+0x39c>
 801b58c:	6823      	ldr	r3, [r4, #0]
 801b58e:	07da      	lsls	r2, r3, #31
 801b590:	d438      	bmi.n	801b604 <_printf_float+0x39c>
 801b592:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b594:	9b05      	ldr	r3, [sp, #20]
 801b596:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b598:	1ad3      	subs	r3, r2, r3
 801b59a:	eba2 0901 	sub.w	r9, r2, r1
 801b59e:	4599      	cmp	r9, r3
 801b5a0:	bfa8      	it	ge
 801b5a2:	4699      	movge	r9, r3
 801b5a4:	f1b9 0f00 	cmp.w	r9, #0
 801b5a8:	dc35      	bgt.n	801b616 <_printf_float+0x3ae>
 801b5aa:	f04f 0800 	mov.w	r8, #0
 801b5ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b5b2:	f104 0a1a 	add.w	sl, r4, #26
 801b5b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b5ba:	1a9b      	subs	r3, r3, r2
 801b5bc:	eba3 0309 	sub.w	r3, r3, r9
 801b5c0:	4543      	cmp	r3, r8
 801b5c2:	f77f af79 	ble.w	801b4b8 <_printf_float+0x250>
 801b5c6:	2301      	movs	r3, #1
 801b5c8:	4652      	mov	r2, sl
 801b5ca:	4631      	mov	r1, r6
 801b5cc:	4628      	mov	r0, r5
 801b5ce:	47b8      	blx	r7
 801b5d0:	3001      	adds	r0, #1
 801b5d2:	f43f aeaa 	beq.w	801b32a <_printf_float+0xc2>
 801b5d6:	f108 0801 	add.w	r8, r8, #1
 801b5da:	e7ec      	b.n	801b5b6 <_printf_float+0x34e>
 801b5dc:	4613      	mov	r3, r2
 801b5de:	4631      	mov	r1, r6
 801b5e0:	4642      	mov	r2, r8
 801b5e2:	4628      	mov	r0, r5
 801b5e4:	47b8      	blx	r7
 801b5e6:	3001      	adds	r0, #1
 801b5e8:	d1c0      	bne.n	801b56c <_printf_float+0x304>
 801b5ea:	e69e      	b.n	801b32a <_printf_float+0xc2>
 801b5ec:	2301      	movs	r3, #1
 801b5ee:	4631      	mov	r1, r6
 801b5f0:	4628      	mov	r0, r5
 801b5f2:	9205      	str	r2, [sp, #20]
 801b5f4:	47b8      	blx	r7
 801b5f6:	3001      	adds	r0, #1
 801b5f8:	f43f ae97 	beq.w	801b32a <_printf_float+0xc2>
 801b5fc:	9a05      	ldr	r2, [sp, #20]
 801b5fe:	f10b 0b01 	add.w	fp, fp, #1
 801b602:	e7b9      	b.n	801b578 <_printf_float+0x310>
 801b604:	ee18 3a10 	vmov	r3, s16
 801b608:	4652      	mov	r2, sl
 801b60a:	4631      	mov	r1, r6
 801b60c:	4628      	mov	r0, r5
 801b60e:	47b8      	blx	r7
 801b610:	3001      	adds	r0, #1
 801b612:	d1be      	bne.n	801b592 <_printf_float+0x32a>
 801b614:	e689      	b.n	801b32a <_printf_float+0xc2>
 801b616:	9a05      	ldr	r2, [sp, #20]
 801b618:	464b      	mov	r3, r9
 801b61a:	4442      	add	r2, r8
 801b61c:	4631      	mov	r1, r6
 801b61e:	4628      	mov	r0, r5
 801b620:	47b8      	blx	r7
 801b622:	3001      	adds	r0, #1
 801b624:	d1c1      	bne.n	801b5aa <_printf_float+0x342>
 801b626:	e680      	b.n	801b32a <_printf_float+0xc2>
 801b628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b62a:	2a01      	cmp	r2, #1
 801b62c:	dc01      	bgt.n	801b632 <_printf_float+0x3ca>
 801b62e:	07db      	lsls	r3, r3, #31
 801b630:	d538      	bpl.n	801b6a4 <_printf_float+0x43c>
 801b632:	2301      	movs	r3, #1
 801b634:	4642      	mov	r2, r8
 801b636:	4631      	mov	r1, r6
 801b638:	4628      	mov	r0, r5
 801b63a:	47b8      	blx	r7
 801b63c:	3001      	adds	r0, #1
 801b63e:	f43f ae74 	beq.w	801b32a <_printf_float+0xc2>
 801b642:	ee18 3a10 	vmov	r3, s16
 801b646:	4652      	mov	r2, sl
 801b648:	4631      	mov	r1, r6
 801b64a:	4628      	mov	r0, r5
 801b64c:	47b8      	blx	r7
 801b64e:	3001      	adds	r0, #1
 801b650:	f43f ae6b 	beq.w	801b32a <_printf_float+0xc2>
 801b654:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b658:	2200      	movs	r2, #0
 801b65a:	2300      	movs	r3, #0
 801b65c:	f7e5 fa54 	bl	8000b08 <__aeabi_dcmpeq>
 801b660:	b9d8      	cbnz	r0, 801b69a <_printf_float+0x432>
 801b662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b664:	f108 0201 	add.w	r2, r8, #1
 801b668:	3b01      	subs	r3, #1
 801b66a:	4631      	mov	r1, r6
 801b66c:	4628      	mov	r0, r5
 801b66e:	47b8      	blx	r7
 801b670:	3001      	adds	r0, #1
 801b672:	d10e      	bne.n	801b692 <_printf_float+0x42a>
 801b674:	e659      	b.n	801b32a <_printf_float+0xc2>
 801b676:	2301      	movs	r3, #1
 801b678:	4652      	mov	r2, sl
 801b67a:	4631      	mov	r1, r6
 801b67c:	4628      	mov	r0, r5
 801b67e:	47b8      	blx	r7
 801b680:	3001      	adds	r0, #1
 801b682:	f43f ae52 	beq.w	801b32a <_printf_float+0xc2>
 801b686:	f108 0801 	add.w	r8, r8, #1
 801b68a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b68c:	3b01      	subs	r3, #1
 801b68e:	4543      	cmp	r3, r8
 801b690:	dcf1      	bgt.n	801b676 <_printf_float+0x40e>
 801b692:	464b      	mov	r3, r9
 801b694:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b698:	e6dc      	b.n	801b454 <_printf_float+0x1ec>
 801b69a:	f04f 0800 	mov.w	r8, #0
 801b69e:	f104 0a1a 	add.w	sl, r4, #26
 801b6a2:	e7f2      	b.n	801b68a <_printf_float+0x422>
 801b6a4:	2301      	movs	r3, #1
 801b6a6:	4642      	mov	r2, r8
 801b6a8:	e7df      	b.n	801b66a <_printf_float+0x402>
 801b6aa:	2301      	movs	r3, #1
 801b6ac:	464a      	mov	r2, r9
 801b6ae:	4631      	mov	r1, r6
 801b6b0:	4628      	mov	r0, r5
 801b6b2:	47b8      	blx	r7
 801b6b4:	3001      	adds	r0, #1
 801b6b6:	f43f ae38 	beq.w	801b32a <_printf_float+0xc2>
 801b6ba:	f108 0801 	add.w	r8, r8, #1
 801b6be:	68e3      	ldr	r3, [r4, #12]
 801b6c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b6c2:	1a5b      	subs	r3, r3, r1
 801b6c4:	4543      	cmp	r3, r8
 801b6c6:	dcf0      	bgt.n	801b6aa <_printf_float+0x442>
 801b6c8:	e6fa      	b.n	801b4c0 <_printf_float+0x258>
 801b6ca:	f04f 0800 	mov.w	r8, #0
 801b6ce:	f104 0919 	add.w	r9, r4, #25
 801b6d2:	e7f4      	b.n	801b6be <_printf_float+0x456>

0801b6d4 <_printf_common>:
 801b6d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b6d8:	4616      	mov	r6, r2
 801b6da:	4699      	mov	r9, r3
 801b6dc:	688a      	ldr	r2, [r1, #8]
 801b6de:	690b      	ldr	r3, [r1, #16]
 801b6e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b6e4:	4293      	cmp	r3, r2
 801b6e6:	bfb8      	it	lt
 801b6e8:	4613      	movlt	r3, r2
 801b6ea:	6033      	str	r3, [r6, #0]
 801b6ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b6f0:	4607      	mov	r7, r0
 801b6f2:	460c      	mov	r4, r1
 801b6f4:	b10a      	cbz	r2, 801b6fa <_printf_common+0x26>
 801b6f6:	3301      	adds	r3, #1
 801b6f8:	6033      	str	r3, [r6, #0]
 801b6fa:	6823      	ldr	r3, [r4, #0]
 801b6fc:	0699      	lsls	r1, r3, #26
 801b6fe:	bf42      	ittt	mi
 801b700:	6833      	ldrmi	r3, [r6, #0]
 801b702:	3302      	addmi	r3, #2
 801b704:	6033      	strmi	r3, [r6, #0]
 801b706:	6825      	ldr	r5, [r4, #0]
 801b708:	f015 0506 	ands.w	r5, r5, #6
 801b70c:	d106      	bne.n	801b71c <_printf_common+0x48>
 801b70e:	f104 0a19 	add.w	sl, r4, #25
 801b712:	68e3      	ldr	r3, [r4, #12]
 801b714:	6832      	ldr	r2, [r6, #0]
 801b716:	1a9b      	subs	r3, r3, r2
 801b718:	42ab      	cmp	r3, r5
 801b71a:	dc26      	bgt.n	801b76a <_printf_common+0x96>
 801b71c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b720:	1e13      	subs	r3, r2, #0
 801b722:	6822      	ldr	r2, [r4, #0]
 801b724:	bf18      	it	ne
 801b726:	2301      	movne	r3, #1
 801b728:	0692      	lsls	r2, r2, #26
 801b72a:	d42b      	bmi.n	801b784 <_printf_common+0xb0>
 801b72c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b730:	4649      	mov	r1, r9
 801b732:	4638      	mov	r0, r7
 801b734:	47c0      	blx	r8
 801b736:	3001      	adds	r0, #1
 801b738:	d01e      	beq.n	801b778 <_printf_common+0xa4>
 801b73a:	6823      	ldr	r3, [r4, #0]
 801b73c:	68e5      	ldr	r5, [r4, #12]
 801b73e:	6832      	ldr	r2, [r6, #0]
 801b740:	f003 0306 	and.w	r3, r3, #6
 801b744:	2b04      	cmp	r3, #4
 801b746:	bf08      	it	eq
 801b748:	1aad      	subeq	r5, r5, r2
 801b74a:	68a3      	ldr	r3, [r4, #8]
 801b74c:	6922      	ldr	r2, [r4, #16]
 801b74e:	bf0c      	ite	eq
 801b750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b754:	2500      	movne	r5, #0
 801b756:	4293      	cmp	r3, r2
 801b758:	bfc4      	itt	gt
 801b75a:	1a9b      	subgt	r3, r3, r2
 801b75c:	18ed      	addgt	r5, r5, r3
 801b75e:	2600      	movs	r6, #0
 801b760:	341a      	adds	r4, #26
 801b762:	42b5      	cmp	r5, r6
 801b764:	d11a      	bne.n	801b79c <_printf_common+0xc8>
 801b766:	2000      	movs	r0, #0
 801b768:	e008      	b.n	801b77c <_printf_common+0xa8>
 801b76a:	2301      	movs	r3, #1
 801b76c:	4652      	mov	r2, sl
 801b76e:	4649      	mov	r1, r9
 801b770:	4638      	mov	r0, r7
 801b772:	47c0      	blx	r8
 801b774:	3001      	adds	r0, #1
 801b776:	d103      	bne.n	801b780 <_printf_common+0xac>
 801b778:	f04f 30ff 	mov.w	r0, #4294967295
 801b77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b780:	3501      	adds	r5, #1
 801b782:	e7c6      	b.n	801b712 <_printf_common+0x3e>
 801b784:	18e1      	adds	r1, r4, r3
 801b786:	1c5a      	adds	r2, r3, #1
 801b788:	2030      	movs	r0, #48	; 0x30
 801b78a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b78e:	4422      	add	r2, r4
 801b790:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b794:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b798:	3302      	adds	r3, #2
 801b79a:	e7c7      	b.n	801b72c <_printf_common+0x58>
 801b79c:	2301      	movs	r3, #1
 801b79e:	4622      	mov	r2, r4
 801b7a0:	4649      	mov	r1, r9
 801b7a2:	4638      	mov	r0, r7
 801b7a4:	47c0      	blx	r8
 801b7a6:	3001      	adds	r0, #1
 801b7a8:	d0e6      	beq.n	801b778 <_printf_common+0xa4>
 801b7aa:	3601      	adds	r6, #1
 801b7ac:	e7d9      	b.n	801b762 <_printf_common+0x8e>
	...

0801b7b0 <_printf_i>:
 801b7b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b7b4:	460c      	mov	r4, r1
 801b7b6:	4691      	mov	r9, r2
 801b7b8:	7e27      	ldrb	r7, [r4, #24]
 801b7ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b7bc:	2f78      	cmp	r7, #120	; 0x78
 801b7be:	4680      	mov	r8, r0
 801b7c0:	469a      	mov	sl, r3
 801b7c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b7c6:	d807      	bhi.n	801b7d8 <_printf_i+0x28>
 801b7c8:	2f62      	cmp	r7, #98	; 0x62
 801b7ca:	d80a      	bhi.n	801b7e2 <_printf_i+0x32>
 801b7cc:	2f00      	cmp	r7, #0
 801b7ce:	f000 80d8 	beq.w	801b982 <_printf_i+0x1d2>
 801b7d2:	2f58      	cmp	r7, #88	; 0x58
 801b7d4:	f000 80a3 	beq.w	801b91e <_printf_i+0x16e>
 801b7d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b7dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b7e0:	e03a      	b.n	801b858 <_printf_i+0xa8>
 801b7e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b7e6:	2b15      	cmp	r3, #21
 801b7e8:	d8f6      	bhi.n	801b7d8 <_printf_i+0x28>
 801b7ea:	a001      	add	r0, pc, #4	; (adr r0, 801b7f0 <_printf_i+0x40>)
 801b7ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801b7f0:	0801b849 	.word	0x0801b849
 801b7f4:	0801b85d 	.word	0x0801b85d
 801b7f8:	0801b7d9 	.word	0x0801b7d9
 801b7fc:	0801b7d9 	.word	0x0801b7d9
 801b800:	0801b7d9 	.word	0x0801b7d9
 801b804:	0801b7d9 	.word	0x0801b7d9
 801b808:	0801b85d 	.word	0x0801b85d
 801b80c:	0801b7d9 	.word	0x0801b7d9
 801b810:	0801b7d9 	.word	0x0801b7d9
 801b814:	0801b7d9 	.word	0x0801b7d9
 801b818:	0801b7d9 	.word	0x0801b7d9
 801b81c:	0801b969 	.word	0x0801b969
 801b820:	0801b88d 	.word	0x0801b88d
 801b824:	0801b94b 	.word	0x0801b94b
 801b828:	0801b7d9 	.word	0x0801b7d9
 801b82c:	0801b7d9 	.word	0x0801b7d9
 801b830:	0801b98b 	.word	0x0801b98b
 801b834:	0801b7d9 	.word	0x0801b7d9
 801b838:	0801b88d 	.word	0x0801b88d
 801b83c:	0801b7d9 	.word	0x0801b7d9
 801b840:	0801b7d9 	.word	0x0801b7d9
 801b844:	0801b953 	.word	0x0801b953
 801b848:	680b      	ldr	r3, [r1, #0]
 801b84a:	1d1a      	adds	r2, r3, #4
 801b84c:	681b      	ldr	r3, [r3, #0]
 801b84e:	600a      	str	r2, [r1, #0]
 801b850:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b858:	2301      	movs	r3, #1
 801b85a:	e0a3      	b.n	801b9a4 <_printf_i+0x1f4>
 801b85c:	6825      	ldr	r5, [r4, #0]
 801b85e:	6808      	ldr	r0, [r1, #0]
 801b860:	062e      	lsls	r6, r5, #24
 801b862:	f100 0304 	add.w	r3, r0, #4
 801b866:	d50a      	bpl.n	801b87e <_printf_i+0xce>
 801b868:	6805      	ldr	r5, [r0, #0]
 801b86a:	600b      	str	r3, [r1, #0]
 801b86c:	2d00      	cmp	r5, #0
 801b86e:	da03      	bge.n	801b878 <_printf_i+0xc8>
 801b870:	232d      	movs	r3, #45	; 0x2d
 801b872:	426d      	negs	r5, r5
 801b874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b878:	485e      	ldr	r0, [pc, #376]	; (801b9f4 <_printf_i+0x244>)
 801b87a:	230a      	movs	r3, #10
 801b87c:	e019      	b.n	801b8b2 <_printf_i+0x102>
 801b87e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801b882:	6805      	ldr	r5, [r0, #0]
 801b884:	600b      	str	r3, [r1, #0]
 801b886:	bf18      	it	ne
 801b888:	b22d      	sxthne	r5, r5
 801b88a:	e7ef      	b.n	801b86c <_printf_i+0xbc>
 801b88c:	680b      	ldr	r3, [r1, #0]
 801b88e:	6825      	ldr	r5, [r4, #0]
 801b890:	1d18      	adds	r0, r3, #4
 801b892:	6008      	str	r0, [r1, #0]
 801b894:	0628      	lsls	r0, r5, #24
 801b896:	d501      	bpl.n	801b89c <_printf_i+0xec>
 801b898:	681d      	ldr	r5, [r3, #0]
 801b89a:	e002      	b.n	801b8a2 <_printf_i+0xf2>
 801b89c:	0669      	lsls	r1, r5, #25
 801b89e:	d5fb      	bpl.n	801b898 <_printf_i+0xe8>
 801b8a0:	881d      	ldrh	r5, [r3, #0]
 801b8a2:	4854      	ldr	r0, [pc, #336]	; (801b9f4 <_printf_i+0x244>)
 801b8a4:	2f6f      	cmp	r7, #111	; 0x6f
 801b8a6:	bf0c      	ite	eq
 801b8a8:	2308      	moveq	r3, #8
 801b8aa:	230a      	movne	r3, #10
 801b8ac:	2100      	movs	r1, #0
 801b8ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b8b2:	6866      	ldr	r6, [r4, #4]
 801b8b4:	60a6      	str	r6, [r4, #8]
 801b8b6:	2e00      	cmp	r6, #0
 801b8b8:	bfa2      	ittt	ge
 801b8ba:	6821      	ldrge	r1, [r4, #0]
 801b8bc:	f021 0104 	bicge.w	r1, r1, #4
 801b8c0:	6021      	strge	r1, [r4, #0]
 801b8c2:	b90d      	cbnz	r5, 801b8c8 <_printf_i+0x118>
 801b8c4:	2e00      	cmp	r6, #0
 801b8c6:	d04d      	beq.n	801b964 <_printf_i+0x1b4>
 801b8c8:	4616      	mov	r6, r2
 801b8ca:	fbb5 f1f3 	udiv	r1, r5, r3
 801b8ce:	fb03 5711 	mls	r7, r3, r1, r5
 801b8d2:	5dc7      	ldrb	r7, [r0, r7]
 801b8d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b8d8:	462f      	mov	r7, r5
 801b8da:	42bb      	cmp	r3, r7
 801b8dc:	460d      	mov	r5, r1
 801b8de:	d9f4      	bls.n	801b8ca <_printf_i+0x11a>
 801b8e0:	2b08      	cmp	r3, #8
 801b8e2:	d10b      	bne.n	801b8fc <_printf_i+0x14c>
 801b8e4:	6823      	ldr	r3, [r4, #0]
 801b8e6:	07df      	lsls	r7, r3, #31
 801b8e8:	d508      	bpl.n	801b8fc <_printf_i+0x14c>
 801b8ea:	6923      	ldr	r3, [r4, #16]
 801b8ec:	6861      	ldr	r1, [r4, #4]
 801b8ee:	4299      	cmp	r1, r3
 801b8f0:	bfde      	ittt	le
 801b8f2:	2330      	movle	r3, #48	; 0x30
 801b8f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b8f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b8fc:	1b92      	subs	r2, r2, r6
 801b8fe:	6122      	str	r2, [r4, #16]
 801b900:	f8cd a000 	str.w	sl, [sp]
 801b904:	464b      	mov	r3, r9
 801b906:	aa03      	add	r2, sp, #12
 801b908:	4621      	mov	r1, r4
 801b90a:	4640      	mov	r0, r8
 801b90c:	f7ff fee2 	bl	801b6d4 <_printf_common>
 801b910:	3001      	adds	r0, #1
 801b912:	d14c      	bne.n	801b9ae <_printf_i+0x1fe>
 801b914:	f04f 30ff 	mov.w	r0, #4294967295
 801b918:	b004      	add	sp, #16
 801b91a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b91e:	4835      	ldr	r0, [pc, #212]	; (801b9f4 <_printf_i+0x244>)
 801b920:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b924:	6823      	ldr	r3, [r4, #0]
 801b926:	680e      	ldr	r6, [r1, #0]
 801b928:	061f      	lsls	r7, r3, #24
 801b92a:	f856 5b04 	ldr.w	r5, [r6], #4
 801b92e:	600e      	str	r6, [r1, #0]
 801b930:	d514      	bpl.n	801b95c <_printf_i+0x1ac>
 801b932:	07d9      	lsls	r1, r3, #31
 801b934:	bf44      	itt	mi
 801b936:	f043 0320 	orrmi.w	r3, r3, #32
 801b93a:	6023      	strmi	r3, [r4, #0]
 801b93c:	b91d      	cbnz	r5, 801b946 <_printf_i+0x196>
 801b93e:	6823      	ldr	r3, [r4, #0]
 801b940:	f023 0320 	bic.w	r3, r3, #32
 801b944:	6023      	str	r3, [r4, #0]
 801b946:	2310      	movs	r3, #16
 801b948:	e7b0      	b.n	801b8ac <_printf_i+0xfc>
 801b94a:	6823      	ldr	r3, [r4, #0]
 801b94c:	f043 0320 	orr.w	r3, r3, #32
 801b950:	6023      	str	r3, [r4, #0]
 801b952:	2378      	movs	r3, #120	; 0x78
 801b954:	4828      	ldr	r0, [pc, #160]	; (801b9f8 <_printf_i+0x248>)
 801b956:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b95a:	e7e3      	b.n	801b924 <_printf_i+0x174>
 801b95c:	065e      	lsls	r6, r3, #25
 801b95e:	bf48      	it	mi
 801b960:	b2ad      	uxthmi	r5, r5
 801b962:	e7e6      	b.n	801b932 <_printf_i+0x182>
 801b964:	4616      	mov	r6, r2
 801b966:	e7bb      	b.n	801b8e0 <_printf_i+0x130>
 801b968:	680b      	ldr	r3, [r1, #0]
 801b96a:	6826      	ldr	r6, [r4, #0]
 801b96c:	6960      	ldr	r0, [r4, #20]
 801b96e:	1d1d      	adds	r5, r3, #4
 801b970:	600d      	str	r5, [r1, #0]
 801b972:	0635      	lsls	r5, r6, #24
 801b974:	681b      	ldr	r3, [r3, #0]
 801b976:	d501      	bpl.n	801b97c <_printf_i+0x1cc>
 801b978:	6018      	str	r0, [r3, #0]
 801b97a:	e002      	b.n	801b982 <_printf_i+0x1d2>
 801b97c:	0671      	lsls	r1, r6, #25
 801b97e:	d5fb      	bpl.n	801b978 <_printf_i+0x1c8>
 801b980:	8018      	strh	r0, [r3, #0]
 801b982:	2300      	movs	r3, #0
 801b984:	6123      	str	r3, [r4, #16]
 801b986:	4616      	mov	r6, r2
 801b988:	e7ba      	b.n	801b900 <_printf_i+0x150>
 801b98a:	680b      	ldr	r3, [r1, #0]
 801b98c:	1d1a      	adds	r2, r3, #4
 801b98e:	600a      	str	r2, [r1, #0]
 801b990:	681e      	ldr	r6, [r3, #0]
 801b992:	6862      	ldr	r2, [r4, #4]
 801b994:	2100      	movs	r1, #0
 801b996:	4630      	mov	r0, r6
 801b998:	f7e4 fc42 	bl	8000220 <memchr>
 801b99c:	b108      	cbz	r0, 801b9a2 <_printf_i+0x1f2>
 801b99e:	1b80      	subs	r0, r0, r6
 801b9a0:	6060      	str	r0, [r4, #4]
 801b9a2:	6863      	ldr	r3, [r4, #4]
 801b9a4:	6123      	str	r3, [r4, #16]
 801b9a6:	2300      	movs	r3, #0
 801b9a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b9ac:	e7a8      	b.n	801b900 <_printf_i+0x150>
 801b9ae:	6923      	ldr	r3, [r4, #16]
 801b9b0:	4632      	mov	r2, r6
 801b9b2:	4649      	mov	r1, r9
 801b9b4:	4640      	mov	r0, r8
 801b9b6:	47d0      	blx	sl
 801b9b8:	3001      	adds	r0, #1
 801b9ba:	d0ab      	beq.n	801b914 <_printf_i+0x164>
 801b9bc:	6823      	ldr	r3, [r4, #0]
 801b9be:	079b      	lsls	r3, r3, #30
 801b9c0:	d413      	bmi.n	801b9ea <_printf_i+0x23a>
 801b9c2:	68e0      	ldr	r0, [r4, #12]
 801b9c4:	9b03      	ldr	r3, [sp, #12]
 801b9c6:	4298      	cmp	r0, r3
 801b9c8:	bfb8      	it	lt
 801b9ca:	4618      	movlt	r0, r3
 801b9cc:	e7a4      	b.n	801b918 <_printf_i+0x168>
 801b9ce:	2301      	movs	r3, #1
 801b9d0:	4632      	mov	r2, r6
 801b9d2:	4649      	mov	r1, r9
 801b9d4:	4640      	mov	r0, r8
 801b9d6:	47d0      	blx	sl
 801b9d8:	3001      	adds	r0, #1
 801b9da:	d09b      	beq.n	801b914 <_printf_i+0x164>
 801b9dc:	3501      	adds	r5, #1
 801b9de:	68e3      	ldr	r3, [r4, #12]
 801b9e0:	9903      	ldr	r1, [sp, #12]
 801b9e2:	1a5b      	subs	r3, r3, r1
 801b9e4:	42ab      	cmp	r3, r5
 801b9e6:	dcf2      	bgt.n	801b9ce <_printf_i+0x21e>
 801b9e8:	e7eb      	b.n	801b9c2 <_printf_i+0x212>
 801b9ea:	2500      	movs	r5, #0
 801b9ec:	f104 0619 	add.w	r6, r4, #25
 801b9f0:	e7f5      	b.n	801b9de <_printf_i+0x22e>
 801b9f2:	bf00      	nop
 801b9f4:	08022e38 	.word	0x08022e38
 801b9f8:	08022e49 	.word	0x08022e49

0801b9fc <_scanf_float>:
 801b9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba00:	b087      	sub	sp, #28
 801ba02:	4617      	mov	r7, r2
 801ba04:	9303      	str	r3, [sp, #12]
 801ba06:	688b      	ldr	r3, [r1, #8]
 801ba08:	1e5a      	subs	r2, r3, #1
 801ba0a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801ba0e:	bf83      	ittte	hi
 801ba10:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801ba14:	195b      	addhi	r3, r3, r5
 801ba16:	9302      	strhi	r3, [sp, #8]
 801ba18:	2300      	movls	r3, #0
 801ba1a:	bf86      	itte	hi
 801ba1c:	f240 135d 	movwhi	r3, #349	; 0x15d
 801ba20:	608b      	strhi	r3, [r1, #8]
 801ba22:	9302      	strls	r3, [sp, #8]
 801ba24:	680b      	ldr	r3, [r1, #0]
 801ba26:	468b      	mov	fp, r1
 801ba28:	2500      	movs	r5, #0
 801ba2a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801ba2e:	f84b 3b1c 	str.w	r3, [fp], #28
 801ba32:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801ba36:	4680      	mov	r8, r0
 801ba38:	460c      	mov	r4, r1
 801ba3a:	465e      	mov	r6, fp
 801ba3c:	46aa      	mov	sl, r5
 801ba3e:	46a9      	mov	r9, r5
 801ba40:	9501      	str	r5, [sp, #4]
 801ba42:	68a2      	ldr	r2, [r4, #8]
 801ba44:	b152      	cbz	r2, 801ba5c <_scanf_float+0x60>
 801ba46:	683b      	ldr	r3, [r7, #0]
 801ba48:	781b      	ldrb	r3, [r3, #0]
 801ba4a:	2b4e      	cmp	r3, #78	; 0x4e
 801ba4c:	d864      	bhi.n	801bb18 <_scanf_float+0x11c>
 801ba4e:	2b40      	cmp	r3, #64	; 0x40
 801ba50:	d83c      	bhi.n	801bacc <_scanf_float+0xd0>
 801ba52:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801ba56:	b2c8      	uxtb	r0, r1
 801ba58:	280e      	cmp	r0, #14
 801ba5a:	d93a      	bls.n	801bad2 <_scanf_float+0xd6>
 801ba5c:	f1b9 0f00 	cmp.w	r9, #0
 801ba60:	d003      	beq.n	801ba6a <_scanf_float+0x6e>
 801ba62:	6823      	ldr	r3, [r4, #0]
 801ba64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ba68:	6023      	str	r3, [r4, #0]
 801ba6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ba6e:	f1ba 0f01 	cmp.w	sl, #1
 801ba72:	f200 8113 	bhi.w	801bc9c <_scanf_float+0x2a0>
 801ba76:	455e      	cmp	r6, fp
 801ba78:	f200 8105 	bhi.w	801bc86 <_scanf_float+0x28a>
 801ba7c:	2501      	movs	r5, #1
 801ba7e:	4628      	mov	r0, r5
 801ba80:	b007      	add	sp, #28
 801ba82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba86:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801ba8a:	2a0d      	cmp	r2, #13
 801ba8c:	d8e6      	bhi.n	801ba5c <_scanf_float+0x60>
 801ba8e:	a101      	add	r1, pc, #4	; (adr r1, 801ba94 <_scanf_float+0x98>)
 801ba90:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ba94:	0801bbd3 	.word	0x0801bbd3
 801ba98:	0801ba5d 	.word	0x0801ba5d
 801ba9c:	0801ba5d 	.word	0x0801ba5d
 801baa0:	0801ba5d 	.word	0x0801ba5d
 801baa4:	0801bc33 	.word	0x0801bc33
 801baa8:	0801bc0b 	.word	0x0801bc0b
 801baac:	0801ba5d 	.word	0x0801ba5d
 801bab0:	0801ba5d 	.word	0x0801ba5d
 801bab4:	0801bbe1 	.word	0x0801bbe1
 801bab8:	0801ba5d 	.word	0x0801ba5d
 801babc:	0801ba5d 	.word	0x0801ba5d
 801bac0:	0801ba5d 	.word	0x0801ba5d
 801bac4:	0801ba5d 	.word	0x0801ba5d
 801bac8:	0801bb99 	.word	0x0801bb99
 801bacc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801bad0:	e7db      	b.n	801ba8a <_scanf_float+0x8e>
 801bad2:	290e      	cmp	r1, #14
 801bad4:	d8c2      	bhi.n	801ba5c <_scanf_float+0x60>
 801bad6:	a001      	add	r0, pc, #4	; (adr r0, 801badc <_scanf_float+0xe0>)
 801bad8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801badc:	0801bb8b 	.word	0x0801bb8b
 801bae0:	0801ba5d 	.word	0x0801ba5d
 801bae4:	0801bb8b 	.word	0x0801bb8b
 801bae8:	0801bc1f 	.word	0x0801bc1f
 801baec:	0801ba5d 	.word	0x0801ba5d
 801baf0:	0801bb39 	.word	0x0801bb39
 801baf4:	0801bb75 	.word	0x0801bb75
 801baf8:	0801bb75 	.word	0x0801bb75
 801bafc:	0801bb75 	.word	0x0801bb75
 801bb00:	0801bb75 	.word	0x0801bb75
 801bb04:	0801bb75 	.word	0x0801bb75
 801bb08:	0801bb75 	.word	0x0801bb75
 801bb0c:	0801bb75 	.word	0x0801bb75
 801bb10:	0801bb75 	.word	0x0801bb75
 801bb14:	0801bb75 	.word	0x0801bb75
 801bb18:	2b6e      	cmp	r3, #110	; 0x6e
 801bb1a:	d809      	bhi.n	801bb30 <_scanf_float+0x134>
 801bb1c:	2b60      	cmp	r3, #96	; 0x60
 801bb1e:	d8b2      	bhi.n	801ba86 <_scanf_float+0x8a>
 801bb20:	2b54      	cmp	r3, #84	; 0x54
 801bb22:	d077      	beq.n	801bc14 <_scanf_float+0x218>
 801bb24:	2b59      	cmp	r3, #89	; 0x59
 801bb26:	d199      	bne.n	801ba5c <_scanf_float+0x60>
 801bb28:	2d07      	cmp	r5, #7
 801bb2a:	d197      	bne.n	801ba5c <_scanf_float+0x60>
 801bb2c:	2508      	movs	r5, #8
 801bb2e:	e029      	b.n	801bb84 <_scanf_float+0x188>
 801bb30:	2b74      	cmp	r3, #116	; 0x74
 801bb32:	d06f      	beq.n	801bc14 <_scanf_float+0x218>
 801bb34:	2b79      	cmp	r3, #121	; 0x79
 801bb36:	e7f6      	b.n	801bb26 <_scanf_float+0x12a>
 801bb38:	6821      	ldr	r1, [r4, #0]
 801bb3a:	05c8      	lsls	r0, r1, #23
 801bb3c:	d51a      	bpl.n	801bb74 <_scanf_float+0x178>
 801bb3e:	9b02      	ldr	r3, [sp, #8]
 801bb40:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801bb44:	6021      	str	r1, [r4, #0]
 801bb46:	f109 0901 	add.w	r9, r9, #1
 801bb4a:	b11b      	cbz	r3, 801bb54 <_scanf_float+0x158>
 801bb4c:	3b01      	subs	r3, #1
 801bb4e:	3201      	adds	r2, #1
 801bb50:	9302      	str	r3, [sp, #8]
 801bb52:	60a2      	str	r2, [r4, #8]
 801bb54:	68a3      	ldr	r3, [r4, #8]
 801bb56:	3b01      	subs	r3, #1
 801bb58:	60a3      	str	r3, [r4, #8]
 801bb5a:	6923      	ldr	r3, [r4, #16]
 801bb5c:	3301      	adds	r3, #1
 801bb5e:	6123      	str	r3, [r4, #16]
 801bb60:	687b      	ldr	r3, [r7, #4]
 801bb62:	3b01      	subs	r3, #1
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	607b      	str	r3, [r7, #4]
 801bb68:	f340 8084 	ble.w	801bc74 <_scanf_float+0x278>
 801bb6c:	683b      	ldr	r3, [r7, #0]
 801bb6e:	3301      	adds	r3, #1
 801bb70:	603b      	str	r3, [r7, #0]
 801bb72:	e766      	b.n	801ba42 <_scanf_float+0x46>
 801bb74:	eb1a 0f05 	cmn.w	sl, r5
 801bb78:	f47f af70 	bne.w	801ba5c <_scanf_float+0x60>
 801bb7c:	6822      	ldr	r2, [r4, #0]
 801bb7e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801bb82:	6022      	str	r2, [r4, #0]
 801bb84:	f806 3b01 	strb.w	r3, [r6], #1
 801bb88:	e7e4      	b.n	801bb54 <_scanf_float+0x158>
 801bb8a:	6822      	ldr	r2, [r4, #0]
 801bb8c:	0610      	lsls	r0, r2, #24
 801bb8e:	f57f af65 	bpl.w	801ba5c <_scanf_float+0x60>
 801bb92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801bb96:	e7f4      	b.n	801bb82 <_scanf_float+0x186>
 801bb98:	f1ba 0f00 	cmp.w	sl, #0
 801bb9c:	d10e      	bne.n	801bbbc <_scanf_float+0x1c0>
 801bb9e:	f1b9 0f00 	cmp.w	r9, #0
 801bba2:	d10e      	bne.n	801bbc2 <_scanf_float+0x1c6>
 801bba4:	6822      	ldr	r2, [r4, #0]
 801bba6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801bbaa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801bbae:	d108      	bne.n	801bbc2 <_scanf_float+0x1c6>
 801bbb0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801bbb4:	6022      	str	r2, [r4, #0]
 801bbb6:	f04f 0a01 	mov.w	sl, #1
 801bbba:	e7e3      	b.n	801bb84 <_scanf_float+0x188>
 801bbbc:	f1ba 0f02 	cmp.w	sl, #2
 801bbc0:	d055      	beq.n	801bc6e <_scanf_float+0x272>
 801bbc2:	2d01      	cmp	r5, #1
 801bbc4:	d002      	beq.n	801bbcc <_scanf_float+0x1d0>
 801bbc6:	2d04      	cmp	r5, #4
 801bbc8:	f47f af48 	bne.w	801ba5c <_scanf_float+0x60>
 801bbcc:	3501      	adds	r5, #1
 801bbce:	b2ed      	uxtb	r5, r5
 801bbd0:	e7d8      	b.n	801bb84 <_scanf_float+0x188>
 801bbd2:	f1ba 0f01 	cmp.w	sl, #1
 801bbd6:	f47f af41 	bne.w	801ba5c <_scanf_float+0x60>
 801bbda:	f04f 0a02 	mov.w	sl, #2
 801bbde:	e7d1      	b.n	801bb84 <_scanf_float+0x188>
 801bbe0:	b97d      	cbnz	r5, 801bc02 <_scanf_float+0x206>
 801bbe2:	f1b9 0f00 	cmp.w	r9, #0
 801bbe6:	f47f af3c 	bne.w	801ba62 <_scanf_float+0x66>
 801bbea:	6822      	ldr	r2, [r4, #0]
 801bbec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801bbf0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801bbf4:	f47f af39 	bne.w	801ba6a <_scanf_float+0x6e>
 801bbf8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801bbfc:	6022      	str	r2, [r4, #0]
 801bbfe:	2501      	movs	r5, #1
 801bc00:	e7c0      	b.n	801bb84 <_scanf_float+0x188>
 801bc02:	2d03      	cmp	r5, #3
 801bc04:	d0e2      	beq.n	801bbcc <_scanf_float+0x1d0>
 801bc06:	2d05      	cmp	r5, #5
 801bc08:	e7de      	b.n	801bbc8 <_scanf_float+0x1cc>
 801bc0a:	2d02      	cmp	r5, #2
 801bc0c:	f47f af26 	bne.w	801ba5c <_scanf_float+0x60>
 801bc10:	2503      	movs	r5, #3
 801bc12:	e7b7      	b.n	801bb84 <_scanf_float+0x188>
 801bc14:	2d06      	cmp	r5, #6
 801bc16:	f47f af21 	bne.w	801ba5c <_scanf_float+0x60>
 801bc1a:	2507      	movs	r5, #7
 801bc1c:	e7b2      	b.n	801bb84 <_scanf_float+0x188>
 801bc1e:	6822      	ldr	r2, [r4, #0]
 801bc20:	0591      	lsls	r1, r2, #22
 801bc22:	f57f af1b 	bpl.w	801ba5c <_scanf_float+0x60>
 801bc26:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801bc2a:	6022      	str	r2, [r4, #0]
 801bc2c:	f8cd 9004 	str.w	r9, [sp, #4]
 801bc30:	e7a8      	b.n	801bb84 <_scanf_float+0x188>
 801bc32:	6822      	ldr	r2, [r4, #0]
 801bc34:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801bc38:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801bc3c:	d006      	beq.n	801bc4c <_scanf_float+0x250>
 801bc3e:	0550      	lsls	r0, r2, #21
 801bc40:	f57f af0c 	bpl.w	801ba5c <_scanf_float+0x60>
 801bc44:	f1b9 0f00 	cmp.w	r9, #0
 801bc48:	f43f af0f 	beq.w	801ba6a <_scanf_float+0x6e>
 801bc4c:	0591      	lsls	r1, r2, #22
 801bc4e:	bf58      	it	pl
 801bc50:	9901      	ldrpl	r1, [sp, #4]
 801bc52:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801bc56:	bf58      	it	pl
 801bc58:	eba9 0101 	subpl.w	r1, r9, r1
 801bc5c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801bc60:	bf58      	it	pl
 801bc62:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801bc66:	6022      	str	r2, [r4, #0]
 801bc68:	f04f 0900 	mov.w	r9, #0
 801bc6c:	e78a      	b.n	801bb84 <_scanf_float+0x188>
 801bc6e:	f04f 0a03 	mov.w	sl, #3
 801bc72:	e787      	b.n	801bb84 <_scanf_float+0x188>
 801bc74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801bc78:	4639      	mov	r1, r7
 801bc7a:	4640      	mov	r0, r8
 801bc7c:	4798      	blx	r3
 801bc7e:	2800      	cmp	r0, #0
 801bc80:	f43f aedf 	beq.w	801ba42 <_scanf_float+0x46>
 801bc84:	e6ea      	b.n	801ba5c <_scanf_float+0x60>
 801bc86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bc8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bc8e:	463a      	mov	r2, r7
 801bc90:	4640      	mov	r0, r8
 801bc92:	4798      	blx	r3
 801bc94:	6923      	ldr	r3, [r4, #16]
 801bc96:	3b01      	subs	r3, #1
 801bc98:	6123      	str	r3, [r4, #16]
 801bc9a:	e6ec      	b.n	801ba76 <_scanf_float+0x7a>
 801bc9c:	1e6b      	subs	r3, r5, #1
 801bc9e:	2b06      	cmp	r3, #6
 801bca0:	d825      	bhi.n	801bcee <_scanf_float+0x2f2>
 801bca2:	2d02      	cmp	r5, #2
 801bca4:	d836      	bhi.n	801bd14 <_scanf_float+0x318>
 801bca6:	455e      	cmp	r6, fp
 801bca8:	f67f aee8 	bls.w	801ba7c <_scanf_float+0x80>
 801bcac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bcb0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bcb4:	463a      	mov	r2, r7
 801bcb6:	4640      	mov	r0, r8
 801bcb8:	4798      	blx	r3
 801bcba:	6923      	ldr	r3, [r4, #16]
 801bcbc:	3b01      	subs	r3, #1
 801bcbe:	6123      	str	r3, [r4, #16]
 801bcc0:	e7f1      	b.n	801bca6 <_scanf_float+0x2aa>
 801bcc2:	9802      	ldr	r0, [sp, #8]
 801bcc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bcc8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801bccc:	9002      	str	r0, [sp, #8]
 801bcce:	463a      	mov	r2, r7
 801bcd0:	4640      	mov	r0, r8
 801bcd2:	4798      	blx	r3
 801bcd4:	6923      	ldr	r3, [r4, #16]
 801bcd6:	3b01      	subs	r3, #1
 801bcd8:	6123      	str	r3, [r4, #16]
 801bcda:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bcde:	fa5f fa8a 	uxtb.w	sl, sl
 801bce2:	f1ba 0f02 	cmp.w	sl, #2
 801bce6:	d1ec      	bne.n	801bcc2 <_scanf_float+0x2c6>
 801bce8:	3d03      	subs	r5, #3
 801bcea:	b2ed      	uxtb	r5, r5
 801bcec:	1b76      	subs	r6, r6, r5
 801bcee:	6823      	ldr	r3, [r4, #0]
 801bcf0:	05da      	lsls	r2, r3, #23
 801bcf2:	d52f      	bpl.n	801bd54 <_scanf_float+0x358>
 801bcf4:	055b      	lsls	r3, r3, #21
 801bcf6:	d510      	bpl.n	801bd1a <_scanf_float+0x31e>
 801bcf8:	455e      	cmp	r6, fp
 801bcfa:	f67f aebf 	bls.w	801ba7c <_scanf_float+0x80>
 801bcfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bd02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bd06:	463a      	mov	r2, r7
 801bd08:	4640      	mov	r0, r8
 801bd0a:	4798      	blx	r3
 801bd0c:	6923      	ldr	r3, [r4, #16]
 801bd0e:	3b01      	subs	r3, #1
 801bd10:	6123      	str	r3, [r4, #16]
 801bd12:	e7f1      	b.n	801bcf8 <_scanf_float+0x2fc>
 801bd14:	46aa      	mov	sl, r5
 801bd16:	9602      	str	r6, [sp, #8]
 801bd18:	e7df      	b.n	801bcda <_scanf_float+0x2de>
 801bd1a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801bd1e:	6923      	ldr	r3, [r4, #16]
 801bd20:	2965      	cmp	r1, #101	; 0x65
 801bd22:	f103 33ff 	add.w	r3, r3, #4294967295
 801bd26:	f106 35ff 	add.w	r5, r6, #4294967295
 801bd2a:	6123      	str	r3, [r4, #16]
 801bd2c:	d00c      	beq.n	801bd48 <_scanf_float+0x34c>
 801bd2e:	2945      	cmp	r1, #69	; 0x45
 801bd30:	d00a      	beq.n	801bd48 <_scanf_float+0x34c>
 801bd32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bd36:	463a      	mov	r2, r7
 801bd38:	4640      	mov	r0, r8
 801bd3a:	4798      	blx	r3
 801bd3c:	6923      	ldr	r3, [r4, #16]
 801bd3e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801bd42:	3b01      	subs	r3, #1
 801bd44:	1eb5      	subs	r5, r6, #2
 801bd46:	6123      	str	r3, [r4, #16]
 801bd48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bd4c:	463a      	mov	r2, r7
 801bd4e:	4640      	mov	r0, r8
 801bd50:	4798      	blx	r3
 801bd52:	462e      	mov	r6, r5
 801bd54:	6825      	ldr	r5, [r4, #0]
 801bd56:	f015 0510 	ands.w	r5, r5, #16
 801bd5a:	d158      	bne.n	801be0e <_scanf_float+0x412>
 801bd5c:	7035      	strb	r5, [r6, #0]
 801bd5e:	6823      	ldr	r3, [r4, #0]
 801bd60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801bd64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bd68:	d11c      	bne.n	801bda4 <_scanf_float+0x3a8>
 801bd6a:	9b01      	ldr	r3, [sp, #4]
 801bd6c:	454b      	cmp	r3, r9
 801bd6e:	eba3 0209 	sub.w	r2, r3, r9
 801bd72:	d124      	bne.n	801bdbe <_scanf_float+0x3c2>
 801bd74:	2200      	movs	r2, #0
 801bd76:	4659      	mov	r1, fp
 801bd78:	4640      	mov	r0, r8
 801bd7a:	f001 f87f 	bl	801ce7c <_strtod_r>
 801bd7e:	9b03      	ldr	r3, [sp, #12]
 801bd80:	6821      	ldr	r1, [r4, #0]
 801bd82:	681b      	ldr	r3, [r3, #0]
 801bd84:	f011 0f02 	tst.w	r1, #2
 801bd88:	ec57 6b10 	vmov	r6, r7, d0
 801bd8c:	f103 0204 	add.w	r2, r3, #4
 801bd90:	d020      	beq.n	801bdd4 <_scanf_float+0x3d8>
 801bd92:	9903      	ldr	r1, [sp, #12]
 801bd94:	600a      	str	r2, [r1, #0]
 801bd96:	681b      	ldr	r3, [r3, #0]
 801bd98:	e9c3 6700 	strd	r6, r7, [r3]
 801bd9c:	68e3      	ldr	r3, [r4, #12]
 801bd9e:	3301      	adds	r3, #1
 801bda0:	60e3      	str	r3, [r4, #12]
 801bda2:	e66c      	b.n	801ba7e <_scanf_float+0x82>
 801bda4:	9b04      	ldr	r3, [sp, #16]
 801bda6:	2b00      	cmp	r3, #0
 801bda8:	d0e4      	beq.n	801bd74 <_scanf_float+0x378>
 801bdaa:	9905      	ldr	r1, [sp, #20]
 801bdac:	230a      	movs	r3, #10
 801bdae:	462a      	mov	r2, r5
 801bdb0:	3101      	adds	r1, #1
 801bdb2:	4640      	mov	r0, r8
 801bdb4:	f001 f948 	bl	801d048 <_strtol_r>
 801bdb8:	9b04      	ldr	r3, [sp, #16]
 801bdba:	9e05      	ldr	r6, [sp, #20]
 801bdbc:	1ac2      	subs	r2, r0, r3
 801bdbe:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801bdc2:	429e      	cmp	r6, r3
 801bdc4:	bf28      	it	cs
 801bdc6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801bdca:	4912      	ldr	r1, [pc, #72]	; (801be14 <_scanf_float+0x418>)
 801bdcc:	4630      	mov	r0, r6
 801bdce:	f000 f977 	bl	801c0c0 <siprintf>
 801bdd2:	e7cf      	b.n	801bd74 <_scanf_float+0x378>
 801bdd4:	f011 0f04 	tst.w	r1, #4
 801bdd8:	9903      	ldr	r1, [sp, #12]
 801bdda:	600a      	str	r2, [r1, #0]
 801bddc:	d1db      	bne.n	801bd96 <_scanf_float+0x39a>
 801bdde:	f8d3 8000 	ldr.w	r8, [r3]
 801bde2:	ee10 2a10 	vmov	r2, s0
 801bde6:	ee10 0a10 	vmov	r0, s0
 801bdea:	463b      	mov	r3, r7
 801bdec:	4639      	mov	r1, r7
 801bdee:	f7e4 febd 	bl	8000b6c <__aeabi_dcmpun>
 801bdf2:	b128      	cbz	r0, 801be00 <_scanf_float+0x404>
 801bdf4:	4808      	ldr	r0, [pc, #32]	; (801be18 <_scanf_float+0x41c>)
 801bdf6:	f000 f919 	bl	801c02c <nanf>
 801bdfa:	ed88 0a00 	vstr	s0, [r8]
 801bdfe:	e7cd      	b.n	801bd9c <_scanf_float+0x3a0>
 801be00:	4630      	mov	r0, r6
 801be02:	4639      	mov	r1, r7
 801be04:	f7e4 ff10 	bl	8000c28 <__aeabi_d2f>
 801be08:	f8c8 0000 	str.w	r0, [r8]
 801be0c:	e7c6      	b.n	801bd9c <_scanf_float+0x3a0>
 801be0e:	2500      	movs	r5, #0
 801be10:	e635      	b.n	801ba7e <_scanf_float+0x82>
 801be12:	bf00      	nop
 801be14:	08022e5a 	.word	0x08022e5a
 801be18:	08022f88 	.word	0x08022f88

0801be1c <iprintf>:
 801be1c:	b40f      	push	{r0, r1, r2, r3}
 801be1e:	4b0a      	ldr	r3, [pc, #40]	; (801be48 <iprintf+0x2c>)
 801be20:	b513      	push	{r0, r1, r4, lr}
 801be22:	681c      	ldr	r4, [r3, #0]
 801be24:	b124      	cbz	r4, 801be30 <iprintf+0x14>
 801be26:	69a3      	ldr	r3, [r4, #24]
 801be28:	b913      	cbnz	r3, 801be30 <iprintf+0x14>
 801be2a:	4620      	mov	r0, r4
 801be2c:	f7fe fc30 	bl	801a690 <__sinit>
 801be30:	ab05      	add	r3, sp, #20
 801be32:	9a04      	ldr	r2, [sp, #16]
 801be34:	68a1      	ldr	r1, [r4, #8]
 801be36:	9301      	str	r3, [sp, #4]
 801be38:	4620      	mov	r0, r4
 801be3a:	f004 f9af 	bl	802019c <_vfiprintf_r>
 801be3e:	b002      	add	sp, #8
 801be40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be44:	b004      	add	sp, #16
 801be46:	4770      	bx	lr
 801be48:	200000f8 	.word	0x200000f8

0801be4c <_puts_r>:
 801be4c:	b570      	push	{r4, r5, r6, lr}
 801be4e:	460e      	mov	r6, r1
 801be50:	4605      	mov	r5, r0
 801be52:	b118      	cbz	r0, 801be5c <_puts_r+0x10>
 801be54:	6983      	ldr	r3, [r0, #24]
 801be56:	b90b      	cbnz	r3, 801be5c <_puts_r+0x10>
 801be58:	f7fe fc1a 	bl	801a690 <__sinit>
 801be5c:	69ab      	ldr	r3, [r5, #24]
 801be5e:	68ac      	ldr	r4, [r5, #8]
 801be60:	b913      	cbnz	r3, 801be68 <_puts_r+0x1c>
 801be62:	4628      	mov	r0, r5
 801be64:	f7fe fc14 	bl	801a690 <__sinit>
 801be68:	4b2c      	ldr	r3, [pc, #176]	; (801bf1c <_puts_r+0xd0>)
 801be6a:	429c      	cmp	r4, r3
 801be6c:	d120      	bne.n	801beb0 <_puts_r+0x64>
 801be6e:	686c      	ldr	r4, [r5, #4]
 801be70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801be72:	07db      	lsls	r3, r3, #31
 801be74:	d405      	bmi.n	801be82 <_puts_r+0x36>
 801be76:	89a3      	ldrh	r3, [r4, #12]
 801be78:	0598      	lsls	r0, r3, #22
 801be7a:	d402      	bmi.n	801be82 <_puts_r+0x36>
 801be7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801be7e:	f7fe fde7 	bl	801aa50 <__retarget_lock_acquire_recursive>
 801be82:	89a3      	ldrh	r3, [r4, #12]
 801be84:	0719      	lsls	r1, r3, #28
 801be86:	d51d      	bpl.n	801bec4 <_puts_r+0x78>
 801be88:	6923      	ldr	r3, [r4, #16]
 801be8a:	b1db      	cbz	r3, 801bec4 <_puts_r+0x78>
 801be8c:	3e01      	subs	r6, #1
 801be8e:	68a3      	ldr	r3, [r4, #8]
 801be90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801be94:	3b01      	subs	r3, #1
 801be96:	60a3      	str	r3, [r4, #8]
 801be98:	bb39      	cbnz	r1, 801beea <_puts_r+0x9e>
 801be9a:	2b00      	cmp	r3, #0
 801be9c:	da38      	bge.n	801bf10 <_puts_r+0xc4>
 801be9e:	4622      	mov	r2, r4
 801bea0:	210a      	movs	r1, #10
 801bea2:	4628      	mov	r0, r5
 801bea4:	f001 fbd4 	bl	801d650 <__swbuf_r>
 801bea8:	3001      	adds	r0, #1
 801beaa:	d011      	beq.n	801bed0 <_puts_r+0x84>
 801beac:	250a      	movs	r5, #10
 801beae:	e011      	b.n	801bed4 <_puts_r+0x88>
 801beb0:	4b1b      	ldr	r3, [pc, #108]	; (801bf20 <_puts_r+0xd4>)
 801beb2:	429c      	cmp	r4, r3
 801beb4:	d101      	bne.n	801beba <_puts_r+0x6e>
 801beb6:	68ac      	ldr	r4, [r5, #8]
 801beb8:	e7da      	b.n	801be70 <_puts_r+0x24>
 801beba:	4b1a      	ldr	r3, [pc, #104]	; (801bf24 <_puts_r+0xd8>)
 801bebc:	429c      	cmp	r4, r3
 801bebe:	bf08      	it	eq
 801bec0:	68ec      	ldreq	r4, [r5, #12]
 801bec2:	e7d5      	b.n	801be70 <_puts_r+0x24>
 801bec4:	4621      	mov	r1, r4
 801bec6:	4628      	mov	r0, r5
 801bec8:	f001 fc26 	bl	801d718 <__swsetup_r>
 801becc:	2800      	cmp	r0, #0
 801bece:	d0dd      	beq.n	801be8c <_puts_r+0x40>
 801bed0:	f04f 35ff 	mov.w	r5, #4294967295
 801bed4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bed6:	07da      	lsls	r2, r3, #31
 801bed8:	d405      	bmi.n	801bee6 <_puts_r+0x9a>
 801beda:	89a3      	ldrh	r3, [r4, #12]
 801bedc:	059b      	lsls	r3, r3, #22
 801bede:	d402      	bmi.n	801bee6 <_puts_r+0x9a>
 801bee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bee2:	f7fe fdb7 	bl	801aa54 <__retarget_lock_release_recursive>
 801bee6:	4628      	mov	r0, r5
 801bee8:	bd70      	pop	{r4, r5, r6, pc}
 801beea:	2b00      	cmp	r3, #0
 801beec:	da04      	bge.n	801bef8 <_puts_r+0xac>
 801beee:	69a2      	ldr	r2, [r4, #24]
 801bef0:	429a      	cmp	r2, r3
 801bef2:	dc06      	bgt.n	801bf02 <_puts_r+0xb6>
 801bef4:	290a      	cmp	r1, #10
 801bef6:	d004      	beq.n	801bf02 <_puts_r+0xb6>
 801bef8:	6823      	ldr	r3, [r4, #0]
 801befa:	1c5a      	adds	r2, r3, #1
 801befc:	6022      	str	r2, [r4, #0]
 801befe:	7019      	strb	r1, [r3, #0]
 801bf00:	e7c5      	b.n	801be8e <_puts_r+0x42>
 801bf02:	4622      	mov	r2, r4
 801bf04:	4628      	mov	r0, r5
 801bf06:	f001 fba3 	bl	801d650 <__swbuf_r>
 801bf0a:	3001      	adds	r0, #1
 801bf0c:	d1bf      	bne.n	801be8e <_puts_r+0x42>
 801bf0e:	e7df      	b.n	801bed0 <_puts_r+0x84>
 801bf10:	6823      	ldr	r3, [r4, #0]
 801bf12:	250a      	movs	r5, #10
 801bf14:	1c5a      	adds	r2, r3, #1
 801bf16:	6022      	str	r2, [r4, #0]
 801bf18:	701d      	strb	r5, [r3, #0]
 801bf1a:	e7db      	b.n	801bed4 <_puts_r+0x88>
 801bf1c:	08022cac 	.word	0x08022cac
 801bf20:	08022ccc 	.word	0x08022ccc
 801bf24:	08022c8c 	.word	0x08022c8c

0801bf28 <puts>:
 801bf28:	4b02      	ldr	r3, [pc, #8]	; (801bf34 <puts+0xc>)
 801bf2a:	4601      	mov	r1, r0
 801bf2c:	6818      	ldr	r0, [r3, #0]
 801bf2e:	f7ff bf8d 	b.w	801be4c <_puts_r>
 801bf32:	bf00      	nop
 801bf34:	200000f8 	.word	0x200000f8

0801bf38 <cleanup_glue>:
 801bf38:	b538      	push	{r3, r4, r5, lr}
 801bf3a:	460c      	mov	r4, r1
 801bf3c:	6809      	ldr	r1, [r1, #0]
 801bf3e:	4605      	mov	r5, r0
 801bf40:	b109      	cbz	r1, 801bf46 <cleanup_glue+0xe>
 801bf42:	f7ff fff9 	bl	801bf38 <cleanup_glue>
 801bf46:	4621      	mov	r1, r4
 801bf48:	4628      	mov	r0, r5
 801bf4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bf4e:	f7ff b841 	b.w	801afd4 <_free_r>
	...

0801bf54 <_reclaim_reent>:
 801bf54:	4b2c      	ldr	r3, [pc, #176]	; (801c008 <_reclaim_reent+0xb4>)
 801bf56:	681b      	ldr	r3, [r3, #0]
 801bf58:	4283      	cmp	r3, r0
 801bf5a:	b570      	push	{r4, r5, r6, lr}
 801bf5c:	4604      	mov	r4, r0
 801bf5e:	d051      	beq.n	801c004 <_reclaim_reent+0xb0>
 801bf60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801bf62:	b143      	cbz	r3, 801bf76 <_reclaim_reent+0x22>
 801bf64:	68db      	ldr	r3, [r3, #12]
 801bf66:	2b00      	cmp	r3, #0
 801bf68:	d14a      	bne.n	801c000 <_reclaim_reent+0xac>
 801bf6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bf6c:	6819      	ldr	r1, [r3, #0]
 801bf6e:	b111      	cbz	r1, 801bf76 <_reclaim_reent+0x22>
 801bf70:	4620      	mov	r0, r4
 801bf72:	f7ff f82f 	bl	801afd4 <_free_r>
 801bf76:	6961      	ldr	r1, [r4, #20]
 801bf78:	b111      	cbz	r1, 801bf80 <_reclaim_reent+0x2c>
 801bf7a:	4620      	mov	r0, r4
 801bf7c:	f7ff f82a 	bl	801afd4 <_free_r>
 801bf80:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801bf82:	b111      	cbz	r1, 801bf8a <_reclaim_reent+0x36>
 801bf84:	4620      	mov	r0, r4
 801bf86:	f7ff f825 	bl	801afd4 <_free_r>
 801bf8a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801bf8c:	b111      	cbz	r1, 801bf94 <_reclaim_reent+0x40>
 801bf8e:	4620      	mov	r0, r4
 801bf90:	f7ff f820 	bl	801afd4 <_free_r>
 801bf94:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801bf96:	b111      	cbz	r1, 801bf9e <_reclaim_reent+0x4a>
 801bf98:	4620      	mov	r0, r4
 801bf9a:	f7ff f81b 	bl	801afd4 <_free_r>
 801bf9e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801bfa0:	b111      	cbz	r1, 801bfa8 <_reclaim_reent+0x54>
 801bfa2:	4620      	mov	r0, r4
 801bfa4:	f7ff f816 	bl	801afd4 <_free_r>
 801bfa8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801bfaa:	b111      	cbz	r1, 801bfb2 <_reclaim_reent+0x5e>
 801bfac:	4620      	mov	r0, r4
 801bfae:	f7ff f811 	bl	801afd4 <_free_r>
 801bfb2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801bfb4:	b111      	cbz	r1, 801bfbc <_reclaim_reent+0x68>
 801bfb6:	4620      	mov	r0, r4
 801bfb8:	f7ff f80c 	bl	801afd4 <_free_r>
 801bfbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bfbe:	b111      	cbz	r1, 801bfc6 <_reclaim_reent+0x72>
 801bfc0:	4620      	mov	r0, r4
 801bfc2:	f7ff f807 	bl	801afd4 <_free_r>
 801bfc6:	69a3      	ldr	r3, [r4, #24]
 801bfc8:	b1e3      	cbz	r3, 801c004 <_reclaim_reent+0xb0>
 801bfca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801bfcc:	4620      	mov	r0, r4
 801bfce:	4798      	blx	r3
 801bfd0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801bfd2:	b1b9      	cbz	r1, 801c004 <_reclaim_reent+0xb0>
 801bfd4:	4620      	mov	r0, r4
 801bfd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bfda:	f7ff bfad 	b.w	801bf38 <cleanup_glue>
 801bfde:	5949      	ldr	r1, [r1, r5]
 801bfe0:	b941      	cbnz	r1, 801bff4 <_reclaim_reent+0xa0>
 801bfe2:	3504      	adds	r5, #4
 801bfe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bfe6:	2d80      	cmp	r5, #128	; 0x80
 801bfe8:	68d9      	ldr	r1, [r3, #12]
 801bfea:	d1f8      	bne.n	801bfde <_reclaim_reent+0x8a>
 801bfec:	4620      	mov	r0, r4
 801bfee:	f7fe fff1 	bl	801afd4 <_free_r>
 801bff2:	e7ba      	b.n	801bf6a <_reclaim_reent+0x16>
 801bff4:	680e      	ldr	r6, [r1, #0]
 801bff6:	4620      	mov	r0, r4
 801bff8:	f7fe ffec 	bl	801afd4 <_free_r>
 801bffc:	4631      	mov	r1, r6
 801bffe:	e7ef      	b.n	801bfe0 <_reclaim_reent+0x8c>
 801c000:	2500      	movs	r5, #0
 801c002:	e7ef      	b.n	801bfe4 <_reclaim_reent+0x90>
 801c004:	bd70      	pop	{r4, r5, r6, pc}
 801c006:	bf00      	nop
 801c008:	200000f8 	.word	0x200000f8

0801c00c <_sbrk_r>:
 801c00c:	b538      	push	{r3, r4, r5, lr}
 801c00e:	4d06      	ldr	r5, [pc, #24]	; (801c028 <_sbrk_r+0x1c>)
 801c010:	2300      	movs	r3, #0
 801c012:	4604      	mov	r4, r0
 801c014:	4608      	mov	r0, r1
 801c016:	602b      	str	r3, [r5, #0]
 801c018:	f004 fc3e 	bl	8020898 <_sbrk>
 801c01c:	1c43      	adds	r3, r0, #1
 801c01e:	d102      	bne.n	801c026 <_sbrk_r+0x1a>
 801c020:	682b      	ldr	r3, [r5, #0]
 801c022:	b103      	cbz	r3, 801c026 <_sbrk_r+0x1a>
 801c024:	6023      	str	r3, [r4, #0]
 801c026:	bd38      	pop	{r3, r4, r5, pc}
 801c028:	20009d18 	.word	0x20009d18

0801c02c <nanf>:
 801c02c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801c034 <nanf+0x8>
 801c030:	4770      	bx	lr
 801c032:	bf00      	nop
 801c034:	7fc00000 	.word	0x7fc00000

0801c038 <_raise_r>:
 801c038:	291f      	cmp	r1, #31
 801c03a:	b538      	push	{r3, r4, r5, lr}
 801c03c:	4604      	mov	r4, r0
 801c03e:	460d      	mov	r5, r1
 801c040:	d904      	bls.n	801c04c <_raise_r+0x14>
 801c042:	2316      	movs	r3, #22
 801c044:	6003      	str	r3, [r0, #0]
 801c046:	f04f 30ff 	mov.w	r0, #4294967295
 801c04a:	bd38      	pop	{r3, r4, r5, pc}
 801c04c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801c04e:	b112      	cbz	r2, 801c056 <_raise_r+0x1e>
 801c050:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c054:	b94b      	cbnz	r3, 801c06a <_raise_r+0x32>
 801c056:	4620      	mov	r0, r4
 801c058:	f000 f830 	bl	801c0bc <_getpid_r>
 801c05c:	462a      	mov	r2, r5
 801c05e:	4601      	mov	r1, r0
 801c060:	4620      	mov	r0, r4
 801c062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c066:	f000 b817 	b.w	801c098 <_kill_r>
 801c06a:	2b01      	cmp	r3, #1
 801c06c:	d00a      	beq.n	801c084 <_raise_r+0x4c>
 801c06e:	1c59      	adds	r1, r3, #1
 801c070:	d103      	bne.n	801c07a <_raise_r+0x42>
 801c072:	2316      	movs	r3, #22
 801c074:	6003      	str	r3, [r0, #0]
 801c076:	2001      	movs	r0, #1
 801c078:	e7e7      	b.n	801c04a <_raise_r+0x12>
 801c07a:	2400      	movs	r4, #0
 801c07c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c080:	4628      	mov	r0, r5
 801c082:	4798      	blx	r3
 801c084:	2000      	movs	r0, #0
 801c086:	e7e0      	b.n	801c04a <_raise_r+0x12>

0801c088 <raise>:
 801c088:	4b02      	ldr	r3, [pc, #8]	; (801c094 <raise+0xc>)
 801c08a:	4601      	mov	r1, r0
 801c08c:	6818      	ldr	r0, [r3, #0]
 801c08e:	f7ff bfd3 	b.w	801c038 <_raise_r>
 801c092:	bf00      	nop
 801c094:	200000f8 	.word	0x200000f8

0801c098 <_kill_r>:
 801c098:	b538      	push	{r3, r4, r5, lr}
 801c09a:	4d07      	ldr	r5, [pc, #28]	; (801c0b8 <_kill_r+0x20>)
 801c09c:	2300      	movs	r3, #0
 801c09e:	4604      	mov	r4, r0
 801c0a0:	4608      	mov	r0, r1
 801c0a2:	4611      	mov	r1, r2
 801c0a4:	602b      	str	r3, [r5, #0]
 801c0a6:	f004 fbdf 	bl	8020868 <_kill>
 801c0aa:	1c43      	adds	r3, r0, #1
 801c0ac:	d102      	bne.n	801c0b4 <_kill_r+0x1c>
 801c0ae:	682b      	ldr	r3, [r5, #0]
 801c0b0:	b103      	cbz	r3, 801c0b4 <_kill_r+0x1c>
 801c0b2:	6023      	str	r3, [r4, #0]
 801c0b4:	bd38      	pop	{r3, r4, r5, pc}
 801c0b6:	bf00      	nop
 801c0b8:	20009d18 	.word	0x20009d18

0801c0bc <_getpid_r>:
 801c0bc:	f004 bbc4 	b.w	8020848 <_getpid>

0801c0c0 <siprintf>:
 801c0c0:	b40e      	push	{r1, r2, r3}
 801c0c2:	b500      	push	{lr}
 801c0c4:	b09c      	sub	sp, #112	; 0x70
 801c0c6:	ab1d      	add	r3, sp, #116	; 0x74
 801c0c8:	9002      	str	r0, [sp, #8]
 801c0ca:	9006      	str	r0, [sp, #24]
 801c0cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c0d0:	4809      	ldr	r0, [pc, #36]	; (801c0f8 <siprintf+0x38>)
 801c0d2:	9107      	str	r1, [sp, #28]
 801c0d4:	9104      	str	r1, [sp, #16]
 801c0d6:	4909      	ldr	r1, [pc, #36]	; (801c0fc <siprintf+0x3c>)
 801c0d8:	f853 2b04 	ldr.w	r2, [r3], #4
 801c0dc:	9105      	str	r1, [sp, #20]
 801c0de:	6800      	ldr	r0, [r0, #0]
 801c0e0:	9301      	str	r3, [sp, #4]
 801c0e2:	a902      	add	r1, sp, #8
 801c0e4:	f003 fd5e 	bl	801fba4 <_svfiprintf_r>
 801c0e8:	9b02      	ldr	r3, [sp, #8]
 801c0ea:	2200      	movs	r2, #0
 801c0ec:	701a      	strb	r2, [r3, #0]
 801c0ee:	b01c      	add	sp, #112	; 0x70
 801c0f0:	f85d eb04 	ldr.w	lr, [sp], #4
 801c0f4:	b003      	add	sp, #12
 801c0f6:	4770      	bx	lr
 801c0f8:	200000f8 	.word	0x200000f8
 801c0fc:	ffff0208 	.word	0xffff0208

0801c100 <siscanf>:
 801c100:	b40e      	push	{r1, r2, r3}
 801c102:	b510      	push	{r4, lr}
 801c104:	b09f      	sub	sp, #124	; 0x7c
 801c106:	ac21      	add	r4, sp, #132	; 0x84
 801c108:	f44f 7101 	mov.w	r1, #516	; 0x204
 801c10c:	f854 2b04 	ldr.w	r2, [r4], #4
 801c110:	9201      	str	r2, [sp, #4]
 801c112:	f8ad 101c 	strh.w	r1, [sp, #28]
 801c116:	9004      	str	r0, [sp, #16]
 801c118:	9008      	str	r0, [sp, #32]
 801c11a:	f7e4 f873 	bl	8000204 <strlen>
 801c11e:	4b0c      	ldr	r3, [pc, #48]	; (801c150 <siscanf+0x50>)
 801c120:	9005      	str	r0, [sp, #20]
 801c122:	9009      	str	r0, [sp, #36]	; 0x24
 801c124:	930d      	str	r3, [sp, #52]	; 0x34
 801c126:	480b      	ldr	r0, [pc, #44]	; (801c154 <siscanf+0x54>)
 801c128:	9a01      	ldr	r2, [sp, #4]
 801c12a:	6800      	ldr	r0, [r0, #0]
 801c12c:	9403      	str	r4, [sp, #12]
 801c12e:	2300      	movs	r3, #0
 801c130:	9311      	str	r3, [sp, #68]	; 0x44
 801c132:	9316      	str	r3, [sp, #88]	; 0x58
 801c134:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c138:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c13c:	a904      	add	r1, sp, #16
 801c13e:	4623      	mov	r3, r4
 801c140:	f003 fe8a 	bl	801fe58 <__ssvfiscanf_r>
 801c144:	b01f      	add	sp, #124	; 0x7c
 801c146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c14a:	b003      	add	sp, #12
 801c14c:	4770      	bx	lr
 801c14e:	bf00      	nop
 801c150:	0801c17b 	.word	0x0801c17b
 801c154:	200000f8 	.word	0x200000f8

0801c158 <__sread>:
 801c158:	b510      	push	{r4, lr}
 801c15a:	460c      	mov	r4, r1
 801c15c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c160:	f004 fa98 	bl	8020694 <_read_r>
 801c164:	2800      	cmp	r0, #0
 801c166:	bfab      	itete	ge
 801c168:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c16a:	89a3      	ldrhlt	r3, [r4, #12]
 801c16c:	181b      	addge	r3, r3, r0
 801c16e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c172:	bfac      	ite	ge
 801c174:	6563      	strge	r3, [r4, #84]	; 0x54
 801c176:	81a3      	strhlt	r3, [r4, #12]
 801c178:	bd10      	pop	{r4, pc}

0801c17a <__seofread>:
 801c17a:	2000      	movs	r0, #0
 801c17c:	4770      	bx	lr

0801c17e <__swrite>:
 801c17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c182:	461f      	mov	r7, r3
 801c184:	898b      	ldrh	r3, [r1, #12]
 801c186:	05db      	lsls	r3, r3, #23
 801c188:	4605      	mov	r5, r0
 801c18a:	460c      	mov	r4, r1
 801c18c:	4616      	mov	r6, r2
 801c18e:	d505      	bpl.n	801c19c <__swrite+0x1e>
 801c190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c194:	2302      	movs	r3, #2
 801c196:	2200      	movs	r2, #0
 801c198:	f002 ff24 	bl	801efe4 <_lseek_r>
 801c19c:	89a3      	ldrh	r3, [r4, #12]
 801c19e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c1a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c1a6:	81a3      	strh	r3, [r4, #12]
 801c1a8:	4632      	mov	r2, r6
 801c1aa:	463b      	mov	r3, r7
 801c1ac:	4628      	mov	r0, r5
 801c1ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c1b2:	f001 ba9f 	b.w	801d6f4 <_write_r>

0801c1b6 <__sseek>:
 801c1b6:	b510      	push	{r4, lr}
 801c1b8:	460c      	mov	r4, r1
 801c1ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c1be:	f002 ff11 	bl	801efe4 <_lseek_r>
 801c1c2:	1c43      	adds	r3, r0, #1
 801c1c4:	89a3      	ldrh	r3, [r4, #12]
 801c1c6:	bf15      	itete	ne
 801c1c8:	6560      	strne	r0, [r4, #84]	; 0x54
 801c1ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c1ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c1d2:	81a3      	strheq	r3, [r4, #12]
 801c1d4:	bf18      	it	ne
 801c1d6:	81a3      	strhne	r3, [r4, #12]
 801c1d8:	bd10      	pop	{r4, pc}

0801c1da <__sclose>:
 801c1da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c1de:	f001 bb27 	b.w	801d830 <_close_r>

0801c1e2 <strchr>:
 801c1e2:	b2c9      	uxtb	r1, r1
 801c1e4:	4603      	mov	r3, r0
 801c1e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c1ea:	b11a      	cbz	r2, 801c1f4 <strchr+0x12>
 801c1ec:	428a      	cmp	r2, r1
 801c1ee:	d1f9      	bne.n	801c1e4 <strchr+0x2>
 801c1f0:	4618      	mov	r0, r3
 801c1f2:	4770      	bx	lr
 801c1f4:	2900      	cmp	r1, #0
 801c1f6:	bf18      	it	ne
 801c1f8:	2300      	movne	r3, #0
 801c1fa:	e7f9      	b.n	801c1f0 <strchr+0xe>

0801c1fc <strcpy>:
 801c1fc:	4603      	mov	r3, r0
 801c1fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c202:	f803 2b01 	strb.w	r2, [r3], #1
 801c206:	2a00      	cmp	r2, #0
 801c208:	d1f9      	bne.n	801c1fe <strcpy+0x2>
 801c20a:	4770      	bx	lr

0801c20c <strncmp>:
 801c20c:	b510      	push	{r4, lr}
 801c20e:	b16a      	cbz	r2, 801c22c <strncmp+0x20>
 801c210:	3901      	subs	r1, #1
 801c212:	1884      	adds	r4, r0, r2
 801c214:	f810 3b01 	ldrb.w	r3, [r0], #1
 801c218:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801c21c:	4293      	cmp	r3, r2
 801c21e:	d103      	bne.n	801c228 <strncmp+0x1c>
 801c220:	42a0      	cmp	r0, r4
 801c222:	d001      	beq.n	801c228 <strncmp+0x1c>
 801c224:	2b00      	cmp	r3, #0
 801c226:	d1f5      	bne.n	801c214 <strncmp+0x8>
 801c228:	1a98      	subs	r0, r3, r2
 801c22a:	bd10      	pop	{r4, pc}
 801c22c:	4610      	mov	r0, r2
 801c22e:	e7fc      	b.n	801c22a <strncmp+0x1e>

0801c230 <sulp>:
 801c230:	b570      	push	{r4, r5, r6, lr}
 801c232:	4604      	mov	r4, r0
 801c234:	460d      	mov	r5, r1
 801c236:	ec45 4b10 	vmov	d0, r4, r5
 801c23a:	4616      	mov	r6, r2
 801c23c:	f003 fad2 	bl	801f7e4 <__ulp>
 801c240:	ec51 0b10 	vmov	r0, r1, d0
 801c244:	b17e      	cbz	r6, 801c266 <sulp+0x36>
 801c246:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801c24a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c24e:	2b00      	cmp	r3, #0
 801c250:	dd09      	ble.n	801c266 <sulp+0x36>
 801c252:	051b      	lsls	r3, r3, #20
 801c254:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801c258:	2400      	movs	r4, #0
 801c25a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801c25e:	4622      	mov	r2, r4
 801c260:	462b      	mov	r3, r5
 801c262:	f7e4 f9e9 	bl	8000638 <__aeabi_dmul>
 801c266:	bd70      	pop	{r4, r5, r6, pc}

0801c268 <_strtod_l>:
 801c268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c26c:	b0a3      	sub	sp, #140	; 0x8c
 801c26e:	461f      	mov	r7, r3
 801c270:	2300      	movs	r3, #0
 801c272:	931e      	str	r3, [sp, #120]	; 0x78
 801c274:	4ba4      	ldr	r3, [pc, #656]	; (801c508 <_strtod_l+0x2a0>)
 801c276:	9219      	str	r2, [sp, #100]	; 0x64
 801c278:	681b      	ldr	r3, [r3, #0]
 801c27a:	9307      	str	r3, [sp, #28]
 801c27c:	4604      	mov	r4, r0
 801c27e:	4618      	mov	r0, r3
 801c280:	4688      	mov	r8, r1
 801c282:	f7e3 ffbf 	bl	8000204 <strlen>
 801c286:	f04f 0a00 	mov.w	sl, #0
 801c28a:	4605      	mov	r5, r0
 801c28c:	f04f 0b00 	mov.w	fp, #0
 801c290:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801c294:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c296:	781a      	ldrb	r2, [r3, #0]
 801c298:	2a2b      	cmp	r2, #43	; 0x2b
 801c29a:	d04c      	beq.n	801c336 <_strtod_l+0xce>
 801c29c:	d839      	bhi.n	801c312 <_strtod_l+0xaa>
 801c29e:	2a0d      	cmp	r2, #13
 801c2a0:	d832      	bhi.n	801c308 <_strtod_l+0xa0>
 801c2a2:	2a08      	cmp	r2, #8
 801c2a4:	d832      	bhi.n	801c30c <_strtod_l+0xa4>
 801c2a6:	2a00      	cmp	r2, #0
 801c2a8:	d03c      	beq.n	801c324 <_strtod_l+0xbc>
 801c2aa:	2300      	movs	r3, #0
 801c2ac:	930e      	str	r3, [sp, #56]	; 0x38
 801c2ae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801c2b0:	7833      	ldrb	r3, [r6, #0]
 801c2b2:	2b30      	cmp	r3, #48	; 0x30
 801c2b4:	f040 80b4 	bne.w	801c420 <_strtod_l+0x1b8>
 801c2b8:	7873      	ldrb	r3, [r6, #1]
 801c2ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c2be:	2b58      	cmp	r3, #88	; 0x58
 801c2c0:	d16c      	bne.n	801c39c <_strtod_l+0x134>
 801c2c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c2c4:	9301      	str	r3, [sp, #4]
 801c2c6:	ab1e      	add	r3, sp, #120	; 0x78
 801c2c8:	9702      	str	r7, [sp, #8]
 801c2ca:	9300      	str	r3, [sp, #0]
 801c2cc:	4a8f      	ldr	r2, [pc, #572]	; (801c50c <_strtod_l+0x2a4>)
 801c2ce:	ab1f      	add	r3, sp, #124	; 0x7c
 801c2d0:	a91d      	add	r1, sp, #116	; 0x74
 801c2d2:	4620      	mov	r0, r4
 801c2d4:	f002 fa84 	bl	801e7e0 <__gethex>
 801c2d8:	f010 0707 	ands.w	r7, r0, #7
 801c2dc:	4605      	mov	r5, r0
 801c2de:	d005      	beq.n	801c2ec <_strtod_l+0x84>
 801c2e0:	2f06      	cmp	r7, #6
 801c2e2:	d12a      	bne.n	801c33a <_strtod_l+0xd2>
 801c2e4:	3601      	adds	r6, #1
 801c2e6:	2300      	movs	r3, #0
 801c2e8:	961d      	str	r6, [sp, #116]	; 0x74
 801c2ea:	930e      	str	r3, [sp, #56]	; 0x38
 801c2ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c2ee:	2b00      	cmp	r3, #0
 801c2f0:	f040 8596 	bne.w	801ce20 <_strtod_l+0xbb8>
 801c2f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c2f6:	b1db      	cbz	r3, 801c330 <_strtod_l+0xc8>
 801c2f8:	4652      	mov	r2, sl
 801c2fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801c2fe:	ec43 2b10 	vmov	d0, r2, r3
 801c302:	b023      	add	sp, #140	; 0x8c
 801c304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c308:	2a20      	cmp	r2, #32
 801c30a:	d1ce      	bne.n	801c2aa <_strtod_l+0x42>
 801c30c:	3301      	adds	r3, #1
 801c30e:	931d      	str	r3, [sp, #116]	; 0x74
 801c310:	e7c0      	b.n	801c294 <_strtod_l+0x2c>
 801c312:	2a2d      	cmp	r2, #45	; 0x2d
 801c314:	d1c9      	bne.n	801c2aa <_strtod_l+0x42>
 801c316:	2201      	movs	r2, #1
 801c318:	920e      	str	r2, [sp, #56]	; 0x38
 801c31a:	1c5a      	adds	r2, r3, #1
 801c31c:	921d      	str	r2, [sp, #116]	; 0x74
 801c31e:	785b      	ldrb	r3, [r3, #1]
 801c320:	2b00      	cmp	r3, #0
 801c322:	d1c4      	bne.n	801c2ae <_strtod_l+0x46>
 801c324:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c326:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801c32a:	2b00      	cmp	r3, #0
 801c32c:	f040 8576 	bne.w	801ce1c <_strtod_l+0xbb4>
 801c330:	4652      	mov	r2, sl
 801c332:	465b      	mov	r3, fp
 801c334:	e7e3      	b.n	801c2fe <_strtod_l+0x96>
 801c336:	2200      	movs	r2, #0
 801c338:	e7ee      	b.n	801c318 <_strtod_l+0xb0>
 801c33a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c33c:	b13a      	cbz	r2, 801c34e <_strtod_l+0xe6>
 801c33e:	2135      	movs	r1, #53	; 0x35
 801c340:	a820      	add	r0, sp, #128	; 0x80
 801c342:	f003 fb5a 	bl	801f9fa <__copybits>
 801c346:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c348:	4620      	mov	r0, r4
 801c34a:	f002 ff1f 	bl	801f18c <_Bfree>
 801c34e:	3f01      	subs	r7, #1
 801c350:	2f05      	cmp	r7, #5
 801c352:	d807      	bhi.n	801c364 <_strtod_l+0xfc>
 801c354:	e8df f007 	tbb	[pc, r7]
 801c358:	1d180b0e 	.word	0x1d180b0e
 801c35c:	030e      	.short	0x030e
 801c35e:	f04f 0b00 	mov.w	fp, #0
 801c362:	46da      	mov	sl, fp
 801c364:	0728      	lsls	r0, r5, #28
 801c366:	d5c1      	bpl.n	801c2ec <_strtod_l+0x84>
 801c368:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801c36c:	e7be      	b.n	801c2ec <_strtod_l+0x84>
 801c36e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801c372:	e7f7      	b.n	801c364 <_strtod_l+0xfc>
 801c374:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801c378:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801c37a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801c37e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801c382:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801c386:	e7ed      	b.n	801c364 <_strtod_l+0xfc>
 801c388:	f8df b184 	ldr.w	fp, [pc, #388]	; 801c510 <_strtod_l+0x2a8>
 801c38c:	f04f 0a00 	mov.w	sl, #0
 801c390:	e7e8      	b.n	801c364 <_strtod_l+0xfc>
 801c392:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801c396:	f04f 3aff 	mov.w	sl, #4294967295
 801c39a:	e7e3      	b.n	801c364 <_strtod_l+0xfc>
 801c39c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c39e:	1c5a      	adds	r2, r3, #1
 801c3a0:	921d      	str	r2, [sp, #116]	; 0x74
 801c3a2:	785b      	ldrb	r3, [r3, #1]
 801c3a4:	2b30      	cmp	r3, #48	; 0x30
 801c3a6:	d0f9      	beq.n	801c39c <_strtod_l+0x134>
 801c3a8:	2b00      	cmp	r3, #0
 801c3aa:	d09f      	beq.n	801c2ec <_strtod_l+0x84>
 801c3ac:	2301      	movs	r3, #1
 801c3ae:	f04f 0900 	mov.w	r9, #0
 801c3b2:	9304      	str	r3, [sp, #16]
 801c3b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c3b6:	930a      	str	r3, [sp, #40]	; 0x28
 801c3b8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801c3bc:	464f      	mov	r7, r9
 801c3be:	220a      	movs	r2, #10
 801c3c0:	981d      	ldr	r0, [sp, #116]	; 0x74
 801c3c2:	7806      	ldrb	r6, [r0, #0]
 801c3c4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801c3c8:	b2d9      	uxtb	r1, r3
 801c3ca:	2909      	cmp	r1, #9
 801c3cc:	d92a      	bls.n	801c424 <_strtod_l+0x1bc>
 801c3ce:	9907      	ldr	r1, [sp, #28]
 801c3d0:	462a      	mov	r2, r5
 801c3d2:	f7ff ff1b 	bl	801c20c <strncmp>
 801c3d6:	b398      	cbz	r0, 801c440 <_strtod_l+0x1d8>
 801c3d8:	2000      	movs	r0, #0
 801c3da:	4633      	mov	r3, r6
 801c3dc:	463d      	mov	r5, r7
 801c3de:	9007      	str	r0, [sp, #28]
 801c3e0:	4602      	mov	r2, r0
 801c3e2:	2b65      	cmp	r3, #101	; 0x65
 801c3e4:	d001      	beq.n	801c3ea <_strtod_l+0x182>
 801c3e6:	2b45      	cmp	r3, #69	; 0x45
 801c3e8:	d118      	bne.n	801c41c <_strtod_l+0x1b4>
 801c3ea:	b91d      	cbnz	r5, 801c3f4 <_strtod_l+0x18c>
 801c3ec:	9b04      	ldr	r3, [sp, #16]
 801c3ee:	4303      	orrs	r3, r0
 801c3f0:	d098      	beq.n	801c324 <_strtod_l+0xbc>
 801c3f2:	2500      	movs	r5, #0
 801c3f4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801c3f8:	f108 0301 	add.w	r3, r8, #1
 801c3fc:	931d      	str	r3, [sp, #116]	; 0x74
 801c3fe:	f898 3001 	ldrb.w	r3, [r8, #1]
 801c402:	2b2b      	cmp	r3, #43	; 0x2b
 801c404:	d075      	beq.n	801c4f2 <_strtod_l+0x28a>
 801c406:	2b2d      	cmp	r3, #45	; 0x2d
 801c408:	d07b      	beq.n	801c502 <_strtod_l+0x29a>
 801c40a:	f04f 0c00 	mov.w	ip, #0
 801c40e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801c412:	2909      	cmp	r1, #9
 801c414:	f240 8082 	bls.w	801c51c <_strtod_l+0x2b4>
 801c418:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801c41c:	2600      	movs	r6, #0
 801c41e:	e09d      	b.n	801c55c <_strtod_l+0x2f4>
 801c420:	2300      	movs	r3, #0
 801c422:	e7c4      	b.n	801c3ae <_strtod_l+0x146>
 801c424:	2f08      	cmp	r7, #8
 801c426:	bfd8      	it	le
 801c428:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801c42a:	f100 0001 	add.w	r0, r0, #1
 801c42e:	bfda      	itte	le
 801c430:	fb02 3301 	mlale	r3, r2, r1, r3
 801c434:	9309      	strle	r3, [sp, #36]	; 0x24
 801c436:	fb02 3909 	mlagt	r9, r2, r9, r3
 801c43a:	3701      	adds	r7, #1
 801c43c:	901d      	str	r0, [sp, #116]	; 0x74
 801c43e:	e7bf      	b.n	801c3c0 <_strtod_l+0x158>
 801c440:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c442:	195a      	adds	r2, r3, r5
 801c444:	921d      	str	r2, [sp, #116]	; 0x74
 801c446:	5d5b      	ldrb	r3, [r3, r5]
 801c448:	2f00      	cmp	r7, #0
 801c44a:	d037      	beq.n	801c4bc <_strtod_l+0x254>
 801c44c:	9007      	str	r0, [sp, #28]
 801c44e:	463d      	mov	r5, r7
 801c450:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801c454:	2a09      	cmp	r2, #9
 801c456:	d912      	bls.n	801c47e <_strtod_l+0x216>
 801c458:	2201      	movs	r2, #1
 801c45a:	e7c2      	b.n	801c3e2 <_strtod_l+0x17a>
 801c45c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c45e:	1c5a      	adds	r2, r3, #1
 801c460:	921d      	str	r2, [sp, #116]	; 0x74
 801c462:	785b      	ldrb	r3, [r3, #1]
 801c464:	3001      	adds	r0, #1
 801c466:	2b30      	cmp	r3, #48	; 0x30
 801c468:	d0f8      	beq.n	801c45c <_strtod_l+0x1f4>
 801c46a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801c46e:	2a08      	cmp	r2, #8
 801c470:	f200 84db 	bhi.w	801ce2a <_strtod_l+0xbc2>
 801c474:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801c476:	9007      	str	r0, [sp, #28]
 801c478:	2000      	movs	r0, #0
 801c47a:	920a      	str	r2, [sp, #40]	; 0x28
 801c47c:	4605      	mov	r5, r0
 801c47e:	3b30      	subs	r3, #48	; 0x30
 801c480:	f100 0201 	add.w	r2, r0, #1
 801c484:	d014      	beq.n	801c4b0 <_strtod_l+0x248>
 801c486:	9907      	ldr	r1, [sp, #28]
 801c488:	4411      	add	r1, r2
 801c48a:	9107      	str	r1, [sp, #28]
 801c48c:	462a      	mov	r2, r5
 801c48e:	eb00 0e05 	add.w	lr, r0, r5
 801c492:	210a      	movs	r1, #10
 801c494:	4572      	cmp	r2, lr
 801c496:	d113      	bne.n	801c4c0 <_strtod_l+0x258>
 801c498:	182a      	adds	r2, r5, r0
 801c49a:	2a08      	cmp	r2, #8
 801c49c:	f105 0501 	add.w	r5, r5, #1
 801c4a0:	4405      	add	r5, r0
 801c4a2:	dc1c      	bgt.n	801c4de <_strtod_l+0x276>
 801c4a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c4a6:	220a      	movs	r2, #10
 801c4a8:	fb02 3301 	mla	r3, r2, r1, r3
 801c4ac:	9309      	str	r3, [sp, #36]	; 0x24
 801c4ae:	2200      	movs	r2, #0
 801c4b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c4b2:	1c59      	adds	r1, r3, #1
 801c4b4:	911d      	str	r1, [sp, #116]	; 0x74
 801c4b6:	785b      	ldrb	r3, [r3, #1]
 801c4b8:	4610      	mov	r0, r2
 801c4ba:	e7c9      	b.n	801c450 <_strtod_l+0x1e8>
 801c4bc:	4638      	mov	r0, r7
 801c4be:	e7d2      	b.n	801c466 <_strtod_l+0x1fe>
 801c4c0:	2a08      	cmp	r2, #8
 801c4c2:	dc04      	bgt.n	801c4ce <_strtod_l+0x266>
 801c4c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801c4c6:	434e      	muls	r6, r1
 801c4c8:	9609      	str	r6, [sp, #36]	; 0x24
 801c4ca:	3201      	adds	r2, #1
 801c4cc:	e7e2      	b.n	801c494 <_strtod_l+0x22c>
 801c4ce:	f102 0c01 	add.w	ip, r2, #1
 801c4d2:	f1bc 0f10 	cmp.w	ip, #16
 801c4d6:	bfd8      	it	le
 801c4d8:	fb01 f909 	mulle.w	r9, r1, r9
 801c4dc:	e7f5      	b.n	801c4ca <_strtod_l+0x262>
 801c4de:	2d10      	cmp	r5, #16
 801c4e0:	bfdc      	itt	le
 801c4e2:	220a      	movle	r2, #10
 801c4e4:	fb02 3909 	mlale	r9, r2, r9, r3
 801c4e8:	e7e1      	b.n	801c4ae <_strtod_l+0x246>
 801c4ea:	2300      	movs	r3, #0
 801c4ec:	9307      	str	r3, [sp, #28]
 801c4ee:	2201      	movs	r2, #1
 801c4f0:	e77c      	b.n	801c3ec <_strtod_l+0x184>
 801c4f2:	f04f 0c00 	mov.w	ip, #0
 801c4f6:	f108 0302 	add.w	r3, r8, #2
 801c4fa:	931d      	str	r3, [sp, #116]	; 0x74
 801c4fc:	f898 3002 	ldrb.w	r3, [r8, #2]
 801c500:	e785      	b.n	801c40e <_strtod_l+0x1a6>
 801c502:	f04f 0c01 	mov.w	ip, #1
 801c506:	e7f6      	b.n	801c4f6 <_strtod_l+0x28e>
 801c508:	08023070 	.word	0x08023070
 801c50c:	08022e60 	.word	0x08022e60
 801c510:	7ff00000 	.word	0x7ff00000
 801c514:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c516:	1c59      	adds	r1, r3, #1
 801c518:	911d      	str	r1, [sp, #116]	; 0x74
 801c51a:	785b      	ldrb	r3, [r3, #1]
 801c51c:	2b30      	cmp	r3, #48	; 0x30
 801c51e:	d0f9      	beq.n	801c514 <_strtod_l+0x2ac>
 801c520:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801c524:	2908      	cmp	r1, #8
 801c526:	f63f af79 	bhi.w	801c41c <_strtod_l+0x1b4>
 801c52a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801c52e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c530:	9308      	str	r3, [sp, #32]
 801c532:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c534:	1c59      	adds	r1, r3, #1
 801c536:	911d      	str	r1, [sp, #116]	; 0x74
 801c538:	785b      	ldrb	r3, [r3, #1]
 801c53a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801c53e:	2e09      	cmp	r6, #9
 801c540:	d937      	bls.n	801c5b2 <_strtod_l+0x34a>
 801c542:	9e08      	ldr	r6, [sp, #32]
 801c544:	1b89      	subs	r1, r1, r6
 801c546:	2908      	cmp	r1, #8
 801c548:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801c54c:	dc02      	bgt.n	801c554 <_strtod_l+0x2ec>
 801c54e:	4576      	cmp	r6, lr
 801c550:	bfa8      	it	ge
 801c552:	4676      	movge	r6, lr
 801c554:	f1bc 0f00 	cmp.w	ip, #0
 801c558:	d000      	beq.n	801c55c <_strtod_l+0x2f4>
 801c55a:	4276      	negs	r6, r6
 801c55c:	2d00      	cmp	r5, #0
 801c55e:	d14f      	bne.n	801c600 <_strtod_l+0x398>
 801c560:	9904      	ldr	r1, [sp, #16]
 801c562:	4301      	orrs	r1, r0
 801c564:	f47f aec2 	bne.w	801c2ec <_strtod_l+0x84>
 801c568:	2a00      	cmp	r2, #0
 801c56a:	f47f aedb 	bne.w	801c324 <_strtod_l+0xbc>
 801c56e:	2b69      	cmp	r3, #105	; 0x69
 801c570:	d027      	beq.n	801c5c2 <_strtod_l+0x35a>
 801c572:	dc24      	bgt.n	801c5be <_strtod_l+0x356>
 801c574:	2b49      	cmp	r3, #73	; 0x49
 801c576:	d024      	beq.n	801c5c2 <_strtod_l+0x35a>
 801c578:	2b4e      	cmp	r3, #78	; 0x4e
 801c57a:	f47f aed3 	bne.w	801c324 <_strtod_l+0xbc>
 801c57e:	499e      	ldr	r1, [pc, #632]	; (801c7f8 <_strtod_l+0x590>)
 801c580:	a81d      	add	r0, sp, #116	; 0x74
 801c582:	f002 fb85 	bl	801ec90 <__match>
 801c586:	2800      	cmp	r0, #0
 801c588:	f43f aecc 	beq.w	801c324 <_strtod_l+0xbc>
 801c58c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c58e:	781b      	ldrb	r3, [r3, #0]
 801c590:	2b28      	cmp	r3, #40	; 0x28
 801c592:	d12d      	bne.n	801c5f0 <_strtod_l+0x388>
 801c594:	4999      	ldr	r1, [pc, #612]	; (801c7fc <_strtod_l+0x594>)
 801c596:	aa20      	add	r2, sp, #128	; 0x80
 801c598:	a81d      	add	r0, sp, #116	; 0x74
 801c59a:	f002 fb8d 	bl	801ecb8 <__hexnan>
 801c59e:	2805      	cmp	r0, #5
 801c5a0:	d126      	bne.n	801c5f0 <_strtod_l+0x388>
 801c5a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c5a4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801c5a8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801c5ac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801c5b0:	e69c      	b.n	801c2ec <_strtod_l+0x84>
 801c5b2:	210a      	movs	r1, #10
 801c5b4:	fb01 3e0e 	mla	lr, r1, lr, r3
 801c5b8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801c5bc:	e7b9      	b.n	801c532 <_strtod_l+0x2ca>
 801c5be:	2b6e      	cmp	r3, #110	; 0x6e
 801c5c0:	e7db      	b.n	801c57a <_strtod_l+0x312>
 801c5c2:	498f      	ldr	r1, [pc, #572]	; (801c800 <_strtod_l+0x598>)
 801c5c4:	a81d      	add	r0, sp, #116	; 0x74
 801c5c6:	f002 fb63 	bl	801ec90 <__match>
 801c5ca:	2800      	cmp	r0, #0
 801c5cc:	f43f aeaa 	beq.w	801c324 <_strtod_l+0xbc>
 801c5d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c5d2:	498c      	ldr	r1, [pc, #560]	; (801c804 <_strtod_l+0x59c>)
 801c5d4:	3b01      	subs	r3, #1
 801c5d6:	a81d      	add	r0, sp, #116	; 0x74
 801c5d8:	931d      	str	r3, [sp, #116]	; 0x74
 801c5da:	f002 fb59 	bl	801ec90 <__match>
 801c5de:	b910      	cbnz	r0, 801c5e6 <_strtod_l+0x37e>
 801c5e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c5e2:	3301      	adds	r3, #1
 801c5e4:	931d      	str	r3, [sp, #116]	; 0x74
 801c5e6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801c814 <_strtod_l+0x5ac>
 801c5ea:	f04f 0a00 	mov.w	sl, #0
 801c5ee:	e67d      	b.n	801c2ec <_strtod_l+0x84>
 801c5f0:	4885      	ldr	r0, [pc, #532]	; (801c808 <_strtod_l+0x5a0>)
 801c5f2:	f7fd fec5 	bl	801a380 <nan>
 801c5f6:	ed8d 0b04 	vstr	d0, [sp, #16]
 801c5fa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801c5fe:	e675      	b.n	801c2ec <_strtod_l+0x84>
 801c600:	9b07      	ldr	r3, [sp, #28]
 801c602:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c604:	1af3      	subs	r3, r6, r3
 801c606:	2f00      	cmp	r7, #0
 801c608:	bf08      	it	eq
 801c60a:	462f      	moveq	r7, r5
 801c60c:	2d10      	cmp	r5, #16
 801c60e:	9308      	str	r3, [sp, #32]
 801c610:	46a8      	mov	r8, r5
 801c612:	bfa8      	it	ge
 801c614:	f04f 0810 	movge.w	r8, #16
 801c618:	f7e3 ff94 	bl	8000544 <__aeabi_ui2d>
 801c61c:	2d09      	cmp	r5, #9
 801c61e:	4682      	mov	sl, r0
 801c620:	468b      	mov	fp, r1
 801c622:	dd13      	ble.n	801c64c <_strtod_l+0x3e4>
 801c624:	4b79      	ldr	r3, [pc, #484]	; (801c80c <_strtod_l+0x5a4>)
 801c626:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801c62a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801c62e:	f7e4 f803 	bl	8000638 <__aeabi_dmul>
 801c632:	4682      	mov	sl, r0
 801c634:	4648      	mov	r0, r9
 801c636:	468b      	mov	fp, r1
 801c638:	f7e3 ff84 	bl	8000544 <__aeabi_ui2d>
 801c63c:	4602      	mov	r2, r0
 801c63e:	460b      	mov	r3, r1
 801c640:	4650      	mov	r0, sl
 801c642:	4659      	mov	r1, fp
 801c644:	f7e3 fe42 	bl	80002cc <__adddf3>
 801c648:	4682      	mov	sl, r0
 801c64a:	468b      	mov	fp, r1
 801c64c:	2d0f      	cmp	r5, #15
 801c64e:	dc38      	bgt.n	801c6c2 <_strtod_l+0x45a>
 801c650:	9b08      	ldr	r3, [sp, #32]
 801c652:	2b00      	cmp	r3, #0
 801c654:	f43f ae4a 	beq.w	801c2ec <_strtod_l+0x84>
 801c658:	dd24      	ble.n	801c6a4 <_strtod_l+0x43c>
 801c65a:	2b16      	cmp	r3, #22
 801c65c:	dc0b      	bgt.n	801c676 <_strtod_l+0x40e>
 801c65e:	4d6b      	ldr	r5, [pc, #428]	; (801c80c <_strtod_l+0x5a4>)
 801c660:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801c664:	e9d5 0100 	ldrd	r0, r1, [r5]
 801c668:	4652      	mov	r2, sl
 801c66a:	465b      	mov	r3, fp
 801c66c:	f7e3 ffe4 	bl	8000638 <__aeabi_dmul>
 801c670:	4682      	mov	sl, r0
 801c672:	468b      	mov	fp, r1
 801c674:	e63a      	b.n	801c2ec <_strtod_l+0x84>
 801c676:	9a08      	ldr	r2, [sp, #32]
 801c678:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801c67c:	4293      	cmp	r3, r2
 801c67e:	db20      	blt.n	801c6c2 <_strtod_l+0x45a>
 801c680:	4c62      	ldr	r4, [pc, #392]	; (801c80c <_strtod_l+0x5a4>)
 801c682:	f1c5 050f 	rsb	r5, r5, #15
 801c686:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801c68a:	4652      	mov	r2, sl
 801c68c:	465b      	mov	r3, fp
 801c68e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c692:	f7e3 ffd1 	bl	8000638 <__aeabi_dmul>
 801c696:	9b08      	ldr	r3, [sp, #32]
 801c698:	1b5d      	subs	r5, r3, r5
 801c69a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801c69e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c6a2:	e7e3      	b.n	801c66c <_strtod_l+0x404>
 801c6a4:	9b08      	ldr	r3, [sp, #32]
 801c6a6:	3316      	adds	r3, #22
 801c6a8:	db0b      	blt.n	801c6c2 <_strtod_l+0x45a>
 801c6aa:	9b07      	ldr	r3, [sp, #28]
 801c6ac:	4a57      	ldr	r2, [pc, #348]	; (801c80c <_strtod_l+0x5a4>)
 801c6ae:	1b9e      	subs	r6, r3, r6
 801c6b0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801c6b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c6b8:	4650      	mov	r0, sl
 801c6ba:	4659      	mov	r1, fp
 801c6bc:	f7e4 f8e6 	bl	800088c <__aeabi_ddiv>
 801c6c0:	e7d6      	b.n	801c670 <_strtod_l+0x408>
 801c6c2:	9b08      	ldr	r3, [sp, #32]
 801c6c4:	eba5 0808 	sub.w	r8, r5, r8
 801c6c8:	4498      	add	r8, r3
 801c6ca:	f1b8 0f00 	cmp.w	r8, #0
 801c6ce:	dd71      	ble.n	801c7b4 <_strtod_l+0x54c>
 801c6d0:	f018 030f 	ands.w	r3, r8, #15
 801c6d4:	d00a      	beq.n	801c6ec <_strtod_l+0x484>
 801c6d6:	494d      	ldr	r1, [pc, #308]	; (801c80c <_strtod_l+0x5a4>)
 801c6d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c6dc:	4652      	mov	r2, sl
 801c6de:	465b      	mov	r3, fp
 801c6e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c6e4:	f7e3 ffa8 	bl	8000638 <__aeabi_dmul>
 801c6e8:	4682      	mov	sl, r0
 801c6ea:	468b      	mov	fp, r1
 801c6ec:	f038 080f 	bics.w	r8, r8, #15
 801c6f0:	d04d      	beq.n	801c78e <_strtod_l+0x526>
 801c6f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801c6f6:	dd22      	ble.n	801c73e <_strtod_l+0x4d6>
 801c6f8:	2500      	movs	r5, #0
 801c6fa:	462e      	mov	r6, r5
 801c6fc:	9509      	str	r5, [sp, #36]	; 0x24
 801c6fe:	9507      	str	r5, [sp, #28]
 801c700:	2322      	movs	r3, #34	; 0x22
 801c702:	f8df b110 	ldr.w	fp, [pc, #272]	; 801c814 <_strtod_l+0x5ac>
 801c706:	6023      	str	r3, [r4, #0]
 801c708:	f04f 0a00 	mov.w	sl, #0
 801c70c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c70e:	2b00      	cmp	r3, #0
 801c710:	f43f adec 	beq.w	801c2ec <_strtod_l+0x84>
 801c714:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c716:	4620      	mov	r0, r4
 801c718:	f002 fd38 	bl	801f18c <_Bfree>
 801c71c:	9907      	ldr	r1, [sp, #28]
 801c71e:	4620      	mov	r0, r4
 801c720:	f002 fd34 	bl	801f18c <_Bfree>
 801c724:	4631      	mov	r1, r6
 801c726:	4620      	mov	r0, r4
 801c728:	f002 fd30 	bl	801f18c <_Bfree>
 801c72c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c72e:	4620      	mov	r0, r4
 801c730:	f002 fd2c 	bl	801f18c <_Bfree>
 801c734:	4629      	mov	r1, r5
 801c736:	4620      	mov	r0, r4
 801c738:	f002 fd28 	bl	801f18c <_Bfree>
 801c73c:	e5d6      	b.n	801c2ec <_strtod_l+0x84>
 801c73e:	2300      	movs	r3, #0
 801c740:	ea4f 1828 	mov.w	r8, r8, asr #4
 801c744:	4650      	mov	r0, sl
 801c746:	4659      	mov	r1, fp
 801c748:	4699      	mov	r9, r3
 801c74a:	f1b8 0f01 	cmp.w	r8, #1
 801c74e:	dc21      	bgt.n	801c794 <_strtod_l+0x52c>
 801c750:	b10b      	cbz	r3, 801c756 <_strtod_l+0x4ee>
 801c752:	4682      	mov	sl, r0
 801c754:	468b      	mov	fp, r1
 801c756:	4b2e      	ldr	r3, [pc, #184]	; (801c810 <_strtod_l+0x5a8>)
 801c758:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801c75c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801c760:	4652      	mov	r2, sl
 801c762:	465b      	mov	r3, fp
 801c764:	e9d9 0100 	ldrd	r0, r1, [r9]
 801c768:	f7e3 ff66 	bl	8000638 <__aeabi_dmul>
 801c76c:	4b29      	ldr	r3, [pc, #164]	; (801c814 <_strtod_l+0x5ac>)
 801c76e:	460a      	mov	r2, r1
 801c770:	400b      	ands	r3, r1
 801c772:	4929      	ldr	r1, [pc, #164]	; (801c818 <_strtod_l+0x5b0>)
 801c774:	428b      	cmp	r3, r1
 801c776:	4682      	mov	sl, r0
 801c778:	d8be      	bhi.n	801c6f8 <_strtod_l+0x490>
 801c77a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801c77e:	428b      	cmp	r3, r1
 801c780:	bf86      	itte	hi
 801c782:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801c81c <_strtod_l+0x5b4>
 801c786:	f04f 3aff 	movhi.w	sl, #4294967295
 801c78a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801c78e:	2300      	movs	r3, #0
 801c790:	9304      	str	r3, [sp, #16]
 801c792:	e081      	b.n	801c898 <_strtod_l+0x630>
 801c794:	f018 0f01 	tst.w	r8, #1
 801c798:	d007      	beq.n	801c7aa <_strtod_l+0x542>
 801c79a:	4b1d      	ldr	r3, [pc, #116]	; (801c810 <_strtod_l+0x5a8>)
 801c79c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801c7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7a4:	f7e3 ff48 	bl	8000638 <__aeabi_dmul>
 801c7a8:	2301      	movs	r3, #1
 801c7aa:	f109 0901 	add.w	r9, r9, #1
 801c7ae:	ea4f 0868 	mov.w	r8, r8, asr #1
 801c7b2:	e7ca      	b.n	801c74a <_strtod_l+0x4e2>
 801c7b4:	d0eb      	beq.n	801c78e <_strtod_l+0x526>
 801c7b6:	f1c8 0800 	rsb	r8, r8, #0
 801c7ba:	f018 020f 	ands.w	r2, r8, #15
 801c7be:	d00a      	beq.n	801c7d6 <_strtod_l+0x56e>
 801c7c0:	4b12      	ldr	r3, [pc, #72]	; (801c80c <_strtod_l+0x5a4>)
 801c7c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c7c6:	4650      	mov	r0, sl
 801c7c8:	4659      	mov	r1, fp
 801c7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7ce:	f7e4 f85d 	bl	800088c <__aeabi_ddiv>
 801c7d2:	4682      	mov	sl, r0
 801c7d4:	468b      	mov	fp, r1
 801c7d6:	ea5f 1828 	movs.w	r8, r8, asr #4
 801c7da:	d0d8      	beq.n	801c78e <_strtod_l+0x526>
 801c7dc:	f1b8 0f1f 	cmp.w	r8, #31
 801c7e0:	dd1e      	ble.n	801c820 <_strtod_l+0x5b8>
 801c7e2:	2500      	movs	r5, #0
 801c7e4:	462e      	mov	r6, r5
 801c7e6:	9509      	str	r5, [sp, #36]	; 0x24
 801c7e8:	9507      	str	r5, [sp, #28]
 801c7ea:	2322      	movs	r3, #34	; 0x22
 801c7ec:	f04f 0a00 	mov.w	sl, #0
 801c7f0:	f04f 0b00 	mov.w	fp, #0
 801c7f4:	6023      	str	r3, [r4, #0]
 801c7f6:	e789      	b.n	801c70c <_strtod_l+0x4a4>
 801c7f8:	08022e35 	.word	0x08022e35
 801c7fc:	08022e74 	.word	0x08022e74
 801c800:	08022e2d 	.word	0x08022e2d
 801c804:	08022f8c 	.word	0x08022f8c
 801c808:	08022f88 	.word	0x08022f88
 801c80c:	08023110 	.word	0x08023110
 801c810:	080230e8 	.word	0x080230e8
 801c814:	7ff00000 	.word	0x7ff00000
 801c818:	7ca00000 	.word	0x7ca00000
 801c81c:	7fefffff 	.word	0x7fefffff
 801c820:	f018 0310 	ands.w	r3, r8, #16
 801c824:	bf18      	it	ne
 801c826:	236a      	movne	r3, #106	; 0x6a
 801c828:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801cbe0 <_strtod_l+0x978>
 801c82c:	9304      	str	r3, [sp, #16]
 801c82e:	4650      	mov	r0, sl
 801c830:	4659      	mov	r1, fp
 801c832:	2300      	movs	r3, #0
 801c834:	f018 0f01 	tst.w	r8, #1
 801c838:	d004      	beq.n	801c844 <_strtod_l+0x5dc>
 801c83a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801c83e:	f7e3 fefb 	bl	8000638 <__aeabi_dmul>
 801c842:	2301      	movs	r3, #1
 801c844:	ea5f 0868 	movs.w	r8, r8, asr #1
 801c848:	f109 0908 	add.w	r9, r9, #8
 801c84c:	d1f2      	bne.n	801c834 <_strtod_l+0x5cc>
 801c84e:	b10b      	cbz	r3, 801c854 <_strtod_l+0x5ec>
 801c850:	4682      	mov	sl, r0
 801c852:	468b      	mov	fp, r1
 801c854:	9b04      	ldr	r3, [sp, #16]
 801c856:	b1bb      	cbz	r3, 801c888 <_strtod_l+0x620>
 801c858:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801c85c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c860:	2b00      	cmp	r3, #0
 801c862:	4659      	mov	r1, fp
 801c864:	dd10      	ble.n	801c888 <_strtod_l+0x620>
 801c866:	2b1f      	cmp	r3, #31
 801c868:	f340 8128 	ble.w	801cabc <_strtod_l+0x854>
 801c86c:	2b34      	cmp	r3, #52	; 0x34
 801c86e:	bfde      	ittt	le
 801c870:	3b20      	suble	r3, #32
 801c872:	f04f 32ff 	movle.w	r2, #4294967295
 801c876:	fa02 f303 	lslle.w	r3, r2, r3
 801c87a:	f04f 0a00 	mov.w	sl, #0
 801c87e:	bfcc      	ite	gt
 801c880:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801c884:	ea03 0b01 	andle.w	fp, r3, r1
 801c888:	2200      	movs	r2, #0
 801c88a:	2300      	movs	r3, #0
 801c88c:	4650      	mov	r0, sl
 801c88e:	4659      	mov	r1, fp
 801c890:	f7e4 f93a 	bl	8000b08 <__aeabi_dcmpeq>
 801c894:	2800      	cmp	r0, #0
 801c896:	d1a4      	bne.n	801c7e2 <_strtod_l+0x57a>
 801c898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c89a:	9300      	str	r3, [sp, #0]
 801c89c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c89e:	462b      	mov	r3, r5
 801c8a0:	463a      	mov	r2, r7
 801c8a2:	4620      	mov	r0, r4
 801c8a4:	f002 fcde 	bl	801f264 <__s2b>
 801c8a8:	9009      	str	r0, [sp, #36]	; 0x24
 801c8aa:	2800      	cmp	r0, #0
 801c8ac:	f43f af24 	beq.w	801c6f8 <_strtod_l+0x490>
 801c8b0:	9b07      	ldr	r3, [sp, #28]
 801c8b2:	1b9e      	subs	r6, r3, r6
 801c8b4:	9b08      	ldr	r3, [sp, #32]
 801c8b6:	2b00      	cmp	r3, #0
 801c8b8:	bfb4      	ite	lt
 801c8ba:	4633      	movlt	r3, r6
 801c8bc:	2300      	movge	r3, #0
 801c8be:	9310      	str	r3, [sp, #64]	; 0x40
 801c8c0:	9b08      	ldr	r3, [sp, #32]
 801c8c2:	2500      	movs	r5, #0
 801c8c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c8c8:	9318      	str	r3, [sp, #96]	; 0x60
 801c8ca:	462e      	mov	r6, r5
 801c8cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c8ce:	4620      	mov	r0, r4
 801c8d0:	6859      	ldr	r1, [r3, #4]
 801c8d2:	f002 fc1b 	bl	801f10c <_Balloc>
 801c8d6:	9007      	str	r0, [sp, #28]
 801c8d8:	2800      	cmp	r0, #0
 801c8da:	f43f af11 	beq.w	801c700 <_strtod_l+0x498>
 801c8de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c8e0:	691a      	ldr	r2, [r3, #16]
 801c8e2:	3202      	adds	r2, #2
 801c8e4:	f103 010c 	add.w	r1, r3, #12
 801c8e8:	0092      	lsls	r2, r2, #2
 801c8ea:	300c      	adds	r0, #12
 801c8ec:	f7fe f8c4 	bl	801aa78 <memcpy>
 801c8f0:	ec4b ab10 	vmov	d0, sl, fp
 801c8f4:	aa20      	add	r2, sp, #128	; 0x80
 801c8f6:	a91f      	add	r1, sp, #124	; 0x7c
 801c8f8:	4620      	mov	r0, r4
 801c8fa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801c8fe:	f002 ffed 	bl	801f8dc <__d2b>
 801c902:	901e      	str	r0, [sp, #120]	; 0x78
 801c904:	2800      	cmp	r0, #0
 801c906:	f43f aefb 	beq.w	801c700 <_strtod_l+0x498>
 801c90a:	2101      	movs	r1, #1
 801c90c:	4620      	mov	r0, r4
 801c90e:	f002 fd43 	bl	801f398 <__i2b>
 801c912:	4606      	mov	r6, r0
 801c914:	2800      	cmp	r0, #0
 801c916:	f43f aef3 	beq.w	801c700 <_strtod_l+0x498>
 801c91a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c91c:	9904      	ldr	r1, [sp, #16]
 801c91e:	2b00      	cmp	r3, #0
 801c920:	bfab      	itete	ge
 801c922:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801c924:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801c926:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801c928:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801c92c:	bfac      	ite	ge
 801c92e:	eb03 0902 	addge.w	r9, r3, r2
 801c932:	1ad7      	sublt	r7, r2, r3
 801c934:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c936:	eba3 0801 	sub.w	r8, r3, r1
 801c93a:	4490      	add	r8, r2
 801c93c:	4ba3      	ldr	r3, [pc, #652]	; (801cbcc <_strtod_l+0x964>)
 801c93e:	f108 38ff 	add.w	r8, r8, #4294967295
 801c942:	4598      	cmp	r8, r3
 801c944:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801c948:	f280 80cc 	bge.w	801cae4 <_strtod_l+0x87c>
 801c94c:	eba3 0308 	sub.w	r3, r3, r8
 801c950:	2b1f      	cmp	r3, #31
 801c952:	eba2 0203 	sub.w	r2, r2, r3
 801c956:	f04f 0101 	mov.w	r1, #1
 801c95a:	f300 80b6 	bgt.w	801caca <_strtod_l+0x862>
 801c95e:	fa01 f303 	lsl.w	r3, r1, r3
 801c962:	9311      	str	r3, [sp, #68]	; 0x44
 801c964:	2300      	movs	r3, #0
 801c966:	930c      	str	r3, [sp, #48]	; 0x30
 801c968:	eb09 0802 	add.w	r8, r9, r2
 801c96c:	9b04      	ldr	r3, [sp, #16]
 801c96e:	45c1      	cmp	r9, r8
 801c970:	4417      	add	r7, r2
 801c972:	441f      	add	r7, r3
 801c974:	464b      	mov	r3, r9
 801c976:	bfa8      	it	ge
 801c978:	4643      	movge	r3, r8
 801c97a:	42bb      	cmp	r3, r7
 801c97c:	bfa8      	it	ge
 801c97e:	463b      	movge	r3, r7
 801c980:	2b00      	cmp	r3, #0
 801c982:	bfc2      	ittt	gt
 801c984:	eba8 0803 	subgt.w	r8, r8, r3
 801c988:	1aff      	subgt	r7, r7, r3
 801c98a:	eba9 0903 	subgt.w	r9, r9, r3
 801c98e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c990:	2b00      	cmp	r3, #0
 801c992:	dd17      	ble.n	801c9c4 <_strtod_l+0x75c>
 801c994:	4631      	mov	r1, r6
 801c996:	461a      	mov	r2, r3
 801c998:	4620      	mov	r0, r4
 801c99a:	f002 fdb9 	bl	801f510 <__pow5mult>
 801c99e:	4606      	mov	r6, r0
 801c9a0:	2800      	cmp	r0, #0
 801c9a2:	f43f aead 	beq.w	801c700 <_strtod_l+0x498>
 801c9a6:	4601      	mov	r1, r0
 801c9a8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c9aa:	4620      	mov	r0, r4
 801c9ac:	f002 fd0a 	bl	801f3c4 <__multiply>
 801c9b0:	900f      	str	r0, [sp, #60]	; 0x3c
 801c9b2:	2800      	cmp	r0, #0
 801c9b4:	f43f aea4 	beq.w	801c700 <_strtod_l+0x498>
 801c9b8:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c9ba:	4620      	mov	r0, r4
 801c9bc:	f002 fbe6 	bl	801f18c <_Bfree>
 801c9c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c9c2:	931e      	str	r3, [sp, #120]	; 0x78
 801c9c4:	f1b8 0f00 	cmp.w	r8, #0
 801c9c8:	f300 8091 	bgt.w	801caee <_strtod_l+0x886>
 801c9cc:	9b08      	ldr	r3, [sp, #32]
 801c9ce:	2b00      	cmp	r3, #0
 801c9d0:	dd08      	ble.n	801c9e4 <_strtod_l+0x77c>
 801c9d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c9d4:	9907      	ldr	r1, [sp, #28]
 801c9d6:	4620      	mov	r0, r4
 801c9d8:	f002 fd9a 	bl	801f510 <__pow5mult>
 801c9dc:	9007      	str	r0, [sp, #28]
 801c9de:	2800      	cmp	r0, #0
 801c9e0:	f43f ae8e 	beq.w	801c700 <_strtod_l+0x498>
 801c9e4:	2f00      	cmp	r7, #0
 801c9e6:	dd08      	ble.n	801c9fa <_strtod_l+0x792>
 801c9e8:	9907      	ldr	r1, [sp, #28]
 801c9ea:	463a      	mov	r2, r7
 801c9ec:	4620      	mov	r0, r4
 801c9ee:	f002 fde9 	bl	801f5c4 <__lshift>
 801c9f2:	9007      	str	r0, [sp, #28]
 801c9f4:	2800      	cmp	r0, #0
 801c9f6:	f43f ae83 	beq.w	801c700 <_strtod_l+0x498>
 801c9fa:	f1b9 0f00 	cmp.w	r9, #0
 801c9fe:	dd08      	ble.n	801ca12 <_strtod_l+0x7aa>
 801ca00:	4631      	mov	r1, r6
 801ca02:	464a      	mov	r2, r9
 801ca04:	4620      	mov	r0, r4
 801ca06:	f002 fddd 	bl	801f5c4 <__lshift>
 801ca0a:	4606      	mov	r6, r0
 801ca0c:	2800      	cmp	r0, #0
 801ca0e:	f43f ae77 	beq.w	801c700 <_strtod_l+0x498>
 801ca12:	9a07      	ldr	r2, [sp, #28]
 801ca14:	991e      	ldr	r1, [sp, #120]	; 0x78
 801ca16:	4620      	mov	r0, r4
 801ca18:	f002 fe5c 	bl	801f6d4 <__mdiff>
 801ca1c:	4605      	mov	r5, r0
 801ca1e:	2800      	cmp	r0, #0
 801ca20:	f43f ae6e 	beq.w	801c700 <_strtod_l+0x498>
 801ca24:	68c3      	ldr	r3, [r0, #12]
 801ca26:	930f      	str	r3, [sp, #60]	; 0x3c
 801ca28:	2300      	movs	r3, #0
 801ca2a:	60c3      	str	r3, [r0, #12]
 801ca2c:	4631      	mov	r1, r6
 801ca2e:	f002 fe35 	bl	801f69c <__mcmp>
 801ca32:	2800      	cmp	r0, #0
 801ca34:	da65      	bge.n	801cb02 <_strtod_l+0x89a>
 801ca36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ca38:	ea53 030a 	orrs.w	r3, r3, sl
 801ca3c:	f040 8087 	bne.w	801cb4e <_strtod_l+0x8e6>
 801ca40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ca44:	2b00      	cmp	r3, #0
 801ca46:	f040 8082 	bne.w	801cb4e <_strtod_l+0x8e6>
 801ca4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ca4e:	0d1b      	lsrs	r3, r3, #20
 801ca50:	051b      	lsls	r3, r3, #20
 801ca52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801ca56:	d97a      	bls.n	801cb4e <_strtod_l+0x8e6>
 801ca58:	696b      	ldr	r3, [r5, #20]
 801ca5a:	b913      	cbnz	r3, 801ca62 <_strtod_l+0x7fa>
 801ca5c:	692b      	ldr	r3, [r5, #16]
 801ca5e:	2b01      	cmp	r3, #1
 801ca60:	dd75      	ble.n	801cb4e <_strtod_l+0x8e6>
 801ca62:	4629      	mov	r1, r5
 801ca64:	2201      	movs	r2, #1
 801ca66:	4620      	mov	r0, r4
 801ca68:	f002 fdac 	bl	801f5c4 <__lshift>
 801ca6c:	4631      	mov	r1, r6
 801ca6e:	4605      	mov	r5, r0
 801ca70:	f002 fe14 	bl	801f69c <__mcmp>
 801ca74:	2800      	cmp	r0, #0
 801ca76:	dd6a      	ble.n	801cb4e <_strtod_l+0x8e6>
 801ca78:	9904      	ldr	r1, [sp, #16]
 801ca7a:	4a55      	ldr	r2, [pc, #340]	; (801cbd0 <_strtod_l+0x968>)
 801ca7c:	465b      	mov	r3, fp
 801ca7e:	2900      	cmp	r1, #0
 801ca80:	f000 8085 	beq.w	801cb8e <_strtod_l+0x926>
 801ca84:	ea02 010b 	and.w	r1, r2, fp
 801ca88:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801ca8c:	dc7f      	bgt.n	801cb8e <_strtod_l+0x926>
 801ca8e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801ca92:	f77f aeaa 	ble.w	801c7ea <_strtod_l+0x582>
 801ca96:	4a4f      	ldr	r2, [pc, #316]	; (801cbd4 <_strtod_l+0x96c>)
 801ca98:	2300      	movs	r3, #0
 801ca9a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801ca9e:	4650      	mov	r0, sl
 801caa0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801caa4:	4659      	mov	r1, fp
 801caa6:	f7e3 fdc7 	bl	8000638 <__aeabi_dmul>
 801caaa:	460b      	mov	r3, r1
 801caac:	4303      	orrs	r3, r0
 801caae:	bf08      	it	eq
 801cab0:	2322      	moveq	r3, #34	; 0x22
 801cab2:	4682      	mov	sl, r0
 801cab4:	468b      	mov	fp, r1
 801cab6:	bf08      	it	eq
 801cab8:	6023      	streq	r3, [r4, #0]
 801caba:	e62b      	b.n	801c714 <_strtod_l+0x4ac>
 801cabc:	f04f 32ff 	mov.w	r2, #4294967295
 801cac0:	fa02 f303 	lsl.w	r3, r2, r3
 801cac4:	ea03 0a0a 	and.w	sl, r3, sl
 801cac8:	e6de      	b.n	801c888 <_strtod_l+0x620>
 801caca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801cace:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801cad2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801cad6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801cada:	fa01 f308 	lsl.w	r3, r1, r8
 801cade:	930c      	str	r3, [sp, #48]	; 0x30
 801cae0:	9111      	str	r1, [sp, #68]	; 0x44
 801cae2:	e741      	b.n	801c968 <_strtod_l+0x700>
 801cae4:	2300      	movs	r3, #0
 801cae6:	930c      	str	r3, [sp, #48]	; 0x30
 801cae8:	2301      	movs	r3, #1
 801caea:	9311      	str	r3, [sp, #68]	; 0x44
 801caec:	e73c      	b.n	801c968 <_strtod_l+0x700>
 801caee:	991e      	ldr	r1, [sp, #120]	; 0x78
 801caf0:	4642      	mov	r2, r8
 801caf2:	4620      	mov	r0, r4
 801caf4:	f002 fd66 	bl	801f5c4 <__lshift>
 801caf8:	901e      	str	r0, [sp, #120]	; 0x78
 801cafa:	2800      	cmp	r0, #0
 801cafc:	f47f af66 	bne.w	801c9cc <_strtod_l+0x764>
 801cb00:	e5fe      	b.n	801c700 <_strtod_l+0x498>
 801cb02:	465f      	mov	r7, fp
 801cb04:	d16e      	bne.n	801cbe4 <_strtod_l+0x97c>
 801cb06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cb08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cb0c:	b342      	cbz	r2, 801cb60 <_strtod_l+0x8f8>
 801cb0e:	4a32      	ldr	r2, [pc, #200]	; (801cbd8 <_strtod_l+0x970>)
 801cb10:	4293      	cmp	r3, r2
 801cb12:	d128      	bne.n	801cb66 <_strtod_l+0x8fe>
 801cb14:	9b04      	ldr	r3, [sp, #16]
 801cb16:	4650      	mov	r0, sl
 801cb18:	b1eb      	cbz	r3, 801cb56 <_strtod_l+0x8ee>
 801cb1a:	4a2d      	ldr	r2, [pc, #180]	; (801cbd0 <_strtod_l+0x968>)
 801cb1c:	403a      	ands	r2, r7
 801cb1e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801cb22:	f04f 31ff 	mov.w	r1, #4294967295
 801cb26:	d819      	bhi.n	801cb5c <_strtod_l+0x8f4>
 801cb28:	0d12      	lsrs	r2, r2, #20
 801cb2a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801cb2e:	fa01 f303 	lsl.w	r3, r1, r3
 801cb32:	4298      	cmp	r0, r3
 801cb34:	d117      	bne.n	801cb66 <_strtod_l+0x8fe>
 801cb36:	4b29      	ldr	r3, [pc, #164]	; (801cbdc <_strtod_l+0x974>)
 801cb38:	429f      	cmp	r7, r3
 801cb3a:	d102      	bne.n	801cb42 <_strtod_l+0x8da>
 801cb3c:	3001      	adds	r0, #1
 801cb3e:	f43f addf 	beq.w	801c700 <_strtod_l+0x498>
 801cb42:	4b23      	ldr	r3, [pc, #140]	; (801cbd0 <_strtod_l+0x968>)
 801cb44:	403b      	ands	r3, r7
 801cb46:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801cb4a:	f04f 0a00 	mov.w	sl, #0
 801cb4e:	9b04      	ldr	r3, [sp, #16]
 801cb50:	2b00      	cmp	r3, #0
 801cb52:	d1a0      	bne.n	801ca96 <_strtod_l+0x82e>
 801cb54:	e5de      	b.n	801c714 <_strtod_l+0x4ac>
 801cb56:	f04f 33ff 	mov.w	r3, #4294967295
 801cb5a:	e7ea      	b.n	801cb32 <_strtod_l+0x8ca>
 801cb5c:	460b      	mov	r3, r1
 801cb5e:	e7e8      	b.n	801cb32 <_strtod_l+0x8ca>
 801cb60:	ea53 030a 	orrs.w	r3, r3, sl
 801cb64:	d088      	beq.n	801ca78 <_strtod_l+0x810>
 801cb66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cb68:	b1db      	cbz	r3, 801cba2 <_strtod_l+0x93a>
 801cb6a:	423b      	tst	r3, r7
 801cb6c:	d0ef      	beq.n	801cb4e <_strtod_l+0x8e6>
 801cb6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cb70:	9a04      	ldr	r2, [sp, #16]
 801cb72:	4650      	mov	r0, sl
 801cb74:	4659      	mov	r1, fp
 801cb76:	b1c3      	cbz	r3, 801cbaa <_strtod_l+0x942>
 801cb78:	f7ff fb5a 	bl	801c230 <sulp>
 801cb7c:	4602      	mov	r2, r0
 801cb7e:	460b      	mov	r3, r1
 801cb80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801cb84:	f7e3 fba2 	bl	80002cc <__adddf3>
 801cb88:	4682      	mov	sl, r0
 801cb8a:	468b      	mov	fp, r1
 801cb8c:	e7df      	b.n	801cb4e <_strtod_l+0x8e6>
 801cb8e:	4013      	ands	r3, r2
 801cb90:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801cb94:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801cb98:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801cb9c:	f04f 3aff 	mov.w	sl, #4294967295
 801cba0:	e7d5      	b.n	801cb4e <_strtod_l+0x8e6>
 801cba2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cba4:	ea13 0f0a 	tst.w	r3, sl
 801cba8:	e7e0      	b.n	801cb6c <_strtod_l+0x904>
 801cbaa:	f7ff fb41 	bl	801c230 <sulp>
 801cbae:	4602      	mov	r2, r0
 801cbb0:	460b      	mov	r3, r1
 801cbb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801cbb6:	f7e3 fb87 	bl	80002c8 <__aeabi_dsub>
 801cbba:	2200      	movs	r2, #0
 801cbbc:	2300      	movs	r3, #0
 801cbbe:	4682      	mov	sl, r0
 801cbc0:	468b      	mov	fp, r1
 801cbc2:	f7e3 ffa1 	bl	8000b08 <__aeabi_dcmpeq>
 801cbc6:	2800      	cmp	r0, #0
 801cbc8:	d0c1      	beq.n	801cb4e <_strtod_l+0x8e6>
 801cbca:	e60e      	b.n	801c7ea <_strtod_l+0x582>
 801cbcc:	fffffc02 	.word	0xfffffc02
 801cbd0:	7ff00000 	.word	0x7ff00000
 801cbd4:	39500000 	.word	0x39500000
 801cbd8:	000fffff 	.word	0x000fffff
 801cbdc:	7fefffff 	.word	0x7fefffff
 801cbe0:	08022e88 	.word	0x08022e88
 801cbe4:	4631      	mov	r1, r6
 801cbe6:	4628      	mov	r0, r5
 801cbe8:	f002 fed4 	bl	801f994 <__ratio>
 801cbec:	ec59 8b10 	vmov	r8, r9, d0
 801cbf0:	ee10 0a10 	vmov	r0, s0
 801cbf4:	2200      	movs	r2, #0
 801cbf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801cbfa:	4649      	mov	r1, r9
 801cbfc:	f7e3 ff98 	bl	8000b30 <__aeabi_dcmple>
 801cc00:	2800      	cmp	r0, #0
 801cc02:	d07c      	beq.n	801ccfe <_strtod_l+0xa96>
 801cc04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cc06:	2b00      	cmp	r3, #0
 801cc08:	d04c      	beq.n	801cca4 <_strtod_l+0xa3c>
 801cc0a:	4b95      	ldr	r3, [pc, #596]	; (801ce60 <_strtod_l+0xbf8>)
 801cc0c:	2200      	movs	r2, #0
 801cc0e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801cc12:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801ce60 <_strtod_l+0xbf8>
 801cc16:	f04f 0800 	mov.w	r8, #0
 801cc1a:	4b92      	ldr	r3, [pc, #584]	; (801ce64 <_strtod_l+0xbfc>)
 801cc1c:	403b      	ands	r3, r7
 801cc1e:	9311      	str	r3, [sp, #68]	; 0x44
 801cc20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cc22:	4b91      	ldr	r3, [pc, #580]	; (801ce68 <_strtod_l+0xc00>)
 801cc24:	429a      	cmp	r2, r3
 801cc26:	f040 80b2 	bne.w	801cd8e <_strtod_l+0xb26>
 801cc2a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801cc2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801cc32:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801cc36:	ec4b ab10 	vmov	d0, sl, fp
 801cc3a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801cc3e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801cc42:	f002 fdcf 	bl	801f7e4 <__ulp>
 801cc46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801cc4a:	ec53 2b10 	vmov	r2, r3, d0
 801cc4e:	f7e3 fcf3 	bl	8000638 <__aeabi_dmul>
 801cc52:	4652      	mov	r2, sl
 801cc54:	465b      	mov	r3, fp
 801cc56:	f7e3 fb39 	bl	80002cc <__adddf3>
 801cc5a:	460b      	mov	r3, r1
 801cc5c:	4981      	ldr	r1, [pc, #516]	; (801ce64 <_strtod_l+0xbfc>)
 801cc5e:	4a83      	ldr	r2, [pc, #524]	; (801ce6c <_strtod_l+0xc04>)
 801cc60:	4019      	ands	r1, r3
 801cc62:	4291      	cmp	r1, r2
 801cc64:	4682      	mov	sl, r0
 801cc66:	d95e      	bls.n	801cd26 <_strtod_l+0xabe>
 801cc68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cc6a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801cc6e:	4293      	cmp	r3, r2
 801cc70:	d103      	bne.n	801cc7a <_strtod_l+0xa12>
 801cc72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cc74:	3301      	adds	r3, #1
 801cc76:	f43f ad43 	beq.w	801c700 <_strtod_l+0x498>
 801cc7a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801ce78 <_strtod_l+0xc10>
 801cc7e:	f04f 3aff 	mov.w	sl, #4294967295
 801cc82:	991e      	ldr	r1, [sp, #120]	; 0x78
 801cc84:	4620      	mov	r0, r4
 801cc86:	f002 fa81 	bl	801f18c <_Bfree>
 801cc8a:	9907      	ldr	r1, [sp, #28]
 801cc8c:	4620      	mov	r0, r4
 801cc8e:	f002 fa7d 	bl	801f18c <_Bfree>
 801cc92:	4631      	mov	r1, r6
 801cc94:	4620      	mov	r0, r4
 801cc96:	f002 fa79 	bl	801f18c <_Bfree>
 801cc9a:	4629      	mov	r1, r5
 801cc9c:	4620      	mov	r0, r4
 801cc9e:	f002 fa75 	bl	801f18c <_Bfree>
 801cca2:	e613      	b.n	801c8cc <_strtod_l+0x664>
 801cca4:	f1ba 0f00 	cmp.w	sl, #0
 801cca8:	d11b      	bne.n	801cce2 <_strtod_l+0xa7a>
 801ccaa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ccae:	b9f3      	cbnz	r3, 801ccee <_strtod_l+0xa86>
 801ccb0:	4b6b      	ldr	r3, [pc, #428]	; (801ce60 <_strtod_l+0xbf8>)
 801ccb2:	2200      	movs	r2, #0
 801ccb4:	4640      	mov	r0, r8
 801ccb6:	4649      	mov	r1, r9
 801ccb8:	f7e3 ff30 	bl	8000b1c <__aeabi_dcmplt>
 801ccbc:	b9d0      	cbnz	r0, 801ccf4 <_strtod_l+0xa8c>
 801ccbe:	4640      	mov	r0, r8
 801ccc0:	4649      	mov	r1, r9
 801ccc2:	4b6b      	ldr	r3, [pc, #428]	; (801ce70 <_strtod_l+0xc08>)
 801ccc4:	2200      	movs	r2, #0
 801ccc6:	f7e3 fcb7 	bl	8000638 <__aeabi_dmul>
 801ccca:	4680      	mov	r8, r0
 801cccc:	4689      	mov	r9, r1
 801ccce:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801ccd2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801ccd6:	931b      	str	r3, [sp, #108]	; 0x6c
 801ccd8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801ccdc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801cce0:	e79b      	b.n	801cc1a <_strtod_l+0x9b2>
 801cce2:	f1ba 0f01 	cmp.w	sl, #1
 801cce6:	d102      	bne.n	801ccee <_strtod_l+0xa86>
 801cce8:	2f00      	cmp	r7, #0
 801ccea:	f43f ad7e 	beq.w	801c7ea <_strtod_l+0x582>
 801ccee:	4b61      	ldr	r3, [pc, #388]	; (801ce74 <_strtod_l+0xc0c>)
 801ccf0:	2200      	movs	r2, #0
 801ccf2:	e78c      	b.n	801cc0e <_strtod_l+0x9a6>
 801ccf4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801ce70 <_strtod_l+0xc08>
 801ccf8:	f04f 0800 	mov.w	r8, #0
 801ccfc:	e7e7      	b.n	801ccce <_strtod_l+0xa66>
 801ccfe:	4b5c      	ldr	r3, [pc, #368]	; (801ce70 <_strtod_l+0xc08>)
 801cd00:	4640      	mov	r0, r8
 801cd02:	4649      	mov	r1, r9
 801cd04:	2200      	movs	r2, #0
 801cd06:	f7e3 fc97 	bl	8000638 <__aeabi_dmul>
 801cd0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cd0c:	4680      	mov	r8, r0
 801cd0e:	4689      	mov	r9, r1
 801cd10:	b933      	cbnz	r3, 801cd20 <_strtod_l+0xab8>
 801cd12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cd16:	9012      	str	r0, [sp, #72]	; 0x48
 801cd18:	9313      	str	r3, [sp, #76]	; 0x4c
 801cd1a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801cd1e:	e7dd      	b.n	801ccdc <_strtod_l+0xa74>
 801cd20:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801cd24:	e7f9      	b.n	801cd1a <_strtod_l+0xab2>
 801cd26:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801cd2a:	9b04      	ldr	r3, [sp, #16]
 801cd2c:	2b00      	cmp	r3, #0
 801cd2e:	d1a8      	bne.n	801cc82 <_strtod_l+0xa1a>
 801cd30:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801cd34:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cd36:	0d1b      	lsrs	r3, r3, #20
 801cd38:	051b      	lsls	r3, r3, #20
 801cd3a:	429a      	cmp	r2, r3
 801cd3c:	d1a1      	bne.n	801cc82 <_strtod_l+0xa1a>
 801cd3e:	4640      	mov	r0, r8
 801cd40:	4649      	mov	r1, r9
 801cd42:	f7e4 f829 	bl	8000d98 <__aeabi_d2lz>
 801cd46:	f7e3 fc49 	bl	80005dc <__aeabi_l2d>
 801cd4a:	4602      	mov	r2, r0
 801cd4c:	460b      	mov	r3, r1
 801cd4e:	4640      	mov	r0, r8
 801cd50:	4649      	mov	r1, r9
 801cd52:	f7e3 fab9 	bl	80002c8 <__aeabi_dsub>
 801cd56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cd58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cd5c:	ea43 030a 	orr.w	r3, r3, sl
 801cd60:	4313      	orrs	r3, r2
 801cd62:	4680      	mov	r8, r0
 801cd64:	4689      	mov	r9, r1
 801cd66:	d053      	beq.n	801ce10 <_strtod_l+0xba8>
 801cd68:	a335      	add	r3, pc, #212	; (adr r3, 801ce40 <_strtod_l+0xbd8>)
 801cd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd6e:	f7e3 fed5 	bl	8000b1c <__aeabi_dcmplt>
 801cd72:	2800      	cmp	r0, #0
 801cd74:	f47f acce 	bne.w	801c714 <_strtod_l+0x4ac>
 801cd78:	a333      	add	r3, pc, #204	; (adr r3, 801ce48 <_strtod_l+0xbe0>)
 801cd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd7e:	4640      	mov	r0, r8
 801cd80:	4649      	mov	r1, r9
 801cd82:	f7e3 fee9 	bl	8000b58 <__aeabi_dcmpgt>
 801cd86:	2800      	cmp	r0, #0
 801cd88:	f43f af7b 	beq.w	801cc82 <_strtod_l+0xa1a>
 801cd8c:	e4c2      	b.n	801c714 <_strtod_l+0x4ac>
 801cd8e:	9b04      	ldr	r3, [sp, #16]
 801cd90:	b333      	cbz	r3, 801cde0 <_strtod_l+0xb78>
 801cd92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cd94:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801cd98:	d822      	bhi.n	801cde0 <_strtod_l+0xb78>
 801cd9a:	a32d      	add	r3, pc, #180	; (adr r3, 801ce50 <_strtod_l+0xbe8>)
 801cd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cda0:	4640      	mov	r0, r8
 801cda2:	4649      	mov	r1, r9
 801cda4:	f7e3 fec4 	bl	8000b30 <__aeabi_dcmple>
 801cda8:	b1a0      	cbz	r0, 801cdd4 <_strtod_l+0xb6c>
 801cdaa:	4649      	mov	r1, r9
 801cdac:	4640      	mov	r0, r8
 801cdae:	f7e3 ff1b 	bl	8000be8 <__aeabi_d2uiz>
 801cdb2:	2801      	cmp	r0, #1
 801cdb4:	bf38      	it	cc
 801cdb6:	2001      	movcc	r0, #1
 801cdb8:	f7e3 fbc4 	bl	8000544 <__aeabi_ui2d>
 801cdbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cdbe:	4680      	mov	r8, r0
 801cdc0:	4689      	mov	r9, r1
 801cdc2:	bb13      	cbnz	r3, 801ce0a <_strtod_l+0xba2>
 801cdc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cdc8:	9014      	str	r0, [sp, #80]	; 0x50
 801cdca:	9315      	str	r3, [sp, #84]	; 0x54
 801cdcc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801cdd0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801cdd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cdd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cdd8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801cddc:	1a9b      	subs	r3, r3, r2
 801cdde:	930d      	str	r3, [sp, #52]	; 0x34
 801cde0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801cde4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801cde8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801cdec:	f002 fcfa 	bl	801f7e4 <__ulp>
 801cdf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801cdf4:	ec53 2b10 	vmov	r2, r3, d0
 801cdf8:	f7e3 fc1e 	bl	8000638 <__aeabi_dmul>
 801cdfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ce00:	f7e3 fa64 	bl	80002cc <__adddf3>
 801ce04:	4682      	mov	sl, r0
 801ce06:	468b      	mov	fp, r1
 801ce08:	e78f      	b.n	801cd2a <_strtod_l+0xac2>
 801ce0a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801ce0e:	e7dd      	b.n	801cdcc <_strtod_l+0xb64>
 801ce10:	a311      	add	r3, pc, #68	; (adr r3, 801ce58 <_strtod_l+0xbf0>)
 801ce12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce16:	f7e3 fe81 	bl	8000b1c <__aeabi_dcmplt>
 801ce1a:	e7b4      	b.n	801cd86 <_strtod_l+0xb1e>
 801ce1c:	2300      	movs	r3, #0
 801ce1e:	930e      	str	r3, [sp, #56]	; 0x38
 801ce20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801ce22:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ce24:	6013      	str	r3, [r2, #0]
 801ce26:	f7ff ba65 	b.w	801c2f4 <_strtod_l+0x8c>
 801ce2a:	2b65      	cmp	r3, #101	; 0x65
 801ce2c:	f43f ab5d 	beq.w	801c4ea <_strtod_l+0x282>
 801ce30:	2b45      	cmp	r3, #69	; 0x45
 801ce32:	f43f ab5a 	beq.w	801c4ea <_strtod_l+0x282>
 801ce36:	2201      	movs	r2, #1
 801ce38:	f7ff bb92 	b.w	801c560 <_strtod_l+0x2f8>
 801ce3c:	f3af 8000 	nop.w
 801ce40:	94a03595 	.word	0x94a03595
 801ce44:	3fdfffff 	.word	0x3fdfffff
 801ce48:	35afe535 	.word	0x35afe535
 801ce4c:	3fe00000 	.word	0x3fe00000
 801ce50:	ffc00000 	.word	0xffc00000
 801ce54:	41dfffff 	.word	0x41dfffff
 801ce58:	94a03595 	.word	0x94a03595
 801ce5c:	3fcfffff 	.word	0x3fcfffff
 801ce60:	3ff00000 	.word	0x3ff00000
 801ce64:	7ff00000 	.word	0x7ff00000
 801ce68:	7fe00000 	.word	0x7fe00000
 801ce6c:	7c9fffff 	.word	0x7c9fffff
 801ce70:	3fe00000 	.word	0x3fe00000
 801ce74:	bff00000 	.word	0xbff00000
 801ce78:	7fefffff 	.word	0x7fefffff

0801ce7c <_strtod_r>:
 801ce7c:	4b01      	ldr	r3, [pc, #4]	; (801ce84 <_strtod_r+0x8>)
 801ce7e:	f7ff b9f3 	b.w	801c268 <_strtod_l>
 801ce82:	bf00      	nop
 801ce84:	200001c4 	.word	0x200001c4

0801ce88 <strtok>:
 801ce88:	4b16      	ldr	r3, [pc, #88]	; (801cee4 <strtok+0x5c>)
 801ce8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ce8c:	681e      	ldr	r6, [r3, #0]
 801ce8e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801ce90:	4605      	mov	r5, r0
 801ce92:	b9fc      	cbnz	r4, 801ced4 <strtok+0x4c>
 801ce94:	2050      	movs	r0, #80	; 0x50
 801ce96:	9101      	str	r1, [sp, #4]
 801ce98:	f7fd fdde 	bl	801aa58 <malloc>
 801ce9c:	9901      	ldr	r1, [sp, #4]
 801ce9e:	65b0      	str	r0, [r6, #88]	; 0x58
 801cea0:	4602      	mov	r2, r0
 801cea2:	b920      	cbnz	r0, 801ceae <strtok+0x26>
 801cea4:	4b10      	ldr	r3, [pc, #64]	; (801cee8 <strtok+0x60>)
 801cea6:	4811      	ldr	r0, [pc, #68]	; (801ceec <strtok+0x64>)
 801cea8:	2157      	movs	r1, #87	; 0x57
 801ceaa:	f000 fca3 	bl	801d7f4 <__assert_func>
 801ceae:	e9c0 4400 	strd	r4, r4, [r0]
 801ceb2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801ceb6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801ceba:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801cebe:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801cec2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801cec6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801ceca:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801cece:	6184      	str	r4, [r0, #24]
 801ced0:	7704      	strb	r4, [r0, #28]
 801ced2:	6244      	str	r4, [r0, #36]	; 0x24
 801ced4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801ced6:	2301      	movs	r3, #1
 801ced8:	4628      	mov	r0, r5
 801ceda:	b002      	add	sp, #8
 801cedc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cee0:	f000 b806 	b.w	801cef0 <__strtok_r>
 801cee4:	200000f8 	.word	0x200000f8
 801cee8:	08022cf0 	.word	0x08022cf0
 801ceec:	08022eb0 	.word	0x08022eb0

0801cef0 <__strtok_r>:
 801cef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cef2:	b908      	cbnz	r0, 801cef8 <__strtok_r+0x8>
 801cef4:	6810      	ldr	r0, [r2, #0]
 801cef6:	b188      	cbz	r0, 801cf1c <__strtok_r+0x2c>
 801cef8:	4604      	mov	r4, r0
 801cefa:	4620      	mov	r0, r4
 801cefc:	f814 5b01 	ldrb.w	r5, [r4], #1
 801cf00:	460f      	mov	r7, r1
 801cf02:	f817 6b01 	ldrb.w	r6, [r7], #1
 801cf06:	b91e      	cbnz	r6, 801cf10 <__strtok_r+0x20>
 801cf08:	b965      	cbnz	r5, 801cf24 <__strtok_r+0x34>
 801cf0a:	6015      	str	r5, [r2, #0]
 801cf0c:	4628      	mov	r0, r5
 801cf0e:	e005      	b.n	801cf1c <__strtok_r+0x2c>
 801cf10:	42b5      	cmp	r5, r6
 801cf12:	d1f6      	bne.n	801cf02 <__strtok_r+0x12>
 801cf14:	2b00      	cmp	r3, #0
 801cf16:	d1f0      	bne.n	801cefa <__strtok_r+0xa>
 801cf18:	6014      	str	r4, [r2, #0]
 801cf1a:	7003      	strb	r3, [r0, #0]
 801cf1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cf1e:	461c      	mov	r4, r3
 801cf20:	e00c      	b.n	801cf3c <__strtok_r+0x4c>
 801cf22:	b915      	cbnz	r5, 801cf2a <__strtok_r+0x3a>
 801cf24:	f814 3b01 	ldrb.w	r3, [r4], #1
 801cf28:	460e      	mov	r6, r1
 801cf2a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801cf2e:	42ab      	cmp	r3, r5
 801cf30:	d1f7      	bne.n	801cf22 <__strtok_r+0x32>
 801cf32:	2b00      	cmp	r3, #0
 801cf34:	d0f3      	beq.n	801cf1e <__strtok_r+0x2e>
 801cf36:	2300      	movs	r3, #0
 801cf38:	f804 3c01 	strb.w	r3, [r4, #-1]
 801cf3c:	6014      	str	r4, [r2, #0]
 801cf3e:	e7ed      	b.n	801cf1c <__strtok_r+0x2c>

0801cf40 <_strtol_l.isra.0>:
 801cf40:	2b01      	cmp	r3, #1
 801cf42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf46:	d001      	beq.n	801cf4c <_strtol_l.isra.0+0xc>
 801cf48:	2b24      	cmp	r3, #36	; 0x24
 801cf4a:	d906      	bls.n	801cf5a <_strtol_l.isra.0+0x1a>
 801cf4c:	f7fd fb42 	bl	801a5d4 <__errno>
 801cf50:	2316      	movs	r3, #22
 801cf52:	6003      	str	r3, [r0, #0]
 801cf54:	2000      	movs	r0, #0
 801cf56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cf5a:	4f3a      	ldr	r7, [pc, #232]	; (801d044 <_strtol_l.isra.0+0x104>)
 801cf5c:	468e      	mov	lr, r1
 801cf5e:	4676      	mov	r6, lr
 801cf60:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801cf64:	5de5      	ldrb	r5, [r4, r7]
 801cf66:	f015 0508 	ands.w	r5, r5, #8
 801cf6a:	d1f8      	bne.n	801cf5e <_strtol_l.isra.0+0x1e>
 801cf6c:	2c2d      	cmp	r4, #45	; 0x2d
 801cf6e:	d134      	bne.n	801cfda <_strtol_l.isra.0+0x9a>
 801cf70:	f89e 4000 	ldrb.w	r4, [lr]
 801cf74:	f04f 0801 	mov.w	r8, #1
 801cf78:	f106 0e02 	add.w	lr, r6, #2
 801cf7c:	2b00      	cmp	r3, #0
 801cf7e:	d05c      	beq.n	801d03a <_strtol_l.isra.0+0xfa>
 801cf80:	2b10      	cmp	r3, #16
 801cf82:	d10c      	bne.n	801cf9e <_strtol_l.isra.0+0x5e>
 801cf84:	2c30      	cmp	r4, #48	; 0x30
 801cf86:	d10a      	bne.n	801cf9e <_strtol_l.isra.0+0x5e>
 801cf88:	f89e 4000 	ldrb.w	r4, [lr]
 801cf8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801cf90:	2c58      	cmp	r4, #88	; 0x58
 801cf92:	d14d      	bne.n	801d030 <_strtol_l.isra.0+0xf0>
 801cf94:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801cf98:	2310      	movs	r3, #16
 801cf9a:	f10e 0e02 	add.w	lr, lr, #2
 801cf9e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801cfa2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801cfa6:	2600      	movs	r6, #0
 801cfa8:	fbbc f9f3 	udiv	r9, ip, r3
 801cfac:	4635      	mov	r5, r6
 801cfae:	fb03 ca19 	mls	sl, r3, r9, ip
 801cfb2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801cfb6:	2f09      	cmp	r7, #9
 801cfb8:	d818      	bhi.n	801cfec <_strtol_l.isra.0+0xac>
 801cfba:	463c      	mov	r4, r7
 801cfbc:	42a3      	cmp	r3, r4
 801cfbe:	dd24      	ble.n	801d00a <_strtol_l.isra.0+0xca>
 801cfc0:	2e00      	cmp	r6, #0
 801cfc2:	db1f      	blt.n	801d004 <_strtol_l.isra.0+0xc4>
 801cfc4:	45a9      	cmp	r9, r5
 801cfc6:	d31d      	bcc.n	801d004 <_strtol_l.isra.0+0xc4>
 801cfc8:	d101      	bne.n	801cfce <_strtol_l.isra.0+0x8e>
 801cfca:	45a2      	cmp	sl, r4
 801cfcc:	db1a      	blt.n	801d004 <_strtol_l.isra.0+0xc4>
 801cfce:	fb05 4503 	mla	r5, r5, r3, r4
 801cfd2:	2601      	movs	r6, #1
 801cfd4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801cfd8:	e7eb      	b.n	801cfb2 <_strtol_l.isra.0+0x72>
 801cfda:	2c2b      	cmp	r4, #43	; 0x2b
 801cfdc:	bf08      	it	eq
 801cfde:	f89e 4000 	ldrbeq.w	r4, [lr]
 801cfe2:	46a8      	mov	r8, r5
 801cfe4:	bf08      	it	eq
 801cfe6:	f106 0e02 	addeq.w	lr, r6, #2
 801cfea:	e7c7      	b.n	801cf7c <_strtol_l.isra.0+0x3c>
 801cfec:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801cff0:	2f19      	cmp	r7, #25
 801cff2:	d801      	bhi.n	801cff8 <_strtol_l.isra.0+0xb8>
 801cff4:	3c37      	subs	r4, #55	; 0x37
 801cff6:	e7e1      	b.n	801cfbc <_strtol_l.isra.0+0x7c>
 801cff8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801cffc:	2f19      	cmp	r7, #25
 801cffe:	d804      	bhi.n	801d00a <_strtol_l.isra.0+0xca>
 801d000:	3c57      	subs	r4, #87	; 0x57
 801d002:	e7db      	b.n	801cfbc <_strtol_l.isra.0+0x7c>
 801d004:	f04f 36ff 	mov.w	r6, #4294967295
 801d008:	e7e4      	b.n	801cfd4 <_strtol_l.isra.0+0x94>
 801d00a:	2e00      	cmp	r6, #0
 801d00c:	da05      	bge.n	801d01a <_strtol_l.isra.0+0xda>
 801d00e:	2322      	movs	r3, #34	; 0x22
 801d010:	6003      	str	r3, [r0, #0]
 801d012:	4665      	mov	r5, ip
 801d014:	b942      	cbnz	r2, 801d028 <_strtol_l.isra.0+0xe8>
 801d016:	4628      	mov	r0, r5
 801d018:	e79d      	b.n	801cf56 <_strtol_l.isra.0+0x16>
 801d01a:	f1b8 0f00 	cmp.w	r8, #0
 801d01e:	d000      	beq.n	801d022 <_strtol_l.isra.0+0xe2>
 801d020:	426d      	negs	r5, r5
 801d022:	2a00      	cmp	r2, #0
 801d024:	d0f7      	beq.n	801d016 <_strtol_l.isra.0+0xd6>
 801d026:	b10e      	cbz	r6, 801d02c <_strtol_l.isra.0+0xec>
 801d028:	f10e 31ff 	add.w	r1, lr, #4294967295
 801d02c:	6011      	str	r1, [r2, #0]
 801d02e:	e7f2      	b.n	801d016 <_strtol_l.isra.0+0xd6>
 801d030:	2430      	movs	r4, #48	; 0x30
 801d032:	2b00      	cmp	r3, #0
 801d034:	d1b3      	bne.n	801cf9e <_strtol_l.isra.0+0x5e>
 801d036:	2308      	movs	r3, #8
 801d038:	e7b1      	b.n	801cf9e <_strtol_l.isra.0+0x5e>
 801d03a:	2c30      	cmp	r4, #48	; 0x30
 801d03c:	d0a4      	beq.n	801cf88 <_strtol_l.isra.0+0x48>
 801d03e:	230a      	movs	r3, #10
 801d040:	e7ad      	b.n	801cf9e <_strtol_l.isra.0+0x5e>
 801d042:	bf00      	nop
 801d044:	08022b89 	.word	0x08022b89

0801d048 <_strtol_r>:
 801d048:	f7ff bf7a 	b.w	801cf40 <_strtol_l.isra.0>

0801d04c <strtol>:
 801d04c:	4613      	mov	r3, r2
 801d04e:	460a      	mov	r2, r1
 801d050:	4601      	mov	r1, r0
 801d052:	4802      	ldr	r0, [pc, #8]	; (801d05c <strtol+0x10>)
 801d054:	6800      	ldr	r0, [r0, #0]
 801d056:	f7ff bf73 	b.w	801cf40 <_strtol_l.isra.0>
 801d05a:	bf00      	nop
 801d05c:	200000f8 	.word	0x200000f8

0801d060 <_strtoul_l.isra.0>:
 801d060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d064:	4e3b      	ldr	r6, [pc, #236]	; (801d154 <_strtoul_l.isra.0+0xf4>)
 801d066:	4686      	mov	lr, r0
 801d068:	468c      	mov	ip, r1
 801d06a:	4660      	mov	r0, ip
 801d06c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801d070:	5da5      	ldrb	r5, [r4, r6]
 801d072:	f015 0508 	ands.w	r5, r5, #8
 801d076:	d1f8      	bne.n	801d06a <_strtoul_l.isra.0+0xa>
 801d078:	2c2d      	cmp	r4, #45	; 0x2d
 801d07a:	d134      	bne.n	801d0e6 <_strtoul_l.isra.0+0x86>
 801d07c:	f89c 4000 	ldrb.w	r4, [ip]
 801d080:	f04f 0801 	mov.w	r8, #1
 801d084:	f100 0c02 	add.w	ip, r0, #2
 801d088:	2b00      	cmp	r3, #0
 801d08a:	d05e      	beq.n	801d14a <_strtoul_l.isra.0+0xea>
 801d08c:	2b10      	cmp	r3, #16
 801d08e:	d10c      	bne.n	801d0aa <_strtoul_l.isra.0+0x4a>
 801d090:	2c30      	cmp	r4, #48	; 0x30
 801d092:	d10a      	bne.n	801d0aa <_strtoul_l.isra.0+0x4a>
 801d094:	f89c 0000 	ldrb.w	r0, [ip]
 801d098:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801d09c:	2858      	cmp	r0, #88	; 0x58
 801d09e:	d14f      	bne.n	801d140 <_strtoul_l.isra.0+0xe0>
 801d0a0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801d0a4:	2310      	movs	r3, #16
 801d0a6:	f10c 0c02 	add.w	ip, ip, #2
 801d0aa:	f04f 37ff 	mov.w	r7, #4294967295
 801d0ae:	2500      	movs	r5, #0
 801d0b0:	fbb7 f7f3 	udiv	r7, r7, r3
 801d0b4:	fb03 f907 	mul.w	r9, r3, r7
 801d0b8:	ea6f 0909 	mvn.w	r9, r9
 801d0bc:	4628      	mov	r0, r5
 801d0be:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801d0c2:	2e09      	cmp	r6, #9
 801d0c4:	d818      	bhi.n	801d0f8 <_strtoul_l.isra.0+0x98>
 801d0c6:	4634      	mov	r4, r6
 801d0c8:	42a3      	cmp	r3, r4
 801d0ca:	dd24      	ble.n	801d116 <_strtoul_l.isra.0+0xb6>
 801d0cc:	2d00      	cmp	r5, #0
 801d0ce:	db1f      	blt.n	801d110 <_strtoul_l.isra.0+0xb0>
 801d0d0:	4287      	cmp	r7, r0
 801d0d2:	d31d      	bcc.n	801d110 <_strtoul_l.isra.0+0xb0>
 801d0d4:	d101      	bne.n	801d0da <_strtoul_l.isra.0+0x7a>
 801d0d6:	45a1      	cmp	r9, r4
 801d0d8:	db1a      	blt.n	801d110 <_strtoul_l.isra.0+0xb0>
 801d0da:	fb00 4003 	mla	r0, r0, r3, r4
 801d0de:	2501      	movs	r5, #1
 801d0e0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801d0e4:	e7eb      	b.n	801d0be <_strtoul_l.isra.0+0x5e>
 801d0e6:	2c2b      	cmp	r4, #43	; 0x2b
 801d0e8:	bf08      	it	eq
 801d0ea:	f89c 4000 	ldrbeq.w	r4, [ip]
 801d0ee:	46a8      	mov	r8, r5
 801d0f0:	bf08      	it	eq
 801d0f2:	f100 0c02 	addeq.w	ip, r0, #2
 801d0f6:	e7c7      	b.n	801d088 <_strtoul_l.isra.0+0x28>
 801d0f8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801d0fc:	2e19      	cmp	r6, #25
 801d0fe:	d801      	bhi.n	801d104 <_strtoul_l.isra.0+0xa4>
 801d100:	3c37      	subs	r4, #55	; 0x37
 801d102:	e7e1      	b.n	801d0c8 <_strtoul_l.isra.0+0x68>
 801d104:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801d108:	2e19      	cmp	r6, #25
 801d10a:	d804      	bhi.n	801d116 <_strtoul_l.isra.0+0xb6>
 801d10c:	3c57      	subs	r4, #87	; 0x57
 801d10e:	e7db      	b.n	801d0c8 <_strtoul_l.isra.0+0x68>
 801d110:	f04f 35ff 	mov.w	r5, #4294967295
 801d114:	e7e4      	b.n	801d0e0 <_strtoul_l.isra.0+0x80>
 801d116:	2d00      	cmp	r5, #0
 801d118:	da07      	bge.n	801d12a <_strtoul_l.isra.0+0xca>
 801d11a:	2322      	movs	r3, #34	; 0x22
 801d11c:	f8ce 3000 	str.w	r3, [lr]
 801d120:	f04f 30ff 	mov.w	r0, #4294967295
 801d124:	b942      	cbnz	r2, 801d138 <_strtoul_l.isra.0+0xd8>
 801d126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d12a:	f1b8 0f00 	cmp.w	r8, #0
 801d12e:	d000      	beq.n	801d132 <_strtoul_l.isra.0+0xd2>
 801d130:	4240      	negs	r0, r0
 801d132:	2a00      	cmp	r2, #0
 801d134:	d0f7      	beq.n	801d126 <_strtoul_l.isra.0+0xc6>
 801d136:	b10d      	cbz	r5, 801d13c <_strtoul_l.isra.0+0xdc>
 801d138:	f10c 31ff 	add.w	r1, ip, #4294967295
 801d13c:	6011      	str	r1, [r2, #0]
 801d13e:	e7f2      	b.n	801d126 <_strtoul_l.isra.0+0xc6>
 801d140:	2430      	movs	r4, #48	; 0x30
 801d142:	2b00      	cmp	r3, #0
 801d144:	d1b1      	bne.n	801d0aa <_strtoul_l.isra.0+0x4a>
 801d146:	2308      	movs	r3, #8
 801d148:	e7af      	b.n	801d0aa <_strtoul_l.isra.0+0x4a>
 801d14a:	2c30      	cmp	r4, #48	; 0x30
 801d14c:	d0a2      	beq.n	801d094 <_strtoul_l.isra.0+0x34>
 801d14e:	230a      	movs	r3, #10
 801d150:	e7ab      	b.n	801d0aa <_strtoul_l.isra.0+0x4a>
 801d152:	bf00      	nop
 801d154:	08022b89 	.word	0x08022b89

0801d158 <_strtoul_r>:
 801d158:	f7ff bf82 	b.w	801d060 <_strtoul_l.isra.0>

0801d15c <strtoul>:
 801d15c:	4613      	mov	r3, r2
 801d15e:	460a      	mov	r2, r1
 801d160:	4601      	mov	r1, r0
 801d162:	4802      	ldr	r0, [pc, #8]	; (801d16c <strtoul+0x10>)
 801d164:	6800      	ldr	r0, [r0, #0]
 801d166:	f7ff bf7b 	b.w	801d060 <_strtoul_l.isra.0>
 801d16a:	bf00      	nop
 801d16c:	200000f8 	.word	0x200000f8

0801d170 <__tzcalc_limits>:
 801d170:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d174:	4680      	mov	r8, r0
 801d176:	f001 fe7d 	bl	801ee74 <__gettzinfo>
 801d17a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801d17e:	4598      	cmp	r8, r3
 801d180:	f340 8098 	ble.w	801d2b4 <__tzcalc_limits+0x144>
 801d184:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801d188:	4443      	add	r3, r8
 801d18a:	109b      	asrs	r3, r3, #2
 801d18c:	f240 126d 	movw	r2, #365	; 0x16d
 801d190:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801d194:	fb02 3505 	mla	r5, r2, r5, r3
 801d198:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801d19c:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801d1a0:	fb93 f3f2 	sdiv	r3, r3, r2
 801d1a4:	441d      	add	r5, r3
 801d1a6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801d1aa:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801d1ae:	fb98 f7f3 	sdiv	r7, r8, r3
 801d1b2:	fb03 8717 	mls	r7, r3, r7, r8
 801d1b6:	4442      	add	r2, r8
 801d1b8:	fab7 fc87 	clz	ip, r7
 801d1bc:	fbb2 f2f3 	udiv	r2, r2, r3
 801d1c0:	f008 0303 	and.w	r3, r8, #3
 801d1c4:	4415      	add	r5, r2
 801d1c6:	2264      	movs	r2, #100	; 0x64
 801d1c8:	f8c0 8004 	str.w	r8, [r0, #4]
 801d1cc:	fb98 f6f2 	sdiv	r6, r8, r2
 801d1d0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801d1d4:	fb02 8616 	mls	r6, r2, r6, r8
 801d1d8:	4604      	mov	r4, r0
 801d1da:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801d1de:	9300      	str	r3, [sp, #0]
 801d1e0:	f04f 0e07 	mov.w	lr, #7
 801d1e4:	7a22      	ldrb	r2, [r4, #8]
 801d1e6:	6963      	ldr	r3, [r4, #20]
 801d1e8:	2a4a      	cmp	r2, #74	; 0x4a
 801d1ea:	d128      	bne.n	801d23e <__tzcalc_limits+0xce>
 801d1ec:	9900      	ldr	r1, [sp, #0]
 801d1ee:	18ea      	adds	r2, r5, r3
 801d1f0:	b901      	cbnz	r1, 801d1f4 <__tzcalc_limits+0x84>
 801d1f2:	b906      	cbnz	r6, 801d1f6 <__tzcalc_limits+0x86>
 801d1f4:	bb0f      	cbnz	r7, 801d23a <__tzcalc_limits+0xca>
 801d1f6:	2b3b      	cmp	r3, #59	; 0x3b
 801d1f8:	bfd4      	ite	le
 801d1fa:	2300      	movle	r3, #0
 801d1fc:	2301      	movgt	r3, #1
 801d1fe:	4413      	add	r3, r2
 801d200:	1e5a      	subs	r2, r3, #1
 801d202:	69a3      	ldr	r3, [r4, #24]
 801d204:	492c      	ldr	r1, [pc, #176]	; (801d2b8 <__tzcalc_limits+0x148>)
 801d206:	fb01 3202 	mla	r2, r1, r2, r3
 801d20a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d20c:	4413      	add	r3, r2
 801d20e:	461a      	mov	r2, r3
 801d210:	17db      	asrs	r3, r3, #31
 801d212:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801d216:	3428      	adds	r4, #40	; 0x28
 801d218:	45a3      	cmp	fp, r4
 801d21a:	d1e3      	bne.n	801d1e4 <__tzcalc_limits+0x74>
 801d21c:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801d220:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 801d224:	4294      	cmp	r4, r2
 801d226:	eb75 0303 	sbcs.w	r3, r5, r3
 801d22a:	bfb4      	ite	lt
 801d22c:	2301      	movlt	r3, #1
 801d22e:	2300      	movge	r3, #0
 801d230:	6003      	str	r3, [r0, #0]
 801d232:	2001      	movs	r0, #1
 801d234:	b003      	add	sp, #12
 801d236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d23a:	2300      	movs	r3, #0
 801d23c:	e7df      	b.n	801d1fe <__tzcalc_limits+0x8e>
 801d23e:	2a44      	cmp	r2, #68	; 0x44
 801d240:	d101      	bne.n	801d246 <__tzcalc_limits+0xd6>
 801d242:	18ea      	adds	r2, r5, r3
 801d244:	e7dd      	b.n	801d202 <__tzcalc_limits+0x92>
 801d246:	9a00      	ldr	r2, [sp, #0]
 801d248:	bb72      	cbnz	r2, 801d2a8 <__tzcalc_limits+0x138>
 801d24a:	2e00      	cmp	r6, #0
 801d24c:	bf0c      	ite	eq
 801d24e:	46e0      	moveq	r8, ip
 801d250:	f04f 0801 	movne.w	r8, #1
 801d254:	4919      	ldr	r1, [pc, #100]	; (801d2bc <__tzcalc_limits+0x14c>)
 801d256:	68e2      	ldr	r2, [r4, #12]
 801d258:	9201      	str	r2, [sp, #4]
 801d25a:	f04f 0a30 	mov.w	sl, #48	; 0x30
 801d25e:	fb0a 1808 	mla	r8, sl, r8, r1
 801d262:	462a      	mov	r2, r5
 801d264:	f04f 0900 	mov.w	r9, #0
 801d268:	f1a8 0804 	sub.w	r8, r8, #4
 801d26c:	9901      	ldr	r1, [sp, #4]
 801d26e:	f109 0901 	add.w	r9, r9, #1
 801d272:	4549      	cmp	r1, r9
 801d274:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 801d278:	dc18      	bgt.n	801d2ac <__tzcalc_limits+0x13c>
 801d27a:	f102 0804 	add.w	r8, r2, #4
 801d27e:	fb98 f9fe 	sdiv	r9, r8, lr
 801d282:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801d286:	eba8 0909 	sub.w	r9, r8, r9
 801d28a:	ebb3 0909 	subs.w	r9, r3, r9
 801d28e:	6923      	ldr	r3, [r4, #16]
 801d290:	f103 33ff 	add.w	r3, r3, #4294967295
 801d294:	bf48      	it	mi
 801d296:	f109 0907 	addmi.w	r9, r9, #7
 801d29a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801d29e:	444b      	add	r3, r9
 801d2a0:	4553      	cmp	r3, sl
 801d2a2:	da05      	bge.n	801d2b0 <__tzcalc_limits+0x140>
 801d2a4:	441a      	add	r2, r3
 801d2a6:	e7ac      	b.n	801d202 <__tzcalc_limits+0x92>
 801d2a8:	46e0      	mov	r8, ip
 801d2aa:	e7d3      	b.n	801d254 <__tzcalc_limits+0xe4>
 801d2ac:	4452      	add	r2, sl
 801d2ae:	e7dd      	b.n	801d26c <__tzcalc_limits+0xfc>
 801d2b0:	3b07      	subs	r3, #7
 801d2b2:	e7f5      	b.n	801d2a0 <__tzcalc_limits+0x130>
 801d2b4:	2000      	movs	r0, #0
 801d2b6:	e7bd      	b.n	801d234 <__tzcalc_limits+0xc4>
 801d2b8:	00015180 	.word	0x00015180
 801d2bc:	08022dc8 	.word	0x08022dc8

0801d2c0 <__tz_lock>:
 801d2c0:	4801      	ldr	r0, [pc, #4]	; (801d2c8 <__tz_lock+0x8>)
 801d2c2:	f7fd bbc4 	b.w	801aa4e <__retarget_lock_acquire>
 801d2c6:	bf00      	nop
 801d2c8:	20009d13 	.word	0x20009d13

0801d2cc <__tz_unlock>:
 801d2cc:	4801      	ldr	r0, [pc, #4]	; (801d2d4 <__tz_unlock+0x8>)
 801d2ce:	f7fd bbc0 	b.w	801aa52 <__retarget_lock_release>
 801d2d2:	bf00      	nop
 801d2d4:	20009d13 	.word	0x20009d13

0801d2d8 <_tzset_unlocked>:
 801d2d8:	4b01      	ldr	r3, [pc, #4]	; (801d2e0 <_tzset_unlocked+0x8>)
 801d2da:	6818      	ldr	r0, [r3, #0]
 801d2dc:	f000 b802 	b.w	801d2e4 <_tzset_unlocked_r>
 801d2e0:	200000f8 	.word	0x200000f8

0801d2e4 <_tzset_unlocked_r>:
 801d2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2e8:	b08d      	sub	sp, #52	; 0x34
 801d2ea:	4607      	mov	r7, r0
 801d2ec:	f001 fdc2 	bl	801ee74 <__gettzinfo>
 801d2f0:	49ae      	ldr	r1, [pc, #696]	; (801d5ac <_tzset_unlocked_r+0x2c8>)
 801d2f2:	4eaf      	ldr	r6, [pc, #700]	; (801d5b0 <_tzset_unlocked_r+0x2cc>)
 801d2f4:	4605      	mov	r5, r0
 801d2f6:	4638      	mov	r0, r7
 801d2f8:	f001 fdb4 	bl	801ee64 <_getenv_r>
 801d2fc:	4604      	mov	r4, r0
 801d2fe:	b970      	cbnz	r0, 801d31e <_tzset_unlocked_r+0x3a>
 801d300:	4bac      	ldr	r3, [pc, #688]	; (801d5b4 <_tzset_unlocked_r+0x2d0>)
 801d302:	4aad      	ldr	r2, [pc, #692]	; (801d5b8 <_tzset_unlocked_r+0x2d4>)
 801d304:	6018      	str	r0, [r3, #0]
 801d306:	4bad      	ldr	r3, [pc, #692]	; (801d5bc <_tzset_unlocked_r+0x2d8>)
 801d308:	6018      	str	r0, [r3, #0]
 801d30a:	4bad      	ldr	r3, [pc, #692]	; (801d5c0 <_tzset_unlocked_r+0x2dc>)
 801d30c:	6830      	ldr	r0, [r6, #0]
 801d30e:	e9c3 2200 	strd	r2, r2, [r3]
 801d312:	f7fd fba9 	bl	801aa68 <free>
 801d316:	6034      	str	r4, [r6, #0]
 801d318:	b00d      	add	sp, #52	; 0x34
 801d31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d31e:	6831      	ldr	r1, [r6, #0]
 801d320:	2900      	cmp	r1, #0
 801d322:	d15f      	bne.n	801d3e4 <_tzset_unlocked_r+0x100>
 801d324:	6830      	ldr	r0, [r6, #0]
 801d326:	f7fd fb9f 	bl	801aa68 <free>
 801d32a:	4620      	mov	r0, r4
 801d32c:	f7e2 ff6a 	bl	8000204 <strlen>
 801d330:	1c41      	adds	r1, r0, #1
 801d332:	4638      	mov	r0, r7
 801d334:	f7fd fe9e 	bl	801b074 <_malloc_r>
 801d338:	6030      	str	r0, [r6, #0]
 801d33a:	2800      	cmp	r0, #0
 801d33c:	d157      	bne.n	801d3ee <_tzset_unlocked_r+0x10a>
 801d33e:	7823      	ldrb	r3, [r4, #0]
 801d340:	4aa0      	ldr	r2, [pc, #640]	; (801d5c4 <_tzset_unlocked_r+0x2e0>)
 801d342:	49a1      	ldr	r1, [pc, #644]	; (801d5c8 <_tzset_unlocked_r+0x2e4>)
 801d344:	2b3a      	cmp	r3, #58	; 0x3a
 801d346:	bf08      	it	eq
 801d348:	3401      	addeq	r4, #1
 801d34a:	ae0a      	add	r6, sp, #40	; 0x28
 801d34c:	4633      	mov	r3, r6
 801d34e:	4620      	mov	r0, r4
 801d350:	f7fe fed6 	bl	801c100 <siscanf>
 801d354:	2800      	cmp	r0, #0
 801d356:	dddf      	ble.n	801d318 <_tzset_unlocked_r+0x34>
 801d358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d35a:	18e7      	adds	r7, r4, r3
 801d35c:	5ce3      	ldrb	r3, [r4, r3]
 801d35e:	2b2d      	cmp	r3, #45	; 0x2d
 801d360:	d149      	bne.n	801d3f6 <_tzset_unlocked_r+0x112>
 801d362:	3701      	adds	r7, #1
 801d364:	f04f 34ff 	mov.w	r4, #4294967295
 801d368:	f10d 0a20 	add.w	sl, sp, #32
 801d36c:	f10d 0b1e 	add.w	fp, sp, #30
 801d370:	f04f 0800 	mov.w	r8, #0
 801d374:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801d378:	4994      	ldr	r1, [pc, #592]	; (801d5cc <_tzset_unlocked_r+0x2e8>)
 801d37a:	9603      	str	r6, [sp, #12]
 801d37c:	f8cd b000 	str.w	fp, [sp]
 801d380:	4633      	mov	r3, r6
 801d382:	aa07      	add	r2, sp, #28
 801d384:	4638      	mov	r0, r7
 801d386:	f8ad 801e 	strh.w	r8, [sp, #30]
 801d38a:	f8ad 8020 	strh.w	r8, [sp, #32]
 801d38e:	f7fe feb7 	bl	801c100 <siscanf>
 801d392:	4540      	cmp	r0, r8
 801d394:	ddc0      	ble.n	801d318 <_tzset_unlocked_r+0x34>
 801d396:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801d39a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d39e:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801d5d8 <_tzset_unlocked_r+0x2f4>
 801d3a2:	213c      	movs	r1, #60	; 0x3c
 801d3a4:	fb01 2203 	mla	r2, r1, r3, r2
 801d3a8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801d3ac:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801d3b0:	fb01 2303 	mla	r3, r1, r3, r2
 801d3b4:	435c      	muls	r4, r3
 801d3b6:	62ac      	str	r4, [r5, #40]	; 0x28
 801d3b8:	4c81      	ldr	r4, [pc, #516]	; (801d5c0 <_tzset_unlocked_r+0x2dc>)
 801d3ba:	4b82      	ldr	r3, [pc, #520]	; (801d5c4 <_tzset_unlocked_r+0x2e0>)
 801d3bc:	6023      	str	r3, [r4, #0]
 801d3be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d3c0:	4981      	ldr	r1, [pc, #516]	; (801d5c8 <_tzset_unlocked_r+0x2e4>)
 801d3c2:	441f      	add	r7, r3
 801d3c4:	464a      	mov	r2, r9
 801d3c6:	4633      	mov	r3, r6
 801d3c8:	4638      	mov	r0, r7
 801d3ca:	f7fe fe99 	bl	801c100 <siscanf>
 801d3ce:	4540      	cmp	r0, r8
 801d3d0:	dc16      	bgt.n	801d400 <_tzset_unlocked_r+0x11c>
 801d3d2:	6823      	ldr	r3, [r4, #0]
 801d3d4:	6063      	str	r3, [r4, #4]
 801d3d6:	4b77      	ldr	r3, [pc, #476]	; (801d5b4 <_tzset_unlocked_r+0x2d0>)
 801d3d8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801d3da:	601a      	str	r2, [r3, #0]
 801d3dc:	4b77      	ldr	r3, [pc, #476]	; (801d5bc <_tzset_unlocked_r+0x2d8>)
 801d3de:	f8c3 8000 	str.w	r8, [r3]
 801d3e2:	e799      	b.n	801d318 <_tzset_unlocked_r+0x34>
 801d3e4:	f7e2 ff04 	bl	80001f0 <strcmp>
 801d3e8:	2800      	cmp	r0, #0
 801d3ea:	d19b      	bne.n	801d324 <_tzset_unlocked_r+0x40>
 801d3ec:	e794      	b.n	801d318 <_tzset_unlocked_r+0x34>
 801d3ee:	4621      	mov	r1, r4
 801d3f0:	f7fe ff04 	bl	801c1fc <strcpy>
 801d3f4:	e7a3      	b.n	801d33e <_tzset_unlocked_r+0x5a>
 801d3f6:	2b2b      	cmp	r3, #43	; 0x2b
 801d3f8:	bf08      	it	eq
 801d3fa:	3701      	addeq	r7, #1
 801d3fc:	2401      	movs	r4, #1
 801d3fe:	e7b3      	b.n	801d368 <_tzset_unlocked_r+0x84>
 801d400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d402:	f8c4 9004 	str.w	r9, [r4, #4]
 801d406:	18fc      	adds	r4, r7, r3
 801d408:	5cfb      	ldrb	r3, [r7, r3]
 801d40a:	2b2d      	cmp	r3, #45	; 0x2d
 801d40c:	f040 808b 	bne.w	801d526 <_tzset_unlocked_r+0x242>
 801d410:	3401      	adds	r4, #1
 801d412:	f04f 37ff 	mov.w	r7, #4294967295
 801d416:	2300      	movs	r3, #0
 801d418:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d41c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d420:	f8ad 3020 	strh.w	r3, [sp, #32]
 801d424:	930a      	str	r3, [sp, #40]	; 0x28
 801d426:	e9cd a602 	strd	sl, r6, [sp, #8]
 801d42a:	e9cd b600 	strd	fp, r6, [sp]
 801d42e:	4967      	ldr	r1, [pc, #412]	; (801d5cc <_tzset_unlocked_r+0x2e8>)
 801d430:	4633      	mov	r3, r6
 801d432:	aa07      	add	r2, sp, #28
 801d434:	4620      	mov	r0, r4
 801d436:	f7fe fe63 	bl	801c100 <siscanf>
 801d43a:	2800      	cmp	r0, #0
 801d43c:	dc78      	bgt.n	801d530 <_tzset_unlocked_r+0x24c>
 801d43e:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801d440:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 801d444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d446:	652f      	str	r7, [r5, #80]	; 0x50
 801d448:	441c      	add	r4, r3
 801d44a:	462f      	mov	r7, r5
 801d44c:	f04f 0900 	mov.w	r9, #0
 801d450:	7823      	ldrb	r3, [r4, #0]
 801d452:	2b2c      	cmp	r3, #44	; 0x2c
 801d454:	bf08      	it	eq
 801d456:	3401      	addeq	r4, #1
 801d458:	f894 8000 	ldrb.w	r8, [r4]
 801d45c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801d460:	d178      	bne.n	801d554 <_tzset_unlocked_r+0x270>
 801d462:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801d466:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801d46a:	ab09      	add	r3, sp, #36	; 0x24
 801d46c:	9300      	str	r3, [sp, #0]
 801d46e:	4958      	ldr	r1, [pc, #352]	; (801d5d0 <_tzset_unlocked_r+0x2ec>)
 801d470:	9603      	str	r6, [sp, #12]
 801d472:	4633      	mov	r3, r6
 801d474:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801d478:	4620      	mov	r0, r4
 801d47a:	f7fe fe41 	bl	801c100 <siscanf>
 801d47e:	2803      	cmp	r0, #3
 801d480:	f47f af4a 	bne.w	801d318 <_tzset_unlocked_r+0x34>
 801d484:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801d488:	1e4b      	subs	r3, r1, #1
 801d48a:	2b0b      	cmp	r3, #11
 801d48c:	f63f af44 	bhi.w	801d318 <_tzset_unlocked_r+0x34>
 801d490:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801d494:	1e53      	subs	r3, r2, #1
 801d496:	2b04      	cmp	r3, #4
 801d498:	f63f af3e 	bhi.w	801d318 <_tzset_unlocked_r+0x34>
 801d49c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801d4a0:	2b06      	cmp	r3, #6
 801d4a2:	f63f af39 	bhi.w	801d318 <_tzset_unlocked_r+0x34>
 801d4a6:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801d4aa:	f887 8008 	strb.w	r8, [r7, #8]
 801d4ae:	617b      	str	r3, [r7, #20]
 801d4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d4b2:	eb04 0803 	add.w	r8, r4, r3
 801d4b6:	2302      	movs	r3, #2
 801d4b8:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d4bc:	2300      	movs	r3, #0
 801d4be:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d4c2:	f8ad 3020 	strh.w	r3, [sp, #32]
 801d4c6:	930a      	str	r3, [sp, #40]	; 0x28
 801d4c8:	f898 3000 	ldrb.w	r3, [r8]
 801d4cc:	2b2f      	cmp	r3, #47	; 0x2f
 801d4ce:	d109      	bne.n	801d4e4 <_tzset_unlocked_r+0x200>
 801d4d0:	e9cd a602 	strd	sl, r6, [sp, #8]
 801d4d4:	e9cd b600 	strd	fp, r6, [sp]
 801d4d8:	493e      	ldr	r1, [pc, #248]	; (801d5d4 <_tzset_unlocked_r+0x2f0>)
 801d4da:	4633      	mov	r3, r6
 801d4dc:	aa07      	add	r2, sp, #28
 801d4de:	4640      	mov	r0, r8
 801d4e0:	f7fe fe0e 	bl	801c100 <siscanf>
 801d4e4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801d4e8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d4ec:	213c      	movs	r1, #60	; 0x3c
 801d4ee:	fb01 2203 	mla	r2, r1, r3, r2
 801d4f2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801d4f6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801d4fa:	fb01 2303 	mla	r3, r1, r3, r2
 801d4fe:	61bb      	str	r3, [r7, #24]
 801d500:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d502:	3728      	adds	r7, #40	; 0x28
 801d504:	4444      	add	r4, r8
 801d506:	f1b9 0f00 	cmp.w	r9, #0
 801d50a:	d020      	beq.n	801d54e <_tzset_unlocked_r+0x26a>
 801d50c:	6868      	ldr	r0, [r5, #4]
 801d50e:	f7ff fe2f 	bl	801d170 <__tzcalc_limits>
 801d512:	4b28      	ldr	r3, [pc, #160]	; (801d5b4 <_tzset_unlocked_r+0x2d0>)
 801d514:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801d516:	601a      	str	r2, [r3, #0]
 801d518:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801d51a:	1a9b      	subs	r3, r3, r2
 801d51c:	4a27      	ldr	r2, [pc, #156]	; (801d5bc <_tzset_unlocked_r+0x2d8>)
 801d51e:	bf18      	it	ne
 801d520:	2301      	movne	r3, #1
 801d522:	6013      	str	r3, [r2, #0]
 801d524:	e6f8      	b.n	801d318 <_tzset_unlocked_r+0x34>
 801d526:	2b2b      	cmp	r3, #43	; 0x2b
 801d528:	bf08      	it	eq
 801d52a:	3401      	addeq	r4, #1
 801d52c:	2701      	movs	r7, #1
 801d52e:	e772      	b.n	801d416 <_tzset_unlocked_r+0x132>
 801d530:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801d534:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d538:	213c      	movs	r1, #60	; 0x3c
 801d53a:	fb01 2203 	mla	r2, r1, r3, r2
 801d53e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801d542:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801d546:	fb01 2303 	mla	r3, r1, r3, r2
 801d54a:	435f      	muls	r7, r3
 801d54c:	e77a      	b.n	801d444 <_tzset_unlocked_r+0x160>
 801d54e:	f04f 0901 	mov.w	r9, #1
 801d552:	e77d      	b.n	801d450 <_tzset_unlocked_r+0x16c>
 801d554:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801d558:	bf06      	itte	eq
 801d55a:	3401      	addeq	r4, #1
 801d55c:	4643      	moveq	r3, r8
 801d55e:	2344      	movne	r3, #68	; 0x44
 801d560:	220a      	movs	r2, #10
 801d562:	a90b      	add	r1, sp, #44	; 0x2c
 801d564:	4620      	mov	r0, r4
 801d566:	9305      	str	r3, [sp, #20]
 801d568:	f7ff fdf8 	bl	801d15c <strtoul>
 801d56c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801d570:	9b05      	ldr	r3, [sp, #20]
 801d572:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801d576:	45a0      	cmp	r8, r4
 801d578:	d114      	bne.n	801d5a4 <_tzset_unlocked_r+0x2c0>
 801d57a:	234d      	movs	r3, #77	; 0x4d
 801d57c:	f1b9 0f00 	cmp.w	r9, #0
 801d580:	d107      	bne.n	801d592 <_tzset_unlocked_r+0x2ae>
 801d582:	722b      	strb	r3, [r5, #8]
 801d584:	2103      	movs	r1, #3
 801d586:	2302      	movs	r3, #2
 801d588:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801d58c:	f8c5 9014 	str.w	r9, [r5, #20]
 801d590:	e791      	b.n	801d4b6 <_tzset_unlocked_r+0x1d2>
 801d592:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801d596:	220b      	movs	r2, #11
 801d598:	2301      	movs	r3, #1
 801d59a:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801d59e:	2300      	movs	r3, #0
 801d5a0:	63eb      	str	r3, [r5, #60]	; 0x3c
 801d5a2:	e788      	b.n	801d4b6 <_tzset_unlocked_r+0x1d2>
 801d5a4:	b280      	uxth	r0, r0
 801d5a6:	723b      	strb	r3, [r7, #8]
 801d5a8:	6178      	str	r0, [r7, #20]
 801d5aa:	e784      	b.n	801d4b6 <_tzset_unlocked_r+0x1d2>
 801d5ac:	08022f11 	.word	0x08022f11
 801d5b0:	20008650 	.word	0x20008650
 801d5b4:	20008658 	.word	0x20008658
 801d5b8:	08022f14 	.word	0x08022f14
 801d5bc:	20008654 	.word	0x20008654
 801d5c0:	2000015c 	.word	0x2000015c
 801d5c4:	20008643 	.word	0x20008643
 801d5c8:	08022f18 	.word	0x08022f18
 801d5cc:	08022f3b 	.word	0x08022f3b
 801d5d0:	08022f27 	.word	0x08022f27
 801d5d4:	08022f3a 	.word	0x08022f3a
 801d5d8:	20008638 	.word	0x20008638

0801d5dc <_vsniprintf_r>:
 801d5dc:	b530      	push	{r4, r5, lr}
 801d5de:	1e14      	subs	r4, r2, #0
 801d5e0:	4605      	mov	r5, r0
 801d5e2:	b09b      	sub	sp, #108	; 0x6c
 801d5e4:	4618      	mov	r0, r3
 801d5e6:	da05      	bge.n	801d5f4 <_vsniprintf_r+0x18>
 801d5e8:	238b      	movs	r3, #139	; 0x8b
 801d5ea:	602b      	str	r3, [r5, #0]
 801d5ec:	f04f 30ff 	mov.w	r0, #4294967295
 801d5f0:	b01b      	add	sp, #108	; 0x6c
 801d5f2:	bd30      	pop	{r4, r5, pc}
 801d5f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 801d5f8:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d5fc:	bf14      	ite	ne
 801d5fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 801d602:	4623      	moveq	r3, r4
 801d604:	9302      	str	r3, [sp, #8]
 801d606:	9305      	str	r3, [sp, #20]
 801d608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d60c:	9100      	str	r1, [sp, #0]
 801d60e:	9104      	str	r1, [sp, #16]
 801d610:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d614:	4602      	mov	r2, r0
 801d616:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d618:	4669      	mov	r1, sp
 801d61a:	4628      	mov	r0, r5
 801d61c:	f002 fac2 	bl	801fba4 <_svfiprintf_r>
 801d620:	1c43      	adds	r3, r0, #1
 801d622:	bfbc      	itt	lt
 801d624:	238b      	movlt	r3, #139	; 0x8b
 801d626:	602b      	strlt	r3, [r5, #0]
 801d628:	2c00      	cmp	r4, #0
 801d62a:	d0e1      	beq.n	801d5f0 <_vsniprintf_r+0x14>
 801d62c:	9b00      	ldr	r3, [sp, #0]
 801d62e:	2200      	movs	r2, #0
 801d630:	701a      	strb	r2, [r3, #0]
 801d632:	e7dd      	b.n	801d5f0 <_vsniprintf_r+0x14>

0801d634 <vsniprintf>:
 801d634:	b507      	push	{r0, r1, r2, lr}
 801d636:	9300      	str	r3, [sp, #0]
 801d638:	4613      	mov	r3, r2
 801d63a:	460a      	mov	r2, r1
 801d63c:	4601      	mov	r1, r0
 801d63e:	4803      	ldr	r0, [pc, #12]	; (801d64c <vsniprintf+0x18>)
 801d640:	6800      	ldr	r0, [r0, #0]
 801d642:	f7ff ffcb 	bl	801d5dc <_vsniprintf_r>
 801d646:	b003      	add	sp, #12
 801d648:	f85d fb04 	ldr.w	pc, [sp], #4
 801d64c:	200000f8 	.word	0x200000f8

0801d650 <__swbuf_r>:
 801d650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d652:	460e      	mov	r6, r1
 801d654:	4614      	mov	r4, r2
 801d656:	4605      	mov	r5, r0
 801d658:	b118      	cbz	r0, 801d662 <__swbuf_r+0x12>
 801d65a:	6983      	ldr	r3, [r0, #24]
 801d65c:	b90b      	cbnz	r3, 801d662 <__swbuf_r+0x12>
 801d65e:	f7fd f817 	bl	801a690 <__sinit>
 801d662:	4b21      	ldr	r3, [pc, #132]	; (801d6e8 <__swbuf_r+0x98>)
 801d664:	429c      	cmp	r4, r3
 801d666:	d12b      	bne.n	801d6c0 <__swbuf_r+0x70>
 801d668:	686c      	ldr	r4, [r5, #4]
 801d66a:	69a3      	ldr	r3, [r4, #24]
 801d66c:	60a3      	str	r3, [r4, #8]
 801d66e:	89a3      	ldrh	r3, [r4, #12]
 801d670:	071a      	lsls	r2, r3, #28
 801d672:	d52f      	bpl.n	801d6d4 <__swbuf_r+0x84>
 801d674:	6923      	ldr	r3, [r4, #16]
 801d676:	b36b      	cbz	r3, 801d6d4 <__swbuf_r+0x84>
 801d678:	6923      	ldr	r3, [r4, #16]
 801d67a:	6820      	ldr	r0, [r4, #0]
 801d67c:	1ac0      	subs	r0, r0, r3
 801d67e:	6963      	ldr	r3, [r4, #20]
 801d680:	b2f6      	uxtb	r6, r6
 801d682:	4283      	cmp	r3, r0
 801d684:	4637      	mov	r7, r6
 801d686:	dc04      	bgt.n	801d692 <__swbuf_r+0x42>
 801d688:	4621      	mov	r1, r4
 801d68a:	4628      	mov	r0, r5
 801d68c:	f000 fff2 	bl	801e674 <_fflush_r>
 801d690:	bb30      	cbnz	r0, 801d6e0 <__swbuf_r+0x90>
 801d692:	68a3      	ldr	r3, [r4, #8]
 801d694:	3b01      	subs	r3, #1
 801d696:	60a3      	str	r3, [r4, #8]
 801d698:	6823      	ldr	r3, [r4, #0]
 801d69a:	1c5a      	adds	r2, r3, #1
 801d69c:	6022      	str	r2, [r4, #0]
 801d69e:	701e      	strb	r6, [r3, #0]
 801d6a0:	6963      	ldr	r3, [r4, #20]
 801d6a2:	3001      	adds	r0, #1
 801d6a4:	4283      	cmp	r3, r0
 801d6a6:	d004      	beq.n	801d6b2 <__swbuf_r+0x62>
 801d6a8:	89a3      	ldrh	r3, [r4, #12]
 801d6aa:	07db      	lsls	r3, r3, #31
 801d6ac:	d506      	bpl.n	801d6bc <__swbuf_r+0x6c>
 801d6ae:	2e0a      	cmp	r6, #10
 801d6b0:	d104      	bne.n	801d6bc <__swbuf_r+0x6c>
 801d6b2:	4621      	mov	r1, r4
 801d6b4:	4628      	mov	r0, r5
 801d6b6:	f000 ffdd 	bl	801e674 <_fflush_r>
 801d6ba:	b988      	cbnz	r0, 801d6e0 <__swbuf_r+0x90>
 801d6bc:	4638      	mov	r0, r7
 801d6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d6c0:	4b0a      	ldr	r3, [pc, #40]	; (801d6ec <__swbuf_r+0x9c>)
 801d6c2:	429c      	cmp	r4, r3
 801d6c4:	d101      	bne.n	801d6ca <__swbuf_r+0x7a>
 801d6c6:	68ac      	ldr	r4, [r5, #8]
 801d6c8:	e7cf      	b.n	801d66a <__swbuf_r+0x1a>
 801d6ca:	4b09      	ldr	r3, [pc, #36]	; (801d6f0 <__swbuf_r+0xa0>)
 801d6cc:	429c      	cmp	r4, r3
 801d6ce:	bf08      	it	eq
 801d6d0:	68ec      	ldreq	r4, [r5, #12]
 801d6d2:	e7ca      	b.n	801d66a <__swbuf_r+0x1a>
 801d6d4:	4621      	mov	r1, r4
 801d6d6:	4628      	mov	r0, r5
 801d6d8:	f000 f81e 	bl	801d718 <__swsetup_r>
 801d6dc:	2800      	cmp	r0, #0
 801d6de:	d0cb      	beq.n	801d678 <__swbuf_r+0x28>
 801d6e0:	f04f 37ff 	mov.w	r7, #4294967295
 801d6e4:	e7ea      	b.n	801d6bc <__swbuf_r+0x6c>
 801d6e6:	bf00      	nop
 801d6e8:	08022cac 	.word	0x08022cac
 801d6ec:	08022ccc 	.word	0x08022ccc
 801d6f0:	08022c8c 	.word	0x08022c8c

0801d6f4 <_write_r>:
 801d6f4:	b538      	push	{r3, r4, r5, lr}
 801d6f6:	4d07      	ldr	r5, [pc, #28]	; (801d714 <_write_r+0x20>)
 801d6f8:	4604      	mov	r4, r0
 801d6fa:	4608      	mov	r0, r1
 801d6fc:	4611      	mov	r1, r2
 801d6fe:	2200      	movs	r2, #0
 801d700:	602a      	str	r2, [r5, #0]
 801d702:	461a      	mov	r2, r3
 801d704:	f003 f8d6 	bl	80208b4 <_write>
 801d708:	1c43      	adds	r3, r0, #1
 801d70a:	d102      	bne.n	801d712 <_write_r+0x1e>
 801d70c:	682b      	ldr	r3, [r5, #0]
 801d70e:	b103      	cbz	r3, 801d712 <_write_r+0x1e>
 801d710:	6023      	str	r3, [r4, #0]
 801d712:	bd38      	pop	{r3, r4, r5, pc}
 801d714:	20009d18 	.word	0x20009d18

0801d718 <__swsetup_r>:
 801d718:	4b32      	ldr	r3, [pc, #200]	; (801d7e4 <__swsetup_r+0xcc>)
 801d71a:	b570      	push	{r4, r5, r6, lr}
 801d71c:	681d      	ldr	r5, [r3, #0]
 801d71e:	4606      	mov	r6, r0
 801d720:	460c      	mov	r4, r1
 801d722:	b125      	cbz	r5, 801d72e <__swsetup_r+0x16>
 801d724:	69ab      	ldr	r3, [r5, #24]
 801d726:	b913      	cbnz	r3, 801d72e <__swsetup_r+0x16>
 801d728:	4628      	mov	r0, r5
 801d72a:	f7fc ffb1 	bl	801a690 <__sinit>
 801d72e:	4b2e      	ldr	r3, [pc, #184]	; (801d7e8 <__swsetup_r+0xd0>)
 801d730:	429c      	cmp	r4, r3
 801d732:	d10f      	bne.n	801d754 <__swsetup_r+0x3c>
 801d734:	686c      	ldr	r4, [r5, #4]
 801d736:	89a3      	ldrh	r3, [r4, #12]
 801d738:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d73c:	0719      	lsls	r1, r3, #28
 801d73e:	d42c      	bmi.n	801d79a <__swsetup_r+0x82>
 801d740:	06dd      	lsls	r5, r3, #27
 801d742:	d411      	bmi.n	801d768 <__swsetup_r+0x50>
 801d744:	2309      	movs	r3, #9
 801d746:	6033      	str	r3, [r6, #0]
 801d748:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d74c:	81a3      	strh	r3, [r4, #12]
 801d74e:	f04f 30ff 	mov.w	r0, #4294967295
 801d752:	e03e      	b.n	801d7d2 <__swsetup_r+0xba>
 801d754:	4b25      	ldr	r3, [pc, #148]	; (801d7ec <__swsetup_r+0xd4>)
 801d756:	429c      	cmp	r4, r3
 801d758:	d101      	bne.n	801d75e <__swsetup_r+0x46>
 801d75a:	68ac      	ldr	r4, [r5, #8]
 801d75c:	e7eb      	b.n	801d736 <__swsetup_r+0x1e>
 801d75e:	4b24      	ldr	r3, [pc, #144]	; (801d7f0 <__swsetup_r+0xd8>)
 801d760:	429c      	cmp	r4, r3
 801d762:	bf08      	it	eq
 801d764:	68ec      	ldreq	r4, [r5, #12]
 801d766:	e7e6      	b.n	801d736 <__swsetup_r+0x1e>
 801d768:	0758      	lsls	r0, r3, #29
 801d76a:	d512      	bpl.n	801d792 <__swsetup_r+0x7a>
 801d76c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d76e:	b141      	cbz	r1, 801d782 <__swsetup_r+0x6a>
 801d770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d774:	4299      	cmp	r1, r3
 801d776:	d002      	beq.n	801d77e <__swsetup_r+0x66>
 801d778:	4630      	mov	r0, r6
 801d77a:	f7fd fc2b 	bl	801afd4 <_free_r>
 801d77e:	2300      	movs	r3, #0
 801d780:	6363      	str	r3, [r4, #52]	; 0x34
 801d782:	89a3      	ldrh	r3, [r4, #12]
 801d784:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d788:	81a3      	strh	r3, [r4, #12]
 801d78a:	2300      	movs	r3, #0
 801d78c:	6063      	str	r3, [r4, #4]
 801d78e:	6923      	ldr	r3, [r4, #16]
 801d790:	6023      	str	r3, [r4, #0]
 801d792:	89a3      	ldrh	r3, [r4, #12]
 801d794:	f043 0308 	orr.w	r3, r3, #8
 801d798:	81a3      	strh	r3, [r4, #12]
 801d79a:	6923      	ldr	r3, [r4, #16]
 801d79c:	b94b      	cbnz	r3, 801d7b2 <__swsetup_r+0x9a>
 801d79e:	89a3      	ldrh	r3, [r4, #12]
 801d7a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d7a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d7a8:	d003      	beq.n	801d7b2 <__swsetup_r+0x9a>
 801d7aa:	4621      	mov	r1, r4
 801d7ac:	4630      	mov	r0, r6
 801d7ae:	f001 fc4f 	bl	801f050 <__smakebuf_r>
 801d7b2:	89a0      	ldrh	r0, [r4, #12]
 801d7b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d7b8:	f010 0301 	ands.w	r3, r0, #1
 801d7bc:	d00a      	beq.n	801d7d4 <__swsetup_r+0xbc>
 801d7be:	2300      	movs	r3, #0
 801d7c0:	60a3      	str	r3, [r4, #8]
 801d7c2:	6963      	ldr	r3, [r4, #20]
 801d7c4:	425b      	negs	r3, r3
 801d7c6:	61a3      	str	r3, [r4, #24]
 801d7c8:	6923      	ldr	r3, [r4, #16]
 801d7ca:	b943      	cbnz	r3, 801d7de <__swsetup_r+0xc6>
 801d7cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d7d0:	d1ba      	bne.n	801d748 <__swsetup_r+0x30>
 801d7d2:	bd70      	pop	{r4, r5, r6, pc}
 801d7d4:	0781      	lsls	r1, r0, #30
 801d7d6:	bf58      	it	pl
 801d7d8:	6963      	ldrpl	r3, [r4, #20]
 801d7da:	60a3      	str	r3, [r4, #8]
 801d7dc:	e7f4      	b.n	801d7c8 <__swsetup_r+0xb0>
 801d7de:	2000      	movs	r0, #0
 801d7e0:	e7f7      	b.n	801d7d2 <__swsetup_r+0xba>
 801d7e2:	bf00      	nop
 801d7e4:	200000f8 	.word	0x200000f8
 801d7e8:	08022cac 	.word	0x08022cac
 801d7ec:	08022ccc 	.word	0x08022ccc
 801d7f0:	08022c8c 	.word	0x08022c8c

0801d7f4 <__assert_func>:
 801d7f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d7f6:	4614      	mov	r4, r2
 801d7f8:	461a      	mov	r2, r3
 801d7fa:	4b09      	ldr	r3, [pc, #36]	; (801d820 <__assert_func+0x2c>)
 801d7fc:	681b      	ldr	r3, [r3, #0]
 801d7fe:	4605      	mov	r5, r0
 801d800:	68d8      	ldr	r0, [r3, #12]
 801d802:	b14c      	cbz	r4, 801d818 <__assert_func+0x24>
 801d804:	4b07      	ldr	r3, [pc, #28]	; (801d824 <__assert_func+0x30>)
 801d806:	9100      	str	r1, [sp, #0]
 801d808:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d80c:	4906      	ldr	r1, [pc, #24]	; (801d828 <__assert_func+0x34>)
 801d80e:	462b      	mov	r3, r5
 801d810:	f000 ff6c 	bl	801e6ec <fiprintf>
 801d814:	f7fc fece 	bl	801a5b4 <abort>
 801d818:	4b04      	ldr	r3, [pc, #16]	; (801d82c <__assert_func+0x38>)
 801d81a:	461c      	mov	r4, r3
 801d81c:	e7f3      	b.n	801d806 <__assert_func+0x12>
 801d81e:	bf00      	nop
 801d820:	200000f8 	.word	0x200000f8
 801d824:	08022f4d 	.word	0x08022f4d
 801d828:	08022f5a 	.word	0x08022f5a
 801d82c:	08022f88 	.word	0x08022f88

0801d830 <_close_r>:
 801d830:	b538      	push	{r3, r4, r5, lr}
 801d832:	4d06      	ldr	r5, [pc, #24]	; (801d84c <_close_r+0x1c>)
 801d834:	2300      	movs	r3, #0
 801d836:	4604      	mov	r4, r0
 801d838:	4608      	mov	r0, r1
 801d83a:	602b      	str	r3, [r5, #0]
 801d83c:	f002 fff4 	bl	8020828 <_close>
 801d840:	1c43      	adds	r3, r0, #1
 801d842:	d102      	bne.n	801d84a <_close_r+0x1a>
 801d844:	682b      	ldr	r3, [r5, #0]
 801d846:	b103      	cbz	r3, 801d84a <_close_r+0x1a>
 801d848:	6023      	str	r3, [r4, #0]
 801d84a:	bd38      	pop	{r3, r4, r5, pc}
 801d84c:	20009d18 	.word	0x20009d18

0801d850 <div>:
 801d850:	2900      	cmp	r1, #0
 801d852:	b510      	push	{r4, lr}
 801d854:	fb91 f4f2 	sdiv	r4, r1, r2
 801d858:	fb02 1314 	mls	r3, r2, r4, r1
 801d85c:	db06      	blt.n	801d86c <div+0x1c>
 801d85e:	2b00      	cmp	r3, #0
 801d860:	da01      	bge.n	801d866 <div+0x16>
 801d862:	3401      	adds	r4, #1
 801d864:	1a9b      	subs	r3, r3, r2
 801d866:	e9c0 4300 	strd	r4, r3, [r0]
 801d86a:	bd10      	pop	{r4, pc}
 801d86c:	2b00      	cmp	r3, #0
 801d86e:	bfc4      	itt	gt
 801d870:	f104 34ff 	addgt.w	r4, r4, #4294967295
 801d874:	189b      	addgt	r3, r3, r2
 801d876:	e7f6      	b.n	801d866 <div+0x16>

0801d878 <quorem>:
 801d878:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d87c:	6903      	ldr	r3, [r0, #16]
 801d87e:	690c      	ldr	r4, [r1, #16]
 801d880:	42a3      	cmp	r3, r4
 801d882:	4607      	mov	r7, r0
 801d884:	f2c0 8081 	blt.w	801d98a <quorem+0x112>
 801d888:	3c01      	subs	r4, #1
 801d88a:	f101 0814 	add.w	r8, r1, #20
 801d88e:	f100 0514 	add.w	r5, r0, #20
 801d892:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d896:	9301      	str	r3, [sp, #4]
 801d898:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d89c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d8a0:	3301      	adds	r3, #1
 801d8a2:	429a      	cmp	r2, r3
 801d8a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801d8a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d8ac:	fbb2 f6f3 	udiv	r6, r2, r3
 801d8b0:	d331      	bcc.n	801d916 <quorem+0x9e>
 801d8b2:	f04f 0e00 	mov.w	lr, #0
 801d8b6:	4640      	mov	r0, r8
 801d8b8:	46ac      	mov	ip, r5
 801d8ba:	46f2      	mov	sl, lr
 801d8bc:	f850 2b04 	ldr.w	r2, [r0], #4
 801d8c0:	b293      	uxth	r3, r2
 801d8c2:	fb06 e303 	mla	r3, r6, r3, lr
 801d8c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801d8ca:	b29b      	uxth	r3, r3
 801d8cc:	ebaa 0303 	sub.w	r3, sl, r3
 801d8d0:	0c12      	lsrs	r2, r2, #16
 801d8d2:	f8dc a000 	ldr.w	sl, [ip]
 801d8d6:	fb06 e202 	mla	r2, r6, r2, lr
 801d8da:	fa13 f38a 	uxtah	r3, r3, sl
 801d8de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801d8e2:	fa1f fa82 	uxth.w	sl, r2
 801d8e6:	f8dc 2000 	ldr.w	r2, [ip]
 801d8ea:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801d8ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d8f2:	b29b      	uxth	r3, r3
 801d8f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d8f8:	4581      	cmp	r9, r0
 801d8fa:	f84c 3b04 	str.w	r3, [ip], #4
 801d8fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801d902:	d2db      	bcs.n	801d8bc <quorem+0x44>
 801d904:	f855 300b 	ldr.w	r3, [r5, fp]
 801d908:	b92b      	cbnz	r3, 801d916 <quorem+0x9e>
 801d90a:	9b01      	ldr	r3, [sp, #4]
 801d90c:	3b04      	subs	r3, #4
 801d90e:	429d      	cmp	r5, r3
 801d910:	461a      	mov	r2, r3
 801d912:	d32e      	bcc.n	801d972 <quorem+0xfa>
 801d914:	613c      	str	r4, [r7, #16]
 801d916:	4638      	mov	r0, r7
 801d918:	f001 fec0 	bl	801f69c <__mcmp>
 801d91c:	2800      	cmp	r0, #0
 801d91e:	db24      	blt.n	801d96a <quorem+0xf2>
 801d920:	3601      	adds	r6, #1
 801d922:	4628      	mov	r0, r5
 801d924:	f04f 0c00 	mov.w	ip, #0
 801d928:	f858 2b04 	ldr.w	r2, [r8], #4
 801d92c:	f8d0 e000 	ldr.w	lr, [r0]
 801d930:	b293      	uxth	r3, r2
 801d932:	ebac 0303 	sub.w	r3, ip, r3
 801d936:	0c12      	lsrs	r2, r2, #16
 801d938:	fa13 f38e 	uxtah	r3, r3, lr
 801d93c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801d940:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d944:	b29b      	uxth	r3, r3
 801d946:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d94a:	45c1      	cmp	r9, r8
 801d94c:	f840 3b04 	str.w	r3, [r0], #4
 801d950:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d954:	d2e8      	bcs.n	801d928 <quorem+0xb0>
 801d956:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d95a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d95e:	b922      	cbnz	r2, 801d96a <quorem+0xf2>
 801d960:	3b04      	subs	r3, #4
 801d962:	429d      	cmp	r5, r3
 801d964:	461a      	mov	r2, r3
 801d966:	d30a      	bcc.n	801d97e <quorem+0x106>
 801d968:	613c      	str	r4, [r7, #16]
 801d96a:	4630      	mov	r0, r6
 801d96c:	b003      	add	sp, #12
 801d96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d972:	6812      	ldr	r2, [r2, #0]
 801d974:	3b04      	subs	r3, #4
 801d976:	2a00      	cmp	r2, #0
 801d978:	d1cc      	bne.n	801d914 <quorem+0x9c>
 801d97a:	3c01      	subs	r4, #1
 801d97c:	e7c7      	b.n	801d90e <quorem+0x96>
 801d97e:	6812      	ldr	r2, [r2, #0]
 801d980:	3b04      	subs	r3, #4
 801d982:	2a00      	cmp	r2, #0
 801d984:	d1f0      	bne.n	801d968 <quorem+0xf0>
 801d986:	3c01      	subs	r4, #1
 801d988:	e7eb      	b.n	801d962 <quorem+0xea>
 801d98a:	2000      	movs	r0, #0
 801d98c:	e7ee      	b.n	801d96c <quorem+0xf4>
	...

0801d990 <_dtoa_r>:
 801d990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d994:	ed2d 8b02 	vpush	{d8}
 801d998:	ec57 6b10 	vmov	r6, r7, d0
 801d99c:	b095      	sub	sp, #84	; 0x54
 801d99e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801d9a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801d9a4:	9105      	str	r1, [sp, #20]
 801d9a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801d9aa:	4604      	mov	r4, r0
 801d9ac:	9209      	str	r2, [sp, #36]	; 0x24
 801d9ae:	930f      	str	r3, [sp, #60]	; 0x3c
 801d9b0:	b975      	cbnz	r5, 801d9d0 <_dtoa_r+0x40>
 801d9b2:	2010      	movs	r0, #16
 801d9b4:	f7fd f850 	bl	801aa58 <malloc>
 801d9b8:	4602      	mov	r2, r0
 801d9ba:	6260      	str	r0, [r4, #36]	; 0x24
 801d9bc:	b920      	cbnz	r0, 801d9c8 <_dtoa_r+0x38>
 801d9be:	4bb2      	ldr	r3, [pc, #712]	; (801dc88 <_dtoa_r+0x2f8>)
 801d9c0:	21ea      	movs	r1, #234	; 0xea
 801d9c2:	48b2      	ldr	r0, [pc, #712]	; (801dc8c <_dtoa_r+0x2fc>)
 801d9c4:	f7ff ff16 	bl	801d7f4 <__assert_func>
 801d9c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d9cc:	6005      	str	r5, [r0, #0]
 801d9ce:	60c5      	str	r5, [r0, #12]
 801d9d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d9d2:	6819      	ldr	r1, [r3, #0]
 801d9d4:	b151      	cbz	r1, 801d9ec <_dtoa_r+0x5c>
 801d9d6:	685a      	ldr	r2, [r3, #4]
 801d9d8:	604a      	str	r2, [r1, #4]
 801d9da:	2301      	movs	r3, #1
 801d9dc:	4093      	lsls	r3, r2
 801d9de:	608b      	str	r3, [r1, #8]
 801d9e0:	4620      	mov	r0, r4
 801d9e2:	f001 fbd3 	bl	801f18c <_Bfree>
 801d9e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d9e8:	2200      	movs	r2, #0
 801d9ea:	601a      	str	r2, [r3, #0]
 801d9ec:	1e3b      	subs	r3, r7, #0
 801d9ee:	bfb9      	ittee	lt
 801d9f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801d9f4:	9303      	strlt	r3, [sp, #12]
 801d9f6:	2300      	movge	r3, #0
 801d9f8:	f8c8 3000 	strge.w	r3, [r8]
 801d9fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801da00:	4ba3      	ldr	r3, [pc, #652]	; (801dc90 <_dtoa_r+0x300>)
 801da02:	bfbc      	itt	lt
 801da04:	2201      	movlt	r2, #1
 801da06:	f8c8 2000 	strlt.w	r2, [r8]
 801da0a:	ea33 0309 	bics.w	r3, r3, r9
 801da0e:	d11b      	bne.n	801da48 <_dtoa_r+0xb8>
 801da10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801da12:	f242 730f 	movw	r3, #9999	; 0x270f
 801da16:	6013      	str	r3, [r2, #0]
 801da18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801da1c:	4333      	orrs	r3, r6
 801da1e:	f000 857a 	beq.w	801e516 <_dtoa_r+0xb86>
 801da22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801da24:	b963      	cbnz	r3, 801da40 <_dtoa_r+0xb0>
 801da26:	4b9b      	ldr	r3, [pc, #620]	; (801dc94 <_dtoa_r+0x304>)
 801da28:	e024      	b.n	801da74 <_dtoa_r+0xe4>
 801da2a:	4b9b      	ldr	r3, [pc, #620]	; (801dc98 <_dtoa_r+0x308>)
 801da2c:	9300      	str	r3, [sp, #0]
 801da2e:	3308      	adds	r3, #8
 801da30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801da32:	6013      	str	r3, [r2, #0]
 801da34:	9800      	ldr	r0, [sp, #0]
 801da36:	b015      	add	sp, #84	; 0x54
 801da38:	ecbd 8b02 	vpop	{d8}
 801da3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da40:	4b94      	ldr	r3, [pc, #592]	; (801dc94 <_dtoa_r+0x304>)
 801da42:	9300      	str	r3, [sp, #0]
 801da44:	3303      	adds	r3, #3
 801da46:	e7f3      	b.n	801da30 <_dtoa_r+0xa0>
 801da48:	ed9d 7b02 	vldr	d7, [sp, #8]
 801da4c:	2200      	movs	r2, #0
 801da4e:	ec51 0b17 	vmov	r0, r1, d7
 801da52:	2300      	movs	r3, #0
 801da54:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801da58:	f7e3 f856 	bl	8000b08 <__aeabi_dcmpeq>
 801da5c:	4680      	mov	r8, r0
 801da5e:	b158      	cbz	r0, 801da78 <_dtoa_r+0xe8>
 801da60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801da62:	2301      	movs	r3, #1
 801da64:	6013      	str	r3, [r2, #0]
 801da66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801da68:	2b00      	cmp	r3, #0
 801da6a:	f000 8551 	beq.w	801e510 <_dtoa_r+0xb80>
 801da6e:	488b      	ldr	r0, [pc, #556]	; (801dc9c <_dtoa_r+0x30c>)
 801da70:	6018      	str	r0, [r3, #0]
 801da72:	1e43      	subs	r3, r0, #1
 801da74:	9300      	str	r3, [sp, #0]
 801da76:	e7dd      	b.n	801da34 <_dtoa_r+0xa4>
 801da78:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801da7c:	aa12      	add	r2, sp, #72	; 0x48
 801da7e:	a913      	add	r1, sp, #76	; 0x4c
 801da80:	4620      	mov	r0, r4
 801da82:	f001 ff2b 	bl	801f8dc <__d2b>
 801da86:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801da8a:	4683      	mov	fp, r0
 801da8c:	2d00      	cmp	r5, #0
 801da8e:	d07c      	beq.n	801db8a <_dtoa_r+0x1fa>
 801da90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801da92:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801da96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801da9a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801da9e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801daa2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801daa6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801daaa:	4b7d      	ldr	r3, [pc, #500]	; (801dca0 <_dtoa_r+0x310>)
 801daac:	2200      	movs	r2, #0
 801daae:	4630      	mov	r0, r6
 801dab0:	4639      	mov	r1, r7
 801dab2:	f7e2 fc09 	bl	80002c8 <__aeabi_dsub>
 801dab6:	a36e      	add	r3, pc, #440	; (adr r3, 801dc70 <_dtoa_r+0x2e0>)
 801dab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dabc:	f7e2 fdbc 	bl	8000638 <__aeabi_dmul>
 801dac0:	a36d      	add	r3, pc, #436	; (adr r3, 801dc78 <_dtoa_r+0x2e8>)
 801dac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dac6:	f7e2 fc01 	bl	80002cc <__adddf3>
 801daca:	4606      	mov	r6, r0
 801dacc:	4628      	mov	r0, r5
 801dace:	460f      	mov	r7, r1
 801dad0:	f7e2 fd48 	bl	8000564 <__aeabi_i2d>
 801dad4:	a36a      	add	r3, pc, #424	; (adr r3, 801dc80 <_dtoa_r+0x2f0>)
 801dad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dada:	f7e2 fdad 	bl	8000638 <__aeabi_dmul>
 801dade:	4602      	mov	r2, r0
 801dae0:	460b      	mov	r3, r1
 801dae2:	4630      	mov	r0, r6
 801dae4:	4639      	mov	r1, r7
 801dae6:	f7e2 fbf1 	bl	80002cc <__adddf3>
 801daea:	4606      	mov	r6, r0
 801daec:	460f      	mov	r7, r1
 801daee:	f7e3 f853 	bl	8000b98 <__aeabi_d2iz>
 801daf2:	2200      	movs	r2, #0
 801daf4:	4682      	mov	sl, r0
 801daf6:	2300      	movs	r3, #0
 801daf8:	4630      	mov	r0, r6
 801dafa:	4639      	mov	r1, r7
 801dafc:	f7e3 f80e 	bl	8000b1c <__aeabi_dcmplt>
 801db00:	b148      	cbz	r0, 801db16 <_dtoa_r+0x186>
 801db02:	4650      	mov	r0, sl
 801db04:	f7e2 fd2e 	bl	8000564 <__aeabi_i2d>
 801db08:	4632      	mov	r2, r6
 801db0a:	463b      	mov	r3, r7
 801db0c:	f7e2 fffc 	bl	8000b08 <__aeabi_dcmpeq>
 801db10:	b908      	cbnz	r0, 801db16 <_dtoa_r+0x186>
 801db12:	f10a 3aff 	add.w	sl, sl, #4294967295
 801db16:	f1ba 0f16 	cmp.w	sl, #22
 801db1a:	d854      	bhi.n	801dbc6 <_dtoa_r+0x236>
 801db1c:	4b61      	ldr	r3, [pc, #388]	; (801dca4 <_dtoa_r+0x314>)
 801db1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801db22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801db2a:	f7e2 fff7 	bl	8000b1c <__aeabi_dcmplt>
 801db2e:	2800      	cmp	r0, #0
 801db30:	d04b      	beq.n	801dbca <_dtoa_r+0x23a>
 801db32:	f10a 3aff 	add.w	sl, sl, #4294967295
 801db36:	2300      	movs	r3, #0
 801db38:	930e      	str	r3, [sp, #56]	; 0x38
 801db3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801db3c:	1b5d      	subs	r5, r3, r5
 801db3e:	1e6b      	subs	r3, r5, #1
 801db40:	9304      	str	r3, [sp, #16]
 801db42:	bf43      	ittte	mi
 801db44:	2300      	movmi	r3, #0
 801db46:	f1c5 0801 	rsbmi	r8, r5, #1
 801db4a:	9304      	strmi	r3, [sp, #16]
 801db4c:	f04f 0800 	movpl.w	r8, #0
 801db50:	f1ba 0f00 	cmp.w	sl, #0
 801db54:	db3b      	blt.n	801dbce <_dtoa_r+0x23e>
 801db56:	9b04      	ldr	r3, [sp, #16]
 801db58:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801db5c:	4453      	add	r3, sl
 801db5e:	9304      	str	r3, [sp, #16]
 801db60:	2300      	movs	r3, #0
 801db62:	9306      	str	r3, [sp, #24]
 801db64:	9b05      	ldr	r3, [sp, #20]
 801db66:	2b09      	cmp	r3, #9
 801db68:	d869      	bhi.n	801dc3e <_dtoa_r+0x2ae>
 801db6a:	2b05      	cmp	r3, #5
 801db6c:	bfc4      	itt	gt
 801db6e:	3b04      	subgt	r3, #4
 801db70:	9305      	strgt	r3, [sp, #20]
 801db72:	9b05      	ldr	r3, [sp, #20]
 801db74:	f1a3 0302 	sub.w	r3, r3, #2
 801db78:	bfcc      	ite	gt
 801db7a:	2500      	movgt	r5, #0
 801db7c:	2501      	movle	r5, #1
 801db7e:	2b03      	cmp	r3, #3
 801db80:	d869      	bhi.n	801dc56 <_dtoa_r+0x2c6>
 801db82:	e8df f003 	tbb	[pc, r3]
 801db86:	4e2c      	.short	0x4e2c
 801db88:	5a4c      	.short	0x5a4c
 801db8a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801db8e:	441d      	add	r5, r3
 801db90:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801db94:	2b20      	cmp	r3, #32
 801db96:	bfc1      	itttt	gt
 801db98:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801db9c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801dba0:	fa09 f303 	lslgt.w	r3, r9, r3
 801dba4:	fa26 f000 	lsrgt.w	r0, r6, r0
 801dba8:	bfda      	itte	le
 801dbaa:	f1c3 0320 	rsble	r3, r3, #32
 801dbae:	fa06 f003 	lslle.w	r0, r6, r3
 801dbb2:	4318      	orrgt	r0, r3
 801dbb4:	f7e2 fcc6 	bl	8000544 <__aeabi_ui2d>
 801dbb8:	2301      	movs	r3, #1
 801dbba:	4606      	mov	r6, r0
 801dbbc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801dbc0:	3d01      	subs	r5, #1
 801dbc2:	9310      	str	r3, [sp, #64]	; 0x40
 801dbc4:	e771      	b.n	801daaa <_dtoa_r+0x11a>
 801dbc6:	2301      	movs	r3, #1
 801dbc8:	e7b6      	b.n	801db38 <_dtoa_r+0x1a8>
 801dbca:	900e      	str	r0, [sp, #56]	; 0x38
 801dbcc:	e7b5      	b.n	801db3a <_dtoa_r+0x1aa>
 801dbce:	f1ca 0300 	rsb	r3, sl, #0
 801dbd2:	9306      	str	r3, [sp, #24]
 801dbd4:	2300      	movs	r3, #0
 801dbd6:	eba8 080a 	sub.w	r8, r8, sl
 801dbda:	930d      	str	r3, [sp, #52]	; 0x34
 801dbdc:	e7c2      	b.n	801db64 <_dtoa_r+0x1d4>
 801dbde:	2300      	movs	r3, #0
 801dbe0:	9308      	str	r3, [sp, #32]
 801dbe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dbe4:	2b00      	cmp	r3, #0
 801dbe6:	dc39      	bgt.n	801dc5c <_dtoa_r+0x2cc>
 801dbe8:	f04f 0901 	mov.w	r9, #1
 801dbec:	f8cd 9004 	str.w	r9, [sp, #4]
 801dbf0:	464b      	mov	r3, r9
 801dbf2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801dbf6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801dbf8:	2200      	movs	r2, #0
 801dbfa:	6042      	str	r2, [r0, #4]
 801dbfc:	2204      	movs	r2, #4
 801dbfe:	f102 0614 	add.w	r6, r2, #20
 801dc02:	429e      	cmp	r6, r3
 801dc04:	6841      	ldr	r1, [r0, #4]
 801dc06:	d92f      	bls.n	801dc68 <_dtoa_r+0x2d8>
 801dc08:	4620      	mov	r0, r4
 801dc0a:	f001 fa7f 	bl	801f10c <_Balloc>
 801dc0e:	9000      	str	r0, [sp, #0]
 801dc10:	2800      	cmp	r0, #0
 801dc12:	d14b      	bne.n	801dcac <_dtoa_r+0x31c>
 801dc14:	4b24      	ldr	r3, [pc, #144]	; (801dca8 <_dtoa_r+0x318>)
 801dc16:	4602      	mov	r2, r0
 801dc18:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801dc1c:	e6d1      	b.n	801d9c2 <_dtoa_r+0x32>
 801dc1e:	2301      	movs	r3, #1
 801dc20:	e7de      	b.n	801dbe0 <_dtoa_r+0x250>
 801dc22:	2300      	movs	r3, #0
 801dc24:	9308      	str	r3, [sp, #32]
 801dc26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc28:	eb0a 0903 	add.w	r9, sl, r3
 801dc2c:	f109 0301 	add.w	r3, r9, #1
 801dc30:	2b01      	cmp	r3, #1
 801dc32:	9301      	str	r3, [sp, #4]
 801dc34:	bfb8      	it	lt
 801dc36:	2301      	movlt	r3, #1
 801dc38:	e7dd      	b.n	801dbf6 <_dtoa_r+0x266>
 801dc3a:	2301      	movs	r3, #1
 801dc3c:	e7f2      	b.n	801dc24 <_dtoa_r+0x294>
 801dc3e:	2501      	movs	r5, #1
 801dc40:	2300      	movs	r3, #0
 801dc42:	9305      	str	r3, [sp, #20]
 801dc44:	9508      	str	r5, [sp, #32]
 801dc46:	f04f 39ff 	mov.w	r9, #4294967295
 801dc4a:	2200      	movs	r2, #0
 801dc4c:	f8cd 9004 	str.w	r9, [sp, #4]
 801dc50:	2312      	movs	r3, #18
 801dc52:	9209      	str	r2, [sp, #36]	; 0x24
 801dc54:	e7cf      	b.n	801dbf6 <_dtoa_r+0x266>
 801dc56:	2301      	movs	r3, #1
 801dc58:	9308      	str	r3, [sp, #32]
 801dc5a:	e7f4      	b.n	801dc46 <_dtoa_r+0x2b6>
 801dc5c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801dc60:	f8cd 9004 	str.w	r9, [sp, #4]
 801dc64:	464b      	mov	r3, r9
 801dc66:	e7c6      	b.n	801dbf6 <_dtoa_r+0x266>
 801dc68:	3101      	adds	r1, #1
 801dc6a:	6041      	str	r1, [r0, #4]
 801dc6c:	0052      	lsls	r2, r2, #1
 801dc6e:	e7c6      	b.n	801dbfe <_dtoa_r+0x26e>
 801dc70:	636f4361 	.word	0x636f4361
 801dc74:	3fd287a7 	.word	0x3fd287a7
 801dc78:	8b60c8b3 	.word	0x8b60c8b3
 801dc7c:	3fc68a28 	.word	0x3fc68a28
 801dc80:	509f79fb 	.word	0x509f79fb
 801dc84:	3fd34413 	.word	0x3fd34413
 801dc88:	08022cf0 	.word	0x08022cf0
 801dc8c:	08022f96 	.word	0x08022f96
 801dc90:	7ff00000 	.word	0x7ff00000
 801dc94:	08022f92 	.word	0x08022f92
 801dc98:	08022f89 	.word	0x08022f89
 801dc9c:	080231fa 	.word	0x080231fa
 801dca0:	3ff80000 	.word	0x3ff80000
 801dca4:	08023110 	.word	0x08023110
 801dca8:	08022ff5 	.word	0x08022ff5
 801dcac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801dcae:	9a00      	ldr	r2, [sp, #0]
 801dcb0:	601a      	str	r2, [r3, #0]
 801dcb2:	9b01      	ldr	r3, [sp, #4]
 801dcb4:	2b0e      	cmp	r3, #14
 801dcb6:	f200 80ad 	bhi.w	801de14 <_dtoa_r+0x484>
 801dcba:	2d00      	cmp	r5, #0
 801dcbc:	f000 80aa 	beq.w	801de14 <_dtoa_r+0x484>
 801dcc0:	f1ba 0f00 	cmp.w	sl, #0
 801dcc4:	dd36      	ble.n	801dd34 <_dtoa_r+0x3a4>
 801dcc6:	4ac3      	ldr	r2, [pc, #780]	; (801dfd4 <_dtoa_r+0x644>)
 801dcc8:	f00a 030f 	and.w	r3, sl, #15
 801dccc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801dcd0:	ed93 7b00 	vldr	d7, [r3]
 801dcd4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801dcd8:	ea4f 172a 	mov.w	r7, sl, asr #4
 801dcdc:	eeb0 8a47 	vmov.f32	s16, s14
 801dce0:	eef0 8a67 	vmov.f32	s17, s15
 801dce4:	d016      	beq.n	801dd14 <_dtoa_r+0x384>
 801dce6:	4bbc      	ldr	r3, [pc, #752]	; (801dfd8 <_dtoa_r+0x648>)
 801dce8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801dcec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801dcf0:	f7e2 fdcc 	bl	800088c <__aeabi_ddiv>
 801dcf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dcf8:	f007 070f 	and.w	r7, r7, #15
 801dcfc:	2503      	movs	r5, #3
 801dcfe:	4eb6      	ldr	r6, [pc, #728]	; (801dfd8 <_dtoa_r+0x648>)
 801dd00:	b957      	cbnz	r7, 801dd18 <_dtoa_r+0x388>
 801dd02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dd06:	ec53 2b18 	vmov	r2, r3, d8
 801dd0a:	f7e2 fdbf 	bl	800088c <__aeabi_ddiv>
 801dd0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dd12:	e029      	b.n	801dd68 <_dtoa_r+0x3d8>
 801dd14:	2502      	movs	r5, #2
 801dd16:	e7f2      	b.n	801dcfe <_dtoa_r+0x36e>
 801dd18:	07f9      	lsls	r1, r7, #31
 801dd1a:	d508      	bpl.n	801dd2e <_dtoa_r+0x39e>
 801dd1c:	ec51 0b18 	vmov	r0, r1, d8
 801dd20:	e9d6 2300 	ldrd	r2, r3, [r6]
 801dd24:	f7e2 fc88 	bl	8000638 <__aeabi_dmul>
 801dd28:	ec41 0b18 	vmov	d8, r0, r1
 801dd2c:	3501      	adds	r5, #1
 801dd2e:	107f      	asrs	r7, r7, #1
 801dd30:	3608      	adds	r6, #8
 801dd32:	e7e5      	b.n	801dd00 <_dtoa_r+0x370>
 801dd34:	f000 80a6 	beq.w	801de84 <_dtoa_r+0x4f4>
 801dd38:	f1ca 0600 	rsb	r6, sl, #0
 801dd3c:	4ba5      	ldr	r3, [pc, #660]	; (801dfd4 <_dtoa_r+0x644>)
 801dd3e:	4fa6      	ldr	r7, [pc, #664]	; (801dfd8 <_dtoa_r+0x648>)
 801dd40:	f006 020f 	and.w	r2, r6, #15
 801dd44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801dd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801dd50:	f7e2 fc72 	bl	8000638 <__aeabi_dmul>
 801dd54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dd58:	1136      	asrs	r6, r6, #4
 801dd5a:	2300      	movs	r3, #0
 801dd5c:	2502      	movs	r5, #2
 801dd5e:	2e00      	cmp	r6, #0
 801dd60:	f040 8085 	bne.w	801de6e <_dtoa_r+0x4de>
 801dd64:	2b00      	cmp	r3, #0
 801dd66:	d1d2      	bne.n	801dd0e <_dtoa_r+0x37e>
 801dd68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dd6a:	2b00      	cmp	r3, #0
 801dd6c:	f000 808c 	beq.w	801de88 <_dtoa_r+0x4f8>
 801dd70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801dd74:	4b99      	ldr	r3, [pc, #612]	; (801dfdc <_dtoa_r+0x64c>)
 801dd76:	2200      	movs	r2, #0
 801dd78:	4630      	mov	r0, r6
 801dd7a:	4639      	mov	r1, r7
 801dd7c:	f7e2 fece 	bl	8000b1c <__aeabi_dcmplt>
 801dd80:	2800      	cmp	r0, #0
 801dd82:	f000 8081 	beq.w	801de88 <_dtoa_r+0x4f8>
 801dd86:	9b01      	ldr	r3, [sp, #4]
 801dd88:	2b00      	cmp	r3, #0
 801dd8a:	d07d      	beq.n	801de88 <_dtoa_r+0x4f8>
 801dd8c:	f1b9 0f00 	cmp.w	r9, #0
 801dd90:	dd3c      	ble.n	801de0c <_dtoa_r+0x47c>
 801dd92:	f10a 33ff 	add.w	r3, sl, #4294967295
 801dd96:	9307      	str	r3, [sp, #28]
 801dd98:	2200      	movs	r2, #0
 801dd9a:	4b91      	ldr	r3, [pc, #580]	; (801dfe0 <_dtoa_r+0x650>)
 801dd9c:	4630      	mov	r0, r6
 801dd9e:	4639      	mov	r1, r7
 801dda0:	f7e2 fc4a 	bl	8000638 <__aeabi_dmul>
 801dda4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dda8:	3501      	adds	r5, #1
 801ddaa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801ddae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ddb2:	4628      	mov	r0, r5
 801ddb4:	f7e2 fbd6 	bl	8000564 <__aeabi_i2d>
 801ddb8:	4632      	mov	r2, r6
 801ddba:	463b      	mov	r3, r7
 801ddbc:	f7e2 fc3c 	bl	8000638 <__aeabi_dmul>
 801ddc0:	4b88      	ldr	r3, [pc, #544]	; (801dfe4 <_dtoa_r+0x654>)
 801ddc2:	2200      	movs	r2, #0
 801ddc4:	f7e2 fa82 	bl	80002cc <__adddf3>
 801ddc8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801ddcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ddd0:	9303      	str	r3, [sp, #12]
 801ddd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ddd4:	2b00      	cmp	r3, #0
 801ddd6:	d15c      	bne.n	801de92 <_dtoa_r+0x502>
 801ddd8:	4b83      	ldr	r3, [pc, #524]	; (801dfe8 <_dtoa_r+0x658>)
 801ddda:	2200      	movs	r2, #0
 801dddc:	4630      	mov	r0, r6
 801ddde:	4639      	mov	r1, r7
 801dde0:	f7e2 fa72 	bl	80002c8 <__aeabi_dsub>
 801dde4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801dde8:	4606      	mov	r6, r0
 801ddea:	460f      	mov	r7, r1
 801ddec:	f7e2 feb4 	bl	8000b58 <__aeabi_dcmpgt>
 801ddf0:	2800      	cmp	r0, #0
 801ddf2:	f040 8296 	bne.w	801e322 <_dtoa_r+0x992>
 801ddf6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801ddfa:	4630      	mov	r0, r6
 801ddfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801de00:	4639      	mov	r1, r7
 801de02:	f7e2 fe8b 	bl	8000b1c <__aeabi_dcmplt>
 801de06:	2800      	cmp	r0, #0
 801de08:	f040 8288 	bne.w	801e31c <_dtoa_r+0x98c>
 801de0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801de10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801de14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801de16:	2b00      	cmp	r3, #0
 801de18:	f2c0 8158 	blt.w	801e0cc <_dtoa_r+0x73c>
 801de1c:	f1ba 0f0e 	cmp.w	sl, #14
 801de20:	f300 8154 	bgt.w	801e0cc <_dtoa_r+0x73c>
 801de24:	4b6b      	ldr	r3, [pc, #428]	; (801dfd4 <_dtoa_r+0x644>)
 801de26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801de2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801de2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de30:	2b00      	cmp	r3, #0
 801de32:	f280 80e3 	bge.w	801dffc <_dtoa_r+0x66c>
 801de36:	9b01      	ldr	r3, [sp, #4]
 801de38:	2b00      	cmp	r3, #0
 801de3a:	f300 80df 	bgt.w	801dffc <_dtoa_r+0x66c>
 801de3e:	f040 826d 	bne.w	801e31c <_dtoa_r+0x98c>
 801de42:	4b69      	ldr	r3, [pc, #420]	; (801dfe8 <_dtoa_r+0x658>)
 801de44:	2200      	movs	r2, #0
 801de46:	4640      	mov	r0, r8
 801de48:	4649      	mov	r1, r9
 801de4a:	f7e2 fbf5 	bl	8000638 <__aeabi_dmul>
 801de4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801de52:	f7e2 fe77 	bl	8000b44 <__aeabi_dcmpge>
 801de56:	9e01      	ldr	r6, [sp, #4]
 801de58:	4637      	mov	r7, r6
 801de5a:	2800      	cmp	r0, #0
 801de5c:	f040 8243 	bne.w	801e2e6 <_dtoa_r+0x956>
 801de60:	9d00      	ldr	r5, [sp, #0]
 801de62:	2331      	movs	r3, #49	; 0x31
 801de64:	f805 3b01 	strb.w	r3, [r5], #1
 801de68:	f10a 0a01 	add.w	sl, sl, #1
 801de6c:	e23f      	b.n	801e2ee <_dtoa_r+0x95e>
 801de6e:	07f2      	lsls	r2, r6, #31
 801de70:	d505      	bpl.n	801de7e <_dtoa_r+0x4ee>
 801de72:	e9d7 2300 	ldrd	r2, r3, [r7]
 801de76:	f7e2 fbdf 	bl	8000638 <__aeabi_dmul>
 801de7a:	3501      	adds	r5, #1
 801de7c:	2301      	movs	r3, #1
 801de7e:	1076      	asrs	r6, r6, #1
 801de80:	3708      	adds	r7, #8
 801de82:	e76c      	b.n	801dd5e <_dtoa_r+0x3ce>
 801de84:	2502      	movs	r5, #2
 801de86:	e76f      	b.n	801dd68 <_dtoa_r+0x3d8>
 801de88:	9b01      	ldr	r3, [sp, #4]
 801de8a:	f8cd a01c 	str.w	sl, [sp, #28]
 801de8e:	930c      	str	r3, [sp, #48]	; 0x30
 801de90:	e78d      	b.n	801ddae <_dtoa_r+0x41e>
 801de92:	9900      	ldr	r1, [sp, #0]
 801de94:	980c      	ldr	r0, [sp, #48]	; 0x30
 801de96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801de98:	4b4e      	ldr	r3, [pc, #312]	; (801dfd4 <_dtoa_r+0x644>)
 801de9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801de9e:	4401      	add	r1, r0
 801dea0:	9102      	str	r1, [sp, #8]
 801dea2:	9908      	ldr	r1, [sp, #32]
 801dea4:	eeb0 8a47 	vmov.f32	s16, s14
 801dea8:	eef0 8a67 	vmov.f32	s17, s15
 801deac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801deb0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801deb4:	2900      	cmp	r1, #0
 801deb6:	d045      	beq.n	801df44 <_dtoa_r+0x5b4>
 801deb8:	494c      	ldr	r1, [pc, #304]	; (801dfec <_dtoa_r+0x65c>)
 801deba:	2000      	movs	r0, #0
 801debc:	f7e2 fce6 	bl	800088c <__aeabi_ddiv>
 801dec0:	ec53 2b18 	vmov	r2, r3, d8
 801dec4:	f7e2 fa00 	bl	80002c8 <__aeabi_dsub>
 801dec8:	9d00      	ldr	r5, [sp, #0]
 801deca:	ec41 0b18 	vmov	d8, r0, r1
 801dece:	4639      	mov	r1, r7
 801ded0:	4630      	mov	r0, r6
 801ded2:	f7e2 fe61 	bl	8000b98 <__aeabi_d2iz>
 801ded6:	900c      	str	r0, [sp, #48]	; 0x30
 801ded8:	f7e2 fb44 	bl	8000564 <__aeabi_i2d>
 801dedc:	4602      	mov	r2, r0
 801dede:	460b      	mov	r3, r1
 801dee0:	4630      	mov	r0, r6
 801dee2:	4639      	mov	r1, r7
 801dee4:	f7e2 f9f0 	bl	80002c8 <__aeabi_dsub>
 801dee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801deea:	3330      	adds	r3, #48	; 0x30
 801deec:	f805 3b01 	strb.w	r3, [r5], #1
 801def0:	ec53 2b18 	vmov	r2, r3, d8
 801def4:	4606      	mov	r6, r0
 801def6:	460f      	mov	r7, r1
 801def8:	f7e2 fe10 	bl	8000b1c <__aeabi_dcmplt>
 801defc:	2800      	cmp	r0, #0
 801defe:	d165      	bne.n	801dfcc <_dtoa_r+0x63c>
 801df00:	4632      	mov	r2, r6
 801df02:	463b      	mov	r3, r7
 801df04:	4935      	ldr	r1, [pc, #212]	; (801dfdc <_dtoa_r+0x64c>)
 801df06:	2000      	movs	r0, #0
 801df08:	f7e2 f9de 	bl	80002c8 <__aeabi_dsub>
 801df0c:	ec53 2b18 	vmov	r2, r3, d8
 801df10:	f7e2 fe04 	bl	8000b1c <__aeabi_dcmplt>
 801df14:	2800      	cmp	r0, #0
 801df16:	f040 80b9 	bne.w	801e08c <_dtoa_r+0x6fc>
 801df1a:	9b02      	ldr	r3, [sp, #8]
 801df1c:	429d      	cmp	r5, r3
 801df1e:	f43f af75 	beq.w	801de0c <_dtoa_r+0x47c>
 801df22:	4b2f      	ldr	r3, [pc, #188]	; (801dfe0 <_dtoa_r+0x650>)
 801df24:	ec51 0b18 	vmov	r0, r1, d8
 801df28:	2200      	movs	r2, #0
 801df2a:	f7e2 fb85 	bl	8000638 <__aeabi_dmul>
 801df2e:	4b2c      	ldr	r3, [pc, #176]	; (801dfe0 <_dtoa_r+0x650>)
 801df30:	ec41 0b18 	vmov	d8, r0, r1
 801df34:	2200      	movs	r2, #0
 801df36:	4630      	mov	r0, r6
 801df38:	4639      	mov	r1, r7
 801df3a:	f7e2 fb7d 	bl	8000638 <__aeabi_dmul>
 801df3e:	4606      	mov	r6, r0
 801df40:	460f      	mov	r7, r1
 801df42:	e7c4      	b.n	801dece <_dtoa_r+0x53e>
 801df44:	ec51 0b17 	vmov	r0, r1, d7
 801df48:	f7e2 fb76 	bl	8000638 <__aeabi_dmul>
 801df4c:	9b02      	ldr	r3, [sp, #8]
 801df4e:	9d00      	ldr	r5, [sp, #0]
 801df50:	930c      	str	r3, [sp, #48]	; 0x30
 801df52:	ec41 0b18 	vmov	d8, r0, r1
 801df56:	4639      	mov	r1, r7
 801df58:	4630      	mov	r0, r6
 801df5a:	f7e2 fe1d 	bl	8000b98 <__aeabi_d2iz>
 801df5e:	9011      	str	r0, [sp, #68]	; 0x44
 801df60:	f7e2 fb00 	bl	8000564 <__aeabi_i2d>
 801df64:	4602      	mov	r2, r0
 801df66:	460b      	mov	r3, r1
 801df68:	4630      	mov	r0, r6
 801df6a:	4639      	mov	r1, r7
 801df6c:	f7e2 f9ac 	bl	80002c8 <__aeabi_dsub>
 801df70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801df72:	3330      	adds	r3, #48	; 0x30
 801df74:	f805 3b01 	strb.w	r3, [r5], #1
 801df78:	9b02      	ldr	r3, [sp, #8]
 801df7a:	429d      	cmp	r5, r3
 801df7c:	4606      	mov	r6, r0
 801df7e:	460f      	mov	r7, r1
 801df80:	f04f 0200 	mov.w	r2, #0
 801df84:	d134      	bne.n	801dff0 <_dtoa_r+0x660>
 801df86:	4b19      	ldr	r3, [pc, #100]	; (801dfec <_dtoa_r+0x65c>)
 801df88:	ec51 0b18 	vmov	r0, r1, d8
 801df8c:	f7e2 f99e 	bl	80002cc <__adddf3>
 801df90:	4602      	mov	r2, r0
 801df92:	460b      	mov	r3, r1
 801df94:	4630      	mov	r0, r6
 801df96:	4639      	mov	r1, r7
 801df98:	f7e2 fdde 	bl	8000b58 <__aeabi_dcmpgt>
 801df9c:	2800      	cmp	r0, #0
 801df9e:	d175      	bne.n	801e08c <_dtoa_r+0x6fc>
 801dfa0:	ec53 2b18 	vmov	r2, r3, d8
 801dfa4:	4911      	ldr	r1, [pc, #68]	; (801dfec <_dtoa_r+0x65c>)
 801dfa6:	2000      	movs	r0, #0
 801dfa8:	f7e2 f98e 	bl	80002c8 <__aeabi_dsub>
 801dfac:	4602      	mov	r2, r0
 801dfae:	460b      	mov	r3, r1
 801dfb0:	4630      	mov	r0, r6
 801dfb2:	4639      	mov	r1, r7
 801dfb4:	f7e2 fdb2 	bl	8000b1c <__aeabi_dcmplt>
 801dfb8:	2800      	cmp	r0, #0
 801dfba:	f43f af27 	beq.w	801de0c <_dtoa_r+0x47c>
 801dfbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801dfc0:	1e6b      	subs	r3, r5, #1
 801dfc2:	930c      	str	r3, [sp, #48]	; 0x30
 801dfc4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801dfc8:	2b30      	cmp	r3, #48	; 0x30
 801dfca:	d0f8      	beq.n	801dfbe <_dtoa_r+0x62e>
 801dfcc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801dfd0:	e04a      	b.n	801e068 <_dtoa_r+0x6d8>
 801dfd2:	bf00      	nop
 801dfd4:	08023110 	.word	0x08023110
 801dfd8:	080230e8 	.word	0x080230e8
 801dfdc:	3ff00000 	.word	0x3ff00000
 801dfe0:	40240000 	.word	0x40240000
 801dfe4:	401c0000 	.word	0x401c0000
 801dfe8:	40140000 	.word	0x40140000
 801dfec:	3fe00000 	.word	0x3fe00000
 801dff0:	4baf      	ldr	r3, [pc, #700]	; (801e2b0 <_dtoa_r+0x920>)
 801dff2:	f7e2 fb21 	bl	8000638 <__aeabi_dmul>
 801dff6:	4606      	mov	r6, r0
 801dff8:	460f      	mov	r7, r1
 801dffa:	e7ac      	b.n	801df56 <_dtoa_r+0x5c6>
 801dffc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801e000:	9d00      	ldr	r5, [sp, #0]
 801e002:	4642      	mov	r2, r8
 801e004:	464b      	mov	r3, r9
 801e006:	4630      	mov	r0, r6
 801e008:	4639      	mov	r1, r7
 801e00a:	f7e2 fc3f 	bl	800088c <__aeabi_ddiv>
 801e00e:	f7e2 fdc3 	bl	8000b98 <__aeabi_d2iz>
 801e012:	9002      	str	r0, [sp, #8]
 801e014:	f7e2 faa6 	bl	8000564 <__aeabi_i2d>
 801e018:	4642      	mov	r2, r8
 801e01a:	464b      	mov	r3, r9
 801e01c:	f7e2 fb0c 	bl	8000638 <__aeabi_dmul>
 801e020:	4602      	mov	r2, r0
 801e022:	460b      	mov	r3, r1
 801e024:	4630      	mov	r0, r6
 801e026:	4639      	mov	r1, r7
 801e028:	f7e2 f94e 	bl	80002c8 <__aeabi_dsub>
 801e02c:	9e02      	ldr	r6, [sp, #8]
 801e02e:	9f01      	ldr	r7, [sp, #4]
 801e030:	3630      	adds	r6, #48	; 0x30
 801e032:	f805 6b01 	strb.w	r6, [r5], #1
 801e036:	9e00      	ldr	r6, [sp, #0]
 801e038:	1bae      	subs	r6, r5, r6
 801e03a:	42b7      	cmp	r7, r6
 801e03c:	4602      	mov	r2, r0
 801e03e:	460b      	mov	r3, r1
 801e040:	d137      	bne.n	801e0b2 <_dtoa_r+0x722>
 801e042:	f7e2 f943 	bl	80002cc <__adddf3>
 801e046:	4642      	mov	r2, r8
 801e048:	464b      	mov	r3, r9
 801e04a:	4606      	mov	r6, r0
 801e04c:	460f      	mov	r7, r1
 801e04e:	f7e2 fd83 	bl	8000b58 <__aeabi_dcmpgt>
 801e052:	b9c8      	cbnz	r0, 801e088 <_dtoa_r+0x6f8>
 801e054:	4642      	mov	r2, r8
 801e056:	464b      	mov	r3, r9
 801e058:	4630      	mov	r0, r6
 801e05a:	4639      	mov	r1, r7
 801e05c:	f7e2 fd54 	bl	8000b08 <__aeabi_dcmpeq>
 801e060:	b110      	cbz	r0, 801e068 <_dtoa_r+0x6d8>
 801e062:	9b02      	ldr	r3, [sp, #8]
 801e064:	07d9      	lsls	r1, r3, #31
 801e066:	d40f      	bmi.n	801e088 <_dtoa_r+0x6f8>
 801e068:	4620      	mov	r0, r4
 801e06a:	4659      	mov	r1, fp
 801e06c:	f001 f88e 	bl	801f18c <_Bfree>
 801e070:	2300      	movs	r3, #0
 801e072:	702b      	strb	r3, [r5, #0]
 801e074:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e076:	f10a 0001 	add.w	r0, sl, #1
 801e07a:	6018      	str	r0, [r3, #0]
 801e07c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e07e:	2b00      	cmp	r3, #0
 801e080:	f43f acd8 	beq.w	801da34 <_dtoa_r+0xa4>
 801e084:	601d      	str	r5, [r3, #0]
 801e086:	e4d5      	b.n	801da34 <_dtoa_r+0xa4>
 801e088:	f8cd a01c 	str.w	sl, [sp, #28]
 801e08c:	462b      	mov	r3, r5
 801e08e:	461d      	mov	r5, r3
 801e090:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e094:	2a39      	cmp	r2, #57	; 0x39
 801e096:	d108      	bne.n	801e0aa <_dtoa_r+0x71a>
 801e098:	9a00      	ldr	r2, [sp, #0]
 801e09a:	429a      	cmp	r2, r3
 801e09c:	d1f7      	bne.n	801e08e <_dtoa_r+0x6fe>
 801e09e:	9a07      	ldr	r2, [sp, #28]
 801e0a0:	9900      	ldr	r1, [sp, #0]
 801e0a2:	3201      	adds	r2, #1
 801e0a4:	9207      	str	r2, [sp, #28]
 801e0a6:	2230      	movs	r2, #48	; 0x30
 801e0a8:	700a      	strb	r2, [r1, #0]
 801e0aa:	781a      	ldrb	r2, [r3, #0]
 801e0ac:	3201      	adds	r2, #1
 801e0ae:	701a      	strb	r2, [r3, #0]
 801e0b0:	e78c      	b.n	801dfcc <_dtoa_r+0x63c>
 801e0b2:	4b7f      	ldr	r3, [pc, #508]	; (801e2b0 <_dtoa_r+0x920>)
 801e0b4:	2200      	movs	r2, #0
 801e0b6:	f7e2 fabf 	bl	8000638 <__aeabi_dmul>
 801e0ba:	2200      	movs	r2, #0
 801e0bc:	2300      	movs	r3, #0
 801e0be:	4606      	mov	r6, r0
 801e0c0:	460f      	mov	r7, r1
 801e0c2:	f7e2 fd21 	bl	8000b08 <__aeabi_dcmpeq>
 801e0c6:	2800      	cmp	r0, #0
 801e0c8:	d09b      	beq.n	801e002 <_dtoa_r+0x672>
 801e0ca:	e7cd      	b.n	801e068 <_dtoa_r+0x6d8>
 801e0cc:	9a08      	ldr	r2, [sp, #32]
 801e0ce:	2a00      	cmp	r2, #0
 801e0d0:	f000 80c4 	beq.w	801e25c <_dtoa_r+0x8cc>
 801e0d4:	9a05      	ldr	r2, [sp, #20]
 801e0d6:	2a01      	cmp	r2, #1
 801e0d8:	f300 80a8 	bgt.w	801e22c <_dtoa_r+0x89c>
 801e0dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e0de:	2a00      	cmp	r2, #0
 801e0e0:	f000 80a0 	beq.w	801e224 <_dtoa_r+0x894>
 801e0e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801e0e8:	9e06      	ldr	r6, [sp, #24]
 801e0ea:	4645      	mov	r5, r8
 801e0ec:	9a04      	ldr	r2, [sp, #16]
 801e0ee:	2101      	movs	r1, #1
 801e0f0:	441a      	add	r2, r3
 801e0f2:	4620      	mov	r0, r4
 801e0f4:	4498      	add	r8, r3
 801e0f6:	9204      	str	r2, [sp, #16]
 801e0f8:	f001 f94e 	bl	801f398 <__i2b>
 801e0fc:	4607      	mov	r7, r0
 801e0fe:	2d00      	cmp	r5, #0
 801e100:	dd0b      	ble.n	801e11a <_dtoa_r+0x78a>
 801e102:	9b04      	ldr	r3, [sp, #16]
 801e104:	2b00      	cmp	r3, #0
 801e106:	dd08      	ble.n	801e11a <_dtoa_r+0x78a>
 801e108:	42ab      	cmp	r3, r5
 801e10a:	9a04      	ldr	r2, [sp, #16]
 801e10c:	bfa8      	it	ge
 801e10e:	462b      	movge	r3, r5
 801e110:	eba8 0803 	sub.w	r8, r8, r3
 801e114:	1aed      	subs	r5, r5, r3
 801e116:	1ad3      	subs	r3, r2, r3
 801e118:	9304      	str	r3, [sp, #16]
 801e11a:	9b06      	ldr	r3, [sp, #24]
 801e11c:	b1fb      	cbz	r3, 801e15e <_dtoa_r+0x7ce>
 801e11e:	9b08      	ldr	r3, [sp, #32]
 801e120:	2b00      	cmp	r3, #0
 801e122:	f000 809f 	beq.w	801e264 <_dtoa_r+0x8d4>
 801e126:	2e00      	cmp	r6, #0
 801e128:	dd11      	ble.n	801e14e <_dtoa_r+0x7be>
 801e12a:	4639      	mov	r1, r7
 801e12c:	4632      	mov	r2, r6
 801e12e:	4620      	mov	r0, r4
 801e130:	f001 f9ee 	bl	801f510 <__pow5mult>
 801e134:	465a      	mov	r2, fp
 801e136:	4601      	mov	r1, r0
 801e138:	4607      	mov	r7, r0
 801e13a:	4620      	mov	r0, r4
 801e13c:	f001 f942 	bl	801f3c4 <__multiply>
 801e140:	4659      	mov	r1, fp
 801e142:	9007      	str	r0, [sp, #28]
 801e144:	4620      	mov	r0, r4
 801e146:	f001 f821 	bl	801f18c <_Bfree>
 801e14a:	9b07      	ldr	r3, [sp, #28]
 801e14c:	469b      	mov	fp, r3
 801e14e:	9b06      	ldr	r3, [sp, #24]
 801e150:	1b9a      	subs	r2, r3, r6
 801e152:	d004      	beq.n	801e15e <_dtoa_r+0x7ce>
 801e154:	4659      	mov	r1, fp
 801e156:	4620      	mov	r0, r4
 801e158:	f001 f9da 	bl	801f510 <__pow5mult>
 801e15c:	4683      	mov	fp, r0
 801e15e:	2101      	movs	r1, #1
 801e160:	4620      	mov	r0, r4
 801e162:	f001 f919 	bl	801f398 <__i2b>
 801e166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e168:	2b00      	cmp	r3, #0
 801e16a:	4606      	mov	r6, r0
 801e16c:	dd7c      	ble.n	801e268 <_dtoa_r+0x8d8>
 801e16e:	461a      	mov	r2, r3
 801e170:	4601      	mov	r1, r0
 801e172:	4620      	mov	r0, r4
 801e174:	f001 f9cc 	bl	801f510 <__pow5mult>
 801e178:	9b05      	ldr	r3, [sp, #20]
 801e17a:	2b01      	cmp	r3, #1
 801e17c:	4606      	mov	r6, r0
 801e17e:	dd76      	ble.n	801e26e <_dtoa_r+0x8de>
 801e180:	2300      	movs	r3, #0
 801e182:	9306      	str	r3, [sp, #24]
 801e184:	6933      	ldr	r3, [r6, #16]
 801e186:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801e18a:	6918      	ldr	r0, [r3, #16]
 801e18c:	f001 f8b4 	bl	801f2f8 <__hi0bits>
 801e190:	f1c0 0020 	rsb	r0, r0, #32
 801e194:	9b04      	ldr	r3, [sp, #16]
 801e196:	4418      	add	r0, r3
 801e198:	f010 001f 	ands.w	r0, r0, #31
 801e19c:	f000 8086 	beq.w	801e2ac <_dtoa_r+0x91c>
 801e1a0:	f1c0 0320 	rsb	r3, r0, #32
 801e1a4:	2b04      	cmp	r3, #4
 801e1a6:	dd7f      	ble.n	801e2a8 <_dtoa_r+0x918>
 801e1a8:	f1c0 001c 	rsb	r0, r0, #28
 801e1ac:	9b04      	ldr	r3, [sp, #16]
 801e1ae:	4403      	add	r3, r0
 801e1b0:	4480      	add	r8, r0
 801e1b2:	4405      	add	r5, r0
 801e1b4:	9304      	str	r3, [sp, #16]
 801e1b6:	f1b8 0f00 	cmp.w	r8, #0
 801e1ba:	dd05      	ble.n	801e1c8 <_dtoa_r+0x838>
 801e1bc:	4659      	mov	r1, fp
 801e1be:	4642      	mov	r2, r8
 801e1c0:	4620      	mov	r0, r4
 801e1c2:	f001 f9ff 	bl	801f5c4 <__lshift>
 801e1c6:	4683      	mov	fp, r0
 801e1c8:	9b04      	ldr	r3, [sp, #16]
 801e1ca:	2b00      	cmp	r3, #0
 801e1cc:	dd05      	ble.n	801e1da <_dtoa_r+0x84a>
 801e1ce:	4631      	mov	r1, r6
 801e1d0:	461a      	mov	r2, r3
 801e1d2:	4620      	mov	r0, r4
 801e1d4:	f001 f9f6 	bl	801f5c4 <__lshift>
 801e1d8:	4606      	mov	r6, r0
 801e1da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e1dc:	2b00      	cmp	r3, #0
 801e1de:	d069      	beq.n	801e2b4 <_dtoa_r+0x924>
 801e1e0:	4631      	mov	r1, r6
 801e1e2:	4658      	mov	r0, fp
 801e1e4:	f001 fa5a 	bl	801f69c <__mcmp>
 801e1e8:	2800      	cmp	r0, #0
 801e1ea:	da63      	bge.n	801e2b4 <_dtoa_r+0x924>
 801e1ec:	2300      	movs	r3, #0
 801e1ee:	4659      	mov	r1, fp
 801e1f0:	220a      	movs	r2, #10
 801e1f2:	4620      	mov	r0, r4
 801e1f4:	f000 ffec 	bl	801f1d0 <__multadd>
 801e1f8:	9b08      	ldr	r3, [sp, #32]
 801e1fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e1fe:	4683      	mov	fp, r0
 801e200:	2b00      	cmp	r3, #0
 801e202:	f000 818f 	beq.w	801e524 <_dtoa_r+0xb94>
 801e206:	4639      	mov	r1, r7
 801e208:	2300      	movs	r3, #0
 801e20a:	220a      	movs	r2, #10
 801e20c:	4620      	mov	r0, r4
 801e20e:	f000 ffdf 	bl	801f1d0 <__multadd>
 801e212:	f1b9 0f00 	cmp.w	r9, #0
 801e216:	4607      	mov	r7, r0
 801e218:	f300 808e 	bgt.w	801e338 <_dtoa_r+0x9a8>
 801e21c:	9b05      	ldr	r3, [sp, #20]
 801e21e:	2b02      	cmp	r3, #2
 801e220:	dc50      	bgt.n	801e2c4 <_dtoa_r+0x934>
 801e222:	e089      	b.n	801e338 <_dtoa_r+0x9a8>
 801e224:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e226:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801e22a:	e75d      	b.n	801e0e8 <_dtoa_r+0x758>
 801e22c:	9b01      	ldr	r3, [sp, #4]
 801e22e:	1e5e      	subs	r6, r3, #1
 801e230:	9b06      	ldr	r3, [sp, #24]
 801e232:	42b3      	cmp	r3, r6
 801e234:	bfbf      	itttt	lt
 801e236:	9b06      	ldrlt	r3, [sp, #24]
 801e238:	9606      	strlt	r6, [sp, #24]
 801e23a:	1af2      	sublt	r2, r6, r3
 801e23c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801e23e:	bfb6      	itet	lt
 801e240:	189b      	addlt	r3, r3, r2
 801e242:	1b9e      	subge	r6, r3, r6
 801e244:	930d      	strlt	r3, [sp, #52]	; 0x34
 801e246:	9b01      	ldr	r3, [sp, #4]
 801e248:	bfb8      	it	lt
 801e24a:	2600      	movlt	r6, #0
 801e24c:	2b00      	cmp	r3, #0
 801e24e:	bfb5      	itete	lt
 801e250:	eba8 0503 	sublt.w	r5, r8, r3
 801e254:	9b01      	ldrge	r3, [sp, #4]
 801e256:	2300      	movlt	r3, #0
 801e258:	4645      	movge	r5, r8
 801e25a:	e747      	b.n	801e0ec <_dtoa_r+0x75c>
 801e25c:	9e06      	ldr	r6, [sp, #24]
 801e25e:	9f08      	ldr	r7, [sp, #32]
 801e260:	4645      	mov	r5, r8
 801e262:	e74c      	b.n	801e0fe <_dtoa_r+0x76e>
 801e264:	9a06      	ldr	r2, [sp, #24]
 801e266:	e775      	b.n	801e154 <_dtoa_r+0x7c4>
 801e268:	9b05      	ldr	r3, [sp, #20]
 801e26a:	2b01      	cmp	r3, #1
 801e26c:	dc18      	bgt.n	801e2a0 <_dtoa_r+0x910>
 801e26e:	9b02      	ldr	r3, [sp, #8]
 801e270:	b9b3      	cbnz	r3, 801e2a0 <_dtoa_r+0x910>
 801e272:	9b03      	ldr	r3, [sp, #12]
 801e274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e278:	b9a3      	cbnz	r3, 801e2a4 <_dtoa_r+0x914>
 801e27a:	9b03      	ldr	r3, [sp, #12]
 801e27c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e280:	0d1b      	lsrs	r3, r3, #20
 801e282:	051b      	lsls	r3, r3, #20
 801e284:	b12b      	cbz	r3, 801e292 <_dtoa_r+0x902>
 801e286:	9b04      	ldr	r3, [sp, #16]
 801e288:	3301      	adds	r3, #1
 801e28a:	9304      	str	r3, [sp, #16]
 801e28c:	f108 0801 	add.w	r8, r8, #1
 801e290:	2301      	movs	r3, #1
 801e292:	9306      	str	r3, [sp, #24]
 801e294:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e296:	2b00      	cmp	r3, #0
 801e298:	f47f af74 	bne.w	801e184 <_dtoa_r+0x7f4>
 801e29c:	2001      	movs	r0, #1
 801e29e:	e779      	b.n	801e194 <_dtoa_r+0x804>
 801e2a0:	2300      	movs	r3, #0
 801e2a2:	e7f6      	b.n	801e292 <_dtoa_r+0x902>
 801e2a4:	9b02      	ldr	r3, [sp, #8]
 801e2a6:	e7f4      	b.n	801e292 <_dtoa_r+0x902>
 801e2a8:	d085      	beq.n	801e1b6 <_dtoa_r+0x826>
 801e2aa:	4618      	mov	r0, r3
 801e2ac:	301c      	adds	r0, #28
 801e2ae:	e77d      	b.n	801e1ac <_dtoa_r+0x81c>
 801e2b0:	40240000 	.word	0x40240000
 801e2b4:	9b01      	ldr	r3, [sp, #4]
 801e2b6:	2b00      	cmp	r3, #0
 801e2b8:	dc38      	bgt.n	801e32c <_dtoa_r+0x99c>
 801e2ba:	9b05      	ldr	r3, [sp, #20]
 801e2bc:	2b02      	cmp	r3, #2
 801e2be:	dd35      	ble.n	801e32c <_dtoa_r+0x99c>
 801e2c0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801e2c4:	f1b9 0f00 	cmp.w	r9, #0
 801e2c8:	d10d      	bne.n	801e2e6 <_dtoa_r+0x956>
 801e2ca:	4631      	mov	r1, r6
 801e2cc:	464b      	mov	r3, r9
 801e2ce:	2205      	movs	r2, #5
 801e2d0:	4620      	mov	r0, r4
 801e2d2:	f000 ff7d 	bl	801f1d0 <__multadd>
 801e2d6:	4601      	mov	r1, r0
 801e2d8:	4606      	mov	r6, r0
 801e2da:	4658      	mov	r0, fp
 801e2dc:	f001 f9de 	bl	801f69c <__mcmp>
 801e2e0:	2800      	cmp	r0, #0
 801e2e2:	f73f adbd 	bgt.w	801de60 <_dtoa_r+0x4d0>
 801e2e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e2e8:	9d00      	ldr	r5, [sp, #0]
 801e2ea:	ea6f 0a03 	mvn.w	sl, r3
 801e2ee:	f04f 0800 	mov.w	r8, #0
 801e2f2:	4631      	mov	r1, r6
 801e2f4:	4620      	mov	r0, r4
 801e2f6:	f000 ff49 	bl	801f18c <_Bfree>
 801e2fa:	2f00      	cmp	r7, #0
 801e2fc:	f43f aeb4 	beq.w	801e068 <_dtoa_r+0x6d8>
 801e300:	f1b8 0f00 	cmp.w	r8, #0
 801e304:	d005      	beq.n	801e312 <_dtoa_r+0x982>
 801e306:	45b8      	cmp	r8, r7
 801e308:	d003      	beq.n	801e312 <_dtoa_r+0x982>
 801e30a:	4641      	mov	r1, r8
 801e30c:	4620      	mov	r0, r4
 801e30e:	f000 ff3d 	bl	801f18c <_Bfree>
 801e312:	4639      	mov	r1, r7
 801e314:	4620      	mov	r0, r4
 801e316:	f000 ff39 	bl	801f18c <_Bfree>
 801e31a:	e6a5      	b.n	801e068 <_dtoa_r+0x6d8>
 801e31c:	2600      	movs	r6, #0
 801e31e:	4637      	mov	r7, r6
 801e320:	e7e1      	b.n	801e2e6 <_dtoa_r+0x956>
 801e322:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e324:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801e328:	4637      	mov	r7, r6
 801e32a:	e599      	b.n	801de60 <_dtoa_r+0x4d0>
 801e32c:	9b08      	ldr	r3, [sp, #32]
 801e32e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801e332:	2b00      	cmp	r3, #0
 801e334:	f000 80fd 	beq.w	801e532 <_dtoa_r+0xba2>
 801e338:	2d00      	cmp	r5, #0
 801e33a:	dd05      	ble.n	801e348 <_dtoa_r+0x9b8>
 801e33c:	4639      	mov	r1, r7
 801e33e:	462a      	mov	r2, r5
 801e340:	4620      	mov	r0, r4
 801e342:	f001 f93f 	bl	801f5c4 <__lshift>
 801e346:	4607      	mov	r7, r0
 801e348:	9b06      	ldr	r3, [sp, #24]
 801e34a:	2b00      	cmp	r3, #0
 801e34c:	d05c      	beq.n	801e408 <_dtoa_r+0xa78>
 801e34e:	6879      	ldr	r1, [r7, #4]
 801e350:	4620      	mov	r0, r4
 801e352:	f000 fedb 	bl	801f10c <_Balloc>
 801e356:	4605      	mov	r5, r0
 801e358:	b928      	cbnz	r0, 801e366 <_dtoa_r+0x9d6>
 801e35a:	4b80      	ldr	r3, [pc, #512]	; (801e55c <_dtoa_r+0xbcc>)
 801e35c:	4602      	mov	r2, r0
 801e35e:	f240 21ea 	movw	r1, #746	; 0x2ea
 801e362:	f7ff bb2e 	b.w	801d9c2 <_dtoa_r+0x32>
 801e366:	693a      	ldr	r2, [r7, #16]
 801e368:	3202      	adds	r2, #2
 801e36a:	0092      	lsls	r2, r2, #2
 801e36c:	f107 010c 	add.w	r1, r7, #12
 801e370:	300c      	adds	r0, #12
 801e372:	f7fc fb81 	bl	801aa78 <memcpy>
 801e376:	2201      	movs	r2, #1
 801e378:	4629      	mov	r1, r5
 801e37a:	4620      	mov	r0, r4
 801e37c:	f001 f922 	bl	801f5c4 <__lshift>
 801e380:	9b00      	ldr	r3, [sp, #0]
 801e382:	3301      	adds	r3, #1
 801e384:	9301      	str	r3, [sp, #4]
 801e386:	9b00      	ldr	r3, [sp, #0]
 801e388:	444b      	add	r3, r9
 801e38a:	9307      	str	r3, [sp, #28]
 801e38c:	9b02      	ldr	r3, [sp, #8]
 801e38e:	f003 0301 	and.w	r3, r3, #1
 801e392:	46b8      	mov	r8, r7
 801e394:	9306      	str	r3, [sp, #24]
 801e396:	4607      	mov	r7, r0
 801e398:	9b01      	ldr	r3, [sp, #4]
 801e39a:	4631      	mov	r1, r6
 801e39c:	3b01      	subs	r3, #1
 801e39e:	4658      	mov	r0, fp
 801e3a0:	9302      	str	r3, [sp, #8]
 801e3a2:	f7ff fa69 	bl	801d878 <quorem>
 801e3a6:	4603      	mov	r3, r0
 801e3a8:	3330      	adds	r3, #48	; 0x30
 801e3aa:	9004      	str	r0, [sp, #16]
 801e3ac:	4641      	mov	r1, r8
 801e3ae:	4658      	mov	r0, fp
 801e3b0:	9308      	str	r3, [sp, #32]
 801e3b2:	f001 f973 	bl	801f69c <__mcmp>
 801e3b6:	463a      	mov	r2, r7
 801e3b8:	4681      	mov	r9, r0
 801e3ba:	4631      	mov	r1, r6
 801e3bc:	4620      	mov	r0, r4
 801e3be:	f001 f989 	bl	801f6d4 <__mdiff>
 801e3c2:	68c2      	ldr	r2, [r0, #12]
 801e3c4:	9b08      	ldr	r3, [sp, #32]
 801e3c6:	4605      	mov	r5, r0
 801e3c8:	bb02      	cbnz	r2, 801e40c <_dtoa_r+0xa7c>
 801e3ca:	4601      	mov	r1, r0
 801e3cc:	4658      	mov	r0, fp
 801e3ce:	f001 f965 	bl	801f69c <__mcmp>
 801e3d2:	9b08      	ldr	r3, [sp, #32]
 801e3d4:	4602      	mov	r2, r0
 801e3d6:	4629      	mov	r1, r5
 801e3d8:	4620      	mov	r0, r4
 801e3da:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801e3de:	f000 fed5 	bl	801f18c <_Bfree>
 801e3e2:	9b05      	ldr	r3, [sp, #20]
 801e3e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e3e6:	9d01      	ldr	r5, [sp, #4]
 801e3e8:	ea43 0102 	orr.w	r1, r3, r2
 801e3ec:	9b06      	ldr	r3, [sp, #24]
 801e3ee:	430b      	orrs	r3, r1
 801e3f0:	9b08      	ldr	r3, [sp, #32]
 801e3f2:	d10d      	bne.n	801e410 <_dtoa_r+0xa80>
 801e3f4:	2b39      	cmp	r3, #57	; 0x39
 801e3f6:	d029      	beq.n	801e44c <_dtoa_r+0xabc>
 801e3f8:	f1b9 0f00 	cmp.w	r9, #0
 801e3fc:	dd01      	ble.n	801e402 <_dtoa_r+0xa72>
 801e3fe:	9b04      	ldr	r3, [sp, #16]
 801e400:	3331      	adds	r3, #49	; 0x31
 801e402:	9a02      	ldr	r2, [sp, #8]
 801e404:	7013      	strb	r3, [r2, #0]
 801e406:	e774      	b.n	801e2f2 <_dtoa_r+0x962>
 801e408:	4638      	mov	r0, r7
 801e40a:	e7b9      	b.n	801e380 <_dtoa_r+0x9f0>
 801e40c:	2201      	movs	r2, #1
 801e40e:	e7e2      	b.n	801e3d6 <_dtoa_r+0xa46>
 801e410:	f1b9 0f00 	cmp.w	r9, #0
 801e414:	db06      	blt.n	801e424 <_dtoa_r+0xa94>
 801e416:	9905      	ldr	r1, [sp, #20]
 801e418:	ea41 0909 	orr.w	r9, r1, r9
 801e41c:	9906      	ldr	r1, [sp, #24]
 801e41e:	ea59 0101 	orrs.w	r1, r9, r1
 801e422:	d120      	bne.n	801e466 <_dtoa_r+0xad6>
 801e424:	2a00      	cmp	r2, #0
 801e426:	ddec      	ble.n	801e402 <_dtoa_r+0xa72>
 801e428:	4659      	mov	r1, fp
 801e42a:	2201      	movs	r2, #1
 801e42c:	4620      	mov	r0, r4
 801e42e:	9301      	str	r3, [sp, #4]
 801e430:	f001 f8c8 	bl	801f5c4 <__lshift>
 801e434:	4631      	mov	r1, r6
 801e436:	4683      	mov	fp, r0
 801e438:	f001 f930 	bl	801f69c <__mcmp>
 801e43c:	2800      	cmp	r0, #0
 801e43e:	9b01      	ldr	r3, [sp, #4]
 801e440:	dc02      	bgt.n	801e448 <_dtoa_r+0xab8>
 801e442:	d1de      	bne.n	801e402 <_dtoa_r+0xa72>
 801e444:	07da      	lsls	r2, r3, #31
 801e446:	d5dc      	bpl.n	801e402 <_dtoa_r+0xa72>
 801e448:	2b39      	cmp	r3, #57	; 0x39
 801e44a:	d1d8      	bne.n	801e3fe <_dtoa_r+0xa6e>
 801e44c:	9a02      	ldr	r2, [sp, #8]
 801e44e:	2339      	movs	r3, #57	; 0x39
 801e450:	7013      	strb	r3, [r2, #0]
 801e452:	462b      	mov	r3, r5
 801e454:	461d      	mov	r5, r3
 801e456:	3b01      	subs	r3, #1
 801e458:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801e45c:	2a39      	cmp	r2, #57	; 0x39
 801e45e:	d050      	beq.n	801e502 <_dtoa_r+0xb72>
 801e460:	3201      	adds	r2, #1
 801e462:	701a      	strb	r2, [r3, #0]
 801e464:	e745      	b.n	801e2f2 <_dtoa_r+0x962>
 801e466:	2a00      	cmp	r2, #0
 801e468:	dd03      	ble.n	801e472 <_dtoa_r+0xae2>
 801e46a:	2b39      	cmp	r3, #57	; 0x39
 801e46c:	d0ee      	beq.n	801e44c <_dtoa_r+0xabc>
 801e46e:	3301      	adds	r3, #1
 801e470:	e7c7      	b.n	801e402 <_dtoa_r+0xa72>
 801e472:	9a01      	ldr	r2, [sp, #4]
 801e474:	9907      	ldr	r1, [sp, #28]
 801e476:	f802 3c01 	strb.w	r3, [r2, #-1]
 801e47a:	428a      	cmp	r2, r1
 801e47c:	d02a      	beq.n	801e4d4 <_dtoa_r+0xb44>
 801e47e:	4659      	mov	r1, fp
 801e480:	2300      	movs	r3, #0
 801e482:	220a      	movs	r2, #10
 801e484:	4620      	mov	r0, r4
 801e486:	f000 fea3 	bl	801f1d0 <__multadd>
 801e48a:	45b8      	cmp	r8, r7
 801e48c:	4683      	mov	fp, r0
 801e48e:	f04f 0300 	mov.w	r3, #0
 801e492:	f04f 020a 	mov.w	r2, #10
 801e496:	4641      	mov	r1, r8
 801e498:	4620      	mov	r0, r4
 801e49a:	d107      	bne.n	801e4ac <_dtoa_r+0xb1c>
 801e49c:	f000 fe98 	bl	801f1d0 <__multadd>
 801e4a0:	4680      	mov	r8, r0
 801e4a2:	4607      	mov	r7, r0
 801e4a4:	9b01      	ldr	r3, [sp, #4]
 801e4a6:	3301      	adds	r3, #1
 801e4a8:	9301      	str	r3, [sp, #4]
 801e4aa:	e775      	b.n	801e398 <_dtoa_r+0xa08>
 801e4ac:	f000 fe90 	bl	801f1d0 <__multadd>
 801e4b0:	4639      	mov	r1, r7
 801e4b2:	4680      	mov	r8, r0
 801e4b4:	2300      	movs	r3, #0
 801e4b6:	220a      	movs	r2, #10
 801e4b8:	4620      	mov	r0, r4
 801e4ba:	f000 fe89 	bl	801f1d0 <__multadd>
 801e4be:	4607      	mov	r7, r0
 801e4c0:	e7f0      	b.n	801e4a4 <_dtoa_r+0xb14>
 801e4c2:	f1b9 0f00 	cmp.w	r9, #0
 801e4c6:	9a00      	ldr	r2, [sp, #0]
 801e4c8:	bfcc      	ite	gt
 801e4ca:	464d      	movgt	r5, r9
 801e4cc:	2501      	movle	r5, #1
 801e4ce:	4415      	add	r5, r2
 801e4d0:	f04f 0800 	mov.w	r8, #0
 801e4d4:	4659      	mov	r1, fp
 801e4d6:	2201      	movs	r2, #1
 801e4d8:	4620      	mov	r0, r4
 801e4da:	9301      	str	r3, [sp, #4]
 801e4dc:	f001 f872 	bl	801f5c4 <__lshift>
 801e4e0:	4631      	mov	r1, r6
 801e4e2:	4683      	mov	fp, r0
 801e4e4:	f001 f8da 	bl	801f69c <__mcmp>
 801e4e8:	2800      	cmp	r0, #0
 801e4ea:	dcb2      	bgt.n	801e452 <_dtoa_r+0xac2>
 801e4ec:	d102      	bne.n	801e4f4 <_dtoa_r+0xb64>
 801e4ee:	9b01      	ldr	r3, [sp, #4]
 801e4f0:	07db      	lsls	r3, r3, #31
 801e4f2:	d4ae      	bmi.n	801e452 <_dtoa_r+0xac2>
 801e4f4:	462b      	mov	r3, r5
 801e4f6:	461d      	mov	r5, r3
 801e4f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e4fc:	2a30      	cmp	r2, #48	; 0x30
 801e4fe:	d0fa      	beq.n	801e4f6 <_dtoa_r+0xb66>
 801e500:	e6f7      	b.n	801e2f2 <_dtoa_r+0x962>
 801e502:	9a00      	ldr	r2, [sp, #0]
 801e504:	429a      	cmp	r2, r3
 801e506:	d1a5      	bne.n	801e454 <_dtoa_r+0xac4>
 801e508:	f10a 0a01 	add.w	sl, sl, #1
 801e50c:	2331      	movs	r3, #49	; 0x31
 801e50e:	e779      	b.n	801e404 <_dtoa_r+0xa74>
 801e510:	4b13      	ldr	r3, [pc, #76]	; (801e560 <_dtoa_r+0xbd0>)
 801e512:	f7ff baaf 	b.w	801da74 <_dtoa_r+0xe4>
 801e516:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e518:	2b00      	cmp	r3, #0
 801e51a:	f47f aa86 	bne.w	801da2a <_dtoa_r+0x9a>
 801e51e:	4b11      	ldr	r3, [pc, #68]	; (801e564 <_dtoa_r+0xbd4>)
 801e520:	f7ff baa8 	b.w	801da74 <_dtoa_r+0xe4>
 801e524:	f1b9 0f00 	cmp.w	r9, #0
 801e528:	dc03      	bgt.n	801e532 <_dtoa_r+0xba2>
 801e52a:	9b05      	ldr	r3, [sp, #20]
 801e52c:	2b02      	cmp	r3, #2
 801e52e:	f73f aec9 	bgt.w	801e2c4 <_dtoa_r+0x934>
 801e532:	9d00      	ldr	r5, [sp, #0]
 801e534:	4631      	mov	r1, r6
 801e536:	4658      	mov	r0, fp
 801e538:	f7ff f99e 	bl	801d878 <quorem>
 801e53c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801e540:	f805 3b01 	strb.w	r3, [r5], #1
 801e544:	9a00      	ldr	r2, [sp, #0]
 801e546:	1aaa      	subs	r2, r5, r2
 801e548:	4591      	cmp	r9, r2
 801e54a:	ddba      	ble.n	801e4c2 <_dtoa_r+0xb32>
 801e54c:	4659      	mov	r1, fp
 801e54e:	2300      	movs	r3, #0
 801e550:	220a      	movs	r2, #10
 801e552:	4620      	mov	r0, r4
 801e554:	f000 fe3c 	bl	801f1d0 <__multadd>
 801e558:	4683      	mov	fp, r0
 801e55a:	e7eb      	b.n	801e534 <_dtoa_r+0xba4>
 801e55c:	08022ff5 	.word	0x08022ff5
 801e560:	080231f9 	.word	0x080231f9
 801e564:	08022f89 	.word	0x08022f89

0801e568 <__sflush_r>:
 801e568:	898a      	ldrh	r2, [r1, #12]
 801e56a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e56e:	4605      	mov	r5, r0
 801e570:	0710      	lsls	r0, r2, #28
 801e572:	460c      	mov	r4, r1
 801e574:	d458      	bmi.n	801e628 <__sflush_r+0xc0>
 801e576:	684b      	ldr	r3, [r1, #4]
 801e578:	2b00      	cmp	r3, #0
 801e57a:	dc05      	bgt.n	801e588 <__sflush_r+0x20>
 801e57c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e57e:	2b00      	cmp	r3, #0
 801e580:	dc02      	bgt.n	801e588 <__sflush_r+0x20>
 801e582:	2000      	movs	r0, #0
 801e584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e588:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e58a:	2e00      	cmp	r6, #0
 801e58c:	d0f9      	beq.n	801e582 <__sflush_r+0x1a>
 801e58e:	2300      	movs	r3, #0
 801e590:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e594:	682f      	ldr	r7, [r5, #0]
 801e596:	602b      	str	r3, [r5, #0]
 801e598:	d032      	beq.n	801e600 <__sflush_r+0x98>
 801e59a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e59c:	89a3      	ldrh	r3, [r4, #12]
 801e59e:	075a      	lsls	r2, r3, #29
 801e5a0:	d505      	bpl.n	801e5ae <__sflush_r+0x46>
 801e5a2:	6863      	ldr	r3, [r4, #4]
 801e5a4:	1ac0      	subs	r0, r0, r3
 801e5a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e5a8:	b10b      	cbz	r3, 801e5ae <__sflush_r+0x46>
 801e5aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e5ac:	1ac0      	subs	r0, r0, r3
 801e5ae:	2300      	movs	r3, #0
 801e5b0:	4602      	mov	r2, r0
 801e5b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e5b4:	6a21      	ldr	r1, [r4, #32]
 801e5b6:	4628      	mov	r0, r5
 801e5b8:	47b0      	blx	r6
 801e5ba:	1c43      	adds	r3, r0, #1
 801e5bc:	89a3      	ldrh	r3, [r4, #12]
 801e5be:	d106      	bne.n	801e5ce <__sflush_r+0x66>
 801e5c0:	6829      	ldr	r1, [r5, #0]
 801e5c2:	291d      	cmp	r1, #29
 801e5c4:	d82c      	bhi.n	801e620 <__sflush_r+0xb8>
 801e5c6:	4a2a      	ldr	r2, [pc, #168]	; (801e670 <__sflush_r+0x108>)
 801e5c8:	40ca      	lsrs	r2, r1
 801e5ca:	07d6      	lsls	r6, r2, #31
 801e5cc:	d528      	bpl.n	801e620 <__sflush_r+0xb8>
 801e5ce:	2200      	movs	r2, #0
 801e5d0:	6062      	str	r2, [r4, #4]
 801e5d2:	04d9      	lsls	r1, r3, #19
 801e5d4:	6922      	ldr	r2, [r4, #16]
 801e5d6:	6022      	str	r2, [r4, #0]
 801e5d8:	d504      	bpl.n	801e5e4 <__sflush_r+0x7c>
 801e5da:	1c42      	adds	r2, r0, #1
 801e5dc:	d101      	bne.n	801e5e2 <__sflush_r+0x7a>
 801e5de:	682b      	ldr	r3, [r5, #0]
 801e5e0:	b903      	cbnz	r3, 801e5e4 <__sflush_r+0x7c>
 801e5e2:	6560      	str	r0, [r4, #84]	; 0x54
 801e5e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e5e6:	602f      	str	r7, [r5, #0]
 801e5e8:	2900      	cmp	r1, #0
 801e5ea:	d0ca      	beq.n	801e582 <__sflush_r+0x1a>
 801e5ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e5f0:	4299      	cmp	r1, r3
 801e5f2:	d002      	beq.n	801e5fa <__sflush_r+0x92>
 801e5f4:	4628      	mov	r0, r5
 801e5f6:	f7fc fced 	bl	801afd4 <_free_r>
 801e5fa:	2000      	movs	r0, #0
 801e5fc:	6360      	str	r0, [r4, #52]	; 0x34
 801e5fe:	e7c1      	b.n	801e584 <__sflush_r+0x1c>
 801e600:	6a21      	ldr	r1, [r4, #32]
 801e602:	2301      	movs	r3, #1
 801e604:	4628      	mov	r0, r5
 801e606:	47b0      	blx	r6
 801e608:	1c41      	adds	r1, r0, #1
 801e60a:	d1c7      	bne.n	801e59c <__sflush_r+0x34>
 801e60c:	682b      	ldr	r3, [r5, #0]
 801e60e:	2b00      	cmp	r3, #0
 801e610:	d0c4      	beq.n	801e59c <__sflush_r+0x34>
 801e612:	2b1d      	cmp	r3, #29
 801e614:	d001      	beq.n	801e61a <__sflush_r+0xb2>
 801e616:	2b16      	cmp	r3, #22
 801e618:	d101      	bne.n	801e61e <__sflush_r+0xb6>
 801e61a:	602f      	str	r7, [r5, #0]
 801e61c:	e7b1      	b.n	801e582 <__sflush_r+0x1a>
 801e61e:	89a3      	ldrh	r3, [r4, #12]
 801e620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e624:	81a3      	strh	r3, [r4, #12]
 801e626:	e7ad      	b.n	801e584 <__sflush_r+0x1c>
 801e628:	690f      	ldr	r7, [r1, #16]
 801e62a:	2f00      	cmp	r7, #0
 801e62c:	d0a9      	beq.n	801e582 <__sflush_r+0x1a>
 801e62e:	0793      	lsls	r3, r2, #30
 801e630:	680e      	ldr	r6, [r1, #0]
 801e632:	bf08      	it	eq
 801e634:	694b      	ldreq	r3, [r1, #20]
 801e636:	600f      	str	r7, [r1, #0]
 801e638:	bf18      	it	ne
 801e63a:	2300      	movne	r3, #0
 801e63c:	eba6 0807 	sub.w	r8, r6, r7
 801e640:	608b      	str	r3, [r1, #8]
 801e642:	f1b8 0f00 	cmp.w	r8, #0
 801e646:	dd9c      	ble.n	801e582 <__sflush_r+0x1a>
 801e648:	6a21      	ldr	r1, [r4, #32]
 801e64a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e64c:	4643      	mov	r3, r8
 801e64e:	463a      	mov	r2, r7
 801e650:	4628      	mov	r0, r5
 801e652:	47b0      	blx	r6
 801e654:	2800      	cmp	r0, #0
 801e656:	dc06      	bgt.n	801e666 <__sflush_r+0xfe>
 801e658:	89a3      	ldrh	r3, [r4, #12]
 801e65a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e65e:	81a3      	strh	r3, [r4, #12]
 801e660:	f04f 30ff 	mov.w	r0, #4294967295
 801e664:	e78e      	b.n	801e584 <__sflush_r+0x1c>
 801e666:	4407      	add	r7, r0
 801e668:	eba8 0800 	sub.w	r8, r8, r0
 801e66c:	e7e9      	b.n	801e642 <__sflush_r+0xda>
 801e66e:	bf00      	nop
 801e670:	20400001 	.word	0x20400001

0801e674 <_fflush_r>:
 801e674:	b538      	push	{r3, r4, r5, lr}
 801e676:	690b      	ldr	r3, [r1, #16]
 801e678:	4605      	mov	r5, r0
 801e67a:	460c      	mov	r4, r1
 801e67c:	b913      	cbnz	r3, 801e684 <_fflush_r+0x10>
 801e67e:	2500      	movs	r5, #0
 801e680:	4628      	mov	r0, r5
 801e682:	bd38      	pop	{r3, r4, r5, pc}
 801e684:	b118      	cbz	r0, 801e68e <_fflush_r+0x1a>
 801e686:	6983      	ldr	r3, [r0, #24]
 801e688:	b90b      	cbnz	r3, 801e68e <_fflush_r+0x1a>
 801e68a:	f7fc f801 	bl	801a690 <__sinit>
 801e68e:	4b14      	ldr	r3, [pc, #80]	; (801e6e0 <_fflush_r+0x6c>)
 801e690:	429c      	cmp	r4, r3
 801e692:	d11b      	bne.n	801e6cc <_fflush_r+0x58>
 801e694:	686c      	ldr	r4, [r5, #4]
 801e696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e69a:	2b00      	cmp	r3, #0
 801e69c:	d0ef      	beq.n	801e67e <_fflush_r+0xa>
 801e69e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e6a0:	07d0      	lsls	r0, r2, #31
 801e6a2:	d404      	bmi.n	801e6ae <_fflush_r+0x3a>
 801e6a4:	0599      	lsls	r1, r3, #22
 801e6a6:	d402      	bmi.n	801e6ae <_fflush_r+0x3a>
 801e6a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e6aa:	f7fc f9d1 	bl	801aa50 <__retarget_lock_acquire_recursive>
 801e6ae:	4628      	mov	r0, r5
 801e6b0:	4621      	mov	r1, r4
 801e6b2:	f7ff ff59 	bl	801e568 <__sflush_r>
 801e6b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e6b8:	07da      	lsls	r2, r3, #31
 801e6ba:	4605      	mov	r5, r0
 801e6bc:	d4e0      	bmi.n	801e680 <_fflush_r+0xc>
 801e6be:	89a3      	ldrh	r3, [r4, #12]
 801e6c0:	059b      	lsls	r3, r3, #22
 801e6c2:	d4dd      	bmi.n	801e680 <_fflush_r+0xc>
 801e6c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e6c6:	f7fc f9c5 	bl	801aa54 <__retarget_lock_release_recursive>
 801e6ca:	e7d9      	b.n	801e680 <_fflush_r+0xc>
 801e6cc:	4b05      	ldr	r3, [pc, #20]	; (801e6e4 <_fflush_r+0x70>)
 801e6ce:	429c      	cmp	r4, r3
 801e6d0:	d101      	bne.n	801e6d6 <_fflush_r+0x62>
 801e6d2:	68ac      	ldr	r4, [r5, #8]
 801e6d4:	e7df      	b.n	801e696 <_fflush_r+0x22>
 801e6d6:	4b04      	ldr	r3, [pc, #16]	; (801e6e8 <_fflush_r+0x74>)
 801e6d8:	429c      	cmp	r4, r3
 801e6da:	bf08      	it	eq
 801e6dc:	68ec      	ldreq	r4, [r5, #12]
 801e6de:	e7da      	b.n	801e696 <_fflush_r+0x22>
 801e6e0:	08022cac 	.word	0x08022cac
 801e6e4:	08022ccc 	.word	0x08022ccc
 801e6e8:	08022c8c 	.word	0x08022c8c

0801e6ec <fiprintf>:
 801e6ec:	b40e      	push	{r1, r2, r3}
 801e6ee:	b503      	push	{r0, r1, lr}
 801e6f0:	4601      	mov	r1, r0
 801e6f2:	ab03      	add	r3, sp, #12
 801e6f4:	4805      	ldr	r0, [pc, #20]	; (801e70c <fiprintf+0x20>)
 801e6f6:	f853 2b04 	ldr.w	r2, [r3], #4
 801e6fa:	6800      	ldr	r0, [r0, #0]
 801e6fc:	9301      	str	r3, [sp, #4]
 801e6fe:	f001 fd4d 	bl	802019c <_vfiprintf_r>
 801e702:	b002      	add	sp, #8
 801e704:	f85d eb04 	ldr.w	lr, [sp], #4
 801e708:	b003      	add	sp, #12
 801e70a:	4770      	bx	lr
 801e70c:	200000f8 	.word	0x200000f8

0801e710 <rshift>:
 801e710:	6903      	ldr	r3, [r0, #16]
 801e712:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801e716:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e71a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801e71e:	f100 0414 	add.w	r4, r0, #20
 801e722:	dd45      	ble.n	801e7b0 <rshift+0xa0>
 801e724:	f011 011f 	ands.w	r1, r1, #31
 801e728:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801e72c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801e730:	d10c      	bne.n	801e74c <rshift+0x3c>
 801e732:	f100 0710 	add.w	r7, r0, #16
 801e736:	4629      	mov	r1, r5
 801e738:	42b1      	cmp	r1, r6
 801e73a:	d334      	bcc.n	801e7a6 <rshift+0x96>
 801e73c:	1a9b      	subs	r3, r3, r2
 801e73e:	009b      	lsls	r3, r3, #2
 801e740:	1eea      	subs	r2, r5, #3
 801e742:	4296      	cmp	r6, r2
 801e744:	bf38      	it	cc
 801e746:	2300      	movcc	r3, #0
 801e748:	4423      	add	r3, r4
 801e74a:	e015      	b.n	801e778 <rshift+0x68>
 801e74c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801e750:	f1c1 0820 	rsb	r8, r1, #32
 801e754:	40cf      	lsrs	r7, r1
 801e756:	f105 0e04 	add.w	lr, r5, #4
 801e75a:	46a1      	mov	r9, r4
 801e75c:	4576      	cmp	r6, lr
 801e75e:	46f4      	mov	ip, lr
 801e760:	d815      	bhi.n	801e78e <rshift+0x7e>
 801e762:	1a9b      	subs	r3, r3, r2
 801e764:	009a      	lsls	r2, r3, #2
 801e766:	3a04      	subs	r2, #4
 801e768:	3501      	adds	r5, #1
 801e76a:	42ae      	cmp	r6, r5
 801e76c:	bf38      	it	cc
 801e76e:	2200      	movcc	r2, #0
 801e770:	18a3      	adds	r3, r4, r2
 801e772:	50a7      	str	r7, [r4, r2]
 801e774:	b107      	cbz	r7, 801e778 <rshift+0x68>
 801e776:	3304      	adds	r3, #4
 801e778:	1b1a      	subs	r2, r3, r4
 801e77a:	42a3      	cmp	r3, r4
 801e77c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801e780:	bf08      	it	eq
 801e782:	2300      	moveq	r3, #0
 801e784:	6102      	str	r2, [r0, #16]
 801e786:	bf08      	it	eq
 801e788:	6143      	streq	r3, [r0, #20]
 801e78a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e78e:	f8dc c000 	ldr.w	ip, [ip]
 801e792:	fa0c fc08 	lsl.w	ip, ip, r8
 801e796:	ea4c 0707 	orr.w	r7, ip, r7
 801e79a:	f849 7b04 	str.w	r7, [r9], #4
 801e79e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e7a2:	40cf      	lsrs	r7, r1
 801e7a4:	e7da      	b.n	801e75c <rshift+0x4c>
 801e7a6:	f851 cb04 	ldr.w	ip, [r1], #4
 801e7aa:	f847 cf04 	str.w	ip, [r7, #4]!
 801e7ae:	e7c3      	b.n	801e738 <rshift+0x28>
 801e7b0:	4623      	mov	r3, r4
 801e7b2:	e7e1      	b.n	801e778 <rshift+0x68>

0801e7b4 <__hexdig_fun>:
 801e7b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801e7b8:	2b09      	cmp	r3, #9
 801e7ba:	d802      	bhi.n	801e7c2 <__hexdig_fun+0xe>
 801e7bc:	3820      	subs	r0, #32
 801e7be:	b2c0      	uxtb	r0, r0
 801e7c0:	4770      	bx	lr
 801e7c2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801e7c6:	2b05      	cmp	r3, #5
 801e7c8:	d801      	bhi.n	801e7ce <__hexdig_fun+0x1a>
 801e7ca:	3847      	subs	r0, #71	; 0x47
 801e7cc:	e7f7      	b.n	801e7be <__hexdig_fun+0xa>
 801e7ce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801e7d2:	2b05      	cmp	r3, #5
 801e7d4:	d801      	bhi.n	801e7da <__hexdig_fun+0x26>
 801e7d6:	3827      	subs	r0, #39	; 0x27
 801e7d8:	e7f1      	b.n	801e7be <__hexdig_fun+0xa>
 801e7da:	2000      	movs	r0, #0
 801e7dc:	4770      	bx	lr
	...

0801e7e0 <__gethex>:
 801e7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7e4:	ed2d 8b02 	vpush	{d8}
 801e7e8:	b089      	sub	sp, #36	; 0x24
 801e7ea:	ee08 0a10 	vmov	s16, r0
 801e7ee:	9304      	str	r3, [sp, #16]
 801e7f0:	4bbc      	ldr	r3, [pc, #752]	; (801eae4 <__gethex+0x304>)
 801e7f2:	681b      	ldr	r3, [r3, #0]
 801e7f4:	9301      	str	r3, [sp, #4]
 801e7f6:	4618      	mov	r0, r3
 801e7f8:	468b      	mov	fp, r1
 801e7fa:	4690      	mov	r8, r2
 801e7fc:	f7e1 fd02 	bl	8000204 <strlen>
 801e800:	9b01      	ldr	r3, [sp, #4]
 801e802:	f8db 2000 	ldr.w	r2, [fp]
 801e806:	4403      	add	r3, r0
 801e808:	4682      	mov	sl, r0
 801e80a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801e80e:	9305      	str	r3, [sp, #20]
 801e810:	1c93      	adds	r3, r2, #2
 801e812:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801e816:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801e81a:	32fe      	adds	r2, #254	; 0xfe
 801e81c:	18d1      	adds	r1, r2, r3
 801e81e:	461f      	mov	r7, r3
 801e820:	f813 0b01 	ldrb.w	r0, [r3], #1
 801e824:	9100      	str	r1, [sp, #0]
 801e826:	2830      	cmp	r0, #48	; 0x30
 801e828:	d0f8      	beq.n	801e81c <__gethex+0x3c>
 801e82a:	f7ff ffc3 	bl	801e7b4 <__hexdig_fun>
 801e82e:	4604      	mov	r4, r0
 801e830:	2800      	cmp	r0, #0
 801e832:	d13a      	bne.n	801e8aa <__gethex+0xca>
 801e834:	9901      	ldr	r1, [sp, #4]
 801e836:	4652      	mov	r2, sl
 801e838:	4638      	mov	r0, r7
 801e83a:	f7fd fce7 	bl	801c20c <strncmp>
 801e83e:	4605      	mov	r5, r0
 801e840:	2800      	cmp	r0, #0
 801e842:	d168      	bne.n	801e916 <__gethex+0x136>
 801e844:	f817 000a 	ldrb.w	r0, [r7, sl]
 801e848:	eb07 060a 	add.w	r6, r7, sl
 801e84c:	f7ff ffb2 	bl	801e7b4 <__hexdig_fun>
 801e850:	2800      	cmp	r0, #0
 801e852:	d062      	beq.n	801e91a <__gethex+0x13a>
 801e854:	4633      	mov	r3, r6
 801e856:	7818      	ldrb	r0, [r3, #0]
 801e858:	2830      	cmp	r0, #48	; 0x30
 801e85a:	461f      	mov	r7, r3
 801e85c:	f103 0301 	add.w	r3, r3, #1
 801e860:	d0f9      	beq.n	801e856 <__gethex+0x76>
 801e862:	f7ff ffa7 	bl	801e7b4 <__hexdig_fun>
 801e866:	2301      	movs	r3, #1
 801e868:	fab0 f480 	clz	r4, r0
 801e86c:	0964      	lsrs	r4, r4, #5
 801e86e:	4635      	mov	r5, r6
 801e870:	9300      	str	r3, [sp, #0]
 801e872:	463a      	mov	r2, r7
 801e874:	4616      	mov	r6, r2
 801e876:	3201      	adds	r2, #1
 801e878:	7830      	ldrb	r0, [r6, #0]
 801e87a:	f7ff ff9b 	bl	801e7b4 <__hexdig_fun>
 801e87e:	2800      	cmp	r0, #0
 801e880:	d1f8      	bne.n	801e874 <__gethex+0x94>
 801e882:	9901      	ldr	r1, [sp, #4]
 801e884:	4652      	mov	r2, sl
 801e886:	4630      	mov	r0, r6
 801e888:	f7fd fcc0 	bl	801c20c <strncmp>
 801e88c:	b980      	cbnz	r0, 801e8b0 <__gethex+0xd0>
 801e88e:	b94d      	cbnz	r5, 801e8a4 <__gethex+0xc4>
 801e890:	eb06 050a 	add.w	r5, r6, sl
 801e894:	462a      	mov	r2, r5
 801e896:	4616      	mov	r6, r2
 801e898:	3201      	adds	r2, #1
 801e89a:	7830      	ldrb	r0, [r6, #0]
 801e89c:	f7ff ff8a 	bl	801e7b4 <__hexdig_fun>
 801e8a0:	2800      	cmp	r0, #0
 801e8a2:	d1f8      	bne.n	801e896 <__gethex+0xb6>
 801e8a4:	1bad      	subs	r5, r5, r6
 801e8a6:	00ad      	lsls	r5, r5, #2
 801e8a8:	e004      	b.n	801e8b4 <__gethex+0xd4>
 801e8aa:	2400      	movs	r4, #0
 801e8ac:	4625      	mov	r5, r4
 801e8ae:	e7e0      	b.n	801e872 <__gethex+0x92>
 801e8b0:	2d00      	cmp	r5, #0
 801e8b2:	d1f7      	bne.n	801e8a4 <__gethex+0xc4>
 801e8b4:	7833      	ldrb	r3, [r6, #0]
 801e8b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801e8ba:	2b50      	cmp	r3, #80	; 0x50
 801e8bc:	d13b      	bne.n	801e936 <__gethex+0x156>
 801e8be:	7873      	ldrb	r3, [r6, #1]
 801e8c0:	2b2b      	cmp	r3, #43	; 0x2b
 801e8c2:	d02c      	beq.n	801e91e <__gethex+0x13e>
 801e8c4:	2b2d      	cmp	r3, #45	; 0x2d
 801e8c6:	d02e      	beq.n	801e926 <__gethex+0x146>
 801e8c8:	1c71      	adds	r1, r6, #1
 801e8ca:	f04f 0900 	mov.w	r9, #0
 801e8ce:	7808      	ldrb	r0, [r1, #0]
 801e8d0:	f7ff ff70 	bl	801e7b4 <__hexdig_fun>
 801e8d4:	1e43      	subs	r3, r0, #1
 801e8d6:	b2db      	uxtb	r3, r3
 801e8d8:	2b18      	cmp	r3, #24
 801e8da:	d82c      	bhi.n	801e936 <__gethex+0x156>
 801e8dc:	f1a0 0210 	sub.w	r2, r0, #16
 801e8e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801e8e4:	f7ff ff66 	bl	801e7b4 <__hexdig_fun>
 801e8e8:	1e43      	subs	r3, r0, #1
 801e8ea:	b2db      	uxtb	r3, r3
 801e8ec:	2b18      	cmp	r3, #24
 801e8ee:	d91d      	bls.n	801e92c <__gethex+0x14c>
 801e8f0:	f1b9 0f00 	cmp.w	r9, #0
 801e8f4:	d000      	beq.n	801e8f8 <__gethex+0x118>
 801e8f6:	4252      	negs	r2, r2
 801e8f8:	4415      	add	r5, r2
 801e8fa:	f8cb 1000 	str.w	r1, [fp]
 801e8fe:	b1e4      	cbz	r4, 801e93a <__gethex+0x15a>
 801e900:	9b00      	ldr	r3, [sp, #0]
 801e902:	2b00      	cmp	r3, #0
 801e904:	bf14      	ite	ne
 801e906:	2700      	movne	r7, #0
 801e908:	2706      	moveq	r7, #6
 801e90a:	4638      	mov	r0, r7
 801e90c:	b009      	add	sp, #36	; 0x24
 801e90e:	ecbd 8b02 	vpop	{d8}
 801e912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e916:	463e      	mov	r6, r7
 801e918:	4625      	mov	r5, r4
 801e91a:	2401      	movs	r4, #1
 801e91c:	e7ca      	b.n	801e8b4 <__gethex+0xd4>
 801e91e:	f04f 0900 	mov.w	r9, #0
 801e922:	1cb1      	adds	r1, r6, #2
 801e924:	e7d3      	b.n	801e8ce <__gethex+0xee>
 801e926:	f04f 0901 	mov.w	r9, #1
 801e92a:	e7fa      	b.n	801e922 <__gethex+0x142>
 801e92c:	230a      	movs	r3, #10
 801e92e:	fb03 0202 	mla	r2, r3, r2, r0
 801e932:	3a10      	subs	r2, #16
 801e934:	e7d4      	b.n	801e8e0 <__gethex+0x100>
 801e936:	4631      	mov	r1, r6
 801e938:	e7df      	b.n	801e8fa <__gethex+0x11a>
 801e93a:	1bf3      	subs	r3, r6, r7
 801e93c:	3b01      	subs	r3, #1
 801e93e:	4621      	mov	r1, r4
 801e940:	2b07      	cmp	r3, #7
 801e942:	dc0b      	bgt.n	801e95c <__gethex+0x17c>
 801e944:	ee18 0a10 	vmov	r0, s16
 801e948:	f000 fbe0 	bl	801f10c <_Balloc>
 801e94c:	4604      	mov	r4, r0
 801e94e:	b940      	cbnz	r0, 801e962 <__gethex+0x182>
 801e950:	4b65      	ldr	r3, [pc, #404]	; (801eae8 <__gethex+0x308>)
 801e952:	4602      	mov	r2, r0
 801e954:	21de      	movs	r1, #222	; 0xde
 801e956:	4865      	ldr	r0, [pc, #404]	; (801eaec <__gethex+0x30c>)
 801e958:	f7fe ff4c 	bl	801d7f4 <__assert_func>
 801e95c:	3101      	adds	r1, #1
 801e95e:	105b      	asrs	r3, r3, #1
 801e960:	e7ee      	b.n	801e940 <__gethex+0x160>
 801e962:	f100 0914 	add.w	r9, r0, #20
 801e966:	f04f 0b00 	mov.w	fp, #0
 801e96a:	f1ca 0301 	rsb	r3, sl, #1
 801e96e:	f8cd 9008 	str.w	r9, [sp, #8]
 801e972:	f8cd b000 	str.w	fp, [sp]
 801e976:	9306      	str	r3, [sp, #24]
 801e978:	42b7      	cmp	r7, r6
 801e97a:	d340      	bcc.n	801e9fe <__gethex+0x21e>
 801e97c:	9802      	ldr	r0, [sp, #8]
 801e97e:	9b00      	ldr	r3, [sp, #0]
 801e980:	f840 3b04 	str.w	r3, [r0], #4
 801e984:	eba0 0009 	sub.w	r0, r0, r9
 801e988:	1080      	asrs	r0, r0, #2
 801e98a:	0146      	lsls	r6, r0, #5
 801e98c:	6120      	str	r0, [r4, #16]
 801e98e:	4618      	mov	r0, r3
 801e990:	f000 fcb2 	bl	801f2f8 <__hi0bits>
 801e994:	1a30      	subs	r0, r6, r0
 801e996:	f8d8 6000 	ldr.w	r6, [r8]
 801e99a:	42b0      	cmp	r0, r6
 801e99c:	dd63      	ble.n	801ea66 <__gethex+0x286>
 801e99e:	1b87      	subs	r7, r0, r6
 801e9a0:	4639      	mov	r1, r7
 801e9a2:	4620      	mov	r0, r4
 801e9a4:	f001 f84c 	bl	801fa40 <__any_on>
 801e9a8:	4682      	mov	sl, r0
 801e9aa:	b1a8      	cbz	r0, 801e9d8 <__gethex+0x1f8>
 801e9ac:	1e7b      	subs	r3, r7, #1
 801e9ae:	1159      	asrs	r1, r3, #5
 801e9b0:	f003 021f 	and.w	r2, r3, #31
 801e9b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801e9b8:	f04f 0a01 	mov.w	sl, #1
 801e9bc:	fa0a f202 	lsl.w	r2, sl, r2
 801e9c0:	420a      	tst	r2, r1
 801e9c2:	d009      	beq.n	801e9d8 <__gethex+0x1f8>
 801e9c4:	4553      	cmp	r3, sl
 801e9c6:	dd05      	ble.n	801e9d4 <__gethex+0x1f4>
 801e9c8:	1eb9      	subs	r1, r7, #2
 801e9ca:	4620      	mov	r0, r4
 801e9cc:	f001 f838 	bl	801fa40 <__any_on>
 801e9d0:	2800      	cmp	r0, #0
 801e9d2:	d145      	bne.n	801ea60 <__gethex+0x280>
 801e9d4:	f04f 0a02 	mov.w	sl, #2
 801e9d8:	4639      	mov	r1, r7
 801e9da:	4620      	mov	r0, r4
 801e9dc:	f7ff fe98 	bl	801e710 <rshift>
 801e9e0:	443d      	add	r5, r7
 801e9e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e9e6:	42ab      	cmp	r3, r5
 801e9e8:	da4c      	bge.n	801ea84 <__gethex+0x2a4>
 801e9ea:	ee18 0a10 	vmov	r0, s16
 801e9ee:	4621      	mov	r1, r4
 801e9f0:	f000 fbcc 	bl	801f18c <_Bfree>
 801e9f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e9f6:	2300      	movs	r3, #0
 801e9f8:	6013      	str	r3, [r2, #0]
 801e9fa:	27a3      	movs	r7, #163	; 0xa3
 801e9fc:	e785      	b.n	801e90a <__gethex+0x12a>
 801e9fe:	1e73      	subs	r3, r6, #1
 801ea00:	9a05      	ldr	r2, [sp, #20]
 801ea02:	9303      	str	r3, [sp, #12]
 801ea04:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801ea08:	4293      	cmp	r3, r2
 801ea0a:	d019      	beq.n	801ea40 <__gethex+0x260>
 801ea0c:	f1bb 0f20 	cmp.w	fp, #32
 801ea10:	d107      	bne.n	801ea22 <__gethex+0x242>
 801ea12:	9b02      	ldr	r3, [sp, #8]
 801ea14:	9a00      	ldr	r2, [sp, #0]
 801ea16:	f843 2b04 	str.w	r2, [r3], #4
 801ea1a:	9302      	str	r3, [sp, #8]
 801ea1c:	2300      	movs	r3, #0
 801ea1e:	9300      	str	r3, [sp, #0]
 801ea20:	469b      	mov	fp, r3
 801ea22:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801ea26:	f7ff fec5 	bl	801e7b4 <__hexdig_fun>
 801ea2a:	9b00      	ldr	r3, [sp, #0]
 801ea2c:	f000 000f 	and.w	r0, r0, #15
 801ea30:	fa00 f00b 	lsl.w	r0, r0, fp
 801ea34:	4303      	orrs	r3, r0
 801ea36:	9300      	str	r3, [sp, #0]
 801ea38:	f10b 0b04 	add.w	fp, fp, #4
 801ea3c:	9b03      	ldr	r3, [sp, #12]
 801ea3e:	e00d      	b.n	801ea5c <__gethex+0x27c>
 801ea40:	9b03      	ldr	r3, [sp, #12]
 801ea42:	9a06      	ldr	r2, [sp, #24]
 801ea44:	4413      	add	r3, r2
 801ea46:	42bb      	cmp	r3, r7
 801ea48:	d3e0      	bcc.n	801ea0c <__gethex+0x22c>
 801ea4a:	4618      	mov	r0, r3
 801ea4c:	9901      	ldr	r1, [sp, #4]
 801ea4e:	9307      	str	r3, [sp, #28]
 801ea50:	4652      	mov	r2, sl
 801ea52:	f7fd fbdb 	bl	801c20c <strncmp>
 801ea56:	9b07      	ldr	r3, [sp, #28]
 801ea58:	2800      	cmp	r0, #0
 801ea5a:	d1d7      	bne.n	801ea0c <__gethex+0x22c>
 801ea5c:	461e      	mov	r6, r3
 801ea5e:	e78b      	b.n	801e978 <__gethex+0x198>
 801ea60:	f04f 0a03 	mov.w	sl, #3
 801ea64:	e7b8      	b.n	801e9d8 <__gethex+0x1f8>
 801ea66:	da0a      	bge.n	801ea7e <__gethex+0x29e>
 801ea68:	1a37      	subs	r7, r6, r0
 801ea6a:	4621      	mov	r1, r4
 801ea6c:	ee18 0a10 	vmov	r0, s16
 801ea70:	463a      	mov	r2, r7
 801ea72:	f000 fda7 	bl	801f5c4 <__lshift>
 801ea76:	1bed      	subs	r5, r5, r7
 801ea78:	4604      	mov	r4, r0
 801ea7a:	f100 0914 	add.w	r9, r0, #20
 801ea7e:	f04f 0a00 	mov.w	sl, #0
 801ea82:	e7ae      	b.n	801e9e2 <__gethex+0x202>
 801ea84:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801ea88:	42a8      	cmp	r0, r5
 801ea8a:	dd72      	ble.n	801eb72 <__gethex+0x392>
 801ea8c:	1b45      	subs	r5, r0, r5
 801ea8e:	42ae      	cmp	r6, r5
 801ea90:	dc36      	bgt.n	801eb00 <__gethex+0x320>
 801ea92:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ea96:	2b02      	cmp	r3, #2
 801ea98:	d02a      	beq.n	801eaf0 <__gethex+0x310>
 801ea9a:	2b03      	cmp	r3, #3
 801ea9c:	d02c      	beq.n	801eaf8 <__gethex+0x318>
 801ea9e:	2b01      	cmp	r3, #1
 801eaa0:	d115      	bne.n	801eace <__gethex+0x2ee>
 801eaa2:	42ae      	cmp	r6, r5
 801eaa4:	d113      	bne.n	801eace <__gethex+0x2ee>
 801eaa6:	2e01      	cmp	r6, #1
 801eaa8:	d10b      	bne.n	801eac2 <__gethex+0x2e2>
 801eaaa:	9a04      	ldr	r2, [sp, #16]
 801eaac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801eab0:	6013      	str	r3, [r2, #0]
 801eab2:	2301      	movs	r3, #1
 801eab4:	6123      	str	r3, [r4, #16]
 801eab6:	f8c9 3000 	str.w	r3, [r9]
 801eaba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801eabc:	2762      	movs	r7, #98	; 0x62
 801eabe:	601c      	str	r4, [r3, #0]
 801eac0:	e723      	b.n	801e90a <__gethex+0x12a>
 801eac2:	1e71      	subs	r1, r6, #1
 801eac4:	4620      	mov	r0, r4
 801eac6:	f000 ffbb 	bl	801fa40 <__any_on>
 801eaca:	2800      	cmp	r0, #0
 801eacc:	d1ed      	bne.n	801eaaa <__gethex+0x2ca>
 801eace:	ee18 0a10 	vmov	r0, s16
 801ead2:	4621      	mov	r1, r4
 801ead4:	f000 fb5a 	bl	801f18c <_Bfree>
 801ead8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801eada:	2300      	movs	r3, #0
 801eadc:	6013      	str	r3, [r2, #0]
 801eade:	2750      	movs	r7, #80	; 0x50
 801eae0:	e713      	b.n	801e90a <__gethex+0x12a>
 801eae2:	bf00      	nop
 801eae4:	08023070 	.word	0x08023070
 801eae8:	08022ff5 	.word	0x08022ff5
 801eaec:	08023006 	.word	0x08023006
 801eaf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801eaf2:	2b00      	cmp	r3, #0
 801eaf4:	d1eb      	bne.n	801eace <__gethex+0x2ee>
 801eaf6:	e7d8      	b.n	801eaaa <__gethex+0x2ca>
 801eaf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801eafa:	2b00      	cmp	r3, #0
 801eafc:	d1d5      	bne.n	801eaaa <__gethex+0x2ca>
 801eafe:	e7e6      	b.n	801eace <__gethex+0x2ee>
 801eb00:	1e6f      	subs	r7, r5, #1
 801eb02:	f1ba 0f00 	cmp.w	sl, #0
 801eb06:	d131      	bne.n	801eb6c <__gethex+0x38c>
 801eb08:	b127      	cbz	r7, 801eb14 <__gethex+0x334>
 801eb0a:	4639      	mov	r1, r7
 801eb0c:	4620      	mov	r0, r4
 801eb0e:	f000 ff97 	bl	801fa40 <__any_on>
 801eb12:	4682      	mov	sl, r0
 801eb14:	117b      	asrs	r3, r7, #5
 801eb16:	2101      	movs	r1, #1
 801eb18:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801eb1c:	f007 071f 	and.w	r7, r7, #31
 801eb20:	fa01 f707 	lsl.w	r7, r1, r7
 801eb24:	421f      	tst	r7, r3
 801eb26:	4629      	mov	r1, r5
 801eb28:	4620      	mov	r0, r4
 801eb2a:	bf18      	it	ne
 801eb2c:	f04a 0a02 	orrne.w	sl, sl, #2
 801eb30:	1b76      	subs	r6, r6, r5
 801eb32:	f7ff fded 	bl	801e710 <rshift>
 801eb36:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801eb3a:	2702      	movs	r7, #2
 801eb3c:	f1ba 0f00 	cmp.w	sl, #0
 801eb40:	d048      	beq.n	801ebd4 <__gethex+0x3f4>
 801eb42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801eb46:	2b02      	cmp	r3, #2
 801eb48:	d015      	beq.n	801eb76 <__gethex+0x396>
 801eb4a:	2b03      	cmp	r3, #3
 801eb4c:	d017      	beq.n	801eb7e <__gethex+0x39e>
 801eb4e:	2b01      	cmp	r3, #1
 801eb50:	d109      	bne.n	801eb66 <__gethex+0x386>
 801eb52:	f01a 0f02 	tst.w	sl, #2
 801eb56:	d006      	beq.n	801eb66 <__gethex+0x386>
 801eb58:	f8d9 0000 	ldr.w	r0, [r9]
 801eb5c:	ea4a 0a00 	orr.w	sl, sl, r0
 801eb60:	f01a 0f01 	tst.w	sl, #1
 801eb64:	d10e      	bne.n	801eb84 <__gethex+0x3a4>
 801eb66:	f047 0710 	orr.w	r7, r7, #16
 801eb6a:	e033      	b.n	801ebd4 <__gethex+0x3f4>
 801eb6c:	f04f 0a01 	mov.w	sl, #1
 801eb70:	e7d0      	b.n	801eb14 <__gethex+0x334>
 801eb72:	2701      	movs	r7, #1
 801eb74:	e7e2      	b.n	801eb3c <__gethex+0x35c>
 801eb76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801eb78:	f1c3 0301 	rsb	r3, r3, #1
 801eb7c:	9315      	str	r3, [sp, #84]	; 0x54
 801eb7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801eb80:	2b00      	cmp	r3, #0
 801eb82:	d0f0      	beq.n	801eb66 <__gethex+0x386>
 801eb84:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801eb88:	f104 0314 	add.w	r3, r4, #20
 801eb8c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801eb90:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801eb94:	f04f 0c00 	mov.w	ip, #0
 801eb98:	4618      	mov	r0, r3
 801eb9a:	f853 2b04 	ldr.w	r2, [r3], #4
 801eb9e:	f1b2 3fff 	cmp.w	r2, #4294967295
 801eba2:	d01c      	beq.n	801ebde <__gethex+0x3fe>
 801eba4:	3201      	adds	r2, #1
 801eba6:	6002      	str	r2, [r0, #0]
 801eba8:	2f02      	cmp	r7, #2
 801ebaa:	f104 0314 	add.w	r3, r4, #20
 801ebae:	d13f      	bne.n	801ec30 <__gethex+0x450>
 801ebb0:	f8d8 2000 	ldr.w	r2, [r8]
 801ebb4:	3a01      	subs	r2, #1
 801ebb6:	42b2      	cmp	r2, r6
 801ebb8:	d10a      	bne.n	801ebd0 <__gethex+0x3f0>
 801ebba:	1171      	asrs	r1, r6, #5
 801ebbc:	2201      	movs	r2, #1
 801ebbe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ebc2:	f006 061f 	and.w	r6, r6, #31
 801ebc6:	fa02 f606 	lsl.w	r6, r2, r6
 801ebca:	421e      	tst	r6, r3
 801ebcc:	bf18      	it	ne
 801ebce:	4617      	movne	r7, r2
 801ebd0:	f047 0720 	orr.w	r7, r7, #32
 801ebd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ebd6:	601c      	str	r4, [r3, #0]
 801ebd8:	9b04      	ldr	r3, [sp, #16]
 801ebda:	601d      	str	r5, [r3, #0]
 801ebdc:	e695      	b.n	801e90a <__gethex+0x12a>
 801ebde:	4299      	cmp	r1, r3
 801ebe0:	f843 cc04 	str.w	ip, [r3, #-4]
 801ebe4:	d8d8      	bhi.n	801eb98 <__gethex+0x3b8>
 801ebe6:	68a3      	ldr	r3, [r4, #8]
 801ebe8:	459b      	cmp	fp, r3
 801ebea:	db19      	blt.n	801ec20 <__gethex+0x440>
 801ebec:	6861      	ldr	r1, [r4, #4]
 801ebee:	ee18 0a10 	vmov	r0, s16
 801ebf2:	3101      	adds	r1, #1
 801ebf4:	f000 fa8a 	bl	801f10c <_Balloc>
 801ebf8:	4681      	mov	r9, r0
 801ebfa:	b918      	cbnz	r0, 801ec04 <__gethex+0x424>
 801ebfc:	4b1a      	ldr	r3, [pc, #104]	; (801ec68 <__gethex+0x488>)
 801ebfe:	4602      	mov	r2, r0
 801ec00:	2184      	movs	r1, #132	; 0x84
 801ec02:	e6a8      	b.n	801e956 <__gethex+0x176>
 801ec04:	6922      	ldr	r2, [r4, #16]
 801ec06:	3202      	adds	r2, #2
 801ec08:	f104 010c 	add.w	r1, r4, #12
 801ec0c:	0092      	lsls	r2, r2, #2
 801ec0e:	300c      	adds	r0, #12
 801ec10:	f7fb ff32 	bl	801aa78 <memcpy>
 801ec14:	4621      	mov	r1, r4
 801ec16:	ee18 0a10 	vmov	r0, s16
 801ec1a:	f000 fab7 	bl	801f18c <_Bfree>
 801ec1e:	464c      	mov	r4, r9
 801ec20:	6923      	ldr	r3, [r4, #16]
 801ec22:	1c5a      	adds	r2, r3, #1
 801ec24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ec28:	6122      	str	r2, [r4, #16]
 801ec2a:	2201      	movs	r2, #1
 801ec2c:	615a      	str	r2, [r3, #20]
 801ec2e:	e7bb      	b.n	801eba8 <__gethex+0x3c8>
 801ec30:	6922      	ldr	r2, [r4, #16]
 801ec32:	455a      	cmp	r2, fp
 801ec34:	dd0b      	ble.n	801ec4e <__gethex+0x46e>
 801ec36:	2101      	movs	r1, #1
 801ec38:	4620      	mov	r0, r4
 801ec3a:	f7ff fd69 	bl	801e710 <rshift>
 801ec3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ec42:	3501      	adds	r5, #1
 801ec44:	42ab      	cmp	r3, r5
 801ec46:	f6ff aed0 	blt.w	801e9ea <__gethex+0x20a>
 801ec4a:	2701      	movs	r7, #1
 801ec4c:	e7c0      	b.n	801ebd0 <__gethex+0x3f0>
 801ec4e:	f016 061f 	ands.w	r6, r6, #31
 801ec52:	d0fa      	beq.n	801ec4a <__gethex+0x46a>
 801ec54:	449a      	add	sl, r3
 801ec56:	f1c6 0620 	rsb	r6, r6, #32
 801ec5a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801ec5e:	f000 fb4b 	bl	801f2f8 <__hi0bits>
 801ec62:	42b0      	cmp	r0, r6
 801ec64:	dbe7      	blt.n	801ec36 <__gethex+0x456>
 801ec66:	e7f0      	b.n	801ec4a <__gethex+0x46a>
 801ec68:	08022ff5 	.word	0x08022ff5

0801ec6c <L_shift>:
 801ec6c:	f1c2 0208 	rsb	r2, r2, #8
 801ec70:	0092      	lsls	r2, r2, #2
 801ec72:	b570      	push	{r4, r5, r6, lr}
 801ec74:	f1c2 0620 	rsb	r6, r2, #32
 801ec78:	6843      	ldr	r3, [r0, #4]
 801ec7a:	6804      	ldr	r4, [r0, #0]
 801ec7c:	fa03 f506 	lsl.w	r5, r3, r6
 801ec80:	432c      	orrs	r4, r5
 801ec82:	40d3      	lsrs	r3, r2
 801ec84:	6004      	str	r4, [r0, #0]
 801ec86:	f840 3f04 	str.w	r3, [r0, #4]!
 801ec8a:	4288      	cmp	r0, r1
 801ec8c:	d3f4      	bcc.n	801ec78 <L_shift+0xc>
 801ec8e:	bd70      	pop	{r4, r5, r6, pc}

0801ec90 <__match>:
 801ec90:	b530      	push	{r4, r5, lr}
 801ec92:	6803      	ldr	r3, [r0, #0]
 801ec94:	3301      	adds	r3, #1
 801ec96:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ec9a:	b914      	cbnz	r4, 801eca2 <__match+0x12>
 801ec9c:	6003      	str	r3, [r0, #0]
 801ec9e:	2001      	movs	r0, #1
 801eca0:	bd30      	pop	{r4, r5, pc}
 801eca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801eca6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801ecaa:	2d19      	cmp	r5, #25
 801ecac:	bf98      	it	ls
 801ecae:	3220      	addls	r2, #32
 801ecb0:	42a2      	cmp	r2, r4
 801ecb2:	d0f0      	beq.n	801ec96 <__match+0x6>
 801ecb4:	2000      	movs	r0, #0
 801ecb6:	e7f3      	b.n	801eca0 <__match+0x10>

0801ecb8 <__hexnan>:
 801ecb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecbc:	680b      	ldr	r3, [r1, #0]
 801ecbe:	6801      	ldr	r1, [r0, #0]
 801ecc0:	115e      	asrs	r6, r3, #5
 801ecc2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801ecc6:	f013 031f 	ands.w	r3, r3, #31
 801ecca:	b087      	sub	sp, #28
 801eccc:	bf18      	it	ne
 801ecce:	3604      	addne	r6, #4
 801ecd0:	2500      	movs	r5, #0
 801ecd2:	1f37      	subs	r7, r6, #4
 801ecd4:	4682      	mov	sl, r0
 801ecd6:	4690      	mov	r8, r2
 801ecd8:	9301      	str	r3, [sp, #4]
 801ecda:	f846 5c04 	str.w	r5, [r6, #-4]
 801ecde:	46b9      	mov	r9, r7
 801ece0:	463c      	mov	r4, r7
 801ece2:	9502      	str	r5, [sp, #8]
 801ece4:	46ab      	mov	fp, r5
 801ece6:	784a      	ldrb	r2, [r1, #1]
 801ece8:	1c4b      	adds	r3, r1, #1
 801ecea:	9303      	str	r3, [sp, #12]
 801ecec:	b342      	cbz	r2, 801ed40 <__hexnan+0x88>
 801ecee:	4610      	mov	r0, r2
 801ecf0:	9105      	str	r1, [sp, #20]
 801ecf2:	9204      	str	r2, [sp, #16]
 801ecf4:	f7ff fd5e 	bl	801e7b4 <__hexdig_fun>
 801ecf8:	2800      	cmp	r0, #0
 801ecfa:	d14f      	bne.n	801ed9c <__hexnan+0xe4>
 801ecfc:	9a04      	ldr	r2, [sp, #16]
 801ecfe:	9905      	ldr	r1, [sp, #20]
 801ed00:	2a20      	cmp	r2, #32
 801ed02:	d818      	bhi.n	801ed36 <__hexnan+0x7e>
 801ed04:	9b02      	ldr	r3, [sp, #8]
 801ed06:	459b      	cmp	fp, r3
 801ed08:	dd13      	ble.n	801ed32 <__hexnan+0x7a>
 801ed0a:	454c      	cmp	r4, r9
 801ed0c:	d206      	bcs.n	801ed1c <__hexnan+0x64>
 801ed0e:	2d07      	cmp	r5, #7
 801ed10:	dc04      	bgt.n	801ed1c <__hexnan+0x64>
 801ed12:	462a      	mov	r2, r5
 801ed14:	4649      	mov	r1, r9
 801ed16:	4620      	mov	r0, r4
 801ed18:	f7ff ffa8 	bl	801ec6c <L_shift>
 801ed1c:	4544      	cmp	r4, r8
 801ed1e:	d950      	bls.n	801edc2 <__hexnan+0x10a>
 801ed20:	2300      	movs	r3, #0
 801ed22:	f1a4 0904 	sub.w	r9, r4, #4
 801ed26:	f844 3c04 	str.w	r3, [r4, #-4]
 801ed2a:	f8cd b008 	str.w	fp, [sp, #8]
 801ed2e:	464c      	mov	r4, r9
 801ed30:	461d      	mov	r5, r3
 801ed32:	9903      	ldr	r1, [sp, #12]
 801ed34:	e7d7      	b.n	801ece6 <__hexnan+0x2e>
 801ed36:	2a29      	cmp	r2, #41	; 0x29
 801ed38:	d156      	bne.n	801ede8 <__hexnan+0x130>
 801ed3a:	3102      	adds	r1, #2
 801ed3c:	f8ca 1000 	str.w	r1, [sl]
 801ed40:	f1bb 0f00 	cmp.w	fp, #0
 801ed44:	d050      	beq.n	801ede8 <__hexnan+0x130>
 801ed46:	454c      	cmp	r4, r9
 801ed48:	d206      	bcs.n	801ed58 <__hexnan+0xa0>
 801ed4a:	2d07      	cmp	r5, #7
 801ed4c:	dc04      	bgt.n	801ed58 <__hexnan+0xa0>
 801ed4e:	462a      	mov	r2, r5
 801ed50:	4649      	mov	r1, r9
 801ed52:	4620      	mov	r0, r4
 801ed54:	f7ff ff8a 	bl	801ec6c <L_shift>
 801ed58:	4544      	cmp	r4, r8
 801ed5a:	d934      	bls.n	801edc6 <__hexnan+0x10e>
 801ed5c:	f1a8 0204 	sub.w	r2, r8, #4
 801ed60:	4623      	mov	r3, r4
 801ed62:	f853 1b04 	ldr.w	r1, [r3], #4
 801ed66:	f842 1f04 	str.w	r1, [r2, #4]!
 801ed6a:	429f      	cmp	r7, r3
 801ed6c:	d2f9      	bcs.n	801ed62 <__hexnan+0xaa>
 801ed6e:	1b3b      	subs	r3, r7, r4
 801ed70:	f023 0303 	bic.w	r3, r3, #3
 801ed74:	3304      	adds	r3, #4
 801ed76:	3401      	adds	r4, #1
 801ed78:	3e03      	subs	r6, #3
 801ed7a:	42b4      	cmp	r4, r6
 801ed7c:	bf88      	it	hi
 801ed7e:	2304      	movhi	r3, #4
 801ed80:	4443      	add	r3, r8
 801ed82:	2200      	movs	r2, #0
 801ed84:	f843 2b04 	str.w	r2, [r3], #4
 801ed88:	429f      	cmp	r7, r3
 801ed8a:	d2fb      	bcs.n	801ed84 <__hexnan+0xcc>
 801ed8c:	683b      	ldr	r3, [r7, #0]
 801ed8e:	b91b      	cbnz	r3, 801ed98 <__hexnan+0xe0>
 801ed90:	4547      	cmp	r7, r8
 801ed92:	d127      	bne.n	801ede4 <__hexnan+0x12c>
 801ed94:	2301      	movs	r3, #1
 801ed96:	603b      	str	r3, [r7, #0]
 801ed98:	2005      	movs	r0, #5
 801ed9a:	e026      	b.n	801edea <__hexnan+0x132>
 801ed9c:	3501      	adds	r5, #1
 801ed9e:	2d08      	cmp	r5, #8
 801eda0:	f10b 0b01 	add.w	fp, fp, #1
 801eda4:	dd06      	ble.n	801edb4 <__hexnan+0xfc>
 801eda6:	4544      	cmp	r4, r8
 801eda8:	d9c3      	bls.n	801ed32 <__hexnan+0x7a>
 801edaa:	2300      	movs	r3, #0
 801edac:	f844 3c04 	str.w	r3, [r4, #-4]
 801edb0:	2501      	movs	r5, #1
 801edb2:	3c04      	subs	r4, #4
 801edb4:	6822      	ldr	r2, [r4, #0]
 801edb6:	f000 000f 	and.w	r0, r0, #15
 801edba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801edbe:	6022      	str	r2, [r4, #0]
 801edc0:	e7b7      	b.n	801ed32 <__hexnan+0x7a>
 801edc2:	2508      	movs	r5, #8
 801edc4:	e7b5      	b.n	801ed32 <__hexnan+0x7a>
 801edc6:	9b01      	ldr	r3, [sp, #4]
 801edc8:	2b00      	cmp	r3, #0
 801edca:	d0df      	beq.n	801ed8c <__hexnan+0xd4>
 801edcc:	f04f 32ff 	mov.w	r2, #4294967295
 801edd0:	f1c3 0320 	rsb	r3, r3, #32
 801edd4:	fa22 f303 	lsr.w	r3, r2, r3
 801edd8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801eddc:	401a      	ands	r2, r3
 801edde:	f846 2c04 	str.w	r2, [r6, #-4]
 801ede2:	e7d3      	b.n	801ed8c <__hexnan+0xd4>
 801ede4:	3f04      	subs	r7, #4
 801ede6:	e7d1      	b.n	801ed8c <__hexnan+0xd4>
 801ede8:	2004      	movs	r0, #4
 801edea:	b007      	add	sp, #28
 801edec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801edf0 <_findenv_r>:
 801edf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edf4:	4607      	mov	r7, r0
 801edf6:	4689      	mov	r9, r1
 801edf8:	4616      	mov	r6, r2
 801edfa:	f001 fcdf 	bl	80207bc <__env_lock>
 801edfe:	4b18      	ldr	r3, [pc, #96]	; (801ee60 <_findenv_r+0x70>)
 801ee00:	681c      	ldr	r4, [r3, #0]
 801ee02:	469a      	mov	sl, r3
 801ee04:	b134      	cbz	r4, 801ee14 <_findenv_r+0x24>
 801ee06:	464b      	mov	r3, r9
 801ee08:	4698      	mov	r8, r3
 801ee0a:	f813 1b01 	ldrb.w	r1, [r3], #1
 801ee0e:	b139      	cbz	r1, 801ee20 <_findenv_r+0x30>
 801ee10:	293d      	cmp	r1, #61	; 0x3d
 801ee12:	d1f9      	bne.n	801ee08 <_findenv_r+0x18>
 801ee14:	4638      	mov	r0, r7
 801ee16:	f001 fcd7 	bl	80207c8 <__env_unlock>
 801ee1a:	2000      	movs	r0, #0
 801ee1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee20:	eba8 0809 	sub.w	r8, r8, r9
 801ee24:	46a3      	mov	fp, r4
 801ee26:	f854 0b04 	ldr.w	r0, [r4], #4
 801ee2a:	2800      	cmp	r0, #0
 801ee2c:	d0f2      	beq.n	801ee14 <_findenv_r+0x24>
 801ee2e:	4642      	mov	r2, r8
 801ee30:	4649      	mov	r1, r9
 801ee32:	f7fd f9eb 	bl	801c20c <strncmp>
 801ee36:	2800      	cmp	r0, #0
 801ee38:	d1f4      	bne.n	801ee24 <_findenv_r+0x34>
 801ee3a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801ee3e:	eb03 0508 	add.w	r5, r3, r8
 801ee42:	f813 3008 	ldrb.w	r3, [r3, r8]
 801ee46:	2b3d      	cmp	r3, #61	; 0x3d
 801ee48:	d1ec      	bne.n	801ee24 <_findenv_r+0x34>
 801ee4a:	f8da 3000 	ldr.w	r3, [sl]
 801ee4e:	ebab 0303 	sub.w	r3, fp, r3
 801ee52:	109b      	asrs	r3, r3, #2
 801ee54:	4638      	mov	r0, r7
 801ee56:	6033      	str	r3, [r6, #0]
 801ee58:	f001 fcb6 	bl	80207c8 <__env_unlock>
 801ee5c:	1c68      	adds	r0, r5, #1
 801ee5e:	e7dd      	b.n	801ee1c <_findenv_r+0x2c>
 801ee60:	20000330 	.word	0x20000330

0801ee64 <_getenv_r>:
 801ee64:	b507      	push	{r0, r1, r2, lr}
 801ee66:	aa01      	add	r2, sp, #4
 801ee68:	f7ff ffc2 	bl	801edf0 <_findenv_r>
 801ee6c:	b003      	add	sp, #12
 801ee6e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801ee74 <__gettzinfo>:
 801ee74:	4800      	ldr	r0, [pc, #0]	; (801ee78 <__gettzinfo+0x4>)
 801ee76:	4770      	bx	lr
 801ee78:	20000168 	.word	0x20000168

0801ee7c <gmtime_r>:
 801ee7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee80:	e9d0 6700 	ldrd	r6, r7, [r0]
 801ee84:	460c      	mov	r4, r1
 801ee86:	4a51      	ldr	r2, [pc, #324]	; (801efcc <gmtime_r+0x150>)
 801ee88:	2300      	movs	r3, #0
 801ee8a:	4630      	mov	r0, r6
 801ee8c:	4639      	mov	r1, r7
 801ee8e:	f7e1 ff1b 	bl	8000cc8 <__aeabi_ldivmod>
 801ee92:	4639      	mov	r1, r7
 801ee94:	4605      	mov	r5, r0
 801ee96:	4a4d      	ldr	r2, [pc, #308]	; (801efcc <gmtime_r+0x150>)
 801ee98:	4630      	mov	r0, r6
 801ee9a:	2300      	movs	r3, #0
 801ee9c:	f7e1 ff14 	bl	8000cc8 <__aeabi_ldivmod>
 801eea0:	2a00      	cmp	r2, #0
 801eea2:	bfbc      	itt	lt
 801eea4:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 801eea8:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 801eeac:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801eeb0:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 801eeb4:	fbb2 f3f1 	udiv	r3, r2, r1
 801eeb8:	fb01 2213 	mls	r2, r1, r3, r2
 801eebc:	f04f 013c 	mov.w	r1, #60	; 0x3c
 801eec0:	bfac      	ite	ge
 801eec2:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 801eec6:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 801eeca:	60a3      	str	r3, [r4, #8]
 801eecc:	fbb2 f3f1 	udiv	r3, r2, r1
 801eed0:	fb01 2213 	mls	r2, r1, r3, r2
 801eed4:	6063      	str	r3, [r4, #4]
 801eed6:	6022      	str	r2, [r4, #0]
 801eed8:	1cc3      	adds	r3, r0, #3
 801eeda:	2207      	movs	r2, #7
 801eedc:	fb93 f2f2 	sdiv	r2, r3, r2
 801eee0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801eee4:	1a9b      	subs	r3, r3, r2
 801eee6:	bf48      	it	mi
 801eee8:	3307      	addmi	r3, #7
 801eeea:	2800      	cmp	r0, #0
 801eeec:	61a3      	str	r3, [r4, #24]
 801eeee:	bfb8      	it	lt
 801eef0:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 801eef4:	4936      	ldr	r1, [pc, #216]	; (801efd0 <gmtime_r+0x154>)
 801eef6:	bfae      	itee	ge
 801eef8:	fb90 f1f1 	sdivge	r1, r0, r1
 801eefc:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 801ef00:	fb93 f1f1 	sdivlt	r1, r3, r1
 801ef04:	4b33      	ldr	r3, [pc, #204]	; (801efd4 <gmtime_r+0x158>)
 801ef06:	fb03 0001 	mla	r0, r3, r1, r0
 801ef0a:	f648 62ac 	movw	r2, #36524	; 0x8eac
 801ef0e:	fbb0 f2f2 	udiv	r2, r0, r2
 801ef12:	4402      	add	r2, r0
 801ef14:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 801ef18:	fbb0 f3fc 	udiv	r3, r0, ip
 801ef1c:	1ad2      	subs	r2, r2, r3
 801ef1e:	f240 176d 	movw	r7, #365	; 0x16d
 801ef22:	4b2d      	ldr	r3, [pc, #180]	; (801efd8 <gmtime_r+0x15c>)
 801ef24:	fbb0 f3f3 	udiv	r3, r0, r3
 801ef28:	2664      	movs	r6, #100	; 0x64
 801ef2a:	1ad3      	subs	r3, r2, r3
 801ef2c:	fbb3 f5f7 	udiv	r5, r3, r7
 801ef30:	fbb3 f3fc 	udiv	r3, r3, ip
 801ef34:	fbb5 f2f6 	udiv	r2, r5, r6
 801ef38:	1ad3      	subs	r3, r2, r3
 801ef3a:	4403      	add	r3, r0
 801ef3c:	fb07 3315 	mls	r3, r7, r5, r3
 801ef40:	2099      	movs	r0, #153	; 0x99
 801ef42:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801ef46:	f10c 0c02 	add.w	ip, ip, #2
 801ef4a:	f103 0e01 	add.w	lr, r3, #1
 801ef4e:	fbbc f7f0 	udiv	r7, ip, r0
 801ef52:	4378      	muls	r0, r7
 801ef54:	3002      	adds	r0, #2
 801ef56:	f04f 0805 	mov.w	r8, #5
 801ef5a:	fbb0 f0f8 	udiv	r0, r0, r8
 801ef5e:	ebae 0000 	sub.w	r0, lr, r0
 801ef62:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 801ef66:	45f4      	cmp	ip, lr
 801ef68:	bf94      	ite	ls
 801ef6a:	f04f 0c02 	movls.w	ip, #2
 801ef6e:	f06f 0c09 	mvnhi.w	ip, #9
 801ef72:	4467      	add	r7, ip
 801ef74:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 801ef78:	fb0c 5101 	mla	r1, ip, r1, r5
 801ef7c:	2f01      	cmp	r7, #1
 801ef7e:	bf98      	it	ls
 801ef80:	3101      	addls	r1, #1
 801ef82:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 801ef86:	d30c      	bcc.n	801efa2 <gmtime_r+0x126>
 801ef88:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801ef8c:	61e3      	str	r3, [r4, #28]
 801ef8e:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 801ef92:	2300      	movs	r3, #0
 801ef94:	60e0      	str	r0, [r4, #12]
 801ef96:	e9c4 7104 	strd	r7, r1, [r4, #16]
 801ef9a:	6223      	str	r3, [r4, #32]
 801ef9c:	4620      	mov	r0, r4
 801ef9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801efa2:	f015 0f03 	tst.w	r5, #3
 801efa6:	d102      	bne.n	801efae <gmtime_r+0x132>
 801efa8:	fb06 5212 	mls	r2, r6, r2, r5
 801efac:	b95a      	cbnz	r2, 801efc6 <gmtime_r+0x14a>
 801efae:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801efb2:	fbb5 f2f6 	udiv	r2, r5, r6
 801efb6:	fb06 5212 	mls	r2, r6, r2, r5
 801efba:	fab2 f282 	clz	r2, r2
 801efbe:	0952      	lsrs	r2, r2, #5
 801efc0:	333b      	adds	r3, #59	; 0x3b
 801efc2:	4413      	add	r3, r2
 801efc4:	e7e2      	b.n	801ef8c <gmtime_r+0x110>
 801efc6:	2201      	movs	r2, #1
 801efc8:	e7fa      	b.n	801efc0 <gmtime_r+0x144>
 801efca:	bf00      	nop
 801efcc:	00015180 	.word	0x00015180
 801efd0:	00023ab1 	.word	0x00023ab1
 801efd4:	fffdc54f 	.word	0xfffdc54f
 801efd8:	00023ab0 	.word	0x00023ab0

0801efdc <_localeconv_r>:
 801efdc:	4800      	ldr	r0, [pc, #0]	; (801efe0 <_localeconv_r+0x4>)
 801efde:	4770      	bx	lr
 801efe0:	200002b4 	.word	0x200002b4

0801efe4 <_lseek_r>:
 801efe4:	b538      	push	{r3, r4, r5, lr}
 801efe6:	4d07      	ldr	r5, [pc, #28]	; (801f004 <_lseek_r+0x20>)
 801efe8:	4604      	mov	r4, r0
 801efea:	4608      	mov	r0, r1
 801efec:	4611      	mov	r1, r2
 801efee:	2200      	movs	r2, #0
 801eff0:	602a      	str	r2, [r5, #0]
 801eff2:	461a      	mov	r2, r3
 801eff4:	f001 fc40 	bl	8020878 <_lseek>
 801eff8:	1c43      	adds	r3, r0, #1
 801effa:	d102      	bne.n	801f002 <_lseek_r+0x1e>
 801effc:	682b      	ldr	r3, [r5, #0]
 801effe:	b103      	cbz	r3, 801f002 <_lseek_r+0x1e>
 801f000:	6023      	str	r3, [r4, #0]
 801f002:	bd38      	pop	{r3, r4, r5, pc}
 801f004:	20009d18 	.word	0x20009d18

0801f008 <__swhatbuf_r>:
 801f008:	b570      	push	{r4, r5, r6, lr}
 801f00a:	460e      	mov	r6, r1
 801f00c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f010:	2900      	cmp	r1, #0
 801f012:	b096      	sub	sp, #88	; 0x58
 801f014:	4614      	mov	r4, r2
 801f016:	461d      	mov	r5, r3
 801f018:	da07      	bge.n	801f02a <__swhatbuf_r+0x22>
 801f01a:	2300      	movs	r3, #0
 801f01c:	602b      	str	r3, [r5, #0]
 801f01e:	89b3      	ldrh	r3, [r6, #12]
 801f020:	061a      	lsls	r2, r3, #24
 801f022:	d410      	bmi.n	801f046 <__swhatbuf_r+0x3e>
 801f024:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f028:	e00e      	b.n	801f048 <__swhatbuf_r+0x40>
 801f02a:	466a      	mov	r2, sp
 801f02c:	f001 fbd2 	bl	80207d4 <_fstat_r>
 801f030:	2800      	cmp	r0, #0
 801f032:	dbf2      	blt.n	801f01a <__swhatbuf_r+0x12>
 801f034:	9a01      	ldr	r2, [sp, #4]
 801f036:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f03a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f03e:	425a      	negs	r2, r3
 801f040:	415a      	adcs	r2, r3
 801f042:	602a      	str	r2, [r5, #0]
 801f044:	e7ee      	b.n	801f024 <__swhatbuf_r+0x1c>
 801f046:	2340      	movs	r3, #64	; 0x40
 801f048:	2000      	movs	r0, #0
 801f04a:	6023      	str	r3, [r4, #0]
 801f04c:	b016      	add	sp, #88	; 0x58
 801f04e:	bd70      	pop	{r4, r5, r6, pc}

0801f050 <__smakebuf_r>:
 801f050:	898b      	ldrh	r3, [r1, #12]
 801f052:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f054:	079d      	lsls	r5, r3, #30
 801f056:	4606      	mov	r6, r0
 801f058:	460c      	mov	r4, r1
 801f05a:	d507      	bpl.n	801f06c <__smakebuf_r+0x1c>
 801f05c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f060:	6023      	str	r3, [r4, #0]
 801f062:	6123      	str	r3, [r4, #16]
 801f064:	2301      	movs	r3, #1
 801f066:	6163      	str	r3, [r4, #20]
 801f068:	b002      	add	sp, #8
 801f06a:	bd70      	pop	{r4, r5, r6, pc}
 801f06c:	ab01      	add	r3, sp, #4
 801f06e:	466a      	mov	r2, sp
 801f070:	f7ff ffca 	bl	801f008 <__swhatbuf_r>
 801f074:	9900      	ldr	r1, [sp, #0]
 801f076:	4605      	mov	r5, r0
 801f078:	4630      	mov	r0, r6
 801f07a:	f7fb fffb 	bl	801b074 <_malloc_r>
 801f07e:	b948      	cbnz	r0, 801f094 <__smakebuf_r+0x44>
 801f080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f084:	059a      	lsls	r2, r3, #22
 801f086:	d4ef      	bmi.n	801f068 <__smakebuf_r+0x18>
 801f088:	f023 0303 	bic.w	r3, r3, #3
 801f08c:	f043 0302 	orr.w	r3, r3, #2
 801f090:	81a3      	strh	r3, [r4, #12]
 801f092:	e7e3      	b.n	801f05c <__smakebuf_r+0xc>
 801f094:	4b0d      	ldr	r3, [pc, #52]	; (801f0cc <__smakebuf_r+0x7c>)
 801f096:	62b3      	str	r3, [r6, #40]	; 0x28
 801f098:	89a3      	ldrh	r3, [r4, #12]
 801f09a:	6020      	str	r0, [r4, #0]
 801f09c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f0a0:	81a3      	strh	r3, [r4, #12]
 801f0a2:	9b00      	ldr	r3, [sp, #0]
 801f0a4:	6163      	str	r3, [r4, #20]
 801f0a6:	9b01      	ldr	r3, [sp, #4]
 801f0a8:	6120      	str	r0, [r4, #16]
 801f0aa:	b15b      	cbz	r3, 801f0c4 <__smakebuf_r+0x74>
 801f0ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f0b0:	4630      	mov	r0, r6
 801f0b2:	f001 fba1 	bl	80207f8 <_isatty_r>
 801f0b6:	b128      	cbz	r0, 801f0c4 <__smakebuf_r+0x74>
 801f0b8:	89a3      	ldrh	r3, [r4, #12]
 801f0ba:	f023 0303 	bic.w	r3, r3, #3
 801f0be:	f043 0301 	orr.w	r3, r3, #1
 801f0c2:	81a3      	strh	r3, [r4, #12]
 801f0c4:	89a0      	ldrh	r0, [r4, #12]
 801f0c6:	4305      	orrs	r5, r0
 801f0c8:	81a5      	strh	r5, [r4, #12]
 801f0ca:	e7cd      	b.n	801f068 <__smakebuf_r+0x18>
 801f0cc:	0801a629 	.word	0x0801a629

0801f0d0 <__ascii_mbtowc>:
 801f0d0:	b082      	sub	sp, #8
 801f0d2:	b901      	cbnz	r1, 801f0d6 <__ascii_mbtowc+0x6>
 801f0d4:	a901      	add	r1, sp, #4
 801f0d6:	b142      	cbz	r2, 801f0ea <__ascii_mbtowc+0x1a>
 801f0d8:	b14b      	cbz	r3, 801f0ee <__ascii_mbtowc+0x1e>
 801f0da:	7813      	ldrb	r3, [r2, #0]
 801f0dc:	600b      	str	r3, [r1, #0]
 801f0de:	7812      	ldrb	r2, [r2, #0]
 801f0e0:	1e10      	subs	r0, r2, #0
 801f0e2:	bf18      	it	ne
 801f0e4:	2001      	movne	r0, #1
 801f0e6:	b002      	add	sp, #8
 801f0e8:	4770      	bx	lr
 801f0ea:	4610      	mov	r0, r2
 801f0ec:	e7fb      	b.n	801f0e6 <__ascii_mbtowc+0x16>
 801f0ee:	f06f 0001 	mvn.w	r0, #1
 801f0f2:	e7f8      	b.n	801f0e6 <__ascii_mbtowc+0x16>

0801f0f4 <__malloc_lock>:
 801f0f4:	4801      	ldr	r0, [pc, #4]	; (801f0fc <__malloc_lock+0x8>)
 801f0f6:	f7fb bcab 	b.w	801aa50 <__retarget_lock_acquire_recursive>
 801f0fa:	bf00      	nop
 801f0fc:	20009d10 	.word	0x20009d10

0801f100 <__malloc_unlock>:
 801f100:	4801      	ldr	r0, [pc, #4]	; (801f108 <__malloc_unlock+0x8>)
 801f102:	f7fb bca7 	b.w	801aa54 <__retarget_lock_release_recursive>
 801f106:	bf00      	nop
 801f108:	20009d10 	.word	0x20009d10

0801f10c <_Balloc>:
 801f10c:	b570      	push	{r4, r5, r6, lr}
 801f10e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801f110:	4604      	mov	r4, r0
 801f112:	460d      	mov	r5, r1
 801f114:	b976      	cbnz	r6, 801f134 <_Balloc+0x28>
 801f116:	2010      	movs	r0, #16
 801f118:	f7fb fc9e 	bl	801aa58 <malloc>
 801f11c:	4602      	mov	r2, r0
 801f11e:	6260      	str	r0, [r4, #36]	; 0x24
 801f120:	b920      	cbnz	r0, 801f12c <_Balloc+0x20>
 801f122:	4b18      	ldr	r3, [pc, #96]	; (801f184 <_Balloc+0x78>)
 801f124:	4818      	ldr	r0, [pc, #96]	; (801f188 <_Balloc+0x7c>)
 801f126:	2166      	movs	r1, #102	; 0x66
 801f128:	f7fe fb64 	bl	801d7f4 <__assert_func>
 801f12c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f130:	6006      	str	r6, [r0, #0]
 801f132:	60c6      	str	r6, [r0, #12]
 801f134:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801f136:	68f3      	ldr	r3, [r6, #12]
 801f138:	b183      	cbz	r3, 801f15c <_Balloc+0x50>
 801f13a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f13c:	68db      	ldr	r3, [r3, #12]
 801f13e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801f142:	b9b8      	cbnz	r0, 801f174 <_Balloc+0x68>
 801f144:	2101      	movs	r1, #1
 801f146:	fa01 f605 	lsl.w	r6, r1, r5
 801f14a:	1d72      	adds	r2, r6, #5
 801f14c:	0092      	lsls	r2, r2, #2
 801f14e:	4620      	mov	r0, r4
 801f150:	f000 fc97 	bl	801fa82 <_calloc_r>
 801f154:	b160      	cbz	r0, 801f170 <_Balloc+0x64>
 801f156:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801f15a:	e00e      	b.n	801f17a <_Balloc+0x6e>
 801f15c:	2221      	movs	r2, #33	; 0x21
 801f15e:	2104      	movs	r1, #4
 801f160:	4620      	mov	r0, r4
 801f162:	f000 fc8e 	bl	801fa82 <_calloc_r>
 801f166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f168:	60f0      	str	r0, [r6, #12]
 801f16a:	68db      	ldr	r3, [r3, #12]
 801f16c:	2b00      	cmp	r3, #0
 801f16e:	d1e4      	bne.n	801f13a <_Balloc+0x2e>
 801f170:	2000      	movs	r0, #0
 801f172:	bd70      	pop	{r4, r5, r6, pc}
 801f174:	6802      	ldr	r2, [r0, #0]
 801f176:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801f17a:	2300      	movs	r3, #0
 801f17c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f180:	e7f7      	b.n	801f172 <_Balloc+0x66>
 801f182:	bf00      	nop
 801f184:	08022cf0 	.word	0x08022cf0
 801f188:	08023084 	.word	0x08023084

0801f18c <_Bfree>:
 801f18c:	b570      	push	{r4, r5, r6, lr}
 801f18e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801f190:	4605      	mov	r5, r0
 801f192:	460c      	mov	r4, r1
 801f194:	b976      	cbnz	r6, 801f1b4 <_Bfree+0x28>
 801f196:	2010      	movs	r0, #16
 801f198:	f7fb fc5e 	bl	801aa58 <malloc>
 801f19c:	4602      	mov	r2, r0
 801f19e:	6268      	str	r0, [r5, #36]	; 0x24
 801f1a0:	b920      	cbnz	r0, 801f1ac <_Bfree+0x20>
 801f1a2:	4b09      	ldr	r3, [pc, #36]	; (801f1c8 <_Bfree+0x3c>)
 801f1a4:	4809      	ldr	r0, [pc, #36]	; (801f1cc <_Bfree+0x40>)
 801f1a6:	218a      	movs	r1, #138	; 0x8a
 801f1a8:	f7fe fb24 	bl	801d7f4 <__assert_func>
 801f1ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f1b0:	6006      	str	r6, [r0, #0]
 801f1b2:	60c6      	str	r6, [r0, #12]
 801f1b4:	b13c      	cbz	r4, 801f1c6 <_Bfree+0x3a>
 801f1b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801f1b8:	6862      	ldr	r2, [r4, #4]
 801f1ba:	68db      	ldr	r3, [r3, #12]
 801f1bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f1c0:	6021      	str	r1, [r4, #0]
 801f1c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801f1c6:	bd70      	pop	{r4, r5, r6, pc}
 801f1c8:	08022cf0 	.word	0x08022cf0
 801f1cc:	08023084 	.word	0x08023084

0801f1d0 <__multadd>:
 801f1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f1d4:	690e      	ldr	r6, [r1, #16]
 801f1d6:	4607      	mov	r7, r0
 801f1d8:	4698      	mov	r8, r3
 801f1da:	460c      	mov	r4, r1
 801f1dc:	f101 0014 	add.w	r0, r1, #20
 801f1e0:	2300      	movs	r3, #0
 801f1e2:	6805      	ldr	r5, [r0, #0]
 801f1e4:	b2a9      	uxth	r1, r5
 801f1e6:	fb02 8101 	mla	r1, r2, r1, r8
 801f1ea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801f1ee:	0c2d      	lsrs	r5, r5, #16
 801f1f0:	fb02 c505 	mla	r5, r2, r5, ip
 801f1f4:	b289      	uxth	r1, r1
 801f1f6:	3301      	adds	r3, #1
 801f1f8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801f1fc:	429e      	cmp	r6, r3
 801f1fe:	f840 1b04 	str.w	r1, [r0], #4
 801f202:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801f206:	dcec      	bgt.n	801f1e2 <__multadd+0x12>
 801f208:	f1b8 0f00 	cmp.w	r8, #0
 801f20c:	d022      	beq.n	801f254 <__multadd+0x84>
 801f20e:	68a3      	ldr	r3, [r4, #8]
 801f210:	42b3      	cmp	r3, r6
 801f212:	dc19      	bgt.n	801f248 <__multadd+0x78>
 801f214:	6861      	ldr	r1, [r4, #4]
 801f216:	4638      	mov	r0, r7
 801f218:	3101      	adds	r1, #1
 801f21a:	f7ff ff77 	bl	801f10c <_Balloc>
 801f21e:	4605      	mov	r5, r0
 801f220:	b928      	cbnz	r0, 801f22e <__multadd+0x5e>
 801f222:	4602      	mov	r2, r0
 801f224:	4b0d      	ldr	r3, [pc, #52]	; (801f25c <__multadd+0x8c>)
 801f226:	480e      	ldr	r0, [pc, #56]	; (801f260 <__multadd+0x90>)
 801f228:	21b5      	movs	r1, #181	; 0xb5
 801f22a:	f7fe fae3 	bl	801d7f4 <__assert_func>
 801f22e:	6922      	ldr	r2, [r4, #16]
 801f230:	3202      	adds	r2, #2
 801f232:	f104 010c 	add.w	r1, r4, #12
 801f236:	0092      	lsls	r2, r2, #2
 801f238:	300c      	adds	r0, #12
 801f23a:	f7fb fc1d 	bl	801aa78 <memcpy>
 801f23e:	4621      	mov	r1, r4
 801f240:	4638      	mov	r0, r7
 801f242:	f7ff ffa3 	bl	801f18c <_Bfree>
 801f246:	462c      	mov	r4, r5
 801f248:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801f24c:	3601      	adds	r6, #1
 801f24e:	f8c3 8014 	str.w	r8, [r3, #20]
 801f252:	6126      	str	r6, [r4, #16]
 801f254:	4620      	mov	r0, r4
 801f256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f25a:	bf00      	nop
 801f25c:	08022ff5 	.word	0x08022ff5
 801f260:	08023084 	.word	0x08023084

0801f264 <__s2b>:
 801f264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f268:	460c      	mov	r4, r1
 801f26a:	4615      	mov	r5, r2
 801f26c:	461f      	mov	r7, r3
 801f26e:	2209      	movs	r2, #9
 801f270:	3308      	adds	r3, #8
 801f272:	4606      	mov	r6, r0
 801f274:	fb93 f3f2 	sdiv	r3, r3, r2
 801f278:	2100      	movs	r1, #0
 801f27a:	2201      	movs	r2, #1
 801f27c:	429a      	cmp	r2, r3
 801f27e:	db09      	blt.n	801f294 <__s2b+0x30>
 801f280:	4630      	mov	r0, r6
 801f282:	f7ff ff43 	bl	801f10c <_Balloc>
 801f286:	b940      	cbnz	r0, 801f29a <__s2b+0x36>
 801f288:	4602      	mov	r2, r0
 801f28a:	4b19      	ldr	r3, [pc, #100]	; (801f2f0 <__s2b+0x8c>)
 801f28c:	4819      	ldr	r0, [pc, #100]	; (801f2f4 <__s2b+0x90>)
 801f28e:	21ce      	movs	r1, #206	; 0xce
 801f290:	f7fe fab0 	bl	801d7f4 <__assert_func>
 801f294:	0052      	lsls	r2, r2, #1
 801f296:	3101      	adds	r1, #1
 801f298:	e7f0      	b.n	801f27c <__s2b+0x18>
 801f29a:	9b08      	ldr	r3, [sp, #32]
 801f29c:	6143      	str	r3, [r0, #20]
 801f29e:	2d09      	cmp	r5, #9
 801f2a0:	f04f 0301 	mov.w	r3, #1
 801f2a4:	6103      	str	r3, [r0, #16]
 801f2a6:	dd16      	ble.n	801f2d6 <__s2b+0x72>
 801f2a8:	f104 0909 	add.w	r9, r4, #9
 801f2ac:	46c8      	mov	r8, r9
 801f2ae:	442c      	add	r4, r5
 801f2b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 801f2b4:	4601      	mov	r1, r0
 801f2b6:	3b30      	subs	r3, #48	; 0x30
 801f2b8:	220a      	movs	r2, #10
 801f2ba:	4630      	mov	r0, r6
 801f2bc:	f7ff ff88 	bl	801f1d0 <__multadd>
 801f2c0:	45a0      	cmp	r8, r4
 801f2c2:	d1f5      	bne.n	801f2b0 <__s2b+0x4c>
 801f2c4:	f1a5 0408 	sub.w	r4, r5, #8
 801f2c8:	444c      	add	r4, r9
 801f2ca:	1b2d      	subs	r5, r5, r4
 801f2cc:	1963      	adds	r3, r4, r5
 801f2ce:	42bb      	cmp	r3, r7
 801f2d0:	db04      	blt.n	801f2dc <__s2b+0x78>
 801f2d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f2d6:	340a      	adds	r4, #10
 801f2d8:	2509      	movs	r5, #9
 801f2da:	e7f6      	b.n	801f2ca <__s2b+0x66>
 801f2dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f2e0:	4601      	mov	r1, r0
 801f2e2:	3b30      	subs	r3, #48	; 0x30
 801f2e4:	220a      	movs	r2, #10
 801f2e6:	4630      	mov	r0, r6
 801f2e8:	f7ff ff72 	bl	801f1d0 <__multadd>
 801f2ec:	e7ee      	b.n	801f2cc <__s2b+0x68>
 801f2ee:	bf00      	nop
 801f2f0:	08022ff5 	.word	0x08022ff5
 801f2f4:	08023084 	.word	0x08023084

0801f2f8 <__hi0bits>:
 801f2f8:	0c03      	lsrs	r3, r0, #16
 801f2fa:	041b      	lsls	r3, r3, #16
 801f2fc:	b9d3      	cbnz	r3, 801f334 <__hi0bits+0x3c>
 801f2fe:	0400      	lsls	r0, r0, #16
 801f300:	2310      	movs	r3, #16
 801f302:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801f306:	bf04      	itt	eq
 801f308:	0200      	lsleq	r0, r0, #8
 801f30a:	3308      	addeq	r3, #8
 801f30c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801f310:	bf04      	itt	eq
 801f312:	0100      	lsleq	r0, r0, #4
 801f314:	3304      	addeq	r3, #4
 801f316:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801f31a:	bf04      	itt	eq
 801f31c:	0080      	lsleq	r0, r0, #2
 801f31e:	3302      	addeq	r3, #2
 801f320:	2800      	cmp	r0, #0
 801f322:	db05      	blt.n	801f330 <__hi0bits+0x38>
 801f324:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801f328:	f103 0301 	add.w	r3, r3, #1
 801f32c:	bf08      	it	eq
 801f32e:	2320      	moveq	r3, #32
 801f330:	4618      	mov	r0, r3
 801f332:	4770      	bx	lr
 801f334:	2300      	movs	r3, #0
 801f336:	e7e4      	b.n	801f302 <__hi0bits+0xa>

0801f338 <__lo0bits>:
 801f338:	6803      	ldr	r3, [r0, #0]
 801f33a:	f013 0207 	ands.w	r2, r3, #7
 801f33e:	4601      	mov	r1, r0
 801f340:	d00b      	beq.n	801f35a <__lo0bits+0x22>
 801f342:	07da      	lsls	r2, r3, #31
 801f344:	d424      	bmi.n	801f390 <__lo0bits+0x58>
 801f346:	0798      	lsls	r0, r3, #30
 801f348:	bf49      	itett	mi
 801f34a:	085b      	lsrmi	r3, r3, #1
 801f34c:	089b      	lsrpl	r3, r3, #2
 801f34e:	2001      	movmi	r0, #1
 801f350:	600b      	strmi	r3, [r1, #0]
 801f352:	bf5c      	itt	pl
 801f354:	600b      	strpl	r3, [r1, #0]
 801f356:	2002      	movpl	r0, #2
 801f358:	4770      	bx	lr
 801f35a:	b298      	uxth	r0, r3
 801f35c:	b9b0      	cbnz	r0, 801f38c <__lo0bits+0x54>
 801f35e:	0c1b      	lsrs	r3, r3, #16
 801f360:	2010      	movs	r0, #16
 801f362:	f013 0fff 	tst.w	r3, #255	; 0xff
 801f366:	bf04      	itt	eq
 801f368:	0a1b      	lsreq	r3, r3, #8
 801f36a:	3008      	addeq	r0, #8
 801f36c:	071a      	lsls	r2, r3, #28
 801f36e:	bf04      	itt	eq
 801f370:	091b      	lsreq	r3, r3, #4
 801f372:	3004      	addeq	r0, #4
 801f374:	079a      	lsls	r2, r3, #30
 801f376:	bf04      	itt	eq
 801f378:	089b      	lsreq	r3, r3, #2
 801f37a:	3002      	addeq	r0, #2
 801f37c:	07da      	lsls	r2, r3, #31
 801f37e:	d403      	bmi.n	801f388 <__lo0bits+0x50>
 801f380:	085b      	lsrs	r3, r3, #1
 801f382:	f100 0001 	add.w	r0, r0, #1
 801f386:	d005      	beq.n	801f394 <__lo0bits+0x5c>
 801f388:	600b      	str	r3, [r1, #0]
 801f38a:	4770      	bx	lr
 801f38c:	4610      	mov	r0, r2
 801f38e:	e7e8      	b.n	801f362 <__lo0bits+0x2a>
 801f390:	2000      	movs	r0, #0
 801f392:	4770      	bx	lr
 801f394:	2020      	movs	r0, #32
 801f396:	4770      	bx	lr

0801f398 <__i2b>:
 801f398:	b510      	push	{r4, lr}
 801f39a:	460c      	mov	r4, r1
 801f39c:	2101      	movs	r1, #1
 801f39e:	f7ff feb5 	bl	801f10c <_Balloc>
 801f3a2:	4602      	mov	r2, r0
 801f3a4:	b928      	cbnz	r0, 801f3b2 <__i2b+0x1a>
 801f3a6:	4b05      	ldr	r3, [pc, #20]	; (801f3bc <__i2b+0x24>)
 801f3a8:	4805      	ldr	r0, [pc, #20]	; (801f3c0 <__i2b+0x28>)
 801f3aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801f3ae:	f7fe fa21 	bl	801d7f4 <__assert_func>
 801f3b2:	2301      	movs	r3, #1
 801f3b4:	6144      	str	r4, [r0, #20]
 801f3b6:	6103      	str	r3, [r0, #16]
 801f3b8:	bd10      	pop	{r4, pc}
 801f3ba:	bf00      	nop
 801f3bc:	08022ff5 	.word	0x08022ff5
 801f3c0:	08023084 	.word	0x08023084

0801f3c4 <__multiply>:
 801f3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3c8:	4614      	mov	r4, r2
 801f3ca:	690a      	ldr	r2, [r1, #16]
 801f3cc:	6923      	ldr	r3, [r4, #16]
 801f3ce:	429a      	cmp	r2, r3
 801f3d0:	bfb8      	it	lt
 801f3d2:	460b      	movlt	r3, r1
 801f3d4:	460d      	mov	r5, r1
 801f3d6:	bfbc      	itt	lt
 801f3d8:	4625      	movlt	r5, r4
 801f3da:	461c      	movlt	r4, r3
 801f3dc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801f3e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801f3e4:	68ab      	ldr	r3, [r5, #8]
 801f3e6:	6869      	ldr	r1, [r5, #4]
 801f3e8:	eb0a 0709 	add.w	r7, sl, r9
 801f3ec:	42bb      	cmp	r3, r7
 801f3ee:	b085      	sub	sp, #20
 801f3f0:	bfb8      	it	lt
 801f3f2:	3101      	addlt	r1, #1
 801f3f4:	f7ff fe8a 	bl	801f10c <_Balloc>
 801f3f8:	b930      	cbnz	r0, 801f408 <__multiply+0x44>
 801f3fa:	4602      	mov	r2, r0
 801f3fc:	4b42      	ldr	r3, [pc, #264]	; (801f508 <__multiply+0x144>)
 801f3fe:	4843      	ldr	r0, [pc, #268]	; (801f50c <__multiply+0x148>)
 801f400:	f240 115d 	movw	r1, #349	; 0x15d
 801f404:	f7fe f9f6 	bl	801d7f4 <__assert_func>
 801f408:	f100 0614 	add.w	r6, r0, #20
 801f40c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801f410:	4633      	mov	r3, r6
 801f412:	2200      	movs	r2, #0
 801f414:	4543      	cmp	r3, r8
 801f416:	d31e      	bcc.n	801f456 <__multiply+0x92>
 801f418:	f105 0c14 	add.w	ip, r5, #20
 801f41c:	f104 0314 	add.w	r3, r4, #20
 801f420:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801f424:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801f428:	9202      	str	r2, [sp, #8]
 801f42a:	ebac 0205 	sub.w	r2, ip, r5
 801f42e:	3a15      	subs	r2, #21
 801f430:	f022 0203 	bic.w	r2, r2, #3
 801f434:	3204      	adds	r2, #4
 801f436:	f105 0115 	add.w	r1, r5, #21
 801f43a:	458c      	cmp	ip, r1
 801f43c:	bf38      	it	cc
 801f43e:	2204      	movcc	r2, #4
 801f440:	9201      	str	r2, [sp, #4]
 801f442:	9a02      	ldr	r2, [sp, #8]
 801f444:	9303      	str	r3, [sp, #12]
 801f446:	429a      	cmp	r2, r3
 801f448:	d808      	bhi.n	801f45c <__multiply+0x98>
 801f44a:	2f00      	cmp	r7, #0
 801f44c:	dc55      	bgt.n	801f4fa <__multiply+0x136>
 801f44e:	6107      	str	r7, [r0, #16]
 801f450:	b005      	add	sp, #20
 801f452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f456:	f843 2b04 	str.w	r2, [r3], #4
 801f45a:	e7db      	b.n	801f414 <__multiply+0x50>
 801f45c:	f8b3 a000 	ldrh.w	sl, [r3]
 801f460:	f1ba 0f00 	cmp.w	sl, #0
 801f464:	d020      	beq.n	801f4a8 <__multiply+0xe4>
 801f466:	f105 0e14 	add.w	lr, r5, #20
 801f46a:	46b1      	mov	r9, r6
 801f46c:	2200      	movs	r2, #0
 801f46e:	f85e 4b04 	ldr.w	r4, [lr], #4
 801f472:	f8d9 b000 	ldr.w	fp, [r9]
 801f476:	b2a1      	uxth	r1, r4
 801f478:	fa1f fb8b 	uxth.w	fp, fp
 801f47c:	fb0a b101 	mla	r1, sl, r1, fp
 801f480:	4411      	add	r1, r2
 801f482:	f8d9 2000 	ldr.w	r2, [r9]
 801f486:	0c24      	lsrs	r4, r4, #16
 801f488:	0c12      	lsrs	r2, r2, #16
 801f48a:	fb0a 2404 	mla	r4, sl, r4, r2
 801f48e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801f492:	b289      	uxth	r1, r1
 801f494:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801f498:	45f4      	cmp	ip, lr
 801f49a:	f849 1b04 	str.w	r1, [r9], #4
 801f49e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801f4a2:	d8e4      	bhi.n	801f46e <__multiply+0xaa>
 801f4a4:	9901      	ldr	r1, [sp, #4]
 801f4a6:	5072      	str	r2, [r6, r1]
 801f4a8:	9a03      	ldr	r2, [sp, #12]
 801f4aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801f4ae:	3304      	adds	r3, #4
 801f4b0:	f1b9 0f00 	cmp.w	r9, #0
 801f4b4:	d01f      	beq.n	801f4f6 <__multiply+0x132>
 801f4b6:	6834      	ldr	r4, [r6, #0]
 801f4b8:	f105 0114 	add.w	r1, r5, #20
 801f4bc:	46b6      	mov	lr, r6
 801f4be:	f04f 0a00 	mov.w	sl, #0
 801f4c2:	880a      	ldrh	r2, [r1, #0]
 801f4c4:	f8be b002 	ldrh.w	fp, [lr, #2]
 801f4c8:	fb09 b202 	mla	r2, r9, r2, fp
 801f4cc:	4492      	add	sl, r2
 801f4ce:	b2a4      	uxth	r4, r4
 801f4d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801f4d4:	f84e 4b04 	str.w	r4, [lr], #4
 801f4d8:	f851 4b04 	ldr.w	r4, [r1], #4
 801f4dc:	f8be 2000 	ldrh.w	r2, [lr]
 801f4e0:	0c24      	lsrs	r4, r4, #16
 801f4e2:	fb09 2404 	mla	r4, r9, r4, r2
 801f4e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801f4ea:	458c      	cmp	ip, r1
 801f4ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801f4f0:	d8e7      	bhi.n	801f4c2 <__multiply+0xfe>
 801f4f2:	9a01      	ldr	r2, [sp, #4]
 801f4f4:	50b4      	str	r4, [r6, r2]
 801f4f6:	3604      	adds	r6, #4
 801f4f8:	e7a3      	b.n	801f442 <__multiply+0x7e>
 801f4fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801f4fe:	2b00      	cmp	r3, #0
 801f500:	d1a5      	bne.n	801f44e <__multiply+0x8a>
 801f502:	3f01      	subs	r7, #1
 801f504:	e7a1      	b.n	801f44a <__multiply+0x86>
 801f506:	bf00      	nop
 801f508:	08022ff5 	.word	0x08022ff5
 801f50c:	08023084 	.word	0x08023084

0801f510 <__pow5mult>:
 801f510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f514:	4615      	mov	r5, r2
 801f516:	f012 0203 	ands.w	r2, r2, #3
 801f51a:	4606      	mov	r6, r0
 801f51c:	460f      	mov	r7, r1
 801f51e:	d007      	beq.n	801f530 <__pow5mult+0x20>
 801f520:	4c25      	ldr	r4, [pc, #148]	; (801f5b8 <__pow5mult+0xa8>)
 801f522:	3a01      	subs	r2, #1
 801f524:	2300      	movs	r3, #0
 801f526:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f52a:	f7ff fe51 	bl	801f1d0 <__multadd>
 801f52e:	4607      	mov	r7, r0
 801f530:	10ad      	asrs	r5, r5, #2
 801f532:	d03d      	beq.n	801f5b0 <__pow5mult+0xa0>
 801f534:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801f536:	b97c      	cbnz	r4, 801f558 <__pow5mult+0x48>
 801f538:	2010      	movs	r0, #16
 801f53a:	f7fb fa8d 	bl	801aa58 <malloc>
 801f53e:	4602      	mov	r2, r0
 801f540:	6270      	str	r0, [r6, #36]	; 0x24
 801f542:	b928      	cbnz	r0, 801f550 <__pow5mult+0x40>
 801f544:	4b1d      	ldr	r3, [pc, #116]	; (801f5bc <__pow5mult+0xac>)
 801f546:	481e      	ldr	r0, [pc, #120]	; (801f5c0 <__pow5mult+0xb0>)
 801f548:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801f54c:	f7fe f952 	bl	801d7f4 <__assert_func>
 801f550:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f554:	6004      	str	r4, [r0, #0]
 801f556:	60c4      	str	r4, [r0, #12]
 801f558:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801f55c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801f560:	b94c      	cbnz	r4, 801f576 <__pow5mult+0x66>
 801f562:	f240 2171 	movw	r1, #625	; 0x271
 801f566:	4630      	mov	r0, r6
 801f568:	f7ff ff16 	bl	801f398 <__i2b>
 801f56c:	2300      	movs	r3, #0
 801f56e:	f8c8 0008 	str.w	r0, [r8, #8]
 801f572:	4604      	mov	r4, r0
 801f574:	6003      	str	r3, [r0, #0]
 801f576:	f04f 0900 	mov.w	r9, #0
 801f57a:	07eb      	lsls	r3, r5, #31
 801f57c:	d50a      	bpl.n	801f594 <__pow5mult+0x84>
 801f57e:	4639      	mov	r1, r7
 801f580:	4622      	mov	r2, r4
 801f582:	4630      	mov	r0, r6
 801f584:	f7ff ff1e 	bl	801f3c4 <__multiply>
 801f588:	4639      	mov	r1, r7
 801f58a:	4680      	mov	r8, r0
 801f58c:	4630      	mov	r0, r6
 801f58e:	f7ff fdfd 	bl	801f18c <_Bfree>
 801f592:	4647      	mov	r7, r8
 801f594:	106d      	asrs	r5, r5, #1
 801f596:	d00b      	beq.n	801f5b0 <__pow5mult+0xa0>
 801f598:	6820      	ldr	r0, [r4, #0]
 801f59a:	b938      	cbnz	r0, 801f5ac <__pow5mult+0x9c>
 801f59c:	4622      	mov	r2, r4
 801f59e:	4621      	mov	r1, r4
 801f5a0:	4630      	mov	r0, r6
 801f5a2:	f7ff ff0f 	bl	801f3c4 <__multiply>
 801f5a6:	6020      	str	r0, [r4, #0]
 801f5a8:	f8c0 9000 	str.w	r9, [r0]
 801f5ac:	4604      	mov	r4, r0
 801f5ae:	e7e4      	b.n	801f57a <__pow5mult+0x6a>
 801f5b0:	4638      	mov	r0, r7
 801f5b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f5b6:	bf00      	nop
 801f5b8:	080231d8 	.word	0x080231d8
 801f5bc:	08022cf0 	.word	0x08022cf0
 801f5c0:	08023084 	.word	0x08023084

0801f5c4 <__lshift>:
 801f5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f5c8:	460c      	mov	r4, r1
 801f5ca:	6849      	ldr	r1, [r1, #4]
 801f5cc:	6923      	ldr	r3, [r4, #16]
 801f5ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801f5d2:	68a3      	ldr	r3, [r4, #8]
 801f5d4:	4607      	mov	r7, r0
 801f5d6:	4691      	mov	r9, r2
 801f5d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801f5dc:	f108 0601 	add.w	r6, r8, #1
 801f5e0:	42b3      	cmp	r3, r6
 801f5e2:	db0b      	blt.n	801f5fc <__lshift+0x38>
 801f5e4:	4638      	mov	r0, r7
 801f5e6:	f7ff fd91 	bl	801f10c <_Balloc>
 801f5ea:	4605      	mov	r5, r0
 801f5ec:	b948      	cbnz	r0, 801f602 <__lshift+0x3e>
 801f5ee:	4602      	mov	r2, r0
 801f5f0:	4b28      	ldr	r3, [pc, #160]	; (801f694 <__lshift+0xd0>)
 801f5f2:	4829      	ldr	r0, [pc, #164]	; (801f698 <__lshift+0xd4>)
 801f5f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 801f5f8:	f7fe f8fc 	bl	801d7f4 <__assert_func>
 801f5fc:	3101      	adds	r1, #1
 801f5fe:	005b      	lsls	r3, r3, #1
 801f600:	e7ee      	b.n	801f5e0 <__lshift+0x1c>
 801f602:	2300      	movs	r3, #0
 801f604:	f100 0114 	add.w	r1, r0, #20
 801f608:	f100 0210 	add.w	r2, r0, #16
 801f60c:	4618      	mov	r0, r3
 801f60e:	4553      	cmp	r3, sl
 801f610:	db33      	blt.n	801f67a <__lshift+0xb6>
 801f612:	6920      	ldr	r0, [r4, #16]
 801f614:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801f618:	f104 0314 	add.w	r3, r4, #20
 801f61c:	f019 091f 	ands.w	r9, r9, #31
 801f620:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f624:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801f628:	d02b      	beq.n	801f682 <__lshift+0xbe>
 801f62a:	f1c9 0e20 	rsb	lr, r9, #32
 801f62e:	468a      	mov	sl, r1
 801f630:	2200      	movs	r2, #0
 801f632:	6818      	ldr	r0, [r3, #0]
 801f634:	fa00 f009 	lsl.w	r0, r0, r9
 801f638:	4302      	orrs	r2, r0
 801f63a:	f84a 2b04 	str.w	r2, [sl], #4
 801f63e:	f853 2b04 	ldr.w	r2, [r3], #4
 801f642:	459c      	cmp	ip, r3
 801f644:	fa22 f20e 	lsr.w	r2, r2, lr
 801f648:	d8f3      	bhi.n	801f632 <__lshift+0x6e>
 801f64a:	ebac 0304 	sub.w	r3, ip, r4
 801f64e:	3b15      	subs	r3, #21
 801f650:	f023 0303 	bic.w	r3, r3, #3
 801f654:	3304      	adds	r3, #4
 801f656:	f104 0015 	add.w	r0, r4, #21
 801f65a:	4584      	cmp	ip, r0
 801f65c:	bf38      	it	cc
 801f65e:	2304      	movcc	r3, #4
 801f660:	50ca      	str	r2, [r1, r3]
 801f662:	b10a      	cbz	r2, 801f668 <__lshift+0xa4>
 801f664:	f108 0602 	add.w	r6, r8, #2
 801f668:	3e01      	subs	r6, #1
 801f66a:	4638      	mov	r0, r7
 801f66c:	612e      	str	r6, [r5, #16]
 801f66e:	4621      	mov	r1, r4
 801f670:	f7ff fd8c 	bl	801f18c <_Bfree>
 801f674:	4628      	mov	r0, r5
 801f676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f67a:	f842 0f04 	str.w	r0, [r2, #4]!
 801f67e:	3301      	adds	r3, #1
 801f680:	e7c5      	b.n	801f60e <__lshift+0x4a>
 801f682:	3904      	subs	r1, #4
 801f684:	f853 2b04 	ldr.w	r2, [r3], #4
 801f688:	f841 2f04 	str.w	r2, [r1, #4]!
 801f68c:	459c      	cmp	ip, r3
 801f68e:	d8f9      	bhi.n	801f684 <__lshift+0xc0>
 801f690:	e7ea      	b.n	801f668 <__lshift+0xa4>
 801f692:	bf00      	nop
 801f694:	08022ff5 	.word	0x08022ff5
 801f698:	08023084 	.word	0x08023084

0801f69c <__mcmp>:
 801f69c:	b530      	push	{r4, r5, lr}
 801f69e:	6902      	ldr	r2, [r0, #16]
 801f6a0:	690c      	ldr	r4, [r1, #16]
 801f6a2:	1b12      	subs	r2, r2, r4
 801f6a4:	d10e      	bne.n	801f6c4 <__mcmp+0x28>
 801f6a6:	f100 0314 	add.w	r3, r0, #20
 801f6aa:	3114      	adds	r1, #20
 801f6ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801f6b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801f6b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801f6b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801f6bc:	42a5      	cmp	r5, r4
 801f6be:	d003      	beq.n	801f6c8 <__mcmp+0x2c>
 801f6c0:	d305      	bcc.n	801f6ce <__mcmp+0x32>
 801f6c2:	2201      	movs	r2, #1
 801f6c4:	4610      	mov	r0, r2
 801f6c6:	bd30      	pop	{r4, r5, pc}
 801f6c8:	4283      	cmp	r3, r0
 801f6ca:	d3f3      	bcc.n	801f6b4 <__mcmp+0x18>
 801f6cc:	e7fa      	b.n	801f6c4 <__mcmp+0x28>
 801f6ce:	f04f 32ff 	mov.w	r2, #4294967295
 801f6d2:	e7f7      	b.n	801f6c4 <__mcmp+0x28>

0801f6d4 <__mdiff>:
 801f6d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6d8:	460c      	mov	r4, r1
 801f6da:	4606      	mov	r6, r0
 801f6dc:	4611      	mov	r1, r2
 801f6de:	4620      	mov	r0, r4
 801f6e0:	4617      	mov	r7, r2
 801f6e2:	f7ff ffdb 	bl	801f69c <__mcmp>
 801f6e6:	1e05      	subs	r5, r0, #0
 801f6e8:	d110      	bne.n	801f70c <__mdiff+0x38>
 801f6ea:	4629      	mov	r1, r5
 801f6ec:	4630      	mov	r0, r6
 801f6ee:	f7ff fd0d 	bl	801f10c <_Balloc>
 801f6f2:	b930      	cbnz	r0, 801f702 <__mdiff+0x2e>
 801f6f4:	4b39      	ldr	r3, [pc, #228]	; (801f7dc <__mdiff+0x108>)
 801f6f6:	4602      	mov	r2, r0
 801f6f8:	f240 2132 	movw	r1, #562	; 0x232
 801f6fc:	4838      	ldr	r0, [pc, #224]	; (801f7e0 <__mdiff+0x10c>)
 801f6fe:	f7fe f879 	bl	801d7f4 <__assert_func>
 801f702:	2301      	movs	r3, #1
 801f704:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801f708:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f70c:	bfa4      	itt	ge
 801f70e:	463b      	movge	r3, r7
 801f710:	4627      	movge	r7, r4
 801f712:	4630      	mov	r0, r6
 801f714:	6879      	ldr	r1, [r7, #4]
 801f716:	bfa6      	itte	ge
 801f718:	461c      	movge	r4, r3
 801f71a:	2500      	movge	r5, #0
 801f71c:	2501      	movlt	r5, #1
 801f71e:	f7ff fcf5 	bl	801f10c <_Balloc>
 801f722:	b920      	cbnz	r0, 801f72e <__mdiff+0x5a>
 801f724:	4b2d      	ldr	r3, [pc, #180]	; (801f7dc <__mdiff+0x108>)
 801f726:	4602      	mov	r2, r0
 801f728:	f44f 7110 	mov.w	r1, #576	; 0x240
 801f72c:	e7e6      	b.n	801f6fc <__mdiff+0x28>
 801f72e:	693e      	ldr	r6, [r7, #16]
 801f730:	60c5      	str	r5, [r0, #12]
 801f732:	6925      	ldr	r5, [r4, #16]
 801f734:	f107 0114 	add.w	r1, r7, #20
 801f738:	f104 0914 	add.w	r9, r4, #20
 801f73c:	f100 0e14 	add.w	lr, r0, #20
 801f740:	f107 0210 	add.w	r2, r7, #16
 801f744:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801f748:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801f74c:	46f2      	mov	sl, lr
 801f74e:	2700      	movs	r7, #0
 801f750:	f859 3b04 	ldr.w	r3, [r9], #4
 801f754:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801f758:	fa1f f883 	uxth.w	r8, r3
 801f75c:	fa17 f78b 	uxtah	r7, r7, fp
 801f760:	0c1b      	lsrs	r3, r3, #16
 801f762:	eba7 0808 	sub.w	r8, r7, r8
 801f766:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801f76a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801f76e:	fa1f f888 	uxth.w	r8, r8
 801f772:	141f      	asrs	r7, r3, #16
 801f774:	454d      	cmp	r5, r9
 801f776:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801f77a:	f84a 3b04 	str.w	r3, [sl], #4
 801f77e:	d8e7      	bhi.n	801f750 <__mdiff+0x7c>
 801f780:	1b2b      	subs	r3, r5, r4
 801f782:	3b15      	subs	r3, #21
 801f784:	f023 0303 	bic.w	r3, r3, #3
 801f788:	3304      	adds	r3, #4
 801f78a:	3415      	adds	r4, #21
 801f78c:	42a5      	cmp	r5, r4
 801f78e:	bf38      	it	cc
 801f790:	2304      	movcc	r3, #4
 801f792:	4419      	add	r1, r3
 801f794:	4473      	add	r3, lr
 801f796:	469e      	mov	lr, r3
 801f798:	460d      	mov	r5, r1
 801f79a:	4565      	cmp	r5, ip
 801f79c:	d30e      	bcc.n	801f7bc <__mdiff+0xe8>
 801f79e:	f10c 0203 	add.w	r2, ip, #3
 801f7a2:	1a52      	subs	r2, r2, r1
 801f7a4:	f022 0203 	bic.w	r2, r2, #3
 801f7a8:	3903      	subs	r1, #3
 801f7aa:	458c      	cmp	ip, r1
 801f7ac:	bf38      	it	cc
 801f7ae:	2200      	movcc	r2, #0
 801f7b0:	441a      	add	r2, r3
 801f7b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801f7b6:	b17b      	cbz	r3, 801f7d8 <__mdiff+0x104>
 801f7b8:	6106      	str	r6, [r0, #16]
 801f7ba:	e7a5      	b.n	801f708 <__mdiff+0x34>
 801f7bc:	f855 8b04 	ldr.w	r8, [r5], #4
 801f7c0:	fa17 f488 	uxtah	r4, r7, r8
 801f7c4:	1422      	asrs	r2, r4, #16
 801f7c6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801f7ca:	b2a4      	uxth	r4, r4
 801f7cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801f7d0:	f84e 4b04 	str.w	r4, [lr], #4
 801f7d4:	1417      	asrs	r7, r2, #16
 801f7d6:	e7e0      	b.n	801f79a <__mdiff+0xc6>
 801f7d8:	3e01      	subs	r6, #1
 801f7da:	e7ea      	b.n	801f7b2 <__mdiff+0xde>
 801f7dc:	08022ff5 	.word	0x08022ff5
 801f7e0:	08023084 	.word	0x08023084

0801f7e4 <__ulp>:
 801f7e4:	b082      	sub	sp, #8
 801f7e6:	ed8d 0b00 	vstr	d0, [sp]
 801f7ea:	9b01      	ldr	r3, [sp, #4]
 801f7ec:	4912      	ldr	r1, [pc, #72]	; (801f838 <__ulp+0x54>)
 801f7ee:	4019      	ands	r1, r3
 801f7f0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801f7f4:	2900      	cmp	r1, #0
 801f7f6:	dd05      	ble.n	801f804 <__ulp+0x20>
 801f7f8:	2200      	movs	r2, #0
 801f7fa:	460b      	mov	r3, r1
 801f7fc:	ec43 2b10 	vmov	d0, r2, r3
 801f800:	b002      	add	sp, #8
 801f802:	4770      	bx	lr
 801f804:	4249      	negs	r1, r1
 801f806:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801f80a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801f80e:	f04f 0200 	mov.w	r2, #0
 801f812:	f04f 0300 	mov.w	r3, #0
 801f816:	da04      	bge.n	801f822 <__ulp+0x3e>
 801f818:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801f81c:	fa41 f300 	asr.w	r3, r1, r0
 801f820:	e7ec      	b.n	801f7fc <__ulp+0x18>
 801f822:	f1a0 0114 	sub.w	r1, r0, #20
 801f826:	291e      	cmp	r1, #30
 801f828:	bfda      	itte	le
 801f82a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801f82e:	fa20 f101 	lsrle.w	r1, r0, r1
 801f832:	2101      	movgt	r1, #1
 801f834:	460a      	mov	r2, r1
 801f836:	e7e1      	b.n	801f7fc <__ulp+0x18>
 801f838:	7ff00000 	.word	0x7ff00000

0801f83c <__b2d>:
 801f83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f83e:	6905      	ldr	r5, [r0, #16]
 801f840:	f100 0714 	add.w	r7, r0, #20
 801f844:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801f848:	1f2e      	subs	r6, r5, #4
 801f84a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801f84e:	4620      	mov	r0, r4
 801f850:	f7ff fd52 	bl	801f2f8 <__hi0bits>
 801f854:	f1c0 0320 	rsb	r3, r0, #32
 801f858:	280a      	cmp	r0, #10
 801f85a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801f8d8 <__b2d+0x9c>
 801f85e:	600b      	str	r3, [r1, #0]
 801f860:	dc14      	bgt.n	801f88c <__b2d+0x50>
 801f862:	f1c0 0e0b 	rsb	lr, r0, #11
 801f866:	fa24 f10e 	lsr.w	r1, r4, lr
 801f86a:	42b7      	cmp	r7, r6
 801f86c:	ea41 030c 	orr.w	r3, r1, ip
 801f870:	bf34      	ite	cc
 801f872:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801f876:	2100      	movcs	r1, #0
 801f878:	3015      	adds	r0, #21
 801f87a:	fa04 f000 	lsl.w	r0, r4, r0
 801f87e:	fa21 f10e 	lsr.w	r1, r1, lr
 801f882:	ea40 0201 	orr.w	r2, r0, r1
 801f886:	ec43 2b10 	vmov	d0, r2, r3
 801f88a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f88c:	42b7      	cmp	r7, r6
 801f88e:	bf3a      	itte	cc
 801f890:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801f894:	f1a5 0608 	subcc.w	r6, r5, #8
 801f898:	2100      	movcs	r1, #0
 801f89a:	380b      	subs	r0, #11
 801f89c:	d017      	beq.n	801f8ce <__b2d+0x92>
 801f89e:	f1c0 0c20 	rsb	ip, r0, #32
 801f8a2:	fa04 f500 	lsl.w	r5, r4, r0
 801f8a6:	42be      	cmp	r6, r7
 801f8a8:	fa21 f40c 	lsr.w	r4, r1, ip
 801f8ac:	ea45 0504 	orr.w	r5, r5, r4
 801f8b0:	bf8c      	ite	hi
 801f8b2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801f8b6:	2400      	movls	r4, #0
 801f8b8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801f8bc:	fa01 f000 	lsl.w	r0, r1, r0
 801f8c0:	fa24 f40c 	lsr.w	r4, r4, ip
 801f8c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801f8c8:	ea40 0204 	orr.w	r2, r0, r4
 801f8cc:	e7db      	b.n	801f886 <__b2d+0x4a>
 801f8ce:	ea44 030c 	orr.w	r3, r4, ip
 801f8d2:	460a      	mov	r2, r1
 801f8d4:	e7d7      	b.n	801f886 <__b2d+0x4a>
 801f8d6:	bf00      	nop
 801f8d8:	3ff00000 	.word	0x3ff00000

0801f8dc <__d2b>:
 801f8dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f8e0:	4689      	mov	r9, r1
 801f8e2:	2101      	movs	r1, #1
 801f8e4:	ec57 6b10 	vmov	r6, r7, d0
 801f8e8:	4690      	mov	r8, r2
 801f8ea:	f7ff fc0f 	bl	801f10c <_Balloc>
 801f8ee:	4604      	mov	r4, r0
 801f8f0:	b930      	cbnz	r0, 801f900 <__d2b+0x24>
 801f8f2:	4602      	mov	r2, r0
 801f8f4:	4b25      	ldr	r3, [pc, #148]	; (801f98c <__d2b+0xb0>)
 801f8f6:	4826      	ldr	r0, [pc, #152]	; (801f990 <__d2b+0xb4>)
 801f8f8:	f240 310a 	movw	r1, #778	; 0x30a
 801f8fc:	f7fd ff7a 	bl	801d7f4 <__assert_func>
 801f900:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801f904:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801f908:	bb35      	cbnz	r5, 801f958 <__d2b+0x7c>
 801f90a:	2e00      	cmp	r6, #0
 801f90c:	9301      	str	r3, [sp, #4]
 801f90e:	d028      	beq.n	801f962 <__d2b+0x86>
 801f910:	4668      	mov	r0, sp
 801f912:	9600      	str	r6, [sp, #0]
 801f914:	f7ff fd10 	bl	801f338 <__lo0bits>
 801f918:	9900      	ldr	r1, [sp, #0]
 801f91a:	b300      	cbz	r0, 801f95e <__d2b+0x82>
 801f91c:	9a01      	ldr	r2, [sp, #4]
 801f91e:	f1c0 0320 	rsb	r3, r0, #32
 801f922:	fa02 f303 	lsl.w	r3, r2, r3
 801f926:	430b      	orrs	r3, r1
 801f928:	40c2      	lsrs	r2, r0
 801f92a:	6163      	str	r3, [r4, #20]
 801f92c:	9201      	str	r2, [sp, #4]
 801f92e:	9b01      	ldr	r3, [sp, #4]
 801f930:	61a3      	str	r3, [r4, #24]
 801f932:	2b00      	cmp	r3, #0
 801f934:	bf14      	ite	ne
 801f936:	2202      	movne	r2, #2
 801f938:	2201      	moveq	r2, #1
 801f93a:	6122      	str	r2, [r4, #16]
 801f93c:	b1d5      	cbz	r5, 801f974 <__d2b+0x98>
 801f93e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801f942:	4405      	add	r5, r0
 801f944:	f8c9 5000 	str.w	r5, [r9]
 801f948:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801f94c:	f8c8 0000 	str.w	r0, [r8]
 801f950:	4620      	mov	r0, r4
 801f952:	b003      	add	sp, #12
 801f954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f958:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801f95c:	e7d5      	b.n	801f90a <__d2b+0x2e>
 801f95e:	6161      	str	r1, [r4, #20]
 801f960:	e7e5      	b.n	801f92e <__d2b+0x52>
 801f962:	a801      	add	r0, sp, #4
 801f964:	f7ff fce8 	bl	801f338 <__lo0bits>
 801f968:	9b01      	ldr	r3, [sp, #4]
 801f96a:	6163      	str	r3, [r4, #20]
 801f96c:	2201      	movs	r2, #1
 801f96e:	6122      	str	r2, [r4, #16]
 801f970:	3020      	adds	r0, #32
 801f972:	e7e3      	b.n	801f93c <__d2b+0x60>
 801f974:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f978:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801f97c:	f8c9 0000 	str.w	r0, [r9]
 801f980:	6918      	ldr	r0, [r3, #16]
 801f982:	f7ff fcb9 	bl	801f2f8 <__hi0bits>
 801f986:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f98a:	e7df      	b.n	801f94c <__d2b+0x70>
 801f98c:	08022ff5 	.word	0x08022ff5
 801f990:	08023084 	.word	0x08023084

0801f994 <__ratio>:
 801f994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f998:	4688      	mov	r8, r1
 801f99a:	4669      	mov	r1, sp
 801f99c:	4681      	mov	r9, r0
 801f99e:	f7ff ff4d 	bl	801f83c <__b2d>
 801f9a2:	a901      	add	r1, sp, #4
 801f9a4:	4640      	mov	r0, r8
 801f9a6:	ec55 4b10 	vmov	r4, r5, d0
 801f9aa:	f7ff ff47 	bl	801f83c <__b2d>
 801f9ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f9b2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801f9b6:	eba3 0c02 	sub.w	ip, r3, r2
 801f9ba:	e9dd 3200 	ldrd	r3, r2, [sp]
 801f9be:	1a9b      	subs	r3, r3, r2
 801f9c0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801f9c4:	ec51 0b10 	vmov	r0, r1, d0
 801f9c8:	2b00      	cmp	r3, #0
 801f9ca:	bfd6      	itet	le
 801f9cc:	460a      	movle	r2, r1
 801f9ce:	462a      	movgt	r2, r5
 801f9d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801f9d4:	468b      	mov	fp, r1
 801f9d6:	462f      	mov	r7, r5
 801f9d8:	bfd4      	ite	le
 801f9da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801f9de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801f9e2:	4620      	mov	r0, r4
 801f9e4:	ee10 2a10 	vmov	r2, s0
 801f9e8:	465b      	mov	r3, fp
 801f9ea:	4639      	mov	r1, r7
 801f9ec:	f7e0 ff4e 	bl	800088c <__aeabi_ddiv>
 801f9f0:	ec41 0b10 	vmov	d0, r0, r1
 801f9f4:	b003      	add	sp, #12
 801f9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f9fa <__copybits>:
 801f9fa:	3901      	subs	r1, #1
 801f9fc:	b570      	push	{r4, r5, r6, lr}
 801f9fe:	1149      	asrs	r1, r1, #5
 801fa00:	6914      	ldr	r4, [r2, #16]
 801fa02:	3101      	adds	r1, #1
 801fa04:	f102 0314 	add.w	r3, r2, #20
 801fa08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801fa0c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801fa10:	1f05      	subs	r5, r0, #4
 801fa12:	42a3      	cmp	r3, r4
 801fa14:	d30c      	bcc.n	801fa30 <__copybits+0x36>
 801fa16:	1aa3      	subs	r3, r4, r2
 801fa18:	3b11      	subs	r3, #17
 801fa1a:	f023 0303 	bic.w	r3, r3, #3
 801fa1e:	3211      	adds	r2, #17
 801fa20:	42a2      	cmp	r2, r4
 801fa22:	bf88      	it	hi
 801fa24:	2300      	movhi	r3, #0
 801fa26:	4418      	add	r0, r3
 801fa28:	2300      	movs	r3, #0
 801fa2a:	4288      	cmp	r0, r1
 801fa2c:	d305      	bcc.n	801fa3a <__copybits+0x40>
 801fa2e:	bd70      	pop	{r4, r5, r6, pc}
 801fa30:	f853 6b04 	ldr.w	r6, [r3], #4
 801fa34:	f845 6f04 	str.w	r6, [r5, #4]!
 801fa38:	e7eb      	b.n	801fa12 <__copybits+0x18>
 801fa3a:	f840 3b04 	str.w	r3, [r0], #4
 801fa3e:	e7f4      	b.n	801fa2a <__copybits+0x30>

0801fa40 <__any_on>:
 801fa40:	f100 0214 	add.w	r2, r0, #20
 801fa44:	6900      	ldr	r0, [r0, #16]
 801fa46:	114b      	asrs	r3, r1, #5
 801fa48:	4298      	cmp	r0, r3
 801fa4a:	b510      	push	{r4, lr}
 801fa4c:	db11      	blt.n	801fa72 <__any_on+0x32>
 801fa4e:	dd0a      	ble.n	801fa66 <__any_on+0x26>
 801fa50:	f011 011f 	ands.w	r1, r1, #31
 801fa54:	d007      	beq.n	801fa66 <__any_on+0x26>
 801fa56:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801fa5a:	fa24 f001 	lsr.w	r0, r4, r1
 801fa5e:	fa00 f101 	lsl.w	r1, r0, r1
 801fa62:	428c      	cmp	r4, r1
 801fa64:	d10b      	bne.n	801fa7e <__any_on+0x3e>
 801fa66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801fa6a:	4293      	cmp	r3, r2
 801fa6c:	d803      	bhi.n	801fa76 <__any_on+0x36>
 801fa6e:	2000      	movs	r0, #0
 801fa70:	bd10      	pop	{r4, pc}
 801fa72:	4603      	mov	r3, r0
 801fa74:	e7f7      	b.n	801fa66 <__any_on+0x26>
 801fa76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801fa7a:	2900      	cmp	r1, #0
 801fa7c:	d0f5      	beq.n	801fa6a <__any_on+0x2a>
 801fa7e:	2001      	movs	r0, #1
 801fa80:	e7f6      	b.n	801fa70 <__any_on+0x30>

0801fa82 <_calloc_r>:
 801fa82:	b513      	push	{r0, r1, r4, lr}
 801fa84:	434a      	muls	r2, r1
 801fa86:	4611      	mov	r1, r2
 801fa88:	9201      	str	r2, [sp, #4]
 801fa8a:	f7fb faf3 	bl	801b074 <_malloc_r>
 801fa8e:	4604      	mov	r4, r0
 801fa90:	b118      	cbz	r0, 801fa9a <_calloc_r+0x18>
 801fa92:	9a01      	ldr	r2, [sp, #4]
 801fa94:	2100      	movs	r1, #0
 801fa96:	f7fb f817 	bl	801aac8 <memset>
 801fa9a:	4620      	mov	r0, r4
 801fa9c:	b002      	add	sp, #8
 801fa9e:	bd10      	pop	{r4, pc}

0801faa0 <_realloc_r>:
 801faa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801faa2:	4607      	mov	r7, r0
 801faa4:	4614      	mov	r4, r2
 801faa6:	460e      	mov	r6, r1
 801faa8:	b921      	cbnz	r1, 801fab4 <_realloc_r+0x14>
 801faaa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801faae:	4611      	mov	r1, r2
 801fab0:	f7fb bae0 	b.w	801b074 <_malloc_r>
 801fab4:	b922      	cbnz	r2, 801fac0 <_realloc_r+0x20>
 801fab6:	f7fb fa8d 	bl	801afd4 <_free_r>
 801faba:	4625      	mov	r5, r4
 801fabc:	4628      	mov	r0, r5
 801fabe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fac0:	f000 feaa 	bl	8020818 <_malloc_usable_size_r>
 801fac4:	42a0      	cmp	r0, r4
 801fac6:	d20f      	bcs.n	801fae8 <_realloc_r+0x48>
 801fac8:	4621      	mov	r1, r4
 801faca:	4638      	mov	r0, r7
 801facc:	f7fb fad2 	bl	801b074 <_malloc_r>
 801fad0:	4605      	mov	r5, r0
 801fad2:	2800      	cmp	r0, #0
 801fad4:	d0f2      	beq.n	801fabc <_realloc_r+0x1c>
 801fad6:	4631      	mov	r1, r6
 801fad8:	4622      	mov	r2, r4
 801fada:	f7fa ffcd 	bl	801aa78 <memcpy>
 801fade:	4631      	mov	r1, r6
 801fae0:	4638      	mov	r0, r7
 801fae2:	f7fb fa77 	bl	801afd4 <_free_r>
 801fae6:	e7e9      	b.n	801fabc <_realloc_r+0x1c>
 801fae8:	4635      	mov	r5, r6
 801faea:	e7e7      	b.n	801fabc <_realloc_r+0x1c>

0801faec <__ssputs_r>:
 801faec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801faf0:	688e      	ldr	r6, [r1, #8]
 801faf2:	429e      	cmp	r6, r3
 801faf4:	4682      	mov	sl, r0
 801faf6:	460c      	mov	r4, r1
 801faf8:	4690      	mov	r8, r2
 801fafa:	461f      	mov	r7, r3
 801fafc:	d838      	bhi.n	801fb70 <__ssputs_r+0x84>
 801fafe:	898a      	ldrh	r2, [r1, #12]
 801fb00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801fb04:	d032      	beq.n	801fb6c <__ssputs_r+0x80>
 801fb06:	6825      	ldr	r5, [r4, #0]
 801fb08:	6909      	ldr	r1, [r1, #16]
 801fb0a:	eba5 0901 	sub.w	r9, r5, r1
 801fb0e:	6965      	ldr	r5, [r4, #20]
 801fb10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fb14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801fb18:	3301      	adds	r3, #1
 801fb1a:	444b      	add	r3, r9
 801fb1c:	106d      	asrs	r5, r5, #1
 801fb1e:	429d      	cmp	r5, r3
 801fb20:	bf38      	it	cc
 801fb22:	461d      	movcc	r5, r3
 801fb24:	0553      	lsls	r3, r2, #21
 801fb26:	d531      	bpl.n	801fb8c <__ssputs_r+0xa0>
 801fb28:	4629      	mov	r1, r5
 801fb2a:	f7fb faa3 	bl	801b074 <_malloc_r>
 801fb2e:	4606      	mov	r6, r0
 801fb30:	b950      	cbnz	r0, 801fb48 <__ssputs_r+0x5c>
 801fb32:	230c      	movs	r3, #12
 801fb34:	f8ca 3000 	str.w	r3, [sl]
 801fb38:	89a3      	ldrh	r3, [r4, #12]
 801fb3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fb3e:	81a3      	strh	r3, [r4, #12]
 801fb40:	f04f 30ff 	mov.w	r0, #4294967295
 801fb44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fb48:	6921      	ldr	r1, [r4, #16]
 801fb4a:	464a      	mov	r2, r9
 801fb4c:	f7fa ff94 	bl	801aa78 <memcpy>
 801fb50:	89a3      	ldrh	r3, [r4, #12]
 801fb52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801fb56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fb5a:	81a3      	strh	r3, [r4, #12]
 801fb5c:	6126      	str	r6, [r4, #16]
 801fb5e:	6165      	str	r5, [r4, #20]
 801fb60:	444e      	add	r6, r9
 801fb62:	eba5 0509 	sub.w	r5, r5, r9
 801fb66:	6026      	str	r6, [r4, #0]
 801fb68:	60a5      	str	r5, [r4, #8]
 801fb6a:	463e      	mov	r6, r7
 801fb6c:	42be      	cmp	r6, r7
 801fb6e:	d900      	bls.n	801fb72 <__ssputs_r+0x86>
 801fb70:	463e      	mov	r6, r7
 801fb72:	4632      	mov	r2, r6
 801fb74:	6820      	ldr	r0, [r4, #0]
 801fb76:	4641      	mov	r1, r8
 801fb78:	f7fa ff8c 	bl	801aa94 <memmove>
 801fb7c:	68a3      	ldr	r3, [r4, #8]
 801fb7e:	6822      	ldr	r2, [r4, #0]
 801fb80:	1b9b      	subs	r3, r3, r6
 801fb82:	4432      	add	r2, r6
 801fb84:	60a3      	str	r3, [r4, #8]
 801fb86:	6022      	str	r2, [r4, #0]
 801fb88:	2000      	movs	r0, #0
 801fb8a:	e7db      	b.n	801fb44 <__ssputs_r+0x58>
 801fb8c:	462a      	mov	r2, r5
 801fb8e:	f7ff ff87 	bl	801faa0 <_realloc_r>
 801fb92:	4606      	mov	r6, r0
 801fb94:	2800      	cmp	r0, #0
 801fb96:	d1e1      	bne.n	801fb5c <__ssputs_r+0x70>
 801fb98:	6921      	ldr	r1, [r4, #16]
 801fb9a:	4650      	mov	r0, sl
 801fb9c:	f7fb fa1a 	bl	801afd4 <_free_r>
 801fba0:	e7c7      	b.n	801fb32 <__ssputs_r+0x46>
	...

0801fba4 <_svfiprintf_r>:
 801fba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fba8:	4698      	mov	r8, r3
 801fbaa:	898b      	ldrh	r3, [r1, #12]
 801fbac:	061b      	lsls	r3, r3, #24
 801fbae:	b09d      	sub	sp, #116	; 0x74
 801fbb0:	4607      	mov	r7, r0
 801fbb2:	460d      	mov	r5, r1
 801fbb4:	4614      	mov	r4, r2
 801fbb6:	d50e      	bpl.n	801fbd6 <_svfiprintf_r+0x32>
 801fbb8:	690b      	ldr	r3, [r1, #16]
 801fbba:	b963      	cbnz	r3, 801fbd6 <_svfiprintf_r+0x32>
 801fbbc:	2140      	movs	r1, #64	; 0x40
 801fbbe:	f7fb fa59 	bl	801b074 <_malloc_r>
 801fbc2:	6028      	str	r0, [r5, #0]
 801fbc4:	6128      	str	r0, [r5, #16]
 801fbc6:	b920      	cbnz	r0, 801fbd2 <_svfiprintf_r+0x2e>
 801fbc8:	230c      	movs	r3, #12
 801fbca:	603b      	str	r3, [r7, #0]
 801fbcc:	f04f 30ff 	mov.w	r0, #4294967295
 801fbd0:	e0d1      	b.n	801fd76 <_svfiprintf_r+0x1d2>
 801fbd2:	2340      	movs	r3, #64	; 0x40
 801fbd4:	616b      	str	r3, [r5, #20]
 801fbd6:	2300      	movs	r3, #0
 801fbd8:	9309      	str	r3, [sp, #36]	; 0x24
 801fbda:	2320      	movs	r3, #32
 801fbdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fbe0:	f8cd 800c 	str.w	r8, [sp, #12]
 801fbe4:	2330      	movs	r3, #48	; 0x30
 801fbe6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801fd90 <_svfiprintf_r+0x1ec>
 801fbea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fbee:	f04f 0901 	mov.w	r9, #1
 801fbf2:	4623      	mov	r3, r4
 801fbf4:	469a      	mov	sl, r3
 801fbf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fbfa:	b10a      	cbz	r2, 801fc00 <_svfiprintf_r+0x5c>
 801fbfc:	2a25      	cmp	r2, #37	; 0x25
 801fbfe:	d1f9      	bne.n	801fbf4 <_svfiprintf_r+0x50>
 801fc00:	ebba 0b04 	subs.w	fp, sl, r4
 801fc04:	d00b      	beq.n	801fc1e <_svfiprintf_r+0x7a>
 801fc06:	465b      	mov	r3, fp
 801fc08:	4622      	mov	r2, r4
 801fc0a:	4629      	mov	r1, r5
 801fc0c:	4638      	mov	r0, r7
 801fc0e:	f7ff ff6d 	bl	801faec <__ssputs_r>
 801fc12:	3001      	adds	r0, #1
 801fc14:	f000 80aa 	beq.w	801fd6c <_svfiprintf_r+0x1c8>
 801fc18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fc1a:	445a      	add	r2, fp
 801fc1c:	9209      	str	r2, [sp, #36]	; 0x24
 801fc1e:	f89a 3000 	ldrb.w	r3, [sl]
 801fc22:	2b00      	cmp	r3, #0
 801fc24:	f000 80a2 	beq.w	801fd6c <_svfiprintf_r+0x1c8>
 801fc28:	2300      	movs	r3, #0
 801fc2a:	f04f 32ff 	mov.w	r2, #4294967295
 801fc2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fc32:	f10a 0a01 	add.w	sl, sl, #1
 801fc36:	9304      	str	r3, [sp, #16]
 801fc38:	9307      	str	r3, [sp, #28]
 801fc3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fc3e:	931a      	str	r3, [sp, #104]	; 0x68
 801fc40:	4654      	mov	r4, sl
 801fc42:	2205      	movs	r2, #5
 801fc44:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fc48:	4851      	ldr	r0, [pc, #324]	; (801fd90 <_svfiprintf_r+0x1ec>)
 801fc4a:	f7e0 fae9 	bl	8000220 <memchr>
 801fc4e:	9a04      	ldr	r2, [sp, #16]
 801fc50:	b9d8      	cbnz	r0, 801fc8a <_svfiprintf_r+0xe6>
 801fc52:	06d0      	lsls	r0, r2, #27
 801fc54:	bf44      	itt	mi
 801fc56:	2320      	movmi	r3, #32
 801fc58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fc5c:	0711      	lsls	r1, r2, #28
 801fc5e:	bf44      	itt	mi
 801fc60:	232b      	movmi	r3, #43	; 0x2b
 801fc62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fc66:	f89a 3000 	ldrb.w	r3, [sl]
 801fc6a:	2b2a      	cmp	r3, #42	; 0x2a
 801fc6c:	d015      	beq.n	801fc9a <_svfiprintf_r+0xf6>
 801fc6e:	9a07      	ldr	r2, [sp, #28]
 801fc70:	4654      	mov	r4, sl
 801fc72:	2000      	movs	r0, #0
 801fc74:	f04f 0c0a 	mov.w	ip, #10
 801fc78:	4621      	mov	r1, r4
 801fc7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fc7e:	3b30      	subs	r3, #48	; 0x30
 801fc80:	2b09      	cmp	r3, #9
 801fc82:	d94e      	bls.n	801fd22 <_svfiprintf_r+0x17e>
 801fc84:	b1b0      	cbz	r0, 801fcb4 <_svfiprintf_r+0x110>
 801fc86:	9207      	str	r2, [sp, #28]
 801fc88:	e014      	b.n	801fcb4 <_svfiprintf_r+0x110>
 801fc8a:	eba0 0308 	sub.w	r3, r0, r8
 801fc8e:	fa09 f303 	lsl.w	r3, r9, r3
 801fc92:	4313      	orrs	r3, r2
 801fc94:	9304      	str	r3, [sp, #16]
 801fc96:	46a2      	mov	sl, r4
 801fc98:	e7d2      	b.n	801fc40 <_svfiprintf_r+0x9c>
 801fc9a:	9b03      	ldr	r3, [sp, #12]
 801fc9c:	1d19      	adds	r1, r3, #4
 801fc9e:	681b      	ldr	r3, [r3, #0]
 801fca0:	9103      	str	r1, [sp, #12]
 801fca2:	2b00      	cmp	r3, #0
 801fca4:	bfbb      	ittet	lt
 801fca6:	425b      	neglt	r3, r3
 801fca8:	f042 0202 	orrlt.w	r2, r2, #2
 801fcac:	9307      	strge	r3, [sp, #28]
 801fcae:	9307      	strlt	r3, [sp, #28]
 801fcb0:	bfb8      	it	lt
 801fcb2:	9204      	strlt	r2, [sp, #16]
 801fcb4:	7823      	ldrb	r3, [r4, #0]
 801fcb6:	2b2e      	cmp	r3, #46	; 0x2e
 801fcb8:	d10c      	bne.n	801fcd4 <_svfiprintf_r+0x130>
 801fcba:	7863      	ldrb	r3, [r4, #1]
 801fcbc:	2b2a      	cmp	r3, #42	; 0x2a
 801fcbe:	d135      	bne.n	801fd2c <_svfiprintf_r+0x188>
 801fcc0:	9b03      	ldr	r3, [sp, #12]
 801fcc2:	1d1a      	adds	r2, r3, #4
 801fcc4:	681b      	ldr	r3, [r3, #0]
 801fcc6:	9203      	str	r2, [sp, #12]
 801fcc8:	2b00      	cmp	r3, #0
 801fcca:	bfb8      	it	lt
 801fccc:	f04f 33ff 	movlt.w	r3, #4294967295
 801fcd0:	3402      	adds	r4, #2
 801fcd2:	9305      	str	r3, [sp, #20]
 801fcd4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801fda0 <_svfiprintf_r+0x1fc>
 801fcd8:	7821      	ldrb	r1, [r4, #0]
 801fcda:	2203      	movs	r2, #3
 801fcdc:	4650      	mov	r0, sl
 801fcde:	f7e0 fa9f 	bl	8000220 <memchr>
 801fce2:	b140      	cbz	r0, 801fcf6 <_svfiprintf_r+0x152>
 801fce4:	2340      	movs	r3, #64	; 0x40
 801fce6:	eba0 000a 	sub.w	r0, r0, sl
 801fcea:	fa03 f000 	lsl.w	r0, r3, r0
 801fcee:	9b04      	ldr	r3, [sp, #16]
 801fcf0:	4303      	orrs	r3, r0
 801fcf2:	3401      	adds	r4, #1
 801fcf4:	9304      	str	r3, [sp, #16]
 801fcf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fcfa:	4826      	ldr	r0, [pc, #152]	; (801fd94 <_svfiprintf_r+0x1f0>)
 801fcfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fd00:	2206      	movs	r2, #6
 801fd02:	f7e0 fa8d 	bl	8000220 <memchr>
 801fd06:	2800      	cmp	r0, #0
 801fd08:	d038      	beq.n	801fd7c <_svfiprintf_r+0x1d8>
 801fd0a:	4b23      	ldr	r3, [pc, #140]	; (801fd98 <_svfiprintf_r+0x1f4>)
 801fd0c:	bb1b      	cbnz	r3, 801fd56 <_svfiprintf_r+0x1b2>
 801fd0e:	9b03      	ldr	r3, [sp, #12]
 801fd10:	3307      	adds	r3, #7
 801fd12:	f023 0307 	bic.w	r3, r3, #7
 801fd16:	3308      	adds	r3, #8
 801fd18:	9303      	str	r3, [sp, #12]
 801fd1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd1c:	4433      	add	r3, r6
 801fd1e:	9309      	str	r3, [sp, #36]	; 0x24
 801fd20:	e767      	b.n	801fbf2 <_svfiprintf_r+0x4e>
 801fd22:	fb0c 3202 	mla	r2, ip, r2, r3
 801fd26:	460c      	mov	r4, r1
 801fd28:	2001      	movs	r0, #1
 801fd2a:	e7a5      	b.n	801fc78 <_svfiprintf_r+0xd4>
 801fd2c:	2300      	movs	r3, #0
 801fd2e:	3401      	adds	r4, #1
 801fd30:	9305      	str	r3, [sp, #20]
 801fd32:	4619      	mov	r1, r3
 801fd34:	f04f 0c0a 	mov.w	ip, #10
 801fd38:	4620      	mov	r0, r4
 801fd3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fd3e:	3a30      	subs	r2, #48	; 0x30
 801fd40:	2a09      	cmp	r2, #9
 801fd42:	d903      	bls.n	801fd4c <_svfiprintf_r+0x1a8>
 801fd44:	2b00      	cmp	r3, #0
 801fd46:	d0c5      	beq.n	801fcd4 <_svfiprintf_r+0x130>
 801fd48:	9105      	str	r1, [sp, #20]
 801fd4a:	e7c3      	b.n	801fcd4 <_svfiprintf_r+0x130>
 801fd4c:	fb0c 2101 	mla	r1, ip, r1, r2
 801fd50:	4604      	mov	r4, r0
 801fd52:	2301      	movs	r3, #1
 801fd54:	e7f0      	b.n	801fd38 <_svfiprintf_r+0x194>
 801fd56:	ab03      	add	r3, sp, #12
 801fd58:	9300      	str	r3, [sp, #0]
 801fd5a:	462a      	mov	r2, r5
 801fd5c:	4b0f      	ldr	r3, [pc, #60]	; (801fd9c <_svfiprintf_r+0x1f8>)
 801fd5e:	a904      	add	r1, sp, #16
 801fd60:	4638      	mov	r0, r7
 801fd62:	f7fb fa81 	bl	801b268 <_printf_float>
 801fd66:	1c42      	adds	r2, r0, #1
 801fd68:	4606      	mov	r6, r0
 801fd6a:	d1d6      	bne.n	801fd1a <_svfiprintf_r+0x176>
 801fd6c:	89ab      	ldrh	r3, [r5, #12]
 801fd6e:	065b      	lsls	r3, r3, #25
 801fd70:	f53f af2c 	bmi.w	801fbcc <_svfiprintf_r+0x28>
 801fd74:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fd76:	b01d      	add	sp, #116	; 0x74
 801fd78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd7c:	ab03      	add	r3, sp, #12
 801fd7e:	9300      	str	r3, [sp, #0]
 801fd80:	462a      	mov	r2, r5
 801fd82:	4b06      	ldr	r3, [pc, #24]	; (801fd9c <_svfiprintf_r+0x1f8>)
 801fd84:	a904      	add	r1, sp, #16
 801fd86:	4638      	mov	r0, r7
 801fd88:	f7fb fd12 	bl	801b7b0 <_printf_i>
 801fd8c:	e7eb      	b.n	801fd66 <_svfiprintf_r+0x1c2>
 801fd8e:	bf00      	nop
 801fd90:	080231e4 	.word	0x080231e4
 801fd94:	080231ee 	.word	0x080231ee
 801fd98:	0801b269 	.word	0x0801b269
 801fd9c:	0801faed 	.word	0x0801faed
 801fda0:	080231ea 	.word	0x080231ea

0801fda4 <_sungetc_r>:
 801fda4:	b538      	push	{r3, r4, r5, lr}
 801fda6:	1c4b      	adds	r3, r1, #1
 801fda8:	4614      	mov	r4, r2
 801fdaa:	d103      	bne.n	801fdb4 <_sungetc_r+0x10>
 801fdac:	f04f 35ff 	mov.w	r5, #4294967295
 801fdb0:	4628      	mov	r0, r5
 801fdb2:	bd38      	pop	{r3, r4, r5, pc}
 801fdb4:	8993      	ldrh	r3, [r2, #12]
 801fdb6:	f023 0320 	bic.w	r3, r3, #32
 801fdba:	8193      	strh	r3, [r2, #12]
 801fdbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fdbe:	6852      	ldr	r2, [r2, #4]
 801fdc0:	b2cd      	uxtb	r5, r1
 801fdc2:	b18b      	cbz	r3, 801fde8 <_sungetc_r+0x44>
 801fdc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801fdc6:	4293      	cmp	r3, r2
 801fdc8:	dd08      	ble.n	801fddc <_sungetc_r+0x38>
 801fdca:	6823      	ldr	r3, [r4, #0]
 801fdcc:	1e5a      	subs	r2, r3, #1
 801fdce:	6022      	str	r2, [r4, #0]
 801fdd0:	f803 5c01 	strb.w	r5, [r3, #-1]
 801fdd4:	6863      	ldr	r3, [r4, #4]
 801fdd6:	3301      	adds	r3, #1
 801fdd8:	6063      	str	r3, [r4, #4]
 801fdda:	e7e9      	b.n	801fdb0 <_sungetc_r+0xc>
 801fddc:	4621      	mov	r1, r4
 801fdde:	f000 fca5 	bl	802072c <__submore>
 801fde2:	2800      	cmp	r0, #0
 801fde4:	d0f1      	beq.n	801fdca <_sungetc_r+0x26>
 801fde6:	e7e1      	b.n	801fdac <_sungetc_r+0x8>
 801fde8:	6921      	ldr	r1, [r4, #16]
 801fdea:	6823      	ldr	r3, [r4, #0]
 801fdec:	b151      	cbz	r1, 801fe04 <_sungetc_r+0x60>
 801fdee:	4299      	cmp	r1, r3
 801fdf0:	d208      	bcs.n	801fe04 <_sungetc_r+0x60>
 801fdf2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801fdf6:	42a9      	cmp	r1, r5
 801fdf8:	d104      	bne.n	801fe04 <_sungetc_r+0x60>
 801fdfa:	3b01      	subs	r3, #1
 801fdfc:	3201      	adds	r2, #1
 801fdfe:	6023      	str	r3, [r4, #0]
 801fe00:	6062      	str	r2, [r4, #4]
 801fe02:	e7d5      	b.n	801fdb0 <_sungetc_r+0xc>
 801fe04:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801fe08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fe0c:	6363      	str	r3, [r4, #52]	; 0x34
 801fe0e:	2303      	movs	r3, #3
 801fe10:	63a3      	str	r3, [r4, #56]	; 0x38
 801fe12:	4623      	mov	r3, r4
 801fe14:	f803 5f46 	strb.w	r5, [r3, #70]!
 801fe18:	6023      	str	r3, [r4, #0]
 801fe1a:	2301      	movs	r3, #1
 801fe1c:	e7dc      	b.n	801fdd8 <_sungetc_r+0x34>

0801fe1e <__ssrefill_r>:
 801fe1e:	b510      	push	{r4, lr}
 801fe20:	460c      	mov	r4, r1
 801fe22:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801fe24:	b169      	cbz	r1, 801fe42 <__ssrefill_r+0x24>
 801fe26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fe2a:	4299      	cmp	r1, r3
 801fe2c:	d001      	beq.n	801fe32 <__ssrefill_r+0x14>
 801fe2e:	f7fb f8d1 	bl	801afd4 <_free_r>
 801fe32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fe34:	6063      	str	r3, [r4, #4]
 801fe36:	2000      	movs	r0, #0
 801fe38:	6360      	str	r0, [r4, #52]	; 0x34
 801fe3a:	b113      	cbz	r3, 801fe42 <__ssrefill_r+0x24>
 801fe3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801fe3e:	6023      	str	r3, [r4, #0]
 801fe40:	bd10      	pop	{r4, pc}
 801fe42:	6923      	ldr	r3, [r4, #16]
 801fe44:	6023      	str	r3, [r4, #0]
 801fe46:	2300      	movs	r3, #0
 801fe48:	6063      	str	r3, [r4, #4]
 801fe4a:	89a3      	ldrh	r3, [r4, #12]
 801fe4c:	f043 0320 	orr.w	r3, r3, #32
 801fe50:	81a3      	strh	r3, [r4, #12]
 801fe52:	f04f 30ff 	mov.w	r0, #4294967295
 801fe56:	e7f3      	b.n	801fe40 <__ssrefill_r+0x22>

0801fe58 <__ssvfiscanf_r>:
 801fe58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe5c:	460c      	mov	r4, r1
 801fe5e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801fe62:	2100      	movs	r1, #0
 801fe64:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801fe68:	49b2      	ldr	r1, [pc, #712]	; (8020134 <__ssvfiscanf_r+0x2dc>)
 801fe6a:	91a0      	str	r1, [sp, #640]	; 0x280
 801fe6c:	f10d 0804 	add.w	r8, sp, #4
 801fe70:	49b1      	ldr	r1, [pc, #708]	; (8020138 <__ssvfiscanf_r+0x2e0>)
 801fe72:	4fb2      	ldr	r7, [pc, #712]	; (802013c <__ssvfiscanf_r+0x2e4>)
 801fe74:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8020140 <__ssvfiscanf_r+0x2e8>
 801fe78:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801fe7c:	4606      	mov	r6, r0
 801fe7e:	91a1      	str	r1, [sp, #644]	; 0x284
 801fe80:	9300      	str	r3, [sp, #0]
 801fe82:	f892 a000 	ldrb.w	sl, [r2]
 801fe86:	f1ba 0f00 	cmp.w	sl, #0
 801fe8a:	f000 8151 	beq.w	8020130 <__ssvfiscanf_r+0x2d8>
 801fe8e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801fe92:	f013 0308 	ands.w	r3, r3, #8
 801fe96:	f102 0501 	add.w	r5, r2, #1
 801fe9a:	d019      	beq.n	801fed0 <__ssvfiscanf_r+0x78>
 801fe9c:	6863      	ldr	r3, [r4, #4]
 801fe9e:	2b00      	cmp	r3, #0
 801fea0:	dd0f      	ble.n	801fec2 <__ssvfiscanf_r+0x6a>
 801fea2:	6823      	ldr	r3, [r4, #0]
 801fea4:	781a      	ldrb	r2, [r3, #0]
 801fea6:	5cba      	ldrb	r2, [r7, r2]
 801fea8:	0712      	lsls	r2, r2, #28
 801feaa:	d401      	bmi.n	801feb0 <__ssvfiscanf_r+0x58>
 801feac:	462a      	mov	r2, r5
 801feae:	e7e8      	b.n	801fe82 <__ssvfiscanf_r+0x2a>
 801feb0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801feb2:	3201      	adds	r2, #1
 801feb4:	9245      	str	r2, [sp, #276]	; 0x114
 801feb6:	6862      	ldr	r2, [r4, #4]
 801feb8:	3301      	adds	r3, #1
 801feba:	3a01      	subs	r2, #1
 801febc:	6062      	str	r2, [r4, #4]
 801febe:	6023      	str	r3, [r4, #0]
 801fec0:	e7ec      	b.n	801fe9c <__ssvfiscanf_r+0x44>
 801fec2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801fec4:	4621      	mov	r1, r4
 801fec6:	4630      	mov	r0, r6
 801fec8:	4798      	blx	r3
 801feca:	2800      	cmp	r0, #0
 801fecc:	d0e9      	beq.n	801fea2 <__ssvfiscanf_r+0x4a>
 801fece:	e7ed      	b.n	801feac <__ssvfiscanf_r+0x54>
 801fed0:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801fed4:	f040 8083 	bne.w	801ffde <__ssvfiscanf_r+0x186>
 801fed8:	9341      	str	r3, [sp, #260]	; 0x104
 801feda:	9343      	str	r3, [sp, #268]	; 0x10c
 801fedc:	7853      	ldrb	r3, [r2, #1]
 801fede:	2b2a      	cmp	r3, #42	; 0x2a
 801fee0:	bf02      	ittt	eq
 801fee2:	2310      	moveq	r3, #16
 801fee4:	1c95      	addeq	r5, r2, #2
 801fee6:	9341      	streq	r3, [sp, #260]	; 0x104
 801fee8:	220a      	movs	r2, #10
 801feea:	46ab      	mov	fp, r5
 801feec:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801fef0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801fef4:	2b09      	cmp	r3, #9
 801fef6:	d91d      	bls.n	801ff34 <__ssvfiscanf_r+0xdc>
 801fef8:	4891      	ldr	r0, [pc, #580]	; (8020140 <__ssvfiscanf_r+0x2e8>)
 801fefa:	2203      	movs	r2, #3
 801fefc:	f7e0 f990 	bl	8000220 <memchr>
 801ff00:	b140      	cbz	r0, 801ff14 <__ssvfiscanf_r+0xbc>
 801ff02:	2301      	movs	r3, #1
 801ff04:	eba0 0009 	sub.w	r0, r0, r9
 801ff08:	fa03 f000 	lsl.w	r0, r3, r0
 801ff0c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ff0e:	4318      	orrs	r0, r3
 801ff10:	9041      	str	r0, [sp, #260]	; 0x104
 801ff12:	465d      	mov	r5, fp
 801ff14:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ff18:	2b78      	cmp	r3, #120	; 0x78
 801ff1a:	d806      	bhi.n	801ff2a <__ssvfiscanf_r+0xd2>
 801ff1c:	2b57      	cmp	r3, #87	; 0x57
 801ff1e:	d810      	bhi.n	801ff42 <__ssvfiscanf_r+0xea>
 801ff20:	2b25      	cmp	r3, #37	; 0x25
 801ff22:	d05c      	beq.n	801ffde <__ssvfiscanf_r+0x186>
 801ff24:	d856      	bhi.n	801ffd4 <__ssvfiscanf_r+0x17c>
 801ff26:	2b00      	cmp	r3, #0
 801ff28:	d074      	beq.n	8020014 <__ssvfiscanf_r+0x1bc>
 801ff2a:	2303      	movs	r3, #3
 801ff2c:	9347      	str	r3, [sp, #284]	; 0x11c
 801ff2e:	230a      	movs	r3, #10
 801ff30:	9342      	str	r3, [sp, #264]	; 0x108
 801ff32:	e081      	b.n	8020038 <__ssvfiscanf_r+0x1e0>
 801ff34:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801ff36:	fb02 1303 	mla	r3, r2, r3, r1
 801ff3a:	3b30      	subs	r3, #48	; 0x30
 801ff3c:	9343      	str	r3, [sp, #268]	; 0x10c
 801ff3e:	465d      	mov	r5, fp
 801ff40:	e7d3      	b.n	801feea <__ssvfiscanf_r+0x92>
 801ff42:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801ff46:	2a20      	cmp	r2, #32
 801ff48:	d8ef      	bhi.n	801ff2a <__ssvfiscanf_r+0xd2>
 801ff4a:	a101      	add	r1, pc, #4	; (adr r1, 801ff50 <__ssvfiscanf_r+0xf8>)
 801ff4c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ff50:	08020023 	.word	0x08020023
 801ff54:	0801ff2b 	.word	0x0801ff2b
 801ff58:	0801ff2b 	.word	0x0801ff2b
 801ff5c:	08020081 	.word	0x08020081
 801ff60:	0801ff2b 	.word	0x0801ff2b
 801ff64:	0801ff2b 	.word	0x0801ff2b
 801ff68:	0801ff2b 	.word	0x0801ff2b
 801ff6c:	0801ff2b 	.word	0x0801ff2b
 801ff70:	0801ff2b 	.word	0x0801ff2b
 801ff74:	0801ff2b 	.word	0x0801ff2b
 801ff78:	0801ff2b 	.word	0x0801ff2b
 801ff7c:	08020097 	.word	0x08020097
 801ff80:	0802006d 	.word	0x0802006d
 801ff84:	0801ffdb 	.word	0x0801ffdb
 801ff88:	0801ffdb 	.word	0x0801ffdb
 801ff8c:	0801ffdb 	.word	0x0801ffdb
 801ff90:	0801ff2b 	.word	0x0801ff2b
 801ff94:	08020071 	.word	0x08020071
 801ff98:	0801ff2b 	.word	0x0801ff2b
 801ff9c:	0801ff2b 	.word	0x0801ff2b
 801ffa0:	0801ff2b 	.word	0x0801ff2b
 801ffa4:	0801ff2b 	.word	0x0801ff2b
 801ffa8:	080200a7 	.word	0x080200a7
 801ffac:	08020079 	.word	0x08020079
 801ffb0:	0802001b 	.word	0x0802001b
 801ffb4:	0801ff2b 	.word	0x0801ff2b
 801ffb8:	0801ff2b 	.word	0x0801ff2b
 801ffbc:	080200a3 	.word	0x080200a3
 801ffc0:	0801ff2b 	.word	0x0801ff2b
 801ffc4:	0802006d 	.word	0x0802006d
 801ffc8:	0801ff2b 	.word	0x0801ff2b
 801ffcc:	0801ff2b 	.word	0x0801ff2b
 801ffd0:	08020023 	.word	0x08020023
 801ffd4:	3b45      	subs	r3, #69	; 0x45
 801ffd6:	2b02      	cmp	r3, #2
 801ffd8:	d8a7      	bhi.n	801ff2a <__ssvfiscanf_r+0xd2>
 801ffda:	2305      	movs	r3, #5
 801ffdc:	e02b      	b.n	8020036 <__ssvfiscanf_r+0x1de>
 801ffde:	6863      	ldr	r3, [r4, #4]
 801ffe0:	2b00      	cmp	r3, #0
 801ffe2:	dd0d      	ble.n	8020000 <__ssvfiscanf_r+0x1a8>
 801ffe4:	6823      	ldr	r3, [r4, #0]
 801ffe6:	781a      	ldrb	r2, [r3, #0]
 801ffe8:	4552      	cmp	r2, sl
 801ffea:	f040 80a1 	bne.w	8020130 <__ssvfiscanf_r+0x2d8>
 801ffee:	3301      	adds	r3, #1
 801fff0:	6862      	ldr	r2, [r4, #4]
 801fff2:	6023      	str	r3, [r4, #0]
 801fff4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801fff6:	3a01      	subs	r2, #1
 801fff8:	3301      	adds	r3, #1
 801fffa:	6062      	str	r2, [r4, #4]
 801fffc:	9345      	str	r3, [sp, #276]	; 0x114
 801fffe:	e755      	b.n	801feac <__ssvfiscanf_r+0x54>
 8020000:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020002:	4621      	mov	r1, r4
 8020004:	4630      	mov	r0, r6
 8020006:	4798      	blx	r3
 8020008:	2800      	cmp	r0, #0
 802000a:	d0eb      	beq.n	801ffe4 <__ssvfiscanf_r+0x18c>
 802000c:	9844      	ldr	r0, [sp, #272]	; 0x110
 802000e:	2800      	cmp	r0, #0
 8020010:	f040 8084 	bne.w	802011c <__ssvfiscanf_r+0x2c4>
 8020014:	f04f 30ff 	mov.w	r0, #4294967295
 8020018:	e086      	b.n	8020128 <__ssvfiscanf_r+0x2d0>
 802001a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802001c:	f042 0220 	orr.w	r2, r2, #32
 8020020:	9241      	str	r2, [sp, #260]	; 0x104
 8020022:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020028:	9241      	str	r2, [sp, #260]	; 0x104
 802002a:	2210      	movs	r2, #16
 802002c:	2b6f      	cmp	r3, #111	; 0x6f
 802002e:	9242      	str	r2, [sp, #264]	; 0x108
 8020030:	bf34      	ite	cc
 8020032:	2303      	movcc	r3, #3
 8020034:	2304      	movcs	r3, #4
 8020036:	9347      	str	r3, [sp, #284]	; 0x11c
 8020038:	6863      	ldr	r3, [r4, #4]
 802003a:	2b00      	cmp	r3, #0
 802003c:	dd41      	ble.n	80200c2 <__ssvfiscanf_r+0x26a>
 802003e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020040:	0659      	lsls	r1, r3, #25
 8020042:	d404      	bmi.n	802004e <__ssvfiscanf_r+0x1f6>
 8020044:	6823      	ldr	r3, [r4, #0]
 8020046:	781a      	ldrb	r2, [r3, #0]
 8020048:	5cba      	ldrb	r2, [r7, r2]
 802004a:	0712      	lsls	r2, r2, #28
 802004c:	d440      	bmi.n	80200d0 <__ssvfiscanf_r+0x278>
 802004e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8020050:	2b02      	cmp	r3, #2
 8020052:	dc4f      	bgt.n	80200f4 <__ssvfiscanf_r+0x29c>
 8020054:	466b      	mov	r3, sp
 8020056:	4622      	mov	r2, r4
 8020058:	a941      	add	r1, sp, #260	; 0x104
 802005a:	4630      	mov	r0, r6
 802005c:	f000 f9ce 	bl	80203fc <_scanf_chars>
 8020060:	2801      	cmp	r0, #1
 8020062:	d065      	beq.n	8020130 <__ssvfiscanf_r+0x2d8>
 8020064:	2802      	cmp	r0, #2
 8020066:	f47f af21 	bne.w	801feac <__ssvfiscanf_r+0x54>
 802006a:	e7cf      	b.n	802000c <__ssvfiscanf_r+0x1b4>
 802006c:	220a      	movs	r2, #10
 802006e:	e7dd      	b.n	802002c <__ssvfiscanf_r+0x1d4>
 8020070:	2300      	movs	r3, #0
 8020072:	9342      	str	r3, [sp, #264]	; 0x108
 8020074:	2303      	movs	r3, #3
 8020076:	e7de      	b.n	8020036 <__ssvfiscanf_r+0x1de>
 8020078:	2308      	movs	r3, #8
 802007a:	9342      	str	r3, [sp, #264]	; 0x108
 802007c:	2304      	movs	r3, #4
 802007e:	e7da      	b.n	8020036 <__ssvfiscanf_r+0x1de>
 8020080:	4629      	mov	r1, r5
 8020082:	4640      	mov	r0, r8
 8020084:	f000 fb18 	bl	80206b8 <__sccl>
 8020088:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802008a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802008e:	9341      	str	r3, [sp, #260]	; 0x104
 8020090:	4605      	mov	r5, r0
 8020092:	2301      	movs	r3, #1
 8020094:	e7cf      	b.n	8020036 <__ssvfiscanf_r+0x1de>
 8020096:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802009c:	9341      	str	r3, [sp, #260]	; 0x104
 802009e:	2300      	movs	r3, #0
 80200a0:	e7c9      	b.n	8020036 <__ssvfiscanf_r+0x1de>
 80200a2:	2302      	movs	r3, #2
 80200a4:	e7c7      	b.n	8020036 <__ssvfiscanf_r+0x1de>
 80200a6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80200a8:	06c3      	lsls	r3, r0, #27
 80200aa:	f53f aeff 	bmi.w	801feac <__ssvfiscanf_r+0x54>
 80200ae:	9b00      	ldr	r3, [sp, #0]
 80200b0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80200b2:	1d19      	adds	r1, r3, #4
 80200b4:	9100      	str	r1, [sp, #0]
 80200b6:	681b      	ldr	r3, [r3, #0]
 80200b8:	07c0      	lsls	r0, r0, #31
 80200ba:	bf4c      	ite	mi
 80200bc:	801a      	strhmi	r2, [r3, #0]
 80200be:	601a      	strpl	r2, [r3, #0]
 80200c0:	e6f4      	b.n	801feac <__ssvfiscanf_r+0x54>
 80200c2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80200c4:	4621      	mov	r1, r4
 80200c6:	4630      	mov	r0, r6
 80200c8:	4798      	blx	r3
 80200ca:	2800      	cmp	r0, #0
 80200cc:	d0b7      	beq.n	802003e <__ssvfiscanf_r+0x1e6>
 80200ce:	e79d      	b.n	802000c <__ssvfiscanf_r+0x1b4>
 80200d0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80200d2:	3201      	adds	r2, #1
 80200d4:	9245      	str	r2, [sp, #276]	; 0x114
 80200d6:	6862      	ldr	r2, [r4, #4]
 80200d8:	3a01      	subs	r2, #1
 80200da:	2a00      	cmp	r2, #0
 80200dc:	6062      	str	r2, [r4, #4]
 80200de:	dd02      	ble.n	80200e6 <__ssvfiscanf_r+0x28e>
 80200e0:	3301      	adds	r3, #1
 80200e2:	6023      	str	r3, [r4, #0]
 80200e4:	e7ae      	b.n	8020044 <__ssvfiscanf_r+0x1ec>
 80200e6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80200e8:	4621      	mov	r1, r4
 80200ea:	4630      	mov	r0, r6
 80200ec:	4798      	blx	r3
 80200ee:	2800      	cmp	r0, #0
 80200f0:	d0a8      	beq.n	8020044 <__ssvfiscanf_r+0x1ec>
 80200f2:	e78b      	b.n	802000c <__ssvfiscanf_r+0x1b4>
 80200f4:	2b04      	cmp	r3, #4
 80200f6:	dc06      	bgt.n	8020106 <__ssvfiscanf_r+0x2ae>
 80200f8:	466b      	mov	r3, sp
 80200fa:	4622      	mov	r2, r4
 80200fc:	a941      	add	r1, sp, #260	; 0x104
 80200fe:	4630      	mov	r0, r6
 8020100:	f000 f9d4 	bl	80204ac <_scanf_i>
 8020104:	e7ac      	b.n	8020060 <__ssvfiscanf_r+0x208>
 8020106:	4b0f      	ldr	r3, [pc, #60]	; (8020144 <__ssvfiscanf_r+0x2ec>)
 8020108:	2b00      	cmp	r3, #0
 802010a:	f43f aecf 	beq.w	801feac <__ssvfiscanf_r+0x54>
 802010e:	466b      	mov	r3, sp
 8020110:	4622      	mov	r2, r4
 8020112:	a941      	add	r1, sp, #260	; 0x104
 8020114:	4630      	mov	r0, r6
 8020116:	f7fb fc71 	bl	801b9fc <_scanf_float>
 802011a:	e7a1      	b.n	8020060 <__ssvfiscanf_r+0x208>
 802011c:	89a3      	ldrh	r3, [r4, #12]
 802011e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8020122:	bf18      	it	ne
 8020124:	f04f 30ff 	movne.w	r0, #4294967295
 8020128:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 802012c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020130:	9844      	ldr	r0, [sp, #272]	; 0x110
 8020132:	e7f9      	b.n	8020128 <__ssvfiscanf_r+0x2d0>
 8020134:	0801fda5 	.word	0x0801fda5
 8020138:	0801fe1f 	.word	0x0801fe1f
 802013c:	08022b89 	.word	0x08022b89
 8020140:	080231ea 	.word	0x080231ea
 8020144:	0801b9fd 	.word	0x0801b9fd

08020148 <__sfputc_r>:
 8020148:	6893      	ldr	r3, [r2, #8]
 802014a:	3b01      	subs	r3, #1
 802014c:	2b00      	cmp	r3, #0
 802014e:	b410      	push	{r4}
 8020150:	6093      	str	r3, [r2, #8]
 8020152:	da08      	bge.n	8020166 <__sfputc_r+0x1e>
 8020154:	6994      	ldr	r4, [r2, #24]
 8020156:	42a3      	cmp	r3, r4
 8020158:	db01      	blt.n	802015e <__sfputc_r+0x16>
 802015a:	290a      	cmp	r1, #10
 802015c:	d103      	bne.n	8020166 <__sfputc_r+0x1e>
 802015e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020162:	f7fd ba75 	b.w	801d650 <__swbuf_r>
 8020166:	6813      	ldr	r3, [r2, #0]
 8020168:	1c58      	adds	r0, r3, #1
 802016a:	6010      	str	r0, [r2, #0]
 802016c:	7019      	strb	r1, [r3, #0]
 802016e:	4608      	mov	r0, r1
 8020170:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020174:	4770      	bx	lr

08020176 <__sfputs_r>:
 8020176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020178:	4606      	mov	r6, r0
 802017a:	460f      	mov	r7, r1
 802017c:	4614      	mov	r4, r2
 802017e:	18d5      	adds	r5, r2, r3
 8020180:	42ac      	cmp	r4, r5
 8020182:	d101      	bne.n	8020188 <__sfputs_r+0x12>
 8020184:	2000      	movs	r0, #0
 8020186:	e007      	b.n	8020198 <__sfputs_r+0x22>
 8020188:	f814 1b01 	ldrb.w	r1, [r4], #1
 802018c:	463a      	mov	r2, r7
 802018e:	4630      	mov	r0, r6
 8020190:	f7ff ffda 	bl	8020148 <__sfputc_r>
 8020194:	1c43      	adds	r3, r0, #1
 8020196:	d1f3      	bne.n	8020180 <__sfputs_r+0xa>
 8020198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802019c <_vfiprintf_r>:
 802019c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201a0:	460d      	mov	r5, r1
 80201a2:	b09d      	sub	sp, #116	; 0x74
 80201a4:	4614      	mov	r4, r2
 80201a6:	4698      	mov	r8, r3
 80201a8:	4606      	mov	r6, r0
 80201aa:	b118      	cbz	r0, 80201b4 <_vfiprintf_r+0x18>
 80201ac:	6983      	ldr	r3, [r0, #24]
 80201ae:	b90b      	cbnz	r3, 80201b4 <_vfiprintf_r+0x18>
 80201b0:	f7fa fa6e 	bl	801a690 <__sinit>
 80201b4:	4b89      	ldr	r3, [pc, #548]	; (80203dc <_vfiprintf_r+0x240>)
 80201b6:	429d      	cmp	r5, r3
 80201b8:	d11b      	bne.n	80201f2 <_vfiprintf_r+0x56>
 80201ba:	6875      	ldr	r5, [r6, #4]
 80201bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80201be:	07d9      	lsls	r1, r3, #31
 80201c0:	d405      	bmi.n	80201ce <_vfiprintf_r+0x32>
 80201c2:	89ab      	ldrh	r3, [r5, #12]
 80201c4:	059a      	lsls	r2, r3, #22
 80201c6:	d402      	bmi.n	80201ce <_vfiprintf_r+0x32>
 80201c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80201ca:	f7fa fc41 	bl	801aa50 <__retarget_lock_acquire_recursive>
 80201ce:	89ab      	ldrh	r3, [r5, #12]
 80201d0:	071b      	lsls	r3, r3, #28
 80201d2:	d501      	bpl.n	80201d8 <_vfiprintf_r+0x3c>
 80201d4:	692b      	ldr	r3, [r5, #16]
 80201d6:	b9eb      	cbnz	r3, 8020214 <_vfiprintf_r+0x78>
 80201d8:	4629      	mov	r1, r5
 80201da:	4630      	mov	r0, r6
 80201dc:	f7fd fa9c 	bl	801d718 <__swsetup_r>
 80201e0:	b1c0      	cbz	r0, 8020214 <_vfiprintf_r+0x78>
 80201e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80201e4:	07dc      	lsls	r4, r3, #31
 80201e6:	d50e      	bpl.n	8020206 <_vfiprintf_r+0x6a>
 80201e8:	f04f 30ff 	mov.w	r0, #4294967295
 80201ec:	b01d      	add	sp, #116	; 0x74
 80201ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201f2:	4b7b      	ldr	r3, [pc, #492]	; (80203e0 <_vfiprintf_r+0x244>)
 80201f4:	429d      	cmp	r5, r3
 80201f6:	d101      	bne.n	80201fc <_vfiprintf_r+0x60>
 80201f8:	68b5      	ldr	r5, [r6, #8]
 80201fa:	e7df      	b.n	80201bc <_vfiprintf_r+0x20>
 80201fc:	4b79      	ldr	r3, [pc, #484]	; (80203e4 <_vfiprintf_r+0x248>)
 80201fe:	429d      	cmp	r5, r3
 8020200:	bf08      	it	eq
 8020202:	68f5      	ldreq	r5, [r6, #12]
 8020204:	e7da      	b.n	80201bc <_vfiprintf_r+0x20>
 8020206:	89ab      	ldrh	r3, [r5, #12]
 8020208:	0598      	lsls	r0, r3, #22
 802020a:	d4ed      	bmi.n	80201e8 <_vfiprintf_r+0x4c>
 802020c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802020e:	f7fa fc21 	bl	801aa54 <__retarget_lock_release_recursive>
 8020212:	e7e9      	b.n	80201e8 <_vfiprintf_r+0x4c>
 8020214:	2300      	movs	r3, #0
 8020216:	9309      	str	r3, [sp, #36]	; 0x24
 8020218:	2320      	movs	r3, #32
 802021a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802021e:	f8cd 800c 	str.w	r8, [sp, #12]
 8020222:	2330      	movs	r3, #48	; 0x30
 8020224:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80203e8 <_vfiprintf_r+0x24c>
 8020228:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802022c:	f04f 0901 	mov.w	r9, #1
 8020230:	4623      	mov	r3, r4
 8020232:	469a      	mov	sl, r3
 8020234:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020238:	b10a      	cbz	r2, 802023e <_vfiprintf_r+0xa2>
 802023a:	2a25      	cmp	r2, #37	; 0x25
 802023c:	d1f9      	bne.n	8020232 <_vfiprintf_r+0x96>
 802023e:	ebba 0b04 	subs.w	fp, sl, r4
 8020242:	d00b      	beq.n	802025c <_vfiprintf_r+0xc0>
 8020244:	465b      	mov	r3, fp
 8020246:	4622      	mov	r2, r4
 8020248:	4629      	mov	r1, r5
 802024a:	4630      	mov	r0, r6
 802024c:	f7ff ff93 	bl	8020176 <__sfputs_r>
 8020250:	3001      	adds	r0, #1
 8020252:	f000 80aa 	beq.w	80203aa <_vfiprintf_r+0x20e>
 8020256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020258:	445a      	add	r2, fp
 802025a:	9209      	str	r2, [sp, #36]	; 0x24
 802025c:	f89a 3000 	ldrb.w	r3, [sl]
 8020260:	2b00      	cmp	r3, #0
 8020262:	f000 80a2 	beq.w	80203aa <_vfiprintf_r+0x20e>
 8020266:	2300      	movs	r3, #0
 8020268:	f04f 32ff 	mov.w	r2, #4294967295
 802026c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020270:	f10a 0a01 	add.w	sl, sl, #1
 8020274:	9304      	str	r3, [sp, #16]
 8020276:	9307      	str	r3, [sp, #28]
 8020278:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802027c:	931a      	str	r3, [sp, #104]	; 0x68
 802027e:	4654      	mov	r4, sl
 8020280:	2205      	movs	r2, #5
 8020282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020286:	4858      	ldr	r0, [pc, #352]	; (80203e8 <_vfiprintf_r+0x24c>)
 8020288:	f7df ffca 	bl	8000220 <memchr>
 802028c:	9a04      	ldr	r2, [sp, #16]
 802028e:	b9d8      	cbnz	r0, 80202c8 <_vfiprintf_r+0x12c>
 8020290:	06d1      	lsls	r1, r2, #27
 8020292:	bf44      	itt	mi
 8020294:	2320      	movmi	r3, #32
 8020296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802029a:	0713      	lsls	r3, r2, #28
 802029c:	bf44      	itt	mi
 802029e:	232b      	movmi	r3, #43	; 0x2b
 80202a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80202a4:	f89a 3000 	ldrb.w	r3, [sl]
 80202a8:	2b2a      	cmp	r3, #42	; 0x2a
 80202aa:	d015      	beq.n	80202d8 <_vfiprintf_r+0x13c>
 80202ac:	9a07      	ldr	r2, [sp, #28]
 80202ae:	4654      	mov	r4, sl
 80202b0:	2000      	movs	r0, #0
 80202b2:	f04f 0c0a 	mov.w	ip, #10
 80202b6:	4621      	mov	r1, r4
 80202b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80202bc:	3b30      	subs	r3, #48	; 0x30
 80202be:	2b09      	cmp	r3, #9
 80202c0:	d94e      	bls.n	8020360 <_vfiprintf_r+0x1c4>
 80202c2:	b1b0      	cbz	r0, 80202f2 <_vfiprintf_r+0x156>
 80202c4:	9207      	str	r2, [sp, #28]
 80202c6:	e014      	b.n	80202f2 <_vfiprintf_r+0x156>
 80202c8:	eba0 0308 	sub.w	r3, r0, r8
 80202cc:	fa09 f303 	lsl.w	r3, r9, r3
 80202d0:	4313      	orrs	r3, r2
 80202d2:	9304      	str	r3, [sp, #16]
 80202d4:	46a2      	mov	sl, r4
 80202d6:	e7d2      	b.n	802027e <_vfiprintf_r+0xe2>
 80202d8:	9b03      	ldr	r3, [sp, #12]
 80202da:	1d19      	adds	r1, r3, #4
 80202dc:	681b      	ldr	r3, [r3, #0]
 80202de:	9103      	str	r1, [sp, #12]
 80202e0:	2b00      	cmp	r3, #0
 80202e2:	bfbb      	ittet	lt
 80202e4:	425b      	neglt	r3, r3
 80202e6:	f042 0202 	orrlt.w	r2, r2, #2
 80202ea:	9307      	strge	r3, [sp, #28]
 80202ec:	9307      	strlt	r3, [sp, #28]
 80202ee:	bfb8      	it	lt
 80202f0:	9204      	strlt	r2, [sp, #16]
 80202f2:	7823      	ldrb	r3, [r4, #0]
 80202f4:	2b2e      	cmp	r3, #46	; 0x2e
 80202f6:	d10c      	bne.n	8020312 <_vfiprintf_r+0x176>
 80202f8:	7863      	ldrb	r3, [r4, #1]
 80202fa:	2b2a      	cmp	r3, #42	; 0x2a
 80202fc:	d135      	bne.n	802036a <_vfiprintf_r+0x1ce>
 80202fe:	9b03      	ldr	r3, [sp, #12]
 8020300:	1d1a      	adds	r2, r3, #4
 8020302:	681b      	ldr	r3, [r3, #0]
 8020304:	9203      	str	r2, [sp, #12]
 8020306:	2b00      	cmp	r3, #0
 8020308:	bfb8      	it	lt
 802030a:	f04f 33ff 	movlt.w	r3, #4294967295
 802030e:	3402      	adds	r4, #2
 8020310:	9305      	str	r3, [sp, #20]
 8020312:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80203f8 <_vfiprintf_r+0x25c>
 8020316:	7821      	ldrb	r1, [r4, #0]
 8020318:	2203      	movs	r2, #3
 802031a:	4650      	mov	r0, sl
 802031c:	f7df ff80 	bl	8000220 <memchr>
 8020320:	b140      	cbz	r0, 8020334 <_vfiprintf_r+0x198>
 8020322:	2340      	movs	r3, #64	; 0x40
 8020324:	eba0 000a 	sub.w	r0, r0, sl
 8020328:	fa03 f000 	lsl.w	r0, r3, r0
 802032c:	9b04      	ldr	r3, [sp, #16]
 802032e:	4303      	orrs	r3, r0
 8020330:	3401      	adds	r4, #1
 8020332:	9304      	str	r3, [sp, #16]
 8020334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020338:	482c      	ldr	r0, [pc, #176]	; (80203ec <_vfiprintf_r+0x250>)
 802033a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802033e:	2206      	movs	r2, #6
 8020340:	f7df ff6e 	bl	8000220 <memchr>
 8020344:	2800      	cmp	r0, #0
 8020346:	d03f      	beq.n	80203c8 <_vfiprintf_r+0x22c>
 8020348:	4b29      	ldr	r3, [pc, #164]	; (80203f0 <_vfiprintf_r+0x254>)
 802034a:	bb1b      	cbnz	r3, 8020394 <_vfiprintf_r+0x1f8>
 802034c:	9b03      	ldr	r3, [sp, #12]
 802034e:	3307      	adds	r3, #7
 8020350:	f023 0307 	bic.w	r3, r3, #7
 8020354:	3308      	adds	r3, #8
 8020356:	9303      	str	r3, [sp, #12]
 8020358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802035a:	443b      	add	r3, r7
 802035c:	9309      	str	r3, [sp, #36]	; 0x24
 802035e:	e767      	b.n	8020230 <_vfiprintf_r+0x94>
 8020360:	fb0c 3202 	mla	r2, ip, r2, r3
 8020364:	460c      	mov	r4, r1
 8020366:	2001      	movs	r0, #1
 8020368:	e7a5      	b.n	80202b6 <_vfiprintf_r+0x11a>
 802036a:	2300      	movs	r3, #0
 802036c:	3401      	adds	r4, #1
 802036e:	9305      	str	r3, [sp, #20]
 8020370:	4619      	mov	r1, r3
 8020372:	f04f 0c0a 	mov.w	ip, #10
 8020376:	4620      	mov	r0, r4
 8020378:	f810 2b01 	ldrb.w	r2, [r0], #1
 802037c:	3a30      	subs	r2, #48	; 0x30
 802037e:	2a09      	cmp	r2, #9
 8020380:	d903      	bls.n	802038a <_vfiprintf_r+0x1ee>
 8020382:	2b00      	cmp	r3, #0
 8020384:	d0c5      	beq.n	8020312 <_vfiprintf_r+0x176>
 8020386:	9105      	str	r1, [sp, #20]
 8020388:	e7c3      	b.n	8020312 <_vfiprintf_r+0x176>
 802038a:	fb0c 2101 	mla	r1, ip, r1, r2
 802038e:	4604      	mov	r4, r0
 8020390:	2301      	movs	r3, #1
 8020392:	e7f0      	b.n	8020376 <_vfiprintf_r+0x1da>
 8020394:	ab03      	add	r3, sp, #12
 8020396:	9300      	str	r3, [sp, #0]
 8020398:	462a      	mov	r2, r5
 802039a:	4b16      	ldr	r3, [pc, #88]	; (80203f4 <_vfiprintf_r+0x258>)
 802039c:	a904      	add	r1, sp, #16
 802039e:	4630      	mov	r0, r6
 80203a0:	f7fa ff62 	bl	801b268 <_printf_float>
 80203a4:	4607      	mov	r7, r0
 80203a6:	1c78      	adds	r0, r7, #1
 80203a8:	d1d6      	bne.n	8020358 <_vfiprintf_r+0x1bc>
 80203aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80203ac:	07d9      	lsls	r1, r3, #31
 80203ae:	d405      	bmi.n	80203bc <_vfiprintf_r+0x220>
 80203b0:	89ab      	ldrh	r3, [r5, #12]
 80203b2:	059a      	lsls	r2, r3, #22
 80203b4:	d402      	bmi.n	80203bc <_vfiprintf_r+0x220>
 80203b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80203b8:	f7fa fb4c 	bl	801aa54 <__retarget_lock_release_recursive>
 80203bc:	89ab      	ldrh	r3, [r5, #12]
 80203be:	065b      	lsls	r3, r3, #25
 80203c0:	f53f af12 	bmi.w	80201e8 <_vfiprintf_r+0x4c>
 80203c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80203c6:	e711      	b.n	80201ec <_vfiprintf_r+0x50>
 80203c8:	ab03      	add	r3, sp, #12
 80203ca:	9300      	str	r3, [sp, #0]
 80203cc:	462a      	mov	r2, r5
 80203ce:	4b09      	ldr	r3, [pc, #36]	; (80203f4 <_vfiprintf_r+0x258>)
 80203d0:	a904      	add	r1, sp, #16
 80203d2:	4630      	mov	r0, r6
 80203d4:	f7fb f9ec 	bl	801b7b0 <_printf_i>
 80203d8:	e7e4      	b.n	80203a4 <_vfiprintf_r+0x208>
 80203da:	bf00      	nop
 80203dc:	08022cac 	.word	0x08022cac
 80203e0:	08022ccc 	.word	0x08022ccc
 80203e4:	08022c8c 	.word	0x08022c8c
 80203e8:	080231e4 	.word	0x080231e4
 80203ec:	080231ee 	.word	0x080231ee
 80203f0:	0801b269 	.word	0x0801b269
 80203f4:	08020177 	.word	0x08020177
 80203f8:	080231ea 	.word	0x080231ea

080203fc <_scanf_chars>:
 80203fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020400:	4615      	mov	r5, r2
 8020402:	688a      	ldr	r2, [r1, #8]
 8020404:	4680      	mov	r8, r0
 8020406:	460c      	mov	r4, r1
 8020408:	b932      	cbnz	r2, 8020418 <_scanf_chars+0x1c>
 802040a:	698a      	ldr	r2, [r1, #24]
 802040c:	2a00      	cmp	r2, #0
 802040e:	bf0c      	ite	eq
 8020410:	2201      	moveq	r2, #1
 8020412:	f04f 32ff 	movne.w	r2, #4294967295
 8020416:	608a      	str	r2, [r1, #8]
 8020418:	6822      	ldr	r2, [r4, #0]
 802041a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80204a8 <_scanf_chars+0xac>
 802041e:	06d1      	lsls	r1, r2, #27
 8020420:	bf5f      	itttt	pl
 8020422:	681a      	ldrpl	r2, [r3, #0]
 8020424:	1d11      	addpl	r1, r2, #4
 8020426:	6019      	strpl	r1, [r3, #0]
 8020428:	6816      	ldrpl	r6, [r2, #0]
 802042a:	2700      	movs	r7, #0
 802042c:	69a0      	ldr	r0, [r4, #24]
 802042e:	b188      	cbz	r0, 8020454 <_scanf_chars+0x58>
 8020430:	2801      	cmp	r0, #1
 8020432:	d107      	bne.n	8020444 <_scanf_chars+0x48>
 8020434:	682b      	ldr	r3, [r5, #0]
 8020436:	781a      	ldrb	r2, [r3, #0]
 8020438:	6963      	ldr	r3, [r4, #20]
 802043a:	5c9b      	ldrb	r3, [r3, r2]
 802043c:	b953      	cbnz	r3, 8020454 <_scanf_chars+0x58>
 802043e:	bb27      	cbnz	r7, 802048a <_scanf_chars+0x8e>
 8020440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020444:	2802      	cmp	r0, #2
 8020446:	d120      	bne.n	802048a <_scanf_chars+0x8e>
 8020448:	682b      	ldr	r3, [r5, #0]
 802044a:	781b      	ldrb	r3, [r3, #0]
 802044c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8020450:	071b      	lsls	r3, r3, #28
 8020452:	d41a      	bmi.n	802048a <_scanf_chars+0x8e>
 8020454:	6823      	ldr	r3, [r4, #0]
 8020456:	06da      	lsls	r2, r3, #27
 8020458:	bf5e      	ittt	pl
 802045a:	682b      	ldrpl	r3, [r5, #0]
 802045c:	781b      	ldrbpl	r3, [r3, #0]
 802045e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8020462:	682a      	ldr	r2, [r5, #0]
 8020464:	686b      	ldr	r3, [r5, #4]
 8020466:	3201      	adds	r2, #1
 8020468:	602a      	str	r2, [r5, #0]
 802046a:	68a2      	ldr	r2, [r4, #8]
 802046c:	3b01      	subs	r3, #1
 802046e:	3a01      	subs	r2, #1
 8020470:	606b      	str	r3, [r5, #4]
 8020472:	3701      	adds	r7, #1
 8020474:	60a2      	str	r2, [r4, #8]
 8020476:	b142      	cbz	r2, 802048a <_scanf_chars+0x8e>
 8020478:	2b00      	cmp	r3, #0
 802047a:	dcd7      	bgt.n	802042c <_scanf_chars+0x30>
 802047c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020480:	4629      	mov	r1, r5
 8020482:	4640      	mov	r0, r8
 8020484:	4798      	blx	r3
 8020486:	2800      	cmp	r0, #0
 8020488:	d0d0      	beq.n	802042c <_scanf_chars+0x30>
 802048a:	6823      	ldr	r3, [r4, #0]
 802048c:	f013 0310 	ands.w	r3, r3, #16
 8020490:	d105      	bne.n	802049e <_scanf_chars+0xa2>
 8020492:	68e2      	ldr	r2, [r4, #12]
 8020494:	3201      	adds	r2, #1
 8020496:	60e2      	str	r2, [r4, #12]
 8020498:	69a2      	ldr	r2, [r4, #24]
 802049a:	b102      	cbz	r2, 802049e <_scanf_chars+0xa2>
 802049c:	7033      	strb	r3, [r6, #0]
 802049e:	6923      	ldr	r3, [r4, #16]
 80204a0:	441f      	add	r7, r3
 80204a2:	6127      	str	r7, [r4, #16]
 80204a4:	2000      	movs	r0, #0
 80204a6:	e7cb      	b.n	8020440 <_scanf_chars+0x44>
 80204a8:	08022b89 	.word	0x08022b89

080204ac <_scanf_i>:
 80204ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204b0:	4698      	mov	r8, r3
 80204b2:	4b74      	ldr	r3, [pc, #464]	; (8020684 <_scanf_i+0x1d8>)
 80204b4:	460c      	mov	r4, r1
 80204b6:	4682      	mov	sl, r0
 80204b8:	4616      	mov	r6, r2
 80204ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80204be:	b087      	sub	sp, #28
 80204c0:	ab03      	add	r3, sp, #12
 80204c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80204c6:	4b70      	ldr	r3, [pc, #448]	; (8020688 <_scanf_i+0x1dc>)
 80204c8:	69a1      	ldr	r1, [r4, #24]
 80204ca:	4a70      	ldr	r2, [pc, #448]	; (802068c <_scanf_i+0x1e0>)
 80204cc:	2903      	cmp	r1, #3
 80204ce:	bf18      	it	ne
 80204d0:	461a      	movne	r2, r3
 80204d2:	68a3      	ldr	r3, [r4, #8]
 80204d4:	9201      	str	r2, [sp, #4]
 80204d6:	1e5a      	subs	r2, r3, #1
 80204d8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80204dc:	bf88      	it	hi
 80204de:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80204e2:	4627      	mov	r7, r4
 80204e4:	bf82      	ittt	hi
 80204e6:	eb03 0905 	addhi.w	r9, r3, r5
 80204ea:	f240 135d 	movwhi	r3, #349	; 0x15d
 80204ee:	60a3      	strhi	r3, [r4, #8]
 80204f0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80204f4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80204f8:	bf98      	it	ls
 80204fa:	f04f 0900 	movls.w	r9, #0
 80204fe:	6023      	str	r3, [r4, #0]
 8020500:	463d      	mov	r5, r7
 8020502:	f04f 0b00 	mov.w	fp, #0
 8020506:	6831      	ldr	r1, [r6, #0]
 8020508:	ab03      	add	r3, sp, #12
 802050a:	7809      	ldrb	r1, [r1, #0]
 802050c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8020510:	2202      	movs	r2, #2
 8020512:	f7df fe85 	bl	8000220 <memchr>
 8020516:	b328      	cbz	r0, 8020564 <_scanf_i+0xb8>
 8020518:	f1bb 0f01 	cmp.w	fp, #1
 802051c:	d159      	bne.n	80205d2 <_scanf_i+0x126>
 802051e:	6862      	ldr	r2, [r4, #4]
 8020520:	b92a      	cbnz	r2, 802052e <_scanf_i+0x82>
 8020522:	6822      	ldr	r2, [r4, #0]
 8020524:	2308      	movs	r3, #8
 8020526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802052a:	6063      	str	r3, [r4, #4]
 802052c:	6022      	str	r2, [r4, #0]
 802052e:	6822      	ldr	r2, [r4, #0]
 8020530:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8020534:	6022      	str	r2, [r4, #0]
 8020536:	68a2      	ldr	r2, [r4, #8]
 8020538:	1e51      	subs	r1, r2, #1
 802053a:	60a1      	str	r1, [r4, #8]
 802053c:	b192      	cbz	r2, 8020564 <_scanf_i+0xb8>
 802053e:	6832      	ldr	r2, [r6, #0]
 8020540:	1c51      	adds	r1, r2, #1
 8020542:	6031      	str	r1, [r6, #0]
 8020544:	7812      	ldrb	r2, [r2, #0]
 8020546:	f805 2b01 	strb.w	r2, [r5], #1
 802054a:	6872      	ldr	r2, [r6, #4]
 802054c:	3a01      	subs	r2, #1
 802054e:	2a00      	cmp	r2, #0
 8020550:	6072      	str	r2, [r6, #4]
 8020552:	dc07      	bgt.n	8020564 <_scanf_i+0xb8>
 8020554:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8020558:	4631      	mov	r1, r6
 802055a:	4650      	mov	r0, sl
 802055c:	4790      	blx	r2
 802055e:	2800      	cmp	r0, #0
 8020560:	f040 8085 	bne.w	802066e <_scanf_i+0x1c2>
 8020564:	f10b 0b01 	add.w	fp, fp, #1
 8020568:	f1bb 0f03 	cmp.w	fp, #3
 802056c:	d1cb      	bne.n	8020506 <_scanf_i+0x5a>
 802056e:	6863      	ldr	r3, [r4, #4]
 8020570:	b90b      	cbnz	r3, 8020576 <_scanf_i+0xca>
 8020572:	230a      	movs	r3, #10
 8020574:	6063      	str	r3, [r4, #4]
 8020576:	6863      	ldr	r3, [r4, #4]
 8020578:	4945      	ldr	r1, [pc, #276]	; (8020690 <_scanf_i+0x1e4>)
 802057a:	6960      	ldr	r0, [r4, #20]
 802057c:	1ac9      	subs	r1, r1, r3
 802057e:	f000 f89b 	bl	80206b8 <__sccl>
 8020582:	f04f 0b00 	mov.w	fp, #0
 8020586:	68a3      	ldr	r3, [r4, #8]
 8020588:	6822      	ldr	r2, [r4, #0]
 802058a:	2b00      	cmp	r3, #0
 802058c:	d03d      	beq.n	802060a <_scanf_i+0x15e>
 802058e:	6831      	ldr	r1, [r6, #0]
 8020590:	6960      	ldr	r0, [r4, #20]
 8020592:	f891 c000 	ldrb.w	ip, [r1]
 8020596:	f810 000c 	ldrb.w	r0, [r0, ip]
 802059a:	2800      	cmp	r0, #0
 802059c:	d035      	beq.n	802060a <_scanf_i+0x15e>
 802059e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80205a2:	d124      	bne.n	80205ee <_scanf_i+0x142>
 80205a4:	0510      	lsls	r0, r2, #20
 80205a6:	d522      	bpl.n	80205ee <_scanf_i+0x142>
 80205a8:	f10b 0b01 	add.w	fp, fp, #1
 80205ac:	f1b9 0f00 	cmp.w	r9, #0
 80205b0:	d003      	beq.n	80205ba <_scanf_i+0x10e>
 80205b2:	3301      	adds	r3, #1
 80205b4:	f109 39ff 	add.w	r9, r9, #4294967295
 80205b8:	60a3      	str	r3, [r4, #8]
 80205ba:	6873      	ldr	r3, [r6, #4]
 80205bc:	3b01      	subs	r3, #1
 80205be:	2b00      	cmp	r3, #0
 80205c0:	6073      	str	r3, [r6, #4]
 80205c2:	dd1b      	ble.n	80205fc <_scanf_i+0x150>
 80205c4:	6833      	ldr	r3, [r6, #0]
 80205c6:	3301      	adds	r3, #1
 80205c8:	6033      	str	r3, [r6, #0]
 80205ca:	68a3      	ldr	r3, [r4, #8]
 80205cc:	3b01      	subs	r3, #1
 80205ce:	60a3      	str	r3, [r4, #8]
 80205d0:	e7d9      	b.n	8020586 <_scanf_i+0xda>
 80205d2:	f1bb 0f02 	cmp.w	fp, #2
 80205d6:	d1ae      	bne.n	8020536 <_scanf_i+0x8a>
 80205d8:	6822      	ldr	r2, [r4, #0]
 80205da:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80205de:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80205e2:	d1bf      	bne.n	8020564 <_scanf_i+0xb8>
 80205e4:	2310      	movs	r3, #16
 80205e6:	6063      	str	r3, [r4, #4]
 80205e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80205ec:	e7a2      	b.n	8020534 <_scanf_i+0x88>
 80205ee:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80205f2:	6022      	str	r2, [r4, #0]
 80205f4:	780b      	ldrb	r3, [r1, #0]
 80205f6:	f805 3b01 	strb.w	r3, [r5], #1
 80205fa:	e7de      	b.n	80205ba <_scanf_i+0x10e>
 80205fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020600:	4631      	mov	r1, r6
 8020602:	4650      	mov	r0, sl
 8020604:	4798      	blx	r3
 8020606:	2800      	cmp	r0, #0
 8020608:	d0df      	beq.n	80205ca <_scanf_i+0x11e>
 802060a:	6823      	ldr	r3, [r4, #0]
 802060c:	05d9      	lsls	r1, r3, #23
 802060e:	d50d      	bpl.n	802062c <_scanf_i+0x180>
 8020610:	42bd      	cmp	r5, r7
 8020612:	d909      	bls.n	8020628 <_scanf_i+0x17c>
 8020614:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8020618:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802061c:	4632      	mov	r2, r6
 802061e:	4650      	mov	r0, sl
 8020620:	4798      	blx	r3
 8020622:	f105 39ff 	add.w	r9, r5, #4294967295
 8020626:	464d      	mov	r5, r9
 8020628:	42bd      	cmp	r5, r7
 802062a:	d028      	beq.n	802067e <_scanf_i+0x1d2>
 802062c:	6822      	ldr	r2, [r4, #0]
 802062e:	f012 0210 	ands.w	r2, r2, #16
 8020632:	d113      	bne.n	802065c <_scanf_i+0x1b0>
 8020634:	702a      	strb	r2, [r5, #0]
 8020636:	6863      	ldr	r3, [r4, #4]
 8020638:	9e01      	ldr	r6, [sp, #4]
 802063a:	4639      	mov	r1, r7
 802063c:	4650      	mov	r0, sl
 802063e:	47b0      	blx	r6
 8020640:	f8d8 3000 	ldr.w	r3, [r8]
 8020644:	6821      	ldr	r1, [r4, #0]
 8020646:	1d1a      	adds	r2, r3, #4
 8020648:	f8c8 2000 	str.w	r2, [r8]
 802064c:	f011 0f20 	tst.w	r1, #32
 8020650:	681b      	ldr	r3, [r3, #0]
 8020652:	d00f      	beq.n	8020674 <_scanf_i+0x1c8>
 8020654:	6018      	str	r0, [r3, #0]
 8020656:	68e3      	ldr	r3, [r4, #12]
 8020658:	3301      	adds	r3, #1
 802065a:	60e3      	str	r3, [r4, #12]
 802065c:	1bed      	subs	r5, r5, r7
 802065e:	44ab      	add	fp, r5
 8020660:	6925      	ldr	r5, [r4, #16]
 8020662:	445d      	add	r5, fp
 8020664:	6125      	str	r5, [r4, #16]
 8020666:	2000      	movs	r0, #0
 8020668:	b007      	add	sp, #28
 802066a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802066e:	f04f 0b00 	mov.w	fp, #0
 8020672:	e7ca      	b.n	802060a <_scanf_i+0x15e>
 8020674:	07ca      	lsls	r2, r1, #31
 8020676:	bf4c      	ite	mi
 8020678:	8018      	strhmi	r0, [r3, #0]
 802067a:	6018      	strpl	r0, [r3, #0]
 802067c:	e7eb      	b.n	8020656 <_scanf_i+0x1aa>
 802067e:	2001      	movs	r0, #1
 8020680:	e7f2      	b.n	8020668 <_scanf_i+0x1bc>
 8020682:	bf00      	nop
 8020684:	0802291c 	.word	0x0802291c
 8020688:	0801d159 	.word	0x0801d159
 802068c:	0801d049 	.word	0x0801d049
 8020690:	0802320e 	.word	0x0802320e

08020694 <_read_r>:
 8020694:	b538      	push	{r3, r4, r5, lr}
 8020696:	4d07      	ldr	r5, [pc, #28]	; (80206b4 <_read_r+0x20>)
 8020698:	4604      	mov	r4, r0
 802069a:	4608      	mov	r0, r1
 802069c:	4611      	mov	r1, r2
 802069e:	2200      	movs	r2, #0
 80206a0:	602a      	str	r2, [r5, #0]
 80206a2:	461a      	mov	r2, r3
 80206a4:	f000 f8f0 	bl	8020888 <_read>
 80206a8:	1c43      	adds	r3, r0, #1
 80206aa:	d102      	bne.n	80206b2 <_read_r+0x1e>
 80206ac:	682b      	ldr	r3, [r5, #0]
 80206ae:	b103      	cbz	r3, 80206b2 <_read_r+0x1e>
 80206b0:	6023      	str	r3, [r4, #0]
 80206b2:	bd38      	pop	{r3, r4, r5, pc}
 80206b4:	20009d18 	.word	0x20009d18

080206b8 <__sccl>:
 80206b8:	b570      	push	{r4, r5, r6, lr}
 80206ba:	780b      	ldrb	r3, [r1, #0]
 80206bc:	4604      	mov	r4, r0
 80206be:	2b5e      	cmp	r3, #94	; 0x5e
 80206c0:	bf0b      	itete	eq
 80206c2:	784b      	ldrbeq	r3, [r1, #1]
 80206c4:	1c48      	addne	r0, r1, #1
 80206c6:	1c88      	addeq	r0, r1, #2
 80206c8:	2200      	movne	r2, #0
 80206ca:	bf08      	it	eq
 80206cc:	2201      	moveq	r2, #1
 80206ce:	1e61      	subs	r1, r4, #1
 80206d0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80206d4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80206d8:	42a9      	cmp	r1, r5
 80206da:	d1fb      	bne.n	80206d4 <__sccl+0x1c>
 80206dc:	b90b      	cbnz	r3, 80206e2 <__sccl+0x2a>
 80206de:	3801      	subs	r0, #1
 80206e0:	bd70      	pop	{r4, r5, r6, pc}
 80206e2:	f082 0101 	eor.w	r1, r2, #1
 80206e6:	54e1      	strb	r1, [r4, r3]
 80206e8:	1c42      	adds	r2, r0, #1
 80206ea:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80206ee:	2d2d      	cmp	r5, #45	; 0x2d
 80206f0:	f102 36ff 	add.w	r6, r2, #4294967295
 80206f4:	4610      	mov	r0, r2
 80206f6:	d006      	beq.n	8020706 <__sccl+0x4e>
 80206f8:	2d5d      	cmp	r5, #93	; 0x5d
 80206fa:	d0f1      	beq.n	80206e0 <__sccl+0x28>
 80206fc:	b90d      	cbnz	r5, 8020702 <__sccl+0x4a>
 80206fe:	4630      	mov	r0, r6
 8020700:	e7ee      	b.n	80206e0 <__sccl+0x28>
 8020702:	462b      	mov	r3, r5
 8020704:	e7ef      	b.n	80206e6 <__sccl+0x2e>
 8020706:	7816      	ldrb	r6, [r2, #0]
 8020708:	2e5d      	cmp	r6, #93	; 0x5d
 802070a:	d0fa      	beq.n	8020702 <__sccl+0x4a>
 802070c:	42b3      	cmp	r3, r6
 802070e:	dcf8      	bgt.n	8020702 <__sccl+0x4a>
 8020710:	4618      	mov	r0, r3
 8020712:	3001      	adds	r0, #1
 8020714:	4286      	cmp	r6, r0
 8020716:	5421      	strb	r1, [r4, r0]
 8020718:	dcfb      	bgt.n	8020712 <__sccl+0x5a>
 802071a:	43d8      	mvns	r0, r3
 802071c:	4430      	add	r0, r6
 802071e:	1c5d      	adds	r5, r3, #1
 8020720:	42b3      	cmp	r3, r6
 8020722:	bfa8      	it	ge
 8020724:	2000      	movge	r0, #0
 8020726:	182b      	adds	r3, r5, r0
 8020728:	3202      	adds	r2, #2
 802072a:	e7de      	b.n	80206ea <__sccl+0x32>

0802072c <__submore>:
 802072c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020730:	460c      	mov	r4, r1
 8020732:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8020734:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020738:	4299      	cmp	r1, r3
 802073a:	d11d      	bne.n	8020778 <__submore+0x4c>
 802073c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020740:	f7fa fc98 	bl	801b074 <_malloc_r>
 8020744:	b918      	cbnz	r0, 802074e <__submore+0x22>
 8020746:	f04f 30ff 	mov.w	r0, #4294967295
 802074a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802074e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020752:	63a3      	str	r3, [r4, #56]	; 0x38
 8020754:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8020758:	6360      	str	r0, [r4, #52]	; 0x34
 802075a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802075e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8020762:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8020766:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802076a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802076e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8020772:	6020      	str	r0, [r4, #0]
 8020774:	2000      	movs	r0, #0
 8020776:	e7e8      	b.n	802074a <__submore+0x1e>
 8020778:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802077a:	0077      	lsls	r7, r6, #1
 802077c:	463a      	mov	r2, r7
 802077e:	f7ff f98f 	bl	801faa0 <_realloc_r>
 8020782:	4605      	mov	r5, r0
 8020784:	2800      	cmp	r0, #0
 8020786:	d0de      	beq.n	8020746 <__submore+0x1a>
 8020788:	eb00 0806 	add.w	r8, r0, r6
 802078c:	4601      	mov	r1, r0
 802078e:	4632      	mov	r2, r6
 8020790:	4640      	mov	r0, r8
 8020792:	f7fa f971 	bl	801aa78 <memcpy>
 8020796:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802079a:	f8c4 8000 	str.w	r8, [r4]
 802079e:	e7e9      	b.n	8020774 <__submore+0x48>

080207a0 <__ascii_wctomb>:
 80207a0:	b149      	cbz	r1, 80207b6 <__ascii_wctomb+0x16>
 80207a2:	2aff      	cmp	r2, #255	; 0xff
 80207a4:	bf85      	ittet	hi
 80207a6:	238a      	movhi	r3, #138	; 0x8a
 80207a8:	6003      	strhi	r3, [r0, #0]
 80207aa:	700a      	strbls	r2, [r1, #0]
 80207ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80207b0:	bf98      	it	ls
 80207b2:	2001      	movls	r0, #1
 80207b4:	4770      	bx	lr
 80207b6:	4608      	mov	r0, r1
 80207b8:	4770      	bx	lr
	...

080207bc <__env_lock>:
 80207bc:	4801      	ldr	r0, [pc, #4]	; (80207c4 <__env_lock+0x8>)
 80207be:	f7fa b947 	b.w	801aa50 <__retarget_lock_acquire_recursive>
 80207c2:	bf00      	nop
 80207c4:	20009d0e 	.word	0x20009d0e

080207c8 <__env_unlock>:
 80207c8:	4801      	ldr	r0, [pc, #4]	; (80207d0 <__env_unlock+0x8>)
 80207ca:	f7fa b943 	b.w	801aa54 <__retarget_lock_release_recursive>
 80207ce:	bf00      	nop
 80207d0:	20009d0e 	.word	0x20009d0e

080207d4 <_fstat_r>:
 80207d4:	b538      	push	{r3, r4, r5, lr}
 80207d6:	4d07      	ldr	r5, [pc, #28]	; (80207f4 <_fstat_r+0x20>)
 80207d8:	2300      	movs	r3, #0
 80207da:	4604      	mov	r4, r0
 80207dc:	4608      	mov	r0, r1
 80207de:	4611      	mov	r1, r2
 80207e0:	602b      	str	r3, [r5, #0]
 80207e2:	f000 f829 	bl	8020838 <_fstat>
 80207e6:	1c43      	adds	r3, r0, #1
 80207e8:	d102      	bne.n	80207f0 <_fstat_r+0x1c>
 80207ea:	682b      	ldr	r3, [r5, #0]
 80207ec:	b103      	cbz	r3, 80207f0 <_fstat_r+0x1c>
 80207ee:	6023      	str	r3, [r4, #0]
 80207f0:	bd38      	pop	{r3, r4, r5, pc}
 80207f2:	bf00      	nop
 80207f4:	20009d18 	.word	0x20009d18

080207f8 <_isatty_r>:
 80207f8:	b538      	push	{r3, r4, r5, lr}
 80207fa:	4d06      	ldr	r5, [pc, #24]	; (8020814 <_isatty_r+0x1c>)
 80207fc:	2300      	movs	r3, #0
 80207fe:	4604      	mov	r4, r0
 8020800:	4608      	mov	r0, r1
 8020802:	602b      	str	r3, [r5, #0]
 8020804:	f000 f828 	bl	8020858 <_isatty>
 8020808:	1c43      	adds	r3, r0, #1
 802080a:	d102      	bne.n	8020812 <_isatty_r+0x1a>
 802080c:	682b      	ldr	r3, [r5, #0]
 802080e:	b103      	cbz	r3, 8020812 <_isatty_r+0x1a>
 8020810:	6023      	str	r3, [r4, #0]
 8020812:	bd38      	pop	{r3, r4, r5, pc}
 8020814:	20009d18 	.word	0x20009d18

08020818 <_malloc_usable_size_r>:
 8020818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802081c:	1f18      	subs	r0, r3, #4
 802081e:	2b00      	cmp	r3, #0
 8020820:	bfbc      	itt	lt
 8020822:	580b      	ldrlt	r3, [r1, r0]
 8020824:	18c0      	addlt	r0, r0, r3
 8020826:	4770      	bx	lr

08020828 <_close>:
 8020828:	4b02      	ldr	r3, [pc, #8]	; (8020834 <_close+0xc>)
 802082a:	2258      	movs	r2, #88	; 0x58
 802082c:	601a      	str	r2, [r3, #0]
 802082e:	f04f 30ff 	mov.w	r0, #4294967295
 8020832:	4770      	bx	lr
 8020834:	20009d18 	.word	0x20009d18

08020838 <_fstat>:
 8020838:	4b02      	ldr	r3, [pc, #8]	; (8020844 <_fstat+0xc>)
 802083a:	2258      	movs	r2, #88	; 0x58
 802083c:	601a      	str	r2, [r3, #0]
 802083e:	f04f 30ff 	mov.w	r0, #4294967295
 8020842:	4770      	bx	lr
 8020844:	20009d18 	.word	0x20009d18

08020848 <_getpid>:
 8020848:	4b02      	ldr	r3, [pc, #8]	; (8020854 <_getpid+0xc>)
 802084a:	2258      	movs	r2, #88	; 0x58
 802084c:	601a      	str	r2, [r3, #0]
 802084e:	f04f 30ff 	mov.w	r0, #4294967295
 8020852:	4770      	bx	lr
 8020854:	20009d18 	.word	0x20009d18

08020858 <_isatty>:
 8020858:	4b02      	ldr	r3, [pc, #8]	; (8020864 <_isatty+0xc>)
 802085a:	2258      	movs	r2, #88	; 0x58
 802085c:	601a      	str	r2, [r3, #0]
 802085e:	2000      	movs	r0, #0
 8020860:	4770      	bx	lr
 8020862:	bf00      	nop
 8020864:	20009d18 	.word	0x20009d18

08020868 <_kill>:
 8020868:	4b02      	ldr	r3, [pc, #8]	; (8020874 <_kill+0xc>)
 802086a:	2258      	movs	r2, #88	; 0x58
 802086c:	601a      	str	r2, [r3, #0]
 802086e:	f04f 30ff 	mov.w	r0, #4294967295
 8020872:	4770      	bx	lr
 8020874:	20009d18 	.word	0x20009d18

08020878 <_lseek>:
 8020878:	4b02      	ldr	r3, [pc, #8]	; (8020884 <_lseek+0xc>)
 802087a:	2258      	movs	r2, #88	; 0x58
 802087c:	601a      	str	r2, [r3, #0]
 802087e:	f04f 30ff 	mov.w	r0, #4294967295
 8020882:	4770      	bx	lr
 8020884:	20009d18 	.word	0x20009d18

08020888 <_read>:
 8020888:	4b02      	ldr	r3, [pc, #8]	; (8020894 <_read+0xc>)
 802088a:	2258      	movs	r2, #88	; 0x58
 802088c:	601a      	str	r2, [r3, #0]
 802088e:	f04f 30ff 	mov.w	r0, #4294967295
 8020892:	4770      	bx	lr
 8020894:	20009d18 	.word	0x20009d18

08020898 <_sbrk>:
 8020898:	4b04      	ldr	r3, [pc, #16]	; (80208ac <_sbrk+0x14>)
 802089a:	6819      	ldr	r1, [r3, #0]
 802089c:	4602      	mov	r2, r0
 802089e:	b909      	cbnz	r1, 80208a4 <_sbrk+0xc>
 80208a0:	4903      	ldr	r1, [pc, #12]	; (80208b0 <_sbrk+0x18>)
 80208a2:	6019      	str	r1, [r3, #0]
 80208a4:	6818      	ldr	r0, [r3, #0]
 80208a6:	4402      	add	r2, r0
 80208a8:	601a      	str	r2, [r3, #0]
 80208aa:	4770      	bx	lr
 80208ac:	20008660 	.word	0x20008660
 80208b0:	20009d20 	.word	0x20009d20

080208b4 <_write>:
 80208b4:	4b02      	ldr	r3, [pc, #8]	; (80208c0 <_write+0xc>)
 80208b6:	2258      	movs	r2, #88	; 0x58
 80208b8:	601a      	str	r2, [r3, #0]
 80208ba:	f04f 30ff 	mov.w	r0, #4294967295
 80208be:	4770      	bx	lr
 80208c0:	20009d18 	.word	0x20009d18

080208c4 <_exit>:
 80208c4:	e7fe      	b.n	80208c4 <_exit>
	...

080208c8 <_init>:
 80208c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80208ca:	bf00      	nop
 80208cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80208ce:	bc08      	pop	{r3}
 80208d0:	469e      	mov	lr, r3
 80208d2:	4770      	bx	lr

080208d4 <_fini>:
 80208d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80208d6:	bf00      	nop
 80208d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80208da:	bc08      	pop	{r3}
 80208dc:	469e      	mov	lr, r3
 80208de:	4770      	bx	lr
