
FC_v2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cde8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002418  0801cf98  0801cf98  0002cf98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f3b0  0801f3b0  000302bc  2**0
                  CONTENTS
  4 .ARM          00000008  0801f3b0  0801f3b0  0002f3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f3b8  0801f3b8  000302bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801f3b8  0801f3b8  0002f3b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f3c0  0801f3c0  0002f3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002bc  20000000  0801f3c4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302bc  2**0
                  CONTENTS
 10 .bss          00006930  200002bc  200002bc  000302bc  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20006bec  20006bec  000302bc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0006a690  00000000  00000000  000302ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a335  00000000  00000000  0009a97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003c60  00000000  00000000  000a4cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003948  00000000  00000000  000a8918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003838c  00000000  00000000  000ac260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00047cdb  00000000  00000000  000e45ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001145e8  00000000  00000000  0012c2c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002408af  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00011eb8  00000000  00000000  00240904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  002527bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  00252888  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002bc 	.word	0x200002bc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801cf80 	.word	0x0801cf80

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002c0 	.word	0x200002c0
 80001ec:	0801cf80 	.word	0x0801cf80

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9ef 	b.w	80010c8 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a4 	b.w	80010c8 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	468c      	mov	ip, r1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8083 	bne.w	8000f1a <__udivmoddi4+0x116>
 8000e14:	428a      	cmp	r2, r1
 8000e16:	4617      	mov	r7, r2
 8000e18:	d947      	bls.n	8000eaa <__udivmoddi4+0xa6>
 8000e1a:	fab2 f282 	clz	r2, r2
 8000e1e:	b142      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e20:	f1c2 0020 	rsb	r0, r2, #32
 8000e24:	fa24 f000 	lsr.w	r0, r4, r0
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4097      	lsls	r7, r2
 8000e2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e30:	4094      	lsls	r4, r2
 8000e32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e36:	0c23      	lsrs	r3, r4, #16
 8000e38:	fbbc f6f8 	udiv	r6, ip, r8
 8000e3c:	fa1f fe87 	uxth.w	lr, r7
 8000e40:	fb08 c116 	mls	r1, r8, r6, ip
 8000e44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e48:	fb06 f10e 	mul.w	r1, r6, lr
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x60>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e56:	f080 8119 	bcs.w	800108c <__udivmoddi4+0x288>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 8116 	bls.w	800108c <__udivmoddi4+0x288>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e78:	45a6      	cmp	lr, r4
 8000e7a:	d909      	bls.n	8000e90 <__udivmoddi4+0x8c>
 8000e7c:	193c      	adds	r4, r7, r4
 8000e7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e82:	f080 8105 	bcs.w	8001090 <__udivmoddi4+0x28c>
 8000e86:	45a6      	cmp	lr, r4
 8000e88:	f240 8102 	bls.w	8001090 <__udivmoddi4+0x28c>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	443c      	add	r4, r7
 8000e90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e94:	eba4 040e 	sub.w	r4, r4, lr
 8000e98:	2600      	movs	r6, #0
 8000e9a:	b11d      	cbz	r5, 8000ea4 <__udivmoddi4+0xa0>
 8000e9c:	40d4      	lsrs	r4, r2
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	b902      	cbnz	r2, 8000eae <__udivmoddi4+0xaa>
 8000eac:	deff      	udf	#255	; 0xff
 8000eae:	fab2 f282 	clz	r2, r2
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	d150      	bne.n	8000f58 <__udivmoddi4+0x154>
 8000eb6:	1bcb      	subs	r3, r1, r7
 8000eb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebc:	fa1f f887 	uxth.w	r8, r7
 8000ec0:	2601      	movs	r6, #1
 8000ec2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ec6:	0c21      	lsrs	r1, r4, #16
 8000ec8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0xe4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0xe2>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	f200 80e9 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000ee6:	4684      	mov	ip, r0
 8000ee8:	1ac9      	subs	r1, r1, r3
 8000eea:	b2a3      	uxth	r3, r4
 8000eec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ef8:	fb08 f800 	mul.w	r8, r8, r0
 8000efc:	45a0      	cmp	r8, r4
 8000efe:	d907      	bls.n	8000f10 <__udivmoddi4+0x10c>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x10a>
 8000f08:	45a0      	cmp	r8, r4
 8000f0a:	f200 80d9 	bhi.w	80010c0 <__udivmoddi4+0x2bc>
 8000f0e:	4618      	mov	r0, r3
 8000f10:	eba4 0408 	sub.w	r4, r4, r8
 8000f14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f18:	e7bf      	b.n	8000e9a <__udivmoddi4+0x96>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d909      	bls.n	8000f32 <__udivmoddi4+0x12e>
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	f000 80b1 	beq.w	8001086 <__udivmoddi4+0x282>
 8000f24:	2600      	movs	r6, #0
 8000f26:	e9c5 0100 	strd	r0, r1, [r5]
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	4631      	mov	r1, r6
 8000f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f32:	fab3 f683 	clz	r6, r3
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	d14a      	bne.n	8000fd0 <__udivmoddi4+0x1cc>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d302      	bcc.n	8000f44 <__udivmoddi4+0x140>
 8000f3e:	4282      	cmp	r2, r0
 8000f40:	f200 80b8 	bhi.w	80010b4 <__udivmoddi4+0x2b0>
 8000f44:	1a84      	subs	r4, r0, r2
 8000f46:	eb61 0103 	sbc.w	r1, r1, r3
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	468c      	mov	ip, r1
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	d0a8      	beq.n	8000ea4 <__udivmoddi4+0xa0>
 8000f52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f56:	e7a5      	b.n	8000ea4 <__udivmoddi4+0xa0>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f60:	4097      	lsls	r7, r2
 8000f62:	fa01 f002 	lsl.w	r0, r1, r2
 8000f66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6a:	40d9      	lsrs	r1, r3
 8000f6c:	4330      	orrs	r0, r6
 8000f6e:	0c03      	lsrs	r3, r0, #16
 8000f70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f74:	fa1f f887 	uxth.w	r8, r7
 8000f78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f80:	fb06 f108 	mul.w	r1, r6, r8
 8000f84:	4299      	cmp	r1, r3
 8000f86:	fa04 f402 	lsl.w	r4, r4, r2
 8000f8a:	d909      	bls.n	8000fa0 <__udivmoddi4+0x19c>
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f92:	f080 808d 	bcs.w	80010b0 <__udivmoddi4+0x2ac>
 8000f96:	4299      	cmp	r1, r3
 8000f98:	f240 808a 	bls.w	80010b0 <__udivmoddi4+0x2ac>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	443b      	add	r3, r7
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b281      	uxth	r1, r0
 8000fa4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fa8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb0:	fb00 f308 	mul.w	r3, r0, r8
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	d907      	bls.n	8000fc8 <__udivmoddi4+0x1c4>
 8000fb8:	1879      	adds	r1, r7, r1
 8000fba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fbe:	d273      	bcs.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	d971      	bls.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	4439      	add	r1, r7
 8000fc8:	1acb      	subs	r3, r1, r3
 8000fca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fce:	e778      	b.n	8000ec2 <__udivmoddi4+0xbe>
 8000fd0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fd4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fd8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fdc:	431c      	orrs	r4, r3
 8000fde:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fe2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fe6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fee:	431f      	orrs	r7, r3
 8000ff0:	0c3b      	lsrs	r3, r7, #16
 8000ff2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff6:	fa1f f884 	uxth.w	r8, r4
 8000ffa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001002:	fb09 fa08 	mul.w	sl, r9, r8
 8001006:	458a      	cmp	sl, r1
 8001008:	fa02 f206 	lsl.w	r2, r2, r6
 800100c:	fa00 f306 	lsl.w	r3, r0, r6
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x220>
 8001012:	1861      	adds	r1, r4, r1
 8001014:	f109 30ff 	add.w	r0, r9, #4294967295
 8001018:	d248      	bcs.n	80010ac <__udivmoddi4+0x2a8>
 800101a:	458a      	cmp	sl, r1
 800101c:	d946      	bls.n	80010ac <__udivmoddi4+0x2a8>
 800101e:	f1a9 0902 	sub.w	r9, r9, #2
 8001022:	4421      	add	r1, r4
 8001024:	eba1 010a 	sub.w	r1, r1, sl
 8001028:	b2bf      	uxth	r7, r7
 800102a:	fbb1 f0fe 	udiv	r0, r1, lr
 800102e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001032:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001036:	fb00 f808 	mul.w	r8, r0, r8
 800103a:	45b8      	cmp	r8, r7
 800103c:	d907      	bls.n	800104e <__udivmoddi4+0x24a>
 800103e:	19e7      	adds	r7, r4, r7
 8001040:	f100 31ff 	add.w	r1, r0, #4294967295
 8001044:	d22e      	bcs.n	80010a4 <__udivmoddi4+0x2a0>
 8001046:	45b8      	cmp	r8, r7
 8001048:	d92c      	bls.n	80010a4 <__udivmoddi4+0x2a0>
 800104a:	3802      	subs	r0, #2
 800104c:	4427      	add	r7, r4
 800104e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001052:	eba7 0708 	sub.w	r7, r7, r8
 8001056:	fba0 8902 	umull	r8, r9, r0, r2
 800105a:	454f      	cmp	r7, r9
 800105c:	46c6      	mov	lr, r8
 800105e:	4649      	mov	r1, r9
 8001060:	d31a      	bcc.n	8001098 <__udivmoddi4+0x294>
 8001062:	d017      	beq.n	8001094 <__udivmoddi4+0x290>
 8001064:	b15d      	cbz	r5, 800107e <__udivmoddi4+0x27a>
 8001066:	ebb3 020e 	subs.w	r2, r3, lr
 800106a:	eb67 0701 	sbc.w	r7, r7, r1
 800106e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001072:	40f2      	lsrs	r2, r6
 8001074:	ea4c 0202 	orr.w	r2, ip, r2
 8001078:	40f7      	lsrs	r7, r6
 800107a:	e9c5 2700 	strd	r2, r7, [r5]
 800107e:	2600      	movs	r6, #0
 8001080:	4631      	mov	r1, r6
 8001082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e70b      	b.n	8000ea4 <__udivmoddi4+0xa0>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e9      	b.n	8000e64 <__udivmoddi4+0x60>
 8001090:	4618      	mov	r0, r3
 8001092:	e6fd      	b.n	8000e90 <__udivmoddi4+0x8c>
 8001094:	4543      	cmp	r3, r8
 8001096:	d2e5      	bcs.n	8001064 <__udivmoddi4+0x260>
 8001098:	ebb8 0e02 	subs.w	lr, r8, r2
 800109c:	eb69 0104 	sbc.w	r1, r9, r4
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7df      	b.n	8001064 <__udivmoddi4+0x260>
 80010a4:	4608      	mov	r0, r1
 80010a6:	e7d2      	b.n	800104e <__udivmoddi4+0x24a>
 80010a8:	4660      	mov	r0, ip
 80010aa:	e78d      	b.n	8000fc8 <__udivmoddi4+0x1c4>
 80010ac:	4681      	mov	r9, r0
 80010ae:	e7b9      	b.n	8001024 <__udivmoddi4+0x220>
 80010b0:	4666      	mov	r6, ip
 80010b2:	e775      	b.n	8000fa0 <__udivmoddi4+0x19c>
 80010b4:	4630      	mov	r0, r6
 80010b6:	e74a      	b.n	8000f4e <__udivmoddi4+0x14a>
 80010b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010bc:	4439      	add	r1, r7
 80010be:	e713      	b.n	8000ee8 <__udivmoddi4+0xe4>
 80010c0:	3802      	subs	r0, #2
 80010c2:	443c      	add	r4, r7
 80010c4:	e724      	b.n	8000f10 <__udivmoddi4+0x10c>
 80010c6:	bf00      	nop

080010c8 <__aeabi_idiv0>:
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <println>:
#include <MRT_helpers.h>
#include <MRT_setup.h>
#include <math.h>
#include <tim.h>

void println(char* s){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff f895 	bl	8000204 <strlen>
 80010da:	4603      	mov	r3, r0
 80010dc:	b29a      	uxth	r2, r3
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4806      	ldr	r0, [pc, #24]	; (8001100 <println+0x34>)
 80010e6:	f00e f8a8 	bl	800f23a <HAL_UART_Transmit>
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	2202      	movs	r2, #2
 80010f0:	4904      	ldr	r1, [pc, #16]	; (8001104 <println+0x38>)
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <println+0x34>)
 80010f4:	f00e f8a1 	bl	800f23a <HAL_UART_Transmit>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20005560 	.word	0x20005560
 8001104:	0801cf98 	.word	0x0801cf98

08001108 <print>:

void print(char* s){
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff f877 	bl	8000204 <strlen>
 8001116:	4603      	mov	r3, r0
 8001118:	b29a      	uxth	r2, r3
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	4803      	ldr	r0, [pc, #12]	; (8001130 <print+0x28>)
 8001122:	f00e f88a 	bl	800f23a <HAL_UART_Transmit>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20005560 	.word	0x20005560

08001134 <tone_freq>:

// buzz at particular frequency
void tone_freq(uint32_t duration, uint32_t repeats, uint32_t freq) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
	// TIM2 base frequency is 90 MHz, PSC = 90-1
	// can calculate required ARR value
	TIM2->ARR = 1000000 / freq;
 8001140:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001144:	491c      	ldr	r1, [pc, #112]	; (80011b8 <tone_freq+0x84>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	fbb1 f3f3 	udiv	r3, r1, r3
 800114c:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->EGR |= TIM_EGR_UG;
 800114e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6153      	str	r3, [r2, #20]

	for (uint32_t i = 0; i < repeats; i++) {
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	e01f      	b.n	80011a4 <tone_freq+0x70>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001164:	2108      	movs	r1, #8
 8001166:	4815      	ldr	r0, [pc, #84]	; (80011bc <tone_freq+0x88>)
 8001168:	f00d f888 	bl	800e27c <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, SET);
 800116c:	2201      	movs	r2, #1
 800116e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001172:	4813      	ldr	r0, [pc, #76]	; (80011c0 <tone_freq+0x8c>)
 8001174:	f008 fde6 	bl	8009d44 <HAL_GPIO_WritePin>
		HAL_Delay(duration);
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f008 f875 	bl	8009268 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800117e:	2108      	movs	r1, #8
 8001180:	480e      	ldr	r0, [pc, #56]	; (80011bc <tone_freq+0x88>)
 8001182:	f00d f943 	bl	800e40c <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 7100 	mov.w	r1, #512	; 0x200
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <tone_freq+0x8c>)
 800118e:	f008 fdd9 	bl	8009d44 <HAL_GPIO_WritePin>
		if (repeats > 1)
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d902      	bls.n	800119e <tone_freq+0x6a>
			HAL_Delay(duration);
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f008 f865 	bl	8009268 <HAL_Delay>
	for (uint32_t i = 0; i < repeats; i++) {
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	3301      	adds	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d3db      	bcc.n	8001164 <tone_freq+0x30>
	}
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	000f4240 	.word	0x000f4240
 80011bc:	200054d4 	.word	0x200054d4
 80011c0:	40020400 	.word	0x40020400

080011c4 <MRT_Init>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_Init(void){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Init********/\r\n");
 80011c8:	480a      	ldr	r0, [pc, #40]	; (80011f4 <MRT_Init+0x30>)
 80011ca:	f7ff ff9d 	bl	8001108 <print>

	MRT_Reinitialize_Peripherals();
 80011ce:	f000 f911 	bl	80013f4 <MRT_Reinitialize_Peripherals>
	MRT_external_flash_Init();
 80011d2:	f001 fb87 	bl	80028e4 <MRT_external_flash_Init>
	MRT_reset_info();
 80011d6:	f000 f815 	bl	8001204 <MRT_reset_info>
	print((char*) "OK\r\n");
	#endif

	//RTC
	HAL_IWDG_Refresh(&hiwdg);
	MRT_rtc_Init();
 80011da:	f002 fc5d 	bl	8003a98 <MRT_rtc_Init>
	#if MEMORY_THREAD

		//SD card
		#if SD_CARD_
			HAL_IWDG_Refresh(&hiwdg);
			sd_init_dynamic_filename("FC", "", filename);
 80011de:	4a06      	ldr	r2, [pc, #24]	; (80011f8 <MRT_Init+0x34>)
 80011e0:	4906      	ldr	r1, [pc, #24]	; (80011fc <MRT_Init+0x38>)
 80011e2:	4807      	ldr	r0, [pc, #28]	; (8001200 <MRT_Init+0x3c>)
 80011e4:	f001 fcec 	bl	8002bc0 <sd_init_dynamic_filename>
		  checkForI2CDevices(huart8,hi2c1);
		  checkForI2CDevices(huart8,hi2c2);
		  checkForI2CDevices(huart8,hi2c3);
		#endif

		MRT_i2c_sensors_Init();
 80011e8:	f002 feec 	bl	8003fc4 <MRT_i2c_sensors_Init>
	#endif


	//Telemetry
	#if TELEMETRY_THREAD
		MRT_TELEMETRY_Init();
 80011ec:	f007 ffd8 	bl	80091a0 <MRT_TELEMETRY_Init>
	#endif
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	0801cf9c 	.word	0x0801cf9c
 80011f8:	20005264 	.word	0x20005264
 80011fc:	0801cfc0 	.word	0x0801cfc0
 8001200:	0801cfc4 	.word	0x0801cfc4

08001204 <MRT_reset_info>:

//**************************************************//
//PRIVATE FUNCTIONS


void MRT_reset_info(void){
 8001204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001206:	b0a7      	sub	sp, #156	; 0x9c
 8001208:	af04      	add	r7, sp, #16

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i\r\n",reset_flag, wu_flag, iwdg_flag, prev_hours, prev_min, prev_sec);
 800120a:	4b62      	ldr	r3, [pc, #392]	; (8001394 <MRT_reset_info+0x190>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	461d      	mov	r5, r3
 8001210:	4b61      	ldr	r3, [pc, #388]	; (8001398 <MRT_reset_info+0x194>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461e      	mov	r6, r3
 8001216:	4b61      	ldr	r3, [pc, #388]	; (800139c <MRT_reset_info+0x198>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	4b60      	ldr	r3, [pc, #384]	; (80013a0 <MRT_reset_info+0x19c>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4619      	mov	r1, r3
 8001222:	4b60      	ldr	r3, [pc, #384]	; (80013a4 <MRT_reset_info+0x1a0>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461c      	mov	r4, r3
 8001228:	4b5f      	ldr	r3, [pc, #380]	; (80013a8 <MRT_reset_info+0x1a4>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	f107 0020 	add.w	r0, r7, #32
 8001230:	9303      	str	r3, [sp, #12]
 8001232:	9402      	str	r4, [sp, #8]
 8001234:	9101      	str	r1, [sp, #4]
 8001236:	9200      	str	r2, [sp, #0]
 8001238:	4633      	mov	r3, r6
 800123a:	462a      	mov	r2, r5
 800123c:	495b      	ldr	r1, [pc, #364]	; (80013ac <MRT_reset_info+0x1a8>)
 800123e:	f017 fa9b 	bl	8018778 <siprintf>
	  print(buffer);
 8001242:	f107 0320 	add.w	r3, r7, #32
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ff5e 	bl	8001108 <print>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 800124c:	4b53      	ldr	r3, [pc, #332]	; (800139c <MRT_reset_info+0x198>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d11a      	bne.n	800128a <MRT_reset_info+0x86>
		  print((char*) "Deactivating IWDG\r\n");
 8001254:	4856      	ldr	r0, [pc, #344]	; (80013b0 <MRT_reset_info+0x1ac>)
 8001256:	f7ff ff57 	bl	8001108 <print>

		  iwdg_flag = 0; //Flip flag
 800125a:	4b50      	ldr	r3, [pc, #320]	; (800139c <MRT_reset_info+0x198>)
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
		  flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8001260:	4b4e      	ldr	r3, [pc, #312]	; (800139c <MRT_reset_info+0x198>)
 8001262:	781a      	ldrb	r2, [r3, #0]
 8001264:	4b53      	ldr	r3, [pc, #332]	; (80013b4 <MRT_reset_info+0x1b0>)
 8001266:	709a      	strb	r2, [r3, #2]
		  W25qxx_EraseSector(1);
 8001268:	2001      	movs	r0, #1
 800126a:	f002 f911 	bl	8003490 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 800126e:	2305      	movs	r3, #5
 8001270:	2200      	movs	r2, #0
 8001272:	2101      	movs	r1, #1
 8001274:	484f      	ldr	r0, [pc, #316]	; (80013b4 <MRT_reset_info+0x1b0>)
 8001276:	f002 fa55 	bl	8003724 <W25qxx_WriteSector>

		  HAL_Delay(1000);
 800127a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800127e:	f007 fff3 	bl	8009268 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 8001282:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 8001286:	f002 fcc9 	bl	8003c1c <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag>0){
 800128a:	4b43      	ldr	r3, [pc, #268]	; (8001398 <MRT_reset_info+0x194>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d02b      	beq.n	80012ea <MRT_reset_info+0xe6>
		  char buf[30];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 8001292:	4b41      	ldr	r3, [pc, #260]	; (8001398 <MRT_reset_info+0x194>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	463b      	mov	r3, r7
 800129a:	4947      	ldr	r1, [pc, #284]	; (80013b8 <MRT_reset_info+0x1b4>)
 800129c:	4618      	mov	r0, r3
 800129e:	f017 fa6b 	bl	8018778 <siprintf>
		  print(buf);
 80012a2:	463b      	mov	r3, r7
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff2f 	bl	8001108 <print>

		  print((char*) "Resetting RTC time\r\n");
 80012aa:	4844      	ldr	r0, [pc, #272]	; (80013bc <MRT_reset_info+0x1b8>)
 80012ac:	f7ff ff2c 	bl	8001108 <print>

		  //Clear RTC time (last recorded)
		  W25qxx_EraseSector(2);
 80012b0:	2002      	movs	r0, #2
 80012b2:	f002 f8ed 	bl	8003490 <W25qxx_EraseSector>
		  W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 80012b6:	2303      	movs	r3, #3
 80012b8:	2200      	movs	r2, #0
 80012ba:	2102      	movs	r1, #2
 80012bc:	4840      	ldr	r0, [pc, #256]	; (80013c0 <MRT_reset_info+0x1bc>)
 80012be:	f002 fa31 	bl	8003724 <W25qxx_WriteSector>

		  //Update variables (to 0)
		  for (int i = 0; i < 3; i++){
 80012c2:	2300      	movs	r3, #0
 80012c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80012c8:	e00b      	b.n	80012e2 <MRT_reset_info+0xde>
			  *flash_time[i] = 0x0;
 80012ca:	4a3e      	ldr	r2, [pc, #248]	; (80013c4 <MRT_reset_info+0x1c0>)
 80012cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 3; i++){
 80012d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012dc:	3301      	adds	r3, #1
 80012de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80012e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	ddef      	ble.n	80012ca <MRT_reset_info+0xc6>

	  }


	  //Check if we start from the beginning
	  if (reset_flag==0){
 80012ea:	4b2a      	ldr	r3, [pc, #168]	; (8001394 <MRT_reset_info+0x190>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d112      	bne.n	8001318 <MRT_reset_info+0x114>
		  print((char*) "FC restarted\r\n");
 80012f2:	4835      	ldr	r0, [pc, #212]	; (80013c8 <MRT_reset_info+0x1c4>)
 80012f4:	f7ff ff08 	bl	8001108 <print>

		  reset_flag = 1; //Flip flag
 80012f8:	4b26      	ldr	r3, [pc, #152]	; (8001394 <MRT_reset_info+0x190>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
	      flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 80012fe:	4b25      	ldr	r3, [pc, #148]	; (8001394 <MRT_reset_info+0x190>)
 8001300:	781a      	ldrb	r2, [r3, #0]
 8001302:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <MRT_reset_info+0x1b0>)
 8001304:	701a      	strb	r2, [r3, #0]
		  W25qxx_EraseSector(1);
 8001306:	2001      	movs	r0, #1
 8001308:	f002 f8c2 	bl	8003490 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 800130c:	2305      	movs	r3, #5
 800130e:	2200      	movs	r2, #0
 8001310:	2101      	movs	r1, #1
 8001312:	4828      	ldr	r0, [pc, #160]	; (80013b4 <MRT_reset_info+0x1b0>)
 8001314:	f002 fa06 	bl	8003724 <W25qxx_WriteSector>
	  }


	  //Check if before or after apogee
	  if (apogee_flag == 0){
 8001318:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <MRT_reset_info+0x1c8>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d103      	bne.n	8001328 <MRT_reset_info+0x124>
		  print((char*) "Pre-apogee\r\n");
 8001320:	482b      	ldr	r0, [pc, #172]	; (80013d0 <MRT_reset_info+0x1cc>)
 8001322:	f7ff fef1 	bl	8001108 <print>
 8001326:	e006      	b.n	8001336 <MRT_reset_info+0x132>
	  }
	  else if(apogee_flag==1){
 8001328:	4b28      	ldr	r3, [pc, #160]	; (80013cc <MRT_reset_info+0x1c8>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d102      	bne.n	8001336 <MRT_reset_info+0x132>
		  print((char*) "Post-apogee\r\n");
 8001330:	4828      	ldr	r0, [pc, #160]	; (80013d4 <MRT_reset_info+0x1d0>)
 8001332:	f7ff fee9 	bl	8001108 <print>
	  }


	  //Check ejection stage
	  print((char*)"Ejection Stage: ");
 8001336:	4828      	ldr	r0, [pc, #160]	; (80013d8 <MRT_reset_info+0x1d4>)
 8001338:	f7ff fee6 	bl	8001108 <print>
	  if (ejection_state_flag==0){
 800133c:	4b27      	ldr	r3, [pc, #156]	; (80013dc <MRT_reset_info+0x1d8>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d103      	bne.n	800134c <MRT_reset_info+0x148>
		  print((char*)"Pad\r\n");
 8001344:	4826      	ldr	r0, [pc, #152]	; (80013e0 <MRT_reset_info+0x1dc>)
 8001346:	f7ff fedf 	bl	8001108 <print>
		  print((char*)"Main descent\r\n");
	  }
	  else if(ejection_state_flag==4){
		  print((char*)"Landed\r\n");
	  }
}
 800134a:	e01e      	b.n	800138a <MRT_reset_info+0x186>
	  else if(ejection_state_flag==1){
 800134c:	4b23      	ldr	r3, [pc, #140]	; (80013dc <MRT_reset_info+0x1d8>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d103      	bne.n	800135c <MRT_reset_info+0x158>
		  print((char*)"Boost\r\n");
 8001354:	4823      	ldr	r0, [pc, #140]	; (80013e4 <MRT_reset_info+0x1e0>)
 8001356:	f7ff fed7 	bl	8001108 <print>
}
 800135a:	e016      	b.n	800138a <MRT_reset_info+0x186>
	  else if(ejection_state_flag==2){
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <MRT_reset_info+0x1d8>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d103      	bne.n	800136c <MRT_reset_info+0x168>
		  print((char*)"Drogue descent\r\n");
 8001364:	4820      	ldr	r0, [pc, #128]	; (80013e8 <MRT_reset_info+0x1e4>)
 8001366:	f7ff fecf 	bl	8001108 <print>
}
 800136a:	e00e      	b.n	800138a <MRT_reset_info+0x186>
	  else if(ejection_state_flag==3){
 800136c:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <MRT_reset_info+0x1d8>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b03      	cmp	r3, #3
 8001372:	d103      	bne.n	800137c <MRT_reset_info+0x178>
		  print((char*)"Main descent\r\n");
 8001374:	481d      	ldr	r0, [pc, #116]	; (80013ec <MRT_reset_info+0x1e8>)
 8001376:	f7ff fec7 	bl	8001108 <print>
}
 800137a:	e006      	b.n	800138a <MRT_reset_info+0x186>
	  else if(ejection_state_flag==4){
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <MRT_reset_info+0x1d8>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b04      	cmp	r3, #4
 8001382:	d102      	bne.n	800138a <MRT_reset_info+0x186>
		  print((char*)"Landed\r\n");
 8001384:	481a      	ldr	r0, [pc, #104]	; (80013f0 <MRT_reset_info+0x1ec>)
 8001386:	f7ff febf 	bl	8001108 <print>
}
 800138a:	bf00      	nop
 800138c:	378c      	adds	r7, #140	; 0x8c
 800138e:	46bd      	mov	sp, r7
 8001390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001392:	bf00      	nop
 8001394:	200002d8 	.word	0x200002d8
 8001398:	200002d9 	.word	0x200002d9
 800139c:	200002da 	.word	0x200002da
 80013a0:	200002dd 	.word	0x200002dd
 80013a4:	200002de 	.word	0x200002de
 80013a8:	200002df 	.word	0x200002df
 80013ac:	0801cfec 	.word	0x0801cfec
 80013b0:	0801d02c 	.word	0x0801d02c
 80013b4:	200055f0 	.word	0x200055f0
 80013b8:	0801d040 	.word	0x0801d040
 80013bc:	0801d050 	.word	0x0801d050
 80013c0:	200002e0 	.word	0x200002e0
 80013c4:	20000018 	.word	0x20000018
 80013c8:	0801d068 	.word	0x0801d068
 80013cc:	200002db 	.word	0x200002db
 80013d0:	0801d078 	.word	0x0801d078
 80013d4:	0801d088 	.word	0x0801d088
 80013d8:	0801d098 	.word	0x0801d098
 80013dc:	200002dc 	.word	0x200002dc
 80013e0:	0801d0ac 	.word	0x0801d0ac
 80013e4:	0801d0b4 	.word	0x0801d0b4
 80013e8:	0801d0bc 	.word	0x0801d0bc
 80013ec:	0801d0d0 	.word	0x0801d0d0
 80013f0:	0801d0e0 	.word	0x0801d0e0

080013f4 <MRT_Reinitialize_Peripherals>:


void MRT_Reinitialize_Peripherals(void){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	  /*
	   * Reinitialize all peripherals
	   */

	  print((char*)"Reinitializing Peripherals...");
 80013f8:	482f      	ldr	r0, [pc, #188]	; (80014b8 <MRT_Reinitialize_Peripherals+0xc4>)
 80013fa:	f7ff fe85 	bl	8001108 <print>

	  // reset LEDs
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	2102      	movs	r1, #2
 8001402:	482e      	ldr	r0, [pc, #184]	; (80014bc <MRT_Reinitialize_Peripherals+0xc8>)
 8001404:	f008 fc9e 	bl	8009d44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	2104      	movs	r1, #4
 800140c:	482b      	ldr	r0, [pc, #172]	; (80014bc <MRT_Reinitialize_Peripherals+0xc8>)
 800140e:	f008 fc99 	bl	8009d44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2108      	movs	r1, #8
 8001416:	4829      	ldr	r0, [pc, #164]	; (80014bc <MRT_Reinitialize_Peripherals+0xc8>)
 8001418:	f008 fc94 	bl	8009d44 <HAL_GPIO_WritePin>

	  // reset recovery pyro pins
	  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 800141c:	2201      	movs	r2, #1
 800141e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001422:	4827      	ldr	r0, [pc, #156]	; (80014c0 <MRT_Reinitialize_Peripherals+0xcc>)
 8001424:	f008 fc8e 	bl	8009d44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 8001428:	2200      	movs	r2, #0
 800142a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800142e:	4824      	ldr	r0, [pc, #144]	; (80014c0 <MRT_Reinitialize_Peripherals+0xcc>)
 8001430:	f008 fc88 	bl	8009d44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800143a:	4821      	ldr	r0, [pc, #132]	; (80014c0 <MRT_Reinitialize_Peripherals+0xcc>)
 800143c:	f008 fc82 	bl	8009d44 <HAL_GPIO_WritePin>

	  // reset prop pyro pins
	  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 8001440:	2201      	movs	r2, #1
 8001442:	2102      	movs	r1, #2
 8001444:	481e      	ldr	r0, [pc, #120]	; (80014c0 <MRT_Reinitialize_Peripherals+0xcc>)
 8001446:	f008 fc7d 	bl	8009d44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 800144a:	2200      	movs	r2, #0
 800144c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001450:	481c      	ldr	r0, [pc, #112]	; (80014c4 <MRT_Reinitialize_Peripherals+0xd0>)
 8001452:	f008 fc77 	bl	8009d44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 8001456:	2200      	movs	r2, #0
 8001458:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800145c:	4819      	ldr	r0, [pc, #100]	; (80014c4 <MRT_Reinitialize_Peripherals+0xd0>)
 800145e:	f008 fc71 	bl	8009d44 <HAL_GPIO_WritePin>

	  // reset 12 V buck converter enable pin (disable converter)
	  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 8001462:	2200      	movs	r2, #0
 8001464:	2104      	movs	r1, #4
 8001466:	4818      	ldr	r0, [pc, #96]	; (80014c8 <MRT_Reinitialize_Peripherals+0xd4>)
 8001468:	f008 fc6c 	bl	8009d44 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
	  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


	  // reset payload EN signal
	  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 800146c:	2200      	movs	r2, #0
 800146e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001472:	4815      	ldr	r0, [pc, #84]	; (80014c8 <MRT_Reinitialize_Peripherals+0xd4>)
 8001474:	f008 fc66 	bl	8009d44 <HAL_GPIO_WritePin>

	  // set CS pin for thermocouple chip high
	  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

	  // set power off for VR
	  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 8001478:	2200      	movs	r2, #0
 800147a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800147e:	4810      	ldr	r0, [pc, #64]	; (80014c0 <MRT_Reinitialize_Peripherals+0xcc>)
 8001480:	f008 fc60 	bl	8009d44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 8001484:	2200      	movs	r2, #0
 8001486:	2180      	movs	r1, #128	; 0x80
 8001488:	4810      	ldr	r0, [pc, #64]	; (80014cc <MRT_Reinitialize_Peripherals+0xd8>)
 800148a:	f008 fc5b 	bl	8009d44 <HAL_GPIO_WritePin>

	  // FLASH set CS, WP and IO3 pins high
	  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 800148e:	2201      	movs	r2, #1
 8001490:	2140      	movs	r1, #64	; 0x40
 8001492:	480e      	ldr	r0, [pc, #56]	; (80014cc <MRT_Reinitialize_Peripherals+0xd8>)
 8001494:	f008 fc56 	bl	8009d44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 8001498:	2201      	movs	r2, #1
 800149a:	2120      	movs	r1, #32
 800149c:	480b      	ldr	r0, [pc, #44]	; (80014cc <MRT_Reinitialize_Peripherals+0xd8>)
 800149e:	f008 fc51 	bl	8009d44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 80014a2:	2201      	movs	r2, #1
 80014a4:	2110      	movs	r1, #16
 80014a6:	4809      	ldr	r0, [pc, #36]	; (80014cc <MRT_Reinitialize_Peripherals+0xd8>)
 80014a8:	f008 fc4c 	bl	8009d44 <HAL_GPIO_WritePin>

	  print((char*)"OK\r\n");
 80014ac:	4808      	ldr	r0, [pc, #32]	; (80014d0 <MRT_Reinitialize_Peripherals+0xdc>)
 80014ae:	f7ff fe2b 	bl	8001108 <print>
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	0801d0ec 	.word	0x0801d0ec
 80014bc:	40020800 	.word	0x40020800
 80014c0:	40021800 	.word	0x40021800
 80014c4:	40021400 	.word	0x40021400
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40020c00 	.word	0x40020c00
 80014d0:	0801d10c 	.word	0x0801d10c

080014d4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014da:	463b      	mov	r3, r7
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014e6:	4b21      	ldr	r3, [pc, #132]	; (800156c <MX_ADC1_Init+0x98>)
 80014e8:	4a21      	ldr	r2, [pc, #132]	; (8001570 <MX_ADC1_Init+0x9c>)
 80014ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <MX_ADC1_Init+0x98>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014f2:	4b1e      	ldr	r3, [pc, #120]	; (800156c <MX_ADC1_Init+0x98>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014f8:	4b1c      	ldr	r3, [pc, #112]	; (800156c <MX_ADC1_Init+0x98>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014fe:	4b1b      	ldr	r3, [pc, #108]	; (800156c <MX_ADC1_Init+0x98>)
 8001500:	2200      	movs	r2, #0
 8001502:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <MX_ADC1_Init+0x98>)
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <MX_ADC1_Init+0x98>)
 800150e:	2200      	movs	r2, #0
 8001510:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <MX_ADC1_Init+0x98>)
 8001514:	4a17      	ldr	r2, [pc, #92]	; (8001574 <MX_ADC1_Init+0xa0>)
 8001516:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <MX_ADC1_Init+0x98>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <MX_ADC1_Init+0x98>)
 8001520:	2201      	movs	r2, #1
 8001522:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_ADC1_Init+0x98>)
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <MX_ADC1_Init+0x98>)
 800152e:	2201      	movs	r2, #1
 8001530:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001532:	480e      	ldr	r0, [pc, #56]	; (800156c <MX_ADC1_Init+0x98>)
 8001534:	f007 febc 	bl	80092b0 <HAL_ADC_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800153e:	f000 fcb7 	bl	8001eb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001542:	2306      	movs	r3, #6
 8001544:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001546:	2301      	movs	r3, #1
 8001548:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800154e:	463b      	mov	r3, r7
 8001550:	4619      	mov	r1, r3
 8001552:	4806      	ldr	r0, [pc, #24]	; (800156c <MX_ADC1_Init+0x98>)
 8001554:	f007 fef0 	bl	8009338 <HAL_ADC_ConfigChannel>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800155e:	f000 fca7 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20005274 	.word	0x20005274
 8001570:	40012000 	.word	0x40012000
 8001574:	0f000001 	.word	0x0f000001

08001578 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <HAL_ADC_MspInit+0x7c>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d127      	bne.n	80015ea <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <HAL_ADC_MspInit+0x80>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	4a15      	ldr	r2, [pc, #84]	; (80015f8 <HAL_ADC_MspInit+0x80>)
 80015a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a8:	6453      	str	r3, [r2, #68]	; 0x44
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <HAL_ADC_MspInit+0x80>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <HAL_ADC_MspInit+0x80>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a0e      	ldr	r2, [pc, #56]	; (80015f8 <HAL_ADC_MspInit+0x80>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <HAL_ADC_MspInit+0x80>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 80015d2:	2340      	movs	r3, #64	; 0x40
 80015d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d6:	2303      	movs	r3, #3
 80015d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	4619      	mov	r1, r3
 80015e4:	4805      	ldr	r0, [pc, #20]	; (80015fc <HAL_ADC_MspInit+0x84>)
 80015e6:	f008 f9e9 	bl	80099bc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80015ea:	bf00      	nop
 80015ec:	3728      	adds	r7, #40	; 0x28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40012000 	.word	0x40012000
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020000 	.word	0x40020000

08001600 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08e      	sub	sp, #56	; 0x38
 8001604:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
 800161a:	4bb5      	ldr	r3, [pc, #724]	; (80018f0 <MX_GPIO_Init+0x2f0>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4ab4      	ldr	r2, [pc, #720]	; (80018f0 <MX_GPIO_Init+0x2f0>)
 8001620:	f043 0310 	orr.w	r3, r3, #16
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4bb2      	ldr	r3, [pc, #712]	; (80018f0 <MX_GPIO_Init+0x2f0>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0310 	and.w	r3, r3, #16
 800162e:	623b      	str	r3, [r7, #32]
 8001630:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	4bae      	ldr	r3, [pc, #696]	; (80018f0 <MX_GPIO_Init+0x2f0>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4aad      	ldr	r2, [pc, #692]	; (80018f0 <MX_GPIO_Init+0x2f0>)
 800163c:	f043 0304 	orr.w	r3, r3, #4
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4bab      	ldr	r3, [pc, #684]	; (80018f0 <MX_GPIO_Init+0x2f0>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	61fb      	str	r3, [r7, #28]
 800164c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
 8001652:	4ba7      	ldr	r3, [pc, #668]	; (80018f0 <MX_GPIO_Init+0x2f0>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4aa6      	ldr	r2, [pc, #664]	; (80018f0 <MX_GPIO_Init+0x2f0>)
 8001658:	f043 0320 	orr.w	r3, r3, #32
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4ba4      	ldr	r3, [pc, #656]	; (80018f0 <MX_GPIO_Init+0x2f0>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0320 	and.w	r3, r3, #32
 8001666:	61bb      	str	r3, [r7, #24]
 8001668:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	4ba0      	ldr	r3, [pc, #640]	; (80018f0 <MX_GPIO_Init+0x2f0>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a9f      	ldr	r2, [pc, #636]	; (80018f0 <MX_GPIO_Init+0x2f0>)
 8001674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b9d      	ldr	r3, [pc, #628]	; (80018f0 <MX_GPIO_Init+0x2f0>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	4b99      	ldr	r3, [pc, #612]	; (80018f0 <MX_GPIO_Init+0x2f0>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a98      	ldr	r2, [pc, #608]	; (80018f0 <MX_GPIO_Init+0x2f0>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b96      	ldr	r3, [pc, #600]	; (80018f0 <MX_GPIO_Init+0x2f0>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	4b92      	ldr	r3, [pc, #584]	; (80018f0 <MX_GPIO_Init+0x2f0>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a91      	ldr	r2, [pc, #580]	; (80018f0 <MX_GPIO_Init+0x2f0>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b8f      	ldr	r3, [pc, #572]	; (80018f0 <MX_GPIO_Init+0x2f0>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	4b8b      	ldr	r3, [pc, #556]	; (80018f0 <MX_GPIO_Init+0x2f0>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a8a      	ldr	r2, [pc, #552]	; (80018f0 <MX_GPIO_Init+0x2f0>)
 80016c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b88      	ldr	r3, [pc, #544]	; (80018f0 <MX_GPIO_Init+0x2f0>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	4b84      	ldr	r3, [pc, #528]	; (80018f0 <MX_GPIO_Init+0x2f0>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a83      	ldr	r2, [pc, #524]	; (80018f0 <MX_GPIO_Init+0x2f0>)
 80016e4:	f043 0308 	orr.w	r3, r3, #8
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b81      	ldr	r3, [pc, #516]	; (80018f0 <MX_GPIO_Init+0x2f0>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	f248 4184 	movw	r1, #33924	; 0x8484
 80016fc:	487d      	ldr	r0, [pc, #500]	; (80018f4 <MX_GPIO_Init+0x2f4>)
 80016fe:	f008 fb21 	bl	8009d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 8001702:	2200      	movs	r2, #0
 8001704:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8001708:	487b      	ldr	r0, [pc, #492]	; (80018f8 <MX_GPIO_Init+0x2f8>)
 800170a:	f008 fb1b 	bl	8009d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001714:	4879      	ldr	r0, [pc, #484]	; (80018fc <MX_GPIO_Init+0x2fc>)
 8001716:	f008 fb15 	bl	8009d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	2108      	movs	r1, #8
 800171e:	4878      	ldr	r0, [pc, #480]	; (8001900 <MX_GPIO_Init+0x300>)
 8001720:	f008 fb10 	bl	8009d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8001724:	2200      	movs	r2, #0
 8001726:	f645 2126 	movw	r1, #23078	; 0x5a26
 800172a:	4876      	ldr	r0, [pc, #472]	; (8001904 <MX_GPIO_Init+0x304>)
 800172c:	f008 fb0a 	bl	8009d44 <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8001736:	4874      	ldr	r0, [pc, #464]	; (8001908 <MX_GPIO_Init+0x308>)
 8001738:	f008 fb04 	bl	8009d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 800173c:	2200      	movs	r2, #0
 800173e:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 8001742:	4872      	ldr	r0, [pc, #456]	; (800190c <MX_GPIO_Init+0x30c>)
 8001744:	f008 fafe 	bl	8009d44 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 8001748:	f248 4384 	movw	r3, #33924	; 0x8484
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174e:	2301      	movs	r3, #1
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800175a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175e:	4619      	mov	r1, r3
 8001760:	4864      	ldr	r0, [pc, #400]	; (80018f4 <MX_GPIO_Init+0x2f4>)
 8001762:	f008 f92b 	bl	80099bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 8001766:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177c:	4619      	mov	r1, r3
 800177e:	485e      	ldr	r0, [pc, #376]	; (80018f8 <MX_GPIO_Init+0x2f8>)
 8001780:	f008 f91c 	bl	80099bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8001784:	2301      	movs	r3, #1
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001788:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800178c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 8001792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001796:	4619      	mov	r1, r3
 8001798:	4858      	ldr	r0, [pc, #352]	; (80018fc <MX_GPIO_Init+0x2fc>)
 800179a:	f008 f90f 	bl	80099bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 800179e:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b4:	4619      	mov	r1, r3
 80017b6:	4851      	ldr	r0, [pc, #324]	; (80018fc <MX_GPIO_Init+0x2fc>)
 80017b8:	f008 f900 	bl	80099bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 80017bc:	2308      	movs	r3, #8
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d0:	4619      	mov	r1, r3
 80017d2:	484b      	ldr	r0, [pc, #300]	; (8001900 <MX_GPIO_Init+0x300>)
 80017d4:	f008 f8f2 	bl	80099bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 80017d8:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017de:	2300      	movs	r3, #0
 80017e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ea:	4619      	mov	r1, r3
 80017ec:	4843      	ldr	r0, [pc, #268]	; (80018fc <MX_GPIO_Init+0x2fc>)
 80017ee:	f008 f8e5 	bl	80099bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 80017f2:	2302      	movs	r3, #2
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 80017fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001802:	4619      	mov	r1, r3
 8001804:	4840      	ldr	r0, [pc, #256]	; (8001908 <MX_GPIO_Init+0x308>)
 8001806:	f008 f8d9 	bl	80099bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 800180a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001810:	2300      	movs	r3, #0
 8001812:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8001818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181c:	4619      	mov	r1, r3
 800181e:	4836      	ldr	r0, [pc, #216]	; (80018f8 <MX_GPIO_Init+0x2f8>)
 8001820:	f008 f8cc 	bl	80099bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 8001824:	f242 4319 	movw	r3, #9241	; 0x2419
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182a:	2300      	movs	r3, #0
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001836:	4619      	mov	r1, r3
 8001838:	4832      	ldr	r0, [pc, #200]	; (8001904 <MX_GPIO_Init+0x304>)
 800183a:	f008 f8bf 	bl	80099bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 800183e:	f645 2326 	movw	r3, #23078	; 0x5a26
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001844:	2301      	movs	r3, #1
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001854:	4619      	mov	r1, r3
 8001856:	482b      	ldr	r0, [pc, #172]	; (8001904 <MX_GPIO_Init+0x304>)
 8001858:	f008 f8b0 	bl	80099bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 800185c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001862:	2300      	movs	r3, #0
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800186a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186e:	4619      	mov	r1, r3
 8001870:	4820      	ldr	r0, [pc, #128]	; (80018f4 <MX_GPIO_Init+0x2f4>)
 8001872:	f008 f8a3 	bl	80099bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB8 PBPin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin;
 8001876:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187c:	2301      	movs	r3, #1
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188c:	4619      	mov	r1, r3
 800188e:	481e      	ldr	r0, [pc, #120]	; (8001908 <MX_GPIO_Init+0x308>)
 8001890:	f008 f894 	bl	80099bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001894:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189a:	2301      	movs	r3, #1
 800189c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018aa:	4619      	mov	r1, r3
 80018ac:	4817      	ldr	r0, [pc, #92]	; (800190c <MX_GPIO_Init+0x30c>)
 80018ae:	f008 f885 	bl	80099bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 80018b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b8:	2300      	movs	r3, #0
 80018ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 80018c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c4:	4619      	mov	r1, r3
 80018c6:	4811      	ldr	r0, [pc, #68]	; (800190c <MX_GPIO_Init+0x30c>)
 80018c8:	f008 f878 	bl	80099bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 80018cc:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e0:	4619      	mov	r1, r3
 80018e2:	4808      	ldr	r0, [pc, #32]	; (8001904 <MX_GPIO_Init+0x304>)
 80018e4:	f008 f86a 	bl	80099bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2105      	movs	r1, #5
 80018ec:	2006      	movs	r0, #6
 80018ee:	e00f      	b.n	8001910 <MX_GPIO_Init+0x310>
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40021400 	.word	0x40021400
 80018fc:	40020800 	.word	0x40020800
 8001900:	40020000 	.word	0x40020000
 8001904:	40021800 	.word	0x40021800
 8001908:	40020400 	.word	0x40020400
 800190c:	40020c00 	.word	0x40020c00
 8001910:	f008 f81c 	bl	800994c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001914:	2006      	movs	r0, #6
 8001916:	f008 f835 	bl	8009984 <HAL_NVIC_EnableIRQ>

}
 800191a:	bf00      	nop
 800191c:	3738      	adds	r7, #56	; 0x38
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop

08001924 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001928:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <MX_I2C2_Init+0x74>)
 800192a:	4a1c      	ldr	r2, [pc, #112]	; (800199c <MX_I2C2_Init+0x78>)
 800192c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800192e:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <MX_I2C2_Init+0x74>)
 8001930:	4a1b      	ldr	r2, [pc, #108]	; (80019a0 <MX_I2C2_Init+0x7c>)
 8001932:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001934:	4b18      	ldr	r3, [pc, #96]	; (8001998 <MX_I2C2_Init+0x74>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <MX_I2C2_Init+0x74>)
 800193c:	2200      	movs	r2, #0
 800193e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001940:	4b15      	ldr	r3, [pc, #84]	; (8001998 <MX_I2C2_Init+0x74>)
 8001942:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001946:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <MX_I2C2_Init+0x74>)
 800194a:	2200      	movs	r2, #0
 800194c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <MX_I2C2_Init+0x74>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001954:	4b10      	ldr	r3, [pc, #64]	; (8001998 <MX_I2C2_Init+0x74>)
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <MX_I2C2_Init+0x74>)
 800195c:	2200      	movs	r2, #0
 800195e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001960:	480d      	ldr	r0, [pc, #52]	; (8001998 <MX_I2C2_Init+0x74>)
 8001962:	f008 fa2d 	bl	8009dc0 <HAL_I2C_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800196c:	f000 faa0 	bl	8001eb0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001970:	2100      	movs	r1, #0
 8001972:	4809      	ldr	r0, [pc, #36]	; (8001998 <MX_I2C2_Init+0x74>)
 8001974:	f009 fa19 	bl	800adaa <HAL_I2CEx_ConfigAnalogFilter>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800197e:	f000 fa97 	bl	8001eb0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001982:	2100      	movs	r1, #0
 8001984:	4804      	ldr	r0, [pc, #16]	; (8001998 <MX_I2C2_Init+0x74>)
 8001986:	f009 fa4c 	bl	800ae22 <HAL_I2CEx_ConfigDigitalFilter>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001990:	f000 fa8e 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20005310 	.word	0x20005310
 800199c:	40005800 	.word	0x40005800
 80019a0:	000186a0 	.word	0x000186a0

080019a4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80019a8:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <MX_I2C3_Init+0x74>)
 80019aa:	4a1c      	ldr	r2, [pc, #112]	; (8001a1c <MX_I2C3_Init+0x78>)
 80019ac:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80019ae:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <MX_I2C3_Init+0x74>)
 80019b0:	4a1b      	ldr	r2, [pc, #108]	; (8001a20 <MX_I2C3_Init+0x7c>)
 80019b2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019b4:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <MX_I2C3_Init+0x74>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80019ba:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <MX_I2C3_Init+0x74>)
 80019bc:	2200      	movs	r2, #0
 80019be:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c0:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <MX_I2C3_Init+0x74>)
 80019c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019c6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c8:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <MX_I2C3_Init+0x74>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <MX_I2C3_Init+0x74>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d4:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <MX_I2C3_Init+0x74>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019da:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <MX_I2C3_Init+0x74>)
 80019dc:	2200      	movs	r2, #0
 80019de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80019e0:	480d      	ldr	r0, [pc, #52]	; (8001a18 <MX_I2C3_Init+0x74>)
 80019e2:	f008 f9ed 	bl	8009dc0 <HAL_I2C_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80019ec:	f000 fa60 	bl	8001eb0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019f0:	2100      	movs	r1, #0
 80019f2:	4809      	ldr	r0, [pc, #36]	; (8001a18 <MX_I2C3_Init+0x74>)
 80019f4:	f009 f9d9 	bl	800adaa <HAL_I2CEx_ConfigAnalogFilter>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80019fe:	f000 fa57 	bl	8001eb0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001a02:	2100      	movs	r1, #0
 8001a04:	4804      	ldr	r0, [pc, #16]	; (8001a18 <MX_I2C3_Init+0x74>)
 8001a06:	f009 fa0c 	bl	800ae22 <HAL_I2CEx_ConfigDigitalFilter>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001a10:	f000 fa4e 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	200052bc 	.word	0x200052bc
 8001a1c:	40005c00 	.word	0x40005c00
 8001a20:	000186a0 	.word	0x000186a0

08001a24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08c      	sub	sp, #48	; 0x30
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a42      	ldr	r2, [pc, #264]	; (8001b4c <HAL_I2C_MspInit+0x128>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d12d      	bne.n	8001aa2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
 8001a4a:	4b41      	ldr	r3, [pc, #260]	; (8001b50 <HAL_I2C_MspInit+0x12c>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a40      	ldr	r2, [pc, #256]	; (8001b50 <HAL_I2C_MspInit+0x12c>)
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b3e      	ldr	r3, [pc, #248]	; (8001b50 <HAL_I2C_MspInit+0x12c>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	61bb      	str	r3, [r7, #24]
 8001a60:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a68:	2312      	movs	r3, #18
 8001a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a70:	2303      	movs	r3, #3
 8001a72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a74:	2304      	movs	r3, #4
 8001a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4835      	ldr	r0, [pc, #212]	; (8001b54 <HAL_I2C_MspInit+0x130>)
 8001a80:	f007 ff9c 	bl	80099bc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	4b31      	ldr	r3, [pc, #196]	; (8001b50 <HAL_I2C_MspInit+0x12c>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	4a30      	ldr	r2, [pc, #192]	; (8001b50 <HAL_I2C_MspInit+0x12c>)
 8001a8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a92:	6413      	str	r3, [r2, #64]	; 0x40
 8001a94:	4b2e      	ldr	r3, [pc, #184]	; (8001b50 <HAL_I2C_MspInit+0x12c>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001aa0:	e050      	b.n	8001b44 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a2c      	ldr	r2, [pc, #176]	; (8001b58 <HAL_I2C_MspInit+0x134>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d14b      	bne.n	8001b44 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aac:	2300      	movs	r3, #0
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	4b27      	ldr	r3, [pc, #156]	; (8001b50 <HAL_I2C_MspInit+0x12c>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	4a26      	ldr	r2, [pc, #152]	; (8001b50 <HAL_I2C_MspInit+0x12c>)
 8001ab6:	f043 0304 	orr.w	r3, r3, #4
 8001aba:	6313      	str	r3, [r2, #48]	; 0x30
 8001abc:	4b24      	ldr	r3, [pc, #144]	; (8001b50 <HAL_I2C_MspInit+0x12c>)
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <HAL_I2C_MspInit+0x12c>)
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	4a1f      	ldr	r2, [pc, #124]	; (8001b50 <HAL_I2C_MspInit+0x12c>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <HAL_I2C_MspInit+0x12c>)
 8001ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aea:	2312      	movs	r3, #18
 8001aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aee:	2301      	movs	r3, #1
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af2:	2303      	movs	r3, #3
 8001af4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001af6:	2304      	movs	r3, #4
 8001af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001afa:	f107 031c 	add.w	r3, r7, #28
 8001afe:	4619      	mov	r1, r3
 8001b00:	4816      	ldr	r0, [pc, #88]	; (8001b5c <HAL_I2C_MspInit+0x138>)
 8001b02:	f007 ff5b 	bl	80099bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b0c:	2312      	movs	r3, #18
 8001b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b10:	2301      	movs	r3, #1
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b18:	2304      	movs	r3, #4
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	4619      	mov	r1, r3
 8001b22:	480f      	ldr	r0, [pc, #60]	; (8001b60 <HAL_I2C_MspInit+0x13c>)
 8001b24:	f007 ff4a 	bl	80099bc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <HAL_I2C_MspInit+0x12c>)
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	4a07      	ldr	r2, [pc, #28]	; (8001b50 <HAL_I2C_MspInit+0x12c>)
 8001b32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b36:	6413      	str	r3, [r2, #64]	; 0x40
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_I2C_MspInit+0x12c>)
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	68bb      	ldr	r3, [r7, #8]
}
 8001b44:	bf00      	nop
 8001b46:	3730      	adds	r7, #48	; 0x30
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40005800 	.word	0x40005800
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40020400 	.word	0x40020400
 8001b58:	40005c00 	.word	0x40005c00
 8001b5c:	40020800 	.word	0x40020800
 8001b60:	40020000 	.word	0x40020000

08001b64 <main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main(void){
 8001b64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b68:	b0c4      	sub	sp, #272	; 0x110
 8001b6a:	af04      	add	r7, sp, #16
	MRT_STM_Init();
 8001b6c:	f000 f96c 	bl	8001e48 <MRT_STM_Init>
	println("\r\n\r\nSTM Init...OK");
 8001b70:	4873      	ldr	r0, [pc, #460]	; (8001d40 <main+0x1dc>)
 8001b72:	f7ff faab 	bl	80010cc <println>

	MRT_Init();
 8001b76:	f7ff fb25 	bl	80011c4 <MRT_Init>

	println("\r\n/****Starting FC****/\r\n");
 8001b7a:	4872      	ldr	r0, [pc, #456]	; (8001d44 <main+0x1e0>)
 8001b7c:	f7ff faa6 	bl	80010cc <println>
	#define TX_BUF_DIM 256
	char buffer[TX_BUF_DIM];


		while(1){
			HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8001b80:	2201      	movs	r2, #1
 8001b82:	2104      	movs	r1, #4
 8001b84:	4870      	ldr	r0, [pc, #448]	; (8001d48 <main+0x1e4>)
 8001b86:	f008 f8dd 	bl	8009d44 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8001b8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b8e:	f007 fb6b 	bl	8009268 <HAL_Delay>

			  //GPS
			  hgps.pollAll();
 8001b92:	4b6e      	ldr	r3, [pc, #440]	; (8001d4c <main+0x1e8>)
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	4798      	blx	r3

		  	  //LSM6DSR
		  	  hlsm6dsr.pollAll();
 8001b98:	4b6d      	ldr	r3, [pc, #436]	; (8001d50 <main+0x1ec>)
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9c:	4798      	blx	r3

			  //LPS22HH
			  hlps22hh.pollAll();
 8001b9e:	4b6d      	ldr	r3, [pc, #436]	; (8001d54 <main+0x1f0>)
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	4798      	blx	r3
			  //altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa); //Update altitude TODO put somewhere else


			  //GPS
			  memset(buffer, 0, TX_BUF_DIM);
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001baa:	2100      	movs	r1, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f015 fb51 	bl	8017254 <memset>
			  sprintf(buffer,"Alt: %.2f   Long: %.2f   Time: %.0f\r\n",hgps.latitude, hgps.longitude, hgps.time);
 8001bb2:	4b66      	ldr	r3, [pc, #408]	; (8001d4c <main+0x1e8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fce6 	bl	8000588 <__aeabi_f2d>
 8001bbc:	4680      	mov	r8, r0
 8001bbe:	4689      	mov	r9, r1
 8001bc0:	4b62      	ldr	r3, [pc, #392]	; (8001d4c <main+0x1e8>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fcdf 	bl	8000588 <__aeabi_f2d>
 8001bca:	4604      	mov	r4, r0
 8001bcc:	460d      	mov	r5, r1
 8001bce:	4b5f      	ldr	r3, [pc, #380]	; (8001d4c <main+0x1e8>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe fcd8 	bl	8000588 <__aeabi_f2d>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4638      	mov	r0, r7
 8001bde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001be2:	e9cd 4500 	strd	r4, r5, [sp]
 8001be6:	4642      	mov	r2, r8
 8001be8:	464b      	mov	r3, r9
 8001bea:	495b      	ldr	r1, [pc, #364]	; (8001d58 <main+0x1f4>)
 8001bec:	f016 fdc4 	bl	8018778 <siprintf>
			  print(buffer);
 8001bf0:	463b      	mov	r3, r7
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fa88 	bl	8001108 <print>

			  //LSM6DSR
			  memset(buffer, 0, TX_BUF_DIM);
 8001bf8:	463b      	mov	r3, r7
 8001bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f015 fb27 	bl	8017254 <memset>
			  sprintf(buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
					  hlsm6dsr.acceleration_mg[0], hlsm6dsr.acceleration_mg[1], hlsm6dsr.acceleration_mg[2]);
 8001c06:	4b52      	ldr	r3, [pc, #328]	; (8001d50 <main+0x1ec>)
 8001c08:	681b      	ldr	r3, [r3, #0]
			  sprintf(buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fcbc 	bl	8000588 <__aeabi_f2d>
 8001c10:	4680      	mov	r8, r0
 8001c12:	4689      	mov	r9, r1
					  hlsm6dsr.acceleration_mg[0], hlsm6dsr.acceleration_mg[1], hlsm6dsr.acceleration_mg[2]);
 8001c14:	4b4e      	ldr	r3, [pc, #312]	; (8001d50 <main+0x1ec>)
 8001c16:	685b      	ldr	r3, [r3, #4]
			  sprintf(buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fcb5 	bl	8000588 <__aeabi_f2d>
 8001c1e:	4604      	mov	r4, r0
 8001c20:	460d      	mov	r5, r1
					  hlsm6dsr.acceleration_mg[0], hlsm6dsr.acceleration_mg[1], hlsm6dsr.acceleration_mg[2]);
 8001c22:	4b4b      	ldr	r3, [pc, #300]	; (8001d50 <main+0x1ec>)
 8001c24:	689b      	ldr	r3, [r3, #8]
			  sprintf(buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fcae 	bl	8000588 <__aeabi_f2d>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4638      	mov	r0, r7
 8001c32:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c36:	e9cd 4500 	strd	r4, r5, [sp]
 8001c3a:	4642      	mov	r2, r8
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	4947      	ldr	r1, [pc, #284]	; (8001d5c <main+0x1f8>)
 8001c40:	f016 fd9a 	bl	8018778 <siprintf>
			  print(buffer);
 8001c44:	463b      	mov	r3, r7
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fa5e 	bl	8001108 <print>

			  memset(buffer, 0, TX_BUF_DIM);
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f015 fafd 	bl	8017254 <memset>
			  sprintf(buffer,"Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
					  hlsm6dsr.angular_rate_mdps[0], hlsm6dsr.angular_rate_mdps[1], hlsm6dsr.angular_rate_mdps[2]);
 8001c5a:	4b3d      	ldr	r3, [pc, #244]	; (8001d50 <main+0x1ec>)
 8001c5c:	68db      	ldr	r3, [r3, #12]
			  sprintf(buffer,"Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fc92 	bl	8000588 <__aeabi_f2d>
 8001c64:	4680      	mov	r8, r0
 8001c66:	4689      	mov	r9, r1
					  hlsm6dsr.angular_rate_mdps[0], hlsm6dsr.angular_rate_mdps[1], hlsm6dsr.angular_rate_mdps[2]);
 8001c68:	4b39      	ldr	r3, [pc, #228]	; (8001d50 <main+0x1ec>)
 8001c6a:	691b      	ldr	r3, [r3, #16]
			  sprintf(buffer,"Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fc8b 	bl	8000588 <__aeabi_f2d>
 8001c72:	4604      	mov	r4, r0
 8001c74:	460d      	mov	r5, r1
					  hlsm6dsr.angular_rate_mdps[0], hlsm6dsr.angular_rate_mdps[1], hlsm6dsr.angular_rate_mdps[2]);
 8001c76:	4b36      	ldr	r3, [pc, #216]	; (8001d50 <main+0x1ec>)
 8001c78:	695b      	ldr	r3, [r3, #20]
			  sprintf(buffer,"Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fc84 	bl	8000588 <__aeabi_f2d>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4638      	mov	r0, r7
 8001c86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c8a:	e9cd 4500 	strd	r4, r5, [sp]
 8001c8e:	4642      	mov	r2, r8
 8001c90:	464b      	mov	r3, r9
 8001c92:	4933      	ldr	r1, [pc, #204]	; (8001d60 <main+0x1fc>)
 8001c94:	f016 fd70 	bl	8018778 <siprintf>
			  print(buffer);
 8001c98:	463b      	mov	r3, r7
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fa34 	bl	8001108 <print>

			  memset(buffer, 0, TX_BUF_DIM);
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f015 fad3 	bl	8017254 <memset>
			  sprintf(buffer, "Temperature [degC]:%6.2f\r\n", hlsm6dsr.temperature_degC);
 8001cae:	4b28      	ldr	r3, [pc, #160]	; (8001d50 <main+0x1ec>)
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fc68 	bl	8000588 <__aeabi_f2d>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4638      	mov	r0, r7
 8001cbe:	4929      	ldr	r1, [pc, #164]	; (8001d64 <main+0x200>)
 8001cc0:	f016 fd5a 	bl	8018778 <siprintf>
			  print(buffer);
 8001cc4:	463b      	mov	r3, r7
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fa1e 	bl	8001108 <print>


			  //LPS22HH
			  memset(buffer, 0, TX_BUF_DIM);
 8001ccc:	463b      	mov	r3, r7
 8001cce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f015 fabd 	bl	8017254 <memset>
			  sprintf(buffer,"Pressure [hPa]:%6.2f\r\n",hlps22hh.pressure_hPa);
 8001cda:	4b1e      	ldr	r3, [pc, #120]	; (8001d54 <main+0x1f0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fc52 	bl	8000588 <__aeabi_f2d>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4638      	mov	r0, r7
 8001cea:	491f      	ldr	r1, [pc, #124]	; (8001d68 <main+0x204>)
 8001cec:	f016 fd44 	bl	8018778 <siprintf>
			  print(buffer);
 8001cf0:	463b      	mov	r3, r7
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fa08 	bl	8001108 <print>

			  memset(buffer, 0, TX_BUF_DIM);
 8001cf8:	463b      	mov	r3, r7
 8001cfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f015 faa7 	bl	8017254 <memset>
			  sprintf(buffer, "Temperature [degC]:%6.2f\r\n", hlps22hh.temperature_degC);
 8001d06:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <main+0x1f0>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fc3c 	bl	8000588 <__aeabi_f2d>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4638      	mov	r0, r7
 8001d16:	4913      	ldr	r1, [pc, #76]	; (8001d64 <main+0x200>)
 8001d18:	f016 fd2e 	bl	8018778 <siprintf>
			  print(buffer);
 8001d1c:	463b      	mov	r3, r7
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff f9f2 	bl	8001108 <print>


			  //Iridium
			  hiridium.getTime();
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <main+0x208>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	4798      	blx	r3

			HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2104      	movs	r1, #4
 8001d2e:	4806      	ldr	r0, [pc, #24]	; (8001d48 <main+0x1e4>)
 8001d30:	f008 f808 	bl	8009d44 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8001d34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d38:	f007 fa96 	bl	8009268 <HAL_Delay>
			HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8001d3c:	e720      	b.n	8001b80 <main+0x1c>
 8001d3e:	bf00      	nop
 8001d40:	0801d114 	.word	0x0801d114
 8001d44:	0801d128 	.word	0x0801d128
 8001d48:	40020800 	.word	0x40020800
 8001d4c:	20000470 	.word	0x20000470
 8001d50:	20000430 	.word	0x20000430
 8001d54:	2000045c 	.word	0x2000045c
 8001d58:	0801d144 	.word	0x0801d144
 8001d5c:	0801d16c 	.word	0x0801d16c
 8001d60:	0801d194 	.word	0x0801d194
 8001d64:	0801d1bc 	.word	0x0801d1bc
 8001d68:	0801d1d8 	.word	0x0801d1d8
 8001d6c:	20000488 	.word	0x20000488

08001d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b094      	sub	sp, #80	; 0x50
 8001d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d76:	f107 0320 	add.w	r3, r7, #32
 8001d7a:	2230      	movs	r2, #48	; 0x30
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f015 fa68 	bl	8017254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d84:	f107 030c 	add.w	r3, r7, #12
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d94:	2300      	movs	r3, #0
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	4b29      	ldr	r3, [pc, #164]	; (8001e40 <SystemClock_Config+0xd0>)
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	4a28      	ldr	r2, [pc, #160]	; (8001e40 <SystemClock_Config+0xd0>)
 8001d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da2:	6413      	str	r3, [r2, #64]	; 0x40
 8001da4:	4b26      	ldr	r3, [pc, #152]	; (8001e40 <SystemClock_Config+0xd0>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001db0:	2300      	movs	r3, #0
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <SystemClock_Config+0xd4>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001dbc:	4a21      	ldr	r2, [pc, #132]	; (8001e44 <SystemClock_Config+0xd4>)
 8001dbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <SystemClock_Config+0xd4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001dd0:	2309      	movs	r3, #9
 8001dd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dde:	2302      	movs	r3, #2
 8001de0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001de2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001de8:	2308      	movs	r3, #8
 8001dea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001dec:	2348      	movs	r3, #72	; 0x48
 8001dee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001df0:	2302      	movs	r3, #2
 8001df2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001df4:	2303      	movs	r3, #3
 8001df6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001df8:	f107 0320 	add.w	r3, r7, #32
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f00a f807 	bl	800be10 <HAL_RCC_OscConfig>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001e08:	f000 f852 	bl	8001eb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e0c:	230f      	movs	r3, #15
 8001e0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001e10:	2301      	movs	r3, #1
 8001e12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e22:	f107 030c 	add.w	r3, r7, #12
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f00a fa69 	bl	800c300 <HAL_RCC_ClockConfig>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001e34:	f000 f83c 	bl	8001eb0 <Error_Handler>
  }
}
 8001e38:	bf00      	nop
 8001e3a:	3750      	adds	r7, #80	; 0x50
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40007000 	.word	0x40007000

08001e48 <MRT_STM_Init>:

/* USER CODE BEGIN 4 */

void MRT_STM_Init(void){
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
	HAL_Init();
 8001e4c:	f007 f9ca 	bl	80091e4 <HAL_Init>
	SystemClock_Config();
 8001e50:	f7ff ff8e 	bl	8001d70 <SystemClock_Config>

	MX_GPIO_Init();
 8001e54:	f7ff fbd4 	bl	8001600 <MX_GPIO_Init>
	MX_ADC1_Init();
 8001e58:	f7ff fb3c 	bl	80014d4 <MX_ADC1_Init>
	MX_I2C2_Init();
 8001e5c:	f7ff fd62 	bl	8001924 <MX_I2C2_Init>
	MX_I2C3_Init();
 8001e60:	f7ff fda0 	bl	80019a4 <MX_I2C3_Init>
	MX_SPI2_Init();
 8001e64:	f000 f8e8 	bl	8002038 <MX_SPI2_Init>
	MX_SPI4_Init();
 8001e68:	f000 f91c 	bl	80020a4 <MX_SPI4_Init>
	MX_SPI5_Init();
 8001e6c:	f000 f950 	bl	8002110 <MX_SPI5_Init>
	MX_TIM2_Init();
 8001e70:	f000 fb0e 	bl	8002490 <MX_TIM2_Init>
	MX_UART8_Init();
 8001e74:	f000 fbda 	bl	800262c <MX_UART8_Init>
	MX_USART3_UART_Init();
 8001e78:	f000 fc02 	bl	8002680 <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 8001e7c:	f000 fc2a 	bl	80026d4 <MX_USART6_UART_Init>
	MX_RTC_Init();
 8001e80:	f000 f81c 	bl	8001ebc <MX_RTC_Init>
	//MX_IWDG_Init(); TODO ADDED IN MRT_Init()
	MX_FATFS_Init();
 8001e84:	f00e fd00 	bl	8010888 <MX_FATFS_Init>
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a04      	ldr	r2, [pc, #16]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d101      	bne.n	8001ea2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e9e:	f007 f9c3 	bl	8009228 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40001000 	.word	0x40001000

08001eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb4:	b672      	cpsid	i
}
 8001eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <Error_Handler+0x8>
	...

08001ebc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b090      	sub	sp, #64	; 0x40
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001ec2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	60da      	str	r2, [r3, #12]
 8001ed0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001ed6:	463b      	mov	r3, r7
 8001ed8:	2228      	movs	r2, #40	; 0x28
 8001eda:	2100      	movs	r1, #0
 8001edc:	4618      	mov	r0, r3
 8001ede:	f015 f9b9 	bl	8017254 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ee2:	4b3a      	ldr	r3, [pc, #232]	; (8001fcc <MX_RTC_Init+0x110>)
 8001ee4:	4a3a      	ldr	r2, [pc, #232]	; (8001fd0 <MX_RTC_Init+0x114>)
 8001ee6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ee8:	4b38      	ldr	r3, [pc, #224]	; (8001fcc <MX_RTC_Init+0x110>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001eee:	4b37      	ldr	r3, [pc, #220]	; (8001fcc <MX_RTC_Init+0x110>)
 8001ef0:	227f      	movs	r2, #127	; 0x7f
 8001ef2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001ef4:	4b35      	ldr	r3, [pc, #212]	; (8001fcc <MX_RTC_Init+0x110>)
 8001ef6:	22ff      	movs	r2, #255	; 0xff
 8001ef8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001efa:	4b34      	ldr	r3, [pc, #208]	; (8001fcc <MX_RTC_Init+0x110>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f00:	4b32      	ldr	r3, [pc, #200]	; (8001fcc <MX_RTC_Init+0x110>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f06:	4b31      	ldr	r3, [pc, #196]	; (8001fcc <MX_RTC_Init+0x110>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f0c:	482f      	ldr	r0, [pc, #188]	; (8001fcc <MX_RTC_Init+0x110>)
 8001f0e:	f00a fde1 	bl	800cad4 <HAL_RTC_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001f18:	f7ff ffca 	bl	8001eb0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f32:	2300      	movs	r3, #0
 8001f34:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001f36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4823      	ldr	r0, [pc, #140]	; (8001fcc <MX_RTC_Init+0x110>)
 8001f40:	f00a fe59 	bl	800cbf6 <HAL_RTC_SetTime>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001f4a:	f7ff ffb1 	bl	8001eb0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001f54:	2301      	movs	r3, #1
 8001f56:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001f66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4817      	ldr	r0, [pc, #92]	; (8001fcc <MX_RTC_Init+0x110>)
 8001f70:	f00a fefe 	bl	800cd70 <HAL_RTC_SetDate>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001f7a:	f7ff ff99 	bl	8001eb0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001f82:	2301      	movs	r3, #1
 8001f84:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001fa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001fae:	463b      	mov	r3, r7
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4805      	ldr	r0, [pc, #20]	; (8001fcc <MX_RTC_Init+0x110>)
 8001fb6:	f00a ff83 	bl	800cec0 <HAL_RTC_SetAlarm_IT>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001fc0:	f7ff ff76 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001fc4:	bf00      	nop
 8001fc6:	3740      	adds	r7, #64	; 0x40
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20005364 	.word	0x20005364
 8001fd0:	40002800 	.word	0x40002800

08001fd4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08e      	sub	sp, #56	; 0x38
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fdc:	f107 0308 	add.w	r3, r7, #8
 8001fe0:	2230      	movs	r2, #48	; 0x30
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f015 f935 	bl	8017254 <memset>
  if(rtcHandle->Instance==RTC)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a10      	ldr	r2, [pc, #64]	; (8002030 <HAL_RTC_MspInit+0x5c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d119      	bne.n	8002028 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ff4:	2320      	movs	r3, #32
 8001ff6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ffc:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ffe:	f107 0308 	add.w	r3, r7, #8
 8002002:	4618      	mov	r0, r3
 8002004:	f00a fba8 	bl	800c758 <HAL_RCCEx_PeriphCLKConfig>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800200e:	f7ff ff4f 	bl	8001eb0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <HAL_RTC_MspInit+0x60>)
 8002014:	2201      	movs	r2, #1
 8002016:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8002018:	2200      	movs	r2, #0
 800201a:	2105      	movs	r1, #5
 800201c:	2029      	movs	r0, #41	; 0x29
 800201e:	f007 fc95 	bl	800994c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002022:	2029      	movs	r0, #41	; 0x29
 8002024:	f007 fcae 	bl	8009984 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002028:	bf00      	nop
 800202a:	3738      	adds	r7, #56	; 0x38
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40002800 	.word	0x40002800
 8002034:	42470e3c 	.word	0x42470e3c

08002038 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800203c:	4b17      	ldr	r3, [pc, #92]	; (800209c <MX_SPI2_Init+0x64>)
 800203e:	4a18      	ldr	r2, [pc, #96]	; (80020a0 <MX_SPI2_Init+0x68>)
 8002040:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002042:	4b16      	ldr	r3, [pc, #88]	; (800209c <MX_SPI2_Init+0x64>)
 8002044:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002048:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800204a:	4b14      	ldr	r3, [pc, #80]	; (800209c <MX_SPI2_Init+0x64>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <MX_SPI2_Init+0x64>)
 8002052:	2200      	movs	r2, #0
 8002054:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002056:	4b11      	ldr	r3, [pc, #68]	; (800209c <MX_SPI2_Init+0x64>)
 8002058:	2200      	movs	r2, #0
 800205a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800205c:	4b0f      	ldr	r3, [pc, #60]	; (800209c <MX_SPI2_Init+0x64>)
 800205e:	2200      	movs	r2, #0
 8002060:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <MX_SPI2_Init+0x64>)
 8002064:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002068:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800206a:	4b0c      	ldr	r3, [pc, #48]	; (800209c <MX_SPI2_Init+0x64>)
 800206c:	2200      	movs	r2, #0
 800206e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002070:	4b0a      	ldr	r3, [pc, #40]	; (800209c <MX_SPI2_Init+0x64>)
 8002072:	2200      	movs	r2, #0
 8002074:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <MX_SPI2_Init+0x64>)
 8002078:	2200      	movs	r2, #0
 800207a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800207c:	4b07      	ldr	r3, [pc, #28]	; (800209c <MX_SPI2_Init+0x64>)
 800207e:	2200      	movs	r2, #0
 8002080:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <MX_SPI2_Init+0x64>)
 8002084:	220a      	movs	r2, #10
 8002086:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002088:	4804      	ldr	r0, [pc, #16]	; (800209c <MX_SPI2_Init+0x64>)
 800208a:	f00b fa35 	bl	800d4f8 <HAL_SPI_Init>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002094:	f7ff ff0c 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20005384 	.word	0x20005384
 80020a0:	40003800 	.word	0x40003800

080020a4 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80020a8:	4b17      	ldr	r3, [pc, #92]	; (8002108 <MX_SPI4_Init+0x64>)
 80020aa:	4a18      	ldr	r2, [pc, #96]	; (800210c <MX_SPI4_Init+0x68>)
 80020ac:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80020ae:	4b16      	ldr	r3, [pc, #88]	; (8002108 <MX_SPI4_Init+0x64>)
 80020b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020b4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80020b6:	4b14      	ldr	r3, [pc, #80]	; (8002108 <MX_SPI4_Init+0x64>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <MX_SPI4_Init+0x64>)
 80020be:	2200      	movs	r2, #0
 80020c0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <MX_SPI4_Init+0x64>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020c8:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <MX_SPI4_Init+0x64>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <MX_SPI4_Init+0x64>)
 80020d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020d4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020d6:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <MX_SPI4_Init+0x64>)
 80020d8:	2200      	movs	r2, #0
 80020da:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020dc:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <MX_SPI4_Init+0x64>)
 80020de:	2200      	movs	r2, #0
 80020e0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <MX_SPI4_Init+0x64>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020e8:	4b07      	ldr	r3, [pc, #28]	; (8002108 <MX_SPI4_Init+0x64>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <MX_SPI4_Init+0x64>)
 80020f0:	220a      	movs	r2, #10
 80020f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80020f4:	4804      	ldr	r0, [pc, #16]	; (8002108 <MX_SPI4_Init+0x64>)
 80020f6:	f00b f9ff 	bl	800d4f8 <HAL_SPI_Init>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8002100:	f7ff fed6 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20005434 	.word	0x20005434
 800210c:	40013400 	.word	0x40013400

08002110 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8002114:	4b17      	ldr	r3, [pc, #92]	; (8002174 <MX_SPI5_Init+0x64>)
 8002116:	4a18      	ldr	r2, [pc, #96]	; (8002178 <MX_SPI5_Init+0x68>)
 8002118:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800211a:	4b16      	ldr	r3, [pc, #88]	; (8002174 <MX_SPI5_Init+0x64>)
 800211c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002120:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002122:	4b14      	ldr	r3, [pc, #80]	; (8002174 <MX_SPI5_Init+0x64>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002128:	4b12      	ldr	r3, [pc, #72]	; (8002174 <MX_SPI5_Init+0x64>)
 800212a:	2200      	movs	r2, #0
 800212c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <MX_SPI5_Init+0x64>)
 8002130:	2200      	movs	r2, #0
 8002132:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002134:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <MX_SPI5_Init+0x64>)
 8002136:	2200      	movs	r2, #0
 8002138:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800213a:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <MX_SPI5_Init+0x64>)
 800213c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002140:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002142:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <MX_SPI5_Init+0x64>)
 8002144:	2200      	movs	r2, #0
 8002146:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002148:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <MX_SPI5_Init+0x64>)
 800214a:	2200      	movs	r2, #0
 800214c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800214e:	4b09      	ldr	r3, [pc, #36]	; (8002174 <MX_SPI5_Init+0x64>)
 8002150:	2200      	movs	r2, #0
 8002152:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002154:	4b07      	ldr	r3, [pc, #28]	; (8002174 <MX_SPI5_Init+0x64>)
 8002156:	2200      	movs	r2, #0
 8002158:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800215a:	4b06      	ldr	r3, [pc, #24]	; (8002174 <MX_SPI5_Init+0x64>)
 800215c:	220a      	movs	r2, #10
 800215e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002160:	4804      	ldr	r0, [pc, #16]	; (8002174 <MX_SPI5_Init+0x64>)
 8002162:	f00b f9c9 	bl	800d4f8 <HAL_SPI_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800216c:	f7ff fea0 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}
 8002174:	200053dc 	.word	0x200053dc
 8002178:	40015000 	.word	0x40015000

0800217c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08e      	sub	sp, #56	; 0x38
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a4c      	ldr	r2, [pc, #304]	; (80022cc <HAL_SPI_MspInit+0x150>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d12d      	bne.n	80021fa <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	623b      	str	r3, [r7, #32]
 80021a2:	4b4b      	ldr	r3, [pc, #300]	; (80022d0 <HAL_SPI_MspInit+0x154>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	4a4a      	ldr	r2, [pc, #296]	; (80022d0 <HAL_SPI_MspInit+0x154>)
 80021a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ac:	6413      	str	r3, [r2, #64]	; 0x40
 80021ae:	4b48      	ldr	r3, [pc, #288]	; (80022d0 <HAL_SPI_MspInit+0x154>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b6:	623b      	str	r3, [r7, #32]
 80021b8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
 80021be:	4b44      	ldr	r3, [pc, #272]	; (80022d0 <HAL_SPI_MspInit+0x154>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	4a43      	ldr	r2, [pc, #268]	; (80022d0 <HAL_SPI_MspInit+0x154>)
 80021c4:	f043 0302 	orr.w	r3, r3, #2
 80021c8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ca:	4b41      	ldr	r3, [pc, #260]	; (80022d0 <HAL_SPI_MspInit+0x154>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	61fb      	str	r3, [r7, #28]
 80021d4:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80021d6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	2302      	movs	r3, #2
 80021de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e4:	2303      	movs	r3, #3
 80021e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021e8:	2305      	movs	r3, #5
 80021ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f0:	4619      	mov	r1, r3
 80021f2:	4838      	ldr	r0, [pc, #224]	; (80022d4 <HAL_SPI_MspInit+0x158>)
 80021f4:	f007 fbe2 	bl	80099bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80021f8:	e064      	b.n	80022c4 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI4)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a36      	ldr	r2, [pc, #216]	; (80022d8 <HAL_SPI_MspInit+0x15c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d12d      	bne.n	8002260 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002204:	2300      	movs	r3, #0
 8002206:	61bb      	str	r3, [r7, #24]
 8002208:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <HAL_SPI_MspInit+0x154>)
 800220a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220c:	4a30      	ldr	r2, [pc, #192]	; (80022d0 <HAL_SPI_MspInit+0x154>)
 800220e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002212:	6453      	str	r3, [r2, #68]	; 0x44
 8002214:	4b2e      	ldr	r3, [pc, #184]	; (80022d0 <HAL_SPI_MspInit+0x154>)
 8002216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002218:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800221c:	61bb      	str	r3, [r7, #24]
 800221e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	4b2a      	ldr	r3, [pc, #168]	; (80022d0 <HAL_SPI_MspInit+0x154>)
 8002226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002228:	4a29      	ldr	r2, [pc, #164]	; (80022d0 <HAL_SPI_MspInit+0x154>)
 800222a:	f043 0310 	orr.w	r3, r3, #16
 800222e:	6313      	str	r3, [r2, #48]	; 0x30
 8002230:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <HAL_SPI_MspInit+0x154>)
 8002232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002234:	f003 0310 	and.w	r3, r3, #16
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800223c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002242:	2302      	movs	r3, #2
 8002244:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224a:	2303      	movs	r3, #3
 800224c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800224e:	2305      	movs	r3, #5
 8002250:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002256:	4619      	mov	r1, r3
 8002258:	4820      	ldr	r0, [pc, #128]	; (80022dc <HAL_SPI_MspInit+0x160>)
 800225a:	f007 fbaf 	bl	80099bc <HAL_GPIO_Init>
}
 800225e:	e031      	b.n	80022c4 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI5)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a1e      	ldr	r2, [pc, #120]	; (80022e0 <HAL_SPI_MspInit+0x164>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d12c      	bne.n	80022c4 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <HAL_SPI_MspInit+0x154>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	4a17      	ldr	r2, [pc, #92]	; (80022d0 <HAL_SPI_MspInit+0x154>)
 8002274:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002278:	6453      	str	r3, [r2, #68]	; 0x44
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <HAL_SPI_MspInit+0x154>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <HAL_SPI_MspInit+0x154>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a10      	ldr	r2, [pc, #64]	; (80022d0 <HAL_SPI_MspInit+0x154>)
 8002290:	f043 0320 	orr.w	r3, r3, #32
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <HAL_SPI_MspInit+0x154>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f003 0320 	and.w	r3, r3, #32
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80022a2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a8:	2302      	movs	r3, #2
 80022aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b0:	2303      	movs	r3, #3
 80022b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80022b4:	2305      	movs	r3, #5
 80022b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022bc:	4619      	mov	r1, r3
 80022be:	4809      	ldr	r0, [pc, #36]	; (80022e4 <HAL_SPI_MspInit+0x168>)
 80022c0:	f007 fb7c 	bl	80099bc <HAL_GPIO_Init>
}
 80022c4:	bf00      	nop
 80022c6:	3738      	adds	r7, #56	; 0x38
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40003800 	.word	0x40003800
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40020400 	.word	0x40020400
 80022d8:	40013400 	.word	0x40013400
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40015000 	.word	0x40015000
 80022e4:	40021400 	.word	0x40021400

080022e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	4b12      	ldr	r3, [pc, #72]	; (800233c <HAL_MspInit+0x54>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	4a11      	ldr	r2, [pc, #68]	; (800233c <HAL_MspInit+0x54>)
 80022f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022fc:	6453      	str	r3, [r2, #68]	; 0x44
 80022fe:	4b0f      	ldr	r3, [pc, #60]	; (800233c <HAL_MspInit+0x54>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	603b      	str	r3, [r7, #0]
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_MspInit+0x54>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	4a0a      	ldr	r2, [pc, #40]	; (800233c <HAL_MspInit+0x54>)
 8002314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002318:	6413      	str	r3, [r2, #64]	; 0x40
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <HAL_MspInit+0x54>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002326:	2200      	movs	r2, #0
 8002328:	210f      	movs	r1, #15
 800232a:	f06f 0001 	mvn.w	r0, #1
 800232e:	f007 fb0d 	bl	800994c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800

08002340 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08c      	sub	sp, #48	; 0x30
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002350:	2200      	movs	r2, #0
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	2036      	movs	r0, #54	; 0x36
 8002356:	f007 faf9 	bl	800994c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800235a:	2036      	movs	r0, #54	; 0x36
 800235c:	f007 fb12 	bl	8009984 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	4b1f      	ldr	r3, [pc, #124]	; (80023e4 <HAL_InitTick+0xa4>)
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	4a1e      	ldr	r2, [pc, #120]	; (80023e4 <HAL_InitTick+0xa4>)
 800236a:	f043 0310 	orr.w	r3, r3, #16
 800236e:	6413      	str	r3, [r2, #64]	; 0x40
 8002370:	4b1c      	ldr	r3, [pc, #112]	; (80023e4 <HAL_InitTick+0xa4>)
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	f003 0310 	and.w	r3, r3, #16
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800237c:	f107 0210 	add.w	r2, r7, #16
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	4611      	mov	r1, r2
 8002386:	4618      	mov	r0, r3
 8002388:	f00a f9b4 	bl	800c6f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800238c:	f00a f98a 	bl	800c6a4 <HAL_RCC_GetPCLK1Freq>
 8002390:	4603      	mov	r3, r0
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002398:	4a13      	ldr	r2, [pc, #76]	; (80023e8 <HAL_InitTick+0xa8>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	0c9b      	lsrs	r3, r3, #18
 80023a0:	3b01      	subs	r3, #1
 80023a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80023a4:	4b11      	ldr	r3, [pc, #68]	; (80023ec <HAL_InitTick+0xac>)
 80023a6:	4a12      	ldr	r2, [pc, #72]	; (80023f0 <HAL_InitTick+0xb0>)
 80023a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80023aa:	4b10      	ldr	r3, [pc, #64]	; (80023ec <HAL_InitTick+0xac>)
 80023ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023b0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80023b2:	4a0e      	ldr	r2, [pc, #56]	; (80023ec <HAL_InitTick+0xac>)
 80023b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <HAL_InitTick+0xac>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023be:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_InitTick+0xac>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80023c4:	4809      	ldr	r0, [pc, #36]	; (80023ec <HAL_InitTick+0xac>)
 80023c6:	f00b fe3f 	bl	800e048 <HAL_TIM_Base_Init>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d104      	bne.n	80023da <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80023d0:	4806      	ldr	r0, [pc, #24]	; (80023ec <HAL_InitTick+0xac>)
 80023d2:	f00b fe89 	bl	800e0e8 <HAL_TIM_Base_Start_IT>
 80023d6:	4603      	mov	r3, r0
 80023d8:	e000      	b.n	80023dc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3730      	adds	r7, #48	; 0x30
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40023800 	.word	0x40023800
 80023e8:	431bde83 	.word	0x431bde83
 80023ec:	2000548c 	.word	0x2000548c
 80023f0:	40001000 	.word	0x40001000

080023f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023f8:	e7fe      	b.n	80023f8 <NMI_Handler+0x4>

080023fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023fe:	e7fe      	b.n	80023fe <HardFault_Handler+0x4>

08002400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002404:	e7fe      	b.n	8002404 <MemManage_Handler+0x4>

08002406 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800240a:	e7fe      	b.n	800240a <BusFault_Handler+0x4>

0800240c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002410:	e7fe      	b.n	8002410 <UsageFault_Handler+0x4>

08002412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002424:	2001      	movs	r0, #1
 8002426:	f007 fca7 	bl	8009d78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002434:	4802      	ldr	r0, [pc, #8]	; (8002440 <RTC_Alarm_IRQHandler+0x10>)
 8002436:	f00a fe7b 	bl	800d130 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20005364 	.word	0x20005364

08002444 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002448:	4802      	ldr	r0, [pc, #8]	; (8002454 <TIM6_DAC_IRQHandler+0x10>)
 800244a:	f00c f84f 	bl	800e4ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	2000548c 	.word	0x2000548c

08002458 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800245c:	4802      	ldr	r0, [pc, #8]	; (8002468 <OTG_FS_IRQHandler+0x10>)
 800245e:	f008 fd1f 	bl	800aea0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	200067d4 	.word	0x200067d4

0800246c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <SystemInit+0x20>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	4a05      	ldr	r2, [pc, #20]	; (800248c <SystemInit+0x20>)
 8002478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800247c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08e      	sub	sp, #56	; 0x38
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002496:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a4:	f107 0320 	add.w	r3, r7, #32
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
 80024bc:	615a      	str	r2, [r3, #20]
 80024be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024c0:	4b2d      	ldr	r3, [pc, #180]	; (8002578 <MX_TIM2_Init+0xe8>)
 80024c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80024c8:	4b2b      	ldr	r3, [pc, #172]	; (8002578 <MX_TIM2_Init+0xe8>)
 80024ca:	2259      	movs	r2, #89	; 0x59
 80024cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ce:	4b2a      	ldr	r3, [pc, #168]	; (8002578 <MX_TIM2_Init+0xe8>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 80024d4:	4b28      	ldr	r3, [pc, #160]	; (8002578 <MX_TIM2_Init+0xe8>)
 80024d6:	f240 128f 	movw	r2, #399	; 0x18f
 80024da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024dc:	4b26      	ldr	r3, [pc, #152]	; (8002578 <MX_TIM2_Init+0xe8>)
 80024de:	2200      	movs	r2, #0
 80024e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e2:	4b25      	ldr	r3, [pc, #148]	; (8002578 <MX_TIM2_Init+0xe8>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024e8:	4823      	ldr	r0, [pc, #140]	; (8002578 <MX_TIM2_Init+0xe8>)
 80024ea:	f00b fdad 	bl	800e048 <HAL_TIM_Base_Init>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80024f4:	f7ff fcdc 	bl	8001eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002502:	4619      	mov	r1, r3
 8002504:	481c      	ldr	r0, [pc, #112]	; (8002578 <MX_TIM2_Init+0xe8>)
 8002506:	f00c f9bb 	bl	800e880 <HAL_TIM_ConfigClockSource>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002510:	f7ff fcce 	bl	8001eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002514:	4818      	ldr	r0, [pc, #96]	; (8002578 <MX_TIM2_Init+0xe8>)
 8002516:	f00b fe57 	bl	800e1c8 <HAL_TIM_PWM_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002520:	f7ff fcc6 	bl	8001eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002524:	2320      	movs	r3, #32
 8002526:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800252c:	f107 0320 	add.w	r3, r7, #32
 8002530:	4619      	mov	r1, r3
 8002532:	4811      	ldr	r0, [pc, #68]	; (8002578 <MX_TIM2_Init+0xe8>)
 8002534:	f00c fda4 	bl	800f080 <HAL_TIMEx_MasterConfigSynchronization>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800253e:	f7ff fcb7 	bl	8001eb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002542:	2360      	movs	r3, #96	; 0x60
 8002544:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8002546:	2364      	movs	r3, #100	; 0x64
 8002548:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	2208      	movs	r2, #8
 8002556:	4619      	mov	r1, r3
 8002558:	4807      	ldr	r0, [pc, #28]	; (8002578 <MX_TIM2_Init+0xe8>)
 800255a:	f00c f8cf 	bl	800e6fc <HAL_TIM_PWM_ConfigChannel>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002564:	f7ff fca4 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002568:	4803      	ldr	r0, [pc, #12]	; (8002578 <MX_TIM2_Init+0xe8>)
 800256a:	f000 f827 	bl	80025bc <HAL_TIM_MspPostInit>

}
 800256e:	bf00      	nop
 8002570:	3738      	adds	r7, #56	; 0x38
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	200054d4 	.word	0x200054d4

0800257c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800258c:	d10d      	bne.n	80025aa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <HAL_TIM_Base_MspInit+0x3c>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	4a08      	ldr	r2, [pc, #32]	; (80025b8 <HAL_TIM_Base_MspInit+0x3c>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6413      	str	r3, [r2, #64]	; 0x40
 800259e:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_TIM_Base_MspInit+0x3c>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80025aa:	bf00      	nop
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800

080025bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c4:	f107 030c 	add.w	r3, r7, #12
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	60da      	str	r2, [r3, #12]
 80025d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025dc:	d11d      	bne.n	800261a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	4b10      	ldr	r3, [pc, #64]	; (8002624 <HAL_TIM_MspPostInit+0x68>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	4a0f      	ldr	r2, [pc, #60]	; (8002624 <HAL_TIM_MspPostInit+0x68>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6313      	str	r3, [r2, #48]	; 0x30
 80025ee:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <HAL_TIM_MspPostInit+0x68>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 80025fa:	2304      	movs	r3, #4
 80025fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fe:	2302      	movs	r3, #2
 8002600:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002606:	2300      	movs	r3, #0
 8002608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800260a:	2301      	movs	r3, #1
 800260c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800260e:	f107 030c 	add.w	r3, r7, #12
 8002612:	4619      	mov	r1, r3
 8002614:	4804      	ldr	r0, [pc, #16]	; (8002628 <HAL_TIM_MspPostInit+0x6c>)
 8002616:	f007 f9d1 	bl	80099bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800261a:	bf00      	nop
 800261c:	3720      	adds	r7, #32
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40023800 	.word	0x40023800
 8002628:	40020000 	.word	0x40020000

0800262c <MX_UART8_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART8 init function */
void MX_UART8_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002630:	4b11      	ldr	r3, [pc, #68]	; (8002678 <MX_UART8_Init+0x4c>)
 8002632:	4a12      	ldr	r2, [pc, #72]	; (800267c <MX_UART8_Init+0x50>)
 8002634:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002636:	4b10      	ldr	r3, [pc, #64]	; (8002678 <MX_UART8_Init+0x4c>)
 8002638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800263c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800263e:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <MX_UART8_Init+0x4c>)
 8002640:	2200      	movs	r2, #0
 8002642:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002644:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <MX_UART8_Init+0x4c>)
 8002646:	2200      	movs	r2, #0
 8002648:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800264a:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <MX_UART8_Init+0x4c>)
 800264c:	2200      	movs	r2, #0
 800264e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002650:	4b09      	ldr	r3, [pc, #36]	; (8002678 <MX_UART8_Init+0x4c>)
 8002652:	220c      	movs	r2, #12
 8002654:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002656:	4b08      	ldr	r3, [pc, #32]	; (8002678 <MX_UART8_Init+0x4c>)
 8002658:	2200      	movs	r2, #0
 800265a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <MX_UART8_Init+0x4c>)
 800265e:	2200      	movs	r2, #0
 8002660:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002662:	4805      	ldr	r0, [pc, #20]	; (8002678 <MX_UART8_Init+0x4c>)
 8002664:	f00c fd9c 	bl	800f1a0 <HAL_UART_Init>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 800266e:	f7ff fc1f 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20005560 	.word	0x20005560
 800267c:	40007c00 	.word	0x40007c00

08002680 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002684:	4b11      	ldr	r3, [pc, #68]	; (80026cc <MX_USART3_UART_Init+0x4c>)
 8002686:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <MX_USART3_UART_Init+0x50>)
 8002688:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800268a:	4b10      	ldr	r3, [pc, #64]	; (80026cc <MX_USART3_UART_Init+0x4c>)
 800268c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002690:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002692:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <MX_USART3_UART_Init+0x4c>)
 8002694:	2200      	movs	r2, #0
 8002696:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002698:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <MX_USART3_UART_Init+0x4c>)
 800269a:	2200      	movs	r2, #0
 800269c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800269e:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <MX_USART3_UART_Init+0x4c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026a4:	4b09      	ldr	r3, [pc, #36]	; (80026cc <MX_USART3_UART_Init+0x4c>)
 80026a6:	220c      	movs	r2, #12
 80026a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026aa:	4b08      	ldr	r3, [pc, #32]	; (80026cc <MX_USART3_UART_Init+0x4c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b0:	4b06      	ldr	r3, [pc, #24]	; (80026cc <MX_USART3_UART_Init+0x4c>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026b6:	4805      	ldr	r0, [pc, #20]	; (80026cc <MX_USART3_UART_Init+0x4c>)
 80026b8:	f00c fd72 	bl	800f1a0 <HAL_UART_Init>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80026c2:	f7ff fbf5 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	2000551c 	.word	0x2000551c
 80026d0:	40004800 	.word	0x40004800

080026d4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80026d8:	4b11      	ldr	r3, [pc, #68]	; (8002720 <MX_USART6_UART_Init+0x4c>)
 80026da:	4a12      	ldr	r2, [pc, #72]	; (8002724 <MX_USART6_UART_Init+0x50>)
 80026dc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80026de:	4b10      	ldr	r3, [pc, #64]	; (8002720 <MX_USART6_UART_Init+0x4c>)
 80026e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80026e4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80026e6:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <MX_USART6_UART_Init+0x4c>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <MX_USART6_UART_Init+0x4c>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <MX_USART6_UART_Init+0x4c>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80026f8:	4b09      	ldr	r3, [pc, #36]	; (8002720 <MX_USART6_UART_Init+0x4c>)
 80026fa:	220c      	movs	r2, #12
 80026fc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <MX_USART6_UART_Init+0x4c>)
 8002700:	2200      	movs	r2, #0
 8002702:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <MX_USART6_UART_Init+0x4c>)
 8002706:	2200      	movs	r2, #0
 8002708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800270a:	4805      	ldr	r0, [pc, #20]	; (8002720 <MX_USART6_UART_Init+0x4c>)
 800270c:	f00c fd48 	bl	800f1a0 <HAL_UART_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002716:	f7ff fbcb 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	200055a4 	.word	0x200055a4
 8002724:	40011400 	.word	0x40011400

08002728 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08e      	sub	sp, #56	; 0x38
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a4b      	ldr	r2, [pc, #300]	; (8002874 <HAL_UART_MspInit+0x14c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d12c      	bne.n	80027a4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	623b      	str	r3, [r7, #32]
 800274e:	4b4a      	ldr	r3, [pc, #296]	; (8002878 <HAL_UART_MspInit+0x150>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	4a49      	ldr	r2, [pc, #292]	; (8002878 <HAL_UART_MspInit+0x150>)
 8002754:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002758:	6413      	str	r3, [r2, #64]	; 0x40
 800275a:	4b47      	ldr	r3, [pc, #284]	; (8002878 <HAL_UART_MspInit+0x150>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002762:	623b      	str	r3, [r7, #32]
 8002764:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	61fb      	str	r3, [r7, #28]
 800276a:	4b43      	ldr	r3, [pc, #268]	; (8002878 <HAL_UART_MspInit+0x150>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4a42      	ldr	r2, [pc, #264]	; (8002878 <HAL_UART_MspInit+0x150>)
 8002770:	f043 0310 	orr.w	r3, r3, #16
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
 8002776:	4b40      	ldr	r3, [pc, #256]	; (8002878 <HAL_UART_MspInit+0x150>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	61fb      	str	r3, [r7, #28]
 8002780:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8002782:	2303      	movs	r3, #3
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002786:	2302      	movs	r3, #2
 8002788:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278e:	2303      	movs	r3, #3
 8002790:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002792:	2308      	movs	r3, #8
 8002794:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800279a:	4619      	mov	r1, r3
 800279c:	4837      	ldr	r0, [pc, #220]	; (800287c <HAL_UART_MspInit+0x154>)
 800279e:	f007 f90d 	bl	80099bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80027a2:	e063      	b.n	800286c <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART3)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a35      	ldr	r2, [pc, #212]	; (8002880 <HAL_UART_MspInit+0x158>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d12d      	bne.n	800280a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	4b31      	ldr	r3, [pc, #196]	; (8002878 <HAL_UART_MspInit+0x150>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	4a30      	ldr	r2, [pc, #192]	; (8002878 <HAL_UART_MspInit+0x150>)
 80027b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027bc:	6413      	str	r3, [r2, #64]	; 0x40
 80027be:	4b2e      	ldr	r3, [pc, #184]	; (8002878 <HAL_UART_MspInit+0x150>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027c6:	61bb      	str	r3, [r7, #24]
 80027c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	4b2a      	ldr	r3, [pc, #168]	; (8002878 <HAL_UART_MspInit+0x150>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	4a29      	ldr	r2, [pc, #164]	; (8002878 <HAL_UART_MspInit+0x150>)
 80027d4:	f043 0308 	orr.w	r3, r3, #8
 80027d8:	6313      	str	r3, [r2, #48]	; 0x30
 80027da:	4b27      	ldr	r3, [pc, #156]	; (8002878 <HAL_UART_MspInit+0x150>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 80027e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ec:	2302      	movs	r3, #2
 80027ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f4:	2303      	movs	r3, #3
 80027f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027f8:	2307      	movs	r3, #7
 80027fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002800:	4619      	mov	r1, r3
 8002802:	4820      	ldr	r0, [pc, #128]	; (8002884 <HAL_UART_MspInit+0x15c>)
 8002804:	f007 f8da 	bl	80099bc <HAL_GPIO_Init>
}
 8002808:	e030      	b.n	800286c <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART6)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a1e      	ldr	r2, [pc, #120]	; (8002888 <HAL_UART_MspInit+0x160>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d12b      	bne.n	800286c <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002814:	2300      	movs	r3, #0
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	4b17      	ldr	r3, [pc, #92]	; (8002878 <HAL_UART_MspInit+0x150>)
 800281a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281c:	4a16      	ldr	r2, [pc, #88]	; (8002878 <HAL_UART_MspInit+0x150>)
 800281e:	f043 0320 	orr.w	r3, r3, #32
 8002822:	6453      	str	r3, [r2, #68]	; 0x44
 8002824:	4b14      	ldr	r3, [pc, #80]	; (8002878 <HAL_UART_MspInit+0x150>)
 8002826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002828:	f003 0320 	and.w	r3, r3, #32
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	4b10      	ldr	r3, [pc, #64]	; (8002878 <HAL_UART_MspInit+0x150>)
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002838:	4a0f      	ldr	r2, [pc, #60]	; (8002878 <HAL_UART_MspInit+0x150>)
 800283a:	f043 0304 	orr.w	r3, r3, #4
 800283e:	6313      	str	r3, [r2, #48]	; 0x30
 8002840:	4b0d      	ldr	r3, [pc, #52]	; (8002878 <HAL_UART_MspInit+0x150>)
 8002842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 800284c:	23c0      	movs	r3, #192	; 0xc0
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002858:	2303      	movs	r3, #3
 800285a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800285c:	2308      	movs	r3, #8
 800285e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002864:	4619      	mov	r1, r3
 8002866:	4809      	ldr	r0, [pc, #36]	; (800288c <HAL_UART_MspInit+0x164>)
 8002868:	f007 f8a8 	bl	80099bc <HAL_GPIO_Init>
}
 800286c:	bf00      	nop
 800286e:	3738      	adds	r7, #56	; 0x38
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40007c00 	.word	0x40007c00
 8002878:	40023800 	.word	0x40023800
 800287c:	40021000 	.word	0x40021000
 8002880:	40004800 	.word	0x40004800
 8002884:	40020c00 	.word	0x40020c00
 8002888:	40011400 	.word	0x40011400
 800288c:	40020800 	.word	0x40020800

08002890 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002890:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002894:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002896:	e003      	b.n	80028a0 <LoopCopyDataInit>

08002898 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800289a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800289c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800289e:	3104      	adds	r1, #4

080028a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80028a0:	480b      	ldr	r0, [pc, #44]	; (80028d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80028a2:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80028a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80028a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80028a8:	d3f6      	bcc.n	8002898 <CopyDataInit>
  ldr  r2, =_sbss
 80028aa:	4a0b      	ldr	r2, [pc, #44]	; (80028d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80028ac:	e002      	b.n	80028b4 <LoopFillZerobss>

080028ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80028ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80028b0:	f842 3b04 	str.w	r3, [r2], #4

080028b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80028b4:	4b09      	ldr	r3, [pc, #36]	; (80028dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80028b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80028b8:	d3f9      	bcc.n	80028ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80028ba:	f7ff fdd7 	bl	800246c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028be:	f014 fb4b 	bl	8016f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028c2:	f7ff f94f 	bl	8001b64 <main>
  bx  lr    
 80028c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80028c8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80028cc:	0801f3c4 	.word	0x0801f3c4
  ldr  r0, =_sdata
 80028d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80028d4:	200002bc 	.word	0x200002bc
  ldr  r2, =_sbss
 80028d8:	200002bc 	.word	0x200002bc
  ldr  r3, = _ebss
 80028dc:	20006bec 	.word	0x20006bec

080028e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028e0:	e7fe      	b.n	80028e0 <ADC_IRQHandler>
	...

080028e4 <MRT_external_flash_Init>:


//**************************************************//
//FUNCTIONS

void MRT_external_flash_Init(void){
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0

	for (int i = 0; i < NB_OF_FLAGS; i++){
 80028ea:	2300      	movs	r3, #0
 80028ec:	607b      	str	r3, [r7, #4]
 80028ee:	e007      	b.n	8002900 <MRT_external_flash_Init+0x1c>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 80028f0:	4a0e      	ldr	r2, [pc, #56]	; (800292c <MRT_external_flash_Init+0x48>)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4413      	add	r3, r2
 80028f6:	2200      	movs	r2, #0
 80028f8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3301      	adds	r3, #1
 80028fe:	607b      	str	r3, [r7, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b04      	cmp	r3, #4
 8002904:	ddf4      	ble.n	80028f0 <MRT_external_flash_Init+0xc>
	}

	if (!W25qxx_Init()) {
 8002906:	f000 fc71 	bl	80031ec <W25qxx_Init>
 800290a:	4603      	mov	r3, r0
 800290c:	f083 0301 	eor.w	r3, r3, #1
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MRT_external_flash_Init+0x36>
		Error_Handler(); // hangs and blinks LEDF
 8002916:	f7ff facb 	bl	8001eb0 <Error_Handler>
	}
	MRT_check_for_wake_up(); //Needs to be called before getFlags() and after the W25xx_Init()
 800291a:	f001 f8f7 	bl	8003b0c <MRT_check_for_wake_up>
	MRT_get_flags();
 800291e:	f000 f807 	bl	8002930 <MRT_get_flags>
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	200055e8 	.word	0x200055e8

08002930 <MRT_get_flags>:




void MRT_get_flags(void){
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0

	//Retrieve flags
	W25qxx_ReadSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002934:	2305      	movs	r3, #5
 8002936:	2200      	movs	r2, #0
 8002938:	2101      	movs	r1, #1
 800293a:	486a      	ldr	r0, [pc, #424]	; (8002ae4 <MRT_get_flags+0x1b4>)
 800293c:	f001 f830 	bl	80039a0 <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8002940:	2303      	movs	r3, #3
 8002942:	2200      	movs	r2, #0
 8002944:	2102      	movs	r1, #2
 8002946:	4868      	ldr	r0, [pc, #416]	; (8002ae8 <MRT_get_flags+0x1b8>)
 8002948:	f001 f82a 	bl	80039a0 <W25qxx_ReadSector>

	//If RTC detected a wake up, update the flash memory
	if (wu_flag == 1){
 800294c:	4b67      	ldr	r3, [pc, #412]	; (8002aec <MRT_get_flags+0x1bc>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d10e      	bne.n	8002972 <MRT_get_flags+0x42>
		//Write the new number of wake up to external flash
		flash_flags_buffer[WU_FLAG_OFFSET] = flash_flags_buffer[WU_FLAG_OFFSET] + 1; //Update number of wake up
 8002954:	4b63      	ldr	r3, [pc, #396]	; (8002ae4 <MRT_get_flags+0x1b4>)
 8002956:	785b      	ldrb	r3, [r3, #1]
 8002958:	3301      	adds	r3, #1
 800295a:	b2da      	uxtb	r2, r3
 800295c:	4b61      	ldr	r3, [pc, #388]	; (8002ae4 <MRT_get_flags+0x1b4>)
 800295e:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 8002960:	2001      	movs	r0, #1
 8002962:	f000 fd95 	bl	8003490 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002966:	2305      	movs	r3, #5
 8002968:	2200      	movs	r2, #0
 800296a:	2101      	movs	r1, #1
 800296c:	485d      	ldr	r0, [pc, #372]	; (8002ae4 <MRT_get_flags+0x1b4>)
 800296e:	f000 fed9 	bl	8003724 <W25qxx_WriteSector>
	}

	//Assign each value read to their variable
	 MRT_update_flags_values();
 8002972:	f000 f8cb 	bl	8002b0c <MRT_update_flags_values>


	//Check flags values
	//Reset flag
	if (reset_flag != 0 && reset_flag !=1){ //If random value (none was written)
 8002976:	4b5e      	ldr	r3, [pc, #376]	; (8002af0 <MRT_get_flags+0x1c0>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d013      	beq.n	80029a6 <MRT_get_flags+0x76>
 800297e:	4b5c      	ldr	r3, [pc, #368]	; (8002af0 <MRT_get_flags+0x1c0>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d00f      	beq.n	80029a6 <MRT_get_flags+0x76>
		reset_flag = 0;
 8002986:	4b5a      	ldr	r3, [pc, #360]	; (8002af0 <MRT_get_flags+0x1c0>)
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 800298c:	4b58      	ldr	r3, [pc, #352]	; (8002af0 <MRT_get_flags+0x1c0>)
 800298e:	781a      	ldrb	r2, [r3, #0]
 8002990:	4b54      	ldr	r3, [pc, #336]	; (8002ae4 <MRT_get_flags+0x1b4>)
 8002992:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(1);
 8002994:	2001      	movs	r0, #1
 8002996:	f000 fd7b 	bl	8003490 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 800299a:	2305      	movs	r3, #5
 800299c:	2200      	movs	r2, #0
 800299e:	2101      	movs	r1, #1
 80029a0:	4850      	ldr	r0, [pc, #320]	; (8002ae4 <MRT_get_flags+0x1b4>)
 80029a2:	f000 febf 	bl	8003724 <W25qxx_WriteSector>
	}

	//Wake up flag
	if (wu_flag != 0 && wu_flag !=1 && wu_flag !=2){ //If random value (none was written)
 80029a6:	4b51      	ldr	r3, [pc, #324]	; (8002aec <MRT_get_flags+0x1bc>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d017      	beq.n	80029de <MRT_get_flags+0xae>
 80029ae:	4b4f      	ldr	r3, [pc, #316]	; (8002aec <MRT_get_flags+0x1bc>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d013      	beq.n	80029de <MRT_get_flags+0xae>
 80029b6:	4b4d      	ldr	r3, [pc, #308]	; (8002aec <MRT_get_flags+0x1bc>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d00f      	beq.n	80029de <MRT_get_flags+0xae>
		wu_flag = 0;
 80029be:	4b4b      	ldr	r3, [pc, #300]	; (8002aec <MRT_get_flags+0x1bc>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[WU_FLAG_OFFSET] = wu_flag;
 80029c4:	4b49      	ldr	r3, [pc, #292]	; (8002aec <MRT_get_flags+0x1bc>)
 80029c6:	781a      	ldrb	r2, [r3, #0]
 80029c8:	4b46      	ldr	r3, [pc, #280]	; (8002ae4 <MRT_get_flags+0x1b4>)
 80029ca:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 80029cc:	2001      	movs	r0, #1
 80029ce:	f000 fd5f 	bl	8003490 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80029d2:	2305      	movs	r3, #5
 80029d4:	2200      	movs	r2, #0
 80029d6:	2101      	movs	r1, #1
 80029d8:	4842      	ldr	r0, [pc, #264]	; (8002ae4 <MRT_get_flags+0x1b4>)
 80029da:	f000 fea3 	bl	8003724 <W25qxx_WriteSector>
	}

	//IWDG flag
	if (iwdg_flag != 0 && iwdg_flag !=1){ //If random value (none was written)
 80029de:	4b45      	ldr	r3, [pc, #276]	; (8002af4 <MRT_get_flags+0x1c4>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d013      	beq.n	8002a0e <MRT_get_flags+0xde>
 80029e6:	4b43      	ldr	r3, [pc, #268]	; (8002af4 <MRT_get_flags+0x1c4>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d00f      	beq.n	8002a0e <MRT_get_flags+0xde>
		iwdg_flag = 0;
 80029ee:	4b41      	ldr	r3, [pc, #260]	; (8002af4 <MRT_get_flags+0x1c4>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 80029f4:	4b3f      	ldr	r3, [pc, #252]	; (8002af4 <MRT_get_flags+0x1c4>)
 80029f6:	781a      	ldrb	r2, [r3, #0]
 80029f8:	4b3a      	ldr	r3, [pc, #232]	; (8002ae4 <MRT_get_flags+0x1b4>)
 80029fa:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 80029fc:	2001      	movs	r0, #1
 80029fe:	f000 fd47 	bl	8003490 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002a02:	2305      	movs	r3, #5
 8002a04:	2200      	movs	r2, #0
 8002a06:	2101      	movs	r1, #1
 8002a08:	4836      	ldr	r0, [pc, #216]	; (8002ae4 <MRT_get_flags+0x1b4>)
 8002a0a:	f000 fe8b 	bl	8003724 <W25qxx_WriteSector>
	}

	//Apogee flag
	if (apogee_flag != 0 && apogee_flag !=1){ //If random value (none was written)
 8002a0e:	4b3a      	ldr	r3, [pc, #232]	; (8002af8 <MRT_get_flags+0x1c8>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d013      	beq.n	8002a3e <MRT_get_flags+0x10e>
 8002a16:	4b38      	ldr	r3, [pc, #224]	; (8002af8 <MRT_get_flags+0x1c8>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d00f      	beq.n	8002a3e <MRT_get_flags+0x10e>
		apogee_flag = 0;
 8002a1e:	4b36      	ldr	r3, [pc, #216]	; (8002af8 <MRT_get_flags+0x1c8>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[APOGEE_FLAG_OFFSET] = apogee_flag;
 8002a24:	4b34      	ldr	r3, [pc, #208]	; (8002af8 <MRT_get_flags+0x1c8>)
 8002a26:	781a      	ldrb	r2, [r3, #0]
 8002a28:	4b2e      	ldr	r3, [pc, #184]	; (8002ae4 <MRT_get_flags+0x1b4>)
 8002a2a:	70da      	strb	r2, [r3, #3]
		W25qxx_EraseSector(1);
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	f000 fd2f 	bl	8003490 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002a32:	2305      	movs	r3, #5
 8002a34:	2200      	movs	r2, #0
 8002a36:	2101      	movs	r1, #1
 8002a38:	482a      	ldr	r0, [pc, #168]	; (8002ae4 <MRT_get_flags+0x1b4>)
 8002a3a:	f000 fe73 	bl	8003724 <W25qxx_WriteSector>
	}

	//Ejection state flag
	if (!(ejection_state_flag >= 0 && ejection_state_flag <=4)){ //If random value (none was written)
 8002a3e:	4b2f      	ldr	r3, [pc, #188]	; (8002afc <MRT_get_flags+0x1cc>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d90f      	bls.n	8002a66 <MRT_get_flags+0x136>
		ejection_state_flag = 0;
 8002a46:	4b2d      	ldr	r3, [pc, #180]	; (8002afc <MRT_get_flags+0x1cc>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[EJECTION_STATE_FLAG_OFFSET] = ejection_state_flag;
 8002a4c:	4b2b      	ldr	r3, [pc, #172]	; (8002afc <MRT_get_flags+0x1cc>)
 8002a4e:	781a      	ldrb	r2, [r3, #0]
 8002a50:	4b24      	ldr	r3, [pc, #144]	; (8002ae4 <MRT_get_flags+0x1b4>)
 8002a52:	711a      	strb	r2, [r3, #4]
		W25qxx_EraseSector(1);
 8002a54:	2001      	movs	r0, #1
 8002a56:	f000 fd1b 	bl	8003490 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002a5a:	2305      	movs	r3, #5
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2101      	movs	r1, #1
 8002a60:	4820      	ldr	r0, [pc, #128]	; (8002ae4 <MRT_get_flags+0x1b4>)
 8002a62:	f000 fe5f 	bl	8003724 <W25qxx_WriteSector>
	}


	//Check RTC time values
	//Hours
	if (!(prev_hours >= 0 && prev_hours < 24)){ //If random value (none was written)
 8002a66:	4b26      	ldr	r3, [pc, #152]	; (8002b00 <MRT_get_flags+0x1d0>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b17      	cmp	r3, #23
 8002a6c:	d90f      	bls.n	8002a8e <MRT_get_flags+0x15e>
		prev_hours = 0;
 8002a6e:	4b24      	ldr	r3, [pc, #144]	; (8002b00 <MRT_get_flags+0x1d0>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_HOURS_OFFSET] = prev_hours;
 8002a74:	4b22      	ldr	r3, [pc, #136]	; (8002b00 <MRT_get_flags+0x1d0>)
 8002a76:	781a      	ldrb	r2, [r3, #0]
 8002a78:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <MRT_get_flags+0x1b8>)
 8002a7a:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(2);
 8002a7c:	2002      	movs	r0, #2
 8002a7e:	f000 fd07 	bl	8003490 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8002a82:	2303      	movs	r3, #3
 8002a84:	2200      	movs	r2, #0
 8002a86:	2102      	movs	r1, #2
 8002a88:	4817      	ldr	r0, [pc, #92]	; (8002ae8 <MRT_get_flags+0x1b8>)
 8002a8a:	f000 fe4b 	bl	8003724 <W25qxx_WriteSector>
	}

	//Minutes
	if (!(prev_min >= 0 && prev_min < 60)){ //If random value (none was written)
 8002a8e:	4b1d      	ldr	r3, [pc, #116]	; (8002b04 <MRT_get_flags+0x1d4>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b3b      	cmp	r3, #59	; 0x3b
 8002a94:	d90f      	bls.n	8002ab6 <MRT_get_flags+0x186>
		prev_min = 0;
 8002a96:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <MRT_get_flags+0x1d4>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_MIN_OFFSET] = prev_min;
 8002a9c:	4b19      	ldr	r3, [pc, #100]	; (8002b04 <MRT_get_flags+0x1d4>)
 8002a9e:	781a      	ldrb	r2, [r3, #0]
 8002aa0:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <MRT_get_flags+0x1b8>)
 8002aa2:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(2);
 8002aa4:	2002      	movs	r0, #2
 8002aa6:	f000 fcf3 	bl	8003490 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8002aaa:	2303      	movs	r3, #3
 8002aac:	2200      	movs	r2, #0
 8002aae:	2102      	movs	r1, #2
 8002ab0:	480d      	ldr	r0, [pc, #52]	; (8002ae8 <MRT_get_flags+0x1b8>)
 8002ab2:	f000 fe37 	bl	8003724 <W25qxx_WriteSector>
	}

	//Seconds
	if (!(prev_sec >= 0 && prev_sec < 60)){ //If random value (none was written)
 8002ab6:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <MRT_get_flags+0x1d8>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b3b      	cmp	r3, #59	; 0x3b
 8002abc:	d90f      	bls.n	8002ade <MRT_get_flags+0x1ae>
		prev_sec = 0;
 8002abe:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <MRT_get_flags+0x1d8>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_SEC_OFFSET] = prev_sec;
 8002ac4:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <MRT_get_flags+0x1d8>)
 8002ac6:	781a      	ldrb	r2, [r3, #0]
 8002ac8:	4b07      	ldr	r3, [pc, #28]	; (8002ae8 <MRT_get_flags+0x1b8>)
 8002aca:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(2);
 8002acc:	2002      	movs	r0, #2
 8002ace:	f000 fcdf 	bl	8003490 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2102      	movs	r1, #2
 8002ad8:	4803      	ldr	r0, [pc, #12]	; (8002ae8 <MRT_get_flags+0x1b8>)
 8002ada:	f000 fe23 	bl	8003724 <W25qxx_WriteSector>
	}
}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	200055f0 	.word	0x200055f0
 8002ae8:	200055f8 	.word	0x200055f8
 8002aec:	200002d9 	.word	0x200002d9
 8002af0:	200002d8 	.word	0x200002d8
 8002af4:	200002da 	.word	0x200002da
 8002af8:	200002db 	.word	0x200002db
 8002afc:	200002dc 	.word	0x200002dc
 8002b00:	200002dd 	.word	0x200002dd
 8002b04:	200002de 	.word	0x200002de
 8002b08:	200002df 	.word	0x200002df

08002b0c <MRT_update_flags_values>:
		flash_time_buffer[i] = *flash_time[i];
	}
}


void MRT_update_flags_values(void){
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8002b12:	2300      	movs	r3, #0
 8002b14:	607b      	str	r3, [r7, #4]
 8002b16:	e00b      	b.n	8002b30 <MRT_update_flags_values+0x24>
		*flash_flags[i] = flash_flags_buffer[i];
 8002b18:	4a13      	ldr	r2, [pc, #76]	; (8002b68 <MRT_update_flags_values+0x5c>)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b20:	4912      	ldr	r1, [pc, #72]	; (8002b6c <MRT_update_flags_values+0x60>)
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	440a      	add	r2, r1
 8002b26:	7812      	ldrb	r2, [r2, #0]
 8002b28:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	607b      	str	r3, [r7, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	ddf0      	ble.n	8002b18 <MRT_update_flags_values+0xc>
	}
	for (int i = 0; i < 3; i++){
 8002b36:	2300      	movs	r3, #0
 8002b38:	603b      	str	r3, [r7, #0]
 8002b3a:	e00b      	b.n	8002b54 <MRT_update_flags_values+0x48>
		*flash_time[i] = flash_time_buffer[i];
 8002b3c:	4a0c      	ldr	r2, [pc, #48]	; (8002b70 <MRT_update_flags_values+0x64>)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b44:	490b      	ldr	r1, [pc, #44]	; (8002b74 <MRT_update_flags_values+0x68>)
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	440a      	add	r2, r1
 8002b4a:	7812      	ldrb	r2, [r2, #0]
 8002b4c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++){
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	3301      	adds	r3, #1
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	ddf0      	ble.n	8002b3c <MRT_update_flags_values+0x30>
	}
}
 8002b5a:	bf00      	nop
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	20000004 	.word	0x20000004
 8002b6c:	200055f0 	.word	0x200055f0
 8002b70:	20000018 	.word	0x20000018
 8002b74:	200055f8 	.word	0x200055f8

08002b78 <myprintf>:


uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value);
void str2upper(char* string, char* upper);

void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 8002b78:	b40f      	push	{r0, r1, r2, r3}
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b8e:	480a      	ldr	r0, [pc, #40]	; (8002bb8 <myprintf+0x40>)
 8002b90:	f017 f8ac 	bl	8019cec <vsniprintf>
  va_end(args);

  //CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
  HAL_UART_Transmit(&DEBUG_UART, (uint8_t*)buffer, strlen(buffer), -1);
 8002b94:	4808      	ldr	r0, [pc, #32]	; (8002bb8 <myprintf+0x40>)
 8002b96:	f7fd fb35 	bl	8000204 <strlen>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba2:	4905      	ldr	r1, [pc, #20]	; (8002bb8 <myprintf+0x40>)
 8002ba4:	4805      	ldr	r0, [pc, #20]	; (8002bbc <myprintf+0x44>)
 8002ba6:	f00c fb48 	bl	800f23a <HAL_UART_Transmit>

}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bb4:	b004      	add	sp, #16
 8002bb6:	4770      	bx	lr
 8002bb8:	200002e4 	.word	0x200002e4
 8002bbc:	20005560 	.word	0x20005560

08002bc0 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08a      	sub	sp, #40	; 0x28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 8002bcc:	2201      	movs	r2, #1
 8002bce:	4932      	ldr	r1, [pc, #200]	; (8002c98 <sd_init_dynamic_filename+0xd8>)
 8002bd0:	4832      	ldr	r0, [pc, #200]	; (8002c9c <sd_init_dynamic_filename+0xdc>)
 8002bd2:	f010 fd99 	bl	8013708 <f_mount>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 8002bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8002be4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002be8:	4619      	mov	r1, r3
 8002bea:	482d      	ldr	r0, [pc, #180]	; (8002ca0 <sd_init_dynamic_filename+0xe0>)
 8002bec:	f7ff ffc4 	bl	8002b78 <myprintf>
		return fres;
 8002bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bf4:	e04b      	b.n	8002c8e <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 8002bfa:	f107 0320 	add.w	r3, r7, #32
 8002bfe:	461a      	mov	r2, r3
 8002c00:	68f9      	ldr	r1, [r7, #12]
 8002c02:	4825      	ldr	r0, [pc, #148]	; (8002c98 <sd_init_dynamic_filename+0xd8>)
 8002c04:	f000 f884 	bl	8002d10 <scan_files>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	f107 0310 	add.w	r3, r7, #16
 8002c16:	4923      	ldr	r1, [pc, #140]	; (8002ca4 <sd_init_dynamic_filename+0xe4>)
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f015 fdad 	bl	8018778 <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 8002c1e:	f107 0310 	add.w	r3, r7, #16
 8002c22:	4619      	mov	r1, r3
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f015 fe45 	bl	80188b4 <strcpy>
 8002c2a:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8002c2c:	f107 0310 	add.w	r3, r7, #16
 8002c30:	221a      	movs	r2, #26
 8002c32:	4619      	mov	r1, r3
 8002c34:	481c      	ldr	r0, [pc, #112]	; (8002ca8 <sd_init_dynamic_filename+0xe8>)
 8002c36:	f010 fdcb 	bl	80137d0 <f_open>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8002c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d11a      	bne.n	8002c7e <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8002c48:	4818      	ldr	r0, [pc, #96]	; (8002cac <sd_init_dynamic_filename+0xec>)
 8002c4a:	f7ff ff95 	bl	8002b78 <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8002c4e:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <sd_init_dynamic_filename+0xe8>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	4619      	mov	r1, r3
 8002c54:	4814      	ldr	r0, [pc, #80]	; (8002ca8 <sd_init_dynamic_filename+0xe8>)
 8002c56:	f011 f9dc 	bl	8014012 <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 8002c5a:	4915      	ldr	r1, [pc, #84]	; (8002cb0 <sd_init_dynamic_filename+0xf0>)
 8002c5c:	4815      	ldr	r0, [pc, #84]	; (8002cb4 <sd_init_dynamic_filename+0xf4>)
 8002c5e:	f015 fd8b 	bl	8018778 <siprintf>
	sd_write(&fil, msg_buffer);
 8002c62:	4914      	ldr	r1, [pc, #80]	; (8002cb4 <sd_init_dynamic_filename+0xf4>)
 8002c64:	4810      	ldr	r0, [pc, #64]	; (8002ca8 <sd_init_dynamic_filename+0xe8>)
 8002c66:	f000 f829 	bl	8002cbc <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 8002c6a:	68b9      	ldr	r1, [r7, #8]
 8002c6c:	480e      	ldr	r0, [pc, #56]	; (8002ca8 <sd_init_dynamic_filename+0xe8>)
 8002c6e:	f000 f825 	bl	8002cbc <sd_write>
	f_close(&fil);
 8002c72:	480d      	ldr	r0, [pc, #52]	; (8002ca8 <sd_init_dynamic_filename+0xe8>)
 8002c74:	f011 f99e 	bl	8013fb4 <f_close>

	return fres;
 8002c78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c7c:	e007      	b.n	8002c8e <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 8002c7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c82:	4619      	mov	r1, r3
 8002c84:	480c      	ldr	r0, [pc, #48]	; (8002cb8 <sd_init_dynamic_filename+0xf8>)
 8002c86:	f7ff ff77 	bl	8002b78 <myprintf>
		return fres;
 8002c8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3728      	adds	r7, #40	; 0x28
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	0801d1f0 	.word	0x0801d1f0
 8002c9c:	200055fc 	.word	0x200055fc
 8002ca0:	0801d1f4 	.word	0x0801d1f4
 8002ca4:	0801d270 	.word	0x0801d270
 8002ca8:	20006004 	.word	0x20006004
 8002cac:	0801d20c 	.word	0x0801d20c
 8002cb0:	0801d250 	.word	0x0801d250
 8002cb4:	20005830 	.word	0x20005830
 8002cb8:	0801d23c 	.word	0x0801d23c

08002cbc <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8002cc6:	6838      	ldr	r0, [r7, #0]
 8002cc8:	f7fd fa9c 	bl	8000204 <strlen>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	f107 0308 	add.w	r3, r7, #8
 8002cd2:	6839      	ldr	r1, [r7, #0]
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f010 ff40 	bl	8013b5a <f_write>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d107      	bne.n	8002cf4 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4807      	ldr	r0, [pc, #28]	; (8002d08 <sd_write+0x4c>)
 8002cea:	f7ff ff45 	bl	8002b78 <myprintf>
		return bytesWrote;
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	b25b      	sxtb	r3, r3
 8002cf2:	e004      	b.n	8002cfe <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8002cf4:	4805      	ldr	r0, [pc, #20]	; (8002d0c <sd_write+0x50>)
 8002cf6:	f7ff ff3f 	bl	8002b78 <myprintf>
		return -1;
 8002cfa:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	0801d27c 	.word	0x0801d27c
 8002d0c:	0801d2a0 	.word	0x0801d2a0

08002d10 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8002d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d12:	b099      	sub	sp, #100	; 0x64
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
 8002d1c:	466b      	mov	r3, sp
 8002d1e:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8002d20:	68b8      	ldr	r0, [r7, #8]
 8002d22:	f7fd fa6f 	bl	8000204 <strlen>
 8002d26:	4603      	mov	r3, r0
 8002d28:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 8002d2c:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8002d30:	4623      	mov	r3, r4
 8002d32:	3b01      	subs	r3, #1
 8002d34:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d36:	b2e0      	uxtb	r0, r4
 8002d38:	f04f 0100 	mov.w	r1, #0
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	00cb      	lsls	r3, r1, #3
 8002d46:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002d4a:	00c2      	lsls	r2, r0, #3
 8002d4c:	b2e0      	uxtb	r0, r4
 8002d4e:	f04f 0100 	mov.w	r1, #0
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	00cb      	lsls	r3, r1, #3
 8002d5c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002d60:	00c2      	lsls	r2, r0, #3
 8002d62:	4623      	mov	r3, r4
 8002d64:	3307      	adds	r3, #7
 8002d66:	08db      	lsrs	r3, r3, #3
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	ebad 0d03 	sub.w	sp, sp, r3
 8002d6e:	466b      	mov	r3, sp
 8002d70:	3300      	adds	r3, #0
 8002d72:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 8002d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d76:	4619      	mov	r1, r3
 8002d78:	68b8      	ldr	r0, [r7, #8]
 8002d7a:	f000 f8ff 	bl	8002f7c <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 8002d88:	f107 0318 	add.w	r3, r7, #24
 8002d8c:	68f9      	ldr	r1, [r7, #12]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f011 fb92 	bl	80144b8 <f_opendir>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 8002d9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d16c      	bne.n	8002e7c <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8002da2:	f107 0318 	add.w	r3, r7, #24
 8002da6:	4939      	ldr	r1, [pc, #228]	; (8002e8c <scan_files+0x17c>)
 8002da8:	4618      	mov	r0, r3
 8002daa:	f011 fc29 	bl	8014600 <f_readdir>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8002db4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d15a      	bne.n	8002e72 <scan_files+0x162>
 8002dbc:	4b33      	ldr	r3, [pc, #204]	; (8002e8c <scan_files+0x17c>)
 8002dbe:	7a5b      	ldrb	r3, [r3, #9]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d056      	beq.n	8002e72 <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8002dc4:	4b31      	ldr	r3, [pc, #196]	; (8002e8c <scan_files+0x17c>)
 8002dc6:	7a1b      	ldrb	r3, [r3, #8]
 8002dc8:	f003 0310 	and.w	r3, r3, #16
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d14e      	bne.n	8002e6e <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8002dd0:	466b      	mov	r3, sp
 8002dd2:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8002dd4:	482e      	ldr	r0, [pc, #184]	; (8002e90 <scan_files+0x180>)
 8002dd6:	f7fd fa15 	bl	8000204 <strlen>
 8002dda:	4604      	mov	r4, r0
 8002ddc:	4623      	mov	r3, r4
 8002dde:	3b01      	subs	r3, #1
 8002de0:	653b      	str	r3, [r7, #80]	; 0x50
 8002de2:	4620      	mov	r0, r4
 8002de4:	f04f 0100 	mov.w	r1, #0
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	f04f 0300 	mov.w	r3, #0
 8002df0:	00cb      	lsls	r3, r1, #3
 8002df2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002df6:	00c2      	lsls	r2, r0, #3
 8002df8:	4620      	mov	r0, r4
 8002dfa:	f04f 0100 	mov.w	r1, #0
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	00cb      	lsls	r3, r1, #3
 8002e08:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002e0c:	00c2      	lsls	r2, r0, #3
 8002e0e:	1de3      	adds	r3, r4, #7
 8002e10:	08db      	lsrs	r3, r3, #3
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	ebad 0d03 	sub.w	sp, sp, r3
 8002e18:	466b      	mov	r3, sp
 8002e1a:	3300      	adds	r3, #0
 8002e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 8002e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e20:	4619      	mov	r1, r3
 8002e22:	481b      	ldr	r0, [pc, #108]	; (8002e90 <scan_files+0x180>)
 8002e24:	f000 f8aa 	bl	8002f7c <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 8002e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e2a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4817      	ldr	r0, [pc, #92]	; (8002e90 <scan_files+0x180>)
 8002e32:	f015 fd47 	bl	80188c4 <strncmp>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 8002e3c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d112      	bne.n	8002e6a <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 8002e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e46:	f107 0214 	add.w	r2, r7, #20
 8002e4a:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 f820 	bl	8002e94 <extract_filename_suffix>
 8002e54:	4603      	mov	r3, r0
 8002e56:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d202      	bcs.n	8002e6a <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	46b5      	mov	sp, r6
 8002e6c:	e799      	b.n	8002da2 <scan_files+0x92>
            	continue; // don't enter directory
 8002e6e:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8002e70:	e797      	b.n	8002da2 <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 8002e72:	f107 0318 	add.w	r3, r7, #24
 8002e76:	4618      	mov	r0, r3
 8002e78:	f011 fb97 	bl	80145aa <f_closedir>
    }

    return res;
 8002e7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002e80:	46ad      	mov	sp, r5
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3764      	adds	r7, #100	; 0x64
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	200003e4 	.word	0x200003e4
 8002e90:	200003ed 	.word	0x200003ed

08002e94 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 8002e94:	b5b0      	push	{r4, r5, r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	72fb      	strb	r3, [r7, #11]
 8002ea2:	466b      	mov	r3, sp
 8002ea4:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f7fd f9ac 	bl	8000204 <strlen>
 8002eac:	4603      	mov	r3, r0
 8002eae:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 8002eb0:	2308      	movs	r3, #8
 8002eb2:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 8002eb4:	7f7c      	ldrb	r4, [r7, #29]
 8002eb6:	4623      	mov	r3, r4
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	61bb      	str	r3, [r7, #24]
 8002ebc:	b2e0      	uxtb	r0, r4
 8002ebe:	f04f 0100 	mov.w	r1, #0
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	f04f 0300 	mov.w	r3, #0
 8002eca:	00cb      	lsls	r3, r1, #3
 8002ecc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002ed0:	00c2      	lsls	r2, r0, #3
 8002ed2:	b2e0      	uxtb	r0, r4
 8002ed4:	f04f 0100 	mov.w	r1, #0
 8002ed8:	f04f 0200 	mov.w	r2, #0
 8002edc:	f04f 0300 	mov.w	r3, #0
 8002ee0:	00cb      	lsls	r3, r1, #3
 8002ee2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002ee6:	00c2      	lsls	r2, r0, #3
 8002ee8:	4623      	mov	r3, r4
 8002eea:	3307      	adds	r3, #7
 8002eec:	08db      	lsrs	r3, r3, #3
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	ebad 0d03 	sub.w	sp, sp, r3
 8002ef4:	466b      	mov	r3, sp
 8002ef6:	3300      	adds	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	77fb      	strb	r3, [r7, #31]
 8002efe:	e014      	b.n	8002f2a <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8002f00:	7afb      	ldrb	r3, [r7, #11]
 8002f02:	1e5a      	subs	r2, r3, #1
 8002f04:	7ffb      	ldrb	r3, [r7, #31]
 8002f06:	441a      	add	r2, r3
 8002f08:	7fbb      	ldrb	r3, [r7, #30]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	da11      	bge.n	8002f34 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 8002f10:	7afa      	ldrb	r2, [r7, #11]
 8002f12:	7ffb      	ldrb	r3, [r7, #31]
 8002f14:	4413      	add	r3, r2
 8002f16:	461a      	mov	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	441a      	add	r2, r3
 8002f1c:	7ffb      	ldrb	r3, [r7, #31]
 8002f1e:	7811      	ldrb	r1, [r2, #0]
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 8002f24:	7ffb      	ldrb	r3, [r7, #31]
 8002f26:	3301      	adds	r3, #1
 8002f28:	77fb      	strb	r3, [r7, #31]
 8002f2a:	7ffa      	ldrb	r2, [r7, #31]
 8002f2c:	7f7b      	ldrb	r3, [r7, #29]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d3e6      	bcc.n	8002f00 <extract_filename_suffix+0x6c>
 8002f32:	e000      	b.n	8002f36 <extract_filename_suffix+0xa2>
		}
		else break;
 8002f34:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f107 0110 	add.w	r1, r7, #16
 8002f3c:	220a      	movs	r2, #10
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f016 fbe0 	bl	8019704 <strtol>
 8002f44:	4603      	mov	r3, r0
 8002f46:	461a      	mov	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d00a      	beq.n	8002f6a <extract_filename_suffix+0xd6>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f5c:	d005      	beq.n	8002f6a <extract_filename_suffix+0xd6>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d101      	bne.n	8002f6e <extract_filename_suffix+0xda>
	{
		return 1;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <extract_filename_suffix+0xdc>
	}

	return 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	46ad      	mov	sp, r5
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3720      	adds	r7, #32
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002f7c <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 8002f7c:	b590      	push	{r4, r7, lr}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	73fb      	strb	r3, [r7, #15]
 8002f8a:	e019      	b.n	8002fc0 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	4413      	add	r3, r2
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	73bb      	strb	r3, [r7, #14]
 8002f96:	7bbb      	ldrb	r3, [r7, #14]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	4a0f      	ldr	r2, [pc, #60]	; (8002fd8 <str2upper+0x5c>)
 8002f9c:	4413      	add	r3, r2
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d102      	bne.n	8002fae <str2upper+0x32>
 8002fa8:	7bbb      	ldrb	r3, [r7, #14]
 8002faa:	3b20      	subs	r3, #32
 8002fac:	e000      	b.n	8002fb0 <str2upper+0x34>
 8002fae:	7bbb      	ldrb	r3, [r7, #14]
 8002fb0:	7bfa      	ldrb	r2, [r7, #15]
 8002fb2:	6839      	ldr	r1, [r7, #0]
 8002fb4:	440a      	add	r2, r1
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	73fb      	strb	r3, [r7, #15]
 8002fc0:	7bfc      	ldrb	r4, [r7, #15]
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7fd f91e 	bl	8000204 <strlen>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	429c      	cmp	r4, r3
 8002fcc:	d3de      	bcc.n	8002f8c <str2upper+0x10>
	}
}
 8002fce:	bf00      	nop
 8002fd0:	bf00      	nop
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd90      	pop	{r4, r7, pc}
 8002fd8:	0801ed28 	.word	0x0801ed28

08002fdc <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8002fe6:	f107 020f 	add.w	r2, r7, #15
 8002fea:	1df9      	adds	r1, r7, #7
 8002fec:	2364      	movs	r3, #100	; 0x64
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	4804      	ldr	r0, [pc, #16]	; (8003004 <W25qxx_Spi+0x28>)
 8002ff4:	f00a fd56 	bl	800daa4 <HAL_SPI_TransmitReceive>
	return ret;
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	200053dc 	.word	0x200053dc

08003008 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	2300      	movs	r3, #0
 8003018:	607b      	str	r3, [r7, #4]
 800301a:	2300      	movs	r3, #0
 800301c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800301e:	2200      	movs	r2, #0
 8003020:	2140      	movs	r1, #64	; 0x40
 8003022:	4813      	ldr	r0, [pc, #76]	; (8003070 <W25qxx_ReadID+0x68>)
 8003024:	f006 fe8e 	bl	8009d44 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8003028:	209f      	movs	r0, #159	; 0x9f
 800302a:	f7ff ffd7 	bl	8002fdc <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800302e:	20a5      	movs	r0, #165	; 0xa5
 8003030:	f7ff ffd4 	bl	8002fdc <W25qxx_Spi>
 8003034:	4603      	mov	r3, r0
 8003036:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003038:	20a5      	movs	r0, #165	; 0xa5
 800303a:	f7ff ffcf 	bl	8002fdc <W25qxx_Spi>
 800303e:	4603      	mov	r3, r0
 8003040:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003042:	20a5      	movs	r0, #165	; 0xa5
 8003044:	f7ff ffca 	bl	8002fdc <W25qxx_Spi>
 8003048:	4603      	mov	r3, r0
 800304a:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800304c:	2201      	movs	r2, #1
 800304e:	2140      	movs	r1, #64	; 0x40
 8003050:	4807      	ldr	r0, [pc, #28]	; (8003070 <W25qxx_ReadID+0x68>)
 8003052:	f006 fe77 	bl	8009d44 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	041a      	lsls	r2, r3, #16
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	021b      	lsls	r3, r3, #8
 800305e:	4313      	orrs	r3, r2
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
	return Temp;
 8003066:	68fb      	ldr	r3, [r7, #12]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40020c00 	.word	0x40020c00

08003074 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8003074:	b590      	push	{r4, r7, lr}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800307a:	2200      	movs	r2, #0
 800307c:	2140      	movs	r1, #64	; 0x40
 800307e:	4816      	ldr	r0, [pc, #88]	; (80030d8 <W25qxx_ReadUniqID+0x64>)
 8003080:	f006 fe60 	bl	8009d44 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8003084:	204b      	movs	r0, #75	; 0x4b
 8003086:	f7ff ffa9 	bl	8002fdc <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800308a:	2300      	movs	r3, #0
 800308c:	71fb      	strb	r3, [r7, #7]
 800308e:	e005      	b.n	800309c <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003090:	20a5      	movs	r0, #165	; 0xa5
 8003092:	f7ff ffa3 	bl	8002fdc <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	3301      	adds	r3, #1
 800309a:	71fb      	strb	r3, [r7, #7]
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	2b03      	cmp	r3, #3
 80030a0:	d9f6      	bls.n	8003090 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 80030a2:	2300      	movs	r3, #0
 80030a4:	71bb      	strb	r3, [r7, #6]
 80030a6:	e00b      	b.n	80030c0 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80030a8:	79bc      	ldrb	r4, [r7, #6]
 80030aa:	20a5      	movs	r0, #165	; 0xa5
 80030ac:	f7ff ff96 	bl	8002fdc <W25qxx_Spi>
 80030b0:	4603      	mov	r3, r0
 80030b2:	461a      	mov	r2, r3
 80030b4:	4b09      	ldr	r3, [pc, #36]	; (80030dc <W25qxx_ReadUniqID+0x68>)
 80030b6:	4423      	add	r3, r4
 80030b8:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 80030ba:	79bb      	ldrb	r3, [r7, #6]
 80030bc:	3301      	adds	r3, #1
 80030be:	71bb      	strb	r3, [r7, #6]
 80030c0:	79bb      	ldrb	r3, [r7, #6]
 80030c2:	2b07      	cmp	r3, #7
 80030c4:	d9f0      	bls.n	80030a8 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80030c6:	2201      	movs	r2, #1
 80030c8:	2140      	movs	r1, #64	; 0x40
 80030ca:	4803      	ldr	r0, [pc, #12]	; (80030d8 <W25qxx_ReadUniqID+0x64>)
 80030cc:	f006 fe3a 	bl	8009d44 <HAL_GPIO_WritePin>
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd90      	pop	{r4, r7, pc}
 80030d8:	40020c00 	.word	0x40020c00
 80030dc:	20006234 	.word	0x20006234

080030e0 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80030e4:	2200      	movs	r2, #0
 80030e6:	2140      	movs	r1, #64	; 0x40
 80030e8:	4807      	ldr	r0, [pc, #28]	; (8003108 <W25qxx_WriteEnable+0x28>)
 80030ea:	f006 fe2b 	bl	8009d44 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 80030ee:	2006      	movs	r0, #6
 80030f0:	f7ff ff74 	bl	8002fdc <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80030f4:	2201      	movs	r2, #1
 80030f6:	2140      	movs	r1, #64	; 0x40
 80030f8:	4803      	ldr	r0, [pc, #12]	; (8003108 <W25qxx_WriteEnable+0x28>)
 80030fa:	f006 fe23 	bl	8009d44 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80030fe:	2001      	movs	r0, #1
 8003100:	f011 fb74 	bl	80147ec <osDelay>
}
 8003104:	bf00      	nop
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40020c00 	.word	0x40020c00

0800310c <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8003116:	2300      	movs	r3, #0
 8003118:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800311a:	2200      	movs	r2, #0
 800311c:	2140      	movs	r1, #64	; 0x40
 800311e:	481c      	ldr	r0, [pc, #112]	; (8003190 <W25qxx_ReadStatusRegister+0x84>)
 8003120:	f006 fe10 	bl	8009d44 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8003124:	79fb      	ldrb	r3, [r7, #7]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d10c      	bne.n	8003144 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 800312a:	2005      	movs	r0, #5
 800312c:	f7ff ff56 	bl	8002fdc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003130:	20a5      	movs	r0, #165	; 0xa5
 8003132:	f7ff ff53 	bl	8002fdc <W25qxx_Spi>
 8003136:	4603      	mov	r3, r0
 8003138:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 800313a:	4a16      	ldr	r2, [pc, #88]	; (8003194 <W25qxx_ReadStatusRegister+0x88>)
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8003142:	e01b      	b.n	800317c <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d10c      	bne.n	8003164 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 800314a:	2035      	movs	r0, #53	; 0x35
 800314c:	f7ff ff46 	bl	8002fdc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003150:	20a5      	movs	r0, #165	; 0xa5
 8003152:	f7ff ff43 	bl	8002fdc <W25qxx_Spi>
 8003156:	4603      	mov	r3, r0
 8003158:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 800315a:	4a0e      	ldr	r2, [pc, #56]	; (8003194 <W25qxx_ReadStatusRegister+0x88>)
 800315c:	7bfb      	ldrb	r3, [r7, #15]
 800315e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8003162:	e00b      	b.n	800317c <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8003164:	2015      	movs	r0, #21
 8003166:	f7ff ff39 	bl	8002fdc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800316a:	20a5      	movs	r0, #165	; 0xa5
 800316c:	f7ff ff36 	bl	8002fdc <W25qxx_Spi>
 8003170:	4603      	mov	r3, r0
 8003172:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8003174:	4a07      	ldr	r2, [pc, #28]	; (8003194 <W25qxx_ReadStatusRegister+0x88>)
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800317c:	2201      	movs	r2, #1
 800317e:	2140      	movs	r1, #64	; 0x40
 8003180:	4803      	ldr	r0, [pc, #12]	; (8003190 <W25qxx_ReadStatusRegister+0x84>)
 8003182:	f006 fddf 	bl	8009d44 <HAL_GPIO_WritePin>
	return status;
 8003186:	7bfb      	ldrb	r3, [r7, #15]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40020c00 	.word	0x40020c00
 8003194:	20006234 	.word	0x20006234

08003198 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 800319c:	2001      	movs	r0, #1
 800319e:	f011 fb25 	bl	80147ec <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80031a2:	2200      	movs	r2, #0
 80031a4:	2140      	movs	r1, #64	; 0x40
 80031a6:	480f      	ldr	r0, [pc, #60]	; (80031e4 <W25qxx_WaitForWriteEnd+0x4c>)
 80031a8:	f006 fdcc 	bl	8009d44 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80031ac:	2005      	movs	r0, #5
 80031ae:	f7ff ff15 	bl	8002fdc <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80031b2:	20a5      	movs	r0, #165	; 0xa5
 80031b4:	f7ff ff12 	bl	8002fdc <W25qxx_Spi>
 80031b8:	4603      	mov	r3, r0
 80031ba:	461a      	mov	r2, r3
 80031bc:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <W25qxx_WaitForWriteEnd+0x50>)
 80031be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 80031c2:	2001      	movs	r0, #1
 80031c4:	f011 fb12 	bl	80147ec <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80031c8:	4b07      	ldr	r3, [pc, #28]	; (80031e8 <W25qxx_WaitForWriteEnd+0x50>)
 80031ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1ed      	bne.n	80031b2 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80031d6:	2201      	movs	r2, #1
 80031d8:	2140      	movs	r1, #64	; 0x40
 80031da:	4802      	ldr	r0, [pc, #8]	; (80031e4 <W25qxx_WaitForWriteEnd+0x4c>)
 80031dc:	f006 fdb2 	bl	8009d44 <HAL_GPIO_WritePin>
}
 80031e0:	bf00      	nop
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40020c00 	.word	0x40020c00
 80031e8:	20006234 	.word	0x20006234

080031ec <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 80031f2:	4b90      	ldr	r3, [pc, #576]	; (8003434 <W25qxx_Init+0x248>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 80031fa:	e002      	b.n	8003202 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 80031fc:	2001      	movs	r0, #1
 80031fe:	f011 faf5 	bl	80147ec <osDelay>
	while (HAL_GetTick() < 100)
 8003202:	f006 f825 	bl	8009250 <HAL_GetTick>
 8003206:	4603      	mov	r3, r0
 8003208:	2b63      	cmp	r3, #99	; 0x63
 800320a:	d9f7      	bls.n	80031fc <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800320c:	2201      	movs	r2, #1
 800320e:	2140      	movs	r1, #64	; 0x40
 8003210:	4889      	ldr	r0, [pc, #548]	; (8003438 <W25qxx_Init+0x24c>)
 8003212:	f006 fd97 	bl	8009d44 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8003216:	2064      	movs	r0, #100	; 0x64
 8003218:	f011 fae8 	bl	80147ec <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 800321c:	4887      	ldr	r0, [pc, #540]	; (800343c <W25qxx_Init+0x250>)
 800321e:	f015 fa49 	bl	80186b4 <puts>
#endif
	id = W25qxx_ReadID();
 8003222:	f7ff fef1 	bl	8003008 <W25qxx_ReadID>
 8003226:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	4885      	ldr	r0, [pc, #532]	; (8003440 <W25qxx_Init+0x254>)
 800322c:	f015 f9bc 	bl	80185a8 <iprintf>
#endif
	switch (id & 0x000000FF)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	b2db      	uxtb	r3, r3
 8003234:	3b11      	subs	r3, #17
 8003236:	2b0f      	cmp	r3, #15
 8003238:	f200 808b 	bhi.w	8003352 <W25qxx_Init+0x166>
 800323c:	a201      	add	r2, pc, #4	; (adr r2, 8003244 <W25qxx_Init+0x58>)
 800323e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003242:	bf00      	nop
 8003244:	0800333f 	.word	0x0800333f
 8003248:	0800332b 	.word	0x0800332b
 800324c:	08003317 	.word	0x08003317
 8003250:	08003303 	.word	0x08003303
 8003254:	080032ef 	.word	0x080032ef
 8003258:	080032db 	.word	0x080032db
 800325c:	080032c7 	.word	0x080032c7
 8003260:	080032b1 	.word	0x080032b1
 8003264:	0800329b 	.word	0x0800329b
 8003268:	08003353 	.word	0x08003353
 800326c:	08003353 	.word	0x08003353
 8003270:	08003353 	.word	0x08003353
 8003274:	08003353 	.word	0x08003353
 8003278:	08003353 	.word	0x08003353
 800327c:	08003353 	.word	0x08003353
 8003280:	08003285 	.word	0x08003285
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8003284:	4b6b      	ldr	r3, [pc, #428]	; (8003434 <W25qxx_Init+0x248>)
 8003286:	220a      	movs	r2, #10
 8003288:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800328a:	4b6a      	ldr	r3, [pc, #424]	; (8003434 <W25qxx_Init+0x248>)
 800328c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003290:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 8003292:	486c      	ldr	r0, [pc, #432]	; (8003444 <W25qxx_Init+0x258>)
 8003294:	f015 fa0e 	bl	80186b4 <puts>
#endif
		break;
 8003298:	e064      	b.n	8003364 <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 800329a:	4b66      	ldr	r3, [pc, #408]	; (8003434 <W25qxx_Init+0x248>)
 800329c:	2209      	movs	r2, #9
 800329e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 80032a0:	4b64      	ldr	r3, [pc, #400]	; (8003434 <W25qxx_Init+0x248>)
 80032a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032a6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 80032a8:	4867      	ldr	r0, [pc, #412]	; (8003448 <W25qxx_Init+0x25c>)
 80032aa:	f015 fa03 	bl	80186b4 <puts>
#endif
		break;
 80032ae:	e059      	b.n	8003364 <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 80032b0:	4b60      	ldr	r3, [pc, #384]	; (8003434 <W25qxx_Init+0x248>)
 80032b2:	2208      	movs	r2, #8
 80032b4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 80032b6:	4b5f      	ldr	r3, [pc, #380]	; (8003434 <W25qxx_Init+0x248>)
 80032b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032bc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 80032be:	4863      	ldr	r0, [pc, #396]	; (800344c <W25qxx_Init+0x260>)
 80032c0:	f015 f9f8 	bl	80186b4 <puts>
#endif
		break;
 80032c4:	e04e      	b.n	8003364 <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 80032c6:	4b5b      	ldr	r3, [pc, #364]	; (8003434 <W25qxx_Init+0x248>)
 80032c8:	2207      	movs	r2, #7
 80032ca:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80032cc:	4b59      	ldr	r3, [pc, #356]	; (8003434 <W25qxx_Init+0x248>)
 80032ce:	2280      	movs	r2, #128	; 0x80
 80032d0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 80032d2:	485f      	ldr	r0, [pc, #380]	; (8003450 <W25qxx_Init+0x264>)
 80032d4:	f015 f9ee 	bl	80186b4 <puts>
#endif
		break;
 80032d8:	e044      	b.n	8003364 <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 80032da:	4b56      	ldr	r3, [pc, #344]	; (8003434 <W25qxx_Init+0x248>)
 80032dc:	2206      	movs	r2, #6
 80032de:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 80032e0:	4b54      	ldr	r3, [pc, #336]	; (8003434 <W25qxx_Init+0x248>)
 80032e2:	2240      	movs	r2, #64	; 0x40
 80032e4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 80032e6:	485b      	ldr	r0, [pc, #364]	; (8003454 <W25qxx_Init+0x268>)
 80032e8:	f015 f9e4 	bl	80186b4 <puts>
#endif
		break;
 80032ec:	e03a      	b.n	8003364 <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 80032ee:	4b51      	ldr	r3, [pc, #324]	; (8003434 <W25qxx_Init+0x248>)
 80032f0:	2205      	movs	r2, #5
 80032f2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 80032f4:	4b4f      	ldr	r3, [pc, #316]	; (8003434 <W25qxx_Init+0x248>)
 80032f6:	2220      	movs	r2, #32
 80032f8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 80032fa:	4857      	ldr	r0, [pc, #348]	; (8003458 <W25qxx_Init+0x26c>)
 80032fc:	f015 f9da 	bl	80186b4 <puts>
#endif
		break;
 8003300:	e030      	b.n	8003364 <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8003302:	4b4c      	ldr	r3, [pc, #304]	; (8003434 <W25qxx_Init+0x248>)
 8003304:	2204      	movs	r2, #4
 8003306:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8003308:	4b4a      	ldr	r3, [pc, #296]	; (8003434 <W25qxx_Init+0x248>)
 800330a:	2210      	movs	r2, #16
 800330c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 800330e:	4853      	ldr	r0, [pc, #332]	; (800345c <W25qxx_Init+0x270>)
 8003310:	f015 f9d0 	bl	80186b4 <puts>
#endif
		break;
 8003314:	e026      	b.n	8003364 <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8003316:	4b47      	ldr	r3, [pc, #284]	; (8003434 <W25qxx_Init+0x248>)
 8003318:	2203      	movs	r2, #3
 800331a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800331c:	4b45      	ldr	r3, [pc, #276]	; (8003434 <W25qxx_Init+0x248>)
 800331e:	2208      	movs	r2, #8
 8003320:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 8003322:	484f      	ldr	r0, [pc, #316]	; (8003460 <W25qxx_Init+0x274>)
 8003324:	f015 f9c6 	bl	80186b4 <puts>
#endif
		break;
 8003328:	e01c      	b.n	8003364 <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800332a:	4b42      	ldr	r3, [pc, #264]	; (8003434 <W25qxx_Init+0x248>)
 800332c:	2202      	movs	r2, #2
 800332e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8003330:	4b40      	ldr	r3, [pc, #256]	; (8003434 <W25qxx_Init+0x248>)
 8003332:	2204      	movs	r2, #4
 8003334:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 8003336:	484b      	ldr	r0, [pc, #300]	; (8003464 <W25qxx_Init+0x278>)
 8003338:	f015 f9bc 	bl	80186b4 <puts>
#endif
		break;
 800333c:	e012      	b.n	8003364 <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 800333e:	4b3d      	ldr	r3, [pc, #244]	; (8003434 <W25qxx_Init+0x248>)
 8003340:	2201      	movs	r2, #1
 8003342:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8003344:	4b3b      	ldr	r3, [pc, #236]	; (8003434 <W25qxx_Init+0x248>)
 8003346:	2202      	movs	r2, #2
 8003348:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 800334a:	4847      	ldr	r0, [pc, #284]	; (8003468 <W25qxx_Init+0x27c>)
 800334c:	f015 f9b2 	bl	80186b4 <puts>
#endif
		break;
 8003350:	e008      	b.n	8003364 <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 8003352:	4846      	ldr	r0, [pc, #280]	; (800346c <W25qxx_Init+0x280>)
 8003354:	f015 f9ae 	bl	80186b4 <puts>
#endif
		w25qxx.Lock = 0;
 8003358:	4b36      	ldr	r3, [pc, #216]	; (8003434 <W25qxx_Init+0x248>)
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8003360:	2300      	movs	r3, #0
 8003362:	e063      	b.n	800342c <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 8003364:	4b33      	ldr	r3, [pc, #204]	; (8003434 <W25qxx_Init+0x248>)
 8003366:	f44f 7280 	mov.w	r2, #256	; 0x100
 800336a:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800336c:	4b31      	ldr	r3, [pc, #196]	; (8003434 <W25qxx_Init+0x248>)
 800336e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003372:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8003374:	4b2f      	ldr	r3, [pc, #188]	; (8003434 <W25qxx_Init+0x248>)
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	4a2e      	ldr	r2, [pc, #184]	; (8003434 <W25qxx_Init+0x248>)
 800337c:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800337e:	4b2d      	ldr	r3, [pc, #180]	; (8003434 <W25qxx_Init+0x248>)
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	4a2c      	ldr	r2, [pc, #176]	; (8003434 <W25qxx_Init+0x248>)
 8003384:	6912      	ldr	r2, [r2, #16]
 8003386:	fb02 f303 	mul.w	r3, r2, r3
 800338a:	4a2a      	ldr	r2, [pc, #168]	; (8003434 <W25qxx_Init+0x248>)
 800338c:	8952      	ldrh	r2, [r2, #10]
 800338e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003392:	4a28      	ldr	r2, [pc, #160]	; (8003434 <W25qxx_Init+0x248>)
 8003394:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8003396:	4b27      	ldr	r3, [pc, #156]	; (8003434 <W25qxx_Init+0x248>)
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	4a25      	ldr	r2, [pc, #148]	; (8003434 <W25qxx_Init+0x248>)
 800339e:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80033a0:	4b24      	ldr	r3, [pc, #144]	; (8003434 <W25qxx_Init+0x248>)
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	4a23      	ldr	r2, [pc, #140]	; (8003434 <W25qxx_Init+0x248>)
 80033a6:	6912      	ldr	r2, [r2, #16]
 80033a8:	fb02 f303 	mul.w	r3, r2, r3
 80033ac:	0a9b      	lsrs	r3, r3, #10
 80033ae:	4a21      	ldr	r2, [pc, #132]	; (8003434 <W25qxx_Init+0x248>)
 80033b0:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80033b2:	f7ff fe5f 	bl	8003074 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80033b6:	2001      	movs	r0, #1
 80033b8:	f7ff fea8 	bl	800310c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80033bc:	2002      	movs	r0, #2
 80033be:	f7ff fea5 	bl	800310c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80033c2:	2003      	movs	r0, #3
 80033c4:	f7ff fea2 	bl	800310c <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 80033c8:	4b1a      	ldr	r3, [pc, #104]	; (8003434 <W25qxx_Init+0x248>)
 80033ca:	895b      	ldrh	r3, [r3, #10]
 80033cc:	4619      	mov	r1, r3
 80033ce:	4828      	ldr	r0, [pc, #160]	; (8003470 <W25qxx_Init+0x284>)
 80033d0:	f015 f8ea 	bl	80185a8 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 80033d4:	4b17      	ldr	r3, [pc, #92]	; (8003434 <W25qxx_Init+0x248>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	4619      	mov	r1, r3
 80033da:	4826      	ldr	r0, [pc, #152]	; (8003474 <W25qxx_Init+0x288>)
 80033dc:	f015 f8e4 	bl	80185a8 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 80033e0:	4b14      	ldr	r3, [pc, #80]	; (8003434 <W25qxx_Init+0x248>)
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	4619      	mov	r1, r3
 80033e6:	4824      	ldr	r0, [pc, #144]	; (8003478 <W25qxx_Init+0x28c>)
 80033e8:	f015 f8de 	bl	80185a8 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 80033ec:	4b11      	ldr	r3, [pc, #68]	; (8003434 <W25qxx_Init+0x248>)
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	4619      	mov	r1, r3
 80033f2:	4822      	ldr	r0, [pc, #136]	; (800347c <W25qxx_Init+0x290>)
 80033f4:	f015 f8d8 	bl	80185a8 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 80033f8:	4b0e      	ldr	r3, [pc, #56]	; (8003434 <W25qxx_Init+0x248>)
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	4619      	mov	r1, r3
 80033fe:	4820      	ldr	r0, [pc, #128]	; (8003480 <W25qxx_Init+0x294>)
 8003400:	f015 f8d2 	bl	80185a8 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <W25qxx_Init+0x248>)
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	4619      	mov	r1, r3
 800340a:	481e      	ldr	r0, [pc, #120]	; (8003484 <W25qxx_Init+0x298>)
 800340c:	f015 f8cc 	bl	80185a8 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8003410:	4b08      	ldr	r3, [pc, #32]	; (8003434 <W25qxx_Init+0x248>)
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	4619      	mov	r1, r3
 8003416:	481c      	ldr	r0, [pc, #112]	; (8003488 <W25qxx_Init+0x29c>)
 8003418:	f015 f8c6 	bl	80185a8 <iprintf>
	printf("w25qxx Init Done\r\n");
 800341c:	481b      	ldr	r0, [pc, #108]	; (800348c <W25qxx_Init+0x2a0>)
 800341e:	f015 f949 	bl	80186b4 <puts>
#endif
	w25qxx.Lock = 0;
 8003422:	4b04      	ldr	r3, [pc, #16]	; (8003434 <W25qxx_Init+0x248>)
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800342a:	2301      	movs	r3, #1
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20006234 	.word	0x20006234
 8003438:	40020c00 	.word	0x40020c00
 800343c:	0801d2b8 	.word	0x0801d2b8
 8003440:	0801d2d0 	.word	0x0801d2d0
 8003444:	0801d2e4 	.word	0x0801d2e4
 8003448:	0801d2fc 	.word	0x0801d2fc
 800344c:	0801d314 	.word	0x0801d314
 8003450:	0801d32c 	.word	0x0801d32c
 8003454:	0801d344 	.word	0x0801d344
 8003458:	0801d35c 	.word	0x0801d35c
 800345c:	0801d374 	.word	0x0801d374
 8003460:	0801d38c 	.word	0x0801d38c
 8003464:	0801d3a4 	.word	0x0801d3a4
 8003468:	0801d3bc 	.word	0x0801d3bc
 800346c:	0801d3d4 	.word	0x0801d3d4
 8003470:	0801d3e8 	.word	0x0801d3e8
 8003474:	0801d408 	.word	0x0801d408
 8003478:	0801d420 	.word	0x0801d420
 800347c:	0801d440 	.word	0x0801d440
 8003480:	0801d45c 	.word	0x0801d45c
 8003484:	0801d47c 	.word	0x0801d47c
 8003488:	0801d498 	.word	0x0801d498
 800348c:	0801d4b8 	.word	0x0801d4b8

08003490 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8003498:	e002      	b.n	80034a0 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 800349a:	2001      	movs	r0, #1
 800349c:	f011 f9a6 	bl	80147ec <osDelay>
	while (w25qxx.Lock == 1)
 80034a0:	4b2d      	ldr	r3, [pc, #180]	; (8003558 <W25qxx_EraseSector+0xc8>)
 80034a2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d0f7      	beq.n	800349a <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 80034aa:	4b2b      	ldr	r3, [pc, #172]	; (8003558 <W25qxx_EraseSector+0xc8>)
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 80034b2:	f005 fecd 	bl	8009250 <HAL_GetTick>
 80034b6:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	4828      	ldr	r0, [pc, #160]	; (800355c <W25qxx_EraseSector+0xcc>)
 80034bc:	f015 f874 	bl	80185a8 <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 80034c0:	f7ff fe6a 	bl	8003198 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80034c4:	4b24      	ldr	r3, [pc, #144]	; (8003558 <W25qxx_EraseSector+0xc8>)
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	fb02 f303 	mul.w	r3, r2, r3
 80034ce:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 80034d0:	f7ff fe06 	bl	80030e0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80034d4:	2200      	movs	r2, #0
 80034d6:	2140      	movs	r1, #64	; 0x40
 80034d8:	4821      	ldr	r0, [pc, #132]	; (8003560 <W25qxx_EraseSector+0xd0>)
 80034da:	f006 fc33 	bl	8009d44 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80034de:	4b1e      	ldr	r3, [pc, #120]	; (8003558 <W25qxx_EraseSector+0xc8>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d909      	bls.n	80034fa <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 80034e6:	2021      	movs	r0, #33	; 0x21
 80034e8:	f7ff fd78 	bl	8002fdc <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	0e1b      	lsrs	r3, r3, #24
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff fd72 	bl	8002fdc <W25qxx_Spi>
 80034f8:	e002      	b.n	8003500 <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 80034fa:	2020      	movs	r0, #32
 80034fc:	f7ff fd6e 	bl	8002fdc <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	0c1b      	lsrs	r3, r3, #16
 8003504:	b2db      	uxtb	r3, r3
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff fd68 	bl	8002fdc <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	0a1b      	lsrs	r3, r3, #8
 8003510:	b2db      	uxtb	r3, r3
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff fd62 	bl	8002fdc <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff fd5d 	bl	8002fdc <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003522:	2201      	movs	r2, #1
 8003524:	2140      	movs	r1, #64	; 0x40
 8003526:	480e      	ldr	r0, [pc, #56]	; (8003560 <W25qxx_EraseSector+0xd0>)
 8003528:	f006 fc0c 	bl	8009d44 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800352c:	f7ff fe34 	bl	8003198 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 8003530:	f005 fe8e 	bl	8009250 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	4619      	mov	r1, r3
 800353c:	4809      	ldr	r0, [pc, #36]	; (8003564 <W25qxx_EraseSector+0xd4>)
 800353e:	f015 f833 	bl	80185a8 <iprintf>
#endif
	W25qxx_Delay(1);
 8003542:	2001      	movs	r0, #1
 8003544:	f011 f952 	bl	80147ec <osDelay>
	w25qxx.Lock = 0;
 8003548:	4b03      	ldr	r3, [pc, #12]	; (8003558 <W25qxx_EraseSector+0xc8>)
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003550:	bf00      	nop
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	20006234 	.word	0x20006234
 800355c:	0801d510 	.word	0x0801d510
 8003560:	40020c00 	.word	0x40020c00
 8003564:	0801d534 	.word	0x0801d534

08003568 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8003570:	4b07      	ldr	r3, [pc, #28]	; (8003590 <W25qxx_SectorToPage+0x28>)
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	fb02 f303 	mul.w	r3, r2, r3
 800357a:	4a05      	ldr	r2, [pc, #20]	; (8003590 <W25qxx_SectorToPage+0x28>)
 800357c:	8952      	ldrh	r2, [r2, #10]
 800357e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8003582:	4618      	mov	r0, r3
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20006234 	.word	0x20006234

08003594 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80035a2:	e002      	b.n	80035aa <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80035a4:	2001      	movs	r0, #1
 80035a6:	f011 f921 	bl	80147ec <osDelay>
	while (w25qxx.Lock == 1)
 80035aa:	4b57      	ldr	r3, [pc, #348]	; (8003708 <W25qxx_WritePage+0x174>)
 80035ac:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d0f7      	beq.n	80035a4 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 80035b4:	4b54      	ldr	r3, [pc, #336]	; (8003708 <W25qxx_WritePage+0x174>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4413      	add	r3, r2
 80035c2:	4a51      	ldr	r2, [pc, #324]	; (8003708 <W25qxx_WritePage+0x174>)
 80035c4:	8952      	ldrh	r2, [r2, #10]
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d802      	bhi.n	80035d0 <W25qxx_WritePage+0x3c>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d105      	bne.n	80035dc <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80035d0:	4b4d      	ldr	r3, [pc, #308]	; (8003708 <W25qxx_WritePage+0x174>)
 80035d2:	895b      	ldrh	r3, [r3, #10]
 80035d4:	461a      	mov	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	4413      	add	r3, r2
 80035e2:	4a49      	ldr	r2, [pc, #292]	; (8003708 <W25qxx_WritePage+0x174>)
 80035e4:	8952      	ldrh	r2, [r2, #10]
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d905      	bls.n	80035f6 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80035ea:	4b47      	ldr	r3, [pc, #284]	; (8003708 <W25qxx_WritePage+0x174>)
 80035ec:	895b      	ldrh	r3, [r3, #10]
 80035ee:	461a      	mov	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	68b9      	ldr	r1, [r7, #8]
 80035fc:	4843      	ldr	r0, [pc, #268]	; (800370c <W25qxx_WritePage+0x178>)
 80035fe:	f014 ffd3 	bl	80185a8 <iprintf>
	W25qxx_Delay(100);
 8003602:	2064      	movs	r0, #100	; 0x64
 8003604:	f011 f8f2 	bl	80147ec <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8003608:	f005 fe22 	bl	8009250 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 800360e:	f7ff fdc3 	bl	8003198 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8003612:	f7ff fd65 	bl	80030e0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003616:	2200      	movs	r2, #0
 8003618:	2140      	movs	r1, #64	; 0x40
 800361a:	483d      	ldr	r0, [pc, #244]	; (8003710 <W25qxx_WritePage+0x17c>)
 800361c:	f006 fb92 	bl	8009d44 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8003620:	4b39      	ldr	r3, [pc, #228]	; (8003708 <W25qxx_WritePage+0x174>)
 8003622:	895b      	ldrh	r3, [r3, #10]
 8003624:	461a      	mov	r2, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	fb03 f302 	mul.w	r3, r3, r2
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	4413      	add	r3, r2
 8003630:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8003632:	4b35      	ldr	r3, [pc, #212]	; (8003708 <W25qxx_WritePage+0x174>)
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b08      	cmp	r3, #8
 8003638:	d909      	bls.n	800364e <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 800363a:	2012      	movs	r0, #18
 800363c:	f7ff fcce 	bl	8002fdc <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	0e1b      	lsrs	r3, r3, #24
 8003644:	b2db      	uxtb	r3, r3
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff fcc8 	bl	8002fdc <W25qxx_Spi>
 800364c:	e002      	b.n	8003654 <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 800364e:	2002      	movs	r0, #2
 8003650:	f7ff fcc4 	bl	8002fdc <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	0c1b      	lsrs	r3, r3, #16
 8003658:	b2db      	uxtb	r3, r3
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fcbe 	bl	8002fdc <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	0a1b      	lsrs	r3, r3, #8
 8003664:	b2db      	uxtb	r3, r3
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff fcb8 	bl	8002fdc <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff fcb3 	bl	8002fdc <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	b29a      	uxth	r2, r3
 800367a:	2364      	movs	r3, #100	; 0x64
 800367c:	68f9      	ldr	r1, [r7, #12]
 800367e:	4825      	ldr	r0, [pc, #148]	; (8003714 <W25qxx_WritePage+0x180>)
 8003680:	f009 ffc3 	bl	800d60a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003684:	2201      	movs	r2, #1
 8003686:	2140      	movs	r1, #64	; 0x40
 8003688:	4821      	ldr	r0, [pc, #132]	; (8003710 <W25qxx_WritePage+0x17c>)
 800368a:	f006 fb5b 	bl	8009d44 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800368e:	f7ff fd83 	bl	8003198 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8003692:	f005 fddd 	bl	8009250 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	e018      	b.n	80036d6 <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d108      	bne.n	80036c0 <W25qxx_WritePage+0x12c>
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d905      	bls.n	80036c0 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 80036b4:	4818      	ldr	r0, [pc, #96]	; (8003718 <W25qxx_WritePage+0x184>)
 80036b6:	f014 fffd 	bl	80186b4 <puts>
			W25qxx_Delay(10);
 80036ba:	200a      	movs	r0, #10
 80036bc:	f011 f896 	bl	80147ec <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	4413      	add	r3, r2
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	4619      	mov	r1, r3
 80036ca:	4814      	ldr	r0, [pc, #80]	; (800371c <W25qxx_WritePage+0x188>)
 80036cc:	f014 ff6c 	bl	80185a8 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	3301      	adds	r3, #1
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d3e2      	bcc.n	80036a4 <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 80036de:	480e      	ldr	r0, [pc, #56]	; (8003718 <W25qxx_WritePage+0x184>)
 80036e0:	f014 ffe8 	bl	80186b4 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 80036e4:	6939      	ldr	r1, [r7, #16]
 80036e6:	480e      	ldr	r0, [pc, #56]	; (8003720 <W25qxx_WritePage+0x18c>)
 80036e8:	f014 ff5e 	bl	80185a8 <iprintf>
	W25qxx_Delay(100);
 80036ec:	2064      	movs	r0, #100	; 0x64
 80036ee:	f011 f87d 	bl	80147ec <osDelay>
#endif
	W25qxx_Delay(1);
 80036f2:	2001      	movs	r0, #1
 80036f4:	f011 f87a 	bl	80147ec <osDelay>
	w25qxx.Lock = 0;
 80036f8:	4b03      	ldr	r3, [pc, #12]	; (8003708 <W25qxx_WritePage+0x174>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003700:	bf00      	nop
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20006234 	.word	0x20006234
 800370c:	0801d798 	.word	0x0801d798
 8003710:	40020c00 	.word	0x40020c00
 8003714:	200053dc 	.word	0x200053dc
 8003718:	0801d7d4 	.word	0x0801d7d4
 800371c:	0801d7d8 	.word	0x0801d7d8
 8003720:	0801d7e0 	.word	0x0801d7e0

08003724 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
 8003730:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8003732:	4b36      	ldr	r3, [pc, #216]	; (800380c <W25qxx_WriteSector+0xe8>)
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d802      	bhi.n	8003742 <W25qxx_WriteSector+0x1e>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d102      	bne.n	8003748 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8003742:	4b32      	ldr	r3, [pc, #200]	; (800380c <W25qxx_WriteSector+0xe8>)
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	68b9      	ldr	r1, [r7, #8]
 800374e:	4830      	ldr	r0, [pc, #192]	; (8003810 <W25qxx_WriteSector+0xec>)
 8003750:	f014 ff2a 	bl	80185a8 <iprintf>
	W25qxx_Delay(100);
 8003754:	2064      	movs	r0, #100	; 0x64
 8003756:	f011 f849 	bl	80147ec <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 800375a:	4b2c      	ldr	r3, [pc, #176]	; (800380c <W25qxx_WriteSector+0xe8>)
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	429a      	cmp	r2, r3
 8003762:	d306      	bcc.n	8003772 <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 8003764:	482b      	ldr	r0, [pc, #172]	; (8003814 <W25qxx_WriteSector+0xf0>)
 8003766:	f014 ffa5 	bl	80186b4 <puts>
		W25qxx_Delay(100);
 800376a:	2064      	movs	r0, #100	; 0x64
 800376c:	f011 f83e 	bl	80147ec <osDelay>
#endif
		return;
 8003770:	e048      	b.n	8003804 <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	441a      	add	r2, r3
 8003778:	4b24      	ldr	r3, [pc, #144]	; (800380c <W25qxx_WriteSector+0xe8>)
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	429a      	cmp	r2, r3
 800377e:	d905      	bls.n	800378c <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8003780:	4b22      	ldr	r3, [pc, #136]	; (800380c <W25qxx_WriteSector+0xe8>)
 8003782:	691a      	ldr	r2, [r3, #16]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	61bb      	str	r3, [r7, #24]
 800378a:	e001      	b.n	8003790 <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8003790:	68b8      	ldr	r0, [r7, #8]
 8003792:	f7ff fee9 	bl	8003568 <W25qxx_SectorToPage>
 8003796:	4602      	mov	r2, r0
 8003798:	4b1c      	ldr	r3, [pc, #112]	; (800380c <W25qxx_WriteSector+0xe8>)
 800379a:	895b      	ldrh	r3, [r3, #10]
 800379c:	4619      	mov	r1, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80037a4:	4413      	add	r3, r2
 80037a6:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80037a8:	4b18      	ldr	r3, [pc, #96]	; (800380c <W25qxx_WriteSector+0xe8>)
 80037aa:	895b      	ldrh	r3, [r3, #10]
 80037ac:	461a      	mov	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80037b4:	fb02 f201 	mul.w	r2, r2, r1
 80037b8:	1a9b      	subs	r3, r3, r2
 80037ba:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	69f9      	ldr	r1, [r7, #28]
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f7ff fee6 	bl	8003594 <W25qxx_WritePage>
		StartPage++;
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	3301      	adds	r3, #1
 80037cc:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80037ce:	4b0f      	ldr	r3, [pc, #60]	; (800380c <W25qxx_WriteSector+0xe8>)
 80037d0:	895b      	ldrh	r3, [r3, #10]
 80037d2:	461a      	mov	r2, r3
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	1a9a      	subs	r2, r3, r2
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	4413      	add	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80037de:	4b0b      	ldr	r3, [pc, #44]	; (800380c <W25qxx_WriteSector+0xe8>)
 80037e0:	895b      	ldrh	r3, [r3, #10]
 80037e2:	461a      	mov	r2, r3
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4413      	add	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	dce1      	bgt.n	80037bc <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 80037f8:	4807      	ldr	r0, [pc, #28]	; (8003818 <W25qxx_WriteSector+0xf4>)
 80037fa:	f014 ff5b 	bl	80186b4 <puts>
	W25qxx_Delay(100);
 80037fe:	2064      	movs	r0, #100	; 0x64
 8003800:	f010 fff4 	bl	80147ec <osDelay>
#endif
}
 8003804:	3720      	adds	r7, #32
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20006234 	.word	0x20006234
 8003810:	0801d804 	.word	0x0801d804
 8003814:	0801d844 	.word	0x0801d844
 8003818:	0801d864 	.word	0x0801d864

0800381c <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800382a:	e002      	b.n	8003832 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 800382c:	2001      	movs	r0, #1
 800382e:	f010 ffdd 	bl	80147ec <osDelay>
	while (w25qxx.Lock == 1)
 8003832:	4b54      	ldr	r3, [pc, #336]	; (8003984 <W25qxx_ReadPage+0x168>)
 8003834:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003838:	2b01      	cmp	r3, #1
 800383a:	d0f7      	beq.n	800382c <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 800383c:	4b51      	ldr	r3, [pc, #324]	; (8003984 <W25qxx_ReadPage+0x168>)
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8003844:	4b4f      	ldr	r3, [pc, #316]	; (8003984 <W25qxx_ReadPage+0x168>)
 8003846:	895b      	ldrh	r3, [r3, #10]
 8003848:	461a      	mov	r2, r3
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	4293      	cmp	r3, r2
 800384e:	d802      	bhi.n	8003856 <W25qxx_ReadPage+0x3a>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d102      	bne.n	800385c <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8003856:	4b4b      	ldr	r3, [pc, #300]	; (8003984 <W25qxx_ReadPage+0x168>)
 8003858:	895b      	ldrh	r3, [r3, #10]
 800385a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	4413      	add	r3, r2
 8003862:	4a48      	ldr	r2, [pc, #288]	; (8003984 <W25qxx_ReadPage+0x168>)
 8003864:	8952      	ldrh	r2, [r2, #10]
 8003866:	4293      	cmp	r3, r2
 8003868:	d905      	bls.n	8003876 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800386a:	4b46      	ldr	r3, [pc, #280]	; (8003984 <W25qxx_ReadPage+0x168>)
 800386c:	895b      	ldrh	r3, [r3, #10]
 800386e:	461a      	mov	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	68b9      	ldr	r1, [r7, #8]
 800387c:	4842      	ldr	r0, [pc, #264]	; (8003988 <W25qxx_ReadPage+0x16c>)
 800387e:	f014 fe93 	bl	80185a8 <iprintf>
	W25qxx_Delay(100);
 8003882:	2064      	movs	r0, #100	; 0x64
 8003884:	f010 ffb2 	bl	80147ec <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8003888:	f005 fce2 	bl	8009250 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800388e:	4b3d      	ldr	r3, [pc, #244]	; (8003984 <W25qxx_ReadPage+0x168>)
 8003890:	895b      	ldrh	r3, [r3, #10]
 8003892:	461a      	mov	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	fb03 f302 	mul.w	r3, r3, r2
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	4413      	add	r3, r2
 800389e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80038a0:	2200      	movs	r2, #0
 80038a2:	2140      	movs	r1, #64	; 0x40
 80038a4:	4839      	ldr	r0, [pc, #228]	; (800398c <W25qxx_ReadPage+0x170>)
 80038a6:	f006 fa4d 	bl	8009d44 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80038aa:	4b36      	ldr	r3, [pc, #216]	; (8003984 <W25qxx_ReadPage+0x168>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b08      	cmp	r3, #8
 80038b0:	d909      	bls.n	80038c6 <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 80038b2:	200c      	movs	r0, #12
 80038b4:	f7ff fb92 	bl	8002fdc <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	0e1b      	lsrs	r3, r3, #24
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff fb8c 	bl	8002fdc <W25qxx_Spi>
 80038c4:	e002      	b.n	80038cc <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 80038c6:	200b      	movs	r0, #11
 80038c8:	f7ff fb88 	bl	8002fdc <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	0c1b      	lsrs	r3, r3, #16
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff fb82 	bl	8002fdc <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	0a1b      	lsrs	r3, r3, #8
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff fb7c 	bl	8002fdc <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff fb77 	bl	8002fdc <W25qxx_Spi>
	W25qxx_Spi(0);
 80038ee:	2000      	movs	r0, #0
 80038f0:	f7ff fb74 	bl	8002fdc <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	2364      	movs	r3, #100	; 0x64
 80038fa:	68f9      	ldr	r1, [r7, #12]
 80038fc:	4824      	ldr	r0, [pc, #144]	; (8003990 <W25qxx_ReadPage+0x174>)
 80038fe:	f009 ffc0 	bl	800d882 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003902:	2201      	movs	r2, #1
 8003904:	2140      	movs	r1, #64	; 0x40
 8003906:	4821      	ldr	r0, [pc, #132]	; (800398c <W25qxx_ReadPage+0x170>)
 8003908:	f006 fa1c 	bl	8009d44 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 800390c:	f005 fca0 	bl	8009250 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	e018      	b.n	8003950 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	2b00      	cmp	r3, #0
 8003926:	d108      	bne.n	800393a <W25qxx_ReadPage+0x11e>
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d905      	bls.n	800393a <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 800392e:	4819      	ldr	r0, [pc, #100]	; (8003994 <W25qxx_ReadPage+0x178>)
 8003930:	f014 fec0 	bl	80186b4 <puts>
			W25qxx_Delay(10);
 8003934:	200a      	movs	r0, #10
 8003936:	f010 ff59 	bl	80147ec <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	4413      	add	r3, r2
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	4619      	mov	r1, r3
 8003944:	4814      	ldr	r0, [pc, #80]	; (8003998 <W25qxx_ReadPage+0x17c>)
 8003946:	f014 fe2f 	bl	80185a8 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	3301      	adds	r3, #1
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	d3e2      	bcc.n	800391e <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 8003958:	480e      	ldr	r0, [pc, #56]	; (8003994 <W25qxx_ReadPage+0x178>)
 800395a:	f014 feab 	bl	80186b4 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 800395e:	6939      	ldr	r1, [r7, #16]
 8003960:	480e      	ldr	r0, [pc, #56]	; (800399c <W25qxx_ReadPage+0x180>)
 8003962:	f014 fe21 	bl	80185a8 <iprintf>
	W25qxx_Delay(100);
 8003966:	2064      	movs	r0, #100	; 0x64
 8003968:	f010 ff40 	bl	80147ec <osDelay>
#endif
	W25qxx_Delay(1);
 800396c:	2001      	movs	r0, #1
 800396e:	f010 ff3d 	bl	80147ec <osDelay>
	w25qxx.Lock = 0;
 8003972:	4b04      	ldr	r3, [pc, #16]	; (8003984 <W25qxx_ReadPage+0x168>)
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800397a:	bf00      	nop
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	20006234 	.word	0x20006234
 8003988:	0801d9b0 	.word	0x0801d9b0
 800398c:	40020c00 	.word	0x40020c00
 8003990:	200053dc 	.word	0x200053dc
 8003994:	0801d7d4 	.word	0x0801d7d4
 8003998:	0801d7d8 	.word	0x0801d7d8
 800399c:	0801d9ec 	.word	0x0801d9ec

080039a0 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
 80039ac:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 80039ae:	4b36      	ldr	r3, [pc, #216]	; (8003a88 <W25qxx_ReadSector+0xe8>)
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d802      	bhi.n	80039be <W25qxx_ReadSector+0x1e>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d102      	bne.n	80039c4 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 80039be:	4b32      	ldr	r3, [pc, #200]	; (8003a88 <W25qxx_ReadSector+0xe8>)
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	68b9      	ldr	r1, [r7, #8]
 80039ca:	4830      	ldr	r0, [pc, #192]	; (8003a8c <W25qxx_ReadSector+0xec>)
 80039cc:	f014 fdec 	bl	80185a8 <iprintf>
	W25qxx_Delay(100);
 80039d0:	2064      	movs	r0, #100	; 0x64
 80039d2:	f010 ff0b 	bl	80147ec <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80039d6:	4b2c      	ldr	r3, [pc, #176]	; (8003a88 <W25qxx_ReadSector+0xe8>)
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d306      	bcc.n	80039ee <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 80039e0:	482b      	ldr	r0, [pc, #172]	; (8003a90 <W25qxx_ReadSector+0xf0>)
 80039e2:	f014 fe67 	bl	80186b4 <puts>
		W25qxx_Delay(100);
 80039e6:	2064      	movs	r0, #100	; 0x64
 80039e8:	f010 ff00 	bl	80147ec <osDelay>
#endif
		return;
 80039ec:	e048      	b.n	8003a80 <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	441a      	add	r2, r3
 80039f4:	4b24      	ldr	r3, [pc, #144]	; (8003a88 <W25qxx_ReadSector+0xe8>)
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d905      	bls.n	8003a08 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80039fc:	4b22      	ldr	r3, [pc, #136]	; (8003a88 <W25qxx_ReadSector+0xe8>)
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	61bb      	str	r3, [r7, #24]
 8003a06:	e001      	b.n	8003a0c <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8003a0c:	68b8      	ldr	r0, [r7, #8]
 8003a0e:	f7ff fdab 	bl	8003568 <W25qxx_SectorToPage>
 8003a12:	4602      	mov	r2, r0
 8003a14:	4b1c      	ldr	r3, [pc, #112]	; (8003a88 <W25qxx_ReadSector+0xe8>)
 8003a16:	895b      	ldrh	r3, [r3, #10]
 8003a18:	4619      	mov	r1, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a20:	4413      	add	r3, r2
 8003a22:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8003a24:	4b18      	ldr	r3, [pc, #96]	; (8003a88 <W25qxx_ReadSector+0xe8>)
 8003a26:	895b      	ldrh	r3, [r3, #10]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a30:	fb02 f201 	mul.w	r2, r2, r1
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	69f9      	ldr	r1, [r7, #28]
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f7ff feec 	bl	800381c <W25qxx_ReadPage>
		StartPage++;
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	3301      	adds	r3, #1
 8003a48:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8003a4a:	4b0f      	ldr	r3, [pc, #60]	; (8003a88 <W25qxx_ReadSector+0xe8>)
 8003a4c:	895b      	ldrh	r3, [r3, #10]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	1a9a      	subs	r2, r3, r2
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	4413      	add	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8003a5a:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <W25qxx_ReadSector+0xe8>)
 8003a5c:	895b      	ldrh	r3, [r3, #10]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4413      	add	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	dce1      	bgt.n	8003a38 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 8003a74:	4807      	ldr	r0, [pc, #28]	; (8003a94 <W25qxx_ReadSector+0xf4>)
 8003a76:	f014 fe1d 	bl	80186b4 <puts>
	W25qxx_Delay(100);
 8003a7a:	2064      	movs	r0, #100	; 0x64
 8003a7c:	f010 feb6 	bl	80147ec <osDelay>
#endif
}
 8003a80:	3720      	adds	r7, #32
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20006234 	.word	0x20006234
 8003a8c:	0801da10 	.word	0x0801da10
 8003a90:	0801da50 	.word	0x0801da50
 8003a94:	0801da70 	.word	0x0801da70

08003a98 <MRT_rtc_Init>:


//**************************************************//
//FUNCTIONS

void MRT_rtc_Init(void){
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0

	print("Setting RTC to previous time...");
 8003a9c:	4814      	ldr	r0, [pc, #80]	; (8003af0 <MRT_rtc_Init+0x58>)
 8003a9e:	f7fd fb33 	bl	8001108 <print>
	MRT_set_rtc(prev_hours,prev_min,prev_sec);
 8003aa2:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <MRT_rtc_Init+0x5c>)
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	4a14      	ldr	r2, [pc, #80]	; (8003af8 <MRT_rtc_Init+0x60>)
 8003aa8:	7811      	ldrb	r1, [r2, #0]
 8003aaa:	4a14      	ldr	r2, [pc, #80]	; (8003afc <MRT_rtc_Init+0x64>)
 8003aac:	7812      	ldrb	r2, [r2, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 f8e8 	bl	8003c84 <MRT_set_rtc>
	print("OK\r\n");
 8003ab4:	4812      	ldr	r0, [pc, #72]	; (8003b00 <MRT_rtc_Init+0x68>)
 8003ab6:	f7fd fb27 	bl	8001108 <print>

	#if ALARM_A_ACTIVE
		print("Setting alarmA...");
 8003aba:	4812      	ldr	r0, [pc, #72]	; (8003b04 <MRT_rtc_Init+0x6c>)
 8003abc:	f7fd fb24 	bl	8001108 <print>
		HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 8003ac0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003ac4:	f005 fbd0 	bl	8009268 <HAL_Delay>
		if (wu_flag == 0){
 8003ac8:	4b0f      	ldr	r3, [pc, #60]	; (8003b08 <MRT_rtc_Init+0x70>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d105      	bne.n	8003adc <MRT_rtc_Init+0x44>
			MRT_set_alarmA(PRE_WHEN_SLEEP_TIME_HOURS, PRE_WHEN_SLEEP_TIME_MIN, PRE_WHEN_SLEEP_TIME_SEC);
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	211e      	movs	r1, #30
 8003ad4:	2004      	movs	r0, #4
 8003ad6:	f000 f91b 	bl	8003d10 <MRT_set_alarmA>
 8003ada:	e004      	b.n	8003ae6 <MRT_rtc_Init+0x4e>
		}
		else{
			MRT_set_alarmA(POST_WHEN_SLEEP_TIME_HOURS, POST_WHEN_SLEEP_TIME_MIN, POST_WHEN_SLEEP_TIME_SEC);
 8003adc:	2200      	movs	r2, #0
 8003ade:	2100      	movs	r1, #0
 8003ae0:	200e      	movs	r0, #14
 8003ae2:	f000 f915 	bl	8003d10 <MRT_set_alarmA>
		}
		print("OK\r\n");
 8003ae6:	4806      	ldr	r0, [pc, #24]	; (8003b00 <MRT_rtc_Init+0x68>)
 8003ae8:	f7fd fb0e 	bl	8001108 <print>
	#endif
}
 8003aec:	bf00      	nop
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	0801db04 	.word	0x0801db04
 8003af4:	200002dd 	.word	0x200002dd
 8003af8:	200002de 	.word	0x200002de
 8003afc:	200002df 	.word	0x200002df
 8003b00:	0801db24 	.word	0x0801db24
 8003b04:	0801db2c 	.word	0x0801db2c
 8003b08:	200002d9 	.word	0x200002d9

08003b0c <MRT_check_for_wake_up>:


void MRT_check_for_wake_up(void){
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8003b10:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <MRT_check_for_wake_up+0x40>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d112      	bne.n	8003b42 <MRT_check_for_wake_up+0x36>
	{

		wu_flag = 1;
 8003b1c:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <MRT_check_for_wake_up+0x44>)
 8003b1e:	2201      	movs	r2, #1
 8003b20:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8003b22:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <MRT_check_for_wake_up+0x40>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a09      	ldr	r2, [pc, #36]	; (8003b4c <MRT_check_for_wake_up+0x40>)
 8003b28:	f043 0308 	orr.w	r3, r3, #8
 8003b2c:	6013      	str	r3, [r2, #0]

		print("Wakeup from the STANDBY MODE\r\n");
 8003b2e:	4809      	ldr	r0, [pc, #36]	; (8003b54 <MRT_check_for_wake_up+0x48>)
 8003b30:	f7fd faea 	bl	8001108 <print>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8003b34:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003b38:	f008 f93e 	bl	800bdb8 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc); //TODO hrtc from rtc.h (should we pass it as an argument instead?)
 8003b3c:	4806      	ldr	r0, [pc, #24]	; (8003b58 <MRT_check_for_wake_up+0x4c>)
 8003b3e:	f009 fc79 	bl	800d434 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_clear_alarms_flags();
 8003b42:	f000 f80b 	bl	8003b5c <MRT_clear_alarms_flags>
}
 8003b46:	bf00      	nop
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40007000 	.word	0x40007000
 8003b50:	200002d9 	.word	0x200002d9
 8003b54:	0801db40 	.word	0x0801db40
 8003b58:	20005364 	.word	0x20005364

08003b5c <MRT_clear_alarms_flags>:



void MRT_clear_alarms_flags(void){
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	print("Clearing the flags\r\n");
 8003b60:	482a      	ldr	r0, [pc, #168]	; (8003c0c <MRT_clear_alarms_flags+0xb0>)
 8003b62:	f7fd fad1 	bl	8001108 <print>

	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8003b66:	4b2a      	ldr	r3, [pc, #168]	; (8003c10 <MRT_clear_alarms_flags+0xb4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	22ca      	movs	r2, #202	; 0xca
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24
 8003b6e:	4b28      	ldr	r3, [pc, #160]	; (8003c10 <MRT_clear_alarms_flags+0xb4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2253      	movs	r2, #83	; 0x53
 8003b74:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8003b76:	e008      	b.n	8003b8a <MRT_clear_alarms_flags+0x2e>
		//print("Clearing alarm A flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8003b78:	4b25      	ldr	r3, [pc, #148]	; (8003c10 <MRT_clear_alarms_flags+0xb4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	4b23      	ldr	r3, [pc, #140]	; (8003c10 <MRT_clear_alarms_flags+0xb4>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003b88:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8003b8a:	4b21      	ldr	r3, [pc, #132]	; (8003c10 <MRT_clear_alarms_flags+0xb4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1ef      	bne.n	8003b78 <MRT_clear_alarms_flags+0x1c>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8003b98:	4b1d      	ldr	r3, [pc, #116]	; (8003c10 <MRT_clear_alarms_flags+0xb4>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	22ff      	movs	r2, #255	; 0xff
 8003b9e:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003ba0:	4b1c      	ldr	r3, [pc, #112]	; (8003c14 <MRT_clear_alarms_flags+0xb8>)
 8003ba2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ba6:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8003ba8:	4b19      	ldr	r3, [pc, #100]	; (8003c10 <MRT_clear_alarms_flags+0xb4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	22ca      	movs	r2, #202	; 0xca
 8003bae:	625a      	str	r2, [r3, #36]	; 0x24
 8003bb0:	4b17      	ldr	r3, [pc, #92]	; (8003c10 <MRT_clear_alarms_flags+0xb4>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2253      	movs	r2, #83	; 0x53
 8003bb6:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8003bb8:	e008      	b.n	8003bcc <MRT_clear_alarms_flags+0x70>
		//print("Clearing alarm B flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 8003bba:	4b15      	ldr	r3, [pc, #84]	; (8003c10 <MRT_clear_alarms_flags+0xb4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	4b13      	ldr	r3, [pc, #76]	; (8003c10 <MRT_clear_alarms_flags+0xb4>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003bca:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8003bcc:	4b10      	ldr	r3, [pc, #64]	; (8003c10 <MRT_clear_alarms_flags+0xb4>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1ef      	bne.n	8003bba <MRT_clear_alarms_flags+0x5e>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8003bda:	4b0d      	ldr	r3, [pc, #52]	; (8003c10 <MRT_clear_alarms_flags+0xb4>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	22ff      	movs	r2, #255	; 0xff
 8003be0:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003be2:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <MRT_clear_alarms_flags+0xb8>)
 8003be4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003be8:	615a      	str	r2, [r3, #20]

	/* Clear the WU FLAG */
	//print("Clearing wake up flag\r\n");
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8003bea:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <MRT_clear_alarms_flags+0xbc>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a0a      	ldr	r2, [pc, #40]	; (8003c18 <MRT_clear_alarms_flags+0xbc>)
 8003bf0:	f043 0304 	orr.w	r3, r3, #4
 8003bf4:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//print("Clearing RTC wake up flag\r\n");
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8003bf6:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <MRT_clear_alarms_flags+0xb4>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	4b04      	ldr	r3, [pc, #16]	; (8003c10 <MRT_clear_alarms_flags+0xb4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003c06:	60da      	str	r2, [r3, #12]
}
 8003c08:	bf00      	nop
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	0801db60 	.word	0x0801db60
 8003c10:	20005364 	.word	0x20005364
 8003c14:	40013c00 	.word	0x40013c00
 8003c18:	40007000 	.word	0x40007000

08003c1c <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode(uint32_t seconds){
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08c      	sub	sp, #48	; 0x30
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
	print("\r\n/*****StandByMode*****/\r\n");
 8003c24:	4813      	ldr	r0, [pc, #76]	; (8003c74 <MRT_StandByMode+0x58>)
 8003c26:	f7fd fa6f 	bl	8001108 <print>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8003c2a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003c2e:	f008 f8b1 	bl	800bd94 <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_clear_alarms_flags();
 8003c32:	f7ff ff93 	bl	8003b5c <MRT_clear_alarms_flags>

	//Setup RTC wake up timer
	println("Setting up RTCW");
 8003c36:	4810      	ldr	r0, [pc, #64]	; (8003c78 <MRT_StandByMode+0x5c>)
 8003c38:	f7fd fa48 	bl	80010cc <println>
	  Error_Handler();
	}
	*/

	char msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds",(int) seconds);
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	f107 030c 	add.w	r3, r7, #12
 8003c42:	490e      	ldr	r1, [pc, #56]	; (8003c7c <MRT_StandByMode+0x60>)
 8003c44:	4618      	mov	r0, r3
 8003c46:	f014 fd97 	bl	8018778 <siprintf>
	println(msg);
 8003c4a:	f107 030c 	add.w	r3, r7, #12
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fd fa3c 	bl	80010cc <println>

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8003c54:	2204      	movs	r2, #4
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	4809      	ldr	r0, [pc, #36]	; (8003c80 <MRT_StandByMode+0x64>)
 8003c5a:	f009 fb2b 	bl	800d2b4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <MRT_StandByMode+0x4c>
	{
	  Error_Handler();
 8003c64:	f7fe f924 	bl	8001eb0 <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 8003c68:	f008 f8ba 	bl	800bde0 <HAL_PWR_EnterSTANDBYMode>
}
 8003c6c:	bf00      	nop
 8003c6e:	3730      	adds	r7, #48	; 0x30
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	0801db78 	.word	0x0801db78
 8003c78:	0801db94 	.word	0x0801db94
 8003c7c:	0801dba4 	.word	0x0801dba4
 8003c80:	20005364 	.word	0x20005364

08003c84 <MRT_set_rtc>:




void MRT_set_rtc(uint8_t h, uint8_t m, uint8_t s){
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	71fb      	strb	r3, [r7, #7]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	71bb      	strb	r3, [r7, #6]
 8003c92:	4613      	mov	r3, r2
 8003c94:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  RTC_TimeTypeDef sTime;

	  sTime.Hours = int_to_hex_table[h];
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	4a1a      	ldr	r2, [pc, #104]	; (8003d04 <MRT_set_rtc+0x80>)
 8003c9a:	5cd3      	ldrb	r3, [r2, r3]
 8003c9c:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 8003c9e:	79bb      	ldrb	r3, [r7, #6]
 8003ca0:	4a18      	ldr	r2, [pc, #96]	; (8003d04 <MRT_set_rtc+0x80>)
 8003ca2:	5cd3      	ldrb	r3, [r2, r3]
 8003ca4:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 8003ca6:	797b      	ldrb	r3, [r7, #5]
 8003ca8:	4a16      	ldr	r2, [pc, #88]	; (8003d04 <MRT_set_rtc+0x80>)
 8003caa:	5cd3      	ldrb	r3, [r2, r3]
 8003cac:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003cb6:	f107 030c 	add.w	r3, r7, #12
 8003cba:	2201      	movs	r2, #1
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4812      	ldr	r0, [pc, #72]	; (8003d08 <MRT_set_rtc+0x84>)
 8003cc0:	f008 ff99 	bl	800cbf6 <HAL_RTC_SetTime>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <MRT_set_rtc+0x4a>
	  {
	    Error_Handler();
 8003cca:	f7fe f8f1 	bl	8001eb0 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003cce:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <MRT_set_rtc+0x88>)
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 8003cd4:	4b0d      	ldr	r3, [pc, #52]	; (8003d0c <MRT_set_rtc+0x88>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 8003cda:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <MRT_set_rtc+0x88>)
 8003cdc:	2201      	movs	r2, #1
 8003cde:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 8003ce0:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <MRT_set_rtc+0x88>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	4908      	ldr	r1, [pc, #32]	; (8003d0c <MRT_set_rtc+0x88>)
 8003cea:	4807      	ldr	r0, [pc, #28]	; (8003d08 <MRT_set_rtc+0x84>)
 8003cec:	f009 f840 	bl	800cd70 <HAL_RTC_SetDate>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <MRT_set_rtc+0x76>
	  {
	    Error_Handler();
 8003cf6:	f7fe f8db 	bl	8001eb0 <Error_Handler>
	  }
}
 8003cfa:	bf00      	nop
 8003cfc:	3720      	adds	r7, #32
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20000024 	.word	0x20000024
 8003d08:	20005364 	.word	0x20005364
 8003d0c:	200003fc 	.word	0x200003fc

08003d10 <MRT_set_alarmA>:



void MRT_set_alarmA(uint8_t h, uint8_t m, uint8_t s){
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	71fb      	strb	r3, [r7, #7]
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	71bb      	strb	r3, [r7, #6]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	4a1a      	ldr	r2, [pc, #104]	; (8003d90 <MRT_set_alarmA+0x80>)
 8003d26:	5cd2      	ldrb	r2, [r2, r3]
 8003d28:	4b1a      	ldr	r3, [pc, #104]	; (8003d94 <MRT_set_alarmA+0x84>)
 8003d2a:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8003d2c:	79bb      	ldrb	r3, [r7, #6]
 8003d2e:	4a18      	ldr	r2, [pc, #96]	; (8003d90 <MRT_set_alarmA+0x80>)
 8003d30:	5cd2      	ldrb	r2, [r2, r3]
 8003d32:	4b18      	ldr	r3, [pc, #96]	; (8003d94 <MRT_set_alarmA+0x84>)
 8003d34:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 8003d36:	797b      	ldrb	r3, [r7, #5]
 8003d38:	4a15      	ldr	r2, [pc, #84]	; (8003d90 <MRT_set_alarmA+0x80>)
 8003d3a:	5cd2      	ldrb	r2, [r2, r3]
 8003d3c:	4b15      	ldr	r3, [pc, #84]	; (8003d94 <MRT_set_alarmA+0x84>)
 8003d3e:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8003d40:	4b14      	ldr	r3, [pc, #80]	; (8003d94 <MRT_set_alarmA+0x84>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003d46:	4b13      	ldr	r3, [pc, #76]	; (8003d94 <MRT_set_alarmA+0x84>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003d4c:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <MRT_set_alarmA+0x84>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003d52:	4b10      	ldr	r3, [pc, #64]	; (8003d94 <MRT_set_alarmA+0x84>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003d58:	4b0e      	ldr	r3, [pc, #56]	; (8003d94 <MRT_set_alarmA+0x84>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003d5e:	4b0d      	ldr	r3, [pc, #52]	; (8003d94 <MRT_set_alarmA+0x84>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8003d64:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <MRT_set_alarmA+0x84>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8003d6c:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <MRT_set_alarmA+0x84>)
 8003d6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d72:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003d74:	2201      	movs	r2, #1
 8003d76:	4907      	ldr	r1, [pc, #28]	; (8003d94 <MRT_set_alarmA+0x84>)
 8003d78:	4807      	ldr	r0, [pc, #28]	; (8003d98 <MRT_set_alarmA+0x88>)
 8003d7a:	f009 f8a1 	bl	800cec0 <HAL_RTC_SetAlarm_IT>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <MRT_set_alarmA+0x78>
	  {
	    Error_Handler();
 8003d84:	f7fe f894 	bl	8001eb0 <Error_Handler>
	  }
}
 8003d88:	bf00      	nop
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	20000024 	.word	0x20000024
 8003d94:	20000400 	.word	0x20000400
 8003d98:	20005364 	.word	0x20005364

08003d9c <MRT_LSM6DSR_Constructor>:


//**************************************************//
/*****LSM6DSR STATIC FUNCTIONS*****/

void MRT_LSM6DSR_Constructor(){
 8003d9c:	b598      	push	{r3, r4, r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
	if (lsm6dsr==NULL){
 8003da0:	4b08      	ldr	r3, [pc, #32]	; (8003dc4 <MRT_LSM6DSR_Constructor+0x28>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10b      	bne.n	8003dc0 <MRT_LSM6DSR_Constructor+0x24>
		lsm6dsr = new LSM6DSR(&LSM6DSR_I2C, (uint8_t) MRT_LSM6DSR_ADDRESS);
 8003da8:	203c      	movs	r0, #60	; 0x3c
 8003daa:	f012 ff91 	bl	8016cd0 <_Znwj>
 8003dae:	4603      	mov	r3, r0
 8003db0:	461c      	mov	r4, r3
 8003db2:	226a      	movs	r2, #106	; 0x6a
 8003db4:	4904      	ldr	r1, [pc, #16]	; (8003dc8 <MRT_LSM6DSR_Constructor+0x2c>)
 8003db6:	4620      	mov	r0, r4
 8003db8:	f000 f934 	bl	8004024 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>
 8003dbc:	4b01      	ldr	r3, [pc, #4]	; (8003dc4 <MRT_LSM6DSR_Constructor+0x28>)
 8003dbe:	601c      	str	r4, [r3, #0]
	}
}
 8003dc0:	bf00      	nop
 8003dc2:	bd98      	pop	{r3, r4, r7, pc}
 8003dc4:	20000428 	.word	0x20000428
 8003dc8:	200052bc 	.word	0x200052bc

08003dcc <MRT_LSM6DSR_getAcceleration>:
	if (lsm6dsr!=NULL){
		lsm6dsr = NULL;
	}
}

void MRT_LSM6DSR_getAcceleration(void){
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
	lsm6dsr->getAcceleration();
 8003dd0:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <MRT_LSM6DSR_getAcceleration+0x30>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 f9cf 	bl	8004178 <_ZN7LSM6DSR15getAccelerationEv>
	hlsm6dsr.acceleration_mg[0] = lsm6dsr->acceleration_mg[0];
 8003dda:	4b08      	ldr	r3, [pc, #32]	; (8003dfc <MRT_LSM6DSR_getAcceleration+0x30>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a07      	ldr	r2, [pc, #28]	; (8003e00 <MRT_LSM6DSR_getAcceleration+0x34>)
 8003de2:	6013      	str	r3, [r2, #0]
	hlsm6dsr.acceleration_mg[1] = lsm6dsr->acceleration_mg[1];
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <MRT_LSM6DSR_getAcceleration+0x30>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	4a05      	ldr	r2, [pc, #20]	; (8003e00 <MRT_LSM6DSR_getAcceleration+0x34>)
 8003dec:	6053      	str	r3, [r2, #4]
	hlsm6dsr.acceleration_mg[2] = lsm6dsr->acceleration_mg[2];
 8003dee:	4b03      	ldr	r3, [pc, #12]	; (8003dfc <MRT_LSM6DSR_getAcceleration+0x30>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	4a02      	ldr	r2, [pc, #8]	; (8003e00 <MRT_LSM6DSR_getAcceleration+0x34>)
 8003df6:	6093      	str	r3, [r2, #8]
}
 8003df8:	bf00      	nop
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	20000428 	.word	0x20000428
 8003e00:	20000430 	.word	0x20000430

08003e04 <MRT_LSM6DSR_getAngularRate>:
void MRT_LSM6DSR_getAngularRate(void){
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
	lsm6dsr->getAngularRate();
 8003e08:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <MRT_LSM6DSR_getAngularRate+0x30>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fa2b 	bl	8004268 <_ZN7LSM6DSR14getAngularRateEv>
	hlsm6dsr.angular_rate_mdps[0] = lsm6dsr->angular_rate_mdps[0];
 8003e12:	4b08      	ldr	r3, [pc, #32]	; (8003e34 <MRT_LSM6DSR_getAngularRate+0x30>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	4a07      	ldr	r2, [pc, #28]	; (8003e38 <MRT_LSM6DSR_getAngularRate+0x34>)
 8003e1a:	60d3      	str	r3, [r2, #12]
	hlsm6dsr.angular_rate_mdps[1] = lsm6dsr->angular_rate_mdps[1];
 8003e1c:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <MRT_LSM6DSR_getAngularRate+0x30>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	4a05      	ldr	r2, [pc, #20]	; (8003e38 <MRT_LSM6DSR_getAngularRate+0x34>)
 8003e24:	6113      	str	r3, [r2, #16]
	hlsm6dsr.angular_rate_mdps[2] = lsm6dsr->angular_rate_mdps[2];
 8003e26:	4b03      	ldr	r3, [pc, #12]	; (8003e34 <MRT_LSM6DSR_getAngularRate+0x30>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	4a02      	ldr	r2, [pc, #8]	; (8003e38 <MRT_LSM6DSR_getAngularRate+0x34>)
 8003e2e:	6153      	str	r3, [r2, #20]
}
 8003e30:	bf00      	nop
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	20000428 	.word	0x20000428
 8003e38:	20000430 	.word	0x20000430

08003e3c <MRT_LSM6DSR_getTemperature>:
void MRT_LSM6DSR_getTemperature(void){
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
	lsm6dsr->getTemperature();
 8003e40:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <MRT_LSM6DSR_getTemperature+0x1c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 f9de 	bl	8004206 <_ZN7LSM6DSR14getTemperatureEv>
	hlsm6dsr.temperature_degC = lsm6dsr->temperature_degC;
 8003e4a:	4b03      	ldr	r3, [pc, #12]	; (8003e58 <MRT_LSM6DSR_getTemperature+0x1c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	4a02      	ldr	r2, [pc, #8]	; (8003e5c <MRT_LSM6DSR_getTemperature+0x20>)
 8003e52:	6193      	str	r3, [r2, #24]
}
 8003e54:	bf00      	nop
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	20000428 	.word	0x20000428
 8003e5c:	20000430 	.word	0x20000430

08003e60 <MRT_LSM6DSR_pollAll>:

void MRT_LSM6DSR_pollAll(void){
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
	MRT_LSM6DSR_getAcceleration();
 8003e64:	f7ff ffb2 	bl	8003dcc <MRT_LSM6DSR_getAcceleration>
	MRT_LSM6DSR_getAngularRate();
 8003e68:	f7ff ffcc 	bl	8003e04 <MRT_LSM6DSR_getAngularRate>
	MRT_LSM6DSR_getTemperature();
 8003e6c:	f7ff ffe6 	bl	8003e3c <MRT_LSM6DSR_getTemperature>
}
 8003e70:	bf00      	nop
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <MRT_LPS22HH_Constructor>:


//**************************************************//
/*****LPS22HH STATIC FUNCTIONS*****/

void MRT_LPS22HH_Constructor(){
 8003e74:	b598      	push	{r3, r4, r7, lr}
 8003e76:	af00      	add	r7, sp, #0
	if (lps22hh==NULL){
 8003e78:	4b08      	ldr	r3, [pc, #32]	; (8003e9c <MRT_LPS22HH_Constructor+0x28>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10b      	bne.n	8003e98 <MRT_LPS22HH_Constructor+0x24>
		lps22hh = new LPS22HH(&LPS22HH_I2C, (uint8_t) MRT_LPS22HH_ADDRESS);
 8003e80:	2020      	movs	r0, #32
 8003e82:	f012 ff25 	bl	8016cd0 <_Znwj>
 8003e86:	4603      	mov	r3, r0
 8003e88:	461c      	mov	r4, r3
 8003e8a:	22b3      	movs	r2, #179	; 0xb3
 8003e8c:	4904      	ldr	r1, [pc, #16]	; (8003ea0 <MRT_LPS22HH_Constructor+0x2c>)
 8003e8e:	4620      	mov	r0, r4
 8003e90:	f000 fa6c 	bl	800436c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>
 8003e94:	4b01      	ldr	r3, [pc, #4]	; (8003e9c <MRT_LPS22HH_Constructor+0x28>)
 8003e96:	601c      	str	r4, [r3, #0]
	}
}
 8003e98:	bf00      	nop
 8003e9a:	bd98      	pop	{r3, r4, r7, pc}
 8003e9c:	2000042c 	.word	0x2000042c
 8003ea0:	200052bc 	.word	0x200052bc

08003ea4 <MRT_LPS22HH_getPressure>:
	if (lps22hh!=NULL){
		lps22hh = NULL;
	}
}

void MRT_LPS22HH_getPressure(void){
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
	lps22hh->getPressure();
 8003ea8:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <MRT_LPS22HH_getPressure+0x1c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fae3 	bl	8004478 <_ZN7LPS22HH11getPressureEv>
	hlps22hh.pressure_hPa = lps22hh->pressure_hPa;
 8003eb2:	4b03      	ldr	r3, [pc, #12]	; (8003ec0 <MRT_LPS22HH_getPressure+0x1c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a02      	ldr	r2, [pc, #8]	; (8003ec4 <MRT_LPS22HH_getPressure+0x20>)
 8003eba:	6013      	str	r3, [r2, #0]
}
 8003ebc:	bf00      	nop
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	2000042c 	.word	0x2000042c
 8003ec4:	2000045c 	.word	0x2000045c

08003ec8 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(void){
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
	lps22hh->getTemperature();
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <MRT_LPS22HH_getTemperature+0x1c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fb00 	bl	80044d6 <_ZN7LPS22HH14getTemperatureEv>
	hlps22hh.temperature_degC = lps22hh->temperature_degC;
 8003ed6:	4b03      	ldr	r3, [pc, #12]	; (8003ee4 <MRT_LPS22HH_getTemperature+0x1c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	4a02      	ldr	r2, [pc, #8]	; (8003ee8 <MRT_LPS22HH_getTemperature+0x20>)
 8003ede:	6053      	str	r3, [r2, #4]
}
 8003ee0:	bf00      	nop
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	2000042c 	.word	0x2000042c
 8003ee8:	2000045c 	.word	0x2000045c

08003eec <MRT_LPS22HH_pollAll>:

void MRT_LPS22HH_pollAll(void){
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
	MRT_LPS22HH_getPressure();
 8003ef0:	f7ff ffd8 	bl	8003ea4 <MRT_LPS22HH_getPressure>
	MRT_LPS22HH_getTemperature();
 8003ef4:	f7ff ffe8 	bl	8003ec8 <MRT_LPS22HH_getTemperature>
}
 8003ef8:	bf00      	nop
 8003efa:	bd80      	pop	{r7, pc}

08003efc <MRT_GPS_pollAll>:


//**************************************************//
/*****GPS STATIC FUNCTIONS*****/

void MRT_GPS_pollAll(void){
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
	GPS_Poll(&hgps.latitude, &hgps.longitude, &hgps.time);
 8003f00:	4a03      	ldr	r2, [pc, #12]	; (8003f10 <MRT_GPS_pollAll+0x14>)
 8003f02:	4904      	ldr	r1, [pc, #16]	; (8003f14 <MRT_GPS_pollAll+0x18>)
 8003f04:	4804      	ldr	r0, [pc, #16]	; (8003f18 <MRT_GPS_pollAll+0x1c>)
 8003f06:	f000 fb51 	bl	80045ac <GPS_Poll>
}
 8003f0a:	bf00      	nop
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	20000478 	.word	0x20000478
 8003f14:	20000474 	.word	0x20000474
 8003f18:	20000470 	.word	0x20000470

08003f1c <MRT_LSM6DSR_Init>:


//**************************************************//
/*****PUBLIC STATIC FUNCTIONS*****/

HLSM6DSR MRT_LSM6DSR_Init(void){
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
	MRT_LSM6DSR_Constructor();
 8003f24:	f7ff ff3a 	bl	8003d9c <MRT_LSM6DSR_Constructor>
	HLSM6DSR lsm6dsr_handler;
	lsm6dsr_handler.getAcceleration = &MRT_LSM6DSR_getAcceleration;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a08      	ldr	r2, [pc, #32]	; (8003f4c <MRT_LSM6DSR_Init+0x30>)
 8003f2c:	61da      	str	r2, [r3, #28]
	lsm6dsr_handler.getAngularRate = &MRT_LSM6DSR_getAngularRate;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a07      	ldr	r2, [pc, #28]	; (8003f50 <MRT_LSM6DSR_Init+0x34>)
 8003f32:	621a      	str	r2, [r3, #32]
	lsm6dsr_handler.getTemperature = &MRT_LSM6DSR_getTemperature;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a07      	ldr	r2, [pc, #28]	; (8003f54 <MRT_LSM6DSR_Init+0x38>)
 8003f38:	625a      	str	r2, [r3, #36]	; 0x24
	lsm6dsr_handler.pollAll = &MRT_LSM6DSR_pollAll;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a06      	ldr	r2, [pc, #24]	; (8003f58 <MRT_LSM6DSR_Init+0x3c>)
 8003f3e:	629a      	str	r2, [r3, #40]	; 0x28
	return lsm6dsr_handler;
 8003f40:	bf00      	nop
}
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	08003dcd 	.word	0x08003dcd
 8003f50:	08003e05 	.word	0x08003e05
 8003f54:	08003e3d 	.word	0x08003e3d
 8003f58:	08003e61 	.word	0x08003e61

08003f5c <MRT_LPS22HH_Init>:

struct HLPS22HH MRT_LPS22HH_Init(void){
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
	MRT_LPS22HH_Constructor();
 8003f64:	f7ff ff86 	bl	8003e74 <MRT_LPS22HH_Constructor>
	struct HLPS22HH lps22hh_handler;
	lps22hh_handler.getPressure = &MRT_LPS22HH_getPressure;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a06      	ldr	r2, [pc, #24]	; (8003f84 <MRT_LPS22HH_Init+0x28>)
 8003f6c:	609a      	str	r2, [r3, #8]
	lps22hh_handler.getTemperature = &MRT_LPS22HH_getTemperature;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a05      	ldr	r2, [pc, #20]	; (8003f88 <MRT_LPS22HH_Init+0x2c>)
 8003f72:	60da      	str	r2, [r3, #12]
	lps22hh_handler.pollAll = &MRT_LPS22HH_pollAll;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a05      	ldr	r2, [pc, #20]	; (8003f8c <MRT_LPS22HH_Init+0x30>)
 8003f78:	611a      	str	r2, [r3, #16]
	return lps22hh_handler;
 8003f7a:	bf00      	nop
}
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	08003ea5 	.word	0x08003ea5
 8003f88:	08003ec9 	.word	0x08003ec9
 8003f8c:	08003eed 	.word	0x08003eed

08003f90 <MRT_GPS_Init>:

struct HGPS MRT_GPS_Init(void){
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
	struct HGPS gps_handler;
	gps_handler.pollAll = &MRT_GPS_pollAll;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a06      	ldr	r2, [pc, #24]	; (8003fb4 <MRT_GPS_Init+0x24>)
 8003f9c:	60da      	str	r2, [r3, #12]
	GPS_Init(&GPS_UART, print, tone_freq);
 8003f9e:	4a06      	ldr	r2, [pc, #24]	; (8003fb8 <MRT_GPS_Init+0x28>)
 8003fa0:	4906      	ldr	r1, [pc, #24]	; (8003fbc <MRT_GPS_Init+0x2c>)
 8003fa2:	4807      	ldr	r0, [pc, #28]	; (8003fc0 <MRT_GPS_Init+0x30>)
 8003fa4:	f000 fd62 	bl	8004a6c <GPS_Init>
	return gps_handler;
 8003fa8:	bf00      	nop
}
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	08003efd 	.word	0x08003efd
 8003fb8:	08001135 	.word	0x08001135
 8003fbc:	08001109 	.word	0x08001109
 8003fc0:	200055a4 	.word	0x200055a4

08003fc4 <MRT_i2c_sensors_Init>:

void MRT_i2c_sensors_Init(void){
 8003fc4:	b5b0      	push	{r4, r5, r7, lr}
 8003fc6:	b08c      	sub	sp, #48	; 0x30
 8003fc8:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	HAL_IWDG_Refresh(&hiwdg);
	hlsm6dsr = MRT_LSM6DSR_Init();
 8003fca:	4c13      	ldr	r4, [pc, #76]	; (8004018 <MRT_i2c_sensors_Init+0x54>)
 8003fcc:	463b      	mov	r3, r7
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff ffa4 	bl	8003f1c <MRT_LSM6DSR_Init>
 8003fd4:	4625      	mov	r5, r4
 8003fd6:	463c      	mov	r4, r7
 8003fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fe0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003fe4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	#endif

	//LPS22HH
	#if LPS22HH_
	HAL_IWDG_Refresh(&hiwdg);
	hlps22hh = MRT_LPS22HH_Init();
 8003fe8:	4c0c      	ldr	r4, [pc, #48]	; (800401c <MRT_i2c_sensors_Init+0x58>)
 8003fea:	463b      	mov	r3, r7
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff ffb5 	bl	8003f5c <MRT_LPS22HH_Init>
 8003ff2:	4625      	mov	r5, r4
 8003ff4:	463c      	mov	r4, r7
 8003ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	602b      	str	r3, [r5, #0]
	#endif

	//GPS
	#if GPS_
	HAL_IWDG_Refresh(&hiwdg);
	hgps = MRT_GPS_Init();
 8003ffe:	4c08      	ldr	r4, [pc, #32]	; (8004020 <MRT_i2c_sensors_Init+0x5c>)
 8004000:	463b      	mov	r3, r7
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff ffc4 	bl	8003f90 <MRT_GPS_Init>
 8004008:	463b      	mov	r3, r7
 800400a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800400c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	#endif

}
 8004010:	bf00      	nop
 8004012:	3730      	adds	r7, #48	; 0x30
 8004014:	46bd      	mov	sp, r7
 8004016:	bdb0      	pop	{r4, r5, r7, pc}
 8004018:	20000430 	.word	0x20000430
 800401c:	2000045c 	.word	0x2000045c
 8004020:	20000470 	.word	0x20000470

08004024 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>:


//**************************************************//
/*****LSM6DSR*****/

LSM6DSR::LSM6DSR(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	4613      	mov	r3, r2
 8004030:	71fb      	strb	r3, [r7, #7]
	println((char*) "LSM6DSR Setup Starts");
 8004032:	4847      	ldr	r0, [pc, #284]	; (8004150 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x12c>)
 8004034:	f7fd f84a 	bl	80010cc <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4a46      	ldr	r2, [pc, #280]	; (8004154 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x130>)
 800403c:	61da      	str	r2, [r3, #28]
	ctx.read_reg = read;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4a45      	ldr	r2, [pc, #276]	; (8004158 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x134>)
 8004042:	621a      	str	r2, [r3, #32]
	ctx.handle = i2c_bus;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait sensor boot time */
	HAL_Delay(LSM6DSR_BOOT_TIME);
 800404a:	2064      	movs	r0, #100	; 0x64
 800404c:	f005 f90c 	bl	8009268 <HAL_Delay>
	/* Check device ID */
	lsm6dsr_device_id_get(&ctx, &whoamI);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f103 021c 	add.w	r2, r3, #28
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3338      	adds	r3, #56	; 0x38
 800405a:	4619      	mov	r1, r3
 800405c:	4610      	mov	r0, r2
 800405e:	f001 fadb 	bl	8005618 <lsm6dsr_device_id_get>

	print((char*) "\tChecking Sensor ID...");
 8004062:	483e      	ldr	r0, [pc, #248]	; (800415c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x138>)
 8004064:	f7fd f850 	bl	8001108 <print>
	if (whoamI != address){
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800406e:	79fa      	ldrb	r2, [r7, #7]
 8004070:	429a      	cmp	r2, r3
 8004072:	d018      	beq.n	80040a6 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x82>
	  println((char*) "NOT OK");
 8004074:	483a      	ldr	r0, [pc, #232]	; (8004160 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x13c>)
 8004076:	f7fd f829 	bl	80010cc <println>
	  print((char*) "\tThis Device is: ");
 800407a:	483a      	ldr	r0, [pc, #232]	; (8004164 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x140>)
 800407c:	f7fd f844 	bl	8001108 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004086:	461a      	mov	r2, r3
 8004088:	f107 0314 	add.w	r3, r7, #20
 800408c:	4936      	ldr	r1, [pc, #216]	; (8004168 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x144>)
 800408e:	4618      	mov	r0, r3
 8004090:	f014 fb72 	bl	8018778 <siprintf>
	  print(buffer);
 8004094:	f107 0314 	add.w	r3, r7, #20
 8004098:	4618      	mov	r0, r3
 800409a:	f7fd f835 	bl	8001108 <print>

	  println((char*) "\n\rProgram Terminated\n\r");
 800409e:	4833      	ldr	r0, [pc, #204]	; (800416c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x148>)
 80040a0:	f7fd f814 	bl	80010cc <println>
	  while(1);
 80040a4:	e7fe      	b.n	80040a4 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x80>
	}
	println((char*) "OK");
 80040a6:	4832      	ldr	r0, [pc, #200]	; (8004170 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x14c>)
 80040a8:	f7fd f810 	bl	80010cc <println>

	/* Restore default configuration */
	lsm6dsr_reset_set(&ctx, PROPERTY_ENABLE);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	331c      	adds	r3, #28
 80040b0:	2101      	movs	r1, #1
 80040b2:	4618      	mov	r0, r3
 80040b4:	f001 fac1 	bl	800563a <lsm6dsr_reset_set>
	HAL_Delay(500);
 80040b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80040bc:	f005 f8d4 	bl	8009268 <HAL_Delay>
	do {
	lsm6dsr_reset_get(&ctx, &rst);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f103 021c 	add.w	r2, r3, #28
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	3339      	adds	r3, #57	; 0x39
 80040ca:	4619      	mov	r1, r3
 80040cc:	4610      	mov	r0, r2
 80040ce:	f001 fada 	bl	8005686 <lsm6dsr_reset_get>
	} while (rst);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d000      	beq.n	80040de <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0xba>
	do {
 80040dc:	e7f0      	b.n	80040c0 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x9c>

	/* Disable I3C interface */
    lsm6dsr_i3c_disable_set(&ctx, LSM6DSR_I3C_DISABLE); //TODO Jasper
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	331c      	adds	r3, #28
 80040e2:	2180      	movs	r1, #128	; 0x80
 80040e4:	4618      	mov	r0, r3
 80040e6:	f001 fb45 	bl	8005774 <lsm6dsr_i3c_disable_set>

	/* Enable Block Data Update */
	lsm6dsr_block_data_update_set(&ctx, PROPERTY_ENABLE);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	331c      	adds	r3, #28
 80040ee:	2101      	movs	r1, #1
 80040f0:	4618      	mov	r0, r3
 80040f2:	f001 f941 	bl	8005378 <lsm6dsr_block_data_update_set>
	/* Set Output Data Rate */
	lsm6dsr_xl_data_rate_set(&ctx, LSM6DSR_XL_ODR_12Hz5);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	331c      	adds	r3, #28
 80040fa:	2101      	movs	r1, #1
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 ff1d 	bl	8004f3c <lsm6dsr_xl_data_rate_set>
	lsm6dsr_gy_data_rate_set(&ctx, LSM6DSR_GY_ODR_12Hz5);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	331c      	adds	r3, #28
 8004106:	2101      	movs	r1, #1
 8004108:	4618      	mov	r0, r3
 800410a:	f001 f839 	bl	8005180 <lsm6dsr_gy_data_rate_set>
	/* Set full scale */
	lsm6dsr_xl_full_scale_set(&ctx, LSM6DSR_2g);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	331c      	adds	r3, #28
 8004112:	2100      	movs	r1, #0
 8004114:	4618      	mov	r0, r3
 8004116:	f000 feeb 	bl	8004ef0 <lsm6dsr_xl_full_scale_set>
	lsm6dsr_gy_full_scale_set(&ctx, LSM6DSR_2000dps);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	331c      	adds	r3, #28
 800411e:	210c      	movs	r1, #12
 8004120:	4618      	mov	r0, r3
 8004122:	f001 f807 	bl	8005134 <lsm6dsr_gy_full_scale_set>
	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsr_xl_hp_path_on_out_set(&ctx, LSM6DSR_LP_ODR_DIV_100); //TODO JASPER
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	331c      	adds	r3, #28
 800412a:	2104      	movs	r1, #4
 800412c:	4618      	mov	r0, r3
 800412e:	f001 fae9 	bl	8005704 <lsm6dsr_xl_hp_path_on_out_set>
	lsm6dsr_xl_filter_lp2_set(&ctx, PROPERTY_ENABLE); //TODO JASPER
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	331c      	adds	r3, #28
 8004136:	2101      	movs	r1, #1
 8004138:	4618      	mov	r0, r3
 800413a:	f001 fabd 	bl	80056b8 <lsm6dsr_xl_filter_lp2_set>
	println((char*) "\tSetup Ends");
 800413e:	480d      	ldr	r0, [pc, #52]	; (8004174 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x150>)
 8004140:	f7fc ffc4 	bl	80010cc <println>

}
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4618      	mov	r0, r3
 8004148:	3720      	adds	r7, #32
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	0801dbc4 	.word	0x0801dbc4
 8004154:	080042f7 	.word	0x080042f7
 8004158:	08004331 	.word	0x08004331
 800415c:	0801dbdc 	.word	0x0801dbdc
 8004160:	0801dbf4 	.word	0x0801dbf4
 8004164:	0801dbfc 	.word	0x0801dbfc
 8004168:	0801dc10 	.word	0x0801dc10
 800416c:	0801dc18 	.word	0x0801dc18
 8004170:	0801dc30 	.word	0x0801dc30
 8004174:	0801dc34 	.word	0x0801dc34

08004178 <_ZN7LSM6DSR15getAccelerationEv>:


void LSM6DSR::getAcceleration(void){
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
	lsm6dsr_xl_flag_data_ready_get(&ctx, &reg);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f103 021c 	add.w	r2, r3, #28
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3328      	adds	r3, #40	; 0x28
 800418a:	4619      	mov	r1, r3
 800418c:	4610      	mov	r0, r2
 800418e:	f001 f919 	bl	80053c4 <lsm6dsr_xl_flag_data_ready_get>

	if (reg){
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004198:	2b00      	cmp	r3, #0
 800419a:	d030      	beq.n	80041fe <_ZN7LSM6DSR15getAccelerationEv+0x86>
		// Read magnetic field data
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	332a      	adds	r3, #42	; 0x2a
 80041a0:	2206      	movs	r2, #6
 80041a2:	2100      	movs	r1, #0
 80041a4:	4618      	mov	r0, r3
 80041a6:	f013 f855 	bl	8017254 <memset>
		lsm6dsr_acceleration_raw_get(&ctx, data_raw_acceleration);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f103 021c 	add.w	r2, r3, #28
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	332a      	adds	r3, #42	; 0x2a
 80041b4:	4619      	mov	r1, r3
 80041b6:	4610      	mov	r0, r2
 80041b8:	f001 f9bd 	bl	8005536 <lsm6dsr_acceleration_raw_get>
		acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[0]);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fe48 	bl	8004e58 <lsm6dsr_from_fs2g_to_mg>
 80041c8:	eef0 7a40 	vmov.f32	s15, s0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	edc3 7a00 	vstr	s15, [r3]
		acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[1]);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fe3d 	bl	8004e58 <lsm6dsr_from_fs2g_to_mg>
 80041de:	eef0 7a40 	vmov.f32	s15, s0
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	edc3 7a01 	vstr	s15, [r3, #4]
		acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[2]);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fe32 	bl	8004e58 <lsm6dsr_from_fs2g_to_mg>
 80041f4:	eef0 7a40 	vmov.f32	s15, s0
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	edc3 7a02 	vstr	s15, [r3, #8]
	}
}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <_ZN7LSM6DSR14getTemperatureEv>:


void LSM6DSR::getTemperature(void){
 8004206:	b580      	push	{r7, lr}
 8004208:	b082      	sub	sp, #8
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
    lsm6dsr_temp_flag_data_ready_get(&ctx, &reg);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f103 021c 	add.w	r2, r3, #28
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3328      	adds	r3, #40	; 0x28
 8004218:	4619      	mov	r1, r3
 800421a:	4610      	mov	r0, r2
 800421c:	f001 f904 	bl	8005428 <lsm6dsr_temp_flag_data_ready_get>

    if (reg){
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004226:	2b00      	cmp	r3, #0
 8004228:	d01a      	beq.n	8004260 <_ZN7LSM6DSR14getTemperatureEv+0x5a>
		// Read temperature data
		memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	3336      	adds	r3, #54	; 0x36
 800422e:	2202      	movs	r2, #2
 8004230:	2100      	movs	r1, #0
 8004232:	4618      	mov	r0, r3
 8004234:	f013 f80e 	bl	8017254 <memset>
		lsm6dsr_temperature_raw_get(&ctx, &data_raw_temperature);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f103 021c 	add.w	r2, r3, #28
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3336      	adds	r3, #54	; 0x36
 8004242:	4619      	mov	r1, r3
 8004244:	4610      	mov	r0, r2
 8004246:	f001 f908 	bl	800545a <lsm6dsr_temperature_raw_get>
		temperature_degC = lsm6dsr_from_lsb_to_celsius(data_raw_temperature);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8004250:	4618      	mov	r0, r3
 8004252:	f000 fe31 	bl	8004eb8 <lsm6dsr_from_lsb_to_celsius>
 8004256:	eef0 7a40 	vmov.f32	s15, s0
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	edc3 7a06 	vstr	s15, [r3, #24]
	}
}
 8004260:	bf00      	nop
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <_ZN7LSM6DSR14getAngularRateEv>:


void LSM6DSR::getAngularRate(void){
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
    lsm6dsr_gy_flag_data_ready_get(&ctx, &reg);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f103 021c 	add.w	r2, r3, #28
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3328      	adds	r3, #40	; 0x28
 800427a:	4619      	mov	r1, r3
 800427c:	4610      	mov	r0, r2
 800427e:	f001 f8ba 	bl	80053f6 <lsm6dsr_gy_flag_data_ready_get>

    if (reg){
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004288:	2b00      	cmp	r3, #0
 800428a:	d030      	beq.n	80042ee <_ZN7LSM6DSR14getAngularRateEv+0x86>
		// Read magnetic field data
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3330      	adds	r3, #48	; 0x30
 8004290:	2206      	movs	r2, #6
 8004292:	2100      	movs	r1, #0
 8004294:	4618      	mov	r0, r3
 8004296:	f012 ffdd 	bl	8017254 <memset>
		lsm6dsr_angular_rate_raw_get(&ctx, data_raw_angular_rate);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f103 021c 	add.w	r2, r3, #28
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3330      	adds	r3, #48	; 0x30
 80042a4:	4619      	mov	r1, r3
 80042a6:	4610      	mov	r0, r2
 80042a8:	f001 f8fa 	bl	80054a0 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 fde8 	bl	8004e88 <lsm6dsr_from_fs2000dps_to_mdps>
 80042b8:	eef0 7a40 	vmov.f32	s15, s0
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	edc3 7a03 	vstr	s15, [r3, #12]
		angular_rate_mdps[1] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fddd 	bl	8004e88 <lsm6dsr_from_fs2000dps_to_mdps>
 80042ce:	eef0 7a40 	vmov.f32	s15, s0
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	edc3 7a04 	vstr	s15, [r3, #16]
		angular_rate_mdps[2] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fdd2 	bl	8004e88 <lsm6dsr_from_fs2000dps_to_mdps>
 80042e4:	eef0 7a40 	vmov.f32	s15, s0
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	edc3 7a05 	vstr	s15, [r3, #20]
		fs500dps_to_mdps
		fs1000dps_to_mdps
		fs2000dps_to_mdps
		*/
	}
}
 80042ee:	bf00      	nop
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <_ZN7LSM6DSR5writeEPvhPKht>:


int32_t LSM6DSR::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b088      	sub	sp, #32
 80042fa:	af04      	add	r7, sp, #16
 80042fc:	60f8      	str	r0, [r7, #12]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	461a      	mov	r2, r3
 8004302:	460b      	mov	r3, r1
 8004304:	72fb      	strb	r3, [r7, #11]
 8004306:	4613      	mov	r3, r2
 8004308:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 800430a:	7afb      	ldrb	r3, [r7, #11]
 800430c:	b29a      	uxth	r2, r3
 800430e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004312:	9302      	str	r3, [sp, #8]
 8004314:	893b      	ldrh	r3, [r7, #8]
 8004316:	9301      	str	r3, [sp, #4]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	2301      	movs	r3, #1
 800431e:	21d5      	movs	r1, #213	; 0xd5
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f005 fe91 	bl	800a048 <HAL_I2C_Mem_Write>
  return 0;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <_ZN7LSM6DSR4readEPvhPht>:

int32_t LSM6DSR::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8004330:	b580      	push	{r7, lr}
 8004332:	b088      	sub	sp, #32
 8004334:	af04      	add	r7, sp, #16
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	607a      	str	r2, [r7, #4]
 800433a:	461a      	mov	r2, r3
 800433c:	460b      	mov	r3, r1
 800433e:	72fb      	strb	r3, [r7, #11]
 8004340:	4613      	mov	r3, r2
 8004342:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8004344:	7afb      	ldrb	r3, [r7, #11]
 8004346:	b29a      	uxth	r2, r3
 8004348:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800434c:	9302      	str	r3, [sp, #8]
 800434e:	893b      	ldrh	r3, [r7, #8]
 8004350:	9301      	str	r3, [sp, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	2301      	movs	r3, #1
 8004358:	21d5      	movs	r1, #213	; 0xd5
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f005 ff6e 	bl	800a23c <HAL_I2C_Mem_Read>
  return 0;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>:

//**************************************************//
/*****LPS22HH*****/


LPS22HH::LPS22HH(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	4613      	mov	r3, r2
 8004378:	71fb      	strb	r3, [r7, #7]
	println((char*) "LPS22HH Setup Starts");
 800437a:	4835      	ldr	r0, [pc, #212]	; (8004450 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe4>)
 800437c:	f7fc fea6 	bl	80010cc <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4a34      	ldr	r2, [pc, #208]	; (8004454 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe8>)
 8004384:	609a      	str	r2, [r3, #8]
	ctx.read_reg = read;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4a33      	ldr	r2, [pc, #204]	; (8004458 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xec>)
 800438a:	60da      	str	r2, [r3, #12]
	ctx.handle = i2c_bus;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	611a      	str	r2, [r3, #16]
	/* Wait sensor boot time */
	HAL_Delay(LPS22HH_BOOT_TIME);
 8004392:	2064      	movs	r0, #100	; 0x64
 8004394:	f004 ff68 	bl	8009268 <HAL_Delay>
	/* Check device ID */
	whoamI = 0;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	779a      	strb	r2, [r3, #30]
	lps22hh_device_id_get(&ctx, &whoamI);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f103 0208 	add.w	r2, r3, #8
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	331e      	adds	r3, #30
 80043a8:	4619      	mov	r1, r3
 80043aa:	4610      	mov	r0, r2
 80043ac:	f000 fcd4 	bl	8004d58 <lps22hh_device_id_get>


	print((char*) "\tChecking Sensor ID...");
 80043b0:	482a      	ldr	r0, [pc, #168]	; (800445c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf0>)
 80043b2:	f7fc fea9 	bl	8001108 <print>
	if ( whoamI != address ){
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	7f9b      	ldrb	r3, [r3, #30]
 80043ba:	79fa      	ldrb	r2, [r7, #7]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d017      	beq.n	80043f0 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x84>
	  println((char*) "NOT OK");
 80043c0:	4827      	ldr	r0, [pc, #156]	; (8004460 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf4>)
 80043c2:	f7fc fe83 	bl	80010cc <println>
	  print((char*) "\tThis Device is: ");
 80043c6:	4827      	ldr	r0, [pc, #156]	; (8004464 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf8>)
 80043c8:	f7fc fe9e 	bl	8001108 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	7f9b      	ldrb	r3, [r3, #30]
 80043d0:	461a      	mov	r2, r3
 80043d2:	f107 0314 	add.w	r3, r7, #20
 80043d6:	4924      	ldr	r1, [pc, #144]	; (8004468 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xfc>)
 80043d8:	4618      	mov	r0, r3
 80043da:	f014 f9cd 	bl	8018778 <siprintf>
	  print(buffer);
 80043de:	f107 0314 	add.w	r3, r7, #20
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fc fe90 	bl	8001108 <print>

	  println((char*) "\n\rProgram Terminated\n\r");
 80043e8:	4820      	ldr	r0, [pc, #128]	; (800446c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x100>)
 80043ea:	f7fc fe6f 	bl	80010cc <println>
	  while(1);
 80043ee:	e7fe      	b.n	80043ee <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x82>
	}
	println((char*) "OK");
 80043f0:	481f      	ldr	r0, [pc, #124]	; (8004470 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x104>)
 80043f2:	f7fc fe6b 	bl	80010cc <println>

	/* Restore default configuration */
	lps22hh_reset_set(&ctx, PROPERTY_ENABLE);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	3308      	adds	r3, #8
 80043fa:	2101      	movs	r1, #1
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 fcbc 	bl	8004d7a <lps22hh_reset_set>
	HAL_Delay(500);
 8004402:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004406:	f004 ff2f 	bl	8009268 <HAL_Delay>
	do {
	lps22hh_reset_get(&ctx, &rst);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f103 0208 	add.w	r2, r3, #8
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	331f      	adds	r3, #31
 8004414:	4619      	mov	r1, r3
 8004416:	4610      	mov	r0, r2
 8004418:	f000 fcd5 	bl	8004dc6 <lps22hh_reset_get>
	} while (rst);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	7fdb      	ldrb	r3, [r3, #31]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d000      	beq.n	8004426 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xba>
	do {
 8004424:	e7f1      	b.n	800440a <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x9e>


	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&ctx, PROPERTY_ENABLE);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	3308      	adds	r3, #8
 800442a:	2101      	movs	r1, #1
 800442c:	4618      	mov	r0, r3
 800442e:	f000 fba1 	bl	8004b74 <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&ctx, LPS22HH_75_Hz_LOW_NOISE);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	3308      	adds	r3, #8
 8004436:	2115      	movs	r1, #21
 8004438:	4618      	mov	r0, r3
 800443a:	f000 fbc1 	bl	8004bc0 <lps22hh_data_rate_set>
	println((char*) "\tSetup Ends");
 800443e:	480d      	ldr	r0, [pc, #52]	; (8004474 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x108>)
 8004440:	f7fc fe44 	bl	80010cc <println>

}
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4618      	mov	r0, r3
 8004448:	3720      	adds	r7, #32
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	0801dc40 	.word	0x0801dc40
 8004454:	08004537 	.word	0x08004537
 8004458:	08004571 	.word	0x08004571
 800445c:	0801dbdc 	.word	0x0801dbdc
 8004460:	0801dbf4 	.word	0x0801dbf4
 8004464:	0801dbfc 	.word	0x0801dbfc
 8004468:	0801dc10 	.word	0x0801dc10
 800446c:	0801dc18 	.word	0x0801dc18
 8004470:	0801dc30 	.word	0x0801dc30
 8004474:	0801dc34 	.word	0x0801dc34

08004478 <_ZN7LPS22HH11getPressureEv>:



void LPS22HH::getPressure(void){
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_press_flag_data_ready_get(&ctx, &reg);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f103 0208 	add.w	r2, r3, #8
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3314      	adds	r3, #20
 800448a:	4619      	mov	r1, r3
 800448c:	4610      	mov	r0, r2
 800448e:	f000 fbe5 	bl	8004c5c <lps22hh_press_flag_data_ready_get>

	if (reg) {
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	7d1b      	ldrb	r3, [r3, #20]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d019      	beq.n	80044ce <_ZN7LPS22HH11getPressureEv+0x56>
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3318      	adds	r3, #24
 800449e:	2204      	movs	r2, #4
 80044a0:	2100      	movs	r1, #0
 80044a2:	4618      	mov	r0, r3
 80044a4:	f012 fed6 	bl	8017254 <memset>
	  lps22hh_pressure_raw_get(&ctx, &data_raw_pressure);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f103 0208 	add.w	r2, r3, #8
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	3318      	adds	r3, #24
 80044b2:	4619      	mov	r1, r3
 80044b4:	4610      	mov	r0, r2
 80044b6:	f000 fc03 	bl	8004cc0 <lps22hh_pressure_raw_get>
	  pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 fb26 	bl	8004b10 <lps22hh_from_lsb_to_hpa>
 80044c4:	eef0 7a40 	vmov.f32	s15, s0
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80044ce:	bf00      	nop
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <_ZN7LPS22HH14getTemperatureEv>:


void LPS22HH::getTemperature(void){
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b082      	sub	sp, #8
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_temp_flag_data_ready_get(&ctx, &reg);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f103 0208 	add.w	r2, r3, #8
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3314      	adds	r3, #20
 80044e8:	4619      	mov	r1, r3
 80044ea:	4610      	mov	r0, r2
 80044ec:	f000 fbcf 	bl	8004c8e <lps22hh_temp_flag_data_ready_get>

	if (reg) {
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	7d1b      	ldrb	r3, [r3, #20]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d01a      	beq.n	800452e <_ZN7LPS22HH14getTemperatureEv+0x58>
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	331c      	adds	r3, #28
 80044fc:	2202      	movs	r2, #2
 80044fe:	2100      	movs	r1, #0
 8004500:	4618      	mov	r0, r3
 8004502:	f012 fea7 	bl	8017254 <memset>
	  lps22hh_temperature_raw_get(&ctx, &data_raw_temperature);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f103 0208 	add.w	r2, r3, #8
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	331c      	adds	r3, #28
 8004510:	4619      	mov	r1, r3
 8004512:	4610      	mov	r0, r2
 8004514:	f000 fbfd 	bl	8004d12 <lps22hh_temperature_raw_get>
	  temperature_degC = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fb0e 	bl	8004b40 <lps22hh_from_lsb_to_celsius>
 8004524:	eef0 7a40 	vmov.f32	s15, s0
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	edc3 7a01 	vstr	s15, [r3, #4]
	}
}
 800452e:	bf00      	nop
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <_ZN7LPS22HH5writeEPvhPKht>:



int32_t LPS22HH::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8004536:	b580      	push	{r7, lr}
 8004538:	b088      	sub	sp, #32
 800453a:	af04      	add	r7, sp, #16
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	461a      	mov	r2, r3
 8004542:	460b      	mov	r3, r1
 8004544:	72fb      	strb	r3, [r7, #11]
 8004546:	4613      	mov	r3, r2
 8004548:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 800454a:	7afb      	ldrb	r3, [r7, #11]
 800454c:	b29a      	uxth	r2, r3
 800454e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004552:	9302      	str	r3, [sp, #8]
 8004554:	893b      	ldrh	r3, [r7, #8]
 8004556:	9301      	str	r3, [sp, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	2301      	movs	r3, #1
 800455e:	21b9      	movs	r1, #185	; 0xb9
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f005 fd71 	bl	800a048 <HAL_I2C_Mem_Write>
  return 0;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <_ZN7LPS22HH4readEPvhPht>:

int32_t LPS22HH::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af04      	add	r7, sp, #16
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	607a      	str	r2, [r7, #4]
 800457a:	461a      	mov	r2, r3
 800457c:	460b      	mov	r3, r1
 800457e:	72fb      	strb	r3, [r7, #11]
 8004580:	4613      	mov	r3, r2
 8004582:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8004584:	7afb      	ldrb	r3, [r7, #11]
 8004586:	b29a      	uxth	r2, r3
 8004588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800458c:	9302      	str	r3, [sp, #8]
 800458e:	893b      	ldrh	r3, [r7, #8]
 8004590:	9301      	str	r3, [sp, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	2301      	movs	r3, #1
 8004598:	21b9      	movs	r1, #185	; 0xb9
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f005 fe4e 	bl	800a23c <HAL_I2C_Mem_Read>
  return 0;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
	...

080045ac <GPS_Poll>:
#define LED3_GPIO_Port	((GPIO_TypeDef *) ((0x40000000UL + 0x00020000UL) + 0x0800UL))//OUT_LED3_GPIO_Port
#define LED3_Pin	(uint16_t)0x0008//OUT_LED3_Pin


void GPS_Poll(float *latitude, float *longitude, float *time)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08c      	sub	sp, #48	; 0x30
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 80045b8:	2364      	movs	r3, #100	; 0x64
 80045ba:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 80045bc:	2300      	movs	r3, #0
 80045be:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 80045c0:	2300      	movs	r3, #0
 80045c2:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 80045c4:	e073      	b.n	80046ae <GPS_Poll+0x102>
		HAL_UART_Receive(GPS.uart, (uint8_t*)&rx_current, 1, 100);
 80045c6:	4b3f      	ldr	r3, [pc, #252]	; (80046c4 <GPS_Poll+0x118>)
 80045c8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80045ca:	2364      	movs	r3, #100	; 0x64
 80045cc:	2201      	movs	r2, #1
 80045ce:	493e      	ldr	r1, [pc, #248]	; (80046c8 <GPS_Poll+0x11c>)
 80045d0:	f00a fec5 	bl	800f35e <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 80045d4:	4b3c      	ldr	r3, [pc, #240]	; (80046c8 <GPS_Poll+0x11c>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b0a      	cmp	r3, #10
 80045da:	d00f      	beq.n	80045fc <GPS_Poll+0x50>
 80045dc:	4b3b      	ldr	r3, [pc, #236]	; (80046cc <GPS_Poll+0x120>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b63      	cmp	r3, #99	; 0x63
 80045e2:	d80b      	bhi.n	80045fc <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 80045e4:	4b39      	ldr	r3, [pc, #228]	; (80046cc <GPS_Poll+0x120>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	b2d1      	uxtb	r1, r2
 80045ec:	4a37      	ldr	r2, [pc, #220]	; (80046cc <GPS_Poll+0x120>)
 80045ee:	7011      	strb	r1, [r2, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	4b35      	ldr	r3, [pc, #212]	; (80046c8 <GPS_Poll+0x11c>)
 80045f4:	7819      	ldrb	r1, [r3, #0]
 80045f6:	4b36      	ldr	r3, [pc, #216]	; (80046d0 <GPS_Poll+0x124>)
 80045f8:	5499      	strb	r1, [r3, r2]
 80045fa:	e021      	b.n	8004640 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 80045fc:	4834      	ldr	r0, [pc, #208]	; (80046d0 <GPS_Poll+0x124>)
 80045fe:	f000 f869 	bl	80046d4 <GPS_validate>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d013      	beq.n	8004630 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 8004608:	4831      	ldr	r0, [pc, #196]	; (80046d0 <GPS_Poll+0x124>)
 800460a:	f000 f8c5 	bl	8004798 <GPS_parse>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00d      	beq.n	8004630 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 8004614:	4b2b      	ldr	r3, [pc, #172]	; (80046c4 <GPS_Poll+0x118>)
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 800461c:	4b29      	ldr	r3, [pc, #164]	; (80046c4 <GPS_Poll+0x118>)
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 8004624:	4b27      	ldr	r3, [pc, #156]	; (80046c4 <GPS_Poll+0x118>)
 8004626:	695a      	ldr	r2, [r3, #20]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	601a      	str	r2, [r3, #0]
					done = 1;
 800462c:	2301      	movs	r3, #1
 800462e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 8004630:	4b26      	ldr	r3, [pc, #152]	; (80046cc <GPS_Poll+0x120>)
 8004632:	2200      	movs	r2, #0
 8004634:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 8004636:	2264      	movs	r2, #100	; 0x64
 8004638:	2100      	movs	r1, #0
 800463a:	4825      	ldr	r0, [pc, #148]	; (80046d0 <GPS_Poll+0x124>)
 800463c:	f012 fe0a 	bl	8017254 <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS.uart);
 8004640:	2300      	movs	r3, #0
 8004642:	623b      	str	r3, [r7, #32]
 8004644:	4b1f      	ldr	r3, [pc, #124]	; (80046c4 <GPS_Poll+0x118>)
 8004646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	623b      	str	r3, [r7, #32]
 800464e:	4b1d      	ldr	r3, [pc, #116]	; (80046c4 <GPS_Poll+0x118>)
 8004650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	623b      	str	r3, [r7, #32]
 8004658:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS.uart);
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	4b19      	ldr	r3, [pc, #100]	; (80046c4 <GPS_Poll+0x118>)
 8004660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	61fb      	str	r3, [r7, #28]
 8004668:	4b16      	ldr	r3, [pc, #88]	; (80046c4 <GPS_Poll+0x118>)
 800466a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	61fb      	str	r3, [r7, #28]
 8004672:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS.uart);
 8004674:	2300      	movs	r3, #0
 8004676:	61bb      	str	r3, [r7, #24]
 8004678:	4b12      	ldr	r3, [pc, #72]	; (80046c4 <GPS_Poll+0x118>)
 800467a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	61bb      	str	r3, [r7, #24]
 8004682:	4b10      	ldr	r3, [pc, #64]	; (80046c4 <GPS_Poll+0x118>)
 8004684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	61bb      	str	r3, [r7, #24]
 800468c:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS.uart);
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <GPS_Poll+0x118>)
 8004694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	4b09      	ldr	r3, [pc, #36]	; (80046c4 <GPS_Poll+0x118>)
 800469e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 80046a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80046aa:	3301      	adds	r3, #1
 80046ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 80046ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80046b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d202      	bcs.n	80046bc <GPS_Poll+0x110>
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d084      	beq.n	80045c6 <GPS_Poll+0x1a>
	}
}
 80046bc:	bf00      	nop
 80046be:	3730      	adds	r7, #48	; 0x30
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	2000625c 	.word	0x2000625c
 80046c8:	20000480 	.word	0x20000480
 80046cc:	20000481 	.word	0x20000481
 80046d0:	200062c0 	.word	0x200062c0

080046d4 <GPS_validate>:

int GPS_validate(char *nmeastr){
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 80046dc:	2300      	movs	r3, #0
 80046de:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	4413      	add	r3, r2
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	2b24      	cmp	r3, #36	; 0x24
 80046ee:	d103      	bne.n	80046f8 <GPS_validate+0x24>
        i++;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	3301      	adds	r3, #1
 80046f4:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80046f6:	e00c      	b.n	8004712 <GPS_validate+0x3e>
        return 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	e047      	b.n	800478c <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	4413      	add	r3, r2
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	461a      	mov	r2, r3
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	4053      	eors	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
        i++;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	3301      	adds	r3, #1
 8004710:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	4413      	add	r3, r2
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d008      	beq.n	8004730 <GPS_validate+0x5c>
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	4413      	add	r3, r2
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	2b2a      	cmp	r3, #42	; 0x2a
 8004728:	d002      	beq.n	8004730 <GPS_validate+0x5c>
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b4a      	cmp	r3, #74	; 0x4a
 800472e:	dde5      	ble.n	80046fc <GPS_validate+0x28>
    }

    if(i >= 75){
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2b4a      	cmp	r3, #74	; 0x4a
 8004734:	dd01      	ble.n	800473a <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 8004736:	2300      	movs	r3, #0
 8004738:	e028      	b.n	800478c <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	4413      	add	r3, r2
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b2a      	cmp	r3, #42	; 0x2a
 8004744:	d119      	bne.n	800477a <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	3301      	adds	r3, #1
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	4413      	add	r3, r2
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	3302      	adds	r3, #2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	4413      	add	r3, r2
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 800475e:	2300      	movs	r3, #0
 8004760:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8004762:	f107 0308 	add.w	r3, r7, #8
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	490a      	ldr	r1, [pc, #40]	; (8004794 <GPS_validate+0xc0>)
 800476a:	4618      	mov	r0, r3
 800476c:	f014 f804 	bl	8018778 <siprintf>
    return((checkcalcstr[0] == check[0])
 8004770:	7a3a      	ldrb	r2, [r7, #8]
 8004772:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8004774:	429a      	cmp	r2, r3
 8004776:	d108      	bne.n	800478a <GPS_validate+0xb6>
 8004778:	e001      	b.n	800477e <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 800477a:	2300      	movs	r3, #0
 800477c:	e006      	b.n	800478c <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800477e:	7a7a      	ldrb	r2, [r7, #9]
 8004780:	7b7b      	ldrb	r3, [r7, #13]
 8004782:	429a      	cmp	r2, r3
 8004784:	d101      	bne.n	800478a <GPS_validate+0xb6>
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <GPS_validate+0xb8>
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	0801dc58 	.word	0x0801dc58

08004798 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 8004798:	b580      	push	{r7, lr}
 800479a:	b08a      	sub	sp, #40	; 0x28
 800479c:	af08      	add	r7, sp, #32
 800479e:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 80047a0:	2206      	movs	r2, #6
 80047a2:	496d      	ldr	r1, [pc, #436]	; (8004958 <GPS_parse+0x1c0>)
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f014 f88d 	bl	80188c4 <strncmp>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d139      	bne.n	8004824 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 80047b0:	4b6a      	ldr	r3, [pc, #424]	; (800495c <GPS_parse+0x1c4>)
 80047b2:	9307      	str	r3, [sp, #28]
 80047b4:	4b6a      	ldr	r3, [pc, #424]	; (8004960 <GPS_parse+0x1c8>)
 80047b6:	9306      	str	r3, [sp, #24]
 80047b8:	4b6a      	ldr	r3, [pc, #424]	; (8004964 <GPS_parse+0x1cc>)
 80047ba:	9305      	str	r3, [sp, #20]
 80047bc:	4b6a      	ldr	r3, [pc, #424]	; (8004968 <GPS_parse+0x1d0>)
 80047be:	9304      	str	r3, [sp, #16]
 80047c0:	4b6a      	ldr	r3, [pc, #424]	; (800496c <GPS_parse+0x1d4>)
 80047c2:	9303      	str	r3, [sp, #12]
 80047c4:	4b6a      	ldr	r3, [pc, #424]	; (8004970 <GPS_parse+0x1d8>)
 80047c6:	9302      	str	r3, [sp, #8]
 80047c8:	4b6a      	ldr	r3, [pc, #424]	; (8004974 <GPS_parse+0x1dc>)
 80047ca:	9301      	str	r3, [sp, #4]
 80047cc:	4b6a      	ldr	r3, [pc, #424]	; (8004978 <GPS_parse+0x1e0>)
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	4b6a      	ldr	r3, [pc, #424]	; (800497c <GPS_parse+0x1e4>)
 80047d2:	4a6b      	ldr	r2, [pc, #428]	; (8004980 <GPS_parse+0x1e8>)
 80047d4:	496b      	ldr	r1, [pc, #428]	; (8004984 <GPS_parse+0x1ec>)
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f013 ffee 	bl	80187b8 <siscanf>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f340 80b5 	ble.w	800494e <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80047e4:	4b68      	ldr	r3, [pc, #416]	; (8004988 <GPS_parse+0x1f0>)
 80047e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80047ea:	4b67      	ldr	r3, [pc, #412]	; (8004988 <GPS_parse+0x1f0>)
 80047ec:	7e1b      	ldrb	r3, [r3, #24]
 80047ee:	4618      	mov	r0, r3
 80047f0:	eeb0 0a67 	vmov.f32	s0, s15
 80047f4:	f000 f8ec 	bl	80049d0 <GPS_nmea_to_dec>
 80047f8:	eef0 7a40 	vmov.f32	s15, s0
 80047fc:	4b62      	ldr	r3, [pc, #392]	; (8004988 <GPS_parse+0x1f0>)
 80047fe:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8004802:	4b61      	ldr	r3, [pc, #388]	; (8004988 <GPS_parse+0x1f0>)
 8004804:	edd3 7a03 	vldr	s15, [r3, #12]
 8004808:	4b5f      	ldr	r3, [pc, #380]	; (8004988 <GPS_parse+0x1f0>)
 800480a:	7e5b      	ldrb	r3, [r3, #25]
 800480c:	4618      	mov	r0, r3
 800480e:	eeb0 0a67 	vmov.f32	s0, s15
 8004812:	f000 f8dd 	bl	80049d0 <GPS_nmea_to_dec>
 8004816:	eef0 7a40 	vmov.f32	s15, s0
 800481a:	4b5b      	ldr	r3, [pc, #364]	; (8004988 <GPS_parse+0x1f0>)
 800481c:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8004820:	2301      	movs	r3, #1
 8004822:	e095      	b.n	8004950 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 8004824:	2206      	movs	r2, #6
 8004826:	4959      	ldr	r1, [pc, #356]	; (800498c <GPS_parse+0x1f4>)
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f014 f84b 	bl	80188c4 <strncmp>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d134      	bne.n	800489e <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 8004834:	4b56      	ldr	r3, [pc, #344]	; (8004990 <GPS_parse+0x1f8>)
 8004836:	9305      	str	r3, [sp, #20]
 8004838:	4b56      	ldr	r3, [pc, #344]	; (8004994 <GPS_parse+0x1fc>)
 800483a:	9304      	str	r3, [sp, #16]
 800483c:	4b56      	ldr	r3, [pc, #344]	; (8004998 <GPS_parse+0x200>)
 800483e:	9303      	str	r3, [sp, #12]
 8004840:	4b4b      	ldr	r3, [pc, #300]	; (8004970 <GPS_parse+0x1d8>)
 8004842:	9302      	str	r3, [sp, #8]
 8004844:	4b4b      	ldr	r3, [pc, #300]	; (8004974 <GPS_parse+0x1dc>)
 8004846:	9301      	str	r3, [sp, #4]
 8004848:	4b4b      	ldr	r3, [pc, #300]	; (8004978 <GPS_parse+0x1e0>)
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	4b4b      	ldr	r3, [pc, #300]	; (800497c <GPS_parse+0x1e4>)
 800484e:	4a4c      	ldr	r2, [pc, #304]	; (8004980 <GPS_parse+0x1e8>)
 8004850:	4952      	ldr	r1, [pc, #328]	; (800499c <GPS_parse+0x204>)
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f013 ffb0 	bl	80187b8 <siscanf>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	dd77      	ble.n	800494e <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800485e:	4b4a      	ldr	r3, [pc, #296]	; (8004988 <GPS_parse+0x1f0>)
 8004860:	edd3 7a04 	vldr	s15, [r3, #16]
 8004864:	4b48      	ldr	r3, [pc, #288]	; (8004988 <GPS_parse+0x1f0>)
 8004866:	7e1b      	ldrb	r3, [r3, #24]
 8004868:	4618      	mov	r0, r3
 800486a:	eeb0 0a67 	vmov.f32	s0, s15
 800486e:	f000 f8af 	bl	80049d0 <GPS_nmea_to_dec>
 8004872:	eef0 7a40 	vmov.f32	s15, s0
 8004876:	4b44      	ldr	r3, [pc, #272]	; (8004988 <GPS_parse+0x1f0>)
 8004878:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800487c:	4b42      	ldr	r3, [pc, #264]	; (8004988 <GPS_parse+0x1f0>)
 800487e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004882:	4b41      	ldr	r3, [pc, #260]	; (8004988 <GPS_parse+0x1f0>)
 8004884:	7e5b      	ldrb	r3, [r3, #25]
 8004886:	4618      	mov	r0, r3
 8004888:	eeb0 0a67 	vmov.f32	s0, s15
 800488c:	f000 f8a0 	bl	80049d0 <GPS_nmea_to_dec>
 8004890:	eef0 7a40 	vmov.f32	s15, s0
 8004894:	4b3c      	ldr	r3, [pc, #240]	; (8004988 <GPS_parse+0x1f0>)
 8004896:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 800489a:	2301      	movs	r3, #1
 800489c:	e058      	b.n	8004950 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 800489e:	2206      	movs	r2, #6
 80048a0:	493f      	ldr	r1, [pc, #252]	; (80049a0 <GPS_parse+0x208>)
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f014 f80e 	bl	80188c4 <strncmp>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d130      	bne.n	8004910 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 80048ae:	4b3d      	ldr	r3, [pc, #244]	; (80049a4 <GPS_parse+0x20c>)
 80048b0:	9303      	str	r3, [sp, #12]
 80048b2:	4b33      	ldr	r3, [pc, #204]	; (8004980 <GPS_parse+0x1e8>)
 80048b4:	9302      	str	r3, [sp, #8]
 80048b6:	4b2e      	ldr	r3, [pc, #184]	; (8004970 <GPS_parse+0x1d8>)
 80048b8:	9301      	str	r3, [sp, #4]
 80048ba:	4b2e      	ldr	r3, [pc, #184]	; (8004974 <GPS_parse+0x1dc>)
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	4b2e      	ldr	r3, [pc, #184]	; (8004978 <GPS_parse+0x1e0>)
 80048c0:	4a2e      	ldr	r2, [pc, #184]	; (800497c <GPS_parse+0x1e4>)
 80048c2:	4939      	ldr	r1, [pc, #228]	; (80049a8 <GPS_parse+0x210>)
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f013 ff77 	bl	80187b8 <siscanf>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	dd3e      	ble.n	800494e <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80048d0:	4b2d      	ldr	r3, [pc, #180]	; (8004988 <GPS_parse+0x1f0>)
 80048d2:	edd3 7a04 	vldr	s15, [r3, #16]
 80048d6:	4b2c      	ldr	r3, [pc, #176]	; (8004988 <GPS_parse+0x1f0>)
 80048d8:	7e1b      	ldrb	r3, [r3, #24]
 80048da:	4618      	mov	r0, r3
 80048dc:	eeb0 0a67 	vmov.f32	s0, s15
 80048e0:	f000 f876 	bl	80049d0 <GPS_nmea_to_dec>
 80048e4:	eef0 7a40 	vmov.f32	s15, s0
 80048e8:	4b27      	ldr	r3, [pc, #156]	; (8004988 <GPS_parse+0x1f0>)
 80048ea:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80048ee:	4b26      	ldr	r3, [pc, #152]	; (8004988 <GPS_parse+0x1f0>)
 80048f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80048f4:	4b24      	ldr	r3, [pc, #144]	; (8004988 <GPS_parse+0x1f0>)
 80048f6:	7e5b      	ldrb	r3, [r3, #25]
 80048f8:	4618      	mov	r0, r3
 80048fa:	eeb0 0a67 	vmov.f32	s0, s15
 80048fe:	f000 f867 	bl	80049d0 <GPS_nmea_to_dec>
 8004902:	eef0 7a40 	vmov.f32	s15, s0
 8004906:	4b20      	ldr	r3, [pc, #128]	; (8004988 <GPS_parse+0x1f0>)
 8004908:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 800490c:	2301      	movs	r3, #1
 800490e:	e01f      	b.n	8004950 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8004910:	2206      	movs	r2, #6
 8004912:	4926      	ldr	r1, [pc, #152]	; (80049ac <GPS_parse+0x214>)
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f013 ffd5 	bl	80188c4 <strncmp>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d116      	bne.n	800494e <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8004920:	4b23      	ldr	r3, [pc, #140]	; (80049b0 <GPS_parse+0x218>)
 8004922:	9305      	str	r3, [sp, #20]
 8004924:	4b23      	ldr	r3, [pc, #140]	; (80049b4 <GPS_parse+0x21c>)
 8004926:	9304      	str	r3, [sp, #16]
 8004928:	4b23      	ldr	r3, [pc, #140]	; (80049b8 <GPS_parse+0x220>)
 800492a:	9303      	str	r3, [sp, #12]
 800492c:	4b1a      	ldr	r3, [pc, #104]	; (8004998 <GPS_parse+0x200>)
 800492e:	9302      	str	r3, [sp, #8]
 8004930:	4b22      	ldr	r3, [pc, #136]	; (80049bc <GPS_parse+0x224>)
 8004932:	9301      	str	r3, [sp, #4]
 8004934:	4b22      	ldr	r3, [pc, #136]	; (80049c0 <GPS_parse+0x228>)
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	4b22      	ldr	r3, [pc, #136]	; (80049c4 <GPS_parse+0x22c>)
 800493a:	4a23      	ldr	r2, [pc, #140]	; (80049c8 <GPS_parse+0x230>)
 800493c:	4923      	ldr	r1, [pc, #140]	; (80049cc <GPS_parse+0x234>)
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f013 ff3a 	bl	80187b8 <siscanf>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	dd01      	ble.n	800494e <GPS_parse+0x1b6>
            return 0;
 800494a:	2300      	movs	r3, #0
 800494c:	e000      	b.n	8004950 <GPS_parse+0x1b8>
    }
    return 0;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	0801dc60 	.word	0x0801dc60
 800495c:	20006288 	.word	0x20006288
 8004960:	20006284 	.word	0x20006284
 8004964:	20006280 	.word	0x20006280
 8004968:	2000627c 	.word	0x2000627c
 800496c:	20006278 	.word	0x20006278
 8004970:	20006275 	.word	0x20006275
 8004974:	20006268 	.word	0x20006268
 8004978:	20006274 	.word	0x20006274
 800497c:	2000626c 	.word	0x2000626c
 8004980:	20006270 	.word	0x20006270
 8004984:	0801dc68 	.word	0x0801dc68
 8004988:	2000625c 	.word	0x2000625c
 800498c:	0801dc90 	.word	0x0801dc90
 8004990:	20006294 	.word	0x20006294
 8004994:	20006290 	.word	0x20006290
 8004998:	2000628c 	.word	0x2000628c
 800499c:	0801dc98 	.word	0x0801dc98
 80049a0:	0801dcb8 	.word	0x0801dcb8
 80049a4:	20006298 	.word	0x20006298
 80049a8:	0801dcc0 	.word	0x0801dcc0
 80049ac:	0801dcdc 	.word	0x0801dcdc
 80049b0:	200062b0 	.word	0x200062b0
 80049b4:	200062ac 	.word	0x200062ac
 80049b8:	200062a9 	.word	0x200062a9
 80049bc:	200062a8 	.word	0x200062a8
 80049c0:	200062a4 	.word	0x200062a4
 80049c4:	200062a0 	.word	0x200062a0
 80049c8:	2000629c 	.word	0x2000629c
 80049cc:	0801dce4 	.word	0x0801dce4

080049d0 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80049da:	4603      	mov	r3, r0
 80049dc:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 80049de:	ed97 7a01 	vldr	s14, [r7, #4]
 80049e2:	eddf 6a20 	vldr	s13, [pc, #128]	; 8004a64 <GPS_nmea_to_dec+0x94>
 80049e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049ee:	ee17 3a90 	vmov	r3, s15
 80049f2:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	2264      	movs	r2, #100	; 0x64
 80049f8:	fb02 f303 	mul.w	r3, r2, r3
 80049fc:	ee07 3a90 	vmov	s15, r3
 8004a00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a04:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a0c:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8004a10:	ed97 7a03 	vldr	s14, [r7, #12]
 8004a14:	eddf 6a14 	vldr	s13, [pc, #80]	; 8004a68 <GPS_nmea_to_dec+0x98>
 8004a18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a1c:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	ee07 3a90 	vmov	s15, r3
 8004a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a2a:	ed97 7a02 	vldr	s14, [r7, #8]
 8004a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a32:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8004a36:	78fb      	ldrb	r3, [r7, #3]
 8004a38:	2b53      	cmp	r3, #83	; 0x53
 8004a3a:	d002      	beq.n	8004a42 <GPS_nmea_to_dec+0x72>
 8004a3c:	78fb      	ldrb	r3, [r7, #3]
 8004a3e:	2b57      	cmp	r3, #87	; 0x57
 8004a40:	d105      	bne.n	8004a4e <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8004a42:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a46:	eef1 7a67 	vneg.f32	s15, s15
 8004a4a:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	ee07 3a90 	vmov	s15, r3
}
 8004a54:	eeb0 0a67 	vmov.f32	s0, s15
 8004a58:	371c      	adds	r7, #28
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	42c80000 	.word	0x42c80000
 8004a68:	42700000 	.word	0x42700000

08004a6c <GPS_Init>:
	}
}


void GPS_Init(UART_HandleTypeDef* data_uart, void (*gps_print)(char*),
		void (*gps_tone_freq)(uint32_t duration, uint32_t repeats, uint32_t freq)){
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
	GPS.print = gps_print;
 8004a78:	4a0a      	ldr	r2, [pc, #40]	; (8004aa4 <GPS_Init+0x38>)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	65d3      	str	r3, [r2, #92]	; 0x5c
	GPS.print((char*) "GPS Init...");
 8004a7e:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <GPS_Init+0x38>)
 8004a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a82:	4809      	ldr	r0, [pc, #36]	; (8004aa8 <GPS_Init+0x3c>)
 8004a84:	4798      	blx	r3
	GPS.uart = data_uart;
 8004a86:	4a07      	ldr	r2, [pc, #28]	; (8004aa4 <GPS_Init+0x38>)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6593      	str	r3, [r2, #88]	; 0x58
	GPS.tone_freq = gps_tone_freq;
 8004a8c:	4a05      	ldr	r2, [pc, #20]	; (8004aa4 <GPS_Init+0x38>)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6613      	str	r3, [r2, #96]	; 0x60
	GPS.print((char*) "OK\r\n");
 8004a92:	4b04      	ldr	r3, [pc, #16]	; (8004aa4 <GPS_Init+0x38>)
 8004a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a96:	4805      	ldr	r0, [pc, #20]	; (8004aac <GPS_Init+0x40>)
 8004a98:	4798      	blx	r3
}
 8004a9a:	bf00      	nop
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	2000625c 	.word	0x2000625c
 8004aa8:	0801dd04 	.word	0x0801dd04
 8004aac:	0801dd10 	.word	0x0801dd10

08004ab0 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004ab0:	b590      	push	{r4, r7, lr}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	607a      	str	r2, [r7, #4]
 8004aba:	461a      	mov	r2, r3
 8004abc:	460b      	mov	r3, r1
 8004abe:	72fb      	strb	r3, [r7, #11]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	685c      	ldr	r4, [r3, #4]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6898      	ldr	r0, [r3, #8]
 8004acc:	893b      	ldrh	r3, [r7, #8]
 8004ace:	7af9      	ldrb	r1, [r7, #11]
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	47a0      	blx	r4
 8004ad4:	6178      	str	r0, [r7, #20]

  return ret;
 8004ad6:	697b      	ldr	r3, [r7, #20]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	371c      	adds	r7, #28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd90      	pop	{r4, r7, pc}

08004ae0 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004ae0:	b590      	push	{r4, r7, lr}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	607a      	str	r2, [r7, #4]
 8004aea:	461a      	mov	r2, r3
 8004aec:	460b      	mov	r3, r1
 8004aee:	72fb      	strb	r3, [r7, #11]
 8004af0:	4613      	mov	r3, r2
 8004af2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681c      	ldr	r4, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6898      	ldr	r0, [r3, #8]
 8004afc:	893b      	ldrh	r3, [r7, #8]
 8004afe:	7af9      	ldrb	r1, [r7, #11]
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	47a0      	blx	r4
 8004b04:	6178      	str	r0, [r7, #20]

  return ret;
 8004b06:	697b      	ldr	r3, [r7, #20]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	371c      	adds	r7, #28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd90      	pop	{r4, r7, pc}

08004b10 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b22:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004b3c <lps22hh_from_lsb_to_hpa+0x2c>
 8004b26:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004b2a:	eef0 7a66 	vmov.f32	s15, s13
}
 8004b2e:	eeb0 0a67 	vmov.f32	s0, s15
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	49800000 	.word	0x49800000

08004b40 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	4603      	mov	r3, r0
 8004b48:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8004b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b56:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004b70 <lps22hh_from_lsb_to_celsius+0x30>
 8004b5a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004b5e:	eef0 7a66 	vmov.f32	s15, s13
}
 8004b62:	eeb0 0a67 	vmov.f32	s0, s15
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	42c80000 	.word	0x42c80000

08004b74 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8004b80:	f107 0208 	add.w	r2, r7, #8
 8004b84:	2301      	movs	r3, #1
 8004b86:	2110      	movs	r1, #16
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7ff ff91 	bl	8004ab0 <lps22hh_read_reg>
 8004b8e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10f      	bne.n	8004bb6 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004b96:	78fb      	ldrb	r3, [r7, #3]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	7a3b      	ldrb	r3, [r7, #8]
 8004ba0:	f362 0341 	bfi	r3, r2, #1, #1
 8004ba4:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8004ba6:	f107 0208 	add.w	r2, r7, #8
 8004baa:	2301      	movs	r3, #1
 8004bac:	2110      	movs	r1, #16
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7ff ff96 	bl	8004ae0 <lps22hh_write_reg>
 8004bb4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004bcc:	f107 0210 	add.w	r2, r7, #16
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	2110      	movs	r1, #16
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7ff ff6b 	bl	8004ab0 <lps22hh_read_reg>
 8004bda:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d107      	bne.n	8004bf2 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004be2:	f107 020c 	add.w	r2, r7, #12
 8004be6:	2301      	movs	r3, #1
 8004be8:	2111      	movs	r1, #17
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff ff60 	bl	8004ab0 <lps22hh_read_reg>
 8004bf0:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10f      	bne.n	8004c18 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8004bf8:	78fb      	ldrb	r3, [r7, #3]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	7c3b      	ldrb	r3, [r7, #16]
 8004c02:	f362 1306 	bfi	r3, r2, #4, #3
 8004c06:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004c08:	f107 0210 	add.w	r2, r7, #16
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	2110      	movs	r1, #16
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7ff ff65 	bl	8004ae0 <lps22hh_write_reg>
 8004c16:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d119      	bne.n	8004c52 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8004c1e:	78fb      	ldrb	r3, [r7, #3]
 8004c20:	091b      	lsrs	r3, r3, #4
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	7b3b      	ldrb	r3, [r7, #12]
 8004c2a:	f362 0341 	bfi	r3, r2, #1, #1
 8004c2e:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8004c30:	78fb      	ldrb	r3, [r7, #3]
 8004c32:	08db      	lsrs	r3, r3, #3
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	7b3b      	ldrb	r3, [r7, #12]
 8004c3c:	f362 0300 	bfi	r3, r2, #0, #1
 8004c40:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004c42:	f107 020c 	add.w	r2, r7, #12
 8004c46:	2301      	movs	r3, #1
 8004c48:	2111      	movs	r1, #17
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7ff ff48 	bl	8004ae0 <lps22hh_write_reg>
 8004c50:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004c52:	697b      	ldr	r3, [r7, #20]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <lps22hh_press_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_press_flag_data_ready_get(stmdev_ctx_t *ctx,
                                          uint8_t *val)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8004c66:	f107 0208 	add.w	r2, r7, #8
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	2127      	movs	r1, #39	; 0x27
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff ff1e 	bl	8004ab0 <lps22hh_read_reg>
 8004c74:	60f8      	str	r0, [r7, #12]
  *val = reg.p_da;
 8004c76:	7a3b      	ldrb	r3, [r7, #8]
 8004c78:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	461a      	mov	r2, r3
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	701a      	strb	r2, [r3, #0]

  return ret;
 8004c84:	68fb      	ldr	r3, [r7, #12]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b084      	sub	sp, #16
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8004c98:	f107 0208 	add.w	r2, r7, #8
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	2127      	movs	r1, #39	; 0x27
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7ff ff05 	bl	8004ab0 <lps22hh_read_reg>
 8004ca6:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8004ca8:	7a3b      	ldrb	r3, [r7, #8]
 8004caa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	701a      	strb	r2, [r3, #0]

  return ret;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8004cca:	f107 0208 	add.w	r2, r7, #8
 8004cce:	2303      	movs	r3, #3
 8004cd0:	2128      	movs	r1, #40	; 0x28
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7ff feec 	bl	8004ab0 <lps22hh_read_reg>
 8004cd8:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8004cda:	7abb      	ldrb	r3, [r7, #10]
 8004cdc:	461a      	mov	r2, r3
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	021b      	lsls	r3, r3, #8
 8004ce8:	7a7a      	ldrb	r2, [r7, #9]
 8004cea:	441a      	add	r2, r3
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	021b      	lsls	r3, r3, #8
 8004cf6:	7a3a      	ldrb	r2, [r7, #8]
 8004cf8:	441a      	add	r2, r3
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	021a      	lsls	r2, r3, #8
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	601a      	str	r2, [r3, #0]

  return ret;
 8004d08:	68fb      	ldr	r3, [r7, #12]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b084      	sub	sp, #16
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8004d1c:	f107 0208 	add.w	r2, r7, #8
 8004d20:	2302      	movs	r3, #2
 8004d22:	212b      	movs	r1, #43	; 0x2b
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f7ff fec3 	bl	8004ab0 <lps22hh_read_reg>
 8004d2a:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8004d2c:	7a7b      	ldrb	r3, [r7, #9]
 8004d2e:	b21a      	sxth	r2, r3
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	021b      	lsls	r3, r3, #8
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	7a3b      	ldrb	r3, [r7, #8]
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	4413      	add	r3, r2
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	b21a      	sxth	r2, r3
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	801a      	strh	r2, [r3, #0]

  return ret;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8004d62:	2301      	movs	r3, #1
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	210f      	movs	r1, #15
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7ff fea1 	bl	8004ab0 <lps22hh_read_reg>
 8004d6e:	60f8      	str	r0, [r7, #12]

  return ret;
 8004d70:	68fb      	ldr	r3, [r7, #12]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b084      	sub	sp, #16
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	460b      	mov	r3, r1
 8004d84:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004d86:	f107 0208 	add.w	r2, r7, #8
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	2111      	movs	r1, #17
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7ff fe8e 	bl	8004ab0 <lps22hh_read_reg>
 8004d94:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10f      	bne.n	8004dbc <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8004d9c:	78fb      	ldrb	r3, [r7, #3]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	7a3b      	ldrb	r3, [r7, #8]
 8004da6:	f362 0382 	bfi	r3, r2, #2, #1
 8004daa:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004dac:	f107 0208 	add.w	r2, r7, #8
 8004db0:	2301      	movs	r3, #1
 8004db2:	2111      	movs	r1, #17
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7ff fe93 	bl	8004ae0 <lps22hh_write_reg>
 8004dba:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b084      	sub	sp, #16
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004dd0:	f107 0208 	add.w	r2, r7, #8
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	2111      	movs	r1, #17
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f7ff fe69 	bl	8004ab0 <lps22hh_read_reg>
 8004dde:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8004de0:	7a3b      	ldrb	r3, [r7, #8]
 8004de2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	461a      	mov	r2, r3
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	701a      	strb	r2, [r3, #0]

  return ret;
 8004dee:	68fb      	ldr	r3, [r7, #12]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004df8:	b590      	push	{r4, r7, lr}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	607a      	str	r2, [r7, #4]
 8004e02:	461a      	mov	r2, r3
 8004e04:	460b      	mov	r3, r1
 8004e06:	72fb      	strb	r3, [r7, #11]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	685c      	ldr	r4, [r3, #4]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6898      	ldr	r0, [r3, #8]
 8004e14:	893b      	ldrh	r3, [r7, #8]
 8004e16:	7af9      	ldrb	r1, [r7, #11]
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	47a0      	blx	r4
 8004e1c:	6178      	str	r0, [r7, #20]

  return ret;
 8004e1e:	697b      	ldr	r3, [r7, #20]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	371c      	adds	r7, #28
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd90      	pop	{r4, r7, pc}

08004e28 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004e28:	b590      	push	{r4, r7, lr}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	607a      	str	r2, [r7, #4]
 8004e32:	461a      	mov	r2, r3
 8004e34:	460b      	mov	r3, r1
 8004e36:	72fb      	strb	r3, [r7, #11]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681c      	ldr	r4, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6898      	ldr	r0, [r3, #8]
 8004e44:	893b      	ldrh	r3, [r7, #8]
 8004e46:	7af9      	ldrb	r1, [r7, #11]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	47a0      	blx	r4
 8004e4c:	6178      	str	r0, [r7, #20]

  return ret;
 8004e4e:	697b      	ldr	r3, [r7, #20]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	371c      	adds	r7, #28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd90      	pop	{r4, r7, pc}

08004e58 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	4603      	mov	r3, r0
 8004e60:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8004e62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e6e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004e84 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8004e72:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004e76:	eeb0 0a67 	vmov.f32	s0, s15
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	3d79db23 	.word	0x3d79db23

08004e88 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	4603      	mov	r3, r0
 8004e90:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8004e92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e96:	ee07 3a90 	vmov	s15, r3
 8004e9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e9e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004eb4 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 8004ea2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	428c0000 	.word	0x428c0000

08004eb8 <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8004ec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ec6:	ee07 3a90 	vmov	s15, r3
 8004eca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ece:	eddf 6a07 	vldr	s13, [pc, #28]	; 8004eec <lsm6dsr_from_lsb_to_celsius+0x34>
 8004ed2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ed6:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004eda:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8004ede:	eeb0 0a67 	vmov.f32	s0, s15
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	43800000 	.word	0x43800000

08004ef0 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	460b      	mov	r3, r1
 8004efa:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8004efc:	f107 0208 	add.w	r2, r7, #8
 8004f00:	2301      	movs	r3, #1
 8004f02:	2110      	movs	r1, #16
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7ff ff77 	bl	8004df8 <lsm6dsr_read_reg>
 8004f0a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10f      	bne.n	8004f32 <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8004f12:	78fb      	ldrb	r3, [r7, #3]
 8004f14:	f003 0303 	and.w	r3, r3, #3
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	7a3b      	ldrb	r3, [r7, #8]
 8004f1c:	f362 0383 	bfi	r3, r2, #2, #2
 8004f20:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8004f22:	f107 0208 	add.w	r2, r7, #8
 8004f26:	2301      	movs	r3, #1
 8004f28:	2110      	movs	r1, #16
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7ff ff7c 	bl	8004e28 <lsm6dsr_write_reg>
 8004f30:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004f32:	68fb      	ldr	r3, [r7, #12]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8004f48:	78fb      	ldrb	r3, [r7, #3]
 8004f4a:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8004f4c:	f107 030c 	add.w	r3, r7, #12
 8004f50:	4619      	mov	r1, r3
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 fc54 	bl	8005800 <lsm6dsr_fsm_enable_get>
 8004f58:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f040 80c4 	bne.w	80050ea <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004f62:	7b3b      	ldrb	r3, [r7, #12]
 8004f64:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004f68:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004f6a:	7b3b      	ldrb	r3, [r7, #12]
 8004f6c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004f70:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004f72:	4313      	orrs	r3, r2
 8004f74:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004f76:	7b3b      	ldrb	r3, [r7, #12]
 8004f78:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004f7c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004f82:	7b3b      	ldrb	r3, [r7, #12]
 8004f84:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004f88:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004f8e:	7b3b      	ldrb	r3, [r7, #12]
 8004f90:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004f94:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004f96:	4313      	orrs	r3, r2
 8004f98:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004f9a:	7b3b      	ldrb	r3, [r7, #12]
 8004f9c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004fa0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004fa6:	7b3b      	ldrb	r3, [r7, #12]
 8004fa8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004fac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004fb2:	7b3b      	ldrb	r3, [r7, #12]
 8004fb4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004fb8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004fbe:	7b7b      	ldrb	r3, [r7, #13]
 8004fc0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004fc4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004fca:	7b7b      	ldrb	r3, [r7, #13]
 8004fcc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004fd0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004fd6:	7b7b      	ldrb	r3, [r7, #13]
 8004fd8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004fdc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004fe2:	7b7b      	ldrb	r3, [r7, #13]
 8004fe4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004fe8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004fea:	4313      	orrs	r3, r2
 8004fec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004fee:	7b7b      	ldrb	r3, [r7, #13]
 8004ff0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004ff4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004ffa:	7b7b      	ldrb	r3, [r7, #13]
 8004ffc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005000:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005002:	4313      	orrs	r3, r2
 8005004:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005006:	7b7b      	ldrb	r3, [r7, #13]
 8005008:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800500c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800500e:	4313      	orrs	r3, r2
 8005010:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005012:	7b7b      	ldrb	r3, [r7, #13]
 8005014:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005018:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800501a:	4313      	orrs	r3, r2
 800501c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800501e:	2b01      	cmp	r3, #1
 8005020:	d163      	bne.n	80050ea <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8005022:	f107 030b 	add.w	r3, r7, #11
 8005026:	4619      	mov	r1, r3
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 fc15 	bl	8005858 <lsm6dsr_fsm_data_rate_get>
 800502e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d159      	bne.n	80050ea <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8005036:	7afb      	ldrb	r3, [r7, #11]
 8005038:	2b03      	cmp	r3, #3
 800503a:	d853      	bhi.n	80050e4 <lsm6dsr_xl_data_rate_set+0x1a8>
 800503c:	a201      	add	r2, pc, #4	; (adr r2, 8005044 <lsm6dsr_xl_data_rate_set+0x108>)
 800503e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005042:	bf00      	nop
 8005044:	08005055 	.word	0x08005055
 8005048:	08005067 	.word	0x08005067
 800504c:	08005085 	.word	0x08005085
 8005050:	080050af 	.word	0x080050af
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8005054:	78fb      	ldrb	r3, [r7, #3]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d102      	bne.n	8005060 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 800505a:	2301      	movs	r3, #1
 800505c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800505e:	e045      	b.n	80050ec <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	75fb      	strb	r3, [r7, #23]
            break;
 8005064:	e042      	b.n	80050ec <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8005066:	78fb      	ldrb	r3, [r7, #3]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d102      	bne.n	8005072 <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 800506c:	2302      	movs	r3, #2
 800506e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005070:	e03c      	b.n	80050ec <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8005072:	78fb      	ldrb	r3, [r7, #3]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d102      	bne.n	800507e <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8005078:	2302      	movs	r3, #2
 800507a:	75fb      	strb	r3, [r7, #23]
            break;
 800507c:	e036      	b.n	80050ec <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800507e:	78fb      	ldrb	r3, [r7, #3]
 8005080:	75fb      	strb	r3, [r7, #23]
            break;
 8005082:	e033      	b.n	80050ec <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8005084:	78fb      	ldrb	r3, [r7, #3]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d102      	bne.n	8005090 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800508a:	2303      	movs	r3, #3
 800508c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800508e:	e02d      	b.n	80050ec <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8005090:	78fb      	ldrb	r3, [r7, #3]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d102      	bne.n	800509c <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8005096:	2303      	movs	r3, #3
 8005098:	75fb      	strb	r3, [r7, #23]
            break;
 800509a:	e027      	b.n	80050ec <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 800509c:	78fb      	ldrb	r3, [r7, #3]
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d102      	bne.n	80050a8 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80050a2:	2303      	movs	r3, #3
 80050a4:	75fb      	strb	r3, [r7, #23]
            break;
 80050a6:	e021      	b.n	80050ec <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80050a8:	78fb      	ldrb	r3, [r7, #3]
 80050aa:	75fb      	strb	r3, [r7, #23]
            break;
 80050ac:	e01e      	b.n	80050ec <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80050ae:	78fb      	ldrb	r3, [r7, #3]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d102      	bne.n	80050ba <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80050b4:	2304      	movs	r3, #4
 80050b6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80050b8:	e018      	b.n	80050ec <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80050ba:	78fb      	ldrb	r3, [r7, #3]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d102      	bne.n	80050c6 <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80050c0:	2304      	movs	r3, #4
 80050c2:	75fb      	strb	r3, [r7, #23]
            break;
 80050c4:	e012      	b.n	80050ec <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80050c6:	78fb      	ldrb	r3, [r7, #3]
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d102      	bne.n	80050d2 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80050cc:	2304      	movs	r3, #4
 80050ce:	75fb      	strb	r3, [r7, #23]
            break;
 80050d0:	e00c      	b.n	80050ec <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 80050d2:	78fb      	ldrb	r3, [r7, #3]
 80050d4:	2b03      	cmp	r3, #3
 80050d6:	d102      	bne.n	80050de <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80050d8:	2304      	movs	r3, #4
 80050da:	75fb      	strb	r3, [r7, #23]
            break;
 80050dc:	e006      	b.n	80050ec <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80050de:	78fb      	ldrb	r3, [r7, #3]
 80050e0:	75fb      	strb	r3, [r7, #23]
            break;
 80050e2:	e003      	b.n	80050ec <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 80050e4:	78fb      	ldrb	r3, [r7, #3]
 80050e6:	75fb      	strb	r3, [r7, #23]
            break;
 80050e8:	e000      	b.n	80050ec <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 80050ea:	bf00      	nop
    }
  }

  if (ret == 0)
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d107      	bne.n	8005102 <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80050f2:	f107 0208 	add.w	r2, r7, #8
 80050f6:	2301      	movs	r3, #1
 80050f8:	2110      	movs	r1, #16
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7ff fe7c 	bl	8004df8 <lsm6dsr_read_reg>
 8005100:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10f      	bne.n	8005128 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8005108:	7dfb      	ldrb	r3, [r7, #23]
 800510a:	f003 030f 	and.w	r3, r3, #15
 800510e:	b2da      	uxtb	r2, r3
 8005110:	7a3b      	ldrb	r3, [r7, #8]
 8005112:	f362 1307 	bfi	r3, r2, #4, #4
 8005116:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8005118:	f107 0208 	add.w	r2, r7, #8
 800511c:	2301      	movs	r3, #1
 800511e:	2110      	movs	r1, #16
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff fe81 	bl	8004e28 <lsm6dsr_write_reg>
 8005126:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8005128:	693b      	ldr	r3, [r7, #16]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop

08005134 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005140:	f107 0208 	add.w	r2, r7, #8
 8005144:	2301      	movs	r3, #1
 8005146:	2111      	movs	r1, #17
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7ff fe55 	bl	8004df8 <lsm6dsr_read_reg>
 800514e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10f      	bne.n	8005176 <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8005156:	78fb      	ldrb	r3, [r7, #3]
 8005158:	f003 030f 	and.w	r3, r3, #15
 800515c:	b2da      	uxtb	r2, r3
 800515e:	7a3b      	ldrb	r3, [r7, #8]
 8005160:	f362 0303 	bfi	r3, r2, #0, #4
 8005164:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005166:	f107 0208 	add.w	r2, r7, #8
 800516a:	2301      	movs	r3, #1
 800516c:	2111      	movs	r1, #17
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7ff fe5a 	bl	8004e28 <lsm6dsr_write_reg>
 8005174:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005176:	68fb      	ldr	r3, [r7, #12]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	460b      	mov	r3, r1
 800518a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 800518c:	78fb      	ldrb	r3, [r7, #3]
 800518e:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8005190:	f107 030c 	add.w	r3, r7, #12
 8005194:	4619      	mov	r1, r3
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fb32 	bl	8005800 <lsm6dsr_fsm_enable_get>
 800519c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f040 80c4 	bne.w	800532e <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80051a6:	7b3b      	ldrb	r3, [r7, #12]
 80051a8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80051ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80051ae:	7b3b      	ldrb	r3, [r7, #12]
 80051b0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80051b4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80051b6:	4313      	orrs	r3, r2
 80051b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80051ba:	7b3b      	ldrb	r3, [r7, #12]
 80051bc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80051c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80051c2:	4313      	orrs	r3, r2
 80051c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80051c6:	7b3b      	ldrb	r3, [r7, #12]
 80051c8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80051cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80051ce:	4313      	orrs	r3, r2
 80051d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80051d2:	7b3b      	ldrb	r3, [r7, #12]
 80051d4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80051d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80051da:	4313      	orrs	r3, r2
 80051dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80051de:	7b3b      	ldrb	r3, [r7, #12]
 80051e0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80051e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80051e6:	4313      	orrs	r3, r2
 80051e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80051ea:	7b3b      	ldrb	r3, [r7, #12]
 80051ec:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80051f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80051f2:	4313      	orrs	r3, r2
 80051f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80051f6:	7b3b      	ldrb	r3, [r7, #12]
 80051f8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80051fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80051fe:	4313      	orrs	r3, r2
 8005200:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005202:	7b7b      	ldrb	r3, [r7, #13]
 8005204:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005208:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800520a:	4313      	orrs	r3, r2
 800520c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800520e:	7b7b      	ldrb	r3, [r7, #13]
 8005210:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005214:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005216:	4313      	orrs	r3, r2
 8005218:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800521a:	7b7b      	ldrb	r3, [r7, #13]
 800521c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005220:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005222:	4313      	orrs	r3, r2
 8005224:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005226:	7b7b      	ldrb	r3, [r7, #13]
 8005228:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800522c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800522e:	4313      	orrs	r3, r2
 8005230:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005232:	7b7b      	ldrb	r3, [r7, #13]
 8005234:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005238:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800523a:	4313      	orrs	r3, r2
 800523c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800523e:	7b7b      	ldrb	r3, [r7, #13]
 8005240:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005244:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005246:	4313      	orrs	r3, r2
 8005248:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800524a:	7b7b      	ldrb	r3, [r7, #13]
 800524c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005250:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005252:	4313      	orrs	r3, r2
 8005254:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005256:	7b7b      	ldrb	r3, [r7, #13]
 8005258:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800525c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800525e:	4313      	orrs	r3, r2
 8005260:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005262:	2b01      	cmp	r3, #1
 8005264:	d163      	bne.n	800532e <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8005266:	f107 030b 	add.w	r3, r7, #11
 800526a:	4619      	mov	r1, r3
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 faf3 	bl	8005858 <lsm6dsr_fsm_data_rate_get>
 8005272:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d159      	bne.n	800532e <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800527a:	7afb      	ldrb	r3, [r7, #11]
 800527c:	2b03      	cmp	r3, #3
 800527e:	d853      	bhi.n	8005328 <lsm6dsr_gy_data_rate_set+0x1a8>
 8005280:	a201      	add	r2, pc, #4	; (adr r2, 8005288 <lsm6dsr_gy_data_rate_set+0x108>)
 8005282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005286:	bf00      	nop
 8005288:	08005299 	.word	0x08005299
 800528c:	080052ab 	.word	0x080052ab
 8005290:	080052c9 	.word	0x080052c9
 8005294:	080052f3 	.word	0x080052f3
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 8005298:	78fb      	ldrb	r3, [r7, #3]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d102      	bne.n	80052a4 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 800529e:	2301      	movs	r3, #1
 80052a0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80052a2:	e045      	b.n	8005330 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80052a4:	78fb      	ldrb	r3, [r7, #3]
 80052a6:	75fb      	strb	r3, [r7, #23]
            break;
 80052a8:	e042      	b.n	8005330 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80052aa:	78fb      	ldrb	r3, [r7, #3]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d102      	bne.n	80052b6 <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80052b0:	2302      	movs	r3, #2
 80052b2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80052b4:	e03c      	b.n	8005330 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80052b6:	78fb      	ldrb	r3, [r7, #3]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d102      	bne.n	80052c2 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80052bc:	2302      	movs	r3, #2
 80052be:	75fb      	strb	r3, [r7, #23]
            break;
 80052c0:	e036      	b.n	8005330 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80052c2:	78fb      	ldrb	r3, [r7, #3]
 80052c4:	75fb      	strb	r3, [r7, #23]
            break;
 80052c6:	e033      	b.n	8005330 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80052c8:	78fb      	ldrb	r3, [r7, #3]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d102      	bne.n	80052d4 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80052ce:	2303      	movs	r3, #3
 80052d0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80052d2:	e02d      	b.n	8005330 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80052d4:	78fb      	ldrb	r3, [r7, #3]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d102      	bne.n	80052e0 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80052da:	2303      	movs	r3, #3
 80052dc:	75fb      	strb	r3, [r7, #23]
            break;
 80052de:	e027      	b.n	8005330 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d102      	bne.n	80052ec <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80052e6:	2303      	movs	r3, #3
 80052e8:	75fb      	strb	r3, [r7, #23]
            break;
 80052ea:	e021      	b.n	8005330 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80052ec:	78fb      	ldrb	r3, [r7, #3]
 80052ee:	75fb      	strb	r3, [r7, #23]
            break;
 80052f0:	e01e      	b.n	8005330 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80052f2:	78fb      	ldrb	r3, [r7, #3]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d102      	bne.n	80052fe <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80052f8:	2304      	movs	r3, #4
 80052fa:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80052fc:	e018      	b.n	8005330 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80052fe:	78fb      	ldrb	r3, [r7, #3]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d102      	bne.n	800530a <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8005304:	2304      	movs	r3, #4
 8005306:	75fb      	strb	r3, [r7, #23]
            break;
 8005308:	e012      	b.n	8005330 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 800530a:	78fb      	ldrb	r3, [r7, #3]
 800530c:	2b02      	cmp	r3, #2
 800530e:	d102      	bne.n	8005316 <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8005310:	2304      	movs	r3, #4
 8005312:	75fb      	strb	r3, [r7, #23]
            break;
 8005314:	e00c      	b.n	8005330 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 8005316:	78fb      	ldrb	r3, [r7, #3]
 8005318:	2b03      	cmp	r3, #3
 800531a:	d102      	bne.n	8005322 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800531c:	2304      	movs	r3, #4
 800531e:	75fb      	strb	r3, [r7, #23]
            break;
 8005320:	e006      	b.n	8005330 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005322:	78fb      	ldrb	r3, [r7, #3]
 8005324:	75fb      	strb	r3, [r7, #23]
            break;
 8005326:	e003      	b.n	8005330 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8005328:	78fb      	ldrb	r3, [r7, #3]
 800532a:	75fb      	strb	r3, [r7, #23]
            break;
 800532c:	e000      	b.n	8005330 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 800532e:	bf00      	nop
    }
  }

  if (ret == 0)
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d107      	bne.n	8005346 <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005336:	f107 0208 	add.w	r2, r7, #8
 800533a:	2301      	movs	r3, #1
 800533c:	2111      	movs	r1, #17
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7ff fd5a 	bl	8004df8 <lsm6dsr_read_reg>
 8005344:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10f      	bne.n	800536c <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 800534c:	7dfb      	ldrb	r3, [r7, #23]
 800534e:	f003 030f 	and.w	r3, r3, #15
 8005352:	b2da      	uxtb	r2, r3
 8005354:	7a3b      	ldrb	r3, [r7, #8]
 8005356:	f362 1307 	bfi	r3, r2, #4, #4
 800535a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800535c:	f107 0208 	add.w	r2, r7, #8
 8005360:	2301      	movs	r3, #1
 8005362:	2111      	movs	r1, #17
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff fd5f 	bl	8004e28 <lsm6dsr_write_reg>
 800536a:	6138      	str	r0, [r7, #16]
  }

  return ret;
 800536c:	693b      	ldr	r3, [r7, #16]
}
 800536e:	4618      	mov	r0, r3
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop

08005378 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	460b      	mov	r3, r1
 8005382:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005384:	f107 0208 	add.w	r2, r7, #8
 8005388:	2301      	movs	r3, #1
 800538a:	2112      	movs	r1, #18
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7ff fd33 	bl	8004df8 <lsm6dsr_read_reg>
 8005392:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10f      	bne.n	80053ba <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 800539a:	78fb      	ldrb	r3, [r7, #3]
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	7a3b      	ldrb	r3, [r7, #8]
 80053a4:	f362 1386 	bfi	r3, r2, #6, #1
 80053a8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80053aa:	f107 0208 	add.w	r2, r7, #8
 80053ae:	2301      	movs	r3, #1
 80053b0:	2112      	movs	r1, #18
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff fd38 	bl	8004e28 <lsm6dsr_write_reg>
 80053b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80053ba:	68fb      	ldr	r3, [r7, #12]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80053ce:	f107 0208 	add.w	r2, r7, #8
 80053d2:	2301      	movs	r3, #1
 80053d4:	211e      	movs	r1, #30
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7ff fd0e 	bl	8004df8 <lsm6dsr_read_reg>
 80053dc:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 80053de:	7a3b      	ldrb	r3, [r7, #8]
 80053e0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	461a      	mov	r2, r3
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	701a      	strb	r2, [r3, #0]

  return ret;
 80053ec:	68fb      	ldr	r3, [r7, #12]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b084      	sub	sp, #16
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8005400:	f107 0208 	add.w	r2, r7, #8
 8005404:	2301      	movs	r3, #1
 8005406:	211e      	movs	r1, #30
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff fcf5 	bl	8004df8 <lsm6dsr_read_reg>
 800540e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8005410:	7a3b      	ldrb	r3, [r7, #8]
 8005412:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005416:	b2db      	uxtb	r3, r3
 8005418:	461a      	mov	r2, r3
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	701a      	strb	r2, [r3, #0]

  return ret;
 800541e:	68fb      	ldr	r3, [r7, #12]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8005432:	f107 0208 	add.w	r2, r7, #8
 8005436:	2301      	movs	r3, #1
 8005438:	211e      	movs	r1, #30
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7ff fcdc 	bl	8004df8 <lsm6dsr_read_reg>
 8005440:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 8005442:	7a3b      	ldrb	r3, [r7, #8]
 8005444:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005448:	b2db      	uxtb	r3, r3
 800544a:	461a      	mov	r2, r3
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	701a      	strb	r2, [r3, #0]

  return ret;
 8005450:	68fb      	ldr	r3, [r7, #12]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b084      	sub	sp, #16
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8005464:	f107 0208 	add.w	r2, r7, #8
 8005468:	2302      	movs	r3, #2
 800546a:	2120      	movs	r1, #32
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7ff fcc3 	bl	8004df8 <lsm6dsr_read_reg>
 8005472:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8005474:	7a7b      	ldrb	r3, [r7, #9]
 8005476:	b21a      	sxth	r2, r3
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005482:	b29b      	uxth	r3, r3
 8005484:	021b      	lsls	r3, r3, #8
 8005486:	b29a      	uxth	r2, r3
 8005488:	7a3b      	ldrb	r3, [r7, #8]
 800548a:	b29b      	uxth	r3, r3
 800548c:	4413      	add	r3, r2
 800548e:	b29b      	uxth	r3, r3
 8005490:	b21a      	sxth	r2, r3
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	801a      	strh	r2, [r3, #0]

  return ret;
 8005496:	68fb      	ldr	r3, [r7, #12]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 80054aa:	f107 020c 	add.w	r2, r7, #12
 80054ae:	2306      	movs	r3, #6
 80054b0:	2122      	movs	r1, #34	; 0x22
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7ff fca0 	bl	8004df8 <lsm6dsr_read_reg>
 80054b8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80054ba:	7b7b      	ldrb	r3, [r7, #13]
 80054bc:	b21a      	sxth	r2, r3
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	021b      	lsls	r3, r3, #8
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	7b3b      	ldrb	r3, [r7, #12]
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	4413      	add	r3, r2
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	b21a      	sxth	r2, r3
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80054dc:	7bfa      	ldrb	r2, [r7, #15]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	3302      	adds	r3, #2
 80054e2:	b212      	sxth	r2, r2
 80054e4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	3302      	adds	r3, #2
 80054ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	021b      	lsls	r3, r3, #8
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	7bbb      	ldrb	r3, [r7, #14]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	4413      	add	r3, r2
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	3302      	adds	r3, #2
 8005500:	b212      	sxth	r2, r2
 8005502:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005504:	7c7a      	ldrb	r2, [r7, #17]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	3304      	adds	r3, #4
 800550a:	b212      	sxth	r2, r2
 800550c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	3304      	adds	r3, #4
 8005512:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005516:	b29b      	uxth	r3, r3
 8005518:	021b      	lsls	r3, r3, #8
 800551a:	b29a      	uxth	r2, r3
 800551c:	7c3b      	ldrb	r3, [r7, #16]
 800551e:	b29b      	uxth	r3, r3
 8005520:	4413      	add	r3, r2
 8005522:	b29a      	uxth	r2, r3
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	3304      	adds	r3, #4
 8005528:	b212      	sxth	r2, r2
 800552a:	801a      	strh	r2, [r3, #0]

  return ret;
 800552c:	697b      	ldr	r3, [r7, #20]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3718      	adds	r7, #24
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b086      	sub	sp, #24
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8005540:	f107 020c 	add.w	r2, r7, #12
 8005544:	2306      	movs	r3, #6
 8005546:	2128      	movs	r1, #40	; 0x28
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7ff fc55 	bl	8004df8 <lsm6dsr_read_reg>
 800554e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005550:	7b7b      	ldrb	r3, [r7, #13]
 8005552:	b21a      	sxth	r2, r3
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800555e:	b29b      	uxth	r3, r3
 8005560:	021b      	lsls	r3, r3, #8
 8005562:	b29a      	uxth	r2, r3
 8005564:	7b3b      	ldrb	r3, [r7, #12]
 8005566:	b29b      	uxth	r3, r3
 8005568:	4413      	add	r3, r2
 800556a:	b29b      	uxth	r3, r3
 800556c:	b21a      	sxth	r2, r3
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005572:	7bfa      	ldrb	r2, [r7, #15]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	3302      	adds	r3, #2
 8005578:	b212      	sxth	r2, r2
 800557a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	3302      	adds	r3, #2
 8005580:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005584:	b29b      	uxth	r3, r3
 8005586:	021b      	lsls	r3, r3, #8
 8005588:	b29a      	uxth	r2, r3
 800558a:	7bbb      	ldrb	r3, [r7, #14]
 800558c:	b29b      	uxth	r3, r3
 800558e:	4413      	add	r3, r2
 8005590:	b29a      	uxth	r2, r3
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	3302      	adds	r3, #2
 8005596:	b212      	sxth	r2, r2
 8005598:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800559a:	7c7a      	ldrb	r2, [r7, #17]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	3304      	adds	r3, #4
 80055a0:	b212      	sxth	r2, r2
 80055a2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	3304      	adds	r3, #4
 80055a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	021b      	lsls	r3, r3, #8
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	7c3b      	ldrb	r3, [r7, #16]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	4413      	add	r3, r2
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	3304      	adds	r3, #4
 80055be:	b212      	sxth	r2, r2
 80055c0:	801a      	strh	r2, [r3, #0]

  return ret;
 80055c2:	697b      	ldr	r3, [r7, #20]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3718      	adds	r7, #24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	460b      	mov	r3, r1
 80055d6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80055d8:	f107 0208 	add.w	r2, r7, #8
 80055dc:	2301      	movs	r3, #1
 80055de:	2101      	movs	r1, #1
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7ff fc09 	bl	8004df8 <lsm6dsr_read_reg>
 80055e6:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10f      	bne.n	800560e <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 80055ee:	78fb      	ldrb	r3, [r7, #3]
 80055f0:	f003 0303 	and.w	r3, r3, #3
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	7a3b      	ldrb	r3, [r7, #8]
 80055f8:	f362 1387 	bfi	r3, r2, #6, #2
 80055fc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80055fe:	f107 0208 	add.w	r2, r7, #8
 8005602:	2301      	movs	r3, #1
 8005604:	2101      	movs	r1, #1
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7ff fc0e 	bl	8004e28 <lsm6dsr_write_reg>
 800560c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 800560e:	68fb      	ldr	r3, [r7, #12]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8005622:	2301      	movs	r3, #1
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	210f      	movs	r1, #15
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f7ff fbe5 	bl	8004df8 <lsm6dsr_read_reg>
 800562e:	60f8      	str	r0, [r7, #12]

  return ret;
 8005630:	68fb      	ldr	r3, [r7, #12]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	460b      	mov	r3, r1
 8005644:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005646:	f107 0208 	add.w	r2, r7, #8
 800564a:	2301      	movs	r3, #1
 800564c:	2112      	movs	r1, #18
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff fbd2 	bl	8004df8 <lsm6dsr_read_reg>
 8005654:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10f      	bne.n	800567c <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 800565c:	78fb      	ldrb	r3, [r7, #3]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	b2da      	uxtb	r2, r3
 8005664:	7a3b      	ldrb	r3, [r7, #8]
 8005666:	f362 0300 	bfi	r3, r2, #0, #1
 800566a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800566c:	f107 0208 	add.w	r2, r7, #8
 8005670:	2301      	movs	r3, #1
 8005672:	2112      	movs	r1, #18
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff fbd7 	bl	8004e28 <lsm6dsr_write_reg>
 800567a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800567c:	68fb      	ldr	r3, [r7, #12]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b084      	sub	sp, #16
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005690:	f107 0208 	add.w	r2, r7, #8
 8005694:	2301      	movs	r3, #1
 8005696:	2112      	movs	r1, #18
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7ff fbad 	bl	8004df8 <lsm6dsr_read_reg>
 800569e:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80056a0:	7a3b      	ldrb	r3, [r7, #8]
 80056a2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	461a      	mov	r2, r3
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	701a      	strb	r2, [r3, #0]

  return ret;
 80056ae:	68fb      	ldr	r3, [r7, #12]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <lsm6dsr_xl_filter_lp2_set>:
  * @param  val    Change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	460b      	mov	r3, r1
 80056c2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80056c4:	f107 0208 	add.w	r2, r7, #8
 80056c8:	2301      	movs	r3, #1
 80056ca:	2110      	movs	r1, #16
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f7ff fb93 	bl	8004df8 <lsm6dsr_read_reg>
 80056d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10f      	bne.n	80056fa <lsm6dsr_xl_filter_lp2_set+0x42>
  {
    ctrl1_xl.lpf2_xl_en = (uint8_t)val;
 80056da:	78fb      	ldrb	r3, [r7, #3]
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	7a3b      	ldrb	r3, [r7, #8]
 80056e4:	f362 0341 	bfi	r3, r2, #1, #1
 80056e8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 80056ea:	f107 0208 	add.w	r2, r7, #8
 80056ee:	2301      	movs	r3, #1
 80056f0:	2110      	movs	r1, #16
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7ff fb98 	bl	8004e28 <lsm6dsr_write_reg>
 80056f8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80056fa:	68fb      	ldr	r3, [r7, #12]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <lsm6dsr_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dsr_hp_slope_xl_en_t val)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	460b      	mov	r3, r1
 800570e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8005710:	f107 0208 	add.w	r2, r7, #8
 8005714:	2301      	movs	r3, #1
 8005716:	2117      	movs	r1, #23
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff fb6d 	bl	8004df8 <lsm6dsr_read_reg>
 800571e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d121      	bne.n	800576a <lsm6dsr_xl_hp_path_on_out_set+0x66>
  {
    ctrl8_xl.hp_slope_xl_en = (((uint8_t)val & 0x10U) >> 4);
 8005726:	78fb      	ldrb	r3, [r7, #3]
 8005728:	091b      	lsrs	r3, r3, #4
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	b2da      	uxtb	r2, r3
 8005730:	7a3b      	ldrb	r3, [r7, #8]
 8005732:	f362 0382 	bfi	r3, r2, #2, #1
 8005736:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_ref_mode_xl = (((uint8_t)val & 0x20U) >> 5);
 8005738:	78fb      	ldrb	r3, [r7, #3]
 800573a:	095b      	lsrs	r3, r3, #5
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	b2da      	uxtb	r2, r3
 8005742:	7a3b      	ldrb	r3, [r7, #8]
 8005744:	f362 1304 	bfi	r3, r2, #4, #1
 8005748:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 800574a:	78fb      	ldrb	r3, [r7, #3]
 800574c:	f003 0307 	and.w	r3, r3, #7
 8005750:	b2da      	uxtb	r2, r3
 8005752:	7a3b      	ldrb	r3, [r7, #8]
 8005754:	f362 1347 	bfi	r3, r2, #5, #3
 8005758:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL8_XL,
 800575a:	f107 0208 	add.w	r2, r7, #8
 800575e:	2301      	movs	r3, #1
 8005760:	2117      	movs	r1, #23
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7ff fb60 	bl	8004e28 <lsm6dsr_write_reg>
 8005768:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 800576a:	68fb      	ldr	r3, [r7, #12]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	460b      	mov	r3, r1
 800577e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005780:	f107 0210 	add.w	r2, r7, #16
 8005784:	2301      	movs	r3, #1
 8005786:	2118      	movs	r1, #24
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7ff fb35 	bl	8004df8 <lsm6dsr_read_reg>
 800578e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d111      	bne.n	80057ba <lsm6dsr_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8005796:	78fb      	ldrb	r3, [r7, #3]
 8005798:	09db      	lsrs	r3, r3, #7
 800579a:	b2db      	uxtb	r3, r3
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	7c3b      	ldrb	r3, [r7, #16]
 80057a4:	f362 0341 	bfi	r3, r2, #1, #1
 80057a8:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 80057aa:	f107 0210 	add.w	r2, r7, #16
 80057ae:	2301      	movs	r3, #1
 80057b0:	2118      	movs	r1, #24
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7ff fb38 	bl	8004e28 <lsm6dsr_write_reg>
 80057b8:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d107      	bne.n	80057d0 <lsm6dsr_i3c_disable_set+0x5c>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 80057c0:	f107 020c 	add.w	r2, r7, #12
 80057c4:	2301      	movs	r3, #1
 80057c6:	2162      	movs	r1, #98	; 0x62
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff fb15 	bl	8004df8 <lsm6dsr_read_reg>
 80057ce:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10f      	bne.n	80057f6 <lsm6dsr_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80057d6:	78fb      	ldrb	r3, [r7, #3]
 80057d8:	f003 0303 	and.w	r3, r3, #3
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	7b3b      	ldrb	r3, [r7, #12]
 80057e0:	f362 03c4 	bfi	r3, r2, #3, #2
 80057e4:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 80057e6:	f107 020c 	add.w	r2, r7, #12
 80057ea:	2301      	movs	r3, #1
 80057ec:	2162      	movs	r1, #98	; 0x62
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7ff fb1a 	bl	8004e28 <lsm6dsr_write_reg>
 80057f4:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 80057f6:	697b      	ldr	r3, [r7, #20]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3718      	adds	r7, #24
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800580a:	2102      	movs	r1, #2
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7ff fedd 	bl	80055cc <lsm6dsr_mem_bank_set>
 8005812:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d106      	bne.n	8005828 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 800581a:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 800581c:	2301      	movs	r3, #1
 800581e:	2146      	movs	r1, #70	; 0x46
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7ff fae9 	bl	8004df8 <lsm6dsr_read_reg>
 8005826:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d107      	bne.n	800583e <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 8005832:	2301      	movs	r3, #1
 8005834:	2147      	movs	r1, #71	; 0x47
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7ff fade 	bl	8004df8 <lsm6dsr_read_reg>
 800583c:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d104      	bne.n	800584e <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8005844:	2100      	movs	r1, #0
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7ff fec0 	bl	80055cc <lsm6dsr_mem_bank_set>
 800584c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800584e:	68fb      	ldr	r3, [r7, #12]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8005862:	2102      	movs	r1, #2
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7ff feb1 	bl	80055cc <lsm6dsr_mem_bank_set>
 800586a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d107      	bne.n	8005882 <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 8005872:	f107 0208 	add.w	r2, r7, #8
 8005876:	2301      	movs	r3, #1
 8005878:	215f      	movs	r1, #95	; 0x5f
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7ff fabc 	bl	8004df8 <lsm6dsr_read_reg>
 8005880:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d104      	bne.n	8005892 <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8005888:	2100      	movs	r1, #0
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7ff fe9e 	bl	80055cc <lsm6dsr_mem_bank_set>
 8005890:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8005892:	7a3b      	ldrb	r3, [r7, #8]
 8005894:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b03      	cmp	r3, #3
 800589c:	d81a      	bhi.n	80058d4 <lsm6dsr_fsm_data_rate_get+0x7c>
 800589e:	a201      	add	r2, pc, #4	; (adr r2, 80058a4 <lsm6dsr_fsm_data_rate_get+0x4c>)
 80058a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a4:	080058b5 	.word	0x080058b5
 80058a8:	080058bd 	.word	0x080058bd
 80058ac:	080058c5 	.word	0x080058c5
 80058b0:	080058cd 	.word	0x080058cd
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	2200      	movs	r2, #0
 80058b8:	701a      	strb	r2, [r3, #0]
      break;
 80058ba:	e00f      	b.n	80058dc <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2201      	movs	r2, #1
 80058c0:	701a      	strb	r2, [r3, #0]
      break;
 80058c2:	e00b      	b.n	80058dc <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	2202      	movs	r2, #2
 80058c8:	701a      	strb	r2, [r3, #0]
      break;
 80058ca:	e007      	b.n	80058dc <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2203      	movs	r2, #3
 80058d0:	701a      	strb	r2, [r3, #0]
      break;
 80058d2:	e003      	b.n	80058dc <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	2200      	movs	r2, #0
 80058d8:	701a      	strb	r2, [r3, #0]
      break;
 80058da:	bf00      	nop
  }

  return ret;
 80058dc:	68fb      	ldr	r3, [r7, #12]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop

080058e8 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	4611      	mov	r1, r2
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	4798      	blx	r3
 8005902:	4603      	mov	r3, r0
 8005904:	4618      	mov	r0, r3
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <_Z12ISBDCallbackv>:

bool ISBDCallback() __attribute__((weak));
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
 800590c:	b480      	push	{r7}
 800590e:	af00      	add	r7, sp, #0
 8005910:	2301      	movs	r3, #1
 8005912:	4618      	mov	r0, r3
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <_Z19ISBDConsoleCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	460b      	mov	r3, r1
 8005926:	70fb      	strb	r3, [r7, #3]
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	70fb      	strb	r3, [r7, #3]
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <_ZN10IridiumSBD5beginEv>:



// Power on the RockBLOCK or return from sleep
int IridiumSBD::begin()
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <_ZN10IridiumSBD5beginEv+0x16>
      return ISBD_REENTRANT;
 800595e:	2309      	movs	r3, #9
 8005960:	e01a      	b.n	8005998 <_ZN10IridiumSBD5beginEv+0x4c>

   this->reentrant = true;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalBegin();
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 faf6 	bl	8005f5c <_ZN10IridiumSBD13internalBeginEv>
 8005970:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

   // Absent a successful startup, keep the device turned off
   if (ret != ISBD_SUCCESS)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00a      	beq.n	8005996 <_ZN10IridiumSBD5beginEv+0x4a>
   {
      if (this->useSerial)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	7c5b      	ldrb	r3, [r3, #17]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <_ZN10IridiumSBD5beginEv+0x42>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f001 fc29 	bl	80071e0 <_ZN10IridiumSBD13endSerialPortEv>
      power(false);
 800598e:	2100      	movs	r1, #0
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f001 fb77 	bl	8007084 <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8005996:	68fb      	ldr	r3, [r7, #12]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <_ZN10IridiumSBD11sendSBDTextEPKc>:
   return ret;
}

// Transmit a text message
int IridiumSBD::sendSBDText(const char *message)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af02      	add	r7, sp, #8
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <_ZN10IridiumSBD11sendSBDTextEPKc+0x18>
      return ISBD_REENTRANT;
 80059b4:	2309      	movs	r3, #9
 80059b6:	e013      	b.n	80059e0 <_ZN10IridiumSBD11sendSBDTextEPKc+0x40>

   this->reentrant = true;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalSendReceiveSBD(message, NULL, 0, NULL, NULL);
 80059c0:	2300      	movs	r3, #0
 80059c2:	9301      	str	r3, [sp, #4]
 80059c4:	2300      	movs	r3, #0
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	2300      	movs	r3, #0
 80059ca:	2200      	movs	r2, #0
 80059cc:	6839      	ldr	r1, [r7, #0]
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fc4a 	bl	8006268 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj>
 80059d4:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 80059de:	68fb      	ldr	r3, [r7, #12]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <_ZN10IridiumSBD16getSignalQualityERi>:
   return ret;
}

// High-level wrapper for AT+CSQ
int IridiumSBD::getSignalQuality(int &quality)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <_ZN10IridiumSBD16getSignalQualityERi+0x18>
      return ISBD_REENTRANT;
 80059fc:	2309      	movs	r3, #9
 80059fe:	e00d      	b.n	8005a1c <_ZN10IridiumSBD16getSignalQualityERi+0x34>

   this->reentrant = true;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalGetSignalQuality(quality);
 8005a08:	6839      	ldr	r1, [r7, #0]
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fee8 	bl	80067e0 <_ZN10IridiumSBD24internalGetSignalQualityERi>
 8005a10:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <_ZN10IridiumSBD15adjustATTimeoutEi>:
   }
}

// Tweak AT timeout
void IridiumSBD::adjustATTimeout(int seconds)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
   this->atTimeout = seconds;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <_ZN10IridiumSBD16enableRingAlertsEb>:
{
   this->msstmWorkaroundRequested = useWorkAround;
}

void IridiumSBD::enableRingAlerts(bool enable) // true to enable SBDRING alerts and RING signal pin
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	70fb      	strb	r3, [r7, #3]
   this->ringAlertsEnabled = enable;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	78fa      	ldrb	r2, [r7, #3]
 8005a50:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
   if (enable)
 8005a54:	78fb      	ldrb	r3, [r7, #3]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00d      	beq.n	8005a76 <_ZN10IridiumSBD16enableRingAlertsEb+0x36>
   {
      this->ringAsserted = false;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      if (!this->useSerial) // If we are using I2C, clear the ring indicator flag
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	7c5b      	ldrb	r3, [r3, #17]
 8005a66:	f083 0301 	eor.w	r3, r3, #1
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d002      	beq.n	8005a76 <_ZN10IridiumSBD16enableRingAlertsEb+0x36>
      {
        clearRingIndicator();
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f9b3 	bl	8005ddc <_ZN10IridiumSBD18clearRingIndicatorEv>
      }
   }
}
 8005a76:	bf00      	nop
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
	...

08005a80 <_ZN10IridiumSBD13getSystemTimeER2tm>:

   return ret;
}

int IridiumSBD::getSystemTime(struct tm &tm)
{
 8005a80:	b5b0      	push	{r4, r5, r7, lr}
 8005a82:	b09c      	sub	sp, #112	; 0x70
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
   char msstmResponseBuf[24];

   send(F("AT-MSSTM\r"));
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	493f      	ldr	r1, [pc, #252]	; (8005b8c <_ZN10IridiumSBD13getSystemTimeER2tm+0x10c>)
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f001 fbb3 	bl	80071fc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(msstmResponseBuf, sizeof(msstmResponseBuf), "-MSSTM: "))
 8005a96:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005a9a:	4b3d      	ldr	r3, [pc, #244]	; (8005b90 <_ZN10IridiumSBD13getSystemTimeER2tm+0x110>)
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	4b3d      	ldr	r3, [pc, #244]	; (8005b94 <_ZN10IridiumSBD13getSystemTimeER2tm+0x114>)
 8005aa0:	2218      	movs	r2, #24
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 ff48 	bl	8006938 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	f083 0301 	eor.w	r3, r3, #1
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d009      	beq.n	8005ac8 <_ZN10IridiumSBD13getSystemTimeER2tm+0x48>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fffd 	bl	8006ab4 <_ZN10IridiumSBD9cancelledEv>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <_ZN10IridiumSBD13getSystemTimeER2tm+0x44>
 8005ac0:	2304      	movs	r3, #4
 8005ac2:	e05e      	b.n	8005b82 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e05c      	b.n	8005b82 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   if (!isxdigit(msstmResponseBuf[0]))
 8005ac8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005acc:	4618      	mov	r0, r3
 8005ace:	f011 fa67 	bl	8016fa0 <isxdigit>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <_ZN10IridiumSBD13getSystemTimeER2tm+0x5c>
      return ISBD_NO_NETWORK;
 8005ad8:	230c      	movs	r3, #12
 8005ada:	e052      	b.n	8005b82 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   // Latest epoch began at May 11, 2014, at 14:23:55 UTC.
   struct tm epoch_start;
   epoch_start.tm_year = 2014 - 1900;
 8005adc:	2372      	movs	r3, #114	; 0x72
 8005ade:	62bb      	str	r3, [r7, #40]	; 0x28
   epoch_start.tm_mon = 5 - 1;
 8005ae0:	2304      	movs	r3, #4
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
   epoch_start.tm_mday = 11;
 8005ae4:	230b      	movs	r3, #11
 8005ae6:	623b      	str	r3, [r7, #32]
   epoch_start.tm_hour = 14;
 8005ae8:	230e      	movs	r3, #14
 8005aea:	61fb      	str	r3, [r7, #28]
   epoch_start.tm_min = 23;
 8005aec:	2317      	movs	r3, #23
 8005aee:	61bb      	str	r3, [r7, #24]
   epoch_start.tm_sec = 55;
 8005af0:	2337      	movs	r3, #55	; 0x37
 8005af2:	617b      	str	r3, [r7, #20]

   unsigned long ticks_since_epoch = strtoul(msstmResponseBuf, NULL, 16);
 8005af4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005af8:	2210      	movs	r2, #16
 8005afa:	2100      	movs	r1, #0
 8005afc:	4618      	mov	r0, r3
 8005afe:	f013 fe89 	bl	8019814 <strtoul>
 8005b02:	6678      	str	r0, [r7, #100]	; 0x64
      seconds less than the equivalent ticks_since_epoch. Subtract that away and
      we'll be left with a small number that won't overflow when we scale by 90/1000.

      Many thanks to Scott Weldon for this suggestion.
   */
   unsigned long secs_since_epoch = (ticks_since_epoch / 1000) * 90;
 8005b04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b06:	4a24      	ldr	r2, [pc, #144]	; (8005b98 <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 8005b08:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0c:	099b      	lsrs	r3, r3, #6
 8005b0e:	225a      	movs	r2, #90	; 0x5a
 8005b10:	fb02 f303 	mul.w	r3, r2, r3
 8005b14:	663b      	str	r3, [r7, #96]	; 0x60
   unsigned long small_ticks = ticks_since_epoch - (secs_since_epoch / 90) * 1000;
 8005b16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b18:	085b      	lsrs	r3, r3, #1
 8005b1a:	4a20      	ldr	r2, [pc, #128]	; (8005b9c <_ZN10IridiumSBD13getSystemTimeER2tm+0x11c>)
 8005b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b20:	095b      	lsrs	r3, r3, #5
 8005b22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b26:	fb02 f303 	mul.w	r3, r2, r3
 8005b2a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
   secs_since_epoch += small_ticks * 90 / 1000;
 8005b30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b32:	225a      	movs	r2, #90	; 0x5a
 8005b34:	fb02 f303 	mul.w	r3, r2, r3
 8005b38:	4a17      	ldr	r2, [pc, #92]	; (8005b98 <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 8005b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3e:	099b      	lsrs	r3, r3, #6
 8005b40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b42:	4413      	add	r3, r2
 8005b44:	663b      	str	r3, [r7, #96]	; 0x60

   time_t epoch_time = mktime(&epoch_start);
 8005b46:	f107 0314 	add.w	r3, r7, #20
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f011 fc62 	bl	8017414 <mktime>
 8005b50:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
   time_t now = epoch_time + secs_since_epoch;
 8005b54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b56:	4618      	mov	r0, r3
 8005b58:	f04f 0100 	mov.w	r1, #0
 8005b5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b60:	1884      	adds	r4, r0, r2
 8005b62:	eb41 0503 	adc.w	r5, r1, r3
 8005b66:	e9c7 4502 	strd	r4, r5, [r7, #8]
   memcpy(&tm, localtime(&now), sizeof tm);
 8005b6a:	f107 0308 	add.w	r3, r7, #8
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f011 fa1e 	bl	8016fb0 <localtime>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2224      	movs	r2, #36	; 0x24
 8005b78:	4619      	mov	r1, r3
 8005b7a:	6838      	ldr	r0, [r7, #0]
 8005b7c:	f011 fb42 	bl	8017204 <memcpy>
   return ISBD_SUCCESS;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3768      	adds	r7, #104	; 0x68
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bdb0      	pop	{r4, r5, r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	0801dd40 	.word	0x0801dd40
 8005b90:	0801dd58 	.word	0x0801dd58
 8005b94:	0801dd4c 	.word	0x0801dd4c
 8005b98:	10624dd3 	.word	0x10624dd3
 8005b9c:	b60b60b7 	.word	0xb60b60b7

08005ba0 <_ZN10IridiumSBD18getFirmwareVersionEPcj>:

int IridiumSBD::getFirmwareVersion(char *version, size_t bufferSize)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af02      	add	r7, sp, #8
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
   if (bufferSize < 8)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b07      	cmp	r3, #7
 8005bb0:	d801      	bhi.n	8005bb6 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x16>
      return ISBD_RX_OVERFLOW;
 8005bb2:	2308      	movs	r3, #8
 8005bb4:	e01e      	b.n	8005bf4 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   send(F("AT+CGMR\r"));
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	2201      	movs	r2, #1
 8005bba:	4910      	ldr	r1, [pc, #64]	; (8005bfc <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x5c>)
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f001 fb1d 	bl	80071fc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(version, bufferSize, "Call Processor Version: "))
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	4b0e      	ldr	r3, [pc, #56]	; (8005c00 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x60>)
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	4b0e      	ldr	r3, [pc, #56]	; (8005c04 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x64>)
 8005bca:	68b9      	ldr	r1, [r7, #8]
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 feb3 	bl	8006938 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	f083 0301 	eor.w	r3, r3, #1
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d009      	beq.n	8005bf2 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x52>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 ff68 	bl	8006ab4 <_ZN10IridiumSBD9cancelledEv>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x4e>
 8005bea:	2304      	movs	r3, #4
 8005bec:	e002      	b.n	8005bf4 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e000      	b.n	8005bf4 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   return ISBD_SUCCESS;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	0801dd60 	.word	0x0801dd60
 8005c00:	0801dd58 	.word	0x0801dd58
 8005c04:	0801dd6c 	.word	0x0801dd6c

08005c08 <_ZN10IridiumSBD21enableSuperCapChargerEb>:

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	7c5b      	ldrb	r3, [r3, #17]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d004      	beq.n	8005c26 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x1e>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8005c1c:	4918      	ldr	r1, [pc, #96]	; (8005c80 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f001 fc66 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8005c24:	e028      	b.n	8005c78 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x70>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f001 ff53 	bl	8007ad2 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8005c2c:	78fb      	ldrb	r3, [r7, #3]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00b      	beq.n	8005c4a <_ZN10IridiumSBD21enableSuperCapChargerEb+0x42>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8005c48:	e00f      	b.n	8005c6a <_ZN10IridiumSBD21enableSuperCapChargerEb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005c50:	b25a      	sxtb	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005c58:	b25b      	sxtb	r3, r3
 8005c5a:	43db      	mvns	r3, r3
 8005c5c:	b25b      	sxtb	r3, r3
 8005c5e:	4013      	ands	r3, r2
 8005c60:	b25b      	sxtb	r3, r3
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005c70:	4619      	mov	r1, r3
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f001 ff66 	bl	8007b44 <_ZN10IridiumSBD11set9603pinsEh>
}
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	0801dd88 	.word	0x0801dd88

08005c84 <_ZN10IridiumSBD20checkSuperCapChargerEv>:

bool IridiumSBD::checkSuperCapCharger()
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial (the user will have to check PGOOD manually)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	7c5b      	ldrb	r3, [r3, #17]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d005      	beq.n	8005ca0 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x1c>
  {
    diagprint(F("checkSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8005c94:	4912      	ldr	r1, [pc, #72]	; (8005ce0 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x5c>)
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f001 fc2a 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	e01a      	b.n	8005cd6 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  }

  // Check the status of the supercapacitor charger PGOOD pin
  check9603pins(); // Update IO_REGISTER
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f001 ff16 	bl	8007ad2 <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_PGOOD) // If the PGOOD bit is set, return true
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	bf14      	ite	ne
 8005cc6:	2301      	movne	r3, #1
 8005cc8:	2300      	moveq	r3, #0
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x50>
  {
    return(true);
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e000      	b.n	8005cd6 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  }
  else
  {
    return(false);
 8005cd4:	2300      	movs	r3, #0
  }
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	0801ddd4 	.word	0x0801ddd4

08005ce4 <_ZN10IridiumSBD16enable9603NpowerEb>:

void IridiumSBD::enable9603Npower(bool enable)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	460b      	mov	r3, r1
 8005cee:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	7c5b      	ldrb	r3, [r3, #17]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d004      	beq.n	8005d02 <_ZN10IridiumSBD16enable9603NpowerEb+0x1e>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 8005cf8:	4918      	ldr	r1, [pc, #96]	; (8005d5c <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f001 fbf8 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8005d00:	e028      	b.n	8005d54 <_ZN10IridiumSBD16enable9603NpowerEb+0x70>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f001 fee5 	bl	8007ad2 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00b      	beq.n	8005d26 <_ZN10IridiumSBD16enable9603NpowerEb+0x42>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8005d24:	e00f      	b.n	8005d46 <_ZN10IridiumSBD16enable9603NpowerEb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005d2c:	b25a      	sxtb	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8005d34:	b25b      	sxtb	r3, r3
 8005d36:	43db      	mvns	r3, r3
 8005d38:	b25b      	sxtb	r3, r3
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	b25b      	sxtb	r3, r3
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f001 fef8 	bl	8007b44 <_ZN10IridiumSBD11set9603pinsEh>
}
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	0801de20 	.word	0x0801de20

08005d60 <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	7c5b      	ldrb	r3, [r3, #17]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d004      	beq.n	8005d7e <_ZN10IridiumSBD10enable9603Eb+0x1e>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 8005d74:	4918      	ldr	r1, [pc, #96]	; (8005dd8 <_ZN10IridiumSBD10enable9603Eb+0x78>)
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f001 fbba 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8005d7c:	e028      	b.n	8005dd0 <_ZN10IridiumSBD10enable9603Eb+0x70>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f001 fea7 	bl	8007ad2 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8005d84:	78fb      	ldrb	r3, [r7, #3]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00b      	beq.n	8005da2 <_ZN10IridiumSBD10enable9603Eb+0x42>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8005d96:	4313      	orrs	r3, r2
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8005da0:	e00f      	b.n	8005dc2 <_ZN10IridiumSBD10enable9603Eb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005da8:	b25a      	sxtb	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8005db0:	b25b      	sxtb	r3, r3
 8005db2:	43db      	mvns	r3, r3
 8005db4:	b25b      	sxtb	r3, r3
 8005db6:	4013      	ands	r3, r2
 8005db8:	b25b      	sxtb	r3, r3
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005dc8:	4619      	mov	r1, r3
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f001 feba 	bl	8007b44 <_ZN10IridiumSBD11set9603pinsEh>
}
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	0801de68 	.word	0x0801de68

08005ddc <_ZN10IridiumSBD18clearRingIndicatorEv>:
    return(false);
  }
}

void IridiumSBD::clearRingIndicator()
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	7c5b      	ldrb	r3, [r3, #17]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d004      	beq.n	8005df6 <_ZN10IridiumSBD18clearRingIndicatorEv+0x1a>
  {
    diagprint(F("clearRingIndicator is only valid when using I2C on the Qwiic Iridium\r\n"));
 8005dec:	4912      	ldr	r1, [pc, #72]	; (8005e38 <_ZN10IridiumSBD18clearRingIndicatorEv+0x5c>)
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f001 fb7e 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8005df4:	e01d      	b.n	8005e32 <_ZN10IridiumSBD18clearRingIndicatorEv+0x56>
  }

  // Clear the 9603 RI flag
  check9603pins(); // Update IO_REGISTER
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f001 fe6b 	bl	8007ad2 <_ZN10IridiumSBD13check9603pinsEv>
  IO_REGISTER &= ~IO_RI; // Clear the RI bit
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005e02:	b25a      	sxtb	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005e0a:	b25b      	sxtb	r3, r3
 8005e0c:	43db      	mvns	r3, r3
 8005e0e:	b25b      	sxtb	r3, r3
 8005e10:	4013      	ands	r3, r2
 8005e12:	b25b      	sxtb	r3, r3
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  set9603pins(IO_REGISTER); // Update the pins
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005e22:	4619      	mov	r1, r3
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f001 fe8d 	bl	8007b44 <_ZN10IridiumSBD11set9603pinsEh>
  this->ringAsserted = false; // Also clear the ringAsserted flag
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
}
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	0801df38 	.word	0x0801df38

08005e3c <_ZN10IridiumSBD21checkNetworkAvailableEv>:

bool IridiumSBD::checkNetworkAvailable()
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	7c5b      	ldrb	r3, [r3, #17]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d005      	beq.n	8005e58 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x1c>
  {
    diagprint(F("checkNetworkAvailable is only valid when using I2C on the Qwiic Iridium\r\n"));
 8005e4c:	4912      	ldr	r1, [pc, #72]	; (8005e98 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x5c>)
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f001 fb4e 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 8005e54:	2300      	movs	r3, #0
 8005e56:	e01a      	b.n	8005e8e <_ZN10IridiumSBD21checkNetworkAvailableEv+0x52>
  }

  // Check the status of the 9603 Network Available pin
  check9603pins(); // Update IO_REGISTER
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f001 fe3a 	bl	8007ad2 <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_NA) // If the NA bit is set, return true
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	bf14      	ite	ne
 8005e7e:	2301      	movne	r3, #1
 8005e80:	2300      	moveq	r3, #0
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <_ZN10IridiumSBD21checkNetworkAvailableEv+0x50>
  {
    return(true);
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e000      	b.n	8005e8e <_ZN10IridiumSBD21checkNetworkAvailableEv+0x52>
  }
  else
  {
    return(false);
 8005e8c:	2300      	movs	r3, #0
  }
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	0801df80 	.word	0x0801df80

08005e9c <_ZN10IridiumSBD12clearBuffersEi>:

// High-level wrapper for AT+SBDD
int IridiumSBD::clearBuffers(int buffers)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <_ZN10IridiumSBD12clearBuffersEi+0x18>
      return ISBD_REENTRANT;
 8005eb0:	2309      	movs	r3, #9
 8005eb2:	e00d      	b.n	8005ed0 <_ZN10IridiumSBD12clearBuffersEi+0x34>

   this->reentrant = true;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalClearBuffers(buffers);
 8005ebc:	6839      	ldr	r1, [r7, #0]
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f001 feca 	bl	8007c58 <_ZN10IridiumSBD20internalClearBuffersEi>
 8005ec4:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 8005ece:	68fb      	ldr	r3, [r7, #12]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <_ZN10IridiumSBD7getIMEIEPcj>:

// High-level wrapper for AT+CGSN
int IridiumSBD::getIMEI(char *IMEI, size_t bufferSize)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
   if (this->reentrant)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <_ZN10IridiumSBD7getIMEIEPcj+0x1a>
      return ISBD_REENTRANT;
 8005eee:	2309      	movs	r3, #9
 8005ef0:	e00e      	b.n	8005f10 <_ZN10IridiumSBD7getIMEIEPcj+0x38>

   this->reentrant = true;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalGetIMEI(IMEI, bufferSize);
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	68b9      	ldr	r1, [r7, #8]
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f001 fef6 	bl	8007cf0 <_ZN10IridiumSBD15internalGetIMEIEPcj>
 8005f04:	6178      	str	r0, [r7, #20]
   this->reentrant = false;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 8005f0e:	697b      	ldr	r3, [r7, #20]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <_ZN10IridiumSBD11isConnectedEv>:

//Returns true if the I2C device is connected
//Always returns true for serial
//boolean IridiumSBD::isConnected() TODO
bool IridiumSBD::isConnected()
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
   if (this->useSerial) // If we are using Serial
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	7c5b      	ldrb	r3, [r3, #17]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <_ZN10IridiumSBD11isConnectedEv+0x14>
   {
		return true;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e012      	b.n	8005f52 <_ZN10IridiumSBD11isConnectedEv+0x3a>
   }
   else
   {
		wireport->beginTransmission((uint8_t)deviceaddress);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68da      	ldr	r2, [r3, #12]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	7c1b      	ldrb	r3, [r3, #16]
 8005f34:	4619      	mov	r1, r3
 8005f36:	4610      	mov	r0, r2
 8005f38:	f002 fce0 	bl	80088fc <_ZN7TwoWire17beginTransmissionEh>
		return (wireport->endTransmission() == 0); // Check that the device ack's
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f002 fd25 	bl	8008990 <_ZN7TwoWire15endTransmissionEv>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	bf0c      	ite	eq
 8005f4c:	2301      	moveq	r3, #1
 8005f4e:	2300      	movne	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
   }
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
	...

08005f5c <_ZN10IridiumSBD13internalBeginEv>:
/*
Private interface
*/

int IridiumSBD::internalBegin()
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b090      	sub	sp, #64	; 0x40
 8005f60:	af02      	add	r7, sp, #8
 8005f62:	6078      	str	r0, [r7, #4]
   diagprint(F("Calling internalBegin\r\n"));
 8005f64:	49af      	ldr	r1, [pc, #700]	; (8006224 <_ZN10IridiumSBD13internalBeginEv+0x2c8>)
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f001 fac2 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (!this->asleep)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8005f72:	f083 0301 	eor.w	r3, r3, #1
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d001      	beq.n	8005f80 <_ZN10IridiumSBD13internalBeginEv+0x24>
      return ISBD_ALREADY_AWAKE;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e14c      	b.n	800621a <_ZN10IridiumSBD13internalBeginEv+0x2be>

   if (!this->useSerial) // If we are using I2C
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	7c5b      	ldrb	r3, [r3, #17]
 8005f84:	f083 0301 	eor.w	r3, r3, #1
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d005      	beq.n	8005f9a <_ZN10IridiumSBD13internalBeginEv+0x3e>
   {
      check9603pins(); // Update IO_REGISTER with the status of the 9603 pins
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f001 fd9f 	bl	8007ad2 <_ZN10IridiumSBD13check9603pinsEv>
      check9603data(); // Get any waiting 9603 serial data
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f001 fccb 	bl	8007930 <_ZN10IridiumSBD13check9603dataEv>
   }

   power(true); // power on
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f001 f871 	bl	8007084 <_ZN10IridiumSBD5powerEb>

   bool modemAlive = false;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   unsigned long startupTime = 500; //ms
 8005fa8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005fac:	62fb      	str	r3, [r7, #44]	; 0x2c
   for (unsigned long start = millis(); millis() - start < startupTime;)
 8005fae:	f003 f94f 	bl	8009250 <HAL_GetTick>
 8005fb2:	62b8      	str	r0, [r7, #40]	; 0x28
 8005fb4:	f003 f94c 	bl	8009250 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	bf8c      	ite	hi
 8005fc4:	2301      	movhi	r3, #1
 8005fc6:	2300      	movls	r3, #0
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d007      	beq.n	8005fde <_ZN10IridiumSBD13internalBeginEv+0x82>
      if (cancelled())
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fd70 	bl	8006ab4 <_ZN10IridiumSBD9cancelledEv>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d0ec      	beq.n	8005fb4 <_ZN10IridiumSBD13internalBeginEv+0x58>
         return ISBD_CANCELLED;
 8005fda:	2304      	movs	r3, #4
 8005fdc:	e11d      	b.n	800621a <_ZN10IridiumSBD13internalBeginEv+0x2be>

   if (this->useSerial) // If we are using Serial
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	7c5b      	ldrb	r3, [r3, #17]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <_ZN10IridiumSBD13internalBeginEv+0x90>
      beginSerialPort(); // Apollo3 v2.1 Serial fix - begin the Serial port 500ms after power(true)
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f001 f8ec 	bl	80071c4 <_ZN10IridiumSBD15beginSerialPortEv>

   // Turn on modem and wait for a response from "AT" command to begin
   for (unsigned long start = millis(); !modemAlive && millis() - start < 1000UL * this->startupTimeout;)
 8005fec:	f003 f930 	bl	8009250 <HAL_GetTick>
 8005ff0:	6278      	str	r0, [r7, #36]	; 0x24
 8005ff2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ff6:	f083 0301 	eor.w	r3, r3, #1
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00f      	beq.n	8006020 <_ZN10IridiumSBD13internalBeginEv+0xc4>
 8006000:	f003 f926 	bl	8009250 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	1ad2      	subs	r2, r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800600e:	4619      	mov	r1, r3
 8006010:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006014:	fb03 f301 	mul.w	r3, r3, r1
 8006018:	429a      	cmp	r2, r3
 800601a:	d201      	bcs.n	8006020 <_ZN10IridiumSBD13internalBeginEv+0xc4>
 800601c:	2301      	movs	r3, #1
 800601e:	e000      	b.n	8006022 <_ZN10IridiumSBD13internalBeginEv+0xc6>
 8006020:	2300      	movs	r3, #0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d018      	beq.n	8006058 <_ZN10IridiumSBD13internalBeginEv+0xfc>
   {
      send(F("AT\r"));
 8006026:	2301      	movs	r3, #1
 8006028:	2201      	movs	r2, #1
 800602a:	497f      	ldr	r1, [pc, #508]	; (8006228 <_ZN10IridiumSBD13internalBeginEv+0x2cc>)
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f001 f8e5 	bl	80071fc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      modemAlive = waitForATResponse();
 8006032:	4b7e      	ldr	r3, [pc, #504]	; (800622c <_ZN10IridiumSBD13internalBeginEv+0x2d0>)
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	2300      	movs	r3, #0
 8006038:	2200      	movs	r2, #0
 800603a:	2100      	movs	r1, #0
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 fc7b 	bl	8006938 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006042:	4603      	mov	r3, r0
 8006044:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (cancelled())
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fd33 	bl	8006ab4 <_ZN10IridiumSBD9cancelledEv>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d0ce      	beq.n	8005ff2 <_ZN10IridiumSBD13internalBeginEv+0x96>
         return ISBD_CANCELLED;
 8006054:	2304      	movs	r3, #4
 8006056:	e0e0      	b.n	800621a <_ZN10IridiumSBD13internalBeginEv+0x2be>
   }

   if (!modemAlive)
 8006058:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800605c:	f083 0301 	eor.w	r3, r3, #1
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d005      	beq.n	8006072 <_ZN10IridiumSBD13internalBeginEv+0x116>
   {
      diagprint(F("No modem detected.\r\n"));
 8006066:	4972      	ldr	r1, [pc, #456]	; (8006230 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f001 fa41 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      return ISBD_NO_MODEM_DETECTED;
 800606e:	2305      	movs	r3, #5
 8006070:	e0d3      	b.n	800621a <_ZN10IridiumSBD13internalBeginEv+0x2be>
   }

   // The usual initialization sequence
   const char *strings[3] = { "ATE1\r", "AT&D0\r", "AT&K0\r" };
 8006072:	4a70      	ldr	r2, [pc, #448]	; (8006234 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8006074:	f107 0310 	add.w	r3, r7, #16
 8006078:	ca07      	ldmia	r2, {r0, r1, r2}
 800607a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   for (int i=0; i<3; ++i)
 800607e:	2300      	movs	r3, #0
 8006080:	633b      	str	r3, [r7, #48]	; 0x30
 8006082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006084:	2b02      	cmp	r3, #2
 8006086:	dc26      	bgt.n	80060d6 <_ZN10IridiumSBD13internalBeginEv+0x17a>
   {
      send(strings[i]);
 8006088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006090:	4413      	add	r3, r2
 8006092:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8006096:	4619      	mov	r1, r3
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f001 f907 	bl	80072ac <_ZN10IridiumSBD4sendEPKc>
      if (!waitForATResponse())
 800609e:	4b63      	ldr	r3, [pc, #396]	; (800622c <_ZN10IridiumSBD13internalBeginEv+0x2d0>)
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	2300      	movs	r3, #0
 80060a4:	2200      	movs	r2, #0
 80060a6:	2100      	movs	r1, #0
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 fc45 	bl	8006938 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80060ae:	4603      	mov	r3, r0
 80060b0:	f083 0301 	eor.w	r3, r3, #1
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d009      	beq.n	80060ce <_ZN10IridiumSBD13internalBeginEv+0x172>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fcfa 	bl	8006ab4 <_ZN10IridiumSBD9cancelledEv>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <_ZN10IridiumSBD13internalBeginEv+0x16e>
 80060c6:	2304      	movs	r3, #4
 80060c8:	e0a7      	b.n	800621a <_ZN10IridiumSBD13internalBeginEv+0x2be>
 80060ca:	2303      	movs	r3, #3
 80060cc:	e0a5      	b.n	800621a <_ZN10IridiumSBD13internalBeginEv+0x2be>
   for (int i=0; i<3; ++i)
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	3301      	adds	r3, #1
 80060d2:	633b      	str	r3, [r7, #48]	; 0x30
 80060d4:	e7d5      	b.n	8006082 <_ZN10IridiumSBD13internalBeginEv+0x126>
   }

   // Enable or disable RING alerts as requested by user
   // By default they are on if a RING pin was supplied on constructor
   diagprint(F("Ring alerts are")); diagprint(ringAlertsEnabled ? F("") : F(" NOT")); diagprint(F(" enabled.\r\n"));
 80060d6:	4958      	ldr	r1, [pc, #352]	; (8006238 <_ZN10IridiumSBD13internalBeginEv+0x2dc>)
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f001 fa09 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <_ZN10IridiumSBD13internalBeginEv+0x190>
 80060e8:	4b54      	ldr	r3, [pc, #336]	; (800623c <_ZN10IridiumSBD13internalBeginEv+0x2e0>)
 80060ea:	e000      	b.n	80060ee <_ZN10IridiumSBD13internalBeginEv+0x192>
 80060ec:	4b54      	ldr	r3, [pc, #336]	; (8006240 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 80060ee:	4619      	mov	r1, r3
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f001 f9fd 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 80060f6:	4953      	ldr	r1, [pc, #332]	; (8006244 <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f001 f9f9 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (ringAlertsEnabled) enableRingAlerts(true); // This will clear ringAsserted and the Ring Indicator flag
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006104:	2b00      	cmp	r3, #0
 8006106:	d004      	beq.n	8006112 <_ZN10IridiumSBD13internalBeginEv+0x1b6>
 8006108:	2101      	movs	r1, #1
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7ff fc98 	bl	8005a40 <_ZN10IridiumSBD16enableRingAlertsEb>
 8006110:	e009      	b.n	8006126 <_ZN10IridiumSBD13internalBeginEv+0x1ca>
   else {
	   if (!this->useSerial) clearRingIndicator(); // If ring alerts are not enabled and using I2C, make sure the Ring Indicator flag is clear
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	7c5b      	ldrb	r3, [r3, #17]
 8006116:	f083 0301 	eor.w	r3, r3, #1
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <_ZN10IridiumSBD13internalBeginEv+0x1ca>
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f7ff fe5b 	bl	8005ddc <_ZN10IridiumSBD18clearRingIndicatorEv>
   }

   send(ringAlertsEnabled ? F("AT+SBDMTA=1\r") : F("AT+SBDMTA=0\r"));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <_ZN10IridiumSBD13internalBeginEv+0x1d8>
 8006130:	4945      	ldr	r1, [pc, #276]	; (8006248 <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 8006132:	e000      	b.n	8006136 <_ZN10IridiumSBD13internalBeginEv+0x1da>
 8006134:	4945      	ldr	r1, [pc, #276]	; (800624c <_ZN10IridiumSBD13internalBeginEv+0x2f0>)
 8006136:	2301      	movs	r3, #1
 8006138:	2201      	movs	r2, #1
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f001 f85e 	bl	80071fc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse())
 8006140:	4b3a      	ldr	r3, [pc, #232]	; (800622c <_ZN10IridiumSBD13internalBeginEv+0x2d0>)
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	2300      	movs	r3, #0
 8006146:	2200      	movs	r2, #0
 8006148:	2100      	movs	r1, #0
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fbf4 	bl	8006938 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006150:	4603      	mov	r3, r0
 8006152:	f083 0301 	eor.w	r3, r3, #1
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	d009      	beq.n	8006170 <_ZN10IridiumSBD13internalBeginEv+0x214>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fca9 	bl	8006ab4 <_ZN10IridiumSBD9cancelledEv>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d001      	beq.n	800616c <_ZN10IridiumSBD13internalBeginEv+0x210>
 8006168:	2304      	movs	r3, #4
 800616a:	e056      	b.n	800621a <_ZN10IridiumSBD13internalBeginEv+0x2be>
 800616c:	2303      	movs	r3, #3
 800616e:	e054      	b.n	800621a <_ZN10IridiumSBD13internalBeginEv+0x2be>

   // Decide whether the internal MSSTM workaround should be enforced on TX/RX
   // By default it is unless the firmware rev is >= TA13001
   char version[8];
   int ret = getFirmwareVersion(version, sizeof(version));
 8006170:	f107 0308 	add.w	r3, r7, #8
 8006174:	2208      	movs	r2, #8
 8006176:	4619      	mov	r1, r3
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f7ff fd11 	bl	8005ba0 <_ZN10IridiumSBD18getFirmwareVersionEPcj>
 800617e:	6238      	str	r0, [r7, #32]
   if (ret != ISBD_SUCCESS)
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d008      	beq.n	8006198 <_ZN10IridiumSBD13internalBeginEv+0x23c>
   {
      diagprint(F("Unknown FW version\r\n"));
 8006186:	4932      	ldr	r1, [pc, #200]	; (8006250 <_ZN10IridiumSBD13internalBeginEv+0x2f4>)
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f001 f9b1 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      msstmWorkaroundRequested = true;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8006196:	e027      	b.n	80061e8 <_ZN10IridiumSBD13internalBeginEv+0x28c>
   }
   else
   {
      diagprint(F("Firmware version is ")); diagprint(version); diagprint(F("\r\n"));
 8006198:	492e      	ldr	r1, [pc, #184]	; (8006254 <_ZN10IridiumSBD13internalBeginEv+0x2f8>)
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f001 f9a8 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 80061a0:	f107 0308 	add.w	r3, r7, #8
 80061a4:	4619      	mov	r1, r3
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f001 f9c0 	bl	800752c <_ZN10IridiumSBD9diagprintEPKc>
 80061ac:	492a      	ldr	r1, [pc, #168]	; (8006258 <_ZN10IridiumSBD13internalBeginEv+0x2fc>)
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f001 f99e 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (version[0] == 'T' && version[1] == 'A')
 80061b4:	7a3b      	ldrb	r3, [r7, #8]
 80061b6:	2b54      	cmp	r3, #84	; 0x54
 80061b8:	d116      	bne.n	80061e8 <_ZN10IridiumSBD13internalBeginEv+0x28c>
 80061ba:	7a7b      	ldrb	r3, [r7, #9]
 80061bc:	2b41      	cmp	r3, #65	; 0x41
 80061be:	d113      	bne.n	80061e8 <_ZN10IridiumSBD13internalBeginEv+0x28c>
      {
         unsigned long ver = strtoul(version + 2, NULL, 10);
 80061c0:	f107 0308 	add.w	r3, r7, #8
 80061c4:	3302      	adds	r3, #2
 80061c6:	220a      	movs	r2, #10
 80061c8:	2100      	movs	r1, #0
 80061ca:	4618      	mov	r0, r3
 80061cc:	f013 fb22 	bl	8019814 <strtoul>
 80061d0:	61f8      	str	r0, [r7, #28]
         msstmWorkaroundRequested = ver < ISBD_MSSTM_WORKAROUND_FW_VER;
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80061d8:	4293      	cmp	r3, r2
 80061da:	bf94      	ite	ls
 80061dc:	2301      	movls	r3, #1
 80061de:	2300      	movhi	r3, #0
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
      }
   }
   diagprint(F("MSSTM workaround is")); diagprint(msstmWorkaroundRequested ? F("") : F(" NOT")); diagprint(F(" enforced.\r\n"));
 80061e8:	491c      	ldr	r1, [pc, #112]	; (800625c <_ZN10IridiumSBD13internalBeginEv+0x300>)
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f001 f980 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <_ZN10IridiumSBD13internalBeginEv+0x2a2>
 80061fa:	4b10      	ldr	r3, [pc, #64]	; (800623c <_ZN10IridiumSBD13internalBeginEv+0x2e0>)
 80061fc:	e000      	b.n	8006200 <_ZN10IridiumSBD13internalBeginEv+0x2a4>
 80061fe:	4b10      	ldr	r3, [pc, #64]	; (8006240 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 8006200:	4619      	mov	r1, r3
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f001 f974 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8006208:	4915      	ldr	r1, [pc, #84]	; (8006260 <_ZN10IridiumSBD13internalBeginEv+0x304>)
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f001 f970 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   // Done!
   diagprint(F("InternalBegin: success!\r\n"));
 8006210:	4914      	ldr	r1, [pc, #80]	; (8006264 <_ZN10IridiumSBD13internalBeginEv+0x308>)
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f001 f96c 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SUCCESS;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3738      	adds	r7, #56	; 0x38
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	0801e058 	.word	0x0801e058
 8006228:	0801e070 	.word	0x0801e070
 800622c:	0801dd58 	.word	0x0801dd58
 8006230:	0801e074 	.word	0x0801e074
 8006234:	0801e148 	.word	0x0801e148
 8006238:	0801e08c 	.word	0x0801e08c
 800623c:	0801e09c 	.word	0x0801e09c
 8006240:	0801e0a0 	.word	0x0801e0a0
 8006244:	0801e0a8 	.word	0x0801e0a8
 8006248:	0801e0b4 	.word	0x0801e0b4
 800624c:	0801e0c4 	.word	0x0801e0c4
 8006250:	0801e0d4 	.word	0x0801e0d4
 8006254:	0801e0ec 	.word	0x0801e0ec
 8006258:	0801e104 	.word	0x0801e104
 800625c:	0801e108 	.word	0x0801e108
 8006260:	0801e11c 	.word	0x0801e11c
 8006264:	0801e12c 	.word	0x0801e12c

08006268 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj>:

int IridiumSBD::internalSendReceiveSBD(const char *txTxtMessage, const uint8_t *txData, size_t txDataSize, uint8_t *rxBuffer, size_t *prxBufferSize)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b096      	sub	sp, #88	; 0x58
 800626c:	af04      	add	r7, sp, #16
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	603b      	str	r3, [r7, #0]
   diagprint(F("internalSendReceive\r\n"));
 8006276:	49a5      	ldr	r1, [pc, #660]	; (800650c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2a4>)
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f001 f939 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (this->asleep)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x24>
      return ISBD_IS_ASLEEP;
 8006288:	230a      	movs	r3, #10
 800628a:	e289      	b.n	80067a0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

   // Binary transmission?
   if (txData && txDataSize)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 8152 	beq.w	8006538 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2d0>
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 814e 	beq.w	8006538 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2d0>
   {
      if (txDataSize > ISBD_MAX_MESSAGE_LENGTH)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80062a2:	d901      	bls.n	80062a8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x40>
         return ISBD_MSG_TOO_LONG;
 80062a4:	230d      	movs	r3, #13
 80062a6:	e27b      	b.n	80067a0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

      // send will use serial or wire as appropriate
      send(F("AT+SBDWB="), true, false);
 80062a8:	2300      	movs	r3, #0
 80062aa:	2201      	movs	r2, #1
 80062ac:	4998      	ldr	r1, [pc, #608]	; (8006510 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2a8>)
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f000 ffa4 	bl	80071fc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      send(txDataSize);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	4619      	mov	r1, r3
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f001 f8d2 	bl	8007464 <_ZN10IridiumSBD4sendEt>
      send(F("\r"), false);
 80062c0:	2301      	movs	r3, #1
 80062c2:	2200      	movs	r2, #0
 80062c4:	4993      	ldr	r1, [pc, #588]	; (8006514 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2ac>)
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f000 ff98 	bl	80071fc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      if (!waitForATResponse(NULL, 0, NULL, "READY\r\n"))
 80062cc:	4b92      	ldr	r3, [pc, #584]	; (8006518 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2b0>)
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	2300      	movs	r3, #0
 80062d2:	2200      	movs	r2, #0
 80062d4:	2100      	movs	r1, #0
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f000 fb2e 	bl	8006938 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80062dc:	4603      	mov	r3, r0
 80062de:	f083 0301 	eor.w	r3, r3, #1
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d009      	beq.n	80062fc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x94>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f000 fbe3 	bl	8006ab4 <_ZN10IridiumSBD9cancelledEv>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x90>
 80062f4:	2304      	movs	r3, #4
 80062f6:	e253      	b.n	80067a0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 80062f8:	2303      	movs	r3, #3
 80062fa:	e251      	b.n	80067a0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

      uint16_t checksum = 0;
 80062fc:	2300      	movs	r3, #0
 80062fe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

      if (this->useSerial)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	7c5b      	ldrb	r3, [r3, #17]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d03a      	beq.n	8006380 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x118>
      {
         for (size_t i=0; i<txDataSize; ++i)
 800630a:	2300      	movs	r3, #0
 800630c:	643b      	str	r3, [r7, #64]	; 0x40
 800630e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	429a      	cmp	r2, r3
 8006314:	d21a      	bcs.n	800634c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0xe4>
         {
            stream->write(txData[i]);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	4618      	mov	r0, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6879      	ldr	r1, [r7, #4]
 8006326:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006328:	440a      	add	r2, r1
 800632a:	7812      	ldrb	r2, [r2, #0]
 800632c:	4611      	mov	r1, r2
 800632e:	4798      	blx	r3
            checksum += (uint16_t)txData[i];
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006334:	4413      	add	r3, r2
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	b29a      	uxth	r2, r3
 800633a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800633e:	4413      	add	r3, r2
 8006340:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
         for (size_t i=0; i<txDataSize; ++i)
 8006344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006346:	3301      	adds	r3, #1
 8006348:	643b      	str	r3, [r7, #64]	; 0x40
 800634a:	e7e0      	b.n	800630e <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0xa6>
         }
         stream->write((uint8_t)(checksum >> 8));
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	4618      	mov	r0, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800635e:	1212      	asrs	r2, r2, #8
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	4611      	mov	r1, r2
 8006364:	4798      	blx	r3
         stream->write((uint8_t)(checksum & 0xFF));
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	4618      	mov	r0, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006378:	b2d2      	uxtb	r2, r2
 800637a:	4611      	mov	r1, r2
 800637c:	4798      	blx	r3
 800637e:	e092      	b.n	80064a6 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x23e>
      }
      else
      {
         //lastCheck = millis(); // Update lastCheck so we enforce a full I2C_POLLING_WAIT
         // We need to make sure we don't send too much I2C data in one go (otherwise we will overflow the ATtiny841's I2C buffer)
         size_t bytes_to_send = txDataSize; // Send this many bytes in total
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	63fb      	str	r3, [r7, #60]	; 0x3c
         size_t i=0;
 8006384:	2300      	movs	r3, #0
 8006386:	63bb      	str	r3, [r7, #56]	; 0x38
         size_t nexti;
         while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 3)) // If there are too many bytes to send all in one go
 8006388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800638a:	2b1d      	cmp	r3, #29
 800638c:	d937      	bls.n	80063fe <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x196>
         {
            nexti = i + (TINY_I2C_BUFFER_LENGTH - 3);
 800638e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006390:	331d      	adds	r3, #29
 8006392:	637b      	str	r3, [r7, #52]	; 0x34
            wireport->beginTransmission((uint8_t)deviceaddress);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	68da      	ldr	r2, [r3, #12]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	7c1b      	ldrb	r3, [r3, #16]
 800639c:	4619      	mov	r1, r3
 800639e:	4610      	mov	r0, r2
 80063a0:	f002 faac 	bl	80088fc <_ZN7TwoWire17beginTransmissionEh>
            wireport->write(DATA_REG); // Point to the serial data 'register'
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	21ff      	movs	r1, #255	; 0xff
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7ff fa9c 	bl	80058e8 <_ZN7TwoWire5writeEi>
            for (; i<nexti; ++i)
 80063b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d219      	bcs.n	80063ec <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x184>
            {
               wireport->write(txData[i]); // Write each byte
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	68d8      	ldr	r0, [r3, #12]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6879      	ldr	r1, [r7, #4]
 80063c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063c8:	440a      	add	r2, r1
 80063ca:	7812      	ldrb	r2, [r2, #0]
 80063cc:	4611      	mov	r1, r2
 80063ce:	4798      	blx	r3
               checksum += (uint16_t)txData[i];
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d4:	4413      	add	r3, r2
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	b29a      	uxth	r2, r3
 80063da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80063de:	4413      	add	r3, r2
 80063e0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            for (; i<nexti; ++i)
 80063e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e6:	3301      	adds	r3, #1
 80063e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80063ea:	e7e1      	b.n	80063b0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x148>
            }
            bytes_to_send = bytes_to_send - (TINY_I2C_BUFFER_LENGTH - 3); // Decrease the number of bytes still to send
 80063ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ee:	3b1d      	subs	r3, #29
 80063f0:	63fb      	str	r3, [r7, #60]	; 0x3c
            wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f002 faca 	bl	8008990 <_ZN7TwoWire15endTransmissionEv>
         while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 3)) // If there are too many bytes to send all in one go
 80063fc:	e7c4      	b.n	8006388 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x120>
         }
         // There are now <= (TINY_I2C_BUFFER_LENGTH - 3) bytes left to send, so send them and then release the bus
         wireport->beginTransmission((uint8_t)deviceaddress);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	68da      	ldr	r2, [r3, #12]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	7c1b      	ldrb	r3, [r3, #16]
 8006406:	4619      	mov	r1, r3
 8006408:	4610      	mov	r0, r2
 800640a:	f002 fa77 	bl	80088fc <_ZN7TwoWire17beginTransmissionEh>
         wireport->write(DATA_REG); // Point to the 'serial register'
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	21ff      	movs	r1, #255	; 0xff
 8006414:	4618      	mov	r0, r3
 8006416:	f7ff fa67 	bl	80058e8 <_ZN7TwoWire5writeEi>
         for (; i<txDataSize; ++i)
 800641a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	429a      	cmp	r2, r3
 8006420:	d219      	bcs.n	8006456 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x1ee>
         {
            wireport->write(txData[i]);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	68d8      	ldr	r0, [r3, #12]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6879      	ldr	r1, [r7, #4]
 8006430:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006432:	440a      	add	r2, r1
 8006434:	7812      	ldrb	r2, [r2, #0]
 8006436:	4611      	mov	r1, r2
 8006438:	4798      	blx	r3
            checksum += (uint16_t)txData[i];
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643e:	4413      	add	r3, r2
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	b29a      	uxth	r2, r3
 8006444:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006448:	4413      	add	r3, r2
 800644a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
         for (; i<txDataSize; ++i)
 800644e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006450:	3301      	adds	r3, #1
 8006452:	63bb      	str	r3, [r7, #56]	; 0x38
 8006454:	e7e1      	b.n	800641a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x1b2>
         }
         wireport->write((uint8_t)(checksum >> 8));
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	68d8      	ldr	r0, [r3, #12]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006466:	1212      	asrs	r2, r2, #8
 8006468:	b2d2      	uxtb	r2, r2
 800646a:	4611      	mov	r1, r2
 800646c:	4798      	blx	r3
         wireport->write((uint8_t)(checksum & 0xFF));
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	68da      	ldr	r2, [r3, #12]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800647e:	b2c9      	uxtb	r1, r1
 8006480:	4610      	mov	r0, r2
 8006482:	4798      	blx	r3
         if (wireport->endTransmission() != 0) //Send data and release bus
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	4618      	mov	r0, r3
 800648a:	f002 fa81 	bl	8008990 <_ZN7TwoWire15endTransmissionEv>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	bf14      	ite	ne
 8006494:	2301      	movne	r3, #1
 8006496:	2300      	moveq	r3, #0
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x23e>
            diagprint(F("I2C write was not successful!\r\n"));
 800649e:	491f      	ldr	r1, [pc, #124]	; (800651c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2b4>)
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f001 f825 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      }

      consoleprint(F("["));
 80064a6:	491e      	ldr	r1, [pc, #120]	; (8006520 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2b8>)
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f001 f879 	bl	80075a0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
      consoleprint((uint16_t)txDataSize);
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	4619      	mov	r1, r3
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f001 f8ab 	bl	8007610 <_ZN10IridiumSBD12consoleprintEt>
      consoleprint(F(" bytes]"));
 80064ba:	491a      	ldr	r1, [pc, #104]	; (8006524 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2bc>)
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f001 f86f 	bl	80075a0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

      diagprint(F("Checksum:"));
 80064c2:	4919      	ldr	r1, [pc, #100]	; (8006528 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2c0>)
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f001 f813 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      diagprint(checksum);
 80064ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80064ce:	4619      	mov	r1, r3
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f001 f845 	bl	8007560 <_ZN10IridiumSBD9diagprintEt>
      diagprint(F("\r\n"));
 80064d6:	4915      	ldr	r1, [pc, #84]	; (800652c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2c4>)
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f001 f809 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

      if (!waitForATResponse(NULL, 0, NULL, "0\r\n\r\nOK\r\n"))
 80064de:	4b14      	ldr	r3, [pc, #80]	; (8006530 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2c8>)
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	2300      	movs	r3, #0
 80064e4:	2200      	movs	r2, #0
 80064e6:	2100      	movs	r1, #0
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f000 fa25 	bl	8006938 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80064ee:	4603      	mov	r3, r0
 80064f0:	f083 0301 	eor.w	r3, r3, #1
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f000 8091 	beq.w	800661e <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b6>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 fad9 	bl	8006ab4 <_ZN10IridiumSBD9cancelledEv>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d015      	beq.n	8006534 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2cc>
 8006508:	2304      	movs	r3, #4
 800650a:	e149      	b.n	80067a0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 800650c:	0801e154 	.word	0x0801e154
 8006510:	0801e16c 	.word	0x0801e16c
 8006514:	0801e178 	.word	0x0801e178
 8006518:	0801e17c 	.word	0x0801e17c
 800651c:	0801e184 	.word	0x0801e184
 8006520:	0801e1a4 	.word	0x0801e1a4
 8006524:	0801e1a8 	.word	0x0801e1a8
 8006528:	0801e1b0 	.word	0x0801e1b0
 800652c:	0801e104 	.word	0x0801e104
 8006530:	0801e1bc 	.word	0x0801e1bc
 8006534:	2303      	movs	r3, #3
 8006536:	e133      	b.n	80067a0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
   }

   else // Text transmission
   {
#if true // use long string implementation
      if (txTxtMessage == NULL) // It's ok to have a NULL txtTxtMessage if the transaction is RX only
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d11d      	bne.n	800657a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x312>
      {
         send(F("AT+SBDWT=\r"));
 800653e:	2301      	movs	r3, #1
 8006540:	2201      	movs	r2, #1
 8006542:	4999      	ldr	r1, [pc, #612]	; (80067a8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x540>)
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 fe59 	bl	80071fc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
         if (!waitForATResponse())
 800654a:	4b98      	ldr	r3, [pc, #608]	; (80067ac <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x544>)
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	2300      	movs	r3, #0
 8006550:	2200      	movs	r2, #0
 8006552:	2100      	movs	r1, #0
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 f9ef 	bl	8006938 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 800655a:	4603      	mov	r3, r0
 800655c:	f083 0301 	eor.w	r3, r3, #1
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d05c      	beq.n	8006620 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b8>
            return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 faa4 	bl	8006ab4 <_ZN10IridiumSBD9cancelledEv>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x30e>
 8006572:	2304      	movs	r3, #4
 8006574:	e114      	b.n	80067a0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 8006576:	2303      	movs	r3, #3
 8006578:	e112      	b.n	80067a0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
      }
      else
      {
         // remove any embedded \r
         char *p = strchr(txTxtMessage, '\r');
 800657a:	210d      	movs	r1, #13
 800657c:	68b8      	ldr	r0, [r7, #8]
 800657e:	f012 f98c 	bl	801889a <strchr>
 8006582:	6338      	str	r0, [r7, #48]	; 0x30
         if (p) *p = 0;
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	2b00      	cmp	r3, #0
 8006588:	d002      	beq.n	8006590 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x328>
 800658a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658c:	2200      	movs	r2, #0
 800658e:	701a      	strb	r2, [r3, #0]
         if (strlen(txTxtMessage) > ISBD_MAX_MESSAGE_LENGTH)
 8006590:	68b8      	ldr	r0, [r7, #8]
 8006592:	f7f9 fe37 	bl	8000204 <strlen>
 8006596:	4603      	mov	r3, r0
 8006598:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800659c:	d901      	bls.n	80065a2 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x33a>
            return ISBD_MSG_TOO_LONG;
 800659e:	230d      	movs	r3, #13
 80065a0:	e0fe      	b.n	80067a0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         send(F("AT+SBDWT\r"));
 80065a2:	2301      	movs	r3, #1
 80065a4:	2201      	movs	r2, #1
 80065a6:	4982      	ldr	r1, [pc, #520]	; (80067b0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x548>)
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 fe27 	bl	80071fc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
         if (!waitForATResponse(NULL, 0, NULL, "READY\r\n"))
 80065ae:	4b81      	ldr	r3, [pc, #516]	; (80067b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x54c>)
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	2300      	movs	r3, #0
 80065b4:	2200      	movs	r2, #0
 80065b6:	2100      	movs	r1, #0
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 f9bd 	bl	8006938 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80065be:	4603      	mov	r3, r0
 80065c0:	f083 0301 	eor.w	r3, r3, #1
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d009      	beq.n	80065de <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x376>
            return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 fa72 	bl	8006ab4 <_ZN10IridiumSBD9cancelledEv>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x372>
 80065d6:	2304      	movs	r3, #4
 80065d8:	e0e2      	b.n	80067a0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 80065da:	2303      	movs	r3, #3
 80065dc:	e0e0      	b.n	80067a0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         sendlong(txTxtMessage);
 80065de:	68b9      	ldr	r1, [r7, #8]
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 feaf 	bl	8007344 <_ZN10IridiumSBD8sendlongEPKc>
         send("\r");
 80065e6:	4974      	ldr	r1, [pc, #464]	; (80067b8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x550>)
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 fe5f 	bl	80072ac <_ZN10IridiumSBD4sendEPKc>
         if (!waitForATResponse(NULL, 0, NULL, "0\r\n\r\nOK\r\n"))
 80065ee:	4b73      	ldr	r3, [pc, #460]	; (80067bc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x554>)
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	2300      	movs	r3, #0
 80065f4:	2200      	movs	r2, #0
 80065f6:	2100      	movs	r1, #0
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 f99d 	bl	8006938 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80065fe:	4603      	mov	r3, r0
 8006600:	f083 0301 	eor.w	r3, r3, #1
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b8>
            return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 fa52 	bl	8006ab4 <_ZN10IridiumSBD9cancelledEv>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b2>
 8006616:	2304      	movs	r3, #4
 8006618:	e0c2      	b.n	80067a0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 800661a:	2303      	movs	r3, #3
 800661c:	e0c0      	b.n	80067a0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800661e:	bf00      	nop
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif
   }

   // Long SBDIX loop begins here
   for (unsigned long start = millis(); millis() - start < 1000UL * this->sendReceiveTimeout;)
 8006620:	f002 fe16 	bl	8009250 <HAL_GetTick>
 8006624:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006626:	f002 fe13 	bl	8009250 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662e:	1ad2      	subs	r2, r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006634:	4619      	mov	r1, r3
 8006636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800663a:	fb03 f301 	mul.w	r3, r3, r1
 800663e:	429a      	cmp	r2, r3
 8006640:	bf34      	ite	cc
 8006642:	2301      	movcc	r3, #1
 8006644:	2300      	movcs	r3, #0
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 80a4 	beq.w	8006796 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x52e>
   {
      bool okToProceed = true;
 800664e:	2301      	movs	r3, #1
 8006650:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      if (this->msstmWorkaroundRequested)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00e      	beq.n	800667c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x414>
      {
         okToProceed = false;
 800665e:	2300      	movs	r3, #0
 8006660:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
         int ret = internalMSSTMWorkaround(okToProceed);
 8006664:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8006668:	4619      	mov	r1, r3
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 f902 	bl	8006874 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb>
 8006670:	62b8      	str	r0, [r7, #40]	; 0x28
         if (ret != ISBD_SUCCESS)
 8006672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x414>
            return ret;
 8006678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667a:	e091      	b.n	80067a0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
      }

      if (okToProceed)
 800667c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006680:	2b00      	cmp	r3, #0
 8006682:	d077      	beq.n	8006774 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50c>
      {
         uint16_t moCode = 0, moMSN = 0, mtCode = 0, mtMSN = 0, mtLen = 0, mtRemaining = 0;
 8006684:	2300      	movs	r3, #0
 8006686:	843b      	strh	r3, [r7, #32]
 8006688:	2300      	movs	r3, #0
 800668a:	83fb      	strh	r3, [r7, #30]
 800668c:	2300      	movs	r3, #0
 800668e:	83bb      	strh	r3, [r7, #28]
 8006690:	2300      	movs	r3, #0
 8006692:	837b      	strh	r3, [r7, #26]
 8006694:	2300      	movs	r3, #0
 8006696:	833b      	strh	r3, [r7, #24]
 8006698:	2300      	movs	r3, #0
 800669a:	82fb      	strh	r3, [r7, #22]
         int ret = doSBDIX(moCode, moMSN, mtCode, mtMSN, mtLen, mtRemaining);
 800669c:	f107 001c 	add.w	r0, r7, #28
 80066a0:	f107 021e 	add.w	r2, r7, #30
 80066a4:	f107 0120 	add.w	r1, r7, #32
 80066a8:	f107 0316 	add.w	r3, r7, #22
 80066ac:	9302      	str	r3, [sp, #8]
 80066ae:	f107 0318 	add.w	r3, r7, #24
 80066b2:	9301      	str	r3, [sp, #4]
 80066b4:	f107 031a 	add.w	r3, r7, #26
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	4603      	mov	r3, r0
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f000 fa29 	bl	8006b14 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_>
 80066c2:	6278      	str	r0, [r7, #36]	; 0x24
         if (ret != ISBD_SUCCESS)
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x466>
            return ret;
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	e068      	b.n	80067a0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

         diagprint(F("SBDIX MO code: "));
 80066ce:	493c      	ldr	r1, [pc, #240]	; (80067c0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x558>)
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f000 ff0d 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
         diagprint(moCode);
 80066d6:	8c3b      	ldrh	r3, [r7, #32]
 80066d8:	4619      	mov	r1, r3
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 ff40 	bl	8007560 <_ZN10IridiumSBD9diagprintEt>
         diagprint(F("\r\n"));
 80066e0:	4938      	ldr	r1, [pc, #224]	; (80067c4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x55c>)
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 ff04 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

         if (moCode <= 4) // this range indicates successful return!
 80066e8:	8c3b      	ldrh	r3, [r7, #32]
 80066ea:	2b04      	cmp	r3, #4
 80066ec:	d820      	bhi.n	8006730 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4c8>
         {
            diagprint(F("SBDIX success!\r\n"));
 80066ee:	4936      	ldr	r1, [pc, #216]	; (80067c8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x560>)
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 fefd 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

            this->remainingMessages = mtRemaining;
 80066f6:	8afb      	ldrh	r3, [r7, #22]
 80066f8:	461a      	mov	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	675a      	str	r2, [r3, #116]	; 0x74
            if (mtCode == 1 && rxBuffer) // retrieved 1 message
 80066fe:	8bbb      	ldrh	r3, [r7, #28]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d10d      	bne.n	8006720 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4b8>
 8006704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00a      	beq.n	8006720 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4b8>
            {
               diagprint(F("Incoming message!\r\n"));
 800670a:	4930      	ldr	r1, [pc, #192]	; (80067cc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x564>)
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 feef 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
               return doSBDRB(rxBuffer, prxBufferSize);
 8006712:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006714:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 fa62 	bl	8006be0 <_ZN10IridiumSBD7doSBDRBEPhPj>
 800671c:	4603      	mov	r3, r0
 800671e:	e028      	b.n	8006772 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50a>
            }

            else
            {
               // No data returned
               if (prxBufferSize)
 8006720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006722:	2b00      	cmp	r3, #0
 8006724:	d002      	beq.n	800672c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4c4>
                  *prxBufferSize = 0;
 8006726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]
            }
            return ISBD_SUCCESS;
 800672c:	2300      	movs	r3, #0
 800672e:	e020      	b.n	8006772 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50a>
         }

         else if (moCode == 12 || moCode == 14 || moCode == 16) // fatal failure: no retry
 8006730:	8c3b      	ldrh	r3, [r7, #32]
 8006732:	2b0c      	cmp	r3, #12
 8006734:	d005      	beq.n	8006742 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4da>
 8006736:	8c3b      	ldrh	r3, [r7, #32]
 8006738:	2b0e      	cmp	r3, #14
 800673a:	d002      	beq.n	8006742 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4da>
 800673c:	8c3b      	ldrh	r3, [r7, #32]
 800673e:	2b10      	cmp	r3, #16
 8006740:	d105      	bne.n	800674e <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4e6>
         {
            diagprint(F("SBDIX fatal!\r\n"));
 8006742:	4923      	ldr	r1, [pc, #140]	; (80067d0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x568>)
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f000 fed3 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
            return ISBD_SBDIX_FATAL_ERROR;
 800674a:	2306      	movs	r3, #6
 800674c:	e011      	b.n	8006772 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50a>
         }

         else // retry
         {
            diagprint(F("Waiting for SBDIX retry...\r\n"));
 800674e:	4921      	ldr	r1, [pc, #132]	; (80067d4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x56c>)
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f000 fecd 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
            if (!noBlockWait(sbdixInterval))
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800675a:	4619      	mov	r1, r3
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 f8c5 	bl	80068ec <_ZN10IridiumSBD11noBlockWaitEi>
 8006762:	4603      	mov	r3, r0
 8006764:	f083 0301 	eor.w	r3, r3, #1
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	f43f af5b 	beq.w	8006626 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3be>
               return ISBD_CANCELLED;
 8006770:	2304      	movs	r3, #4
            return ret;
 8006772:	e015      	b.n	80067a0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         }
      }

      else // MSSTM check fail
      {
         diagprint(F("Waiting for MSSTM retry...\r\n"));
 8006774:	4918      	ldr	r1, [pc, #96]	; (80067d8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x570>)
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 feba 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
         if (!noBlockWait(ISBD_MSSTM_RETRY_INTERVAL))
 800677c:	210a      	movs	r1, #10
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f000 f8b4 	bl	80068ec <_ZN10IridiumSBD11noBlockWaitEi>
 8006784:	4603      	mov	r3, r0
 8006786:	f083 0301 	eor.w	r3, r3, #1
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b00      	cmp	r3, #0
 800678e:	f43f af4a 	beq.w	8006626 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3be>
            return ISBD_CANCELLED;
 8006792:	2304      	movs	r3, #4
 8006794:	e004      	b.n	80067a0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
      }
   } // big wait loop

   diagprint(F("SBDIX timeout!\r\n"));
 8006796:	4911      	ldr	r1, [pc, #68]	; (80067dc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x574>)
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 fea9 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SENDRECEIVE_TIMEOUT;
 800679e:	2307      	movs	r3, #7
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3748      	adds	r7, #72	; 0x48
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	0801e1c8 	.word	0x0801e1c8
 80067ac:	0801dd58 	.word	0x0801dd58
 80067b0:	0801e1d4 	.word	0x0801e1d4
 80067b4:	0801e17c 	.word	0x0801e17c
 80067b8:	0801e178 	.word	0x0801e178
 80067bc:	0801e1bc 	.word	0x0801e1bc
 80067c0:	0801e1e0 	.word	0x0801e1e0
 80067c4:	0801e104 	.word	0x0801e104
 80067c8:	0801e1f0 	.word	0x0801e1f0
 80067cc:	0801e204 	.word	0x0801e204
 80067d0:	0801e218 	.word	0x0801e218
 80067d4:	0801e228 	.word	0x0801e228
 80067d8:	0801e248 	.word	0x0801e248
 80067dc:	0801e268 	.word	0x0801e268

080067e0 <_ZN10IridiumSBD24internalGetSignalQualityERi>:

int IridiumSBD::internalGetSignalQuality(int &quality)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af02      	add	r7, sp, #8
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
   if (this->asleep)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x18>
      return ISBD_IS_ASLEEP;
 80067f4:	230a      	movs	r3, #10
 80067f6:	e032      	b.n	800685e <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>

   char csqResponseBuf[2];

   send(F("AT+CSQ\r"));
 80067f8:	2301      	movs	r3, #1
 80067fa:	2201      	movs	r2, #1
 80067fc:	491a      	ldr	r1, [pc, #104]	; (8006868 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x88>)
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 fcfc 	bl	80071fc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(csqResponseBuf, sizeof(csqResponseBuf), "+CSQ:"))
 8006804:	f107 010c 	add.w	r1, r7, #12
 8006808:	4b18      	ldr	r3, [pc, #96]	; (800686c <_ZN10IridiumSBD24internalGetSignalQualityERi+0x8c>)
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	4b18      	ldr	r3, [pc, #96]	; (8006870 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x90>)
 800680e:	2202      	movs	r2, #2
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f891 	bl	8006938 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006816:	4603      	mov	r3, r0
 8006818:	f083 0301 	eor.w	r3, r3, #1
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d009      	beq.n	8006836 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x56>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f946 	bl	8006ab4 <_ZN10IridiumSBD9cancelledEv>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d001      	beq.n	8006832 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x52>
 800682e:	2304      	movs	r3, #4
 8006830:	e015      	b.n	800685e <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>
 8006832:	2303      	movs	r3, #3
 8006834:	e013      	b.n	800685e <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>

   if (isdigit(csqResponseBuf[0]))
 8006836:	7b3b      	ldrb	r3, [r7, #12]
 8006838:	3b30      	subs	r3, #48	; 0x30
 800683a:	2b09      	cmp	r3, #9
 800683c:	bf94      	ite	ls
 800683e:	2301      	movls	r3, #1
 8006840:	2300      	movhi	r3, #0
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b00      	cmp	r3, #0
 8006846:	d009      	beq.n	800685c <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7c>
   {
      quality = atoi(csqResponseBuf);
 8006848:	f107 030c 	add.w	r3, r7, #12
 800684c:	4618      	mov	r0, r3
 800684e:	f010 fa7e 	bl	8016d4e <atoi>
 8006852:	4602      	mov	r2, r0
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	601a      	str	r2, [r3, #0]
      return ISBD_SUCCESS;
 8006858:	2300      	movs	r3, #0
 800685a:	e000      	b.n	800685e <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>
   }

   return ISBD_PROTOCOL_ERROR;
 800685c:	2303      	movs	r3, #3
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	0801e27c 	.word	0x0801e27c
 800686c:	0801dd58 	.word	0x0801dd58
 8006870:	0801e284 	.word	0x0801e284

08006874 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb>:

int IridiumSBD::internalMSSTMWorkaround(bool &okToProceed)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b08a      	sub	sp, #40	; 0x28
 8006878:	af02      	add	r7, sp, #8
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
   satellite. Ensuring that the received signal strength reported in response to AT command +CSQ and +CIER is above 2-3 bars
   before attempting SBD communication will protect against lockout.
   */
   char msstmResponseBuf[24];

   send(F("AT-MSSTM\r"));
 800687e:	2301      	movs	r3, #1
 8006880:	2201      	movs	r2, #1
 8006882:	4917      	ldr	r1, [pc, #92]	; (80068e0 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x6c>)
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fcb9 	bl	80071fc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(msstmResponseBuf, sizeof(msstmResponseBuf), "-MSSTM: "))
 800688a:	f107 0108 	add.w	r1, r7, #8
 800688e:	4b15      	ldr	r3, [pc, #84]	; (80068e4 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x70>)
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	4b15      	ldr	r3, [pc, #84]	; (80068e8 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x74>)
 8006894:	2218      	movs	r2, #24
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f84e 	bl	8006938 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 800689c:	4603      	mov	r3, r0
 800689e:	f083 0301 	eor.w	r3, r3, #1
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d009      	beq.n	80068bc <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x48>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f903 	bl	8006ab4 <_ZN10IridiumSBD9cancelledEv>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d001      	beq.n	80068b8 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x44>
 80068b4:	2304      	movs	r3, #4
 80068b6:	e00e      	b.n	80068d6 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x62>
 80068b8:	2303      	movs	r3, #3
 80068ba:	e00c      	b.n	80068d6 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x62>

   // Response buf now contains either an 8-digit number or the string "no network service"
   okToProceed = isxdigit(msstmResponseBuf[0]);
 80068bc:	7a3b      	ldrb	r3, [r7, #8]
 80068be:	4618      	mov	r0, r3
 80068c0:	f010 fb6e 	bl	8016fa0 <isxdigit>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	bf14      	ite	ne
 80068ca:	2301      	movne	r3, #1
 80068cc:	2300      	moveq	r3, #0
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	701a      	strb	r2, [r3, #0]
   return ISBD_SUCCESS;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3720      	adds	r7, #32
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	0801dd40 	.word	0x0801dd40
 80068e4:	0801dd58 	.word	0x0801dd58
 80068e8:	0801dd4c 	.word	0x0801dd4c

080068ec <_ZN10IridiumSBD11noBlockWaitEi>:

   return ISBD_SUCCESS;
}

bool IridiumSBD::noBlockWait(int seconds)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
   for (unsigned long start=millis(); millis() - start < 1000UL * seconds;)
 80068f6:	f002 fcab 	bl	8009250 <HAL_GetTick>
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	f002 fca8 	bl	8009250 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	1ad2      	subs	r2, r2, r3
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800690c:	fb01 f303 	mul.w	r3, r1, r3
 8006910:	429a      	cmp	r2, r3
 8006912:	bf34      	ite	cc
 8006914:	2301      	movcc	r3, #1
 8006916:	2300      	movcs	r3, #0
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d007      	beq.n	800692e <_ZN10IridiumSBD11noBlockWaitEi+0x42>
      if (cancelled())
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f8c8 	bl	8006ab4 <_ZN10IridiumSBD9cancelledEv>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d0e8      	beq.n	80068fc <_ZN10IridiumSBD11noBlockWaitEi+0x10>
         return false;
 800692a:	2300      	movs	r3, #0
 800692c:	e000      	b.n	8006930 <_ZN10IridiumSBD11noBlockWaitEi+0x44>

   return true;
 800692e:	2301      	movs	r3, #1
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>:

// Wait for response from previous AT command.  This process terminates when "terminator" string is seen or upon timeout.
// If "prompt" string is provided (example "+CSQ:"), then all characters following prompt up to the next CRLF are
// stored in response buffer for later parsing by caller.
bool IridiumSBD::waitForATResponse(char *response, int responseSize, const char *prompt, const char *terminator)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b08a      	sub	sp, #40	; 0x28
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
 8006944:	603b      	str	r3, [r7, #0]
   diagprint(F("Waiting for response "));
 8006946:	4959      	ldr	r1, [pc, #356]	; (8006aac <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x174>)
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 fdd1 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   diagprint(terminator);
 800694e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f000 fdeb 	bl	800752c <_ZN10IridiumSBD9diagprintEPKc>
   this->print((char*) terminator); //TODO doesn't print otherwise
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800695c:	4798      	blx	r3
   diagprint(F("\r\n"));
 800695e:	4954      	ldr	r1, [pc, #336]	; (8006ab0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x178>)
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f000 fdc5 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (response)
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d005      	beq.n	8006978 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x40>
      memset(response, 0, responseSize);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	461a      	mov	r2, r3
 8006970:	2100      	movs	r1, #0
 8006972:	68b8      	ldr	r0, [r7, #8]
 8006974:	f010 fc6e 	bl	8017254 <memset>

   int matchPromptPos = 0; // Matches chars in prompt
 8006978:	2300      	movs	r3, #0
 800697a:	627b      	str	r3, [r7, #36]	; 0x24
   int matchTerminatorPos = 0; // Matches chars in terminator
 800697c:	2300      	movs	r3, #0
 800697e:	623b      	str	r3, [r7, #32]
   enum {LOOKING_FOR_PROMPT, GATHERING_RESPONSE, LOOKING_FOR_TERMINATOR};
   int promptState = prompt ? LOOKING_FOR_PROMPT : LOOKING_FOR_TERMINATOR;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x52>
 8006986:	2300      	movs	r3, #0
 8006988:	e000      	b.n	800698c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x54>
 800698a:	2302      	movs	r3, #2
 800698c:	61fb      	str	r3, [r7, #28]
   //consoleprint(F("<< ")); //TODO If we comment out this it looks cleaner in the serial

   for (unsigned long start=millis(); millis() - start < 1000UL * atTimeout;)
 800698e:	f002 fc5f 	bl	8009250 <HAL_GetTick>
 8006992:	61b8      	str	r0, [r7, #24]
 8006994:	f002 fc5c 	bl	8009250 <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	1ad2      	subs	r2, r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069a2:	4619      	mov	r1, r3
 80069a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069a8:	fb03 f301 	mul.w	r3, r3, r1
 80069ac:	429a      	cmp	r2, r3
 80069ae:	bf34      	ite	cc
 80069b0:	2301      	movcc	r3, #1
 80069b2:	2300      	movcs	r3, #0
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d072      	beq.n	8006aa0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x168>
   {
      if (cancelled())
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 f87a 	bl	8006ab4 <_ZN10IridiumSBD9cancelledEv>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x92>
         return false;
 80069c6:	2300      	movs	r3, #0
 80069c8:	e06b      	b.n	8006aa2 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x16a>

      while (filteredavailable() > 0)
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f000 ff4e 	bl	800786c <_ZN10IridiumSBD17filteredavailableEv>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	bfcc      	ite	gt
 80069d6:	2301      	movgt	r3, #1
 80069d8:	2300      	movle	r3, #0
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d0d9      	beq.n	8006994 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x5c>
      {
         char c = filteredread();
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 ff5f 	bl	80078a4 <_ZN10IridiumSBD12filteredreadEv>
 80069e6:	4603      	mov	r3, r0
 80069e8:	75fb      	strb	r3, [r7, #23]
         if (prompt)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d03b      	beq.n	8006a68 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
         {
            switch (promptState)
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xc6>
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d01d      	beq.n	8006a38 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x100>
 80069fc:	e034      	b.n	8006a68 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
            {
            case LOOKING_FOR_PROMPT:
               if (c == prompt[matchPromptPos])
 80069fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	4413      	add	r3, r2
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	7dfa      	ldrb	r2, [r7, #23]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d10b      	bne.n	8006a24 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xec>
               {
                  ++matchPromptPos;
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	3301      	adds	r3, #1
 8006a10:	627b      	str	r3, [r7, #36]	; 0x24
                  if (prompt[matchPromptPos] == '\0')
 8006a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	4413      	add	r3, r2
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d121      	bne.n	8006a62 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
                     promptState = GATHERING_RESPONSE;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	61fb      	str	r3, [r7, #28]
               else
               {
                  matchPromptPos = c == prompt[0] ? 1 : 0;
               }

               break;
 8006a22:	e01e      	b.n	8006a62 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
                  matchPromptPos = c == prompt[0] ? 1 : 0;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	7dfa      	ldrb	r2, [r7, #23]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d101      	bne.n	8006a32 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfa>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e000      	b.n	8006a34 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfc>
 8006a32:	2300      	movs	r3, #0
 8006a34:	627b      	str	r3, [r7, #36]	; 0x24
               break;
 8006a36:	e014      	b.n	8006a62 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
            case GATHERING_RESPONSE: // gathering response from end of prompt to first \r
               if (response)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d013      	beq.n	8006a66 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12e>
               {
                  if (c == '\r' || responseSize < 2)
 8006a3e:	7dfb      	ldrb	r3, [r7, #23]
 8006a40:	2b0d      	cmp	r3, #13
 8006a42:	d002      	beq.n	8006a4a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x112>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	dc02      	bgt.n	8006a50 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x118>
                  {
                     promptState = LOOKING_FOR_TERMINATOR;
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	61fb      	str	r3, [r7, #28]
                  {
                     *response++ = c;
                     responseSize--;
                  }
               }
               break;
 8006a4e:	e00a      	b.n	8006a66 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12e>
                     *response++ = c;
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	1c5a      	adds	r2, r3, #1
 8006a54:	60ba      	str	r2, [r7, #8]
 8006a56:	7dfa      	ldrb	r2, [r7, #23]
 8006a58:	701a      	strb	r2, [r3, #0]
                     responseSize--;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	607b      	str	r3, [r7, #4]
               break;
 8006a60:	e001      	b.n	8006a66 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12e>
               break;
 8006a62:	bf00      	nop
 8006a64:	e000      	b.n	8006a68 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
               break;
 8006a66:	bf00      	nop
            }
         }

         if (c == terminator[matchTerminatorPos])
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a6c:	4413      	add	r3, r2
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	7dfa      	ldrb	r2, [r7, #23]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d10a      	bne.n	8006a8c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x154>
         {
            ++matchTerminatorPos;
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	623b      	str	r3, [r7, #32]
            if (terminator[matchTerminatorPos] == '\0')
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a80:	4413      	add	r3, r2
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1a0      	bne.n	80069ca <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x92>
               return true;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e00a      	b.n	8006aa2 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x16a>
         }
         else
         {
            matchTerminatorPos = c == terminator[0] ? 1 : 0;
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	7dfa      	ldrb	r2, [r7, #23]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d101      	bne.n	8006a9a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x162>
 8006a96:	2301      	movs	r3, #1
 8006a98:	e000      	b.n	8006a9c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x164>
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	623b      	str	r3, [r7, #32]
      while (filteredavailable() > 0)
 8006a9e:	e794      	b.n	80069ca <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x92>
         }
      } // while (filteredavailable() > 0)
   } // timer loop
   return false;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3728      	adds	r7, #40	; 0x28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	0801e28c 	.word	0x0801e28c
 8006ab0:	0801e104 	.word	0x0801e104

08006ab4 <_ZN10IridiumSBD9cancelledEv>:

bool IridiumSBD::cancelled()
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
   if (this->useSerial)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	7c5b      	ldrb	r3, [r3, #17]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d019      	beq.n	8006af8 <_ZN10IridiumSBD9cancelledEv+0x44>
   {
	   //TODO For some reason when using digitalRead here it didn't work so simply replaced with HAL function
	   //if ((ringPin != -1) && digitalRead(ringPin) == LOW)
	     if ((ringPin != -1) && HAL_GPIO_ReadPin(ringPin_GPIO_Port,ringPin_Pin) == LOW)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ace:	d008      	beq.n	8006ae2 <_ZN10IridiumSBD9cancelledEv+0x2e>
 8006ad0:	2110      	movs	r1, #16
 8006ad2:	480e      	ldr	r0, [pc, #56]	; (8006b0c <_ZN10IridiumSBD9cancelledEv+0x58>)
 8006ad4:	f003 f91e 	bl	8009d14 <HAL_GPIO_ReadPin>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <_ZN10IridiumSBD9cancelledEv+0x2e>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e000      	b.n	8006ae4 <_ZN10IridiumSBD9cancelledEv+0x30>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d007      	beq.n	8006af8 <_ZN10IridiumSBD9cancelledEv+0x44>
	  {
         ringAsserted = true;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
		 diagprint(F("ringPin seen!\r\n"));
 8006af0:	4907      	ldr	r1, [pc, #28]	; (8006b10 <_ZN10IridiumSBD9cancelledEv+0x5c>)
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fcfc 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
	  }
   }

   return !ISBDCallback();
 8006af8:	f7fe ff08 	bl	800590c <_Z12ISBDCallbackv>
 8006afc:	4603      	mov	r3, r0
 8006afe:	f083 0301 	eor.w	r3, r3, #1
 8006b02:	b2db      	uxtb	r3, r3
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	40020800 	.word	0x40020800
 8006b10:	0801e2a4 	.word	0x0801e2a4

08006b14 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_>:

int IridiumSBD::doSBDIX(uint16_t &moCode, uint16_t &moMSN, uint16_t &mtCode, uint16_t &mtMSN, uint16_t &mtLen, uint16_t &mtRemaining)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b096      	sub	sp, #88	; 0x58
 8006b18:	af02      	add	r7, sp, #8
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
 8006b20:	603b      	str	r3, [r7, #0]
   // Returns xx,xxxxx,xx,xxxxx,xx,xxx
   char sbdixResponseBuf[32];
   send(F("AT+SBDIX\r"));
 8006b22:	2301      	movs	r3, #1
 8006b24:	2201      	movs	r2, #1
 8006b26:	492a      	ldr	r1, [pc, #168]	; (8006bd0 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xbc>)
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 fb67 	bl	80071fc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(sbdixResponseBuf, sizeof(sbdixResponseBuf), "+SBDIX: "))
 8006b2e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006b32:	4b28      	ldr	r3, [pc, #160]	; (8006bd4 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xc0>)
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	4b28      	ldr	r3, [pc, #160]	; (8006bd8 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xc4>)
 8006b38:	2220      	movs	r2, #32
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f7ff fefc 	bl	8006938 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006b40:	4603      	mov	r3, r0
 8006b42:	f083 0301 	eor.w	r3, r3, #1
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d009      	beq.n	8006b60 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x4c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f7ff ffb1 	bl	8006ab4 <_ZN10IridiumSBD9cancelledEv>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d001      	beq.n	8006b5c <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x48>
 8006b58:	2304      	movs	r3, #4
 8006b5a:	e035      	b.n	8006bc8 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb4>
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e033      	b.n	8006bc8 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb4>

   uint16_t *values[6] = { &moCode, &moMSN, &mtCode, &mtMSN, &mtLen, &mtRemaining };
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	613b      	str	r3, [r7, #16]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	617b      	str	r3, [r7, #20]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	61bb      	str	r3, [r7, #24]
 8006b6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b6e:	61fb      	str	r3, [r7, #28]
 8006b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b72:	623b      	str	r3, [r7, #32]
 8006b74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b76:	627b      	str	r3, [r7, #36]	; 0x24
   for (int i=0; i<6; ++i)
 8006b78:	2300      	movs	r3, #0
 8006b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b7e:	2b05      	cmp	r3, #5
 8006b80:	dc21      	bgt.n	8006bc6 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb2>
   {
      char *p = strtok(i == 0 ? sbdixResponseBuf : NULL, ", ");
 8006b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d102      	bne.n	8006b8e <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x7a>
 8006b88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b8c:	e000      	b.n	8006b90 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x7c>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	4912      	ldr	r1, [pc, #72]	; (8006bdc <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xc8>)
 8006b92:	4618      	mov	r0, r3
 8006b94:	f012 fcd4 	bl	8019540 <strtok>
 8006b98:	64b8      	str	r0, [r7, #72]	; 0x48
      if (p == NULL)
 8006b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x90>
         return ISBD_PROTOCOL_ERROR;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e011      	b.n	8006bc8 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb4>
      *values[i] = atol(p);
 8006ba4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006ba6:	f010 f8d6 	bl	8016d56 <atol>
 8006baa:	4602      	mov	r2, r0
 8006bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8006bb4:	440b      	add	r3, r1
 8006bb6:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8006bba:	b292      	uxth	r2, r2
 8006bbc:	801a      	strh	r2, [r3, #0]
   for (int i=0; i<6; ++i)
 8006bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bc4:	e7da      	b.n	8006b7c <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x68>
   }
   return ISBD_SUCCESS;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3750      	adds	r7, #80	; 0x50
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	0801e2b4 	.word	0x0801e2b4
 8006bd4:	0801dd58 	.word	0x0801dd58
 8006bd8:	0801e2c0 	.word	0x0801e2c0
 8006bdc:	0801e2cc 	.word	0x0801e2cc

08006be0 <_ZN10IridiumSBD7doSBDRBEPhPj>:

int IridiumSBD::doSBDRB(uint8_t *rxBuffer, size_t *prxBufferSize)
{
 8006be0:	b590      	push	{r4, r7, lr}
 8006be2:	b08b      	sub	sp, #44	; 0x2c
 8006be4:	af02      	add	r7, sp, #8
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
   bool rxOverflow = false;
 8006bec:	2300      	movs	r3, #0
 8006bee:	77fb      	strb	r3, [r7, #31]

   send(F("AT+SBDRB\r"));
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	49a2      	ldr	r1, [pc, #648]	; (8006e80 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a0>)
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f000 fb00 	bl	80071fc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(NULL, 0, NULL, "AT+SBDRB\r")) // waits for its own echo
 8006bfc:	4ba0      	ldr	r3, [pc, #640]	; (8006e80 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a0>)
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	2300      	movs	r3, #0
 8006c02:	2200      	movs	r2, #0
 8006c04:	2100      	movs	r1, #0
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f7ff fe96 	bl	8006938 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	f083 0301 	eor.w	r3, r3, #1
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d009      	beq.n	8006c2c <_ZN10IridiumSBD7doSBDRBEPhPj+0x4c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f7ff ff4b 	bl	8006ab4 <_ZN10IridiumSBD9cancelledEv>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d001      	beq.n	8006c28 <_ZN10IridiumSBD7doSBDRBEPhPj+0x48>
 8006c24:	2304      	movs	r3, #4
 8006c26:	e223      	b.n	8007070 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e221      	b.n	8007070 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   if(!this->useSerial) check9603data(); // Check for any 9603 serial data
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	7c5b      	ldrb	r3, [r3, #17]
 8006c30:	f083 0301 	eor.w	r3, r3, #1
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d002      	beq.n	8006c40 <_ZN10IridiumSBD7doSBDRBEPhPj+0x60>
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f000 fe78 	bl	8007930 <_ZN10IridiumSBD13check9603dataEv>

   // Time to read the binary data: size[2], body[size], checksum[2]
   unsigned long start = millis();
 8006c40:	f002 fb06 	bl	8009250 <HAL_GetTick>
 8006c44:	6138      	str	r0, [r7, #16]
   while (millis() - start < 1000UL * atTimeout)
 8006c46:	f002 fb03 	bl	8009250 <HAL_GetTick>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	1ad2      	subs	r2, r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c54:	4619      	mov	r1, r3
 8006c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c5a:	fb03 f301 	mul.w	r3, r3, r1
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	bf34      	ite	cc
 8006c62:	2301      	movcc	r3, #1
 8006c64:	2300      	movcs	r3, #0
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d03c      	beq.n	8006ce6 <_ZN10IridiumSBD7doSBDRBEPhPj+0x106>
   {
      if(!this->useSerial) check9603data(); // Keep checking for new 9603 serial data
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	7c5b      	ldrb	r3, [r3, #17]
 8006c70:	f083 0301 	eor.w	r3, r3, #1
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <_ZN10IridiumSBD7doSBDRBEPhPj+0xa0>
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f000 fe58 	bl	8007930 <_ZN10IridiumSBD13check9603dataEv>
      if (cancelled())
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f7ff ff17 	bl	8006ab4 <_ZN10IridiumSBD9cancelledEv>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d001      	beq.n	8006c90 <_ZN10IridiumSBD7doSBDRBEPhPj+0xb0>
         return ISBD_CANCELLED;
 8006c8c:	2304      	movs	r3, #4
 8006c8e:	e1ef      	b.n	8007070 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
      if (this->useSerial && (stream->available() >= 2))
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	7c5b      	ldrb	r3, [r3, #17]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00d      	beq.n	8006cb4 <_ZN10IridiumSBD7doSBDRBEPhPj+0xd4>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	689a      	ldr	r2, [r3, #8]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3308      	adds	r3, #8
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4610      	mov	r0, r2
 8006ca8:	4798      	blx	r3
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	dd01      	ble.n	8006cb4 <_ZN10IridiumSBD7doSBDRBEPhPj+0xd4>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e000      	b.n	8006cb6 <_ZN10IridiumSBD7doSBDRBEPhPj+0xd6>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d112      	bne.n	8006ce0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x100>
         break;
      if ((!this->useSerial) && (i2cSerAvailable() >= 2))
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	7c5b      	ldrb	r3, [r3, #17]
 8006cbe:	f083 0301 	eor.w	r3, r3, #1
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d007      	beq.n	8006cd8 <_ZN10IridiumSBD7doSBDRBEPhPj+0xf8>
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 ff61 	bl	8007b90 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	dd01      	ble.n	8006cd8 <_ZN10IridiumSBD7doSBDRBEPhPj+0xf8>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e000      	b.n	8006cda <_ZN10IridiumSBD7doSBDRBEPhPj+0xfa>
 8006cd8:	2300      	movs	r3, #0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d102      	bne.n	8006ce4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x104>
   while (millis() - start < 1000UL * atTimeout)
 8006cde:	e7b2      	b.n	8006c46 <_ZN10IridiumSBD7doSBDRBEPhPj+0x66>
         break;
 8006ce0:	bf00      	nop
 8006ce2:	e000      	b.n	8006ce6 <_ZN10IridiumSBD7doSBDRBEPhPj+0x106>
         break;
 8006ce4:	bf00      	nop
   }

   if (this->useSerial && (stream->available() < 2))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	7c5b      	ldrb	r3, [r3, #17]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00d      	beq.n	8006d0a <_ZN10IridiumSBD7doSBDRBEPhPj+0x12a>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	689a      	ldr	r2, [r3, #8]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	3308      	adds	r3, #8
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4610      	mov	r0, r2
 8006cfe:	4798      	blx	r3
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	dc01      	bgt.n	8006d0a <_ZN10IridiumSBD7doSBDRBEPhPj+0x12a>
 8006d06:	2301      	movs	r3, #1
 8006d08:	e000      	b.n	8006d0c <_ZN10IridiumSBD7doSBDRBEPhPj+0x12c>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d001      	beq.n	8006d14 <_ZN10IridiumSBD7doSBDRBEPhPj+0x134>
      return ISBD_SENDRECEIVE_TIMEOUT;
 8006d10:	2307      	movs	r3, #7
 8006d12:	e1ad      	b.n	8007070 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
   if ((!this->useSerial) && (i2cSerAvailable() < 2))
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	7c5b      	ldrb	r3, [r3, #17]
 8006d18:	f083 0301 	eor.w	r3, r3, #1
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d007      	beq.n	8006d32 <_ZN10IridiumSBD7doSBDRBEPhPj+0x152>
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f000 ff34 	bl	8007b90 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	dc01      	bgt.n	8006d32 <_ZN10IridiumSBD7doSBDRBEPhPj+0x152>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e000      	b.n	8006d34 <_ZN10IridiumSBD7doSBDRBEPhPj+0x154>
 8006d32:	2300      	movs	r3, #0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d001      	beq.n	8006d3c <_ZN10IridiumSBD7doSBDRBEPhPj+0x15c>
      return ISBD_SENDRECEIVE_TIMEOUT;
 8006d38:	2307      	movs	r3, #7
 8006d3a:	e199      	b.n	8007070 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   uint16_t size;
   if (this->useSerial)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	7c5b      	ldrb	r3, [r3, #17]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d01a      	beq.n	8006d7a <_ZN10IridiumSBD7doSBDRBEPhPj+0x19a>
   {
      size = 256 * stream->read() + stream->read();
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	689a      	ldr	r2, [r3, #8]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	330c      	adds	r3, #12
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4610      	mov	r0, r2
 8006d54:	4798      	blx	r3
 8006d56:	4603      	mov	r3, r0
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	021b      	lsls	r3, r3, #8
 8006d5c:	b29c      	uxth	r4, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	689a      	ldr	r2, [r3, #8]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	330c      	adds	r3, #12
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	4798      	blx	r3
 8006d70:	4603      	mov	r3, r0
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	4423      	add	r3, r4
 8006d76:	83bb      	strh	r3, [r7, #28]
 8006d78:	e00d      	b.n	8006d96 <_ZN10IridiumSBD7doSBDRBEPhPj+0x1b6>
   }
   else
   {
      size = 256 * i2cSerRead() + i2cSerRead();
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f000 ff20 	bl	8007bc0 <_ZN10IridiumSBD10i2cSerReadEv>
 8006d80:	4603      	mov	r3, r0
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	021b      	lsls	r3, r3, #8
 8006d86:	b29c      	uxth	r4, r3
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f000 ff19 	bl	8007bc0 <_ZN10IridiumSBD10i2cSerReadEv>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	4423      	add	r3, r4
 8006d94:	83bb      	strh	r3, [r7, #28]
   }
   consoleprint(F("[Binary size:"));
 8006d96:	493b      	ldr	r1, [pc, #236]	; (8006e84 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a4>)
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f000 fc01 	bl	80075a0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(size);
 8006d9e:	8bbb      	ldrh	r3, [r7, #28]
 8006da0:	4619      	mov	r1, r3
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 fc34 	bl	8007610 <_ZN10IridiumSBD12consoleprintEt>
   consoleprint(F("]"));
 8006da8:	4937      	ldr	r1, [pc, #220]	; (8006e88 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a8>)
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f000 fbf8 	bl	80075a0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

   for (uint16_t bytesRead = 0; bytesRead < size;)
 8006db0:	2300      	movs	r3, #0
 8006db2:	837b      	strh	r3, [r7, #26]
 8006db4:	8b7a      	ldrh	r2, [r7, #26]
 8006db6:	8bbb      	ldrh	r3, [r7, #28]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d27f      	bcs.n	8006ebc <_ZN10IridiumSBD7doSBDRBEPhPj+0x2dc>
   {
      if (cancelled())
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f7ff fe79 	bl	8006ab4 <_ZN10IridiumSBD9cancelledEv>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <_ZN10IridiumSBD7doSBDRBEPhPj+0x1ec>
         return ISBD_CANCELLED;
 8006dc8:	2304      	movs	r3, #4
 8006dca:	e151      	b.n	8007070 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

      if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	7c5b      	ldrb	r3, [r3, #17]
 8006dd0:	f083 0301 	eor.w	r3, r3, #1
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d002      	beq.n	8006de0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x200>
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f000 fda8 	bl	8007930 <_ZN10IridiumSBD13check9603dataEv>

      if ((this->useSerial && (stream->available())) || ((!this->useSerial) && i2cSerAvailable()))
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	7c5b      	ldrb	r3, [r3, #17]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00b      	beq.n	8006e00 <_ZN10IridiumSBD7doSBDRBEPhPj+0x220>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	689a      	ldr	r2, [r3, #8]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	3308      	adds	r3, #8
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4610      	mov	r0, r2
 8006df8:	4798      	blx	r3
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10c      	bne.n	8006e1a <_ZN10IridiumSBD7doSBDRBEPhPj+0x23a>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	7c5b      	ldrb	r3, [r3, #17]
 8006e04:	f083 0301 	eor.w	r3, r3, #1
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d007      	beq.n	8006e1e <_ZN10IridiumSBD7doSBDRBEPhPj+0x23e>
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f000 febe 	bl	8007b90 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d001      	beq.n	8006e1e <_ZN10IridiumSBD7doSBDRBEPhPj+0x23e>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e000      	b.n	8006e20 <_ZN10IridiumSBD7doSBDRBEPhPj+0x240>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d035      	beq.n	8006e90 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
      {
         uint8_t c;
         if (this->useSerial)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	7c5b      	ldrb	r3, [r3, #17]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00b      	beq.n	8006e44 <_ZN10IridiumSBD7doSBDRBEPhPj+0x264>
         {
            c = stream->read();
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	330c      	adds	r3, #12
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4610      	mov	r0, r2
 8006e3c:	4798      	blx	r3
 8006e3e:	4603      	mov	r3, r0
 8006e40:	767b      	strb	r3, [r7, #25]
 8006e42:	e004      	b.n	8006e4e <_ZN10IridiumSBD7doSBDRBEPhPj+0x26e>
         }
         else
         {
            c = i2cSerRead();
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 febb 	bl	8007bc0 <_ZN10IridiumSBD10i2cSerReadEv>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	767b      	strb	r3, [r7, #25]
         }
         bytesRead++;
 8006e4e:	8b7b      	ldrh	r3, [r7, #26]
 8006e50:	3301      	adds	r3, #1
 8006e52:	837b      	strh	r3, [r7, #26]
         if (rxBuffer && prxBufferSize)
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d01a      	beq.n	8006e90 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d017      	beq.n	8006e90 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
         {
            if (*prxBufferSize > 0)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d011      	beq.n	8006e8c <_ZN10IridiumSBD7doSBDRBEPhPj+0x2ac>
            {
               *rxBuffer++ = c;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	60ba      	str	r2, [r7, #8]
 8006e6e:	7e7a      	ldrb	r2, [r7, #25]
 8006e70:	701a      	strb	r2, [r3, #0]
               (*prxBufferSize)--;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	1e5a      	subs	r2, r3, #1
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	601a      	str	r2, [r3, #0]
 8006e7c:	e008      	b.n	8006e90 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
 8006e7e:	bf00      	nop
 8006e80:	0801e2d0 	.word	0x0801e2d0
 8006e84:	0801e2dc 	.word	0x0801e2dc
 8006e88:	0801e2ec 	.word	0x0801e2ec
            }
            else
            {
               rxOverflow = true;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	77fb      	strb	r3, [r7, #31]
            }
         }
      }

      if (millis() - start >= 1000UL * atTimeout)
 8006e90:	f002 f9de 	bl	8009250 <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	1ad2      	subs	r2, r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ea4:	fb03 f301 	mul.w	r3, r3, r1
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	bf2c      	ite	cs
 8006eac:	2301      	movcs	r3, #1
 8006eae:	2300      	movcc	r3, #0
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f43f af7e 	beq.w	8006db4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x1d4>
         return ISBD_SENDRECEIVE_TIMEOUT;
 8006eb8:	2307      	movs	r3, #7
 8006eba:	e0d9      	b.n	8007070 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
   }

   while (millis() - start < 1000UL * atTimeout)
 8006ebc:	f002 f9c8 	bl	8009250 <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	1ad2      	subs	r2, r2, r3
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eca:	4619      	mov	r1, r3
 8006ecc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ed0:	fb03 f301 	mul.w	r3, r3, r1
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	bf34      	ite	cc
 8006ed8:	2301      	movcc	r3, #1
 8006eda:	2300      	movcs	r3, #0
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d03c      	beq.n	8006f5c <_ZN10IridiumSBD7doSBDRBEPhPj+0x37c>
   {
      if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	7c5b      	ldrb	r3, [r3, #17]
 8006ee6:	f083 0301 	eor.w	r3, r3, #1
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d002      	beq.n	8006ef6 <_ZN10IridiumSBD7doSBDRBEPhPj+0x316>
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 fd1d 	bl	8007930 <_ZN10IridiumSBD13check9603dataEv>
      if (cancelled())
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f7ff fddc 	bl	8006ab4 <_ZN10IridiumSBD9cancelledEv>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <_ZN10IridiumSBD7doSBDRBEPhPj+0x326>
         return ISBD_CANCELLED;
 8006f02:	2304      	movs	r3, #4
 8006f04:	e0b4      	b.n	8007070 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
      if (this->useSerial && (stream->available() >= 2))
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	7c5b      	ldrb	r3, [r3, #17]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00d      	beq.n	8006f2a <_ZN10IridiumSBD7doSBDRBEPhPj+0x34a>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	689a      	ldr	r2, [r3, #8]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3308      	adds	r3, #8
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	4798      	blx	r3
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	dd01      	ble.n	8006f2a <_ZN10IridiumSBD7doSBDRBEPhPj+0x34a>
 8006f26:	2301      	movs	r3, #1
 8006f28:	e000      	b.n	8006f2c <_ZN10IridiumSBD7doSBDRBEPhPj+0x34c>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d112      	bne.n	8006f56 <_ZN10IridiumSBD7doSBDRBEPhPj+0x376>
         break;
      if ((!this->useSerial) && (i2cSerAvailable() >= 2))
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	7c5b      	ldrb	r3, [r3, #17]
 8006f34:	f083 0301 	eor.w	r3, r3, #1
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d007      	beq.n	8006f4e <_ZN10IridiumSBD7doSBDRBEPhPj+0x36e>
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f000 fe26 	bl	8007b90 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	dd01      	ble.n	8006f4e <_ZN10IridiumSBD7doSBDRBEPhPj+0x36e>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e000      	b.n	8006f50 <_ZN10IridiumSBD7doSBDRBEPhPj+0x370>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d102      	bne.n	8006f5a <_ZN10IridiumSBD7doSBDRBEPhPj+0x37a>
   while (millis() - start < 1000UL * atTimeout)
 8006f54:	e7b2      	b.n	8006ebc <_ZN10IridiumSBD7doSBDRBEPhPj+0x2dc>
         break;
 8006f56:	bf00      	nop
 8006f58:	e000      	b.n	8006f5c <_ZN10IridiumSBD7doSBDRBEPhPj+0x37c>
         break;
 8006f5a:	bf00      	nop
   }

   if (this->useSerial && (stream->available() < 2))
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	7c5b      	ldrb	r3, [r3, #17]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00d      	beq.n	8006f80 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3a0>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	689a      	ldr	r2, [r3, #8]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	3308      	adds	r3, #8
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4610      	mov	r0, r2
 8006f74:	4798      	blx	r3
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	dc01      	bgt.n	8006f80 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3a0>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e000      	b.n	8006f82 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3a2>
 8006f80:	2300      	movs	r3, #0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <_ZN10IridiumSBD7doSBDRBEPhPj+0x3aa>
      return ISBD_SENDRECEIVE_TIMEOUT;
 8006f86:	2307      	movs	r3, #7
 8006f88:	e072      	b.n	8007070 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
   if ((!this->useSerial) && (i2cSerAvailable() < 2))
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	7c5b      	ldrb	r3, [r3, #17]
 8006f8e:	f083 0301 	eor.w	r3, r3, #1
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d007      	beq.n	8006fa8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3c8>
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f000 fdf9 	bl	8007b90 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	dc01      	bgt.n	8006fa8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3c8>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e000      	b.n	8006faa <_ZN10IridiumSBD7doSBDRBEPhPj+0x3ca>
 8006fa8:	2300      	movs	r3, #0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d001      	beq.n	8006fb2 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3d2>
      return ISBD_SENDRECEIVE_TIMEOUT;
 8006fae:	2307      	movs	r3, #7
 8006fb0:	e05e      	b.n	8007070 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   uint16_t checksum;
   if (this->useSerial)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	7c5b      	ldrb	r3, [r3, #17]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d01a      	beq.n	8006ff0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x410>
   {
      checksum = 256 * stream->read() + stream->read();
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	689a      	ldr	r2, [r3, #8]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	330c      	adds	r3, #12
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4610      	mov	r0, r2
 8006fca:	4798      	blx	r3
 8006fcc:	4603      	mov	r3, r0
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	021b      	lsls	r3, r3, #8
 8006fd2:	b29c      	uxth	r4, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	689a      	ldr	r2, [r3, #8]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	330c      	adds	r3, #12
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4610      	mov	r0, r2
 8006fe4:	4798      	blx	r3
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	4423      	add	r3, r4
 8006fec:	82fb      	strh	r3, [r7, #22]
 8006fee:	e00d      	b.n	800700c <_ZN10IridiumSBD7doSBDRBEPhPj+0x42c>
   }
   else
   {
      checksum = 256 * i2cSerRead() + i2cSerRead();
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 fde5 	bl	8007bc0 <_ZN10IridiumSBD10i2cSerReadEv>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	021b      	lsls	r3, r3, #8
 8006ffc:	b29c      	uxth	r4, r3
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 fdde 	bl	8007bc0 <_ZN10IridiumSBD10i2cSerReadEv>
 8007004:	4603      	mov	r3, r0
 8007006:	b29b      	uxth	r3, r3
 8007008:	4423      	add	r3, r4
 800700a:	82fb      	strh	r3, [r7, #22]
   }
   consoleprint(F("[csum:"));
 800700c:	491a      	ldr	r1, [pc, #104]	; (8007078 <_ZN10IridiumSBD7doSBDRBEPhPj+0x498>)
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f000 fac6 	bl	80075a0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(checksum);
 8007014:	8afb      	ldrh	r3, [r7, #22]
 8007016:	4619      	mov	r1, r3
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 faf9 	bl	8007610 <_ZN10IridiumSBD12consoleprintEt>
   consoleprint(F("]"));
 800701e:	4917      	ldr	r1, [pc, #92]	; (800707c <_ZN10IridiumSBD7doSBDRBEPhPj+0x49c>)
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 fabd 	bl	80075a0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

   // Return actual size of returned buffer
   if (prxBufferSize)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d002      	beq.n	8007032 <_ZN10IridiumSBD7doSBDRBEPhPj+0x452>
      *prxBufferSize = (size_t)size;
 800702c:	8bba      	ldrh	r2, [r7, #28]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	601a      	str	r2, [r3, #0]

   // Wait for final OK
   if (!waitForATResponse())
 8007032:	4b13      	ldr	r3, [pc, #76]	; (8007080 <_ZN10IridiumSBD7doSBDRBEPhPj+0x4a0>)
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	2300      	movs	r3, #0
 8007038:	2200      	movs	r2, #0
 800703a:	2100      	movs	r1, #0
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f7ff fc7b 	bl	8006938 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007042:	4603      	mov	r3, r0
 8007044:	f083 0301 	eor.w	r3, r3, #1
 8007048:	b2db      	uxtb	r3, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	d009      	beq.n	8007062 <_ZN10IridiumSBD7doSBDRBEPhPj+0x482>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f7ff fd30 	bl	8006ab4 <_ZN10IridiumSBD9cancelledEv>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <_ZN10IridiumSBD7doSBDRBEPhPj+0x47e>
 800705a:	2304      	movs	r3, #4
 800705c:	e008      	b.n	8007070 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
 800705e:	2303      	movs	r3, #3
 8007060:	e006      	b.n	8007070 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
 8007062:	7ffb      	ldrb	r3, [r7, #31]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <_ZN10IridiumSBD7doSBDRBEPhPj+0x48c>
 8007068:	2308      	movs	r3, #8
 800706a:	e000      	b.n	800706e <_ZN10IridiumSBD7doSBDRBEPhPj+0x48e>
 800706c:	2300      	movs	r3, #0
 800706e:	bf00      	nop
}
 8007070:	4618      	mov	r0, r3
 8007072:	3724      	adds	r7, #36	; 0x24
 8007074:	46bd      	mov	sp, r7
 8007076:	bd90      	pop	{r4, r7, pc}
 8007078:	0801e2f0 	.word	0x0801e2f0
 800707c:	0801e2ec 	.word	0x0801e2ec
 8007080:	0801dd58 	.word	0x0801dd58

08007084 <_ZN10IridiumSBD5powerEb>:

void IridiumSBD::power(bool on)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	460b      	mov	r3, r1
 800708e:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 8007090:	78fb      	ldrb	r3, [r7, #3]
 8007092:	f083 0301 	eor.w	r3, r3, #1
 8007096:	b2da      	uxtb	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

   if (this->useSerial)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	7c5b      	ldrb	r3, [r3, #17]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d010      	beq.n	80070c8 <_ZN10IridiumSBD5powerEb+0x44>
   {
      if (this->sleepPin == -1)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ae:	d04a      	beq.n	8007146 <_ZN10IridiumSBD5powerEb+0xc2>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d106      	bne.n	80070c8 <_ZN10IridiumSBD5powerEb+0x44>
          {
             configureSleepPin();
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f84c 	bl	8007158 <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          }
      }
   }

   if (on)
 80070c8:	78fb      	ldrb	r3, [r7, #3]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d017      	beq.n	80070fe <_ZN10IridiumSBD5powerEb+0x7a>
   {
      diagprint(F("Powering on modem...\r\n"));
 80070ce:	4920      	ldr	r1, [pc, #128]	; (8007150 <_ZN10IridiumSBD5powerEb+0xcc>)
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fa0d 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	7c5b      	ldrb	r3, [r3, #17]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d004      	beq.n	80070e8 <_ZN10IridiumSBD5powerEb+0x64>
      {
         setSleepPin(HIGH); // HIGH = awake
 80070de:	2101      	movs	r1, #1
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f847 	bl	8007174 <_ZN10IridiumSBD11setSleepPinEh>
 80070e6:	e003      	b.n	80070f0 <_ZN10IridiumSBD5powerEb+0x6c>
      }
      else
      {
         enable9603(true);
 80070e8:	2101      	movs	r1, #1
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7fe fe38 	bl	8005d60 <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 80070f0:	f002 f8ae 	bl	8009250 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80070fc:	e024      	b.n	8007148 <_ZN10IridiumSBD5powerEb+0xc4>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 80070fe:	f002 f8a7 	bl	8009250 <HAL_GetTick>
 8007102:	4602      	mov	r2, r0
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007114:	d205      	bcs.n	8007122 <_ZN10IridiumSBD5powerEb+0x9e>
         //delay(2000UL - elapsed); TODO
    	  HAL_Delay(2000UL - elapsed);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 800711c:	4618      	mov	r0, r3
 800711e:	f002 f8a3 	bl	8009268 <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 8007122:	490c      	ldr	r1, [pc, #48]	; (8007154 <_ZN10IridiumSBD5powerEb+0xd0>)
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f9e3 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	7c5b      	ldrb	r3, [r3, #17]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d004      	beq.n	800713c <_ZN10IridiumSBD5powerEb+0xb8>
      {
         setSleepPin(LOW); // LOW = asleep
 8007132:	2100      	movs	r1, #0
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f81d 	bl	8007174 <_ZN10IridiumSBD11setSleepPinEh>
 800713a:	e005      	b.n	8007148 <_ZN10IridiumSBD5powerEb+0xc4>
      }
      else
      {
         enable9603(false);
 800713c:	2100      	movs	r1, #0
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7fe fe0e 	bl	8005d60 <_ZN10IridiumSBD10enable9603Eb>
 8007144:	e000      	b.n	8007148 <_ZN10IridiumSBD5powerEb+0xc4>
         return;
 8007146:	bf00      	nop
      }
   }
}
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	0801e2f8 	.word	0x0801e2f8
 8007154:	0801e310 	.word	0x0801e310

08007158 <_ZN10IridiumSBD17configureSleepPinEv>:

void IridiumSBD::configureSleepPin()
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
	//pinMode(sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
   //pinMode(sleepPin, OUTPUT_PP); // Make the sleep pin an output
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 8007160:	4903      	ldr	r1, [pc, #12]	; (8007170 <_ZN10IridiumSBD17configureSleepPinEv+0x18>)
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f9c4 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007168:	bf00      	nop
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	0801e328 	.word	0x0801e328

08007174 <_ZN10IridiumSBD11setSleepPinEh>:

void IridiumSBD::setSleepPin(uint8_t enable)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	460b      	mov	r3, r1
 800717e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 8007180:	2201      	movs	r2, #1
 8007182:	2108      	movs	r1, #8
 8007184:	480b      	ldr	r0, [pc, #44]	; (80071b4 <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 8007186:	f002 fddd 	bl	8009d44 <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 800718a:	490b      	ldr	r1, [pc, #44]	; (80071b8 <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f9af 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 8007192:	78fb      	ldrb	r3, [r7, #3]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d104      	bne.n	80071a2 <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 8007198:	4908      	ldr	r1, [pc, #32]	; (80071bc <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f9a8 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 80071a0:	e003      	b.n	80071aa <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 80071a2:	4907      	ldr	r1, [pc, #28]	; (80071c0 <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f9a3 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80071aa:	bf00      	nop
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	40020800 	.word	0x40020800
 80071b8:	0801e354 	.word	0x0801e354
 80071bc:	0801e370 	.word	0x0801e370
 80071c0:	0801e378 	.word	0x0801e378

080071c4 <_ZN10IridiumSBD15beginSerialPortEv>:

void IridiumSBD::beginSerialPort()
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
 80071cc:	4903      	ldr	r1, [pc, #12]	; (80071dc <_ZN10IridiumSBD15beginSerialPortEv+0x18>)
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f98e 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80071d4:	bf00      	nop
 80071d6:	3708      	adds	r7, #8
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	0801e380 	.word	0x0801e380

080071e0 <_ZN10IridiumSBD13endSerialPortEv>:

void IridiumSBD::endSerialPort()
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 80071e8:	4903      	ldr	r1, [pc, #12]	; (80071f8 <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f980 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80071f0:	bf00      	nop
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	0801e3a0 	.word	0x0801e3a0

080071fc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>:

void IridiumSBD::send(FlashString str, bool beginLine, bool endLine)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	4611      	mov	r1, r2
 8007208:	461a      	mov	r2, r3
 800720a:	460b      	mov	r3, r1
 800720c:	71fb      	strb	r3, [r7, #7]
 800720e:	4613      	mov	r3, r2
 8007210:	71bb      	strb	r3, [r7, #6]
   if (beginLine)
 8007212:	79fb      	ldrb	r3, [r7, #7]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d003      	beq.n	8007220 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x24>
      consoleprint(F(">> "));
 8007218:	4921      	ldr	r1, [pc, #132]	; (80072a0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa4>)
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f000 f9c0 	bl	80075a0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 8007220:	68b9      	ldr	r1, [r7, #8]
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f000 f9bc 	bl	80075a0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (endLine)
 8007228:	79bb      	ldrb	r3, [r7, #6]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d003      	beq.n	8007236 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x3a>
      consoleprint(F("\r\n"));
 800722e:	491d      	ldr	r1, [pc, #116]	; (80072a4 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa8>)
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f000 f9b5 	bl	80075a0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	7c5b      	ldrb	r3, [r3, #17]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d006      	beq.n	800724c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x50>
   {
      stream->print(str);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	68b9      	ldr	r1, [r7, #8]
 8007244:	4618      	mov	r0, r3
 8007246:	f001 f9e5 	bl	8008614 <_ZN5Print5printEPK19__FlashStringHelper>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 800724a:	e024      	b.n	8007296 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9a>
      wireport->beginTransmission((uint8_t)deviceaddress);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	68da      	ldr	r2, [r3, #12]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	7c1b      	ldrb	r3, [r3, #16]
 8007254:	4619      	mov	r1, r3
 8007256:	4610      	mov	r0, r2
 8007258:	f001 fb50 	bl	80088fc <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	21ff      	movs	r1, #255	; 0xff
 8007262:	4618      	mov	r0, r3
 8007264:	f7fe fb40 	bl	80058e8 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	68b9      	ldr	r1, [r7, #8]
 800726e:	4618      	mov	r0, r3
 8007270:	f001 f9d0 	bl	8008614 <_ZN5Print5printEPK19__FlashStringHelper>
      if (wireport->endTransmission() != 0) //Release bus
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	4618      	mov	r0, r3
 800727a:	f001 fb89 	bl	8008990 <_ZN7TwoWire15endTransmissionEv>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	bf14      	ite	ne
 8007284:	2301      	movne	r3, #1
 8007286:	2300      	moveq	r3, #0
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b00      	cmp	r3, #0
 800728c:	d003      	beq.n	8007296 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9a>
         diagprint(F("I2C write was not successful!\r\n"));
 800728e:	4906      	ldr	r1, [pc, #24]	; (80072a8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xac>)
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f000 f92d 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007296:	bf00      	nop
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	0801e3bc 	.word	0x0801e3bc
 80072a4:	0801e104 	.word	0x0801e104
 80072a8:	0801e184 	.word	0x0801e184

080072ac <_ZN10IridiumSBD4sendEPKc>:

void IridiumSBD::send(const char *str)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 80072b6:	4920      	ldr	r1, [pc, #128]	; (8007338 <_ZN10IridiumSBD4sendEPKc+0x8c>)
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f971 	bl	80075a0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f98b 	bl	80075dc <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 80072c6:	491d      	ldr	r1, [pc, #116]	; (800733c <_ZN10IridiumSBD4sendEPKc+0x90>)
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f969 	bl	80075a0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	7c5b      	ldrb	r3, [r3, #17]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d006      	beq.n	80072e4 <_ZN10IridiumSBD4sendEPKc+0x38>
   {
      stream->print(str);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	4618      	mov	r0, r3
 80072de:	f001 f9a7 	bl	8008630 <_ZN5Print5printEPKc>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 80072e2:	e024      	b.n	800732e <_ZN10IridiumSBD4sendEPKc+0x82>
      wireport->beginTransmission((uint8_t)deviceaddress);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	68da      	ldr	r2, [r3, #12]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	7c1b      	ldrb	r3, [r3, #16]
 80072ec:	4619      	mov	r1, r3
 80072ee:	4610      	mov	r0, r2
 80072f0:	f001 fb04 	bl	80088fc <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	21ff      	movs	r1, #255	; 0xff
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fe faf4 	bl	80058e8 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	4618      	mov	r0, r3
 8007308:	f001 f992 	bl	8008630 <_ZN5Print5printEPKc>
      if (wireport->endTransmission() != 0) //Release bus
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	4618      	mov	r0, r3
 8007312:	f001 fb3d 	bl	8008990 <_ZN7TwoWire15endTransmissionEv>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	bf14      	ite	ne
 800731c:	2301      	movne	r3, #1
 800731e:	2300      	moveq	r3, #0
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <_ZN10IridiumSBD4sendEPKc+0x82>
         diagprint(F("I2C write was not successful!\r\n"));
 8007326:	4906      	ldr	r1, [pc, #24]	; (8007340 <_ZN10IridiumSBD4sendEPKc+0x94>)
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f8e1 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 800732e:	bf00      	nop
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	0801e3bc 	.word	0x0801e3bc
 800733c:	0801e104 	.word	0x0801e104
 8007340:	0801e184 	.word	0x0801e184

08007344 <_ZN10IridiumSBD8sendlongEPKc>:

void IridiumSBD::sendlong(const char *str)
// Send a long string that might need to be broken up for the I2C port
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 800734e:	4942      	ldr	r1, [pc, #264]	; (8007458 <_ZN10IridiumSBD8sendlongEPKc+0x114>)
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f925 	bl	80075a0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   this->print((char*) str);//TODO doesn't print otherwise
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6838      	ldr	r0, [r7, #0]
 800735c:	4798      	blx	r3
   consoleprint(str);
 800735e:	6839      	ldr	r1, [r7, #0]
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f93b 	bl	80075dc <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 8007366:	493d      	ldr	r1, [pc, #244]	; (800745c <_ZN10IridiumSBD8sendlongEPKc+0x118>)
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f919 	bl	80075a0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

   if (this->useSerial)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	7c5b      	ldrb	r3, [r3, #17]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d006      	beq.n	8007384 <_ZN10IridiumSBD8sendlongEPKc+0x40>
   {
      stream->print(str); // If we are using serial then send it and don't worry about the long length
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	6839      	ldr	r1, [r7, #0]
 800737c:	4618      	mov	r0, r3
 800737e:	f001 f957 	bl	8008630 <_ZN5Print5printEPKc>
         wireport->write(str[i]);
      }
      if (wireport->endTransmission() != 0) //Send data and release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8007382:	e065      	b.n	8007450 <_ZN10IridiumSBD8sendlongEPKc+0x10c>
      size_t bytes_to_send = strlen(str); // Send this many bytes in total
 8007384:	6838      	ldr	r0, [r7, #0]
 8007386:	f7f8 ff3d 	bl	8000204 <strlen>
 800738a:	6178      	str	r0, [r7, #20]
      size_t txDataSize = bytes_to_send;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	60fb      	str	r3, [r7, #12]
      size_t i=0;
 8007390:	2300      	movs	r3, #0
 8007392:	613b      	str	r3, [r7, #16]
      while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 1)) // If there are too many bytes to send all in one go
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	2b1f      	cmp	r3, #31
 8007398:	d92a      	bls.n	80073f0 <_ZN10IridiumSBD8sendlongEPKc+0xac>
         nexti = i + (TINY_I2C_BUFFER_LENGTH - 1);
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	331f      	adds	r3, #31
 800739e:	60bb      	str	r3, [r7, #8]
         wireport->beginTransmission((uint8_t)deviceaddress);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68da      	ldr	r2, [r3, #12]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	7c1b      	ldrb	r3, [r3, #16]
 80073a8:	4619      	mov	r1, r3
 80073aa:	4610      	mov	r0, r2
 80073ac:	f001 faa6 	bl	80088fc <_ZN7TwoWire17beginTransmissionEh>
         wireport->write(DATA_REG); // Point to the 'serial register'
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	21ff      	movs	r1, #255	; 0xff
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fe fa96 	bl	80058e8 <_ZN7TwoWire5writeEi>
         for (; i<nexti; ++i)
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d20c      	bcs.n	80073de <_ZN10IridiumSBD8sendlongEPKc+0x9a>
            wireport->write(str[i]); // Write each byte
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	68d8      	ldr	r0, [r3, #12]
 80073c8:	683a      	ldr	r2, [r7, #0]
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	4413      	add	r3, r2
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	4619      	mov	r1, r3
 80073d2:	f7fe fa89 	bl	80058e8 <_ZN7TwoWire5writeEi>
         for (; i<nexti; ++i)
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	3301      	adds	r3, #1
 80073da:	613b      	str	r3, [r7, #16]
 80073dc:	e7ee      	b.n	80073bc <_ZN10IridiumSBD8sendlongEPKc+0x78>
         bytes_to_send = bytes_to_send - (TINY_I2C_BUFFER_LENGTH - 1); // Decrease the number of bytes still to send
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	3b1f      	subs	r3, #31
 80073e2:	617b      	str	r3, [r7, #20]
         wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	4618      	mov	r0, r3
 80073ea:	f001 fad1 	bl	8008990 <_ZN7TwoWire15endTransmissionEv>
      while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 1)) // If there are too many bytes to send all in one go
 80073ee:	e7d1      	b.n	8007394 <_ZN10IridiumSBD8sendlongEPKc+0x50>
      wireport->beginTransmission((uint8_t)deviceaddress);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68da      	ldr	r2, [r3, #12]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	7c1b      	ldrb	r3, [r3, #16]
 80073f8:	4619      	mov	r1, r3
 80073fa:	4610      	mov	r0, r2
 80073fc:	f001 fa7e 	bl	80088fc <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	21ff      	movs	r1, #255	; 0xff
 8007406:	4618      	mov	r0, r3
 8007408:	f7fe fa6e 	bl	80058e8 <_ZN7TwoWire5writeEi>
      for (; i<txDataSize; ++i)
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	429a      	cmp	r2, r3
 8007412:	d20c      	bcs.n	800742e <_ZN10IridiumSBD8sendlongEPKc+0xea>
         wireport->write(str[i]);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	68d8      	ldr	r0, [r3, #12]
 8007418:	683a      	ldr	r2, [r7, #0]
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	4413      	add	r3, r2
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	4619      	mov	r1, r3
 8007422:	f7fe fa61 	bl	80058e8 <_ZN7TwoWire5writeEi>
      for (; i<txDataSize; ++i)
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	3301      	adds	r3, #1
 800742a:	613b      	str	r3, [r7, #16]
 800742c:	e7ee      	b.n	800740c <_ZN10IridiumSBD8sendlongEPKc+0xc8>
      if (wireport->endTransmission() != 0) //Send data and release bus
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	4618      	mov	r0, r3
 8007434:	f001 faac 	bl	8008990 <_ZN7TwoWire15endTransmissionEv>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	bf14      	ite	ne
 800743e:	2301      	movne	r3, #1
 8007440:	2300      	moveq	r3, #0
 8007442:	b2db      	uxtb	r3, r3
 8007444:	2b00      	cmp	r3, #0
 8007446:	d003      	beq.n	8007450 <_ZN10IridiumSBD8sendlongEPKc+0x10c>
         diagprint(F("I2C write was not successful!\r\n"));
 8007448:	4905      	ldr	r1, [pc, #20]	; (8007460 <_ZN10IridiumSBD8sendlongEPKc+0x11c>)
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f850 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007450:	bf00      	nop
 8007452:	3718      	adds	r7, #24
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	0801e3bc 	.word	0x0801e3bc
 800745c:	0801e104 	.word	0x0801e104
 8007460:	0801e184 	.word	0x0801e184

08007464 <_ZN10IridiumSBD4sendEt>:

void IridiumSBD::send(uint16_t n)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	460b      	mov	r3, r1
 800746e:	807b      	strh	r3, [r7, #2]
   consoleprint(n);
 8007470:	887b      	ldrh	r3, [r7, #2]
 8007472:	4619      	mov	r1, r3
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f8cb 	bl	8007610 <_ZN10IridiumSBD12consoleprintEt>
   if (this->useSerial)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	7c5b      	ldrb	r3, [r3, #17]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d008      	beq.n	8007494 <_ZN10IridiumSBD4sendEt+0x30>
   {
      stream->print(n);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	4618      	mov	r0, r3
 8007488:	887b      	ldrh	r3, [r7, #2]
 800748a:	220a      	movs	r2, #10
 800748c:	4619      	mov	r1, r3
 800748e:	f001 f8ef 	bl	8008670 <_ZN5Print5printEii>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(n);
      if (wireport->endTransmission() != 0) //Send data and release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8007492:	e026      	b.n	80074e2 <_ZN10IridiumSBD4sendEt+0x7e>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	7c1b      	ldrb	r3, [r3, #16]
 800749c:	4619      	mov	r1, r3
 800749e:	4610      	mov	r0, r2
 80074a0:	f001 fa2c 	bl	80088fc <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	21ff      	movs	r1, #255	; 0xff
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7fe fa1c 	bl	80058e8 <_ZN7TwoWire5writeEi>
      wireport->print(n);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	4618      	mov	r0, r3
 80074b6:	887b      	ldrh	r3, [r7, #2]
 80074b8:	220a      	movs	r2, #10
 80074ba:	4619      	mov	r1, r3
 80074bc:	f001 f8d8 	bl	8008670 <_ZN5Print5printEii>
      if (wireport->endTransmission() != 0) //Send data and release bus
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f001 fa63 	bl	8008990 <_ZN7TwoWire15endTransmissionEv>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	bf14      	ite	ne
 80074d0:	2301      	movne	r3, #1
 80074d2:	2300      	moveq	r3, #0
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <_ZN10IridiumSBD4sendEt+0x7e>
         diagprint(F("I2C write was not successful!\r\n"));
 80074da:	4904      	ldr	r1, [pc, #16]	; (80074ec <_ZN10IridiumSBD4sendEt+0x88>)
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 f807 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80074e2:	bf00      	nop
 80074e4:	3708      	adds	r7, #8
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	0801e184 	.word	0x0801e184

080074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:

void IridiumSBD::diagprint(FlashString str)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	1c5a      	adds	r2, r3, #1
 8007502:	60fa      	str	r2, [r7, #12]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8007508:	7afb      	ldrb	r3, [r7, #11]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d005      	beq.n	800751a <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 800750e:	7afb      	ldrb	r3, [r7, #11]
 8007510:	4619      	mov	r1, r3
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f7fe fa0e 	bl	8005934 <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 8007518:	e7f1      	b.n	80074fe <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 800751a:	bf00      	nop

   //TODO
   this->print((char*) str);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6838      	ldr	r0, [r7, #0]
 8007522:	4798      	blx	r3
}
 8007524:	bf00      	nop
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <_ZN10IridiumSBD9diagprintEPKc>:

void IridiumSBD::diagprint(const char *str)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
   while (*str)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d008      	beq.n	8007550 <_ZN10IridiumSBD9diagprintEPKc+0x24>
      ISBDDiagsCallback(this, *str++);
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	1c5a      	adds	r2, r3, #1
 8007542:	603a      	str	r2, [r7, #0]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	4619      	mov	r1, r3
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f7fe f9f3 	bl	8005934 <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   while (*str)
 800754e:	e7f2      	b.n	8007536 <_ZN10IridiumSBD9diagprintEPKc+0xa>

   //TODO
   this->print((char*) str);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6838      	ldr	r0, [r7, #0]
 8007556:	4798      	blx	r3
}
 8007558:	bf00      	nop
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <_ZN10IridiumSBD9diagprintEt>:

void IridiumSBD::diagprint(uint16_t n)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	460b      	mov	r3, r1
 800756a:	807b      	strh	r3, [r7, #2]
   char str[10];
   sprintf(str, "%u", n);
 800756c:	887a      	ldrh	r2, [r7, #2]
 800756e:	f107 030c 	add.w	r3, r7, #12
 8007572:	490a      	ldr	r1, [pc, #40]	; (800759c <_ZN10IridiumSBD9diagprintEt+0x3c>)
 8007574:	4618      	mov	r0, r3
 8007576:	f011 f8ff 	bl	8018778 <siprintf>
   diagprint(str); //TODO
 800757a:	f107 030c 	add.w	r3, r7, #12
 800757e:	4619      	mov	r1, r3
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f7ff ffd3 	bl	800752c <_ZN10IridiumSBD9diagprintEPKc>
   this->print((char*) str);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f107 020c 	add.w	r2, r7, #12
 800758e:	4610      	mov	r0, r2
 8007590:	4798      	blx	r3
}
 8007592:	bf00      	nop
 8007594:	3718      	adds	r7, #24
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	0801e3c0 	.word	0x0801e3c0

080075a0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>:

void IridiumSBD::consoleprint(FlashString str)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	1c5a      	adds	r2, r3, #1
 80075b2:	60fa      	str	r2, [r7, #12]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 80075b8:	7afb      	ldrb	r3, [r7, #11]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d005      	beq.n	80075ca <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0x2a>
      ISBDConsoleCallback(this, c);
 80075be:	7afb      	ldrb	r3, [r7, #11]
 80075c0:	4619      	mov	r1, r3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7fe f9aa 	bl	800591c <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   }
 80075c8:	e7f1      	b.n	80075ae <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 80075ca:	bf00      	nop

   //TODO
   this->print((char*) str);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6838      	ldr	r0, [r7, #0]
 80075d2:	4798      	blx	r3
}
 80075d4:	bf00      	nop
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <_ZN10IridiumSBD12consoleprintEPKc>:

void IridiumSBD::consoleprint(const char *str)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
   while (*str)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d008      	beq.n	8007600 <_ZN10IridiumSBD12consoleprintEPKc+0x24>
      ISBDConsoleCallback(this, *str++);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	603a      	str	r2, [r7, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7fe f98f 	bl	800591c <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   while (*str)
 80075fe:	e7f2      	b.n	80075e6 <_ZN10IridiumSBD12consoleprintEPKc+0xa>

   //TODO
   this->print((char*) str);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6838      	ldr	r0, [r7, #0]
 8007606:	4798      	blx	r3
}
 8007608:	bf00      	nop
 800760a:	3708      	adds	r7, #8
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <_ZN10IridiumSBD12consoleprintEt>:

void IridiumSBD::consoleprint(uint16_t n)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	460b      	mov	r3, r1
 800761a:	807b      	strh	r3, [r7, #2]
   char str[10];
   sprintf(str, "%u", n);
 800761c:	887a      	ldrh	r2, [r7, #2]
 800761e:	f107 030c 	add.w	r3, r7, #12
 8007622:	490a      	ldr	r1, [pc, #40]	; (800764c <_ZN10IridiumSBD12consoleprintEt+0x3c>)
 8007624:	4618      	mov	r0, r3
 8007626:	f011 f8a7 	bl	8018778 <siprintf>
   consoleprint(str); //TODO
 800762a:	f107 030c 	add.w	r3, r7, #12
 800762e:	4619      	mov	r1, r3
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f7ff ffd3 	bl	80075dc <_ZN10IridiumSBD12consoleprintEPKc>
   //consoleprint((const char*) str);
   this->print((char*) str);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f107 020c 	add.w	r2, r7, #12
 800763e:	4610      	mov	r0, r2
 8007640:	4798      	blx	r3
}
 8007642:	bf00      	nop
 8007644:	3718      	adds	r7, #24
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	0801e3c0 	.word	0x0801e3c0

08007650 <_ZN10IridiumSBD12consoleprintEc>:

void IridiumSBD::consoleprint(char c)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	460b      	mov	r3, r1
 800765a:	70fb      	strb	r3, [r7, #3]
   ISBDConsoleCallback(this, c);
 800765c:	78fb      	ldrb	r3, [r7, #3]
 800765e:	4619      	mov	r1, r3
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7fe f95b 	bl	800591c <_Z19ISBDConsoleCallbackP10IridiumSBDc>
}
 8007666:	bf00      	nop
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
	...

08007670 <_ZN10IridiumSBD11SBDRINGSeenEv>:

void IridiumSBD::SBDRINGSeen()
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
   ringAsserted = true;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
   diagprint(F("SBDRING alert seen!\r\n"));
 8007680:	4903      	ldr	r1, [pc, #12]	; (8007690 <_ZN10IridiumSBD11SBDRINGSeenEv+0x20>)
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7ff ff34 	bl	80074f0 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007688:	bf00      	nop
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	0801e3c4 	.word	0x0801e3c4

08007694 <_ZN10IridiumSBD13filterSBDRINGEv>:
// Read characters until we find one that doesn't match SBDRING
// If nextChar is -1 it means we are still entertaining a possible
// match with SBDRING\r\n.  Once we find a mismatch, stuff it into
// nextChar.
void IridiumSBD::filterSBDRING()
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
   if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	7c5b      	ldrb	r3, [r3, #17]
 80076a0:	f083 0301 	eor.w	r3, r3, #1
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d002      	beq.n	80076b0 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f940 	bl	8007930 <_ZN10IridiumSBD13check9603dataEv>
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	7c5b      	ldrb	r3, [r3, #17]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00b      	beq.n	80076d0 <_ZN10IridiumSBD13filterSBDRINGEv+0x3c>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	689a      	ldr	r2, [r3, #8]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3308      	adds	r3, #8
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4610      	mov	r0, r2
 80076c8:	4798      	blx	r3
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	dc0c      	bgt.n	80076ea <_ZN10IridiumSBD13filterSBDRINGEv+0x56>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	7c5b      	ldrb	r3, [r3, #17]
 80076d4:	f083 0301 	eor.w	r3, r3, #1
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00d      	beq.n	80076fa <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fa56 	bl	8007b90 <_ZN10IridiumSBD15i2cSerAvailableEv>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	dd07      	ble.n	80076fa <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f4:	d101      	bne.n	80076fa <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 80076f6:	2301      	movs	r3, #1
 80076f8:	e000      	b.n	80076fc <_ZN10IridiumSBD13filterSBDRINGEv+0x68>
 80076fa:	2300      	movs	r3, #0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f000 80af 	beq.w	8007860 <_ZN10IridiumSBD13filterSBDRINGEv+0x1cc>
   {
      char c;
      if (this->useSerial)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	7c5b      	ldrb	r3, [r3, #17]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00b      	beq.n	8007722 <_ZN10IridiumSBD13filterSBDRINGEv+0x8e>
      {
         c = stream->read();
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	689a      	ldr	r2, [r3, #8]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	330c      	adds	r3, #12
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4610      	mov	r0, r2
 800771a:	4798      	blx	r3
 800771c:	4603      	mov	r3, r0
 800771e:	73fb      	strb	r3, [r7, #15]
 8007720:	e004      	b.n	800772c <_ZN10IridiumSBD13filterSBDRINGEv+0x98>
      }
      else
      {
         c = i2cSerRead();
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fa4c 	bl	8007bc0 <_ZN10IridiumSBD10i2cSerReadEv>
 8007728:	4603      	mov	r3, r0
 800772a:	73fb      	strb	r3, [r7, #15]
      }
      consoleprint(c);
 800772c:	7bfb      	ldrb	r3, [r7, #15]
 800772e:	4619      	mov	r1, r3
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f7ff ff8d 	bl	8007650 <_ZN10IridiumSBD12consoleprintEc>
      if (*head != 0 && c == *head)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	f000 8087 	beq.w	8007852 <_ZN10IridiumSBD13filterSBDRINGEv+0x1be>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	7bfa      	ldrb	r2, [r7, #15]
 800774e:	429a      	cmp	r2, r3
 8007750:	d17f      	bne.n	8007852 <_ZN10IridiumSBD13filterSBDRINGEv+0x1be>
      {
         ++head;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007758:	1c5a      	adds	r2, r3, #1
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
         if (*head == 0)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10d      	bne.n	8007788 <_ZN10IridiumSBD13filterSBDRINGEv+0xf4>
         {
            SBDRINGSeen();
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f7ff ff7f 	bl	8007670 <_ZN10IridiumSBD11SBDRINGSeenEv>
            head = tail = SBDRING;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a3c      	ldr	r2, [pc, #240]	; (8007868 <_ZN10IridiumSBD13filterSBDRINGEv+0x1d4>)
 8007776:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
            {
               --head;
               nextChar = c;
            }
         }
 8007786:	e069      	b.n	800785c <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
            for (unsigned long start = millis(); ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) && millis() - start < FILTERTIMEOUT; );
 8007788:	f001 fd62 	bl	8009250 <HAL_GetTick>
 800778c:	60b8      	str	r0, [r7, #8]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	7c5b      	ldrb	r3, [r3, #17]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00b      	beq.n	80077ae <_ZN10IridiumSBD13filterSBDRINGEv+0x11a>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	689a      	ldr	r2, [r3, #8]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	3308      	adds	r3, #8
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4610      	mov	r0, r2
 80077a6:	4798      	blx	r3
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00c      	beq.n	80077c8 <_ZN10IridiumSBD13filterSBDRINGEv+0x134>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	7c5b      	ldrb	r3, [r3, #17]
 80077b2:	f083 0301 	eor.w	r3, r3, #1
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00e      	beq.n	80077da <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f9e7 	bl	8007b90 <_ZN10IridiumSBD15i2cSerAvailableEv>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d108      	bne.n	80077da <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 80077c8:	f001 fd42 	bl	8009250 <HAL_GetTick>
 80077cc:	4602      	mov	r2, r0
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	2b09      	cmp	r3, #9
 80077d4:	d801      	bhi.n	80077da <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 80077d6:	2301      	movs	r3, #1
 80077d8:	e000      	b.n	80077dc <_ZN10IridiumSBD13filterSBDRINGEv+0x148>
 80077da:	2300      	movs	r3, #0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d000      	beq.n	80077e2 <_ZN10IridiumSBD13filterSBDRINGEv+0x14e>
 80077e0:	e7d5      	b.n	800778e <_ZN10IridiumSBD13filterSBDRINGEv+0xfa>
            if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	7c5b      	ldrb	r3, [r3, #17]
 80077e6:	f083 0301 	eor.w	r3, r3, #1
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d002      	beq.n	80077f6 <_ZN10IridiumSBD13filterSBDRINGEv+0x162>
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f89d 	bl	8007930 <_ZN10IridiumSBD13check9603dataEv>
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	7c5b      	ldrb	r3, [r3, #17]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00b      	beq.n	8007816 <_ZN10IridiumSBD13filterSBDRINGEv+0x182>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	689a      	ldr	r2, [r3, #8]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3308      	adds	r3, #8
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4610      	mov	r0, r2
 800780e:	4798      	blx	r3
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00c      	beq.n	8007830 <_ZN10IridiumSBD13filterSBDRINGEv+0x19c>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	7c5b      	ldrb	r3, [r3, #17]
 800781a:	f083 0301 	eor.w	r3, r3, #1
 800781e:	b2db      	uxtb	r3, r3
 8007820:	2b00      	cmp	r3, #0
 8007822:	d007      	beq.n	8007834 <_ZN10IridiumSBD13filterSBDRINGEv+0x1a0>
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f9b3 	bl	8007b90 <_ZN10IridiumSBD15i2cSerAvailableEv>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d101      	bne.n	8007834 <_ZN10IridiumSBD13filterSBDRINGEv+0x1a0>
 8007830:	2301      	movs	r3, #1
 8007832:	e000      	b.n	8007836 <_ZN10IridiumSBD13filterSBDRINGEv+0x1a2>
 8007834:	2300      	movs	r3, #0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d010      	beq.n	800785c <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
               --head;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007840:	1e5a      	subs	r2, r3, #1
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
               nextChar = c;
 8007848:	7bfa      	ldrb	r2, [r7, #15]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
         }
 8007850:	e004      	b.n	800785c <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
      }
      else
      {
         nextChar = c;
 8007852:	7bfa      	ldrb	r2, [r7, #15]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800785a:	e729      	b.n	80076b0 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
         }
 800785c:	bf00      	nop
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 800785e:	e727      	b.n	80076b0 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
      }
   }
}
 8007860:	bf00      	nop
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	0801ec4c 	.word	0x0801ec4c

0800786c <_ZN10IridiumSBD17filteredavailableEv>:

const char IridiumSBD::SBDRING[] = "SBDRING\r\n";

int IridiumSBD::filteredavailable()
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7ff ff0d 	bl	8007694 <_ZN10IridiumSBD13filterSBDRINGEv>
   return head - tail + (nextChar != -1 ? 1 : 0);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 800788e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007892:	d001      	beq.n	8007898 <_ZN10IridiumSBD17filteredavailableEv+0x2c>
 8007894:	2201      	movs	r2, #1
 8007896:	e000      	b.n	800789a <_ZN10IridiumSBD17filteredavailableEv+0x2e>
 8007898:	2200      	movs	r2, #0
 800789a:	4413      	add	r3, r2
}
 800789c:	4618      	mov	r0, r3
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <_ZN10IridiumSBD12filteredreadEv>:

int IridiumSBD::filteredread()
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f7ff fef1 	bl	8007694 <_ZN10IridiumSBD13filterSBDRINGEv>

   // Use up the queue first
   if (head > tail)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078be:	429a      	cmp	r2, r3
 80078c0:	d91c      	bls.n	80078fc <_ZN10IridiumSBD12filteredreadEv+0x58>
   {
      char c = *tail++;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078c8:	1c59      	adds	r1, r3, #1
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	73bb      	strb	r3, [r7, #14]
      if (head == tail)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d109      	bne.n	80078f8 <_ZN10IridiumSBD12filteredreadEv+0x54>
         head = tail = SBDRING;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a11      	ldr	r2, [pc, #68]	; (800792c <_ZN10IridiumSBD12filteredreadEv+0x88>)
 80078e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      return c;
 80078f8:	7bbb      	ldrb	r3, [r7, #14]
 80078fa:	e012      	b.n	8007922 <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   // Then the "extra" char
   else if (nextChar != -1)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007906:	d00a      	beq.n	800791e <_ZN10IridiumSBD12filteredreadEv+0x7a>
   {
      char c = (char)nextChar;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800790e:	73fb      	strb	r3, [r7, #15]
      nextChar = -1;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f04f 32ff 	mov.w	r2, #4294967295
 8007916:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      return c;
 800791a:	7bfb      	ldrb	r3, [r7, #15]
 800791c:	e001      	b.n	8007922 <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   return -1;
 800791e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	0801ec4c 	.word	0x0801ec4c

08007930 <_ZN10IridiumSBD13check9603dataEv>:

//Checks the number of available serial bytes
//Reads the available serial bytes (if any) and stores them in i2c_ser_buffer
void IridiumSBD::check9603data()
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  if (millis() - lastCheck >= I2C_POLLING_WAIT_MS)
 8007938:	f001 fc8a 	bl	8009250 <HAL_GetTick>
 800793c:	4602      	mov	r2, r0
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 800794a:	4293      	cmp	r3, r2
 800794c:	bf2c      	ite	cs
 800794e:	2301      	movcs	r3, #1
 8007950:	2300      	movcc	r3, #0
 8007952:	b2db      	uxtb	r3, r3
 8007954:	2b00      	cmp	r3, #0
 8007956:	f000 80b8 	beq.w	8007aca <_ZN10IridiumSBD13check9603dataEv+0x19a>
  {
    //Check how many serial bytes are waiting to be read
    uint16_t bytesAvailable = 0;
 800795a:	2300      	movs	r3, #0
 800795c:	81fb      	strh	r3, [r7, #14]
    wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68da      	ldr	r2, [r3, #12]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	7c1b      	ldrb	r3, [r3, #16]
 8007966:	4619      	mov	r1, r3
 8007968:	4610      	mov	r0, r2
 800796a:	f000 ffc7 	bl	80088fc <_ZN7TwoWire17beginTransmissionEh>
    wireport->write(LEN_REG); // Point to the serial buffer length
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	21fd      	movs	r1, #253	; 0xfd
 8007974:	4618      	mov	r0, r3
 8007976:	f7fd ffb7 	bl	80058e8 <_ZN7TwoWire5writeEi>
    wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	4618      	mov	r0, r3
 8007980:	f001 f806 	bl	8008990 <_ZN7TwoWire15endTransmissionEv>
    if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)2) == 2) // Request two bytes
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	68d8      	ldr	r0, [r3, #12]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	7c1b      	ldrb	r3, [r3, #16]
 800798c:	2202      	movs	r2, #2
 800798e:	4619      	mov	r1, r3
 8007990:	f000 ffa1 	bl	80088d6 <_ZN7TwoWire11requestFromEhh>
 8007994:	4603      	mov	r3, r0
 8007996:	2b02      	cmp	r3, #2
 8007998:	bf0c      	ite	eq
 800799a:	2301      	moveq	r3, #1
 800799c:	2300      	movne	r3, #0
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d01d      	beq.n	80079e0 <_ZN10IridiumSBD13check9603dataEv+0xb0>
    {
      uint8_t msb = wireport->read();
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	68da      	ldr	r2, [r3, #12]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	330c      	adds	r3, #12
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4610      	mov	r0, r2
 80079b4:	4798      	blx	r3
 80079b6:	4603      	mov	r3, r0
 80079b8:	737b      	strb	r3, [r7, #13]
      uint8_t lsb = wireport->read();
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68da      	ldr	r2, [r3, #12]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	330c      	adds	r3, #12
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4610      	mov	r0, r2
 80079ca:	4798      	blx	r3
 80079cc:	4603      	mov	r3, r0
 80079ce:	733b      	strb	r3, [r7, #12]
      bytesAvailable = (((uint16_t)msb) << 8) | lsb;
 80079d0:	7b7b      	ldrb	r3, [r7, #13]
 80079d2:	021b      	lsls	r3, r3, #8
 80079d4:	b21a      	sxth	r2, r3
 80079d6:	7b3b      	ldrb	r3, [r7, #12]
 80079d8:	b21b      	sxth	r3, r3
 80079da:	4313      	orrs	r3, r2
 80079dc:	b21b      	sxth	r3, r3
 80079de:	81fb      	strh	r3, [r7, #14]
    }

    //Now read the serial bytes (if any)
    if (bytesAvailable > 0)
 80079e0:	89fb      	ldrh	r3, [r7, #14]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d06c      	beq.n	8007ac0 <_ZN10IridiumSBD13check9603dataEv+0x190>
    {
      // Request the bytes
      // Poke them into the i2c_serial buffer
      // Release the bus afterwards
      wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	68da      	ldr	r2, [r3, #12]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	7c1b      	ldrb	r3, [r3, #16]
 80079ee:	4619      	mov	r1, r3
 80079f0:	4610      	mov	r0, r2
 80079f2:	f000 ff83 	bl	80088fc <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the serial buffer
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	21ff      	movs	r1, #255	; 0xff
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7fd ff73 	bl	80058e8 <_ZN7TwoWire5writeEi>
      wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 ffc2 	bl	8008990 <_ZN7TwoWire15endTransmissionEv>
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8007a0c:	89fb      	ldrh	r3, [r7, #14]
 8007a0e:	2b08      	cmp	r3, #8
 8007a10:	d92c      	bls.n	8007a6c <_ZN10IridiumSBD13check9603dataEv+0x13c>
      {
        wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)SER_PACKET_SIZE, (uint8_t)false); // Request SER_PACKET_SIZE bytes, don't release the bus
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	68d8      	ldr	r0, [r3, #12]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	7c19      	ldrb	r1, [r3, #16]
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	2208      	movs	r2, #8
 8007a1e:	f000 ff1f 	bl	8008860 <_ZN7TwoWire11requestFromEhhh>
        while (wireport->available())
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	68da      	ldr	r2, [r3, #12]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4610      	mov	r0, r2
 8007a32:	4798      	blx	r3
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	bf14      	ite	ne
 8007a3a:	2301      	movne	r3, #1
 8007a3c:	2300      	moveq	r3, #0
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00f      	beq.n	8007a64 <_ZN10IridiumSBD13check9603dataEv+0x134>
        {
          i2cSerPoke(wireport->read()); // Read and store each byte
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	68da      	ldr	r2, [r3, #12]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	330c      	adds	r3, #12
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4610      	mov	r0, r2
 8007a54:	4798      	blx	r3
 8007a56:	4603      	mov	r3, r0
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 f8d5 	bl	8007c0c <_ZN10IridiumSBD10i2cSerPokeEc>
        while (wireport->available())
 8007a62:	e7de      	b.n	8007a22 <_ZN10IridiumSBD13check9603dataEv+0xf2>
        }
        bytesAvailable -= SER_PACKET_SIZE; // Decrease the number of bytes available by SER_PACKET_SIZE
 8007a64:	89fb      	ldrh	r3, [r7, #14]
 8007a66:	3b08      	subs	r3, #8
 8007a68:	81fb      	strh	r3, [r7, #14]
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8007a6a:	e7cf      	b.n	8007a0c <_ZN10IridiumSBD13check9603dataEv+0xdc>
      }
      wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)bytesAvailable); // Request remaining bytes, release the bus
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	68d8      	ldr	r0, [r3, #12]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	7c1b      	ldrb	r3, [r3, #16]
 8007a74:	89fa      	ldrh	r2, [r7, #14]
 8007a76:	b2d2      	uxtb	r2, r2
 8007a78:	4619      	mov	r1, r3
 8007a7a:	f000 ff2c 	bl	80088d6 <_ZN7TwoWire11requestFromEhh>
      while (wireport->available())
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	68da      	ldr	r2, [r3, #12]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	3308      	adds	r3, #8
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	4798      	blx	r3
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	bf14      	ite	ne
 8007a96:	2301      	movne	r3, #1
 8007a98:	2300      	moveq	r3, #0
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00f      	beq.n	8007ac0 <_ZN10IridiumSBD13check9603dataEv+0x190>
      {
        i2cSerPoke(wireport->read()); // Read and store each byte
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	68da      	ldr	r2, [r3, #12]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	330c      	adds	r3, #12
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4610      	mov	r0, r2
 8007ab0:	4798      	blx	r3
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 f8a7 	bl	8007c0c <_ZN10IridiumSBD10i2cSerPokeEc>
      while (wireport->available())
 8007abe:	e7de      	b.n	8007a7e <_ZN10IridiumSBD13check9603dataEv+0x14e>
      }
    }

    lastCheck = millis(); //Put off checking to avoid excessive I2C bus traffic
 8007ac0:	f001 fbc6 	bl	8009250 <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8007aca:	bf00      	nop
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <_ZN10IridiumSBD13check9603pinsEv>:

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b082      	sub	sp, #8
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	68da      	ldr	r2, [r3, #12]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	7c1b      	ldrb	r3, [r3, #16]
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	4610      	mov	r0, r2
 8007ae6:	f000 ff09 	bl	80088fc <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	2110      	movs	r1, #16
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7fd fef9 	bl	80058e8 <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 ff48 	bl	8008990 <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	68d8      	ldr	r0, [r3, #12]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	7c1b      	ldrb	r3, [r3, #16]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	f000 fee3 	bl	80088d6 <_ZN7TwoWire11requestFromEhh>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	bf0c      	ite	eq
 8007b16:	2301      	moveq	r3, #1
 8007b18:	2300      	movne	r3, #0
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00d      	beq.n	8007b3c <_ZN10IridiumSBD13check9603pinsEv+0x6a>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	68da      	ldr	r2, [r3, #12]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	330c      	adds	r3, #12
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4610      	mov	r0, r2
 8007b30:	4798      	blx	r3
 8007b32:	4603      	mov	r3, r0
 8007b34:	b2da      	uxtb	r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
}
 8007b3c:	bf00      	nop
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	68da      	ldr	r2, [r3, #12]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	7c1b      	ldrb	r3, [r3, #16]
 8007b58:	4619      	mov	r1, r3
 8007b5a:	4610      	mov	r0, r2
 8007b5c:	f000 fece 	bl	80088fc <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	2110      	movs	r1, #16
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fd febe 	bl	80058e8 <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	68da      	ldr	r2, [r3, #12]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	78f9      	ldrb	r1, [r7, #3]
 8007b7a:	4610      	mov	r0, r2
 8007b7c:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 ff04 	bl	8008990 <_ZN7TwoWire15endTransmissionEv>
}
 8007b88:	bf00      	nop
 8007b8a:	3708      	adds	r7, #8
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <_ZN10IridiumSBD15i2cSerAvailableEv>:
    return(ISBD_SUCCESS);
}

// I2C_SER functions
int IridiumSBD::i2cSerAvailable()
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  return (i2c_ser_buffer_tail + I2C_SER_MAX_BUFF - i2c_ser_buffer_head) % I2C_SER_MAX_BUFF;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b9c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	425a      	negs	r2, r3
 8007ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bac:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007bb0:	bf58      	it	pl
 8007bb2:	4253      	negpl	r3, r2
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <_ZN10IridiumSBD10i2cSerReadEv>:

int IridiumSBD::i2cSerRead()
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  // Empty buffer?
  if (i2c_ser_buffer_head == i2c_ser_buffer_tail)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d102      	bne.n	8007bda <_ZN10IridiumSBD10i2cSerReadEv+0x1a>
    return -1;
 8007bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8007bd8:	e012      	b.n	8007c00 <_ZN10IridiumSBD10i2cSerReadEv+0x40>

  // Read from "head"
  uint8_t d = i2c_ser_buffer[i2c_ser_buffer_head]; // grab next byte
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	4413      	add	r3, r2
 8007be2:	7c9b      	ldrb	r3, [r3, #18]
 8007be4:	73fb      	strb	r3, [r7, #15]
  i2c_ser_buffer_head = (i2c_ser_buffer_head + 1) % I2C_SER_MAX_BUFF; // update head
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bea:	3301      	adds	r3, #1
 8007bec:	425a      	negs	r2, r3
 8007bee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bf2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007bf6:	bf58      	it	pl
 8007bf8:	4253      	negpl	r3, r2
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	6593      	str	r3, [r2, #88]	; 0x58
  return d;
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <_ZN10IridiumSBD10i2cSerPokeEc>:

void IridiumSBD::i2cSerPoke(char serChar)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	460b      	mov	r3, r1
 8007c16:	70fb      	strb	r3, [r7, #3]
  // Calculate the new value for the tail
  int next = (i2c_ser_buffer_tail + 1) % I2C_SER_MAX_BUFF;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	425a      	negs	r2, r3
 8007c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c24:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007c28:	bf58      	it	pl
 8007c2a:	4253      	negpl	r3, r2
 8007c2c:	60fb      	str	r3, [r7, #12]
  // If the buffer is not full (i.e. we are not about to overwrite the head byte)
  // If the buffer is full, the byte is lost
  if (next != i2c_ser_buffer_head)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d008      	beq.n	8007c4a <_ZN10IridiumSBD10i2cSerPokeEc+0x3e>
  {
    // save new data in buffer: tail points to where byte goes
    i2c_ser_buffer[i2c_ser_buffer_tail] = serChar; // save new byte
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	4413      	add	r3, r2
 8007c40:	78fa      	ldrb	r2, [r7, #3]
 8007c42:	749a      	strb	r2, [r3, #18]
    i2c_ser_buffer_tail = next;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 8007c4a:	bf00      	nop
 8007c4c:	3714      	adds	r7, #20
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr
	...

08007c58 <_ZN10IridiumSBD20internalClearBuffersEi>:

int IridiumSBD::internalClearBuffers(int buffers)
// Clear the MO/MT/Both buffers
// Defaults to clearing the MO buffer to avoid resending old messages
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af02      	add	r7, sp, #8
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
   if (this->asleep)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d001      	beq.n	8007c70 <_ZN10IridiumSBD20internalClearBuffersEi+0x18>
      return ISBD_IS_ASLEEP;
 8007c6c:	230a      	movs	r3, #10
 8007c6e:	e032      	b.n	8007cd6 <_ZN10IridiumSBD20internalClearBuffersEi+0x7e>

   if (buffers == ISBD_CLEAR_MT) // Clear MT buffer
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d106      	bne.n	8007c84 <_ZN10IridiumSBD20internalClearBuffersEi+0x2c>
   {
      send(F("AT+SBDD1\r"));
 8007c76:	2301      	movs	r3, #1
 8007c78:	2201      	movs	r2, #1
 8007c7a:	4919      	ldr	r1, [pc, #100]	; (8007ce0 <_ZN10IridiumSBD20internalClearBuffersEi+0x88>)
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7ff fabd 	bl	80071fc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
 8007c82:	e00f      	b.n	8007ca4 <_ZN10IridiumSBD20internalClearBuffersEi+0x4c>
   }
   else if (buffers == ISBD_CLEAR_BOTH) // Clear both buffers
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d106      	bne.n	8007c98 <_ZN10IridiumSBD20internalClearBuffersEi+0x40>
   {
      send(F("AT+SBDD2\r"));
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	4915      	ldr	r1, [pc, #84]	; (8007ce4 <_ZN10IridiumSBD20internalClearBuffersEi+0x8c>)
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f7ff fab3 	bl	80071fc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
 8007c96:	e005      	b.n	8007ca4 <_ZN10IridiumSBD20internalClearBuffersEi+0x4c>
   }
   else // Clear MO buffer
   {
      send(F("AT+SBDD0\r"));
 8007c98:	2301      	movs	r3, #1
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	4912      	ldr	r1, [pc, #72]	; (8007ce8 <_ZN10IridiumSBD20internalClearBuffersEi+0x90>)
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7ff faac 	bl	80071fc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   }
   if (!waitForATResponse())
 8007ca4:	4b11      	ldr	r3, [pc, #68]	; (8007cec <_ZN10IridiumSBD20internalClearBuffersEi+0x94>)
 8007ca6:	9300      	str	r3, [sp, #0]
 8007ca8:	2300      	movs	r3, #0
 8007caa:	2200      	movs	r2, #0
 8007cac:	2100      	movs	r1, #0
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f7fe fe42 	bl	8006938 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	f083 0301 	eor.w	r3, r3, #1
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d009      	beq.n	8007cd4 <_ZN10IridiumSBD20internalClearBuffersEi+0x7c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7fe fef7 	bl	8006ab4 <_ZN10IridiumSBD9cancelledEv>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d001      	beq.n	8007cd0 <_ZN10IridiumSBD20internalClearBuffersEi+0x78>
 8007ccc:	2304      	movs	r3, #4
 8007cce:	e002      	b.n	8007cd6 <_ZN10IridiumSBD20internalClearBuffersEi+0x7e>
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e000      	b.n	8007cd6 <_ZN10IridiumSBD20internalClearBuffersEi+0x7e>

   return ISBD_SUCCESS;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	0801e410 	.word	0x0801e410
 8007ce4:	0801e41c 	.word	0x0801e41c
 8007ce8:	0801e428 	.word	0x0801e428
 8007cec:	0801dd58 	.word	0x0801dd58

08007cf0 <_ZN10IridiumSBD15internalGetIMEIEPcj>:

int IridiumSBD::internalGetIMEI(char *IMEI, size_t bufferSize)
// Get the IMEI
// https://github.com/mikalhart/IridiumSBD/pull/21
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af02      	add	r7, sp, #8
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
   if (this->asleep)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <_ZN10IridiumSBD15internalGetIMEIEPcj+0x1a>
      return ISBD_IS_ASLEEP;
 8007d06:	230a      	movs	r3, #10
 8007d08:	e023      	b.n	8007d52 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   if (bufferSize < 16) // IMEI is 15 digits
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b0f      	cmp	r3, #15
 8007d0e:	d801      	bhi.n	8007d14 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x24>
      return ISBD_RX_OVERFLOW;
 8007d10:	2308      	movs	r3, #8
 8007d12:	e01e      	b.n	8007d52 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   send(F("AT+CGSN\r"));
 8007d14:	2301      	movs	r3, #1
 8007d16:	2201      	movs	r2, #1
 8007d18:	4910      	ldr	r1, [pc, #64]	; (8007d5c <_ZN10IridiumSBD15internalGetIMEIEPcj+0x6c>)
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f7ff fa6e 	bl	80071fc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(IMEI, bufferSize, "\n"))
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	4b0f      	ldr	r3, [pc, #60]	; (8007d60 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x70>)
 8007d24:	9300      	str	r3, [sp, #0]
 8007d26:	4b0f      	ldr	r3, [pc, #60]	; (8007d64 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x74>)
 8007d28:	68b9      	ldr	r1, [r7, #8]
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f7fe fe04 	bl	8006938 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007d30:	4603      	mov	r3, r0
 8007d32:	f083 0301 	eor.w	r3, r3, #1
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d009      	beq.n	8007d50 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x60>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f7fe feb9 	bl	8006ab4 <_ZN10IridiumSBD9cancelledEv>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <_ZN10IridiumSBD15internalGetIMEIEPcj+0x5c>
 8007d48:	2304      	movs	r3, #4
 8007d4a:	e002      	b.n	8007d52 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	e000      	b.n	8007d52 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   return ISBD_SUCCESS;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	0801e434 	.word	0x0801e434
 8007d60:	0801dd58 	.word	0x0801dd58
 8007d64:	0801e440 	.word	0x0801e440

08007d68 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE>:
	#endif
}


//uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart,POWERPROFILE profile){ TODO??
uint8_t IridiumSBD::MRT_Iridium_setup(uint8_t timeout, uint8_t i2c_bus, void (*iridium_print)(char*)){
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b08e      	sub	sp, #56	; 0x38
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	607b      	str	r3, [r7, #4]
 8007d72:	460b      	mov	r3, r1
 8007d74:	72fb      	strb	r3, [r7, #11]
 8007d76:	4613      	mov	r3, r2
 8007d78:	72bb      	strb	r3, [r7, #10]
	this->print = iridium_print;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	601a      	str	r2, [r3, #0]
	this->print((char*) "Iridium 9603N Init\r\n");
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	485d      	ldr	r0, [pc, #372]	; (8007efc <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x194>)
 8007d86:	4798      	blx	r3

	this->print((char*) "\tSetting I2C bus...");
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	485c      	ldr	r0, [pc, #368]	; (8007f00 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x198>)
 8007d8e:	4798      	blx	r3
	if (i2c_bus == 1){
 8007d90:	7abb      	ldrb	r3, [r7, #10]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d103      	bne.n	8007d9e <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x36>
		this->wireport = &Wire;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	4a5a      	ldr	r2, [pc, #360]	; (8007f04 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x19c>)
 8007d9a:	60da      	str	r2, [r3, #12]
 8007d9c:	e00c      	b.n	8007db8 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x50>
	}
	else if (i2c_bus == 2){
 8007d9e:	7abb      	ldrb	r3, [r7, #10]
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d103      	bne.n	8007dac <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x44>
		this->wireport = &Wire1;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	4a58      	ldr	r2, [pc, #352]	; (8007f08 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8007da8:	60da      	str	r2, [r3, #12]
 8007daa:	e005      	b.n	8007db8 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x50>
	}
	else if (i2c_bus == 3){
 8007dac:	7abb      	ldrb	r3, [r7, #10]
 8007dae:	2b03      	cmp	r3, #3
 8007db0:	d102      	bne.n	8007db8 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x50>
		this->wireport = &Wire2;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	4a55      	ldr	r2, [pc, #340]	; (8007f0c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a4>)
 8007db6:	60da      	str	r2, [r3, #12]
	}
	this->print((char*) "OK\r\n");
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4854      	ldr	r0, [pc, #336]	; (8007f10 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a8>)
 8007dbe:	4798      	blx	r3

	this->print((char*) "\tChecking device connection...");
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4853      	ldr	r0, [pc, #332]	; (8007f14 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1ac>)
 8007dc6:	4798      	blx	r3
	while(!this->isConnected()){
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f7fe f8a5 	bl	8005f18 <_ZN10IridiumSBD11isConnectedEv>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	f083 0301 	eor.w	r3, r3, #1
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d020      	beq.n	8007e1c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0xb4>
		HAL_Delay(300);
 8007dda:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007dde:	f001 fa43 	bl	8009268 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection   ");
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	484c      	ldr	r0, [pc, #304]	; (8007f18 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1b0>)
 8007de8:	4798      	blx	r3
		HAL_Delay(300);
 8007dea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007dee:	f001 fa3b 	bl	8009268 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection.  ");
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4849      	ldr	r0, [pc, #292]	; (8007f1c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1b4>)
 8007df8:	4798      	blx	r3
		HAL_Delay(300);
 8007dfa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007dfe:	f001 fa33 	bl	8009268 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection.. ");
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4846      	ldr	r0, [pc, #280]	; (8007f20 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1b8>)
 8007e08:	4798      	blx	r3
		HAL_Delay(300);
 8007e0a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007e0e:	f001 fa2b 	bl	8009268 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection...");
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4843      	ldr	r0, [pc, #268]	; (8007f24 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1bc>)
 8007e18:	4798      	blx	r3
	while(!this->isConnected()){
 8007e1a:	e7d5      	b.n	8007dc8 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x60>
	}
	this->print((char*) "OK\r\n");
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	483b      	ldr	r0, [pc, #236]	; (8007f10 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a8>)
 8007e22:	4798      	blx	r3

	//Activate the superchargers
	this->print((char*) "\tActivating the superchargers...");
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	483f      	ldr	r0, [pc, #252]	; (8007f28 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1c0>)
 8007e2a:	4798      	blx	r3
	this->enableSuperCapCharger(true);
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f7fd feea 	bl	8005c08 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	this->print((char*) "OK\r\n");
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4835      	ldr	r0, [pc, #212]	; (8007f10 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a8>)
 8007e3a:	4798      	blx	r3


	//Wait for the supercapacitors to charge
	//int start=millis();
	this->print((char*) "\tWaiting for the supercapacitors to charge...");
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	483a      	ldr	r0, [pc, #232]	; (8007f2c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1c4>)
 8007e42:	4798      	blx	r3
	while (!this->checkSuperCapCharger()){
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f7fd ff1d 	bl	8005c84 <_ZN10IridiumSBD20checkSuperCapChargerEv>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	f083 0301 	eor.w	r3, r3, #1
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d004      	beq.n	8007e60 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0xf8>
		HAL_Delay(333);
 8007e56:	f240 104d 	movw	r0, #333	; 0x14d
 8007e5a:	f001 fa05 	bl	8009268 <HAL_Delay>
	while (!this->checkSuperCapCharger()){
 8007e5e:	e7f1      	b.n	8007e44 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0xdc>
	}
	this->print((char*) "OK\r\n");
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	482a      	ldr	r0, [pc, #168]	; (8007f10 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a8>)
 8007e66:	4798      	blx	r3


	//Enable power for the 9603N
	this->print((char*) "\tEnabling 9603N power...");
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4830      	ldr	r0, [pc, #192]	; (8007f30 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1c8>)
 8007e6e:	4798      	blx	r3
	this->enable9603Npower(true);
 8007e70:	2101      	movs	r1, #1
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f7fd ff36 	bl	8005ce4 <_ZN10IridiumSBD16enable9603NpowerEb>
	this->print((char*) "OK\r\n");
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4824      	ldr	r0, [pc, #144]	; (8007f10 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a8>)
 8007e7e:	4798      	blx	r3
	/*
	 * Begin satellite modem operation
	 */

	//Power on the rockblock
	this->print((char*) "\tStarting Modem...");
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	482b      	ldr	r0, [pc, #172]	; (8007f34 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1cc>)
 8007e86:	4798      	blx	r3
	//this->setPowerProfile(profile);
	int err = this->begin();
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f7fd fd5f 	bl	800594c <_ZN10IridiumSBD5beginEv>
 8007e8e:	6378      	str	r0, [r7, #52]	; 0x34
	if (err != ISBD_SUCCESS)
 8007e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00b      	beq.n	8007eae <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x146>
	  {
		this->print((char*) "Failed: ");
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4827      	ldr	r0, [pc, #156]	; (8007f38 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1d0>)
 8007e9c:	4798      	blx	r3
		this->MRT_Iridium_ErrorMessage(err);
 8007e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f000 f84f 	bl	8007f48 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>

	    return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e021      	b.n	8007ef2 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x18a>
	  }
	this->print((char*) "OK\r\n");
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4817      	ldr	r0, [pc, #92]	; (8007f10 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a8>)
 8007eb4:	4798      	blx	r3

	//Setup default IMEI to 000000000000000 (no IMEI)
	IMEI="000000000000000";
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	4a20      	ldr	r2, [pc, #128]	; (8007f3c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1d4>)
 8007eba:	605a      	str	r2, [r3, #4]

	char str[30];
	sprintf(str, "\tSetting timeout of %i seconds...", timeout);
 8007ebc:	7afa      	ldrb	r2, [r7, #11]
 8007ebe:	f107 0314 	add.w	r3, r7, #20
 8007ec2:	491f      	ldr	r1, [pc, #124]	; (8007f40 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1d8>)
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f010 fc57 	bl	8018778 <siprintf>
	this->print((char*) str);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f107 0214 	add.w	r2, r7, #20
 8007ed2:	4610      	mov	r0, r2
 8007ed4:	4798      	blx	r3
	adjustATTimeout(timeout);
 8007ed6:	7afb      	ldrb	r3, [r7, #11]
 8007ed8:	4619      	mov	r1, r3
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f7fd fda2 	bl	8005a24 <_ZN10IridiumSBD15adjustATTimeoutEi>
	this->print((char*) "OK\r\n");
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	480a      	ldr	r0, [pc, #40]	; (8007f10 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a8>)
 8007ee6:	4798      	blx	r3

	this->print((char*) "\tEnd of setup\r\n");
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4815      	ldr	r0, [pc, #84]	; (8007f44 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1dc>)
 8007eee:	4798      	blx	r3

	return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3738      	adds	r7, #56	; 0x38
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	0801e444 	.word	0x0801e444
 8007f00:	0801e45c 	.word	0x0801e45c
 8007f04:	2000049c 	.word	0x2000049c
 8007f08:	20000554 	.word	0x20000554
 8007f0c:	2000060c 	.word	0x2000060c
 8007f10:	0801dd58 	.word	0x0801dd58
 8007f14:	0801e470 	.word	0x0801e470
 8007f18:	0801e490 	.word	0x0801e490
 8007f1c:	0801e4b0 	.word	0x0801e4b0
 8007f20:	0801e4d0 	.word	0x0801e4d0
 8007f24:	0801e4f0 	.word	0x0801e4f0
 8007f28:	0801e510 	.word	0x0801e510
 8007f2c:	0801e534 	.word	0x0801e534
 8007f30:	0801e564 	.word	0x0801e564
 8007f34:	0801e580 	.word	0x0801e580
 8007f38:	0801e594 	.word	0x0801e594
 8007f3c:	0801e5a0 	.word	0x0801e5a0
 8007f40:	0801e5b0 	.word	0x0801e5b0
 8007f44:	0801e5d4 	.word	0x0801e5d4

08007f48 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>:
	return true;
}



void IridiumSBD::MRT_Iridium_ErrorMessage(uint8_t error){
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	460b      	mov	r3, r1
 8007f52:	70fb      	strb	r3, [r7, #3]
	this->print((char*) "\r\n\tError:\t");
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4834      	ldr	r0, [pc, #208]	; (800802c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe4>)
 8007f5a:	4798      	blx	r3
	if (error == ISBD_ALREADY_AWAKE){
 8007f5c:	78fb      	ldrb	r3, [r7, #3]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d104      	bne.n	8007f6c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x24>
		this->print((char*) "\tAlready Awake\r\n");
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4832      	ldr	r0, [pc, #200]	; (8008030 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe8>)
 8007f68:	4798      	blx	r3
		this->print((char*) "\tDEBUG LINE REACHED\r\n");
	}
	else{
		this->print((char*) "\tUNKNOWN\r\n");
	}
}
 8007f6a:	e05b      	b.n	8008024 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_SERIAL_FAILURE){
 8007f6c:	78fb      	ldrb	r3, [r7, #3]
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d104      	bne.n	8007f7c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x34>
		this->print((char*) "\tSerial Failure\r\n");
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	482f      	ldr	r0, [pc, #188]	; (8008034 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xec>)
 8007f78:	4798      	blx	r3
}
 8007f7a:	e053      	b.n	8008024 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_PROTOCOL_ERROR){
 8007f7c:	78fb      	ldrb	r3, [r7, #3]
 8007f7e:	2b03      	cmp	r3, #3
 8007f80:	d104      	bne.n	8007f8c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x44>
		this->print((char*) "\tProtocol Error\r\n");
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	482c      	ldr	r0, [pc, #176]	; (8008038 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf0>)
 8007f88:	4798      	blx	r3
}
 8007f8a:	e04b      	b.n	8008024 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_CANCELLED){
 8007f8c:	78fb      	ldrb	r3, [r7, #3]
 8007f8e:	2b04      	cmp	r3, #4
 8007f90:	d104      	bne.n	8007f9c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x54>
		this->print((char*) "\tCancelled\r\n");
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4829      	ldr	r0, [pc, #164]	; (800803c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf4>)
 8007f98:	4798      	blx	r3
}
 8007f9a:	e043      	b.n	8008024 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_NO_MODEM_DETECTED){
 8007f9c:	78fb      	ldrb	r3, [r7, #3]
 8007f9e:	2b05      	cmp	r3, #5
 8007fa0:	d104      	bne.n	8007fac <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x64>
		this->print((char*) "\tNo modem detected: check wiring.\r\n");
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4826      	ldr	r0, [pc, #152]	; (8008040 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf8>)
 8007fa8:	4798      	blx	r3
}
 8007faa:	e03b      	b.n	8008024 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_SBDIX_FATAL_ERROR){
 8007fac:	78fb      	ldrb	r3, [r7, #3]
 8007fae:	2b06      	cmp	r3, #6
 8007fb0:	d104      	bne.n	8007fbc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x74>
		this->print((char*) "\tSDBIX Fatal Error\r\n");
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4823      	ldr	r0, [pc, #140]	; (8008044 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xfc>)
 8007fb8:	4798      	blx	r3
}
 8007fba:	e033      	b.n	8008024 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_SENDRECEIVE_TIMEOUT){
 8007fbc:	78fb      	ldrb	r3, [r7, #3]
 8007fbe:	2b07      	cmp	r3, #7
 8007fc0:	d104      	bne.n	8007fcc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x84>
		this->print((char*) "\tSend-Receive Timeout\r\n");
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4820      	ldr	r0, [pc, #128]	; (8008048 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x100>)
 8007fc8:	4798      	blx	r3
}
 8007fca:	e02b      	b.n	8008024 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_RX_OVERFLOW){
 8007fcc:	78fb      	ldrb	r3, [r7, #3]
 8007fce:	2b08      	cmp	r3, #8
 8007fd0:	d104      	bne.n	8007fdc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x94>
		this->print((char*) "\tRX Overflow\r\n");
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	481d      	ldr	r0, [pc, #116]	; (800804c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x104>)
 8007fd8:	4798      	blx	r3
}
 8007fda:	e023      	b.n	8008024 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_REENTRANT){
 8007fdc:	78fb      	ldrb	r3, [r7, #3]
 8007fde:	2b09      	cmp	r3, #9
 8007fe0:	d104      	bne.n	8007fec <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xa4>
		this->print((char*) "\tREENTRANT\r\n");
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	481a      	ldr	r0, [pc, #104]	; (8008050 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x108>)
 8007fe8:	4798      	blx	r3
}
 8007fea:	e01b      	b.n	8008024 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_IS_ASLEEP){
 8007fec:	78fb      	ldrb	r3, [r7, #3]
 8007fee:	2b0a      	cmp	r3, #10
 8007ff0:	d104      	bne.n	8007ffc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xb4>
		this->print((char*) "\tIs Asleep\r\n");
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4817      	ldr	r0, [pc, #92]	; (8008054 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x10c>)
 8007ff8:	4798      	blx	r3
}
 8007ffa:	e013      	b.n	8008024 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_NO_SLEEP_PIN){
 8007ffc:	78fb      	ldrb	r3, [r7, #3]
 8007ffe:	2b0b      	cmp	r3, #11
 8008000:	d104      	bne.n	800800c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xc4>
		this->print((char*) "\tNo Sleep Pin\r\n");
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4814      	ldr	r0, [pc, #80]	; (8008058 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x110>)
 8008008:	4798      	blx	r3
}
 800800a:	e00b      	b.n	8008024 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if(error == 20){
 800800c:	78fb      	ldrb	r3, [r7, #3]
 800800e:	2b14      	cmp	r3, #20
 8008010:	d104      	bne.n	800801c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xd4>
		this->print((char*) "\tDEBUG LINE REACHED\r\n");
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4811      	ldr	r0, [pc, #68]	; (800805c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x114>)
 8008018:	4798      	blx	r3
}
 800801a:	e003      	b.n	8008024 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
		this->print((char*) "\tUNKNOWN\r\n");
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	480f      	ldr	r0, [pc, #60]	; (8008060 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x118>)
 8008022:	4798      	blx	r3
}
 8008024:	bf00      	nop
 8008026:	3708      	adds	r7, #8
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	0801e6a4 	.word	0x0801e6a4
 8008030:	0801e6b0 	.word	0x0801e6b0
 8008034:	0801e6c4 	.word	0x0801e6c4
 8008038:	0801e6d8 	.word	0x0801e6d8
 800803c:	0801e6ec 	.word	0x0801e6ec
 8008040:	0801e6fc 	.word	0x0801e6fc
 8008044:	0801e720 	.word	0x0801e720
 8008048:	0801e738 	.word	0x0801e738
 800804c:	0801e750 	.word	0x0801e750
 8008050:	0801e760 	.word	0x0801e760
 8008054:	0801e770 	.word	0x0801e770
 8008058:	0801e780 	.word	0x0801e780
 800805c:	0801e790 	.word	0x0801e790
 8008060:	0801e7a8 	.word	0x0801e7a8

08008064 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>:


/*
 * This function requests the satellite modem's IMEI number.
 */
boolean IridiumSBD::MRT_Iridium_getIMEI(void){
 8008064:	b580      	push	{r7, lr}
 8008066:	b092      	sub	sp, #72	; 0x48
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]

	//Check if we already have the IMEI
	if (strcmp(IMEI,"000000000000000")==0){
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	491f      	ldr	r1, [pc, #124]	; (80080f0 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x8c>)
 8008072:	4618      	mov	r0, r3
 8008074:	f7f8 f8bc 	bl	80001f0 <strcmp>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d124      	bne.n	80080c8 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x64>

		//Reset the IMEI
		IMEI=new char[16];
 800807e:	2010      	movs	r0, #16
 8008080:	f00e fe37 	bl	8016cf2 <_Znaj>
 8008084:	4603      	mov	r3, r0
 8008086:	461a      	mov	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	605a      	str	r2, [r3, #4]

		// Get the IMEI
		this->print((char*) "\r\nIridium: Retrieving the IMEI\r\n");
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4818      	ldr	r0, [pc, #96]	; (80080f4 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x90>)
 8008092:	4798      	blx	r3
		int err = this->getIMEI(IMEI, 16);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	2210      	movs	r2, #16
 800809a:	4619      	mov	r1, r3
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f7fd ff1b 	bl	8005ed8 <_ZN10IridiumSBD7getIMEIEPcj>
 80080a2:	6478      	str	r0, [r7, #68]	; 0x44
		if (err != ISBD_SUCCESS)
 80080a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00e      	beq.n	80080c8 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x64>
		{
			char str[24+sizeof(int)];
		    sprintf(str, "\tgetIMEI failed: error %i\r\n", err);
 80080aa:	f107 030c 	add.w	r3, r7, #12
 80080ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080b0:	4911      	ldr	r1, [pc, #68]	; (80080f8 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x94>)
 80080b2:	4618      	mov	r0, r3
 80080b4:	f010 fb60 	bl	8018778 <siprintf>
		    this->print((char*) str);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f107 020c 	add.w	r2, r7, #12
 80080c0:	4610      	mov	r0, r2
 80080c2:	4798      	blx	r3
		    return false;
 80080c4:	2300      	movs	r3, #0
 80080c6:	e00e      	b.n	80080e6 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x82>
		  }
	}

	char str[28];//IMEI is 15 integers long
	sprintf(str, "\tIMEI is %s\r\n", IMEI);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685a      	ldr	r2, [r3, #4]
 80080cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80080d0:	490a      	ldr	r1, [pc, #40]	; (80080fc <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x98>)
 80080d2:	4618      	mov	r0, r3
 80080d4:	f010 fb50 	bl	8018778 <siprintf>
	this->print((char*) str);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80080e0:	4610      	mov	r0, r2
 80080e2:	4798      	blx	r3
	return true;
 80080e4:	2301      	movs	r3, #1
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3748      	adds	r7, #72	; 0x48
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	0801e5a0 	.word	0x0801e5a0
 80080f4:	0801e7b4 	.word	0x0801e7b4
 80080f8:	0801e7d8 	.word	0x0801e7d8
 80080fc:	0801e7f4 	.word	0x0801e7f4

08008100 <_ZN10IridiumSBD15MRT_Iridium_CSQEv>:
 * This sketch checks the Iridium signal quality and returns the status
 * of the Network Available signal.
 *
 * The boolean param is if you want to check for network availability
 */
int IridiumSBD::MRT_Iridium_CSQ(){
 8008100:	b580      	push	{r7, lr}
 8008102:	b09e      	sub	sp, #120	; 0x78
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
	this->print((char*) "\r\nIridium: Checking Signal Quality\r\n");
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	481c      	ldr	r0, [pc, #112]	; (8008180 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x80>)
 800810e:	4798      	blx	r3
	int signalQuality = -1;
 8008110:	f04f 33ff 	mov.w	r3, #4294967295
 8008114:	673b      	str	r3, [r7, #112]	; 0x70

	this->MRT_Iridium_getIMEI();
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7ff ffa4 	bl	8008064 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>

	// Check the signal quality.
	// This returns a number between 0 and 5.
	// 2 or better is preferred.
	int err = this->getSignalQuality(signalQuality);
 800811c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008120:	4619      	mov	r1, r3
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f7fd fc60 	bl	80059e8 <_ZN10IridiumSBD16getSignalQualityERi>
 8008128:	6778      	str	r0, [r7, #116]	; 0x74
	if (err != ISBD_SUCCESS)
 800812a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800812c:	2b00      	cmp	r3, #0
 800812e:	d015      	beq.n	800815c <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x5c>
	{
	  char str[34+sizeof(int)];
	  sprintf(str, "\tSignalQuality failed: error  %i\r\n", err);
 8008130:	f107 030c 	add.w	r3, r7, #12
 8008134:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008136:	4913      	ldr	r1, [pc, #76]	; (8008184 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x84>)
 8008138:	4618      	mov	r0, r3
 800813a:	f010 fb1d 	bl	8018778 <siprintf>
	  this->print((char*) str);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f107 020c 	add.w	r2, r7, #12
 8008146:	4610      	mov	r0, r2
 8008148:	4798      	blx	r3
	  this->MRT_Iridium_ErrorMessage(err);
 800814a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800814c:	b2db      	uxtb	r3, r3
 800814e:	4619      	mov	r1, r3
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7ff fef9 	bl	8007f48 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
	  return -1;
 8008156:	f04f 33ff 	mov.w	r3, #4294967295
 800815a:	e00d      	b.n	8008178 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x78>
	}

	char str[56+sizeof(int)];
	sprintf(str, "t\On a scale of 0 to 5, signal quality is currently  %i\r\n", signalQuality);
 800815c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800815e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008162:	4909      	ldr	r1, [pc, #36]	; (8008188 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x88>)
 8008164:	4618      	mov	r0, r3
 8008166:	f010 fb07 	bl	8018778 <siprintf>
	this->print((char*) str);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008172:	4610      	mov	r0, r2
 8008174:	4798      	blx	r3

	return signalQuality;
 8008176:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8008178:	4618      	mov	r0, r3
 800817a:	3778      	adds	r7, #120	; 0x78
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	0801e804 	.word	0x0801e804
 8008184:	0801e82c 	.word	0x0801e82c
 8008188:	0801e850 	.word	0x0801e850

0800818c <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv>:


/*
 * This function checks if a network is available
 */
boolean IridiumSBD::MRT_Iridium_NetworkAvailability(void){
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]

	// Check Network Available.
	this->print((char*) "\r\nIridium: Checking if Network is Available:\t");
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	480c      	ldr	r0, [pc, #48]	; (80081cc <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x40>)
 800819a:	4798      	blx	r3
	if (!this->checkNetworkAvailable()){
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f7fd fe4d 	bl	8005e3c <_ZN10IridiumSBD21checkNetworkAvailableEv>
 80081a2:	4603      	mov	r3, r0
 80081a4:	f083 0301 	eor.w	r3, r3, #1
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d005      	beq.n	80081ba <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x2e>
		this->print((char*) "not available.\r\n");
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4807      	ldr	r0, [pc, #28]	; (80081d0 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x44>)
 80081b4:	4798      	blx	r3
		//diagprint(F("(This might be because the 9603N has not yet aquired the ring channel.)\r\n"));
		return false;
 80081b6:	2300      	movs	r3, #0
 80081b8:	e004      	b.n	80081c4 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x38>
	}

	this->print((char*) "available.\r\n");
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4805      	ldr	r0, [pc, #20]	; (80081d4 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x48>)
 80081c0:	4798      	blx	r3
	return true;
 80081c2:	2301      	movs	r3, #1
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	0801e88c 	.word	0x0801e88c
 80081d0:	0801e8bc 	.word	0x0801e8bc
 80081d4:	0801e8d0 	.word	0x0801e8d0

080081d8 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>:


/*
 * This function requests the time
 */
boolean IridiumSBD::MRT_Iridium_getTime(void){
 80081d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081da:	b0a1      	sub	sp, #132	; 0x84
 80081dc:	af04      	add	r7, sp, #16
 80081de:	6078      	str	r0, [r7, #4]
	this->print((char*) "\r\nIridium: Retrieving time\r\n");
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4820      	ldr	r0, [pc, #128]	; (8008268 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x90>)
 80081e6:	4798      	blx	r3
	struct tm t; // struct tm is defined in time.h
	int err = this->getSystemTime(t); // Ask the 9603N for the system time
 80081e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80081ec:	4619      	mov	r1, r3
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f7fd fc46 	bl	8005a80 <_ZN10IridiumSBD13getSystemTimeER2tm>
 80081f4:	66f8      	str	r0, [r7, #108]	; 0x6c
	if (err == ISBD_SUCCESS) // Was it successful?
 80081f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d11c      	bne.n	8008236 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x5e>
	    {
		char buf[61];
		sprintf(buf, "\r\n\t<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 80081fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		sprintf(buf, "\r\n\t<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 80081fe:	f203 756c 	addw	r5, r3, #1900	; 0x76c
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 8008202:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		sprintf(buf, "\r\n\t<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 8008204:	1c5e      	adds	r6, r3, #1
 8008206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008208:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800820a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800820c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800820e:	f107 0408 	add.w	r4, r7, #8
 8008212:	9003      	str	r0, [sp, #12]
 8008214:	9102      	str	r1, [sp, #8]
 8008216:	9201      	str	r2, [sp, #4]
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	4633      	mov	r3, r6
 800821c:	462a      	mov	r2, r5
 800821e:	4913      	ldr	r1, [pc, #76]	; (800826c <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x94>)
 8008220:	4620      	mov	r0, r4
 8008222:	f010 faa9 	bl	8018778 <siprintf>
		this->print((char*) buf);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f107 0208 	add.w	r2, r7, #8
 800822e:	4610      	mov	r0, r2
 8008230:	4798      	blx	r3
		return true;
 8008232:	2301      	movs	r3, #1
 8008234:	e013      	b.n	800825e <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x86>
	}

	else if (err == ISBD_NO_NETWORK) // Did it fail because the 9603N has not yet seen the network?
 8008236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008238:	2b0c      	cmp	r3, #12
 800823a:	d105      	bne.n	8008248 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x70>
	     {
		 this->print((char*) "\tNo network detected.\r\n");
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	480b      	ldr	r0, [pc, #44]	; (8008270 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x98>)
 8008242:	4798      	blx	r3
	   	 return false;
 8008244:	2300      	movs	r3, #0
 8008246:	e00a      	b.n	800825e <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x86>
	}

	else
	    {
		this->print((char*) "\tUnexpected Error ");
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4809      	ldr	r0, [pc, #36]	; (8008274 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x9c>)
 800824e:	4798      	blx	r3
		this->MRT_Iridium_ErrorMessage(err);
 8008250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008252:	b2db      	uxtb	r3, r3
 8008254:	4619      	mov	r1, r3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f7ff fe76 	bl	8007f48 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
		return false;
 800825c:	2300      	movs	r3, #0
	}
}
 800825e:	4618      	mov	r0, r3
 8008260:	3774      	adds	r7, #116	; 0x74
 8008262:	46bd      	mov	sp, r7
 8008264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008266:	bf00      	nop
 8008268:	0801e8e0 	.word	0x0801e8e0
 800826c:	0801e900 	.word	0x0801e900
 8008270:	0801e93c 	.word	0x0801e93c
 8008274:	0801e954 	.word	0x0801e954

08008278 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc>:
 * This sketch sends a "Hello, world!" message from the satellite modem.
 * If you have activated your account and have credits, this message
 * should arrive at the endpoints (delivery group) you have configured
 * (email address or HTTP POST).
 */
boolean IridiumSBD::MRT_Iridium_sendMessage(char* msg){
 8008278:	b580      	push	{r7, lr}
 800827a:	b094      	sub	sp, #80	; 0x50
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
	int temp = this->atTimeout; //Save default atTimeout
	adjustATTimeout(timeout);
*/

	// Send the message
	this->print((char*) "\r\nIridium: Trying to send the message.  This might take several minutes.\r\n");
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4828      	ldr	r0, [pc, #160]	; (8008328 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xb0>)
 8008288:	4798      	blx	r3
	int err = this->sendSBDText((const char*) msg);
 800828a:	6839      	ldr	r1, [r7, #0]
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f7fd fb87 	bl	80059a0 <_ZN10IridiumSBD11sendSBDTextEPKc>
 8008292:	64f8      	str	r0, [r7, #76]	; 0x4c
	//int err = this->sendSBDText((const char*) "Hello, world!");
	//int err = ISBD_SENDRECEIVE_TIMEOUT;

	if (err != ISBD_SUCCESS){
 8008294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008296:	2b00      	cmp	r3, #0
 8008298:	d01b      	beq.n	80082d2 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0x5a>
		char str[27+sizeof(int)];
		sprintf(str, "\tsendSBDText failed: error -> %i\r\n", err);
 800829a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800829e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082a0:	4922      	ldr	r1, [pc, #136]	; (800832c <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xb4>)
 80082a2:	4618      	mov	r0, r3
 80082a4:	f010 fa68 	bl	8018778 <siprintf>
		this->print((char*) str);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80082b0:	4610      	mov	r0, r2
 80082b2:	4798      	blx	r3
	    if (err == ISBD_SENDRECEIVE_TIMEOUT){
 80082b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082b6:	2b07      	cmp	r3, #7
 80082b8:	d103      	bne.n	80082c2 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0x4a>
	    	this->print((char*) "\tTry again with a better view of the sky.\r\n");
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	481c      	ldr	r0, [pc, #112]	; (8008330 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xb8>)
 80082c0:	4798      	blx	r3
	    }
	    this->MRT_Iridium_ErrorMessage((uint8_t) err);
 80082c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	4619      	mov	r1, r3
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f7ff fe3d 	bl	8007f48 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
	    return false;
 80082ce:	2300      	movs	r3, #0
 80082d0:	e025      	b.n	800831e <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xa6>
	}

	else{
		this->print((char*) "\tMessage sent\r\n");
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4817      	ldr	r0, [pc, #92]	; (8008334 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xbc>)
 80082d8:	4798      	blx	r3
	}

	// Clear the Mobile Originated message buffer
	this->print((char*) "\tClearing the MO buffer.\r\n");
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4816      	ldr	r0, [pc, #88]	; (8008338 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xc0>)
 80082e0:	4798      	blx	r3
	err = this->clearBuffers(ISBD_CLEAR_MO); // Clear MO buffer
 80082e2:	2100      	movs	r1, #0
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f7fd fdd9 	bl	8005e9c <_ZN10IridiumSBD12clearBuffersEi>
 80082ea:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (err != ISBD_SUCCESS){
 80082ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d014      	beq.n	800831c <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xa4>
		char str[27+sizeof(int)];
		sprintf(str, "clearBuffers failed: error -> %i\r\n", err);
 80082f2:	f107 030c 	add.w	r3, r7, #12
 80082f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082f8:	4910      	ldr	r1, [pc, #64]	; (800833c <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xc4>)
 80082fa:	4618      	mov	r0, r3
 80082fc:	f010 fa3c 	bl	8018778 <siprintf>
		this->print((char*) str);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f107 020c 	add.w	r2, r7, #12
 8008308:	4610      	mov	r0, r2
 800830a:	4798      	blx	r3
		this->MRT_Iridium_ErrorMessage((uint8_t) err);
 800830c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800830e:	b2db      	uxtb	r3, r3
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7ff fe18 	bl	8007f48 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
		return false;
 8008318:	2300      	movs	r3, #0
 800831a:	e000      	b.n	800831e <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xa6>
	}
	return true;
 800831c:	2301      	movs	r3, #1
}
 800831e:	4618      	mov	r0, r3
 8008320:	3750      	adds	r7, #80	; 0x50
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	0801e968 	.word	0x0801e968
 800832c:	0801e9b4 	.word	0x0801e9b4
 8008330:	0801e9d8 	.word	0x0801e9d8
 8008334:	0801ea04 	.word	0x0801ea04
 8008338:	0801ea14 	.word	0x0801ea14
 800833c:	0801ea30 	.word	0x0801ea30

08008340 <_ZN10IridiumSBDC1ER7TwoWireh>:
      if (ringPin != -1)
         pinMode(ringPin, INPUT);
   }
   */

IridiumSBD(TwoWire &wirePort = IRIDIUM_I2C, uint8_t deviceAddress = 0x63)
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	4613      	mov	r3, r2
 800834c:	71fb      	strb	r3, [r7, #7]
   {
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	66da      	str	r2, [r3, #108]	; 0x6c
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2205      	movs	r2, #5
 8008358:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2202      	movs	r2, #2
 8008368:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2204      	movs	r2, #4
 8008370:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2208      	movs	r2, #8
 8008378:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2210      	movs	r2, #16
 8008380:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2220      	movs	r2, #32
 8008388:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2240      	movs	r2, #64	; 0x40
 8008390:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
      useSerial = false;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	745a      	strb	r2, [r3, #17]
      wireport = &wirePort;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	60da      	str	r2, [r3, #12]
      deviceaddress = deviceAddress;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	79fa      	ldrb	r2, [r7, #7]
 80083a4:	741a      	strb	r2, [r3, #16]
      sbdixInterval = ISBD_USB_SBDIX_INTERVAL;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	221e      	movs	r2, #30
 80083aa:	65da      	str	r2, [r3, #92]	; 0x5c
      atTimeout = ISBD_DEFAULT_AT_TIMEOUT;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	221e      	movs	r2, #30
 80083b0:	661a      	str	r2, [r3, #96]	; 0x60
      sendReceiveTimeout = ISBD_DEFAULT_SENDRECEIVE_TIME;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80083b8:	665a      	str	r2, [r3, #100]	; 0x64
      startupTimeout = ISBD_STARTUP_MAX_TIME;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	22f0      	movs	r2, #240	; 0xf0
 80083be:	669a      	str	r2, [r3, #104]	; 0x68
      remainingMessages = -1;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f04f 32ff 	mov.w	r2, #4294967295
 80083c6:	675a      	str	r2, [r3, #116]	; 0x74
      asleep = true;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
      reentrant = false;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
      sleepPin = -1;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f04f 32ff 	mov.w	r2, #4294967295
 80083de:	67da      	str	r2, [r3, #124]	; 0x7c
      sleepPinConfigured = false;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      ringPin = -1;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f04f 32ff 	mov.w	r2, #4294967295
 80083ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      msstmWorkaroundRequested = false;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
      ringAlertsEnabled = true;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2201      	movs	r2, #1
 80083fe:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
      ringAsserted = false;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      lastPowerOnTime = 0UL;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2200      	movs	r2, #0
 800840e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      head = SBDRING;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	4a0c      	ldr	r2, [pc, #48]	; (8008448 <_ZN10IridiumSBDC1ER7TwoWireh+0x108>)
 8008416:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      tail = SBDRING;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	4a0a      	ldr	r2, [pc, #40]	; (8008448 <_ZN10IridiumSBDC1ER7TwoWireh+0x108>)
 800841e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      nextChar = -1;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f04f 32ff 	mov.w	r2, #4294967295
 8008428:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      i2c_ser_buffer_tail = 0;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	655a      	str	r2, [r3, #84]	; 0x54
      i2c_ser_buffer_head = 0;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	659a      	str	r2, [r3, #88]	; 0x58
   }
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	4618      	mov	r0, r3
 800843c:	3714      	adds	r7, #20
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	0801ec4c 	.word	0x0801ec4c

0800844c <MRT_Iridium_Constructor>:

//C structs
struct HIRIDIUM hiridium;


void MRT_Iridium_Constructor(){
 800844c:	b598      	push	{r3, r4, r7, lr}
 800844e:	af00      	add	r7, sp, #0
	if (E_T==NULL){
 8008450:	4b08      	ldr	r3, [pc, #32]	; (8008474 <MRT_Iridium_Constructor+0x28>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10b      	bne.n	8008470 <MRT_Iridium_Constructor+0x24>
		E_T = new IridiumSBD();
 8008458:	20a4      	movs	r0, #164	; 0xa4
 800845a:	f00e fc39 	bl	8016cd0 <_Znwj>
 800845e:	4603      	mov	r3, r0
 8008460:	461c      	mov	r4, r3
 8008462:	2263      	movs	r2, #99	; 0x63
 8008464:	4904      	ldr	r1, [pc, #16]	; (8008478 <MRT_Iridium_Constructor+0x2c>)
 8008466:	4620      	mov	r0, r4
 8008468:	f7ff ff6a 	bl	8008340 <_ZN10IridiumSBDC1ER7TwoWireh>
 800846c:	4b01      	ldr	r3, [pc, #4]	; (8008474 <MRT_Iridium_Constructor+0x28>)
 800846e:	601c      	str	r4, [r3, #0]
	}
}
 8008470:	bf00      	nop
 8008472:	bd98      	pop	{r3, r4, r7, pc}
 8008474:	20000484 	.word	0x20000484
 8008478:	2000049c 	.word	0x2000049c

0800847c <MRT_Iridium_Init>:
		E_T = NULL;
	}
}


struct HIRIDIUM MRT_Iridium_Init(uint8_t timeout, uint8_t i2c_bus, void (*iridium_print)(char*)){
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	607b      	str	r3, [r7, #4]
 8008486:	460b      	mov	r3, r1
 8008488:	72fb      	strb	r3, [r7, #11]
 800848a:	4613      	mov	r3, r2
 800848c:	72bb      	strb	r3, [r7, #10]
	MRT_Iridium_Constructor();
 800848e:	f7ff ffdd 	bl	800844c <MRT_Iridium_Constructor>
	E_T->MRT_Iridium_setup(timeout, i2c_bus, iridium_print);
 8008492:	4b0d      	ldr	r3, [pc, #52]	; (80084c8 <MRT_Iridium_Init+0x4c>)
 8008494:	6818      	ldr	r0, [r3, #0]
 8008496:	7aba      	ldrb	r2, [r7, #10]
 8008498:	7af9      	ldrb	r1, [r7, #11]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f7ff fc64 	bl	8007d68 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE>
	HIRIDIUM iridium_handler;
	iridium_handler.CSQ = &MRT_Iridium_CSQ;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4a0a      	ldr	r2, [pc, #40]	; (80084cc <MRT_Iridium_Init+0x50>)
 80084a4:	60da      	str	r2, [r3, #12]
	iridium_handler.getIMEI = &MRT_Iridium_getIMEI;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	4a09      	ldr	r2, [pc, #36]	; (80084d0 <MRT_Iridium_Init+0x54>)
 80084aa:	601a      	str	r2, [r3, #0]
	iridium_handler.getNetworkAvailability = &MRT_Iridium_NetworkAvailability;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	4a09      	ldr	r2, [pc, #36]	; (80084d4 <MRT_Iridium_Init+0x58>)
 80084b0:	609a      	str	r2, [r3, #8]
	iridium_handler.getTime = &MRT_Iridium_getTime;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	4a08      	ldr	r2, [pc, #32]	; (80084d8 <MRT_Iridium_Init+0x5c>)
 80084b6:	605a      	str	r2, [r3, #4]
	iridium_handler.sendMessage = &MRT_Iridium_sendMessage;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	4a08      	ldr	r2, [pc, #32]	; (80084dc <MRT_Iridium_Init+0x60>)
 80084bc:	611a      	str	r2, [r3, #16]
	return iridium_handler;
 80084be:	bf00      	nop
}
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	20000484 	.word	0x20000484
 80084cc:	08008505 	.word	0x08008505
 80084d0:	080084e1 	.word	0x080084e1
 80084d4:	0800851d 	.word	0x0800851d
 80084d8:	08008541 	.word	0x08008541
 80084dc:	08008565 	.word	0x08008565

080084e0 <MRT_Iridium_getIMEI>:

void MRT_Iridium_ErrorMessage(uint8_t error){
	return E_T->MRT_Iridium_ErrorMessage(error);
}

bool MRT_Iridium_getIMEI(void){
 80084e0:	b580      	push	{r7, lr}
 80084e2:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_getIMEI();
 80084e4:	4b06      	ldr	r3, [pc, #24]	; (8008500 <MRT_Iridium_getIMEI+0x20>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7ff fdbb 	bl	8008064 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	bf14      	ite	ne
 80084f4:	2301      	movne	r3, #1
 80084f6:	2300      	moveq	r3, #0
 80084f8:	b2db      	uxtb	r3, r3
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	20000484 	.word	0x20000484

08008504 <MRT_Iridium_CSQ>:


int MRT_Iridium_CSQ(){
 8008504:	b580      	push	{r7, lr}
 8008506:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_CSQ();
 8008508:	4b03      	ldr	r3, [pc, #12]	; (8008518 <MRT_Iridium_CSQ+0x14>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4618      	mov	r0, r3
 800850e:	f7ff fdf7 	bl	8008100 <_ZN10IridiumSBD15MRT_Iridium_CSQEv>
 8008512:	4603      	mov	r3, r0
}
 8008514:	4618      	mov	r0, r3
 8008516:	bd80      	pop	{r7, pc}
 8008518:	20000484 	.word	0x20000484

0800851c <MRT_Iridium_NetworkAvailability>:

bool MRT_Iridium_NetworkAvailability(){
 800851c:	b580      	push	{r7, lr}
 800851e:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_NetworkAvailability();
 8008520:	4b06      	ldr	r3, [pc, #24]	; (800853c <MRT_Iridium_NetworkAvailability+0x20>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4618      	mov	r0, r3
 8008526:	f7ff fe31 	bl	800818c <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	bf14      	ite	ne
 8008530:	2301      	movne	r3, #1
 8008532:	2300      	moveq	r3, #0
 8008534:	b2db      	uxtb	r3, r3
}
 8008536:	4618      	mov	r0, r3
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	20000484 	.word	0x20000484

08008540 <MRT_Iridium_getTime>:


bool MRT_Iridium_getTime(void){
 8008540:	b580      	push	{r7, lr}
 8008542:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_getTime();
 8008544:	4b06      	ldr	r3, [pc, #24]	; (8008560 <MRT_Iridium_getTime+0x20>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4618      	mov	r0, r3
 800854a:	f7ff fe45 	bl	80081d8 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	bf14      	ite	ne
 8008554:	2301      	movne	r3, #1
 8008556:	2300      	moveq	r3, #0
 8008558:	b2db      	uxtb	r3, r3
}
 800855a:	4618      	mov	r0, r3
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	20000484 	.word	0x20000484

08008564 <MRT_Iridium_sendMessage>:

bool MRT_Iridium_sendMessage(char* msg){
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
	return E_T->MRT_Iridium_sendMessage(msg);
 800856c:	4b07      	ldr	r3, [pc, #28]	; (800858c <MRT_Iridium_sendMessage+0x28>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6879      	ldr	r1, [r7, #4]
 8008572:	4618      	mov	r0, r3
 8008574:	f7ff fe80 	bl	8008278 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	bf14      	ite	ne
 800857e:	2301      	movne	r3, #1
 8008580:	2300      	moveq	r3, #0
 8008582:	b2db      	uxtb	r3, r3
}
 8008584:	4618      	mov	r0, r3
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	20000484 	.word	0x20000484

08008590 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8008590:	b590      	push	{r4, r7, lr}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <_ZN5Print5writeEPKc+0x14>
 80085a0:	2300      	movs	r3, #0
 80085a2:	e00d      	b.n	80085c0 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	3304      	adds	r3, #4
 80085aa:	681c      	ldr	r4, [r3, #0]
 80085ac:	6838      	ldr	r0, [r7, #0]
 80085ae:	f7f7 fe29 	bl	8000204 <strlen>
 80085b2:	4603      	mov	r3, r0
 80085b4:	461a      	mov	r2, r3
 80085b6:	6839      	ldr	r1, [r7, #0]
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	47a0      	blx	r4
 80085bc:	4603      	mov	r3, r0
 80085be:	bf00      	nop
    }
 80085c0:	4618      	mov	r0, r3
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd90      	pop	{r4, r7, pc}

080085c8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 80085d4:	2300      	movs	r3, #0
 80085d6:	617b      	str	r3, [r7, #20]
  while (size--) {
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	1e5a      	subs	r2, r3, #1
 80085dc:	607a      	str	r2, [r7, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	bf14      	ite	ne
 80085e2:	2301      	movne	r3, #1
 80085e4:	2300      	moveq	r3, #0
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00e      	beq.n	800860a <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	1c59      	adds	r1, r3, #1
 80085f6:	60b9      	str	r1, [r7, #8]
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	4619      	mov	r1, r3
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	4790      	blx	r2
 8008600:	4602      	mov	r2, r0
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	4413      	add	r3, r2
 8008606:	617b      	str	r3, [r7, #20]
  while (size--) {
 8008608:	e7e6      	b.n	80085d8 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 800860a:	697b      	ldr	r3, [r7, #20]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 800861e:	6839      	ldr	r1, [r7, #0]
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f805 	bl	8008630 <_ZN5Print5printEPKc>
 8008626:	4603      	mov	r3, r0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  return write(str);
 800863a:	6839      	ldr	r1, [r7, #0]
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f7ff ffa7 	bl	8008590 <_ZN5Print5writeEPKc>
 8008642:	4603      	mov	r3, r0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	460b      	mov	r3, r1
 8008656:	70fb      	strb	r3, [r7, #3]
  return write(c);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	78fa      	ldrb	r2, [r7, #3]
 8008660:	4611      	mov	r1, r2
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	4798      	blx	r3
 8008666:	4603      	mov	r3, r0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	68b9      	ldr	r1, [r7, #8]
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f000 f805 	bl	8008690 <_ZN5Print5printEli>
 8008686:	4603      	mov	r3, r0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b086      	sub	sp, #24
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d109      	bne.n	80086b6 <_ZN5Print5printEli+0x26>
    return write(n);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	b2d2      	uxtb	r2, r2
 80086ac:	4611      	mov	r1, r2
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	4798      	blx	r3
 80086b2:	4603      	mov	r3, r0
 80086b4:	e029      	b.n	800870a <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b0a      	cmp	r3, #10
 80086ba:	d11d      	bne.n	80086f8 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	da12      	bge.n	80086e8 <_ZN5Print5printEli+0x58>
      int t = print('-');
 80086c2:	212d      	movs	r1, #45	; 0x2d
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f7ff ffc1 	bl	800864c <_ZN5Print5printEc>
 80086ca:	4603      	mov	r3, r0
 80086cc:	617b      	str	r3, [r7, #20]
      n = -n;
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	425b      	negs	r3, r3
 80086d2:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	220a      	movs	r2, #10
 80086d8:	4619      	mov	r1, r3
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f000 f819 	bl	8008712 <_ZN5Print11printNumberEmh>
 80086e0:	4602      	mov	r2, r0
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	4413      	add	r3, r2
 80086e6:	e010      	b.n	800870a <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	220a      	movs	r2, #10
 80086ec:	4619      	mov	r1, r3
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f000 f80f 	bl	8008712 <_ZN5Print11printNumberEmh>
 80086f4:	4603      	mov	r3, r0
 80086f6:	e008      	b.n	800870a <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	b2d2      	uxtb	r2, r2
 80086fe:	4619      	mov	r1, r3
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f000 f806 	bl	8008712 <_ZN5Print11printNumberEmh>
 8008706:	4603      	mov	r3, r0
 8008708:	bf00      	nop
  }
}
 800870a:	4618      	mov	r0, r3
 800870c:	3718      	adds	r7, #24
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8008712:	b580      	push	{r7, lr}
 8008714:	b090      	sub	sp, #64	; 0x40
 8008716:	af00      	add	r7, sp, #0
 8008718:	60f8      	str	r0, [r7, #12]
 800871a:	60b9      	str	r1, [r7, #8]
 800871c:	4613      	mov	r3, r2
 800871e:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 8008720:	f107 0314 	add.w	r3, r7, #20
 8008724:	3320      	adds	r3, #32
 8008726:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 8008728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800872a:	2200      	movs	r2, #0
 800872c:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 800872e:	79fb      	ldrb	r3, [r7, #7]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d801      	bhi.n	8008738 <_ZN5Print11printNumberEmh+0x26>
 8008734:	230a      	movs	r3, #10
 8008736:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 800873c:	79fb      	ldrb	r3, [r7, #7]
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	fbb2 f3f3 	udiv	r3, r2, r3
 8008744:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 8008746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008748:	b2da      	uxtb	r2, r3
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	b2db      	uxtb	r3, r3
 800874e:	79f9      	ldrb	r1, [r7, #7]
 8008750:	fb11 f303 	smulbb	r3, r1, r3
 8008754:	b2db      	uxtb	r3, r3
 8008756:	1ad3      	subs	r3, r2, r3
 8008758:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 800875c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008760:	2b09      	cmp	r3, #9
 8008762:	d804      	bhi.n	800876e <_ZN5Print11printNumberEmh+0x5c>
 8008764:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008768:	3330      	adds	r3, #48	; 0x30
 800876a:	b2db      	uxtb	r3, r3
 800876c:	e003      	b.n	8008776 <_ZN5Print11printNumberEmh+0x64>
 800876e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008772:	3337      	adds	r3, #55	; 0x37
 8008774:	b2db      	uxtb	r3, r3
 8008776:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008778:	3a01      	subs	r2, #1
 800877a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800877c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800877e:	7013      	strb	r3, [r2, #0]
  } while(n);
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d000      	beq.n	8008788 <_ZN5Print11printNumberEmh+0x76>
  do {
 8008786:	e7d7      	b.n	8008738 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8008788:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f7ff ff00 	bl	8008590 <_ZN5Print5writeEPKc>
 8008790:	4603      	mov	r3, r0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3740      	adds	r7, #64	; 0x40
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
	...

0800879c <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	4a06      	ldr	r2, [pc, #24]	; (80087c0 <_ZN5PrintC1Ev+0x24>)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	601a      	str	r2, [r3, #0]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	605a      	str	r2, [r3, #4]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4618      	mov	r0, r3
 80087b4:	370c      	adds	r7, #12
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	0801ec60 	.word	0x0801ec60

080087c4 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7ff ffe4 	bl	800879c <_ZN5PrintC1Ev>
 80087d4:	4a05      	ldr	r2, [pc, #20]	; (80087ec <_ZN6StreamC1Ev+0x28>)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	601a      	str	r2, [r3, #0]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80087e0:	609a      	str	r2, [r3, #8]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4618      	mov	r0, r3
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	0801ec90 	.word	0x0801ec90

080087f0 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7ff ffe1 	bl	80087c4 <_ZN6StreamC1Ev>
 8008802:	4a16      	ldr	r2, [pc, #88]	; (800885c <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	3390      	adds	r3, #144	; 0x90
 8008812:	2220      	movs	r2, #32
 8008814:	2100      	movs	r1, #0
 8008816:	4618      	mov	r0, r3
 8008818:	f00e fd1c 	bl	8017254 <memset>
  rxBufferIndex = 0;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4618      	mov	r0, r3
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	0801ec70 	.word	0x0801ec70

08008860 <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b086      	sub	sp, #24
 8008864:	af02      	add	r7, sp, #8
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	4608      	mov	r0, r1
 800886a:	4611      	mov	r1, r2
 800886c:	461a      	mov	r2, r3
 800886e:	4603      	mov	r3, r0
 8008870:	70fb      	strb	r3, [r7, #3]
 8008872:	460b      	mov	r3, r1
 8008874:	70bb      	strb	r3, [r7, #2]
 8008876:	4613      	mov	r3, r2
 8008878:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fc24 	bl	80090c8 <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 8008880:	78bb      	ldrb	r3, [r7, #2]
 8008882:	2b20      	cmp	r3, #32
 8008884:	d901      	bls.n	800888a <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 8008886:	2320      	movs	r3, #32
 8008888:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 800888a:	78fb      	ldrb	r3, [r7, #3]
 800888c:	005b      	lsls	r3, r3, #1
 800888e:	b2d9      	uxtb	r1, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8008896:	78b8      	ldrb	r0, [r7, #2]
 8008898:	787b      	ldrb	r3, [r7, #1]
 800889a:	9300      	str	r3, [sp, #0]
 800889c:	4603      	mov	r3, r0
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f9cf 	bl	8008c42 <_ZN7TwoWire15i2c_master_readEhPchh>
 80088a4:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	da02      	bge.n	80088b2 <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 80088ac:	2300      	movs	r3, #0
 80088ae:	73fb      	strb	r3, [r7, #15]
 80088b0:	e001      	b.n	80088b6 <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	7bfa      	ldrb	r2, [r7, #15]
 80088c2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fbcc 	bl	8009064 <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 80088cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b082      	sub	sp, #8
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	460b      	mov	r3, r1
 80088e0:	70fb      	strb	r3, [r7, #3]
 80088e2:	4613      	mov	r3, r2
 80088e4:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80088e6:	78ba      	ldrb	r2, [r7, #2]
 80088e8:	78f9      	ldrb	r1, [r7, #3]
 80088ea:	2301      	movs	r3, #1
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f7ff ffb7 	bl	8008860 <_ZN7TwoWire11requestFromEhhh>
 80088f2:	4603      	mov	r3, r0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	460b      	mov	r3, r1
 8008906:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	78fa      	ldrb	r2, [r7, #3]
 8008914:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8008926:	bf00      	nop
 8008928:	370c      	adds	r7, #12
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr

08008932 <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b086      	sub	sp, #24
 8008936:	af02      	add	r7, sp, #8
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	460b      	mov	r3, r1
 800893c:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fbc2 	bl	80090c8 <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	7c1b      	ldrb	r3, [r3, #16]
 8008948:	0059      	lsls	r1, r3, #1
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f103 0211 	add.w	r2, r3, #17
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008956:	4618      	mov	r0, r3
 8008958:	78fb      	ldrb	r3, [r7, #3]
 800895a:	9300      	str	r3, [sp, #0]
 800895c:	4603      	mov	r3, r0
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fa00 	bl	8008d64 <_ZN7TwoWire16i2c_master_writeEiPKcii>
 8008964:	4603      	mov	r3, r0
 8008966:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fb6f 	bl	8009064 <_ZN7TwoWire15enableInterruptEv>

  return ret;
 8008986:	7bfb      	ldrb	r3, [r7, #15]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 8008998:	2101      	movs	r1, #1
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f7ff ffc9 	bl	8008932 <_ZN7TwoWire15endTransmissionEh>
 80089a0:	4603      	mov	r3, r0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3708      	adds	r7, #8
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b082      	sub	sp, #8
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
 80089b2:	460b      	mov	r3, r1
 80089b4:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d01d      	beq.n	80089fc <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80089c6:	2b1f      	cmp	r3, #31
 80089c8:	d901      	bls.n	80089ce <_ZN7TwoWire5writeEh+0x24>
      return 0;
 80089ca:	2300      	movs	r3, #0
 80089cc:	e028      	b.n	8008a20 <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80089d4:	4619      	mov	r1, r3
 80089d6:	78fa      	ldrb	r2, [r7, #3]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	440b      	add	r3, r1
 80089dc:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80089e4:	3301      	adds	r3, #1
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80089fa:	e010      	b.n	8008a1e <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fb63 	bl	80090c8 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 8008a02:	1cfb      	adds	r3, r7, #3
 8008a04:	2201      	movs	r2, #1
 8008a06:	4619      	mov	r1, r3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fa95 	bl	8008f38 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fb28 	bl	8009064 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	333c      	adds	r3, #60	; 0x3c
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f001 fe35 	bl	800a688 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 8008a1e:	2301      	movs	r3, #1
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b086      	sub	sp, #24
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	607a      	str	r2, [r7, #4]
  if(transmitting){
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d013      	beq.n	8008a66 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 8008a3e:	2300      	movs	r3, #0
 8008a40:	617b      	str	r3, [r7, #20]
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d21e      	bcs.n	8008a88 <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68b9      	ldr	r1, [r7, #8]
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	440a      	add	r2, r1
 8008a56:	7812      	ldrb	r2, [r2, #0]
 8008a58:	4611      	mov	r1, r2
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	3301      	adds	r3, #1
 8008a62:	617b      	str	r3, [r7, #20]
 8008a64:	e7ed      	b.n	8008a42 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f000 fb2e 	bl	80090c8 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	461a      	mov	r2, r3
 8008a70:	68b9      	ldr	r1, [r7, #8]
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f000 fa60 	bl	8008f38 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f000 faf3 	bl	8009064 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	333c      	adds	r3, #60	; 0x3c
 8008a82:	4618      	mov	r0, r3
 8008a84:	f001 fe00 	bl	800a688 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 8008a88:	687b      	ldr	r3, [r7, #4]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3718      	adds	r7, #24
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 8008a92:	b480      	push	{r7}
 8008a94:	b083      	sub	sp, #12
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	1ad3      	subs	r3, r2, r3
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	370c      	adds	r7, #12
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 8008aba:	b480      	push	{r7}
 8008abc:	b085      	sub	sp, #20
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
  int value = -1;
 8008ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ac6:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	bf34      	ite	cc
 8008adc:	2301      	movcc	r3, #1
 8008ade:	2300      	movcs	r3, #0
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d012      	beq.n	8008b0c <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	461a      	mov	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4413      	add	r3, r2
 8008af4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008af8:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	3301      	adds	r3, #1
 8008b04:	b2da      	uxtb	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3714      	adds	r7, #20
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr

08008b1a <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b085      	sub	sp, #20
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
  int value = -1;
 8008b22:	f04f 33ff 	mov.w	r3, #4294967295
 8008b26:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008b2e:	b2da      	uxtb	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	bf34      	ite	cc
 8008b3c:	2301      	movcc	r3, #1
 8008b3e:	2300      	movcs	r3, #0
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d009      	beq.n	8008b5a <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	461a      	mov	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4413      	add	r3, r2
 8008b54:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008b58:	60fb      	str	r3, [r7, #12]
  }

  return value;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3714      	adds	r7, #20
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b88:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008b92:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 8008b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b98:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ba6:	bf0c      	ite	eq
 8008ba8:	2301      	moveq	r3, #1
 8008baa:	2300      	movne	r3, #0
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00b      	beq.n	8008bca <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	1e5a      	subs	r2, r3, #1
 8008bb6:	60fa      	str	r2, [r7, #12]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	bf0c      	ite	eq
 8008bbc:	2301      	moveq	r3, #1
 8008bbe:	2300      	movne	r3, #0
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d0e9      	beq.n	8008b9a <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e021      	b.n	8008c0e <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 8008bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bda:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008be0:	695b      	ldr	r3, [r3, #20]
 8008be2:	f003 0301 	and.w	r3, r3, #1
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	bf14      	ite	ne
 8008bea:	2301      	movne	r3, #1
 8008bec:	2300      	moveq	r3, #0
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d00b      	beq.n	8008c0c <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	1e5a      	subs	r2, r3, #1
 8008bf8:	60fa      	str	r2, [r7, #12]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	bf0c      	ite	eq
 8008bfe:	2301      	moveq	r3, #1
 8008c00:	2300      	movne	r3, #0
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d0e9      	beq.n	8008bdc <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e000      	b.n	8008c0e <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3714      	adds	r7, #20
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr

08008c1a <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 8008c1a:	b480      	push	{r7}
 8008c1c:	b085      	sub	sp, #20
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c26:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	601a      	str	r2, [r3, #0]

    return 0;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3714      	adds	r7, #20
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr

08008c42 <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b08a      	sub	sp, #40	; 0x28
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	60f8      	str	r0, [r7, #12]
 8008c4a:	607a      	str	r2, [r7, #4]
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	460b      	mov	r3, r1
 8008c50:	72fb      	strb	r3, [r7, #11]
 8008c52:	4613      	mov	r3, r2
 8008c54:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c5a:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f7ff ff8d 	bl	8008b7c <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 8008c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c66:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c6c:	695b      	ldr	r3, [r3, #20]
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	bf14      	ite	ne
 8008c76:	2301      	movne	r3, #1
 8008c78:	2300      	moveq	r3, #0
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d008      	beq.n	8008c92 <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 8008c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c82:	3b01      	subs	r3, #1
 8008c84:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8008c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1ed      	bne.n	8008c68 <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 8008c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c90:	e064      	b.n	8008d5c <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 8008c92:	7afb      	ldrb	r3, [r7, #11]
 8008c94:	f043 0301 	orr.w	r3, r3, #1
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 8008ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ca4:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008caa:	695b      	ldr	r3, [r3, #20]
 8008cac:	f003 0302 	and.w	r3, r3, #2
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	bf14      	ite	ne
 8008cb4:	2301      	movne	r3, #1
 8008cb6:	2300      	moveq	r3, #0
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d008      	beq.n	8008cd0 <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1ed      	bne.n	8008ca6 <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 8008cca:	f04f 33ff 	mov.w	r3, #4294967295
 8008cce:	e045      	b.n	8008d5c <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	613b      	str	r3, [r7, #16]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cd8:	695b      	ldr	r3, [r3, #20]
 8008cda:	613b      	str	r3, [r7, #16]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	613b      	str	r3, [r7, #16]
 8008ce4:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	623b      	str	r3, [r7, #32]
 8008cea:	7abb      	ldrb	r3, [r7, #10]
 8008cec:	3b01      	subs	r3, #1
 8008cee:	6a3a      	ldr	r2, [r7, #32]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	da17      	bge.n	8008d24 <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 8008cf4:	f107 0314 	add.w	r3, r7, #20
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f000 f8a4 	bl	8008e4a <_ZN7TwoWire20i2c_master_byte_readEPii>
 8008d02:	61b8      	str	r0, [r7, #24]
        if(ret)
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d002      	beq.n	8008d10 <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 8008d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d0e:	e025      	b.n	8008d5c <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 8008d10:	6979      	ldr	r1, [r7, #20]
 8008d12:	6a3b      	ldr	r3, [r7, #32]
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	4413      	add	r3, r2
 8008d18:	b2ca      	uxtb	r2, r1
 8008d1a:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 8008d1c:	6a3b      	ldr	r3, [r7, #32]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	623b      	str	r3, [r7, #32]
 8008d22:	e7e2      	b.n	8008cea <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 8008d24:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d002      	beq.n	8008d32 <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f7ff ff74 	bl	8008c1a <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 8008d32:	f107 0314 	add.w	r3, r7, #20
 8008d36:	2201      	movs	r2, #1
 8008d38:	4619      	mov	r1, r3
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f000 f885 	bl	8008e4a <_ZN7TwoWire20i2c_master_byte_readEPii>
 8008d40:	61b8      	str	r0, [r7, #24]
    if(ret)
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d002      	beq.n	8008d4e <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 8008d48:	f04f 33ff 	mov.w	r3, #4294967295
 8008d4c:	e006      	b.n	8008d5c <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 8008d4e:	6979      	ldr	r1, [r7, #20]
 8008d50:	6a3b      	ldr	r3, [r7, #32]
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	4413      	add	r3, r2
 8008d56:	b2ca      	uxtb	r2, r1
 8008d58:	701a      	strb	r2, [r3, #0]

    return length;
 8008d5a:	7abb      	ldrb	r3, [r7, #10]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3728      	adds	r7, #40	; 0x28
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b088      	sub	sp, #32
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	60b9      	str	r1, [r7, #8]
 8008d6e:	607a      	str	r2, [r7, #4]
 8008d70:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d76:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f7ff feff 	bl	8008b7c <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 8008d7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d82:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d88:	695b      	ldr	r3, [r3, #20]
 8008d8a:	f003 0301 	and.w	r3, r3, #1
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	bf14      	ite	ne
 8008d92:	2301      	movne	r3, #1
 8008d94:	2300      	moveq	r3, #0
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d007      	beq.n	8008dac <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	3b01      	subs	r3, #1
 8008da0:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d1ed      	bne.n	8008d84 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 8008da8:	2304      	movs	r3, #4
 8008daa:	e04a      	b.n	8008e42 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 8008db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dbc:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dc2:	695b      	ldr	r3, [r3, #20]
 8008dc4:	f003 0302 	and.w	r3, r3, #2
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	bf14      	ite	ne
 8008dcc:	2301      	movne	r3, #1
 8008dce:	2300      	moveq	r3, #0
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d007      	beq.n	8008de6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1ed      	bne.n	8008dbe <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 8008de2:	2302      	movs	r3, #2
 8008de4:	e02d      	b.n	8008e42 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8008de6:	2300      	movs	r3, #0
 8008de8:	613b      	str	r3, [r7, #16]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dee:	695b      	ldr	r3, [r3, #20]
 8008df0:	613b      	str	r3, [r7, #16]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008df6:	699b      	ldr	r3, [r3, #24]
 8008df8:	613b      	str	r3, [r7, #16]
 8008dfa:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	61bb      	str	r3, [r7, #24]
 8008e00:	69ba      	ldr	r2, [r7, #24]
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	da15      	bge.n	8008e34 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	4619      	mov	r1, r3
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f000 f85a 	bl	8008ecc <_ZN7TwoWire21i2c_master_byte_writeEi>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	bf14      	ite	ne
 8008e1e:	2301      	movne	r3, #1
 8008e20:	2300      	moveq	r3, #0
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d001      	beq.n	8008e2c <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	e00a      	b.n	8008e42 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	61bb      	str	r3, [r7, #24]
 8008e32:	e7e5      	b.n	8008e00 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 8008e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d002      	beq.n	8008e40 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f7ff feed 	bl	8008c1a <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3720      	adds	r7, #32
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 8008e4a:	b480      	push	{r7}
 8008e4c:	b087      	sub	sp, #28
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	60f8      	str	r0, [r7, #12]
 8008e52:	60b9      	str	r1, [r7, #8]
 8008e54:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e5a:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d006      	beq.n	8008e70 <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	601a      	str	r2, [r3, #0]
 8008e6e:	e005      	b.n	8008e7c <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 8008e7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e80:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e86:	695b      	ldr	r3, [r3, #20]
 8008e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e8c:	2b40      	cmp	r3, #64	; 0x40
 8008e8e:	bf14      	ite	ne
 8008e90:	2301      	movne	r3, #1
 8008e92:	2300      	moveq	r3, #0
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00c      	beq.n	8008eb4 <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	1e5a      	subs	r2, r3, #1
 8008e9e:	617a      	str	r2, [r7, #20]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	bf0c      	ite	eq
 8008ea4:	2301      	moveq	r3, #1
 8008ea6:	2300      	movne	r3, #0
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d0e9      	beq.n	8008e82 <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 8008eae:	f04f 33ff 	mov.w	r3, #4294967295
 8008eb2:	e005      	b.n	8008ec0 <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	461a      	mov	r2, r3
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	601a      	str	r2, [r3, #0]

    return 0;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	371c      	adds	r7, #28
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eda:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 8008ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008eea:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ef0:	695b      	ldr	r3, [r3, #20]
 8008ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ef6:	2b80      	cmp	r3, #128	; 0x80
 8008ef8:	d008      	beq.n	8008f0c <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8008f04:	2b04      	cmp	r3, #4
 8008f06:	d001      	beq.n	8008f0c <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e000      	b.n	8008f0e <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00b      	beq.n	8008f2a <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	1e5a      	subs	r2, r3, #1
 8008f16:	60fa      	str	r2, [r7, #12]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	bf0c      	ite	eq
 8008f1c:	2301      	moveq	r3, #1
 8008f1e:	2300      	movne	r3, #0
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d0e2      	beq.n	8008eec <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 8008f26:	2300      	movs	r3, #0
 8008f28:	e000      	b.n	8008f2c <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 8008f2a:	2301      	movs	r3, #1
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3714      	adds	r7, #20
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b089      	sub	sp, #36	; 0x24
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 8008f44:	2300      	movs	r3, #0
 8008f46:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f4c:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	dd41      	ble.n	8008fd8 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 8008f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f58:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f5e:	695b      	ldr	r3, [r3, #20]
 8008f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f64:	2b80      	cmp	r3, #128	; 0x80
 8008f66:	bf14      	ite	ne
 8008f68:	2301      	movne	r3, #1
 8008f6a:	2300      	moveq	r3, #0
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d008      	beq.n	8008f84 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	3b01      	subs	r3, #1
 8008f76:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1ed      	bne.n	8008f5a <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 8008f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f82:	e068      	b.n	8009056 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	1c5a      	adds	r2, r3, #1
 8008f88:	60ba      	str	r2, [r7, #8]
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	611a      	str	r2, [r3, #16]
        length--;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	3b01      	subs	r3, #1
 8008f96:	607b      	str	r3, [r7, #4]
        size++;
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fa2:	695b      	ldr	r3, [r3, #20]
 8008fa4:	f003 0304 	and.w	r3, r3, #4
 8008fa8:	2b04      	cmp	r3, #4
 8008faa:	d104      	bne.n	8008fb6 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e000      	b.n	8008fb8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d0c8      	beq.n	8008f4e <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	1c5a      	adds	r2, r3, #1
 8008fc0:	60ba      	str	r2, [r7, #8]
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	611a      	str	r2, [r3, #16]
            length--;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	607b      	str	r3, [r7, #4]
            size++;
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 8008fd6:	e7ba      	b.n	8008f4e <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 8008fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fdc:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fe2:	695b      	ldr	r3, [r3, #20]
 8008fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fec:	bf14      	ite	ne
 8008fee:	2301      	movne	r3, #1
 8008ff0:	2300      	moveq	r3, #0
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d008      	beq.n	800900a <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1ec      	bne.n	8008fde <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8009004:	f04f 33ff 	mov.w	r3, #4294967295
 8009008:	e025      	b.n	8009056 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800900e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009012:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 8009014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009018:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800901e:	699b      	ldr	r3, [r3, #24]
 8009020:	f003 0302 	and.w	r3, r3, #2
 8009024:	2b02      	cmp	r3, #2
 8009026:	bf0c      	ite	eq
 8009028:	2301      	moveq	r3, #1
 800902a:	2300      	movne	r3, #0
 800902c:	b2db      	uxtb	r3, r3
 800902e:	2b00      	cmp	r3, #0
 8009030:	d008      	beq.n	8009044 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	3b01      	subs	r3, #1
 8009036:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d1ed      	bne.n	800901a <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 800903e:	f04f 33ff 	mov.w	r3, #4294967295
 8009042:	e008      	b.n	8009056 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2220      	movs	r2, #32
 8009048:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2200      	movs	r2, #0
 8009050:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 8009054:	69bb      	ldr	r3, [r7, #24]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3724      	adds	r7, #36	; 0x24
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr
	...

08009064 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009070:	4a12      	ldr	r2, [pc, #72]	; (80090bc <_ZN7TwoWire15enableInterruptEv+0x58>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d106      	bne.n	8009084 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8009076:	2049      	movs	r0, #73	; 0x49
 8009078:	f000 fc84 	bl	8009984 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800907c:	2048      	movs	r0, #72	; 0x48
 800907e:	f000 fc81 	bl	8009984 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8009082:	e016      	b.n	80090b2 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009088:	4a0d      	ldr	r2, [pc, #52]	; (80090c0 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d106      	bne.n	800909c <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800908e:	2022      	movs	r0, #34	; 0x22
 8009090:	f000 fc78 	bl	8009984 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8009094:	2021      	movs	r0, #33	; 0x21
 8009096:	f000 fc75 	bl	8009984 <HAL_NVIC_EnableIRQ>
}
 800909a:	e00a      	b.n	80090b2 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090a0:	4a08      	ldr	r2, [pc, #32]	; (80090c4 <_ZN7TwoWire15enableInterruptEv+0x60>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d105      	bne.n	80090b2 <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80090a6:	2020      	movs	r0, #32
 80090a8:	f000 fc6c 	bl	8009984 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80090ac:	201f      	movs	r0, #31
 80090ae:	f000 fc69 	bl	8009984 <HAL_NVIC_EnableIRQ>
}
 80090b2:	bf00      	nop
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	40005c00 	.word	0x40005c00
 80090c0:	40005800 	.word	0x40005800
 80090c4:	40005400 	.word	0x40005400

080090c8 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090d4:	4a12      	ldr	r2, [pc, #72]	; (8009120 <_ZN7TwoWire16disableInterruptEv+0x58>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d106      	bne.n	80090e8 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 80090da:	2049      	movs	r0, #73	; 0x49
 80090dc:	f000 fc60 	bl	80099a0 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 80090e0:	2048      	movs	r0, #72	; 0x48
 80090e2:	f000 fc5d 	bl	80099a0 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 80090e6:	e016      	b.n	8009116 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ec:	4a0d      	ldr	r2, [pc, #52]	; (8009124 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d106      	bne.n	8009100 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 80090f2:	2022      	movs	r0, #34	; 0x22
 80090f4:	f000 fc54 	bl	80099a0 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 80090f8:	2021      	movs	r0, #33	; 0x21
 80090fa:	f000 fc51 	bl	80099a0 <HAL_NVIC_DisableIRQ>
}
 80090fe:	e00a      	b.n	8009116 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009104:	4a08      	ldr	r2, [pc, #32]	; (8009128 <_ZN7TwoWire16disableInterruptEv+0x60>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d105      	bne.n	8009116 <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800910a:	2020      	movs	r0, #32
 800910c:	f000 fc48 	bl	80099a0 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8009110:	201f      	movs	r0, #31
 8009112:	f000 fc45 	bl	80099a0 <HAL_NVIC_DisableIRQ>
}
 8009116:	bf00      	nop
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	40005c00 	.word	0x40005c00
 8009124:	40005800 	.word	0x40005800
 8009128:	40005400 	.word	0x40005400

0800912c <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2b01      	cmp	r3, #1
 800913a:	d110      	bne.n	800915e <_Z41__static_initialization_and_destruction_0ii+0x32>
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009142:	4293      	cmp	r3, r2
 8009144:	d10b      	bne.n	800915e <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 8009146:	4908      	ldr	r1, [pc, #32]	; (8009168 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8009148:	4808      	ldr	r0, [pc, #32]	; (800916c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800914a:	f7ff fb51 	bl	80087f0 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 800914e:	4908      	ldr	r1, [pc, #32]	; (8009170 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8009150:	4808      	ldr	r0, [pc, #32]	; (8009174 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8009152:	f7ff fb4d 	bl	80087f0 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 8009156:	4908      	ldr	r1, [pc, #32]	; (8009178 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8009158:	4808      	ldr	r0, [pc, #32]	; (800917c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800915a:	f7ff fb49 	bl	80087f0 <_ZN7TwoWireC1EP11I2C_TypeDef>
 800915e:	bf00      	nop
 8009160:	3708      	adds	r7, #8
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	40005400 	.word	0x40005400
 800916c:	2000049c 	.word	0x2000049c
 8009170:	40005800 	.word	0x40005800
 8009174:	20000554 	.word	0x20000554
 8009178:	40005c00 	.word	0x40005c00
 800917c:	2000060c 	.word	0x2000060c

08009180 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8009180:	b580      	push	{r7, lr}
 8009182:	af00      	add	r7, sp, #0
 8009184:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009188:	2001      	movs	r0, #1
 800918a:	f7ff ffcf 	bl	800912c <_Z41__static_initialization_and_destruction_0ii>
 800918e:	bd80      	pop	{r7, pc}

08009190 <MRT_radio_Init>:
	#endif
}



void MRT_radio_Init(void){
 8009190:	b480      	push	{r7}
 8009192:	af00      	add	r7, sp, #0
	set_BUSY_pin(SX_BUSY_GPIO_Port, SX_BUSY_Pin);
	set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
	set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
	Tx_setup();
	#endif
}
 8009194:	bf00      	nop
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr
	...

080091a0 <MRT_TELEMETRY_Init>:


void MRT_TELEMETRY_Init(void){
 80091a0:	b5b0      	push	{r4, r5, r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0

	MRT_radio_Init();
 80091a6:	f7ff fff3 	bl	8009190 <MRT_radio_Init>

	HAL_IWDG_Refresh(&hiwdg);

	#if IRIDIUM_
	HAL_GPIO_WritePin(Iridium_RST_GPIO_Port, Iridium_RST_Pin, SET);
 80091aa:	2201      	movs	r2, #1
 80091ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80091b0:	4809      	ldr	r0, [pc, #36]	; (80091d8 <MRT_TELEMETRY_Init+0x38>)
 80091b2:	f000 fdc7 	bl	8009d44 <HAL_GPIO_WritePin>
	hiridium = MRT_Iridium_Init(IRIDIUM_TIMEOUT, IRIDIUM_I2C, print);
 80091b6:	4c09      	ldr	r4, [pc, #36]	; (80091dc <MRT_TELEMETRY_Init+0x3c>)
 80091b8:	4638      	mov	r0, r7
 80091ba:	4b09      	ldr	r3, [pc, #36]	; (80091e0 <MRT_TELEMETRY_Init+0x40>)
 80091bc:	2202      	movs	r2, #2
 80091be:	2103      	movs	r1, #3
 80091c0:	f7ff f95c 	bl	800847c <MRT_Iridium_Init>
 80091c4:	4625      	mov	r5, r4
 80091c6:	463c      	mov	r4, r7
 80091c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80091ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	602b      	str	r3, [r5, #0]
	#endif
}
 80091d0:	bf00      	nop
 80091d2:	3718      	adds	r7, #24
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bdb0      	pop	{r4, r5, r7, pc}
 80091d8:	40021000 	.word	0x40021000
 80091dc:	20000488 	.word	0x20000488
 80091e0:	08001109 	.word	0x08001109

080091e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80091e8:	4b0e      	ldr	r3, [pc, #56]	; (8009224 <HAL_Init+0x40>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a0d      	ldr	r2, [pc, #52]	; (8009224 <HAL_Init+0x40>)
 80091ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80091f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80091f4:	4b0b      	ldr	r3, [pc, #44]	; (8009224 <HAL_Init+0x40>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a0a      	ldr	r2, [pc, #40]	; (8009224 <HAL_Init+0x40>)
 80091fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80091fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009200:	4b08      	ldr	r3, [pc, #32]	; (8009224 <HAL_Init+0x40>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a07      	ldr	r2, [pc, #28]	; (8009224 <HAL_Init+0x40>)
 8009206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800920a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800920c:	2003      	movs	r0, #3
 800920e:	f000 fb92 	bl	8009936 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009212:	2000      	movs	r0, #0
 8009214:	f7f9 f894 	bl	8002340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009218:	f7f9 f866 	bl	80022e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	40023c00 	.word	0x40023c00

08009228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009228:	b480      	push	{r7}
 800922a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800922c:	4b06      	ldr	r3, [pc, #24]	; (8009248 <HAL_IncTick+0x20>)
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	461a      	mov	r2, r3
 8009232:	4b06      	ldr	r3, [pc, #24]	; (800924c <HAL_IncTick+0x24>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4413      	add	r3, r2
 8009238:	4a04      	ldr	r2, [pc, #16]	; (800924c <HAL_IncTick+0x24>)
 800923a:	6013      	str	r3, [r2, #0]
}
 800923c:	bf00      	nop
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	20000064 	.word	0x20000064
 800924c:	20006324 	.word	0x20006324

08009250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009250:	b480      	push	{r7}
 8009252:	af00      	add	r7, sp, #0
  return uwTick;
 8009254:	4b03      	ldr	r3, [pc, #12]	; (8009264 <HAL_GetTick+0x14>)
 8009256:	681b      	ldr	r3, [r3, #0]
}
 8009258:	4618      	mov	r0, r3
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	20006324 	.word	0x20006324

08009268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009270:	f7ff ffee 	bl	8009250 <HAL_GetTick>
 8009274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009280:	d005      	beq.n	800928e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009282:	4b0a      	ldr	r3, [pc, #40]	; (80092ac <HAL_Delay+0x44>)
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	461a      	mov	r2, r3
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	4413      	add	r3, r2
 800928c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800928e:	bf00      	nop
 8009290:	f7ff ffde 	bl	8009250 <HAL_GetTick>
 8009294:	4602      	mov	r2, r0
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	429a      	cmp	r2, r3
 800929e:	d8f7      	bhi.n	8009290 <HAL_Delay+0x28>
  {
  }
}
 80092a0:	bf00      	nop
 80092a2:	bf00      	nop
 80092a4:	3710      	adds	r7, #16
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	20000064 	.word	0x20000064

080092b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80092b8:	2300      	movs	r3, #0
 80092ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d101      	bne.n	80092c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	e033      	b.n	800932e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d109      	bne.n	80092e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f7f8 f952 	bl	8001578 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e6:	f003 0310 	and.w	r3, r3, #16
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d118      	bne.n	8009320 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80092f6:	f023 0302 	bic.w	r3, r3, #2
 80092fa:	f043 0202 	orr.w	r2, r3, #2
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f94a 	bl	800959c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009312:	f023 0303 	bic.w	r3, r3, #3
 8009316:	f043 0201 	orr.w	r2, r3, #1
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	641a      	str	r2, [r3, #64]	; 0x40
 800931e:	e001      	b.n	8009324 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800932c:	7bfb      	ldrb	r3, [r7, #15]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
	...

08009338 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009342:	2300      	movs	r3, #0
 8009344:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800934c:	2b01      	cmp	r3, #1
 800934e:	d101      	bne.n	8009354 <HAL_ADC_ConfigChannel+0x1c>
 8009350:	2302      	movs	r3, #2
 8009352:	e113      	b.n	800957c <HAL_ADC_ConfigChannel+0x244>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2b09      	cmp	r3, #9
 8009362:	d925      	bls.n	80093b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68d9      	ldr	r1, [r3, #12]
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	b29b      	uxth	r3, r3
 8009370:	461a      	mov	r2, r3
 8009372:	4613      	mov	r3, r2
 8009374:	005b      	lsls	r3, r3, #1
 8009376:	4413      	add	r3, r2
 8009378:	3b1e      	subs	r3, #30
 800937a:	2207      	movs	r2, #7
 800937c:	fa02 f303 	lsl.w	r3, r2, r3
 8009380:	43da      	mvns	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	400a      	ands	r2, r1
 8009388:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68d9      	ldr	r1, [r3, #12]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	689a      	ldr	r2, [r3, #8]
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	b29b      	uxth	r3, r3
 800939a:	4618      	mov	r0, r3
 800939c:	4603      	mov	r3, r0
 800939e:	005b      	lsls	r3, r3, #1
 80093a0:	4403      	add	r3, r0
 80093a2:	3b1e      	subs	r3, #30
 80093a4:	409a      	lsls	r2, r3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	430a      	orrs	r2, r1
 80093ac:	60da      	str	r2, [r3, #12]
 80093ae:	e022      	b.n	80093f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	6919      	ldr	r1, [r3, #16]
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	461a      	mov	r2, r3
 80093be:	4613      	mov	r3, r2
 80093c0:	005b      	lsls	r3, r3, #1
 80093c2:	4413      	add	r3, r2
 80093c4:	2207      	movs	r2, #7
 80093c6:	fa02 f303 	lsl.w	r3, r2, r3
 80093ca:	43da      	mvns	r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	400a      	ands	r2, r1
 80093d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	6919      	ldr	r1, [r3, #16]
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	689a      	ldr	r2, [r3, #8]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	4618      	mov	r0, r3
 80093e6:	4603      	mov	r3, r0
 80093e8:	005b      	lsls	r3, r3, #1
 80093ea:	4403      	add	r3, r0
 80093ec:	409a      	lsls	r2, r3
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	430a      	orrs	r2, r1
 80093f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	2b06      	cmp	r3, #6
 80093fc:	d824      	bhi.n	8009448 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	685a      	ldr	r2, [r3, #4]
 8009408:	4613      	mov	r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4413      	add	r3, r2
 800940e:	3b05      	subs	r3, #5
 8009410:	221f      	movs	r2, #31
 8009412:	fa02 f303 	lsl.w	r3, r2, r3
 8009416:	43da      	mvns	r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	400a      	ands	r2, r1
 800941e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	b29b      	uxth	r3, r3
 800942c:	4618      	mov	r0, r3
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	685a      	ldr	r2, [r3, #4]
 8009432:	4613      	mov	r3, r2
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4413      	add	r3, r2
 8009438:	3b05      	subs	r3, #5
 800943a:	fa00 f203 	lsl.w	r2, r0, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	430a      	orrs	r2, r1
 8009444:	635a      	str	r2, [r3, #52]	; 0x34
 8009446:	e04c      	b.n	80094e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	2b0c      	cmp	r3, #12
 800944e:	d824      	bhi.n	800949a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	685a      	ldr	r2, [r3, #4]
 800945a:	4613      	mov	r3, r2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	4413      	add	r3, r2
 8009460:	3b23      	subs	r3, #35	; 0x23
 8009462:	221f      	movs	r2, #31
 8009464:	fa02 f303 	lsl.w	r3, r2, r3
 8009468:	43da      	mvns	r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	400a      	ands	r2, r1
 8009470:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	b29b      	uxth	r3, r3
 800947e:	4618      	mov	r0, r3
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	685a      	ldr	r2, [r3, #4]
 8009484:	4613      	mov	r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	4413      	add	r3, r2
 800948a:	3b23      	subs	r3, #35	; 0x23
 800948c:	fa00 f203 	lsl.w	r2, r0, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	430a      	orrs	r2, r1
 8009496:	631a      	str	r2, [r3, #48]	; 0x30
 8009498:	e023      	b.n	80094e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	685a      	ldr	r2, [r3, #4]
 80094a4:	4613      	mov	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4413      	add	r3, r2
 80094aa:	3b41      	subs	r3, #65	; 0x41
 80094ac:	221f      	movs	r2, #31
 80094ae:	fa02 f303 	lsl.w	r3, r2, r3
 80094b2:	43da      	mvns	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	400a      	ands	r2, r1
 80094ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	4618      	mov	r0, r3
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	685a      	ldr	r2, [r3, #4]
 80094ce:	4613      	mov	r3, r2
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	4413      	add	r3, r2
 80094d4:	3b41      	subs	r3, #65	; 0x41
 80094d6:	fa00 f203 	lsl.w	r2, r0, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	430a      	orrs	r2, r1
 80094e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80094e2:	4b29      	ldr	r3, [pc, #164]	; (8009588 <HAL_ADC_ConfigChannel+0x250>)
 80094e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a28      	ldr	r2, [pc, #160]	; (800958c <HAL_ADC_ConfigChannel+0x254>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d10f      	bne.n	8009510 <HAL_ADC_ConfigChannel+0x1d8>
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2b12      	cmp	r3, #18
 80094f6:	d10b      	bne.n	8009510 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a1d      	ldr	r2, [pc, #116]	; (800958c <HAL_ADC_ConfigChannel+0x254>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d12b      	bne.n	8009572 <HAL_ADC_ConfigChannel+0x23a>
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a1c      	ldr	r2, [pc, #112]	; (8009590 <HAL_ADC_ConfigChannel+0x258>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d003      	beq.n	800952c <HAL_ADC_ConfigChannel+0x1f4>
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2b11      	cmp	r3, #17
 800952a:	d122      	bne.n	8009572 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a11      	ldr	r2, [pc, #68]	; (8009590 <HAL_ADC_ConfigChannel+0x258>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d111      	bne.n	8009572 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800954e:	4b11      	ldr	r3, [pc, #68]	; (8009594 <HAL_ADC_ConfigChannel+0x25c>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a11      	ldr	r2, [pc, #68]	; (8009598 <HAL_ADC_ConfigChannel+0x260>)
 8009554:	fba2 2303 	umull	r2, r3, r2, r3
 8009558:	0c9a      	lsrs	r2, r3, #18
 800955a:	4613      	mov	r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	4413      	add	r3, r2
 8009560:	005b      	lsls	r3, r3, #1
 8009562:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009564:	e002      	b.n	800956c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	3b01      	subs	r3, #1
 800956a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1f9      	bne.n	8009566 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800957a:	2300      	movs	r3, #0
}
 800957c:	4618      	mov	r0, r3
 800957e:	3714      	adds	r7, #20
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr
 8009588:	40012300 	.word	0x40012300
 800958c:	40012000 	.word	0x40012000
 8009590:	10000012 	.word	0x10000012
 8009594:	20000000 	.word	0x20000000
 8009598:	431bde83 	.word	0x431bde83

0800959c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80095a4:	4b79      	ldr	r3, [pc, #484]	; (800978c <ADC_Init+0x1f0>)
 80095a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	685a      	ldr	r2, [r3, #4]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	431a      	orrs	r2, r3
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	685a      	ldr	r2, [r3, #4]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80095d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	6859      	ldr	r1, [r3, #4]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	021a      	lsls	r2, r3, #8
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	430a      	orrs	r2, r1
 80095e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	685a      	ldr	r2, [r3, #4]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80095f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	6859      	ldr	r1, [r3, #4]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	689a      	ldr	r2, [r3, #8]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	430a      	orrs	r2, r1
 8009606:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	689a      	ldr	r2, [r3, #8]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009616:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	6899      	ldr	r1, [r3, #8]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	68da      	ldr	r2, [r3, #12]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	430a      	orrs	r2, r1
 8009628:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800962e:	4a58      	ldr	r2, [pc, #352]	; (8009790 <ADC_Init+0x1f4>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d022      	beq.n	800967a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	689a      	ldr	r2, [r3, #8]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009642:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	6899      	ldr	r1, [r3, #8]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	430a      	orrs	r2, r1
 8009654:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	689a      	ldr	r2, [r3, #8]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009664:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	6899      	ldr	r1, [r3, #8]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	430a      	orrs	r2, r1
 8009676:	609a      	str	r2, [r3, #8]
 8009678:	e00f      	b.n	800969a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	689a      	ldr	r2, [r3, #8]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009688:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	689a      	ldr	r2, [r3, #8]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009698:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	689a      	ldr	r2, [r3, #8]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f022 0202 	bic.w	r2, r2, #2
 80096a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	6899      	ldr	r1, [r3, #8]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	7e1b      	ldrb	r3, [r3, #24]
 80096b4:	005a      	lsls	r2, r3, #1
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	430a      	orrs	r2, r1
 80096bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d01b      	beq.n	8009700 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	685a      	ldr	r2, [r3, #4]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	685a      	ldr	r2, [r3, #4]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80096e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	6859      	ldr	r1, [r3, #4]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f2:	3b01      	subs	r3, #1
 80096f4:	035a      	lsls	r2, r3, #13
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	430a      	orrs	r2, r1
 80096fc:	605a      	str	r2, [r3, #4]
 80096fe:	e007      	b.n	8009710 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	685a      	ldr	r2, [r3, #4]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800970e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800971e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	69db      	ldr	r3, [r3, #28]
 800972a:	3b01      	subs	r3, #1
 800972c:	051a      	lsls	r2, r3, #20
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	430a      	orrs	r2, r1
 8009734:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	689a      	ldr	r2, [r3, #8]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009744:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	6899      	ldr	r1, [r3, #8]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009752:	025a      	lsls	r2, r3, #9
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	430a      	orrs	r2, r1
 800975a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	689a      	ldr	r2, [r3, #8]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800976a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	6899      	ldr	r1, [r3, #8]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	695b      	ldr	r3, [r3, #20]
 8009776:	029a      	lsls	r2, r3, #10
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	430a      	orrs	r2, r1
 800977e:	609a      	str	r2, [r3, #8]
}
 8009780:	bf00      	nop
 8009782:	3714      	adds	r7, #20
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr
 800978c:	40012300 	.word	0x40012300
 8009790:	0f000001 	.word	0x0f000001

08009794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f003 0307 	and.w	r3, r3, #7
 80097a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80097a4:	4b0c      	ldr	r3, [pc, #48]	; (80097d8 <__NVIC_SetPriorityGrouping+0x44>)
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80097aa:	68ba      	ldr	r2, [r7, #8]
 80097ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80097b0:	4013      	ands	r3, r2
 80097b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80097bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80097c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80097c6:	4a04      	ldr	r2, [pc, #16]	; (80097d8 <__NVIC_SetPriorityGrouping+0x44>)
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	60d3      	str	r3, [r2, #12]
}
 80097cc:	bf00      	nop
 80097ce:	3714      	adds	r7, #20
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr
 80097d8:	e000ed00 	.word	0xe000ed00

080097dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80097dc:	b480      	push	{r7}
 80097de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80097e0:	4b04      	ldr	r3, [pc, #16]	; (80097f4 <__NVIC_GetPriorityGrouping+0x18>)
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	0a1b      	lsrs	r3, r3, #8
 80097e6:	f003 0307 	and.w	r3, r3, #7
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr
 80097f4:	e000ed00 	.word	0xe000ed00

080097f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	4603      	mov	r3, r0
 8009800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009806:	2b00      	cmp	r3, #0
 8009808:	db0b      	blt.n	8009822 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800980a:	79fb      	ldrb	r3, [r7, #7]
 800980c:	f003 021f 	and.w	r2, r3, #31
 8009810:	4907      	ldr	r1, [pc, #28]	; (8009830 <__NVIC_EnableIRQ+0x38>)
 8009812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009816:	095b      	lsrs	r3, r3, #5
 8009818:	2001      	movs	r0, #1
 800981a:	fa00 f202 	lsl.w	r2, r0, r2
 800981e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009822:	bf00      	nop
 8009824:	370c      	adds	r7, #12
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop
 8009830:	e000e100 	.word	0xe000e100

08009834 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	4603      	mov	r3, r0
 800983c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800983e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009842:	2b00      	cmp	r3, #0
 8009844:	db12      	blt.n	800986c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009846:	79fb      	ldrb	r3, [r7, #7]
 8009848:	f003 021f 	and.w	r2, r3, #31
 800984c:	490a      	ldr	r1, [pc, #40]	; (8009878 <__NVIC_DisableIRQ+0x44>)
 800984e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009852:	095b      	lsrs	r3, r3, #5
 8009854:	2001      	movs	r0, #1
 8009856:	fa00 f202 	lsl.w	r2, r0, r2
 800985a:	3320      	adds	r3, #32
 800985c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009860:	f3bf 8f4f 	dsb	sy
}
 8009864:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009866:	f3bf 8f6f 	isb	sy
}
 800986a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800986c:	bf00      	nop
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr
 8009878:	e000e100 	.word	0xe000e100

0800987c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	4603      	mov	r3, r0
 8009884:	6039      	str	r1, [r7, #0]
 8009886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800988c:	2b00      	cmp	r3, #0
 800988e:	db0a      	blt.n	80098a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	b2da      	uxtb	r2, r3
 8009894:	490c      	ldr	r1, [pc, #48]	; (80098c8 <__NVIC_SetPriority+0x4c>)
 8009896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800989a:	0112      	lsls	r2, r2, #4
 800989c:	b2d2      	uxtb	r2, r2
 800989e:	440b      	add	r3, r1
 80098a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80098a4:	e00a      	b.n	80098bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	b2da      	uxtb	r2, r3
 80098aa:	4908      	ldr	r1, [pc, #32]	; (80098cc <__NVIC_SetPriority+0x50>)
 80098ac:	79fb      	ldrb	r3, [r7, #7]
 80098ae:	f003 030f 	and.w	r3, r3, #15
 80098b2:	3b04      	subs	r3, #4
 80098b4:	0112      	lsls	r2, r2, #4
 80098b6:	b2d2      	uxtb	r2, r2
 80098b8:	440b      	add	r3, r1
 80098ba:	761a      	strb	r2, [r3, #24]
}
 80098bc:	bf00      	nop
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr
 80098c8:	e000e100 	.word	0xe000e100
 80098cc:	e000ed00 	.word	0xe000ed00

080098d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b089      	sub	sp, #36	; 0x24
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f003 0307 	and.w	r3, r3, #7
 80098e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	f1c3 0307 	rsb	r3, r3, #7
 80098ea:	2b04      	cmp	r3, #4
 80098ec:	bf28      	it	cs
 80098ee:	2304      	movcs	r3, #4
 80098f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	3304      	adds	r3, #4
 80098f6:	2b06      	cmp	r3, #6
 80098f8:	d902      	bls.n	8009900 <NVIC_EncodePriority+0x30>
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	3b03      	subs	r3, #3
 80098fe:	e000      	b.n	8009902 <NVIC_EncodePriority+0x32>
 8009900:	2300      	movs	r3, #0
 8009902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009904:	f04f 32ff 	mov.w	r2, #4294967295
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	fa02 f303 	lsl.w	r3, r2, r3
 800990e:	43da      	mvns	r2, r3
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	401a      	ands	r2, r3
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009918:	f04f 31ff 	mov.w	r1, #4294967295
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	fa01 f303 	lsl.w	r3, r1, r3
 8009922:	43d9      	mvns	r1, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009928:	4313      	orrs	r3, r2
         );
}
 800992a:	4618      	mov	r0, r3
 800992c:	3724      	adds	r7, #36	; 0x24
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr

08009936 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b082      	sub	sp, #8
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f7ff ff28 	bl	8009794 <__NVIC_SetPriorityGrouping>
}
 8009944:	bf00      	nop
 8009946:	3708      	adds	r7, #8
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800994c:	b580      	push	{r7, lr}
 800994e:	b086      	sub	sp, #24
 8009950:	af00      	add	r7, sp, #0
 8009952:	4603      	mov	r3, r0
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	607a      	str	r2, [r7, #4]
 8009958:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800995a:	2300      	movs	r3, #0
 800995c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800995e:	f7ff ff3d 	bl	80097dc <__NVIC_GetPriorityGrouping>
 8009962:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	68b9      	ldr	r1, [r7, #8]
 8009968:	6978      	ldr	r0, [r7, #20]
 800996a:	f7ff ffb1 	bl	80098d0 <NVIC_EncodePriority>
 800996e:	4602      	mov	r2, r0
 8009970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009974:	4611      	mov	r1, r2
 8009976:	4618      	mov	r0, r3
 8009978:	f7ff ff80 	bl	800987c <__NVIC_SetPriority>
}
 800997c:	bf00      	nop
 800997e:	3718      	adds	r7, #24
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	4603      	mov	r3, r0
 800998c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800998e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009992:	4618      	mov	r0, r3
 8009994:	f7ff ff30 	bl	80097f8 <__NVIC_EnableIRQ>
}
 8009998:	bf00      	nop
 800999a:	3708      	adds	r7, #8
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	4603      	mov	r3, r0
 80099a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80099aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7ff ff40 	bl	8009834 <__NVIC_DisableIRQ>
}
 80099b4:	bf00      	nop
 80099b6:	3708      	adds	r7, #8
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80099bc:	b480      	push	{r7}
 80099be:	b089      	sub	sp, #36	; 0x24
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80099c6:	2300      	movs	r3, #0
 80099c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80099ca:	2300      	movs	r3, #0
 80099cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80099ce:	2300      	movs	r3, #0
 80099d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80099d2:	2300      	movs	r3, #0
 80099d4:	61fb      	str	r3, [r7, #28]
 80099d6:	e177      	b.n	8009cc8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80099d8:	2201      	movs	r2, #1
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	fa02 f303 	lsl.w	r3, r2, r3
 80099e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	4013      	ands	r3, r2
 80099ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80099ec:	693a      	ldr	r2, [r7, #16]
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	f040 8166 	bne.w	8009cc2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	f003 0303 	and.w	r3, r3, #3
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d005      	beq.n	8009a0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d130      	bne.n	8009a70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	005b      	lsls	r3, r3, #1
 8009a18:	2203      	movs	r2, #3
 8009a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a1e:	43db      	mvns	r3, r3
 8009a20:	69ba      	ldr	r2, [r7, #24]
 8009a22:	4013      	ands	r3, r2
 8009a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	68da      	ldr	r2, [r3, #12]
 8009a2a:	69fb      	ldr	r3, [r7, #28]
 8009a2c:	005b      	lsls	r3, r3, #1
 8009a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a32:	69ba      	ldr	r2, [r7, #24]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	69ba      	ldr	r2, [r7, #24]
 8009a3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009a44:	2201      	movs	r2, #1
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	fa02 f303 	lsl.w	r3, r2, r3
 8009a4c:	43db      	mvns	r3, r3
 8009a4e:	69ba      	ldr	r2, [r7, #24]
 8009a50:	4013      	ands	r3, r2
 8009a52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	091b      	lsrs	r3, r3, #4
 8009a5a:	f003 0201 	and.w	r2, r3, #1
 8009a5e:	69fb      	ldr	r3, [r7, #28]
 8009a60:	fa02 f303 	lsl.w	r3, r2, r3
 8009a64:	69ba      	ldr	r2, [r7, #24]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	69ba      	ldr	r2, [r7, #24]
 8009a6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	f003 0303 	and.w	r3, r3, #3
 8009a78:	2b03      	cmp	r3, #3
 8009a7a:	d017      	beq.n	8009aac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	005b      	lsls	r3, r3, #1
 8009a86:	2203      	movs	r2, #3
 8009a88:	fa02 f303 	lsl.w	r3, r2, r3
 8009a8c:	43db      	mvns	r3, r3
 8009a8e:	69ba      	ldr	r2, [r7, #24]
 8009a90:	4013      	ands	r3, r2
 8009a92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	689a      	ldr	r2, [r3, #8]
 8009a98:	69fb      	ldr	r3, [r7, #28]
 8009a9a:	005b      	lsls	r3, r3, #1
 8009a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa0:	69ba      	ldr	r2, [r7, #24]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	69ba      	ldr	r2, [r7, #24]
 8009aaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	f003 0303 	and.w	r3, r3, #3
 8009ab4:	2b02      	cmp	r3, #2
 8009ab6:	d123      	bne.n	8009b00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	08da      	lsrs	r2, r3, #3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	3208      	adds	r2, #8
 8009ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	f003 0307 	and.w	r3, r3, #7
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	220f      	movs	r2, #15
 8009ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad4:	43db      	mvns	r3, r3
 8009ad6:	69ba      	ldr	r2, [r7, #24]
 8009ad8:	4013      	ands	r3, r2
 8009ada:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	691a      	ldr	r2, [r3, #16]
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	f003 0307 	and.w	r3, r3, #7
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8009aec:	69ba      	ldr	r2, [r7, #24]
 8009aee:	4313      	orrs	r3, r2
 8009af0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	08da      	lsrs	r2, r3, #3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	3208      	adds	r2, #8
 8009afa:	69b9      	ldr	r1, [r7, #24]
 8009afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	005b      	lsls	r3, r3, #1
 8009b0a:	2203      	movs	r2, #3
 8009b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b10:	43db      	mvns	r3, r3
 8009b12:	69ba      	ldr	r2, [r7, #24]
 8009b14:	4013      	ands	r3, r2
 8009b16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	f003 0203 	and.w	r2, r3, #3
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	005b      	lsls	r3, r3, #1
 8009b24:	fa02 f303 	lsl.w	r3, r2, r3
 8009b28:	69ba      	ldr	r2, [r7, #24]
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	69ba      	ldr	r2, [r7, #24]
 8009b32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f000 80c0 	beq.w	8009cc2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b42:	2300      	movs	r3, #0
 8009b44:	60fb      	str	r3, [r7, #12]
 8009b46:	4b66      	ldr	r3, [pc, #408]	; (8009ce0 <HAL_GPIO_Init+0x324>)
 8009b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b4a:	4a65      	ldr	r2, [pc, #404]	; (8009ce0 <HAL_GPIO_Init+0x324>)
 8009b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b50:	6453      	str	r3, [r2, #68]	; 0x44
 8009b52:	4b63      	ldr	r3, [pc, #396]	; (8009ce0 <HAL_GPIO_Init+0x324>)
 8009b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b5a:	60fb      	str	r3, [r7, #12]
 8009b5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009b5e:	4a61      	ldr	r2, [pc, #388]	; (8009ce4 <HAL_GPIO_Init+0x328>)
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	089b      	lsrs	r3, r3, #2
 8009b64:	3302      	adds	r3, #2
 8009b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	f003 0303 	and.w	r3, r3, #3
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	220f      	movs	r2, #15
 8009b76:	fa02 f303 	lsl.w	r3, r2, r3
 8009b7a:	43db      	mvns	r3, r3
 8009b7c:	69ba      	ldr	r2, [r7, #24]
 8009b7e:	4013      	ands	r3, r2
 8009b80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4a58      	ldr	r2, [pc, #352]	; (8009ce8 <HAL_GPIO_Init+0x32c>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d037      	beq.n	8009bfa <HAL_GPIO_Init+0x23e>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4a57      	ldr	r2, [pc, #348]	; (8009cec <HAL_GPIO_Init+0x330>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d031      	beq.n	8009bf6 <HAL_GPIO_Init+0x23a>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	4a56      	ldr	r2, [pc, #344]	; (8009cf0 <HAL_GPIO_Init+0x334>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d02b      	beq.n	8009bf2 <HAL_GPIO_Init+0x236>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4a55      	ldr	r2, [pc, #340]	; (8009cf4 <HAL_GPIO_Init+0x338>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d025      	beq.n	8009bee <HAL_GPIO_Init+0x232>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	4a54      	ldr	r2, [pc, #336]	; (8009cf8 <HAL_GPIO_Init+0x33c>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d01f      	beq.n	8009bea <HAL_GPIO_Init+0x22e>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4a53      	ldr	r2, [pc, #332]	; (8009cfc <HAL_GPIO_Init+0x340>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d019      	beq.n	8009be6 <HAL_GPIO_Init+0x22a>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4a52      	ldr	r2, [pc, #328]	; (8009d00 <HAL_GPIO_Init+0x344>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d013      	beq.n	8009be2 <HAL_GPIO_Init+0x226>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a51      	ldr	r2, [pc, #324]	; (8009d04 <HAL_GPIO_Init+0x348>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d00d      	beq.n	8009bde <HAL_GPIO_Init+0x222>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a50      	ldr	r2, [pc, #320]	; (8009d08 <HAL_GPIO_Init+0x34c>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d007      	beq.n	8009bda <HAL_GPIO_Init+0x21e>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4a4f      	ldr	r2, [pc, #316]	; (8009d0c <HAL_GPIO_Init+0x350>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d101      	bne.n	8009bd6 <HAL_GPIO_Init+0x21a>
 8009bd2:	2309      	movs	r3, #9
 8009bd4:	e012      	b.n	8009bfc <HAL_GPIO_Init+0x240>
 8009bd6:	230a      	movs	r3, #10
 8009bd8:	e010      	b.n	8009bfc <HAL_GPIO_Init+0x240>
 8009bda:	2308      	movs	r3, #8
 8009bdc:	e00e      	b.n	8009bfc <HAL_GPIO_Init+0x240>
 8009bde:	2307      	movs	r3, #7
 8009be0:	e00c      	b.n	8009bfc <HAL_GPIO_Init+0x240>
 8009be2:	2306      	movs	r3, #6
 8009be4:	e00a      	b.n	8009bfc <HAL_GPIO_Init+0x240>
 8009be6:	2305      	movs	r3, #5
 8009be8:	e008      	b.n	8009bfc <HAL_GPIO_Init+0x240>
 8009bea:	2304      	movs	r3, #4
 8009bec:	e006      	b.n	8009bfc <HAL_GPIO_Init+0x240>
 8009bee:	2303      	movs	r3, #3
 8009bf0:	e004      	b.n	8009bfc <HAL_GPIO_Init+0x240>
 8009bf2:	2302      	movs	r3, #2
 8009bf4:	e002      	b.n	8009bfc <HAL_GPIO_Init+0x240>
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e000      	b.n	8009bfc <HAL_GPIO_Init+0x240>
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	69fa      	ldr	r2, [r7, #28]
 8009bfe:	f002 0203 	and.w	r2, r2, #3
 8009c02:	0092      	lsls	r2, r2, #2
 8009c04:	4093      	lsls	r3, r2
 8009c06:	69ba      	ldr	r2, [r7, #24]
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009c0c:	4935      	ldr	r1, [pc, #212]	; (8009ce4 <HAL_GPIO_Init+0x328>)
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	089b      	lsrs	r3, r3, #2
 8009c12:	3302      	adds	r3, #2
 8009c14:	69ba      	ldr	r2, [r7, #24]
 8009c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009c1a:	4b3d      	ldr	r3, [pc, #244]	; (8009d10 <HAL_GPIO_Init+0x354>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	43db      	mvns	r3, r3
 8009c24:	69ba      	ldr	r2, [r7, #24]
 8009c26:	4013      	ands	r3, r2
 8009c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d003      	beq.n	8009c3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009c36:	69ba      	ldr	r2, [r7, #24]
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009c3e:	4a34      	ldr	r2, [pc, #208]	; (8009d10 <HAL_GPIO_Init+0x354>)
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009c44:	4b32      	ldr	r3, [pc, #200]	; (8009d10 <HAL_GPIO_Init+0x354>)
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	43db      	mvns	r3, r3
 8009c4e:	69ba      	ldr	r2, [r7, #24]
 8009c50:	4013      	ands	r3, r2
 8009c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d003      	beq.n	8009c68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009c60:	69ba      	ldr	r2, [r7, #24]
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009c68:	4a29      	ldr	r2, [pc, #164]	; (8009d10 <HAL_GPIO_Init+0x354>)
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009c6e:	4b28      	ldr	r3, [pc, #160]	; (8009d10 <HAL_GPIO_Init+0x354>)
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	43db      	mvns	r3, r3
 8009c78:	69ba      	ldr	r2, [r7, #24]
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d003      	beq.n	8009c92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009c8a:	69ba      	ldr	r2, [r7, #24]
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009c92:	4a1f      	ldr	r2, [pc, #124]	; (8009d10 <HAL_GPIO_Init+0x354>)
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009c98:	4b1d      	ldr	r3, [pc, #116]	; (8009d10 <HAL_GPIO_Init+0x354>)
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	43db      	mvns	r3, r3
 8009ca2:	69ba      	ldr	r2, [r7, #24]
 8009ca4:	4013      	ands	r3, r2
 8009ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d003      	beq.n	8009cbc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009cb4:	69ba      	ldr	r2, [r7, #24]
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009cbc:	4a14      	ldr	r2, [pc, #80]	; (8009d10 <HAL_GPIO_Init+0x354>)
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	61fb      	str	r3, [r7, #28]
 8009cc8:	69fb      	ldr	r3, [r7, #28]
 8009cca:	2b0f      	cmp	r3, #15
 8009ccc:	f67f ae84 	bls.w	80099d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009cd0:	bf00      	nop
 8009cd2:	bf00      	nop
 8009cd4:	3724      	adds	r7, #36	; 0x24
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	40023800 	.word	0x40023800
 8009ce4:	40013800 	.word	0x40013800
 8009ce8:	40020000 	.word	0x40020000
 8009cec:	40020400 	.word	0x40020400
 8009cf0:	40020800 	.word	0x40020800
 8009cf4:	40020c00 	.word	0x40020c00
 8009cf8:	40021000 	.word	0x40021000
 8009cfc:	40021400 	.word	0x40021400
 8009d00:	40021800 	.word	0x40021800
 8009d04:	40021c00 	.word	0x40021c00
 8009d08:	40022000 	.word	0x40022000
 8009d0c:	40022400 	.word	0x40022400
 8009d10:	40013c00 	.word	0x40013c00

08009d14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	691a      	ldr	r2, [r3, #16]
 8009d24:	887b      	ldrh	r3, [r7, #2]
 8009d26:	4013      	ands	r3, r2
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d002      	beq.n	8009d32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	73fb      	strb	r3, [r7, #15]
 8009d30:	e001      	b.n	8009d36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009d32:	2300      	movs	r3, #0
 8009d34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3714      	adds	r7, #20
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	807b      	strh	r3, [r7, #2]
 8009d50:	4613      	mov	r3, r2
 8009d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009d54:	787b      	ldrb	r3, [r7, #1]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d003      	beq.n	8009d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009d5a:	887a      	ldrh	r2, [r7, #2]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009d60:	e003      	b.n	8009d6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009d62:	887b      	ldrh	r3, [r7, #2]
 8009d64:	041a      	lsls	r2, r3, #16
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	619a      	str	r2, [r3, #24]
}
 8009d6a:	bf00      	nop
 8009d6c:	370c      	adds	r7, #12
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr
	...

08009d78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	4603      	mov	r3, r0
 8009d80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009d82:	4b08      	ldr	r3, [pc, #32]	; (8009da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009d84:	695a      	ldr	r2, [r3, #20]
 8009d86:	88fb      	ldrh	r3, [r7, #6]
 8009d88:	4013      	ands	r3, r2
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d006      	beq.n	8009d9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009d8e:	4a05      	ldr	r2, [pc, #20]	; (8009da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009d90:	88fb      	ldrh	r3, [r7, #6]
 8009d92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009d94:	88fb      	ldrh	r3, [r7, #6]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f000 f806 	bl	8009da8 <HAL_GPIO_EXTI_Callback>
  }
}
 8009d9c:	bf00      	nop
 8009d9e:	3708      	adds	r7, #8
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	40013c00 	.word	0x40013c00

08009da8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	4603      	mov	r3, r0
 8009db0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8009db2:	bf00      	nop
 8009db4:	370c      	adds	r7, #12
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr
	...

08009dc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d101      	bne.n	8009dd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e12b      	b.n	800a02a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d106      	bne.n	8009dec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f7f7 fe1c 	bl	8001a24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2224      	movs	r2, #36	; 0x24
 8009df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f022 0201 	bic.w	r2, r2, #1
 8009e02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009e22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009e24:	f002 fc3e 	bl	800c6a4 <HAL_RCC_GetPCLK1Freq>
 8009e28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	4a81      	ldr	r2, [pc, #516]	; (800a034 <HAL_I2C_Init+0x274>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d807      	bhi.n	8009e44 <HAL_I2C_Init+0x84>
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	4a80      	ldr	r2, [pc, #512]	; (800a038 <HAL_I2C_Init+0x278>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	bf94      	ite	ls
 8009e3c:	2301      	movls	r3, #1
 8009e3e:	2300      	movhi	r3, #0
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	e006      	b.n	8009e52 <HAL_I2C_Init+0x92>
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	4a7d      	ldr	r2, [pc, #500]	; (800a03c <HAL_I2C_Init+0x27c>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	bf94      	ite	ls
 8009e4c:	2301      	movls	r3, #1
 8009e4e:	2300      	movhi	r3, #0
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d001      	beq.n	8009e5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	e0e7      	b.n	800a02a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	4a78      	ldr	r2, [pc, #480]	; (800a040 <HAL_I2C_Init+0x280>)
 8009e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e62:	0c9b      	lsrs	r3, r3, #18
 8009e64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68ba      	ldr	r2, [r7, #8]
 8009e76:	430a      	orrs	r2, r1
 8009e78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	6a1b      	ldr	r3, [r3, #32]
 8009e80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	4a6a      	ldr	r2, [pc, #424]	; (800a034 <HAL_I2C_Init+0x274>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d802      	bhi.n	8009e94 <HAL_I2C_Init+0xd4>
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	3301      	adds	r3, #1
 8009e92:	e009      	b.n	8009ea8 <HAL_I2C_Init+0xe8>
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009e9a:	fb02 f303 	mul.w	r3, r2, r3
 8009e9e:	4a69      	ldr	r2, [pc, #420]	; (800a044 <HAL_I2C_Init+0x284>)
 8009ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ea4:	099b      	lsrs	r3, r3, #6
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	6812      	ldr	r2, [r2, #0]
 8009eac:	430b      	orrs	r3, r1
 8009eae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	69db      	ldr	r3, [r3, #28]
 8009eb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009eba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	495c      	ldr	r1, [pc, #368]	; (800a034 <HAL_I2C_Init+0x274>)
 8009ec4:	428b      	cmp	r3, r1
 8009ec6:	d819      	bhi.n	8009efc <HAL_I2C_Init+0x13c>
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	1e59      	subs	r1, r3, #1
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	005b      	lsls	r3, r3, #1
 8009ed2:	fbb1 f3f3 	udiv	r3, r1, r3
 8009ed6:	1c59      	adds	r1, r3, #1
 8009ed8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009edc:	400b      	ands	r3, r1
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00a      	beq.n	8009ef8 <HAL_I2C_Init+0x138>
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	1e59      	subs	r1, r3, #1
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	005b      	lsls	r3, r3, #1
 8009eec:	fbb1 f3f3 	udiv	r3, r1, r3
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ef6:	e051      	b.n	8009f9c <HAL_I2C_Init+0x1dc>
 8009ef8:	2304      	movs	r3, #4
 8009efa:	e04f      	b.n	8009f9c <HAL_I2C_Init+0x1dc>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d111      	bne.n	8009f28 <HAL_I2C_Init+0x168>
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	1e58      	subs	r0, r3, #1
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6859      	ldr	r1, [r3, #4]
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	005b      	lsls	r3, r3, #1
 8009f10:	440b      	add	r3, r1
 8009f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f16:	3301      	adds	r3, #1
 8009f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	bf0c      	ite	eq
 8009f20:	2301      	moveq	r3, #1
 8009f22:	2300      	movne	r3, #0
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	e012      	b.n	8009f4e <HAL_I2C_Init+0x18e>
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	1e58      	subs	r0, r3, #1
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6859      	ldr	r1, [r3, #4]
 8009f30:	460b      	mov	r3, r1
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	440b      	add	r3, r1
 8009f36:	0099      	lsls	r1, r3, #2
 8009f38:	440b      	add	r3, r1
 8009f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f3e:	3301      	adds	r3, #1
 8009f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	bf0c      	ite	eq
 8009f48:	2301      	moveq	r3, #1
 8009f4a:	2300      	movne	r3, #0
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d001      	beq.n	8009f56 <HAL_I2C_Init+0x196>
 8009f52:	2301      	movs	r3, #1
 8009f54:	e022      	b.n	8009f9c <HAL_I2C_Init+0x1dc>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d10e      	bne.n	8009f7c <HAL_I2C_Init+0x1bc>
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	1e58      	subs	r0, r3, #1
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6859      	ldr	r1, [r3, #4]
 8009f66:	460b      	mov	r3, r1
 8009f68:	005b      	lsls	r3, r3, #1
 8009f6a:	440b      	add	r3, r1
 8009f6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f70:	3301      	adds	r3, #1
 8009f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f7a:	e00f      	b.n	8009f9c <HAL_I2C_Init+0x1dc>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	1e58      	subs	r0, r3, #1
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6859      	ldr	r1, [r3, #4]
 8009f84:	460b      	mov	r3, r1
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	440b      	add	r3, r1
 8009f8a:	0099      	lsls	r1, r3, #2
 8009f8c:	440b      	add	r3, r1
 8009f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f92:	3301      	adds	r3, #1
 8009f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f9c:	6879      	ldr	r1, [r7, #4]
 8009f9e:	6809      	ldr	r1, [r1, #0]
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	69da      	ldr	r2, [r3, #28]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a1b      	ldr	r3, [r3, #32]
 8009fb6:	431a      	orrs	r2, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	430a      	orrs	r2, r1
 8009fbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	689b      	ldr	r3, [r3, #8]
 8009fc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009fca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	6911      	ldr	r1, [r2, #16]
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	68d2      	ldr	r2, [r2, #12]
 8009fd6:	4311      	orrs	r1, r2
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	6812      	ldr	r2, [r2, #0]
 8009fdc:	430b      	orrs	r3, r1
 8009fde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	695a      	ldr	r2, [r3, #20]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	699b      	ldr	r3, [r3, #24]
 8009ff2:	431a      	orrs	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	430a      	orrs	r2, r1
 8009ffa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f042 0201 	orr.w	r2, r2, #1
 800a00a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2220      	movs	r2, #32
 800a016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	000186a0 	.word	0x000186a0
 800a038:	001e847f 	.word	0x001e847f
 800a03c:	003d08ff 	.word	0x003d08ff
 800a040:	431bde83 	.word	0x431bde83
 800a044:	10624dd3 	.word	0x10624dd3

0800a048 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b088      	sub	sp, #32
 800a04c:	af02      	add	r7, sp, #8
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	4608      	mov	r0, r1
 800a052:	4611      	mov	r1, r2
 800a054:	461a      	mov	r2, r3
 800a056:	4603      	mov	r3, r0
 800a058:	817b      	strh	r3, [r7, #10]
 800a05a:	460b      	mov	r3, r1
 800a05c:	813b      	strh	r3, [r7, #8]
 800a05e:	4613      	mov	r3, r2
 800a060:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a062:	f7ff f8f5 	bl	8009250 <HAL_GetTick>
 800a066:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	2b20      	cmp	r3, #32
 800a072:	f040 80d9 	bne.w	800a228 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	9300      	str	r3, [sp, #0]
 800a07a:	2319      	movs	r3, #25
 800a07c:	2201      	movs	r2, #1
 800a07e:	496d      	ldr	r1, [pc, #436]	; (800a234 <HAL_I2C_Mem_Write+0x1ec>)
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f000 fcb5 	bl	800a9f0 <I2C_WaitOnFlagUntilTimeout>
 800a086:	4603      	mov	r3, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d001      	beq.n	800a090 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a08c:	2302      	movs	r3, #2
 800a08e:	e0cc      	b.n	800a22a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a096:	2b01      	cmp	r3, #1
 800a098:	d101      	bne.n	800a09e <HAL_I2C_Mem_Write+0x56>
 800a09a:	2302      	movs	r3, #2
 800a09c:	e0c5      	b.n	800a22a <HAL_I2C_Mem_Write+0x1e2>
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f003 0301 	and.w	r3, r3, #1
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d007      	beq.n	800a0c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f042 0201 	orr.w	r2, r2, #1
 800a0c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a0d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2221      	movs	r2, #33	; 0x21
 800a0d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2240      	movs	r2, #64	; 0x40
 800a0e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	6a3a      	ldr	r2, [r7, #32]
 800a0ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a0f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0fa:	b29a      	uxth	r2, r3
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	4a4d      	ldr	r2, [pc, #308]	; (800a238 <HAL_I2C_Mem_Write+0x1f0>)
 800a104:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a106:	88f8      	ldrh	r0, [r7, #6]
 800a108:	893a      	ldrh	r2, [r7, #8]
 800a10a:	8979      	ldrh	r1, [r7, #10]
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	9301      	str	r3, [sp, #4]
 800a110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a112:	9300      	str	r3, [sp, #0]
 800a114:	4603      	mov	r3, r0
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f000 faec 	bl	800a6f4 <I2C_RequestMemoryWrite>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d052      	beq.n	800a1c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	e081      	b.n	800a22a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a126:	697a      	ldr	r2, [r7, #20]
 800a128:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	f000 fd36 	bl	800ab9c <I2C_WaitOnTXEFlagUntilTimeout>
 800a130:	4603      	mov	r3, r0
 800a132:	2b00      	cmp	r3, #0
 800a134:	d00d      	beq.n	800a152 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a13a:	2b04      	cmp	r3, #4
 800a13c:	d107      	bne.n	800a14e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a14c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a14e:	2301      	movs	r3, #1
 800a150:	e06b      	b.n	800a22a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a156:	781a      	ldrb	r2, [r3, #0]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a162:	1c5a      	adds	r2, r3, #1
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a16c:	3b01      	subs	r3, #1
 800a16e:	b29a      	uxth	r2, r3
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a178:	b29b      	uxth	r3, r3
 800a17a:	3b01      	subs	r3, #1
 800a17c:	b29a      	uxth	r2, r3
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	695b      	ldr	r3, [r3, #20]
 800a188:	f003 0304 	and.w	r3, r3, #4
 800a18c:	2b04      	cmp	r3, #4
 800a18e:	d11b      	bne.n	800a1c8 <HAL_I2C_Mem_Write+0x180>
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a194:	2b00      	cmp	r3, #0
 800a196:	d017      	beq.n	800a1c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19c:	781a      	ldrb	r2, [r3, #0]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a8:	1c5a      	adds	r2, r3, #1
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1b2:	3b01      	subs	r3, #1
 800a1b4:	b29a      	uxth	r2, r3
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	b29a      	uxth	r2, r3
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d1aa      	bne.n	800a126 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a1d0:	697a      	ldr	r2, [r7, #20]
 800a1d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1d4:	68f8      	ldr	r0, [r7, #12]
 800a1d6:	f000 fd22 	bl	800ac1e <I2C_WaitOnBTFFlagUntilTimeout>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00d      	beq.n	800a1fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e4:	2b04      	cmp	r3, #4
 800a1e6:	d107      	bne.n	800a1f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e016      	b.n	800a22a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a20a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2220      	movs	r2, #32
 800a210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2200      	movs	r2, #0
 800a218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2200      	movs	r2, #0
 800a220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a224:	2300      	movs	r3, #0
 800a226:	e000      	b.n	800a22a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a228:	2302      	movs	r3, #2
  }
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3718      	adds	r7, #24
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	00100002 	.word	0x00100002
 800a238:	ffff0000 	.word	0xffff0000

0800a23c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b08c      	sub	sp, #48	; 0x30
 800a240:	af02      	add	r7, sp, #8
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	4608      	mov	r0, r1
 800a246:	4611      	mov	r1, r2
 800a248:	461a      	mov	r2, r3
 800a24a:	4603      	mov	r3, r0
 800a24c:	817b      	strh	r3, [r7, #10]
 800a24e:	460b      	mov	r3, r1
 800a250:	813b      	strh	r3, [r7, #8]
 800a252:	4613      	mov	r3, r2
 800a254:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a256:	f7fe fffb 	bl	8009250 <HAL_GetTick>
 800a25a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a262:	b2db      	uxtb	r3, r3
 800a264:	2b20      	cmp	r3, #32
 800a266:	f040 8208 	bne.w	800a67a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	2319      	movs	r3, #25
 800a270:	2201      	movs	r2, #1
 800a272:	497b      	ldr	r1, [pc, #492]	; (800a460 <HAL_I2C_Mem_Read+0x224>)
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	f000 fbbb 	bl	800a9f0 <I2C_WaitOnFlagUntilTimeout>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d001      	beq.n	800a284 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a280:	2302      	movs	r3, #2
 800a282:	e1fb      	b.n	800a67c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d101      	bne.n	800a292 <HAL_I2C_Mem_Read+0x56>
 800a28e:	2302      	movs	r3, #2
 800a290:	e1f4      	b.n	800a67c <HAL_I2C_Mem_Read+0x440>
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2201      	movs	r2, #1
 800a296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f003 0301 	and.w	r3, r3, #1
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d007      	beq.n	800a2b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f042 0201 	orr.w	r2, r2, #1
 800a2b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a2c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2222      	movs	r2, #34	; 0x22
 800a2cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2240      	movs	r2, #64	; 0x40
 800a2d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a2e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2ee:	b29a      	uxth	r2, r3
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	4a5b      	ldr	r2, [pc, #364]	; (800a464 <HAL_I2C_Mem_Read+0x228>)
 800a2f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a2fa:	88f8      	ldrh	r0, [r7, #6]
 800a2fc:	893a      	ldrh	r2, [r7, #8]
 800a2fe:	8979      	ldrh	r1, [r7, #10]
 800a300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a302:	9301      	str	r3, [sp, #4]
 800a304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	4603      	mov	r3, r0
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f000 fa88 	bl	800a820 <I2C_RequestMemoryRead>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d001      	beq.n	800a31a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	e1b0      	b.n	800a67c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d113      	bne.n	800a34a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a322:	2300      	movs	r3, #0
 800a324:	623b      	str	r3, [r7, #32]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	695b      	ldr	r3, [r3, #20]
 800a32c:	623b      	str	r3, [r7, #32]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	699b      	ldr	r3, [r3, #24]
 800a334:	623b      	str	r3, [r7, #32]
 800a336:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a346:	601a      	str	r2, [r3, #0]
 800a348:	e184      	b.n	800a654 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d11b      	bne.n	800a38a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a360:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a362:	2300      	movs	r3, #0
 800a364:	61fb      	str	r3, [r7, #28]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	695b      	ldr	r3, [r3, #20]
 800a36c:	61fb      	str	r3, [r7, #28]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	699b      	ldr	r3, [r3, #24]
 800a374:	61fb      	str	r3, [r7, #28]
 800a376:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a386:	601a      	str	r2, [r3, #0]
 800a388:	e164      	b.n	800a654 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a38e:	2b02      	cmp	r3, #2
 800a390:	d11b      	bne.n	800a3ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	61bb      	str	r3, [r7, #24]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	695b      	ldr	r3, [r3, #20]
 800a3bc:	61bb      	str	r3, [r7, #24]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	699b      	ldr	r3, [r3, #24]
 800a3c4:	61bb      	str	r3, [r7, #24]
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	e144      	b.n	800a654 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	617b      	str	r3, [r7, #20]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	695b      	ldr	r3, [r3, #20]
 800a3d4:	617b      	str	r3, [r7, #20]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	699b      	ldr	r3, [r3, #24]
 800a3dc:	617b      	str	r3, [r7, #20]
 800a3de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a3e0:	e138      	b.n	800a654 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3e6:	2b03      	cmp	r3, #3
 800a3e8:	f200 80f1 	bhi.w	800a5ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d123      	bne.n	800a43c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a3f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f000 fc51 	bl	800aca0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d001      	beq.n	800a408 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	e139      	b.n	800a67c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	691a      	ldr	r2, [r3, #16]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a412:	b2d2      	uxtb	r2, r2
 800a414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41a:	1c5a      	adds	r2, r3, #1
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a424:	3b01      	subs	r3, #1
 800a426:	b29a      	uxth	r2, r3
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a430:	b29b      	uxth	r3, r3
 800a432:	3b01      	subs	r3, #1
 800a434:	b29a      	uxth	r2, r3
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a43a:	e10b      	b.n	800a654 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a440:	2b02      	cmp	r3, #2
 800a442:	d14e      	bne.n	800a4e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a446:	9300      	str	r3, [sp, #0]
 800a448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44a:	2200      	movs	r2, #0
 800a44c:	4906      	ldr	r1, [pc, #24]	; (800a468 <HAL_I2C_Mem_Read+0x22c>)
 800a44e:	68f8      	ldr	r0, [r7, #12]
 800a450:	f000 face 	bl	800a9f0 <I2C_WaitOnFlagUntilTimeout>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d008      	beq.n	800a46c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	e10e      	b.n	800a67c <HAL_I2C_Mem_Read+0x440>
 800a45e:	bf00      	nop
 800a460:	00100002 	.word	0x00100002
 800a464:	ffff0000 	.word	0xffff0000
 800a468:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a47a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	691a      	ldr	r2, [r3, #16]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a486:	b2d2      	uxtb	r2, r2
 800a488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a48e:	1c5a      	adds	r2, r3, #1
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a498:	3b01      	subs	r3, #1
 800a49a:	b29a      	uxth	r2, r3
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	b29a      	uxth	r2, r3
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	691a      	ldr	r2, [r3, #16]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b8:	b2d2      	uxtb	r2, r2
 800a4ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c0:	1c5a      	adds	r2, r3, #1
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	b29a      	uxth	r2, r3
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	3b01      	subs	r3, #1
 800a4da:	b29a      	uxth	r2, r3
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a4e0:	e0b8      	b.n	800a654 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	4966      	ldr	r1, [pc, #408]	; (800a684 <HAL_I2C_Mem_Read+0x448>)
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	f000 fa7f 	bl	800a9f0 <I2C_WaitOnFlagUntilTimeout>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d001      	beq.n	800a4fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e0bf      	b.n	800a67c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a50a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	691a      	ldr	r2, [r3, #16]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a516:	b2d2      	uxtb	r2, r2
 800a518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51e:	1c5a      	adds	r2, r3, #1
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a528:	3b01      	subs	r3, #1
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a534:	b29b      	uxth	r3, r3
 800a536:	3b01      	subs	r3, #1
 800a538:	b29a      	uxth	r2, r3
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a540:	9300      	str	r3, [sp, #0]
 800a542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a544:	2200      	movs	r2, #0
 800a546:	494f      	ldr	r1, [pc, #316]	; (800a684 <HAL_I2C_Mem_Read+0x448>)
 800a548:	68f8      	ldr	r0, [r7, #12]
 800a54a:	f000 fa51 	bl	800a9f0 <I2C_WaitOnFlagUntilTimeout>
 800a54e:	4603      	mov	r3, r0
 800a550:	2b00      	cmp	r3, #0
 800a552:	d001      	beq.n	800a558 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a554:	2301      	movs	r3, #1
 800a556:	e091      	b.n	800a67c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a566:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	691a      	ldr	r2, [r3, #16]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a572:	b2d2      	uxtb	r2, r2
 800a574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57a:	1c5a      	adds	r2, r3, #1
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a584:	3b01      	subs	r3, #1
 800a586:	b29a      	uxth	r2, r3
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a590:	b29b      	uxth	r3, r3
 800a592:	3b01      	subs	r3, #1
 800a594:	b29a      	uxth	r2, r3
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	691a      	ldr	r2, [r3, #16]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a4:	b2d2      	uxtb	r2, r2
 800a5a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ac:	1c5a      	adds	r2, r3, #1
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	b29a      	uxth	r2, r3
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a5cc:	e042      	b.n	800a654 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a5ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	f000 fb64 	bl	800aca0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d001      	beq.n	800a5e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e04c      	b.n	800a67c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	691a      	ldr	r2, [r3, #16]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ec:	b2d2      	uxtb	r2, r2
 800a5ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f4:	1c5a      	adds	r2, r3, #1
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5fe:	3b01      	subs	r3, #1
 800a600:	b29a      	uxth	r2, r3
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	3b01      	subs	r3, #1
 800a60e:	b29a      	uxth	r2, r3
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	695b      	ldr	r3, [r3, #20]
 800a61a:	f003 0304 	and.w	r3, r3, #4
 800a61e:	2b04      	cmp	r3, #4
 800a620:	d118      	bne.n	800a654 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	691a      	ldr	r2, [r3, #16]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62c:	b2d2      	uxtb	r2, r2
 800a62e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a634:	1c5a      	adds	r2, r3, #1
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a63e:	3b01      	subs	r3, #1
 800a640:	b29a      	uxth	r2, r3
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	3b01      	subs	r3, #1
 800a64e:	b29a      	uxth	r2, r3
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a658:	2b00      	cmp	r3, #0
 800a65a:	f47f aec2 	bne.w	800a3e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2220      	movs	r2, #32
 800a662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2200      	movs	r2, #0
 800a66a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2200      	movs	r2, #0
 800a672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a676:	2300      	movs	r3, #0
 800a678:	e000      	b.n	800a67c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a67a:	2302      	movs	r3, #2
  }
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3728      	adds	r7, #40	; 0x28
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}
 800a684:	00010004 	.word	0x00010004

0800a688 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a696:	b2db      	uxtb	r3, r3
 800a698:	2b20      	cmp	r3, #32
 800a69a:	d124      	bne.n	800a6e6 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2228      	movs	r2, #40	; 0x28
 800a6a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f003 0301 	and.w	r3, r3, #1
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d007      	beq.n	800a6c2 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f042 0201 	orr.w	r2, r2, #1
 800a6c0:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a6d0:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	685a      	ldr	r2, [r3, #4]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800a6e0:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	e000      	b.n	800a6e8 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800a6e6:	2302      	movs	r3, #2
  }
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b088      	sub	sp, #32
 800a6f8:	af02      	add	r7, sp, #8
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	4608      	mov	r0, r1
 800a6fe:	4611      	mov	r1, r2
 800a700:	461a      	mov	r2, r3
 800a702:	4603      	mov	r3, r0
 800a704:	817b      	strh	r3, [r7, #10]
 800a706:	460b      	mov	r3, r1
 800a708:	813b      	strh	r3, [r7, #8]
 800a70a:	4613      	mov	r3, r2
 800a70c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a71c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a720:	9300      	str	r3, [sp, #0]
 800a722:	6a3b      	ldr	r3, [r7, #32]
 800a724:	2200      	movs	r2, #0
 800a726:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a72a:	68f8      	ldr	r0, [r7, #12]
 800a72c:	f000 f960 	bl	800a9f0 <I2C_WaitOnFlagUntilTimeout>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00d      	beq.n	800a752 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a744:	d103      	bne.n	800a74e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a74c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a74e:	2303      	movs	r3, #3
 800a750:	e05f      	b.n	800a812 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a752:	897b      	ldrh	r3, [r7, #10]
 800a754:	b2db      	uxtb	r3, r3
 800a756:	461a      	mov	r2, r3
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a760:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a764:	6a3a      	ldr	r2, [r7, #32]
 800a766:	492d      	ldr	r1, [pc, #180]	; (800a81c <I2C_RequestMemoryWrite+0x128>)
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f000 f998 	bl	800aa9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d001      	beq.n	800a778 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	e04c      	b.n	800a812 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a778:	2300      	movs	r3, #0
 800a77a:	617b      	str	r3, [r7, #20]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	695b      	ldr	r3, [r3, #20]
 800a782:	617b      	str	r3, [r7, #20]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	699b      	ldr	r3, [r3, #24]
 800a78a:	617b      	str	r3, [r7, #20]
 800a78c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a78e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a790:	6a39      	ldr	r1, [r7, #32]
 800a792:	68f8      	ldr	r0, [r7, #12]
 800a794:	f000 fa02 	bl	800ab9c <I2C_WaitOnTXEFlagUntilTimeout>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00d      	beq.n	800a7ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a2:	2b04      	cmp	r3, #4
 800a7a4:	d107      	bne.n	800a7b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e02b      	b.n	800a812 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a7ba:	88fb      	ldrh	r3, [r7, #6]
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d105      	bne.n	800a7cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a7c0:	893b      	ldrh	r3, [r7, #8]
 800a7c2:	b2da      	uxtb	r2, r3
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	611a      	str	r2, [r3, #16]
 800a7ca:	e021      	b.n	800a810 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a7cc:	893b      	ldrh	r3, [r7, #8]
 800a7ce:	0a1b      	lsrs	r3, r3, #8
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	b2da      	uxtb	r2, r3
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7dc:	6a39      	ldr	r1, [r7, #32]
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	f000 f9dc 	bl	800ab9c <I2C_WaitOnTXEFlagUntilTimeout>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00d      	beq.n	800a806 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ee:	2b04      	cmp	r3, #4
 800a7f0:	d107      	bne.n	800a802 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a800:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	e005      	b.n	800a812 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a806:	893b      	ldrh	r3, [r7, #8]
 800a808:	b2da      	uxtb	r2, r3
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	3718      	adds	r7, #24
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	00010002 	.word	0x00010002

0800a820 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b088      	sub	sp, #32
 800a824:	af02      	add	r7, sp, #8
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	4608      	mov	r0, r1
 800a82a:	4611      	mov	r1, r2
 800a82c:	461a      	mov	r2, r3
 800a82e:	4603      	mov	r3, r0
 800a830:	817b      	strh	r3, [r7, #10]
 800a832:	460b      	mov	r3, r1
 800a834:	813b      	strh	r3, [r7, #8]
 800a836:	4613      	mov	r3, r2
 800a838:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a848:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a858:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85c:	9300      	str	r3, [sp, #0]
 800a85e:	6a3b      	ldr	r3, [r7, #32]
 800a860:	2200      	movs	r2, #0
 800a862:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	f000 f8c2 	bl	800a9f0 <I2C_WaitOnFlagUntilTimeout>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d00d      	beq.n	800a88e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a87c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a880:	d103      	bne.n	800a88a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a888:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a88a:	2303      	movs	r3, #3
 800a88c:	e0aa      	b.n	800a9e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a88e:	897b      	ldrh	r3, [r7, #10]
 800a890:	b2db      	uxtb	r3, r3
 800a892:	461a      	mov	r2, r3
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a89c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a0:	6a3a      	ldr	r2, [r7, #32]
 800a8a2:	4952      	ldr	r1, [pc, #328]	; (800a9ec <I2C_RequestMemoryRead+0x1cc>)
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f000 f8fa 	bl	800aa9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d001      	beq.n	800a8b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e097      	b.n	800a9e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	617b      	str	r3, [r7, #20]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	695b      	ldr	r3, [r3, #20]
 800a8be:	617b      	str	r3, [r7, #20]
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	699b      	ldr	r3, [r3, #24]
 800a8c6:	617b      	str	r3, [r7, #20]
 800a8c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8cc:	6a39      	ldr	r1, [r7, #32]
 800a8ce:	68f8      	ldr	r0, [r7, #12]
 800a8d0:	f000 f964 	bl	800ab9c <I2C_WaitOnTXEFlagUntilTimeout>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00d      	beq.n	800a8f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8de:	2b04      	cmp	r3, #4
 800a8e0:	d107      	bne.n	800a8f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e076      	b.n	800a9e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a8f6:	88fb      	ldrh	r3, [r7, #6]
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d105      	bne.n	800a908 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a8fc:	893b      	ldrh	r3, [r7, #8]
 800a8fe:	b2da      	uxtb	r2, r3
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	611a      	str	r2, [r3, #16]
 800a906:	e021      	b.n	800a94c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a908:	893b      	ldrh	r3, [r7, #8]
 800a90a:	0a1b      	lsrs	r3, r3, #8
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	b2da      	uxtb	r2, r3
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a918:	6a39      	ldr	r1, [r7, #32]
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f000 f93e 	bl	800ab9c <I2C_WaitOnTXEFlagUntilTimeout>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d00d      	beq.n	800a942 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a92a:	2b04      	cmp	r3, #4
 800a92c:	d107      	bne.n	800a93e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a93c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	e050      	b.n	800a9e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a942:	893b      	ldrh	r3, [r7, #8]
 800a944:	b2da      	uxtb	r2, r3
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a94c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a94e:	6a39      	ldr	r1, [r7, #32]
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f000 f923 	bl	800ab9c <I2C_WaitOnTXEFlagUntilTimeout>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d00d      	beq.n	800a978 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a960:	2b04      	cmp	r3, #4
 800a962:	d107      	bne.n	800a974 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a972:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a974:	2301      	movs	r3, #1
 800a976:	e035      	b.n	800a9e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a986:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98a:	9300      	str	r3, [sp, #0]
 800a98c:	6a3b      	ldr	r3, [r7, #32]
 800a98e:	2200      	movs	r2, #0
 800a990:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f000 f82b 	bl	800a9f0 <I2C_WaitOnFlagUntilTimeout>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d00d      	beq.n	800a9bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9ae:	d103      	bne.n	800a9b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a9b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a9b8:	2303      	movs	r3, #3
 800a9ba:	e013      	b.n	800a9e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a9bc:	897b      	ldrh	r3, [r7, #10]
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	f043 0301 	orr.w	r3, r3, #1
 800a9c4:	b2da      	uxtb	r2, r3
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ce:	6a3a      	ldr	r2, [r7, #32]
 800a9d0:	4906      	ldr	r1, [pc, #24]	; (800a9ec <I2C_RequestMemoryRead+0x1cc>)
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	f000 f863 	bl	800aa9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d001      	beq.n	800a9e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e000      	b.n	800a9e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a9e2:	2300      	movs	r3, #0
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3718      	adds	r7, #24
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	00010002 	.word	0x00010002

0800a9f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	603b      	str	r3, [r7, #0]
 800a9fc:	4613      	mov	r3, r2
 800a9fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa00:	e025      	b.n	800aa4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa08:	d021      	beq.n	800aa4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa0a:	f7fe fc21 	bl	8009250 <HAL_GetTick>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	1ad3      	subs	r3, r2, r3
 800aa14:	683a      	ldr	r2, [r7, #0]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d302      	bcc.n	800aa20 <I2C_WaitOnFlagUntilTimeout+0x30>
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d116      	bne.n	800aa4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2200      	movs	r2, #0
 800aa24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2220      	movs	r2, #32
 800aa2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa3a:	f043 0220 	orr.w	r2, r3, #32
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2200      	movs	r2, #0
 800aa46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	e023      	b.n	800aa96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	0c1b      	lsrs	r3, r3, #16
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d10d      	bne.n	800aa74 <I2C_WaitOnFlagUntilTimeout+0x84>
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	695b      	ldr	r3, [r3, #20]
 800aa5e:	43da      	mvns	r2, r3
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	4013      	ands	r3, r2
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	bf0c      	ite	eq
 800aa6a:	2301      	moveq	r3, #1
 800aa6c:	2300      	movne	r3, #0
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	461a      	mov	r2, r3
 800aa72:	e00c      	b.n	800aa8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	699b      	ldr	r3, [r3, #24]
 800aa7a:	43da      	mvns	r2, r3
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	4013      	ands	r3, r2
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	bf0c      	ite	eq
 800aa86:	2301      	moveq	r3, #1
 800aa88:	2300      	movne	r3, #0
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	79fb      	ldrb	r3, [r7, #7]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d0b6      	beq.n	800aa02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b084      	sub	sp, #16
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	60f8      	str	r0, [r7, #12]
 800aaa6:	60b9      	str	r1, [r7, #8]
 800aaa8:	607a      	str	r2, [r7, #4]
 800aaaa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aaac:	e051      	b.n	800ab52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	695b      	ldr	r3, [r3, #20]
 800aab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aabc:	d123      	bne.n	800ab06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aacc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800aad6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2220      	movs	r2, #32
 800aae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf2:	f043 0204 	orr.w	r2, r3, #4
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2200      	movs	r2, #0
 800aafe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ab02:	2301      	movs	r3, #1
 800ab04:	e046      	b.n	800ab94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab0c:	d021      	beq.n	800ab52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab0e:	f7fe fb9f 	bl	8009250 <HAL_GetTick>
 800ab12:	4602      	mov	r2, r0
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	1ad3      	subs	r3, r2, r3
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d302      	bcc.n	800ab24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d116      	bne.n	800ab52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2200      	movs	r2, #0
 800ab28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2220      	movs	r2, #32
 800ab2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2200      	movs	r2, #0
 800ab36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab3e:	f043 0220 	orr.w	r2, r3, #32
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	e020      	b.n	800ab94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	0c1b      	lsrs	r3, r3, #16
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d10c      	bne.n	800ab76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	695b      	ldr	r3, [r3, #20]
 800ab62:	43da      	mvns	r2, r3
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	4013      	ands	r3, r2
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	bf14      	ite	ne
 800ab6e:	2301      	movne	r3, #1
 800ab70:	2300      	moveq	r3, #0
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	e00b      	b.n	800ab8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	699b      	ldr	r3, [r3, #24]
 800ab7c:	43da      	mvns	r2, r3
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	4013      	ands	r3, r2
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	bf14      	ite	ne
 800ab88:	2301      	movne	r3, #1
 800ab8a:	2300      	moveq	r3, #0
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d18d      	bne.n	800aaae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800ab92:	2300      	movs	r3, #0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3710      	adds	r7, #16
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	60f8      	str	r0, [r7, #12]
 800aba4:	60b9      	str	r1, [r7, #8]
 800aba6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aba8:	e02d      	b.n	800ac06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	f000 f8ce 	bl	800ad4c <I2C_IsAcknowledgeFailed>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d001      	beq.n	800abba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800abb6:	2301      	movs	r3, #1
 800abb8:	e02d      	b.n	800ac16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc0:	d021      	beq.n	800ac06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abc2:	f7fe fb45 	bl	8009250 <HAL_GetTick>
 800abc6:	4602      	mov	r2, r0
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	1ad3      	subs	r3, r2, r3
 800abcc:	68ba      	ldr	r2, [r7, #8]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d302      	bcc.n	800abd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d116      	bne.n	800ac06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2200      	movs	r2, #0
 800abdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2220      	movs	r2, #32
 800abe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2200      	movs	r2, #0
 800abea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf2:	f043 0220 	orr.w	r2, r3, #32
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	e007      	b.n	800ac16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	695b      	ldr	r3, [r3, #20]
 800ac0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac10:	2b80      	cmp	r3, #128	; 0x80
 800ac12:	d1ca      	bne.n	800abaa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3710      	adds	r7, #16
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b084      	sub	sp, #16
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	60f8      	str	r0, [r7, #12]
 800ac26:	60b9      	str	r1, [r7, #8]
 800ac28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ac2a:	e02d      	b.n	800ac88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	f000 f88d 	bl	800ad4c <I2C_IsAcknowledgeFailed>
 800ac32:	4603      	mov	r3, r0
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d001      	beq.n	800ac3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	e02d      	b.n	800ac98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac42:	d021      	beq.n	800ac88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac44:	f7fe fb04 	bl	8009250 <HAL_GetTick>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	1ad3      	subs	r3, r2, r3
 800ac4e:	68ba      	ldr	r2, [r7, #8]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d302      	bcc.n	800ac5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d116      	bne.n	800ac88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2220      	movs	r2, #32
 800ac64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac74:	f043 0220 	orr.w	r2, r3, #32
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ac84:	2301      	movs	r3, #1
 800ac86:	e007      	b.n	800ac98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	695b      	ldr	r3, [r3, #20]
 800ac8e:	f003 0304 	and.w	r3, r3, #4
 800ac92:	2b04      	cmp	r3, #4
 800ac94:	d1ca      	bne.n	800ac2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ac96:	2300      	movs	r3, #0
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3710      	adds	r7, #16
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800acac:	e042      	b.n	800ad34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	695b      	ldr	r3, [r3, #20]
 800acb4:	f003 0310 	and.w	r3, r3, #16
 800acb8:	2b10      	cmp	r3, #16
 800acba:	d119      	bne.n	800acf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f06f 0210 	mvn.w	r2, #16
 800acc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2200      	movs	r2, #0
 800acca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2220      	movs	r2, #32
 800acd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2200      	movs	r2, #0
 800ace8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800acec:	2301      	movs	r3, #1
 800acee:	e029      	b.n	800ad44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800acf0:	f7fe faae 	bl	8009250 <HAL_GetTick>
 800acf4:	4602      	mov	r2, r0
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	68ba      	ldr	r2, [r7, #8]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d302      	bcc.n	800ad06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d116      	bne.n	800ad34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2220      	movs	r2, #32
 800ad10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad20:	f043 0220 	orr.w	r2, r3, #32
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ad30:	2301      	movs	r3, #1
 800ad32:	e007      	b.n	800ad44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	695b      	ldr	r3, [r3, #20]
 800ad3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad3e:	2b40      	cmp	r3, #64	; 0x40
 800ad40:	d1b5      	bne.n	800acae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	695b      	ldr	r3, [r3, #20]
 800ad5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad62:	d11b      	bne.n	800ad9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ad6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2200      	movs	r2, #0
 800ad72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2220      	movs	r2, #32
 800ad78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad88:	f043 0204 	orr.w	r2, r3, #4
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	e000      	b.n	800ad9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ad9c:	2300      	movs	r3, #0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	370c      	adds	r7, #12
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr

0800adaa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800adaa:	b480      	push	{r7}
 800adac:	b083      	sub	sp, #12
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
 800adb2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adba:	b2db      	uxtb	r3, r3
 800adbc:	2b20      	cmp	r3, #32
 800adbe:	d129      	bne.n	800ae14 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2224      	movs	r2, #36	; 0x24
 800adc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	681a      	ldr	r2, [r3, #0]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f022 0201 	bic.w	r2, r2, #1
 800add6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f022 0210 	bic.w	r2, r2, #16
 800ade6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	683a      	ldr	r2, [r7, #0]
 800adf4:	430a      	orrs	r2, r1
 800adf6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f042 0201 	orr.w	r2, r2, #1
 800ae06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2220      	movs	r2, #32
 800ae0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ae10:	2300      	movs	r3, #0
 800ae12:	e000      	b.n	800ae16 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800ae14:	2302      	movs	r3, #2
  }
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	370c      	adds	r7, #12
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr

0800ae22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ae22:	b480      	push	{r7}
 800ae24:	b085      	sub	sp, #20
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
 800ae2a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	2b20      	cmp	r3, #32
 800ae3a:	d12a      	bne.n	800ae92 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2224      	movs	r2, #36	; 0x24
 800ae40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	681a      	ldr	r2, [r3, #0]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f022 0201 	bic.w	r2, r2, #1
 800ae52:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800ae5c:	89fb      	ldrh	r3, [r7, #14]
 800ae5e:	f023 030f 	bic.w	r3, r3, #15
 800ae62:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	b29a      	uxth	r2, r3
 800ae68:	89fb      	ldrh	r3, [r7, #14]
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	89fa      	ldrh	r2, [r7, #14]
 800ae74:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f042 0201 	orr.w	r2, r2, #1
 800ae84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2220      	movs	r2, #32
 800ae8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	e000      	b.n	800ae94 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800ae92:	2302      	movs	r3, #2
  }
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3714      	adds	r7, #20
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800aea0:	b590      	push	{r4, r7, lr}
 800aea2:	b08d      	sub	sp, #52	; 0x34
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeae:	6a3b      	ldr	r3, [r7, #32]
 800aeb0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f005 fc56 	bl	8010768 <USB_GetMode>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	f040 839d 	bne.w	800b5fe <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4618      	mov	r0, r3
 800aeca:	f005 fbba 	bl	8010642 <USB_ReadInterrupts>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f000 8393 	beq.w	800b5fc <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4618      	mov	r0, r3
 800aedc:	f005 fbb1 	bl	8010642 <USB_ReadInterrupts>
 800aee0:	4603      	mov	r3, r0
 800aee2:	f003 0302 	and.w	r3, r3, #2
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d107      	bne.n	800aefa <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	695a      	ldr	r2, [r3, #20]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f002 0202 	and.w	r2, r2, #2
 800aef8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4618      	mov	r0, r3
 800af00:	f005 fb9f 	bl	8010642 <USB_ReadInterrupts>
 800af04:	4603      	mov	r3, r0
 800af06:	f003 0310 	and.w	r3, r3, #16
 800af0a:	2b10      	cmp	r3, #16
 800af0c:	d161      	bne.n	800afd2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	699a      	ldr	r2, [r3, #24]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f022 0210 	bic.w	r2, r2, #16
 800af1c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800af1e:	6a3b      	ldr	r3, [r7, #32]
 800af20:	6a1b      	ldr	r3, [r3, #32]
 800af22:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	f003 020f 	and.w	r2, r3, #15
 800af2a:	4613      	mov	r3, r2
 800af2c:	00db      	lsls	r3, r3, #3
 800af2e:	1a9b      	subs	r3, r3, r2
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	4413      	add	r3, r2
 800af3a:	3304      	adds	r3, #4
 800af3c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800af3e:	69bb      	ldr	r3, [r7, #24]
 800af40:	0c5b      	lsrs	r3, r3, #17
 800af42:	f003 030f 	and.w	r3, r3, #15
 800af46:	2b02      	cmp	r3, #2
 800af48:	d124      	bne.n	800af94 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800af4a:	69ba      	ldr	r2, [r7, #24]
 800af4c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800af50:	4013      	ands	r3, r2
 800af52:	2b00      	cmp	r3, #0
 800af54:	d035      	beq.n	800afc2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800af5a:	69bb      	ldr	r3, [r7, #24]
 800af5c:	091b      	lsrs	r3, r3, #4
 800af5e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800af60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af64:	b29b      	uxth	r3, r3
 800af66:	461a      	mov	r2, r3
 800af68:	6a38      	ldr	r0, [r7, #32]
 800af6a:	f005 fa18 	bl	801039e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	68da      	ldr	r2, [r3, #12]
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	091b      	lsrs	r3, r3, #4
 800af76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af7a:	441a      	add	r2, r3
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	699a      	ldr	r2, [r3, #24]
 800af84:	69bb      	ldr	r3, [r7, #24]
 800af86:	091b      	lsrs	r3, r3, #4
 800af88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af8c:	441a      	add	r2, r3
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	619a      	str	r2, [r3, #24]
 800af92:	e016      	b.n	800afc2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800af94:	69bb      	ldr	r3, [r7, #24]
 800af96:	0c5b      	lsrs	r3, r3, #17
 800af98:	f003 030f 	and.w	r3, r3, #15
 800af9c:	2b06      	cmp	r3, #6
 800af9e:	d110      	bne.n	800afc2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800afa6:	2208      	movs	r2, #8
 800afa8:	4619      	mov	r1, r3
 800afaa:	6a38      	ldr	r0, [r7, #32]
 800afac:	f005 f9f7 	bl	801039e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	699a      	ldr	r2, [r3, #24]
 800afb4:	69bb      	ldr	r3, [r7, #24]
 800afb6:	091b      	lsrs	r3, r3, #4
 800afb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800afbc:	441a      	add	r2, r3
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	699a      	ldr	r2, [r3, #24]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f042 0210 	orr.w	r2, r2, #16
 800afd0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4618      	mov	r0, r3
 800afd8:	f005 fb33 	bl	8010642 <USB_ReadInterrupts>
 800afdc:	4603      	mov	r3, r0
 800afde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800afe2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800afe6:	d16e      	bne.n	800b0c6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800afe8:	2300      	movs	r3, #0
 800afea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4618      	mov	r0, r3
 800aff2:	f005 fb39 	bl	8010668 <USB_ReadDevAllOutEpInterrupt>
 800aff6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800aff8:	e062      	b.n	800b0c0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800affa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affc:	f003 0301 	and.w	r3, r3, #1
 800b000:	2b00      	cmp	r3, #0
 800b002:	d057      	beq.n	800b0b4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b00a:	b2d2      	uxtb	r2, r2
 800b00c:	4611      	mov	r1, r2
 800b00e:	4618      	mov	r0, r3
 800b010:	f005 fb5e 	bl	80106d0 <USB_ReadDevOutEPInterrupt>
 800b014:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	f003 0301 	and.w	r3, r3, #1
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d00c      	beq.n	800b03a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b022:	015a      	lsls	r2, r3, #5
 800b024:	69fb      	ldr	r3, [r7, #28]
 800b026:	4413      	add	r3, r2
 800b028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b02c:	461a      	mov	r2, r3
 800b02e:	2301      	movs	r3, #1
 800b030:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b032:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 fd4f 	bl	800bad8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	f003 0308 	and.w	r3, r3, #8
 800b040:	2b00      	cmp	r3, #0
 800b042:	d00c      	beq.n	800b05e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b046:	015a      	lsls	r2, r3, #5
 800b048:	69fb      	ldr	r3, [r7, #28]
 800b04a:	4413      	add	r3, r2
 800b04c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b050:	461a      	mov	r2, r3
 800b052:	2308      	movs	r3, #8
 800b054:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b056:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 fe49 	bl	800bcf0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	f003 0310 	and.w	r3, r3, #16
 800b064:	2b00      	cmp	r3, #0
 800b066:	d008      	beq.n	800b07a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06a:	015a      	lsls	r2, r3, #5
 800b06c:	69fb      	ldr	r3, [r7, #28]
 800b06e:	4413      	add	r3, r2
 800b070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b074:	461a      	mov	r2, r3
 800b076:	2310      	movs	r3, #16
 800b078:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	f003 0320 	and.w	r3, r3, #32
 800b080:	2b00      	cmp	r3, #0
 800b082:	d008      	beq.n	800b096 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b086:	015a      	lsls	r2, r3, #5
 800b088:	69fb      	ldr	r3, [r7, #28]
 800b08a:	4413      	add	r3, r2
 800b08c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b090:	461a      	mov	r2, r3
 800b092:	2320      	movs	r3, #32
 800b094:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d009      	beq.n	800b0b4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a2:	015a      	lsls	r2, r3, #5
 800b0a4:	69fb      	ldr	r3, [r7, #28]
 800b0a6:	4413      	add	r3, r2
 800b0a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0ac:	461a      	mov	r2, r3
 800b0ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b0b2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0bc:	085b      	lsrs	r3, r3, #1
 800b0be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d199      	bne.n	800affa <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f005 fab9 	bl	8010642 <USB_ReadInterrupts>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b0d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b0da:	f040 80c0 	bne.w	800b25e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f005 fada 	bl	801069c <USB_ReadDevAllInEpInterrupt>
 800b0e8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b0ee:	e0b2      	b.n	800b256 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f2:	f003 0301 	and.w	r3, r3, #1
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	f000 80a7 	beq.w	800b24a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b102:	b2d2      	uxtb	r2, r2
 800b104:	4611      	mov	r1, r2
 800b106:	4618      	mov	r0, r3
 800b108:	f005 fb00 	bl	801070c <USB_ReadDevInEPInterrupt>
 800b10c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	f003 0301 	and.w	r3, r3, #1
 800b114:	2b00      	cmp	r3, #0
 800b116:	d057      	beq.n	800b1c8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11a:	f003 030f 	and.w	r3, r3, #15
 800b11e:	2201      	movs	r2, #1
 800b120:	fa02 f303 	lsl.w	r3, r2, r3
 800b124:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b12c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	43db      	mvns	r3, r3
 800b132:	69f9      	ldr	r1, [r7, #28]
 800b134:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b138:	4013      	ands	r3, r2
 800b13a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13e:	015a      	lsls	r2, r3, #5
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	4413      	add	r3, r2
 800b144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b148:	461a      	mov	r2, r3
 800b14a:	2301      	movs	r3, #1
 800b14c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	691b      	ldr	r3, [r3, #16]
 800b152:	2b01      	cmp	r3, #1
 800b154:	d132      	bne.n	800b1bc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b156:	6879      	ldr	r1, [r7, #4]
 800b158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b15a:	4613      	mov	r3, r2
 800b15c:	00db      	lsls	r3, r3, #3
 800b15e:	1a9b      	subs	r3, r3, r2
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	440b      	add	r3, r1
 800b164:	3348      	adds	r3, #72	; 0x48
 800b166:	6819      	ldr	r1, [r3, #0]
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b16c:	4613      	mov	r3, r2
 800b16e:	00db      	lsls	r3, r3, #3
 800b170:	1a9b      	subs	r3, r3, r2
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	4403      	add	r3, r0
 800b176:	3344      	adds	r3, #68	; 0x44
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4419      	add	r1, r3
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b180:	4613      	mov	r3, r2
 800b182:	00db      	lsls	r3, r3, #3
 800b184:	1a9b      	subs	r3, r3, r2
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	4403      	add	r3, r0
 800b18a:	3348      	adds	r3, #72	; 0x48
 800b18c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b190:	2b00      	cmp	r3, #0
 800b192:	d113      	bne.n	800b1bc <HAL_PCD_IRQHandler+0x31c>
 800b194:	6879      	ldr	r1, [r7, #4]
 800b196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b198:	4613      	mov	r3, r2
 800b19a:	00db      	lsls	r3, r3, #3
 800b19c:	1a9b      	subs	r3, r3, r2
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	440b      	add	r3, r1
 800b1a2:	3350      	adds	r3, #80	; 0x50
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d108      	bne.n	800b1bc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6818      	ldr	r0, [r3, #0]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	2101      	movs	r1, #1
 800b1b8:	f005 fb08 	bl	80107cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f00b fba1 	bl	801690a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	f003 0308 	and.w	r3, r3, #8
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d008      	beq.n	800b1e4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d4:	015a      	lsls	r2, r3, #5
 800b1d6:	69fb      	ldr	r3, [r7, #28]
 800b1d8:	4413      	add	r3, r2
 800b1da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1de:	461a      	mov	r2, r3
 800b1e0:	2308      	movs	r3, #8
 800b1e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	f003 0310 	and.w	r3, r3, #16
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d008      	beq.n	800b200 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f0:	015a      	lsls	r2, r3, #5
 800b1f2:	69fb      	ldr	r3, [r7, #28]
 800b1f4:	4413      	add	r3, r2
 800b1f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	2310      	movs	r3, #16
 800b1fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b206:	2b00      	cmp	r3, #0
 800b208:	d008      	beq.n	800b21c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20c:	015a      	lsls	r2, r3, #5
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	4413      	add	r3, r2
 800b212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b216:	461a      	mov	r2, r3
 800b218:	2340      	movs	r3, #64	; 0x40
 800b21a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	f003 0302 	and.w	r3, r3, #2
 800b222:	2b00      	cmp	r3, #0
 800b224:	d008      	beq.n	800b238 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b228:	015a      	lsls	r2, r3, #5
 800b22a:	69fb      	ldr	r3, [r7, #28]
 800b22c:	4413      	add	r3, r2
 800b22e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b232:	461a      	mov	r2, r3
 800b234:	2302      	movs	r3, #2
 800b236:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d003      	beq.n	800b24a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b242:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f000 fbb9 	bl	800b9bc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24c:	3301      	adds	r3, #1
 800b24e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b252:	085b      	lsrs	r3, r3, #1
 800b254:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b258:	2b00      	cmp	r3, #0
 800b25a:	f47f af49 	bne.w	800b0f0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4618      	mov	r0, r3
 800b264:	f005 f9ed 	bl	8010642 <USB_ReadInterrupts>
 800b268:	4603      	mov	r3, r0
 800b26a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b26e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b272:	d122      	bne.n	800b2ba <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b274:	69fb      	ldr	r3, [r7, #28]
 800b276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	69fa      	ldr	r2, [r7, #28]
 800b27e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b282:	f023 0301 	bic.w	r3, r3, #1
 800b286:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800b28e:	2b01      	cmp	r3, #1
 800b290:	d108      	bne.n	800b2a4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b29a:	2100      	movs	r1, #0
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f000 fd6d 	bl	800bd7c <HAL_PCDEx_LPM_Callback>
 800b2a2:	e002      	b.n	800b2aa <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f00b fba7 	bl	80169f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	695a      	ldr	r2, [r3, #20]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b2b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f005 f9bf 	bl	8010642 <USB_ReadInterrupts>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2ce:	d112      	bne.n	800b2f6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	f003 0301 	and.w	r3, r3, #1
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d102      	bne.n	800b2e6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f00b fb63 	bl	80169ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	695a      	ldr	r2, [r3, #20]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b2f4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f005 f9a1 	bl	8010642 <USB_ReadInterrupts>
 800b300:	4603      	mov	r3, r0
 800b302:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b30a:	f040 80c7 	bne.w	800b49c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b30e:	69fb      	ldr	r3, [r7, #28]
 800b310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	69fa      	ldr	r2, [r7, #28]
 800b318:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b31c:	f023 0301 	bic.w	r3, r3, #1
 800b320:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	2110      	movs	r1, #16
 800b328:	4618      	mov	r0, r3
 800b32a:	f004 fb93 	bl	800fa54 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b32e:	2300      	movs	r3, #0
 800b330:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b332:	e056      	b.n	800b3e2 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b336:	015a      	lsls	r2, r3, #5
 800b338:	69fb      	ldr	r3, [r7, #28]
 800b33a:	4413      	add	r3, r2
 800b33c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b340:	461a      	mov	r2, r3
 800b342:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b346:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b34a:	015a      	lsls	r2, r3, #5
 800b34c:	69fb      	ldr	r3, [r7, #28]
 800b34e:	4413      	add	r3, r2
 800b350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b358:	0151      	lsls	r1, r2, #5
 800b35a:	69fa      	ldr	r2, [r7, #28]
 800b35c:	440a      	add	r2, r1
 800b35e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b362:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b366:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b36a:	015a      	lsls	r2, r3, #5
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	4413      	add	r3, r2
 800b370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b378:	0151      	lsls	r1, r2, #5
 800b37a:	69fa      	ldr	r2, [r7, #28]
 800b37c:	440a      	add	r2, r1
 800b37e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b382:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b386:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38a:	015a      	lsls	r2, r3, #5
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	4413      	add	r3, r2
 800b390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b394:	461a      	mov	r2, r3
 800b396:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b39a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b39e:	015a      	lsls	r2, r3, #5
 800b3a0:	69fb      	ldr	r3, [r7, #28]
 800b3a2:	4413      	add	r3, r2
 800b3a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3ac:	0151      	lsls	r1, r2, #5
 800b3ae:	69fa      	ldr	r2, [r7, #28]
 800b3b0:	440a      	add	r2, r1
 800b3b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b3ba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3be:	015a      	lsls	r2, r3, #5
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	4413      	add	r3, r2
 800b3c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3cc:	0151      	lsls	r1, r2, #5
 800b3ce:	69fa      	ldr	r2, [r7, #28]
 800b3d0:	440a      	add	r2, r1
 800b3d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b3da:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3de:	3301      	adds	r3, #1
 800b3e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d3a3      	bcc.n	800b334 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b3ec:	69fb      	ldr	r3, [r7, #28]
 800b3ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3f2:	69db      	ldr	r3, [r3, #28]
 800b3f4:	69fa      	ldr	r2, [r7, #28]
 800b3f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b3fa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b3fe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b404:	2b00      	cmp	r3, #0
 800b406:	d016      	beq.n	800b436 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b40e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b412:	69fa      	ldr	r2, [r7, #28]
 800b414:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b418:	f043 030b 	orr.w	r3, r3, #11
 800b41c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b420:	69fb      	ldr	r3, [r7, #28]
 800b422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b428:	69fa      	ldr	r2, [r7, #28]
 800b42a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b42e:	f043 030b 	orr.w	r3, r3, #11
 800b432:	6453      	str	r3, [r2, #68]	; 0x44
 800b434:	e015      	b.n	800b462 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b436:	69fb      	ldr	r3, [r7, #28]
 800b438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b43c:	695b      	ldr	r3, [r3, #20]
 800b43e:	69fa      	ldr	r2, [r7, #28]
 800b440:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b444:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b448:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800b44c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b44e:	69fb      	ldr	r3, [r7, #28]
 800b450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b454:	691b      	ldr	r3, [r3, #16]
 800b456:	69fa      	ldr	r2, [r7, #28]
 800b458:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b45c:	f043 030b 	orr.w	r3, r3, #11
 800b460:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b462:	69fb      	ldr	r3, [r7, #28]
 800b464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	69fa      	ldr	r2, [r7, #28]
 800b46c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b470:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b474:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6818      	ldr	r0, [r3, #0]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	691b      	ldr	r3, [r3, #16]
 800b47e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b486:	461a      	mov	r2, r3
 800b488:	f005 f9a0 	bl	80107cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	695a      	ldr	r2, [r3, #20]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b49a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f005 f8ce 	bl	8010642 <USB_ReadInterrupts>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b4ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4b0:	d124      	bne.n	800b4fc <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f005 f964 	bl	8010784 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f004 faeb 	bl	800fa9c <USB_GetDevSpeed>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681c      	ldr	r4, [r3, #0]
 800b4d2:	f001 f8db 	bl	800c68c <HAL_RCC_GetHCLKFreq>
 800b4d6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	461a      	mov	r2, r3
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	f004 fa15 	bl	800f910 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f00b fa37 	bl	801695a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	695a      	ldr	r2, [r3, #20]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800b4fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4618      	mov	r0, r3
 800b502:	f005 f89e 	bl	8010642 <USB_ReadInterrupts>
 800b506:	4603      	mov	r3, r0
 800b508:	f003 0308 	and.w	r3, r3, #8
 800b50c:	2b08      	cmp	r3, #8
 800b50e:	d10a      	bne.n	800b526 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f00b fa14 	bl	801693e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	695a      	ldr	r2, [r3, #20]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f002 0208 	and.w	r2, r2, #8
 800b524:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4618      	mov	r0, r3
 800b52c:	f005 f889 	bl	8010642 <USB_ReadInterrupts>
 800b530:	4603      	mov	r3, r0
 800b532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b536:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b53a:	d10f      	bne.n	800b55c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b53c:	2300      	movs	r3, #0
 800b53e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b542:	b2db      	uxtb	r3, r3
 800b544:	4619      	mov	r1, r3
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f00b fa76 	bl	8016a38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	695a      	ldr	r2, [r3, #20]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800b55a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4618      	mov	r0, r3
 800b562:	f005 f86e 	bl	8010642 <USB_ReadInterrupts>
 800b566:	4603      	mov	r3, r0
 800b568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b56c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b570:	d10f      	bne.n	800b592 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b572:	2300      	movs	r3, #0
 800b574:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	4619      	mov	r1, r3
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f00b fa49 	bl	8016a14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	695a      	ldr	r2, [r3, #20]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800b590:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4618      	mov	r0, r3
 800b598:	f005 f853 	bl	8010642 <USB_ReadInterrupts>
 800b59c:	4603      	mov	r3, r0
 800b59e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b5a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5a6:	d10a      	bne.n	800b5be <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f00b fa57 	bl	8016a5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	695a      	ldr	r2, [r3, #20]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800b5bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f005 f83d 	bl	8010642 <USB_ReadInterrupts>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	f003 0304 	and.w	r3, r3, #4
 800b5ce:	2b04      	cmp	r3, #4
 800b5d0:	d115      	bne.n	800b5fe <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b5da:	69bb      	ldr	r3, [r7, #24]
 800b5dc:	f003 0304 	and.w	r3, r3, #4
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d002      	beq.n	800b5ea <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f00b fa47 	bl	8016a78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	6859      	ldr	r1, [r3, #4]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	69ba      	ldr	r2, [r7, #24]
 800b5f6:	430a      	orrs	r2, r1
 800b5f8:	605a      	str	r2, [r3, #4]
 800b5fa:	e000      	b.n	800b5fe <HAL_PCD_IRQHandler+0x75e>
      return;
 800b5fc:	bf00      	nop
    }
  }
}
 800b5fe:	3734      	adds	r7, #52	; 0x34
 800b600:	46bd      	mov	sp, r7
 800b602:	bd90      	pop	{r4, r7, pc}

0800b604 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	460b      	mov	r3, r1
 800b60e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b616:	2b01      	cmp	r3, #1
 800b618:	d101      	bne.n	800b61e <HAL_PCD_SetAddress+0x1a>
 800b61a:	2302      	movs	r3, #2
 800b61c:	e013      	b.n	800b646 <HAL_PCD_SetAddress+0x42>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2201      	movs	r2, #1
 800b622:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	78fa      	ldrb	r2, [r7, #3]
 800b62a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	78fa      	ldrb	r2, [r7, #3]
 800b634:	4611      	mov	r1, r2
 800b636:	4618      	mov	r0, r3
 800b638:	f004 ffdd 	bl	80105f6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b644:	2300      	movs	r3, #0
}
 800b646:	4618      	mov	r0, r3
 800b648:	3708      	adds	r7, #8
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}

0800b64e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b64e:	b580      	push	{r7, lr}
 800b650:	b084      	sub	sp, #16
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
 800b656:	4608      	mov	r0, r1
 800b658:	4611      	mov	r1, r2
 800b65a:	461a      	mov	r2, r3
 800b65c:	4603      	mov	r3, r0
 800b65e:	70fb      	strb	r3, [r7, #3]
 800b660:	460b      	mov	r3, r1
 800b662:	803b      	strh	r3, [r7, #0]
 800b664:	4613      	mov	r3, r2
 800b666:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b668:	2300      	movs	r3, #0
 800b66a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b66c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b670:	2b00      	cmp	r3, #0
 800b672:	da0f      	bge.n	800b694 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b674:	78fb      	ldrb	r3, [r7, #3]
 800b676:	f003 020f 	and.w	r2, r3, #15
 800b67a:	4613      	mov	r3, r2
 800b67c:	00db      	lsls	r3, r3, #3
 800b67e:	1a9b      	subs	r3, r3, r2
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	3338      	adds	r3, #56	; 0x38
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	4413      	add	r3, r2
 800b688:	3304      	adds	r3, #4
 800b68a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2201      	movs	r2, #1
 800b690:	705a      	strb	r2, [r3, #1]
 800b692:	e00f      	b.n	800b6b4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b694:	78fb      	ldrb	r3, [r7, #3]
 800b696:	f003 020f 	and.w	r2, r3, #15
 800b69a:	4613      	mov	r3, r2
 800b69c:	00db      	lsls	r3, r3, #3
 800b69e:	1a9b      	subs	r3, r3, r2
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	4413      	add	r3, r2
 800b6aa:	3304      	adds	r3, #4
 800b6ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b6b4:	78fb      	ldrb	r3, [r7, #3]
 800b6b6:	f003 030f 	and.w	r3, r3, #15
 800b6ba:	b2da      	uxtb	r2, r3
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b6c0:	883a      	ldrh	r2, [r7, #0]
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	78ba      	ldrb	r2, [r7, #2]
 800b6ca:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	785b      	ldrb	r3, [r3, #1]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d004      	beq.n	800b6de <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	b29a      	uxth	r2, r3
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b6de:	78bb      	ldrb	r3, [r7, #2]
 800b6e0:	2b02      	cmp	r3, #2
 800b6e2:	d102      	bne.n	800b6ea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d101      	bne.n	800b6f8 <HAL_PCD_EP_Open+0xaa>
 800b6f4:	2302      	movs	r3, #2
 800b6f6:	e00e      	b.n	800b716 <HAL_PCD_EP_Open+0xc8>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	68f9      	ldr	r1, [r7, #12]
 800b706:	4618      	mov	r0, r3
 800b708:	f004 f9ed 	bl	800fae6 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800b714:	7afb      	ldrb	r3, [r7, #11]
}
 800b716:	4618      	mov	r0, r3
 800b718:	3710      	adds	r7, #16
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}

0800b71e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b71e:	b580      	push	{r7, lr}
 800b720:	b086      	sub	sp, #24
 800b722:	af00      	add	r7, sp, #0
 800b724:	60f8      	str	r0, [r7, #12]
 800b726:	607a      	str	r2, [r7, #4]
 800b728:	603b      	str	r3, [r7, #0]
 800b72a:	460b      	mov	r3, r1
 800b72c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b72e:	7afb      	ldrb	r3, [r7, #11]
 800b730:	f003 020f 	and.w	r2, r3, #15
 800b734:	4613      	mov	r3, r2
 800b736:	00db      	lsls	r3, r3, #3
 800b738:	1a9b      	subs	r3, r3, r2
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b740:	68fa      	ldr	r2, [r7, #12]
 800b742:	4413      	add	r3, r2
 800b744:	3304      	adds	r3, #4
 800b746:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	683a      	ldr	r2, [r7, #0]
 800b752:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	2200      	movs	r2, #0
 800b758:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	2200      	movs	r2, #0
 800b75e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b760:	7afb      	ldrb	r3, [r7, #11]
 800b762:	f003 030f 	and.w	r3, r3, #15
 800b766:	b2da      	uxtb	r2, r3
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	691b      	ldr	r3, [r3, #16]
 800b770:	2b01      	cmp	r3, #1
 800b772:	d102      	bne.n	800b77a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b77a:	7afb      	ldrb	r3, [r7, #11]
 800b77c:	f003 030f 	and.w	r3, r3, #15
 800b780:	2b00      	cmp	r3, #0
 800b782:	d109      	bne.n	800b798 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	6818      	ldr	r0, [r3, #0]
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	691b      	ldr	r3, [r3, #16]
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	461a      	mov	r2, r3
 800b790:	6979      	ldr	r1, [r7, #20]
 800b792:	f004 fc73 	bl	801007c <USB_EP0StartXfer>
 800b796:	e008      	b.n	800b7aa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	6818      	ldr	r0, [r3, #0]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	691b      	ldr	r3, [r3, #16]
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	6979      	ldr	r1, [r7, #20]
 800b7a6:	f004 fa25 	bl	800fbf4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b7aa:	2300      	movs	r3, #0
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3718      	adds	r7, #24
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b086      	sub	sp, #24
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	607a      	str	r2, [r7, #4]
 800b7be:	603b      	str	r3, [r7, #0]
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b7c4:	7afb      	ldrb	r3, [r7, #11]
 800b7c6:	f003 020f 	and.w	r2, r3, #15
 800b7ca:	4613      	mov	r3, r2
 800b7cc:	00db      	lsls	r3, r3, #3
 800b7ce:	1a9b      	subs	r3, r3, r2
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	3338      	adds	r3, #56	; 0x38
 800b7d4:	68fa      	ldr	r2, [r7, #12]
 800b7d6:	4413      	add	r3, r2
 800b7d8:	3304      	adds	r3, #4
 800b7da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	687a      	ldr	r2, [r7, #4]
 800b7e0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	683a      	ldr	r2, [r7, #0]
 800b7e6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b7f4:	7afb      	ldrb	r3, [r7, #11]
 800b7f6:	f003 030f 	and.w	r3, r3, #15
 800b7fa:	b2da      	uxtb	r2, r3
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	691b      	ldr	r3, [r3, #16]
 800b804:	2b01      	cmp	r3, #1
 800b806:	d102      	bne.n	800b80e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b80e:	7afb      	ldrb	r3, [r7, #11]
 800b810:	f003 030f 	and.w	r3, r3, #15
 800b814:	2b00      	cmp	r3, #0
 800b816:	d109      	bne.n	800b82c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	6818      	ldr	r0, [r3, #0]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	691b      	ldr	r3, [r3, #16]
 800b820:	b2db      	uxtb	r3, r3
 800b822:	461a      	mov	r2, r3
 800b824:	6979      	ldr	r1, [r7, #20]
 800b826:	f004 fc29 	bl	801007c <USB_EP0StartXfer>
 800b82a:	e008      	b.n	800b83e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	6818      	ldr	r0, [r3, #0]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	691b      	ldr	r3, [r3, #16]
 800b834:	b2db      	uxtb	r3, r3
 800b836:	461a      	mov	r2, r3
 800b838:	6979      	ldr	r1, [r7, #20]
 800b83a:	f004 f9db 	bl	800fbf4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b83e:	2300      	movs	r3, #0
}
 800b840:	4618      	mov	r0, r3
 800b842:	3718      	adds	r7, #24
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	460b      	mov	r3, r1
 800b852:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b854:	78fb      	ldrb	r3, [r7, #3]
 800b856:	f003 020f 	and.w	r2, r3, #15
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d901      	bls.n	800b866 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b862:	2301      	movs	r3, #1
 800b864:	e050      	b.n	800b908 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b866:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	da0f      	bge.n	800b88e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b86e:	78fb      	ldrb	r3, [r7, #3]
 800b870:	f003 020f 	and.w	r2, r3, #15
 800b874:	4613      	mov	r3, r2
 800b876:	00db      	lsls	r3, r3, #3
 800b878:	1a9b      	subs	r3, r3, r2
 800b87a:	009b      	lsls	r3, r3, #2
 800b87c:	3338      	adds	r3, #56	; 0x38
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	4413      	add	r3, r2
 800b882:	3304      	adds	r3, #4
 800b884:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2201      	movs	r2, #1
 800b88a:	705a      	strb	r2, [r3, #1]
 800b88c:	e00d      	b.n	800b8aa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b88e:	78fa      	ldrb	r2, [r7, #3]
 800b890:	4613      	mov	r3, r2
 800b892:	00db      	lsls	r3, r3, #3
 800b894:	1a9b      	subs	r3, r3, r2
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	4413      	add	r3, r2
 800b8a0:	3304      	adds	r3, #4
 800b8a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b8b0:	78fb      	ldrb	r3, [r7, #3]
 800b8b2:	f003 030f 	and.w	r3, r3, #15
 800b8b6:	b2da      	uxtb	r2, r3
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d101      	bne.n	800b8ca <HAL_PCD_EP_SetStall+0x82>
 800b8c6:	2302      	movs	r3, #2
 800b8c8:	e01e      	b.n	800b908 <HAL_PCD_EP_SetStall+0xc0>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	68f9      	ldr	r1, [r7, #12]
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f004 fdb8 	bl	801044e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b8de:	78fb      	ldrb	r3, [r7, #3]
 800b8e0:	f003 030f 	and.w	r3, r3, #15
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d10a      	bne.n	800b8fe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6818      	ldr	r0, [r3, #0]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	691b      	ldr	r3, [r3, #16]
 800b8f0:	b2d9      	uxtb	r1, r3
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	f004 ff67 	bl	80107cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2200      	movs	r2, #0
 800b902:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b906:	2300      	movs	r3, #0
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3710      	adds	r7, #16
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	460b      	mov	r3, r1
 800b91a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b91c:	78fb      	ldrb	r3, [r7, #3]
 800b91e:	f003 020f 	and.w	r2, r3, #15
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	429a      	cmp	r2, r3
 800b928:	d901      	bls.n	800b92e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b92a:	2301      	movs	r3, #1
 800b92c:	e042      	b.n	800b9b4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b92e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b932:	2b00      	cmp	r3, #0
 800b934:	da0f      	bge.n	800b956 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b936:	78fb      	ldrb	r3, [r7, #3]
 800b938:	f003 020f 	and.w	r2, r3, #15
 800b93c:	4613      	mov	r3, r2
 800b93e:	00db      	lsls	r3, r3, #3
 800b940:	1a9b      	subs	r3, r3, r2
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	3338      	adds	r3, #56	; 0x38
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	4413      	add	r3, r2
 800b94a:	3304      	adds	r3, #4
 800b94c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2201      	movs	r2, #1
 800b952:	705a      	strb	r2, [r3, #1]
 800b954:	e00f      	b.n	800b976 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b956:	78fb      	ldrb	r3, [r7, #3]
 800b958:	f003 020f 	and.w	r2, r3, #15
 800b95c:	4613      	mov	r3, r2
 800b95e:	00db      	lsls	r3, r3, #3
 800b960:	1a9b      	subs	r3, r3, r2
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	4413      	add	r3, r2
 800b96c:	3304      	adds	r3, #4
 800b96e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2200      	movs	r2, #0
 800b974:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2200      	movs	r2, #0
 800b97a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b97c:	78fb      	ldrb	r3, [r7, #3]
 800b97e:	f003 030f 	and.w	r3, r3, #15
 800b982:	b2da      	uxtb	r2, r3
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b98e:	2b01      	cmp	r3, #1
 800b990:	d101      	bne.n	800b996 <HAL_PCD_EP_ClrStall+0x86>
 800b992:	2302      	movs	r3, #2
 800b994:	e00e      	b.n	800b9b4 <HAL_PCD_EP_ClrStall+0xa4>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2201      	movs	r2, #1
 800b99a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	68f9      	ldr	r1, [r7, #12]
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f004 fdc0 	bl	801052a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3710      	adds	r7, #16
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b08a      	sub	sp, #40	; 0x28
 800b9c0:	af02      	add	r7, sp, #8
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800b9d0:	683a      	ldr	r2, [r7, #0]
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	00db      	lsls	r3, r3, #3
 800b9d6:	1a9b      	subs	r3, r3, r2
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	3338      	adds	r3, #56	; 0x38
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	4413      	add	r3, r2
 800b9e0:	3304      	adds	r3, #4
 800b9e2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	699a      	ldr	r2, [r3, #24]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	695b      	ldr	r3, [r3, #20]
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d901      	bls.n	800b9f4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	e06c      	b.n	800bace <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	695a      	ldr	r2, [r3, #20]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	699b      	ldr	r3, [r3, #24]
 800b9fc:	1ad3      	subs	r3, r2, r3
 800b9fe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	689b      	ldr	r3, [r3, #8]
 800ba04:	69fa      	ldr	r2, [r7, #28]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d902      	bls.n	800ba10 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	689b      	ldr	r3, [r3, #8]
 800ba0e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	3303      	adds	r3, #3
 800ba14:	089b      	lsrs	r3, r3, #2
 800ba16:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ba18:	e02b      	b.n	800ba72 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	695a      	ldr	r2, [r3, #20]
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	699b      	ldr	r3, [r3, #24]
 800ba22:	1ad3      	subs	r3, r2, r3
 800ba24:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	689b      	ldr	r3, [r3, #8]
 800ba2a:	69fa      	ldr	r2, [r7, #28]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d902      	bls.n	800ba36 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	3303      	adds	r3, #3
 800ba3a:	089b      	lsrs	r3, r3, #2
 800ba3c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	68d9      	ldr	r1, [r3, #12]
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	b2da      	uxtb	r2, r3
 800ba46:	69fb      	ldr	r3, [r7, #28]
 800ba48:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	9300      	str	r3, [sp, #0]
 800ba52:	4603      	mov	r3, r0
 800ba54:	6978      	ldr	r0, [r7, #20]
 800ba56:	f004 fc64 	bl	8010322 <USB_WritePacket>

    ep->xfer_buff  += len;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	68da      	ldr	r2, [r3, #12]
 800ba5e:	69fb      	ldr	r3, [r7, #28]
 800ba60:	441a      	add	r2, r3
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	699a      	ldr	r2, [r3, #24]
 800ba6a:	69fb      	ldr	r3, [r7, #28]
 800ba6c:	441a      	add	r2, r3
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	015a      	lsls	r2, r3, #5
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	4413      	add	r3, r2
 800ba7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba7e:	699b      	ldr	r3, [r3, #24]
 800ba80:	b29b      	uxth	r3, r3
 800ba82:	69ba      	ldr	r2, [r7, #24]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d809      	bhi.n	800ba9c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	699a      	ldr	r2, [r3, #24]
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d203      	bcs.n	800ba9c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	695b      	ldr	r3, [r3, #20]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d1be      	bne.n	800ba1a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	695a      	ldr	r2, [r3, #20]
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	699b      	ldr	r3, [r3, #24]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d811      	bhi.n	800bacc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	f003 030f 	and.w	r3, r3, #15
 800baae:	2201      	movs	r2, #1
 800bab0:	fa02 f303 	lsl.w	r3, r2, r3
 800bab4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800babc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	43db      	mvns	r3, r3
 800bac2:	6939      	ldr	r1, [r7, #16]
 800bac4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bac8:	4013      	ands	r3, r2
 800baca:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800bacc:	2300      	movs	r3, #0
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3720      	adds	r7, #32
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
	...

0800bad8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b086      	sub	sp, #24
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	333c      	adds	r3, #60	; 0x3c
 800baf0:	3304      	adds	r3, #4
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	015a      	lsls	r2, r3, #5
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	4413      	add	r3, r2
 800bafe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	691b      	ldr	r3, [r3, #16]
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	f040 80a0 	bne.w	800bc50 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	f003 0308 	and.w	r3, r3, #8
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d015      	beq.n	800bb46 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	4a72      	ldr	r2, [pc, #456]	; (800bce8 <PCD_EP_OutXfrComplete_int+0x210>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	f240 80dd 	bls.w	800bcde <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	f000 80d7 	beq.w	800bcde <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	015a      	lsls	r2, r3, #5
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	4413      	add	r3, r2
 800bb38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb42:	6093      	str	r3, [r2, #8]
 800bb44:	e0cb      	b.n	800bcde <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	f003 0320 	and.w	r3, r3, #32
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d009      	beq.n	800bb64 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	015a      	lsls	r2, r3, #5
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	4413      	add	r3, r2
 800bb58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	2320      	movs	r3, #32
 800bb60:	6093      	str	r3, [r2, #8]
 800bb62:	e0bc      	b.n	800bcde <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	f040 80b7 	bne.w	800bcde <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	4a5d      	ldr	r2, [pc, #372]	; (800bce8 <PCD_EP_OutXfrComplete_int+0x210>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d90f      	bls.n	800bb98 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d00a      	beq.n	800bb98 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	015a      	lsls	r2, r3, #5
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	4413      	add	r3, r2
 800bb8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb8e:	461a      	mov	r2, r3
 800bb90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb94:	6093      	str	r3, [r2, #8]
 800bb96:	e0a2      	b.n	800bcde <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800bb98:	6879      	ldr	r1, [r7, #4]
 800bb9a:	683a      	ldr	r2, [r7, #0]
 800bb9c:	4613      	mov	r3, r2
 800bb9e:	00db      	lsls	r3, r3, #3
 800bba0:	1a9b      	subs	r3, r3, r2
 800bba2:	009b      	lsls	r3, r3, #2
 800bba4:	440b      	add	r3, r1
 800bba6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800bbaa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	0159      	lsls	r1, r3, #5
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	440b      	add	r3, r1
 800bbb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbb8:	691b      	ldr	r3, [r3, #16]
 800bbba:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800bbbe:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	683a      	ldr	r2, [r7, #0]
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	00db      	lsls	r3, r3, #3
 800bbc8:	1a9b      	subs	r3, r3, r2
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	4403      	add	r3, r0
 800bbce:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800bbd2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800bbd4:	6879      	ldr	r1, [r7, #4]
 800bbd6:	683a      	ldr	r2, [r7, #0]
 800bbd8:	4613      	mov	r3, r2
 800bbda:	00db      	lsls	r3, r3, #3
 800bbdc:	1a9b      	subs	r3, r3, r2
 800bbde:	009b      	lsls	r3, r3, #2
 800bbe0:	440b      	add	r3, r1
 800bbe2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bbe6:	6819      	ldr	r1, [r3, #0]
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	683a      	ldr	r2, [r7, #0]
 800bbec:	4613      	mov	r3, r2
 800bbee:	00db      	lsls	r3, r3, #3
 800bbf0:	1a9b      	subs	r3, r3, r2
 800bbf2:	009b      	lsls	r3, r3, #2
 800bbf4:	4403      	add	r3, r0
 800bbf6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4419      	add	r1, r3
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	683a      	ldr	r2, [r7, #0]
 800bc02:	4613      	mov	r3, r2
 800bc04:	00db      	lsls	r3, r3, #3
 800bc06:	1a9b      	subs	r3, r3, r2
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	4403      	add	r3, r0
 800bc0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bc10:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d114      	bne.n	800bc42 <PCD_EP_OutXfrComplete_int+0x16a>
 800bc18:	6879      	ldr	r1, [r7, #4]
 800bc1a:	683a      	ldr	r2, [r7, #0]
 800bc1c:	4613      	mov	r3, r2
 800bc1e:	00db      	lsls	r3, r3, #3
 800bc20:	1a9b      	subs	r3, r3, r2
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	440b      	add	r3, r1
 800bc26:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d108      	bne.n	800bc42 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6818      	ldr	r0, [r3, #0]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	2101      	movs	r1, #1
 800bc3e:	f004 fdc5 	bl	80107cc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	b2db      	uxtb	r3, r3
 800bc46:	4619      	mov	r1, r3
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f00a fe43 	bl	80168d4 <HAL_PCD_DataOutStageCallback>
 800bc4e:	e046      	b.n	800bcde <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	4a26      	ldr	r2, [pc, #152]	; (800bcec <PCD_EP_OutXfrComplete_int+0x214>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d124      	bne.n	800bca2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d00a      	beq.n	800bc78 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	015a      	lsls	r2, r3, #5
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	4413      	add	r3, r2
 800bc6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc6e:	461a      	mov	r2, r3
 800bc70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc74:	6093      	str	r3, [r2, #8]
 800bc76:	e032      	b.n	800bcde <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	f003 0320 	and.w	r3, r3, #32
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d008      	beq.n	800bc94 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	015a      	lsls	r2, r3, #5
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	4413      	add	r3, r2
 800bc8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc8e:	461a      	mov	r2, r3
 800bc90:	2320      	movs	r3, #32
 800bc92:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	4619      	mov	r1, r3
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f00a fe1a 	bl	80168d4 <HAL_PCD_DataOutStageCallback>
 800bca0:	e01d      	b.n	800bcde <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d114      	bne.n	800bcd2 <PCD_EP_OutXfrComplete_int+0x1fa>
 800bca8:	6879      	ldr	r1, [r7, #4]
 800bcaa:	683a      	ldr	r2, [r7, #0]
 800bcac:	4613      	mov	r3, r2
 800bcae:	00db      	lsls	r3, r3, #3
 800bcb0:	1a9b      	subs	r3, r3, r2
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	440b      	add	r3, r1
 800bcb6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d108      	bne.n	800bcd2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6818      	ldr	r0, [r3, #0]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bcca:	461a      	mov	r2, r3
 800bccc:	2100      	movs	r1, #0
 800bcce:	f004 fd7d 	bl	80107cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	b2db      	uxtb	r3, r3
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f00a fdfb 	bl	80168d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800bcde:	2300      	movs	r3, #0
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3718      	adds	r7, #24
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	4f54300a 	.word	0x4f54300a
 800bcec:	4f54310a 	.word	0x4f54310a

0800bcf0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b086      	sub	sp, #24
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	333c      	adds	r3, #60	; 0x3c
 800bd08:	3304      	adds	r3, #4
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	015a      	lsls	r2, r3, #5
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	4413      	add	r3, r2
 800bd16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd1a:	689b      	ldr	r3, [r3, #8]
 800bd1c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	4a15      	ldr	r2, [pc, #84]	; (800bd78 <PCD_EP_OutSetupPacket_int+0x88>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d90e      	bls.n	800bd44 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d009      	beq.n	800bd44 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	015a      	lsls	r2, r3, #5
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	4413      	add	r3, r2
 800bd38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd42:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f00a fdb3 	bl	80168b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	4a0a      	ldr	r2, [pc, #40]	; (800bd78 <PCD_EP_OutSetupPacket_int+0x88>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d90c      	bls.n	800bd6c <PCD_EP_OutSetupPacket_int+0x7c>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	691b      	ldr	r3, [r3, #16]
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d108      	bne.n	800bd6c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6818      	ldr	r0, [r3, #0]
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bd64:	461a      	mov	r2, r3
 800bd66:	2101      	movs	r1, #1
 800bd68:	f004 fd30 	bl	80107cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800bd6c:	2300      	movs	r3, #0
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3718      	adds	r7, #24
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	4f54300a 	.word	0x4f54300a

0800bd7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	460b      	mov	r3, r1
 800bd86:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800bd88:	bf00      	nop
 800bd8a:	370c      	adds	r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr

0800bd94 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b083      	sub	sp, #12
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800bd9c:	4b05      	ldr	r3, [pc, #20]	; (800bdb4 <HAL_PWR_EnableWakeUpPin+0x20>)
 800bd9e:	685a      	ldr	r2, [r3, #4]
 800bda0:	4904      	ldr	r1, [pc, #16]	; (800bdb4 <HAL_PWR_EnableWakeUpPin+0x20>)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4313      	orrs	r3, r2
 800bda6:	604b      	str	r3, [r1, #4]
}
 800bda8:	bf00      	nop
 800bdaa:	370c      	adds	r7, #12
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr
 800bdb4:	40007000 	.word	0x40007000

0800bdb8 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b083      	sub	sp, #12
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 800bdc0:	4b06      	ldr	r3, [pc, #24]	; (800bddc <HAL_PWR_DisableWakeUpPin+0x24>)
 800bdc2:	685a      	ldr	r2, [r3, #4]
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	43db      	mvns	r3, r3
 800bdc8:	4904      	ldr	r1, [pc, #16]	; (800bddc <HAL_PWR_DisableWakeUpPin+0x24>)
 800bdca:	4013      	ands	r3, r2
 800bdcc:	604b      	str	r3, [r1, #4]
}
 800bdce:	bf00      	nop
 800bdd0:	370c      	adds	r7, #12
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr
 800bdda:	bf00      	nop
 800bddc:	40007000 	.word	0x40007000

0800bde0 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800bde0:	b480      	push	{r7}
 800bde2:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800bde4:	4b08      	ldr	r3, [pc, #32]	; (800be08 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4a07      	ldr	r2, [pc, #28]	; (800be08 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800bdea:	f043 0302 	orr.w	r3, r3, #2
 800bdee:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800bdf0:	4b06      	ldr	r3, [pc, #24]	; (800be0c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800bdf2:	691b      	ldr	r3, [r3, #16]
 800bdf4:	4a05      	ldr	r2, [pc, #20]	; (800be0c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800bdf6:	f043 0304 	orr.w	r3, r3, #4
 800bdfa:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800bdfc:	bf30      	wfi
}
 800bdfe:	bf00      	nop
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr
 800be08:	40007000 	.word	0x40007000
 800be0c:	e000ed00 	.word	0xe000ed00

0800be10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b086      	sub	sp, #24
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d101      	bne.n	800be22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800be1e:	2301      	movs	r3, #1
 800be20:	e264      	b.n	800c2ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f003 0301 	and.w	r3, r3, #1
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d075      	beq.n	800bf1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800be2e:	4ba3      	ldr	r3, [pc, #652]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800be30:	689b      	ldr	r3, [r3, #8]
 800be32:	f003 030c 	and.w	r3, r3, #12
 800be36:	2b04      	cmp	r3, #4
 800be38:	d00c      	beq.n	800be54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800be3a:	4ba0      	ldr	r3, [pc, #640]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800be42:	2b08      	cmp	r3, #8
 800be44:	d112      	bne.n	800be6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800be46:	4b9d      	ldr	r3, [pc, #628]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800be52:	d10b      	bne.n	800be6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800be54:	4b99      	ldr	r3, [pc, #612]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d05b      	beq.n	800bf18 <HAL_RCC_OscConfig+0x108>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d157      	bne.n	800bf18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800be68:	2301      	movs	r3, #1
 800be6a:	e23f      	b.n	800c2ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be74:	d106      	bne.n	800be84 <HAL_RCC_OscConfig+0x74>
 800be76:	4b91      	ldr	r3, [pc, #580]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	4a90      	ldr	r2, [pc, #576]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800be7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be80:	6013      	str	r3, [r2, #0]
 800be82:	e01d      	b.n	800bec0 <HAL_RCC_OscConfig+0xb0>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800be8c:	d10c      	bne.n	800bea8 <HAL_RCC_OscConfig+0x98>
 800be8e:	4b8b      	ldr	r3, [pc, #556]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	4a8a      	ldr	r2, [pc, #552]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800be94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800be98:	6013      	str	r3, [r2, #0]
 800be9a:	4b88      	ldr	r3, [pc, #544]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	4a87      	ldr	r2, [pc, #540]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800bea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bea4:	6013      	str	r3, [r2, #0]
 800bea6:	e00b      	b.n	800bec0 <HAL_RCC_OscConfig+0xb0>
 800bea8:	4b84      	ldr	r3, [pc, #528]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	4a83      	ldr	r2, [pc, #524]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800beae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800beb2:	6013      	str	r3, [r2, #0]
 800beb4:	4b81      	ldr	r3, [pc, #516]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	4a80      	ldr	r2, [pc, #512]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800beba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d013      	beq.n	800bef0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bec8:	f7fd f9c2 	bl	8009250 <HAL_GetTick>
 800becc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bece:	e008      	b.n	800bee2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bed0:	f7fd f9be 	bl	8009250 <HAL_GetTick>
 800bed4:	4602      	mov	r2, r0
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	1ad3      	subs	r3, r2, r3
 800beda:	2b64      	cmp	r3, #100	; 0x64
 800bedc:	d901      	bls.n	800bee2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800bede:	2303      	movs	r3, #3
 800bee0:	e204      	b.n	800c2ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bee2:	4b76      	ldr	r3, [pc, #472]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800beea:	2b00      	cmp	r3, #0
 800beec:	d0f0      	beq.n	800bed0 <HAL_RCC_OscConfig+0xc0>
 800beee:	e014      	b.n	800bf1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bef0:	f7fd f9ae 	bl	8009250 <HAL_GetTick>
 800bef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bef6:	e008      	b.n	800bf0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bef8:	f7fd f9aa 	bl	8009250 <HAL_GetTick>
 800befc:	4602      	mov	r2, r0
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	1ad3      	subs	r3, r2, r3
 800bf02:	2b64      	cmp	r3, #100	; 0x64
 800bf04:	d901      	bls.n	800bf0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bf06:	2303      	movs	r3, #3
 800bf08:	e1f0      	b.n	800c2ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bf0a:	4b6c      	ldr	r3, [pc, #432]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d1f0      	bne.n	800bef8 <HAL_RCC_OscConfig+0xe8>
 800bf16:	e000      	b.n	800bf1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bf18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f003 0302 	and.w	r3, r3, #2
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d063      	beq.n	800bfee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bf26:	4b65      	ldr	r3, [pc, #404]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800bf28:	689b      	ldr	r3, [r3, #8]
 800bf2a:	f003 030c 	and.w	r3, r3, #12
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d00b      	beq.n	800bf4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bf32:	4b62      	ldr	r3, [pc, #392]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800bf34:	689b      	ldr	r3, [r3, #8]
 800bf36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bf3a:	2b08      	cmp	r3, #8
 800bf3c:	d11c      	bne.n	800bf78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bf3e:	4b5f      	ldr	r3, [pc, #380]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d116      	bne.n	800bf78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bf4a:	4b5c      	ldr	r3, [pc, #368]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f003 0302 	and.w	r3, r3, #2
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d005      	beq.n	800bf62 <HAL_RCC_OscConfig+0x152>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	68db      	ldr	r3, [r3, #12]
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d001      	beq.n	800bf62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800bf5e:	2301      	movs	r3, #1
 800bf60:	e1c4      	b.n	800c2ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf62:	4b56      	ldr	r3, [pc, #344]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	691b      	ldr	r3, [r3, #16]
 800bf6e:	00db      	lsls	r3, r3, #3
 800bf70:	4952      	ldr	r1, [pc, #328]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800bf72:	4313      	orrs	r3, r2
 800bf74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bf76:	e03a      	b.n	800bfee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	68db      	ldr	r3, [r3, #12]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d020      	beq.n	800bfc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bf80:	4b4f      	ldr	r3, [pc, #316]	; (800c0c0 <HAL_RCC_OscConfig+0x2b0>)
 800bf82:	2201      	movs	r2, #1
 800bf84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf86:	f7fd f963 	bl	8009250 <HAL_GetTick>
 800bf8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf8c:	e008      	b.n	800bfa0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bf8e:	f7fd f95f 	bl	8009250 <HAL_GetTick>
 800bf92:	4602      	mov	r2, r0
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	1ad3      	subs	r3, r2, r3
 800bf98:	2b02      	cmp	r3, #2
 800bf9a:	d901      	bls.n	800bfa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800bf9c:	2303      	movs	r3, #3
 800bf9e:	e1a5      	b.n	800c2ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bfa0:	4b46      	ldr	r3, [pc, #280]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f003 0302 	and.w	r3, r3, #2
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d0f0      	beq.n	800bf8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bfac:	4b43      	ldr	r3, [pc, #268]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	691b      	ldr	r3, [r3, #16]
 800bfb8:	00db      	lsls	r3, r3, #3
 800bfba:	4940      	ldr	r1, [pc, #256]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	600b      	str	r3, [r1, #0]
 800bfc0:	e015      	b.n	800bfee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bfc2:	4b3f      	ldr	r3, [pc, #252]	; (800c0c0 <HAL_RCC_OscConfig+0x2b0>)
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfc8:	f7fd f942 	bl	8009250 <HAL_GetTick>
 800bfcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bfce:	e008      	b.n	800bfe2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bfd0:	f7fd f93e 	bl	8009250 <HAL_GetTick>
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	1ad3      	subs	r3, r2, r3
 800bfda:	2b02      	cmp	r3, #2
 800bfdc:	d901      	bls.n	800bfe2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800bfde:	2303      	movs	r3, #3
 800bfe0:	e184      	b.n	800c2ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bfe2:	4b36      	ldr	r3, [pc, #216]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f003 0302 	and.w	r3, r3, #2
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d1f0      	bne.n	800bfd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f003 0308 	and.w	r3, r3, #8
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d030      	beq.n	800c05c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	695b      	ldr	r3, [r3, #20]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d016      	beq.n	800c030 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c002:	4b30      	ldr	r3, [pc, #192]	; (800c0c4 <HAL_RCC_OscConfig+0x2b4>)
 800c004:	2201      	movs	r2, #1
 800c006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c008:	f7fd f922 	bl	8009250 <HAL_GetTick>
 800c00c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c00e:	e008      	b.n	800c022 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c010:	f7fd f91e 	bl	8009250 <HAL_GetTick>
 800c014:	4602      	mov	r2, r0
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	1ad3      	subs	r3, r2, r3
 800c01a:	2b02      	cmp	r3, #2
 800c01c:	d901      	bls.n	800c022 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c01e:	2303      	movs	r3, #3
 800c020:	e164      	b.n	800c2ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c022:	4b26      	ldr	r3, [pc, #152]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800c024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c026:	f003 0302 	and.w	r3, r3, #2
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d0f0      	beq.n	800c010 <HAL_RCC_OscConfig+0x200>
 800c02e:	e015      	b.n	800c05c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c030:	4b24      	ldr	r3, [pc, #144]	; (800c0c4 <HAL_RCC_OscConfig+0x2b4>)
 800c032:	2200      	movs	r2, #0
 800c034:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c036:	f7fd f90b 	bl	8009250 <HAL_GetTick>
 800c03a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c03c:	e008      	b.n	800c050 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c03e:	f7fd f907 	bl	8009250 <HAL_GetTick>
 800c042:	4602      	mov	r2, r0
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	1ad3      	subs	r3, r2, r3
 800c048:	2b02      	cmp	r3, #2
 800c04a:	d901      	bls.n	800c050 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c04c:	2303      	movs	r3, #3
 800c04e:	e14d      	b.n	800c2ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c050:	4b1a      	ldr	r3, [pc, #104]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800c052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c054:	f003 0302 	and.w	r3, r3, #2
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d1f0      	bne.n	800c03e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f003 0304 	and.w	r3, r3, #4
 800c064:	2b00      	cmp	r3, #0
 800c066:	f000 80a0 	beq.w	800c1aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c06a:	2300      	movs	r3, #0
 800c06c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c06e:	4b13      	ldr	r3, [pc, #76]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800c070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c076:	2b00      	cmp	r3, #0
 800c078:	d10f      	bne.n	800c09a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c07a:	2300      	movs	r3, #0
 800c07c:	60bb      	str	r3, [r7, #8]
 800c07e:	4b0f      	ldr	r3, [pc, #60]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800c080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c082:	4a0e      	ldr	r2, [pc, #56]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800c084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c088:	6413      	str	r3, [r2, #64]	; 0x40
 800c08a:	4b0c      	ldr	r3, [pc, #48]	; (800c0bc <HAL_RCC_OscConfig+0x2ac>)
 800c08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c08e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c092:	60bb      	str	r3, [r7, #8]
 800c094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c096:	2301      	movs	r3, #1
 800c098:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c09a:	4b0b      	ldr	r3, [pc, #44]	; (800c0c8 <HAL_RCC_OscConfig+0x2b8>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d121      	bne.n	800c0ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c0a6:	4b08      	ldr	r3, [pc, #32]	; (800c0c8 <HAL_RCC_OscConfig+0x2b8>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a07      	ldr	r2, [pc, #28]	; (800c0c8 <HAL_RCC_OscConfig+0x2b8>)
 800c0ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c0b2:	f7fd f8cd 	bl	8009250 <HAL_GetTick>
 800c0b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c0b8:	e011      	b.n	800c0de <HAL_RCC_OscConfig+0x2ce>
 800c0ba:	bf00      	nop
 800c0bc:	40023800 	.word	0x40023800
 800c0c0:	42470000 	.word	0x42470000
 800c0c4:	42470e80 	.word	0x42470e80
 800c0c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c0cc:	f7fd f8c0 	bl	8009250 <HAL_GetTick>
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	1ad3      	subs	r3, r2, r3
 800c0d6:	2b02      	cmp	r3, #2
 800c0d8:	d901      	bls.n	800c0de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800c0da:	2303      	movs	r3, #3
 800c0dc:	e106      	b.n	800c2ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c0de:	4b85      	ldr	r3, [pc, #532]	; (800c2f4 <HAL_RCC_OscConfig+0x4e4>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d0f0      	beq.n	800c0cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	689b      	ldr	r3, [r3, #8]
 800c0ee:	2b01      	cmp	r3, #1
 800c0f0:	d106      	bne.n	800c100 <HAL_RCC_OscConfig+0x2f0>
 800c0f2:	4b81      	ldr	r3, [pc, #516]	; (800c2f8 <HAL_RCC_OscConfig+0x4e8>)
 800c0f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0f6:	4a80      	ldr	r2, [pc, #512]	; (800c2f8 <HAL_RCC_OscConfig+0x4e8>)
 800c0f8:	f043 0301 	orr.w	r3, r3, #1
 800c0fc:	6713      	str	r3, [r2, #112]	; 0x70
 800c0fe:	e01c      	b.n	800c13a <HAL_RCC_OscConfig+0x32a>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	689b      	ldr	r3, [r3, #8]
 800c104:	2b05      	cmp	r3, #5
 800c106:	d10c      	bne.n	800c122 <HAL_RCC_OscConfig+0x312>
 800c108:	4b7b      	ldr	r3, [pc, #492]	; (800c2f8 <HAL_RCC_OscConfig+0x4e8>)
 800c10a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c10c:	4a7a      	ldr	r2, [pc, #488]	; (800c2f8 <HAL_RCC_OscConfig+0x4e8>)
 800c10e:	f043 0304 	orr.w	r3, r3, #4
 800c112:	6713      	str	r3, [r2, #112]	; 0x70
 800c114:	4b78      	ldr	r3, [pc, #480]	; (800c2f8 <HAL_RCC_OscConfig+0x4e8>)
 800c116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c118:	4a77      	ldr	r2, [pc, #476]	; (800c2f8 <HAL_RCC_OscConfig+0x4e8>)
 800c11a:	f043 0301 	orr.w	r3, r3, #1
 800c11e:	6713      	str	r3, [r2, #112]	; 0x70
 800c120:	e00b      	b.n	800c13a <HAL_RCC_OscConfig+0x32a>
 800c122:	4b75      	ldr	r3, [pc, #468]	; (800c2f8 <HAL_RCC_OscConfig+0x4e8>)
 800c124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c126:	4a74      	ldr	r2, [pc, #464]	; (800c2f8 <HAL_RCC_OscConfig+0x4e8>)
 800c128:	f023 0301 	bic.w	r3, r3, #1
 800c12c:	6713      	str	r3, [r2, #112]	; 0x70
 800c12e:	4b72      	ldr	r3, [pc, #456]	; (800c2f8 <HAL_RCC_OscConfig+0x4e8>)
 800c130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c132:	4a71      	ldr	r2, [pc, #452]	; (800c2f8 <HAL_RCC_OscConfig+0x4e8>)
 800c134:	f023 0304 	bic.w	r3, r3, #4
 800c138:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	689b      	ldr	r3, [r3, #8]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d015      	beq.n	800c16e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c142:	f7fd f885 	bl	8009250 <HAL_GetTick>
 800c146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c148:	e00a      	b.n	800c160 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c14a:	f7fd f881 	bl	8009250 <HAL_GetTick>
 800c14e:	4602      	mov	r2, r0
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	1ad3      	subs	r3, r2, r3
 800c154:	f241 3288 	movw	r2, #5000	; 0x1388
 800c158:	4293      	cmp	r3, r2
 800c15a:	d901      	bls.n	800c160 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800c15c:	2303      	movs	r3, #3
 800c15e:	e0c5      	b.n	800c2ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c160:	4b65      	ldr	r3, [pc, #404]	; (800c2f8 <HAL_RCC_OscConfig+0x4e8>)
 800c162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c164:	f003 0302 	and.w	r3, r3, #2
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d0ee      	beq.n	800c14a <HAL_RCC_OscConfig+0x33a>
 800c16c:	e014      	b.n	800c198 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c16e:	f7fd f86f 	bl	8009250 <HAL_GetTick>
 800c172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c174:	e00a      	b.n	800c18c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c176:	f7fd f86b 	bl	8009250 <HAL_GetTick>
 800c17a:	4602      	mov	r2, r0
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	1ad3      	subs	r3, r2, r3
 800c180:	f241 3288 	movw	r2, #5000	; 0x1388
 800c184:	4293      	cmp	r3, r2
 800c186:	d901      	bls.n	800c18c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800c188:	2303      	movs	r3, #3
 800c18a:	e0af      	b.n	800c2ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c18c:	4b5a      	ldr	r3, [pc, #360]	; (800c2f8 <HAL_RCC_OscConfig+0x4e8>)
 800c18e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c190:	f003 0302 	and.w	r3, r3, #2
 800c194:	2b00      	cmp	r3, #0
 800c196:	d1ee      	bne.n	800c176 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c198:	7dfb      	ldrb	r3, [r7, #23]
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	d105      	bne.n	800c1aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c19e:	4b56      	ldr	r3, [pc, #344]	; (800c2f8 <HAL_RCC_OscConfig+0x4e8>)
 800c1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1a2:	4a55      	ldr	r2, [pc, #340]	; (800c2f8 <HAL_RCC_OscConfig+0x4e8>)
 800c1a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c1a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	699b      	ldr	r3, [r3, #24]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	f000 809b 	beq.w	800c2ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c1b4:	4b50      	ldr	r3, [pc, #320]	; (800c2f8 <HAL_RCC_OscConfig+0x4e8>)
 800c1b6:	689b      	ldr	r3, [r3, #8]
 800c1b8:	f003 030c 	and.w	r3, r3, #12
 800c1bc:	2b08      	cmp	r3, #8
 800c1be:	d05c      	beq.n	800c27a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	699b      	ldr	r3, [r3, #24]
 800c1c4:	2b02      	cmp	r3, #2
 800c1c6:	d141      	bne.n	800c24c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c1c8:	4b4c      	ldr	r3, [pc, #304]	; (800c2fc <HAL_RCC_OscConfig+0x4ec>)
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c1ce:	f7fd f83f 	bl	8009250 <HAL_GetTick>
 800c1d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c1d4:	e008      	b.n	800c1e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c1d6:	f7fd f83b 	bl	8009250 <HAL_GetTick>
 800c1da:	4602      	mov	r2, r0
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	1ad3      	subs	r3, r2, r3
 800c1e0:	2b02      	cmp	r3, #2
 800c1e2:	d901      	bls.n	800c1e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800c1e4:	2303      	movs	r3, #3
 800c1e6:	e081      	b.n	800c2ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c1e8:	4b43      	ldr	r3, [pc, #268]	; (800c2f8 <HAL_RCC_OscConfig+0x4e8>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d1f0      	bne.n	800c1d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	69da      	ldr	r2, [r3, #28]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6a1b      	ldr	r3, [r3, #32]
 800c1fc:	431a      	orrs	r2, r3
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c202:	019b      	lsls	r3, r3, #6
 800c204:	431a      	orrs	r2, r3
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c20a:	085b      	lsrs	r3, r3, #1
 800c20c:	3b01      	subs	r3, #1
 800c20e:	041b      	lsls	r3, r3, #16
 800c210:	431a      	orrs	r2, r3
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c216:	061b      	lsls	r3, r3, #24
 800c218:	4937      	ldr	r1, [pc, #220]	; (800c2f8 <HAL_RCC_OscConfig+0x4e8>)
 800c21a:	4313      	orrs	r3, r2
 800c21c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c21e:	4b37      	ldr	r3, [pc, #220]	; (800c2fc <HAL_RCC_OscConfig+0x4ec>)
 800c220:	2201      	movs	r2, #1
 800c222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c224:	f7fd f814 	bl	8009250 <HAL_GetTick>
 800c228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c22a:	e008      	b.n	800c23e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c22c:	f7fd f810 	bl	8009250 <HAL_GetTick>
 800c230:	4602      	mov	r2, r0
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	1ad3      	subs	r3, r2, r3
 800c236:	2b02      	cmp	r3, #2
 800c238:	d901      	bls.n	800c23e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800c23a:	2303      	movs	r3, #3
 800c23c:	e056      	b.n	800c2ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c23e:	4b2e      	ldr	r3, [pc, #184]	; (800c2f8 <HAL_RCC_OscConfig+0x4e8>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c246:	2b00      	cmp	r3, #0
 800c248:	d0f0      	beq.n	800c22c <HAL_RCC_OscConfig+0x41c>
 800c24a:	e04e      	b.n	800c2ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c24c:	4b2b      	ldr	r3, [pc, #172]	; (800c2fc <HAL_RCC_OscConfig+0x4ec>)
 800c24e:	2200      	movs	r2, #0
 800c250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c252:	f7fc fffd 	bl	8009250 <HAL_GetTick>
 800c256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c258:	e008      	b.n	800c26c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c25a:	f7fc fff9 	bl	8009250 <HAL_GetTick>
 800c25e:	4602      	mov	r2, r0
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	1ad3      	subs	r3, r2, r3
 800c264:	2b02      	cmp	r3, #2
 800c266:	d901      	bls.n	800c26c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800c268:	2303      	movs	r3, #3
 800c26a:	e03f      	b.n	800c2ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c26c:	4b22      	ldr	r3, [pc, #136]	; (800c2f8 <HAL_RCC_OscConfig+0x4e8>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c274:	2b00      	cmp	r3, #0
 800c276:	d1f0      	bne.n	800c25a <HAL_RCC_OscConfig+0x44a>
 800c278:	e037      	b.n	800c2ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	699b      	ldr	r3, [r3, #24]
 800c27e:	2b01      	cmp	r3, #1
 800c280:	d101      	bne.n	800c286 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800c282:	2301      	movs	r3, #1
 800c284:	e032      	b.n	800c2ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c286:	4b1c      	ldr	r3, [pc, #112]	; (800c2f8 <HAL_RCC_OscConfig+0x4e8>)
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	699b      	ldr	r3, [r3, #24]
 800c290:	2b01      	cmp	r3, #1
 800c292:	d028      	beq.n	800c2e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d121      	bne.n	800c2e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d11a      	bne.n	800c2e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c2b0:	68fa      	ldr	r2, [r7, #12]
 800c2b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c2b6:	4013      	ands	r3, r2
 800c2b8:	687a      	ldr	r2, [r7, #4]
 800c2ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c2bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d111      	bne.n	800c2e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2cc:	085b      	lsrs	r3, r3, #1
 800c2ce:	3b01      	subs	r3, #1
 800c2d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d107      	bne.n	800c2e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d001      	beq.n	800c2ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	e000      	b.n	800c2ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800c2ea:	2300      	movs	r3, #0
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3718      	adds	r7, #24
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}
 800c2f4:	40007000 	.word	0x40007000
 800c2f8:	40023800 	.word	0x40023800
 800c2fc:	42470060 	.word	0x42470060

0800c300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d101      	bne.n	800c314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c310:	2301      	movs	r3, #1
 800c312:	e0cc      	b.n	800c4ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c314:	4b68      	ldr	r3, [pc, #416]	; (800c4b8 <HAL_RCC_ClockConfig+0x1b8>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f003 030f 	and.w	r3, r3, #15
 800c31c:	683a      	ldr	r2, [r7, #0]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d90c      	bls.n	800c33c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c322:	4b65      	ldr	r3, [pc, #404]	; (800c4b8 <HAL_RCC_ClockConfig+0x1b8>)
 800c324:	683a      	ldr	r2, [r7, #0]
 800c326:	b2d2      	uxtb	r2, r2
 800c328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c32a:	4b63      	ldr	r3, [pc, #396]	; (800c4b8 <HAL_RCC_ClockConfig+0x1b8>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f003 030f 	and.w	r3, r3, #15
 800c332:	683a      	ldr	r2, [r7, #0]
 800c334:	429a      	cmp	r2, r3
 800c336:	d001      	beq.n	800c33c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c338:	2301      	movs	r3, #1
 800c33a:	e0b8      	b.n	800c4ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f003 0302 	and.w	r3, r3, #2
 800c344:	2b00      	cmp	r3, #0
 800c346:	d020      	beq.n	800c38a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f003 0304 	and.w	r3, r3, #4
 800c350:	2b00      	cmp	r3, #0
 800c352:	d005      	beq.n	800c360 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c354:	4b59      	ldr	r3, [pc, #356]	; (800c4bc <HAL_RCC_ClockConfig+0x1bc>)
 800c356:	689b      	ldr	r3, [r3, #8]
 800c358:	4a58      	ldr	r2, [pc, #352]	; (800c4bc <HAL_RCC_ClockConfig+0x1bc>)
 800c35a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c35e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f003 0308 	and.w	r3, r3, #8
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d005      	beq.n	800c378 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c36c:	4b53      	ldr	r3, [pc, #332]	; (800c4bc <HAL_RCC_ClockConfig+0x1bc>)
 800c36e:	689b      	ldr	r3, [r3, #8]
 800c370:	4a52      	ldr	r2, [pc, #328]	; (800c4bc <HAL_RCC_ClockConfig+0x1bc>)
 800c372:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c376:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c378:	4b50      	ldr	r3, [pc, #320]	; (800c4bc <HAL_RCC_ClockConfig+0x1bc>)
 800c37a:	689b      	ldr	r3, [r3, #8]
 800c37c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	689b      	ldr	r3, [r3, #8]
 800c384:	494d      	ldr	r1, [pc, #308]	; (800c4bc <HAL_RCC_ClockConfig+0x1bc>)
 800c386:	4313      	orrs	r3, r2
 800c388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f003 0301 	and.w	r3, r3, #1
 800c392:	2b00      	cmp	r3, #0
 800c394:	d044      	beq.n	800c420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d107      	bne.n	800c3ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c39e:	4b47      	ldr	r3, [pc, #284]	; (800c4bc <HAL_RCC_ClockConfig+0x1bc>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d119      	bne.n	800c3de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	e07f      	b.n	800c4ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	2b02      	cmp	r3, #2
 800c3b4:	d003      	beq.n	800c3be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c3ba:	2b03      	cmp	r3, #3
 800c3bc:	d107      	bne.n	800c3ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c3be:	4b3f      	ldr	r3, [pc, #252]	; (800c4bc <HAL_RCC_ClockConfig+0x1bc>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d109      	bne.n	800c3de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	e06f      	b.n	800c4ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c3ce:	4b3b      	ldr	r3, [pc, #236]	; (800c4bc <HAL_RCC_ClockConfig+0x1bc>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f003 0302 	and.w	r3, r3, #2
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d101      	bne.n	800c3de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c3da:	2301      	movs	r3, #1
 800c3dc:	e067      	b.n	800c4ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c3de:	4b37      	ldr	r3, [pc, #220]	; (800c4bc <HAL_RCC_ClockConfig+0x1bc>)
 800c3e0:	689b      	ldr	r3, [r3, #8]
 800c3e2:	f023 0203 	bic.w	r2, r3, #3
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	685b      	ldr	r3, [r3, #4]
 800c3ea:	4934      	ldr	r1, [pc, #208]	; (800c4bc <HAL_RCC_ClockConfig+0x1bc>)
 800c3ec:	4313      	orrs	r3, r2
 800c3ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c3f0:	f7fc ff2e 	bl	8009250 <HAL_GetTick>
 800c3f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c3f6:	e00a      	b.n	800c40e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c3f8:	f7fc ff2a 	bl	8009250 <HAL_GetTick>
 800c3fc:	4602      	mov	r2, r0
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	1ad3      	subs	r3, r2, r3
 800c402:	f241 3288 	movw	r2, #5000	; 0x1388
 800c406:	4293      	cmp	r3, r2
 800c408:	d901      	bls.n	800c40e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c40a:	2303      	movs	r3, #3
 800c40c:	e04f      	b.n	800c4ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c40e:	4b2b      	ldr	r3, [pc, #172]	; (800c4bc <HAL_RCC_ClockConfig+0x1bc>)
 800c410:	689b      	ldr	r3, [r3, #8]
 800c412:	f003 020c 	and.w	r2, r3, #12
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d1eb      	bne.n	800c3f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c420:	4b25      	ldr	r3, [pc, #148]	; (800c4b8 <HAL_RCC_ClockConfig+0x1b8>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f003 030f 	and.w	r3, r3, #15
 800c428:	683a      	ldr	r2, [r7, #0]
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d20c      	bcs.n	800c448 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c42e:	4b22      	ldr	r3, [pc, #136]	; (800c4b8 <HAL_RCC_ClockConfig+0x1b8>)
 800c430:	683a      	ldr	r2, [r7, #0]
 800c432:	b2d2      	uxtb	r2, r2
 800c434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c436:	4b20      	ldr	r3, [pc, #128]	; (800c4b8 <HAL_RCC_ClockConfig+0x1b8>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f003 030f 	and.w	r3, r3, #15
 800c43e:	683a      	ldr	r2, [r7, #0]
 800c440:	429a      	cmp	r2, r3
 800c442:	d001      	beq.n	800c448 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c444:	2301      	movs	r3, #1
 800c446:	e032      	b.n	800c4ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f003 0304 	and.w	r3, r3, #4
 800c450:	2b00      	cmp	r3, #0
 800c452:	d008      	beq.n	800c466 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c454:	4b19      	ldr	r3, [pc, #100]	; (800c4bc <HAL_RCC_ClockConfig+0x1bc>)
 800c456:	689b      	ldr	r3, [r3, #8]
 800c458:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	68db      	ldr	r3, [r3, #12]
 800c460:	4916      	ldr	r1, [pc, #88]	; (800c4bc <HAL_RCC_ClockConfig+0x1bc>)
 800c462:	4313      	orrs	r3, r2
 800c464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f003 0308 	and.w	r3, r3, #8
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d009      	beq.n	800c486 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c472:	4b12      	ldr	r3, [pc, #72]	; (800c4bc <HAL_RCC_ClockConfig+0x1bc>)
 800c474:	689b      	ldr	r3, [r3, #8]
 800c476:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	691b      	ldr	r3, [r3, #16]
 800c47e:	00db      	lsls	r3, r3, #3
 800c480:	490e      	ldr	r1, [pc, #56]	; (800c4bc <HAL_RCC_ClockConfig+0x1bc>)
 800c482:	4313      	orrs	r3, r2
 800c484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c486:	f000 f821 	bl	800c4cc <HAL_RCC_GetSysClockFreq>
 800c48a:	4602      	mov	r2, r0
 800c48c:	4b0b      	ldr	r3, [pc, #44]	; (800c4bc <HAL_RCC_ClockConfig+0x1bc>)
 800c48e:	689b      	ldr	r3, [r3, #8]
 800c490:	091b      	lsrs	r3, r3, #4
 800c492:	f003 030f 	and.w	r3, r3, #15
 800c496:	490a      	ldr	r1, [pc, #40]	; (800c4c0 <HAL_RCC_ClockConfig+0x1c0>)
 800c498:	5ccb      	ldrb	r3, [r1, r3]
 800c49a:	fa22 f303 	lsr.w	r3, r2, r3
 800c49e:	4a09      	ldr	r2, [pc, #36]	; (800c4c4 <HAL_RCC_ClockConfig+0x1c4>)
 800c4a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c4a2:	4b09      	ldr	r3, [pc, #36]	; (800c4c8 <HAL_RCC_ClockConfig+0x1c8>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7f5 ff4a 	bl	8002340 <HAL_InitTick>

  return HAL_OK;
 800c4ac:	2300      	movs	r3, #0
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3710      	adds	r7, #16
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	40023c00 	.word	0x40023c00
 800c4bc:	40023800 	.word	0x40023800
 800c4c0:	0801ec34 	.word	0x0801ec34
 800c4c4:	20000000 	.word	0x20000000
 800c4c8:	20000060 	.word	0x20000060

0800c4cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c4cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c4d0:	b084      	sub	sp, #16
 800c4d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	607b      	str	r3, [r7, #4]
 800c4d8:	2300      	movs	r3, #0
 800c4da:	60fb      	str	r3, [r7, #12]
 800c4dc:	2300      	movs	r3, #0
 800c4de:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c4e4:	4b67      	ldr	r3, [pc, #412]	; (800c684 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	f003 030c 	and.w	r3, r3, #12
 800c4ec:	2b08      	cmp	r3, #8
 800c4ee:	d00d      	beq.n	800c50c <HAL_RCC_GetSysClockFreq+0x40>
 800c4f0:	2b08      	cmp	r3, #8
 800c4f2:	f200 80bd 	bhi.w	800c670 <HAL_RCC_GetSysClockFreq+0x1a4>
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d002      	beq.n	800c500 <HAL_RCC_GetSysClockFreq+0x34>
 800c4fa:	2b04      	cmp	r3, #4
 800c4fc:	d003      	beq.n	800c506 <HAL_RCC_GetSysClockFreq+0x3a>
 800c4fe:	e0b7      	b.n	800c670 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c500:	4b61      	ldr	r3, [pc, #388]	; (800c688 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c502:	60bb      	str	r3, [r7, #8]
       break;
 800c504:	e0b7      	b.n	800c676 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c506:	4b60      	ldr	r3, [pc, #384]	; (800c688 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c508:	60bb      	str	r3, [r7, #8]
      break;
 800c50a:	e0b4      	b.n	800c676 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c50c:	4b5d      	ldr	r3, [pc, #372]	; (800c684 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c514:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c516:	4b5b      	ldr	r3, [pc, #364]	; (800c684 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c518:	685b      	ldr	r3, [r3, #4]
 800c51a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d04d      	beq.n	800c5be <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c522:	4b58      	ldr	r3, [pc, #352]	; (800c684 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	099b      	lsrs	r3, r3, #6
 800c528:	461a      	mov	r2, r3
 800c52a:	f04f 0300 	mov.w	r3, #0
 800c52e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c532:	f04f 0100 	mov.w	r1, #0
 800c536:	ea02 0800 	and.w	r8, r2, r0
 800c53a:	ea03 0901 	and.w	r9, r3, r1
 800c53e:	4640      	mov	r0, r8
 800c540:	4649      	mov	r1, r9
 800c542:	f04f 0200 	mov.w	r2, #0
 800c546:	f04f 0300 	mov.w	r3, #0
 800c54a:	014b      	lsls	r3, r1, #5
 800c54c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c550:	0142      	lsls	r2, r0, #5
 800c552:	4610      	mov	r0, r2
 800c554:	4619      	mov	r1, r3
 800c556:	ebb0 0008 	subs.w	r0, r0, r8
 800c55a:	eb61 0109 	sbc.w	r1, r1, r9
 800c55e:	f04f 0200 	mov.w	r2, #0
 800c562:	f04f 0300 	mov.w	r3, #0
 800c566:	018b      	lsls	r3, r1, #6
 800c568:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c56c:	0182      	lsls	r2, r0, #6
 800c56e:	1a12      	subs	r2, r2, r0
 800c570:	eb63 0301 	sbc.w	r3, r3, r1
 800c574:	f04f 0000 	mov.w	r0, #0
 800c578:	f04f 0100 	mov.w	r1, #0
 800c57c:	00d9      	lsls	r1, r3, #3
 800c57e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c582:	00d0      	lsls	r0, r2, #3
 800c584:	4602      	mov	r2, r0
 800c586:	460b      	mov	r3, r1
 800c588:	eb12 0208 	adds.w	r2, r2, r8
 800c58c:	eb43 0309 	adc.w	r3, r3, r9
 800c590:	f04f 0000 	mov.w	r0, #0
 800c594:	f04f 0100 	mov.w	r1, #0
 800c598:	0299      	lsls	r1, r3, #10
 800c59a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c59e:	0290      	lsls	r0, r2, #10
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	4610      	mov	r0, r2
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	f04f 0300 	mov.w	r3, #0
 800c5b0:	f7f4 fbda 	bl	8000d68 <__aeabi_uldivmod>
 800c5b4:	4602      	mov	r2, r0
 800c5b6:	460b      	mov	r3, r1
 800c5b8:	4613      	mov	r3, r2
 800c5ba:	60fb      	str	r3, [r7, #12]
 800c5bc:	e04a      	b.n	800c654 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c5be:	4b31      	ldr	r3, [pc, #196]	; (800c684 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	099b      	lsrs	r3, r3, #6
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	f04f 0300 	mov.w	r3, #0
 800c5ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c5ce:	f04f 0100 	mov.w	r1, #0
 800c5d2:	ea02 0400 	and.w	r4, r2, r0
 800c5d6:	ea03 0501 	and.w	r5, r3, r1
 800c5da:	4620      	mov	r0, r4
 800c5dc:	4629      	mov	r1, r5
 800c5de:	f04f 0200 	mov.w	r2, #0
 800c5e2:	f04f 0300 	mov.w	r3, #0
 800c5e6:	014b      	lsls	r3, r1, #5
 800c5e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c5ec:	0142      	lsls	r2, r0, #5
 800c5ee:	4610      	mov	r0, r2
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	1b00      	subs	r0, r0, r4
 800c5f4:	eb61 0105 	sbc.w	r1, r1, r5
 800c5f8:	f04f 0200 	mov.w	r2, #0
 800c5fc:	f04f 0300 	mov.w	r3, #0
 800c600:	018b      	lsls	r3, r1, #6
 800c602:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c606:	0182      	lsls	r2, r0, #6
 800c608:	1a12      	subs	r2, r2, r0
 800c60a:	eb63 0301 	sbc.w	r3, r3, r1
 800c60e:	f04f 0000 	mov.w	r0, #0
 800c612:	f04f 0100 	mov.w	r1, #0
 800c616:	00d9      	lsls	r1, r3, #3
 800c618:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c61c:	00d0      	lsls	r0, r2, #3
 800c61e:	4602      	mov	r2, r0
 800c620:	460b      	mov	r3, r1
 800c622:	1912      	adds	r2, r2, r4
 800c624:	eb45 0303 	adc.w	r3, r5, r3
 800c628:	f04f 0000 	mov.w	r0, #0
 800c62c:	f04f 0100 	mov.w	r1, #0
 800c630:	0299      	lsls	r1, r3, #10
 800c632:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c636:	0290      	lsls	r0, r2, #10
 800c638:	4602      	mov	r2, r0
 800c63a:	460b      	mov	r3, r1
 800c63c:	4610      	mov	r0, r2
 800c63e:	4619      	mov	r1, r3
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	461a      	mov	r2, r3
 800c644:	f04f 0300 	mov.w	r3, #0
 800c648:	f7f4 fb8e 	bl	8000d68 <__aeabi_uldivmod>
 800c64c:	4602      	mov	r2, r0
 800c64e:	460b      	mov	r3, r1
 800c650:	4613      	mov	r3, r2
 800c652:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c654:	4b0b      	ldr	r3, [pc, #44]	; (800c684 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c656:	685b      	ldr	r3, [r3, #4]
 800c658:	0c1b      	lsrs	r3, r3, #16
 800c65a:	f003 0303 	and.w	r3, r3, #3
 800c65e:	3301      	adds	r3, #1
 800c660:	005b      	lsls	r3, r3, #1
 800c662:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c664:	68fa      	ldr	r2, [r7, #12]
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	fbb2 f3f3 	udiv	r3, r2, r3
 800c66c:	60bb      	str	r3, [r7, #8]
      break;
 800c66e:	e002      	b.n	800c676 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c670:	4b05      	ldr	r3, [pc, #20]	; (800c688 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c672:	60bb      	str	r3, [r7, #8]
      break;
 800c674:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c676:	68bb      	ldr	r3, [r7, #8]
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c682:	bf00      	nop
 800c684:	40023800 	.word	0x40023800
 800c688:	00f42400 	.word	0x00f42400

0800c68c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c68c:	b480      	push	{r7}
 800c68e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c690:	4b03      	ldr	r3, [pc, #12]	; (800c6a0 <HAL_RCC_GetHCLKFreq+0x14>)
 800c692:	681b      	ldr	r3, [r3, #0]
}
 800c694:	4618      	mov	r0, r3
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr
 800c69e:	bf00      	nop
 800c6a0:	20000000 	.word	0x20000000

0800c6a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c6a8:	f7ff fff0 	bl	800c68c <HAL_RCC_GetHCLKFreq>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	4b05      	ldr	r3, [pc, #20]	; (800c6c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c6b0:	689b      	ldr	r3, [r3, #8]
 800c6b2:	0a9b      	lsrs	r3, r3, #10
 800c6b4:	f003 0307 	and.w	r3, r3, #7
 800c6b8:	4903      	ldr	r1, [pc, #12]	; (800c6c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c6ba:	5ccb      	ldrb	r3, [r1, r3]
 800c6bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	40023800 	.word	0x40023800
 800c6c8:	0801ec44 	.word	0x0801ec44

0800c6cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c6d0:	f7ff ffdc 	bl	800c68c <HAL_RCC_GetHCLKFreq>
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	4b05      	ldr	r3, [pc, #20]	; (800c6ec <HAL_RCC_GetPCLK2Freq+0x20>)
 800c6d8:	689b      	ldr	r3, [r3, #8]
 800c6da:	0b5b      	lsrs	r3, r3, #13
 800c6dc:	f003 0307 	and.w	r3, r3, #7
 800c6e0:	4903      	ldr	r1, [pc, #12]	; (800c6f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c6e2:	5ccb      	ldrb	r3, [r1, r3]
 800c6e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	40023800 	.word	0x40023800
 800c6f0:	0801ec44 	.word	0x0801ec44

0800c6f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b083      	sub	sp, #12
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	220f      	movs	r2, #15
 800c702:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c704:	4b12      	ldr	r3, [pc, #72]	; (800c750 <HAL_RCC_GetClockConfig+0x5c>)
 800c706:	689b      	ldr	r3, [r3, #8]
 800c708:	f003 0203 	and.w	r2, r3, #3
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c710:	4b0f      	ldr	r3, [pc, #60]	; (800c750 <HAL_RCC_GetClockConfig+0x5c>)
 800c712:	689b      	ldr	r3, [r3, #8]
 800c714:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c71c:	4b0c      	ldr	r3, [pc, #48]	; (800c750 <HAL_RCC_GetClockConfig+0x5c>)
 800c71e:	689b      	ldr	r3, [r3, #8]
 800c720:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800c728:	4b09      	ldr	r3, [pc, #36]	; (800c750 <HAL_RCC_GetClockConfig+0x5c>)
 800c72a:	689b      	ldr	r3, [r3, #8]
 800c72c:	08db      	lsrs	r3, r3, #3
 800c72e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c736:	4b07      	ldr	r3, [pc, #28]	; (800c754 <HAL_RCC_GetClockConfig+0x60>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f003 020f 	and.w	r2, r3, #15
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	601a      	str	r2, [r3, #0]
}
 800c742:	bf00      	nop
 800c744:	370c      	adds	r7, #12
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr
 800c74e:	bf00      	nop
 800c750:	40023800 	.word	0x40023800
 800c754:	40023c00 	.word	0x40023c00

0800c758 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b086      	sub	sp, #24
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c760:	2300      	movs	r3, #0
 800c762:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800c764:	2300      	movs	r3, #0
 800c766:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f003 0301 	and.w	r3, r3, #1
 800c770:	2b00      	cmp	r3, #0
 800c772:	d10b      	bne.n	800c78c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d105      	bne.n	800c78c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d075      	beq.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c78c:	4bad      	ldr	r3, [pc, #692]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c78e:	2200      	movs	r2, #0
 800c790:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c792:	f7fc fd5d 	bl	8009250 <HAL_GetTick>
 800c796:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c798:	e008      	b.n	800c7ac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c79a:	f7fc fd59 	bl	8009250 <HAL_GetTick>
 800c79e:	4602      	mov	r2, r0
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	1ad3      	subs	r3, r2, r3
 800c7a4:	2b02      	cmp	r3, #2
 800c7a6:	d901      	bls.n	800c7ac <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c7a8:	2303      	movs	r3, #3
 800c7aa:	e18b      	b.n	800cac4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c7ac:	4ba6      	ldr	r3, [pc, #664]	; (800ca48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d1f0      	bne.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f003 0301 	and.w	r3, r3, #1
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d009      	beq.n	800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	019a      	lsls	r2, r3, #6
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	689b      	ldr	r3, [r3, #8]
 800c7ce:	071b      	lsls	r3, r3, #28
 800c7d0:	499d      	ldr	r1, [pc, #628]	; (800ca48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f003 0302 	and.w	r3, r3, #2
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d01f      	beq.n	800c824 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c7e4:	4b98      	ldr	r3, [pc, #608]	; (800ca48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c7e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7ea:	0f1b      	lsrs	r3, r3, #28
 800c7ec:	f003 0307 	and.w	r3, r3, #7
 800c7f0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	019a      	lsls	r2, r3, #6
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	68db      	ldr	r3, [r3, #12]
 800c7fc:	061b      	lsls	r3, r3, #24
 800c7fe:	431a      	orrs	r2, r3
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	071b      	lsls	r3, r3, #28
 800c804:	4990      	ldr	r1, [pc, #576]	; (800ca48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c806:	4313      	orrs	r3, r2
 800c808:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c80c:	4b8e      	ldr	r3, [pc, #568]	; (800ca48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c80e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c812:	f023 021f 	bic.w	r2, r3, #31
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	69db      	ldr	r3, [r3, #28]
 800c81a:	3b01      	subs	r3, #1
 800c81c:	498a      	ldr	r1, [pc, #552]	; (800ca48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c81e:	4313      	orrs	r3, r2
 800c820:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d00d      	beq.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	019a      	lsls	r2, r3, #6
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	061b      	lsls	r3, r3, #24
 800c83c:	431a      	orrs	r2, r3
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	689b      	ldr	r3, [r3, #8]
 800c842:	071b      	lsls	r3, r3, #28
 800c844:	4980      	ldr	r1, [pc, #512]	; (800ca48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c846:	4313      	orrs	r3, r2
 800c848:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c84c:	4b7d      	ldr	r3, [pc, #500]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c84e:	2201      	movs	r2, #1
 800c850:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c852:	f7fc fcfd 	bl	8009250 <HAL_GetTick>
 800c856:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c858:	e008      	b.n	800c86c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c85a:	f7fc fcf9 	bl	8009250 <HAL_GetTick>
 800c85e:	4602      	mov	r2, r0
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	1ad3      	subs	r3, r2, r3
 800c864:	2b02      	cmp	r3, #2
 800c866:	d901      	bls.n	800c86c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c868:	2303      	movs	r3, #3
 800c86a:	e12b      	b.n	800cac4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c86c:	4b76      	ldr	r3, [pc, #472]	; (800ca48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c874:	2b00      	cmp	r3, #0
 800c876:	d0f0      	beq.n	800c85a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f003 0304 	and.w	r3, r3, #4
 800c880:	2b00      	cmp	r3, #0
 800c882:	d105      	bne.n	800c890 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d079      	beq.n	800c984 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c890:	4b6e      	ldr	r3, [pc, #440]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c892:	2200      	movs	r2, #0
 800c894:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c896:	f7fc fcdb 	bl	8009250 <HAL_GetTick>
 800c89a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c89c:	e008      	b.n	800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c89e:	f7fc fcd7 	bl	8009250 <HAL_GetTick>
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	1ad3      	subs	r3, r2, r3
 800c8a8:	2b02      	cmp	r3, #2
 800c8aa:	d901      	bls.n	800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c8ac:	2303      	movs	r3, #3
 800c8ae:	e109      	b.n	800cac4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c8b0:	4b65      	ldr	r3, [pc, #404]	; (800ca48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c8b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8bc:	d0ef      	beq.n	800c89e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f003 0304 	and.w	r3, r3, #4
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d020      	beq.n	800c90c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c8ca:	4b5f      	ldr	r3, [pc, #380]	; (800ca48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c8cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8d0:	0f1b      	lsrs	r3, r3, #28
 800c8d2:	f003 0307 	and.w	r3, r3, #7
 800c8d6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	691b      	ldr	r3, [r3, #16]
 800c8dc:	019a      	lsls	r2, r3, #6
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	695b      	ldr	r3, [r3, #20]
 800c8e2:	061b      	lsls	r3, r3, #24
 800c8e4:	431a      	orrs	r2, r3
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	071b      	lsls	r3, r3, #28
 800c8ea:	4957      	ldr	r1, [pc, #348]	; (800ca48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c8ec:	4313      	orrs	r3, r2
 800c8ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c8f2:	4b55      	ldr	r3, [pc, #340]	; (800ca48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c8f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6a1b      	ldr	r3, [r3, #32]
 800c900:	3b01      	subs	r3, #1
 800c902:	021b      	lsls	r3, r3, #8
 800c904:	4950      	ldr	r1, [pc, #320]	; (800ca48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c906:	4313      	orrs	r3, r2
 800c908:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f003 0308 	and.w	r3, r3, #8
 800c914:	2b00      	cmp	r3, #0
 800c916:	d01e      	beq.n	800c956 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c918:	4b4b      	ldr	r3, [pc, #300]	; (800ca48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c91a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c91e:	0e1b      	lsrs	r3, r3, #24
 800c920:	f003 030f 	and.w	r3, r3, #15
 800c924:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	691b      	ldr	r3, [r3, #16]
 800c92a:	019a      	lsls	r2, r3, #6
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	061b      	lsls	r3, r3, #24
 800c930:	431a      	orrs	r2, r3
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	699b      	ldr	r3, [r3, #24]
 800c936:	071b      	lsls	r3, r3, #28
 800c938:	4943      	ldr	r1, [pc, #268]	; (800ca48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c93a:	4313      	orrs	r3, r2
 800c93c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c940:	4b41      	ldr	r3, [pc, #260]	; (800ca48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c946:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c94e:	493e      	ldr	r1, [pc, #248]	; (800ca48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c950:	4313      	orrs	r3, r2
 800c952:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c956:	4b3d      	ldr	r3, [pc, #244]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c958:	2201      	movs	r2, #1
 800c95a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c95c:	f7fc fc78 	bl	8009250 <HAL_GetTick>
 800c960:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c962:	e008      	b.n	800c976 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c964:	f7fc fc74 	bl	8009250 <HAL_GetTick>
 800c968:	4602      	mov	r2, r0
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	1ad3      	subs	r3, r2, r3
 800c96e:	2b02      	cmp	r3, #2
 800c970:	d901      	bls.n	800c976 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c972:	2303      	movs	r3, #3
 800c974:	e0a6      	b.n	800cac4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c976:	4b34      	ldr	r3, [pc, #208]	; (800ca48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c97e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c982:	d1ef      	bne.n	800c964 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f003 0320 	and.w	r3, r3, #32
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	f000 808d 	beq.w	800caac <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c992:	2300      	movs	r3, #0
 800c994:	60fb      	str	r3, [r7, #12]
 800c996:	4b2c      	ldr	r3, [pc, #176]	; (800ca48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c99a:	4a2b      	ldr	r2, [pc, #172]	; (800ca48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c99c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c9a0:	6413      	str	r3, [r2, #64]	; 0x40
 800c9a2:	4b29      	ldr	r3, [pc, #164]	; (800ca48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9aa:	60fb      	str	r3, [r7, #12]
 800c9ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c9ae:	4b28      	ldr	r3, [pc, #160]	; (800ca50 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	4a27      	ldr	r2, [pc, #156]	; (800ca50 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800c9b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c9b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c9ba:	f7fc fc49 	bl	8009250 <HAL_GetTick>
 800c9be:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c9c0:	e008      	b.n	800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c9c2:	f7fc fc45 	bl	8009250 <HAL_GetTick>
 800c9c6:	4602      	mov	r2, r0
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	1ad3      	subs	r3, r2, r3
 800c9cc:	2b02      	cmp	r3, #2
 800c9ce:	d901      	bls.n	800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800c9d0:	2303      	movs	r3, #3
 800c9d2:	e077      	b.n	800cac4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c9d4:	4b1e      	ldr	r3, [pc, #120]	; (800ca50 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d0f0      	beq.n	800c9c2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c9e0:	4b19      	ldr	r3, [pc, #100]	; (800ca48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c9e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9e8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d039      	beq.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9f8:	693a      	ldr	r2, [r7, #16]
 800c9fa:	429a      	cmp	r2, r3
 800c9fc:	d032      	beq.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c9fe:	4b12      	ldr	r3, [pc, #72]	; (800ca48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ca00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca06:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ca08:	4b12      	ldr	r3, [pc, #72]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ca0e:	4b11      	ldr	r3, [pc, #68]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800ca10:	2200      	movs	r2, #0
 800ca12:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800ca14:	4a0c      	ldr	r2, [pc, #48]	; (800ca48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ca1a:	4b0b      	ldr	r3, [pc, #44]	; (800ca48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ca1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca1e:	f003 0301 	and.w	r3, r3, #1
 800ca22:	2b01      	cmp	r3, #1
 800ca24:	d11e      	bne.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800ca26:	f7fc fc13 	bl	8009250 <HAL_GetTick>
 800ca2a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca2c:	e014      	b.n	800ca58 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ca2e:	f7fc fc0f 	bl	8009250 <HAL_GetTick>
 800ca32:	4602      	mov	r2, r0
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	1ad3      	subs	r3, r2, r3
 800ca38:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	d90b      	bls.n	800ca58 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800ca40:	2303      	movs	r3, #3
 800ca42:	e03f      	b.n	800cac4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800ca44:	42470068 	.word	0x42470068
 800ca48:	40023800 	.word	0x40023800
 800ca4c:	42470070 	.word	0x42470070
 800ca50:	40007000 	.word	0x40007000
 800ca54:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca58:	4b1c      	ldr	r3, [pc, #112]	; (800cacc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ca5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca5c:	f003 0302 	and.w	r3, r3, #2
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d0e4      	beq.n	800ca2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca70:	d10d      	bne.n	800ca8e <HAL_RCCEx_PeriphCLKConfig+0x336>
 800ca72:	4b16      	ldr	r3, [pc, #88]	; (800cacc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ca74:	689b      	ldr	r3, [r3, #8]
 800ca76:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca7e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ca82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca86:	4911      	ldr	r1, [pc, #68]	; (800cacc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ca88:	4313      	orrs	r3, r2
 800ca8a:	608b      	str	r3, [r1, #8]
 800ca8c:	e005      	b.n	800ca9a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800ca8e:	4b0f      	ldr	r3, [pc, #60]	; (800cacc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ca90:	689b      	ldr	r3, [r3, #8]
 800ca92:	4a0e      	ldr	r2, [pc, #56]	; (800cacc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ca94:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ca98:	6093      	str	r3, [r2, #8]
 800ca9a:	4b0c      	ldr	r3, [pc, #48]	; (800cacc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ca9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800caa6:	4909      	ldr	r1, [pc, #36]	; (800cacc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800caa8:	4313      	orrs	r3, r2
 800caaa:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f003 0310 	and.w	r3, r3, #16
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d004      	beq.n	800cac2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800cabe:	4b04      	ldr	r3, [pc, #16]	; (800cad0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800cac0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800cac2:	2300      	movs	r3, #0
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3718      	adds	r7, #24
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}
 800cacc:	40023800 	.word	0x40023800
 800cad0:	424711e0 	.word	0x424711e0

0800cad4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d101      	bne.n	800cae6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800cae2:	2301      	movs	r3, #1
 800cae4:	e083      	b.n	800cbee <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	7f5b      	ldrb	r3, [r3, #29]
 800caea:	b2db      	uxtb	r3, r3
 800caec:	2b00      	cmp	r3, #0
 800caee:	d105      	bne.n	800cafc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2200      	movs	r2, #0
 800caf4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f7f5 fa6c 	bl	8001fd4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2202      	movs	r2, #2
 800cb00:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	22ca      	movs	r2, #202	; 0xca
 800cb08:	625a      	str	r2, [r3, #36]	; 0x24
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	2253      	movs	r2, #83	; 0x53
 800cb10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 fb84 	bl	800d220 <RTC_EnterInitMode>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d008      	beq.n	800cb30 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	22ff      	movs	r2, #255	; 0xff
 800cb24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2204      	movs	r2, #4
 800cb2a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	e05e      	b.n	800cbee <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	687a      	ldr	r2, [r7, #4]
 800cb38:	6812      	ldr	r2, [r2, #0]
 800cb3a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cb3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb42:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	6899      	ldr	r1, [r3, #8]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	685a      	ldr	r2, [r3, #4]
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	691b      	ldr	r3, [r3, #16]
 800cb52:	431a      	orrs	r2, r3
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	695b      	ldr	r3, [r3, #20]
 800cb58:	431a      	orrs	r2, r3
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	430a      	orrs	r2, r1
 800cb60:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	687a      	ldr	r2, [r7, #4]
 800cb68:	68d2      	ldr	r2, [r2, #12]
 800cb6a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	6919      	ldr	r1, [r3, #16]
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	689b      	ldr	r3, [r3, #8]
 800cb76:	041a      	lsls	r2, r3, #16
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	430a      	orrs	r2, r1
 800cb7e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	68da      	ldr	r2, [r3, #12]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cb8e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	689b      	ldr	r3, [r3, #8]
 800cb96:	f003 0320 	and.w	r3, r3, #32
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d10e      	bne.n	800cbbc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f000 fb16 	bl	800d1d0 <HAL_RTC_WaitForSynchro>
 800cba4:	4603      	mov	r3, r0
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d008      	beq.n	800cbbc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	22ff      	movs	r2, #255	; 0xff
 800cbb0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2204      	movs	r2, #4
 800cbb6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800cbb8:	2301      	movs	r3, #1
 800cbba:	e018      	b.n	800cbee <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cbca:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	699a      	ldr	r2, [r3, #24]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	430a      	orrs	r2, r1
 800cbdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	22ff      	movs	r2, #255	; 0xff
 800cbe4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2201      	movs	r2, #1
 800cbea:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800cbec:	2300      	movs	r3, #0
  }
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3708      	adds	r7, #8
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}

0800cbf6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cbf6:	b590      	push	{r4, r7, lr}
 800cbf8:	b087      	sub	sp, #28
 800cbfa:	af00      	add	r7, sp, #0
 800cbfc:	60f8      	str	r0, [r7, #12]
 800cbfe:	60b9      	str	r1, [r7, #8]
 800cc00:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800cc02:	2300      	movs	r3, #0
 800cc04:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	7f1b      	ldrb	r3, [r3, #28]
 800cc0a:	2b01      	cmp	r3, #1
 800cc0c:	d101      	bne.n	800cc12 <HAL_RTC_SetTime+0x1c>
 800cc0e:	2302      	movs	r3, #2
 800cc10:	e0aa      	b.n	800cd68 <HAL_RTC_SetTime+0x172>
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	2201      	movs	r2, #1
 800cc16:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2202      	movs	r2, #2
 800cc1c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d126      	bne.n	800cc72 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	689b      	ldr	r3, [r3, #8]
 800cc2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d102      	bne.n	800cc38 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	2200      	movs	r2, #0
 800cc36:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f000 fb1b 	bl	800d278 <RTC_ByteToBcd2>
 800cc42:	4603      	mov	r3, r0
 800cc44:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	785b      	ldrb	r3, [r3, #1]
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f000 fb14 	bl	800d278 <RTC_ByteToBcd2>
 800cc50:	4603      	mov	r3, r0
 800cc52:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800cc54:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	789b      	ldrb	r3, [r3, #2]
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f000 fb0c 	bl	800d278 <RTC_ByteToBcd2>
 800cc60:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800cc62:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	78db      	ldrb	r3, [r3, #3]
 800cc6a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800cc6c:	4313      	orrs	r3, r2
 800cc6e:	617b      	str	r3, [r7, #20]
 800cc70:	e018      	b.n	800cca4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d102      	bne.n	800cc86 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	2200      	movs	r2, #0
 800cc84:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	785b      	ldrb	r3, [r3, #1]
 800cc90:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800cc92:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800cc94:	68ba      	ldr	r2, [r7, #8]
 800cc96:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800cc98:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	78db      	ldrb	r3, [r3, #3]
 800cc9e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800cca0:	4313      	orrs	r3, r2
 800cca2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	22ca      	movs	r2, #202	; 0xca
 800ccaa:	625a      	str	r2, [r3, #36]	; 0x24
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2253      	movs	r2, #83	; 0x53
 800ccb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ccb4:	68f8      	ldr	r0, [r7, #12]
 800ccb6:	f000 fab3 	bl	800d220 <RTC_EnterInitMode>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d00b      	beq.n	800ccd8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	22ff      	movs	r2, #255	; 0xff
 800ccc6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2204      	movs	r2, #4
 800cccc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	e047      	b.n	800cd68 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	681a      	ldr	r2, [r3, #0]
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800cce2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800cce6:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	689a      	ldr	r2, [r3, #8]
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ccf6:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	6899      	ldr	r1, [r3, #8]
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	68da      	ldr	r2, [r3, #12]
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	691b      	ldr	r3, [r3, #16]
 800cd06:	431a      	orrs	r2, r3
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	430a      	orrs	r2, r1
 800cd0e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	68da      	ldr	r2, [r3, #12]
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cd1e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	689b      	ldr	r3, [r3, #8]
 800cd26:	f003 0320 	and.w	r3, r3, #32
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d111      	bne.n	800cd52 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cd2e:	68f8      	ldr	r0, [r7, #12]
 800cd30:	f000 fa4e 	bl	800d1d0 <HAL_RTC_WaitForSynchro>
 800cd34:	4603      	mov	r3, r0
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d00b      	beq.n	800cd52 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	22ff      	movs	r2, #255	; 0xff
 800cd40:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	2204      	movs	r2, #4
 800cd46:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800cd4e:	2301      	movs	r3, #1
 800cd50:	e00a      	b.n	800cd68 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	22ff      	movs	r2, #255	; 0xff
 800cd58:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2200      	movs	r2, #0
 800cd64:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800cd66:	2300      	movs	r3, #0
  }
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	371c      	adds	r7, #28
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd90      	pop	{r4, r7, pc}

0800cd70 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cd70:	b590      	push	{r4, r7, lr}
 800cd72:	b087      	sub	sp, #28
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	7f1b      	ldrb	r3, [r3, #28]
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d101      	bne.n	800cd8c <HAL_RTC_SetDate+0x1c>
 800cd88:	2302      	movs	r3, #2
 800cd8a:	e094      	b.n	800ceb6 <HAL_RTC_SetDate+0x146>
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2201      	movs	r2, #1
 800cd90:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	2202      	movs	r2, #2
 800cd96:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d10e      	bne.n	800cdbc <HAL_RTC_SetDate+0x4c>
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	785b      	ldrb	r3, [r3, #1]
 800cda2:	f003 0310 	and.w	r3, r3, #16
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d008      	beq.n	800cdbc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	785b      	ldrb	r3, [r3, #1]
 800cdae:	f023 0310 	bic.w	r3, r3, #16
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	330a      	adds	r3, #10
 800cdb6:	b2da      	uxtb	r2, r3
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d11c      	bne.n	800cdfc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	78db      	ldrb	r3, [r3, #3]
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f000 fa56 	bl	800d278 <RTC_ByteToBcd2>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	785b      	ldrb	r3, [r3, #1]
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f000 fa4f 	bl	800d278 <RTC_ByteToBcd2>
 800cdda:	4603      	mov	r3, r0
 800cddc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800cdde:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	789b      	ldrb	r3, [r3, #2]
 800cde4:	4618      	mov	r0, r3
 800cde6:	f000 fa47 	bl	800d278 <RTC_ByteToBcd2>
 800cdea:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800cdec:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	617b      	str	r3, [r7, #20]
 800cdfa:	e00e      	b.n	800ce1a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	78db      	ldrb	r3, [r3, #3]
 800ce00:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	785b      	ldrb	r3, [r3, #1]
 800ce06:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800ce08:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800ce0a:	68ba      	ldr	r2, [r7, #8]
 800ce0c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800ce0e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	781b      	ldrb	r3, [r3, #0]
 800ce14:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800ce16:	4313      	orrs	r3, r2
 800ce18:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	22ca      	movs	r2, #202	; 0xca
 800ce20:	625a      	str	r2, [r3, #36]	; 0x24
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	2253      	movs	r2, #83	; 0x53
 800ce28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ce2a:	68f8      	ldr	r0, [r7, #12]
 800ce2c:	f000 f9f8 	bl	800d220 <RTC_EnterInitMode>
 800ce30:	4603      	mov	r3, r0
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d00b      	beq.n	800ce4e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	22ff      	movs	r2, #255	; 0xff
 800ce3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	2204      	movs	r2, #4
 800ce42:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	2200      	movs	r2, #0
 800ce48:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	e033      	b.n	800ceb6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ce58:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ce5c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	68da      	ldr	r2, [r3, #12]
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ce6c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	689b      	ldr	r3, [r3, #8]
 800ce74:	f003 0320 	and.w	r3, r3, #32
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d111      	bne.n	800cea0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ce7c:	68f8      	ldr	r0, [r7, #12]
 800ce7e:	f000 f9a7 	bl	800d1d0 <HAL_RTC_WaitForSynchro>
 800ce82:	4603      	mov	r3, r0
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d00b      	beq.n	800cea0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	22ff      	movs	r2, #255	; 0xff
 800ce8e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2204      	movs	r2, #4
 800ce94:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	e00a      	b.n	800ceb6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	22ff      	movs	r2, #255	; 0xff
 800cea6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2201      	movs	r2, #1
 800ceac:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800ceb4:	2300      	movs	r3, #0
  }
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	371c      	adds	r7, #28
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd90      	pop	{r4, r7, pc}
	...

0800cec0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800cec0:	b590      	push	{r4, r7, lr}
 800cec2:	b089      	sub	sp, #36	; 0x24
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	60f8      	str	r0, [r7, #12]
 800cec8:	60b9      	str	r1, [r7, #8]
 800ceca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800cecc:	2300      	movs	r3, #0
 800cece:	61fb      	str	r3, [r7, #28]
 800ced0:	2300      	movs	r3, #0
 800ced2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800ced4:	4b93      	ldr	r3, [pc, #588]	; (800d124 <HAL_RTC_SetAlarm_IT+0x264>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	4a93      	ldr	r2, [pc, #588]	; (800d128 <HAL_RTC_SetAlarm_IT+0x268>)
 800ceda:	fba2 2303 	umull	r2, r3, r2, r3
 800cede:	0adb      	lsrs	r3, r3, #11
 800cee0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cee4:	fb02 f303 	mul.w	r3, r2, r3
 800cee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	7f1b      	ldrb	r3, [r3, #28]
 800ceee:	2b01      	cmp	r3, #1
 800cef0:	d101      	bne.n	800cef6 <HAL_RTC_SetAlarm_IT+0x36>
 800cef2:	2302      	movs	r3, #2
 800cef4:	e111      	b.n	800d11a <HAL_RTC_SetAlarm_IT+0x25a>
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2201      	movs	r2, #1
 800cefa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2202      	movs	r2, #2
 800cf00:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d137      	bne.n	800cf78 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	689b      	ldr	r3, [r3, #8]
 800cf0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d102      	bne.n	800cf1c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	4618      	mov	r0, r3
 800cf22:	f000 f9a9 	bl	800d278 <RTC_ByteToBcd2>
 800cf26:	4603      	mov	r3, r0
 800cf28:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	785b      	ldrb	r3, [r3, #1]
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f000 f9a2 	bl	800d278 <RTC_ByteToBcd2>
 800cf34:	4603      	mov	r3, r0
 800cf36:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800cf38:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	789b      	ldrb	r3, [r3, #2]
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f000 f99a 	bl	800d278 <RTC_ByteToBcd2>
 800cf44:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800cf46:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	78db      	ldrb	r3, [r3, #3]
 800cf4e:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800cf50:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f000 f98c 	bl	800d278 <RTC_ByteToBcd2>
 800cf60:	4603      	mov	r3, r0
 800cf62:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800cf64:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800cf6c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800cf72:	4313      	orrs	r3, r2
 800cf74:	61fb      	str	r3, [r7, #28]
 800cf76:	e023      	b.n	800cfc0 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	689b      	ldr	r3, [r3, #8]
 800cf7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d102      	bne.n	800cf8c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	785b      	ldrb	r3, [r3, #1]
 800cf96:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800cf98:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800cf9a:	68ba      	ldr	r2, [r7, #8]
 800cf9c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800cf9e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	78db      	ldrb	r3, [r3, #3]
 800cfa4:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800cfa6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cfae:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800cfb0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800cfb6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800cfbc:	4313      	orrs	r3, r2
 800cfbe:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	685a      	ldr	r2, [r3, #4]
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	699b      	ldr	r3, [r3, #24]
 800cfc8:	4313      	orrs	r3, r2
 800cfca:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	22ca      	movs	r2, #202	; 0xca
 800cfd2:	625a      	str	r2, [r3, #36]	; 0x24
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	2253      	movs	r2, #83	; 0x53
 800cfda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfe4:	d141      	bne.n	800d06a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	689a      	ldr	r2, [r3, #8]
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cff4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	68db      	ldr	r3, [r3, #12]
 800cffc:	b2da      	uxtb	r2, r3
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800d006:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	1e5a      	subs	r2, r3, #1
 800d00c:	617a      	str	r2, [r7, #20]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d10b      	bne.n	800d02a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	22ff      	movs	r2, #255	; 0xff
 800d018:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	2203      	movs	r2, #3
 800d01e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2200      	movs	r2, #0
 800d024:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d026:	2303      	movs	r3, #3
 800d028:	e077      	b.n	800d11a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	68db      	ldr	r3, [r3, #12]
 800d030:	f003 0301 	and.w	r3, r3, #1
 800d034:	2b00      	cmp	r3, #0
 800d036:	d0e7      	beq.n	800d008 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	69fa      	ldr	r2, [r7, #28]
 800d03e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	69ba      	ldr	r2, [r7, #24]
 800d046:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	689a      	ldr	r2, [r3, #8]
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d056:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	689a      	ldr	r2, [r3, #8]
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d066:	609a      	str	r2, [r3, #8]
 800d068:	e040      	b.n	800d0ec <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	689a      	ldr	r2, [r3, #8]
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d078:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	68db      	ldr	r3, [r3, #12]
 800d080:	b2da      	uxtb	r2, r3
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f462 7220 	orn	r2, r2, #640	; 0x280
 800d08a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	1e5a      	subs	r2, r3, #1
 800d090:	617a      	str	r2, [r7, #20]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d10b      	bne.n	800d0ae <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	22ff      	movs	r2, #255	; 0xff
 800d09c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2203      	movs	r2, #3
 800d0a2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d0aa:	2303      	movs	r3, #3
 800d0ac:	e035      	b.n	800d11a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	68db      	ldr	r3, [r3, #12]
 800d0b4:	f003 0302 	and.w	r3, r3, #2
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d0e7      	beq.n	800d08c <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	69fa      	ldr	r2, [r7, #28]
 800d0c2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	69ba      	ldr	r2, [r7, #24]
 800d0ca:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	689a      	ldr	r2, [r3, #8]
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d0da:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	689a      	ldr	r2, [r3, #8]
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d0ea:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800d0ec:	4b0f      	ldr	r3, [pc, #60]	; (800d12c <HAL_RTC_SetAlarm_IT+0x26c>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4a0e      	ldr	r2, [pc, #56]	; (800d12c <HAL_RTC_SetAlarm_IT+0x26c>)
 800d0f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d0f6:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800d0f8:	4b0c      	ldr	r3, [pc, #48]	; (800d12c <HAL_RTC_SetAlarm_IT+0x26c>)
 800d0fa:	689b      	ldr	r3, [r3, #8]
 800d0fc:	4a0b      	ldr	r2, [pc, #44]	; (800d12c <HAL_RTC_SetAlarm_IT+0x26c>)
 800d0fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d102:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	22ff      	movs	r2, #255	; 0xff
 800d10a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2201      	movs	r2, #1
 800d110:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2200      	movs	r2, #0
 800d116:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d118:	2300      	movs	r3, #0
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3724      	adds	r7, #36	; 0x24
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd90      	pop	{r4, r7, pc}
 800d122:	bf00      	nop
 800d124:	20000000 	.word	0x20000000
 800d128:	10624dd3 	.word	0x10624dd3
 800d12c:	40013c00 	.word	0x40013c00

0800d130 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b082      	sub	sp, #8
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	689b      	ldr	r3, [r3, #8]
 800d13e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d142:	2b00      	cmp	r3, #0
 800d144:	d012      	beq.n	800d16c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	68db      	ldr	r3, [r3, #12]
 800d14c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d150:	2b00      	cmp	r3, #0
 800d152:	d00b      	beq.n	800d16c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f000 f831 	bl	800d1bc <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	68db      	ldr	r3, [r3, #12]
 800d160:	b2da      	uxtb	r2, r3
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800d16a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	689b      	ldr	r3, [r3, #8]
 800d172:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d176:	2b00      	cmp	r3, #0
 800d178:	d012      	beq.n	800d1a0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d184:	2b00      	cmp	r3, #0
 800d186:	d00b      	beq.n	800d1a0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f000 f9ab 	bl	800d4e4 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	68db      	ldr	r3, [r3, #12]
 800d194:	b2da      	uxtb	r2, r3
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800d19e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800d1a0:	4b05      	ldr	r3, [pc, #20]	; (800d1b8 <HAL_RTC_AlarmIRQHandler+0x88>)
 800d1a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d1a6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	775a      	strb	r2, [r3, #29]
}
 800d1ae:	bf00      	nop
 800d1b0:	3708      	adds	r7, #8
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	40013c00 	.word	0x40013c00

0800d1bc <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b083      	sub	sp, #12
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800d1c4:	bf00      	nop
 800d1c6:	370c      	adds	r7, #12
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr

0800d1d0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b084      	sub	sp, #16
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	68da      	ldr	r2, [r3, #12]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d1ea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d1ec:	f7fc f830 	bl	8009250 <HAL_GetTick>
 800d1f0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d1f2:	e009      	b.n	800d208 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d1f4:	f7fc f82c 	bl	8009250 <HAL_GetTick>
 800d1f8:	4602      	mov	r2, r0
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	1ad3      	subs	r3, r2, r3
 800d1fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d202:	d901      	bls.n	800d208 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800d204:	2303      	movs	r3, #3
 800d206:	e007      	b.n	800d218 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	68db      	ldr	r3, [r3, #12]
 800d20e:	f003 0320 	and.w	r3, r3, #32
 800d212:	2b00      	cmp	r3, #0
 800d214:	d0ee      	beq.n	800d1f4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800d216:	2300      	movs	r3, #0
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3710      	adds	r7, #16
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b084      	sub	sp, #16
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d228:	2300      	movs	r3, #0
 800d22a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	68db      	ldr	r3, [r3, #12]
 800d232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d236:	2b00      	cmp	r3, #0
 800d238:	d119      	bne.n	800d26e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f04f 32ff 	mov.w	r2, #4294967295
 800d242:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d244:	f7fc f804 	bl	8009250 <HAL_GetTick>
 800d248:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d24a:	e009      	b.n	800d260 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d24c:	f7fc f800 	bl	8009250 <HAL_GetTick>
 800d250:	4602      	mov	r2, r0
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	1ad3      	subs	r3, r2, r3
 800d256:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d25a:	d901      	bls.n	800d260 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800d25c:	2303      	movs	r3, #3
 800d25e:	e007      	b.n	800d270 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	68db      	ldr	r3, [r3, #12]
 800d266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d0ee      	beq.n	800d24c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800d26e:	2300      	movs	r3, #0
}
 800d270:	4618      	mov	r0, r3
 800d272:	3710      	adds	r7, #16
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d278:	b480      	push	{r7}
 800d27a:	b085      	sub	sp, #20
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	4603      	mov	r3, r0
 800d280:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d282:	2300      	movs	r3, #0
 800d284:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800d286:	e005      	b.n	800d294 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	3301      	adds	r3, #1
 800d28c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800d28e:	79fb      	ldrb	r3, [r7, #7]
 800d290:	3b0a      	subs	r3, #10
 800d292:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800d294:	79fb      	ldrb	r3, [r7, #7]
 800d296:	2b09      	cmp	r3, #9
 800d298:	d8f6      	bhi.n	800d288 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	011b      	lsls	r3, r3, #4
 800d2a0:	b2da      	uxtb	r2, r3
 800d2a2:	79fb      	ldrb	r3, [r7, #7]
 800d2a4:	4313      	orrs	r3, r2
 800d2a6:	b2db      	uxtb	r3, r3
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3714      	adds	r7, #20
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b2:	4770      	bx	lr

0800d2b4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b087      	sub	sp, #28
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	60f8      	str	r0, [r7, #12]
 800d2bc:	60b9      	str	r1, [r7, #8]
 800d2be:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	7f1b      	ldrb	r3, [r3, #28]
 800d2c4:	2b01      	cmp	r3, #1
 800d2c6:	d101      	bne.n	800d2cc <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800d2c8:	2302      	movs	r3, #2
 800d2ca:	e0a6      	b.n	800d41a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2202      	movs	r2, #2
 800d2d6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	22ca      	movs	r2, #202	; 0xca
 800d2de:	625a      	str	r2, [r3, #36]	; 0x24
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	2253      	movs	r2, #83	; 0x53
 800d2e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	689b      	ldr	r3, [r3, #8]
 800d2ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d022      	beq.n	800d33c <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800d2f6:	4b4c      	ldr	r3, [pc, #304]	; (800d428 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	4a4c      	ldr	r2, [pc, #304]	; (800d42c <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800d2fc:	fba2 2303 	umull	r2, r3, r2, r3
 800d300:	0adb      	lsrs	r3, r3, #11
 800d302:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d306:	fb02 f303 	mul.w	r3, r2, r3
 800d30a:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	1e5a      	subs	r2, r3, #1
 800d310:	617a      	str	r2, [r7, #20]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d10b      	bne.n	800d32e <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	22ff      	movs	r2, #255	; 0xff
 800d31c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	2203      	movs	r2, #3
 800d322:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	2200      	movs	r2, #0
 800d328:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d32a:	2303      	movs	r3, #3
 800d32c:	e075      	b.n	800d41a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	f003 0304 	and.w	r3, r3, #4
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d1e7      	bne.n	800d30c <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	689a      	ldr	r2, [r3, #8]
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d34a:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800d34c:	4b36      	ldr	r3, [pc, #216]	; (800d428 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	4a36      	ldr	r2, [pc, #216]	; (800d42c <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800d352:	fba2 2303 	umull	r2, r3, r2, r3
 800d356:	0adb      	lsrs	r3, r3, #11
 800d358:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d35c:	fb02 f303 	mul.w	r3, r2, r3
 800d360:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	1e5a      	subs	r2, r3, #1
 800d366:	617a      	str	r2, [r7, #20]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d10b      	bne.n	800d384 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	22ff      	movs	r2, #255	; 0xff
 800d372:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2203      	movs	r2, #3
 800d378:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2200      	movs	r2, #0
 800d37e:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800d380:	2303      	movs	r3, #3
 800d382:	e04a      	b.n	800d41a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	68db      	ldr	r3, [r3, #12]
 800d38a:	f003 0304 	and.w	r3, r3, #4
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d0e7      	beq.n	800d362 <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	68ba      	ldr	r2, [r7, #8]
 800d398:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	689a      	ldr	r2, [r3, #8]
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f022 0207 	bic.w	r2, r2, #7
 800d3a8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	6899      	ldr	r1, [r3, #8]
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	687a      	ldr	r2, [r7, #4]
 800d3b6:	430a      	orrs	r2, r1
 800d3b8:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800d3ba:	4b1d      	ldr	r3, [pc, #116]	; (800d430 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	4a1c      	ldr	r2, [pc, #112]	; (800d430 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800d3c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d3c4:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800d3c6:	4b1a      	ldr	r3, [pc, #104]	; (800d430 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800d3c8:	689b      	ldr	r3, [r3, #8]
 800d3ca:	4a19      	ldr	r2, [pc, #100]	; (800d430 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800d3cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d3d0:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	68db      	ldr	r3, [r3, #12]
 800d3d8:	b2da      	uxtb	r2, r3
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800d3e2:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	689a      	ldr	r2, [r3, #8]
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d3f2:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	689a      	ldr	r2, [r3, #8]
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d402:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	22ff      	movs	r2, #255	; 0xff
 800d40a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	2201      	movs	r2, #1
 800d410:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2200      	movs	r2, #0
 800d416:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d418:	2300      	movs	r3, #0
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	371c      	adds	r7, #28
 800d41e:	46bd      	mov	sp, r7
 800d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d424:	4770      	bx	lr
 800d426:	bf00      	nop
 800d428:	20000000 	.word	0x20000000
 800d42c:	10624dd3 	.word	0x10624dd3
 800d430:	40013c00 	.word	0x40013c00

0800d434 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b084      	sub	sp, #16
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d43c:	2300      	movs	r3, #0
 800d43e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	7f1b      	ldrb	r3, [r3, #28]
 800d444:	2b01      	cmp	r3, #1
 800d446:	d101      	bne.n	800d44c <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800d448:	2302      	movs	r3, #2
 800d44a:	e047      	b.n	800d4dc <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2201      	movs	r2, #1
 800d450:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2202      	movs	r2, #2
 800d456:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	22ca      	movs	r2, #202	; 0xca
 800d45e:	625a      	str	r2, [r3, #36]	; 0x24
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	2253      	movs	r2, #83	; 0x53
 800d466:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	689a      	ldr	r2, [r3, #8]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d476:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	689a      	ldr	r2, [r3, #8]
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d486:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d488:	f7fb fee2 	bl	8009250 <HAL_GetTick>
 800d48c:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800d48e:	e013      	b.n	800d4b8 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d490:	f7fb fede 	bl	8009250 <HAL_GetTick>
 800d494:	4602      	mov	r2, r0
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	1ad3      	subs	r3, r2, r3
 800d49a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d49e:	d90b      	bls.n	800d4b8 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	22ff      	movs	r2, #255	; 0xff
 800d4a6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2203      	movs	r2, #3
 800d4ac:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800d4b4:	2303      	movs	r3, #3
 800d4b6:	e011      	b.n	800d4dc <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	68db      	ldr	r3, [r3, #12]
 800d4be:	f003 0304 	and.w	r3, r3, #4
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d0e4      	beq.n	800d490 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	22ff      	movs	r2, #255	; 0xff
 800d4cc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d4da:	2300      	movs	r3, #0
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3710      	adds	r7, #16
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b083      	sub	sp, #12
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800d4ec:	bf00      	nop
 800d4ee:	370c      	adds	r7, #12
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr

0800d4f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d101      	bne.n	800d50a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d506:	2301      	movs	r3, #1
 800d508:	e07b      	b.n	800d602 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d108      	bne.n	800d524 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	685b      	ldr	r3, [r3, #4]
 800d516:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d51a:	d009      	beq.n	800d530 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2200      	movs	r2, #0
 800d520:	61da      	str	r2, [r3, #28]
 800d522:	e005      	b.n	800d530 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2200      	movs	r2, #0
 800d528:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2200      	movs	r2, #0
 800d52e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2200      	movs	r2, #0
 800d534:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d106      	bne.n	800d550 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2200      	movs	r2, #0
 800d546:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f7f4 fe16 	bl	800217c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2202      	movs	r2, #2
 800d554:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	681a      	ldr	r2, [r3, #0]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d566:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	689b      	ldr	r3, [r3, #8]
 800d574:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d578:	431a      	orrs	r2, r3
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	68db      	ldr	r3, [r3, #12]
 800d57e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d582:	431a      	orrs	r2, r3
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	691b      	ldr	r3, [r3, #16]
 800d588:	f003 0302 	and.w	r3, r3, #2
 800d58c:	431a      	orrs	r2, r3
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	695b      	ldr	r3, [r3, #20]
 800d592:	f003 0301 	and.w	r3, r3, #1
 800d596:	431a      	orrs	r2, r3
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	699b      	ldr	r3, [r3, #24]
 800d59c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d5a0:	431a      	orrs	r2, r3
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	69db      	ldr	r3, [r3, #28]
 800d5a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d5aa:	431a      	orrs	r2, r3
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6a1b      	ldr	r3, [r3, #32]
 800d5b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5b4:	ea42 0103 	orr.w	r1, r2, r3
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	430a      	orrs	r2, r1
 800d5c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	699b      	ldr	r3, [r3, #24]
 800d5cc:	0c1b      	lsrs	r3, r3, #16
 800d5ce:	f003 0104 	and.w	r1, r3, #4
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5d6:	f003 0210 	and.w	r2, r3, #16
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	430a      	orrs	r2, r1
 800d5e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	69da      	ldr	r2, [r3, #28]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d5f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2201      	movs	r2, #1
 800d5fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d600:	2300      	movs	r3, #0
}
 800d602:	4618      	mov	r0, r3
 800d604:	3708      	adds	r7, #8
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}

0800d60a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d60a:	b580      	push	{r7, lr}
 800d60c:	b088      	sub	sp, #32
 800d60e:	af00      	add	r7, sp, #0
 800d610:	60f8      	str	r0, [r7, #12]
 800d612:	60b9      	str	r1, [r7, #8]
 800d614:	603b      	str	r3, [r7, #0]
 800d616:	4613      	mov	r3, r2
 800d618:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d61a:	2300      	movs	r3, #0
 800d61c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d624:	2b01      	cmp	r3, #1
 800d626:	d101      	bne.n	800d62c <HAL_SPI_Transmit+0x22>
 800d628:	2302      	movs	r3, #2
 800d62a:	e126      	b.n	800d87a <HAL_SPI_Transmit+0x270>
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2201      	movs	r2, #1
 800d630:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d634:	f7fb fe0c 	bl	8009250 <HAL_GetTick>
 800d638:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d63a:	88fb      	ldrh	r3, [r7, #6]
 800d63c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d644:	b2db      	uxtb	r3, r3
 800d646:	2b01      	cmp	r3, #1
 800d648:	d002      	beq.n	800d650 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d64a:	2302      	movs	r3, #2
 800d64c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d64e:	e10b      	b.n	800d868 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d002      	beq.n	800d65c <HAL_SPI_Transmit+0x52>
 800d656:	88fb      	ldrh	r3, [r7, #6]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d102      	bne.n	800d662 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d65c:	2301      	movs	r3, #1
 800d65e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d660:	e102      	b.n	800d868 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	2203      	movs	r2, #3
 800d666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	2200      	movs	r2, #0
 800d66e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	68ba      	ldr	r2, [r7, #8]
 800d674:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	88fa      	ldrh	r2, [r7, #6]
 800d67a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	88fa      	ldrh	r2, [r7, #6]
 800d680:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	2200      	movs	r2, #0
 800d686:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	2200      	movs	r2, #0
 800d68c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2200      	movs	r2, #0
 800d692:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2200      	movs	r2, #0
 800d698:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	2200      	movs	r2, #0
 800d69e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	689b      	ldr	r3, [r3, #8]
 800d6a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d6a8:	d10f      	bne.n	800d6ca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	681a      	ldr	r2, [r3, #0]
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d6b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	681a      	ldr	r2, [r3, #0]
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d6c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6d4:	2b40      	cmp	r3, #64	; 0x40
 800d6d6:	d007      	beq.n	800d6e8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	681a      	ldr	r2, [r3, #0]
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d6e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d6f0:	d14b      	bne.n	800d78a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	685b      	ldr	r3, [r3, #4]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d002      	beq.n	800d700 <HAL_SPI_Transmit+0xf6>
 800d6fa:	8afb      	ldrh	r3, [r7, #22]
 800d6fc:	2b01      	cmp	r3, #1
 800d6fe:	d13e      	bne.n	800d77e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d704:	881a      	ldrh	r2, [r3, #0]
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d710:	1c9a      	adds	r2, r3, #2
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	3b01      	subs	r3, #1
 800d71e:	b29a      	uxth	r2, r3
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d724:	e02b      	b.n	800d77e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	689b      	ldr	r3, [r3, #8]
 800d72c:	f003 0302 	and.w	r3, r3, #2
 800d730:	2b02      	cmp	r3, #2
 800d732:	d112      	bne.n	800d75a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d738:	881a      	ldrh	r2, [r3, #0]
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d744:	1c9a      	adds	r2, r3, #2
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d74e:	b29b      	uxth	r3, r3
 800d750:	3b01      	subs	r3, #1
 800d752:	b29a      	uxth	r2, r3
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	86da      	strh	r2, [r3, #54]	; 0x36
 800d758:	e011      	b.n	800d77e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d75a:	f7fb fd79 	bl	8009250 <HAL_GetTick>
 800d75e:	4602      	mov	r2, r0
 800d760:	69bb      	ldr	r3, [r7, #24]
 800d762:	1ad3      	subs	r3, r2, r3
 800d764:	683a      	ldr	r2, [r7, #0]
 800d766:	429a      	cmp	r2, r3
 800d768:	d803      	bhi.n	800d772 <HAL_SPI_Transmit+0x168>
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d770:	d102      	bne.n	800d778 <HAL_SPI_Transmit+0x16e>
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d102      	bne.n	800d77e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800d778:	2303      	movs	r3, #3
 800d77a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d77c:	e074      	b.n	800d868 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d782:	b29b      	uxth	r3, r3
 800d784:	2b00      	cmp	r3, #0
 800d786:	d1ce      	bne.n	800d726 <HAL_SPI_Transmit+0x11c>
 800d788:	e04c      	b.n	800d824 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d002      	beq.n	800d798 <HAL_SPI_Transmit+0x18e>
 800d792:	8afb      	ldrh	r3, [r7, #22]
 800d794:	2b01      	cmp	r3, #1
 800d796:	d140      	bne.n	800d81a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	330c      	adds	r3, #12
 800d7a2:	7812      	ldrb	r2, [r2, #0]
 800d7a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7aa:	1c5a      	adds	r2, r3, #1
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	3b01      	subs	r3, #1
 800d7b8:	b29a      	uxth	r2, r3
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d7be:	e02c      	b.n	800d81a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	689b      	ldr	r3, [r3, #8]
 800d7c6:	f003 0302 	and.w	r3, r3, #2
 800d7ca:	2b02      	cmp	r3, #2
 800d7cc:	d113      	bne.n	800d7f6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	330c      	adds	r3, #12
 800d7d8:	7812      	ldrb	r2, [r2, #0]
 800d7da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7e0:	1c5a      	adds	r2, r3, #1
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d7ea:	b29b      	uxth	r3, r3
 800d7ec:	3b01      	subs	r3, #1
 800d7ee:	b29a      	uxth	r2, r3
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	86da      	strh	r2, [r3, #54]	; 0x36
 800d7f4:	e011      	b.n	800d81a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d7f6:	f7fb fd2b 	bl	8009250 <HAL_GetTick>
 800d7fa:	4602      	mov	r2, r0
 800d7fc:	69bb      	ldr	r3, [r7, #24]
 800d7fe:	1ad3      	subs	r3, r2, r3
 800d800:	683a      	ldr	r2, [r7, #0]
 800d802:	429a      	cmp	r2, r3
 800d804:	d803      	bhi.n	800d80e <HAL_SPI_Transmit+0x204>
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d80c:	d102      	bne.n	800d814 <HAL_SPI_Transmit+0x20a>
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d102      	bne.n	800d81a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800d814:	2303      	movs	r3, #3
 800d816:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d818:	e026      	b.n	800d868 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d81e:	b29b      	uxth	r3, r3
 800d820:	2b00      	cmp	r3, #0
 800d822:	d1cd      	bne.n	800d7c0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d824:	69ba      	ldr	r2, [r7, #24]
 800d826:	6839      	ldr	r1, [r7, #0]
 800d828:	68f8      	ldr	r0, [r7, #12]
 800d82a:	f000 fbcb 	bl	800dfc4 <SPI_EndRxTxTransaction>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d002      	beq.n	800d83a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	2220      	movs	r2, #32
 800d838:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	689b      	ldr	r3, [r3, #8]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d10a      	bne.n	800d858 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d842:	2300      	movs	r3, #0
 800d844:	613b      	str	r3, [r7, #16]
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	68db      	ldr	r3, [r3, #12]
 800d84c:	613b      	str	r3, [r7, #16]
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	689b      	ldr	r3, [r3, #8]
 800d854:	613b      	str	r3, [r7, #16]
 800d856:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d002      	beq.n	800d866 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800d860:	2301      	movs	r3, #1
 800d862:	77fb      	strb	r3, [r7, #31]
 800d864:	e000      	b.n	800d868 <HAL_SPI_Transmit+0x25e>
  }

error:
 800d866:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	2201      	movs	r2, #1
 800d86c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	2200      	movs	r2, #0
 800d874:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d878:	7ffb      	ldrb	r3, [r7, #31]
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3720      	adds	r7, #32
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}

0800d882 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d882:	b580      	push	{r7, lr}
 800d884:	b088      	sub	sp, #32
 800d886:	af02      	add	r7, sp, #8
 800d888:	60f8      	str	r0, [r7, #12]
 800d88a:	60b9      	str	r1, [r7, #8]
 800d88c:	603b      	str	r3, [r7, #0]
 800d88e:	4613      	mov	r3, r2
 800d890:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d892:	2300      	movs	r3, #0
 800d894:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d89e:	d112      	bne.n	800d8c6 <HAL_SPI_Receive+0x44>
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	689b      	ldr	r3, [r3, #8]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d10e      	bne.n	800d8c6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2204      	movs	r2, #4
 800d8ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d8b0:	88fa      	ldrh	r2, [r7, #6]
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	9300      	str	r3, [sp, #0]
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	68ba      	ldr	r2, [r7, #8]
 800d8ba:	68b9      	ldr	r1, [r7, #8]
 800d8bc:	68f8      	ldr	r0, [r7, #12]
 800d8be:	f000 f8f1 	bl	800daa4 <HAL_SPI_TransmitReceive>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	e0ea      	b.n	800da9c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d8cc:	2b01      	cmp	r3, #1
 800d8ce:	d101      	bne.n	800d8d4 <HAL_SPI_Receive+0x52>
 800d8d0:	2302      	movs	r3, #2
 800d8d2:	e0e3      	b.n	800da9c <HAL_SPI_Receive+0x21a>
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d8dc:	f7fb fcb8 	bl	8009250 <HAL_GetTick>
 800d8e0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d8e8:	b2db      	uxtb	r3, r3
 800d8ea:	2b01      	cmp	r3, #1
 800d8ec:	d002      	beq.n	800d8f4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800d8ee:	2302      	movs	r3, #2
 800d8f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d8f2:	e0ca      	b.n	800da8a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d002      	beq.n	800d900 <HAL_SPI_Receive+0x7e>
 800d8fa:	88fb      	ldrh	r3, [r7, #6]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d102      	bne.n	800d906 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800d900:	2301      	movs	r3, #1
 800d902:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d904:	e0c1      	b.n	800da8a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2204      	movs	r2, #4
 800d90a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	2200      	movs	r2, #0
 800d912:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	68ba      	ldr	r2, [r7, #8]
 800d918:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	88fa      	ldrh	r2, [r7, #6]
 800d91e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	88fa      	ldrh	r2, [r7, #6]
 800d924:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	2200      	movs	r2, #0
 800d92a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	2200      	movs	r2, #0
 800d930:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	2200      	movs	r2, #0
 800d936:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2200      	movs	r2, #0
 800d93c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	2200      	movs	r2, #0
 800d942:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	689b      	ldr	r3, [r3, #8]
 800d948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d94c:	d10f      	bne.n	800d96e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d95c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	681a      	ldr	r2, [r3, #0]
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d96c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d978:	2b40      	cmp	r3, #64	; 0x40
 800d97a:	d007      	beq.n	800d98c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	681a      	ldr	r2, [r3, #0]
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d98a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	68db      	ldr	r3, [r3, #12]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d162      	bne.n	800da5a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800d994:	e02e      	b.n	800d9f4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	689b      	ldr	r3, [r3, #8]
 800d99c:	f003 0301 	and.w	r3, r3, #1
 800d9a0:	2b01      	cmp	r3, #1
 800d9a2:	d115      	bne.n	800d9d0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	f103 020c 	add.w	r2, r3, #12
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9b0:	7812      	ldrb	r2, [r2, #0]
 800d9b2:	b2d2      	uxtb	r2, r2
 800d9b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ba:	1c5a      	adds	r2, r3, #1
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d9c4:	b29b      	uxth	r3, r3
 800d9c6:	3b01      	subs	r3, #1
 800d9c8:	b29a      	uxth	r2, r3
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d9ce:	e011      	b.n	800d9f4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d9d0:	f7fb fc3e 	bl	8009250 <HAL_GetTick>
 800d9d4:	4602      	mov	r2, r0
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	1ad3      	subs	r3, r2, r3
 800d9da:	683a      	ldr	r2, [r7, #0]
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d803      	bhi.n	800d9e8 <HAL_SPI_Receive+0x166>
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9e6:	d102      	bne.n	800d9ee <HAL_SPI_Receive+0x16c>
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d102      	bne.n	800d9f4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800d9ee:	2303      	movs	r3, #3
 800d9f0:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d9f2:	e04a      	b.n	800da8a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d9f8:	b29b      	uxth	r3, r3
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d1cb      	bne.n	800d996 <HAL_SPI_Receive+0x114>
 800d9fe:	e031      	b.n	800da64 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	689b      	ldr	r3, [r3, #8]
 800da06:	f003 0301 	and.w	r3, r3, #1
 800da0a:	2b01      	cmp	r3, #1
 800da0c:	d113      	bne.n	800da36 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	68da      	ldr	r2, [r3, #12]
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da18:	b292      	uxth	r2, r2
 800da1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da20:	1c9a      	adds	r2, r3, #2
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da2a:	b29b      	uxth	r3, r3
 800da2c:	3b01      	subs	r3, #1
 800da2e:	b29a      	uxth	r2, r3
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	87da      	strh	r2, [r3, #62]	; 0x3e
 800da34:	e011      	b.n	800da5a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da36:	f7fb fc0b 	bl	8009250 <HAL_GetTick>
 800da3a:	4602      	mov	r2, r0
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	1ad3      	subs	r3, r2, r3
 800da40:	683a      	ldr	r2, [r7, #0]
 800da42:	429a      	cmp	r2, r3
 800da44:	d803      	bhi.n	800da4e <HAL_SPI_Receive+0x1cc>
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da4c:	d102      	bne.n	800da54 <HAL_SPI_Receive+0x1d2>
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d102      	bne.n	800da5a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800da54:	2303      	movs	r3, #3
 800da56:	75fb      	strb	r3, [r7, #23]
          goto error;
 800da58:	e017      	b.n	800da8a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da5e:	b29b      	uxth	r3, r3
 800da60:	2b00      	cmp	r3, #0
 800da62:	d1cd      	bne.n	800da00 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800da64:	693a      	ldr	r2, [r7, #16]
 800da66:	6839      	ldr	r1, [r7, #0]
 800da68:	68f8      	ldr	r0, [r7, #12]
 800da6a:	f000 fa45 	bl	800def8 <SPI_EndRxTransaction>
 800da6e:	4603      	mov	r3, r0
 800da70:	2b00      	cmp	r3, #0
 800da72:	d002      	beq.n	800da7a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	2220      	movs	r2, #32
 800da78:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d002      	beq.n	800da88 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800da82:	2301      	movs	r3, #1
 800da84:	75fb      	strb	r3, [r7, #23]
 800da86:	e000      	b.n	800da8a <HAL_SPI_Receive+0x208>
  }

error :
 800da88:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	2201      	movs	r2, #1
 800da8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	2200      	movs	r2, #0
 800da96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800da9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3718      	adds	r7, #24
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b08c      	sub	sp, #48	; 0x30
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	607a      	str	r2, [r7, #4]
 800dab0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800dab2:	2301      	movs	r3, #1
 800dab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800dab6:	2300      	movs	r3, #0
 800dab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dac2:	2b01      	cmp	r3, #1
 800dac4:	d101      	bne.n	800daca <HAL_SPI_TransmitReceive+0x26>
 800dac6:	2302      	movs	r3, #2
 800dac8:	e18a      	b.n	800dde0 <HAL_SPI_TransmitReceive+0x33c>
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	2201      	movs	r2, #1
 800dace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dad2:	f7fb fbbd 	bl	8009250 <HAL_GetTick>
 800dad6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	685b      	ldr	r3, [r3, #4]
 800dae6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800dae8:	887b      	ldrh	r3, [r7, #2]
 800daea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800daec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	d00f      	beq.n	800db14 <HAL_SPI_TransmitReceive+0x70>
 800daf4:	69fb      	ldr	r3, [r7, #28]
 800daf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dafa:	d107      	bne.n	800db0c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	689b      	ldr	r3, [r3, #8]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d103      	bne.n	800db0c <HAL_SPI_TransmitReceive+0x68>
 800db04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800db08:	2b04      	cmp	r3, #4
 800db0a:	d003      	beq.n	800db14 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800db0c:	2302      	movs	r3, #2
 800db0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800db12:	e15b      	b.n	800ddcc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d005      	beq.n	800db26 <HAL_SPI_TransmitReceive+0x82>
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d002      	beq.n	800db26 <HAL_SPI_TransmitReceive+0x82>
 800db20:	887b      	ldrh	r3, [r7, #2]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d103      	bne.n	800db2e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800db26:	2301      	movs	r3, #1
 800db28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800db2c:	e14e      	b.n	800ddcc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800db34:	b2db      	uxtb	r3, r3
 800db36:	2b04      	cmp	r3, #4
 800db38:	d003      	beq.n	800db42 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	2205      	movs	r2, #5
 800db3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	2200      	movs	r2, #0
 800db46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	687a      	ldr	r2, [r7, #4]
 800db4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	887a      	ldrh	r2, [r7, #2]
 800db52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	887a      	ldrh	r2, [r7, #2]
 800db58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	68ba      	ldr	r2, [r7, #8]
 800db5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	887a      	ldrh	r2, [r7, #2]
 800db64:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	887a      	ldrh	r2, [r7, #2]
 800db6a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	2200      	movs	r2, #0
 800db70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2200      	movs	r2, #0
 800db76:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db82:	2b40      	cmp	r3, #64	; 0x40
 800db84:	d007      	beq.n	800db96 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800db94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	68db      	ldr	r3, [r3, #12]
 800db9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db9e:	d178      	bne.n	800dc92 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d002      	beq.n	800dbae <HAL_SPI_TransmitReceive+0x10a>
 800dba8:	8b7b      	ldrh	r3, [r7, #26]
 800dbaa:	2b01      	cmp	r3, #1
 800dbac:	d166      	bne.n	800dc7c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbb2:	881a      	ldrh	r2, [r3, #0]
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbbe:	1c9a      	adds	r2, r3, #2
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dbc8:	b29b      	uxth	r3, r3
 800dbca:	3b01      	subs	r3, #1
 800dbcc:	b29a      	uxth	r2, r3
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dbd2:	e053      	b.n	800dc7c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	689b      	ldr	r3, [r3, #8]
 800dbda:	f003 0302 	and.w	r3, r3, #2
 800dbde:	2b02      	cmp	r3, #2
 800dbe0:	d11b      	bne.n	800dc1a <HAL_SPI_TransmitReceive+0x176>
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dbe6:	b29b      	uxth	r3, r3
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d016      	beq.n	800dc1a <HAL_SPI_TransmitReceive+0x176>
 800dbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbee:	2b01      	cmp	r3, #1
 800dbf0:	d113      	bne.n	800dc1a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbf6:	881a      	ldrh	r2, [r3, #0]
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc02:	1c9a      	adds	r2, r3, #2
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc0c:	b29b      	uxth	r3, r3
 800dc0e:	3b01      	subs	r3, #1
 800dc10:	b29a      	uxth	r2, r3
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dc16:	2300      	movs	r3, #0
 800dc18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	689b      	ldr	r3, [r3, #8]
 800dc20:	f003 0301 	and.w	r3, r3, #1
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d119      	bne.n	800dc5c <HAL_SPI_TransmitReceive+0x1b8>
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc2c:	b29b      	uxth	r3, r3
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d014      	beq.n	800dc5c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	68da      	ldr	r2, [r3, #12]
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc3c:	b292      	uxth	r2, r2
 800dc3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc44:	1c9a      	adds	r2, r3, #2
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc4e:	b29b      	uxth	r3, r3
 800dc50:	3b01      	subs	r3, #1
 800dc52:	b29a      	uxth	r2, r3
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dc58:	2301      	movs	r3, #1
 800dc5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800dc5c:	f7fb faf8 	bl	8009250 <HAL_GetTick>
 800dc60:	4602      	mov	r2, r0
 800dc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc64:	1ad3      	subs	r3, r2, r3
 800dc66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	d807      	bhi.n	800dc7c <HAL_SPI_TransmitReceive+0x1d8>
 800dc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc72:	d003      	beq.n	800dc7c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800dc74:	2303      	movs	r3, #3
 800dc76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800dc7a:	e0a7      	b.n	800ddcc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d1a6      	bne.n	800dbd4 <HAL_SPI_TransmitReceive+0x130>
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc8a:	b29b      	uxth	r3, r3
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d1a1      	bne.n	800dbd4 <HAL_SPI_TransmitReceive+0x130>
 800dc90:	e07c      	b.n	800dd8c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	685b      	ldr	r3, [r3, #4]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d002      	beq.n	800dca0 <HAL_SPI_TransmitReceive+0x1fc>
 800dc9a:	8b7b      	ldrh	r3, [r7, #26]
 800dc9c:	2b01      	cmp	r3, #1
 800dc9e:	d16b      	bne.n	800dd78 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	330c      	adds	r3, #12
 800dcaa:	7812      	ldrb	r2, [r2, #0]
 800dcac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcb2:	1c5a      	adds	r2, r3, #1
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dcbc:	b29b      	uxth	r3, r3
 800dcbe:	3b01      	subs	r3, #1
 800dcc0:	b29a      	uxth	r2, r3
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dcc6:	e057      	b.n	800dd78 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	689b      	ldr	r3, [r3, #8]
 800dcce:	f003 0302 	and.w	r3, r3, #2
 800dcd2:	2b02      	cmp	r3, #2
 800dcd4:	d11c      	bne.n	800dd10 <HAL_SPI_TransmitReceive+0x26c>
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d017      	beq.n	800dd10 <HAL_SPI_TransmitReceive+0x26c>
 800dce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce2:	2b01      	cmp	r3, #1
 800dce4:	d114      	bne.n	800dd10 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	330c      	adds	r3, #12
 800dcf0:	7812      	ldrb	r2, [r2, #0]
 800dcf2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcf8:	1c5a      	adds	r2, r3, #1
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd02:	b29b      	uxth	r3, r3
 800dd04:	3b01      	subs	r3, #1
 800dd06:	b29a      	uxth	r2, r3
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	689b      	ldr	r3, [r3, #8]
 800dd16:	f003 0301 	and.w	r3, r3, #1
 800dd1a:	2b01      	cmp	r3, #1
 800dd1c:	d119      	bne.n	800dd52 <HAL_SPI_TransmitReceive+0x2ae>
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d014      	beq.n	800dd52 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	68da      	ldr	r2, [r3, #12]
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd32:	b2d2      	uxtb	r2, r2
 800dd34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd3a:	1c5a      	adds	r2, r3, #1
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd44:	b29b      	uxth	r3, r3
 800dd46:	3b01      	subs	r3, #1
 800dd48:	b29a      	uxth	r2, r3
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dd4e:	2301      	movs	r3, #1
 800dd50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800dd52:	f7fb fa7d 	bl	8009250 <HAL_GetTick>
 800dd56:	4602      	mov	r2, r0
 800dd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd5a:	1ad3      	subs	r3, r2, r3
 800dd5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	d803      	bhi.n	800dd6a <HAL_SPI_TransmitReceive+0x2c6>
 800dd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd68:	d102      	bne.n	800dd70 <HAL_SPI_TransmitReceive+0x2cc>
 800dd6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d103      	bne.n	800dd78 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800dd70:	2303      	movs	r3, #3
 800dd72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800dd76:	e029      	b.n	800ddcc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d1a2      	bne.n	800dcc8 <HAL_SPI_TransmitReceive+0x224>
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd86:	b29b      	uxth	r3, r3
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d19d      	bne.n	800dcc8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dd8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dd90:	68f8      	ldr	r0, [r7, #12]
 800dd92:	f000 f917 	bl	800dfc4 <SPI_EndRxTxTransaction>
 800dd96:	4603      	mov	r3, r0
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d006      	beq.n	800ddaa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	2220      	movs	r2, #32
 800dda6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800dda8:	e010      	b.n	800ddcc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	689b      	ldr	r3, [r3, #8]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d10b      	bne.n	800ddca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	617b      	str	r3, [r7, #20]
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	68db      	ldr	r3, [r3, #12]
 800ddbc:	617b      	str	r3, [r7, #20]
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	689b      	ldr	r3, [r3, #8]
 800ddc4:	617b      	str	r3, [r7, #20]
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	e000      	b.n	800ddcc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ddca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	2201      	movs	r2, #1
 800ddd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800dddc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3730      	adds	r7, #48	; 0x30
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}

0800dde8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b088      	sub	sp, #32
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	60f8      	str	r0, [r7, #12]
 800ddf0:	60b9      	str	r1, [r7, #8]
 800ddf2:	603b      	str	r3, [r7, #0]
 800ddf4:	4613      	mov	r3, r2
 800ddf6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ddf8:	f7fb fa2a 	bl	8009250 <HAL_GetTick>
 800ddfc:	4602      	mov	r2, r0
 800ddfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de00:	1a9b      	subs	r3, r3, r2
 800de02:	683a      	ldr	r2, [r7, #0]
 800de04:	4413      	add	r3, r2
 800de06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800de08:	f7fb fa22 	bl	8009250 <HAL_GetTick>
 800de0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800de0e:	4b39      	ldr	r3, [pc, #228]	; (800def4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	015b      	lsls	r3, r3, #5
 800de14:	0d1b      	lsrs	r3, r3, #20
 800de16:	69fa      	ldr	r2, [r7, #28]
 800de18:	fb02 f303 	mul.w	r3, r2, r3
 800de1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800de1e:	e054      	b.n	800deca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de26:	d050      	beq.n	800deca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800de28:	f7fb fa12 	bl	8009250 <HAL_GetTick>
 800de2c:	4602      	mov	r2, r0
 800de2e:	69bb      	ldr	r3, [r7, #24]
 800de30:	1ad3      	subs	r3, r2, r3
 800de32:	69fa      	ldr	r2, [r7, #28]
 800de34:	429a      	cmp	r2, r3
 800de36:	d902      	bls.n	800de3e <SPI_WaitFlagStateUntilTimeout+0x56>
 800de38:	69fb      	ldr	r3, [r7, #28]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d13d      	bne.n	800deba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	685a      	ldr	r2, [r3, #4]
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800de4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	685b      	ldr	r3, [r3, #4]
 800de52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800de56:	d111      	bne.n	800de7c <SPI_WaitFlagStateUntilTimeout+0x94>
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	689b      	ldr	r3, [r3, #8]
 800de5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de60:	d004      	beq.n	800de6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	689b      	ldr	r3, [r3, #8]
 800de66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de6a:	d107      	bne.n	800de7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	681a      	ldr	r2, [r3, #0]
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de84:	d10f      	bne.n	800dea6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	681a      	ldr	r2, [r3, #0]
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800de94:	601a      	str	r2, [r3, #0]
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	681a      	ldr	r2, [r3, #0]
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dea4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2201      	movs	r2, #1
 800deaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2200      	movs	r2, #0
 800deb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800deb6:	2303      	movs	r3, #3
 800deb8:	e017      	b.n	800deea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d101      	bne.n	800dec4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800dec0:	2300      	movs	r3, #0
 800dec2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	3b01      	subs	r3, #1
 800dec8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	689a      	ldr	r2, [r3, #8]
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	4013      	ands	r3, r2
 800ded4:	68ba      	ldr	r2, [r7, #8]
 800ded6:	429a      	cmp	r2, r3
 800ded8:	bf0c      	ite	eq
 800deda:	2301      	moveq	r3, #1
 800dedc:	2300      	movne	r3, #0
 800dede:	b2db      	uxtb	r3, r3
 800dee0:	461a      	mov	r2, r3
 800dee2:	79fb      	ldrb	r3, [r7, #7]
 800dee4:	429a      	cmp	r2, r3
 800dee6:	d19b      	bne.n	800de20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800dee8:	2300      	movs	r3, #0
}
 800deea:	4618      	mov	r0, r3
 800deec:	3720      	adds	r7, #32
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}
 800def2:	bf00      	nop
 800def4:	20000000 	.word	0x20000000

0800def8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b086      	sub	sp, #24
 800defc:	af02      	add	r7, sp, #8
 800defe:	60f8      	str	r0, [r7, #12]
 800df00:	60b9      	str	r1, [r7, #8]
 800df02:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	685b      	ldr	r3, [r3, #4]
 800df08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800df0c:	d111      	bne.n	800df32 <SPI_EndRxTransaction+0x3a>
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	689b      	ldr	r3, [r3, #8]
 800df12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df16:	d004      	beq.n	800df22 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	689b      	ldr	r3, [r3, #8]
 800df1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df20:	d107      	bne.n	800df32 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	681a      	ldr	r2, [r3, #0]
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df30:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	685b      	ldr	r3, [r3, #4]
 800df36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800df3a:	d12a      	bne.n	800df92 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	689b      	ldr	r3, [r3, #8]
 800df40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df44:	d012      	beq.n	800df6c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	9300      	str	r3, [sp, #0]
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	2200      	movs	r2, #0
 800df4e:	2180      	movs	r1, #128	; 0x80
 800df50:	68f8      	ldr	r0, [r7, #12]
 800df52:	f7ff ff49 	bl	800dde8 <SPI_WaitFlagStateUntilTimeout>
 800df56:	4603      	mov	r3, r0
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d02d      	beq.n	800dfb8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df60:	f043 0220 	orr.w	r2, r3, #32
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800df68:	2303      	movs	r3, #3
 800df6a:	e026      	b.n	800dfba <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	9300      	str	r3, [sp, #0]
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	2200      	movs	r2, #0
 800df74:	2101      	movs	r1, #1
 800df76:	68f8      	ldr	r0, [r7, #12]
 800df78:	f7ff ff36 	bl	800dde8 <SPI_WaitFlagStateUntilTimeout>
 800df7c:	4603      	mov	r3, r0
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d01a      	beq.n	800dfb8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df86:	f043 0220 	orr.w	r2, r3, #32
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800df8e:	2303      	movs	r3, #3
 800df90:	e013      	b.n	800dfba <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	9300      	str	r3, [sp, #0]
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	2200      	movs	r2, #0
 800df9a:	2101      	movs	r1, #1
 800df9c:	68f8      	ldr	r0, [r7, #12]
 800df9e:	f7ff ff23 	bl	800dde8 <SPI_WaitFlagStateUntilTimeout>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d007      	beq.n	800dfb8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfac:	f043 0220 	orr.w	r2, r3, #32
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800dfb4:	2303      	movs	r3, #3
 800dfb6:	e000      	b.n	800dfba <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800dfb8:	2300      	movs	r3, #0
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3710      	adds	r7, #16
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
	...

0800dfc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b088      	sub	sp, #32
 800dfc8:	af02      	add	r7, sp, #8
 800dfca:	60f8      	str	r0, [r7, #12]
 800dfcc:	60b9      	str	r1, [r7, #8]
 800dfce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800dfd0:	4b1b      	ldr	r3, [pc, #108]	; (800e040 <SPI_EndRxTxTransaction+0x7c>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	4a1b      	ldr	r2, [pc, #108]	; (800e044 <SPI_EndRxTxTransaction+0x80>)
 800dfd6:	fba2 2303 	umull	r2, r3, r2, r3
 800dfda:	0d5b      	lsrs	r3, r3, #21
 800dfdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dfe0:	fb02 f303 	mul.w	r3, r2, r3
 800dfe4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	685b      	ldr	r3, [r3, #4]
 800dfea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dfee:	d112      	bne.n	800e016 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	9300      	str	r3, [sp, #0]
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	2200      	movs	r2, #0
 800dff8:	2180      	movs	r1, #128	; 0x80
 800dffa:	68f8      	ldr	r0, [r7, #12]
 800dffc:	f7ff fef4 	bl	800dde8 <SPI_WaitFlagStateUntilTimeout>
 800e000:	4603      	mov	r3, r0
 800e002:	2b00      	cmp	r3, #0
 800e004:	d016      	beq.n	800e034 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e00a:	f043 0220 	orr.w	r2, r3, #32
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e012:	2303      	movs	r3, #3
 800e014:	e00f      	b.n	800e036 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d00a      	beq.n	800e032 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	3b01      	subs	r3, #1
 800e020:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	689b      	ldr	r3, [r3, #8]
 800e028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e02c:	2b80      	cmp	r3, #128	; 0x80
 800e02e:	d0f2      	beq.n	800e016 <SPI_EndRxTxTransaction+0x52>
 800e030:	e000      	b.n	800e034 <SPI_EndRxTxTransaction+0x70>
        break;
 800e032:	bf00      	nop
  }

  return HAL_OK;
 800e034:	2300      	movs	r3, #0
}
 800e036:	4618      	mov	r0, r3
 800e038:	3718      	adds	r7, #24
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}
 800e03e:	bf00      	nop
 800e040:	20000000 	.word	0x20000000
 800e044:	165e9f81 	.word	0x165e9f81

0800e048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b082      	sub	sp, #8
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d101      	bne.n	800e05a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e056:	2301      	movs	r3, #1
 800e058:	e041      	b.n	800e0de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e060:	b2db      	uxtb	r3, r3
 800e062:	2b00      	cmp	r3, #0
 800e064:	d106      	bne.n	800e074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2200      	movs	r2, #0
 800e06a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f7f4 fa84 	bl	800257c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2202      	movs	r2, #2
 800e078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681a      	ldr	r2, [r3, #0]
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	3304      	adds	r3, #4
 800e084:	4619      	mov	r1, r3
 800e086:	4610      	mov	r0, r2
 800e088:	f000 fcea 	bl	800ea60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2201      	movs	r2, #1
 800e090:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2201      	movs	r2, #1
 800e098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2201      	movs	r2, #1
 800e0a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2201      	movs	r2, #1
 800e0a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2201      	movs	r2, #1
 800e0c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2201      	movs	r2, #1
 800e0c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2201      	movs	r2, #1
 800e0d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2201      	movs	r2, #1
 800e0d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e0dc:	2300      	movs	r3, #0
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3708      	adds	r7, #8
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}
	...

0800e0e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b085      	sub	sp, #20
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0f6:	b2db      	uxtb	r3, r3
 800e0f8:	2b01      	cmp	r3, #1
 800e0fa:	d001      	beq.n	800e100 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	e04e      	b.n	800e19e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2202      	movs	r2, #2
 800e104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	68da      	ldr	r2, [r3, #12]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f042 0201 	orr.w	r2, r2, #1
 800e116:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	4a23      	ldr	r2, [pc, #140]	; (800e1ac <HAL_TIM_Base_Start_IT+0xc4>)
 800e11e:	4293      	cmp	r3, r2
 800e120:	d022      	beq.n	800e168 <HAL_TIM_Base_Start_IT+0x80>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e12a:	d01d      	beq.n	800e168 <HAL_TIM_Base_Start_IT+0x80>
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4a1f      	ldr	r2, [pc, #124]	; (800e1b0 <HAL_TIM_Base_Start_IT+0xc8>)
 800e132:	4293      	cmp	r3, r2
 800e134:	d018      	beq.n	800e168 <HAL_TIM_Base_Start_IT+0x80>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	4a1e      	ldr	r2, [pc, #120]	; (800e1b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800e13c:	4293      	cmp	r3, r2
 800e13e:	d013      	beq.n	800e168 <HAL_TIM_Base_Start_IT+0x80>
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	4a1c      	ldr	r2, [pc, #112]	; (800e1b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800e146:	4293      	cmp	r3, r2
 800e148:	d00e      	beq.n	800e168 <HAL_TIM_Base_Start_IT+0x80>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	4a1b      	ldr	r2, [pc, #108]	; (800e1bc <HAL_TIM_Base_Start_IT+0xd4>)
 800e150:	4293      	cmp	r3, r2
 800e152:	d009      	beq.n	800e168 <HAL_TIM_Base_Start_IT+0x80>
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	4a19      	ldr	r2, [pc, #100]	; (800e1c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d004      	beq.n	800e168 <HAL_TIM_Base_Start_IT+0x80>
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	4a18      	ldr	r2, [pc, #96]	; (800e1c4 <HAL_TIM_Base_Start_IT+0xdc>)
 800e164:	4293      	cmp	r3, r2
 800e166:	d111      	bne.n	800e18c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	689b      	ldr	r3, [r3, #8]
 800e16e:	f003 0307 	and.w	r3, r3, #7
 800e172:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2b06      	cmp	r3, #6
 800e178:	d010      	beq.n	800e19c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	681a      	ldr	r2, [r3, #0]
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	f042 0201 	orr.w	r2, r2, #1
 800e188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e18a:	e007      	b.n	800e19c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	681a      	ldr	r2, [r3, #0]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	f042 0201 	orr.w	r2, r2, #1
 800e19a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e19c:	2300      	movs	r3, #0
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3714      	adds	r7, #20
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a8:	4770      	bx	lr
 800e1aa:	bf00      	nop
 800e1ac:	40010000 	.word	0x40010000
 800e1b0:	40000400 	.word	0x40000400
 800e1b4:	40000800 	.word	0x40000800
 800e1b8:	40000c00 	.word	0x40000c00
 800e1bc:	40010400 	.word	0x40010400
 800e1c0:	40014000 	.word	0x40014000
 800e1c4:	40001800 	.word	0x40001800

0800e1c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d101      	bne.n	800e1da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	e041      	b.n	800e25e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1e0:	b2db      	uxtb	r3, r3
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d106      	bne.n	800e1f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f000 f839 	bl	800e266 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2202      	movs	r2, #2
 800e1f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681a      	ldr	r2, [r3, #0]
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	3304      	adds	r3, #4
 800e204:	4619      	mov	r1, r3
 800e206:	4610      	mov	r0, r2
 800e208:	f000 fc2a 	bl	800ea60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2201      	movs	r2, #1
 800e210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2201      	movs	r2, #1
 800e218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2201      	movs	r2, #1
 800e220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2201      	movs	r2, #1
 800e228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2201      	movs	r2, #1
 800e230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2201      	movs	r2, #1
 800e238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2201      	movs	r2, #1
 800e240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2201      	movs	r2, #1
 800e248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2201      	movs	r2, #1
 800e250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2201      	movs	r2, #1
 800e258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e25c:	2300      	movs	r3, #0
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3708      	adds	r7, #8
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}

0800e266 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e266:	b480      	push	{r7}
 800e268:	b083      	sub	sp, #12
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e26e:	bf00      	nop
 800e270:	370c      	adds	r7, #12
 800e272:	46bd      	mov	sp, r7
 800e274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e278:	4770      	bx	lr
	...

0800e27c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d109      	bne.n	800e2a0 <HAL_TIM_PWM_Start+0x24>
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e292:	b2db      	uxtb	r3, r3
 800e294:	2b01      	cmp	r3, #1
 800e296:	bf14      	ite	ne
 800e298:	2301      	movne	r3, #1
 800e29a:	2300      	moveq	r3, #0
 800e29c:	b2db      	uxtb	r3, r3
 800e29e:	e022      	b.n	800e2e6 <HAL_TIM_PWM_Start+0x6a>
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	2b04      	cmp	r3, #4
 800e2a4:	d109      	bne.n	800e2ba <HAL_TIM_PWM_Start+0x3e>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e2ac:	b2db      	uxtb	r3, r3
 800e2ae:	2b01      	cmp	r3, #1
 800e2b0:	bf14      	ite	ne
 800e2b2:	2301      	movne	r3, #1
 800e2b4:	2300      	moveq	r3, #0
 800e2b6:	b2db      	uxtb	r3, r3
 800e2b8:	e015      	b.n	800e2e6 <HAL_TIM_PWM_Start+0x6a>
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	2b08      	cmp	r3, #8
 800e2be:	d109      	bne.n	800e2d4 <HAL_TIM_PWM_Start+0x58>
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e2c6:	b2db      	uxtb	r3, r3
 800e2c8:	2b01      	cmp	r3, #1
 800e2ca:	bf14      	ite	ne
 800e2cc:	2301      	movne	r3, #1
 800e2ce:	2300      	moveq	r3, #0
 800e2d0:	b2db      	uxtb	r3, r3
 800e2d2:	e008      	b.n	800e2e6 <HAL_TIM_PWM_Start+0x6a>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e2da:	b2db      	uxtb	r3, r3
 800e2dc:	2b01      	cmp	r3, #1
 800e2de:	bf14      	ite	ne
 800e2e0:	2301      	movne	r3, #1
 800e2e2:	2300      	moveq	r3, #0
 800e2e4:	b2db      	uxtb	r3, r3
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d001      	beq.n	800e2ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	e07c      	b.n	800e3e8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d104      	bne.n	800e2fe <HAL_TIM_PWM_Start+0x82>
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2202      	movs	r2, #2
 800e2f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e2fc:	e013      	b.n	800e326 <HAL_TIM_PWM_Start+0xaa>
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	2b04      	cmp	r3, #4
 800e302:	d104      	bne.n	800e30e <HAL_TIM_PWM_Start+0x92>
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2202      	movs	r2, #2
 800e308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e30c:	e00b      	b.n	800e326 <HAL_TIM_PWM_Start+0xaa>
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	2b08      	cmp	r3, #8
 800e312:	d104      	bne.n	800e31e <HAL_TIM_PWM_Start+0xa2>
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2202      	movs	r2, #2
 800e318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e31c:	e003      	b.n	800e326 <HAL_TIM_PWM_Start+0xaa>
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2202      	movs	r2, #2
 800e322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	2201      	movs	r2, #1
 800e32c:	6839      	ldr	r1, [r7, #0]
 800e32e:	4618      	mov	r0, r3
 800e330:	f000 fe80 	bl	800f034 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	4a2d      	ldr	r2, [pc, #180]	; (800e3f0 <HAL_TIM_PWM_Start+0x174>)
 800e33a:	4293      	cmp	r3, r2
 800e33c:	d004      	beq.n	800e348 <HAL_TIM_PWM_Start+0xcc>
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	4a2c      	ldr	r2, [pc, #176]	; (800e3f4 <HAL_TIM_PWM_Start+0x178>)
 800e344:	4293      	cmp	r3, r2
 800e346:	d101      	bne.n	800e34c <HAL_TIM_PWM_Start+0xd0>
 800e348:	2301      	movs	r3, #1
 800e34a:	e000      	b.n	800e34e <HAL_TIM_PWM_Start+0xd2>
 800e34c:	2300      	movs	r3, #0
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d007      	beq.n	800e362 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e360:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	4a22      	ldr	r2, [pc, #136]	; (800e3f0 <HAL_TIM_PWM_Start+0x174>)
 800e368:	4293      	cmp	r3, r2
 800e36a:	d022      	beq.n	800e3b2 <HAL_TIM_PWM_Start+0x136>
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e374:	d01d      	beq.n	800e3b2 <HAL_TIM_PWM_Start+0x136>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4a1f      	ldr	r2, [pc, #124]	; (800e3f8 <HAL_TIM_PWM_Start+0x17c>)
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d018      	beq.n	800e3b2 <HAL_TIM_PWM_Start+0x136>
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	4a1d      	ldr	r2, [pc, #116]	; (800e3fc <HAL_TIM_PWM_Start+0x180>)
 800e386:	4293      	cmp	r3, r2
 800e388:	d013      	beq.n	800e3b2 <HAL_TIM_PWM_Start+0x136>
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	4a1c      	ldr	r2, [pc, #112]	; (800e400 <HAL_TIM_PWM_Start+0x184>)
 800e390:	4293      	cmp	r3, r2
 800e392:	d00e      	beq.n	800e3b2 <HAL_TIM_PWM_Start+0x136>
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	4a16      	ldr	r2, [pc, #88]	; (800e3f4 <HAL_TIM_PWM_Start+0x178>)
 800e39a:	4293      	cmp	r3, r2
 800e39c:	d009      	beq.n	800e3b2 <HAL_TIM_PWM_Start+0x136>
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	4a18      	ldr	r2, [pc, #96]	; (800e404 <HAL_TIM_PWM_Start+0x188>)
 800e3a4:	4293      	cmp	r3, r2
 800e3a6:	d004      	beq.n	800e3b2 <HAL_TIM_PWM_Start+0x136>
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	4a16      	ldr	r2, [pc, #88]	; (800e408 <HAL_TIM_PWM_Start+0x18c>)
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	d111      	bne.n	800e3d6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	689b      	ldr	r3, [r3, #8]
 800e3b8:	f003 0307 	and.w	r3, r3, #7
 800e3bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	2b06      	cmp	r3, #6
 800e3c2:	d010      	beq.n	800e3e6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	681a      	ldr	r2, [r3, #0]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f042 0201 	orr.w	r2, r2, #1
 800e3d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3d4:	e007      	b.n	800e3e6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	681a      	ldr	r2, [r3, #0]
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	f042 0201 	orr.w	r2, r2, #1
 800e3e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e3e6:	2300      	movs	r3, #0
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3710      	adds	r7, #16
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}
 800e3f0:	40010000 	.word	0x40010000
 800e3f4:	40010400 	.word	0x40010400
 800e3f8:	40000400 	.word	0x40000400
 800e3fc:	40000800 	.word	0x40000800
 800e400:	40000c00 	.word	0x40000c00
 800e404:	40014000 	.word	0x40014000
 800e408:	40001800 	.word	0x40001800

0800e40c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b082      	sub	sp, #8
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
 800e414:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	2200      	movs	r2, #0
 800e41c:	6839      	ldr	r1, [r7, #0]
 800e41e:	4618      	mov	r0, r3
 800e420:	f000 fe08 	bl	800f034 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	4a2e      	ldr	r2, [pc, #184]	; (800e4e4 <HAL_TIM_PWM_Stop+0xd8>)
 800e42a:	4293      	cmp	r3, r2
 800e42c:	d004      	beq.n	800e438 <HAL_TIM_PWM_Stop+0x2c>
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	4a2d      	ldr	r2, [pc, #180]	; (800e4e8 <HAL_TIM_PWM_Stop+0xdc>)
 800e434:	4293      	cmp	r3, r2
 800e436:	d101      	bne.n	800e43c <HAL_TIM_PWM_Stop+0x30>
 800e438:	2301      	movs	r3, #1
 800e43a:	e000      	b.n	800e43e <HAL_TIM_PWM_Stop+0x32>
 800e43c:	2300      	movs	r3, #0
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d017      	beq.n	800e472 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	6a1a      	ldr	r2, [r3, #32]
 800e448:	f241 1311 	movw	r3, #4369	; 0x1111
 800e44c:	4013      	ands	r3, r2
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d10f      	bne.n	800e472 <HAL_TIM_PWM_Stop+0x66>
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	6a1a      	ldr	r2, [r3, #32]
 800e458:	f240 4344 	movw	r3, #1092	; 0x444
 800e45c:	4013      	ands	r3, r2
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d107      	bne.n	800e472 <HAL_TIM_PWM_Stop+0x66>
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e470:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	6a1a      	ldr	r2, [r3, #32]
 800e478:	f241 1311 	movw	r3, #4369	; 0x1111
 800e47c:	4013      	ands	r3, r2
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d10f      	bne.n	800e4a2 <HAL_TIM_PWM_Stop+0x96>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	6a1a      	ldr	r2, [r3, #32]
 800e488:	f240 4344 	movw	r3, #1092	; 0x444
 800e48c:	4013      	ands	r3, r2
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d107      	bne.n	800e4a2 <HAL_TIM_PWM_Stop+0x96>
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	681a      	ldr	r2, [r3, #0]
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	f022 0201 	bic.w	r2, r2, #1
 800e4a0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d104      	bne.n	800e4b2 <HAL_TIM_PWM_Stop+0xa6>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e4b0:	e013      	b.n	800e4da <HAL_TIM_PWM_Stop+0xce>
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	2b04      	cmp	r3, #4
 800e4b6:	d104      	bne.n	800e4c2 <HAL_TIM_PWM_Stop+0xb6>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e4c0:	e00b      	b.n	800e4da <HAL_TIM_PWM_Stop+0xce>
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	2b08      	cmp	r3, #8
 800e4c6:	d104      	bne.n	800e4d2 <HAL_TIM_PWM_Stop+0xc6>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2201      	movs	r2, #1
 800e4cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e4d0:	e003      	b.n	800e4da <HAL_TIM_PWM_Stop+0xce>
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2201      	movs	r2, #1
 800e4d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800e4da:	2300      	movs	r3, #0
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3708      	adds	r7, #8
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	40010000 	.word	0x40010000
 800e4e8:	40010400 	.word	0x40010400

0800e4ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b082      	sub	sp, #8
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	691b      	ldr	r3, [r3, #16]
 800e4fa:	f003 0302 	and.w	r3, r3, #2
 800e4fe:	2b02      	cmp	r3, #2
 800e500:	d122      	bne.n	800e548 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	68db      	ldr	r3, [r3, #12]
 800e508:	f003 0302 	and.w	r3, r3, #2
 800e50c:	2b02      	cmp	r3, #2
 800e50e:	d11b      	bne.n	800e548 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	f06f 0202 	mvn.w	r2, #2
 800e518:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2201      	movs	r2, #1
 800e51e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	699b      	ldr	r3, [r3, #24]
 800e526:	f003 0303 	and.w	r3, r3, #3
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d003      	beq.n	800e536 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f000 fa77 	bl	800ea22 <HAL_TIM_IC_CaptureCallback>
 800e534:	e005      	b.n	800e542 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f000 fa69 	bl	800ea0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f000 fa7a 	bl	800ea36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2200      	movs	r2, #0
 800e546:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	691b      	ldr	r3, [r3, #16]
 800e54e:	f003 0304 	and.w	r3, r3, #4
 800e552:	2b04      	cmp	r3, #4
 800e554:	d122      	bne.n	800e59c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	68db      	ldr	r3, [r3, #12]
 800e55c:	f003 0304 	and.w	r3, r3, #4
 800e560:	2b04      	cmp	r3, #4
 800e562:	d11b      	bne.n	800e59c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	f06f 0204 	mvn.w	r2, #4
 800e56c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2202      	movs	r2, #2
 800e572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	699b      	ldr	r3, [r3, #24]
 800e57a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d003      	beq.n	800e58a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f000 fa4d 	bl	800ea22 <HAL_TIM_IC_CaptureCallback>
 800e588:	e005      	b.n	800e596 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f000 fa3f 	bl	800ea0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f000 fa50 	bl	800ea36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2200      	movs	r2, #0
 800e59a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	691b      	ldr	r3, [r3, #16]
 800e5a2:	f003 0308 	and.w	r3, r3, #8
 800e5a6:	2b08      	cmp	r3, #8
 800e5a8:	d122      	bne.n	800e5f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	68db      	ldr	r3, [r3, #12]
 800e5b0:	f003 0308 	and.w	r3, r3, #8
 800e5b4:	2b08      	cmp	r3, #8
 800e5b6:	d11b      	bne.n	800e5f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	f06f 0208 	mvn.w	r2, #8
 800e5c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2204      	movs	r2, #4
 800e5c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	69db      	ldr	r3, [r3, #28]
 800e5ce:	f003 0303 	and.w	r3, r3, #3
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d003      	beq.n	800e5de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f000 fa23 	bl	800ea22 <HAL_TIM_IC_CaptureCallback>
 800e5dc:	e005      	b.n	800e5ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f000 fa15 	bl	800ea0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f000 fa26 	bl	800ea36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	691b      	ldr	r3, [r3, #16]
 800e5f6:	f003 0310 	and.w	r3, r3, #16
 800e5fa:	2b10      	cmp	r3, #16
 800e5fc:	d122      	bne.n	800e644 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	68db      	ldr	r3, [r3, #12]
 800e604:	f003 0310 	and.w	r3, r3, #16
 800e608:	2b10      	cmp	r3, #16
 800e60a:	d11b      	bne.n	800e644 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	f06f 0210 	mvn.w	r2, #16
 800e614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2208      	movs	r2, #8
 800e61a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	69db      	ldr	r3, [r3, #28]
 800e622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e626:	2b00      	cmp	r3, #0
 800e628:	d003      	beq.n	800e632 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	f000 f9f9 	bl	800ea22 <HAL_TIM_IC_CaptureCallback>
 800e630:	e005      	b.n	800e63e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e632:	6878      	ldr	r0, [r7, #4]
 800e634:	f000 f9eb 	bl	800ea0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e638:	6878      	ldr	r0, [r7, #4]
 800e63a:	f000 f9fc 	bl	800ea36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2200      	movs	r2, #0
 800e642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	691b      	ldr	r3, [r3, #16]
 800e64a:	f003 0301 	and.w	r3, r3, #1
 800e64e:	2b01      	cmp	r3, #1
 800e650:	d10e      	bne.n	800e670 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	68db      	ldr	r3, [r3, #12]
 800e658:	f003 0301 	and.w	r3, r3, #1
 800e65c:	2b01      	cmp	r3, #1
 800e65e:	d107      	bne.n	800e670 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	f06f 0201 	mvn.w	r2, #1
 800e668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f7f3 fc0e 	bl	8001e8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	691b      	ldr	r3, [r3, #16]
 800e676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e67a:	2b80      	cmp	r3, #128	; 0x80
 800e67c:	d10e      	bne.n	800e69c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	68db      	ldr	r3, [r3, #12]
 800e684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e688:	2b80      	cmp	r3, #128	; 0x80
 800e68a:	d107      	bne.n	800e69c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f000 fd78 	bl	800f18c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	691b      	ldr	r3, [r3, #16]
 800e6a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6a6:	2b40      	cmp	r3, #64	; 0x40
 800e6a8:	d10e      	bne.n	800e6c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	68db      	ldr	r3, [r3, #12]
 800e6b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6b4:	2b40      	cmp	r3, #64	; 0x40
 800e6b6:	d107      	bne.n	800e6c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e6c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f000 f9c1 	bl	800ea4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	691b      	ldr	r3, [r3, #16]
 800e6ce:	f003 0320 	and.w	r3, r3, #32
 800e6d2:	2b20      	cmp	r3, #32
 800e6d4:	d10e      	bne.n	800e6f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	68db      	ldr	r3, [r3, #12]
 800e6dc:	f003 0320 	and.w	r3, r3, #32
 800e6e0:	2b20      	cmp	r3, #32
 800e6e2:	d107      	bne.n	800e6f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f06f 0220 	mvn.w	r2, #32
 800e6ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e6ee:	6878      	ldr	r0, [r7, #4]
 800e6f0:	f000 fd42 	bl	800f178 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e6f4:	bf00      	nop
 800e6f6:	3708      	adds	r7, #8
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}

0800e6fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b086      	sub	sp, #24
 800e700:	af00      	add	r7, sp, #0
 800e702:	60f8      	str	r0, [r7, #12]
 800e704:	60b9      	str	r1, [r7, #8]
 800e706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e708:	2300      	movs	r3, #0
 800e70a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e712:	2b01      	cmp	r3, #1
 800e714:	d101      	bne.n	800e71a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e716:	2302      	movs	r3, #2
 800e718:	e0ae      	b.n	800e878 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	2201      	movs	r2, #1
 800e71e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	2b0c      	cmp	r3, #12
 800e726:	f200 809f 	bhi.w	800e868 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800e72a:	a201      	add	r2, pc, #4	; (adr r2, 800e730 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e730:	0800e765 	.word	0x0800e765
 800e734:	0800e869 	.word	0x0800e869
 800e738:	0800e869 	.word	0x0800e869
 800e73c:	0800e869 	.word	0x0800e869
 800e740:	0800e7a5 	.word	0x0800e7a5
 800e744:	0800e869 	.word	0x0800e869
 800e748:	0800e869 	.word	0x0800e869
 800e74c:	0800e869 	.word	0x0800e869
 800e750:	0800e7e7 	.word	0x0800e7e7
 800e754:	0800e869 	.word	0x0800e869
 800e758:	0800e869 	.word	0x0800e869
 800e75c:	0800e869 	.word	0x0800e869
 800e760:	0800e827 	.word	0x0800e827
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	68b9      	ldr	r1, [r7, #8]
 800e76a:	4618      	mov	r0, r3
 800e76c:	f000 fa18 	bl	800eba0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	699a      	ldr	r2, [r3, #24]
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	f042 0208 	orr.w	r2, r2, #8
 800e77e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	699a      	ldr	r2, [r3, #24]
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f022 0204 	bic.w	r2, r2, #4
 800e78e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	6999      	ldr	r1, [r3, #24]
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	691a      	ldr	r2, [r3, #16]
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	430a      	orrs	r2, r1
 800e7a0:	619a      	str	r2, [r3, #24]
      break;
 800e7a2:	e064      	b.n	800e86e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	68b9      	ldr	r1, [r7, #8]
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f000 fa68 	bl	800ec80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	699a      	ldr	r2, [r3, #24]
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e7be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	699a      	ldr	r2, [r3, #24]
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e7ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	6999      	ldr	r1, [r3, #24]
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	691b      	ldr	r3, [r3, #16]
 800e7da:	021a      	lsls	r2, r3, #8
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	430a      	orrs	r2, r1
 800e7e2:	619a      	str	r2, [r3, #24]
      break;
 800e7e4:	e043      	b.n	800e86e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	68b9      	ldr	r1, [r7, #8]
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f000 fabd 	bl	800ed6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	69da      	ldr	r2, [r3, #28]
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f042 0208 	orr.w	r2, r2, #8
 800e800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	69da      	ldr	r2, [r3, #28]
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	f022 0204 	bic.w	r2, r2, #4
 800e810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	69d9      	ldr	r1, [r3, #28]
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	691a      	ldr	r2, [r3, #16]
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	430a      	orrs	r2, r1
 800e822:	61da      	str	r2, [r3, #28]
      break;
 800e824:	e023      	b.n	800e86e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	68b9      	ldr	r1, [r7, #8]
 800e82c:	4618      	mov	r0, r3
 800e82e:	f000 fb11 	bl	800ee54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	69da      	ldr	r2, [r3, #28]
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	69da      	ldr	r2, [r3, #28]
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	69d9      	ldr	r1, [r3, #28]
 800e858:	68bb      	ldr	r3, [r7, #8]
 800e85a:	691b      	ldr	r3, [r3, #16]
 800e85c:	021a      	lsls	r2, r3, #8
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	430a      	orrs	r2, r1
 800e864:	61da      	str	r2, [r3, #28]
      break;
 800e866:	e002      	b.n	800e86e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800e868:	2301      	movs	r3, #1
 800e86a:	75fb      	strb	r3, [r7, #23]
      break;
 800e86c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	2200      	movs	r2, #0
 800e872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e876:	7dfb      	ldrb	r3, [r7, #23]
}
 800e878:	4618      	mov	r0, r3
 800e87a:	3718      	adds	r7, #24
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}

0800e880 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b084      	sub	sp, #16
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
 800e888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e88a:	2300      	movs	r3, #0
 800e88c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e894:	2b01      	cmp	r3, #1
 800e896:	d101      	bne.n	800e89c <HAL_TIM_ConfigClockSource+0x1c>
 800e898:	2302      	movs	r3, #2
 800e89a:	e0b4      	b.n	800ea06 <HAL_TIM_ConfigClockSource+0x186>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2201      	movs	r2, #1
 800e8a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2202      	movs	r2, #2
 800e8a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	689b      	ldr	r3, [r3, #8]
 800e8b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e8ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e8c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	68ba      	ldr	r2, [r7, #8]
 800e8ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8d4:	d03e      	beq.n	800e954 <HAL_TIM_ConfigClockSource+0xd4>
 800e8d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8da:	f200 8087 	bhi.w	800e9ec <HAL_TIM_ConfigClockSource+0x16c>
 800e8de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8e2:	f000 8086 	beq.w	800e9f2 <HAL_TIM_ConfigClockSource+0x172>
 800e8e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8ea:	d87f      	bhi.n	800e9ec <HAL_TIM_ConfigClockSource+0x16c>
 800e8ec:	2b70      	cmp	r3, #112	; 0x70
 800e8ee:	d01a      	beq.n	800e926 <HAL_TIM_ConfigClockSource+0xa6>
 800e8f0:	2b70      	cmp	r3, #112	; 0x70
 800e8f2:	d87b      	bhi.n	800e9ec <HAL_TIM_ConfigClockSource+0x16c>
 800e8f4:	2b60      	cmp	r3, #96	; 0x60
 800e8f6:	d050      	beq.n	800e99a <HAL_TIM_ConfigClockSource+0x11a>
 800e8f8:	2b60      	cmp	r3, #96	; 0x60
 800e8fa:	d877      	bhi.n	800e9ec <HAL_TIM_ConfigClockSource+0x16c>
 800e8fc:	2b50      	cmp	r3, #80	; 0x50
 800e8fe:	d03c      	beq.n	800e97a <HAL_TIM_ConfigClockSource+0xfa>
 800e900:	2b50      	cmp	r3, #80	; 0x50
 800e902:	d873      	bhi.n	800e9ec <HAL_TIM_ConfigClockSource+0x16c>
 800e904:	2b40      	cmp	r3, #64	; 0x40
 800e906:	d058      	beq.n	800e9ba <HAL_TIM_ConfigClockSource+0x13a>
 800e908:	2b40      	cmp	r3, #64	; 0x40
 800e90a:	d86f      	bhi.n	800e9ec <HAL_TIM_ConfigClockSource+0x16c>
 800e90c:	2b30      	cmp	r3, #48	; 0x30
 800e90e:	d064      	beq.n	800e9da <HAL_TIM_ConfigClockSource+0x15a>
 800e910:	2b30      	cmp	r3, #48	; 0x30
 800e912:	d86b      	bhi.n	800e9ec <HAL_TIM_ConfigClockSource+0x16c>
 800e914:	2b20      	cmp	r3, #32
 800e916:	d060      	beq.n	800e9da <HAL_TIM_ConfigClockSource+0x15a>
 800e918:	2b20      	cmp	r3, #32
 800e91a:	d867      	bhi.n	800e9ec <HAL_TIM_ConfigClockSource+0x16c>
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d05c      	beq.n	800e9da <HAL_TIM_ConfigClockSource+0x15a>
 800e920:	2b10      	cmp	r3, #16
 800e922:	d05a      	beq.n	800e9da <HAL_TIM_ConfigClockSource+0x15a>
 800e924:	e062      	b.n	800e9ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6818      	ldr	r0, [r3, #0]
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	6899      	ldr	r1, [r3, #8]
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	685a      	ldr	r2, [r3, #4]
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	68db      	ldr	r3, [r3, #12]
 800e936:	f000 fb5d 	bl	800eff4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	689b      	ldr	r3, [r3, #8]
 800e940:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e948:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	68ba      	ldr	r2, [r7, #8]
 800e950:	609a      	str	r2, [r3, #8]
      break;
 800e952:	e04f      	b.n	800e9f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6818      	ldr	r0, [r3, #0]
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	6899      	ldr	r1, [r3, #8]
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	685a      	ldr	r2, [r3, #4]
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	68db      	ldr	r3, [r3, #12]
 800e964:	f000 fb46 	bl	800eff4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	689a      	ldr	r2, [r3, #8]
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e976:	609a      	str	r2, [r3, #8]
      break;
 800e978:	e03c      	b.n	800e9f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6818      	ldr	r0, [r3, #0]
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	6859      	ldr	r1, [r3, #4]
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	68db      	ldr	r3, [r3, #12]
 800e986:	461a      	mov	r2, r3
 800e988:	f000 faba 	bl	800ef00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	2150      	movs	r1, #80	; 0x50
 800e992:	4618      	mov	r0, r3
 800e994:	f000 fb13 	bl	800efbe <TIM_ITRx_SetConfig>
      break;
 800e998:	e02c      	b.n	800e9f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6818      	ldr	r0, [r3, #0]
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	6859      	ldr	r1, [r3, #4]
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	68db      	ldr	r3, [r3, #12]
 800e9a6:	461a      	mov	r2, r3
 800e9a8:	f000 fad9 	bl	800ef5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	2160      	movs	r1, #96	; 0x60
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f000 fb03 	bl	800efbe <TIM_ITRx_SetConfig>
      break;
 800e9b8:	e01c      	b.n	800e9f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6818      	ldr	r0, [r3, #0]
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	6859      	ldr	r1, [r3, #4]
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	68db      	ldr	r3, [r3, #12]
 800e9c6:	461a      	mov	r2, r3
 800e9c8:	f000 fa9a 	bl	800ef00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	2140      	movs	r1, #64	; 0x40
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f000 faf3 	bl	800efbe <TIM_ITRx_SetConfig>
      break;
 800e9d8:	e00c      	b.n	800e9f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681a      	ldr	r2, [r3, #0]
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	4610      	mov	r0, r2
 800e9e6:	f000 faea 	bl	800efbe <TIM_ITRx_SetConfig>
      break;
 800e9ea:	e003      	b.n	800e9f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	73fb      	strb	r3, [r7, #15]
      break;
 800e9f0:	e000      	b.n	800e9f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800e9f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ea04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3710      	adds	r7, #16
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}

0800ea0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ea0e:	b480      	push	{r7}
 800ea10:	b083      	sub	sp, #12
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ea16:	bf00      	nop
 800ea18:	370c      	adds	r7, #12
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea20:	4770      	bx	lr

0800ea22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ea22:	b480      	push	{r7}
 800ea24:	b083      	sub	sp, #12
 800ea26:	af00      	add	r7, sp, #0
 800ea28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ea2a:	bf00      	nop
 800ea2c:	370c      	adds	r7, #12
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea34:	4770      	bx	lr

0800ea36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ea36:	b480      	push	{r7}
 800ea38:	b083      	sub	sp, #12
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ea3e:	bf00      	nop
 800ea40:	370c      	adds	r7, #12
 800ea42:	46bd      	mov	sp, r7
 800ea44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea48:	4770      	bx	lr

0800ea4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ea4a:	b480      	push	{r7}
 800ea4c:	b083      	sub	sp, #12
 800ea4e:	af00      	add	r7, sp, #0
 800ea50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ea52:	bf00      	nop
 800ea54:	370c      	adds	r7, #12
 800ea56:	46bd      	mov	sp, r7
 800ea58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5c:	4770      	bx	lr
	...

0800ea60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ea60:	b480      	push	{r7}
 800ea62:	b085      	sub	sp, #20
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	4a40      	ldr	r2, [pc, #256]	; (800eb74 <TIM_Base_SetConfig+0x114>)
 800ea74:	4293      	cmp	r3, r2
 800ea76:	d013      	beq.n	800eaa0 <TIM_Base_SetConfig+0x40>
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea7e:	d00f      	beq.n	800eaa0 <TIM_Base_SetConfig+0x40>
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	4a3d      	ldr	r2, [pc, #244]	; (800eb78 <TIM_Base_SetConfig+0x118>)
 800ea84:	4293      	cmp	r3, r2
 800ea86:	d00b      	beq.n	800eaa0 <TIM_Base_SetConfig+0x40>
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	4a3c      	ldr	r2, [pc, #240]	; (800eb7c <TIM_Base_SetConfig+0x11c>)
 800ea8c:	4293      	cmp	r3, r2
 800ea8e:	d007      	beq.n	800eaa0 <TIM_Base_SetConfig+0x40>
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	4a3b      	ldr	r2, [pc, #236]	; (800eb80 <TIM_Base_SetConfig+0x120>)
 800ea94:	4293      	cmp	r3, r2
 800ea96:	d003      	beq.n	800eaa0 <TIM_Base_SetConfig+0x40>
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	4a3a      	ldr	r2, [pc, #232]	; (800eb84 <TIM_Base_SetConfig+0x124>)
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	d108      	bne.n	800eab2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eaa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	685b      	ldr	r3, [r3, #4]
 800eaac:	68fa      	ldr	r2, [r7, #12]
 800eaae:	4313      	orrs	r3, r2
 800eab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	4a2f      	ldr	r2, [pc, #188]	; (800eb74 <TIM_Base_SetConfig+0x114>)
 800eab6:	4293      	cmp	r3, r2
 800eab8:	d02b      	beq.n	800eb12 <TIM_Base_SetConfig+0xb2>
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eac0:	d027      	beq.n	800eb12 <TIM_Base_SetConfig+0xb2>
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	4a2c      	ldr	r2, [pc, #176]	; (800eb78 <TIM_Base_SetConfig+0x118>)
 800eac6:	4293      	cmp	r3, r2
 800eac8:	d023      	beq.n	800eb12 <TIM_Base_SetConfig+0xb2>
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	4a2b      	ldr	r2, [pc, #172]	; (800eb7c <TIM_Base_SetConfig+0x11c>)
 800eace:	4293      	cmp	r3, r2
 800ead0:	d01f      	beq.n	800eb12 <TIM_Base_SetConfig+0xb2>
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	4a2a      	ldr	r2, [pc, #168]	; (800eb80 <TIM_Base_SetConfig+0x120>)
 800ead6:	4293      	cmp	r3, r2
 800ead8:	d01b      	beq.n	800eb12 <TIM_Base_SetConfig+0xb2>
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	4a29      	ldr	r2, [pc, #164]	; (800eb84 <TIM_Base_SetConfig+0x124>)
 800eade:	4293      	cmp	r3, r2
 800eae0:	d017      	beq.n	800eb12 <TIM_Base_SetConfig+0xb2>
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	4a28      	ldr	r2, [pc, #160]	; (800eb88 <TIM_Base_SetConfig+0x128>)
 800eae6:	4293      	cmp	r3, r2
 800eae8:	d013      	beq.n	800eb12 <TIM_Base_SetConfig+0xb2>
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	4a27      	ldr	r2, [pc, #156]	; (800eb8c <TIM_Base_SetConfig+0x12c>)
 800eaee:	4293      	cmp	r3, r2
 800eaf0:	d00f      	beq.n	800eb12 <TIM_Base_SetConfig+0xb2>
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	4a26      	ldr	r2, [pc, #152]	; (800eb90 <TIM_Base_SetConfig+0x130>)
 800eaf6:	4293      	cmp	r3, r2
 800eaf8:	d00b      	beq.n	800eb12 <TIM_Base_SetConfig+0xb2>
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	4a25      	ldr	r2, [pc, #148]	; (800eb94 <TIM_Base_SetConfig+0x134>)
 800eafe:	4293      	cmp	r3, r2
 800eb00:	d007      	beq.n	800eb12 <TIM_Base_SetConfig+0xb2>
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	4a24      	ldr	r2, [pc, #144]	; (800eb98 <TIM_Base_SetConfig+0x138>)
 800eb06:	4293      	cmp	r3, r2
 800eb08:	d003      	beq.n	800eb12 <TIM_Base_SetConfig+0xb2>
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	4a23      	ldr	r2, [pc, #140]	; (800eb9c <TIM_Base_SetConfig+0x13c>)
 800eb0e:	4293      	cmp	r3, r2
 800eb10:	d108      	bne.n	800eb24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eb18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	68db      	ldr	r3, [r3, #12]
 800eb1e:	68fa      	ldr	r2, [r7, #12]
 800eb20:	4313      	orrs	r3, r2
 800eb22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	695b      	ldr	r3, [r3, #20]
 800eb2e:	4313      	orrs	r3, r2
 800eb30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	68fa      	ldr	r2, [r7, #12]
 800eb36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	689a      	ldr	r2, [r3, #8]
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	681a      	ldr	r2, [r3, #0]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	4a0a      	ldr	r2, [pc, #40]	; (800eb74 <TIM_Base_SetConfig+0x114>)
 800eb4c:	4293      	cmp	r3, r2
 800eb4e:	d003      	beq.n	800eb58 <TIM_Base_SetConfig+0xf8>
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	4a0c      	ldr	r2, [pc, #48]	; (800eb84 <TIM_Base_SetConfig+0x124>)
 800eb54:	4293      	cmp	r3, r2
 800eb56:	d103      	bne.n	800eb60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	691a      	ldr	r2, [r3, #16]
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2201      	movs	r2, #1
 800eb64:	615a      	str	r2, [r3, #20]
}
 800eb66:	bf00      	nop
 800eb68:	3714      	adds	r7, #20
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr
 800eb72:	bf00      	nop
 800eb74:	40010000 	.word	0x40010000
 800eb78:	40000400 	.word	0x40000400
 800eb7c:	40000800 	.word	0x40000800
 800eb80:	40000c00 	.word	0x40000c00
 800eb84:	40010400 	.word	0x40010400
 800eb88:	40014000 	.word	0x40014000
 800eb8c:	40014400 	.word	0x40014400
 800eb90:	40014800 	.word	0x40014800
 800eb94:	40001800 	.word	0x40001800
 800eb98:	40001c00 	.word	0x40001c00
 800eb9c:	40002000 	.word	0x40002000

0800eba0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eba0:	b480      	push	{r7}
 800eba2:	b087      	sub	sp, #28
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6a1b      	ldr	r3, [r3, #32]
 800ebae:	f023 0201 	bic.w	r2, r3, #1
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	6a1b      	ldr	r3, [r3, #32]
 800ebba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	685b      	ldr	r3, [r3, #4]
 800ebc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	699b      	ldr	r3, [r3, #24]
 800ebc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ebce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	f023 0303 	bic.w	r3, r3, #3
 800ebd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	68fa      	ldr	r2, [r7, #12]
 800ebde:	4313      	orrs	r3, r2
 800ebe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	f023 0302 	bic.w	r3, r3, #2
 800ebe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	689b      	ldr	r3, [r3, #8]
 800ebee:	697a      	ldr	r2, [r7, #20]
 800ebf0:	4313      	orrs	r3, r2
 800ebf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	4a20      	ldr	r2, [pc, #128]	; (800ec78 <TIM_OC1_SetConfig+0xd8>)
 800ebf8:	4293      	cmp	r3, r2
 800ebfa:	d003      	beq.n	800ec04 <TIM_OC1_SetConfig+0x64>
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	4a1f      	ldr	r2, [pc, #124]	; (800ec7c <TIM_OC1_SetConfig+0xdc>)
 800ec00:	4293      	cmp	r3, r2
 800ec02:	d10c      	bne.n	800ec1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ec04:	697b      	ldr	r3, [r7, #20]
 800ec06:	f023 0308 	bic.w	r3, r3, #8
 800ec0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	68db      	ldr	r3, [r3, #12]
 800ec10:	697a      	ldr	r2, [r7, #20]
 800ec12:	4313      	orrs	r3, r2
 800ec14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	f023 0304 	bic.w	r3, r3, #4
 800ec1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	4a15      	ldr	r2, [pc, #84]	; (800ec78 <TIM_OC1_SetConfig+0xd8>)
 800ec22:	4293      	cmp	r3, r2
 800ec24:	d003      	beq.n	800ec2e <TIM_OC1_SetConfig+0x8e>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	4a14      	ldr	r2, [pc, #80]	; (800ec7c <TIM_OC1_SetConfig+0xdc>)
 800ec2a:	4293      	cmp	r3, r2
 800ec2c:	d111      	bne.n	800ec52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ec2e:	693b      	ldr	r3, [r7, #16]
 800ec30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ec34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ec36:	693b      	ldr	r3, [r7, #16]
 800ec38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ec3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	695b      	ldr	r3, [r3, #20]
 800ec42:	693a      	ldr	r2, [r7, #16]
 800ec44:	4313      	orrs	r3, r2
 800ec46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	699b      	ldr	r3, [r3, #24]
 800ec4c:	693a      	ldr	r2, [r7, #16]
 800ec4e:	4313      	orrs	r3, r2
 800ec50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	693a      	ldr	r2, [r7, #16]
 800ec56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	68fa      	ldr	r2, [r7, #12]
 800ec5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	685a      	ldr	r2, [r3, #4]
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	697a      	ldr	r2, [r7, #20]
 800ec6a:	621a      	str	r2, [r3, #32]
}
 800ec6c:	bf00      	nop
 800ec6e:	371c      	adds	r7, #28
 800ec70:	46bd      	mov	sp, r7
 800ec72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec76:	4770      	bx	lr
 800ec78:	40010000 	.word	0x40010000
 800ec7c:	40010400 	.word	0x40010400

0800ec80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ec80:	b480      	push	{r7}
 800ec82:	b087      	sub	sp, #28
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6a1b      	ldr	r3, [r3, #32]
 800ec8e:	f023 0210 	bic.w	r2, r3, #16
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6a1b      	ldr	r3, [r3, #32]
 800ec9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	685b      	ldr	r3, [r3, #4]
 800eca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	699b      	ldr	r3, [r3, #24]
 800eca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ecae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ecb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	021b      	lsls	r3, r3, #8
 800ecbe:	68fa      	ldr	r2, [r7, #12]
 800ecc0:	4313      	orrs	r3, r2
 800ecc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	f023 0320 	bic.w	r3, r3, #32
 800ecca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	689b      	ldr	r3, [r3, #8]
 800ecd0:	011b      	lsls	r3, r3, #4
 800ecd2:	697a      	ldr	r2, [r7, #20]
 800ecd4:	4313      	orrs	r3, r2
 800ecd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	4a22      	ldr	r2, [pc, #136]	; (800ed64 <TIM_OC2_SetConfig+0xe4>)
 800ecdc:	4293      	cmp	r3, r2
 800ecde:	d003      	beq.n	800ece8 <TIM_OC2_SetConfig+0x68>
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	4a21      	ldr	r2, [pc, #132]	; (800ed68 <TIM_OC2_SetConfig+0xe8>)
 800ece4:	4293      	cmp	r3, r2
 800ece6:	d10d      	bne.n	800ed04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ece8:	697b      	ldr	r3, [r7, #20]
 800ecea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ecee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	68db      	ldr	r3, [r3, #12]
 800ecf4:	011b      	lsls	r3, r3, #4
 800ecf6:	697a      	ldr	r2, [r7, #20]
 800ecf8:	4313      	orrs	r3, r2
 800ecfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	4a17      	ldr	r2, [pc, #92]	; (800ed64 <TIM_OC2_SetConfig+0xe4>)
 800ed08:	4293      	cmp	r3, r2
 800ed0a:	d003      	beq.n	800ed14 <TIM_OC2_SetConfig+0x94>
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	4a16      	ldr	r2, [pc, #88]	; (800ed68 <TIM_OC2_SetConfig+0xe8>)
 800ed10:	4293      	cmp	r3, r2
 800ed12:	d113      	bne.n	800ed3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ed14:	693b      	ldr	r3, [r7, #16]
 800ed16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ed1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ed1c:	693b      	ldr	r3, [r7, #16]
 800ed1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ed22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	695b      	ldr	r3, [r3, #20]
 800ed28:	009b      	lsls	r3, r3, #2
 800ed2a:	693a      	ldr	r2, [r7, #16]
 800ed2c:	4313      	orrs	r3, r2
 800ed2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	699b      	ldr	r3, [r3, #24]
 800ed34:	009b      	lsls	r3, r3, #2
 800ed36:	693a      	ldr	r2, [r7, #16]
 800ed38:	4313      	orrs	r3, r2
 800ed3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	693a      	ldr	r2, [r7, #16]
 800ed40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	68fa      	ldr	r2, [r7, #12]
 800ed46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	685a      	ldr	r2, [r3, #4]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	697a      	ldr	r2, [r7, #20]
 800ed54:	621a      	str	r2, [r3, #32]
}
 800ed56:	bf00      	nop
 800ed58:	371c      	adds	r7, #28
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed60:	4770      	bx	lr
 800ed62:	bf00      	nop
 800ed64:	40010000 	.word	0x40010000
 800ed68:	40010400 	.word	0x40010400

0800ed6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ed6c:	b480      	push	{r7}
 800ed6e:	b087      	sub	sp, #28
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6a1b      	ldr	r3, [r3, #32]
 800ed7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	6a1b      	ldr	r3, [r3, #32]
 800ed86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	685b      	ldr	r3, [r3, #4]
 800ed8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	69db      	ldr	r3, [r3, #28]
 800ed92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	f023 0303 	bic.w	r3, r3, #3
 800eda2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	68fa      	ldr	r2, [r7, #12]
 800edaa:	4313      	orrs	r3, r2
 800edac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800edae:	697b      	ldr	r3, [r7, #20]
 800edb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800edb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	689b      	ldr	r3, [r3, #8]
 800edba:	021b      	lsls	r3, r3, #8
 800edbc:	697a      	ldr	r2, [r7, #20]
 800edbe:	4313      	orrs	r3, r2
 800edc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	4a21      	ldr	r2, [pc, #132]	; (800ee4c <TIM_OC3_SetConfig+0xe0>)
 800edc6:	4293      	cmp	r3, r2
 800edc8:	d003      	beq.n	800edd2 <TIM_OC3_SetConfig+0x66>
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	4a20      	ldr	r2, [pc, #128]	; (800ee50 <TIM_OC3_SetConfig+0xe4>)
 800edce:	4293      	cmp	r3, r2
 800edd0:	d10d      	bne.n	800edee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800edd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	68db      	ldr	r3, [r3, #12]
 800edde:	021b      	lsls	r3, r3, #8
 800ede0:	697a      	ldr	r2, [r7, #20]
 800ede2:	4313      	orrs	r3, r2
 800ede4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800edec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	4a16      	ldr	r2, [pc, #88]	; (800ee4c <TIM_OC3_SetConfig+0xe0>)
 800edf2:	4293      	cmp	r3, r2
 800edf4:	d003      	beq.n	800edfe <TIM_OC3_SetConfig+0x92>
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	4a15      	ldr	r2, [pc, #84]	; (800ee50 <TIM_OC3_SetConfig+0xe4>)
 800edfa:	4293      	cmp	r3, r2
 800edfc:	d113      	bne.n	800ee26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ee06:	693b      	ldr	r3, [r7, #16]
 800ee08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ee0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	695b      	ldr	r3, [r3, #20]
 800ee12:	011b      	lsls	r3, r3, #4
 800ee14:	693a      	ldr	r2, [r7, #16]
 800ee16:	4313      	orrs	r3, r2
 800ee18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	699b      	ldr	r3, [r3, #24]
 800ee1e:	011b      	lsls	r3, r3, #4
 800ee20:	693a      	ldr	r2, [r7, #16]
 800ee22:	4313      	orrs	r3, r2
 800ee24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	693a      	ldr	r2, [r7, #16]
 800ee2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	68fa      	ldr	r2, [r7, #12]
 800ee30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	685a      	ldr	r2, [r3, #4]
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	697a      	ldr	r2, [r7, #20]
 800ee3e:	621a      	str	r2, [r3, #32]
}
 800ee40:	bf00      	nop
 800ee42:	371c      	adds	r7, #28
 800ee44:	46bd      	mov	sp, r7
 800ee46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4a:	4770      	bx	lr
 800ee4c:	40010000 	.word	0x40010000
 800ee50:	40010400 	.word	0x40010400

0800ee54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ee54:	b480      	push	{r7}
 800ee56:	b087      	sub	sp, #28
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6a1b      	ldr	r3, [r3, #32]
 800ee62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6a1b      	ldr	r3, [r3, #32]
 800ee6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	685b      	ldr	r3, [r3, #4]
 800ee74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	69db      	ldr	r3, [r3, #28]
 800ee7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ee8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	021b      	lsls	r3, r3, #8
 800ee92:	68fa      	ldr	r2, [r7, #12]
 800ee94:	4313      	orrs	r3, r2
 800ee96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ee98:	693b      	ldr	r3, [r7, #16]
 800ee9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ee9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	689b      	ldr	r3, [r3, #8]
 800eea4:	031b      	lsls	r3, r3, #12
 800eea6:	693a      	ldr	r2, [r7, #16]
 800eea8:	4313      	orrs	r3, r2
 800eeaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	4a12      	ldr	r2, [pc, #72]	; (800eef8 <TIM_OC4_SetConfig+0xa4>)
 800eeb0:	4293      	cmp	r3, r2
 800eeb2:	d003      	beq.n	800eebc <TIM_OC4_SetConfig+0x68>
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	4a11      	ldr	r2, [pc, #68]	; (800eefc <TIM_OC4_SetConfig+0xa8>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d109      	bne.n	800eed0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eec2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	695b      	ldr	r3, [r3, #20]
 800eec8:	019b      	lsls	r3, r3, #6
 800eeca:	697a      	ldr	r2, [r7, #20]
 800eecc:	4313      	orrs	r3, r2
 800eece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	697a      	ldr	r2, [r7, #20]
 800eed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	68fa      	ldr	r2, [r7, #12]
 800eeda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	685a      	ldr	r2, [r3, #4]
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	693a      	ldr	r2, [r7, #16]
 800eee8:	621a      	str	r2, [r3, #32]
}
 800eeea:	bf00      	nop
 800eeec:	371c      	adds	r7, #28
 800eeee:	46bd      	mov	sp, r7
 800eef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef4:	4770      	bx	lr
 800eef6:	bf00      	nop
 800eef8:	40010000 	.word	0x40010000
 800eefc:	40010400 	.word	0x40010400

0800ef00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ef00:	b480      	push	{r7}
 800ef02:	b087      	sub	sp, #28
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	60f8      	str	r0, [r7, #12]
 800ef08:	60b9      	str	r1, [r7, #8]
 800ef0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	6a1b      	ldr	r3, [r3, #32]
 800ef10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	6a1b      	ldr	r3, [r3, #32]
 800ef16:	f023 0201 	bic.w	r2, r3, #1
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	699b      	ldr	r3, [r3, #24]
 800ef22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ef24:	693b      	ldr	r3, [r7, #16]
 800ef26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ef2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	011b      	lsls	r3, r3, #4
 800ef30:	693a      	ldr	r2, [r7, #16]
 800ef32:	4313      	orrs	r3, r2
 800ef34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	f023 030a 	bic.w	r3, r3, #10
 800ef3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ef3e:	697a      	ldr	r2, [r7, #20]
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	4313      	orrs	r3, r2
 800ef44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	693a      	ldr	r2, [r7, #16]
 800ef4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	697a      	ldr	r2, [r7, #20]
 800ef50:	621a      	str	r2, [r3, #32]
}
 800ef52:	bf00      	nop
 800ef54:	371c      	adds	r7, #28
 800ef56:	46bd      	mov	sp, r7
 800ef58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5c:	4770      	bx	lr

0800ef5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ef5e:	b480      	push	{r7}
 800ef60:	b087      	sub	sp, #28
 800ef62:	af00      	add	r7, sp, #0
 800ef64:	60f8      	str	r0, [r7, #12]
 800ef66:	60b9      	str	r1, [r7, #8]
 800ef68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	6a1b      	ldr	r3, [r3, #32]
 800ef6e:	f023 0210 	bic.w	r2, r3, #16
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	699b      	ldr	r3, [r3, #24]
 800ef7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	6a1b      	ldr	r3, [r3, #32]
 800ef80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ef88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	031b      	lsls	r3, r3, #12
 800ef8e:	697a      	ldr	r2, [r7, #20]
 800ef90:	4313      	orrs	r3, r2
 800ef92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ef94:	693b      	ldr	r3, [r7, #16]
 800ef96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ef9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	011b      	lsls	r3, r3, #4
 800efa0:	693a      	ldr	r2, [r7, #16]
 800efa2:	4313      	orrs	r3, r2
 800efa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	697a      	ldr	r2, [r7, #20]
 800efaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	693a      	ldr	r2, [r7, #16]
 800efb0:	621a      	str	r2, [r3, #32]
}
 800efb2:	bf00      	nop
 800efb4:	371c      	adds	r7, #28
 800efb6:	46bd      	mov	sp, r7
 800efb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbc:	4770      	bx	lr

0800efbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800efbe:	b480      	push	{r7}
 800efc0:	b085      	sub	sp, #20
 800efc2:	af00      	add	r7, sp, #0
 800efc4:	6078      	str	r0, [r7, #4]
 800efc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	689b      	ldr	r3, [r3, #8]
 800efcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800efd6:	683a      	ldr	r2, [r7, #0]
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	4313      	orrs	r3, r2
 800efdc:	f043 0307 	orr.w	r3, r3, #7
 800efe0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	68fa      	ldr	r2, [r7, #12]
 800efe6:	609a      	str	r2, [r3, #8]
}
 800efe8:	bf00      	nop
 800efea:	3714      	adds	r7, #20
 800efec:	46bd      	mov	sp, r7
 800efee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff2:	4770      	bx	lr

0800eff4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800eff4:	b480      	push	{r7}
 800eff6:	b087      	sub	sp, #28
 800eff8:	af00      	add	r7, sp, #0
 800effa:	60f8      	str	r0, [r7, #12]
 800effc:	60b9      	str	r1, [r7, #8]
 800effe:	607a      	str	r2, [r7, #4]
 800f000:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	689b      	ldr	r3, [r3, #8]
 800f006:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f008:	697b      	ldr	r3, [r7, #20]
 800f00a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f00e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	021a      	lsls	r2, r3, #8
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	431a      	orrs	r2, r3
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	4313      	orrs	r3, r2
 800f01c:	697a      	ldr	r2, [r7, #20]
 800f01e:	4313      	orrs	r3, r2
 800f020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	697a      	ldr	r2, [r7, #20]
 800f026:	609a      	str	r2, [r3, #8]
}
 800f028:	bf00      	nop
 800f02a:	371c      	adds	r7, #28
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr

0800f034 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f034:	b480      	push	{r7}
 800f036:	b087      	sub	sp, #28
 800f038:	af00      	add	r7, sp, #0
 800f03a:	60f8      	str	r0, [r7, #12]
 800f03c:	60b9      	str	r1, [r7, #8]
 800f03e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	f003 031f 	and.w	r3, r3, #31
 800f046:	2201      	movs	r2, #1
 800f048:	fa02 f303 	lsl.w	r3, r2, r3
 800f04c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	6a1a      	ldr	r2, [r3, #32]
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	43db      	mvns	r3, r3
 800f056:	401a      	ands	r2, r3
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	6a1a      	ldr	r2, [r3, #32]
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	f003 031f 	and.w	r3, r3, #31
 800f066:	6879      	ldr	r1, [r7, #4]
 800f068:	fa01 f303 	lsl.w	r3, r1, r3
 800f06c:	431a      	orrs	r2, r3
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	621a      	str	r2, [r3, #32]
}
 800f072:	bf00      	nop
 800f074:	371c      	adds	r7, #28
 800f076:	46bd      	mov	sp, r7
 800f078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07c:	4770      	bx	lr
	...

0800f080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f080:	b480      	push	{r7}
 800f082:	b085      	sub	sp, #20
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
 800f088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f090:	2b01      	cmp	r3, #1
 800f092:	d101      	bne.n	800f098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f094:	2302      	movs	r3, #2
 800f096:	e05a      	b.n	800f14e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2201      	movs	r2, #1
 800f09c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2202      	movs	r2, #2
 800f0a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	689b      	ldr	r3, [r3, #8]
 800f0b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	68fa      	ldr	r2, [r7, #12]
 800f0c6:	4313      	orrs	r3, r2
 800f0c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	68fa      	ldr	r2, [r7, #12]
 800f0d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	4a21      	ldr	r2, [pc, #132]	; (800f15c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f0d8:	4293      	cmp	r3, r2
 800f0da:	d022      	beq.n	800f122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f0e4:	d01d      	beq.n	800f122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	4a1d      	ldr	r2, [pc, #116]	; (800f160 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	d018      	beq.n	800f122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	4a1b      	ldr	r2, [pc, #108]	; (800f164 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f0f6:	4293      	cmp	r3, r2
 800f0f8:	d013      	beq.n	800f122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	4a1a      	ldr	r2, [pc, #104]	; (800f168 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f100:	4293      	cmp	r3, r2
 800f102:	d00e      	beq.n	800f122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	4a18      	ldr	r2, [pc, #96]	; (800f16c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f10a:	4293      	cmp	r3, r2
 800f10c:	d009      	beq.n	800f122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	4a17      	ldr	r2, [pc, #92]	; (800f170 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f114:	4293      	cmp	r3, r2
 800f116:	d004      	beq.n	800f122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	4a15      	ldr	r2, [pc, #84]	; (800f174 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f11e:	4293      	cmp	r3, r2
 800f120:	d10c      	bne.n	800f13c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f128:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	685b      	ldr	r3, [r3, #4]
 800f12e:	68ba      	ldr	r2, [r7, #8]
 800f130:	4313      	orrs	r3, r2
 800f132:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	68ba      	ldr	r2, [r7, #8]
 800f13a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2201      	movs	r2, #1
 800f140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2200      	movs	r2, #0
 800f148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f14c:	2300      	movs	r3, #0
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3714      	adds	r7, #20
 800f152:	46bd      	mov	sp, r7
 800f154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f158:	4770      	bx	lr
 800f15a:	bf00      	nop
 800f15c:	40010000 	.word	0x40010000
 800f160:	40000400 	.word	0x40000400
 800f164:	40000800 	.word	0x40000800
 800f168:	40000c00 	.word	0x40000c00
 800f16c:	40010400 	.word	0x40010400
 800f170:	40014000 	.word	0x40014000
 800f174:	40001800 	.word	0x40001800

0800f178 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f178:	b480      	push	{r7}
 800f17a:	b083      	sub	sp, #12
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f180:	bf00      	nop
 800f182:	370c      	adds	r7, #12
 800f184:	46bd      	mov	sp, r7
 800f186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18a:	4770      	bx	lr

0800f18c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f18c:	b480      	push	{r7}
 800f18e:	b083      	sub	sp, #12
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f194:	bf00      	nop
 800f196:	370c      	adds	r7, #12
 800f198:	46bd      	mov	sp, r7
 800f19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19e:	4770      	bx	lr

0800f1a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b082      	sub	sp, #8
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d101      	bne.n	800f1b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f1ae:	2301      	movs	r3, #1
 800f1b0:	e03f      	b.n	800f232 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f1b8:	b2db      	uxtb	r3, r3
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d106      	bne.n	800f1cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f7f3 faae 	bl	8002728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2224      	movs	r2, #36	; 0x24
 800f1d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	68da      	ldr	r2, [r3, #12]
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f1e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	f000 f9cb 	bl	800f580 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	691a      	ldr	r2, [r3, #16]
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f1f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	695a      	ldr	r2, [r3, #20]
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f208:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	68da      	ldr	r2, [r3, #12]
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f218:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2200      	movs	r2, #0
 800f21e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2220      	movs	r2, #32
 800f224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2220      	movs	r2, #32
 800f22c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800f230:	2300      	movs	r3, #0
}
 800f232:	4618      	mov	r0, r3
 800f234:	3708      	adds	r7, #8
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}

0800f23a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f23a:	b580      	push	{r7, lr}
 800f23c:	b08a      	sub	sp, #40	; 0x28
 800f23e:	af02      	add	r7, sp, #8
 800f240:	60f8      	str	r0, [r7, #12]
 800f242:	60b9      	str	r1, [r7, #8]
 800f244:	603b      	str	r3, [r7, #0]
 800f246:	4613      	mov	r3, r2
 800f248:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800f24a:	2300      	movs	r3, #0
 800f24c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f254:	b2db      	uxtb	r3, r3
 800f256:	2b20      	cmp	r3, #32
 800f258:	d17c      	bne.n	800f354 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d002      	beq.n	800f266 <HAL_UART_Transmit+0x2c>
 800f260:	88fb      	ldrh	r3, [r7, #6]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d101      	bne.n	800f26a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800f266:	2301      	movs	r3, #1
 800f268:	e075      	b.n	800f356 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f270:	2b01      	cmp	r3, #1
 800f272:	d101      	bne.n	800f278 <HAL_UART_Transmit+0x3e>
 800f274:	2302      	movs	r3, #2
 800f276:	e06e      	b.n	800f356 <HAL_UART_Transmit+0x11c>
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	2201      	movs	r2, #1
 800f27c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	2200      	movs	r2, #0
 800f284:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	2221      	movs	r2, #33	; 0x21
 800f28a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f28e:	f7f9 ffdf 	bl	8009250 <HAL_GetTick>
 800f292:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	88fa      	ldrh	r2, [r7, #6]
 800f298:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	88fa      	ldrh	r2, [r7, #6]
 800f29e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	689b      	ldr	r3, [r3, #8]
 800f2a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2a8:	d108      	bne.n	800f2bc <HAL_UART_Transmit+0x82>
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	691b      	ldr	r3, [r3, #16]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d104      	bne.n	800f2bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	61bb      	str	r3, [r7, #24]
 800f2ba:	e003      	b.n	800f2c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800f2cc:	e02a      	b.n	800f324 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	9300      	str	r3, [sp, #0]
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	2180      	movs	r1, #128	; 0x80
 800f2d8:	68f8      	ldr	r0, [r7, #12]
 800f2da:	f000 f8e2 	bl	800f4a2 <UART_WaitOnFlagUntilTimeout>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d001      	beq.n	800f2e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800f2e4:	2303      	movs	r3, #3
 800f2e6:	e036      	b.n	800f356 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800f2e8:	69fb      	ldr	r3, [r7, #28]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d10b      	bne.n	800f306 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f2ee:	69bb      	ldr	r3, [r7, #24]
 800f2f0:	881b      	ldrh	r3, [r3, #0]
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f2fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800f2fe:	69bb      	ldr	r3, [r7, #24]
 800f300:	3302      	adds	r3, #2
 800f302:	61bb      	str	r3, [r7, #24]
 800f304:	e007      	b.n	800f316 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800f306:	69fb      	ldr	r3, [r7, #28]
 800f308:	781a      	ldrb	r2, [r3, #0]
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800f310:	69fb      	ldr	r3, [r7, #28]
 800f312:	3301      	adds	r3, #1
 800f314:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f31a:	b29b      	uxth	r3, r3
 800f31c:	3b01      	subs	r3, #1
 800f31e:	b29a      	uxth	r2, r3
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f328:	b29b      	uxth	r3, r3
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d1cf      	bne.n	800f2ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	9300      	str	r3, [sp, #0]
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	2200      	movs	r2, #0
 800f336:	2140      	movs	r1, #64	; 0x40
 800f338:	68f8      	ldr	r0, [r7, #12]
 800f33a:	f000 f8b2 	bl	800f4a2 <UART_WaitOnFlagUntilTimeout>
 800f33e:	4603      	mov	r3, r0
 800f340:	2b00      	cmp	r3, #0
 800f342:	d001      	beq.n	800f348 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800f344:	2303      	movs	r3, #3
 800f346:	e006      	b.n	800f356 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	2220      	movs	r2, #32
 800f34c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800f350:	2300      	movs	r3, #0
 800f352:	e000      	b.n	800f356 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800f354:	2302      	movs	r3, #2
  }
}
 800f356:	4618      	mov	r0, r3
 800f358:	3720      	adds	r7, #32
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}

0800f35e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f35e:	b580      	push	{r7, lr}
 800f360:	b08a      	sub	sp, #40	; 0x28
 800f362:	af02      	add	r7, sp, #8
 800f364:	60f8      	str	r0, [r7, #12]
 800f366:	60b9      	str	r1, [r7, #8]
 800f368:	603b      	str	r3, [r7, #0]
 800f36a:	4613      	mov	r3, r2
 800f36c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800f36e:	2300      	movs	r3, #0
 800f370:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f378:	b2db      	uxtb	r3, r3
 800f37a:	2b20      	cmp	r3, #32
 800f37c:	f040 808c 	bne.w	800f498 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d002      	beq.n	800f38c <HAL_UART_Receive+0x2e>
 800f386:	88fb      	ldrh	r3, [r7, #6]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d101      	bne.n	800f390 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800f38c:	2301      	movs	r3, #1
 800f38e:	e084      	b.n	800f49a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f396:	2b01      	cmp	r3, #1
 800f398:	d101      	bne.n	800f39e <HAL_UART_Receive+0x40>
 800f39a:	2302      	movs	r3, #2
 800f39c:	e07d      	b.n	800f49a <HAL_UART_Receive+0x13c>
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	2201      	movs	r2, #1
 800f3a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	2222      	movs	r2, #34	; 0x22
 800f3b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f3ba:	f7f9 ff49 	bl	8009250 <HAL_GetTick>
 800f3be:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	88fa      	ldrh	r2, [r7, #6]
 800f3c4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	88fa      	ldrh	r2, [r7, #6]
 800f3ca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	689b      	ldr	r3, [r3, #8]
 800f3d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f3d4:	d108      	bne.n	800f3e8 <HAL_UART_Receive+0x8a>
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	691b      	ldr	r3, [r3, #16]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d104      	bne.n	800f3e8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	61bb      	str	r3, [r7, #24]
 800f3e6:	e003      	b.n	800f3f0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800f3f8:	e043      	b.n	800f482 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	9300      	str	r3, [sp, #0]
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	2200      	movs	r2, #0
 800f402:	2120      	movs	r1, #32
 800f404:	68f8      	ldr	r0, [r7, #12]
 800f406:	f000 f84c 	bl	800f4a2 <UART_WaitOnFlagUntilTimeout>
 800f40a:	4603      	mov	r3, r0
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d001      	beq.n	800f414 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800f410:	2303      	movs	r3, #3
 800f412:	e042      	b.n	800f49a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800f414:	69fb      	ldr	r3, [r7, #28]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d10c      	bne.n	800f434 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	685b      	ldr	r3, [r3, #4]
 800f420:	b29b      	uxth	r3, r3
 800f422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f426:	b29a      	uxth	r2, r3
 800f428:	69bb      	ldr	r3, [r7, #24]
 800f42a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f42c:	69bb      	ldr	r3, [r7, #24]
 800f42e:	3302      	adds	r3, #2
 800f430:	61bb      	str	r3, [r7, #24]
 800f432:	e01f      	b.n	800f474 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	689b      	ldr	r3, [r3, #8]
 800f438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f43c:	d007      	beq.n	800f44e <HAL_UART_Receive+0xf0>
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	689b      	ldr	r3, [r3, #8]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d10a      	bne.n	800f45c <HAL_UART_Receive+0xfe>
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	691b      	ldr	r3, [r3, #16]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d106      	bne.n	800f45c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	685b      	ldr	r3, [r3, #4]
 800f454:	b2da      	uxtb	r2, r3
 800f456:	69fb      	ldr	r3, [r7, #28]
 800f458:	701a      	strb	r2, [r3, #0]
 800f45a:	e008      	b.n	800f46e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	685b      	ldr	r3, [r3, #4]
 800f462:	b2db      	uxtb	r3, r3
 800f464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f468:	b2da      	uxtb	r2, r3
 800f46a:	69fb      	ldr	r3, [r7, #28]
 800f46c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800f46e:	69fb      	ldr	r3, [r7, #28]
 800f470:	3301      	adds	r3, #1
 800f472:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f478:	b29b      	uxth	r3, r3
 800f47a:	3b01      	subs	r3, #1
 800f47c:	b29a      	uxth	r2, r3
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f486:	b29b      	uxth	r3, r3
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d1b6      	bne.n	800f3fa <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	2220      	movs	r2, #32
 800f490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800f494:	2300      	movs	r3, #0
 800f496:	e000      	b.n	800f49a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800f498:	2302      	movs	r3, #2
  }
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	3720      	adds	r7, #32
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}

0800f4a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800f4a2:	b580      	push	{r7, lr}
 800f4a4:	b090      	sub	sp, #64	; 0x40
 800f4a6:	af00      	add	r7, sp, #0
 800f4a8:	60f8      	str	r0, [r7, #12]
 800f4aa:	60b9      	str	r1, [r7, #8]
 800f4ac:	603b      	str	r3, [r7, #0]
 800f4ae:	4613      	mov	r3, r2
 800f4b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f4b2:	e050      	b.n	800f556 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f4b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4ba:	d04c      	beq.n	800f556 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800f4bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d007      	beq.n	800f4d2 <UART_WaitOnFlagUntilTimeout+0x30>
 800f4c2:	f7f9 fec5 	bl	8009250 <HAL_GetTick>
 800f4c6:	4602      	mov	r2, r0
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	1ad3      	subs	r3, r2, r3
 800f4cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	d241      	bcs.n	800f556 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	330c      	adds	r3, #12
 800f4d8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4dc:	e853 3f00 	ldrex	r3, [r3]
 800f4e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	330c      	adds	r3, #12
 800f4f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f4f2:	637a      	str	r2, [r7, #52]	; 0x34
 800f4f4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f4f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4fa:	e841 2300 	strex	r3, r2, [r1]
 800f4fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f502:	2b00      	cmp	r3, #0
 800f504:	d1e5      	bne.n	800f4d2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	3314      	adds	r3, #20
 800f50c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	e853 3f00 	ldrex	r3, [r3]
 800f514:	613b      	str	r3, [r7, #16]
   return(result);
 800f516:	693b      	ldr	r3, [r7, #16]
 800f518:	f023 0301 	bic.w	r3, r3, #1
 800f51c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	3314      	adds	r3, #20
 800f524:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f526:	623a      	str	r2, [r7, #32]
 800f528:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f52a:	69f9      	ldr	r1, [r7, #28]
 800f52c:	6a3a      	ldr	r2, [r7, #32]
 800f52e:	e841 2300 	strex	r3, r2, [r1]
 800f532:	61bb      	str	r3, [r7, #24]
   return(result);
 800f534:	69bb      	ldr	r3, [r7, #24]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d1e5      	bne.n	800f506 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	2220      	movs	r2, #32
 800f53e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	2220      	movs	r2, #32
 800f546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	2200      	movs	r2, #0
 800f54e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800f552:	2303      	movs	r3, #3
 800f554:	e00f      	b.n	800f576 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	681a      	ldr	r2, [r3, #0]
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	4013      	ands	r3, r2
 800f560:	68ba      	ldr	r2, [r7, #8]
 800f562:	429a      	cmp	r2, r3
 800f564:	bf0c      	ite	eq
 800f566:	2301      	moveq	r3, #1
 800f568:	2300      	movne	r3, #0
 800f56a:	b2db      	uxtb	r3, r3
 800f56c:	461a      	mov	r2, r3
 800f56e:	79fb      	ldrb	r3, [r7, #7]
 800f570:	429a      	cmp	r2, r3
 800f572:	d09f      	beq.n	800f4b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f574:	2300      	movs	r3, #0
}
 800f576:	4618      	mov	r0, r3
 800f578:	3740      	adds	r7, #64	; 0x40
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}
	...

0800f580 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f584:	b09f      	sub	sp, #124	; 0x7c
 800f586:	af00      	add	r7, sp, #0
 800f588:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f58a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	691b      	ldr	r3, [r3, #16]
 800f590:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800f594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f596:	68d9      	ldr	r1, [r3, #12]
 800f598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f59a:	681a      	ldr	r2, [r3, #0]
 800f59c:	ea40 0301 	orr.w	r3, r0, r1
 800f5a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f5a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5a4:	689a      	ldr	r2, [r3, #8]
 800f5a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5a8:	691b      	ldr	r3, [r3, #16]
 800f5aa:	431a      	orrs	r2, r3
 800f5ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5ae:	695b      	ldr	r3, [r3, #20]
 800f5b0:	431a      	orrs	r2, r3
 800f5b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5b4:	69db      	ldr	r3, [r3, #28]
 800f5b6:	4313      	orrs	r3, r2
 800f5b8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800f5ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	68db      	ldr	r3, [r3, #12]
 800f5c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800f5c4:	f021 010c 	bic.w	r1, r1, #12
 800f5c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5ca:	681a      	ldr	r2, [r3, #0]
 800f5cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f5ce:	430b      	orrs	r3, r1
 800f5d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f5d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	695b      	ldr	r3, [r3, #20]
 800f5d8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800f5dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5de:	6999      	ldr	r1, [r3, #24]
 800f5e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5e2:	681a      	ldr	r2, [r3, #0]
 800f5e4:	ea40 0301 	orr.w	r3, r0, r1
 800f5e8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f5ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5ec:	681a      	ldr	r2, [r3, #0]
 800f5ee:	4bc5      	ldr	r3, [pc, #788]	; (800f904 <UART_SetConfig+0x384>)
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	d004      	beq.n	800f5fe <UART_SetConfig+0x7e>
 800f5f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5f6:	681a      	ldr	r2, [r3, #0]
 800f5f8:	4bc3      	ldr	r3, [pc, #780]	; (800f908 <UART_SetConfig+0x388>)
 800f5fa:	429a      	cmp	r2, r3
 800f5fc:	d103      	bne.n	800f606 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f5fe:	f7fd f865 	bl	800c6cc <HAL_RCC_GetPCLK2Freq>
 800f602:	6778      	str	r0, [r7, #116]	; 0x74
 800f604:	e002      	b.n	800f60c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f606:	f7fd f84d 	bl	800c6a4 <HAL_RCC_GetPCLK1Freq>
 800f60a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f60c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f60e:	69db      	ldr	r3, [r3, #28]
 800f610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f614:	f040 80b6 	bne.w	800f784 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f61a:	461c      	mov	r4, r3
 800f61c:	f04f 0500 	mov.w	r5, #0
 800f620:	4622      	mov	r2, r4
 800f622:	462b      	mov	r3, r5
 800f624:	1891      	adds	r1, r2, r2
 800f626:	6439      	str	r1, [r7, #64]	; 0x40
 800f628:	415b      	adcs	r3, r3
 800f62a:	647b      	str	r3, [r7, #68]	; 0x44
 800f62c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f630:	1912      	adds	r2, r2, r4
 800f632:	eb45 0303 	adc.w	r3, r5, r3
 800f636:	f04f 0000 	mov.w	r0, #0
 800f63a:	f04f 0100 	mov.w	r1, #0
 800f63e:	00d9      	lsls	r1, r3, #3
 800f640:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f644:	00d0      	lsls	r0, r2, #3
 800f646:	4602      	mov	r2, r0
 800f648:	460b      	mov	r3, r1
 800f64a:	1911      	adds	r1, r2, r4
 800f64c:	6639      	str	r1, [r7, #96]	; 0x60
 800f64e:	416b      	adcs	r3, r5
 800f650:	667b      	str	r3, [r7, #100]	; 0x64
 800f652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f654:	685b      	ldr	r3, [r3, #4]
 800f656:	461a      	mov	r2, r3
 800f658:	f04f 0300 	mov.w	r3, #0
 800f65c:	1891      	adds	r1, r2, r2
 800f65e:	63b9      	str	r1, [r7, #56]	; 0x38
 800f660:	415b      	adcs	r3, r3
 800f662:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f664:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f668:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800f66c:	f7f1 fb7c 	bl	8000d68 <__aeabi_uldivmod>
 800f670:	4602      	mov	r2, r0
 800f672:	460b      	mov	r3, r1
 800f674:	4ba5      	ldr	r3, [pc, #660]	; (800f90c <UART_SetConfig+0x38c>)
 800f676:	fba3 2302 	umull	r2, r3, r3, r2
 800f67a:	095b      	lsrs	r3, r3, #5
 800f67c:	011e      	lsls	r6, r3, #4
 800f67e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f680:	461c      	mov	r4, r3
 800f682:	f04f 0500 	mov.w	r5, #0
 800f686:	4622      	mov	r2, r4
 800f688:	462b      	mov	r3, r5
 800f68a:	1891      	adds	r1, r2, r2
 800f68c:	6339      	str	r1, [r7, #48]	; 0x30
 800f68e:	415b      	adcs	r3, r3
 800f690:	637b      	str	r3, [r7, #52]	; 0x34
 800f692:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f696:	1912      	adds	r2, r2, r4
 800f698:	eb45 0303 	adc.w	r3, r5, r3
 800f69c:	f04f 0000 	mov.w	r0, #0
 800f6a0:	f04f 0100 	mov.w	r1, #0
 800f6a4:	00d9      	lsls	r1, r3, #3
 800f6a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f6aa:	00d0      	lsls	r0, r2, #3
 800f6ac:	4602      	mov	r2, r0
 800f6ae:	460b      	mov	r3, r1
 800f6b0:	1911      	adds	r1, r2, r4
 800f6b2:	65b9      	str	r1, [r7, #88]	; 0x58
 800f6b4:	416b      	adcs	r3, r5
 800f6b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f6b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6ba:	685b      	ldr	r3, [r3, #4]
 800f6bc:	461a      	mov	r2, r3
 800f6be:	f04f 0300 	mov.w	r3, #0
 800f6c2:	1891      	adds	r1, r2, r2
 800f6c4:	62b9      	str	r1, [r7, #40]	; 0x28
 800f6c6:	415b      	adcs	r3, r3
 800f6c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f6ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f6ce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800f6d2:	f7f1 fb49 	bl	8000d68 <__aeabi_uldivmod>
 800f6d6:	4602      	mov	r2, r0
 800f6d8:	460b      	mov	r3, r1
 800f6da:	4b8c      	ldr	r3, [pc, #560]	; (800f90c <UART_SetConfig+0x38c>)
 800f6dc:	fba3 1302 	umull	r1, r3, r3, r2
 800f6e0:	095b      	lsrs	r3, r3, #5
 800f6e2:	2164      	movs	r1, #100	; 0x64
 800f6e4:	fb01 f303 	mul.w	r3, r1, r3
 800f6e8:	1ad3      	subs	r3, r2, r3
 800f6ea:	00db      	lsls	r3, r3, #3
 800f6ec:	3332      	adds	r3, #50	; 0x32
 800f6ee:	4a87      	ldr	r2, [pc, #540]	; (800f90c <UART_SetConfig+0x38c>)
 800f6f0:	fba2 2303 	umull	r2, r3, r2, r3
 800f6f4:	095b      	lsrs	r3, r3, #5
 800f6f6:	005b      	lsls	r3, r3, #1
 800f6f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f6fc:	441e      	add	r6, r3
 800f6fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f700:	4618      	mov	r0, r3
 800f702:	f04f 0100 	mov.w	r1, #0
 800f706:	4602      	mov	r2, r0
 800f708:	460b      	mov	r3, r1
 800f70a:	1894      	adds	r4, r2, r2
 800f70c:	623c      	str	r4, [r7, #32]
 800f70e:	415b      	adcs	r3, r3
 800f710:	627b      	str	r3, [r7, #36]	; 0x24
 800f712:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f716:	1812      	adds	r2, r2, r0
 800f718:	eb41 0303 	adc.w	r3, r1, r3
 800f71c:	f04f 0400 	mov.w	r4, #0
 800f720:	f04f 0500 	mov.w	r5, #0
 800f724:	00dd      	lsls	r5, r3, #3
 800f726:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f72a:	00d4      	lsls	r4, r2, #3
 800f72c:	4622      	mov	r2, r4
 800f72e:	462b      	mov	r3, r5
 800f730:	1814      	adds	r4, r2, r0
 800f732:	653c      	str	r4, [r7, #80]	; 0x50
 800f734:	414b      	adcs	r3, r1
 800f736:	657b      	str	r3, [r7, #84]	; 0x54
 800f738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f73a:	685b      	ldr	r3, [r3, #4]
 800f73c:	461a      	mov	r2, r3
 800f73e:	f04f 0300 	mov.w	r3, #0
 800f742:	1891      	adds	r1, r2, r2
 800f744:	61b9      	str	r1, [r7, #24]
 800f746:	415b      	adcs	r3, r3
 800f748:	61fb      	str	r3, [r7, #28]
 800f74a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f74e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f752:	f7f1 fb09 	bl	8000d68 <__aeabi_uldivmod>
 800f756:	4602      	mov	r2, r0
 800f758:	460b      	mov	r3, r1
 800f75a:	4b6c      	ldr	r3, [pc, #432]	; (800f90c <UART_SetConfig+0x38c>)
 800f75c:	fba3 1302 	umull	r1, r3, r3, r2
 800f760:	095b      	lsrs	r3, r3, #5
 800f762:	2164      	movs	r1, #100	; 0x64
 800f764:	fb01 f303 	mul.w	r3, r1, r3
 800f768:	1ad3      	subs	r3, r2, r3
 800f76a:	00db      	lsls	r3, r3, #3
 800f76c:	3332      	adds	r3, #50	; 0x32
 800f76e:	4a67      	ldr	r2, [pc, #412]	; (800f90c <UART_SetConfig+0x38c>)
 800f770:	fba2 2303 	umull	r2, r3, r2, r3
 800f774:	095b      	lsrs	r3, r3, #5
 800f776:	f003 0207 	and.w	r2, r3, #7
 800f77a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	4432      	add	r2, r6
 800f780:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800f782:	e0b9      	b.n	800f8f8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f786:	461c      	mov	r4, r3
 800f788:	f04f 0500 	mov.w	r5, #0
 800f78c:	4622      	mov	r2, r4
 800f78e:	462b      	mov	r3, r5
 800f790:	1891      	adds	r1, r2, r2
 800f792:	6139      	str	r1, [r7, #16]
 800f794:	415b      	adcs	r3, r3
 800f796:	617b      	str	r3, [r7, #20]
 800f798:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f79c:	1912      	adds	r2, r2, r4
 800f79e:	eb45 0303 	adc.w	r3, r5, r3
 800f7a2:	f04f 0000 	mov.w	r0, #0
 800f7a6:	f04f 0100 	mov.w	r1, #0
 800f7aa:	00d9      	lsls	r1, r3, #3
 800f7ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f7b0:	00d0      	lsls	r0, r2, #3
 800f7b2:	4602      	mov	r2, r0
 800f7b4:	460b      	mov	r3, r1
 800f7b6:	eb12 0804 	adds.w	r8, r2, r4
 800f7ba:	eb43 0905 	adc.w	r9, r3, r5
 800f7be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7c0:	685b      	ldr	r3, [r3, #4]
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f04f 0100 	mov.w	r1, #0
 800f7c8:	f04f 0200 	mov.w	r2, #0
 800f7cc:	f04f 0300 	mov.w	r3, #0
 800f7d0:	008b      	lsls	r3, r1, #2
 800f7d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f7d6:	0082      	lsls	r2, r0, #2
 800f7d8:	4640      	mov	r0, r8
 800f7da:	4649      	mov	r1, r9
 800f7dc:	f7f1 fac4 	bl	8000d68 <__aeabi_uldivmod>
 800f7e0:	4602      	mov	r2, r0
 800f7e2:	460b      	mov	r3, r1
 800f7e4:	4b49      	ldr	r3, [pc, #292]	; (800f90c <UART_SetConfig+0x38c>)
 800f7e6:	fba3 2302 	umull	r2, r3, r3, r2
 800f7ea:	095b      	lsrs	r3, r3, #5
 800f7ec:	011e      	lsls	r6, r3, #4
 800f7ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f04f 0100 	mov.w	r1, #0
 800f7f6:	4602      	mov	r2, r0
 800f7f8:	460b      	mov	r3, r1
 800f7fa:	1894      	adds	r4, r2, r2
 800f7fc:	60bc      	str	r4, [r7, #8]
 800f7fe:	415b      	adcs	r3, r3
 800f800:	60fb      	str	r3, [r7, #12]
 800f802:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f806:	1812      	adds	r2, r2, r0
 800f808:	eb41 0303 	adc.w	r3, r1, r3
 800f80c:	f04f 0400 	mov.w	r4, #0
 800f810:	f04f 0500 	mov.w	r5, #0
 800f814:	00dd      	lsls	r5, r3, #3
 800f816:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f81a:	00d4      	lsls	r4, r2, #3
 800f81c:	4622      	mov	r2, r4
 800f81e:	462b      	mov	r3, r5
 800f820:	1814      	adds	r4, r2, r0
 800f822:	64bc      	str	r4, [r7, #72]	; 0x48
 800f824:	414b      	adcs	r3, r1
 800f826:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f82a:	685b      	ldr	r3, [r3, #4]
 800f82c:	4618      	mov	r0, r3
 800f82e:	f04f 0100 	mov.w	r1, #0
 800f832:	f04f 0200 	mov.w	r2, #0
 800f836:	f04f 0300 	mov.w	r3, #0
 800f83a:	008b      	lsls	r3, r1, #2
 800f83c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f840:	0082      	lsls	r2, r0, #2
 800f842:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800f846:	f7f1 fa8f 	bl	8000d68 <__aeabi_uldivmod>
 800f84a:	4602      	mov	r2, r0
 800f84c:	460b      	mov	r3, r1
 800f84e:	4b2f      	ldr	r3, [pc, #188]	; (800f90c <UART_SetConfig+0x38c>)
 800f850:	fba3 1302 	umull	r1, r3, r3, r2
 800f854:	095b      	lsrs	r3, r3, #5
 800f856:	2164      	movs	r1, #100	; 0x64
 800f858:	fb01 f303 	mul.w	r3, r1, r3
 800f85c:	1ad3      	subs	r3, r2, r3
 800f85e:	011b      	lsls	r3, r3, #4
 800f860:	3332      	adds	r3, #50	; 0x32
 800f862:	4a2a      	ldr	r2, [pc, #168]	; (800f90c <UART_SetConfig+0x38c>)
 800f864:	fba2 2303 	umull	r2, r3, r2, r3
 800f868:	095b      	lsrs	r3, r3, #5
 800f86a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f86e:	441e      	add	r6, r3
 800f870:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f872:	4618      	mov	r0, r3
 800f874:	f04f 0100 	mov.w	r1, #0
 800f878:	4602      	mov	r2, r0
 800f87a:	460b      	mov	r3, r1
 800f87c:	1894      	adds	r4, r2, r2
 800f87e:	603c      	str	r4, [r7, #0]
 800f880:	415b      	adcs	r3, r3
 800f882:	607b      	str	r3, [r7, #4]
 800f884:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f888:	1812      	adds	r2, r2, r0
 800f88a:	eb41 0303 	adc.w	r3, r1, r3
 800f88e:	f04f 0400 	mov.w	r4, #0
 800f892:	f04f 0500 	mov.w	r5, #0
 800f896:	00dd      	lsls	r5, r3, #3
 800f898:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f89c:	00d4      	lsls	r4, r2, #3
 800f89e:	4622      	mov	r2, r4
 800f8a0:	462b      	mov	r3, r5
 800f8a2:	eb12 0a00 	adds.w	sl, r2, r0
 800f8a6:	eb43 0b01 	adc.w	fp, r3, r1
 800f8aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8ac:	685b      	ldr	r3, [r3, #4]
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f04f 0100 	mov.w	r1, #0
 800f8b4:	f04f 0200 	mov.w	r2, #0
 800f8b8:	f04f 0300 	mov.w	r3, #0
 800f8bc:	008b      	lsls	r3, r1, #2
 800f8be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f8c2:	0082      	lsls	r2, r0, #2
 800f8c4:	4650      	mov	r0, sl
 800f8c6:	4659      	mov	r1, fp
 800f8c8:	f7f1 fa4e 	bl	8000d68 <__aeabi_uldivmod>
 800f8cc:	4602      	mov	r2, r0
 800f8ce:	460b      	mov	r3, r1
 800f8d0:	4b0e      	ldr	r3, [pc, #56]	; (800f90c <UART_SetConfig+0x38c>)
 800f8d2:	fba3 1302 	umull	r1, r3, r3, r2
 800f8d6:	095b      	lsrs	r3, r3, #5
 800f8d8:	2164      	movs	r1, #100	; 0x64
 800f8da:	fb01 f303 	mul.w	r3, r1, r3
 800f8de:	1ad3      	subs	r3, r2, r3
 800f8e0:	011b      	lsls	r3, r3, #4
 800f8e2:	3332      	adds	r3, #50	; 0x32
 800f8e4:	4a09      	ldr	r2, [pc, #36]	; (800f90c <UART_SetConfig+0x38c>)
 800f8e6:	fba2 2303 	umull	r2, r3, r2, r3
 800f8ea:	095b      	lsrs	r3, r3, #5
 800f8ec:	f003 020f 	and.w	r2, r3, #15
 800f8f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	4432      	add	r2, r6
 800f8f6:	609a      	str	r2, [r3, #8]
}
 800f8f8:	bf00      	nop
 800f8fa:	377c      	adds	r7, #124	; 0x7c
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f902:	bf00      	nop
 800f904:	40011000 	.word	0x40011000
 800f908:	40011400 	.word	0x40011400
 800f90c:	51eb851f 	.word	0x51eb851f

0800f910 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f910:	b480      	push	{r7}
 800f912:	b087      	sub	sp, #28
 800f914:	af00      	add	r7, sp, #0
 800f916:	60f8      	str	r0, [r7, #12]
 800f918:	60b9      	str	r1, [r7, #8]
 800f91a:	4613      	mov	r3, r2
 800f91c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f91e:	79fb      	ldrb	r3, [r7, #7]
 800f920:	2b02      	cmp	r3, #2
 800f922:	d165      	bne.n	800f9f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	4a41      	ldr	r2, [pc, #260]	; (800fa2c <USB_SetTurnaroundTime+0x11c>)
 800f928:	4293      	cmp	r3, r2
 800f92a:	d906      	bls.n	800f93a <USB_SetTurnaroundTime+0x2a>
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	4a40      	ldr	r2, [pc, #256]	; (800fa30 <USB_SetTurnaroundTime+0x120>)
 800f930:	4293      	cmp	r3, r2
 800f932:	d202      	bcs.n	800f93a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f934:	230f      	movs	r3, #15
 800f936:	617b      	str	r3, [r7, #20]
 800f938:	e062      	b.n	800fa00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	4a3c      	ldr	r2, [pc, #240]	; (800fa30 <USB_SetTurnaroundTime+0x120>)
 800f93e:	4293      	cmp	r3, r2
 800f940:	d306      	bcc.n	800f950 <USB_SetTurnaroundTime+0x40>
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	4a3b      	ldr	r2, [pc, #236]	; (800fa34 <USB_SetTurnaroundTime+0x124>)
 800f946:	4293      	cmp	r3, r2
 800f948:	d202      	bcs.n	800f950 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f94a:	230e      	movs	r3, #14
 800f94c:	617b      	str	r3, [r7, #20]
 800f94e:	e057      	b.n	800fa00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f950:	68bb      	ldr	r3, [r7, #8]
 800f952:	4a38      	ldr	r2, [pc, #224]	; (800fa34 <USB_SetTurnaroundTime+0x124>)
 800f954:	4293      	cmp	r3, r2
 800f956:	d306      	bcc.n	800f966 <USB_SetTurnaroundTime+0x56>
 800f958:	68bb      	ldr	r3, [r7, #8]
 800f95a:	4a37      	ldr	r2, [pc, #220]	; (800fa38 <USB_SetTurnaroundTime+0x128>)
 800f95c:	4293      	cmp	r3, r2
 800f95e:	d202      	bcs.n	800f966 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f960:	230d      	movs	r3, #13
 800f962:	617b      	str	r3, [r7, #20]
 800f964:	e04c      	b.n	800fa00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	4a33      	ldr	r2, [pc, #204]	; (800fa38 <USB_SetTurnaroundTime+0x128>)
 800f96a:	4293      	cmp	r3, r2
 800f96c:	d306      	bcc.n	800f97c <USB_SetTurnaroundTime+0x6c>
 800f96e:	68bb      	ldr	r3, [r7, #8]
 800f970:	4a32      	ldr	r2, [pc, #200]	; (800fa3c <USB_SetTurnaroundTime+0x12c>)
 800f972:	4293      	cmp	r3, r2
 800f974:	d802      	bhi.n	800f97c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f976:	230c      	movs	r3, #12
 800f978:	617b      	str	r3, [r7, #20]
 800f97a:	e041      	b.n	800fa00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	4a2f      	ldr	r2, [pc, #188]	; (800fa3c <USB_SetTurnaroundTime+0x12c>)
 800f980:	4293      	cmp	r3, r2
 800f982:	d906      	bls.n	800f992 <USB_SetTurnaroundTime+0x82>
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	4a2e      	ldr	r2, [pc, #184]	; (800fa40 <USB_SetTurnaroundTime+0x130>)
 800f988:	4293      	cmp	r3, r2
 800f98a:	d802      	bhi.n	800f992 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f98c:	230b      	movs	r3, #11
 800f98e:	617b      	str	r3, [r7, #20]
 800f990:	e036      	b.n	800fa00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	4a2a      	ldr	r2, [pc, #168]	; (800fa40 <USB_SetTurnaroundTime+0x130>)
 800f996:	4293      	cmp	r3, r2
 800f998:	d906      	bls.n	800f9a8 <USB_SetTurnaroundTime+0x98>
 800f99a:	68bb      	ldr	r3, [r7, #8]
 800f99c:	4a29      	ldr	r2, [pc, #164]	; (800fa44 <USB_SetTurnaroundTime+0x134>)
 800f99e:	4293      	cmp	r3, r2
 800f9a0:	d802      	bhi.n	800f9a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f9a2:	230a      	movs	r3, #10
 800f9a4:	617b      	str	r3, [r7, #20]
 800f9a6:	e02b      	b.n	800fa00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	4a26      	ldr	r2, [pc, #152]	; (800fa44 <USB_SetTurnaroundTime+0x134>)
 800f9ac:	4293      	cmp	r3, r2
 800f9ae:	d906      	bls.n	800f9be <USB_SetTurnaroundTime+0xae>
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	4a25      	ldr	r2, [pc, #148]	; (800fa48 <USB_SetTurnaroundTime+0x138>)
 800f9b4:	4293      	cmp	r3, r2
 800f9b6:	d202      	bcs.n	800f9be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f9b8:	2309      	movs	r3, #9
 800f9ba:	617b      	str	r3, [r7, #20]
 800f9bc:	e020      	b.n	800fa00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	4a21      	ldr	r2, [pc, #132]	; (800fa48 <USB_SetTurnaroundTime+0x138>)
 800f9c2:	4293      	cmp	r3, r2
 800f9c4:	d306      	bcc.n	800f9d4 <USB_SetTurnaroundTime+0xc4>
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	4a20      	ldr	r2, [pc, #128]	; (800fa4c <USB_SetTurnaroundTime+0x13c>)
 800f9ca:	4293      	cmp	r3, r2
 800f9cc:	d802      	bhi.n	800f9d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f9ce:	2308      	movs	r3, #8
 800f9d0:	617b      	str	r3, [r7, #20]
 800f9d2:	e015      	b.n	800fa00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	4a1d      	ldr	r2, [pc, #116]	; (800fa4c <USB_SetTurnaroundTime+0x13c>)
 800f9d8:	4293      	cmp	r3, r2
 800f9da:	d906      	bls.n	800f9ea <USB_SetTurnaroundTime+0xda>
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	4a1c      	ldr	r2, [pc, #112]	; (800fa50 <USB_SetTurnaroundTime+0x140>)
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	d202      	bcs.n	800f9ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f9e4:	2307      	movs	r3, #7
 800f9e6:	617b      	str	r3, [r7, #20]
 800f9e8:	e00a      	b.n	800fa00 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f9ea:	2306      	movs	r3, #6
 800f9ec:	617b      	str	r3, [r7, #20]
 800f9ee:	e007      	b.n	800fa00 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f9f0:	79fb      	ldrb	r3, [r7, #7]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d102      	bne.n	800f9fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f9f6:	2309      	movs	r3, #9
 800f9f8:	617b      	str	r3, [r7, #20]
 800f9fa:	e001      	b.n	800fa00 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f9fc:	2309      	movs	r3, #9
 800f9fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	68db      	ldr	r3, [r3, #12]
 800fa04:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	68da      	ldr	r2, [r3, #12]
 800fa10:	697b      	ldr	r3, [r7, #20]
 800fa12:	029b      	lsls	r3, r3, #10
 800fa14:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800fa18:	431a      	orrs	r2, r3
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fa1e:	2300      	movs	r3, #0
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	371c      	adds	r7, #28
 800fa24:	46bd      	mov	sp, r7
 800fa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2a:	4770      	bx	lr
 800fa2c:	00d8acbf 	.word	0x00d8acbf
 800fa30:	00e4e1c0 	.word	0x00e4e1c0
 800fa34:	00f42400 	.word	0x00f42400
 800fa38:	01067380 	.word	0x01067380
 800fa3c:	011a499f 	.word	0x011a499f
 800fa40:	01312cff 	.word	0x01312cff
 800fa44:	014ca43f 	.word	0x014ca43f
 800fa48:	016e3600 	.word	0x016e3600
 800fa4c:	01a6ab1f 	.word	0x01a6ab1f
 800fa50:	01e84800 	.word	0x01e84800

0800fa54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fa54:	b480      	push	{r7}
 800fa56:	b085      	sub	sp, #20
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	019b      	lsls	r3, r3, #6
 800fa66:	f043 0220 	orr.w	r2, r3, #32
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	3301      	adds	r3, #1
 800fa72:	60fb      	str	r3, [r7, #12]
 800fa74:	4a08      	ldr	r2, [pc, #32]	; (800fa98 <USB_FlushTxFifo+0x44>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d901      	bls.n	800fa7e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800fa7a:	2303      	movs	r3, #3
 800fa7c:	e006      	b.n	800fa8c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	691b      	ldr	r3, [r3, #16]
 800fa82:	f003 0320 	and.w	r3, r3, #32
 800fa86:	2b20      	cmp	r3, #32
 800fa88:	d0f1      	beq.n	800fa6e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800fa8a:	2300      	movs	r3, #0
}
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3714      	adds	r7, #20
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr
 800fa98:	00030d40 	.word	0x00030d40

0800fa9c <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	b087      	sub	sp, #28
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800faa8:	693b      	ldr	r3, [r7, #16]
 800faaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800faae:	689b      	ldr	r3, [r3, #8]
 800fab0:	f003 0306 	and.w	r3, r3, #6
 800fab4:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d102      	bne.n	800fac2 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fabc:	2300      	movs	r3, #0
 800fabe:	75fb      	strb	r3, [r7, #23]
 800fac0:	e00a      	b.n	800fad8 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	2b02      	cmp	r3, #2
 800fac6:	d002      	beq.n	800face <USB_GetDevSpeed+0x32>
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	2b06      	cmp	r3, #6
 800facc:	d102      	bne.n	800fad4 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800face:	2302      	movs	r3, #2
 800fad0:	75fb      	strb	r3, [r7, #23]
 800fad2:	e001      	b.n	800fad8 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fad4:	230f      	movs	r3, #15
 800fad6:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fad8:	7dfb      	ldrb	r3, [r7, #23]
}
 800fada:	4618      	mov	r0, r3
 800fadc:	371c      	adds	r7, #28
 800fade:	46bd      	mov	sp, r7
 800fae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae4:	4770      	bx	lr

0800fae6 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fae6:	b480      	push	{r7}
 800fae8:	b085      	sub	sp, #20
 800faea:	af00      	add	r7, sp, #0
 800faec:	6078      	str	r0, [r7, #4]
 800faee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	781b      	ldrb	r3, [r3, #0]
 800faf8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	785b      	ldrb	r3, [r3, #1]
 800fafe:	2b01      	cmp	r3, #1
 800fb00:	d13a      	bne.n	800fb78 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb08:	69da      	ldr	r2, [r3, #28]
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	781b      	ldrb	r3, [r3, #0]
 800fb0e:	f003 030f 	and.w	r3, r3, #15
 800fb12:	2101      	movs	r1, #1
 800fb14:	fa01 f303 	lsl.w	r3, r1, r3
 800fb18:	b29b      	uxth	r3, r3
 800fb1a:	68f9      	ldr	r1, [r7, #12]
 800fb1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fb20:	4313      	orrs	r3, r2
 800fb22:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	015a      	lsls	r2, r3, #5
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	4413      	add	r3, r2
 800fb2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d155      	bne.n	800fbe6 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fb3a:	68bb      	ldr	r3, [r7, #8]
 800fb3c:	015a      	lsls	r2, r3, #5
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	4413      	add	r3, r2
 800fb42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb46:	681a      	ldr	r2, [r3, #0]
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	689b      	ldr	r3, [r3, #8]
 800fb4c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	78db      	ldrb	r3, [r3, #3]
 800fb54:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fb56:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	059b      	lsls	r3, r3, #22
 800fb5c:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fb5e:	4313      	orrs	r3, r2
 800fb60:	68ba      	ldr	r2, [r7, #8]
 800fb62:	0151      	lsls	r1, r2, #5
 800fb64:	68fa      	ldr	r2, [r7, #12]
 800fb66:	440a      	add	r2, r1
 800fb68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fb70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fb74:	6013      	str	r3, [r2, #0]
 800fb76:	e036      	b.n	800fbe6 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb7e:	69da      	ldr	r2, [r3, #28]
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	781b      	ldrb	r3, [r3, #0]
 800fb84:	f003 030f 	and.w	r3, r3, #15
 800fb88:	2101      	movs	r1, #1
 800fb8a:	fa01 f303 	lsl.w	r3, r1, r3
 800fb8e:	041b      	lsls	r3, r3, #16
 800fb90:	68f9      	ldr	r1, [r7, #12]
 800fb92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fb96:	4313      	orrs	r3, r2
 800fb98:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	015a      	lsls	r2, r3, #5
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	4413      	add	r3, r2
 800fba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d11a      	bne.n	800fbe6 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fbb0:	68bb      	ldr	r3, [r7, #8]
 800fbb2:	015a      	lsls	r2, r3, #5
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	4413      	add	r3, r2
 800fbb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbbc:	681a      	ldr	r2, [r3, #0]
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	689b      	ldr	r3, [r3, #8]
 800fbc2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	78db      	ldrb	r3, [r3, #3]
 800fbca:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fbcc:	430b      	orrs	r3, r1
 800fbce:	4313      	orrs	r3, r2
 800fbd0:	68ba      	ldr	r2, [r7, #8]
 800fbd2:	0151      	lsls	r1, r2, #5
 800fbd4:	68fa      	ldr	r2, [r7, #12]
 800fbd6:	440a      	add	r2, r1
 800fbd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fbdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fbe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fbe4:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800fbe6:	2300      	movs	r3, #0
}
 800fbe8:	4618      	mov	r0, r3
 800fbea:	3714      	adds	r7, #20
 800fbec:	46bd      	mov	sp, r7
 800fbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf2:	4770      	bx	lr

0800fbf4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b08a      	sub	sp, #40	; 0x28
 800fbf8:	af02      	add	r7, sp, #8
 800fbfa:	60f8      	str	r0, [r7, #12]
 800fbfc:	60b9      	str	r1, [r7, #8]
 800fbfe:	4613      	mov	r3, r2
 800fc00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800fc06:	68bb      	ldr	r3, [r7, #8]
 800fc08:	781b      	ldrb	r3, [r3, #0]
 800fc0a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	785b      	ldrb	r3, [r3, #1]
 800fc10:	2b01      	cmp	r3, #1
 800fc12:	f040 815c 	bne.w	800fece <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	695b      	ldr	r3, [r3, #20]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d132      	bne.n	800fc84 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fc1e:	69bb      	ldr	r3, [r7, #24]
 800fc20:	015a      	lsls	r2, r3, #5
 800fc22:	69fb      	ldr	r3, [r7, #28]
 800fc24:	4413      	add	r3, r2
 800fc26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc2a:	691b      	ldr	r3, [r3, #16]
 800fc2c:	69ba      	ldr	r2, [r7, #24]
 800fc2e:	0151      	lsls	r1, r2, #5
 800fc30:	69fa      	ldr	r2, [r7, #28]
 800fc32:	440a      	add	r2, r1
 800fc34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fc3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fc40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fc42:	69bb      	ldr	r3, [r7, #24]
 800fc44:	015a      	lsls	r2, r3, #5
 800fc46:	69fb      	ldr	r3, [r7, #28]
 800fc48:	4413      	add	r3, r2
 800fc4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc4e:	691b      	ldr	r3, [r3, #16]
 800fc50:	69ba      	ldr	r2, [r7, #24]
 800fc52:	0151      	lsls	r1, r2, #5
 800fc54:	69fa      	ldr	r2, [r7, #28]
 800fc56:	440a      	add	r2, r1
 800fc58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fc60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fc62:	69bb      	ldr	r3, [r7, #24]
 800fc64:	015a      	lsls	r2, r3, #5
 800fc66:	69fb      	ldr	r3, [r7, #28]
 800fc68:	4413      	add	r3, r2
 800fc6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc6e:	691b      	ldr	r3, [r3, #16]
 800fc70:	69ba      	ldr	r2, [r7, #24]
 800fc72:	0151      	lsls	r1, r2, #5
 800fc74:	69fa      	ldr	r2, [r7, #28]
 800fc76:	440a      	add	r2, r1
 800fc78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc7c:	0cdb      	lsrs	r3, r3, #19
 800fc7e:	04db      	lsls	r3, r3, #19
 800fc80:	6113      	str	r3, [r2, #16]
 800fc82:	e074      	b.n	800fd6e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fc84:	69bb      	ldr	r3, [r7, #24]
 800fc86:	015a      	lsls	r2, r3, #5
 800fc88:	69fb      	ldr	r3, [r7, #28]
 800fc8a:	4413      	add	r3, r2
 800fc8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc90:	691b      	ldr	r3, [r3, #16]
 800fc92:	69ba      	ldr	r2, [r7, #24]
 800fc94:	0151      	lsls	r1, r2, #5
 800fc96:	69fa      	ldr	r2, [r7, #28]
 800fc98:	440a      	add	r2, r1
 800fc9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc9e:	0cdb      	lsrs	r3, r3, #19
 800fca0:	04db      	lsls	r3, r3, #19
 800fca2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fca4:	69bb      	ldr	r3, [r7, #24]
 800fca6:	015a      	lsls	r2, r3, #5
 800fca8:	69fb      	ldr	r3, [r7, #28]
 800fcaa:	4413      	add	r3, r2
 800fcac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcb0:	691b      	ldr	r3, [r3, #16]
 800fcb2:	69ba      	ldr	r2, [r7, #24]
 800fcb4:	0151      	lsls	r1, r2, #5
 800fcb6:	69fa      	ldr	r2, [r7, #28]
 800fcb8:	440a      	add	r2, r1
 800fcba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fcbe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fcc2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fcc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800fcc8:	69bb      	ldr	r3, [r7, #24]
 800fcca:	015a      	lsls	r2, r3, #5
 800fccc:	69fb      	ldr	r3, [r7, #28]
 800fcce:	4413      	add	r3, r2
 800fcd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcd4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	6959      	ldr	r1, [r3, #20]
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	689b      	ldr	r3, [r3, #8]
 800fcde:	440b      	add	r3, r1
 800fce0:	1e59      	subs	r1, r3, #1
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	689b      	ldr	r3, [r3, #8]
 800fce6:	fbb1 f3f3 	udiv	r3, r1, r3
 800fcea:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800fcec:	4b9d      	ldr	r3, [pc, #628]	; (800ff64 <USB_EPStartXfer+0x370>)
 800fcee:	400b      	ands	r3, r1
 800fcf0:	69b9      	ldr	r1, [r7, #24]
 800fcf2:	0148      	lsls	r0, r1, #5
 800fcf4:	69f9      	ldr	r1, [r7, #28]
 800fcf6:	4401      	add	r1, r0
 800fcf8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fcfc:	4313      	orrs	r3, r2
 800fcfe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fd00:	69bb      	ldr	r3, [r7, #24]
 800fd02:	015a      	lsls	r2, r3, #5
 800fd04:	69fb      	ldr	r3, [r7, #28]
 800fd06:	4413      	add	r3, r2
 800fd08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd0c:	691a      	ldr	r2, [r3, #16]
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	695b      	ldr	r3, [r3, #20]
 800fd12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fd16:	69b9      	ldr	r1, [r7, #24]
 800fd18:	0148      	lsls	r0, r1, #5
 800fd1a:	69f9      	ldr	r1, [r7, #28]
 800fd1c:	4401      	add	r1, r0
 800fd1e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fd22:	4313      	orrs	r3, r2
 800fd24:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800fd26:	68bb      	ldr	r3, [r7, #8]
 800fd28:	78db      	ldrb	r3, [r3, #3]
 800fd2a:	2b01      	cmp	r3, #1
 800fd2c:	d11f      	bne.n	800fd6e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800fd2e:	69bb      	ldr	r3, [r7, #24]
 800fd30:	015a      	lsls	r2, r3, #5
 800fd32:	69fb      	ldr	r3, [r7, #28]
 800fd34:	4413      	add	r3, r2
 800fd36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd3a:	691b      	ldr	r3, [r3, #16]
 800fd3c:	69ba      	ldr	r2, [r7, #24]
 800fd3e:	0151      	lsls	r1, r2, #5
 800fd40:	69fa      	ldr	r2, [r7, #28]
 800fd42:	440a      	add	r2, r1
 800fd44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd48:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800fd4c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800fd4e:	69bb      	ldr	r3, [r7, #24]
 800fd50:	015a      	lsls	r2, r3, #5
 800fd52:	69fb      	ldr	r3, [r7, #28]
 800fd54:	4413      	add	r3, r2
 800fd56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd5a:	691b      	ldr	r3, [r3, #16]
 800fd5c:	69ba      	ldr	r2, [r7, #24]
 800fd5e:	0151      	lsls	r1, r2, #5
 800fd60:	69fa      	ldr	r2, [r7, #28]
 800fd62:	440a      	add	r2, r1
 800fd64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fd6c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800fd6e:	79fb      	ldrb	r3, [r7, #7]
 800fd70:	2b01      	cmp	r3, #1
 800fd72:	d14b      	bne.n	800fe0c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	691b      	ldr	r3, [r3, #16]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d009      	beq.n	800fd90 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fd7c:	69bb      	ldr	r3, [r7, #24]
 800fd7e:	015a      	lsls	r2, r3, #5
 800fd80:	69fb      	ldr	r3, [r7, #28]
 800fd82:	4413      	add	r3, r2
 800fd84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd88:	461a      	mov	r2, r3
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	691b      	ldr	r3, [r3, #16]
 800fd8e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	78db      	ldrb	r3, [r3, #3]
 800fd94:	2b01      	cmp	r3, #1
 800fd96:	d128      	bne.n	800fdea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fd98:	69fb      	ldr	r3, [r7, #28]
 800fd9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd9e:	689b      	ldr	r3, [r3, #8]
 800fda0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d110      	bne.n	800fdca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fda8:	69bb      	ldr	r3, [r7, #24]
 800fdaa:	015a      	lsls	r2, r3, #5
 800fdac:	69fb      	ldr	r3, [r7, #28]
 800fdae:	4413      	add	r3, r2
 800fdb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	69ba      	ldr	r2, [r7, #24]
 800fdb8:	0151      	lsls	r1, r2, #5
 800fdba:	69fa      	ldr	r2, [r7, #28]
 800fdbc:	440a      	add	r2, r1
 800fdbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fdc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fdc6:	6013      	str	r3, [r2, #0]
 800fdc8:	e00f      	b.n	800fdea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fdca:	69bb      	ldr	r3, [r7, #24]
 800fdcc:	015a      	lsls	r2, r3, #5
 800fdce:	69fb      	ldr	r3, [r7, #28]
 800fdd0:	4413      	add	r3, r2
 800fdd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	69ba      	ldr	r2, [r7, #24]
 800fdda:	0151      	lsls	r1, r2, #5
 800fddc:	69fa      	ldr	r2, [r7, #28]
 800fdde:	440a      	add	r2, r1
 800fde0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fde4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fde8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fdea:	69bb      	ldr	r3, [r7, #24]
 800fdec:	015a      	lsls	r2, r3, #5
 800fdee:	69fb      	ldr	r3, [r7, #28]
 800fdf0:	4413      	add	r3, r2
 800fdf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	69ba      	ldr	r2, [r7, #24]
 800fdfa:	0151      	lsls	r1, r2, #5
 800fdfc:	69fa      	ldr	r2, [r7, #28]
 800fdfe:	440a      	add	r2, r1
 800fe00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fe08:	6013      	str	r3, [r2, #0]
 800fe0a:	e12f      	b.n	801006c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fe0c:	69bb      	ldr	r3, [r7, #24]
 800fe0e:	015a      	lsls	r2, r3, #5
 800fe10:	69fb      	ldr	r3, [r7, #28]
 800fe12:	4413      	add	r3, r2
 800fe14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	69ba      	ldr	r2, [r7, #24]
 800fe1c:	0151      	lsls	r1, r2, #5
 800fe1e:	69fa      	ldr	r2, [r7, #28]
 800fe20:	440a      	add	r2, r1
 800fe22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fe2a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	78db      	ldrb	r3, [r3, #3]
 800fe30:	2b01      	cmp	r3, #1
 800fe32:	d015      	beq.n	800fe60 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800fe34:	68bb      	ldr	r3, [r7, #8]
 800fe36:	695b      	ldr	r3, [r3, #20]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	f000 8117 	beq.w	801006c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fe3e:	69fb      	ldr	r3, [r7, #28]
 800fe40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	781b      	ldrb	r3, [r3, #0]
 800fe4a:	f003 030f 	and.w	r3, r3, #15
 800fe4e:	2101      	movs	r1, #1
 800fe50:	fa01 f303 	lsl.w	r3, r1, r3
 800fe54:	69f9      	ldr	r1, [r7, #28]
 800fe56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe5a:	4313      	orrs	r3, r2
 800fe5c:	634b      	str	r3, [r1, #52]	; 0x34
 800fe5e:	e105      	b.n	801006c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fe60:	69fb      	ldr	r3, [r7, #28]
 800fe62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe66:	689b      	ldr	r3, [r3, #8]
 800fe68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d110      	bne.n	800fe92 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fe70:	69bb      	ldr	r3, [r7, #24]
 800fe72:	015a      	lsls	r2, r3, #5
 800fe74:	69fb      	ldr	r3, [r7, #28]
 800fe76:	4413      	add	r3, r2
 800fe78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	69ba      	ldr	r2, [r7, #24]
 800fe80:	0151      	lsls	r1, r2, #5
 800fe82:	69fa      	ldr	r2, [r7, #28]
 800fe84:	440a      	add	r2, r1
 800fe86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fe8e:	6013      	str	r3, [r2, #0]
 800fe90:	e00f      	b.n	800feb2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fe92:	69bb      	ldr	r3, [r7, #24]
 800fe94:	015a      	lsls	r2, r3, #5
 800fe96:	69fb      	ldr	r3, [r7, #28]
 800fe98:	4413      	add	r3, r2
 800fe9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	69ba      	ldr	r2, [r7, #24]
 800fea2:	0151      	lsls	r1, r2, #5
 800fea4:	69fa      	ldr	r2, [r7, #28]
 800fea6:	440a      	add	r2, r1
 800fea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800feac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800feb0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800feb2:	68bb      	ldr	r3, [r7, #8]
 800feb4:	68d9      	ldr	r1, [r3, #12]
 800feb6:	68bb      	ldr	r3, [r7, #8]
 800feb8:	781a      	ldrb	r2, [r3, #0]
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	695b      	ldr	r3, [r3, #20]
 800febe:	b298      	uxth	r0, r3
 800fec0:	79fb      	ldrb	r3, [r7, #7]
 800fec2:	9300      	str	r3, [sp, #0]
 800fec4:	4603      	mov	r3, r0
 800fec6:	68f8      	ldr	r0, [r7, #12]
 800fec8:	f000 fa2b 	bl	8010322 <USB_WritePacket>
 800fecc:	e0ce      	b.n	801006c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fece:	69bb      	ldr	r3, [r7, #24]
 800fed0:	015a      	lsls	r2, r3, #5
 800fed2:	69fb      	ldr	r3, [r7, #28]
 800fed4:	4413      	add	r3, r2
 800fed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800feda:	691b      	ldr	r3, [r3, #16]
 800fedc:	69ba      	ldr	r2, [r7, #24]
 800fede:	0151      	lsls	r1, r2, #5
 800fee0:	69fa      	ldr	r2, [r7, #28]
 800fee2:	440a      	add	r2, r1
 800fee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fee8:	0cdb      	lsrs	r3, r3, #19
 800feea:	04db      	lsls	r3, r3, #19
 800feec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800feee:	69bb      	ldr	r3, [r7, #24]
 800fef0:	015a      	lsls	r2, r3, #5
 800fef2:	69fb      	ldr	r3, [r7, #28]
 800fef4:	4413      	add	r3, r2
 800fef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fefa:	691b      	ldr	r3, [r3, #16]
 800fefc:	69ba      	ldr	r2, [r7, #24]
 800fefe:	0151      	lsls	r1, r2, #5
 800ff00:	69fa      	ldr	r2, [r7, #28]
 800ff02:	440a      	add	r2, r1
 800ff04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ff0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ff10:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	695b      	ldr	r3, [r3, #20]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d126      	bne.n	800ff68 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ff1a:	69bb      	ldr	r3, [r7, #24]
 800ff1c:	015a      	lsls	r2, r3, #5
 800ff1e:	69fb      	ldr	r3, [r7, #28]
 800ff20:	4413      	add	r3, r2
 800ff22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff26:	691a      	ldr	r2, [r3, #16]
 800ff28:	68bb      	ldr	r3, [r7, #8]
 800ff2a:	689b      	ldr	r3, [r3, #8]
 800ff2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ff30:	69b9      	ldr	r1, [r7, #24]
 800ff32:	0148      	lsls	r0, r1, #5
 800ff34:	69f9      	ldr	r1, [r7, #28]
 800ff36:	4401      	add	r1, r0
 800ff38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ff3c:	4313      	orrs	r3, r2
 800ff3e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ff40:	69bb      	ldr	r3, [r7, #24]
 800ff42:	015a      	lsls	r2, r3, #5
 800ff44:	69fb      	ldr	r3, [r7, #28]
 800ff46:	4413      	add	r3, r2
 800ff48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff4c:	691b      	ldr	r3, [r3, #16]
 800ff4e:	69ba      	ldr	r2, [r7, #24]
 800ff50:	0151      	lsls	r1, r2, #5
 800ff52:	69fa      	ldr	r2, [r7, #28]
 800ff54:	440a      	add	r2, r1
 800ff56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ff5e:	6113      	str	r3, [r2, #16]
 800ff60:	e036      	b.n	800ffd0 <USB_EPStartXfer+0x3dc>
 800ff62:	bf00      	nop
 800ff64:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	695a      	ldr	r2, [r3, #20]
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	689b      	ldr	r3, [r3, #8]
 800ff70:	4413      	add	r3, r2
 800ff72:	1e5a      	subs	r2, r3, #1
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	689b      	ldr	r3, [r3, #8]
 800ff78:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff7c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ff7e:	69bb      	ldr	r3, [r7, #24]
 800ff80:	015a      	lsls	r2, r3, #5
 800ff82:	69fb      	ldr	r3, [r7, #28]
 800ff84:	4413      	add	r3, r2
 800ff86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff8a:	691a      	ldr	r2, [r3, #16]
 800ff8c:	8afb      	ldrh	r3, [r7, #22]
 800ff8e:	04d9      	lsls	r1, r3, #19
 800ff90:	4b39      	ldr	r3, [pc, #228]	; (8010078 <USB_EPStartXfer+0x484>)
 800ff92:	400b      	ands	r3, r1
 800ff94:	69b9      	ldr	r1, [r7, #24]
 800ff96:	0148      	lsls	r0, r1, #5
 800ff98:	69f9      	ldr	r1, [r7, #28]
 800ff9a:	4401      	add	r1, r0
 800ff9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ffa0:	4313      	orrs	r3, r2
 800ffa2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ffa4:	69bb      	ldr	r3, [r7, #24]
 800ffa6:	015a      	lsls	r2, r3, #5
 800ffa8:	69fb      	ldr	r3, [r7, #28]
 800ffaa:	4413      	add	r3, r2
 800ffac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffb0:	691a      	ldr	r2, [r3, #16]
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	689b      	ldr	r3, [r3, #8]
 800ffb6:	8af9      	ldrh	r1, [r7, #22]
 800ffb8:	fb01 f303 	mul.w	r3, r1, r3
 800ffbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ffc0:	69b9      	ldr	r1, [r7, #24]
 800ffc2:	0148      	lsls	r0, r1, #5
 800ffc4:	69f9      	ldr	r1, [r7, #28]
 800ffc6:	4401      	add	r1, r0
 800ffc8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ffcc:	4313      	orrs	r3, r2
 800ffce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ffd0:	79fb      	ldrb	r3, [r7, #7]
 800ffd2:	2b01      	cmp	r3, #1
 800ffd4:	d10d      	bne.n	800fff2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	68db      	ldr	r3, [r3, #12]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d009      	beq.n	800fff2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	68d9      	ldr	r1, [r3, #12]
 800ffe2:	69bb      	ldr	r3, [r7, #24]
 800ffe4:	015a      	lsls	r2, r3, #5
 800ffe6:	69fb      	ldr	r3, [r7, #28]
 800ffe8:	4413      	add	r3, r2
 800ffea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffee:	460a      	mov	r2, r1
 800fff0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	78db      	ldrb	r3, [r3, #3]
 800fff6:	2b01      	cmp	r3, #1
 800fff8:	d128      	bne.n	801004c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fffa:	69fb      	ldr	r3, [r7, #28]
 800fffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010000:	689b      	ldr	r3, [r3, #8]
 8010002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010006:	2b00      	cmp	r3, #0
 8010008:	d110      	bne.n	801002c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801000a:	69bb      	ldr	r3, [r7, #24]
 801000c:	015a      	lsls	r2, r3, #5
 801000e:	69fb      	ldr	r3, [r7, #28]
 8010010:	4413      	add	r3, r2
 8010012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	69ba      	ldr	r2, [r7, #24]
 801001a:	0151      	lsls	r1, r2, #5
 801001c:	69fa      	ldr	r2, [r7, #28]
 801001e:	440a      	add	r2, r1
 8010020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010024:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010028:	6013      	str	r3, [r2, #0]
 801002a:	e00f      	b.n	801004c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801002c:	69bb      	ldr	r3, [r7, #24]
 801002e:	015a      	lsls	r2, r3, #5
 8010030:	69fb      	ldr	r3, [r7, #28]
 8010032:	4413      	add	r3, r2
 8010034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	69ba      	ldr	r2, [r7, #24]
 801003c:	0151      	lsls	r1, r2, #5
 801003e:	69fa      	ldr	r2, [r7, #28]
 8010040:	440a      	add	r2, r1
 8010042:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801004a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801004c:	69bb      	ldr	r3, [r7, #24]
 801004e:	015a      	lsls	r2, r3, #5
 8010050:	69fb      	ldr	r3, [r7, #28]
 8010052:	4413      	add	r3, r2
 8010054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	69ba      	ldr	r2, [r7, #24]
 801005c:	0151      	lsls	r1, r2, #5
 801005e:	69fa      	ldr	r2, [r7, #28]
 8010060:	440a      	add	r2, r1
 8010062:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010066:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801006a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801006c:	2300      	movs	r3, #0
}
 801006e:	4618      	mov	r0, r3
 8010070:	3720      	adds	r7, #32
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}
 8010076:	bf00      	nop
 8010078:	1ff80000 	.word	0x1ff80000

0801007c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801007c:	b480      	push	{r7}
 801007e:	b087      	sub	sp, #28
 8010080:	af00      	add	r7, sp, #0
 8010082:	60f8      	str	r0, [r7, #12]
 8010084:	60b9      	str	r1, [r7, #8]
 8010086:	4613      	mov	r3, r2
 8010088:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	781b      	ldrb	r3, [r3, #0]
 8010092:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010094:	68bb      	ldr	r3, [r7, #8]
 8010096:	785b      	ldrb	r3, [r3, #1]
 8010098:	2b01      	cmp	r3, #1
 801009a:	f040 80cd 	bne.w	8010238 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801009e:	68bb      	ldr	r3, [r7, #8]
 80100a0:	695b      	ldr	r3, [r3, #20]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d132      	bne.n	801010c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80100a6:	693b      	ldr	r3, [r7, #16]
 80100a8:	015a      	lsls	r2, r3, #5
 80100aa:	697b      	ldr	r3, [r7, #20]
 80100ac:	4413      	add	r3, r2
 80100ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100b2:	691b      	ldr	r3, [r3, #16]
 80100b4:	693a      	ldr	r2, [r7, #16]
 80100b6:	0151      	lsls	r1, r2, #5
 80100b8:	697a      	ldr	r2, [r7, #20]
 80100ba:	440a      	add	r2, r1
 80100bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80100c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80100c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80100ca:	693b      	ldr	r3, [r7, #16]
 80100cc:	015a      	lsls	r2, r3, #5
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	4413      	add	r3, r2
 80100d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100d6:	691b      	ldr	r3, [r3, #16]
 80100d8:	693a      	ldr	r2, [r7, #16]
 80100da:	0151      	lsls	r1, r2, #5
 80100dc:	697a      	ldr	r2, [r7, #20]
 80100de:	440a      	add	r2, r1
 80100e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80100e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80100ea:	693b      	ldr	r3, [r7, #16]
 80100ec:	015a      	lsls	r2, r3, #5
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	4413      	add	r3, r2
 80100f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100f6:	691b      	ldr	r3, [r3, #16]
 80100f8:	693a      	ldr	r2, [r7, #16]
 80100fa:	0151      	lsls	r1, r2, #5
 80100fc:	697a      	ldr	r2, [r7, #20]
 80100fe:	440a      	add	r2, r1
 8010100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010104:	0cdb      	lsrs	r3, r3, #19
 8010106:	04db      	lsls	r3, r3, #19
 8010108:	6113      	str	r3, [r2, #16]
 801010a:	e04e      	b.n	80101aa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801010c:	693b      	ldr	r3, [r7, #16]
 801010e:	015a      	lsls	r2, r3, #5
 8010110:	697b      	ldr	r3, [r7, #20]
 8010112:	4413      	add	r3, r2
 8010114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010118:	691b      	ldr	r3, [r3, #16]
 801011a:	693a      	ldr	r2, [r7, #16]
 801011c:	0151      	lsls	r1, r2, #5
 801011e:	697a      	ldr	r2, [r7, #20]
 8010120:	440a      	add	r2, r1
 8010122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010126:	0cdb      	lsrs	r3, r3, #19
 8010128:	04db      	lsls	r3, r3, #19
 801012a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801012c:	693b      	ldr	r3, [r7, #16]
 801012e:	015a      	lsls	r2, r3, #5
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	4413      	add	r3, r2
 8010134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010138:	691b      	ldr	r3, [r3, #16]
 801013a:	693a      	ldr	r2, [r7, #16]
 801013c:	0151      	lsls	r1, r2, #5
 801013e:	697a      	ldr	r2, [r7, #20]
 8010140:	440a      	add	r2, r1
 8010142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010146:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801014a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801014e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010150:	68bb      	ldr	r3, [r7, #8]
 8010152:	695a      	ldr	r2, [r3, #20]
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	689b      	ldr	r3, [r3, #8]
 8010158:	429a      	cmp	r2, r3
 801015a:	d903      	bls.n	8010164 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	689a      	ldr	r2, [r3, #8]
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010164:	693b      	ldr	r3, [r7, #16]
 8010166:	015a      	lsls	r2, r3, #5
 8010168:	697b      	ldr	r3, [r7, #20]
 801016a:	4413      	add	r3, r2
 801016c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010170:	691b      	ldr	r3, [r3, #16]
 8010172:	693a      	ldr	r2, [r7, #16]
 8010174:	0151      	lsls	r1, r2, #5
 8010176:	697a      	ldr	r2, [r7, #20]
 8010178:	440a      	add	r2, r1
 801017a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801017e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010182:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010184:	693b      	ldr	r3, [r7, #16]
 8010186:	015a      	lsls	r2, r3, #5
 8010188:	697b      	ldr	r3, [r7, #20]
 801018a:	4413      	add	r3, r2
 801018c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010190:	691a      	ldr	r2, [r3, #16]
 8010192:	68bb      	ldr	r3, [r7, #8]
 8010194:	695b      	ldr	r3, [r3, #20]
 8010196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801019a:	6939      	ldr	r1, [r7, #16]
 801019c:	0148      	lsls	r0, r1, #5
 801019e:	6979      	ldr	r1, [r7, #20]
 80101a0:	4401      	add	r1, r0
 80101a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80101a6:	4313      	orrs	r3, r2
 80101a8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80101aa:	79fb      	ldrb	r3, [r7, #7]
 80101ac:	2b01      	cmp	r3, #1
 80101ae:	d11e      	bne.n	80101ee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80101b0:	68bb      	ldr	r3, [r7, #8]
 80101b2:	691b      	ldr	r3, [r3, #16]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d009      	beq.n	80101cc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80101b8:	693b      	ldr	r3, [r7, #16]
 80101ba:	015a      	lsls	r2, r3, #5
 80101bc:	697b      	ldr	r3, [r7, #20]
 80101be:	4413      	add	r3, r2
 80101c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101c4:	461a      	mov	r2, r3
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	691b      	ldr	r3, [r3, #16]
 80101ca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80101cc:	693b      	ldr	r3, [r7, #16]
 80101ce:	015a      	lsls	r2, r3, #5
 80101d0:	697b      	ldr	r3, [r7, #20]
 80101d2:	4413      	add	r3, r2
 80101d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	693a      	ldr	r2, [r7, #16]
 80101dc:	0151      	lsls	r1, r2, #5
 80101de:	697a      	ldr	r2, [r7, #20]
 80101e0:	440a      	add	r2, r1
 80101e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80101ea:	6013      	str	r3, [r2, #0]
 80101ec:	e092      	b.n	8010314 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80101ee:	693b      	ldr	r3, [r7, #16]
 80101f0:	015a      	lsls	r2, r3, #5
 80101f2:	697b      	ldr	r3, [r7, #20]
 80101f4:	4413      	add	r3, r2
 80101f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	693a      	ldr	r2, [r7, #16]
 80101fe:	0151      	lsls	r1, r2, #5
 8010200:	697a      	ldr	r2, [r7, #20]
 8010202:	440a      	add	r2, r1
 8010204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010208:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801020c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801020e:	68bb      	ldr	r3, [r7, #8]
 8010210:	695b      	ldr	r3, [r3, #20]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d07e      	beq.n	8010314 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010216:	697b      	ldr	r3, [r7, #20]
 8010218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801021c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	781b      	ldrb	r3, [r3, #0]
 8010222:	f003 030f 	and.w	r3, r3, #15
 8010226:	2101      	movs	r1, #1
 8010228:	fa01 f303 	lsl.w	r3, r1, r3
 801022c:	6979      	ldr	r1, [r7, #20]
 801022e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010232:	4313      	orrs	r3, r2
 8010234:	634b      	str	r3, [r1, #52]	; 0x34
 8010236:	e06d      	b.n	8010314 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010238:	693b      	ldr	r3, [r7, #16]
 801023a:	015a      	lsls	r2, r3, #5
 801023c:	697b      	ldr	r3, [r7, #20]
 801023e:	4413      	add	r3, r2
 8010240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010244:	691b      	ldr	r3, [r3, #16]
 8010246:	693a      	ldr	r2, [r7, #16]
 8010248:	0151      	lsls	r1, r2, #5
 801024a:	697a      	ldr	r2, [r7, #20]
 801024c:	440a      	add	r2, r1
 801024e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010252:	0cdb      	lsrs	r3, r3, #19
 8010254:	04db      	lsls	r3, r3, #19
 8010256:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010258:	693b      	ldr	r3, [r7, #16]
 801025a:	015a      	lsls	r2, r3, #5
 801025c:	697b      	ldr	r3, [r7, #20]
 801025e:	4413      	add	r3, r2
 8010260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010264:	691b      	ldr	r3, [r3, #16]
 8010266:	693a      	ldr	r2, [r7, #16]
 8010268:	0151      	lsls	r1, r2, #5
 801026a:	697a      	ldr	r2, [r7, #20]
 801026c:	440a      	add	r2, r1
 801026e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010272:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010276:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801027a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801027c:	68bb      	ldr	r3, [r7, #8]
 801027e:	695b      	ldr	r3, [r3, #20]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d003      	beq.n	801028c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	689a      	ldr	r2, [r3, #8]
 8010288:	68bb      	ldr	r3, [r7, #8]
 801028a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801028c:	693b      	ldr	r3, [r7, #16]
 801028e:	015a      	lsls	r2, r3, #5
 8010290:	697b      	ldr	r3, [r7, #20]
 8010292:	4413      	add	r3, r2
 8010294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010298:	691b      	ldr	r3, [r3, #16]
 801029a:	693a      	ldr	r2, [r7, #16]
 801029c:	0151      	lsls	r1, r2, #5
 801029e:	697a      	ldr	r2, [r7, #20]
 80102a0:	440a      	add	r2, r1
 80102a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80102aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80102ac:	693b      	ldr	r3, [r7, #16]
 80102ae:	015a      	lsls	r2, r3, #5
 80102b0:	697b      	ldr	r3, [r7, #20]
 80102b2:	4413      	add	r3, r2
 80102b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102b8:	691a      	ldr	r2, [r3, #16]
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	689b      	ldr	r3, [r3, #8]
 80102be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80102c2:	6939      	ldr	r1, [r7, #16]
 80102c4:	0148      	lsls	r0, r1, #5
 80102c6:	6979      	ldr	r1, [r7, #20]
 80102c8:	4401      	add	r1, r0
 80102ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80102ce:	4313      	orrs	r3, r2
 80102d0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80102d2:	79fb      	ldrb	r3, [r7, #7]
 80102d4:	2b01      	cmp	r3, #1
 80102d6:	d10d      	bne.n	80102f4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80102d8:	68bb      	ldr	r3, [r7, #8]
 80102da:	68db      	ldr	r3, [r3, #12]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d009      	beq.n	80102f4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80102e0:	68bb      	ldr	r3, [r7, #8]
 80102e2:	68d9      	ldr	r1, [r3, #12]
 80102e4:	693b      	ldr	r3, [r7, #16]
 80102e6:	015a      	lsls	r2, r3, #5
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	4413      	add	r3, r2
 80102ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102f0:	460a      	mov	r2, r1
 80102f2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80102f4:	693b      	ldr	r3, [r7, #16]
 80102f6:	015a      	lsls	r2, r3, #5
 80102f8:	697b      	ldr	r3, [r7, #20]
 80102fa:	4413      	add	r3, r2
 80102fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	693a      	ldr	r2, [r7, #16]
 8010304:	0151      	lsls	r1, r2, #5
 8010306:	697a      	ldr	r2, [r7, #20]
 8010308:	440a      	add	r2, r1
 801030a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801030e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010312:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010314:	2300      	movs	r3, #0
}
 8010316:	4618      	mov	r0, r3
 8010318:	371c      	adds	r7, #28
 801031a:	46bd      	mov	sp, r7
 801031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010320:	4770      	bx	lr

08010322 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010322:	b480      	push	{r7}
 8010324:	b089      	sub	sp, #36	; 0x24
 8010326:	af00      	add	r7, sp, #0
 8010328:	60f8      	str	r0, [r7, #12]
 801032a:	60b9      	str	r1, [r7, #8]
 801032c:	4611      	mov	r1, r2
 801032e:	461a      	mov	r2, r3
 8010330:	460b      	mov	r3, r1
 8010332:	71fb      	strb	r3, [r7, #7]
 8010334:	4613      	mov	r3, r2
 8010336:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8010340:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010344:	2b00      	cmp	r3, #0
 8010346:	d123      	bne.n	8010390 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010348:	88bb      	ldrh	r3, [r7, #4]
 801034a:	3303      	adds	r3, #3
 801034c:	089b      	lsrs	r3, r3, #2
 801034e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010350:	2300      	movs	r3, #0
 8010352:	61bb      	str	r3, [r7, #24]
 8010354:	e018      	b.n	8010388 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010356:	79fb      	ldrb	r3, [r7, #7]
 8010358:	031a      	lsls	r2, r3, #12
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	4413      	add	r3, r2
 801035e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010362:	461a      	mov	r2, r3
 8010364:	69fb      	ldr	r3, [r7, #28]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	6013      	str	r3, [r2, #0]
      pSrc++;
 801036a:	69fb      	ldr	r3, [r7, #28]
 801036c:	3301      	adds	r3, #1
 801036e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010370:	69fb      	ldr	r3, [r7, #28]
 8010372:	3301      	adds	r3, #1
 8010374:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010376:	69fb      	ldr	r3, [r7, #28]
 8010378:	3301      	adds	r3, #1
 801037a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801037c:	69fb      	ldr	r3, [r7, #28]
 801037e:	3301      	adds	r3, #1
 8010380:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010382:	69bb      	ldr	r3, [r7, #24]
 8010384:	3301      	adds	r3, #1
 8010386:	61bb      	str	r3, [r7, #24]
 8010388:	69ba      	ldr	r2, [r7, #24]
 801038a:	693b      	ldr	r3, [r7, #16]
 801038c:	429a      	cmp	r2, r3
 801038e:	d3e2      	bcc.n	8010356 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010390:	2300      	movs	r3, #0
}
 8010392:	4618      	mov	r0, r3
 8010394:	3724      	adds	r7, #36	; 0x24
 8010396:	46bd      	mov	sp, r7
 8010398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039c:	4770      	bx	lr

0801039e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801039e:	b480      	push	{r7}
 80103a0:	b08b      	sub	sp, #44	; 0x2c
 80103a2:	af00      	add	r7, sp, #0
 80103a4:	60f8      	str	r0, [r7, #12]
 80103a6:	60b9      	str	r1, [r7, #8]
 80103a8:	4613      	mov	r3, r2
 80103aa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80103b4:	88fb      	ldrh	r3, [r7, #6]
 80103b6:	089b      	lsrs	r3, r3, #2
 80103b8:	b29b      	uxth	r3, r3
 80103ba:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80103bc:	88fb      	ldrh	r3, [r7, #6]
 80103be:	f003 0303 	and.w	r3, r3, #3
 80103c2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80103c4:	2300      	movs	r3, #0
 80103c6:	623b      	str	r3, [r7, #32]
 80103c8:	e014      	b.n	80103f4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80103ca:	69bb      	ldr	r3, [r7, #24]
 80103cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80103d0:	681a      	ldr	r2, [r3, #0]
 80103d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103d4:	601a      	str	r2, [r3, #0]
    pDest++;
 80103d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103d8:	3301      	adds	r3, #1
 80103da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80103dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103de:	3301      	adds	r3, #1
 80103e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80103e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103e4:	3301      	adds	r3, #1
 80103e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80103e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ea:	3301      	adds	r3, #1
 80103ec:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80103ee:	6a3b      	ldr	r3, [r7, #32]
 80103f0:	3301      	adds	r3, #1
 80103f2:	623b      	str	r3, [r7, #32]
 80103f4:	6a3a      	ldr	r2, [r7, #32]
 80103f6:	697b      	ldr	r3, [r7, #20]
 80103f8:	429a      	cmp	r2, r3
 80103fa:	d3e6      	bcc.n	80103ca <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80103fc:	8bfb      	ldrh	r3, [r7, #30]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d01e      	beq.n	8010440 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010402:	2300      	movs	r3, #0
 8010404:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010406:	69bb      	ldr	r3, [r7, #24]
 8010408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801040c:	461a      	mov	r2, r3
 801040e:	f107 0310 	add.w	r3, r7, #16
 8010412:	6812      	ldr	r2, [r2, #0]
 8010414:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010416:	693a      	ldr	r2, [r7, #16]
 8010418:	6a3b      	ldr	r3, [r7, #32]
 801041a:	b2db      	uxtb	r3, r3
 801041c:	00db      	lsls	r3, r3, #3
 801041e:	fa22 f303 	lsr.w	r3, r2, r3
 8010422:	b2da      	uxtb	r2, r3
 8010424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010426:	701a      	strb	r2, [r3, #0]
      i++;
 8010428:	6a3b      	ldr	r3, [r7, #32]
 801042a:	3301      	adds	r3, #1
 801042c:	623b      	str	r3, [r7, #32]
      pDest++;
 801042e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010430:	3301      	adds	r3, #1
 8010432:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8010434:	8bfb      	ldrh	r3, [r7, #30]
 8010436:	3b01      	subs	r3, #1
 8010438:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801043a:	8bfb      	ldrh	r3, [r7, #30]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d1ea      	bne.n	8010416 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8010440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010442:	4618      	mov	r0, r3
 8010444:	372c      	adds	r7, #44	; 0x2c
 8010446:	46bd      	mov	sp, r7
 8010448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044c:	4770      	bx	lr

0801044e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801044e:	b480      	push	{r7}
 8010450:	b085      	sub	sp, #20
 8010452:	af00      	add	r7, sp, #0
 8010454:	6078      	str	r0, [r7, #4]
 8010456:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	781b      	ldrb	r3, [r3, #0]
 8010460:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010462:	683b      	ldr	r3, [r7, #0]
 8010464:	785b      	ldrb	r3, [r3, #1]
 8010466:	2b01      	cmp	r3, #1
 8010468:	d12c      	bne.n	80104c4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801046a:	68bb      	ldr	r3, [r7, #8]
 801046c:	015a      	lsls	r2, r3, #5
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	4413      	add	r3, r2
 8010472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	2b00      	cmp	r3, #0
 801047a:	db12      	blt.n	80104a2 <USB_EPSetStall+0x54>
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d00f      	beq.n	80104a2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	015a      	lsls	r2, r3, #5
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	4413      	add	r3, r2
 801048a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	68ba      	ldr	r2, [r7, #8]
 8010492:	0151      	lsls	r1, r2, #5
 8010494:	68fa      	ldr	r2, [r7, #12]
 8010496:	440a      	add	r2, r1
 8010498:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801049c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80104a0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	015a      	lsls	r2, r3, #5
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	4413      	add	r3, r2
 80104aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	68ba      	ldr	r2, [r7, #8]
 80104b2:	0151      	lsls	r1, r2, #5
 80104b4:	68fa      	ldr	r2, [r7, #12]
 80104b6:	440a      	add	r2, r1
 80104b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80104c0:	6013      	str	r3, [r2, #0]
 80104c2:	e02b      	b.n	801051c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	015a      	lsls	r2, r3, #5
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	4413      	add	r3, r2
 80104cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	db12      	blt.n	80104fc <USB_EPSetStall+0xae>
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d00f      	beq.n	80104fc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	015a      	lsls	r2, r3, #5
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	4413      	add	r3, r2
 80104e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	68ba      	ldr	r2, [r7, #8]
 80104ec:	0151      	lsls	r1, r2, #5
 80104ee:	68fa      	ldr	r2, [r7, #12]
 80104f0:	440a      	add	r2, r1
 80104f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80104f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80104fa:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	015a      	lsls	r2, r3, #5
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	4413      	add	r3, r2
 8010504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	68ba      	ldr	r2, [r7, #8]
 801050c:	0151      	lsls	r1, r2, #5
 801050e:	68fa      	ldr	r2, [r7, #12]
 8010510:	440a      	add	r2, r1
 8010512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010516:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801051a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801051c:	2300      	movs	r3, #0
}
 801051e:	4618      	mov	r0, r3
 8010520:	3714      	adds	r7, #20
 8010522:	46bd      	mov	sp, r7
 8010524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010528:	4770      	bx	lr

0801052a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801052a:	b480      	push	{r7}
 801052c:	b085      	sub	sp, #20
 801052e:	af00      	add	r7, sp, #0
 8010530:	6078      	str	r0, [r7, #4]
 8010532:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010538:	683b      	ldr	r3, [r7, #0]
 801053a:	781b      	ldrb	r3, [r3, #0]
 801053c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	785b      	ldrb	r3, [r3, #1]
 8010542:	2b01      	cmp	r3, #1
 8010544:	d128      	bne.n	8010598 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010546:	68bb      	ldr	r3, [r7, #8]
 8010548:	015a      	lsls	r2, r3, #5
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	4413      	add	r3, r2
 801054e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	68ba      	ldr	r2, [r7, #8]
 8010556:	0151      	lsls	r1, r2, #5
 8010558:	68fa      	ldr	r2, [r7, #12]
 801055a:	440a      	add	r2, r1
 801055c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010560:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010564:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	78db      	ldrb	r3, [r3, #3]
 801056a:	2b03      	cmp	r3, #3
 801056c:	d003      	beq.n	8010576 <USB_EPClearStall+0x4c>
 801056e:	683b      	ldr	r3, [r7, #0]
 8010570:	78db      	ldrb	r3, [r3, #3]
 8010572:	2b02      	cmp	r3, #2
 8010574:	d138      	bne.n	80105e8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010576:	68bb      	ldr	r3, [r7, #8]
 8010578:	015a      	lsls	r2, r3, #5
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	4413      	add	r3, r2
 801057e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	68ba      	ldr	r2, [r7, #8]
 8010586:	0151      	lsls	r1, r2, #5
 8010588:	68fa      	ldr	r2, [r7, #12]
 801058a:	440a      	add	r2, r1
 801058c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010594:	6013      	str	r3, [r2, #0]
 8010596:	e027      	b.n	80105e8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	015a      	lsls	r2, r3, #5
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	4413      	add	r3, r2
 80105a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	68ba      	ldr	r2, [r7, #8]
 80105a8:	0151      	lsls	r1, r2, #5
 80105aa:	68fa      	ldr	r2, [r7, #12]
 80105ac:	440a      	add	r2, r1
 80105ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80105b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80105b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	78db      	ldrb	r3, [r3, #3]
 80105bc:	2b03      	cmp	r3, #3
 80105be:	d003      	beq.n	80105c8 <USB_EPClearStall+0x9e>
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	78db      	ldrb	r3, [r3, #3]
 80105c4:	2b02      	cmp	r3, #2
 80105c6:	d10f      	bne.n	80105e8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	015a      	lsls	r2, r3, #5
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	4413      	add	r3, r2
 80105d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	68ba      	ldr	r2, [r7, #8]
 80105d8:	0151      	lsls	r1, r2, #5
 80105da:	68fa      	ldr	r2, [r7, #12]
 80105dc:	440a      	add	r2, r1
 80105de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80105e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80105e6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80105e8:	2300      	movs	r3, #0
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	3714      	adds	r7, #20
 80105ee:	46bd      	mov	sp, r7
 80105f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f4:	4770      	bx	lr

080105f6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80105f6:	b480      	push	{r7}
 80105f8:	b085      	sub	sp, #20
 80105fa:	af00      	add	r7, sp, #0
 80105fc:	6078      	str	r0, [r7, #4]
 80105fe:	460b      	mov	r3, r1
 8010600:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	68fa      	ldr	r2, [r7, #12]
 8010610:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010614:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010618:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010620:	681a      	ldr	r2, [r3, #0]
 8010622:	78fb      	ldrb	r3, [r7, #3]
 8010624:	011b      	lsls	r3, r3, #4
 8010626:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801062a:	68f9      	ldr	r1, [r7, #12]
 801062c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010630:	4313      	orrs	r3, r2
 8010632:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010634:	2300      	movs	r3, #0
}
 8010636:	4618      	mov	r0, r3
 8010638:	3714      	adds	r7, #20
 801063a:	46bd      	mov	sp, r7
 801063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010640:	4770      	bx	lr

08010642 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010642:	b480      	push	{r7}
 8010644:	b085      	sub	sp, #20
 8010646:	af00      	add	r7, sp, #0
 8010648:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	695b      	ldr	r3, [r3, #20]
 801064e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	699b      	ldr	r3, [r3, #24]
 8010654:	68fa      	ldr	r2, [r7, #12]
 8010656:	4013      	ands	r3, r2
 8010658:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801065a:	68fb      	ldr	r3, [r7, #12]
}
 801065c:	4618      	mov	r0, r3
 801065e:	3714      	adds	r7, #20
 8010660:	46bd      	mov	sp, r7
 8010662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010666:	4770      	bx	lr

08010668 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010668:	b480      	push	{r7}
 801066a:	b085      	sub	sp, #20
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801067a:	699b      	ldr	r3, [r3, #24]
 801067c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010684:	69db      	ldr	r3, [r3, #28]
 8010686:	68ba      	ldr	r2, [r7, #8]
 8010688:	4013      	ands	r3, r2
 801068a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801068c:	68bb      	ldr	r3, [r7, #8]
 801068e:	0c1b      	lsrs	r3, r3, #16
}
 8010690:	4618      	mov	r0, r3
 8010692:	3714      	adds	r7, #20
 8010694:	46bd      	mov	sp, r7
 8010696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069a:	4770      	bx	lr

0801069c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801069c:	b480      	push	{r7}
 801069e:	b085      	sub	sp, #20
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106ae:	699b      	ldr	r3, [r3, #24]
 80106b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106b8:	69db      	ldr	r3, [r3, #28]
 80106ba:	68ba      	ldr	r2, [r7, #8]
 80106bc:	4013      	ands	r3, r2
 80106be:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	b29b      	uxth	r3, r3
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3714      	adds	r7, #20
 80106c8:	46bd      	mov	sp, r7
 80106ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ce:	4770      	bx	lr

080106d0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80106d0:	b480      	push	{r7}
 80106d2:	b085      	sub	sp, #20
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	460b      	mov	r3, r1
 80106da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80106e0:	78fb      	ldrb	r3, [r7, #3]
 80106e2:	015a      	lsls	r2, r3, #5
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	4413      	add	r3, r2
 80106e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106ec:	689b      	ldr	r3, [r3, #8]
 80106ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106f6:	695b      	ldr	r3, [r3, #20]
 80106f8:	68ba      	ldr	r2, [r7, #8]
 80106fa:	4013      	ands	r3, r2
 80106fc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80106fe:	68bb      	ldr	r3, [r7, #8]
}
 8010700:	4618      	mov	r0, r3
 8010702:	3714      	adds	r7, #20
 8010704:	46bd      	mov	sp, r7
 8010706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070a:	4770      	bx	lr

0801070c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801070c:	b480      	push	{r7}
 801070e:	b087      	sub	sp, #28
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	460b      	mov	r3, r1
 8010716:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010722:	691b      	ldr	r3, [r3, #16]
 8010724:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010726:	697b      	ldr	r3, [r7, #20]
 8010728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801072c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801072e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010730:	78fb      	ldrb	r3, [r7, #3]
 8010732:	f003 030f 	and.w	r3, r3, #15
 8010736:	68fa      	ldr	r2, [r7, #12]
 8010738:	fa22 f303 	lsr.w	r3, r2, r3
 801073c:	01db      	lsls	r3, r3, #7
 801073e:	b2db      	uxtb	r3, r3
 8010740:	693a      	ldr	r2, [r7, #16]
 8010742:	4313      	orrs	r3, r2
 8010744:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010746:	78fb      	ldrb	r3, [r7, #3]
 8010748:	015a      	lsls	r2, r3, #5
 801074a:	697b      	ldr	r3, [r7, #20]
 801074c:	4413      	add	r3, r2
 801074e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010752:	689b      	ldr	r3, [r3, #8]
 8010754:	693a      	ldr	r2, [r7, #16]
 8010756:	4013      	ands	r3, r2
 8010758:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801075a:	68bb      	ldr	r3, [r7, #8]
}
 801075c:	4618      	mov	r0, r3
 801075e:	371c      	adds	r7, #28
 8010760:	46bd      	mov	sp, r7
 8010762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010766:	4770      	bx	lr

08010768 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010768:	b480      	push	{r7}
 801076a:	b083      	sub	sp, #12
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	695b      	ldr	r3, [r3, #20]
 8010774:	f003 0301 	and.w	r3, r3, #1
}
 8010778:	4618      	mov	r0, r3
 801077a:	370c      	adds	r7, #12
 801077c:	46bd      	mov	sp, r7
 801077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010782:	4770      	bx	lr

08010784 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010784:	b480      	push	{r7}
 8010786:	b085      	sub	sp, #20
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	68fa      	ldr	r2, [r7, #12]
 801079a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801079e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80107a2:	f023 0307 	bic.w	r3, r3, #7
 80107a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80107ae:	685b      	ldr	r3, [r3, #4]
 80107b0:	68fa      	ldr	r2, [r7, #12]
 80107b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80107b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80107ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80107bc:	2300      	movs	r3, #0
}
 80107be:	4618      	mov	r0, r3
 80107c0:	3714      	adds	r7, #20
 80107c2:	46bd      	mov	sp, r7
 80107c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c8:	4770      	bx	lr
	...

080107cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80107cc:	b480      	push	{r7}
 80107ce:	b087      	sub	sp, #28
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	60f8      	str	r0, [r7, #12]
 80107d4:	460b      	mov	r3, r1
 80107d6:	607a      	str	r2, [r7, #4]
 80107d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	333c      	adds	r3, #60	; 0x3c
 80107e2:	3304      	adds	r3, #4
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80107e8:	693b      	ldr	r3, [r7, #16]
 80107ea:	4a26      	ldr	r2, [pc, #152]	; (8010884 <USB_EP0_OutStart+0xb8>)
 80107ec:	4293      	cmp	r3, r2
 80107ee:	d90a      	bls.n	8010806 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80107f0:	697b      	ldr	r3, [r7, #20]
 80107f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80107fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010800:	d101      	bne.n	8010806 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010802:	2300      	movs	r3, #0
 8010804:	e037      	b.n	8010876 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010806:	697b      	ldr	r3, [r7, #20]
 8010808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801080c:	461a      	mov	r2, r3
 801080e:	2300      	movs	r3, #0
 8010810:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010812:	697b      	ldr	r3, [r7, #20]
 8010814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010818:	691b      	ldr	r3, [r3, #16]
 801081a:	697a      	ldr	r2, [r7, #20]
 801081c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010820:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010824:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010826:	697b      	ldr	r3, [r7, #20]
 8010828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801082c:	691b      	ldr	r3, [r3, #16]
 801082e:	697a      	ldr	r2, [r7, #20]
 8010830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010834:	f043 0318 	orr.w	r3, r3, #24
 8010838:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010840:	691b      	ldr	r3, [r3, #16]
 8010842:	697a      	ldr	r2, [r7, #20]
 8010844:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010848:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801084c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801084e:	7afb      	ldrb	r3, [r7, #11]
 8010850:	2b01      	cmp	r3, #1
 8010852:	d10f      	bne.n	8010874 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010854:	697b      	ldr	r3, [r7, #20]
 8010856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801085a:	461a      	mov	r2, r3
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010860:	697b      	ldr	r3, [r7, #20]
 8010862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	697a      	ldr	r2, [r7, #20]
 801086a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801086e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010872:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010874:	2300      	movs	r3, #0
}
 8010876:	4618      	mov	r0, r3
 8010878:	371c      	adds	r7, #28
 801087a:	46bd      	mov	sp, r7
 801087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010880:	4770      	bx	lr
 8010882:	bf00      	nop
 8010884:	4f54300a 	.word	0x4f54300a

08010888 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010888:	b580      	push	{r7, lr}
 801088a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801088c:	4904      	ldr	r1, [pc, #16]	; (80108a0 <MX_FATFS_Init+0x18>)
 801088e:	4805      	ldr	r0, [pc, #20]	; (80108a4 <MX_FATFS_Init+0x1c>)
 8010890:	f003 ff46 	bl	8014720 <FATFS_LinkDriver>
 8010894:	4603      	mov	r3, r0
 8010896:	461a      	mov	r2, r3
 8010898:	4b03      	ldr	r3, [pc, #12]	; (80108a8 <MX_FATFS_Init+0x20>)
 801089a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801089c:	bf00      	nop
 801089e:	bd80      	pop	{r7, pc}
 80108a0:	20006328 	.word	0x20006328
 80108a4:	20000068 	.word	0x20000068
 80108a8:	2000632c 	.word	0x2000632c

080108ac <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80108ac:	b480      	push	{r7}
 80108ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80108b0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	46bd      	mov	sp, r7
 80108b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ba:	4770      	bx	lr

080108bc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80108bc:	b480      	push	{r7}
 80108be:	b083      	sub	sp, #12
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	4603      	mov	r3, r0
 80108c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80108c6:	4b06      	ldr	r3, [pc, #24]	; (80108e0 <USER_initialize+0x24>)
 80108c8:	2201      	movs	r2, #1
 80108ca:	701a      	strb	r2, [r3, #0]
    return Stat;
 80108cc:	4b04      	ldr	r3, [pc, #16]	; (80108e0 <USER_initialize+0x24>)
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80108d2:	4618      	mov	r0, r3
 80108d4:	370c      	adds	r7, #12
 80108d6:	46bd      	mov	sp, r7
 80108d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108dc:	4770      	bx	lr
 80108de:	bf00      	nop
 80108e0:	20000065 	.word	0x20000065

080108e4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80108e4:	b480      	push	{r7}
 80108e6:	b083      	sub	sp, #12
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	4603      	mov	r3, r0
 80108ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80108ee:	4b06      	ldr	r3, [pc, #24]	; (8010908 <USER_status+0x24>)
 80108f0:	2201      	movs	r2, #1
 80108f2:	701a      	strb	r2, [r3, #0]
    return Stat;
 80108f4:	4b04      	ldr	r3, [pc, #16]	; (8010908 <USER_status+0x24>)
 80108f6:	781b      	ldrb	r3, [r3, #0]
 80108f8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80108fa:	4618      	mov	r0, r3
 80108fc:	370c      	adds	r7, #12
 80108fe:	46bd      	mov	sp, r7
 8010900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010904:	4770      	bx	lr
 8010906:	bf00      	nop
 8010908:	20000065 	.word	0x20000065

0801090c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 801090c:	b480      	push	{r7}
 801090e:	b085      	sub	sp, #20
 8010910:	af00      	add	r7, sp, #0
 8010912:	60b9      	str	r1, [r7, #8]
 8010914:	607a      	str	r2, [r7, #4]
 8010916:	603b      	str	r3, [r7, #0]
 8010918:	4603      	mov	r3, r0
 801091a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 801091c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 801091e:	4618      	mov	r0, r3
 8010920:	3714      	adds	r7, #20
 8010922:	46bd      	mov	sp, r7
 8010924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010928:	4770      	bx	lr

0801092a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801092a:	b480      	push	{r7}
 801092c:	b085      	sub	sp, #20
 801092e:	af00      	add	r7, sp, #0
 8010930:	60b9      	str	r1, [r7, #8]
 8010932:	607a      	str	r2, [r7, #4]
 8010934:	603b      	str	r3, [r7, #0]
 8010936:	4603      	mov	r3, r0
 8010938:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 801093a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 801093c:	4618      	mov	r0, r3
 801093e:	3714      	adds	r7, #20
 8010940:	46bd      	mov	sp, r7
 8010942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010946:	4770      	bx	lr

08010948 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8010948:	b480      	push	{r7}
 801094a:	b085      	sub	sp, #20
 801094c:	af00      	add	r7, sp, #0
 801094e:	4603      	mov	r3, r0
 8010950:	603a      	str	r2, [r7, #0]
 8010952:	71fb      	strb	r3, [r7, #7]
 8010954:	460b      	mov	r3, r1
 8010956:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8010958:	2301      	movs	r3, #1
 801095a:	73fb      	strb	r3, [r7, #15]
    return res;
 801095c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 801095e:	4618      	mov	r0, r3
 8010960:	3714      	adds	r7, #20
 8010962:	46bd      	mov	sp, r7
 8010964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010968:	4770      	bx	lr

0801096a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801096a:	b480      	push	{r7}
 801096c:	b083      	sub	sp, #12
 801096e:	af00      	add	r7, sp, #0
 8010970:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010972:	2300      	movs	r3, #0
}
 8010974:	4618      	mov	r0, r3
 8010976:	370c      	adds	r7, #12
 8010978:	46bd      	mov	sp, r7
 801097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097e:	4770      	bx	lr

08010980 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b084      	sub	sp, #16
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
 8010988:	460b      	mov	r3, r1
 801098a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801098c:	2303      	movs	r3, #3
 801098e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010996:	2b00      	cmp	r3, #0
 8010998:	d009      	beq.n	80109ae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	78fa      	ldrb	r2, [r7, #3]
 80109a4:	4611      	mov	r1, r2
 80109a6:	6878      	ldr	r0, [r7, #4]
 80109a8:	4798      	blx	r3
 80109aa:	4603      	mov	r3, r0
 80109ac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80109ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80109b0:	4618      	mov	r0, r3
 80109b2:	3710      	adds	r7, #16
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}

080109b8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b082      	sub	sp, #8
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
 80109c0:	460b      	mov	r3, r1
 80109c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d007      	beq.n	80109de <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109d4:	685b      	ldr	r3, [r3, #4]
 80109d6:	78fa      	ldrb	r2, [r7, #3]
 80109d8:	4611      	mov	r1, r2
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	4798      	blx	r3
  }

  return USBD_OK;
 80109de:	2300      	movs	r3, #0
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	3708      	adds	r7, #8
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}

080109e8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b084      	sub	sp, #16
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
 80109f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80109f8:	6839      	ldr	r1, [r7, #0]
 80109fa:	4618      	mov	r0, r3
 80109fc:	f000 ff90 	bl	8011920 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2201      	movs	r2, #1
 8010a04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8010a0e:	461a      	mov	r2, r3
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010a1c:	f003 031f 	and.w	r3, r3, #31
 8010a20:	2b02      	cmp	r3, #2
 8010a22:	d01a      	beq.n	8010a5a <USBD_LL_SetupStage+0x72>
 8010a24:	2b02      	cmp	r3, #2
 8010a26:	d822      	bhi.n	8010a6e <USBD_LL_SetupStage+0x86>
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d002      	beq.n	8010a32 <USBD_LL_SetupStage+0x4a>
 8010a2c:	2b01      	cmp	r3, #1
 8010a2e:	d00a      	beq.n	8010a46 <USBD_LL_SetupStage+0x5e>
 8010a30:	e01d      	b.n	8010a6e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010a38:	4619      	mov	r1, r3
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f000 fa62 	bl	8010f04 <USBD_StdDevReq>
 8010a40:	4603      	mov	r3, r0
 8010a42:	73fb      	strb	r3, [r7, #15]
      break;
 8010a44:	e020      	b.n	8010a88 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010a4c:	4619      	mov	r1, r3
 8010a4e:	6878      	ldr	r0, [r7, #4]
 8010a50:	f000 fac6 	bl	8010fe0 <USBD_StdItfReq>
 8010a54:	4603      	mov	r3, r0
 8010a56:	73fb      	strb	r3, [r7, #15]
      break;
 8010a58:	e016      	b.n	8010a88 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010a60:	4619      	mov	r1, r3
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f000 fb05 	bl	8011072 <USBD_StdEPReq>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8010a6c:	e00c      	b.n	8010a88 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010a74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010a78:	b2db      	uxtb	r3, r3
 8010a7a:	4619      	mov	r1, r3
 8010a7c:	6878      	ldr	r0, [r7, #4]
 8010a7e:	f006 f82f 	bl	8016ae0 <USBD_LL_StallEP>
 8010a82:	4603      	mov	r3, r0
 8010a84:	73fb      	strb	r3, [r7, #15]
      break;
 8010a86:	bf00      	nop
  }

  return ret;
 8010a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	3710      	adds	r7, #16
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}

08010a92 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010a92:	b580      	push	{r7, lr}
 8010a94:	b086      	sub	sp, #24
 8010a96:	af00      	add	r7, sp, #0
 8010a98:	60f8      	str	r0, [r7, #12]
 8010a9a:	460b      	mov	r3, r1
 8010a9c:	607a      	str	r2, [r7, #4]
 8010a9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010aa0:	7afb      	ldrb	r3, [r7, #11]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d138      	bne.n	8010b18 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010aac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010ab4:	2b03      	cmp	r3, #3
 8010ab6:	d14a      	bne.n	8010b4e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8010ab8:	693b      	ldr	r3, [r7, #16]
 8010aba:	689a      	ldr	r2, [r3, #8]
 8010abc:	693b      	ldr	r3, [r7, #16]
 8010abe:	68db      	ldr	r3, [r3, #12]
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d913      	bls.n	8010aec <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010ac4:	693b      	ldr	r3, [r7, #16]
 8010ac6:	689a      	ldr	r2, [r3, #8]
 8010ac8:	693b      	ldr	r3, [r7, #16]
 8010aca:	68db      	ldr	r3, [r3, #12]
 8010acc:	1ad2      	subs	r2, r2, r3
 8010ace:	693b      	ldr	r3, [r7, #16]
 8010ad0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010ad2:	693b      	ldr	r3, [r7, #16]
 8010ad4:	68da      	ldr	r2, [r3, #12]
 8010ad6:	693b      	ldr	r3, [r7, #16]
 8010ad8:	689b      	ldr	r3, [r3, #8]
 8010ada:	4293      	cmp	r3, r2
 8010adc:	bf28      	it	cs
 8010ade:	4613      	movcs	r3, r2
 8010ae0:	461a      	mov	r2, r3
 8010ae2:	6879      	ldr	r1, [r7, #4]
 8010ae4:	68f8      	ldr	r0, [r7, #12]
 8010ae6:	f000 ff92 	bl	8011a0e <USBD_CtlContinueRx>
 8010aea:	e030      	b.n	8010b4e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010af2:	b2db      	uxtb	r3, r3
 8010af4:	2b03      	cmp	r3, #3
 8010af6:	d10b      	bne.n	8010b10 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010afe:	691b      	ldr	r3, [r3, #16]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d005      	beq.n	8010b10 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b0a:	691b      	ldr	r3, [r3, #16]
 8010b0c:	68f8      	ldr	r0, [r7, #12]
 8010b0e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010b10:	68f8      	ldr	r0, [r7, #12]
 8010b12:	f000 ff8d 	bl	8011a30 <USBD_CtlSendStatus>
 8010b16:	e01a      	b.n	8010b4e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b1e:	b2db      	uxtb	r3, r3
 8010b20:	2b03      	cmp	r3, #3
 8010b22:	d114      	bne.n	8010b4e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b2a:	699b      	ldr	r3, [r3, #24]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d00e      	beq.n	8010b4e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b36:	699b      	ldr	r3, [r3, #24]
 8010b38:	7afa      	ldrb	r2, [r7, #11]
 8010b3a:	4611      	mov	r1, r2
 8010b3c:	68f8      	ldr	r0, [r7, #12]
 8010b3e:	4798      	blx	r3
 8010b40:	4603      	mov	r3, r0
 8010b42:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010b44:	7dfb      	ldrb	r3, [r7, #23]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d001      	beq.n	8010b4e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8010b4a:	7dfb      	ldrb	r3, [r7, #23]
 8010b4c:	e000      	b.n	8010b50 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8010b4e:	2300      	movs	r3, #0
}
 8010b50:	4618      	mov	r0, r3
 8010b52:	3718      	adds	r7, #24
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}

08010b58 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b086      	sub	sp, #24
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	60f8      	str	r0, [r7, #12]
 8010b60:	460b      	mov	r3, r1
 8010b62:	607a      	str	r2, [r7, #4]
 8010b64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010b66:	7afb      	ldrb	r3, [r7, #11]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d16b      	bne.n	8010c44 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	3314      	adds	r3, #20
 8010b70:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010b78:	2b02      	cmp	r3, #2
 8010b7a:	d156      	bne.n	8010c2a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8010b7c:	693b      	ldr	r3, [r7, #16]
 8010b7e:	689a      	ldr	r2, [r3, #8]
 8010b80:	693b      	ldr	r3, [r7, #16]
 8010b82:	68db      	ldr	r3, [r3, #12]
 8010b84:	429a      	cmp	r2, r3
 8010b86:	d914      	bls.n	8010bb2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010b88:	693b      	ldr	r3, [r7, #16]
 8010b8a:	689a      	ldr	r2, [r3, #8]
 8010b8c:	693b      	ldr	r3, [r7, #16]
 8010b8e:	68db      	ldr	r3, [r3, #12]
 8010b90:	1ad2      	subs	r2, r2, r3
 8010b92:	693b      	ldr	r3, [r7, #16]
 8010b94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010b96:	693b      	ldr	r3, [r7, #16]
 8010b98:	689b      	ldr	r3, [r3, #8]
 8010b9a:	461a      	mov	r2, r3
 8010b9c:	6879      	ldr	r1, [r7, #4]
 8010b9e:	68f8      	ldr	r0, [r7, #12]
 8010ba0:	f000 ff24 	bl	80119ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	2100      	movs	r1, #0
 8010baa:	68f8      	ldr	r0, [r7, #12]
 8010bac:	f006 f842 	bl	8016c34 <USBD_LL_PrepareReceive>
 8010bb0:	e03b      	b.n	8010c2a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010bb2:	693b      	ldr	r3, [r7, #16]
 8010bb4:	68da      	ldr	r2, [r3, #12]
 8010bb6:	693b      	ldr	r3, [r7, #16]
 8010bb8:	689b      	ldr	r3, [r3, #8]
 8010bba:	429a      	cmp	r2, r3
 8010bbc:	d11c      	bne.n	8010bf8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010bbe:	693b      	ldr	r3, [r7, #16]
 8010bc0:	685a      	ldr	r2, [r3, #4]
 8010bc2:	693b      	ldr	r3, [r7, #16]
 8010bc4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010bc6:	429a      	cmp	r2, r3
 8010bc8:	d316      	bcc.n	8010bf8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010bca:	693b      	ldr	r3, [r7, #16]
 8010bcc:	685a      	ldr	r2, [r3, #4]
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010bd4:	429a      	cmp	r2, r3
 8010bd6:	d20f      	bcs.n	8010bf8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010bd8:	2200      	movs	r2, #0
 8010bda:	2100      	movs	r1, #0
 8010bdc:	68f8      	ldr	r0, [r7, #12]
 8010bde:	f000 ff05 	bl	80119ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	2200      	movs	r2, #0
 8010be6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010bea:	2300      	movs	r3, #0
 8010bec:	2200      	movs	r2, #0
 8010bee:	2100      	movs	r1, #0
 8010bf0:	68f8      	ldr	r0, [r7, #12]
 8010bf2:	f006 f81f 	bl	8016c34 <USBD_LL_PrepareReceive>
 8010bf6:	e018      	b.n	8010c2a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010bfe:	b2db      	uxtb	r3, r3
 8010c00:	2b03      	cmp	r3, #3
 8010c02:	d10b      	bne.n	8010c1c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c0a:	68db      	ldr	r3, [r3, #12]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d005      	beq.n	8010c1c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c16:	68db      	ldr	r3, [r3, #12]
 8010c18:	68f8      	ldr	r0, [r7, #12]
 8010c1a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010c1c:	2180      	movs	r1, #128	; 0x80
 8010c1e:	68f8      	ldr	r0, [r7, #12]
 8010c20:	f005 ff5e 	bl	8016ae0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010c24:	68f8      	ldr	r0, [r7, #12]
 8010c26:	f000 ff16 	bl	8011a56 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010c30:	2b01      	cmp	r3, #1
 8010c32:	d122      	bne.n	8010c7a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8010c34:	68f8      	ldr	r0, [r7, #12]
 8010c36:	f7ff fe98 	bl	801096a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010c42:	e01a      	b.n	8010c7a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c4a:	b2db      	uxtb	r3, r3
 8010c4c:	2b03      	cmp	r3, #3
 8010c4e:	d114      	bne.n	8010c7a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c56:	695b      	ldr	r3, [r3, #20]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d00e      	beq.n	8010c7a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c62:	695b      	ldr	r3, [r3, #20]
 8010c64:	7afa      	ldrb	r2, [r7, #11]
 8010c66:	4611      	mov	r1, r2
 8010c68:	68f8      	ldr	r0, [r7, #12]
 8010c6a:	4798      	blx	r3
 8010c6c:	4603      	mov	r3, r0
 8010c6e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010c70:	7dfb      	ldrb	r3, [r7, #23]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d001      	beq.n	8010c7a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8010c76:	7dfb      	ldrb	r3, [r7, #23]
 8010c78:	e000      	b.n	8010c7c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8010c7a:	2300      	movs	r3, #0
}
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	3718      	adds	r7, #24
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd80      	pop	{r7, pc}

08010c84 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b082      	sub	sp, #8
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	2201      	movs	r2, #1
 8010c90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	2200      	movs	r2, #0
 8010c98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d101      	bne.n	8010cb8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8010cb4:	2303      	movs	r3, #3
 8010cb6:	e02f      	b.n	8010d18 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d00f      	beq.n	8010ce2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cc8:	685b      	ldr	r3, [r3, #4]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d009      	beq.n	8010ce2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cd4:	685b      	ldr	r3, [r3, #4]
 8010cd6:	687a      	ldr	r2, [r7, #4]
 8010cd8:	6852      	ldr	r2, [r2, #4]
 8010cda:	b2d2      	uxtb	r2, r2
 8010cdc:	4611      	mov	r1, r2
 8010cde:	6878      	ldr	r0, [r7, #4]
 8010ce0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010ce2:	2340      	movs	r3, #64	; 0x40
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	2100      	movs	r1, #0
 8010ce8:	6878      	ldr	r0, [r7, #4]
 8010cea:	f005 fed3 	bl	8016a94 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	2201      	movs	r2, #1
 8010cf2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2240      	movs	r2, #64	; 0x40
 8010cfa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010cfe:	2340      	movs	r3, #64	; 0x40
 8010d00:	2200      	movs	r2, #0
 8010d02:	2180      	movs	r1, #128	; 0x80
 8010d04:	6878      	ldr	r0, [r7, #4]
 8010d06:	f005 fec5 	bl	8016a94 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2201      	movs	r2, #1
 8010d0e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	2240      	movs	r2, #64	; 0x40
 8010d14:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8010d16:	2300      	movs	r3, #0
}
 8010d18:	4618      	mov	r0, r3
 8010d1a:	3708      	adds	r7, #8
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}

08010d20 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010d20:	b480      	push	{r7}
 8010d22:	b083      	sub	sp, #12
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
 8010d28:	460b      	mov	r3, r1
 8010d2a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	78fa      	ldrb	r2, [r7, #3]
 8010d30:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010d32:	2300      	movs	r3, #0
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	370c      	adds	r7, #12
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3e:	4770      	bx	lr

08010d40 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010d40:	b480      	push	{r7}
 8010d42:	b083      	sub	sp, #12
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d4e:	b2da      	uxtb	r2, r3
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	2204      	movs	r2, #4
 8010d5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8010d5e:	2300      	movs	r3, #0
}
 8010d60:	4618      	mov	r0, r3
 8010d62:	370c      	adds	r7, #12
 8010d64:	46bd      	mov	sp, r7
 8010d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6a:	4770      	bx	lr

08010d6c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010d6c:	b480      	push	{r7}
 8010d6e:	b083      	sub	sp, #12
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d7a:	b2db      	uxtb	r3, r3
 8010d7c:	2b04      	cmp	r3, #4
 8010d7e:	d106      	bne.n	8010d8e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8010d86:	b2da      	uxtb	r2, r3
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010d8e:	2300      	movs	r3, #0
}
 8010d90:	4618      	mov	r0, r3
 8010d92:	370c      	adds	r7, #12
 8010d94:	46bd      	mov	sp, r7
 8010d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9a:	4770      	bx	lr

08010d9c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b082      	sub	sp, #8
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d101      	bne.n	8010db2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8010dae:	2303      	movs	r3, #3
 8010db0:	e012      	b.n	8010dd8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010db8:	b2db      	uxtb	r3, r3
 8010dba:	2b03      	cmp	r3, #3
 8010dbc:	d10b      	bne.n	8010dd6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010dc4:	69db      	ldr	r3, [r3, #28]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d005      	beq.n	8010dd6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010dd0:	69db      	ldr	r3, [r3, #28]
 8010dd2:	6878      	ldr	r0, [r7, #4]
 8010dd4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010dd6:	2300      	movs	r3, #0
}
 8010dd8:	4618      	mov	r0, r3
 8010dda:	3708      	adds	r7, #8
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	bd80      	pop	{r7, pc}

08010de0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b082      	sub	sp, #8
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
 8010de8:	460b      	mov	r3, r1
 8010dea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d101      	bne.n	8010dfa <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8010df6:	2303      	movs	r3, #3
 8010df8:	e014      	b.n	8010e24 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e00:	b2db      	uxtb	r3, r3
 8010e02:	2b03      	cmp	r3, #3
 8010e04:	d10d      	bne.n	8010e22 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e0c:	6a1b      	ldr	r3, [r3, #32]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d007      	beq.n	8010e22 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e18:	6a1b      	ldr	r3, [r3, #32]
 8010e1a:	78fa      	ldrb	r2, [r7, #3]
 8010e1c:	4611      	mov	r1, r2
 8010e1e:	6878      	ldr	r0, [r7, #4]
 8010e20:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010e22:	2300      	movs	r3, #0
}
 8010e24:	4618      	mov	r0, r3
 8010e26:	3708      	adds	r7, #8
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}

08010e2c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b082      	sub	sp, #8
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
 8010e34:	460b      	mov	r3, r1
 8010e36:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d101      	bne.n	8010e46 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8010e42:	2303      	movs	r3, #3
 8010e44:	e014      	b.n	8010e70 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e4c:	b2db      	uxtb	r3, r3
 8010e4e:	2b03      	cmp	r3, #3
 8010e50:	d10d      	bne.n	8010e6e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d007      	beq.n	8010e6e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e66:	78fa      	ldrb	r2, [r7, #3]
 8010e68:	4611      	mov	r1, r2
 8010e6a:	6878      	ldr	r0, [r7, #4]
 8010e6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010e6e:	2300      	movs	r3, #0
}
 8010e70:	4618      	mov	r0, r3
 8010e72:	3708      	adds	r7, #8
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}

08010e78 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010e78:	b480      	push	{r7}
 8010e7a:	b083      	sub	sp, #12
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010e80:	2300      	movs	r3, #0
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	370c      	adds	r7, #12
 8010e86:	46bd      	mov	sp, r7
 8010e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8c:	4770      	bx	lr

08010e8e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010e8e:	b580      	push	{r7, lr}
 8010e90:	b082      	sub	sp, #8
 8010e92:	af00      	add	r7, sp, #0
 8010e94:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	2201      	movs	r2, #1
 8010e9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d009      	beq.n	8010ebc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010eae:	685b      	ldr	r3, [r3, #4]
 8010eb0:	687a      	ldr	r2, [r7, #4]
 8010eb2:	6852      	ldr	r2, [r2, #4]
 8010eb4:	b2d2      	uxtb	r2, r2
 8010eb6:	4611      	mov	r1, r2
 8010eb8:	6878      	ldr	r0, [r7, #4]
 8010eba:	4798      	blx	r3
  }

  return USBD_OK;
 8010ebc:	2300      	movs	r3, #0
}
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	3708      	adds	r7, #8
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	bd80      	pop	{r7, pc}

08010ec6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010ec6:	b480      	push	{r7}
 8010ec8:	b087      	sub	sp, #28
 8010eca:	af00      	add	r7, sp, #0
 8010ecc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010ed2:	697b      	ldr	r3, [r7, #20]
 8010ed4:	781b      	ldrb	r3, [r3, #0]
 8010ed6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010ed8:	697b      	ldr	r3, [r7, #20]
 8010eda:	3301      	adds	r3, #1
 8010edc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010ede:	697b      	ldr	r3, [r7, #20]
 8010ee0:	781b      	ldrb	r3, [r3, #0]
 8010ee2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010ee4:	8a3b      	ldrh	r3, [r7, #16]
 8010ee6:	021b      	lsls	r3, r3, #8
 8010ee8:	b21a      	sxth	r2, r3
 8010eea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010eee:	4313      	orrs	r3, r2
 8010ef0:	b21b      	sxth	r3, r3
 8010ef2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010ef4:	89fb      	ldrh	r3, [r7, #14]
}
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	371c      	adds	r7, #28
 8010efa:	46bd      	mov	sp, r7
 8010efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f00:	4770      	bx	lr
	...

08010f04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b084      	sub	sp, #16
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
 8010f0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010f0e:	2300      	movs	r3, #0
 8010f10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	781b      	ldrb	r3, [r3, #0]
 8010f16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010f1a:	2b40      	cmp	r3, #64	; 0x40
 8010f1c:	d005      	beq.n	8010f2a <USBD_StdDevReq+0x26>
 8010f1e:	2b40      	cmp	r3, #64	; 0x40
 8010f20:	d853      	bhi.n	8010fca <USBD_StdDevReq+0xc6>
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d00b      	beq.n	8010f3e <USBD_StdDevReq+0x3a>
 8010f26:	2b20      	cmp	r3, #32
 8010f28:	d14f      	bne.n	8010fca <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f30:	689b      	ldr	r3, [r3, #8]
 8010f32:	6839      	ldr	r1, [r7, #0]
 8010f34:	6878      	ldr	r0, [r7, #4]
 8010f36:	4798      	blx	r3
 8010f38:	4603      	mov	r3, r0
 8010f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8010f3c:	e04a      	b.n	8010fd4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	785b      	ldrb	r3, [r3, #1]
 8010f42:	2b09      	cmp	r3, #9
 8010f44:	d83b      	bhi.n	8010fbe <USBD_StdDevReq+0xba>
 8010f46:	a201      	add	r2, pc, #4	; (adr r2, 8010f4c <USBD_StdDevReq+0x48>)
 8010f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f4c:	08010fa1 	.word	0x08010fa1
 8010f50:	08010fb5 	.word	0x08010fb5
 8010f54:	08010fbf 	.word	0x08010fbf
 8010f58:	08010fab 	.word	0x08010fab
 8010f5c:	08010fbf 	.word	0x08010fbf
 8010f60:	08010f7f 	.word	0x08010f7f
 8010f64:	08010f75 	.word	0x08010f75
 8010f68:	08010fbf 	.word	0x08010fbf
 8010f6c:	08010f97 	.word	0x08010f97
 8010f70:	08010f89 	.word	0x08010f89
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010f74:	6839      	ldr	r1, [r7, #0]
 8010f76:	6878      	ldr	r0, [r7, #4]
 8010f78:	f000 f9de 	bl	8011338 <USBD_GetDescriptor>
          break;
 8010f7c:	e024      	b.n	8010fc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010f7e:	6839      	ldr	r1, [r7, #0]
 8010f80:	6878      	ldr	r0, [r7, #4]
 8010f82:	f000 fb43 	bl	801160c <USBD_SetAddress>
          break;
 8010f86:	e01f      	b.n	8010fc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010f88:	6839      	ldr	r1, [r7, #0]
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f000 fb82 	bl	8011694 <USBD_SetConfig>
 8010f90:	4603      	mov	r3, r0
 8010f92:	73fb      	strb	r3, [r7, #15]
          break;
 8010f94:	e018      	b.n	8010fc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010f96:	6839      	ldr	r1, [r7, #0]
 8010f98:	6878      	ldr	r0, [r7, #4]
 8010f9a:	f000 fc21 	bl	80117e0 <USBD_GetConfig>
          break;
 8010f9e:	e013      	b.n	8010fc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010fa0:	6839      	ldr	r1, [r7, #0]
 8010fa2:	6878      	ldr	r0, [r7, #4]
 8010fa4:	f000 fc52 	bl	801184c <USBD_GetStatus>
          break;
 8010fa8:	e00e      	b.n	8010fc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010faa:	6839      	ldr	r1, [r7, #0]
 8010fac:	6878      	ldr	r0, [r7, #4]
 8010fae:	f000 fc81 	bl	80118b4 <USBD_SetFeature>
          break;
 8010fb2:	e009      	b.n	8010fc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010fb4:	6839      	ldr	r1, [r7, #0]
 8010fb6:	6878      	ldr	r0, [r7, #4]
 8010fb8:	f000 fc90 	bl	80118dc <USBD_ClrFeature>
          break;
 8010fbc:	e004      	b.n	8010fc8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8010fbe:	6839      	ldr	r1, [r7, #0]
 8010fc0:	6878      	ldr	r0, [r7, #4]
 8010fc2:	f000 fce7 	bl	8011994 <USBD_CtlError>
          break;
 8010fc6:	bf00      	nop
      }
      break;
 8010fc8:	e004      	b.n	8010fd4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8010fca:	6839      	ldr	r1, [r7, #0]
 8010fcc:	6878      	ldr	r0, [r7, #4]
 8010fce:	f000 fce1 	bl	8011994 <USBD_CtlError>
      break;
 8010fd2:	bf00      	nop
  }

  return ret;
 8010fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	3710      	adds	r7, #16
 8010fda:	46bd      	mov	sp, r7
 8010fdc:	bd80      	pop	{r7, pc}
 8010fde:	bf00      	nop

08010fe0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b084      	sub	sp, #16
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
 8010fe8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010fea:	2300      	movs	r3, #0
 8010fec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	781b      	ldrb	r3, [r3, #0]
 8010ff2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010ff6:	2b40      	cmp	r3, #64	; 0x40
 8010ff8:	d005      	beq.n	8011006 <USBD_StdItfReq+0x26>
 8010ffa:	2b40      	cmp	r3, #64	; 0x40
 8010ffc:	d82f      	bhi.n	801105e <USBD_StdItfReq+0x7e>
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d001      	beq.n	8011006 <USBD_StdItfReq+0x26>
 8011002:	2b20      	cmp	r3, #32
 8011004:	d12b      	bne.n	801105e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801100c:	b2db      	uxtb	r3, r3
 801100e:	3b01      	subs	r3, #1
 8011010:	2b02      	cmp	r3, #2
 8011012:	d81d      	bhi.n	8011050 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011014:	683b      	ldr	r3, [r7, #0]
 8011016:	889b      	ldrh	r3, [r3, #4]
 8011018:	b2db      	uxtb	r3, r3
 801101a:	2b01      	cmp	r3, #1
 801101c:	d813      	bhi.n	8011046 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011024:	689b      	ldr	r3, [r3, #8]
 8011026:	6839      	ldr	r1, [r7, #0]
 8011028:	6878      	ldr	r0, [r7, #4]
 801102a:	4798      	blx	r3
 801102c:	4603      	mov	r3, r0
 801102e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011030:	683b      	ldr	r3, [r7, #0]
 8011032:	88db      	ldrh	r3, [r3, #6]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d110      	bne.n	801105a <USBD_StdItfReq+0x7a>
 8011038:	7bfb      	ldrb	r3, [r7, #15]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d10d      	bne.n	801105a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	f000 fcf6 	bl	8011a30 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011044:	e009      	b.n	801105a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8011046:	6839      	ldr	r1, [r7, #0]
 8011048:	6878      	ldr	r0, [r7, #4]
 801104a:	f000 fca3 	bl	8011994 <USBD_CtlError>
          break;
 801104e:	e004      	b.n	801105a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8011050:	6839      	ldr	r1, [r7, #0]
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f000 fc9e 	bl	8011994 <USBD_CtlError>
          break;
 8011058:	e000      	b.n	801105c <USBD_StdItfReq+0x7c>
          break;
 801105a:	bf00      	nop
      }
      break;
 801105c:	e004      	b.n	8011068 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801105e:	6839      	ldr	r1, [r7, #0]
 8011060:	6878      	ldr	r0, [r7, #4]
 8011062:	f000 fc97 	bl	8011994 <USBD_CtlError>
      break;
 8011066:	bf00      	nop
  }

  return ret;
 8011068:	7bfb      	ldrb	r3, [r7, #15]
}
 801106a:	4618      	mov	r0, r3
 801106c:	3710      	adds	r7, #16
 801106e:	46bd      	mov	sp, r7
 8011070:	bd80      	pop	{r7, pc}

08011072 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011072:	b580      	push	{r7, lr}
 8011074:	b084      	sub	sp, #16
 8011076:	af00      	add	r7, sp, #0
 8011078:	6078      	str	r0, [r7, #4]
 801107a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801107c:	2300      	movs	r3, #0
 801107e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	889b      	ldrh	r3, [r3, #4]
 8011084:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	781b      	ldrb	r3, [r3, #0]
 801108a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801108e:	2b40      	cmp	r3, #64	; 0x40
 8011090:	d007      	beq.n	80110a2 <USBD_StdEPReq+0x30>
 8011092:	2b40      	cmp	r3, #64	; 0x40
 8011094:	f200 8145 	bhi.w	8011322 <USBD_StdEPReq+0x2b0>
 8011098:	2b00      	cmp	r3, #0
 801109a:	d00c      	beq.n	80110b6 <USBD_StdEPReq+0x44>
 801109c:	2b20      	cmp	r3, #32
 801109e:	f040 8140 	bne.w	8011322 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110a8:	689b      	ldr	r3, [r3, #8]
 80110aa:	6839      	ldr	r1, [r7, #0]
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	4798      	blx	r3
 80110b0:	4603      	mov	r3, r0
 80110b2:	73fb      	strb	r3, [r7, #15]
      break;
 80110b4:	e13a      	b.n	801132c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80110b6:	683b      	ldr	r3, [r7, #0]
 80110b8:	785b      	ldrb	r3, [r3, #1]
 80110ba:	2b03      	cmp	r3, #3
 80110bc:	d007      	beq.n	80110ce <USBD_StdEPReq+0x5c>
 80110be:	2b03      	cmp	r3, #3
 80110c0:	f300 8129 	bgt.w	8011316 <USBD_StdEPReq+0x2a4>
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d07f      	beq.n	80111c8 <USBD_StdEPReq+0x156>
 80110c8:	2b01      	cmp	r3, #1
 80110ca:	d03c      	beq.n	8011146 <USBD_StdEPReq+0xd4>
 80110cc:	e123      	b.n	8011316 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80110d4:	b2db      	uxtb	r3, r3
 80110d6:	2b02      	cmp	r3, #2
 80110d8:	d002      	beq.n	80110e0 <USBD_StdEPReq+0x6e>
 80110da:	2b03      	cmp	r3, #3
 80110dc:	d016      	beq.n	801110c <USBD_StdEPReq+0x9a>
 80110de:	e02c      	b.n	801113a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80110e0:	7bbb      	ldrb	r3, [r7, #14]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d00d      	beq.n	8011102 <USBD_StdEPReq+0x90>
 80110e6:	7bbb      	ldrb	r3, [r7, #14]
 80110e8:	2b80      	cmp	r3, #128	; 0x80
 80110ea:	d00a      	beq.n	8011102 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80110ec:	7bbb      	ldrb	r3, [r7, #14]
 80110ee:	4619      	mov	r1, r3
 80110f0:	6878      	ldr	r0, [r7, #4]
 80110f2:	f005 fcf5 	bl	8016ae0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80110f6:	2180      	movs	r1, #128	; 0x80
 80110f8:	6878      	ldr	r0, [r7, #4]
 80110fa:	f005 fcf1 	bl	8016ae0 <USBD_LL_StallEP>
 80110fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011100:	e020      	b.n	8011144 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8011102:	6839      	ldr	r1, [r7, #0]
 8011104:	6878      	ldr	r0, [r7, #4]
 8011106:	f000 fc45 	bl	8011994 <USBD_CtlError>
              break;
 801110a:	e01b      	b.n	8011144 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	885b      	ldrh	r3, [r3, #2]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d10e      	bne.n	8011132 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011114:	7bbb      	ldrb	r3, [r7, #14]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d00b      	beq.n	8011132 <USBD_StdEPReq+0xc0>
 801111a:	7bbb      	ldrb	r3, [r7, #14]
 801111c:	2b80      	cmp	r3, #128	; 0x80
 801111e:	d008      	beq.n	8011132 <USBD_StdEPReq+0xc0>
 8011120:	683b      	ldr	r3, [r7, #0]
 8011122:	88db      	ldrh	r3, [r3, #6]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d104      	bne.n	8011132 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011128:	7bbb      	ldrb	r3, [r7, #14]
 801112a:	4619      	mov	r1, r3
 801112c:	6878      	ldr	r0, [r7, #4]
 801112e:	f005 fcd7 	bl	8016ae0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011132:	6878      	ldr	r0, [r7, #4]
 8011134:	f000 fc7c 	bl	8011a30 <USBD_CtlSendStatus>

              break;
 8011138:	e004      	b.n	8011144 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801113a:	6839      	ldr	r1, [r7, #0]
 801113c:	6878      	ldr	r0, [r7, #4]
 801113e:	f000 fc29 	bl	8011994 <USBD_CtlError>
              break;
 8011142:	bf00      	nop
          }
          break;
 8011144:	e0ec      	b.n	8011320 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801114c:	b2db      	uxtb	r3, r3
 801114e:	2b02      	cmp	r3, #2
 8011150:	d002      	beq.n	8011158 <USBD_StdEPReq+0xe6>
 8011152:	2b03      	cmp	r3, #3
 8011154:	d016      	beq.n	8011184 <USBD_StdEPReq+0x112>
 8011156:	e030      	b.n	80111ba <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011158:	7bbb      	ldrb	r3, [r7, #14]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d00d      	beq.n	801117a <USBD_StdEPReq+0x108>
 801115e:	7bbb      	ldrb	r3, [r7, #14]
 8011160:	2b80      	cmp	r3, #128	; 0x80
 8011162:	d00a      	beq.n	801117a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011164:	7bbb      	ldrb	r3, [r7, #14]
 8011166:	4619      	mov	r1, r3
 8011168:	6878      	ldr	r0, [r7, #4]
 801116a:	f005 fcb9 	bl	8016ae0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801116e:	2180      	movs	r1, #128	; 0x80
 8011170:	6878      	ldr	r0, [r7, #4]
 8011172:	f005 fcb5 	bl	8016ae0 <USBD_LL_StallEP>
 8011176:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011178:	e025      	b.n	80111c6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801117a:	6839      	ldr	r1, [r7, #0]
 801117c:	6878      	ldr	r0, [r7, #4]
 801117e:	f000 fc09 	bl	8011994 <USBD_CtlError>
              break;
 8011182:	e020      	b.n	80111c6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011184:	683b      	ldr	r3, [r7, #0]
 8011186:	885b      	ldrh	r3, [r3, #2]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d11b      	bne.n	80111c4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801118c:	7bbb      	ldrb	r3, [r7, #14]
 801118e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011192:	2b00      	cmp	r3, #0
 8011194:	d004      	beq.n	80111a0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011196:	7bbb      	ldrb	r3, [r7, #14]
 8011198:	4619      	mov	r1, r3
 801119a:	6878      	ldr	r0, [r7, #4]
 801119c:	f005 fcbf 	bl	8016b1e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80111a0:	6878      	ldr	r0, [r7, #4]
 80111a2:	f000 fc45 	bl	8011a30 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80111ac:	689b      	ldr	r3, [r3, #8]
 80111ae:	6839      	ldr	r1, [r7, #0]
 80111b0:	6878      	ldr	r0, [r7, #4]
 80111b2:	4798      	blx	r3
 80111b4:	4603      	mov	r3, r0
 80111b6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80111b8:	e004      	b.n	80111c4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80111ba:	6839      	ldr	r1, [r7, #0]
 80111bc:	6878      	ldr	r0, [r7, #4]
 80111be:	f000 fbe9 	bl	8011994 <USBD_CtlError>
              break;
 80111c2:	e000      	b.n	80111c6 <USBD_StdEPReq+0x154>
              break;
 80111c4:	bf00      	nop
          }
          break;
 80111c6:	e0ab      	b.n	8011320 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111ce:	b2db      	uxtb	r3, r3
 80111d0:	2b02      	cmp	r3, #2
 80111d2:	d002      	beq.n	80111da <USBD_StdEPReq+0x168>
 80111d4:	2b03      	cmp	r3, #3
 80111d6:	d032      	beq.n	801123e <USBD_StdEPReq+0x1cc>
 80111d8:	e097      	b.n	801130a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80111da:	7bbb      	ldrb	r3, [r7, #14]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d007      	beq.n	80111f0 <USBD_StdEPReq+0x17e>
 80111e0:	7bbb      	ldrb	r3, [r7, #14]
 80111e2:	2b80      	cmp	r3, #128	; 0x80
 80111e4:	d004      	beq.n	80111f0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80111e6:	6839      	ldr	r1, [r7, #0]
 80111e8:	6878      	ldr	r0, [r7, #4]
 80111ea:	f000 fbd3 	bl	8011994 <USBD_CtlError>
                break;
 80111ee:	e091      	b.n	8011314 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80111f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	da0b      	bge.n	8011210 <USBD_StdEPReq+0x19e>
 80111f8:	7bbb      	ldrb	r3, [r7, #14]
 80111fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80111fe:	4613      	mov	r3, r2
 8011200:	009b      	lsls	r3, r3, #2
 8011202:	4413      	add	r3, r2
 8011204:	009b      	lsls	r3, r3, #2
 8011206:	3310      	adds	r3, #16
 8011208:	687a      	ldr	r2, [r7, #4]
 801120a:	4413      	add	r3, r2
 801120c:	3304      	adds	r3, #4
 801120e:	e00b      	b.n	8011228 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011210:	7bbb      	ldrb	r3, [r7, #14]
 8011212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011216:	4613      	mov	r3, r2
 8011218:	009b      	lsls	r3, r3, #2
 801121a:	4413      	add	r3, r2
 801121c:	009b      	lsls	r3, r3, #2
 801121e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011222:	687a      	ldr	r2, [r7, #4]
 8011224:	4413      	add	r3, r2
 8011226:	3304      	adds	r3, #4
 8011228:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801122a:	68bb      	ldr	r3, [r7, #8]
 801122c:	2200      	movs	r2, #0
 801122e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011230:	68bb      	ldr	r3, [r7, #8]
 8011232:	2202      	movs	r2, #2
 8011234:	4619      	mov	r1, r3
 8011236:	6878      	ldr	r0, [r7, #4]
 8011238:	f000 fbbd 	bl	80119b6 <USBD_CtlSendData>
              break;
 801123c:	e06a      	b.n	8011314 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801123e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011242:	2b00      	cmp	r3, #0
 8011244:	da11      	bge.n	801126a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011246:	7bbb      	ldrb	r3, [r7, #14]
 8011248:	f003 020f 	and.w	r2, r3, #15
 801124c:	6879      	ldr	r1, [r7, #4]
 801124e:	4613      	mov	r3, r2
 8011250:	009b      	lsls	r3, r3, #2
 8011252:	4413      	add	r3, r2
 8011254:	009b      	lsls	r3, r3, #2
 8011256:	440b      	add	r3, r1
 8011258:	3324      	adds	r3, #36	; 0x24
 801125a:	881b      	ldrh	r3, [r3, #0]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d117      	bne.n	8011290 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8011260:	6839      	ldr	r1, [r7, #0]
 8011262:	6878      	ldr	r0, [r7, #4]
 8011264:	f000 fb96 	bl	8011994 <USBD_CtlError>
                  break;
 8011268:	e054      	b.n	8011314 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801126a:	7bbb      	ldrb	r3, [r7, #14]
 801126c:	f003 020f 	and.w	r2, r3, #15
 8011270:	6879      	ldr	r1, [r7, #4]
 8011272:	4613      	mov	r3, r2
 8011274:	009b      	lsls	r3, r3, #2
 8011276:	4413      	add	r3, r2
 8011278:	009b      	lsls	r3, r3, #2
 801127a:	440b      	add	r3, r1
 801127c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011280:	881b      	ldrh	r3, [r3, #0]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d104      	bne.n	8011290 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8011286:	6839      	ldr	r1, [r7, #0]
 8011288:	6878      	ldr	r0, [r7, #4]
 801128a:	f000 fb83 	bl	8011994 <USBD_CtlError>
                  break;
 801128e:	e041      	b.n	8011314 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011290:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011294:	2b00      	cmp	r3, #0
 8011296:	da0b      	bge.n	80112b0 <USBD_StdEPReq+0x23e>
 8011298:	7bbb      	ldrb	r3, [r7, #14]
 801129a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801129e:	4613      	mov	r3, r2
 80112a0:	009b      	lsls	r3, r3, #2
 80112a2:	4413      	add	r3, r2
 80112a4:	009b      	lsls	r3, r3, #2
 80112a6:	3310      	adds	r3, #16
 80112a8:	687a      	ldr	r2, [r7, #4]
 80112aa:	4413      	add	r3, r2
 80112ac:	3304      	adds	r3, #4
 80112ae:	e00b      	b.n	80112c8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80112b0:	7bbb      	ldrb	r3, [r7, #14]
 80112b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80112b6:	4613      	mov	r3, r2
 80112b8:	009b      	lsls	r3, r3, #2
 80112ba:	4413      	add	r3, r2
 80112bc:	009b      	lsls	r3, r3, #2
 80112be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80112c2:	687a      	ldr	r2, [r7, #4]
 80112c4:	4413      	add	r3, r2
 80112c6:	3304      	adds	r3, #4
 80112c8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80112ca:	7bbb      	ldrb	r3, [r7, #14]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d002      	beq.n	80112d6 <USBD_StdEPReq+0x264>
 80112d0:	7bbb      	ldrb	r3, [r7, #14]
 80112d2:	2b80      	cmp	r3, #128	; 0x80
 80112d4:	d103      	bne.n	80112de <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80112d6:	68bb      	ldr	r3, [r7, #8]
 80112d8:	2200      	movs	r2, #0
 80112da:	601a      	str	r2, [r3, #0]
 80112dc:	e00e      	b.n	80112fc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80112de:	7bbb      	ldrb	r3, [r7, #14]
 80112e0:	4619      	mov	r1, r3
 80112e2:	6878      	ldr	r0, [r7, #4]
 80112e4:	f005 fc3a 	bl	8016b5c <USBD_LL_IsStallEP>
 80112e8:	4603      	mov	r3, r0
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d003      	beq.n	80112f6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	2201      	movs	r2, #1
 80112f2:	601a      	str	r2, [r3, #0]
 80112f4:	e002      	b.n	80112fc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80112f6:	68bb      	ldr	r3, [r7, #8]
 80112f8:	2200      	movs	r2, #0
 80112fa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80112fc:	68bb      	ldr	r3, [r7, #8]
 80112fe:	2202      	movs	r2, #2
 8011300:	4619      	mov	r1, r3
 8011302:	6878      	ldr	r0, [r7, #4]
 8011304:	f000 fb57 	bl	80119b6 <USBD_CtlSendData>
              break;
 8011308:	e004      	b.n	8011314 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801130a:	6839      	ldr	r1, [r7, #0]
 801130c:	6878      	ldr	r0, [r7, #4]
 801130e:	f000 fb41 	bl	8011994 <USBD_CtlError>
              break;
 8011312:	bf00      	nop
          }
          break;
 8011314:	e004      	b.n	8011320 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8011316:	6839      	ldr	r1, [r7, #0]
 8011318:	6878      	ldr	r0, [r7, #4]
 801131a:	f000 fb3b 	bl	8011994 <USBD_CtlError>
          break;
 801131e:	bf00      	nop
      }
      break;
 8011320:	e004      	b.n	801132c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8011322:	6839      	ldr	r1, [r7, #0]
 8011324:	6878      	ldr	r0, [r7, #4]
 8011326:	f000 fb35 	bl	8011994 <USBD_CtlError>
      break;
 801132a:	bf00      	nop
  }

  return ret;
 801132c:	7bfb      	ldrb	r3, [r7, #15]
}
 801132e:	4618      	mov	r0, r3
 8011330:	3710      	adds	r7, #16
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}
	...

08011338 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b084      	sub	sp, #16
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
 8011340:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011342:	2300      	movs	r3, #0
 8011344:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011346:	2300      	movs	r3, #0
 8011348:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801134a:	2300      	movs	r3, #0
 801134c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	885b      	ldrh	r3, [r3, #2]
 8011352:	0a1b      	lsrs	r3, r3, #8
 8011354:	b29b      	uxth	r3, r3
 8011356:	3b01      	subs	r3, #1
 8011358:	2b06      	cmp	r3, #6
 801135a:	f200 8128 	bhi.w	80115ae <USBD_GetDescriptor+0x276>
 801135e:	a201      	add	r2, pc, #4	; (adr r2, 8011364 <USBD_GetDescriptor+0x2c>)
 8011360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011364:	08011381 	.word	0x08011381
 8011368:	08011399 	.word	0x08011399
 801136c:	080113d9 	.word	0x080113d9
 8011370:	080115af 	.word	0x080115af
 8011374:	080115af 	.word	0x080115af
 8011378:	0801154f 	.word	0x0801154f
 801137c:	0801157b 	.word	0x0801157b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	687a      	ldr	r2, [r7, #4]
 801138a:	7c12      	ldrb	r2, [r2, #16]
 801138c:	f107 0108 	add.w	r1, r7, #8
 8011390:	4610      	mov	r0, r2
 8011392:	4798      	blx	r3
 8011394:	60f8      	str	r0, [r7, #12]
      break;
 8011396:	e112      	b.n	80115be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	7c1b      	ldrb	r3, [r3, #16]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d10d      	bne.n	80113bc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113a8:	f107 0208 	add.w	r2, r7, #8
 80113ac:	4610      	mov	r0, r2
 80113ae:	4798      	blx	r3
 80113b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	3301      	adds	r3, #1
 80113b6:	2202      	movs	r2, #2
 80113b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80113ba:	e100      	b.n	80115be <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113c4:	f107 0208 	add.w	r2, r7, #8
 80113c8:	4610      	mov	r0, r2
 80113ca:	4798      	blx	r3
 80113cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	3301      	adds	r3, #1
 80113d2:	2202      	movs	r2, #2
 80113d4:	701a      	strb	r2, [r3, #0]
      break;
 80113d6:	e0f2      	b.n	80115be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	885b      	ldrh	r3, [r3, #2]
 80113dc:	b2db      	uxtb	r3, r3
 80113de:	2b05      	cmp	r3, #5
 80113e0:	f200 80ac 	bhi.w	801153c <USBD_GetDescriptor+0x204>
 80113e4:	a201      	add	r2, pc, #4	; (adr r2, 80113ec <USBD_GetDescriptor+0xb4>)
 80113e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113ea:	bf00      	nop
 80113ec:	08011405 	.word	0x08011405
 80113f0:	08011439 	.word	0x08011439
 80113f4:	0801146d 	.word	0x0801146d
 80113f8:	080114a1 	.word	0x080114a1
 80113fc:	080114d5 	.word	0x080114d5
 8011400:	08011509 	.word	0x08011509
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801140a:	685b      	ldr	r3, [r3, #4]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d00b      	beq.n	8011428 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011416:	685b      	ldr	r3, [r3, #4]
 8011418:	687a      	ldr	r2, [r7, #4]
 801141a:	7c12      	ldrb	r2, [r2, #16]
 801141c:	f107 0108 	add.w	r1, r7, #8
 8011420:	4610      	mov	r0, r2
 8011422:	4798      	blx	r3
 8011424:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011426:	e091      	b.n	801154c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011428:	6839      	ldr	r1, [r7, #0]
 801142a:	6878      	ldr	r0, [r7, #4]
 801142c:	f000 fab2 	bl	8011994 <USBD_CtlError>
            err++;
 8011430:	7afb      	ldrb	r3, [r7, #11]
 8011432:	3301      	adds	r3, #1
 8011434:	72fb      	strb	r3, [r7, #11]
          break;
 8011436:	e089      	b.n	801154c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801143e:	689b      	ldr	r3, [r3, #8]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d00b      	beq.n	801145c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801144a:	689b      	ldr	r3, [r3, #8]
 801144c:	687a      	ldr	r2, [r7, #4]
 801144e:	7c12      	ldrb	r2, [r2, #16]
 8011450:	f107 0108 	add.w	r1, r7, #8
 8011454:	4610      	mov	r0, r2
 8011456:	4798      	blx	r3
 8011458:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801145a:	e077      	b.n	801154c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801145c:	6839      	ldr	r1, [r7, #0]
 801145e:	6878      	ldr	r0, [r7, #4]
 8011460:	f000 fa98 	bl	8011994 <USBD_CtlError>
            err++;
 8011464:	7afb      	ldrb	r3, [r7, #11]
 8011466:	3301      	adds	r3, #1
 8011468:	72fb      	strb	r3, [r7, #11]
          break;
 801146a:	e06f      	b.n	801154c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011472:	68db      	ldr	r3, [r3, #12]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d00b      	beq.n	8011490 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801147e:	68db      	ldr	r3, [r3, #12]
 8011480:	687a      	ldr	r2, [r7, #4]
 8011482:	7c12      	ldrb	r2, [r2, #16]
 8011484:	f107 0108 	add.w	r1, r7, #8
 8011488:	4610      	mov	r0, r2
 801148a:	4798      	blx	r3
 801148c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801148e:	e05d      	b.n	801154c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011490:	6839      	ldr	r1, [r7, #0]
 8011492:	6878      	ldr	r0, [r7, #4]
 8011494:	f000 fa7e 	bl	8011994 <USBD_CtlError>
            err++;
 8011498:	7afb      	ldrb	r3, [r7, #11]
 801149a:	3301      	adds	r3, #1
 801149c:	72fb      	strb	r3, [r7, #11]
          break;
 801149e:	e055      	b.n	801154c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80114a6:	691b      	ldr	r3, [r3, #16]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d00b      	beq.n	80114c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80114b2:	691b      	ldr	r3, [r3, #16]
 80114b4:	687a      	ldr	r2, [r7, #4]
 80114b6:	7c12      	ldrb	r2, [r2, #16]
 80114b8:	f107 0108 	add.w	r1, r7, #8
 80114bc:	4610      	mov	r0, r2
 80114be:	4798      	blx	r3
 80114c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80114c2:	e043      	b.n	801154c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80114c4:	6839      	ldr	r1, [r7, #0]
 80114c6:	6878      	ldr	r0, [r7, #4]
 80114c8:	f000 fa64 	bl	8011994 <USBD_CtlError>
            err++;
 80114cc:	7afb      	ldrb	r3, [r7, #11]
 80114ce:	3301      	adds	r3, #1
 80114d0:	72fb      	strb	r3, [r7, #11]
          break;
 80114d2:	e03b      	b.n	801154c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80114da:	695b      	ldr	r3, [r3, #20]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d00b      	beq.n	80114f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80114e6:	695b      	ldr	r3, [r3, #20]
 80114e8:	687a      	ldr	r2, [r7, #4]
 80114ea:	7c12      	ldrb	r2, [r2, #16]
 80114ec:	f107 0108 	add.w	r1, r7, #8
 80114f0:	4610      	mov	r0, r2
 80114f2:	4798      	blx	r3
 80114f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80114f6:	e029      	b.n	801154c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80114f8:	6839      	ldr	r1, [r7, #0]
 80114fa:	6878      	ldr	r0, [r7, #4]
 80114fc:	f000 fa4a 	bl	8011994 <USBD_CtlError>
            err++;
 8011500:	7afb      	ldrb	r3, [r7, #11]
 8011502:	3301      	adds	r3, #1
 8011504:	72fb      	strb	r3, [r7, #11]
          break;
 8011506:	e021      	b.n	801154c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801150e:	699b      	ldr	r3, [r3, #24]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d00b      	beq.n	801152c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801151a:	699b      	ldr	r3, [r3, #24]
 801151c:	687a      	ldr	r2, [r7, #4]
 801151e:	7c12      	ldrb	r2, [r2, #16]
 8011520:	f107 0108 	add.w	r1, r7, #8
 8011524:	4610      	mov	r0, r2
 8011526:	4798      	blx	r3
 8011528:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801152a:	e00f      	b.n	801154c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801152c:	6839      	ldr	r1, [r7, #0]
 801152e:	6878      	ldr	r0, [r7, #4]
 8011530:	f000 fa30 	bl	8011994 <USBD_CtlError>
            err++;
 8011534:	7afb      	ldrb	r3, [r7, #11]
 8011536:	3301      	adds	r3, #1
 8011538:	72fb      	strb	r3, [r7, #11]
          break;
 801153a:	e007      	b.n	801154c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801153c:	6839      	ldr	r1, [r7, #0]
 801153e:	6878      	ldr	r0, [r7, #4]
 8011540:	f000 fa28 	bl	8011994 <USBD_CtlError>
          err++;
 8011544:	7afb      	ldrb	r3, [r7, #11]
 8011546:	3301      	adds	r3, #1
 8011548:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801154a:	bf00      	nop
      }
      break;
 801154c:	e037      	b.n	80115be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	7c1b      	ldrb	r3, [r3, #16]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d109      	bne.n	801156a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801155c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801155e:	f107 0208 	add.w	r2, r7, #8
 8011562:	4610      	mov	r0, r2
 8011564:	4798      	blx	r3
 8011566:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011568:	e029      	b.n	80115be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801156a:	6839      	ldr	r1, [r7, #0]
 801156c:	6878      	ldr	r0, [r7, #4]
 801156e:	f000 fa11 	bl	8011994 <USBD_CtlError>
        err++;
 8011572:	7afb      	ldrb	r3, [r7, #11]
 8011574:	3301      	adds	r3, #1
 8011576:	72fb      	strb	r3, [r7, #11]
      break;
 8011578:	e021      	b.n	80115be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	7c1b      	ldrb	r3, [r3, #16]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d10d      	bne.n	801159e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801158a:	f107 0208 	add.w	r2, r7, #8
 801158e:	4610      	mov	r0, r2
 8011590:	4798      	blx	r3
 8011592:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	3301      	adds	r3, #1
 8011598:	2207      	movs	r2, #7
 801159a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801159c:	e00f      	b.n	80115be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801159e:	6839      	ldr	r1, [r7, #0]
 80115a0:	6878      	ldr	r0, [r7, #4]
 80115a2:	f000 f9f7 	bl	8011994 <USBD_CtlError>
        err++;
 80115a6:	7afb      	ldrb	r3, [r7, #11]
 80115a8:	3301      	adds	r3, #1
 80115aa:	72fb      	strb	r3, [r7, #11]
      break;
 80115ac:	e007      	b.n	80115be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80115ae:	6839      	ldr	r1, [r7, #0]
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	f000 f9ef 	bl	8011994 <USBD_CtlError>
      err++;
 80115b6:	7afb      	ldrb	r3, [r7, #11]
 80115b8:	3301      	adds	r3, #1
 80115ba:	72fb      	strb	r3, [r7, #11]
      break;
 80115bc:	bf00      	nop
  }

  if (err != 0U)
 80115be:	7afb      	ldrb	r3, [r7, #11]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d11e      	bne.n	8011602 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	88db      	ldrh	r3, [r3, #6]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d016      	beq.n	80115fa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80115cc:	893b      	ldrh	r3, [r7, #8]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d00e      	beq.n	80115f0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80115d2:	683b      	ldr	r3, [r7, #0]
 80115d4:	88da      	ldrh	r2, [r3, #6]
 80115d6:	893b      	ldrh	r3, [r7, #8]
 80115d8:	4293      	cmp	r3, r2
 80115da:	bf28      	it	cs
 80115dc:	4613      	movcs	r3, r2
 80115de:	b29b      	uxth	r3, r3
 80115e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80115e2:	893b      	ldrh	r3, [r7, #8]
 80115e4:	461a      	mov	r2, r3
 80115e6:	68f9      	ldr	r1, [r7, #12]
 80115e8:	6878      	ldr	r0, [r7, #4]
 80115ea:	f000 f9e4 	bl	80119b6 <USBD_CtlSendData>
 80115ee:	e009      	b.n	8011604 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80115f0:	6839      	ldr	r1, [r7, #0]
 80115f2:	6878      	ldr	r0, [r7, #4]
 80115f4:	f000 f9ce 	bl	8011994 <USBD_CtlError>
 80115f8:	e004      	b.n	8011604 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80115fa:	6878      	ldr	r0, [r7, #4]
 80115fc:	f000 fa18 	bl	8011a30 <USBD_CtlSendStatus>
 8011600:	e000      	b.n	8011604 <USBD_GetDescriptor+0x2cc>
    return;
 8011602:	bf00      	nop
  }
}
 8011604:	3710      	adds	r7, #16
 8011606:	46bd      	mov	sp, r7
 8011608:	bd80      	pop	{r7, pc}
 801160a:	bf00      	nop

0801160c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b084      	sub	sp, #16
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
 8011614:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011616:	683b      	ldr	r3, [r7, #0]
 8011618:	889b      	ldrh	r3, [r3, #4]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d131      	bne.n	8011682 <USBD_SetAddress+0x76>
 801161e:	683b      	ldr	r3, [r7, #0]
 8011620:	88db      	ldrh	r3, [r3, #6]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d12d      	bne.n	8011682 <USBD_SetAddress+0x76>
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	885b      	ldrh	r3, [r3, #2]
 801162a:	2b7f      	cmp	r3, #127	; 0x7f
 801162c:	d829      	bhi.n	8011682 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	885b      	ldrh	r3, [r3, #2]
 8011632:	b2db      	uxtb	r3, r3
 8011634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011638:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011640:	b2db      	uxtb	r3, r3
 8011642:	2b03      	cmp	r3, #3
 8011644:	d104      	bne.n	8011650 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011646:	6839      	ldr	r1, [r7, #0]
 8011648:	6878      	ldr	r0, [r7, #4]
 801164a:	f000 f9a3 	bl	8011994 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801164e:	e01d      	b.n	801168c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	7bfa      	ldrb	r2, [r7, #15]
 8011654:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011658:	7bfb      	ldrb	r3, [r7, #15]
 801165a:	4619      	mov	r1, r3
 801165c:	6878      	ldr	r0, [r7, #4]
 801165e:	f005 faa9 	bl	8016bb4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011662:	6878      	ldr	r0, [r7, #4]
 8011664:	f000 f9e4 	bl	8011a30 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011668:	7bfb      	ldrb	r3, [r7, #15]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d004      	beq.n	8011678 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	2202      	movs	r2, #2
 8011672:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011676:	e009      	b.n	801168c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	2201      	movs	r2, #1
 801167c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011680:	e004      	b.n	801168c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011682:	6839      	ldr	r1, [r7, #0]
 8011684:	6878      	ldr	r0, [r7, #4]
 8011686:	f000 f985 	bl	8011994 <USBD_CtlError>
  }
}
 801168a:	bf00      	nop
 801168c:	bf00      	nop
 801168e:	3710      	adds	r7, #16
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}

08011694 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b084      	sub	sp, #16
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
 801169c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801169e:	2300      	movs	r3, #0
 80116a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	885b      	ldrh	r3, [r3, #2]
 80116a6:	b2da      	uxtb	r2, r3
 80116a8:	4b4c      	ldr	r3, [pc, #304]	; (80117dc <USBD_SetConfig+0x148>)
 80116aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80116ac:	4b4b      	ldr	r3, [pc, #300]	; (80117dc <USBD_SetConfig+0x148>)
 80116ae:	781b      	ldrb	r3, [r3, #0]
 80116b0:	2b01      	cmp	r3, #1
 80116b2:	d905      	bls.n	80116c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80116b4:	6839      	ldr	r1, [r7, #0]
 80116b6:	6878      	ldr	r0, [r7, #4]
 80116b8:	f000 f96c 	bl	8011994 <USBD_CtlError>
    return USBD_FAIL;
 80116bc:	2303      	movs	r3, #3
 80116be:	e088      	b.n	80117d2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80116c6:	b2db      	uxtb	r3, r3
 80116c8:	2b02      	cmp	r3, #2
 80116ca:	d002      	beq.n	80116d2 <USBD_SetConfig+0x3e>
 80116cc:	2b03      	cmp	r3, #3
 80116ce:	d025      	beq.n	801171c <USBD_SetConfig+0x88>
 80116d0:	e071      	b.n	80117b6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80116d2:	4b42      	ldr	r3, [pc, #264]	; (80117dc <USBD_SetConfig+0x148>)
 80116d4:	781b      	ldrb	r3, [r3, #0]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d01c      	beq.n	8011714 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80116da:	4b40      	ldr	r3, [pc, #256]	; (80117dc <USBD_SetConfig+0x148>)
 80116dc:	781b      	ldrb	r3, [r3, #0]
 80116de:	461a      	mov	r2, r3
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80116e4:	4b3d      	ldr	r3, [pc, #244]	; (80117dc <USBD_SetConfig+0x148>)
 80116e6:	781b      	ldrb	r3, [r3, #0]
 80116e8:	4619      	mov	r1, r3
 80116ea:	6878      	ldr	r0, [r7, #4]
 80116ec:	f7ff f948 	bl	8010980 <USBD_SetClassConfig>
 80116f0:	4603      	mov	r3, r0
 80116f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80116f4:	7bfb      	ldrb	r3, [r7, #15]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d004      	beq.n	8011704 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80116fa:	6839      	ldr	r1, [r7, #0]
 80116fc:	6878      	ldr	r0, [r7, #4]
 80116fe:	f000 f949 	bl	8011994 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011702:	e065      	b.n	80117d0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011704:	6878      	ldr	r0, [r7, #4]
 8011706:	f000 f993 	bl	8011a30 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	2203      	movs	r2, #3
 801170e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011712:	e05d      	b.n	80117d0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011714:	6878      	ldr	r0, [r7, #4]
 8011716:	f000 f98b 	bl	8011a30 <USBD_CtlSendStatus>
      break;
 801171a:	e059      	b.n	80117d0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801171c:	4b2f      	ldr	r3, [pc, #188]	; (80117dc <USBD_SetConfig+0x148>)
 801171e:	781b      	ldrb	r3, [r3, #0]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d112      	bne.n	801174a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2202      	movs	r2, #2
 8011728:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801172c:	4b2b      	ldr	r3, [pc, #172]	; (80117dc <USBD_SetConfig+0x148>)
 801172e:	781b      	ldrb	r3, [r3, #0]
 8011730:	461a      	mov	r2, r3
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011736:	4b29      	ldr	r3, [pc, #164]	; (80117dc <USBD_SetConfig+0x148>)
 8011738:	781b      	ldrb	r3, [r3, #0]
 801173a:	4619      	mov	r1, r3
 801173c:	6878      	ldr	r0, [r7, #4]
 801173e:	f7ff f93b 	bl	80109b8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011742:	6878      	ldr	r0, [r7, #4]
 8011744:	f000 f974 	bl	8011a30 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011748:	e042      	b.n	80117d0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801174a:	4b24      	ldr	r3, [pc, #144]	; (80117dc <USBD_SetConfig+0x148>)
 801174c:	781b      	ldrb	r3, [r3, #0]
 801174e:	461a      	mov	r2, r3
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	685b      	ldr	r3, [r3, #4]
 8011754:	429a      	cmp	r2, r3
 8011756:	d02a      	beq.n	80117ae <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	685b      	ldr	r3, [r3, #4]
 801175c:	b2db      	uxtb	r3, r3
 801175e:	4619      	mov	r1, r3
 8011760:	6878      	ldr	r0, [r7, #4]
 8011762:	f7ff f929 	bl	80109b8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011766:	4b1d      	ldr	r3, [pc, #116]	; (80117dc <USBD_SetConfig+0x148>)
 8011768:	781b      	ldrb	r3, [r3, #0]
 801176a:	461a      	mov	r2, r3
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011770:	4b1a      	ldr	r3, [pc, #104]	; (80117dc <USBD_SetConfig+0x148>)
 8011772:	781b      	ldrb	r3, [r3, #0]
 8011774:	4619      	mov	r1, r3
 8011776:	6878      	ldr	r0, [r7, #4]
 8011778:	f7ff f902 	bl	8010980 <USBD_SetClassConfig>
 801177c:	4603      	mov	r3, r0
 801177e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011780:	7bfb      	ldrb	r3, [r7, #15]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d00f      	beq.n	80117a6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8011786:	6839      	ldr	r1, [r7, #0]
 8011788:	6878      	ldr	r0, [r7, #4]
 801178a:	f000 f903 	bl	8011994 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	685b      	ldr	r3, [r3, #4]
 8011792:	b2db      	uxtb	r3, r3
 8011794:	4619      	mov	r1, r3
 8011796:	6878      	ldr	r0, [r7, #4]
 8011798:	f7ff f90e 	bl	80109b8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	2202      	movs	r2, #2
 80117a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80117a4:	e014      	b.n	80117d0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80117a6:	6878      	ldr	r0, [r7, #4]
 80117a8:	f000 f942 	bl	8011a30 <USBD_CtlSendStatus>
      break;
 80117ac:	e010      	b.n	80117d0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80117ae:	6878      	ldr	r0, [r7, #4]
 80117b0:	f000 f93e 	bl	8011a30 <USBD_CtlSendStatus>
      break;
 80117b4:	e00c      	b.n	80117d0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80117b6:	6839      	ldr	r1, [r7, #0]
 80117b8:	6878      	ldr	r0, [r7, #4]
 80117ba:	f000 f8eb 	bl	8011994 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80117be:	4b07      	ldr	r3, [pc, #28]	; (80117dc <USBD_SetConfig+0x148>)
 80117c0:	781b      	ldrb	r3, [r3, #0]
 80117c2:	4619      	mov	r1, r3
 80117c4:	6878      	ldr	r0, [r7, #4]
 80117c6:	f7ff f8f7 	bl	80109b8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80117ca:	2303      	movs	r3, #3
 80117cc:	73fb      	strb	r3, [r7, #15]
      break;
 80117ce:	bf00      	nop
  }

  return ret;
 80117d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80117d2:	4618      	mov	r0, r3
 80117d4:	3710      	adds	r7, #16
 80117d6:	46bd      	mov	sp, r7
 80117d8:	bd80      	pop	{r7, pc}
 80117da:	bf00      	nop
 80117dc:	200006c4 	.word	0x200006c4

080117e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b082      	sub	sp, #8
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
 80117e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80117ea:	683b      	ldr	r3, [r7, #0]
 80117ec:	88db      	ldrh	r3, [r3, #6]
 80117ee:	2b01      	cmp	r3, #1
 80117f0:	d004      	beq.n	80117fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80117f2:	6839      	ldr	r1, [r7, #0]
 80117f4:	6878      	ldr	r0, [r7, #4]
 80117f6:	f000 f8cd 	bl	8011994 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80117fa:	e023      	b.n	8011844 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011802:	b2db      	uxtb	r3, r3
 8011804:	2b02      	cmp	r3, #2
 8011806:	dc02      	bgt.n	801180e <USBD_GetConfig+0x2e>
 8011808:	2b00      	cmp	r3, #0
 801180a:	dc03      	bgt.n	8011814 <USBD_GetConfig+0x34>
 801180c:	e015      	b.n	801183a <USBD_GetConfig+0x5a>
 801180e:	2b03      	cmp	r3, #3
 8011810:	d00b      	beq.n	801182a <USBD_GetConfig+0x4a>
 8011812:	e012      	b.n	801183a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	2200      	movs	r2, #0
 8011818:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	3308      	adds	r3, #8
 801181e:	2201      	movs	r2, #1
 8011820:	4619      	mov	r1, r3
 8011822:	6878      	ldr	r0, [r7, #4]
 8011824:	f000 f8c7 	bl	80119b6 <USBD_CtlSendData>
        break;
 8011828:	e00c      	b.n	8011844 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	3304      	adds	r3, #4
 801182e:	2201      	movs	r2, #1
 8011830:	4619      	mov	r1, r3
 8011832:	6878      	ldr	r0, [r7, #4]
 8011834:	f000 f8bf 	bl	80119b6 <USBD_CtlSendData>
        break;
 8011838:	e004      	b.n	8011844 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801183a:	6839      	ldr	r1, [r7, #0]
 801183c:	6878      	ldr	r0, [r7, #4]
 801183e:	f000 f8a9 	bl	8011994 <USBD_CtlError>
        break;
 8011842:	bf00      	nop
}
 8011844:	bf00      	nop
 8011846:	3708      	adds	r7, #8
 8011848:	46bd      	mov	sp, r7
 801184a:	bd80      	pop	{r7, pc}

0801184c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801184c:	b580      	push	{r7, lr}
 801184e:	b082      	sub	sp, #8
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
 8011854:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801185c:	b2db      	uxtb	r3, r3
 801185e:	3b01      	subs	r3, #1
 8011860:	2b02      	cmp	r3, #2
 8011862:	d81e      	bhi.n	80118a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011864:	683b      	ldr	r3, [r7, #0]
 8011866:	88db      	ldrh	r3, [r3, #6]
 8011868:	2b02      	cmp	r3, #2
 801186a:	d004      	beq.n	8011876 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801186c:	6839      	ldr	r1, [r7, #0]
 801186e:	6878      	ldr	r0, [r7, #4]
 8011870:	f000 f890 	bl	8011994 <USBD_CtlError>
        break;
 8011874:	e01a      	b.n	80118ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	2201      	movs	r2, #1
 801187a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8011882:	2b00      	cmp	r3, #0
 8011884:	d005      	beq.n	8011892 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	68db      	ldr	r3, [r3, #12]
 801188a:	f043 0202 	orr.w	r2, r3, #2
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	330c      	adds	r3, #12
 8011896:	2202      	movs	r2, #2
 8011898:	4619      	mov	r1, r3
 801189a:	6878      	ldr	r0, [r7, #4]
 801189c:	f000 f88b 	bl	80119b6 <USBD_CtlSendData>
      break;
 80118a0:	e004      	b.n	80118ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80118a2:	6839      	ldr	r1, [r7, #0]
 80118a4:	6878      	ldr	r0, [r7, #4]
 80118a6:	f000 f875 	bl	8011994 <USBD_CtlError>
      break;
 80118aa:	bf00      	nop
  }
}
 80118ac:	bf00      	nop
 80118ae:	3708      	adds	r7, #8
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd80      	pop	{r7, pc}

080118b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b082      	sub	sp, #8
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
 80118bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80118be:	683b      	ldr	r3, [r7, #0]
 80118c0:	885b      	ldrh	r3, [r3, #2]
 80118c2:	2b01      	cmp	r3, #1
 80118c4:	d106      	bne.n	80118d4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	2201      	movs	r2, #1
 80118ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80118ce:	6878      	ldr	r0, [r7, #4]
 80118d0:	f000 f8ae 	bl	8011a30 <USBD_CtlSendStatus>
  }
}
 80118d4:	bf00      	nop
 80118d6:	3708      	adds	r7, #8
 80118d8:	46bd      	mov	sp, r7
 80118da:	bd80      	pop	{r7, pc}

080118dc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	b082      	sub	sp, #8
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
 80118e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118ec:	b2db      	uxtb	r3, r3
 80118ee:	3b01      	subs	r3, #1
 80118f0:	2b02      	cmp	r3, #2
 80118f2:	d80b      	bhi.n	801190c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	885b      	ldrh	r3, [r3, #2]
 80118f8:	2b01      	cmp	r3, #1
 80118fa:	d10c      	bne.n	8011916 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	2200      	movs	r2, #0
 8011900:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011904:	6878      	ldr	r0, [r7, #4]
 8011906:	f000 f893 	bl	8011a30 <USBD_CtlSendStatus>
      }
      break;
 801190a:	e004      	b.n	8011916 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801190c:	6839      	ldr	r1, [r7, #0]
 801190e:	6878      	ldr	r0, [r7, #4]
 8011910:	f000 f840 	bl	8011994 <USBD_CtlError>
      break;
 8011914:	e000      	b.n	8011918 <USBD_ClrFeature+0x3c>
      break;
 8011916:	bf00      	nop
  }
}
 8011918:	bf00      	nop
 801191a:	3708      	adds	r7, #8
 801191c:	46bd      	mov	sp, r7
 801191e:	bd80      	pop	{r7, pc}

08011920 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b084      	sub	sp, #16
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
 8011928:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	781a      	ldrb	r2, [r3, #0]
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	3301      	adds	r3, #1
 801193a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	781a      	ldrb	r2, [r3, #0]
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	3301      	adds	r3, #1
 8011948:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801194a:	68f8      	ldr	r0, [r7, #12]
 801194c:	f7ff fabb 	bl	8010ec6 <SWAPBYTE>
 8011950:	4603      	mov	r3, r0
 8011952:	461a      	mov	r2, r3
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	3301      	adds	r3, #1
 801195c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	3301      	adds	r3, #1
 8011962:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011964:	68f8      	ldr	r0, [r7, #12]
 8011966:	f7ff faae 	bl	8010ec6 <SWAPBYTE>
 801196a:	4603      	mov	r3, r0
 801196c:	461a      	mov	r2, r3
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	3301      	adds	r3, #1
 8011976:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	3301      	adds	r3, #1
 801197c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801197e:	68f8      	ldr	r0, [r7, #12]
 8011980:	f7ff faa1 	bl	8010ec6 <SWAPBYTE>
 8011984:	4603      	mov	r3, r0
 8011986:	461a      	mov	r2, r3
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	80da      	strh	r2, [r3, #6]
}
 801198c:	bf00      	nop
 801198e:	3710      	adds	r7, #16
 8011990:	46bd      	mov	sp, r7
 8011992:	bd80      	pop	{r7, pc}

08011994 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b082      	sub	sp, #8
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
 801199c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801199e:	2180      	movs	r1, #128	; 0x80
 80119a0:	6878      	ldr	r0, [r7, #4]
 80119a2:	f005 f89d 	bl	8016ae0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80119a6:	2100      	movs	r1, #0
 80119a8:	6878      	ldr	r0, [r7, #4]
 80119aa:	f005 f899 	bl	8016ae0 <USBD_LL_StallEP>
}
 80119ae:	bf00      	nop
 80119b0:	3708      	adds	r7, #8
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd80      	pop	{r7, pc}

080119b6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80119b6:	b580      	push	{r7, lr}
 80119b8:	b084      	sub	sp, #16
 80119ba:	af00      	add	r7, sp, #0
 80119bc:	60f8      	str	r0, [r7, #12]
 80119be:	60b9      	str	r1, [r7, #8]
 80119c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	2202      	movs	r2, #2
 80119c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	687a      	ldr	r2, [r7, #4]
 80119ce:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	687a      	ldr	r2, [r7, #4]
 80119d4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	68ba      	ldr	r2, [r7, #8]
 80119da:	2100      	movs	r1, #0
 80119dc:	68f8      	ldr	r0, [r7, #12]
 80119de:	f005 f908 	bl	8016bf2 <USBD_LL_Transmit>

  return USBD_OK;
 80119e2:	2300      	movs	r3, #0
}
 80119e4:	4618      	mov	r0, r3
 80119e6:	3710      	adds	r7, #16
 80119e8:	46bd      	mov	sp, r7
 80119ea:	bd80      	pop	{r7, pc}

080119ec <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b084      	sub	sp, #16
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	60f8      	str	r0, [r7, #12]
 80119f4:	60b9      	str	r1, [r7, #8]
 80119f6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	68ba      	ldr	r2, [r7, #8]
 80119fc:	2100      	movs	r1, #0
 80119fe:	68f8      	ldr	r0, [r7, #12]
 8011a00:	f005 f8f7 	bl	8016bf2 <USBD_LL_Transmit>

  return USBD_OK;
 8011a04:	2300      	movs	r3, #0
}
 8011a06:	4618      	mov	r0, r3
 8011a08:	3710      	adds	r7, #16
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	bd80      	pop	{r7, pc}

08011a0e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011a0e:	b580      	push	{r7, lr}
 8011a10:	b084      	sub	sp, #16
 8011a12:	af00      	add	r7, sp, #0
 8011a14:	60f8      	str	r0, [r7, #12]
 8011a16:	60b9      	str	r1, [r7, #8]
 8011a18:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	68ba      	ldr	r2, [r7, #8]
 8011a1e:	2100      	movs	r1, #0
 8011a20:	68f8      	ldr	r0, [r7, #12]
 8011a22:	f005 f907 	bl	8016c34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011a26:	2300      	movs	r3, #0
}
 8011a28:	4618      	mov	r0, r3
 8011a2a:	3710      	adds	r7, #16
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}

08011a30 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b082      	sub	sp, #8
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	2204      	movs	r2, #4
 8011a3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011a40:	2300      	movs	r3, #0
 8011a42:	2200      	movs	r2, #0
 8011a44:	2100      	movs	r1, #0
 8011a46:	6878      	ldr	r0, [r7, #4]
 8011a48:	f005 f8d3 	bl	8016bf2 <USBD_LL_Transmit>

  return USBD_OK;
 8011a4c:	2300      	movs	r3, #0
}
 8011a4e:	4618      	mov	r0, r3
 8011a50:	3708      	adds	r7, #8
 8011a52:	46bd      	mov	sp, r7
 8011a54:	bd80      	pop	{r7, pc}

08011a56 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011a56:	b580      	push	{r7, lr}
 8011a58:	b082      	sub	sp, #8
 8011a5a:	af00      	add	r7, sp, #0
 8011a5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2205      	movs	r2, #5
 8011a62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011a66:	2300      	movs	r3, #0
 8011a68:	2200      	movs	r2, #0
 8011a6a:	2100      	movs	r1, #0
 8011a6c:	6878      	ldr	r0, [r7, #4]
 8011a6e:	f005 f8e1 	bl	8016c34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011a72:	2300      	movs	r3, #0
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	3708      	adds	r7, #8
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}

08011a7c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b084      	sub	sp, #16
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	4603      	mov	r3, r0
 8011a84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011a86:	79fb      	ldrb	r3, [r7, #7]
 8011a88:	4a08      	ldr	r2, [pc, #32]	; (8011aac <disk_status+0x30>)
 8011a8a:	009b      	lsls	r3, r3, #2
 8011a8c:	4413      	add	r3, r2
 8011a8e:	685b      	ldr	r3, [r3, #4]
 8011a90:	685b      	ldr	r3, [r3, #4]
 8011a92:	79fa      	ldrb	r2, [r7, #7]
 8011a94:	4905      	ldr	r1, [pc, #20]	; (8011aac <disk_status+0x30>)
 8011a96:	440a      	add	r2, r1
 8011a98:	7a12      	ldrb	r2, [r2, #8]
 8011a9a:	4610      	mov	r0, r2
 8011a9c:	4798      	blx	r3
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	3710      	adds	r7, #16
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	bd80      	pop	{r7, pc}
 8011aac:	200006f0 	.word	0x200006f0

08011ab0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b084      	sub	sp, #16
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011aba:	2300      	movs	r3, #0
 8011abc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011abe:	79fb      	ldrb	r3, [r7, #7]
 8011ac0:	4a0d      	ldr	r2, [pc, #52]	; (8011af8 <disk_initialize+0x48>)
 8011ac2:	5cd3      	ldrb	r3, [r2, r3]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d111      	bne.n	8011aec <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011ac8:	79fb      	ldrb	r3, [r7, #7]
 8011aca:	4a0b      	ldr	r2, [pc, #44]	; (8011af8 <disk_initialize+0x48>)
 8011acc:	2101      	movs	r1, #1
 8011ace:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011ad0:	79fb      	ldrb	r3, [r7, #7]
 8011ad2:	4a09      	ldr	r2, [pc, #36]	; (8011af8 <disk_initialize+0x48>)
 8011ad4:	009b      	lsls	r3, r3, #2
 8011ad6:	4413      	add	r3, r2
 8011ad8:	685b      	ldr	r3, [r3, #4]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	79fa      	ldrb	r2, [r7, #7]
 8011ade:	4906      	ldr	r1, [pc, #24]	; (8011af8 <disk_initialize+0x48>)
 8011ae0:	440a      	add	r2, r1
 8011ae2:	7a12      	ldrb	r2, [r2, #8]
 8011ae4:	4610      	mov	r0, r2
 8011ae6:	4798      	blx	r3
 8011ae8:	4603      	mov	r3, r0
 8011aea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8011aee:	4618      	mov	r0, r3
 8011af0:	3710      	adds	r7, #16
 8011af2:	46bd      	mov	sp, r7
 8011af4:	bd80      	pop	{r7, pc}
 8011af6:	bf00      	nop
 8011af8:	200006f0 	.word	0x200006f0

08011afc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011afc:	b590      	push	{r4, r7, lr}
 8011afe:	b087      	sub	sp, #28
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	60b9      	str	r1, [r7, #8]
 8011b04:	607a      	str	r2, [r7, #4]
 8011b06:	603b      	str	r3, [r7, #0]
 8011b08:	4603      	mov	r3, r0
 8011b0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011b0c:	7bfb      	ldrb	r3, [r7, #15]
 8011b0e:	4a0a      	ldr	r2, [pc, #40]	; (8011b38 <disk_read+0x3c>)
 8011b10:	009b      	lsls	r3, r3, #2
 8011b12:	4413      	add	r3, r2
 8011b14:	685b      	ldr	r3, [r3, #4]
 8011b16:	689c      	ldr	r4, [r3, #8]
 8011b18:	7bfb      	ldrb	r3, [r7, #15]
 8011b1a:	4a07      	ldr	r2, [pc, #28]	; (8011b38 <disk_read+0x3c>)
 8011b1c:	4413      	add	r3, r2
 8011b1e:	7a18      	ldrb	r0, [r3, #8]
 8011b20:	683b      	ldr	r3, [r7, #0]
 8011b22:	687a      	ldr	r2, [r7, #4]
 8011b24:	68b9      	ldr	r1, [r7, #8]
 8011b26:	47a0      	blx	r4
 8011b28:	4603      	mov	r3, r0
 8011b2a:	75fb      	strb	r3, [r7, #23]
  return res;
 8011b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b2e:	4618      	mov	r0, r3
 8011b30:	371c      	adds	r7, #28
 8011b32:	46bd      	mov	sp, r7
 8011b34:	bd90      	pop	{r4, r7, pc}
 8011b36:	bf00      	nop
 8011b38:	200006f0 	.word	0x200006f0

08011b3c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011b3c:	b590      	push	{r4, r7, lr}
 8011b3e:	b087      	sub	sp, #28
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	60b9      	str	r1, [r7, #8]
 8011b44:	607a      	str	r2, [r7, #4]
 8011b46:	603b      	str	r3, [r7, #0]
 8011b48:	4603      	mov	r3, r0
 8011b4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011b4c:	7bfb      	ldrb	r3, [r7, #15]
 8011b4e:	4a0a      	ldr	r2, [pc, #40]	; (8011b78 <disk_write+0x3c>)
 8011b50:	009b      	lsls	r3, r3, #2
 8011b52:	4413      	add	r3, r2
 8011b54:	685b      	ldr	r3, [r3, #4]
 8011b56:	68dc      	ldr	r4, [r3, #12]
 8011b58:	7bfb      	ldrb	r3, [r7, #15]
 8011b5a:	4a07      	ldr	r2, [pc, #28]	; (8011b78 <disk_write+0x3c>)
 8011b5c:	4413      	add	r3, r2
 8011b5e:	7a18      	ldrb	r0, [r3, #8]
 8011b60:	683b      	ldr	r3, [r7, #0]
 8011b62:	687a      	ldr	r2, [r7, #4]
 8011b64:	68b9      	ldr	r1, [r7, #8]
 8011b66:	47a0      	blx	r4
 8011b68:	4603      	mov	r3, r0
 8011b6a:	75fb      	strb	r3, [r7, #23]
  return res;
 8011b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b6e:	4618      	mov	r0, r3
 8011b70:	371c      	adds	r7, #28
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd90      	pop	{r4, r7, pc}
 8011b76:	bf00      	nop
 8011b78:	200006f0 	.word	0x200006f0

08011b7c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b084      	sub	sp, #16
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	4603      	mov	r3, r0
 8011b84:	603a      	str	r2, [r7, #0]
 8011b86:	71fb      	strb	r3, [r7, #7]
 8011b88:	460b      	mov	r3, r1
 8011b8a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011b8c:	79fb      	ldrb	r3, [r7, #7]
 8011b8e:	4a09      	ldr	r2, [pc, #36]	; (8011bb4 <disk_ioctl+0x38>)
 8011b90:	009b      	lsls	r3, r3, #2
 8011b92:	4413      	add	r3, r2
 8011b94:	685b      	ldr	r3, [r3, #4]
 8011b96:	691b      	ldr	r3, [r3, #16]
 8011b98:	79fa      	ldrb	r2, [r7, #7]
 8011b9a:	4906      	ldr	r1, [pc, #24]	; (8011bb4 <disk_ioctl+0x38>)
 8011b9c:	440a      	add	r2, r1
 8011b9e:	7a10      	ldrb	r0, [r2, #8]
 8011ba0:	79b9      	ldrb	r1, [r7, #6]
 8011ba2:	683a      	ldr	r2, [r7, #0]
 8011ba4:	4798      	blx	r3
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	73fb      	strb	r3, [r7, #15]
  return res;
 8011baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bac:	4618      	mov	r0, r3
 8011bae:	3710      	adds	r7, #16
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}
 8011bb4:	200006f0 	.word	0x200006f0

08011bb8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011bb8:	b480      	push	{r7}
 8011bba:	b085      	sub	sp, #20
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	3301      	adds	r3, #1
 8011bc4:	781b      	ldrb	r3, [r3, #0]
 8011bc6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011bc8:	89fb      	ldrh	r3, [r7, #14]
 8011bca:	021b      	lsls	r3, r3, #8
 8011bcc:	b21a      	sxth	r2, r3
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	781b      	ldrb	r3, [r3, #0]
 8011bd2:	b21b      	sxth	r3, r3
 8011bd4:	4313      	orrs	r3, r2
 8011bd6:	b21b      	sxth	r3, r3
 8011bd8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011bda:	89fb      	ldrh	r3, [r7, #14]
}
 8011bdc:	4618      	mov	r0, r3
 8011bde:	3714      	adds	r7, #20
 8011be0:	46bd      	mov	sp, r7
 8011be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be6:	4770      	bx	lr

08011be8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011be8:	b480      	push	{r7}
 8011bea:	b085      	sub	sp, #20
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	3303      	adds	r3, #3
 8011bf4:	781b      	ldrb	r3, [r3, #0]
 8011bf6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	021b      	lsls	r3, r3, #8
 8011bfc:	687a      	ldr	r2, [r7, #4]
 8011bfe:	3202      	adds	r2, #2
 8011c00:	7812      	ldrb	r2, [r2, #0]
 8011c02:	4313      	orrs	r3, r2
 8011c04:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	021b      	lsls	r3, r3, #8
 8011c0a:	687a      	ldr	r2, [r7, #4]
 8011c0c:	3201      	adds	r2, #1
 8011c0e:	7812      	ldrb	r2, [r2, #0]
 8011c10:	4313      	orrs	r3, r2
 8011c12:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	021b      	lsls	r3, r3, #8
 8011c18:	687a      	ldr	r2, [r7, #4]
 8011c1a:	7812      	ldrb	r2, [r2, #0]
 8011c1c:	4313      	orrs	r3, r2
 8011c1e:	60fb      	str	r3, [r7, #12]
	return rv;
 8011c20:	68fb      	ldr	r3, [r7, #12]
}
 8011c22:	4618      	mov	r0, r3
 8011c24:	3714      	adds	r7, #20
 8011c26:	46bd      	mov	sp, r7
 8011c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2c:	4770      	bx	lr

08011c2e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011c2e:	b480      	push	{r7}
 8011c30:	b083      	sub	sp, #12
 8011c32:	af00      	add	r7, sp, #0
 8011c34:	6078      	str	r0, [r7, #4]
 8011c36:	460b      	mov	r3, r1
 8011c38:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	1c5a      	adds	r2, r3, #1
 8011c3e:	607a      	str	r2, [r7, #4]
 8011c40:	887a      	ldrh	r2, [r7, #2]
 8011c42:	b2d2      	uxtb	r2, r2
 8011c44:	701a      	strb	r2, [r3, #0]
 8011c46:	887b      	ldrh	r3, [r7, #2]
 8011c48:	0a1b      	lsrs	r3, r3, #8
 8011c4a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	1c5a      	adds	r2, r3, #1
 8011c50:	607a      	str	r2, [r7, #4]
 8011c52:	887a      	ldrh	r2, [r7, #2]
 8011c54:	b2d2      	uxtb	r2, r2
 8011c56:	701a      	strb	r2, [r3, #0]
}
 8011c58:	bf00      	nop
 8011c5a:	370c      	adds	r7, #12
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c62:	4770      	bx	lr

08011c64 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011c64:	b480      	push	{r7}
 8011c66:	b083      	sub	sp, #12
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
 8011c6c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	1c5a      	adds	r2, r3, #1
 8011c72:	607a      	str	r2, [r7, #4]
 8011c74:	683a      	ldr	r2, [r7, #0]
 8011c76:	b2d2      	uxtb	r2, r2
 8011c78:	701a      	strb	r2, [r3, #0]
 8011c7a:	683b      	ldr	r3, [r7, #0]
 8011c7c:	0a1b      	lsrs	r3, r3, #8
 8011c7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	1c5a      	adds	r2, r3, #1
 8011c84:	607a      	str	r2, [r7, #4]
 8011c86:	683a      	ldr	r2, [r7, #0]
 8011c88:	b2d2      	uxtb	r2, r2
 8011c8a:	701a      	strb	r2, [r3, #0]
 8011c8c:	683b      	ldr	r3, [r7, #0]
 8011c8e:	0a1b      	lsrs	r3, r3, #8
 8011c90:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	1c5a      	adds	r2, r3, #1
 8011c96:	607a      	str	r2, [r7, #4]
 8011c98:	683a      	ldr	r2, [r7, #0]
 8011c9a:	b2d2      	uxtb	r2, r2
 8011c9c:	701a      	strb	r2, [r3, #0]
 8011c9e:	683b      	ldr	r3, [r7, #0]
 8011ca0:	0a1b      	lsrs	r3, r3, #8
 8011ca2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	1c5a      	adds	r2, r3, #1
 8011ca8:	607a      	str	r2, [r7, #4]
 8011caa:	683a      	ldr	r2, [r7, #0]
 8011cac:	b2d2      	uxtb	r2, r2
 8011cae:	701a      	strb	r2, [r3, #0]
}
 8011cb0:	bf00      	nop
 8011cb2:	370c      	adds	r7, #12
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cba:	4770      	bx	lr

08011cbc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011cbc:	b480      	push	{r7}
 8011cbe:	b087      	sub	sp, #28
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	60f8      	str	r0, [r7, #12]
 8011cc4:	60b9      	str	r1, [r7, #8]
 8011cc6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d00d      	beq.n	8011cf2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011cd6:	693a      	ldr	r2, [r7, #16]
 8011cd8:	1c53      	adds	r3, r2, #1
 8011cda:	613b      	str	r3, [r7, #16]
 8011cdc:	697b      	ldr	r3, [r7, #20]
 8011cde:	1c59      	adds	r1, r3, #1
 8011ce0:	6179      	str	r1, [r7, #20]
 8011ce2:	7812      	ldrb	r2, [r2, #0]
 8011ce4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	3b01      	subs	r3, #1
 8011cea:	607b      	str	r3, [r7, #4]
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d1f1      	bne.n	8011cd6 <mem_cpy+0x1a>
	}
}
 8011cf2:	bf00      	nop
 8011cf4:	371c      	adds	r7, #28
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfc:	4770      	bx	lr

08011cfe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011cfe:	b480      	push	{r7}
 8011d00:	b087      	sub	sp, #28
 8011d02:	af00      	add	r7, sp, #0
 8011d04:	60f8      	str	r0, [r7, #12]
 8011d06:	60b9      	str	r1, [r7, #8]
 8011d08:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011d0e:	697b      	ldr	r3, [r7, #20]
 8011d10:	1c5a      	adds	r2, r3, #1
 8011d12:	617a      	str	r2, [r7, #20]
 8011d14:	68ba      	ldr	r2, [r7, #8]
 8011d16:	b2d2      	uxtb	r2, r2
 8011d18:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	3b01      	subs	r3, #1
 8011d1e:	607b      	str	r3, [r7, #4]
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d1f3      	bne.n	8011d0e <mem_set+0x10>
}
 8011d26:	bf00      	nop
 8011d28:	bf00      	nop
 8011d2a:	371c      	adds	r7, #28
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d32:	4770      	bx	lr

08011d34 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011d34:	b480      	push	{r7}
 8011d36:	b089      	sub	sp, #36	; 0x24
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	60f8      	str	r0, [r7, #12]
 8011d3c:	60b9      	str	r1, [r7, #8]
 8011d3e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	61fb      	str	r3, [r7, #28]
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011d48:	2300      	movs	r3, #0
 8011d4a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011d4c:	69fb      	ldr	r3, [r7, #28]
 8011d4e:	1c5a      	adds	r2, r3, #1
 8011d50:	61fa      	str	r2, [r7, #28]
 8011d52:	781b      	ldrb	r3, [r3, #0]
 8011d54:	4619      	mov	r1, r3
 8011d56:	69bb      	ldr	r3, [r7, #24]
 8011d58:	1c5a      	adds	r2, r3, #1
 8011d5a:	61ba      	str	r2, [r7, #24]
 8011d5c:	781b      	ldrb	r3, [r3, #0]
 8011d5e:	1acb      	subs	r3, r1, r3
 8011d60:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	3b01      	subs	r3, #1
 8011d66:	607b      	str	r3, [r7, #4]
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d002      	beq.n	8011d74 <mem_cmp+0x40>
 8011d6e:	697b      	ldr	r3, [r7, #20]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d0eb      	beq.n	8011d4c <mem_cmp+0x18>

	return r;
 8011d74:	697b      	ldr	r3, [r7, #20]
}
 8011d76:	4618      	mov	r0, r3
 8011d78:	3724      	adds	r7, #36	; 0x24
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d80:	4770      	bx	lr

08011d82 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011d82:	b480      	push	{r7}
 8011d84:	b083      	sub	sp, #12
 8011d86:	af00      	add	r7, sp, #0
 8011d88:	6078      	str	r0, [r7, #4]
 8011d8a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011d8c:	e002      	b.n	8011d94 <chk_chr+0x12>
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	3301      	adds	r3, #1
 8011d92:	607b      	str	r3, [r7, #4]
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	781b      	ldrb	r3, [r3, #0]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d005      	beq.n	8011da8 <chk_chr+0x26>
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	781b      	ldrb	r3, [r3, #0]
 8011da0:	461a      	mov	r2, r3
 8011da2:	683b      	ldr	r3, [r7, #0]
 8011da4:	4293      	cmp	r3, r2
 8011da6:	d1f2      	bne.n	8011d8e <chk_chr+0xc>
	return *str;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	781b      	ldrb	r3, [r3, #0]
}
 8011dac:	4618      	mov	r0, r3
 8011dae:	370c      	adds	r7, #12
 8011db0:	46bd      	mov	sp, r7
 8011db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db6:	4770      	bx	lr

08011db8 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b082      	sub	sp, #8
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d009      	beq.n	8011dda <lock_fs+0x22>
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	68db      	ldr	r3, [r3, #12]
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f002 fcde 	bl	801478c <ff_req_grant>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d001      	beq.n	8011dda <lock_fs+0x22>
 8011dd6:	2301      	movs	r3, #1
 8011dd8:	e000      	b.n	8011ddc <lock_fs+0x24>
 8011dda:	2300      	movs	r3, #0
}
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3708      	adds	r7, #8
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}

08011de4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b082      	sub	sp, #8
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
 8011dec:	460b      	mov	r3, r1
 8011dee:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d00d      	beq.n	8011e12 <unlock_fs+0x2e>
 8011df6:	78fb      	ldrb	r3, [r7, #3]
 8011df8:	2b0c      	cmp	r3, #12
 8011dfa:	d00a      	beq.n	8011e12 <unlock_fs+0x2e>
 8011dfc:	78fb      	ldrb	r3, [r7, #3]
 8011dfe:	2b0b      	cmp	r3, #11
 8011e00:	d007      	beq.n	8011e12 <unlock_fs+0x2e>
 8011e02:	78fb      	ldrb	r3, [r7, #3]
 8011e04:	2b0f      	cmp	r3, #15
 8011e06:	d004      	beq.n	8011e12 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	68db      	ldr	r3, [r3, #12]
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f002 fcd2 	bl	80147b6 <ff_rel_grant>
	}
}
 8011e12:	bf00      	nop
 8011e14:	3708      	adds	r7, #8
 8011e16:	46bd      	mov	sp, r7
 8011e18:	bd80      	pop	{r7, pc}
	...

08011e1c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011e1c:	b480      	push	{r7}
 8011e1e:	b085      	sub	sp, #20
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
 8011e24:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011e26:	2300      	movs	r3, #0
 8011e28:	60bb      	str	r3, [r7, #8]
 8011e2a:	68bb      	ldr	r3, [r7, #8]
 8011e2c:	60fb      	str	r3, [r7, #12]
 8011e2e:	e029      	b.n	8011e84 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011e30:	4a27      	ldr	r2, [pc, #156]	; (8011ed0 <chk_lock+0xb4>)
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	011b      	lsls	r3, r3, #4
 8011e36:	4413      	add	r3, r2
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d01d      	beq.n	8011e7a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011e3e:	4a24      	ldr	r2, [pc, #144]	; (8011ed0 <chk_lock+0xb4>)
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	011b      	lsls	r3, r3, #4
 8011e44:	4413      	add	r3, r2
 8011e46:	681a      	ldr	r2, [r3, #0]
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	429a      	cmp	r2, r3
 8011e4e:	d116      	bne.n	8011e7e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011e50:	4a1f      	ldr	r2, [pc, #124]	; (8011ed0 <chk_lock+0xb4>)
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	011b      	lsls	r3, r3, #4
 8011e56:	4413      	add	r3, r2
 8011e58:	3304      	adds	r3, #4
 8011e5a:	681a      	ldr	r2, [r3, #0]
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011e60:	429a      	cmp	r2, r3
 8011e62:	d10c      	bne.n	8011e7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011e64:	4a1a      	ldr	r2, [pc, #104]	; (8011ed0 <chk_lock+0xb4>)
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	011b      	lsls	r3, r3, #4
 8011e6a:	4413      	add	r3, r2
 8011e6c:	3308      	adds	r3, #8
 8011e6e:	681a      	ldr	r2, [r3, #0]
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011e74:	429a      	cmp	r2, r3
 8011e76:	d102      	bne.n	8011e7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011e78:	e007      	b.n	8011e8a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011e7a:	2301      	movs	r3, #1
 8011e7c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	3301      	adds	r3, #1
 8011e82:	60fb      	str	r3, [r7, #12]
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	2b01      	cmp	r3, #1
 8011e88:	d9d2      	bls.n	8011e30 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	2b02      	cmp	r3, #2
 8011e8e:	d109      	bne.n	8011ea4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011e90:	68bb      	ldr	r3, [r7, #8]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d102      	bne.n	8011e9c <chk_lock+0x80>
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	2b02      	cmp	r3, #2
 8011e9a:	d101      	bne.n	8011ea0 <chk_lock+0x84>
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	e010      	b.n	8011ec2 <chk_lock+0xa6>
 8011ea0:	2312      	movs	r3, #18
 8011ea2:	e00e      	b.n	8011ec2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d108      	bne.n	8011ebc <chk_lock+0xa0>
 8011eaa:	4a09      	ldr	r2, [pc, #36]	; (8011ed0 <chk_lock+0xb4>)
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	011b      	lsls	r3, r3, #4
 8011eb0:	4413      	add	r3, r2
 8011eb2:	330c      	adds	r3, #12
 8011eb4:	881b      	ldrh	r3, [r3, #0]
 8011eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011eba:	d101      	bne.n	8011ec0 <chk_lock+0xa4>
 8011ebc:	2310      	movs	r3, #16
 8011ebe:	e000      	b.n	8011ec2 <chk_lock+0xa6>
 8011ec0:	2300      	movs	r3, #0
}
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	3714      	adds	r7, #20
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ecc:	4770      	bx	lr
 8011ece:	bf00      	nop
 8011ed0:	200006d0 	.word	0x200006d0

08011ed4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b083      	sub	sp, #12
 8011ed8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011eda:	2300      	movs	r3, #0
 8011edc:	607b      	str	r3, [r7, #4]
 8011ede:	e002      	b.n	8011ee6 <enq_lock+0x12>
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	3301      	adds	r3, #1
 8011ee4:	607b      	str	r3, [r7, #4]
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	2b01      	cmp	r3, #1
 8011eea:	d806      	bhi.n	8011efa <enq_lock+0x26>
 8011eec:	4a09      	ldr	r2, [pc, #36]	; (8011f14 <enq_lock+0x40>)
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	011b      	lsls	r3, r3, #4
 8011ef2:	4413      	add	r3, r2
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d1f2      	bne.n	8011ee0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	2b02      	cmp	r3, #2
 8011efe:	bf14      	ite	ne
 8011f00:	2301      	movne	r3, #1
 8011f02:	2300      	moveq	r3, #0
 8011f04:	b2db      	uxtb	r3, r3
}
 8011f06:	4618      	mov	r0, r3
 8011f08:	370c      	adds	r7, #12
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f10:	4770      	bx	lr
 8011f12:	bf00      	nop
 8011f14:	200006d0 	.word	0x200006d0

08011f18 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011f18:	b480      	push	{r7}
 8011f1a:	b085      	sub	sp, #20
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
 8011f20:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011f22:	2300      	movs	r3, #0
 8011f24:	60fb      	str	r3, [r7, #12]
 8011f26:	e01f      	b.n	8011f68 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011f28:	4a41      	ldr	r2, [pc, #260]	; (8012030 <inc_lock+0x118>)
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	011b      	lsls	r3, r3, #4
 8011f2e:	4413      	add	r3, r2
 8011f30:	681a      	ldr	r2, [r3, #0]
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	429a      	cmp	r2, r3
 8011f38:	d113      	bne.n	8011f62 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011f3a:	4a3d      	ldr	r2, [pc, #244]	; (8012030 <inc_lock+0x118>)
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	011b      	lsls	r3, r3, #4
 8011f40:	4413      	add	r3, r2
 8011f42:	3304      	adds	r3, #4
 8011f44:	681a      	ldr	r2, [r3, #0]
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011f4a:	429a      	cmp	r2, r3
 8011f4c:	d109      	bne.n	8011f62 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011f4e:	4a38      	ldr	r2, [pc, #224]	; (8012030 <inc_lock+0x118>)
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	011b      	lsls	r3, r3, #4
 8011f54:	4413      	add	r3, r2
 8011f56:	3308      	adds	r3, #8
 8011f58:	681a      	ldr	r2, [r3, #0]
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011f5e:	429a      	cmp	r2, r3
 8011f60:	d006      	beq.n	8011f70 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	3301      	adds	r3, #1
 8011f66:	60fb      	str	r3, [r7, #12]
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	2b01      	cmp	r3, #1
 8011f6c:	d9dc      	bls.n	8011f28 <inc_lock+0x10>
 8011f6e:	e000      	b.n	8011f72 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011f70:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	2b02      	cmp	r3, #2
 8011f76:	d132      	bne.n	8011fde <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011f78:	2300      	movs	r3, #0
 8011f7a:	60fb      	str	r3, [r7, #12]
 8011f7c:	e002      	b.n	8011f84 <inc_lock+0x6c>
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	3301      	adds	r3, #1
 8011f82:	60fb      	str	r3, [r7, #12]
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	2b01      	cmp	r3, #1
 8011f88:	d806      	bhi.n	8011f98 <inc_lock+0x80>
 8011f8a:	4a29      	ldr	r2, [pc, #164]	; (8012030 <inc_lock+0x118>)
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	011b      	lsls	r3, r3, #4
 8011f90:	4413      	add	r3, r2
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d1f2      	bne.n	8011f7e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	2b02      	cmp	r3, #2
 8011f9c:	d101      	bne.n	8011fa2 <inc_lock+0x8a>
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	e040      	b.n	8012024 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	681a      	ldr	r2, [r3, #0]
 8011fa6:	4922      	ldr	r1, [pc, #136]	; (8012030 <inc_lock+0x118>)
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	011b      	lsls	r3, r3, #4
 8011fac:	440b      	add	r3, r1
 8011fae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	689a      	ldr	r2, [r3, #8]
 8011fb4:	491e      	ldr	r1, [pc, #120]	; (8012030 <inc_lock+0x118>)
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	011b      	lsls	r3, r3, #4
 8011fba:	440b      	add	r3, r1
 8011fbc:	3304      	adds	r3, #4
 8011fbe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	695a      	ldr	r2, [r3, #20]
 8011fc4:	491a      	ldr	r1, [pc, #104]	; (8012030 <inc_lock+0x118>)
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	011b      	lsls	r3, r3, #4
 8011fca:	440b      	add	r3, r1
 8011fcc:	3308      	adds	r3, #8
 8011fce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011fd0:	4a17      	ldr	r2, [pc, #92]	; (8012030 <inc_lock+0x118>)
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	011b      	lsls	r3, r3, #4
 8011fd6:	4413      	add	r3, r2
 8011fd8:	330c      	adds	r3, #12
 8011fda:	2200      	movs	r2, #0
 8011fdc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d009      	beq.n	8011ff8 <inc_lock+0xe0>
 8011fe4:	4a12      	ldr	r2, [pc, #72]	; (8012030 <inc_lock+0x118>)
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	011b      	lsls	r3, r3, #4
 8011fea:	4413      	add	r3, r2
 8011fec:	330c      	adds	r3, #12
 8011fee:	881b      	ldrh	r3, [r3, #0]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d001      	beq.n	8011ff8 <inc_lock+0xe0>
 8011ff4:	2300      	movs	r3, #0
 8011ff6:	e015      	b.n	8012024 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011ff8:	683b      	ldr	r3, [r7, #0]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d108      	bne.n	8012010 <inc_lock+0xf8>
 8011ffe:	4a0c      	ldr	r2, [pc, #48]	; (8012030 <inc_lock+0x118>)
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	011b      	lsls	r3, r3, #4
 8012004:	4413      	add	r3, r2
 8012006:	330c      	adds	r3, #12
 8012008:	881b      	ldrh	r3, [r3, #0]
 801200a:	3301      	adds	r3, #1
 801200c:	b29a      	uxth	r2, r3
 801200e:	e001      	b.n	8012014 <inc_lock+0xfc>
 8012010:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012014:	4906      	ldr	r1, [pc, #24]	; (8012030 <inc_lock+0x118>)
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	011b      	lsls	r3, r3, #4
 801201a:	440b      	add	r3, r1
 801201c:	330c      	adds	r3, #12
 801201e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	3301      	adds	r3, #1
}
 8012024:	4618      	mov	r0, r3
 8012026:	3714      	adds	r7, #20
 8012028:	46bd      	mov	sp, r7
 801202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202e:	4770      	bx	lr
 8012030:	200006d0 	.word	0x200006d0

08012034 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8012034:	b480      	push	{r7}
 8012036:	b085      	sub	sp, #20
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	3b01      	subs	r3, #1
 8012040:	607b      	str	r3, [r7, #4]
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	2b01      	cmp	r3, #1
 8012046:	d825      	bhi.n	8012094 <dec_lock+0x60>
		n = Files[i].ctr;
 8012048:	4a17      	ldr	r2, [pc, #92]	; (80120a8 <dec_lock+0x74>)
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	011b      	lsls	r3, r3, #4
 801204e:	4413      	add	r3, r2
 8012050:	330c      	adds	r3, #12
 8012052:	881b      	ldrh	r3, [r3, #0]
 8012054:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8012056:	89fb      	ldrh	r3, [r7, #14]
 8012058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801205c:	d101      	bne.n	8012062 <dec_lock+0x2e>
 801205e:	2300      	movs	r3, #0
 8012060:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8012062:	89fb      	ldrh	r3, [r7, #14]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d002      	beq.n	801206e <dec_lock+0x3a>
 8012068:	89fb      	ldrh	r3, [r7, #14]
 801206a:	3b01      	subs	r3, #1
 801206c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801206e:	4a0e      	ldr	r2, [pc, #56]	; (80120a8 <dec_lock+0x74>)
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	011b      	lsls	r3, r3, #4
 8012074:	4413      	add	r3, r2
 8012076:	330c      	adds	r3, #12
 8012078:	89fa      	ldrh	r2, [r7, #14]
 801207a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801207c:	89fb      	ldrh	r3, [r7, #14]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d105      	bne.n	801208e <dec_lock+0x5a>
 8012082:	4a09      	ldr	r2, [pc, #36]	; (80120a8 <dec_lock+0x74>)
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	011b      	lsls	r3, r3, #4
 8012088:	4413      	add	r3, r2
 801208a:	2200      	movs	r2, #0
 801208c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801208e:	2300      	movs	r3, #0
 8012090:	737b      	strb	r3, [r7, #13]
 8012092:	e001      	b.n	8012098 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8012094:	2302      	movs	r3, #2
 8012096:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8012098:	7b7b      	ldrb	r3, [r7, #13]
}
 801209a:	4618      	mov	r0, r3
 801209c:	3714      	adds	r7, #20
 801209e:	46bd      	mov	sp, r7
 80120a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a4:	4770      	bx	lr
 80120a6:	bf00      	nop
 80120a8:	200006d0 	.word	0x200006d0

080120ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80120ac:	b480      	push	{r7}
 80120ae:	b085      	sub	sp, #20
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80120b4:	2300      	movs	r3, #0
 80120b6:	60fb      	str	r3, [r7, #12]
 80120b8:	e010      	b.n	80120dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80120ba:	4a0d      	ldr	r2, [pc, #52]	; (80120f0 <clear_lock+0x44>)
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	011b      	lsls	r3, r3, #4
 80120c0:	4413      	add	r3, r2
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	687a      	ldr	r2, [r7, #4]
 80120c6:	429a      	cmp	r2, r3
 80120c8:	d105      	bne.n	80120d6 <clear_lock+0x2a>
 80120ca:	4a09      	ldr	r2, [pc, #36]	; (80120f0 <clear_lock+0x44>)
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	011b      	lsls	r3, r3, #4
 80120d0:	4413      	add	r3, r2
 80120d2:	2200      	movs	r2, #0
 80120d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	3301      	adds	r3, #1
 80120da:	60fb      	str	r3, [r7, #12]
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	2b01      	cmp	r3, #1
 80120e0:	d9eb      	bls.n	80120ba <clear_lock+0xe>
	}
}
 80120e2:	bf00      	nop
 80120e4:	bf00      	nop
 80120e6:	3714      	adds	r7, #20
 80120e8:	46bd      	mov	sp, r7
 80120ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ee:	4770      	bx	lr
 80120f0:	200006d0 	.word	0x200006d0

080120f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b086      	sub	sp, #24
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80120fc:	2300      	movs	r3, #0
 80120fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	78db      	ldrb	r3, [r3, #3]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d034      	beq.n	8012172 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801210c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	7858      	ldrb	r0, [r3, #1]
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012118:	2301      	movs	r3, #1
 801211a:	697a      	ldr	r2, [r7, #20]
 801211c:	f7ff fd0e 	bl	8011b3c <disk_write>
 8012120:	4603      	mov	r3, r0
 8012122:	2b00      	cmp	r3, #0
 8012124:	d002      	beq.n	801212c <sync_window+0x38>
			res = FR_DISK_ERR;
 8012126:	2301      	movs	r3, #1
 8012128:	73fb      	strb	r3, [r7, #15]
 801212a:	e022      	b.n	8012172 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2200      	movs	r2, #0
 8012130:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012136:	697a      	ldr	r2, [r7, #20]
 8012138:	1ad2      	subs	r2, r2, r3
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	69db      	ldr	r3, [r3, #28]
 801213e:	429a      	cmp	r2, r3
 8012140:	d217      	bcs.n	8012172 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	789b      	ldrb	r3, [r3, #2]
 8012146:	613b      	str	r3, [r7, #16]
 8012148:	e010      	b.n	801216c <sync_window+0x78>
					wsect += fs->fsize;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	69db      	ldr	r3, [r3, #28]
 801214e:	697a      	ldr	r2, [r7, #20]
 8012150:	4413      	add	r3, r2
 8012152:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	7858      	ldrb	r0, [r3, #1]
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801215e:	2301      	movs	r3, #1
 8012160:	697a      	ldr	r2, [r7, #20]
 8012162:	f7ff fceb 	bl	8011b3c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012166:	693b      	ldr	r3, [r7, #16]
 8012168:	3b01      	subs	r3, #1
 801216a:	613b      	str	r3, [r7, #16]
 801216c:	693b      	ldr	r3, [r7, #16]
 801216e:	2b01      	cmp	r3, #1
 8012170:	d8eb      	bhi.n	801214a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012172:	7bfb      	ldrb	r3, [r7, #15]
}
 8012174:	4618      	mov	r0, r3
 8012176:	3718      	adds	r7, #24
 8012178:	46bd      	mov	sp, r7
 801217a:	bd80      	pop	{r7, pc}

0801217c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b084      	sub	sp, #16
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
 8012184:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012186:	2300      	movs	r3, #0
 8012188:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801218e:	683a      	ldr	r2, [r7, #0]
 8012190:	429a      	cmp	r2, r3
 8012192:	d01b      	beq.n	80121cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012194:	6878      	ldr	r0, [r7, #4]
 8012196:	f7ff ffad 	bl	80120f4 <sync_window>
 801219a:	4603      	mov	r3, r0
 801219c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801219e:	7bfb      	ldrb	r3, [r7, #15]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d113      	bne.n	80121cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	7858      	ldrb	r0, [r3, #1]
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80121ae:	2301      	movs	r3, #1
 80121b0:	683a      	ldr	r2, [r7, #0]
 80121b2:	f7ff fca3 	bl	8011afc <disk_read>
 80121b6:	4603      	mov	r3, r0
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d004      	beq.n	80121c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80121bc:	f04f 33ff 	mov.w	r3, #4294967295
 80121c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80121c2:	2301      	movs	r3, #1
 80121c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	683a      	ldr	r2, [r7, #0]
 80121ca:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80121cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80121ce:	4618      	mov	r0, r3
 80121d0:	3710      	adds	r7, #16
 80121d2:	46bd      	mov	sp, r7
 80121d4:	bd80      	pop	{r7, pc}
	...

080121d8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b084      	sub	sp, #16
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80121e0:	6878      	ldr	r0, [r7, #4]
 80121e2:	f7ff ff87 	bl	80120f4 <sync_window>
 80121e6:	4603      	mov	r3, r0
 80121e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80121ea:	7bfb      	ldrb	r3, [r7, #15]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d158      	bne.n	80122a2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	781b      	ldrb	r3, [r3, #0]
 80121f4:	2b03      	cmp	r3, #3
 80121f6:	d148      	bne.n	801228a <sync_fs+0xb2>
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	791b      	ldrb	r3, [r3, #4]
 80121fc:	2b01      	cmp	r3, #1
 80121fe:	d144      	bne.n	801228a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	3334      	adds	r3, #52	; 0x34
 8012204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012208:	2100      	movs	r1, #0
 801220a:	4618      	mov	r0, r3
 801220c:	f7ff fd77 	bl	8011cfe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	3334      	adds	r3, #52	; 0x34
 8012214:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012218:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801221c:	4618      	mov	r0, r3
 801221e:	f7ff fd06 	bl	8011c2e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	3334      	adds	r3, #52	; 0x34
 8012226:	4921      	ldr	r1, [pc, #132]	; (80122ac <sync_fs+0xd4>)
 8012228:	4618      	mov	r0, r3
 801222a:	f7ff fd1b 	bl	8011c64 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	3334      	adds	r3, #52	; 0x34
 8012232:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012236:	491e      	ldr	r1, [pc, #120]	; (80122b0 <sync_fs+0xd8>)
 8012238:	4618      	mov	r0, r3
 801223a:	f7ff fd13 	bl	8011c64 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	3334      	adds	r3, #52	; 0x34
 8012242:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	695b      	ldr	r3, [r3, #20]
 801224a:	4619      	mov	r1, r3
 801224c:	4610      	mov	r0, r2
 801224e:	f7ff fd09 	bl	8011c64 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	3334      	adds	r3, #52	; 0x34
 8012256:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	691b      	ldr	r3, [r3, #16]
 801225e:	4619      	mov	r1, r3
 8012260:	4610      	mov	r0, r2
 8012262:	f7ff fcff 	bl	8011c64 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	6a1b      	ldr	r3, [r3, #32]
 801226a:	1c5a      	adds	r2, r3, #1
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	7858      	ldrb	r0, [r3, #1]
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801227e:	2301      	movs	r3, #1
 8012280:	f7ff fc5c 	bl	8011b3c <disk_write>
			fs->fsi_flag = 0;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	2200      	movs	r2, #0
 8012288:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	785b      	ldrb	r3, [r3, #1]
 801228e:	2200      	movs	r2, #0
 8012290:	2100      	movs	r1, #0
 8012292:	4618      	mov	r0, r3
 8012294:	f7ff fc72 	bl	8011b7c <disk_ioctl>
 8012298:	4603      	mov	r3, r0
 801229a:	2b00      	cmp	r3, #0
 801229c:	d001      	beq.n	80122a2 <sync_fs+0xca>
 801229e:	2301      	movs	r3, #1
 80122a0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80122a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80122a4:	4618      	mov	r0, r3
 80122a6:	3710      	adds	r7, #16
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}
 80122ac:	41615252 	.word	0x41615252
 80122b0:	61417272 	.word	0x61417272

080122b4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80122b4:	b480      	push	{r7}
 80122b6:	b083      	sub	sp, #12
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
 80122bc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80122be:	683b      	ldr	r3, [r7, #0]
 80122c0:	3b02      	subs	r3, #2
 80122c2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	699b      	ldr	r3, [r3, #24]
 80122c8:	3b02      	subs	r3, #2
 80122ca:	683a      	ldr	r2, [r7, #0]
 80122cc:	429a      	cmp	r2, r3
 80122ce:	d301      	bcc.n	80122d4 <clust2sect+0x20>
 80122d0:	2300      	movs	r3, #0
 80122d2:	e008      	b.n	80122e6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	895b      	ldrh	r3, [r3, #10]
 80122d8:	461a      	mov	r2, r3
 80122da:	683b      	ldr	r3, [r7, #0]
 80122dc:	fb03 f202 	mul.w	r2, r3, r2
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122e4:	4413      	add	r3, r2
}
 80122e6:	4618      	mov	r0, r3
 80122e8:	370c      	adds	r7, #12
 80122ea:	46bd      	mov	sp, r7
 80122ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f0:	4770      	bx	lr

080122f2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80122f2:	b580      	push	{r7, lr}
 80122f4:	b086      	sub	sp, #24
 80122f6:	af00      	add	r7, sp, #0
 80122f8:	6078      	str	r0, [r7, #4]
 80122fa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012302:	683b      	ldr	r3, [r7, #0]
 8012304:	2b01      	cmp	r3, #1
 8012306:	d904      	bls.n	8012312 <get_fat+0x20>
 8012308:	693b      	ldr	r3, [r7, #16]
 801230a:	699b      	ldr	r3, [r3, #24]
 801230c:	683a      	ldr	r2, [r7, #0]
 801230e:	429a      	cmp	r2, r3
 8012310:	d302      	bcc.n	8012318 <get_fat+0x26>
		val = 1;	/* Internal error */
 8012312:	2301      	movs	r3, #1
 8012314:	617b      	str	r3, [r7, #20]
 8012316:	e08f      	b.n	8012438 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012318:	f04f 33ff 	mov.w	r3, #4294967295
 801231c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801231e:	693b      	ldr	r3, [r7, #16]
 8012320:	781b      	ldrb	r3, [r3, #0]
 8012322:	2b03      	cmp	r3, #3
 8012324:	d062      	beq.n	80123ec <get_fat+0xfa>
 8012326:	2b03      	cmp	r3, #3
 8012328:	dc7c      	bgt.n	8012424 <get_fat+0x132>
 801232a:	2b01      	cmp	r3, #1
 801232c:	d002      	beq.n	8012334 <get_fat+0x42>
 801232e:	2b02      	cmp	r3, #2
 8012330:	d042      	beq.n	80123b8 <get_fat+0xc6>
 8012332:	e077      	b.n	8012424 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	60fb      	str	r3, [r7, #12]
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	085b      	lsrs	r3, r3, #1
 801233c:	68fa      	ldr	r2, [r7, #12]
 801233e:	4413      	add	r3, r2
 8012340:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012342:	693b      	ldr	r3, [r7, #16]
 8012344:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	0a5b      	lsrs	r3, r3, #9
 801234a:	4413      	add	r3, r2
 801234c:	4619      	mov	r1, r3
 801234e:	6938      	ldr	r0, [r7, #16]
 8012350:	f7ff ff14 	bl	801217c <move_window>
 8012354:	4603      	mov	r3, r0
 8012356:	2b00      	cmp	r3, #0
 8012358:	d167      	bne.n	801242a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	1c5a      	adds	r2, r3, #1
 801235e:	60fa      	str	r2, [r7, #12]
 8012360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012364:	693a      	ldr	r2, [r7, #16]
 8012366:	4413      	add	r3, r2
 8012368:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801236c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801236e:	693b      	ldr	r3, [r7, #16]
 8012370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	0a5b      	lsrs	r3, r3, #9
 8012376:	4413      	add	r3, r2
 8012378:	4619      	mov	r1, r3
 801237a:	6938      	ldr	r0, [r7, #16]
 801237c:	f7ff fefe 	bl	801217c <move_window>
 8012380:	4603      	mov	r3, r0
 8012382:	2b00      	cmp	r3, #0
 8012384:	d153      	bne.n	801242e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801238c:	693a      	ldr	r2, [r7, #16]
 801238e:	4413      	add	r3, r2
 8012390:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012394:	021b      	lsls	r3, r3, #8
 8012396:	461a      	mov	r2, r3
 8012398:	68bb      	ldr	r3, [r7, #8]
 801239a:	4313      	orrs	r3, r2
 801239c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801239e:	683b      	ldr	r3, [r7, #0]
 80123a0:	f003 0301 	and.w	r3, r3, #1
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d002      	beq.n	80123ae <get_fat+0xbc>
 80123a8:	68bb      	ldr	r3, [r7, #8]
 80123aa:	091b      	lsrs	r3, r3, #4
 80123ac:	e002      	b.n	80123b4 <get_fat+0xc2>
 80123ae:	68bb      	ldr	r3, [r7, #8]
 80123b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80123b4:	617b      	str	r3, [r7, #20]
			break;
 80123b6:	e03f      	b.n	8012438 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80123b8:	693b      	ldr	r3, [r7, #16]
 80123ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80123bc:	683b      	ldr	r3, [r7, #0]
 80123be:	0a1b      	lsrs	r3, r3, #8
 80123c0:	4413      	add	r3, r2
 80123c2:	4619      	mov	r1, r3
 80123c4:	6938      	ldr	r0, [r7, #16]
 80123c6:	f7ff fed9 	bl	801217c <move_window>
 80123ca:	4603      	mov	r3, r0
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d130      	bne.n	8012432 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80123d0:	693b      	ldr	r3, [r7, #16]
 80123d2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80123d6:	683b      	ldr	r3, [r7, #0]
 80123d8:	005b      	lsls	r3, r3, #1
 80123da:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80123de:	4413      	add	r3, r2
 80123e0:	4618      	mov	r0, r3
 80123e2:	f7ff fbe9 	bl	8011bb8 <ld_word>
 80123e6:	4603      	mov	r3, r0
 80123e8:	617b      	str	r3, [r7, #20]
			break;
 80123ea:	e025      	b.n	8012438 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80123ec:	693b      	ldr	r3, [r7, #16]
 80123ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80123f0:	683b      	ldr	r3, [r7, #0]
 80123f2:	09db      	lsrs	r3, r3, #7
 80123f4:	4413      	add	r3, r2
 80123f6:	4619      	mov	r1, r3
 80123f8:	6938      	ldr	r0, [r7, #16]
 80123fa:	f7ff febf 	bl	801217c <move_window>
 80123fe:	4603      	mov	r3, r0
 8012400:	2b00      	cmp	r3, #0
 8012402:	d118      	bne.n	8012436 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012404:	693b      	ldr	r3, [r7, #16]
 8012406:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801240a:	683b      	ldr	r3, [r7, #0]
 801240c:	009b      	lsls	r3, r3, #2
 801240e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012412:	4413      	add	r3, r2
 8012414:	4618      	mov	r0, r3
 8012416:	f7ff fbe7 	bl	8011be8 <ld_dword>
 801241a:	4603      	mov	r3, r0
 801241c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012420:	617b      	str	r3, [r7, #20]
			break;
 8012422:	e009      	b.n	8012438 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012424:	2301      	movs	r3, #1
 8012426:	617b      	str	r3, [r7, #20]
 8012428:	e006      	b.n	8012438 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801242a:	bf00      	nop
 801242c:	e004      	b.n	8012438 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801242e:	bf00      	nop
 8012430:	e002      	b.n	8012438 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012432:	bf00      	nop
 8012434:	e000      	b.n	8012438 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012436:	bf00      	nop
		}
	}

	return val;
 8012438:	697b      	ldr	r3, [r7, #20]
}
 801243a:	4618      	mov	r0, r3
 801243c:	3718      	adds	r7, #24
 801243e:	46bd      	mov	sp, r7
 8012440:	bd80      	pop	{r7, pc}

08012442 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012442:	b590      	push	{r4, r7, lr}
 8012444:	b089      	sub	sp, #36	; 0x24
 8012446:	af00      	add	r7, sp, #0
 8012448:	60f8      	str	r0, [r7, #12]
 801244a:	60b9      	str	r1, [r7, #8]
 801244c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801244e:	2302      	movs	r3, #2
 8012450:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012452:	68bb      	ldr	r3, [r7, #8]
 8012454:	2b01      	cmp	r3, #1
 8012456:	f240 80d2 	bls.w	80125fe <put_fat+0x1bc>
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	699b      	ldr	r3, [r3, #24]
 801245e:	68ba      	ldr	r2, [r7, #8]
 8012460:	429a      	cmp	r2, r3
 8012462:	f080 80cc 	bcs.w	80125fe <put_fat+0x1bc>
		switch (fs->fs_type) {
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	781b      	ldrb	r3, [r3, #0]
 801246a:	2b03      	cmp	r3, #3
 801246c:	f000 8096 	beq.w	801259c <put_fat+0x15a>
 8012470:	2b03      	cmp	r3, #3
 8012472:	f300 80cd 	bgt.w	8012610 <put_fat+0x1ce>
 8012476:	2b01      	cmp	r3, #1
 8012478:	d002      	beq.n	8012480 <put_fat+0x3e>
 801247a:	2b02      	cmp	r3, #2
 801247c:	d06e      	beq.n	801255c <put_fat+0x11a>
 801247e:	e0c7      	b.n	8012610 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012480:	68bb      	ldr	r3, [r7, #8]
 8012482:	61bb      	str	r3, [r7, #24]
 8012484:	69bb      	ldr	r3, [r7, #24]
 8012486:	085b      	lsrs	r3, r3, #1
 8012488:	69ba      	ldr	r2, [r7, #24]
 801248a:	4413      	add	r3, r2
 801248c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012492:	69bb      	ldr	r3, [r7, #24]
 8012494:	0a5b      	lsrs	r3, r3, #9
 8012496:	4413      	add	r3, r2
 8012498:	4619      	mov	r1, r3
 801249a:	68f8      	ldr	r0, [r7, #12]
 801249c:	f7ff fe6e 	bl	801217c <move_window>
 80124a0:	4603      	mov	r3, r0
 80124a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80124a4:	7ffb      	ldrb	r3, [r7, #31]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	f040 80ab 	bne.w	8012602 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80124b2:	69bb      	ldr	r3, [r7, #24]
 80124b4:	1c59      	adds	r1, r3, #1
 80124b6:	61b9      	str	r1, [r7, #24]
 80124b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80124bc:	4413      	add	r3, r2
 80124be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80124c0:	68bb      	ldr	r3, [r7, #8]
 80124c2:	f003 0301 	and.w	r3, r3, #1
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d00d      	beq.n	80124e6 <put_fat+0xa4>
 80124ca:	697b      	ldr	r3, [r7, #20]
 80124cc:	781b      	ldrb	r3, [r3, #0]
 80124ce:	b25b      	sxtb	r3, r3
 80124d0:	f003 030f 	and.w	r3, r3, #15
 80124d4:	b25a      	sxtb	r2, r3
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	b2db      	uxtb	r3, r3
 80124da:	011b      	lsls	r3, r3, #4
 80124dc:	b25b      	sxtb	r3, r3
 80124de:	4313      	orrs	r3, r2
 80124e0:	b25b      	sxtb	r3, r3
 80124e2:	b2db      	uxtb	r3, r3
 80124e4:	e001      	b.n	80124ea <put_fat+0xa8>
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	b2db      	uxtb	r3, r3
 80124ea:	697a      	ldr	r2, [r7, #20]
 80124ec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	2201      	movs	r2, #1
 80124f2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80124f8:	69bb      	ldr	r3, [r7, #24]
 80124fa:	0a5b      	lsrs	r3, r3, #9
 80124fc:	4413      	add	r3, r2
 80124fe:	4619      	mov	r1, r3
 8012500:	68f8      	ldr	r0, [r7, #12]
 8012502:	f7ff fe3b 	bl	801217c <move_window>
 8012506:	4603      	mov	r3, r0
 8012508:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801250a:	7ffb      	ldrb	r3, [r7, #31]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d17a      	bne.n	8012606 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012516:	69bb      	ldr	r3, [r7, #24]
 8012518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801251c:	4413      	add	r3, r2
 801251e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012520:	68bb      	ldr	r3, [r7, #8]
 8012522:	f003 0301 	and.w	r3, r3, #1
 8012526:	2b00      	cmp	r3, #0
 8012528:	d003      	beq.n	8012532 <put_fat+0xf0>
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	091b      	lsrs	r3, r3, #4
 801252e:	b2db      	uxtb	r3, r3
 8012530:	e00e      	b.n	8012550 <put_fat+0x10e>
 8012532:	697b      	ldr	r3, [r7, #20]
 8012534:	781b      	ldrb	r3, [r3, #0]
 8012536:	b25b      	sxtb	r3, r3
 8012538:	f023 030f 	bic.w	r3, r3, #15
 801253c:	b25a      	sxtb	r2, r3
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	0a1b      	lsrs	r3, r3, #8
 8012542:	b25b      	sxtb	r3, r3
 8012544:	f003 030f 	and.w	r3, r3, #15
 8012548:	b25b      	sxtb	r3, r3
 801254a:	4313      	orrs	r3, r2
 801254c:	b25b      	sxtb	r3, r3
 801254e:	b2db      	uxtb	r3, r3
 8012550:	697a      	ldr	r2, [r7, #20]
 8012552:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	2201      	movs	r2, #1
 8012558:	70da      	strb	r2, [r3, #3]
			break;
 801255a:	e059      	b.n	8012610 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012560:	68bb      	ldr	r3, [r7, #8]
 8012562:	0a1b      	lsrs	r3, r3, #8
 8012564:	4413      	add	r3, r2
 8012566:	4619      	mov	r1, r3
 8012568:	68f8      	ldr	r0, [r7, #12]
 801256a:	f7ff fe07 	bl	801217c <move_window>
 801256e:	4603      	mov	r3, r0
 8012570:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012572:	7ffb      	ldrb	r3, [r7, #31]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d148      	bne.n	801260a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801257e:	68bb      	ldr	r3, [r7, #8]
 8012580:	005b      	lsls	r3, r3, #1
 8012582:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012586:	4413      	add	r3, r2
 8012588:	687a      	ldr	r2, [r7, #4]
 801258a:	b292      	uxth	r2, r2
 801258c:	4611      	mov	r1, r2
 801258e:	4618      	mov	r0, r3
 8012590:	f7ff fb4d 	bl	8011c2e <st_word>
			fs->wflag = 1;
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	2201      	movs	r2, #1
 8012598:	70da      	strb	r2, [r3, #3]
			break;
 801259a:	e039      	b.n	8012610 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80125a0:	68bb      	ldr	r3, [r7, #8]
 80125a2:	09db      	lsrs	r3, r3, #7
 80125a4:	4413      	add	r3, r2
 80125a6:	4619      	mov	r1, r3
 80125a8:	68f8      	ldr	r0, [r7, #12]
 80125aa:	f7ff fde7 	bl	801217c <move_window>
 80125ae:	4603      	mov	r3, r0
 80125b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80125b2:	7ffb      	ldrb	r3, [r7, #31]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d12a      	bne.n	801260e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80125c4:	68bb      	ldr	r3, [r7, #8]
 80125c6:	009b      	lsls	r3, r3, #2
 80125c8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80125cc:	4413      	add	r3, r2
 80125ce:	4618      	mov	r0, r3
 80125d0:	f7ff fb0a 	bl	8011be8 <ld_dword>
 80125d4:	4603      	mov	r3, r0
 80125d6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80125da:	4323      	orrs	r3, r4
 80125dc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80125e4:	68bb      	ldr	r3, [r7, #8]
 80125e6:	009b      	lsls	r3, r3, #2
 80125e8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80125ec:	4413      	add	r3, r2
 80125ee:	6879      	ldr	r1, [r7, #4]
 80125f0:	4618      	mov	r0, r3
 80125f2:	f7ff fb37 	bl	8011c64 <st_dword>
			fs->wflag = 1;
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	2201      	movs	r2, #1
 80125fa:	70da      	strb	r2, [r3, #3]
			break;
 80125fc:	e008      	b.n	8012610 <put_fat+0x1ce>
		}
	}
 80125fe:	bf00      	nop
 8012600:	e006      	b.n	8012610 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012602:	bf00      	nop
 8012604:	e004      	b.n	8012610 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012606:	bf00      	nop
 8012608:	e002      	b.n	8012610 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801260a:	bf00      	nop
 801260c:	e000      	b.n	8012610 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801260e:	bf00      	nop
	return res;
 8012610:	7ffb      	ldrb	r3, [r7, #31]
}
 8012612:	4618      	mov	r0, r3
 8012614:	3724      	adds	r7, #36	; 0x24
 8012616:	46bd      	mov	sp, r7
 8012618:	bd90      	pop	{r4, r7, pc}

0801261a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801261a:	b580      	push	{r7, lr}
 801261c:	b088      	sub	sp, #32
 801261e:	af00      	add	r7, sp, #0
 8012620:	60f8      	str	r0, [r7, #12]
 8012622:	60b9      	str	r1, [r7, #8]
 8012624:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012626:	2300      	movs	r3, #0
 8012628:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012630:	68bb      	ldr	r3, [r7, #8]
 8012632:	2b01      	cmp	r3, #1
 8012634:	d904      	bls.n	8012640 <remove_chain+0x26>
 8012636:	69bb      	ldr	r3, [r7, #24]
 8012638:	699b      	ldr	r3, [r3, #24]
 801263a:	68ba      	ldr	r2, [r7, #8]
 801263c:	429a      	cmp	r2, r3
 801263e:	d301      	bcc.n	8012644 <remove_chain+0x2a>
 8012640:	2302      	movs	r3, #2
 8012642:	e04b      	b.n	80126dc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d00c      	beq.n	8012664 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801264a:	f04f 32ff 	mov.w	r2, #4294967295
 801264e:	6879      	ldr	r1, [r7, #4]
 8012650:	69b8      	ldr	r0, [r7, #24]
 8012652:	f7ff fef6 	bl	8012442 <put_fat>
 8012656:	4603      	mov	r3, r0
 8012658:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801265a:	7ffb      	ldrb	r3, [r7, #31]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d001      	beq.n	8012664 <remove_chain+0x4a>
 8012660:	7ffb      	ldrb	r3, [r7, #31]
 8012662:	e03b      	b.n	80126dc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012664:	68b9      	ldr	r1, [r7, #8]
 8012666:	68f8      	ldr	r0, [r7, #12]
 8012668:	f7ff fe43 	bl	80122f2 <get_fat>
 801266c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801266e:	697b      	ldr	r3, [r7, #20]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d031      	beq.n	80126d8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012674:	697b      	ldr	r3, [r7, #20]
 8012676:	2b01      	cmp	r3, #1
 8012678:	d101      	bne.n	801267e <remove_chain+0x64>
 801267a:	2302      	movs	r3, #2
 801267c:	e02e      	b.n	80126dc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801267e:	697b      	ldr	r3, [r7, #20]
 8012680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012684:	d101      	bne.n	801268a <remove_chain+0x70>
 8012686:	2301      	movs	r3, #1
 8012688:	e028      	b.n	80126dc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801268a:	2200      	movs	r2, #0
 801268c:	68b9      	ldr	r1, [r7, #8]
 801268e:	69b8      	ldr	r0, [r7, #24]
 8012690:	f7ff fed7 	bl	8012442 <put_fat>
 8012694:	4603      	mov	r3, r0
 8012696:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012698:	7ffb      	ldrb	r3, [r7, #31]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d001      	beq.n	80126a2 <remove_chain+0x88>
 801269e:	7ffb      	ldrb	r3, [r7, #31]
 80126a0:	e01c      	b.n	80126dc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80126a2:	69bb      	ldr	r3, [r7, #24]
 80126a4:	695a      	ldr	r2, [r3, #20]
 80126a6:	69bb      	ldr	r3, [r7, #24]
 80126a8:	699b      	ldr	r3, [r3, #24]
 80126aa:	3b02      	subs	r3, #2
 80126ac:	429a      	cmp	r2, r3
 80126ae:	d20b      	bcs.n	80126c8 <remove_chain+0xae>
			fs->free_clst++;
 80126b0:	69bb      	ldr	r3, [r7, #24]
 80126b2:	695b      	ldr	r3, [r3, #20]
 80126b4:	1c5a      	adds	r2, r3, #1
 80126b6:	69bb      	ldr	r3, [r7, #24]
 80126b8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80126ba:	69bb      	ldr	r3, [r7, #24]
 80126bc:	791b      	ldrb	r3, [r3, #4]
 80126be:	f043 0301 	orr.w	r3, r3, #1
 80126c2:	b2da      	uxtb	r2, r3
 80126c4:	69bb      	ldr	r3, [r7, #24]
 80126c6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80126c8:	697b      	ldr	r3, [r7, #20]
 80126ca:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80126cc:	69bb      	ldr	r3, [r7, #24]
 80126ce:	699b      	ldr	r3, [r3, #24]
 80126d0:	68ba      	ldr	r2, [r7, #8]
 80126d2:	429a      	cmp	r2, r3
 80126d4:	d3c6      	bcc.n	8012664 <remove_chain+0x4a>
 80126d6:	e000      	b.n	80126da <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80126d8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80126da:	2300      	movs	r3, #0
}
 80126dc:	4618      	mov	r0, r3
 80126de:	3720      	adds	r7, #32
 80126e0:	46bd      	mov	sp, r7
 80126e2:	bd80      	pop	{r7, pc}

080126e4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b088      	sub	sp, #32
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
 80126ec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d10d      	bne.n	8012716 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80126fa:	693b      	ldr	r3, [r7, #16]
 80126fc:	691b      	ldr	r3, [r3, #16]
 80126fe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012700:	69bb      	ldr	r3, [r7, #24]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d004      	beq.n	8012710 <create_chain+0x2c>
 8012706:	693b      	ldr	r3, [r7, #16]
 8012708:	699b      	ldr	r3, [r3, #24]
 801270a:	69ba      	ldr	r2, [r7, #24]
 801270c:	429a      	cmp	r2, r3
 801270e:	d31b      	bcc.n	8012748 <create_chain+0x64>
 8012710:	2301      	movs	r3, #1
 8012712:	61bb      	str	r3, [r7, #24]
 8012714:	e018      	b.n	8012748 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012716:	6839      	ldr	r1, [r7, #0]
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f7ff fdea 	bl	80122f2 <get_fat>
 801271e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	2b01      	cmp	r3, #1
 8012724:	d801      	bhi.n	801272a <create_chain+0x46>
 8012726:	2301      	movs	r3, #1
 8012728:	e070      	b.n	801280c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012730:	d101      	bne.n	8012736 <create_chain+0x52>
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	e06a      	b.n	801280c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012736:	693b      	ldr	r3, [r7, #16]
 8012738:	699b      	ldr	r3, [r3, #24]
 801273a:	68fa      	ldr	r2, [r7, #12]
 801273c:	429a      	cmp	r2, r3
 801273e:	d201      	bcs.n	8012744 <create_chain+0x60>
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	e063      	b.n	801280c <create_chain+0x128>
		scl = clst;
 8012744:	683b      	ldr	r3, [r7, #0]
 8012746:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012748:	69bb      	ldr	r3, [r7, #24]
 801274a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801274c:	69fb      	ldr	r3, [r7, #28]
 801274e:	3301      	adds	r3, #1
 8012750:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012752:	693b      	ldr	r3, [r7, #16]
 8012754:	699b      	ldr	r3, [r3, #24]
 8012756:	69fa      	ldr	r2, [r7, #28]
 8012758:	429a      	cmp	r2, r3
 801275a:	d307      	bcc.n	801276c <create_chain+0x88>
				ncl = 2;
 801275c:	2302      	movs	r3, #2
 801275e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012760:	69fa      	ldr	r2, [r7, #28]
 8012762:	69bb      	ldr	r3, [r7, #24]
 8012764:	429a      	cmp	r2, r3
 8012766:	d901      	bls.n	801276c <create_chain+0x88>
 8012768:	2300      	movs	r3, #0
 801276a:	e04f      	b.n	801280c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801276c:	69f9      	ldr	r1, [r7, #28]
 801276e:	6878      	ldr	r0, [r7, #4]
 8012770:	f7ff fdbf 	bl	80122f2 <get_fat>
 8012774:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d00e      	beq.n	801279a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	2b01      	cmp	r3, #1
 8012780:	d003      	beq.n	801278a <create_chain+0xa6>
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012788:	d101      	bne.n	801278e <create_chain+0xaa>
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	e03e      	b.n	801280c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801278e:	69fa      	ldr	r2, [r7, #28]
 8012790:	69bb      	ldr	r3, [r7, #24]
 8012792:	429a      	cmp	r2, r3
 8012794:	d1da      	bne.n	801274c <create_chain+0x68>
 8012796:	2300      	movs	r3, #0
 8012798:	e038      	b.n	801280c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801279a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801279c:	f04f 32ff 	mov.w	r2, #4294967295
 80127a0:	69f9      	ldr	r1, [r7, #28]
 80127a2:	6938      	ldr	r0, [r7, #16]
 80127a4:	f7ff fe4d 	bl	8012442 <put_fat>
 80127a8:	4603      	mov	r3, r0
 80127aa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80127ac:	7dfb      	ldrb	r3, [r7, #23]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d109      	bne.n	80127c6 <create_chain+0xe2>
 80127b2:	683b      	ldr	r3, [r7, #0]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d006      	beq.n	80127c6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80127b8:	69fa      	ldr	r2, [r7, #28]
 80127ba:	6839      	ldr	r1, [r7, #0]
 80127bc:	6938      	ldr	r0, [r7, #16]
 80127be:	f7ff fe40 	bl	8012442 <put_fat>
 80127c2:	4603      	mov	r3, r0
 80127c4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80127c6:	7dfb      	ldrb	r3, [r7, #23]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d116      	bne.n	80127fa <create_chain+0x116>
		fs->last_clst = ncl;
 80127cc:	693b      	ldr	r3, [r7, #16]
 80127ce:	69fa      	ldr	r2, [r7, #28]
 80127d0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80127d2:	693b      	ldr	r3, [r7, #16]
 80127d4:	695a      	ldr	r2, [r3, #20]
 80127d6:	693b      	ldr	r3, [r7, #16]
 80127d8:	699b      	ldr	r3, [r3, #24]
 80127da:	3b02      	subs	r3, #2
 80127dc:	429a      	cmp	r2, r3
 80127de:	d804      	bhi.n	80127ea <create_chain+0x106>
 80127e0:	693b      	ldr	r3, [r7, #16]
 80127e2:	695b      	ldr	r3, [r3, #20]
 80127e4:	1e5a      	subs	r2, r3, #1
 80127e6:	693b      	ldr	r3, [r7, #16]
 80127e8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80127ea:	693b      	ldr	r3, [r7, #16]
 80127ec:	791b      	ldrb	r3, [r3, #4]
 80127ee:	f043 0301 	orr.w	r3, r3, #1
 80127f2:	b2da      	uxtb	r2, r3
 80127f4:	693b      	ldr	r3, [r7, #16]
 80127f6:	711a      	strb	r2, [r3, #4]
 80127f8:	e007      	b.n	801280a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80127fa:	7dfb      	ldrb	r3, [r7, #23]
 80127fc:	2b01      	cmp	r3, #1
 80127fe:	d102      	bne.n	8012806 <create_chain+0x122>
 8012800:	f04f 33ff 	mov.w	r3, #4294967295
 8012804:	e000      	b.n	8012808 <create_chain+0x124>
 8012806:	2301      	movs	r3, #1
 8012808:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801280a:	69fb      	ldr	r3, [r7, #28]
}
 801280c:	4618      	mov	r0, r3
 801280e:	3720      	adds	r7, #32
 8012810:	46bd      	mov	sp, r7
 8012812:	bd80      	pop	{r7, pc}

08012814 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012814:	b480      	push	{r7}
 8012816:	b087      	sub	sp, #28
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
 801281c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012828:	3304      	adds	r3, #4
 801282a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801282c:	683b      	ldr	r3, [r7, #0]
 801282e:	0a5b      	lsrs	r3, r3, #9
 8012830:	68fa      	ldr	r2, [r7, #12]
 8012832:	8952      	ldrh	r2, [r2, #10]
 8012834:	fbb3 f3f2 	udiv	r3, r3, r2
 8012838:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801283a:	693b      	ldr	r3, [r7, #16]
 801283c:	1d1a      	adds	r2, r3, #4
 801283e:	613a      	str	r2, [r7, #16]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012844:	68bb      	ldr	r3, [r7, #8]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d101      	bne.n	801284e <clmt_clust+0x3a>
 801284a:	2300      	movs	r3, #0
 801284c:	e010      	b.n	8012870 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801284e:	697a      	ldr	r2, [r7, #20]
 8012850:	68bb      	ldr	r3, [r7, #8]
 8012852:	429a      	cmp	r2, r3
 8012854:	d307      	bcc.n	8012866 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012856:	697a      	ldr	r2, [r7, #20]
 8012858:	68bb      	ldr	r3, [r7, #8]
 801285a:	1ad3      	subs	r3, r2, r3
 801285c:	617b      	str	r3, [r7, #20]
 801285e:	693b      	ldr	r3, [r7, #16]
 8012860:	3304      	adds	r3, #4
 8012862:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012864:	e7e9      	b.n	801283a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012866:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012868:	693b      	ldr	r3, [r7, #16]
 801286a:	681a      	ldr	r2, [r3, #0]
 801286c:	697b      	ldr	r3, [r7, #20]
 801286e:	4413      	add	r3, r2
}
 8012870:	4618      	mov	r0, r3
 8012872:	371c      	adds	r7, #28
 8012874:	46bd      	mov	sp, r7
 8012876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287a:	4770      	bx	lr

0801287c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b086      	sub	sp, #24
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
 8012884:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801288c:	683b      	ldr	r3, [r7, #0]
 801288e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012892:	d204      	bcs.n	801289e <dir_sdi+0x22>
 8012894:	683b      	ldr	r3, [r7, #0]
 8012896:	f003 031f 	and.w	r3, r3, #31
 801289a:	2b00      	cmp	r3, #0
 801289c:	d001      	beq.n	80128a2 <dir_sdi+0x26>
		return FR_INT_ERR;
 801289e:	2302      	movs	r3, #2
 80128a0:	e063      	b.n	801296a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	683a      	ldr	r2, [r7, #0]
 80128a6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	689b      	ldr	r3, [r3, #8]
 80128ac:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80128ae:	697b      	ldr	r3, [r7, #20]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d106      	bne.n	80128c2 <dir_sdi+0x46>
 80128b4:	693b      	ldr	r3, [r7, #16]
 80128b6:	781b      	ldrb	r3, [r3, #0]
 80128b8:	2b02      	cmp	r3, #2
 80128ba:	d902      	bls.n	80128c2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80128bc:	693b      	ldr	r3, [r7, #16]
 80128be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128c0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80128c2:	697b      	ldr	r3, [r7, #20]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d10c      	bne.n	80128e2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80128c8:	683b      	ldr	r3, [r7, #0]
 80128ca:	095b      	lsrs	r3, r3, #5
 80128cc:	693a      	ldr	r2, [r7, #16]
 80128ce:	8912      	ldrh	r2, [r2, #8]
 80128d0:	4293      	cmp	r3, r2
 80128d2:	d301      	bcc.n	80128d8 <dir_sdi+0x5c>
 80128d4:	2302      	movs	r3, #2
 80128d6:	e048      	b.n	801296a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80128d8:	693b      	ldr	r3, [r7, #16]
 80128da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	61da      	str	r2, [r3, #28]
 80128e0:	e029      	b.n	8012936 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80128e2:	693b      	ldr	r3, [r7, #16]
 80128e4:	895b      	ldrh	r3, [r3, #10]
 80128e6:	025b      	lsls	r3, r3, #9
 80128e8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80128ea:	e019      	b.n	8012920 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	6979      	ldr	r1, [r7, #20]
 80128f0:	4618      	mov	r0, r3
 80128f2:	f7ff fcfe 	bl	80122f2 <get_fat>
 80128f6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80128f8:	697b      	ldr	r3, [r7, #20]
 80128fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128fe:	d101      	bne.n	8012904 <dir_sdi+0x88>
 8012900:	2301      	movs	r3, #1
 8012902:	e032      	b.n	801296a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012904:	697b      	ldr	r3, [r7, #20]
 8012906:	2b01      	cmp	r3, #1
 8012908:	d904      	bls.n	8012914 <dir_sdi+0x98>
 801290a:	693b      	ldr	r3, [r7, #16]
 801290c:	699b      	ldr	r3, [r3, #24]
 801290e:	697a      	ldr	r2, [r7, #20]
 8012910:	429a      	cmp	r2, r3
 8012912:	d301      	bcc.n	8012918 <dir_sdi+0x9c>
 8012914:	2302      	movs	r3, #2
 8012916:	e028      	b.n	801296a <dir_sdi+0xee>
			ofs -= csz;
 8012918:	683a      	ldr	r2, [r7, #0]
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	1ad3      	subs	r3, r2, r3
 801291e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012920:	683a      	ldr	r2, [r7, #0]
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	429a      	cmp	r2, r3
 8012926:	d2e1      	bcs.n	80128ec <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8012928:	6979      	ldr	r1, [r7, #20]
 801292a:	6938      	ldr	r0, [r7, #16]
 801292c:	f7ff fcc2 	bl	80122b4 <clust2sect>
 8012930:	4602      	mov	r2, r0
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	697a      	ldr	r2, [r7, #20]
 801293a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	69db      	ldr	r3, [r3, #28]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d101      	bne.n	8012948 <dir_sdi+0xcc>
 8012944:	2302      	movs	r3, #2
 8012946:	e010      	b.n	801296a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	69da      	ldr	r2, [r3, #28]
 801294c:	683b      	ldr	r3, [r7, #0]
 801294e:	0a5b      	lsrs	r3, r3, #9
 8012950:	441a      	add	r2, r3
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012956:	693b      	ldr	r3, [r7, #16]
 8012958:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801295c:	683b      	ldr	r3, [r7, #0]
 801295e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012962:	441a      	add	r2, r3
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012968:	2300      	movs	r3, #0
}
 801296a:	4618      	mov	r0, r3
 801296c:	3718      	adds	r7, #24
 801296e:	46bd      	mov	sp, r7
 8012970:	bd80      	pop	{r7, pc}

08012972 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012972:	b580      	push	{r7, lr}
 8012974:	b086      	sub	sp, #24
 8012976:	af00      	add	r7, sp, #0
 8012978:	6078      	str	r0, [r7, #4]
 801297a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	695b      	ldr	r3, [r3, #20]
 8012986:	3320      	adds	r3, #32
 8012988:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	69db      	ldr	r3, [r3, #28]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d003      	beq.n	801299a <dir_next+0x28>
 8012992:	68bb      	ldr	r3, [r7, #8]
 8012994:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012998:	d301      	bcc.n	801299e <dir_next+0x2c>
 801299a:	2304      	movs	r3, #4
 801299c:	e0aa      	b.n	8012af4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801299e:	68bb      	ldr	r3, [r7, #8]
 80129a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	f040 8098 	bne.w	8012ada <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	69db      	ldr	r3, [r3, #28]
 80129ae:	1c5a      	adds	r2, r3, #1
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	699b      	ldr	r3, [r3, #24]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d10b      	bne.n	80129d4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80129bc:	68bb      	ldr	r3, [r7, #8]
 80129be:	095b      	lsrs	r3, r3, #5
 80129c0:	68fa      	ldr	r2, [r7, #12]
 80129c2:	8912      	ldrh	r2, [r2, #8]
 80129c4:	4293      	cmp	r3, r2
 80129c6:	f0c0 8088 	bcc.w	8012ada <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	2200      	movs	r2, #0
 80129ce:	61da      	str	r2, [r3, #28]
 80129d0:	2304      	movs	r3, #4
 80129d2:	e08f      	b.n	8012af4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80129d4:	68bb      	ldr	r3, [r7, #8]
 80129d6:	0a5b      	lsrs	r3, r3, #9
 80129d8:	68fa      	ldr	r2, [r7, #12]
 80129da:	8952      	ldrh	r2, [r2, #10]
 80129dc:	3a01      	subs	r2, #1
 80129de:	4013      	ands	r3, r2
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d17a      	bne.n	8012ada <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80129e4:	687a      	ldr	r2, [r7, #4]
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	699b      	ldr	r3, [r3, #24]
 80129ea:	4619      	mov	r1, r3
 80129ec:	4610      	mov	r0, r2
 80129ee:	f7ff fc80 	bl	80122f2 <get_fat>
 80129f2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80129f4:	697b      	ldr	r3, [r7, #20]
 80129f6:	2b01      	cmp	r3, #1
 80129f8:	d801      	bhi.n	80129fe <dir_next+0x8c>
 80129fa:	2302      	movs	r3, #2
 80129fc:	e07a      	b.n	8012af4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80129fe:	697b      	ldr	r3, [r7, #20]
 8012a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a04:	d101      	bne.n	8012a0a <dir_next+0x98>
 8012a06:	2301      	movs	r3, #1
 8012a08:	e074      	b.n	8012af4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	699b      	ldr	r3, [r3, #24]
 8012a0e:	697a      	ldr	r2, [r7, #20]
 8012a10:	429a      	cmp	r2, r3
 8012a12:	d358      	bcc.n	8012ac6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d104      	bne.n	8012a24 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	61da      	str	r2, [r3, #28]
 8012a20:	2304      	movs	r3, #4
 8012a22:	e067      	b.n	8012af4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012a24:	687a      	ldr	r2, [r7, #4]
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	699b      	ldr	r3, [r3, #24]
 8012a2a:	4619      	mov	r1, r3
 8012a2c:	4610      	mov	r0, r2
 8012a2e:	f7ff fe59 	bl	80126e4 <create_chain>
 8012a32:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012a34:	697b      	ldr	r3, [r7, #20]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d101      	bne.n	8012a3e <dir_next+0xcc>
 8012a3a:	2307      	movs	r3, #7
 8012a3c:	e05a      	b.n	8012af4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012a3e:	697b      	ldr	r3, [r7, #20]
 8012a40:	2b01      	cmp	r3, #1
 8012a42:	d101      	bne.n	8012a48 <dir_next+0xd6>
 8012a44:	2302      	movs	r3, #2
 8012a46:	e055      	b.n	8012af4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012a48:	697b      	ldr	r3, [r7, #20]
 8012a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a4e:	d101      	bne.n	8012a54 <dir_next+0xe2>
 8012a50:	2301      	movs	r3, #1
 8012a52:	e04f      	b.n	8012af4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012a54:	68f8      	ldr	r0, [r7, #12]
 8012a56:	f7ff fb4d 	bl	80120f4 <sync_window>
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d001      	beq.n	8012a64 <dir_next+0xf2>
 8012a60:	2301      	movs	r3, #1
 8012a62:	e047      	b.n	8012af4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	3334      	adds	r3, #52	; 0x34
 8012a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012a6c:	2100      	movs	r1, #0
 8012a6e:	4618      	mov	r0, r3
 8012a70:	f7ff f945 	bl	8011cfe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012a74:	2300      	movs	r3, #0
 8012a76:	613b      	str	r3, [r7, #16]
 8012a78:	6979      	ldr	r1, [r7, #20]
 8012a7a:	68f8      	ldr	r0, [r7, #12]
 8012a7c:	f7ff fc1a 	bl	80122b4 <clust2sect>
 8012a80:	4602      	mov	r2, r0
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	631a      	str	r2, [r3, #48]	; 0x30
 8012a86:	e012      	b.n	8012aae <dir_next+0x13c>
						fs->wflag = 1;
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	2201      	movs	r2, #1
 8012a8c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012a8e:	68f8      	ldr	r0, [r7, #12]
 8012a90:	f7ff fb30 	bl	80120f4 <sync_window>
 8012a94:	4603      	mov	r3, r0
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d001      	beq.n	8012a9e <dir_next+0x12c>
 8012a9a:	2301      	movs	r3, #1
 8012a9c:	e02a      	b.n	8012af4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012a9e:	693b      	ldr	r3, [r7, #16]
 8012aa0:	3301      	adds	r3, #1
 8012aa2:	613b      	str	r3, [r7, #16]
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012aa8:	1c5a      	adds	r2, r3, #1
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	631a      	str	r2, [r3, #48]	; 0x30
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	895b      	ldrh	r3, [r3, #10]
 8012ab2:	461a      	mov	r2, r3
 8012ab4:	693b      	ldr	r3, [r7, #16]
 8012ab6:	4293      	cmp	r3, r2
 8012ab8:	d3e6      	bcc.n	8012a88 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012abe:	693b      	ldr	r3, [r7, #16]
 8012ac0:	1ad2      	subs	r2, r2, r3
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	697a      	ldr	r2, [r7, #20]
 8012aca:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012acc:	6979      	ldr	r1, [r7, #20]
 8012ace:	68f8      	ldr	r0, [r7, #12]
 8012ad0:	f7ff fbf0 	bl	80122b4 <clust2sect>
 8012ad4:	4602      	mov	r2, r0
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	68ba      	ldr	r2, [r7, #8]
 8012ade:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012ae6:	68bb      	ldr	r3, [r7, #8]
 8012ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012aec:	441a      	add	r2, r3
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012af2:	2300      	movs	r3, #0
}
 8012af4:	4618      	mov	r0, r3
 8012af6:	3718      	adds	r7, #24
 8012af8:	46bd      	mov	sp, r7
 8012afa:	bd80      	pop	{r7, pc}

08012afc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b086      	sub	sp, #24
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
 8012b04:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012b0c:	2100      	movs	r1, #0
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	f7ff feb4 	bl	801287c <dir_sdi>
 8012b14:	4603      	mov	r3, r0
 8012b16:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012b18:	7dfb      	ldrb	r3, [r7, #23]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d12b      	bne.n	8012b76 <dir_alloc+0x7a>
		n = 0;
 8012b1e:	2300      	movs	r3, #0
 8012b20:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	69db      	ldr	r3, [r3, #28]
 8012b26:	4619      	mov	r1, r3
 8012b28:	68f8      	ldr	r0, [r7, #12]
 8012b2a:	f7ff fb27 	bl	801217c <move_window>
 8012b2e:	4603      	mov	r3, r0
 8012b30:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012b32:	7dfb      	ldrb	r3, [r7, #23]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d11d      	bne.n	8012b74 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	6a1b      	ldr	r3, [r3, #32]
 8012b3c:	781b      	ldrb	r3, [r3, #0]
 8012b3e:	2be5      	cmp	r3, #229	; 0xe5
 8012b40:	d004      	beq.n	8012b4c <dir_alloc+0x50>
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	6a1b      	ldr	r3, [r3, #32]
 8012b46:	781b      	ldrb	r3, [r3, #0]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d107      	bne.n	8012b5c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012b4c:	693b      	ldr	r3, [r7, #16]
 8012b4e:	3301      	adds	r3, #1
 8012b50:	613b      	str	r3, [r7, #16]
 8012b52:	693a      	ldr	r2, [r7, #16]
 8012b54:	683b      	ldr	r3, [r7, #0]
 8012b56:	429a      	cmp	r2, r3
 8012b58:	d102      	bne.n	8012b60 <dir_alloc+0x64>
 8012b5a:	e00c      	b.n	8012b76 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012b60:	2101      	movs	r1, #1
 8012b62:	6878      	ldr	r0, [r7, #4]
 8012b64:	f7ff ff05 	bl	8012972 <dir_next>
 8012b68:	4603      	mov	r3, r0
 8012b6a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012b6c:	7dfb      	ldrb	r3, [r7, #23]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d0d7      	beq.n	8012b22 <dir_alloc+0x26>
 8012b72:	e000      	b.n	8012b76 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012b74:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012b76:	7dfb      	ldrb	r3, [r7, #23]
 8012b78:	2b04      	cmp	r3, #4
 8012b7a:	d101      	bne.n	8012b80 <dir_alloc+0x84>
 8012b7c:	2307      	movs	r3, #7
 8012b7e:	75fb      	strb	r3, [r7, #23]
	return res;
 8012b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b82:	4618      	mov	r0, r3
 8012b84:	3718      	adds	r7, #24
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}

08012b8a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012b8a:	b580      	push	{r7, lr}
 8012b8c:	b084      	sub	sp, #16
 8012b8e:	af00      	add	r7, sp, #0
 8012b90:	6078      	str	r0, [r7, #4]
 8012b92:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012b94:	683b      	ldr	r3, [r7, #0]
 8012b96:	331a      	adds	r3, #26
 8012b98:	4618      	mov	r0, r3
 8012b9a:	f7ff f80d 	bl	8011bb8 <ld_word>
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	781b      	ldrb	r3, [r3, #0]
 8012ba6:	2b03      	cmp	r3, #3
 8012ba8:	d109      	bne.n	8012bbe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012baa:	683b      	ldr	r3, [r7, #0]
 8012bac:	3314      	adds	r3, #20
 8012bae:	4618      	mov	r0, r3
 8012bb0:	f7ff f802 	bl	8011bb8 <ld_word>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	041b      	lsls	r3, r3, #16
 8012bb8:	68fa      	ldr	r2, [r7, #12]
 8012bba:	4313      	orrs	r3, r2
 8012bbc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012bbe:	68fb      	ldr	r3, [r7, #12]
}
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	3710      	adds	r7, #16
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	bd80      	pop	{r7, pc}

08012bc8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b084      	sub	sp, #16
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	60f8      	str	r0, [r7, #12]
 8012bd0:	60b9      	str	r1, [r7, #8]
 8012bd2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	331a      	adds	r3, #26
 8012bd8:	687a      	ldr	r2, [r7, #4]
 8012bda:	b292      	uxth	r2, r2
 8012bdc:	4611      	mov	r1, r2
 8012bde:	4618      	mov	r0, r3
 8012be0:	f7ff f825 	bl	8011c2e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	781b      	ldrb	r3, [r3, #0]
 8012be8:	2b03      	cmp	r3, #3
 8012bea:	d109      	bne.n	8012c00 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012bec:	68bb      	ldr	r3, [r7, #8]
 8012bee:	f103 0214 	add.w	r2, r3, #20
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	0c1b      	lsrs	r3, r3, #16
 8012bf6:	b29b      	uxth	r3, r3
 8012bf8:	4619      	mov	r1, r3
 8012bfa:	4610      	mov	r0, r2
 8012bfc:	f7ff f817 	bl	8011c2e <st_word>
	}
}
 8012c00:	bf00      	nop
 8012c02:	3710      	adds	r7, #16
 8012c04:	46bd      	mov	sp, r7
 8012c06:	bd80      	pop	{r7, pc}

08012c08 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b086      	sub	sp, #24
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
 8012c10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012c12:	2304      	movs	r3, #4
 8012c14:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012c1c:	e03c      	b.n	8012c98 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	69db      	ldr	r3, [r3, #28]
 8012c22:	4619      	mov	r1, r3
 8012c24:	6938      	ldr	r0, [r7, #16]
 8012c26:	f7ff faa9 	bl	801217c <move_window>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012c2e:	7dfb      	ldrb	r3, [r7, #23]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d136      	bne.n	8012ca2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	6a1b      	ldr	r3, [r3, #32]
 8012c38:	781b      	ldrb	r3, [r3, #0]
 8012c3a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8012c3c:	7bfb      	ldrb	r3, [r7, #15]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d102      	bne.n	8012c48 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012c42:	2304      	movs	r3, #4
 8012c44:	75fb      	strb	r3, [r7, #23]
 8012c46:	e031      	b.n	8012cac <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	6a1b      	ldr	r3, [r3, #32]
 8012c4c:	330b      	adds	r3, #11
 8012c4e:	781b      	ldrb	r3, [r3, #0]
 8012c50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012c54:	73bb      	strb	r3, [r7, #14]
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	7bba      	ldrb	r2, [r7, #14]
 8012c5a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8012c5c:	7bfb      	ldrb	r3, [r7, #15]
 8012c5e:	2be5      	cmp	r3, #229	; 0xe5
 8012c60:	d011      	beq.n	8012c86 <dir_read+0x7e>
 8012c62:	7bfb      	ldrb	r3, [r7, #15]
 8012c64:	2b2e      	cmp	r3, #46	; 0x2e
 8012c66:	d00e      	beq.n	8012c86 <dir_read+0x7e>
 8012c68:	7bbb      	ldrb	r3, [r7, #14]
 8012c6a:	2b0f      	cmp	r3, #15
 8012c6c:	d00b      	beq.n	8012c86 <dir_read+0x7e>
 8012c6e:	7bbb      	ldrb	r3, [r7, #14]
 8012c70:	f023 0320 	bic.w	r3, r3, #32
 8012c74:	2b08      	cmp	r3, #8
 8012c76:	bf0c      	ite	eq
 8012c78:	2301      	moveq	r3, #1
 8012c7a:	2300      	movne	r3, #0
 8012c7c:	b2db      	uxtb	r3, r3
 8012c7e:	461a      	mov	r2, r3
 8012c80:	683b      	ldr	r3, [r7, #0]
 8012c82:	4293      	cmp	r3, r2
 8012c84:	d00f      	beq.n	8012ca6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012c86:	2100      	movs	r1, #0
 8012c88:	6878      	ldr	r0, [r7, #4]
 8012c8a:	f7ff fe72 	bl	8012972 <dir_next>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012c92:	7dfb      	ldrb	r3, [r7, #23]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d108      	bne.n	8012caa <dir_read+0xa2>
	while (dp->sect) {
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	69db      	ldr	r3, [r3, #28]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d1be      	bne.n	8012c1e <dir_read+0x16>
 8012ca0:	e004      	b.n	8012cac <dir_read+0xa4>
		if (res != FR_OK) break;
 8012ca2:	bf00      	nop
 8012ca4:	e002      	b.n	8012cac <dir_read+0xa4>
				break;
 8012ca6:	bf00      	nop
 8012ca8:	e000      	b.n	8012cac <dir_read+0xa4>
		if (res != FR_OK) break;
 8012caa:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012cac:	7dfb      	ldrb	r3, [r7, #23]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d002      	beq.n	8012cb8 <dir_read+0xb0>
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	61da      	str	r2, [r3, #28]
	return res;
 8012cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8012cba:	4618      	mov	r0, r3
 8012cbc:	3718      	adds	r7, #24
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	bd80      	pop	{r7, pc}

08012cc2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012cc2:	b580      	push	{r7, lr}
 8012cc4:	b086      	sub	sp, #24
 8012cc6:	af00      	add	r7, sp, #0
 8012cc8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012cd0:	2100      	movs	r1, #0
 8012cd2:	6878      	ldr	r0, [r7, #4]
 8012cd4:	f7ff fdd2 	bl	801287c <dir_sdi>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012cdc:	7dfb      	ldrb	r3, [r7, #23]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d001      	beq.n	8012ce6 <dir_find+0x24>
 8012ce2:	7dfb      	ldrb	r3, [r7, #23]
 8012ce4:	e03e      	b.n	8012d64 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	69db      	ldr	r3, [r3, #28]
 8012cea:	4619      	mov	r1, r3
 8012cec:	6938      	ldr	r0, [r7, #16]
 8012cee:	f7ff fa45 	bl	801217c <move_window>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012cf6:	7dfb      	ldrb	r3, [r7, #23]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d12f      	bne.n	8012d5c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	6a1b      	ldr	r3, [r3, #32]
 8012d00:	781b      	ldrb	r3, [r3, #0]
 8012d02:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012d04:	7bfb      	ldrb	r3, [r7, #15]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d102      	bne.n	8012d10 <dir_find+0x4e>
 8012d0a:	2304      	movs	r3, #4
 8012d0c:	75fb      	strb	r3, [r7, #23]
 8012d0e:	e028      	b.n	8012d62 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	6a1b      	ldr	r3, [r3, #32]
 8012d14:	330b      	adds	r3, #11
 8012d16:	781b      	ldrb	r3, [r3, #0]
 8012d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012d1c:	b2da      	uxtb	r2, r3
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	6a1b      	ldr	r3, [r3, #32]
 8012d26:	330b      	adds	r3, #11
 8012d28:	781b      	ldrb	r3, [r3, #0]
 8012d2a:	f003 0308 	and.w	r3, r3, #8
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d10a      	bne.n	8012d48 <dir_find+0x86>
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	6a18      	ldr	r0, [r3, #32]
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	3324      	adds	r3, #36	; 0x24
 8012d3a:	220b      	movs	r2, #11
 8012d3c:	4619      	mov	r1, r3
 8012d3e:	f7fe fff9 	bl	8011d34 <mem_cmp>
 8012d42:	4603      	mov	r3, r0
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d00b      	beq.n	8012d60 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012d48:	2100      	movs	r1, #0
 8012d4a:	6878      	ldr	r0, [r7, #4]
 8012d4c:	f7ff fe11 	bl	8012972 <dir_next>
 8012d50:	4603      	mov	r3, r0
 8012d52:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012d54:	7dfb      	ldrb	r3, [r7, #23]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d0c5      	beq.n	8012ce6 <dir_find+0x24>
 8012d5a:	e002      	b.n	8012d62 <dir_find+0xa0>
		if (res != FR_OK) break;
 8012d5c:	bf00      	nop
 8012d5e:	e000      	b.n	8012d62 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012d60:	bf00      	nop

	return res;
 8012d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d64:	4618      	mov	r0, r3
 8012d66:	3718      	adds	r7, #24
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	bd80      	pop	{r7, pc}

08012d6c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b084      	sub	sp, #16
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012d7a:	2101      	movs	r1, #1
 8012d7c:	6878      	ldr	r0, [r7, #4]
 8012d7e:	f7ff febd 	bl	8012afc <dir_alloc>
 8012d82:	4603      	mov	r3, r0
 8012d84:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012d86:	7bfb      	ldrb	r3, [r7, #15]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d11c      	bne.n	8012dc6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	69db      	ldr	r3, [r3, #28]
 8012d90:	4619      	mov	r1, r3
 8012d92:	68b8      	ldr	r0, [r7, #8]
 8012d94:	f7ff f9f2 	bl	801217c <move_window>
 8012d98:	4603      	mov	r3, r0
 8012d9a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012d9c:	7bfb      	ldrb	r3, [r7, #15]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d111      	bne.n	8012dc6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	6a1b      	ldr	r3, [r3, #32]
 8012da6:	2220      	movs	r2, #32
 8012da8:	2100      	movs	r1, #0
 8012daa:	4618      	mov	r0, r3
 8012dac:	f7fe ffa7 	bl	8011cfe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	6a18      	ldr	r0, [r3, #32]
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	3324      	adds	r3, #36	; 0x24
 8012db8:	220b      	movs	r2, #11
 8012dba:	4619      	mov	r1, r3
 8012dbc:	f7fe ff7e 	bl	8011cbc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012dc0:	68bb      	ldr	r3, [r7, #8]
 8012dc2:	2201      	movs	r2, #1
 8012dc4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dc8:	4618      	mov	r0, r3
 8012dca:	3710      	adds	r7, #16
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	bd80      	pop	{r7, pc}

08012dd0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b086      	sub	sp, #24
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
 8012dd8:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8012dda:	683b      	ldr	r3, [r7, #0]
 8012ddc:	2200      	movs	r2, #0
 8012dde:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	69db      	ldr	r3, [r3, #28]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d04e      	beq.n	8012e86 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8012de8:	2300      	movs	r3, #0
 8012dea:	613b      	str	r3, [r7, #16]
 8012dec:	693b      	ldr	r3, [r7, #16]
 8012dee:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8012df0:	e021      	b.n	8012e36 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	6a1a      	ldr	r2, [r3, #32]
 8012df6:	697b      	ldr	r3, [r7, #20]
 8012df8:	1c59      	adds	r1, r3, #1
 8012dfa:	6179      	str	r1, [r7, #20]
 8012dfc:	4413      	add	r3, r2
 8012dfe:	781b      	ldrb	r3, [r3, #0]
 8012e00:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8012e02:	7bfb      	ldrb	r3, [r7, #15]
 8012e04:	2b20      	cmp	r3, #32
 8012e06:	d100      	bne.n	8012e0a <get_fileinfo+0x3a>
 8012e08:	e015      	b.n	8012e36 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8012e0a:	7bfb      	ldrb	r3, [r7, #15]
 8012e0c:	2b05      	cmp	r3, #5
 8012e0e:	d101      	bne.n	8012e14 <get_fileinfo+0x44>
 8012e10:	23e5      	movs	r3, #229	; 0xe5
 8012e12:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8012e14:	697b      	ldr	r3, [r7, #20]
 8012e16:	2b09      	cmp	r3, #9
 8012e18:	d106      	bne.n	8012e28 <get_fileinfo+0x58>
 8012e1a:	693b      	ldr	r3, [r7, #16]
 8012e1c:	1c5a      	adds	r2, r3, #1
 8012e1e:	613a      	str	r2, [r7, #16]
 8012e20:	683a      	ldr	r2, [r7, #0]
 8012e22:	4413      	add	r3, r2
 8012e24:	222e      	movs	r2, #46	; 0x2e
 8012e26:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8012e28:	693b      	ldr	r3, [r7, #16]
 8012e2a:	1c5a      	adds	r2, r3, #1
 8012e2c:	613a      	str	r2, [r7, #16]
 8012e2e:	683a      	ldr	r2, [r7, #0]
 8012e30:	4413      	add	r3, r2
 8012e32:	7bfa      	ldrb	r2, [r7, #15]
 8012e34:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8012e36:	697b      	ldr	r3, [r7, #20]
 8012e38:	2b0a      	cmp	r3, #10
 8012e3a:	d9da      	bls.n	8012df2 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8012e3c:	683a      	ldr	r2, [r7, #0]
 8012e3e:	693b      	ldr	r3, [r7, #16]
 8012e40:	4413      	add	r3, r2
 8012e42:	3309      	adds	r3, #9
 8012e44:	2200      	movs	r2, #0
 8012e46:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	6a1b      	ldr	r3, [r3, #32]
 8012e4c:	7ada      	ldrb	r2, [r3, #11]
 8012e4e:	683b      	ldr	r3, [r7, #0]
 8012e50:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	6a1b      	ldr	r3, [r3, #32]
 8012e56:	331c      	adds	r3, #28
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f7fe fec5 	bl	8011be8 <ld_dword>
 8012e5e:	4602      	mov	r2, r0
 8012e60:	683b      	ldr	r3, [r7, #0]
 8012e62:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	6a1b      	ldr	r3, [r3, #32]
 8012e68:	3316      	adds	r3, #22
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f7fe febc 	bl	8011be8 <ld_dword>
 8012e70:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8012e72:	68bb      	ldr	r3, [r7, #8]
 8012e74:	b29a      	uxth	r2, r3
 8012e76:	683b      	ldr	r3, [r7, #0]
 8012e78:	80da      	strh	r2, [r3, #6]
 8012e7a:	68bb      	ldr	r3, [r7, #8]
 8012e7c:	0c1b      	lsrs	r3, r3, #16
 8012e7e:	b29a      	uxth	r2, r3
 8012e80:	683b      	ldr	r3, [r7, #0]
 8012e82:	809a      	strh	r2, [r3, #4]
 8012e84:	e000      	b.n	8012e88 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012e86:	bf00      	nop
}
 8012e88:	3718      	adds	r7, #24
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bd80      	pop	{r7, pc}
	...

08012e90 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b088      	sub	sp, #32
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
 8012e98:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012e9a:	683b      	ldr	r3, [r7, #0]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	60fb      	str	r3, [r7, #12]
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	3324      	adds	r3, #36	; 0x24
 8012ea4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012ea6:	220b      	movs	r2, #11
 8012ea8:	2120      	movs	r1, #32
 8012eaa:	68b8      	ldr	r0, [r7, #8]
 8012eac:	f7fe ff27 	bl	8011cfe <mem_set>
	si = i = 0; ni = 8;
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	613b      	str	r3, [r7, #16]
 8012eb4:	693b      	ldr	r3, [r7, #16]
 8012eb6:	61fb      	str	r3, [r7, #28]
 8012eb8:	2308      	movs	r3, #8
 8012eba:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012ebc:	69fb      	ldr	r3, [r7, #28]
 8012ebe:	1c5a      	adds	r2, r3, #1
 8012ec0:	61fa      	str	r2, [r7, #28]
 8012ec2:	68fa      	ldr	r2, [r7, #12]
 8012ec4:	4413      	add	r3, r2
 8012ec6:	781b      	ldrb	r3, [r3, #0]
 8012ec8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012eca:	7efb      	ldrb	r3, [r7, #27]
 8012ecc:	2b20      	cmp	r3, #32
 8012ece:	d94e      	bls.n	8012f6e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012ed0:	7efb      	ldrb	r3, [r7, #27]
 8012ed2:	2b2f      	cmp	r3, #47	; 0x2f
 8012ed4:	d006      	beq.n	8012ee4 <create_name+0x54>
 8012ed6:	7efb      	ldrb	r3, [r7, #27]
 8012ed8:	2b5c      	cmp	r3, #92	; 0x5c
 8012eda:	d110      	bne.n	8012efe <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012edc:	e002      	b.n	8012ee4 <create_name+0x54>
 8012ede:	69fb      	ldr	r3, [r7, #28]
 8012ee0:	3301      	adds	r3, #1
 8012ee2:	61fb      	str	r3, [r7, #28]
 8012ee4:	68fa      	ldr	r2, [r7, #12]
 8012ee6:	69fb      	ldr	r3, [r7, #28]
 8012ee8:	4413      	add	r3, r2
 8012eea:	781b      	ldrb	r3, [r3, #0]
 8012eec:	2b2f      	cmp	r3, #47	; 0x2f
 8012eee:	d0f6      	beq.n	8012ede <create_name+0x4e>
 8012ef0:	68fa      	ldr	r2, [r7, #12]
 8012ef2:	69fb      	ldr	r3, [r7, #28]
 8012ef4:	4413      	add	r3, r2
 8012ef6:	781b      	ldrb	r3, [r3, #0]
 8012ef8:	2b5c      	cmp	r3, #92	; 0x5c
 8012efa:	d0f0      	beq.n	8012ede <create_name+0x4e>
			break;
 8012efc:	e038      	b.n	8012f70 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012efe:	7efb      	ldrb	r3, [r7, #27]
 8012f00:	2b2e      	cmp	r3, #46	; 0x2e
 8012f02:	d003      	beq.n	8012f0c <create_name+0x7c>
 8012f04:	693a      	ldr	r2, [r7, #16]
 8012f06:	697b      	ldr	r3, [r7, #20]
 8012f08:	429a      	cmp	r2, r3
 8012f0a:	d30c      	bcc.n	8012f26 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012f0c:	697b      	ldr	r3, [r7, #20]
 8012f0e:	2b0b      	cmp	r3, #11
 8012f10:	d002      	beq.n	8012f18 <create_name+0x88>
 8012f12:	7efb      	ldrb	r3, [r7, #27]
 8012f14:	2b2e      	cmp	r3, #46	; 0x2e
 8012f16:	d001      	beq.n	8012f1c <create_name+0x8c>
 8012f18:	2306      	movs	r3, #6
 8012f1a:	e044      	b.n	8012fa6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8012f1c:	2308      	movs	r3, #8
 8012f1e:	613b      	str	r3, [r7, #16]
 8012f20:	230b      	movs	r3, #11
 8012f22:	617b      	str	r3, [r7, #20]
			continue;
 8012f24:	e022      	b.n	8012f6c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012f26:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	da04      	bge.n	8012f38 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012f2e:	7efb      	ldrb	r3, [r7, #27]
 8012f30:	3b80      	subs	r3, #128	; 0x80
 8012f32:	4a1f      	ldr	r2, [pc, #124]	; (8012fb0 <create_name+0x120>)
 8012f34:	5cd3      	ldrb	r3, [r2, r3]
 8012f36:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012f38:	7efb      	ldrb	r3, [r7, #27]
 8012f3a:	4619      	mov	r1, r3
 8012f3c:	481d      	ldr	r0, [pc, #116]	; (8012fb4 <create_name+0x124>)
 8012f3e:	f7fe ff20 	bl	8011d82 <chk_chr>
 8012f42:	4603      	mov	r3, r0
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d001      	beq.n	8012f4c <create_name+0xbc>
 8012f48:	2306      	movs	r3, #6
 8012f4a:	e02c      	b.n	8012fa6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012f4c:	7efb      	ldrb	r3, [r7, #27]
 8012f4e:	2b60      	cmp	r3, #96	; 0x60
 8012f50:	d905      	bls.n	8012f5e <create_name+0xce>
 8012f52:	7efb      	ldrb	r3, [r7, #27]
 8012f54:	2b7a      	cmp	r3, #122	; 0x7a
 8012f56:	d802      	bhi.n	8012f5e <create_name+0xce>
 8012f58:	7efb      	ldrb	r3, [r7, #27]
 8012f5a:	3b20      	subs	r3, #32
 8012f5c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8012f5e:	693b      	ldr	r3, [r7, #16]
 8012f60:	1c5a      	adds	r2, r3, #1
 8012f62:	613a      	str	r2, [r7, #16]
 8012f64:	68ba      	ldr	r2, [r7, #8]
 8012f66:	4413      	add	r3, r2
 8012f68:	7efa      	ldrb	r2, [r7, #27]
 8012f6a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012f6c:	e7a6      	b.n	8012ebc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012f6e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012f70:	68fa      	ldr	r2, [r7, #12]
 8012f72:	69fb      	ldr	r3, [r7, #28]
 8012f74:	441a      	add	r2, r3
 8012f76:	683b      	ldr	r3, [r7, #0]
 8012f78:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012f7a:	693b      	ldr	r3, [r7, #16]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d101      	bne.n	8012f84 <create_name+0xf4>
 8012f80:	2306      	movs	r3, #6
 8012f82:	e010      	b.n	8012fa6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012f84:	68bb      	ldr	r3, [r7, #8]
 8012f86:	781b      	ldrb	r3, [r3, #0]
 8012f88:	2be5      	cmp	r3, #229	; 0xe5
 8012f8a:	d102      	bne.n	8012f92 <create_name+0x102>
 8012f8c:	68bb      	ldr	r3, [r7, #8]
 8012f8e:	2205      	movs	r2, #5
 8012f90:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012f92:	7efb      	ldrb	r3, [r7, #27]
 8012f94:	2b20      	cmp	r3, #32
 8012f96:	d801      	bhi.n	8012f9c <create_name+0x10c>
 8012f98:	2204      	movs	r2, #4
 8012f9a:	e000      	b.n	8012f9e <create_name+0x10e>
 8012f9c:	2200      	movs	r2, #0
 8012f9e:	68bb      	ldr	r3, [r7, #8]
 8012fa0:	330b      	adds	r3, #11
 8012fa2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012fa4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	3720      	adds	r7, #32
 8012faa:	46bd      	mov	sp, r7
 8012fac:	bd80      	pop	{r7, pc}
 8012fae:	bf00      	nop
 8012fb0:	0801eca8 	.word	0x0801eca8
 8012fb4:	0801ebe4 	.word	0x0801ebe4

08012fb8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b086      	sub	sp, #24
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
 8012fc0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012fc6:	693b      	ldr	r3, [r7, #16]
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012fcc:	e002      	b.n	8012fd4 <follow_path+0x1c>
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	3301      	adds	r3, #1
 8012fd2:	603b      	str	r3, [r7, #0]
 8012fd4:	683b      	ldr	r3, [r7, #0]
 8012fd6:	781b      	ldrb	r3, [r3, #0]
 8012fd8:	2b2f      	cmp	r3, #47	; 0x2f
 8012fda:	d0f8      	beq.n	8012fce <follow_path+0x16>
 8012fdc:	683b      	ldr	r3, [r7, #0]
 8012fde:	781b      	ldrb	r3, [r3, #0]
 8012fe0:	2b5c      	cmp	r3, #92	; 0x5c
 8012fe2:	d0f4      	beq.n	8012fce <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012fe4:	693b      	ldr	r3, [r7, #16]
 8012fe6:	2200      	movs	r2, #0
 8012fe8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012fea:	683b      	ldr	r3, [r7, #0]
 8012fec:	781b      	ldrb	r3, [r3, #0]
 8012fee:	2b1f      	cmp	r3, #31
 8012ff0:	d80a      	bhi.n	8013008 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	2280      	movs	r2, #128	; 0x80
 8012ff6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012ffa:	2100      	movs	r1, #0
 8012ffc:	6878      	ldr	r0, [r7, #4]
 8012ffe:	f7ff fc3d 	bl	801287c <dir_sdi>
 8013002:	4603      	mov	r3, r0
 8013004:	75fb      	strb	r3, [r7, #23]
 8013006:	e043      	b.n	8013090 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013008:	463b      	mov	r3, r7
 801300a:	4619      	mov	r1, r3
 801300c:	6878      	ldr	r0, [r7, #4]
 801300e:	f7ff ff3f 	bl	8012e90 <create_name>
 8013012:	4603      	mov	r3, r0
 8013014:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013016:	7dfb      	ldrb	r3, [r7, #23]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d134      	bne.n	8013086 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801301c:	6878      	ldr	r0, [r7, #4]
 801301e:	f7ff fe50 	bl	8012cc2 <dir_find>
 8013022:	4603      	mov	r3, r0
 8013024:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801302c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801302e:	7dfb      	ldrb	r3, [r7, #23]
 8013030:	2b00      	cmp	r3, #0
 8013032:	d00a      	beq.n	801304a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013034:	7dfb      	ldrb	r3, [r7, #23]
 8013036:	2b04      	cmp	r3, #4
 8013038:	d127      	bne.n	801308a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801303a:	7afb      	ldrb	r3, [r7, #11]
 801303c:	f003 0304 	and.w	r3, r3, #4
 8013040:	2b00      	cmp	r3, #0
 8013042:	d122      	bne.n	801308a <follow_path+0xd2>
 8013044:	2305      	movs	r3, #5
 8013046:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013048:	e01f      	b.n	801308a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801304a:	7afb      	ldrb	r3, [r7, #11]
 801304c:	f003 0304 	and.w	r3, r3, #4
 8013050:	2b00      	cmp	r3, #0
 8013052:	d11c      	bne.n	801308e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013054:	693b      	ldr	r3, [r7, #16]
 8013056:	799b      	ldrb	r3, [r3, #6]
 8013058:	f003 0310 	and.w	r3, r3, #16
 801305c:	2b00      	cmp	r3, #0
 801305e:	d102      	bne.n	8013066 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013060:	2305      	movs	r3, #5
 8013062:	75fb      	strb	r3, [r7, #23]
 8013064:	e014      	b.n	8013090 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	695b      	ldr	r3, [r3, #20]
 8013070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013074:	4413      	add	r3, r2
 8013076:	4619      	mov	r1, r3
 8013078:	68f8      	ldr	r0, [r7, #12]
 801307a:	f7ff fd86 	bl	8012b8a <ld_clust>
 801307e:	4602      	mov	r2, r0
 8013080:	693b      	ldr	r3, [r7, #16]
 8013082:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013084:	e7c0      	b.n	8013008 <follow_path+0x50>
			if (res != FR_OK) break;
 8013086:	bf00      	nop
 8013088:	e002      	b.n	8013090 <follow_path+0xd8>
				break;
 801308a:	bf00      	nop
 801308c:	e000      	b.n	8013090 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801308e:	bf00      	nop
			}
		}
	}

	return res;
 8013090:	7dfb      	ldrb	r3, [r7, #23]
}
 8013092:	4618      	mov	r0, r3
 8013094:	3718      	adds	r7, #24
 8013096:	46bd      	mov	sp, r7
 8013098:	bd80      	pop	{r7, pc}

0801309a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801309a:	b480      	push	{r7}
 801309c:	b087      	sub	sp, #28
 801309e:	af00      	add	r7, sp, #0
 80130a0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80130a2:	f04f 33ff 	mov.w	r3, #4294967295
 80130a6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d031      	beq.n	8013114 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	617b      	str	r3, [r7, #20]
 80130b6:	e002      	b.n	80130be <get_ldnumber+0x24>
 80130b8:	697b      	ldr	r3, [r7, #20]
 80130ba:	3301      	adds	r3, #1
 80130bc:	617b      	str	r3, [r7, #20]
 80130be:	697b      	ldr	r3, [r7, #20]
 80130c0:	781b      	ldrb	r3, [r3, #0]
 80130c2:	2b20      	cmp	r3, #32
 80130c4:	d903      	bls.n	80130ce <get_ldnumber+0x34>
 80130c6:	697b      	ldr	r3, [r7, #20]
 80130c8:	781b      	ldrb	r3, [r3, #0]
 80130ca:	2b3a      	cmp	r3, #58	; 0x3a
 80130cc:	d1f4      	bne.n	80130b8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80130ce:	697b      	ldr	r3, [r7, #20]
 80130d0:	781b      	ldrb	r3, [r3, #0]
 80130d2:	2b3a      	cmp	r3, #58	; 0x3a
 80130d4:	d11c      	bne.n	8013110 <get_ldnumber+0x76>
			tp = *path;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	1c5a      	adds	r2, r3, #1
 80130e0:	60fa      	str	r2, [r7, #12]
 80130e2:	781b      	ldrb	r3, [r3, #0]
 80130e4:	3b30      	subs	r3, #48	; 0x30
 80130e6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80130e8:	68bb      	ldr	r3, [r7, #8]
 80130ea:	2b09      	cmp	r3, #9
 80130ec:	d80e      	bhi.n	801310c <get_ldnumber+0x72>
 80130ee:	68fa      	ldr	r2, [r7, #12]
 80130f0:	697b      	ldr	r3, [r7, #20]
 80130f2:	429a      	cmp	r2, r3
 80130f4:	d10a      	bne.n	801310c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80130f6:	68bb      	ldr	r3, [r7, #8]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d107      	bne.n	801310c <get_ldnumber+0x72>
					vol = (int)i;
 80130fc:	68bb      	ldr	r3, [r7, #8]
 80130fe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013100:	697b      	ldr	r3, [r7, #20]
 8013102:	3301      	adds	r3, #1
 8013104:	617b      	str	r3, [r7, #20]
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	697a      	ldr	r2, [r7, #20]
 801310a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801310c:	693b      	ldr	r3, [r7, #16]
 801310e:	e002      	b.n	8013116 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013110:	2300      	movs	r3, #0
 8013112:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013114:	693b      	ldr	r3, [r7, #16]
}
 8013116:	4618      	mov	r0, r3
 8013118:	371c      	adds	r7, #28
 801311a:	46bd      	mov	sp, r7
 801311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013120:	4770      	bx	lr
	...

08013124 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013124:	b580      	push	{r7, lr}
 8013126:	b082      	sub	sp, #8
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
 801312c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	2200      	movs	r2, #0
 8013132:	70da      	strb	r2, [r3, #3]
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	f04f 32ff 	mov.w	r2, #4294967295
 801313a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801313c:	6839      	ldr	r1, [r7, #0]
 801313e:	6878      	ldr	r0, [r7, #4]
 8013140:	f7ff f81c 	bl	801217c <move_window>
 8013144:	4603      	mov	r3, r0
 8013146:	2b00      	cmp	r3, #0
 8013148:	d001      	beq.n	801314e <check_fs+0x2a>
 801314a:	2304      	movs	r3, #4
 801314c:	e038      	b.n	80131c0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	3334      	adds	r3, #52	; 0x34
 8013152:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013156:	4618      	mov	r0, r3
 8013158:	f7fe fd2e 	bl	8011bb8 <ld_word>
 801315c:	4603      	mov	r3, r0
 801315e:	461a      	mov	r2, r3
 8013160:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013164:	429a      	cmp	r2, r3
 8013166:	d001      	beq.n	801316c <check_fs+0x48>
 8013168:	2303      	movs	r3, #3
 801316a:	e029      	b.n	80131c0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013172:	2be9      	cmp	r3, #233	; 0xe9
 8013174:	d009      	beq.n	801318a <check_fs+0x66>
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801317c:	2beb      	cmp	r3, #235	; 0xeb
 801317e:	d11e      	bne.n	80131be <check_fs+0x9a>
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8013186:	2b90      	cmp	r3, #144	; 0x90
 8013188:	d119      	bne.n	80131be <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	3334      	adds	r3, #52	; 0x34
 801318e:	3336      	adds	r3, #54	; 0x36
 8013190:	4618      	mov	r0, r3
 8013192:	f7fe fd29 	bl	8011be8 <ld_dword>
 8013196:	4603      	mov	r3, r0
 8013198:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801319c:	4a0a      	ldr	r2, [pc, #40]	; (80131c8 <check_fs+0xa4>)
 801319e:	4293      	cmp	r3, r2
 80131a0:	d101      	bne.n	80131a6 <check_fs+0x82>
 80131a2:	2300      	movs	r3, #0
 80131a4:	e00c      	b.n	80131c0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	3334      	adds	r3, #52	; 0x34
 80131aa:	3352      	adds	r3, #82	; 0x52
 80131ac:	4618      	mov	r0, r3
 80131ae:	f7fe fd1b 	bl	8011be8 <ld_dword>
 80131b2:	4603      	mov	r3, r0
 80131b4:	4a05      	ldr	r2, [pc, #20]	; (80131cc <check_fs+0xa8>)
 80131b6:	4293      	cmp	r3, r2
 80131b8:	d101      	bne.n	80131be <check_fs+0x9a>
 80131ba:	2300      	movs	r3, #0
 80131bc:	e000      	b.n	80131c0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80131be:	2302      	movs	r3, #2
}
 80131c0:	4618      	mov	r0, r3
 80131c2:	3708      	adds	r7, #8
 80131c4:	46bd      	mov	sp, r7
 80131c6:	bd80      	pop	{r7, pc}
 80131c8:	00544146 	.word	0x00544146
 80131cc:	33544146 	.word	0x33544146

080131d0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b096      	sub	sp, #88	; 0x58
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	60f8      	str	r0, [r7, #12]
 80131d8:	60b9      	str	r1, [r7, #8]
 80131da:	4613      	mov	r3, r2
 80131dc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80131de:	68bb      	ldr	r3, [r7, #8]
 80131e0:	2200      	movs	r2, #0
 80131e2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80131e4:	68f8      	ldr	r0, [r7, #12]
 80131e6:	f7ff ff58 	bl	801309a <get_ldnumber>
 80131ea:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80131ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	da01      	bge.n	80131f6 <find_volume+0x26>
 80131f2:	230b      	movs	r3, #11
 80131f4:	e236      	b.n	8013664 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80131f6:	4aac      	ldr	r2, [pc, #688]	; (80134a8 <find_volume+0x2d8>)
 80131f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80131fe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013202:	2b00      	cmp	r3, #0
 8013204:	d101      	bne.n	801320a <find_volume+0x3a>
 8013206:	230c      	movs	r3, #12
 8013208:	e22c      	b.n	8013664 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 801320a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801320c:	f7fe fdd4 	bl	8011db8 <lock_fs>
 8013210:	4603      	mov	r3, r0
 8013212:	2b00      	cmp	r3, #0
 8013214:	d101      	bne.n	801321a <find_volume+0x4a>
 8013216:	230f      	movs	r3, #15
 8013218:	e224      	b.n	8013664 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801321e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013220:	79fb      	ldrb	r3, [r7, #7]
 8013222:	f023 0301 	bic.w	r3, r3, #1
 8013226:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801322a:	781b      	ldrb	r3, [r3, #0]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d01a      	beq.n	8013266 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8013230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013232:	785b      	ldrb	r3, [r3, #1]
 8013234:	4618      	mov	r0, r3
 8013236:	f7fe fc21 	bl	8011a7c <disk_status>
 801323a:	4603      	mov	r3, r0
 801323c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013240:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013244:	f003 0301 	and.w	r3, r3, #1
 8013248:	2b00      	cmp	r3, #0
 801324a:	d10c      	bne.n	8013266 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801324c:	79fb      	ldrb	r3, [r7, #7]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d007      	beq.n	8013262 <find_volume+0x92>
 8013252:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013256:	f003 0304 	and.w	r3, r3, #4
 801325a:	2b00      	cmp	r3, #0
 801325c:	d001      	beq.n	8013262 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801325e:	230a      	movs	r3, #10
 8013260:	e200      	b.n	8013664 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8013262:	2300      	movs	r3, #0
 8013264:	e1fe      	b.n	8013664 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013268:	2200      	movs	r2, #0
 801326a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801326c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801326e:	b2da      	uxtb	r2, r3
 8013270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013272:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013276:	785b      	ldrb	r3, [r3, #1]
 8013278:	4618      	mov	r0, r3
 801327a:	f7fe fc19 	bl	8011ab0 <disk_initialize>
 801327e:	4603      	mov	r3, r0
 8013280:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013284:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013288:	f003 0301 	and.w	r3, r3, #1
 801328c:	2b00      	cmp	r3, #0
 801328e:	d001      	beq.n	8013294 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013290:	2303      	movs	r3, #3
 8013292:	e1e7      	b.n	8013664 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013294:	79fb      	ldrb	r3, [r7, #7]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d007      	beq.n	80132aa <find_volume+0xda>
 801329a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801329e:	f003 0304 	and.w	r3, r3, #4
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d001      	beq.n	80132aa <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80132a6:	230a      	movs	r3, #10
 80132a8:	e1dc      	b.n	8013664 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80132aa:	2300      	movs	r3, #0
 80132ac:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80132ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80132b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80132b2:	f7ff ff37 	bl	8013124 <check_fs>
 80132b6:	4603      	mov	r3, r0
 80132b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80132bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80132c0:	2b02      	cmp	r3, #2
 80132c2:	d14b      	bne.n	801335c <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80132c4:	2300      	movs	r3, #0
 80132c6:	643b      	str	r3, [r7, #64]	; 0x40
 80132c8:	e01f      	b.n	801330a <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80132ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132cc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80132d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132d2:	011b      	lsls	r3, r3, #4
 80132d4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80132d8:	4413      	add	r3, r2
 80132da:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80132dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132de:	3304      	adds	r3, #4
 80132e0:	781b      	ldrb	r3, [r3, #0]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d006      	beq.n	80132f4 <find_volume+0x124>
 80132e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132e8:	3308      	adds	r3, #8
 80132ea:	4618      	mov	r0, r3
 80132ec:	f7fe fc7c 	bl	8011be8 <ld_dword>
 80132f0:	4602      	mov	r2, r0
 80132f2:	e000      	b.n	80132f6 <find_volume+0x126>
 80132f4:	2200      	movs	r2, #0
 80132f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132f8:	009b      	lsls	r3, r3, #2
 80132fa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80132fe:	440b      	add	r3, r1
 8013300:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013306:	3301      	adds	r3, #1
 8013308:	643b      	str	r3, [r7, #64]	; 0x40
 801330a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801330c:	2b03      	cmp	r3, #3
 801330e:	d9dc      	bls.n	80132ca <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013310:	2300      	movs	r3, #0
 8013312:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8013314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013316:	2b00      	cmp	r3, #0
 8013318:	d002      	beq.n	8013320 <find_volume+0x150>
 801331a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801331c:	3b01      	subs	r3, #1
 801331e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013322:	009b      	lsls	r3, r3, #2
 8013324:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013328:	4413      	add	r3, r2
 801332a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801332e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013332:	2b00      	cmp	r3, #0
 8013334:	d005      	beq.n	8013342 <find_volume+0x172>
 8013336:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013338:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801333a:	f7ff fef3 	bl	8013124 <check_fs>
 801333e:	4603      	mov	r3, r0
 8013340:	e000      	b.n	8013344 <find_volume+0x174>
 8013342:	2303      	movs	r3, #3
 8013344:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013348:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801334c:	2b01      	cmp	r3, #1
 801334e:	d905      	bls.n	801335c <find_volume+0x18c>
 8013350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013352:	3301      	adds	r3, #1
 8013354:	643b      	str	r3, [r7, #64]	; 0x40
 8013356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013358:	2b03      	cmp	r3, #3
 801335a:	d9e1      	bls.n	8013320 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801335c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013360:	2b04      	cmp	r3, #4
 8013362:	d101      	bne.n	8013368 <find_volume+0x198>
 8013364:	2301      	movs	r3, #1
 8013366:	e17d      	b.n	8013664 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013368:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801336c:	2b01      	cmp	r3, #1
 801336e:	d901      	bls.n	8013374 <find_volume+0x1a4>
 8013370:	230d      	movs	r3, #13
 8013372:	e177      	b.n	8013664 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013376:	3334      	adds	r3, #52	; 0x34
 8013378:	330b      	adds	r3, #11
 801337a:	4618      	mov	r0, r3
 801337c:	f7fe fc1c 	bl	8011bb8 <ld_word>
 8013380:	4603      	mov	r3, r0
 8013382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013386:	d001      	beq.n	801338c <find_volume+0x1bc>
 8013388:	230d      	movs	r3, #13
 801338a:	e16b      	b.n	8013664 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801338c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801338e:	3334      	adds	r3, #52	; 0x34
 8013390:	3316      	adds	r3, #22
 8013392:	4618      	mov	r0, r3
 8013394:	f7fe fc10 	bl	8011bb8 <ld_word>
 8013398:	4603      	mov	r3, r0
 801339a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801339c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d106      	bne.n	80133b0 <find_volume+0x1e0>
 80133a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133a4:	3334      	adds	r3, #52	; 0x34
 80133a6:	3324      	adds	r3, #36	; 0x24
 80133a8:	4618      	mov	r0, r3
 80133aa:	f7fe fc1d 	bl	8011be8 <ld_dword>
 80133ae:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80133b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80133b4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80133b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133b8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80133bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133be:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80133c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133c2:	789b      	ldrb	r3, [r3, #2]
 80133c4:	2b01      	cmp	r3, #1
 80133c6:	d005      	beq.n	80133d4 <find_volume+0x204>
 80133c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133ca:	789b      	ldrb	r3, [r3, #2]
 80133cc:	2b02      	cmp	r3, #2
 80133ce:	d001      	beq.n	80133d4 <find_volume+0x204>
 80133d0:	230d      	movs	r3, #13
 80133d2:	e147      	b.n	8013664 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80133d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133d6:	789b      	ldrb	r3, [r3, #2]
 80133d8:	461a      	mov	r2, r3
 80133da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80133dc:	fb02 f303 	mul.w	r3, r2, r3
 80133e0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80133e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80133e8:	b29a      	uxth	r2, r3
 80133ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133ec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80133ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133f0:	895b      	ldrh	r3, [r3, #10]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d008      	beq.n	8013408 <find_volume+0x238>
 80133f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133f8:	895b      	ldrh	r3, [r3, #10]
 80133fa:	461a      	mov	r2, r3
 80133fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133fe:	895b      	ldrh	r3, [r3, #10]
 8013400:	3b01      	subs	r3, #1
 8013402:	4013      	ands	r3, r2
 8013404:	2b00      	cmp	r3, #0
 8013406:	d001      	beq.n	801340c <find_volume+0x23c>
 8013408:	230d      	movs	r3, #13
 801340a:	e12b      	b.n	8013664 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801340c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801340e:	3334      	adds	r3, #52	; 0x34
 8013410:	3311      	adds	r3, #17
 8013412:	4618      	mov	r0, r3
 8013414:	f7fe fbd0 	bl	8011bb8 <ld_word>
 8013418:	4603      	mov	r3, r0
 801341a:	461a      	mov	r2, r3
 801341c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801341e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013422:	891b      	ldrh	r3, [r3, #8]
 8013424:	f003 030f 	and.w	r3, r3, #15
 8013428:	b29b      	uxth	r3, r3
 801342a:	2b00      	cmp	r3, #0
 801342c:	d001      	beq.n	8013432 <find_volume+0x262>
 801342e:	230d      	movs	r3, #13
 8013430:	e118      	b.n	8013664 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013434:	3334      	adds	r3, #52	; 0x34
 8013436:	3313      	adds	r3, #19
 8013438:	4618      	mov	r0, r3
 801343a:	f7fe fbbd 	bl	8011bb8 <ld_word>
 801343e:	4603      	mov	r3, r0
 8013440:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013444:	2b00      	cmp	r3, #0
 8013446:	d106      	bne.n	8013456 <find_volume+0x286>
 8013448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801344a:	3334      	adds	r3, #52	; 0x34
 801344c:	3320      	adds	r3, #32
 801344e:	4618      	mov	r0, r3
 8013450:	f7fe fbca 	bl	8011be8 <ld_dword>
 8013454:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013458:	3334      	adds	r3, #52	; 0x34
 801345a:	330e      	adds	r3, #14
 801345c:	4618      	mov	r0, r3
 801345e:	f7fe fbab 	bl	8011bb8 <ld_word>
 8013462:	4603      	mov	r3, r0
 8013464:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013466:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013468:	2b00      	cmp	r3, #0
 801346a:	d101      	bne.n	8013470 <find_volume+0x2a0>
 801346c:	230d      	movs	r3, #13
 801346e:	e0f9      	b.n	8013664 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013470:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013474:	4413      	add	r3, r2
 8013476:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013478:	8912      	ldrh	r2, [r2, #8]
 801347a:	0912      	lsrs	r2, r2, #4
 801347c:	b292      	uxth	r2, r2
 801347e:	4413      	add	r3, r2
 8013480:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013486:	429a      	cmp	r2, r3
 8013488:	d201      	bcs.n	801348e <find_volume+0x2be>
 801348a:	230d      	movs	r3, #13
 801348c:	e0ea      	b.n	8013664 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801348e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013492:	1ad3      	subs	r3, r2, r3
 8013494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013496:	8952      	ldrh	r2, [r2, #10]
 8013498:	fbb3 f3f2 	udiv	r3, r3, r2
 801349c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d103      	bne.n	80134ac <find_volume+0x2dc>
 80134a4:	230d      	movs	r3, #13
 80134a6:	e0dd      	b.n	8013664 <find_volume+0x494>
 80134a8:	200006c8 	.word	0x200006c8
		fmt = FS_FAT32;
 80134ac:	2303      	movs	r3, #3
 80134ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80134b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134b4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80134b8:	4293      	cmp	r3, r2
 80134ba:	d802      	bhi.n	80134c2 <find_volume+0x2f2>
 80134bc:	2302      	movs	r3, #2
 80134be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80134c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134c4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80134c8:	4293      	cmp	r3, r2
 80134ca:	d802      	bhi.n	80134d2 <find_volume+0x302>
 80134cc:	2301      	movs	r3, #1
 80134ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80134d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d4:	1c9a      	adds	r2, r3, #2
 80134d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134d8:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80134da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80134de:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80134e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80134e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80134e4:	441a      	add	r2, r3
 80134e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134e8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80134ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80134ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134ee:	441a      	add	r2, r3
 80134f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134f2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80134f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80134f8:	2b03      	cmp	r3, #3
 80134fa:	d11e      	bne.n	801353a <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80134fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134fe:	3334      	adds	r3, #52	; 0x34
 8013500:	332a      	adds	r3, #42	; 0x2a
 8013502:	4618      	mov	r0, r3
 8013504:	f7fe fb58 	bl	8011bb8 <ld_word>
 8013508:	4603      	mov	r3, r0
 801350a:	2b00      	cmp	r3, #0
 801350c:	d001      	beq.n	8013512 <find_volume+0x342>
 801350e:	230d      	movs	r3, #13
 8013510:	e0a8      	b.n	8013664 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013514:	891b      	ldrh	r3, [r3, #8]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d001      	beq.n	801351e <find_volume+0x34e>
 801351a:	230d      	movs	r3, #13
 801351c:	e0a2      	b.n	8013664 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801351e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013520:	3334      	adds	r3, #52	; 0x34
 8013522:	332c      	adds	r3, #44	; 0x2c
 8013524:	4618      	mov	r0, r3
 8013526:	f7fe fb5f 	bl	8011be8 <ld_dword>
 801352a:	4602      	mov	r2, r0
 801352c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801352e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013532:	699b      	ldr	r3, [r3, #24]
 8013534:	009b      	lsls	r3, r3, #2
 8013536:	647b      	str	r3, [r7, #68]	; 0x44
 8013538:	e01f      	b.n	801357a <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801353a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801353c:	891b      	ldrh	r3, [r3, #8]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d101      	bne.n	8013546 <find_volume+0x376>
 8013542:	230d      	movs	r3, #13
 8013544:	e08e      	b.n	8013664 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801354a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801354c:	441a      	add	r2, r3
 801354e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013550:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013552:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013556:	2b02      	cmp	r3, #2
 8013558:	d103      	bne.n	8013562 <find_volume+0x392>
 801355a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801355c:	699b      	ldr	r3, [r3, #24]
 801355e:	005b      	lsls	r3, r3, #1
 8013560:	e00a      	b.n	8013578 <find_volume+0x3a8>
 8013562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013564:	699a      	ldr	r2, [r3, #24]
 8013566:	4613      	mov	r3, r2
 8013568:	005b      	lsls	r3, r3, #1
 801356a:	4413      	add	r3, r2
 801356c:	085a      	lsrs	r2, r3, #1
 801356e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013570:	699b      	ldr	r3, [r3, #24]
 8013572:	f003 0301 	and.w	r3, r3, #1
 8013576:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013578:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801357a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801357c:	69da      	ldr	r2, [r3, #28]
 801357e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013580:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8013584:	0a5b      	lsrs	r3, r3, #9
 8013586:	429a      	cmp	r2, r3
 8013588:	d201      	bcs.n	801358e <find_volume+0x3be>
 801358a:	230d      	movs	r3, #13
 801358c:	e06a      	b.n	8013664 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801358e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013590:	f04f 32ff 	mov.w	r2, #4294967295
 8013594:	615a      	str	r2, [r3, #20]
 8013596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013598:	695a      	ldr	r2, [r3, #20]
 801359a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801359c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135a0:	2280      	movs	r2, #128	; 0x80
 80135a2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80135a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80135a8:	2b03      	cmp	r3, #3
 80135aa:	d149      	bne.n	8013640 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80135ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135ae:	3334      	adds	r3, #52	; 0x34
 80135b0:	3330      	adds	r3, #48	; 0x30
 80135b2:	4618      	mov	r0, r3
 80135b4:	f7fe fb00 	bl	8011bb8 <ld_word>
 80135b8:	4603      	mov	r3, r0
 80135ba:	2b01      	cmp	r3, #1
 80135bc:	d140      	bne.n	8013640 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 80135be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135c0:	3301      	adds	r3, #1
 80135c2:	4619      	mov	r1, r3
 80135c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80135c6:	f7fe fdd9 	bl	801217c <move_window>
 80135ca:	4603      	mov	r3, r0
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d137      	bne.n	8013640 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 80135d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135d2:	2200      	movs	r2, #0
 80135d4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80135d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135d8:	3334      	adds	r3, #52	; 0x34
 80135da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80135de:	4618      	mov	r0, r3
 80135e0:	f7fe faea 	bl	8011bb8 <ld_word>
 80135e4:	4603      	mov	r3, r0
 80135e6:	461a      	mov	r2, r3
 80135e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80135ec:	429a      	cmp	r2, r3
 80135ee:	d127      	bne.n	8013640 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80135f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135f2:	3334      	adds	r3, #52	; 0x34
 80135f4:	4618      	mov	r0, r3
 80135f6:	f7fe faf7 	bl	8011be8 <ld_dword>
 80135fa:	4603      	mov	r3, r0
 80135fc:	4a1b      	ldr	r2, [pc, #108]	; (801366c <find_volume+0x49c>)
 80135fe:	4293      	cmp	r3, r2
 8013600:	d11e      	bne.n	8013640 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013604:	3334      	adds	r3, #52	; 0x34
 8013606:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801360a:	4618      	mov	r0, r3
 801360c:	f7fe faec 	bl	8011be8 <ld_dword>
 8013610:	4603      	mov	r3, r0
 8013612:	4a17      	ldr	r2, [pc, #92]	; (8013670 <find_volume+0x4a0>)
 8013614:	4293      	cmp	r3, r2
 8013616:	d113      	bne.n	8013640 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801361a:	3334      	adds	r3, #52	; 0x34
 801361c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013620:	4618      	mov	r0, r3
 8013622:	f7fe fae1 	bl	8011be8 <ld_dword>
 8013626:	4602      	mov	r2, r0
 8013628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801362a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801362c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801362e:	3334      	adds	r3, #52	; 0x34
 8013630:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013634:	4618      	mov	r0, r3
 8013636:	f7fe fad7 	bl	8011be8 <ld_dword>
 801363a:	4602      	mov	r2, r0
 801363c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801363e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013642:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013646:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013648:	4b0a      	ldr	r3, [pc, #40]	; (8013674 <find_volume+0x4a4>)
 801364a:	881b      	ldrh	r3, [r3, #0]
 801364c:	3301      	adds	r3, #1
 801364e:	b29a      	uxth	r2, r3
 8013650:	4b08      	ldr	r3, [pc, #32]	; (8013674 <find_volume+0x4a4>)
 8013652:	801a      	strh	r2, [r3, #0]
 8013654:	4b07      	ldr	r3, [pc, #28]	; (8013674 <find_volume+0x4a4>)
 8013656:	881a      	ldrh	r2, [r3, #0]
 8013658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801365a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801365c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801365e:	f7fe fd25 	bl	80120ac <clear_lock>
#endif
	return FR_OK;
 8013662:	2300      	movs	r3, #0
}
 8013664:	4618      	mov	r0, r3
 8013666:	3758      	adds	r7, #88	; 0x58
 8013668:	46bd      	mov	sp, r7
 801366a:	bd80      	pop	{r7, pc}
 801366c:	41615252 	.word	0x41615252
 8013670:	61417272 	.word	0x61417272
 8013674:	200006cc 	.word	0x200006cc

08013678 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013678:	b580      	push	{r7, lr}
 801367a:	b084      	sub	sp, #16
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
 8013680:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013682:	2309      	movs	r3, #9
 8013684:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d02e      	beq.n	80136ea <validate+0x72>
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d02a      	beq.n	80136ea <validate+0x72>
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	781b      	ldrb	r3, [r3, #0]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d025      	beq.n	80136ea <validate+0x72>
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	889a      	ldrh	r2, [r3, #4]
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	88db      	ldrh	r3, [r3, #6]
 80136a8:	429a      	cmp	r2, r3
 80136aa:	d11e      	bne.n	80136ea <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	4618      	mov	r0, r3
 80136b2:	f7fe fb81 	bl	8011db8 <lock_fs>
 80136b6:	4603      	mov	r3, r0
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d014      	beq.n	80136e6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	785b      	ldrb	r3, [r3, #1]
 80136c2:	4618      	mov	r0, r3
 80136c4:	f7fe f9da 	bl	8011a7c <disk_status>
 80136c8:	4603      	mov	r3, r0
 80136ca:	f003 0301 	and.w	r3, r3, #1
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d102      	bne.n	80136d8 <validate+0x60>
				res = FR_OK;
 80136d2:	2300      	movs	r3, #0
 80136d4:	73fb      	strb	r3, [r7, #15]
 80136d6:	e008      	b.n	80136ea <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	2100      	movs	r1, #0
 80136de:	4618      	mov	r0, r3
 80136e0:	f7fe fb80 	bl	8011de4 <unlock_fs>
 80136e4:	e001      	b.n	80136ea <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80136e6:	230f      	movs	r3, #15
 80136e8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80136ea:	7bfb      	ldrb	r3, [r7, #15]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d102      	bne.n	80136f6 <validate+0x7e>
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	e000      	b.n	80136f8 <validate+0x80>
 80136f6:	2300      	movs	r3, #0
 80136f8:	683a      	ldr	r2, [r7, #0]
 80136fa:	6013      	str	r3, [r2, #0]
	return res;
 80136fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80136fe:	4618      	mov	r0, r3
 8013700:	3710      	adds	r7, #16
 8013702:	46bd      	mov	sp, r7
 8013704:	bd80      	pop	{r7, pc}
	...

08013708 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013708:	b580      	push	{r7, lr}
 801370a:	b088      	sub	sp, #32
 801370c:	af00      	add	r7, sp, #0
 801370e:	60f8      	str	r0, [r7, #12]
 8013710:	60b9      	str	r1, [r7, #8]
 8013712:	4613      	mov	r3, r2
 8013714:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013716:	68bb      	ldr	r3, [r7, #8]
 8013718:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801371a:	f107 0310 	add.w	r3, r7, #16
 801371e:	4618      	mov	r0, r3
 8013720:	f7ff fcbb 	bl	801309a <get_ldnumber>
 8013724:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013726:	69fb      	ldr	r3, [r7, #28]
 8013728:	2b00      	cmp	r3, #0
 801372a:	da01      	bge.n	8013730 <f_mount+0x28>
 801372c:	230b      	movs	r3, #11
 801372e:	e048      	b.n	80137c2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013730:	4a26      	ldr	r2, [pc, #152]	; (80137cc <f_mount+0xc4>)
 8013732:	69fb      	ldr	r3, [r7, #28]
 8013734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013738:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801373a:	69bb      	ldr	r3, [r7, #24]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d00f      	beq.n	8013760 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013740:	69b8      	ldr	r0, [r7, #24]
 8013742:	f7fe fcb3 	bl	80120ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8013746:	69bb      	ldr	r3, [r7, #24]
 8013748:	68db      	ldr	r3, [r3, #12]
 801374a:	4618      	mov	r0, r3
 801374c:	f001 f812 	bl	8014774 <ff_del_syncobj>
 8013750:	4603      	mov	r3, r0
 8013752:	2b00      	cmp	r3, #0
 8013754:	d101      	bne.n	801375a <f_mount+0x52>
 8013756:	2302      	movs	r3, #2
 8013758:	e033      	b.n	80137c2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801375a:	69bb      	ldr	r3, [r7, #24]
 801375c:	2200      	movs	r2, #0
 801375e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	2b00      	cmp	r3, #0
 8013764:	d00f      	beq.n	8013786 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	2200      	movs	r2, #0
 801376a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 801376c:	69fb      	ldr	r3, [r7, #28]
 801376e:	b2da      	uxtb	r2, r3
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	330c      	adds	r3, #12
 8013774:	4619      	mov	r1, r3
 8013776:	4610      	mov	r0, r2
 8013778:	f000 ffe1 	bl	801473e <ff_cre_syncobj>
 801377c:	4603      	mov	r3, r0
 801377e:	2b00      	cmp	r3, #0
 8013780:	d101      	bne.n	8013786 <f_mount+0x7e>
 8013782:	2302      	movs	r3, #2
 8013784:	e01d      	b.n	80137c2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013786:	68fa      	ldr	r2, [r7, #12]
 8013788:	4910      	ldr	r1, [pc, #64]	; (80137cc <f_mount+0xc4>)
 801378a:	69fb      	ldr	r3, [r7, #28]
 801378c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	2b00      	cmp	r3, #0
 8013794:	d002      	beq.n	801379c <f_mount+0x94>
 8013796:	79fb      	ldrb	r3, [r7, #7]
 8013798:	2b01      	cmp	r3, #1
 801379a:	d001      	beq.n	80137a0 <f_mount+0x98>
 801379c:	2300      	movs	r3, #0
 801379e:	e010      	b.n	80137c2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80137a0:	f107 010c 	add.w	r1, r7, #12
 80137a4:	f107 0308 	add.w	r3, r7, #8
 80137a8:	2200      	movs	r2, #0
 80137aa:	4618      	mov	r0, r3
 80137ac:	f7ff fd10 	bl	80131d0 <find_volume>
 80137b0:	4603      	mov	r3, r0
 80137b2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	7dfa      	ldrb	r2, [r7, #23]
 80137b8:	4611      	mov	r1, r2
 80137ba:	4618      	mov	r0, r3
 80137bc:	f7fe fb12 	bl	8011de4 <unlock_fs>
 80137c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80137c2:	4618      	mov	r0, r3
 80137c4:	3720      	adds	r7, #32
 80137c6:	46bd      	mov	sp, r7
 80137c8:	bd80      	pop	{r7, pc}
 80137ca:	bf00      	nop
 80137cc:	200006c8 	.word	0x200006c8

080137d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b098      	sub	sp, #96	; 0x60
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	60f8      	str	r0, [r7, #12]
 80137d8:	60b9      	str	r1, [r7, #8]
 80137da:	4613      	mov	r3, r2
 80137dc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d101      	bne.n	80137e8 <f_open+0x18>
 80137e4:	2309      	movs	r3, #9
 80137e6:	e1b4      	b.n	8013b52 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80137e8:	79fb      	ldrb	r3, [r7, #7]
 80137ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80137ee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80137f0:	79fa      	ldrb	r2, [r7, #7]
 80137f2:	f107 0110 	add.w	r1, r7, #16
 80137f6:	f107 0308 	add.w	r3, r7, #8
 80137fa:	4618      	mov	r0, r3
 80137fc:	f7ff fce8 	bl	80131d0 <find_volume>
 8013800:	4603      	mov	r3, r0
 8013802:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8013806:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801380a:	2b00      	cmp	r3, #0
 801380c:	f040 8191 	bne.w	8013b32 <f_open+0x362>
		dj.obj.fs = fs;
 8013810:	693b      	ldr	r3, [r7, #16]
 8013812:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013814:	68ba      	ldr	r2, [r7, #8]
 8013816:	f107 0314 	add.w	r3, r7, #20
 801381a:	4611      	mov	r1, r2
 801381c:	4618      	mov	r0, r3
 801381e:	f7ff fbcb 	bl	8012fb8 <follow_path>
 8013822:	4603      	mov	r3, r0
 8013824:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013828:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801382c:	2b00      	cmp	r3, #0
 801382e:	d11a      	bne.n	8013866 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013830:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013834:	b25b      	sxtb	r3, r3
 8013836:	2b00      	cmp	r3, #0
 8013838:	da03      	bge.n	8013842 <f_open+0x72>
				res = FR_INVALID_NAME;
 801383a:	2306      	movs	r3, #6
 801383c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013840:	e011      	b.n	8013866 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013842:	79fb      	ldrb	r3, [r7, #7]
 8013844:	f023 0301 	bic.w	r3, r3, #1
 8013848:	2b00      	cmp	r3, #0
 801384a:	bf14      	ite	ne
 801384c:	2301      	movne	r3, #1
 801384e:	2300      	moveq	r3, #0
 8013850:	b2db      	uxtb	r3, r3
 8013852:	461a      	mov	r2, r3
 8013854:	f107 0314 	add.w	r3, r7, #20
 8013858:	4611      	mov	r1, r2
 801385a:	4618      	mov	r0, r3
 801385c:	f7fe fade 	bl	8011e1c <chk_lock>
 8013860:	4603      	mov	r3, r0
 8013862:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013866:	79fb      	ldrb	r3, [r7, #7]
 8013868:	f003 031c 	and.w	r3, r3, #28
 801386c:	2b00      	cmp	r3, #0
 801386e:	d07f      	beq.n	8013970 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8013870:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013874:	2b00      	cmp	r3, #0
 8013876:	d017      	beq.n	80138a8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013878:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801387c:	2b04      	cmp	r3, #4
 801387e:	d10e      	bne.n	801389e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013880:	f7fe fb28 	bl	8011ed4 <enq_lock>
 8013884:	4603      	mov	r3, r0
 8013886:	2b00      	cmp	r3, #0
 8013888:	d006      	beq.n	8013898 <f_open+0xc8>
 801388a:	f107 0314 	add.w	r3, r7, #20
 801388e:	4618      	mov	r0, r3
 8013890:	f7ff fa6c 	bl	8012d6c <dir_register>
 8013894:	4603      	mov	r3, r0
 8013896:	e000      	b.n	801389a <f_open+0xca>
 8013898:	2312      	movs	r3, #18
 801389a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801389e:	79fb      	ldrb	r3, [r7, #7]
 80138a0:	f043 0308 	orr.w	r3, r3, #8
 80138a4:	71fb      	strb	r3, [r7, #7]
 80138a6:	e010      	b.n	80138ca <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80138a8:	7ebb      	ldrb	r3, [r7, #26]
 80138aa:	f003 0311 	and.w	r3, r3, #17
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d003      	beq.n	80138ba <f_open+0xea>
					res = FR_DENIED;
 80138b2:	2307      	movs	r3, #7
 80138b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80138b8:	e007      	b.n	80138ca <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80138ba:	79fb      	ldrb	r3, [r7, #7]
 80138bc:	f003 0304 	and.w	r3, r3, #4
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d002      	beq.n	80138ca <f_open+0xfa>
 80138c4:	2308      	movs	r3, #8
 80138c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80138ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d168      	bne.n	80139a4 <f_open+0x1d4>
 80138d2:	79fb      	ldrb	r3, [r7, #7]
 80138d4:	f003 0308 	and.w	r3, r3, #8
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d063      	beq.n	80139a4 <f_open+0x1d4>
				dw = GET_FATTIME();
 80138dc:	f7fc ffe6 	bl	80108ac <get_fattime>
 80138e0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80138e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138e4:	330e      	adds	r3, #14
 80138e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80138e8:	4618      	mov	r0, r3
 80138ea:	f7fe f9bb 	bl	8011c64 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80138ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138f0:	3316      	adds	r3, #22
 80138f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80138f4:	4618      	mov	r0, r3
 80138f6:	f7fe f9b5 	bl	8011c64 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80138fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138fc:	330b      	adds	r3, #11
 80138fe:	2220      	movs	r2, #32
 8013900:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013902:	693b      	ldr	r3, [r7, #16]
 8013904:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013906:	4611      	mov	r1, r2
 8013908:	4618      	mov	r0, r3
 801390a:	f7ff f93e 	bl	8012b8a <ld_clust>
 801390e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013910:	693b      	ldr	r3, [r7, #16]
 8013912:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013914:	2200      	movs	r2, #0
 8013916:	4618      	mov	r0, r3
 8013918:	f7ff f956 	bl	8012bc8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801391c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801391e:	331c      	adds	r3, #28
 8013920:	2100      	movs	r1, #0
 8013922:	4618      	mov	r0, r3
 8013924:	f7fe f99e 	bl	8011c64 <st_dword>
					fs->wflag = 1;
 8013928:	693b      	ldr	r3, [r7, #16]
 801392a:	2201      	movs	r2, #1
 801392c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801392e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013930:	2b00      	cmp	r3, #0
 8013932:	d037      	beq.n	80139a4 <f_open+0x1d4>
						dw = fs->winsect;
 8013934:	693b      	ldr	r3, [r7, #16]
 8013936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013938:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801393a:	f107 0314 	add.w	r3, r7, #20
 801393e:	2200      	movs	r2, #0
 8013940:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013942:	4618      	mov	r0, r3
 8013944:	f7fe fe69 	bl	801261a <remove_chain>
 8013948:	4603      	mov	r3, r0
 801394a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801394e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013952:	2b00      	cmp	r3, #0
 8013954:	d126      	bne.n	80139a4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801395a:	4618      	mov	r0, r3
 801395c:	f7fe fc0e 	bl	801217c <move_window>
 8013960:	4603      	mov	r3, r0
 8013962:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013966:	693b      	ldr	r3, [r7, #16]
 8013968:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801396a:	3a01      	subs	r2, #1
 801396c:	611a      	str	r2, [r3, #16]
 801396e:	e019      	b.n	80139a4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013970:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013974:	2b00      	cmp	r3, #0
 8013976:	d115      	bne.n	80139a4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013978:	7ebb      	ldrb	r3, [r7, #26]
 801397a:	f003 0310 	and.w	r3, r3, #16
 801397e:	2b00      	cmp	r3, #0
 8013980:	d003      	beq.n	801398a <f_open+0x1ba>
					res = FR_NO_FILE;
 8013982:	2304      	movs	r3, #4
 8013984:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013988:	e00c      	b.n	80139a4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801398a:	79fb      	ldrb	r3, [r7, #7]
 801398c:	f003 0302 	and.w	r3, r3, #2
 8013990:	2b00      	cmp	r3, #0
 8013992:	d007      	beq.n	80139a4 <f_open+0x1d4>
 8013994:	7ebb      	ldrb	r3, [r7, #26]
 8013996:	f003 0301 	and.w	r3, r3, #1
 801399a:	2b00      	cmp	r3, #0
 801399c:	d002      	beq.n	80139a4 <f_open+0x1d4>
						res = FR_DENIED;
 801399e:	2307      	movs	r3, #7
 80139a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80139a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d128      	bne.n	80139fe <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80139ac:	79fb      	ldrb	r3, [r7, #7]
 80139ae:	f003 0308 	and.w	r3, r3, #8
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d003      	beq.n	80139be <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80139b6:	79fb      	ldrb	r3, [r7, #7]
 80139b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139bc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80139be:	693b      	ldr	r3, [r7, #16]
 80139c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80139c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80139cc:	79fb      	ldrb	r3, [r7, #7]
 80139ce:	f023 0301 	bic.w	r3, r3, #1
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	bf14      	ite	ne
 80139d6:	2301      	movne	r3, #1
 80139d8:	2300      	moveq	r3, #0
 80139da:	b2db      	uxtb	r3, r3
 80139dc:	461a      	mov	r2, r3
 80139de:	f107 0314 	add.w	r3, r7, #20
 80139e2:	4611      	mov	r1, r2
 80139e4:	4618      	mov	r0, r3
 80139e6:	f7fe fa97 	bl	8011f18 <inc_lock>
 80139ea:	4602      	mov	r2, r0
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	691b      	ldr	r3, [r3, #16]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d102      	bne.n	80139fe <f_open+0x22e>
 80139f8:	2302      	movs	r3, #2
 80139fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80139fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	f040 8095 	bne.w	8013b32 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013a08:	693b      	ldr	r3, [r7, #16]
 8013a0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013a0c:	4611      	mov	r1, r2
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f7ff f8bb 	bl	8012b8a <ld_clust>
 8013a14:	4602      	mov	r2, r0
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a1c:	331c      	adds	r3, #28
 8013a1e:	4618      	mov	r0, r3
 8013a20:	f7fe f8e2 	bl	8011be8 <ld_dword>
 8013a24:	4602      	mov	r2, r0
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013a30:	693a      	ldr	r2, [r7, #16]
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013a36:	693b      	ldr	r3, [r7, #16]
 8013a38:	88da      	ldrh	r2, [r3, #6]
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	79fa      	ldrb	r2, [r7, #7]
 8013a42:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	2200      	movs	r2, #0
 8013a48:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	2200      	movs	r2, #0
 8013a4e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	2200      	movs	r2, #0
 8013a54:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	3330      	adds	r3, #48	; 0x30
 8013a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a5e:	2100      	movs	r1, #0
 8013a60:	4618      	mov	r0, r3
 8013a62:	f7fe f94c 	bl	8011cfe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013a66:	79fb      	ldrb	r3, [r7, #7]
 8013a68:	f003 0320 	and.w	r3, r3, #32
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d060      	beq.n	8013b32 <f_open+0x362>
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	68db      	ldr	r3, [r3, #12]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d05c      	beq.n	8013b32 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	68da      	ldr	r2, [r3, #12]
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013a80:	693b      	ldr	r3, [r7, #16]
 8013a82:	895b      	ldrh	r3, [r3, #10]
 8013a84:	025b      	lsls	r3, r3, #9
 8013a86:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	689b      	ldr	r3, [r3, #8]
 8013a8c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	68db      	ldr	r3, [r3, #12]
 8013a92:	657b      	str	r3, [r7, #84]	; 0x54
 8013a94:	e016      	b.n	8013ac4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	f7fe fc29 	bl	80122f2 <get_fat>
 8013aa0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013aa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013aa4:	2b01      	cmp	r3, #1
 8013aa6:	d802      	bhi.n	8013aae <f_open+0x2de>
 8013aa8:	2302      	movs	r3, #2
 8013aaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013aae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ab4:	d102      	bne.n	8013abc <f_open+0x2ec>
 8013ab6:	2301      	movs	r3, #1
 8013ab8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013abc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ac0:	1ad3      	subs	r3, r2, r3
 8013ac2:	657b      	str	r3, [r7, #84]	; 0x54
 8013ac4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d103      	bne.n	8013ad4 <f_open+0x304>
 8013acc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ad0:	429a      	cmp	r2, r3
 8013ad2:	d8e0      	bhi.n	8013a96 <f_open+0x2c6>
				}
				fp->clust = clst;
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013ad8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013ada:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d127      	bne.n	8013b32 <f_open+0x362>
 8013ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d022      	beq.n	8013b32 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013aec:	693b      	ldr	r3, [r7, #16]
 8013aee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013af0:	4618      	mov	r0, r3
 8013af2:	f7fe fbdf 	bl	80122b4 <clust2sect>
 8013af6:	6478      	str	r0, [r7, #68]	; 0x44
 8013af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d103      	bne.n	8013b06 <f_open+0x336>
						res = FR_INT_ERR;
 8013afe:	2302      	movs	r3, #2
 8013b00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013b04:	e015      	b.n	8013b32 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b08:	0a5a      	lsrs	r2, r3, #9
 8013b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b0c:	441a      	add	r2, r3
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013b12:	693b      	ldr	r3, [r7, #16]
 8013b14:	7858      	ldrb	r0, [r3, #1]
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	6a1a      	ldr	r2, [r3, #32]
 8013b20:	2301      	movs	r3, #1
 8013b22:	f7fd ffeb 	bl	8011afc <disk_read>
 8013b26:	4603      	mov	r3, r0
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d002      	beq.n	8013b32 <f_open+0x362>
 8013b2c:	2301      	movs	r3, #1
 8013b2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013b32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d002      	beq.n	8013b40 <f_open+0x370>
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013b40:	693b      	ldr	r3, [r7, #16]
 8013b42:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8013b46:	4611      	mov	r1, r2
 8013b48:	4618      	mov	r0, r3
 8013b4a:	f7fe f94b 	bl	8011de4 <unlock_fs>
 8013b4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8013b52:	4618      	mov	r0, r3
 8013b54:	3760      	adds	r7, #96	; 0x60
 8013b56:	46bd      	mov	sp, r7
 8013b58:	bd80      	pop	{r7, pc}

08013b5a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013b5a:	b580      	push	{r7, lr}
 8013b5c:	b08c      	sub	sp, #48	; 0x30
 8013b5e:	af00      	add	r7, sp, #0
 8013b60:	60f8      	str	r0, [r7, #12]
 8013b62:	60b9      	str	r1, [r7, #8]
 8013b64:	607a      	str	r2, [r7, #4]
 8013b66:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013b68:	68bb      	ldr	r3, [r7, #8]
 8013b6a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013b6c:	683b      	ldr	r3, [r7, #0]
 8013b6e:	2200      	movs	r2, #0
 8013b70:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	f107 0210 	add.w	r2, r7, #16
 8013b78:	4611      	mov	r1, r2
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f7ff fd7c 	bl	8013678 <validate>
 8013b80:	4603      	mov	r3, r0
 8013b82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013b86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d107      	bne.n	8013b9e <f_write+0x44>
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	7d5b      	ldrb	r3, [r3, #21]
 8013b92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013b96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d009      	beq.n	8013bb2 <f_write+0x58>
 8013b9e:	693b      	ldr	r3, [r7, #16]
 8013ba0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8013ba4:	4611      	mov	r1, r2
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	f7fe f91c 	bl	8011de4 <unlock_fs>
 8013bac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013bb0:	e173      	b.n	8013e9a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	7d1b      	ldrb	r3, [r3, #20]
 8013bb6:	f003 0302 	and.w	r3, r3, #2
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d106      	bne.n	8013bcc <f_write+0x72>
 8013bbe:	693b      	ldr	r3, [r7, #16]
 8013bc0:	2107      	movs	r1, #7
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f7fe f90e 	bl	8011de4 <unlock_fs>
 8013bc8:	2307      	movs	r3, #7
 8013bca:	e166      	b.n	8013e9a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	699a      	ldr	r2, [r3, #24]
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	441a      	add	r2, r3
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	699b      	ldr	r3, [r3, #24]
 8013bd8:	429a      	cmp	r2, r3
 8013bda:	f080 814b 	bcs.w	8013e74 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	699b      	ldr	r3, [r3, #24]
 8013be2:	43db      	mvns	r3, r3
 8013be4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013be6:	e145      	b.n	8013e74 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	699b      	ldr	r3, [r3, #24]
 8013bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	f040 8101 	bne.w	8013df8 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	699b      	ldr	r3, [r3, #24]
 8013bfa:	0a5b      	lsrs	r3, r3, #9
 8013bfc:	693a      	ldr	r2, [r7, #16]
 8013bfe:	8952      	ldrh	r2, [r2, #10]
 8013c00:	3a01      	subs	r2, #1
 8013c02:	4013      	ands	r3, r2
 8013c04:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013c06:	69bb      	ldr	r3, [r7, #24]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d14d      	bne.n	8013ca8 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	699b      	ldr	r3, [r3, #24]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d10c      	bne.n	8013c2e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	689b      	ldr	r3, [r3, #8]
 8013c18:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d11a      	bne.n	8013c56 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	2100      	movs	r1, #0
 8013c24:	4618      	mov	r0, r3
 8013c26:	f7fe fd5d 	bl	80126e4 <create_chain>
 8013c2a:	62b8      	str	r0, [r7, #40]	; 0x28
 8013c2c:	e013      	b.n	8013c56 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d007      	beq.n	8013c46 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	699b      	ldr	r3, [r3, #24]
 8013c3a:	4619      	mov	r1, r3
 8013c3c:	68f8      	ldr	r0, [r7, #12]
 8013c3e:	f7fe fde9 	bl	8012814 <clmt_clust>
 8013c42:	62b8      	str	r0, [r7, #40]	; 0x28
 8013c44:	e007      	b.n	8013c56 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013c46:	68fa      	ldr	r2, [r7, #12]
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	69db      	ldr	r3, [r3, #28]
 8013c4c:	4619      	mov	r1, r3
 8013c4e:	4610      	mov	r0, r2
 8013c50:	f7fe fd48 	bl	80126e4 <create_chain>
 8013c54:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	f000 8110 	beq.w	8013e7e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c60:	2b01      	cmp	r3, #1
 8013c62:	d109      	bne.n	8013c78 <f_write+0x11e>
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	2202      	movs	r2, #2
 8013c68:	755a      	strb	r2, [r3, #21]
 8013c6a:	693b      	ldr	r3, [r7, #16]
 8013c6c:	2102      	movs	r1, #2
 8013c6e:	4618      	mov	r0, r3
 8013c70:	f7fe f8b8 	bl	8011de4 <unlock_fs>
 8013c74:	2302      	movs	r3, #2
 8013c76:	e110      	b.n	8013e9a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c7e:	d109      	bne.n	8013c94 <f_write+0x13a>
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	2201      	movs	r2, #1
 8013c84:	755a      	strb	r2, [r3, #21]
 8013c86:	693b      	ldr	r3, [r7, #16]
 8013c88:	2101      	movs	r1, #1
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	f7fe f8aa 	bl	8011de4 <unlock_fs>
 8013c90:	2301      	movs	r3, #1
 8013c92:	e102      	b.n	8013e9a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013c98:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	689b      	ldr	r3, [r3, #8]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d102      	bne.n	8013ca8 <f_write+0x14e>
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ca6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	7d1b      	ldrb	r3, [r3, #20]
 8013cac:	b25b      	sxtb	r3, r3
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	da1d      	bge.n	8013cee <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013cb2:	693b      	ldr	r3, [r7, #16]
 8013cb4:	7858      	ldrb	r0, [r3, #1]
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	6a1a      	ldr	r2, [r3, #32]
 8013cc0:	2301      	movs	r3, #1
 8013cc2:	f7fd ff3b 	bl	8011b3c <disk_write>
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d009      	beq.n	8013ce0 <f_write+0x186>
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	2201      	movs	r2, #1
 8013cd0:	755a      	strb	r2, [r3, #21]
 8013cd2:	693b      	ldr	r3, [r7, #16]
 8013cd4:	2101      	movs	r1, #1
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	f7fe f884 	bl	8011de4 <unlock_fs>
 8013cdc:	2301      	movs	r3, #1
 8013cde:	e0dc      	b.n	8013e9a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	7d1b      	ldrb	r3, [r3, #20]
 8013ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013ce8:	b2da      	uxtb	r2, r3
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013cee:	693a      	ldr	r2, [r7, #16]
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	69db      	ldr	r3, [r3, #28]
 8013cf4:	4619      	mov	r1, r3
 8013cf6:	4610      	mov	r0, r2
 8013cf8:	f7fe fadc 	bl	80122b4 <clust2sect>
 8013cfc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013cfe:	697b      	ldr	r3, [r7, #20]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d109      	bne.n	8013d18 <f_write+0x1be>
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	2202      	movs	r2, #2
 8013d08:	755a      	strb	r2, [r3, #21]
 8013d0a:	693b      	ldr	r3, [r7, #16]
 8013d0c:	2102      	movs	r1, #2
 8013d0e:	4618      	mov	r0, r3
 8013d10:	f7fe f868 	bl	8011de4 <unlock_fs>
 8013d14:	2302      	movs	r3, #2
 8013d16:	e0c0      	b.n	8013e9a <f_write+0x340>
			sect += csect;
 8013d18:	697a      	ldr	r2, [r7, #20]
 8013d1a:	69bb      	ldr	r3, [r7, #24]
 8013d1c:	4413      	add	r3, r2
 8013d1e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	0a5b      	lsrs	r3, r3, #9
 8013d24:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013d26:	6a3b      	ldr	r3, [r7, #32]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d041      	beq.n	8013db0 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013d2c:	69ba      	ldr	r2, [r7, #24]
 8013d2e:	6a3b      	ldr	r3, [r7, #32]
 8013d30:	4413      	add	r3, r2
 8013d32:	693a      	ldr	r2, [r7, #16]
 8013d34:	8952      	ldrh	r2, [r2, #10]
 8013d36:	4293      	cmp	r3, r2
 8013d38:	d905      	bls.n	8013d46 <f_write+0x1ec>
					cc = fs->csize - csect;
 8013d3a:	693b      	ldr	r3, [r7, #16]
 8013d3c:	895b      	ldrh	r3, [r3, #10]
 8013d3e:	461a      	mov	r2, r3
 8013d40:	69bb      	ldr	r3, [r7, #24]
 8013d42:	1ad3      	subs	r3, r2, r3
 8013d44:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013d46:	693b      	ldr	r3, [r7, #16]
 8013d48:	7858      	ldrb	r0, [r3, #1]
 8013d4a:	6a3b      	ldr	r3, [r7, #32]
 8013d4c:	697a      	ldr	r2, [r7, #20]
 8013d4e:	69f9      	ldr	r1, [r7, #28]
 8013d50:	f7fd fef4 	bl	8011b3c <disk_write>
 8013d54:	4603      	mov	r3, r0
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d009      	beq.n	8013d6e <f_write+0x214>
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	2201      	movs	r2, #1
 8013d5e:	755a      	strb	r2, [r3, #21]
 8013d60:	693b      	ldr	r3, [r7, #16]
 8013d62:	2101      	movs	r1, #1
 8013d64:	4618      	mov	r0, r3
 8013d66:	f7fe f83d 	bl	8011de4 <unlock_fs>
 8013d6a:	2301      	movs	r3, #1
 8013d6c:	e095      	b.n	8013e9a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	6a1a      	ldr	r2, [r3, #32]
 8013d72:	697b      	ldr	r3, [r7, #20]
 8013d74:	1ad3      	subs	r3, r2, r3
 8013d76:	6a3a      	ldr	r2, [r7, #32]
 8013d78:	429a      	cmp	r2, r3
 8013d7a:	d915      	bls.n	8013da8 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	6a1a      	ldr	r2, [r3, #32]
 8013d86:	697b      	ldr	r3, [r7, #20]
 8013d88:	1ad3      	subs	r3, r2, r3
 8013d8a:	025b      	lsls	r3, r3, #9
 8013d8c:	69fa      	ldr	r2, [r7, #28]
 8013d8e:	4413      	add	r3, r2
 8013d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013d94:	4619      	mov	r1, r3
 8013d96:	f7fd ff91 	bl	8011cbc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	7d1b      	ldrb	r3, [r3, #20]
 8013d9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013da2:	b2da      	uxtb	r2, r3
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013da8:	6a3b      	ldr	r3, [r7, #32]
 8013daa:	025b      	lsls	r3, r3, #9
 8013dac:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013dae:	e044      	b.n	8013e3a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	6a1b      	ldr	r3, [r3, #32]
 8013db4:	697a      	ldr	r2, [r7, #20]
 8013db6:	429a      	cmp	r2, r3
 8013db8:	d01b      	beq.n	8013df2 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	699a      	ldr	r2, [r3, #24]
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013dc2:	429a      	cmp	r2, r3
 8013dc4:	d215      	bcs.n	8013df2 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013dc6:	693b      	ldr	r3, [r7, #16]
 8013dc8:	7858      	ldrb	r0, [r3, #1]
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013dd0:	2301      	movs	r3, #1
 8013dd2:	697a      	ldr	r2, [r7, #20]
 8013dd4:	f7fd fe92 	bl	8011afc <disk_read>
 8013dd8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d009      	beq.n	8013df2 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	2201      	movs	r2, #1
 8013de2:	755a      	strb	r2, [r3, #21]
 8013de4:	693b      	ldr	r3, [r7, #16]
 8013de6:	2101      	movs	r1, #1
 8013de8:	4618      	mov	r0, r3
 8013dea:	f7fd fffb 	bl	8011de4 <unlock_fs>
 8013dee:	2301      	movs	r3, #1
 8013df0:	e053      	b.n	8013e9a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	697a      	ldr	r2, [r7, #20]
 8013df6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	699b      	ldr	r3, [r3, #24]
 8013dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e00:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8013e04:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	429a      	cmp	r2, r3
 8013e0c:	d901      	bls.n	8013e12 <f_write+0x2b8>
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	699b      	ldr	r3, [r3, #24]
 8013e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e20:	4413      	add	r3, r2
 8013e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e24:	69f9      	ldr	r1, [r7, #28]
 8013e26:	4618      	mov	r0, r3
 8013e28:	f7fd ff48 	bl	8011cbc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	7d1b      	ldrb	r3, [r3, #20]
 8013e30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013e34:	b2da      	uxtb	r2, r3
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013e3a:	69fa      	ldr	r2, [r7, #28]
 8013e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e3e:	4413      	add	r3, r2
 8013e40:	61fb      	str	r3, [r7, #28]
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	699a      	ldr	r2, [r3, #24]
 8013e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e48:	441a      	add	r2, r3
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	619a      	str	r2, [r3, #24]
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	68da      	ldr	r2, [r3, #12]
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	699b      	ldr	r3, [r3, #24]
 8013e56:	429a      	cmp	r2, r3
 8013e58:	bf38      	it	cc
 8013e5a:	461a      	movcc	r2, r3
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	60da      	str	r2, [r3, #12]
 8013e60:	683b      	ldr	r3, [r7, #0]
 8013e62:	681a      	ldr	r2, [r3, #0]
 8013e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e66:	441a      	add	r2, r3
 8013e68:	683b      	ldr	r3, [r7, #0]
 8013e6a:	601a      	str	r2, [r3, #0]
 8013e6c:	687a      	ldr	r2, [r7, #4]
 8013e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e70:	1ad3      	subs	r3, r2, r3
 8013e72:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	f47f aeb6 	bne.w	8013be8 <f_write+0x8e>
 8013e7c:	e000      	b.n	8013e80 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013e7e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	7d1b      	ldrb	r3, [r3, #20]
 8013e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e88:	b2da      	uxtb	r2, r3
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013e8e:	693b      	ldr	r3, [r7, #16]
 8013e90:	2100      	movs	r1, #0
 8013e92:	4618      	mov	r0, r3
 8013e94:	f7fd ffa6 	bl	8011de4 <unlock_fs>
 8013e98:	2300      	movs	r3, #0
}
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	3730      	adds	r7, #48	; 0x30
 8013e9e:	46bd      	mov	sp, r7
 8013ea0:	bd80      	pop	{r7, pc}

08013ea2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013ea2:	b580      	push	{r7, lr}
 8013ea4:	b086      	sub	sp, #24
 8013ea6:	af00      	add	r7, sp, #0
 8013ea8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	f107 0208 	add.w	r2, r7, #8
 8013eb0:	4611      	mov	r1, r2
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	f7ff fbe0 	bl	8013678 <validate>
 8013eb8:	4603      	mov	r3, r0
 8013eba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013ebc:	7dfb      	ldrb	r3, [r7, #23]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d16d      	bne.n	8013f9e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	7d1b      	ldrb	r3, [r3, #20]
 8013ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d067      	beq.n	8013f9e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	7d1b      	ldrb	r3, [r3, #20]
 8013ed2:	b25b      	sxtb	r3, r3
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	da1a      	bge.n	8013f0e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013ed8:	68bb      	ldr	r3, [r7, #8]
 8013eda:	7858      	ldrb	r0, [r3, #1]
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	6a1a      	ldr	r2, [r3, #32]
 8013ee6:	2301      	movs	r3, #1
 8013ee8:	f7fd fe28 	bl	8011b3c <disk_write>
 8013eec:	4603      	mov	r3, r0
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d006      	beq.n	8013f00 <f_sync+0x5e>
 8013ef2:	68bb      	ldr	r3, [r7, #8]
 8013ef4:	2101      	movs	r1, #1
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	f7fd ff74 	bl	8011de4 <unlock_fs>
 8013efc:	2301      	movs	r3, #1
 8013efe:	e055      	b.n	8013fac <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	7d1b      	ldrb	r3, [r3, #20]
 8013f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013f08:	b2da      	uxtb	r2, r3
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013f0e:	f7fc fccd 	bl	80108ac <get_fattime>
 8013f12:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013f14:	68ba      	ldr	r2, [r7, #8]
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f1a:	4619      	mov	r1, r3
 8013f1c:	4610      	mov	r0, r2
 8013f1e:	f7fe f92d 	bl	801217c <move_window>
 8013f22:	4603      	mov	r3, r0
 8013f24:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013f26:	7dfb      	ldrb	r3, [r7, #23]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d138      	bne.n	8013f9e <f_sync+0xfc>
					dir = fp->dir_ptr;
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f30:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	330b      	adds	r3, #11
 8013f36:	781a      	ldrb	r2, [r3, #0]
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	330b      	adds	r3, #11
 8013f3c:	f042 0220 	orr.w	r2, r2, #32
 8013f40:	b2d2      	uxtb	r2, r2
 8013f42:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	6818      	ldr	r0, [r3, #0]
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	689b      	ldr	r3, [r3, #8]
 8013f4c:	461a      	mov	r2, r3
 8013f4e:	68f9      	ldr	r1, [r7, #12]
 8013f50:	f7fe fe3a 	bl	8012bc8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	f103 021c 	add.w	r2, r3, #28
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	68db      	ldr	r3, [r3, #12]
 8013f5e:	4619      	mov	r1, r3
 8013f60:	4610      	mov	r0, r2
 8013f62:	f7fd fe7f 	bl	8011c64 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	3316      	adds	r3, #22
 8013f6a:	6939      	ldr	r1, [r7, #16]
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	f7fd fe79 	bl	8011c64 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	3312      	adds	r3, #18
 8013f76:	2100      	movs	r1, #0
 8013f78:	4618      	mov	r0, r3
 8013f7a:	f7fd fe58 	bl	8011c2e <st_word>
					fs->wflag = 1;
 8013f7e:	68bb      	ldr	r3, [r7, #8]
 8013f80:	2201      	movs	r2, #1
 8013f82:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013f84:	68bb      	ldr	r3, [r7, #8]
 8013f86:	4618      	mov	r0, r3
 8013f88:	f7fe f926 	bl	80121d8 <sync_fs>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	7d1b      	ldrb	r3, [r3, #20]
 8013f94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013f98:	b2da      	uxtb	r2, r3
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013f9e:	68bb      	ldr	r3, [r7, #8]
 8013fa0:	7dfa      	ldrb	r2, [r7, #23]
 8013fa2:	4611      	mov	r1, r2
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f7fd ff1d 	bl	8011de4 <unlock_fs>
 8013faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fac:	4618      	mov	r0, r3
 8013fae:	3718      	adds	r7, #24
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	bd80      	pop	{r7, pc}

08013fb4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b084      	sub	sp, #16
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013fbc:	6878      	ldr	r0, [r7, #4]
 8013fbe:	f7ff ff70 	bl	8013ea2 <f_sync>
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013fc6:	7bfb      	ldrb	r3, [r7, #15]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d11d      	bne.n	8014008 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	f107 0208 	add.w	r2, r7, #8
 8013fd2:	4611      	mov	r1, r2
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	f7ff fb4f 	bl	8013678 <validate>
 8013fda:	4603      	mov	r3, r0
 8013fdc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013fde:	7bfb      	ldrb	r3, [r7, #15]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d111      	bne.n	8014008 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	691b      	ldr	r3, [r3, #16]
 8013fe8:	4618      	mov	r0, r3
 8013fea:	f7fe f823 	bl	8012034 <dec_lock>
 8013fee:	4603      	mov	r3, r0
 8013ff0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013ff2:	7bfb      	ldrb	r3, [r7, #15]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d102      	bne.n	8013ffe <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	2100      	movs	r1, #0
 8014002:	4618      	mov	r0, r3
 8014004:	f7fd feee 	bl	8011de4 <unlock_fs>
#endif
		}
	}
	return res;
 8014008:	7bfb      	ldrb	r3, [r7, #15]
}
 801400a:	4618      	mov	r0, r3
 801400c:	3710      	adds	r7, #16
 801400e:	46bd      	mov	sp, r7
 8014010:	bd80      	pop	{r7, pc}

08014012 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8014012:	b580      	push	{r7, lr}
 8014014:	b090      	sub	sp, #64	; 0x40
 8014016:	af00      	add	r7, sp, #0
 8014018:	6078      	str	r0, [r7, #4]
 801401a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	f107 0208 	add.w	r2, r7, #8
 8014022:	4611      	mov	r1, r2
 8014024:	4618      	mov	r0, r3
 8014026:	f7ff fb27 	bl	8013678 <validate>
 801402a:	4603      	mov	r3, r0
 801402c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8014030:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014034:	2b00      	cmp	r3, #0
 8014036:	d103      	bne.n	8014040 <f_lseek+0x2e>
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	7d5b      	ldrb	r3, [r3, #21]
 801403c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8014040:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014044:	2b00      	cmp	r3, #0
 8014046:	d009      	beq.n	801405c <f_lseek+0x4a>
 8014048:	68bb      	ldr	r3, [r7, #8]
 801404a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801404e:	4611      	mov	r1, r2
 8014050:	4618      	mov	r0, r3
 8014052:	f7fd fec7 	bl	8011de4 <unlock_fs>
 8014056:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801405a:	e229      	b.n	80144b0 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014060:	2b00      	cmp	r3, #0
 8014062:	f000 80ea 	beq.w	801423a <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8014066:	683b      	ldr	r3, [r7, #0]
 8014068:	f1b3 3fff 	cmp.w	r3, #4294967295
 801406c:	d164      	bne.n	8014138 <f_lseek+0x126>
			tbl = fp->cltbl;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014072:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8014074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014076:	1d1a      	adds	r2, r3, #4
 8014078:	627a      	str	r2, [r7, #36]	; 0x24
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	617b      	str	r3, [r7, #20]
 801407e:	2302      	movs	r3, #2
 8014080:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	689b      	ldr	r3, [r3, #8]
 8014086:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8014088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801408a:	2b00      	cmp	r3, #0
 801408c:	d044      	beq.n	8014118 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801408e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014090:	613b      	str	r3, [r7, #16]
 8014092:	2300      	movs	r3, #0
 8014094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014098:	3302      	adds	r3, #2
 801409a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801409c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801409e:	60fb      	str	r3, [r7, #12]
 80140a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140a2:	3301      	adds	r3, #1
 80140a4:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80140aa:	4618      	mov	r0, r3
 80140ac:	f7fe f921 	bl	80122f2 <get_fat>
 80140b0:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80140b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140b4:	2b01      	cmp	r3, #1
 80140b6:	d809      	bhi.n	80140cc <f_lseek+0xba>
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	2202      	movs	r2, #2
 80140bc:	755a      	strb	r2, [r3, #21]
 80140be:	68bb      	ldr	r3, [r7, #8]
 80140c0:	2102      	movs	r1, #2
 80140c2:	4618      	mov	r0, r3
 80140c4:	f7fd fe8e 	bl	8011de4 <unlock_fs>
 80140c8:	2302      	movs	r3, #2
 80140ca:	e1f1      	b.n	80144b0 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80140cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140d2:	d109      	bne.n	80140e8 <f_lseek+0xd6>
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	2201      	movs	r2, #1
 80140d8:	755a      	strb	r2, [r3, #21]
 80140da:	68bb      	ldr	r3, [r7, #8]
 80140dc:	2101      	movs	r1, #1
 80140de:	4618      	mov	r0, r3
 80140e0:	f7fd fe80 	bl	8011de4 <unlock_fs>
 80140e4:	2301      	movs	r3, #1
 80140e6:	e1e3      	b.n	80144b0 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	3301      	adds	r3, #1
 80140ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80140ee:	429a      	cmp	r2, r3
 80140f0:	d0d4      	beq.n	801409c <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80140f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80140f4:	697b      	ldr	r3, [r7, #20]
 80140f6:	429a      	cmp	r2, r3
 80140f8:	d809      	bhi.n	801410e <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 80140fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140fc:	1d1a      	adds	r2, r3, #4
 80140fe:	627a      	str	r2, [r7, #36]	; 0x24
 8014100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014102:	601a      	str	r2, [r3, #0]
 8014104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014106:	1d1a      	adds	r2, r3, #4
 8014108:	627a      	str	r2, [r7, #36]	; 0x24
 801410a:	693a      	ldr	r2, [r7, #16]
 801410c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801410e:	68bb      	ldr	r3, [r7, #8]
 8014110:	699b      	ldr	r3, [r3, #24]
 8014112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014114:	429a      	cmp	r2, r3
 8014116:	d3ba      	bcc.n	801408e <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801411c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801411e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8014120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014122:	697b      	ldr	r3, [r7, #20]
 8014124:	429a      	cmp	r2, r3
 8014126:	d803      	bhi.n	8014130 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8014128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801412a:	2200      	movs	r2, #0
 801412c:	601a      	str	r2, [r3, #0]
 801412e:	e1b6      	b.n	801449e <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8014130:	2311      	movs	r3, #17
 8014132:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8014136:	e1b2      	b.n	801449e <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	68db      	ldr	r3, [r3, #12]
 801413c:	683a      	ldr	r2, [r7, #0]
 801413e:	429a      	cmp	r2, r3
 8014140:	d902      	bls.n	8014148 <f_lseek+0x136>
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	68db      	ldr	r3, [r3, #12]
 8014146:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	683a      	ldr	r2, [r7, #0]
 801414c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801414e:	683b      	ldr	r3, [r7, #0]
 8014150:	2b00      	cmp	r3, #0
 8014152:	f000 81a4 	beq.w	801449e <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8014156:	683b      	ldr	r3, [r7, #0]
 8014158:	3b01      	subs	r3, #1
 801415a:	4619      	mov	r1, r3
 801415c:	6878      	ldr	r0, [r7, #4]
 801415e:	f7fe fb59 	bl	8012814 <clmt_clust>
 8014162:	4602      	mov	r2, r0
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8014168:	68ba      	ldr	r2, [r7, #8]
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	69db      	ldr	r3, [r3, #28]
 801416e:	4619      	mov	r1, r3
 8014170:	4610      	mov	r0, r2
 8014172:	f7fe f89f 	bl	80122b4 <clust2sect>
 8014176:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8014178:	69bb      	ldr	r3, [r7, #24]
 801417a:	2b00      	cmp	r3, #0
 801417c:	d109      	bne.n	8014192 <f_lseek+0x180>
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	2202      	movs	r2, #2
 8014182:	755a      	strb	r2, [r3, #21]
 8014184:	68bb      	ldr	r3, [r7, #8]
 8014186:	2102      	movs	r1, #2
 8014188:	4618      	mov	r0, r3
 801418a:	f7fd fe2b 	bl	8011de4 <unlock_fs>
 801418e:	2302      	movs	r3, #2
 8014190:	e18e      	b.n	80144b0 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8014192:	683b      	ldr	r3, [r7, #0]
 8014194:	3b01      	subs	r3, #1
 8014196:	0a5b      	lsrs	r3, r3, #9
 8014198:	68ba      	ldr	r2, [r7, #8]
 801419a:	8952      	ldrh	r2, [r2, #10]
 801419c:	3a01      	subs	r2, #1
 801419e:	4013      	ands	r3, r2
 80141a0:	69ba      	ldr	r2, [r7, #24]
 80141a2:	4413      	add	r3, r2
 80141a4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	699b      	ldr	r3, [r3, #24]
 80141aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	f000 8175 	beq.w	801449e <f_lseek+0x48c>
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	6a1b      	ldr	r3, [r3, #32]
 80141b8:	69ba      	ldr	r2, [r7, #24]
 80141ba:	429a      	cmp	r2, r3
 80141bc:	f000 816f 	beq.w	801449e <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	7d1b      	ldrb	r3, [r3, #20]
 80141c4:	b25b      	sxtb	r3, r3
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	da1d      	bge.n	8014206 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80141ca:	68bb      	ldr	r3, [r7, #8]
 80141cc:	7858      	ldrb	r0, [r3, #1]
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	6a1a      	ldr	r2, [r3, #32]
 80141d8:	2301      	movs	r3, #1
 80141da:	f7fd fcaf 	bl	8011b3c <disk_write>
 80141de:	4603      	mov	r3, r0
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d009      	beq.n	80141f8 <f_lseek+0x1e6>
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	2201      	movs	r2, #1
 80141e8:	755a      	strb	r2, [r3, #21]
 80141ea:	68bb      	ldr	r3, [r7, #8]
 80141ec:	2101      	movs	r1, #1
 80141ee:	4618      	mov	r0, r3
 80141f0:	f7fd fdf8 	bl	8011de4 <unlock_fs>
 80141f4:	2301      	movs	r3, #1
 80141f6:	e15b      	b.n	80144b0 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	7d1b      	ldrb	r3, [r3, #20]
 80141fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014200:	b2da      	uxtb	r2, r3
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8014206:	68bb      	ldr	r3, [r7, #8]
 8014208:	7858      	ldrb	r0, [r3, #1]
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014210:	2301      	movs	r3, #1
 8014212:	69ba      	ldr	r2, [r7, #24]
 8014214:	f7fd fc72 	bl	8011afc <disk_read>
 8014218:	4603      	mov	r3, r0
 801421a:	2b00      	cmp	r3, #0
 801421c:	d009      	beq.n	8014232 <f_lseek+0x220>
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	2201      	movs	r2, #1
 8014222:	755a      	strb	r2, [r3, #21]
 8014224:	68bb      	ldr	r3, [r7, #8]
 8014226:	2101      	movs	r1, #1
 8014228:	4618      	mov	r0, r3
 801422a:	f7fd fddb 	bl	8011de4 <unlock_fs>
 801422e:	2301      	movs	r3, #1
 8014230:	e13e      	b.n	80144b0 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	69ba      	ldr	r2, [r7, #24]
 8014236:	621a      	str	r2, [r3, #32]
 8014238:	e131      	b.n	801449e <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	68db      	ldr	r3, [r3, #12]
 801423e:	683a      	ldr	r2, [r7, #0]
 8014240:	429a      	cmp	r2, r3
 8014242:	d908      	bls.n	8014256 <f_lseek+0x244>
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	7d1b      	ldrb	r3, [r3, #20]
 8014248:	f003 0302 	and.w	r3, r3, #2
 801424c:	2b00      	cmp	r3, #0
 801424e:	d102      	bne.n	8014256 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	68db      	ldr	r3, [r3, #12]
 8014254:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	699b      	ldr	r3, [r3, #24]
 801425a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801425c:	2300      	movs	r3, #0
 801425e:	637b      	str	r3, [r7, #52]	; 0x34
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014264:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8014266:	683b      	ldr	r3, [r7, #0]
 8014268:	2b00      	cmp	r3, #0
 801426a:	f000 80c0 	beq.w	80143ee <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801426e:	68bb      	ldr	r3, [r7, #8]
 8014270:	895b      	ldrh	r3, [r3, #10]
 8014272:	025b      	lsls	r3, r3, #9
 8014274:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014276:	6a3b      	ldr	r3, [r7, #32]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d01b      	beq.n	80142b4 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801427c:	683b      	ldr	r3, [r7, #0]
 801427e:	1e5a      	subs	r2, r3, #1
 8014280:	69fb      	ldr	r3, [r7, #28]
 8014282:	fbb2 f2f3 	udiv	r2, r2, r3
 8014286:	6a3b      	ldr	r3, [r7, #32]
 8014288:	1e59      	subs	r1, r3, #1
 801428a:	69fb      	ldr	r3, [r7, #28]
 801428c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8014290:	429a      	cmp	r2, r3
 8014292:	d30f      	bcc.n	80142b4 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8014294:	6a3b      	ldr	r3, [r7, #32]
 8014296:	1e5a      	subs	r2, r3, #1
 8014298:	69fb      	ldr	r3, [r7, #28]
 801429a:	425b      	negs	r3, r3
 801429c:	401a      	ands	r2, r3
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	699b      	ldr	r3, [r3, #24]
 80142a6:	683a      	ldr	r2, [r7, #0]
 80142a8:	1ad3      	subs	r3, r2, r3
 80142aa:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	69db      	ldr	r3, [r3, #28]
 80142b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80142b2:	e02c      	b.n	801430e <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	689b      	ldr	r3, [r3, #8]
 80142b8:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80142ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d123      	bne.n	8014308 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	2100      	movs	r1, #0
 80142c4:	4618      	mov	r0, r3
 80142c6:	f7fe fa0d 	bl	80126e4 <create_chain>
 80142ca:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80142cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142ce:	2b01      	cmp	r3, #1
 80142d0:	d109      	bne.n	80142e6 <f_lseek+0x2d4>
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	2202      	movs	r2, #2
 80142d6:	755a      	strb	r2, [r3, #21]
 80142d8:	68bb      	ldr	r3, [r7, #8]
 80142da:	2102      	movs	r1, #2
 80142dc:	4618      	mov	r0, r3
 80142de:	f7fd fd81 	bl	8011de4 <unlock_fs>
 80142e2:	2302      	movs	r3, #2
 80142e4:	e0e4      	b.n	80144b0 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80142e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142ec:	d109      	bne.n	8014302 <f_lseek+0x2f0>
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	2201      	movs	r2, #1
 80142f2:	755a      	strb	r2, [r3, #21]
 80142f4:	68bb      	ldr	r3, [r7, #8]
 80142f6:	2101      	movs	r1, #1
 80142f8:	4618      	mov	r0, r3
 80142fa:	f7fd fd73 	bl	8011de4 <unlock_fs>
 80142fe:	2301      	movs	r3, #1
 8014300:	e0d6      	b.n	80144b0 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014306:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801430c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801430e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014310:	2b00      	cmp	r3, #0
 8014312:	d06c      	beq.n	80143ee <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8014314:	e044      	b.n	80143a0 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8014316:	683a      	ldr	r2, [r7, #0]
 8014318:	69fb      	ldr	r3, [r7, #28]
 801431a:	1ad3      	subs	r3, r2, r3
 801431c:	603b      	str	r3, [r7, #0]
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	699a      	ldr	r2, [r3, #24]
 8014322:	69fb      	ldr	r3, [r7, #28]
 8014324:	441a      	add	r2, r3
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	7d1b      	ldrb	r3, [r3, #20]
 801432e:	f003 0302 	and.w	r3, r3, #2
 8014332:	2b00      	cmp	r3, #0
 8014334:	d00b      	beq.n	801434e <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801433a:	4618      	mov	r0, r3
 801433c:	f7fe f9d2 	bl	80126e4 <create_chain>
 8014340:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014344:	2b00      	cmp	r3, #0
 8014346:	d108      	bne.n	801435a <f_lseek+0x348>
							ofs = 0; break;
 8014348:	2300      	movs	r3, #0
 801434a:	603b      	str	r3, [r7, #0]
 801434c:	e02c      	b.n	80143a8 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014352:	4618      	mov	r0, r3
 8014354:	f7fd ffcd 	bl	80122f2 <get_fat>
 8014358:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801435a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801435c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014360:	d109      	bne.n	8014376 <f_lseek+0x364>
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	2201      	movs	r2, #1
 8014366:	755a      	strb	r2, [r3, #21]
 8014368:	68bb      	ldr	r3, [r7, #8]
 801436a:	2101      	movs	r1, #1
 801436c:	4618      	mov	r0, r3
 801436e:	f7fd fd39 	bl	8011de4 <unlock_fs>
 8014372:	2301      	movs	r3, #1
 8014374:	e09c      	b.n	80144b0 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8014376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014378:	2b01      	cmp	r3, #1
 801437a:	d904      	bls.n	8014386 <f_lseek+0x374>
 801437c:	68bb      	ldr	r3, [r7, #8]
 801437e:	699b      	ldr	r3, [r3, #24]
 8014380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014382:	429a      	cmp	r2, r3
 8014384:	d309      	bcc.n	801439a <f_lseek+0x388>
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	2202      	movs	r2, #2
 801438a:	755a      	strb	r2, [r3, #21]
 801438c:	68bb      	ldr	r3, [r7, #8]
 801438e:	2102      	movs	r1, #2
 8014390:	4618      	mov	r0, r3
 8014392:	f7fd fd27 	bl	8011de4 <unlock_fs>
 8014396:	2302      	movs	r3, #2
 8014398:	e08a      	b.n	80144b0 <f_lseek+0x49e>
					fp->clust = clst;
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801439e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80143a0:	683a      	ldr	r2, [r7, #0]
 80143a2:	69fb      	ldr	r3, [r7, #28]
 80143a4:	429a      	cmp	r2, r3
 80143a6:	d8b6      	bhi.n	8014316 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	699a      	ldr	r2, [r3, #24]
 80143ac:	683b      	ldr	r3, [r7, #0]
 80143ae:	441a      	add	r2, r3
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80143b4:	683b      	ldr	r3, [r7, #0]
 80143b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d017      	beq.n	80143ee <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80143be:	68bb      	ldr	r3, [r7, #8]
 80143c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80143c2:	4618      	mov	r0, r3
 80143c4:	f7fd ff76 	bl	80122b4 <clust2sect>
 80143c8:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80143ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d109      	bne.n	80143e4 <f_lseek+0x3d2>
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	2202      	movs	r2, #2
 80143d4:	755a      	strb	r2, [r3, #21]
 80143d6:	68bb      	ldr	r3, [r7, #8]
 80143d8:	2102      	movs	r1, #2
 80143da:	4618      	mov	r0, r3
 80143dc:	f7fd fd02 	bl	8011de4 <unlock_fs>
 80143e0:	2302      	movs	r3, #2
 80143e2:	e065      	b.n	80144b0 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 80143e4:	683b      	ldr	r3, [r7, #0]
 80143e6:	0a5b      	lsrs	r3, r3, #9
 80143e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143ea:	4413      	add	r3, r2
 80143ec:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	699a      	ldr	r2, [r3, #24]
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	68db      	ldr	r3, [r3, #12]
 80143f6:	429a      	cmp	r2, r3
 80143f8:	d90a      	bls.n	8014410 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	699a      	ldr	r2, [r3, #24]
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	7d1b      	ldrb	r3, [r3, #20]
 8014406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801440a:	b2da      	uxtb	r2, r3
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	699b      	ldr	r3, [r3, #24]
 8014414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014418:	2b00      	cmp	r3, #0
 801441a:	d040      	beq.n	801449e <f_lseek+0x48c>
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	6a1b      	ldr	r3, [r3, #32]
 8014420:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014422:	429a      	cmp	r2, r3
 8014424:	d03b      	beq.n	801449e <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	7d1b      	ldrb	r3, [r3, #20]
 801442a:	b25b      	sxtb	r3, r3
 801442c:	2b00      	cmp	r3, #0
 801442e:	da1d      	bge.n	801446c <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014430:	68bb      	ldr	r3, [r7, #8]
 8014432:	7858      	ldrb	r0, [r3, #1]
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	6a1a      	ldr	r2, [r3, #32]
 801443e:	2301      	movs	r3, #1
 8014440:	f7fd fb7c 	bl	8011b3c <disk_write>
 8014444:	4603      	mov	r3, r0
 8014446:	2b00      	cmp	r3, #0
 8014448:	d009      	beq.n	801445e <f_lseek+0x44c>
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	2201      	movs	r2, #1
 801444e:	755a      	strb	r2, [r3, #21]
 8014450:	68bb      	ldr	r3, [r7, #8]
 8014452:	2101      	movs	r1, #1
 8014454:	4618      	mov	r0, r3
 8014456:	f7fd fcc5 	bl	8011de4 <unlock_fs>
 801445a:	2301      	movs	r3, #1
 801445c:	e028      	b.n	80144b0 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	7d1b      	ldrb	r3, [r3, #20]
 8014462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014466:	b2da      	uxtb	r2, r3
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801446c:	68bb      	ldr	r3, [r7, #8]
 801446e:	7858      	ldrb	r0, [r3, #1]
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014476:	2301      	movs	r3, #1
 8014478:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801447a:	f7fd fb3f 	bl	8011afc <disk_read>
 801447e:	4603      	mov	r3, r0
 8014480:	2b00      	cmp	r3, #0
 8014482:	d009      	beq.n	8014498 <f_lseek+0x486>
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	2201      	movs	r2, #1
 8014488:	755a      	strb	r2, [r3, #21]
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	2101      	movs	r1, #1
 801448e:	4618      	mov	r0, r3
 8014490:	f7fd fca8 	bl	8011de4 <unlock_fs>
 8014494:	2301      	movs	r3, #1
 8014496:	e00b      	b.n	80144b0 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801449c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801449e:	68bb      	ldr	r3, [r7, #8]
 80144a0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80144a4:	4611      	mov	r1, r2
 80144a6:	4618      	mov	r0, r3
 80144a8:	f7fd fc9c 	bl	8011de4 <unlock_fs>
 80144ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80144b0:	4618      	mov	r0, r3
 80144b2:	3740      	adds	r7, #64	; 0x40
 80144b4:	46bd      	mov	sp, r7
 80144b6:	bd80      	pop	{r7, pc}

080144b8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b086      	sub	sp, #24
 80144bc:	af00      	add	r7, sp, #0
 80144be:	6078      	str	r0, [r7, #4]
 80144c0:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d101      	bne.n	80144cc <f_opendir+0x14>
 80144c8:	2309      	movs	r3, #9
 80144ca:	e06a      	b.n	80145a2 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80144d0:	f107 010c 	add.w	r1, r7, #12
 80144d4:	463b      	mov	r3, r7
 80144d6:	2200      	movs	r2, #0
 80144d8:	4618      	mov	r0, r3
 80144da:	f7fe fe79 	bl	80131d0 <find_volume>
 80144de:	4603      	mov	r3, r0
 80144e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80144e2:	7dfb      	ldrb	r3, [r7, #23]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d14f      	bne.n	8014588 <f_opendir+0xd0>
		obj->fs = fs;
 80144e8:	68fa      	ldr	r2, [r7, #12]
 80144ea:	693b      	ldr	r3, [r7, #16]
 80144ec:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80144ee:	683b      	ldr	r3, [r7, #0]
 80144f0:	4619      	mov	r1, r3
 80144f2:	6878      	ldr	r0, [r7, #4]
 80144f4:	f7fe fd60 	bl	8012fb8 <follow_path>
 80144f8:	4603      	mov	r3, r0
 80144fa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80144fc:	7dfb      	ldrb	r3, [r7, #23]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d13d      	bne.n	801457e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014508:	b25b      	sxtb	r3, r3
 801450a:	2b00      	cmp	r3, #0
 801450c:	db12      	blt.n	8014534 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801450e:	693b      	ldr	r3, [r7, #16]
 8014510:	799b      	ldrb	r3, [r3, #6]
 8014512:	f003 0310 	and.w	r3, r3, #16
 8014516:	2b00      	cmp	r3, #0
 8014518:	d00a      	beq.n	8014530 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801451a:	68fa      	ldr	r2, [r7, #12]
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	6a1b      	ldr	r3, [r3, #32]
 8014520:	4619      	mov	r1, r3
 8014522:	4610      	mov	r0, r2
 8014524:	f7fe fb31 	bl	8012b8a <ld_clust>
 8014528:	4602      	mov	r2, r0
 801452a:	693b      	ldr	r3, [r7, #16]
 801452c:	609a      	str	r2, [r3, #8]
 801452e:	e001      	b.n	8014534 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8014530:	2305      	movs	r3, #5
 8014532:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8014534:	7dfb      	ldrb	r3, [r7, #23]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d121      	bne.n	801457e <f_opendir+0xc6>
				obj->id = fs->id;
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	88da      	ldrh	r2, [r3, #6]
 801453e:	693b      	ldr	r3, [r7, #16]
 8014540:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8014542:	2100      	movs	r1, #0
 8014544:	6878      	ldr	r0, [r7, #4]
 8014546:	f7fe f999 	bl	801287c <dir_sdi>
 801454a:	4603      	mov	r3, r0
 801454c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801454e:	7dfb      	ldrb	r3, [r7, #23]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d114      	bne.n	801457e <f_opendir+0xc6>
					if (obj->sclust) {
 8014554:	693b      	ldr	r3, [r7, #16]
 8014556:	689b      	ldr	r3, [r3, #8]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d00d      	beq.n	8014578 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801455c:	2100      	movs	r1, #0
 801455e:	6878      	ldr	r0, [r7, #4]
 8014560:	f7fd fcda 	bl	8011f18 <inc_lock>
 8014564:	4602      	mov	r2, r0
 8014566:	693b      	ldr	r3, [r7, #16]
 8014568:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801456a:	693b      	ldr	r3, [r7, #16]
 801456c:	691b      	ldr	r3, [r3, #16]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d105      	bne.n	801457e <f_opendir+0xc6>
 8014572:	2312      	movs	r3, #18
 8014574:	75fb      	strb	r3, [r7, #23]
 8014576:	e002      	b.n	801457e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8014578:	693b      	ldr	r3, [r7, #16]
 801457a:	2200      	movs	r2, #0
 801457c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801457e:	7dfb      	ldrb	r3, [r7, #23]
 8014580:	2b04      	cmp	r3, #4
 8014582:	d101      	bne.n	8014588 <f_opendir+0xd0>
 8014584:	2305      	movs	r3, #5
 8014586:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8014588:	7dfb      	ldrb	r3, [r7, #23]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d002      	beq.n	8014594 <f_opendir+0xdc>
 801458e:	693b      	ldr	r3, [r7, #16]
 8014590:	2200      	movs	r2, #0
 8014592:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	7dfa      	ldrb	r2, [r7, #23]
 8014598:	4611      	mov	r1, r2
 801459a:	4618      	mov	r0, r3
 801459c:	f7fd fc22 	bl	8011de4 <unlock_fs>
 80145a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80145a2:	4618      	mov	r0, r3
 80145a4:	3718      	adds	r7, #24
 80145a6:	46bd      	mov	sp, r7
 80145a8:	bd80      	pop	{r7, pc}

080145aa <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80145aa:	b580      	push	{r7, lr}
 80145ac:	b084      	sub	sp, #16
 80145ae:	af00      	add	r7, sp, #0
 80145b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	f107 0208 	add.w	r2, r7, #8
 80145b8:	4611      	mov	r1, r2
 80145ba:	4618      	mov	r0, r3
 80145bc:	f7ff f85c 	bl	8013678 <validate>
 80145c0:	4603      	mov	r3, r0
 80145c2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80145c4:	7bfb      	ldrb	r3, [r7, #15]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d115      	bne.n	80145f6 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	691b      	ldr	r3, [r3, #16]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d006      	beq.n	80145e0 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	691b      	ldr	r3, [r3, #16]
 80145d6:	4618      	mov	r0, r3
 80145d8:	f7fd fd2c 	bl	8012034 <dec_lock>
 80145dc:	4603      	mov	r3, r0
 80145de:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80145e0:	7bfb      	ldrb	r3, [r7, #15]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d102      	bne.n	80145ec <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	2200      	movs	r2, #0
 80145ea:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 80145ec:	68bb      	ldr	r3, [r7, #8]
 80145ee:	2100      	movs	r1, #0
 80145f0:	4618      	mov	r0, r3
 80145f2:	f7fd fbf7 	bl	8011de4 <unlock_fs>
#endif
	}
	return res;
 80145f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80145f8:	4618      	mov	r0, r3
 80145fa:	3710      	adds	r7, #16
 80145fc:	46bd      	mov	sp, r7
 80145fe:	bd80      	pop	{r7, pc}

08014600 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8014600:	b580      	push	{r7, lr}
 8014602:	b084      	sub	sp, #16
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
 8014608:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	f107 0208 	add.w	r2, r7, #8
 8014610:	4611      	mov	r1, r2
 8014612:	4618      	mov	r0, r3
 8014614:	f7ff f830 	bl	8013678 <validate>
 8014618:	4603      	mov	r3, r0
 801461a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801461c:	7bfb      	ldrb	r3, [r7, #15]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d126      	bne.n	8014670 <f_readdir+0x70>
		if (!fno) {
 8014622:	683b      	ldr	r3, [r7, #0]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d106      	bne.n	8014636 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8014628:	2100      	movs	r1, #0
 801462a:	6878      	ldr	r0, [r7, #4]
 801462c:	f7fe f926 	bl	801287c <dir_sdi>
 8014630:	4603      	mov	r3, r0
 8014632:	73fb      	strb	r3, [r7, #15]
 8014634:	e01c      	b.n	8014670 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8014636:	2100      	movs	r1, #0
 8014638:	6878      	ldr	r0, [r7, #4]
 801463a:	f7fe fae5 	bl	8012c08 <dir_read>
 801463e:	4603      	mov	r3, r0
 8014640:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8014642:	7bfb      	ldrb	r3, [r7, #15]
 8014644:	2b04      	cmp	r3, #4
 8014646:	d101      	bne.n	801464c <f_readdir+0x4c>
 8014648:	2300      	movs	r3, #0
 801464a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 801464c:	7bfb      	ldrb	r3, [r7, #15]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d10e      	bne.n	8014670 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8014652:	6839      	ldr	r1, [r7, #0]
 8014654:	6878      	ldr	r0, [r7, #4]
 8014656:	f7fe fbbb 	bl	8012dd0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801465a:	2100      	movs	r1, #0
 801465c:	6878      	ldr	r0, [r7, #4]
 801465e:	f7fe f988 	bl	8012972 <dir_next>
 8014662:	4603      	mov	r3, r0
 8014664:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8014666:	7bfb      	ldrb	r3, [r7, #15]
 8014668:	2b04      	cmp	r3, #4
 801466a:	d101      	bne.n	8014670 <f_readdir+0x70>
 801466c:	2300      	movs	r3, #0
 801466e:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8014670:	68bb      	ldr	r3, [r7, #8]
 8014672:	7bfa      	ldrb	r2, [r7, #15]
 8014674:	4611      	mov	r1, r2
 8014676:	4618      	mov	r0, r3
 8014678:	f7fd fbb4 	bl	8011de4 <unlock_fs>
 801467c:	7bfb      	ldrb	r3, [r7, #15]
}
 801467e:	4618      	mov	r0, r3
 8014680:	3710      	adds	r7, #16
 8014682:	46bd      	mov	sp, r7
 8014684:	bd80      	pop	{r7, pc}
	...

08014688 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014688:	b480      	push	{r7}
 801468a:	b087      	sub	sp, #28
 801468c:	af00      	add	r7, sp, #0
 801468e:	60f8      	str	r0, [r7, #12]
 8014690:	60b9      	str	r1, [r7, #8]
 8014692:	4613      	mov	r3, r2
 8014694:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014696:	2301      	movs	r3, #1
 8014698:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801469a:	2300      	movs	r3, #0
 801469c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801469e:	4b1f      	ldr	r3, [pc, #124]	; (801471c <FATFS_LinkDriverEx+0x94>)
 80146a0:	7a5b      	ldrb	r3, [r3, #9]
 80146a2:	b2db      	uxtb	r3, r3
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d131      	bne.n	801470c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80146a8:	4b1c      	ldr	r3, [pc, #112]	; (801471c <FATFS_LinkDriverEx+0x94>)
 80146aa:	7a5b      	ldrb	r3, [r3, #9]
 80146ac:	b2db      	uxtb	r3, r3
 80146ae:	461a      	mov	r2, r3
 80146b0:	4b1a      	ldr	r3, [pc, #104]	; (801471c <FATFS_LinkDriverEx+0x94>)
 80146b2:	2100      	movs	r1, #0
 80146b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80146b6:	4b19      	ldr	r3, [pc, #100]	; (801471c <FATFS_LinkDriverEx+0x94>)
 80146b8:	7a5b      	ldrb	r3, [r3, #9]
 80146ba:	b2db      	uxtb	r3, r3
 80146bc:	4a17      	ldr	r2, [pc, #92]	; (801471c <FATFS_LinkDriverEx+0x94>)
 80146be:	009b      	lsls	r3, r3, #2
 80146c0:	4413      	add	r3, r2
 80146c2:	68fa      	ldr	r2, [r7, #12]
 80146c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80146c6:	4b15      	ldr	r3, [pc, #84]	; (801471c <FATFS_LinkDriverEx+0x94>)
 80146c8:	7a5b      	ldrb	r3, [r3, #9]
 80146ca:	b2db      	uxtb	r3, r3
 80146cc:	461a      	mov	r2, r3
 80146ce:	4b13      	ldr	r3, [pc, #76]	; (801471c <FATFS_LinkDriverEx+0x94>)
 80146d0:	4413      	add	r3, r2
 80146d2:	79fa      	ldrb	r2, [r7, #7]
 80146d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80146d6:	4b11      	ldr	r3, [pc, #68]	; (801471c <FATFS_LinkDriverEx+0x94>)
 80146d8:	7a5b      	ldrb	r3, [r3, #9]
 80146da:	b2db      	uxtb	r3, r3
 80146dc:	1c5a      	adds	r2, r3, #1
 80146de:	b2d1      	uxtb	r1, r2
 80146e0:	4a0e      	ldr	r2, [pc, #56]	; (801471c <FATFS_LinkDriverEx+0x94>)
 80146e2:	7251      	strb	r1, [r2, #9]
 80146e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80146e6:	7dbb      	ldrb	r3, [r7, #22]
 80146e8:	3330      	adds	r3, #48	; 0x30
 80146ea:	b2da      	uxtb	r2, r3
 80146ec:	68bb      	ldr	r3, [r7, #8]
 80146ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80146f0:	68bb      	ldr	r3, [r7, #8]
 80146f2:	3301      	adds	r3, #1
 80146f4:	223a      	movs	r2, #58	; 0x3a
 80146f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80146f8:	68bb      	ldr	r3, [r7, #8]
 80146fa:	3302      	adds	r3, #2
 80146fc:	222f      	movs	r2, #47	; 0x2f
 80146fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014700:	68bb      	ldr	r3, [r7, #8]
 8014702:	3303      	adds	r3, #3
 8014704:	2200      	movs	r2, #0
 8014706:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014708:	2300      	movs	r3, #0
 801470a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801470c:	7dfb      	ldrb	r3, [r7, #23]
}
 801470e:	4618      	mov	r0, r3
 8014710:	371c      	adds	r7, #28
 8014712:	46bd      	mov	sp, r7
 8014714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014718:	4770      	bx	lr
 801471a:	bf00      	nop
 801471c:	200006f0 	.word	0x200006f0

08014720 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b082      	sub	sp, #8
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
 8014728:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801472a:	2200      	movs	r2, #0
 801472c:	6839      	ldr	r1, [r7, #0]
 801472e:	6878      	ldr	r0, [r7, #4]
 8014730:	f7ff ffaa 	bl	8014688 <FATFS_LinkDriverEx>
 8014734:	4603      	mov	r3, r0
}
 8014736:	4618      	mov	r0, r3
 8014738:	3708      	adds	r7, #8
 801473a:	46bd      	mov	sp, r7
 801473c:	bd80      	pop	{r7, pc}

0801473e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801473e:	b580      	push	{r7, lr}
 8014740:	b084      	sub	sp, #16
 8014742:	af00      	add	r7, sp, #0
 8014744:	4603      	mov	r3, r0
 8014746:	6039      	str	r1, [r7, #0]
 8014748:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 801474a:	2200      	movs	r2, #0
 801474c:	2101      	movs	r1, #1
 801474e:	2001      	movs	r0, #1
 8014750:	f000 f867 	bl	8014822 <osSemaphoreNew>
 8014754:	4602      	mov	r2, r0
 8014756:	683b      	ldr	r3, [r7, #0]
 8014758:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 801475a:	683b      	ldr	r3, [r7, #0]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	2b00      	cmp	r3, #0
 8014760:	bf14      	ite	ne
 8014762:	2301      	movne	r3, #1
 8014764:	2300      	moveq	r3, #0
 8014766:	b2db      	uxtb	r3, r3
 8014768:	60fb      	str	r3, [r7, #12]

    return ret;
 801476a:	68fb      	ldr	r3, [r7, #12]
}
 801476c:	4618      	mov	r0, r3
 801476e:	3710      	adds	r7, #16
 8014770:	46bd      	mov	sp, r7
 8014772:	bd80      	pop	{r7, pc}

08014774 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8014774:	b580      	push	{r7, lr}
 8014776:	b082      	sub	sp, #8
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801477c:	6878      	ldr	r0, [r7, #4]
 801477e:	f000 f96f 	bl	8014a60 <osSemaphoreDelete>
#endif
    return 1;
 8014782:	2301      	movs	r3, #1
}
 8014784:	4618      	mov	r0, r3
 8014786:	3708      	adds	r7, #8
 8014788:	46bd      	mov	sp, r7
 801478a:	bd80      	pop	{r7, pc}

0801478c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801478c:	b580      	push	{r7, lr}
 801478e:	b084      	sub	sp, #16
 8014790:	af00      	add	r7, sp, #0
 8014792:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8014794:	2300      	movs	r3, #0
 8014796:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8014798:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801479c:	6878      	ldr	r0, [r7, #4]
 801479e:	f000 f8c9 	bl	8014934 <osSemaphoreAcquire>
 80147a2:	4603      	mov	r3, r0
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d101      	bne.n	80147ac <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80147a8:	2301      	movs	r3, #1
 80147aa:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80147ac:	68fb      	ldr	r3, [r7, #12]
}
 80147ae:	4618      	mov	r0, r3
 80147b0:	3710      	adds	r7, #16
 80147b2:	46bd      	mov	sp, r7
 80147b4:	bd80      	pop	{r7, pc}

080147b6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80147b6:	b580      	push	{r7, lr}
 80147b8:	b082      	sub	sp, #8
 80147ba:	af00      	add	r7, sp, #0
 80147bc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80147be:	6878      	ldr	r0, [r7, #4]
 80147c0:	f000 f90a 	bl	80149d8 <osSemaphoreRelease>
#endif
}
 80147c4:	bf00      	nop
 80147c6:	3708      	adds	r7, #8
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bd80      	pop	{r7, pc}

080147cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80147cc:	b580      	push	{r7, lr}
 80147ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80147d0:	4b05      	ldr	r3, [pc, #20]	; (80147e8 <SysTick_Handler+0x1c>)
 80147d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80147d4:	f001 fb9a 	bl	8015f0c <xTaskGetSchedulerState>
 80147d8:	4603      	mov	r3, r0
 80147da:	2b01      	cmp	r3, #1
 80147dc:	d001      	beq.n	80147e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80147de:	f001 fe1b 	bl	8016418 <xPortSysTickHandler>
  }
}
 80147e2:	bf00      	nop
 80147e4:	bd80      	pop	{r7, pc}
 80147e6:	bf00      	nop
 80147e8:	e000e010 	.word	0xe000e010

080147ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b084      	sub	sp, #16
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80147f4:	f3ef 8305 	mrs	r3, IPSR
 80147f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80147fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d003      	beq.n	8014808 <osDelay+0x1c>
    stat = osErrorISR;
 8014800:	f06f 0305 	mvn.w	r3, #5
 8014804:	60fb      	str	r3, [r7, #12]
 8014806:	e007      	b.n	8014818 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8014808:	2300      	movs	r3, #0
 801480a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d002      	beq.n	8014818 <osDelay+0x2c>
      vTaskDelay(ticks);
 8014812:	6878      	ldr	r0, [r7, #4]
 8014814:	f001 f850 	bl	80158b8 <vTaskDelay>
    }
  }

  return (stat);
 8014818:	68fb      	ldr	r3, [r7, #12]
}
 801481a:	4618      	mov	r0, r3
 801481c:	3710      	adds	r7, #16
 801481e:	46bd      	mov	sp, r7
 8014820:	bd80      	pop	{r7, pc}

08014822 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8014822:	b580      	push	{r7, lr}
 8014824:	b08a      	sub	sp, #40	; 0x28
 8014826:	af02      	add	r7, sp, #8
 8014828:	60f8      	str	r0, [r7, #12]
 801482a:	60b9      	str	r1, [r7, #8]
 801482c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 801482e:	2300      	movs	r3, #0
 8014830:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014832:	f3ef 8305 	mrs	r3, IPSR
 8014836:	613b      	str	r3, [r7, #16]
  return(result);
 8014838:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801483a:	2b00      	cmp	r3, #0
 801483c:	d175      	bne.n	801492a <osSemaphoreNew+0x108>
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d072      	beq.n	801492a <osSemaphoreNew+0x108>
 8014844:	68ba      	ldr	r2, [r7, #8]
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	429a      	cmp	r2, r3
 801484a:	d86e      	bhi.n	801492a <osSemaphoreNew+0x108>
    mem = -1;
 801484c:	f04f 33ff 	mov.w	r3, #4294967295
 8014850:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d015      	beq.n	8014884 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	689b      	ldr	r3, [r3, #8]
 801485c:	2b00      	cmp	r3, #0
 801485e:	d006      	beq.n	801486e <osSemaphoreNew+0x4c>
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	68db      	ldr	r3, [r3, #12]
 8014864:	2b4f      	cmp	r3, #79	; 0x4f
 8014866:	d902      	bls.n	801486e <osSemaphoreNew+0x4c>
        mem = 1;
 8014868:	2301      	movs	r3, #1
 801486a:	61bb      	str	r3, [r7, #24]
 801486c:	e00c      	b.n	8014888 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	689b      	ldr	r3, [r3, #8]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d108      	bne.n	8014888 <osSemaphoreNew+0x66>
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	68db      	ldr	r3, [r3, #12]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d104      	bne.n	8014888 <osSemaphoreNew+0x66>
          mem = 0;
 801487e:	2300      	movs	r3, #0
 8014880:	61bb      	str	r3, [r7, #24]
 8014882:	e001      	b.n	8014888 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8014884:	2300      	movs	r3, #0
 8014886:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8014888:	69bb      	ldr	r3, [r7, #24]
 801488a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801488e:	d04c      	beq.n	801492a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	2b01      	cmp	r3, #1
 8014894:	d128      	bne.n	80148e8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8014896:	69bb      	ldr	r3, [r7, #24]
 8014898:	2b01      	cmp	r3, #1
 801489a:	d10a      	bne.n	80148b2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	689b      	ldr	r3, [r3, #8]
 80148a0:	2203      	movs	r2, #3
 80148a2:	9200      	str	r2, [sp, #0]
 80148a4:	2200      	movs	r2, #0
 80148a6:	2100      	movs	r1, #0
 80148a8:	2001      	movs	r0, #1
 80148aa:	f000 fa0d 	bl	8014cc8 <xQueueGenericCreateStatic>
 80148ae:	61f8      	str	r0, [r7, #28]
 80148b0:	e005      	b.n	80148be <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80148b2:	2203      	movs	r2, #3
 80148b4:	2100      	movs	r1, #0
 80148b6:	2001      	movs	r0, #1
 80148b8:	f000 fa7e 	bl	8014db8 <xQueueGenericCreate>
 80148bc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80148be:	69fb      	ldr	r3, [r7, #28]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d022      	beq.n	801490a <osSemaphoreNew+0xe8>
 80148c4:	68bb      	ldr	r3, [r7, #8]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d01f      	beq.n	801490a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80148ca:	2300      	movs	r3, #0
 80148cc:	2200      	movs	r2, #0
 80148ce:	2100      	movs	r1, #0
 80148d0:	69f8      	ldr	r0, [r7, #28]
 80148d2:	f000 fb39 	bl	8014f48 <xQueueGenericSend>
 80148d6:	4603      	mov	r3, r0
 80148d8:	2b01      	cmp	r3, #1
 80148da:	d016      	beq.n	801490a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80148dc:	69f8      	ldr	r0, [r7, #28]
 80148de:	f000 fe4b 	bl	8015578 <vQueueDelete>
            hSemaphore = NULL;
 80148e2:	2300      	movs	r3, #0
 80148e4:	61fb      	str	r3, [r7, #28]
 80148e6:	e010      	b.n	801490a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80148e8:	69bb      	ldr	r3, [r7, #24]
 80148ea:	2b01      	cmp	r3, #1
 80148ec:	d108      	bne.n	8014900 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	689b      	ldr	r3, [r3, #8]
 80148f2:	461a      	mov	r2, r3
 80148f4:	68b9      	ldr	r1, [r7, #8]
 80148f6:	68f8      	ldr	r0, [r7, #12]
 80148f8:	f000 fabb 	bl	8014e72 <xQueueCreateCountingSemaphoreStatic>
 80148fc:	61f8      	str	r0, [r7, #28]
 80148fe:	e004      	b.n	801490a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8014900:	68b9      	ldr	r1, [r7, #8]
 8014902:	68f8      	ldr	r0, [r7, #12]
 8014904:	f000 faec 	bl	8014ee0 <xQueueCreateCountingSemaphore>
 8014908:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801490a:	69fb      	ldr	r3, [r7, #28]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d00c      	beq.n	801492a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d003      	beq.n	801491e <osSemaphoreNew+0xfc>
          name = attr->name;
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	617b      	str	r3, [r7, #20]
 801491c:	e001      	b.n	8014922 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 801491e:	2300      	movs	r3, #0
 8014920:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8014922:	6979      	ldr	r1, [r7, #20]
 8014924:	69f8      	ldr	r0, [r7, #28]
 8014926:	f000 ff73 	bl	8015810 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801492a:	69fb      	ldr	r3, [r7, #28]
}
 801492c:	4618      	mov	r0, r3
 801492e:	3720      	adds	r7, #32
 8014930:	46bd      	mov	sp, r7
 8014932:	bd80      	pop	{r7, pc}

08014934 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8014934:	b580      	push	{r7, lr}
 8014936:	b086      	sub	sp, #24
 8014938:	af00      	add	r7, sp, #0
 801493a:	6078      	str	r0, [r7, #4]
 801493c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8014942:	2300      	movs	r3, #0
 8014944:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8014946:	693b      	ldr	r3, [r7, #16]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d103      	bne.n	8014954 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 801494c:	f06f 0303 	mvn.w	r3, #3
 8014950:	617b      	str	r3, [r7, #20]
 8014952:	e039      	b.n	80149c8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014954:	f3ef 8305 	mrs	r3, IPSR
 8014958:	60fb      	str	r3, [r7, #12]
  return(result);
 801495a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801495c:	2b00      	cmp	r3, #0
 801495e:	d022      	beq.n	80149a6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8014960:	683b      	ldr	r3, [r7, #0]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d003      	beq.n	801496e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8014966:	f06f 0303 	mvn.w	r3, #3
 801496a:	617b      	str	r3, [r7, #20]
 801496c:	e02c      	b.n	80149c8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 801496e:	2300      	movs	r3, #0
 8014970:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8014972:	f107 0308 	add.w	r3, r7, #8
 8014976:	461a      	mov	r2, r3
 8014978:	2100      	movs	r1, #0
 801497a:	6938      	ldr	r0, [r7, #16]
 801497c:	f000 fd7c 	bl	8015478 <xQueueReceiveFromISR>
 8014980:	4603      	mov	r3, r0
 8014982:	2b01      	cmp	r3, #1
 8014984:	d003      	beq.n	801498e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8014986:	f06f 0302 	mvn.w	r3, #2
 801498a:	617b      	str	r3, [r7, #20]
 801498c:	e01c      	b.n	80149c8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 801498e:	68bb      	ldr	r3, [r7, #8]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d019      	beq.n	80149c8 <osSemaphoreAcquire+0x94>
 8014994:	4b0f      	ldr	r3, [pc, #60]	; (80149d4 <osSemaphoreAcquire+0xa0>)
 8014996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801499a:	601a      	str	r2, [r3, #0]
 801499c:	f3bf 8f4f 	dsb	sy
 80149a0:	f3bf 8f6f 	isb	sy
 80149a4:	e010      	b.n	80149c8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80149a6:	6839      	ldr	r1, [r7, #0]
 80149a8:	6938      	ldr	r0, [r7, #16]
 80149aa:	f000 fc59 	bl	8015260 <xQueueSemaphoreTake>
 80149ae:	4603      	mov	r3, r0
 80149b0:	2b01      	cmp	r3, #1
 80149b2:	d009      	beq.n	80149c8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80149b4:	683b      	ldr	r3, [r7, #0]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d003      	beq.n	80149c2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80149ba:	f06f 0301 	mvn.w	r3, #1
 80149be:	617b      	str	r3, [r7, #20]
 80149c0:	e002      	b.n	80149c8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80149c2:	f06f 0302 	mvn.w	r3, #2
 80149c6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80149c8:	697b      	ldr	r3, [r7, #20]
}
 80149ca:	4618      	mov	r0, r3
 80149cc:	3718      	adds	r7, #24
 80149ce:	46bd      	mov	sp, r7
 80149d0:	bd80      	pop	{r7, pc}
 80149d2:	bf00      	nop
 80149d4:	e000ed04 	.word	0xe000ed04

080149d8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80149d8:	b580      	push	{r7, lr}
 80149da:	b086      	sub	sp, #24
 80149dc:	af00      	add	r7, sp, #0
 80149de:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80149e4:	2300      	movs	r3, #0
 80149e6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80149e8:	693b      	ldr	r3, [r7, #16]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d103      	bne.n	80149f6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80149ee:	f06f 0303 	mvn.w	r3, #3
 80149f2:	617b      	str	r3, [r7, #20]
 80149f4:	e02c      	b.n	8014a50 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80149f6:	f3ef 8305 	mrs	r3, IPSR
 80149fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80149fc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d01a      	beq.n	8014a38 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8014a02:	2300      	movs	r3, #0
 8014a04:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8014a06:	f107 0308 	add.w	r3, r7, #8
 8014a0a:	4619      	mov	r1, r3
 8014a0c:	6938      	ldr	r0, [r7, #16]
 8014a0e:	f000 fb99 	bl	8015144 <xQueueGiveFromISR>
 8014a12:	4603      	mov	r3, r0
 8014a14:	2b01      	cmp	r3, #1
 8014a16:	d003      	beq.n	8014a20 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8014a18:	f06f 0302 	mvn.w	r3, #2
 8014a1c:	617b      	str	r3, [r7, #20]
 8014a1e:	e017      	b.n	8014a50 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8014a20:	68bb      	ldr	r3, [r7, #8]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d014      	beq.n	8014a50 <osSemaphoreRelease+0x78>
 8014a26:	4b0d      	ldr	r3, [pc, #52]	; (8014a5c <osSemaphoreRelease+0x84>)
 8014a28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a2c:	601a      	str	r2, [r3, #0]
 8014a2e:	f3bf 8f4f 	dsb	sy
 8014a32:	f3bf 8f6f 	isb	sy
 8014a36:	e00b      	b.n	8014a50 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8014a38:	2300      	movs	r3, #0
 8014a3a:	2200      	movs	r2, #0
 8014a3c:	2100      	movs	r1, #0
 8014a3e:	6938      	ldr	r0, [r7, #16]
 8014a40:	f000 fa82 	bl	8014f48 <xQueueGenericSend>
 8014a44:	4603      	mov	r3, r0
 8014a46:	2b01      	cmp	r3, #1
 8014a48:	d002      	beq.n	8014a50 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8014a4a:	f06f 0302 	mvn.w	r3, #2
 8014a4e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8014a50:	697b      	ldr	r3, [r7, #20]
}
 8014a52:	4618      	mov	r0, r3
 8014a54:	3718      	adds	r7, #24
 8014a56:	46bd      	mov	sp, r7
 8014a58:	bd80      	pop	{r7, pc}
 8014a5a:	bf00      	nop
 8014a5c:	e000ed04 	.word	0xe000ed04

08014a60 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8014a60:	b580      	push	{r7, lr}
 8014a62:	b086      	sub	sp, #24
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014a6c:	f3ef 8305 	mrs	r3, IPSR
 8014a70:	60fb      	str	r3, [r7, #12]
  return(result);
 8014a72:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d003      	beq.n	8014a80 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8014a78:	f06f 0305 	mvn.w	r3, #5
 8014a7c:	617b      	str	r3, [r7, #20]
 8014a7e:	e00e      	b.n	8014a9e <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8014a80:	693b      	ldr	r3, [r7, #16]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d103      	bne.n	8014a8e <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8014a86:	f06f 0303 	mvn.w	r3, #3
 8014a8a:	617b      	str	r3, [r7, #20]
 8014a8c:	e007      	b.n	8014a9e <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8014a8e:	6938      	ldr	r0, [r7, #16]
 8014a90:	f000 fee8 	bl	8015864 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8014a94:	2300      	movs	r3, #0
 8014a96:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8014a98:	6938      	ldr	r0, [r7, #16]
 8014a9a:	f000 fd6d 	bl	8015578 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8014a9e:	697b      	ldr	r3, [r7, #20]
}
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	3718      	adds	r7, #24
 8014aa4:	46bd      	mov	sp, r7
 8014aa6:	bd80      	pop	{r7, pc}

08014aa8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014aa8:	b480      	push	{r7}
 8014aaa:	b083      	sub	sp, #12
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	f103 0208 	add.w	r2, r3, #8
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	f04f 32ff 	mov.w	r2, #4294967295
 8014ac0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	f103 0208 	add.w	r2, r3, #8
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	f103 0208 	add.w	r2, r3, #8
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	2200      	movs	r2, #0
 8014ada:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014adc:	bf00      	nop
 8014ade:	370c      	adds	r7, #12
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae6:	4770      	bx	lr

08014ae8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014ae8:	b480      	push	{r7}
 8014aea:	b085      	sub	sp, #20
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	6078      	str	r0, [r7, #4]
 8014af0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	685b      	ldr	r3, [r3, #4]
 8014af6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014af8:	683b      	ldr	r3, [r7, #0]
 8014afa:	68fa      	ldr	r2, [r7, #12]
 8014afc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	689a      	ldr	r2, [r3, #8]
 8014b02:	683b      	ldr	r3, [r7, #0]
 8014b04:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	689b      	ldr	r3, [r3, #8]
 8014b0a:	683a      	ldr	r2, [r7, #0]
 8014b0c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	683a      	ldr	r2, [r7, #0]
 8014b12:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014b14:	683b      	ldr	r3, [r7, #0]
 8014b16:	687a      	ldr	r2, [r7, #4]
 8014b18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	1c5a      	adds	r2, r3, #1
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	601a      	str	r2, [r3, #0]
}
 8014b24:	bf00      	nop
 8014b26:	3714      	adds	r7, #20
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b2e:	4770      	bx	lr

08014b30 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014b30:	b480      	push	{r7}
 8014b32:	b085      	sub	sp, #20
 8014b34:	af00      	add	r7, sp, #0
 8014b36:	6078      	str	r0, [r7, #4]
 8014b38:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014b3a:	683b      	ldr	r3, [r7, #0]
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014b40:	68bb      	ldr	r3, [r7, #8]
 8014b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b46:	d103      	bne.n	8014b50 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	691b      	ldr	r3, [r3, #16]
 8014b4c:	60fb      	str	r3, [r7, #12]
 8014b4e:	e00c      	b.n	8014b6a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	3308      	adds	r3, #8
 8014b54:	60fb      	str	r3, [r7, #12]
 8014b56:	e002      	b.n	8014b5e <vListInsert+0x2e>
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	685b      	ldr	r3, [r3, #4]
 8014b5c:	60fb      	str	r3, [r7, #12]
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	685b      	ldr	r3, [r3, #4]
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	68ba      	ldr	r2, [r7, #8]
 8014b66:	429a      	cmp	r2, r3
 8014b68:	d2f6      	bcs.n	8014b58 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	685a      	ldr	r2, [r3, #4]
 8014b6e:	683b      	ldr	r3, [r7, #0]
 8014b70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014b72:	683b      	ldr	r3, [r7, #0]
 8014b74:	685b      	ldr	r3, [r3, #4]
 8014b76:	683a      	ldr	r2, [r7, #0]
 8014b78:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014b7a:	683b      	ldr	r3, [r7, #0]
 8014b7c:	68fa      	ldr	r2, [r7, #12]
 8014b7e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	683a      	ldr	r2, [r7, #0]
 8014b84:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014b86:	683b      	ldr	r3, [r7, #0]
 8014b88:	687a      	ldr	r2, [r7, #4]
 8014b8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	1c5a      	adds	r2, r3, #1
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	601a      	str	r2, [r3, #0]
}
 8014b96:	bf00      	nop
 8014b98:	3714      	adds	r7, #20
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba0:	4770      	bx	lr

08014ba2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014ba2:	b480      	push	{r7}
 8014ba4:	b085      	sub	sp, #20
 8014ba6:	af00      	add	r7, sp, #0
 8014ba8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	691b      	ldr	r3, [r3, #16]
 8014bae:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	685b      	ldr	r3, [r3, #4]
 8014bb4:	687a      	ldr	r2, [r7, #4]
 8014bb6:	6892      	ldr	r2, [r2, #8]
 8014bb8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	689b      	ldr	r3, [r3, #8]
 8014bbe:	687a      	ldr	r2, [r7, #4]
 8014bc0:	6852      	ldr	r2, [r2, #4]
 8014bc2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	685b      	ldr	r3, [r3, #4]
 8014bc8:	687a      	ldr	r2, [r7, #4]
 8014bca:	429a      	cmp	r2, r3
 8014bcc:	d103      	bne.n	8014bd6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	689a      	ldr	r2, [r3, #8]
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	2200      	movs	r2, #0
 8014bda:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	1e5a      	subs	r2, r3, #1
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	681b      	ldr	r3, [r3, #0]
}
 8014bea:	4618      	mov	r0, r3
 8014bec:	3714      	adds	r7, #20
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf4:	4770      	bx	lr
	...

08014bf8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b084      	sub	sp, #16
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	6078      	str	r0, [r7, #4]
 8014c00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d10a      	bne.n	8014c22 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c10:	f383 8811 	msr	BASEPRI, r3
 8014c14:	f3bf 8f6f 	isb	sy
 8014c18:	f3bf 8f4f 	dsb	sy
 8014c1c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8014c1e:	bf00      	nop
 8014c20:	e7fe      	b.n	8014c20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8014c22:	f001 fb69 	bl	80162f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	681a      	ldr	r2, [r3, #0]
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014c2e:	68f9      	ldr	r1, [r7, #12]
 8014c30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014c32:	fb01 f303 	mul.w	r3, r1, r3
 8014c36:	441a      	add	r2, r3
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	2200      	movs	r2, #0
 8014c40:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	681a      	ldr	r2, [r3, #0]
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	681a      	ldr	r2, [r3, #0]
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014c52:	3b01      	subs	r3, #1
 8014c54:	68f9      	ldr	r1, [r7, #12]
 8014c56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014c58:	fb01 f303 	mul.w	r3, r1, r3
 8014c5c:	441a      	add	r2, r3
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	22ff      	movs	r2, #255	; 0xff
 8014c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	22ff      	movs	r2, #255	; 0xff
 8014c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8014c72:	683b      	ldr	r3, [r7, #0]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d114      	bne.n	8014ca2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	691b      	ldr	r3, [r3, #16]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d01a      	beq.n	8014cb6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	3310      	adds	r3, #16
 8014c84:	4618      	mov	r0, r3
 8014c86:	f001 f839 	bl	8015cfc <xTaskRemoveFromEventList>
 8014c8a:	4603      	mov	r3, r0
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d012      	beq.n	8014cb6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014c90:	4b0c      	ldr	r3, [pc, #48]	; (8014cc4 <xQueueGenericReset+0xcc>)
 8014c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c96:	601a      	str	r2, [r3, #0]
 8014c98:	f3bf 8f4f 	dsb	sy
 8014c9c:	f3bf 8f6f 	isb	sy
 8014ca0:	e009      	b.n	8014cb6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	3310      	adds	r3, #16
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	f7ff fefe 	bl	8014aa8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	3324      	adds	r3, #36	; 0x24
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f7ff fef9 	bl	8014aa8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8014cb6:	f001 fb4f 	bl	8016358 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014cba:	2301      	movs	r3, #1
}
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	3710      	adds	r7, #16
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	bd80      	pop	{r7, pc}
 8014cc4:	e000ed04 	.word	0xe000ed04

08014cc8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b08e      	sub	sp, #56	; 0x38
 8014ccc:	af02      	add	r7, sp, #8
 8014cce:	60f8      	str	r0, [r7, #12]
 8014cd0:	60b9      	str	r1, [r7, #8]
 8014cd2:	607a      	str	r2, [r7, #4]
 8014cd4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d10a      	bne.n	8014cf2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8014cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ce0:	f383 8811 	msr	BASEPRI, r3
 8014ce4:	f3bf 8f6f 	isb	sy
 8014ce8:	f3bf 8f4f 	dsb	sy
 8014cec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014cee:	bf00      	nop
 8014cf0:	e7fe      	b.n	8014cf0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8014cf2:	683b      	ldr	r3, [r7, #0]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d10a      	bne.n	8014d0e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8014cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cfc:	f383 8811 	msr	BASEPRI, r3
 8014d00:	f3bf 8f6f 	isb	sy
 8014d04:	f3bf 8f4f 	dsb	sy
 8014d08:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014d0a:	bf00      	nop
 8014d0c:	e7fe      	b.n	8014d0c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d002      	beq.n	8014d1a <xQueueGenericCreateStatic+0x52>
 8014d14:	68bb      	ldr	r3, [r7, #8]
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d001      	beq.n	8014d1e <xQueueGenericCreateStatic+0x56>
 8014d1a:	2301      	movs	r3, #1
 8014d1c:	e000      	b.n	8014d20 <xQueueGenericCreateStatic+0x58>
 8014d1e:	2300      	movs	r3, #0
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d10a      	bne.n	8014d3a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8014d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d28:	f383 8811 	msr	BASEPRI, r3
 8014d2c:	f3bf 8f6f 	isb	sy
 8014d30:	f3bf 8f4f 	dsb	sy
 8014d34:	623b      	str	r3, [r7, #32]
}
 8014d36:	bf00      	nop
 8014d38:	e7fe      	b.n	8014d38 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d102      	bne.n	8014d46 <xQueueGenericCreateStatic+0x7e>
 8014d40:	68bb      	ldr	r3, [r7, #8]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d101      	bne.n	8014d4a <xQueueGenericCreateStatic+0x82>
 8014d46:	2301      	movs	r3, #1
 8014d48:	e000      	b.n	8014d4c <xQueueGenericCreateStatic+0x84>
 8014d4a:	2300      	movs	r3, #0
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d10a      	bne.n	8014d66 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8014d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d54:	f383 8811 	msr	BASEPRI, r3
 8014d58:	f3bf 8f6f 	isb	sy
 8014d5c:	f3bf 8f4f 	dsb	sy
 8014d60:	61fb      	str	r3, [r7, #28]
}
 8014d62:	bf00      	nop
 8014d64:	e7fe      	b.n	8014d64 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8014d66:	2350      	movs	r3, #80	; 0x50
 8014d68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8014d6a:	697b      	ldr	r3, [r7, #20]
 8014d6c:	2b50      	cmp	r3, #80	; 0x50
 8014d6e:	d00a      	beq.n	8014d86 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8014d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d74:	f383 8811 	msr	BASEPRI, r3
 8014d78:	f3bf 8f6f 	isb	sy
 8014d7c:	f3bf 8f4f 	dsb	sy
 8014d80:	61bb      	str	r3, [r7, #24]
}
 8014d82:	bf00      	nop
 8014d84:	e7fe      	b.n	8014d84 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014d86:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014d88:	683b      	ldr	r3, [r7, #0]
 8014d8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8014d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d00d      	beq.n	8014dae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d94:	2201      	movs	r2, #1
 8014d96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014d9a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8014d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014da0:	9300      	str	r3, [sp, #0]
 8014da2:	4613      	mov	r3, r2
 8014da4:	687a      	ldr	r2, [r7, #4]
 8014da6:	68b9      	ldr	r1, [r7, #8]
 8014da8:	68f8      	ldr	r0, [r7, #12]
 8014daa:	f000 f83f 	bl	8014e2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8014db0:	4618      	mov	r0, r3
 8014db2:	3730      	adds	r7, #48	; 0x30
 8014db4:	46bd      	mov	sp, r7
 8014db6:	bd80      	pop	{r7, pc}

08014db8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b08a      	sub	sp, #40	; 0x28
 8014dbc:	af02      	add	r7, sp, #8
 8014dbe:	60f8      	str	r0, [r7, #12]
 8014dc0:	60b9      	str	r1, [r7, #8]
 8014dc2:	4613      	mov	r3, r2
 8014dc4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d10a      	bne.n	8014de2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8014dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dd0:	f383 8811 	msr	BASEPRI, r3
 8014dd4:	f3bf 8f6f 	isb	sy
 8014dd8:	f3bf 8f4f 	dsb	sy
 8014ddc:	613b      	str	r3, [r7, #16]
}
 8014dde:	bf00      	nop
 8014de0:	e7fe      	b.n	8014de0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	68ba      	ldr	r2, [r7, #8]
 8014de6:	fb02 f303 	mul.w	r3, r2, r3
 8014dea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014dec:	69fb      	ldr	r3, [r7, #28]
 8014dee:	3350      	adds	r3, #80	; 0x50
 8014df0:	4618      	mov	r0, r3
 8014df2:	f001 fb73 	bl	80164dc <pvPortMalloc>
 8014df6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014df8:	69bb      	ldr	r3, [r7, #24]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d011      	beq.n	8014e22 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014dfe:	69bb      	ldr	r3, [r7, #24]
 8014e00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014e02:	697b      	ldr	r3, [r7, #20]
 8014e04:	3350      	adds	r3, #80	; 0x50
 8014e06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014e08:	69bb      	ldr	r3, [r7, #24]
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014e10:	79fa      	ldrb	r2, [r7, #7]
 8014e12:	69bb      	ldr	r3, [r7, #24]
 8014e14:	9300      	str	r3, [sp, #0]
 8014e16:	4613      	mov	r3, r2
 8014e18:	697a      	ldr	r2, [r7, #20]
 8014e1a:	68b9      	ldr	r1, [r7, #8]
 8014e1c:	68f8      	ldr	r0, [r7, #12]
 8014e1e:	f000 f805 	bl	8014e2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014e22:	69bb      	ldr	r3, [r7, #24]
	}
 8014e24:	4618      	mov	r0, r3
 8014e26:	3720      	adds	r7, #32
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	bd80      	pop	{r7, pc}

08014e2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	b084      	sub	sp, #16
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	60f8      	str	r0, [r7, #12]
 8014e34:	60b9      	str	r1, [r7, #8]
 8014e36:	607a      	str	r2, [r7, #4]
 8014e38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014e3a:	68bb      	ldr	r3, [r7, #8]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d103      	bne.n	8014e48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014e40:	69bb      	ldr	r3, [r7, #24]
 8014e42:	69ba      	ldr	r2, [r7, #24]
 8014e44:	601a      	str	r2, [r3, #0]
 8014e46:	e002      	b.n	8014e4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014e48:	69bb      	ldr	r3, [r7, #24]
 8014e4a:	687a      	ldr	r2, [r7, #4]
 8014e4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014e4e:	69bb      	ldr	r3, [r7, #24]
 8014e50:	68fa      	ldr	r2, [r7, #12]
 8014e52:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014e54:	69bb      	ldr	r3, [r7, #24]
 8014e56:	68ba      	ldr	r2, [r7, #8]
 8014e58:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014e5a:	2101      	movs	r1, #1
 8014e5c:	69b8      	ldr	r0, [r7, #24]
 8014e5e:	f7ff fecb 	bl	8014bf8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8014e62:	69bb      	ldr	r3, [r7, #24]
 8014e64:	78fa      	ldrb	r2, [r7, #3]
 8014e66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014e6a:	bf00      	nop
 8014e6c:	3710      	adds	r7, #16
 8014e6e:	46bd      	mov	sp, r7
 8014e70:	bd80      	pop	{r7, pc}

08014e72 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8014e72:	b580      	push	{r7, lr}
 8014e74:	b08a      	sub	sp, #40	; 0x28
 8014e76:	af02      	add	r7, sp, #8
 8014e78:	60f8      	str	r0, [r7, #12]
 8014e7a:	60b9      	str	r1, [r7, #8]
 8014e7c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d10a      	bne.n	8014e9a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8014e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e88:	f383 8811 	msr	BASEPRI, r3
 8014e8c:	f3bf 8f6f 	isb	sy
 8014e90:	f3bf 8f4f 	dsb	sy
 8014e94:	61bb      	str	r3, [r7, #24]
}
 8014e96:	bf00      	nop
 8014e98:	e7fe      	b.n	8014e98 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8014e9a:	68ba      	ldr	r2, [r7, #8]
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	429a      	cmp	r2, r3
 8014ea0:	d90a      	bls.n	8014eb8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8014ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ea6:	f383 8811 	msr	BASEPRI, r3
 8014eaa:	f3bf 8f6f 	isb	sy
 8014eae:	f3bf 8f4f 	dsb	sy
 8014eb2:	617b      	str	r3, [r7, #20]
}
 8014eb4:	bf00      	nop
 8014eb6:	e7fe      	b.n	8014eb6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8014eb8:	2302      	movs	r3, #2
 8014eba:	9300      	str	r3, [sp, #0]
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	2100      	movs	r1, #0
 8014ec2:	68f8      	ldr	r0, [r7, #12]
 8014ec4:	f7ff ff00 	bl	8014cc8 <xQueueGenericCreateStatic>
 8014ec8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8014eca:	69fb      	ldr	r3, [r7, #28]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d002      	beq.n	8014ed6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8014ed0:	69fb      	ldr	r3, [r7, #28]
 8014ed2:	68ba      	ldr	r2, [r7, #8]
 8014ed4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8014ed6:	69fb      	ldr	r3, [r7, #28]
	}
 8014ed8:	4618      	mov	r0, r3
 8014eda:	3720      	adds	r7, #32
 8014edc:	46bd      	mov	sp, r7
 8014ede:	bd80      	pop	{r7, pc}

08014ee0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b086      	sub	sp, #24
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]
 8014ee8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d10a      	bne.n	8014f06 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8014ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ef4:	f383 8811 	msr	BASEPRI, r3
 8014ef8:	f3bf 8f6f 	isb	sy
 8014efc:	f3bf 8f4f 	dsb	sy
 8014f00:	613b      	str	r3, [r7, #16]
}
 8014f02:	bf00      	nop
 8014f04:	e7fe      	b.n	8014f04 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8014f06:	683a      	ldr	r2, [r7, #0]
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	429a      	cmp	r2, r3
 8014f0c:	d90a      	bls.n	8014f24 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8014f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f12:	f383 8811 	msr	BASEPRI, r3
 8014f16:	f3bf 8f6f 	isb	sy
 8014f1a:	f3bf 8f4f 	dsb	sy
 8014f1e:	60fb      	str	r3, [r7, #12]
}
 8014f20:	bf00      	nop
 8014f22:	e7fe      	b.n	8014f22 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8014f24:	2202      	movs	r2, #2
 8014f26:	2100      	movs	r1, #0
 8014f28:	6878      	ldr	r0, [r7, #4]
 8014f2a:	f7ff ff45 	bl	8014db8 <xQueueGenericCreate>
 8014f2e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8014f30:	697b      	ldr	r3, [r7, #20]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d002      	beq.n	8014f3c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8014f36:	697b      	ldr	r3, [r7, #20]
 8014f38:	683a      	ldr	r2, [r7, #0]
 8014f3a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8014f3c:	697b      	ldr	r3, [r7, #20]
	}
 8014f3e:	4618      	mov	r0, r3
 8014f40:	3718      	adds	r7, #24
 8014f42:	46bd      	mov	sp, r7
 8014f44:	bd80      	pop	{r7, pc}
	...

08014f48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b08e      	sub	sp, #56	; 0x38
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	60f8      	str	r0, [r7, #12]
 8014f50:	60b9      	str	r1, [r7, #8]
 8014f52:	607a      	str	r2, [r7, #4]
 8014f54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014f56:	2300      	movs	r3, #0
 8014f58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d10a      	bne.n	8014f7a <xQueueGenericSend+0x32>
	__asm volatile
 8014f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f68:	f383 8811 	msr	BASEPRI, r3
 8014f6c:	f3bf 8f6f 	isb	sy
 8014f70:	f3bf 8f4f 	dsb	sy
 8014f74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014f76:	bf00      	nop
 8014f78:	e7fe      	b.n	8014f78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014f7a:	68bb      	ldr	r3, [r7, #8]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d103      	bne.n	8014f88 <xQueueGenericSend+0x40>
 8014f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d101      	bne.n	8014f8c <xQueueGenericSend+0x44>
 8014f88:	2301      	movs	r3, #1
 8014f8a:	e000      	b.n	8014f8e <xQueueGenericSend+0x46>
 8014f8c:	2300      	movs	r3, #0
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d10a      	bne.n	8014fa8 <xQueueGenericSend+0x60>
	__asm volatile
 8014f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f96:	f383 8811 	msr	BASEPRI, r3
 8014f9a:	f3bf 8f6f 	isb	sy
 8014f9e:	f3bf 8f4f 	dsb	sy
 8014fa2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014fa4:	bf00      	nop
 8014fa6:	e7fe      	b.n	8014fa6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014fa8:	683b      	ldr	r3, [r7, #0]
 8014faa:	2b02      	cmp	r3, #2
 8014fac:	d103      	bne.n	8014fb6 <xQueueGenericSend+0x6e>
 8014fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014fb2:	2b01      	cmp	r3, #1
 8014fb4:	d101      	bne.n	8014fba <xQueueGenericSend+0x72>
 8014fb6:	2301      	movs	r3, #1
 8014fb8:	e000      	b.n	8014fbc <xQueueGenericSend+0x74>
 8014fba:	2300      	movs	r3, #0
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d10a      	bne.n	8014fd6 <xQueueGenericSend+0x8e>
	__asm volatile
 8014fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fc4:	f383 8811 	msr	BASEPRI, r3
 8014fc8:	f3bf 8f6f 	isb	sy
 8014fcc:	f3bf 8f4f 	dsb	sy
 8014fd0:	623b      	str	r3, [r7, #32]
}
 8014fd2:	bf00      	nop
 8014fd4:	e7fe      	b.n	8014fd4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014fd6:	f000 ff99 	bl	8015f0c <xTaskGetSchedulerState>
 8014fda:	4603      	mov	r3, r0
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d102      	bne.n	8014fe6 <xQueueGenericSend+0x9e>
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d101      	bne.n	8014fea <xQueueGenericSend+0xa2>
 8014fe6:	2301      	movs	r3, #1
 8014fe8:	e000      	b.n	8014fec <xQueueGenericSend+0xa4>
 8014fea:	2300      	movs	r3, #0
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d10a      	bne.n	8015006 <xQueueGenericSend+0xbe>
	__asm volatile
 8014ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ff4:	f383 8811 	msr	BASEPRI, r3
 8014ff8:	f3bf 8f6f 	isb	sy
 8014ffc:	f3bf 8f4f 	dsb	sy
 8015000:	61fb      	str	r3, [r7, #28]
}
 8015002:	bf00      	nop
 8015004:	e7fe      	b.n	8015004 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015006:	f001 f977 	bl	80162f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801500c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015012:	429a      	cmp	r2, r3
 8015014:	d302      	bcc.n	801501c <xQueueGenericSend+0xd4>
 8015016:	683b      	ldr	r3, [r7, #0]
 8015018:	2b02      	cmp	r3, #2
 801501a:	d129      	bne.n	8015070 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801501c:	683a      	ldr	r2, [r7, #0]
 801501e:	68b9      	ldr	r1, [r7, #8]
 8015020:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015022:	f000 fae4 	bl	80155ee <prvCopyDataToQueue>
 8015026:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801502c:	2b00      	cmp	r3, #0
 801502e:	d010      	beq.n	8015052 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015032:	3324      	adds	r3, #36	; 0x24
 8015034:	4618      	mov	r0, r3
 8015036:	f000 fe61 	bl	8015cfc <xTaskRemoveFromEventList>
 801503a:	4603      	mov	r3, r0
 801503c:	2b00      	cmp	r3, #0
 801503e:	d013      	beq.n	8015068 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015040:	4b3f      	ldr	r3, [pc, #252]	; (8015140 <xQueueGenericSend+0x1f8>)
 8015042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015046:	601a      	str	r2, [r3, #0]
 8015048:	f3bf 8f4f 	dsb	sy
 801504c:	f3bf 8f6f 	isb	sy
 8015050:	e00a      	b.n	8015068 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015054:	2b00      	cmp	r3, #0
 8015056:	d007      	beq.n	8015068 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015058:	4b39      	ldr	r3, [pc, #228]	; (8015140 <xQueueGenericSend+0x1f8>)
 801505a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801505e:	601a      	str	r2, [r3, #0]
 8015060:	f3bf 8f4f 	dsb	sy
 8015064:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015068:	f001 f976 	bl	8016358 <vPortExitCritical>
				return pdPASS;
 801506c:	2301      	movs	r3, #1
 801506e:	e063      	b.n	8015138 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d103      	bne.n	801507e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015076:	f001 f96f 	bl	8016358 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801507a:	2300      	movs	r3, #0
 801507c:	e05c      	b.n	8015138 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801507e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015080:	2b00      	cmp	r3, #0
 8015082:	d106      	bne.n	8015092 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015084:	f107 0314 	add.w	r3, r7, #20
 8015088:	4618      	mov	r0, r3
 801508a:	f000 fe9b 	bl	8015dc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801508e:	2301      	movs	r3, #1
 8015090:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015092:	f001 f961 	bl	8016358 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015096:	f000 fc43 	bl	8015920 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801509a:	f001 f92d 	bl	80162f8 <vPortEnterCritical>
 801509e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80150a4:	b25b      	sxtb	r3, r3
 80150a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150aa:	d103      	bne.n	80150b4 <xQueueGenericSend+0x16c>
 80150ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150ae:	2200      	movs	r2, #0
 80150b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80150b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80150ba:	b25b      	sxtb	r3, r3
 80150bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150c0:	d103      	bne.n	80150ca <xQueueGenericSend+0x182>
 80150c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150c4:	2200      	movs	r2, #0
 80150c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80150ca:	f001 f945 	bl	8016358 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80150ce:	1d3a      	adds	r2, r7, #4
 80150d0:	f107 0314 	add.w	r3, r7, #20
 80150d4:	4611      	mov	r1, r2
 80150d6:	4618      	mov	r0, r3
 80150d8:	f000 fe8a 	bl	8015df0 <xTaskCheckForTimeOut>
 80150dc:	4603      	mov	r3, r0
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d124      	bne.n	801512c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80150e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150e4:	f000 fb7b 	bl	80157de <prvIsQueueFull>
 80150e8:	4603      	mov	r3, r0
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d018      	beq.n	8015120 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80150ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150f0:	3310      	adds	r3, #16
 80150f2:	687a      	ldr	r2, [r7, #4]
 80150f4:	4611      	mov	r1, r2
 80150f6:	4618      	mov	r0, r3
 80150f8:	f000 fddc 	bl	8015cb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80150fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150fe:	f000 fb06 	bl	801570e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015102:	f000 fc1b 	bl	801593c <xTaskResumeAll>
 8015106:	4603      	mov	r3, r0
 8015108:	2b00      	cmp	r3, #0
 801510a:	f47f af7c 	bne.w	8015006 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801510e:	4b0c      	ldr	r3, [pc, #48]	; (8015140 <xQueueGenericSend+0x1f8>)
 8015110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015114:	601a      	str	r2, [r3, #0]
 8015116:	f3bf 8f4f 	dsb	sy
 801511a:	f3bf 8f6f 	isb	sy
 801511e:	e772      	b.n	8015006 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015122:	f000 faf4 	bl	801570e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015126:	f000 fc09 	bl	801593c <xTaskResumeAll>
 801512a:	e76c      	b.n	8015006 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801512c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801512e:	f000 faee 	bl	801570e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015132:	f000 fc03 	bl	801593c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015136:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015138:	4618      	mov	r0, r3
 801513a:	3738      	adds	r7, #56	; 0x38
 801513c:	46bd      	mov	sp, r7
 801513e:	bd80      	pop	{r7, pc}
 8015140:	e000ed04 	.word	0xe000ed04

08015144 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015144:	b580      	push	{r7, lr}
 8015146:	b08e      	sub	sp, #56	; 0x38
 8015148:	af00      	add	r7, sp, #0
 801514a:	6078      	str	r0, [r7, #4]
 801514c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8015152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015154:	2b00      	cmp	r3, #0
 8015156:	d10a      	bne.n	801516e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8015158:	f04f 0350 	mov.w	r3, #80	; 0x50
 801515c:	f383 8811 	msr	BASEPRI, r3
 8015160:	f3bf 8f6f 	isb	sy
 8015164:	f3bf 8f4f 	dsb	sy
 8015168:	623b      	str	r3, [r7, #32]
}
 801516a:	bf00      	nop
 801516c:	e7fe      	b.n	801516c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801516e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015172:	2b00      	cmp	r3, #0
 8015174:	d00a      	beq.n	801518c <xQueueGiveFromISR+0x48>
	__asm volatile
 8015176:	f04f 0350 	mov.w	r3, #80	; 0x50
 801517a:	f383 8811 	msr	BASEPRI, r3
 801517e:	f3bf 8f6f 	isb	sy
 8015182:	f3bf 8f4f 	dsb	sy
 8015186:	61fb      	str	r3, [r7, #28]
}
 8015188:	bf00      	nop
 801518a:	e7fe      	b.n	801518a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801518c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d103      	bne.n	801519c <xQueueGiveFromISR+0x58>
 8015194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015196:	689b      	ldr	r3, [r3, #8]
 8015198:	2b00      	cmp	r3, #0
 801519a:	d101      	bne.n	80151a0 <xQueueGiveFromISR+0x5c>
 801519c:	2301      	movs	r3, #1
 801519e:	e000      	b.n	80151a2 <xQueueGiveFromISR+0x5e>
 80151a0:	2300      	movs	r3, #0
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d10a      	bne.n	80151bc <xQueueGiveFromISR+0x78>
	__asm volatile
 80151a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151aa:	f383 8811 	msr	BASEPRI, r3
 80151ae:	f3bf 8f6f 	isb	sy
 80151b2:	f3bf 8f4f 	dsb	sy
 80151b6:	61bb      	str	r3, [r7, #24]
}
 80151b8:	bf00      	nop
 80151ba:	e7fe      	b.n	80151ba <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80151bc:	f001 f94e 	bl	801645c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80151c0:	f3ef 8211 	mrs	r2, BASEPRI
 80151c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151c8:	f383 8811 	msr	BASEPRI, r3
 80151cc:	f3bf 8f6f 	isb	sy
 80151d0:	f3bf 8f4f 	dsb	sy
 80151d4:	617a      	str	r2, [r7, #20]
 80151d6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80151d8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80151da:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80151dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80151e0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80151e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80151e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80151e8:	429a      	cmp	r2, r3
 80151ea:	d22b      	bcs.n	8015244 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80151ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80151f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80151f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151f8:	1c5a      	adds	r2, r3, #1
 80151fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151fc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80151fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015206:	d112      	bne.n	801522e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801520c:	2b00      	cmp	r3, #0
 801520e:	d016      	beq.n	801523e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015212:	3324      	adds	r3, #36	; 0x24
 8015214:	4618      	mov	r0, r3
 8015216:	f000 fd71 	bl	8015cfc <xTaskRemoveFromEventList>
 801521a:	4603      	mov	r3, r0
 801521c:	2b00      	cmp	r3, #0
 801521e:	d00e      	beq.n	801523e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015220:	683b      	ldr	r3, [r7, #0]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d00b      	beq.n	801523e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015226:	683b      	ldr	r3, [r7, #0]
 8015228:	2201      	movs	r2, #1
 801522a:	601a      	str	r2, [r3, #0]
 801522c:	e007      	b.n	801523e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801522e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015232:	3301      	adds	r3, #1
 8015234:	b2db      	uxtb	r3, r3
 8015236:	b25a      	sxtb	r2, r3
 8015238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801523a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801523e:	2301      	movs	r3, #1
 8015240:	637b      	str	r3, [r7, #52]	; 0x34
 8015242:	e001      	b.n	8015248 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015244:	2300      	movs	r3, #0
 8015246:	637b      	str	r3, [r7, #52]	; 0x34
 8015248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801524a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015252:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015256:	4618      	mov	r0, r3
 8015258:	3738      	adds	r7, #56	; 0x38
 801525a:	46bd      	mov	sp, r7
 801525c:	bd80      	pop	{r7, pc}
	...

08015260 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8015260:	b580      	push	{r7, lr}
 8015262:	b08e      	sub	sp, #56	; 0x38
 8015264:	af00      	add	r7, sp, #0
 8015266:	6078      	str	r0, [r7, #4]
 8015268:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801526a:	2300      	movs	r3, #0
 801526c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8015272:	2300      	movs	r3, #0
 8015274:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015278:	2b00      	cmp	r3, #0
 801527a:	d10a      	bne.n	8015292 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801527c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015280:	f383 8811 	msr	BASEPRI, r3
 8015284:	f3bf 8f6f 	isb	sy
 8015288:	f3bf 8f4f 	dsb	sy
 801528c:	623b      	str	r3, [r7, #32]
}
 801528e:	bf00      	nop
 8015290:	e7fe      	b.n	8015290 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015296:	2b00      	cmp	r3, #0
 8015298:	d00a      	beq.n	80152b0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801529a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801529e:	f383 8811 	msr	BASEPRI, r3
 80152a2:	f3bf 8f6f 	isb	sy
 80152a6:	f3bf 8f4f 	dsb	sy
 80152aa:	61fb      	str	r3, [r7, #28]
}
 80152ac:	bf00      	nop
 80152ae:	e7fe      	b.n	80152ae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80152b0:	f000 fe2c 	bl	8015f0c <xTaskGetSchedulerState>
 80152b4:	4603      	mov	r3, r0
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d102      	bne.n	80152c0 <xQueueSemaphoreTake+0x60>
 80152ba:	683b      	ldr	r3, [r7, #0]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d101      	bne.n	80152c4 <xQueueSemaphoreTake+0x64>
 80152c0:	2301      	movs	r3, #1
 80152c2:	e000      	b.n	80152c6 <xQueueSemaphoreTake+0x66>
 80152c4:	2300      	movs	r3, #0
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d10a      	bne.n	80152e0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80152ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152ce:	f383 8811 	msr	BASEPRI, r3
 80152d2:	f3bf 8f6f 	isb	sy
 80152d6:	f3bf 8f4f 	dsb	sy
 80152da:	61bb      	str	r3, [r7, #24]
}
 80152dc:	bf00      	nop
 80152de:	e7fe      	b.n	80152de <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80152e0:	f001 f80a 	bl	80162f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80152e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80152e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80152ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d024      	beq.n	801533a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80152f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152f2:	1e5a      	subs	r2, r3, #1
 80152f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80152f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d104      	bne.n	801530a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8015300:	f000 ff7a 	bl	80161f8 <pvTaskIncrementMutexHeldCount>
 8015304:	4602      	mov	r2, r0
 8015306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015308:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801530a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801530c:	691b      	ldr	r3, [r3, #16]
 801530e:	2b00      	cmp	r3, #0
 8015310:	d00f      	beq.n	8015332 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015314:	3310      	adds	r3, #16
 8015316:	4618      	mov	r0, r3
 8015318:	f000 fcf0 	bl	8015cfc <xTaskRemoveFromEventList>
 801531c:	4603      	mov	r3, r0
 801531e:	2b00      	cmp	r3, #0
 8015320:	d007      	beq.n	8015332 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015322:	4b54      	ldr	r3, [pc, #336]	; (8015474 <xQueueSemaphoreTake+0x214>)
 8015324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015328:	601a      	str	r2, [r3, #0]
 801532a:	f3bf 8f4f 	dsb	sy
 801532e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015332:	f001 f811 	bl	8016358 <vPortExitCritical>
				return pdPASS;
 8015336:	2301      	movs	r3, #1
 8015338:	e097      	b.n	801546a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801533a:	683b      	ldr	r3, [r7, #0]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d111      	bne.n	8015364 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8015340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015342:	2b00      	cmp	r3, #0
 8015344:	d00a      	beq.n	801535c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8015346:	f04f 0350 	mov.w	r3, #80	; 0x50
 801534a:	f383 8811 	msr	BASEPRI, r3
 801534e:	f3bf 8f6f 	isb	sy
 8015352:	f3bf 8f4f 	dsb	sy
 8015356:	617b      	str	r3, [r7, #20]
}
 8015358:	bf00      	nop
 801535a:	e7fe      	b.n	801535a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801535c:	f000 fffc 	bl	8016358 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015360:	2300      	movs	r3, #0
 8015362:	e082      	b.n	801546a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015366:	2b00      	cmp	r3, #0
 8015368:	d106      	bne.n	8015378 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801536a:	f107 030c 	add.w	r3, r7, #12
 801536e:	4618      	mov	r0, r3
 8015370:	f000 fd28 	bl	8015dc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015374:	2301      	movs	r3, #1
 8015376:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015378:	f000 ffee 	bl	8016358 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801537c:	f000 fad0 	bl	8015920 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015380:	f000 ffba 	bl	80162f8 <vPortEnterCritical>
 8015384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015386:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801538a:	b25b      	sxtb	r3, r3
 801538c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015390:	d103      	bne.n	801539a <xQueueSemaphoreTake+0x13a>
 8015392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015394:	2200      	movs	r2, #0
 8015396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801539a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801539c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80153a0:	b25b      	sxtb	r3, r3
 80153a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153a6:	d103      	bne.n	80153b0 <xQueueSemaphoreTake+0x150>
 80153a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153aa:	2200      	movs	r2, #0
 80153ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80153b0:	f000 ffd2 	bl	8016358 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80153b4:	463a      	mov	r2, r7
 80153b6:	f107 030c 	add.w	r3, r7, #12
 80153ba:	4611      	mov	r1, r2
 80153bc:	4618      	mov	r0, r3
 80153be:	f000 fd17 	bl	8015df0 <xTaskCheckForTimeOut>
 80153c2:	4603      	mov	r3, r0
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d132      	bne.n	801542e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80153c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80153ca:	f000 f9f2 	bl	80157b2 <prvIsQueueEmpty>
 80153ce:	4603      	mov	r3, r0
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d026      	beq.n	8015422 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80153d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d109      	bne.n	80153f0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80153dc:	f000 ff8c 	bl	80162f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80153e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153e2:	689b      	ldr	r3, [r3, #8]
 80153e4:	4618      	mov	r0, r3
 80153e6:	f000 fdaf 	bl	8015f48 <xTaskPriorityInherit>
 80153ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80153ec:	f000 ffb4 	bl	8016358 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80153f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153f2:	3324      	adds	r3, #36	; 0x24
 80153f4:	683a      	ldr	r2, [r7, #0]
 80153f6:	4611      	mov	r1, r2
 80153f8:	4618      	mov	r0, r3
 80153fa:	f000 fc5b 	bl	8015cb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80153fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015400:	f000 f985 	bl	801570e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015404:	f000 fa9a 	bl	801593c <xTaskResumeAll>
 8015408:	4603      	mov	r3, r0
 801540a:	2b00      	cmp	r3, #0
 801540c:	f47f af68 	bne.w	80152e0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8015410:	4b18      	ldr	r3, [pc, #96]	; (8015474 <xQueueSemaphoreTake+0x214>)
 8015412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015416:	601a      	str	r2, [r3, #0]
 8015418:	f3bf 8f4f 	dsb	sy
 801541c:	f3bf 8f6f 	isb	sy
 8015420:	e75e      	b.n	80152e0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8015422:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015424:	f000 f973 	bl	801570e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015428:	f000 fa88 	bl	801593c <xTaskResumeAll>
 801542c:	e758      	b.n	80152e0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801542e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015430:	f000 f96d 	bl	801570e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015434:	f000 fa82 	bl	801593c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015438:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801543a:	f000 f9ba 	bl	80157b2 <prvIsQueueEmpty>
 801543e:	4603      	mov	r3, r0
 8015440:	2b00      	cmp	r3, #0
 8015442:	f43f af4d 	beq.w	80152e0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8015446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015448:	2b00      	cmp	r3, #0
 801544a:	d00d      	beq.n	8015468 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801544c:	f000 ff54 	bl	80162f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8015450:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015452:	f000 f8b4 	bl	80155be <prvGetDisinheritPriorityAfterTimeout>
 8015456:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8015458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801545a:	689b      	ldr	r3, [r3, #8]
 801545c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801545e:	4618      	mov	r0, r3
 8015460:	f000 fe48 	bl	80160f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8015464:	f000 ff78 	bl	8016358 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015468:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801546a:	4618      	mov	r0, r3
 801546c:	3738      	adds	r7, #56	; 0x38
 801546e:	46bd      	mov	sp, r7
 8015470:	bd80      	pop	{r7, pc}
 8015472:	bf00      	nop
 8015474:	e000ed04 	.word	0xe000ed04

08015478 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015478:	b580      	push	{r7, lr}
 801547a:	b08e      	sub	sp, #56	; 0x38
 801547c:	af00      	add	r7, sp, #0
 801547e:	60f8      	str	r0, [r7, #12]
 8015480:	60b9      	str	r1, [r7, #8]
 8015482:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801548a:	2b00      	cmp	r3, #0
 801548c:	d10a      	bne.n	80154a4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801548e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015492:	f383 8811 	msr	BASEPRI, r3
 8015496:	f3bf 8f6f 	isb	sy
 801549a:	f3bf 8f4f 	dsb	sy
 801549e:	623b      	str	r3, [r7, #32]
}
 80154a0:	bf00      	nop
 80154a2:	e7fe      	b.n	80154a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80154a4:	68bb      	ldr	r3, [r7, #8]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d103      	bne.n	80154b2 <xQueueReceiveFromISR+0x3a>
 80154aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d101      	bne.n	80154b6 <xQueueReceiveFromISR+0x3e>
 80154b2:	2301      	movs	r3, #1
 80154b4:	e000      	b.n	80154b8 <xQueueReceiveFromISR+0x40>
 80154b6:	2300      	movs	r3, #0
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d10a      	bne.n	80154d2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80154bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154c0:	f383 8811 	msr	BASEPRI, r3
 80154c4:	f3bf 8f6f 	isb	sy
 80154c8:	f3bf 8f4f 	dsb	sy
 80154cc:	61fb      	str	r3, [r7, #28]
}
 80154ce:	bf00      	nop
 80154d0:	e7fe      	b.n	80154d0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80154d2:	f000 ffc3 	bl	801645c <vPortValidateInterruptPriority>
	__asm volatile
 80154d6:	f3ef 8211 	mrs	r2, BASEPRI
 80154da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154de:	f383 8811 	msr	BASEPRI, r3
 80154e2:	f3bf 8f6f 	isb	sy
 80154e6:	f3bf 8f4f 	dsb	sy
 80154ea:	61ba      	str	r2, [r7, #24]
 80154ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80154ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80154f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80154f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80154f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80154f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d02f      	beq.n	801555e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80154fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015500:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015508:	68b9      	ldr	r1, [r7, #8]
 801550a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801550c:	f000 f8d9 	bl	80156c2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015512:	1e5a      	subs	r2, r3, #1
 8015514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015516:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015518:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801551c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015520:	d112      	bne.n	8015548 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015524:	691b      	ldr	r3, [r3, #16]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d016      	beq.n	8015558 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801552c:	3310      	adds	r3, #16
 801552e:	4618      	mov	r0, r3
 8015530:	f000 fbe4 	bl	8015cfc <xTaskRemoveFromEventList>
 8015534:	4603      	mov	r3, r0
 8015536:	2b00      	cmp	r3, #0
 8015538:	d00e      	beq.n	8015558 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d00b      	beq.n	8015558 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	2201      	movs	r2, #1
 8015544:	601a      	str	r2, [r3, #0]
 8015546:	e007      	b.n	8015558 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801554c:	3301      	adds	r3, #1
 801554e:	b2db      	uxtb	r3, r3
 8015550:	b25a      	sxtb	r2, r3
 8015552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8015558:	2301      	movs	r3, #1
 801555a:	637b      	str	r3, [r7, #52]	; 0x34
 801555c:	e001      	b.n	8015562 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801555e:	2300      	movs	r3, #0
 8015560:	637b      	str	r3, [r7, #52]	; 0x34
 8015562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015564:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015566:	693b      	ldr	r3, [r7, #16]
 8015568:	f383 8811 	msr	BASEPRI, r3
}
 801556c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801556e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015570:	4618      	mov	r0, r3
 8015572:	3738      	adds	r7, #56	; 0x38
 8015574:	46bd      	mov	sp, r7
 8015576:	bd80      	pop	{r7, pc}

08015578 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8015578:	b580      	push	{r7, lr}
 801557a:	b084      	sub	sp, #16
 801557c:	af00      	add	r7, sp, #0
 801557e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	2b00      	cmp	r3, #0
 8015588:	d10a      	bne.n	80155a0 <vQueueDelete+0x28>
	__asm volatile
 801558a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801558e:	f383 8811 	msr	BASEPRI, r3
 8015592:	f3bf 8f6f 	isb	sy
 8015596:	f3bf 8f4f 	dsb	sy
 801559a:	60bb      	str	r3, [r7, #8]
}
 801559c:	bf00      	nop
 801559e:	e7fe      	b.n	801559e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80155a0:	68f8      	ldr	r0, [r7, #12]
 80155a2:	f000 f95f 	bl	8015864 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d102      	bne.n	80155b6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80155b0:	68f8      	ldr	r0, [r7, #12]
 80155b2:	f001 f85f 	bl	8016674 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80155b6:	bf00      	nop
 80155b8:	3710      	adds	r7, #16
 80155ba:	46bd      	mov	sp, r7
 80155bc:	bd80      	pop	{r7, pc}

080155be <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80155be:	b480      	push	{r7}
 80155c0:	b085      	sub	sp, #20
 80155c2:	af00      	add	r7, sp, #0
 80155c4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d006      	beq.n	80155dc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80155d8:	60fb      	str	r3, [r7, #12]
 80155da:	e001      	b.n	80155e0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80155dc:	2300      	movs	r3, #0
 80155de:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80155e0:	68fb      	ldr	r3, [r7, #12]
	}
 80155e2:	4618      	mov	r0, r3
 80155e4:	3714      	adds	r7, #20
 80155e6:	46bd      	mov	sp, r7
 80155e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ec:	4770      	bx	lr

080155ee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80155ee:	b580      	push	{r7, lr}
 80155f0:	b086      	sub	sp, #24
 80155f2:	af00      	add	r7, sp, #0
 80155f4:	60f8      	str	r0, [r7, #12]
 80155f6:	60b9      	str	r1, [r7, #8]
 80155f8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80155fa:	2300      	movs	r3, #0
 80155fc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015602:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015608:	2b00      	cmp	r3, #0
 801560a:	d10d      	bne.n	8015628 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	2b00      	cmp	r3, #0
 8015612:	d14d      	bne.n	80156b0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	689b      	ldr	r3, [r3, #8]
 8015618:	4618      	mov	r0, r3
 801561a:	f000 fcfd 	bl	8016018 <xTaskPriorityDisinherit>
 801561e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	2200      	movs	r2, #0
 8015624:	609a      	str	r2, [r3, #8]
 8015626:	e043      	b.n	80156b0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d119      	bne.n	8015662 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	6858      	ldr	r0, [r3, #4]
 8015632:	68fb      	ldr	r3, [r7, #12]
 8015634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015636:	461a      	mov	r2, r3
 8015638:	68b9      	ldr	r1, [r7, #8]
 801563a:	f001 fde3 	bl	8017204 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	685a      	ldr	r2, [r3, #4]
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015646:	441a      	add	r2, r3
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	685a      	ldr	r2, [r3, #4]
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	689b      	ldr	r3, [r3, #8]
 8015654:	429a      	cmp	r2, r3
 8015656:	d32b      	bcc.n	80156b0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	681a      	ldr	r2, [r3, #0]
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	605a      	str	r2, [r3, #4]
 8015660:	e026      	b.n	80156b0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	68d8      	ldr	r0, [r3, #12]
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801566a:	461a      	mov	r2, r3
 801566c:	68b9      	ldr	r1, [r7, #8]
 801566e:	f001 fdc9 	bl	8017204 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	68da      	ldr	r2, [r3, #12]
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801567a:	425b      	negs	r3, r3
 801567c:	441a      	add	r2, r3
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	68da      	ldr	r2, [r3, #12]
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	429a      	cmp	r2, r3
 801568c:	d207      	bcs.n	801569e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	689a      	ldr	r2, [r3, #8]
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015696:	425b      	negs	r3, r3
 8015698:	441a      	add	r2, r3
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	2b02      	cmp	r3, #2
 80156a2:	d105      	bne.n	80156b0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80156a4:	693b      	ldr	r3, [r7, #16]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d002      	beq.n	80156b0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80156aa:	693b      	ldr	r3, [r7, #16]
 80156ac:	3b01      	subs	r3, #1
 80156ae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80156b0:	693b      	ldr	r3, [r7, #16]
 80156b2:	1c5a      	adds	r2, r3, #1
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80156b8:	697b      	ldr	r3, [r7, #20]
}
 80156ba:	4618      	mov	r0, r3
 80156bc:	3718      	adds	r7, #24
 80156be:	46bd      	mov	sp, r7
 80156c0:	bd80      	pop	{r7, pc}

080156c2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80156c2:	b580      	push	{r7, lr}
 80156c4:	b082      	sub	sp, #8
 80156c6:	af00      	add	r7, sp, #0
 80156c8:	6078      	str	r0, [r7, #4]
 80156ca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d018      	beq.n	8015706 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	68da      	ldr	r2, [r3, #12]
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156dc:	441a      	add	r2, r3
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	68da      	ldr	r2, [r3, #12]
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	689b      	ldr	r3, [r3, #8]
 80156ea:	429a      	cmp	r2, r3
 80156ec:	d303      	bcc.n	80156f6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	681a      	ldr	r2, [r3, #0]
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	68d9      	ldr	r1, [r3, #12]
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156fe:	461a      	mov	r2, r3
 8015700:	6838      	ldr	r0, [r7, #0]
 8015702:	f001 fd7f 	bl	8017204 <memcpy>
	}
}
 8015706:	bf00      	nop
 8015708:	3708      	adds	r7, #8
 801570a:	46bd      	mov	sp, r7
 801570c:	bd80      	pop	{r7, pc}

0801570e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801570e:	b580      	push	{r7, lr}
 8015710:	b084      	sub	sp, #16
 8015712:	af00      	add	r7, sp, #0
 8015714:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015716:	f000 fdef 	bl	80162f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015720:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015722:	e011      	b.n	8015748 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015728:	2b00      	cmp	r3, #0
 801572a:	d012      	beq.n	8015752 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	3324      	adds	r3, #36	; 0x24
 8015730:	4618      	mov	r0, r3
 8015732:	f000 fae3 	bl	8015cfc <xTaskRemoveFromEventList>
 8015736:	4603      	mov	r3, r0
 8015738:	2b00      	cmp	r3, #0
 801573a:	d001      	beq.n	8015740 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801573c:	f000 fbba 	bl	8015eb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015740:	7bfb      	ldrb	r3, [r7, #15]
 8015742:	3b01      	subs	r3, #1
 8015744:	b2db      	uxtb	r3, r3
 8015746:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015748:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801574c:	2b00      	cmp	r3, #0
 801574e:	dce9      	bgt.n	8015724 <prvUnlockQueue+0x16>
 8015750:	e000      	b.n	8015754 <prvUnlockQueue+0x46>
					break;
 8015752:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	22ff      	movs	r2, #255	; 0xff
 8015758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801575c:	f000 fdfc 	bl	8016358 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015760:	f000 fdca 	bl	80162f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801576a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801576c:	e011      	b.n	8015792 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	691b      	ldr	r3, [r3, #16]
 8015772:	2b00      	cmp	r3, #0
 8015774:	d012      	beq.n	801579c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	3310      	adds	r3, #16
 801577a:	4618      	mov	r0, r3
 801577c:	f000 fabe 	bl	8015cfc <xTaskRemoveFromEventList>
 8015780:	4603      	mov	r3, r0
 8015782:	2b00      	cmp	r3, #0
 8015784:	d001      	beq.n	801578a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015786:	f000 fb95 	bl	8015eb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801578a:	7bbb      	ldrb	r3, [r7, #14]
 801578c:	3b01      	subs	r3, #1
 801578e:	b2db      	uxtb	r3, r3
 8015790:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015792:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015796:	2b00      	cmp	r3, #0
 8015798:	dce9      	bgt.n	801576e <prvUnlockQueue+0x60>
 801579a:	e000      	b.n	801579e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801579c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	22ff      	movs	r2, #255	; 0xff
 80157a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80157a6:	f000 fdd7 	bl	8016358 <vPortExitCritical>
}
 80157aa:	bf00      	nop
 80157ac:	3710      	adds	r7, #16
 80157ae:	46bd      	mov	sp, r7
 80157b0:	bd80      	pop	{r7, pc}

080157b2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80157b2:	b580      	push	{r7, lr}
 80157b4:	b084      	sub	sp, #16
 80157b6:	af00      	add	r7, sp, #0
 80157b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80157ba:	f000 fd9d 	bl	80162f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d102      	bne.n	80157cc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80157c6:	2301      	movs	r3, #1
 80157c8:	60fb      	str	r3, [r7, #12]
 80157ca:	e001      	b.n	80157d0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80157cc:	2300      	movs	r3, #0
 80157ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80157d0:	f000 fdc2 	bl	8016358 <vPortExitCritical>

	return xReturn;
 80157d4:	68fb      	ldr	r3, [r7, #12]
}
 80157d6:	4618      	mov	r0, r3
 80157d8:	3710      	adds	r7, #16
 80157da:	46bd      	mov	sp, r7
 80157dc:	bd80      	pop	{r7, pc}

080157de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80157de:	b580      	push	{r7, lr}
 80157e0:	b084      	sub	sp, #16
 80157e2:	af00      	add	r7, sp, #0
 80157e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80157e6:	f000 fd87 	bl	80162f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80157f2:	429a      	cmp	r2, r3
 80157f4:	d102      	bne.n	80157fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80157f6:	2301      	movs	r3, #1
 80157f8:	60fb      	str	r3, [r7, #12]
 80157fa:	e001      	b.n	8015800 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80157fc:	2300      	movs	r3, #0
 80157fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015800:	f000 fdaa 	bl	8016358 <vPortExitCritical>

	return xReturn;
 8015804:	68fb      	ldr	r3, [r7, #12]
}
 8015806:	4618      	mov	r0, r3
 8015808:	3710      	adds	r7, #16
 801580a:	46bd      	mov	sp, r7
 801580c:	bd80      	pop	{r7, pc}
	...

08015810 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8015810:	b480      	push	{r7}
 8015812:	b085      	sub	sp, #20
 8015814:	af00      	add	r7, sp, #0
 8015816:	6078      	str	r0, [r7, #4]
 8015818:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801581a:	2300      	movs	r3, #0
 801581c:	60fb      	str	r3, [r7, #12]
 801581e:	e014      	b.n	801584a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8015820:	4a0f      	ldr	r2, [pc, #60]	; (8015860 <vQueueAddToRegistry+0x50>)
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d10b      	bne.n	8015844 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801582c:	490c      	ldr	r1, [pc, #48]	; (8015860 <vQueueAddToRegistry+0x50>)
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	683a      	ldr	r2, [r7, #0]
 8015832:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8015836:	4a0a      	ldr	r2, [pc, #40]	; (8015860 <vQueueAddToRegistry+0x50>)
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	00db      	lsls	r3, r3, #3
 801583c:	4413      	add	r3, r2
 801583e:	687a      	ldr	r2, [r7, #4]
 8015840:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8015842:	e006      	b.n	8015852 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	3301      	adds	r3, #1
 8015848:	60fb      	str	r3, [r7, #12]
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	2b07      	cmp	r3, #7
 801584e:	d9e7      	bls.n	8015820 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8015850:	bf00      	nop
 8015852:	bf00      	nop
 8015854:	3714      	adds	r7, #20
 8015856:	46bd      	mov	sp, r7
 8015858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585c:	4770      	bx	lr
 801585e:	bf00      	nop
 8015860:	20006794 	.word	0x20006794

08015864 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8015864:	b480      	push	{r7}
 8015866:	b085      	sub	sp, #20
 8015868:	af00      	add	r7, sp, #0
 801586a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801586c:	2300      	movs	r3, #0
 801586e:	60fb      	str	r3, [r7, #12]
 8015870:	e016      	b.n	80158a0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8015872:	4a10      	ldr	r2, [pc, #64]	; (80158b4 <vQueueUnregisterQueue+0x50>)
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	00db      	lsls	r3, r3, #3
 8015878:	4413      	add	r3, r2
 801587a:	685b      	ldr	r3, [r3, #4]
 801587c:	687a      	ldr	r2, [r7, #4]
 801587e:	429a      	cmp	r2, r3
 8015880:	d10b      	bne.n	801589a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8015882:	4a0c      	ldr	r2, [pc, #48]	; (80158b4 <vQueueUnregisterQueue+0x50>)
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	2100      	movs	r1, #0
 8015888:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801588c:	4a09      	ldr	r2, [pc, #36]	; (80158b4 <vQueueUnregisterQueue+0x50>)
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	00db      	lsls	r3, r3, #3
 8015892:	4413      	add	r3, r2
 8015894:	2200      	movs	r2, #0
 8015896:	605a      	str	r2, [r3, #4]
				break;
 8015898:	e006      	b.n	80158a8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	3301      	adds	r3, #1
 801589e:	60fb      	str	r3, [r7, #12]
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	2b07      	cmp	r3, #7
 80158a4:	d9e5      	bls.n	8015872 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80158a6:	bf00      	nop
 80158a8:	bf00      	nop
 80158aa:	3714      	adds	r7, #20
 80158ac:	46bd      	mov	sp, r7
 80158ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b2:	4770      	bx	lr
 80158b4:	20006794 	.word	0x20006794

080158b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80158b8:	b580      	push	{r7, lr}
 80158ba:	b084      	sub	sp, #16
 80158bc:	af00      	add	r7, sp, #0
 80158be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80158c0:	2300      	movs	r3, #0
 80158c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d017      	beq.n	80158fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80158ca:	4b13      	ldr	r3, [pc, #76]	; (8015918 <vTaskDelay+0x60>)
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d00a      	beq.n	80158e8 <vTaskDelay+0x30>
	__asm volatile
 80158d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158d6:	f383 8811 	msr	BASEPRI, r3
 80158da:	f3bf 8f6f 	isb	sy
 80158de:	f3bf 8f4f 	dsb	sy
 80158e2:	60bb      	str	r3, [r7, #8]
}
 80158e4:	bf00      	nop
 80158e6:	e7fe      	b.n	80158e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80158e8:	f000 f81a 	bl	8015920 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80158ec:	2100      	movs	r1, #0
 80158ee:	6878      	ldr	r0, [r7, #4]
 80158f0:	f000 fc96 	bl	8016220 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80158f4:	f000 f822 	bl	801593c <xTaskResumeAll>
 80158f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d107      	bne.n	8015910 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8015900:	4b06      	ldr	r3, [pc, #24]	; (801591c <vTaskDelay+0x64>)
 8015902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015906:	601a      	str	r2, [r3, #0]
 8015908:	f3bf 8f4f 	dsb	sy
 801590c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015910:	bf00      	nop
 8015912:	3710      	adds	r7, #16
 8015914:	46bd      	mov	sp, r7
 8015916:	bd80      	pop	{r7, pc}
 8015918:	20000bb0 	.word	0x20000bb0
 801591c:	e000ed04 	.word	0xe000ed04

08015920 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015920:	b480      	push	{r7}
 8015922:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8015924:	4b04      	ldr	r3, [pc, #16]	; (8015938 <vTaskSuspendAll+0x18>)
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	3301      	adds	r3, #1
 801592a:	4a03      	ldr	r2, [pc, #12]	; (8015938 <vTaskSuspendAll+0x18>)
 801592c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801592e:	bf00      	nop
 8015930:	46bd      	mov	sp, r7
 8015932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015936:	4770      	bx	lr
 8015938:	20000bb0 	.word	0x20000bb0

0801593c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801593c:	b580      	push	{r7, lr}
 801593e:	b084      	sub	sp, #16
 8015940:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015942:	2300      	movs	r3, #0
 8015944:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015946:	2300      	movs	r3, #0
 8015948:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801594a:	4b42      	ldr	r3, [pc, #264]	; (8015a54 <xTaskResumeAll+0x118>)
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d10a      	bne.n	8015968 <xTaskResumeAll+0x2c>
	__asm volatile
 8015952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015956:	f383 8811 	msr	BASEPRI, r3
 801595a:	f3bf 8f6f 	isb	sy
 801595e:	f3bf 8f4f 	dsb	sy
 8015962:	603b      	str	r3, [r7, #0]
}
 8015964:	bf00      	nop
 8015966:	e7fe      	b.n	8015966 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015968:	f000 fcc6 	bl	80162f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801596c:	4b39      	ldr	r3, [pc, #228]	; (8015a54 <xTaskResumeAll+0x118>)
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	3b01      	subs	r3, #1
 8015972:	4a38      	ldr	r2, [pc, #224]	; (8015a54 <xTaskResumeAll+0x118>)
 8015974:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015976:	4b37      	ldr	r3, [pc, #220]	; (8015a54 <xTaskResumeAll+0x118>)
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	2b00      	cmp	r3, #0
 801597c:	d162      	bne.n	8015a44 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801597e:	4b36      	ldr	r3, [pc, #216]	; (8015a58 <xTaskResumeAll+0x11c>)
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	2b00      	cmp	r3, #0
 8015984:	d05e      	beq.n	8015a44 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015986:	e02f      	b.n	80159e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015988:	4b34      	ldr	r3, [pc, #208]	; (8015a5c <xTaskResumeAll+0x120>)
 801598a:	68db      	ldr	r3, [r3, #12]
 801598c:	68db      	ldr	r3, [r3, #12]
 801598e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	3318      	adds	r3, #24
 8015994:	4618      	mov	r0, r3
 8015996:	f7ff f904 	bl	8014ba2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	3304      	adds	r3, #4
 801599e:	4618      	mov	r0, r3
 80159a0:	f7ff f8ff 	bl	8014ba2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159a8:	4b2d      	ldr	r3, [pc, #180]	; (8015a60 <xTaskResumeAll+0x124>)
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	429a      	cmp	r2, r3
 80159ae:	d903      	bls.n	80159b8 <xTaskResumeAll+0x7c>
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159b4:	4a2a      	ldr	r2, [pc, #168]	; (8015a60 <xTaskResumeAll+0x124>)
 80159b6:	6013      	str	r3, [r2, #0]
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159bc:	4613      	mov	r3, r2
 80159be:	009b      	lsls	r3, r3, #2
 80159c0:	4413      	add	r3, r2
 80159c2:	009b      	lsls	r3, r3, #2
 80159c4:	4a27      	ldr	r2, [pc, #156]	; (8015a64 <xTaskResumeAll+0x128>)
 80159c6:	441a      	add	r2, r3
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	3304      	adds	r3, #4
 80159cc:	4619      	mov	r1, r3
 80159ce:	4610      	mov	r0, r2
 80159d0:	f7ff f88a 	bl	8014ae8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159d8:	4b23      	ldr	r3, [pc, #140]	; (8015a68 <xTaskResumeAll+0x12c>)
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159de:	429a      	cmp	r2, r3
 80159e0:	d302      	bcc.n	80159e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80159e2:	4b22      	ldr	r3, [pc, #136]	; (8015a6c <xTaskResumeAll+0x130>)
 80159e4:	2201      	movs	r2, #1
 80159e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80159e8:	4b1c      	ldr	r3, [pc, #112]	; (8015a5c <xTaskResumeAll+0x120>)
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d1cb      	bne.n	8015988 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d001      	beq.n	80159fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80159f6:	f000 fa69 	bl	8015ecc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80159fa:	4b1d      	ldr	r3, [pc, #116]	; (8015a70 <xTaskResumeAll+0x134>)
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d010      	beq.n	8015a28 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015a06:	f000 f837 	bl	8015a78 <xTaskIncrementTick>
 8015a0a:	4603      	mov	r3, r0
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d002      	beq.n	8015a16 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8015a10:	4b16      	ldr	r3, [pc, #88]	; (8015a6c <xTaskResumeAll+0x130>)
 8015a12:	2201      	movs	r2, #1
 8015a14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	3b01      	subs	r3, #1
 8015a1a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d1f1      	bne.n	8015a06 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8015a22:	4b13      	ldr	r3, [pc, #76]	; (8015a70 <xTaskResumeAll+0x134>)
 8015a24:	2200      	movs	r2, #0
 8015a26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015a28:	4b10      	ldr	r3, [pc, #64]	; (8015a6c <xTaskResumeAll+0x130>)
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d009      	beq.n	8015a44 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015a30:	2301      	movs	r3, #1
 8015a32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015a34:	4b0f      	ldr	r3, [pc, #60]	; (8015a74 <xTaskResumeAll+0x138>)
 8015a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a3a:	601a      	str	r2, [r3, #0]
 8015a3c:	f3bf 8f4f 	dsb	sy
 8015a40:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015a44:	f000 fc88 	bl	8016358 <vPortExitCritical>

	return xAlreadyYielded;
 8015a48:	68bb      	ldr	r3, [r7, #8]
}
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	3710      	adds	r7, #16
 8015a4e:	46bd      	mov	sp, r7
 8015a50:	bd80      	pop	{r7, pc}
 8015a52:	bf00      	nop
 8015a54:	20000bb0 	.word	0x20000bb0
 8015a58:	20000b90 	.word	0x20000b90
 8015a5c:	20000b68 	.word	0x20000b68
 8015a60:	20000b98 	.word	0x20000b98
 8015a64:	20000700 	.word	0x20000700
 8015a68:	200006fc 	.word	0x200006fc
 8015a6c:	20000ba4 	.word	0x20000ba4
 8015a70:	20000ba0 	.word	0x20000ba0
 8015a74:	e000ed04 	.word	0xe000ed04

08015a78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015a78:	b580      	push	{r7, lr}
 8015a7a:	b086      	sub	sp, #24
 8015a7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015a7e:	2300      	movs	r3, #0
 8015a80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015a82:	4b4f      	ldr	r3, [pc, #316]	; (8015bc0 <xTaskIncrementTick+0x148>)
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	f040 808f 	bne.w	8015baa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015a8c:	4b4d      	ldr	r3, [pc, #308]	; (8015bc4 <xTaskIncrementTick+0x14c>)
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	3301      	adds	r3, #1
 8015a92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015a94:	4a4b      	ldr	r2, [pc, #300]	; (8015bc4 <xTaskIncrementTick+0x14c>)
 8015a96:	693b      	ldr	r3, [r7, #16]
 8015a98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015a9a:	693b      	ldr	r3, [r7, #16]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d120      	bne.n	8015ae2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8015aa0:	4b49      	ldr	r3, [pc, #292]	; (8015bc8 <xTaskIncrementTick+0x150>)
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d00a      	beq.n	8015ac0 <xTaskIncrementTick+0x48>
	__asm volatile
 8015aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015aae:	f383 8811 	msr	BASEPRI, r3
 8015ab2:	f3bf 8f6f 	isb	sy
 8015ab6:	f3bf 8f4f 	dsb	sy
 8015aba:	603b      	str	r3, [r7, #0]
}
 8015abc:	bf00      	nop
 8015abe:	e7fe      	b.n	8015abe <xTaskIncrementTick+0x46>
 8015ac0:	4b41      	ldr	r3, [pc, #260]	; (8015bc8 <xTaskIncrementTick+0x150>)
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	60fb      	str	r3, [r7, #12]
 8015ac6:	4b41      	ldr	r3, [pc, #260]	; (8015bcc <xTaskIncrementTick+0x154>)
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	4a3f      	ldr	r2, [pc, #252]	; (8015bc8 <xTaskIncrementTick+0x150>)
 8015acc:	6013      	str	r3, [r2, #0]
 8015ace:	4a3f      	ldr	r2, [pc, #252]	; (8015bcc <xTaskIncrementTick+0x154>)
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	6013      	str	r3, [r2, #0]
 8015ad4:	4b3e      	ldr	r3, [pc, #248]	; (8015bd0 <xTaskIncrementTick+0x158>)
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	3301      	adds	r3, #1
 8015ada:	4a3d      	ldr	r2, [pc, #244]	; (8015bd0 <xTaskIncrementTick+0x158>)
 8015adc:	6013      	str	r3, [r2, #0]
 8015ade:	f000 f9f5 	bl	8015ecc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015ae2:	4b3c      	ldr	r3, [pc, #240]	; (8015bd4 <xTaskIncrementTick+0x15c>)
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	693a      	ldr	r2, [r7, #16]
 8015ae8:	429a      	cmp	r2, r3
 8015aea:	d349      	bcc.n	8015b80 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015aec:	4b36      	ldr	r3, [pc, #216]	; (8015bc8 <xTaskIncrementTick+0x150>)
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	681b      	ldr	r3, [r3, #0]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d104      	bne.n	8015b00 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015af6:	4b37      	ldr	r3, [pc, #220]	; (8015bd4 <xTaskIncrementTick+0x15c>)
 8015af8:	f04f 32ff 	mov.w	r2, #4294967295
 8015afc:	601a      	str	r2, [r3, #0]
					break;
 8015afe:	e03f      	b.n	8015b80 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015b00:	4b31      	ldr	r3, [pc, #196]	; (8015bc8 <xTaskIncrementTick+0x150>)
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	68db      	ldr	r3, [r3, #12]
 8015b06:	68db      	ldr	r3, [r3, #12]
 8015b08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015b0a:	68bb      	ldr	r3, [r7, #8]
 8015b0c:	685b      	ldr	r3, [r3, #4]
 8015b0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015b10:	693a      	ldr	r2, [r7, #16]
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	429a      	cmp	r2, r3
 8015b16:	d203      	bcs.n	8015b20 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015b18:	4a2e      	ldr	r2, [pc, #184]	; (8015bd4 <xTaskIncrementTick+0x15c>)
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015b1e:	e02f      	b.n	8015b80 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015b20:	68bb      	ldr	r3, [r7, #8]
 8015b22:	3304      	adds	r3, #4
 8015b24:	4618      	mov	r0, r3
 8015b26:	f7ff f83c 	bl	8014ba2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015b2a:	68bb      	ldr	r3, [r7, #8]
 8015b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d004      	beq.n	8015b3c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015b32:	68bb      	ldr	r3, [r7, #8]
 8015b34:	3318      	adds	r3, #24
 8015b36:	4618      	mov	r0, r3
 8015b38:	f7ff f833 	bl	8014ba2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015b3c:	68bb      	ldr	r3, [r7, #8]
 8015b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b40:	4b25      	ldr	r3, [pc, #148]	; (8015bd8 <xTaskIncrementTick+0x160>)
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	429a      	cmp	r2, r3
 8015b46:	d903      	bls.n	8015b50 <xTaskIncrementTick+0xd8>
 8015b48:	68bb      	ldr	r3, [r7, #8]
 8015b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b4c:	4a22      	ldr	r2, [pc, #136]	; (8015bd8 <xTaskIncrementTick+0x160>)
 8015b4e:	6013      	str	r3, [r2, #0]
 8015b50:	68bb      	ldr	r3, [r7, #8]
 8015b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b54:	4613      	mov	r3, r2
 8015b56:	009b      	lsls	r3, r3, #2
 8015b58:	4413      	add	r3, r2
 8015b5a:	009b      	lsls	r3, r3, #2
 8015b5c:	4a1f      	ldr	r2, [pc, #124]	; (8015bdc <xTaskIncrementTick+0x164>)
 8015b5e:	441a      	add	r2, r3
 8015b60:	68bb      	ldr	r3, [r7, #8]
 8015b62:	3304      	adds	r3, #4
 8015b64:	4619      	mov	r1, r3
 8015b66:	4610      	mov	r0, r2
 8015b68:	f7fe ffbe 	bl	8014ae8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015b6c:	68bb      	ldr	r3, [r7, #8]
 8015b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b70:	4b1b      	ldr	r3, [pc, #108]	; (8015be0 <xTaskIncrementTick+0x168>)
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b76:	429a      	cmp	r2, r3
 8015b78:	d3b8      	bcc.n	8015aec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8015b7a:	2301      	movs	r3, #1
 8015b7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015b7e:	e7b5      	b.n	8015aec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015b80:	4b17      	ldr	r3, [pc, #92]	; (8015be0 <xTaskIncrementTick+0x168>)
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b86:	4915      	ldr	r1, [pc, #84]	; (8015bdc <xTaskIncrementTick+0x164>)
 8015b88:	4613      	mov	r3, r2
 8015b8a:	009b      	lsls	r3, r3, #2
 8015b8c:	4413      	add	r3, r2
 8015b8e:	009b      	lsls	r3, r3, #2
 8015b90:	440b      	add	r3, r1
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	2b01      	cmp	r3, #1
 8015b96:	d901      	bls.n	8015b9c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8015b98:	2301      	movs	r3, #1
 8015b9a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015b9c:	4b11      	ldr	r3, [pc, #68]	; (8015be4 <xTaskIncrementTick+0x16c>)
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d007      	beq.n	8015bb4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8015ba4:	2301      	movs	r3, #1
 8015ba6:	617b      	str	r3, [r7, #20]
 8015ba8:	e004      	b.n	8015bb4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8015baa:	4b0f      	ldr	r3, [pc, #60]	; (8015be8 <xTaskIncrementTick+0x170>)
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	3301      	adds	r3, #1
 8015bb0:	4a0d      	ldr	r2, [pc, #52]	; (8015be8 <xTaskIncrementTick+0x170>)
 8015bb2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8015bb4:	697b      	ldr	r3, [r7, #20]
}
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	3718      	adds	r7, #24
 8015bba:	46bd      	mov	sp, r7
 8015bbc:	bd80      	pop	{r7, pc}
 8015bbe:	bf00      	nop
 8015bc0:	20000bb0 	.word	0x20000bb0
 8015bc4:	20000b94 	.word	0x20000b94
 8015bc8:	20000b60 	.word	0x20000b60
 8015bcc:	20000b64 	.word	0x20000b64
 8015bd0:	20000ba8 	.word	0x20000ba8
 8015bd4:	20000bac 	.word	0x20000bac
 8015bd8:	20000b98 	.word	0x20000b98
 8015bdc:	20000700 	.word	0x20000700
 8015be0:	200006fc 	.word	0x200006fc
 8015be4:	20000ba4 	.word	0x20000ba4
 8015be8:	20000ba0 	.word	0x20000ba0

08015bec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015bec:	b480      	push	{r7}
 8015bee:	b085      	sub	sp, #20
 8015bf0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015bf2:	4b2a      	ldr	r3, [pc, #168]	; (8015c9c <vTaskSwitchContext+0xb0>)
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d003      	beq.n	8015c02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015bfa:	4b29      	ldr	r3, [pc, #164]	; (8015ca0 <vTaskSwitchContext+0xb4>)
 8015bfc:	2201      	movs	r2, #1
 8015bfe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015c00:	e046      	b.n	8015c90 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8015c02:	4b27      	ldr	r3, [pc, #156]	; (8015ca0 <vTaskSwitchContext+0xb4>)
 8015c04:	2200      	movs	r2, #0
 8015c06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015c08:	4b26      	ldr	r3, [pc, #152]	; (8015ca4 <vTaskSwitchContext+0xb8>)
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	60fb      	str	r3, [r7, #12]
 8015c0e:	e010      	b.n	8015c32 <vTaskSwitchContext+0x46>
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d10a      	bne.n	8015c2c <vTaskSwitchContext+0x40>
	__asm volatile
 8015c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c1a:	f383 8811 	msr	BASEPRI, r3
 8015c1e:	f3bf 8f6f 	isb	sy
 8015c22:	f3bf 8f4f 	dsb	sy
 8015c26:	607b      	str	r3, [r7, #4]
}
 8015c28:	bf00      	nop
 8015c2a:	e7fe      	b.n	8015c2a <vTaskSwitchContext+0x3e>
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	3b01      	subs	r3, #1
 8015c30:	60fb      	str	r3, [r7, #12]
 8015c32:	491d      	ldr	r1, [pc, #116]	; (8015ca8 <vTaskSwitchContext+0xbc>)
 8015c34:	68fa      	ldr	r2, [r7, #12]
 8015c36:	4613      	mov	r3, r2
 8015c38:	009b      	lsls	r3, r3, #2
 8015c3a:	4413      	add	r3, r2
 8015c3c:	009b      	lsls	r3, r3, #2
 8015c3e:	440b      	add	r3, r1
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d0e4      	beq.n	8015c10 <vTaskSwitchContext+0x24>
 8015c46:	68fa      	ldr	r2, [r7, #12]
 8015c48:	4613      	mov	r3, r2
 8015c4a:	009b      	lsls	r3, r3, #2
 8015c4c:	4413      	add	r3, r2
 8015c4e:	009b      	lsls	r3, r3, #2
 8015c50:	4a15      	ldr	r2, [pc, #84]	; (8015ca8 <vTaskSwitchContext+0xbc>)
 8015c52:	4413      	add	r3, r2
 8015c54:	60bb      	str	r3, [r7, #8]
 8015c56:	68bb      	ldr	r3, [r7, #8]
 8015c58:	685b      	ldr	r3, [r3, #4]
 8015c5a:	685a      	ldr	r2, [r3, #4]
 8015c5c:	68bb      	ldr	r3, [r7, #8]
 8015c5e:	605a      	str	r2, [r3, #4]
 8015c60:	68bb      	ldr	r3, [r7, #8]
 8015c62:	685a      	ldr	r2, [r3, #4]
 8015c64:	68bb      	ldr	r3, [r7, #8]
 8015c66:	3308      	adds	r3, #8
 8015c68:	429a      	cmp	r2, r3
 8015c6a:	d104      	bne.n	8015c76 <vTaskSwitchContext+0x8a>
 8015c6c:	68bb      	ldr	r3, [r7, #8]
 8015c6e:	685b      	ldr	r3, [r3, #4]
 8015c70:	685a      	ldr	r2, [r3, #4]
 8015c72:	68bb      	ldr	r3, [r7, #8]
 8015c74:	605a      	str	r2, [r3, #4]
 8015c76:	68bb      	ldr	r3, [r7, #8]
 8015c78:	685b      	ldr	r3, [r3, #4]
 8015c7a:	68db      	ldr	r3, [r3, #12]
 8015c7c:	4a0b      	ldr	r2, [pc, #44]	; (8015cac <vTaskSwitchContext+0xc0>)
 8015c7e:	6013      	str	r3, [r2, #0]
 8015c80:	4a08      	ldr	r2, [pc, #32]	; (8015ca4 <vTaskSwitchContext+0xb8>)
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015c86:	4b09      	ldr	r3, [pc, #36]	; (8015cac <vTaskSwitchContext+0xc0>)
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	3354      	adds	r3, #84	; 0x54
 8015c8c:	4a08      	ldr	r2, [pc, #32]	; (8015cb0 <vTaskSwitchContext+0xc4>)
 8015c8e:	6013      	str	r3, [r2, #0]
}
 8015c90:	bf00      	nop
 8015c92:	3714      	adds	r7, #20
 8015c94:	46bd      	mov	sp, r7
 8015c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c9a:	4770      	bx	lr
 8015c9c:	20000bb0 	.word	0x20000bb0
 8015ca0:	20000ba4 	.word	0x20000ba4
 8015ca4:	20000b98 	.word	0x20000b98
 8015ca8:	20000700 	.word	0x20000700
 8015cac:	200006fc 	.word	0x200006fc
 8015cb0:	20000084 	.word	0x20000084

08015cb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015cb4:	b580      	push	{r7, lr}
 8015cb6:	b084      	sub	sp, #16
 8015cb8:	af00      	add	r7, sp, #0
 8015cba:	6078      	str	r0, [r7, #4]
 8015cbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d10a      	bne.n	8015cda <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8015cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cc8:	f383 8811 	msr	BASEPRI, r3
 8015ccc:	f3bf 8f6f 	isb	sy
 8015cd0:	f3bf 8f4f 	dsb	sy
 8015cd4:	60fb      	str	r3, [r7, #12]
}
 8015cd6:	bf00      	nop
 8015cd8:	e7fe      	b.n	8015cd8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015cda:	4b07      	ldr	r3, [pc, #28]	; (8015cf8 <vTaskPlaceOnEventList+0x44>)
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	3318      	adds	r3, #24
 8015ce0:	4619      	mov	r1, r3
 8015ce2:	6878      	ldr	r0, [r7, #4]
 8015ce4:	f7fe ff24 	bl	8014b30 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015ce8:	2101      	movs	r1, #1
 8015cea:	6838      	ldr	r0, [r7, #0]
 8015cec:	f000 fa98 	bl	8016220 <prvAddCurrentTaskToDelayedList>
}
 8015cf0:	bf00      	nop
 8015cf2:	3710      	adds	r7, #16
 8015cf4:	46bd      	mov	sp, r7
 8015cf6:	bd80      	pop	{r7, pc}
 8015cf8:	200006fc 	.word	0x200006fc

08015cfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015cfc:	b580      	push	{r7, lr}
 8015cfe:	b086      	sub	sp, #24
 8015d00:	af00      	add	r7, sp, #0
 8015d02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	68db      	ldr	r3, [r3, #12]
 8015d08:	68db      	ldr	r3, [r3, #12]
 8015d0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015d0c:	693b      	ldr	r3, [r7, #16]
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d10a      	bne.n	8015d28 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8015d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d16:	f383 8811 	msr	BASEPRI, r3
 8015d1a:	f3bf 8f6f 	isb	sy
 8015d1e:	f3bf 8f4f 	dsb	sy
 8015d22:	60fb      	str	r3, [r7, #12]
}
 8015d24:	bf00      	nop
 8015d26:	e7fe      	b.n	8015d26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015d28:	693b      	ldr	r3, [r7, #16]
 8015d2a:	3318      	adds	r3, #24
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	f7fe ff38 	bl	8014ba2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015d32:	4b1e      	ldr	r3, [pc, #120]	; (8015dac <xTaskRemoveFromEventList+0xb0>)
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d11d      	bne.n	8015d76 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015d3a:	693b      	ldr	r3, [r7, #16]
 8015d3c:	3304      	adds	r3, #4
 8015d3e:	4618      	mov	r0, r3
 8015d40:	f7fe ff2f 	bl	8014ba2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015d44:	693b      	ldr	r3, [r7, #16]
 8015d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015d48:	4b19      	ldr	r3, [pc, #100]	; (8015db0 <xTaskRemoveFromEventList+0xb4>)
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	429a      	cmp	r2, r3
 8015d4e:	d903      	bls.n	8015d58 <xTaskRemoveFromEventList+0x5c>
 8015d50:	693b      	ldr	r3, [r7, #16]
 8015d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d54:	4a16      	ldr	r2, [pc, #88]	; (8015db0 <xTaskRemoveFromEventList+0xb4>)
 8015d56:	6013      	str	r3, [r2, #0]
 8015d58:	693b      	ldr	r3, [r7, #16]
 8015d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015d5c:	4613      	mov	r3, r2
 8015d5e:	009b      	lsls	r3, r3, #2
 8015d60:	4413      	add	r3, r2
 8015d62:	009b      	lsls	r3, r3, #2
 8015d64:	4a13      	ldr	r2, [pc, #76]	; (8015db4 <xTaskRemoveFromEventList+0xb8>)
 8015d66:	441a      	add	r2, r3
 8015d68:	693b      	ldr	r3, [r7, #16]
 8015d6a:	3304      	adds	r3, #4
 8015d6c:	4619      	mov	r1, r3
 8015d6e:	4610      	mov	r0, r2
 8015d70:	f7fe feba 	bl	8014ae8 <vListInsertEnd>
 8015d74:	e005      	b.n	8015d82 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015d76:	693b      	ldr	r3, [r7, #16]
 8015d78:	3318      	adds	r3, #24
 8015d7a:	4619      	mov	r1, r3
 8015d7c:	480e      	ldr	r0, [pc, #56]	; (8015db8 <xTaskRemoveFromEventList+0xbc>)
 8015d7e:	f7fe feb3 	bl	8014ae8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015d82:	693b      	ldr	r3, [r7, #16]
 8015d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015d86:	4b0d      	ldr	r3, [pc, #52]	; (8015dbc <xTaskRemoveFromEventList+0xc0>)
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d8c:	429a      	cmp	r2, r3
 8015d8e:	d905      	bls.n	8015d9c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015d90:	2301      	movs	r3, #1
 8015d92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015d94:	4b0a      	ldr	r3, [pc, #40]	; (8015dc0 <xTaskRemoveFromEventList+0xc4>)
 8015d96:	2201      	movs	r2, #1
 8015d98:	601a      	str	r2, [r3, #0]
 8015d9a:	e001      	b.n	8015da0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015da0:	697b      	ldr	r3, [r7, #20]
}
 8015da2:	4618      	mov	r0, r3
 8015da4:	3718      	adds	r7, #24
 8015da6:	46bd      	mov	sp, r7
 8015da8:	bd80      	pop	{r7, pc}
 8015daa:	bf00      	nop
 8015dac:	20000bb0 	.word	0x20000bb0
 8015db0:	20000b98 	.word	0x20000b98
 8015db4:	20000700 	.word	0x20000700
 8015db8:	20000b68 	.word	0x20000b68
 8015dbc:	200006fc 	.word	0x200006fc
 8015dc0:	20000ba4 	.word	0x20000ba4

08015dc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015dc4:	b480      	push	{r7}
 8015dc6:	b083      	sub	sp, #12
 8015dc8:	af00      	add	r7, sp, #0
 8015dca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015dcc:	4b06      	ldr	r3, [pc, #24]	; (8015de8 <vTaskInternalSetTimeOutState+0x24>)
 8015dce:	681a      	ldr	r2, [r3, #0]
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015dd4:	4b05      	ldr	r3, [pc, #20]	; (8015dec <vTaskInternalSetTimeOutState+0x28>)
 8015dd6:	681a      	ldr	r2, [r3, #0]
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	605a      	str	r2, [r3, #4]
}
 8015ddc:	bf00      	nop
 8015dde:	370c      	adds	r7, #12
 8015de0:	46bd      	mov	sp, r7
 8015de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de6:	4770      	bx	lr
 8015de8:	20000ba8 	.word	0x20000ba8
 8015dec:	20000b94 	.word	0x20000b94

08015df0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015df0:	b580      	push	{r7, lr}
 8015df2:	b088      	sub	sp, #32
 8015df4:	af00      	add	r7, sp, #0
 8015df6:	6078      	str	r0, [r7, #4]
 8015df8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d10a      	bne.n	8015e16 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8015e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e04:	f383 8811 	msr	BASEPRI, r3
 8015e08:	f3bf 8f6f 	isb	sy
 8015e0c:	f3bf 8f4f 	dsb	sy
 8015e10:	613b      	str	r3, [r7, #16]
}
 8015e12:	bf00      	nop
 8015e14:	e7fe      	b.n	8015e14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8015e16:	683b      	ldr	r3, [r7, #0]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d10a      	bne.n	8015e32 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8015e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e20:	f383 8811 	msr	BASEPRI, r3
 8015e24:	f3bf 8f6f 	isb	sy
 8015e28:	f3bf 8f4f 	dsb	sy
 8015e2c:	60fb      	str	r3, [r7, #12]
}
 8015e2e:	bf00      	nop
 8015e30:	e7fe      	b.n	8015e30 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8015e32:	f000 fa61 	bl	80162f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015e36:	4b1d      	ldr	r3, [pc, #116]	; (8015eac <xTaskCheckForTimeOut+0xbc>)
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	685b      	ldr	r3, [r3, #4]
 8015e40:	69ba      	ldr	r2, [r7, #24]
 8015e42:	1ad3      	subs	r3, r2, r3
 8015e44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015e46:	683b      	ldr	r3, [r7, #0]
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e4e:	d102      	bne.n	8015e56 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015e50:	2300      	movs	r3, #0
 8015e52:	61fb      	str	r3, [r7, #28]
 8015e54:	e023      	b.n	8015e9e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	681a      	ldr	r2, [r3, #0]
 8015e5a:	4b15      	ldr	r3, [pc, #84]	; (8015eb0 <xTaskCheckForTimeOut+0xc0>)
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	429a      	cmp	r2, r3
 8015e60:	d007      	beq.n	8015e72 <xTaskCheckForTimeOut+0x82>
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	685b      	ldr	r3, [r3, #4]
 8015e66:	69ba      	ldr	r2, [r7, #24]
 8015e68:	429a      	cmp	r2, r3
 8015e6a:	d302      	bcc.n	8015e72 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015e6c:	2301      	movs	r3, #1
 8015e6e:	61fb      	str	r3, [r7, #28]
 8015e70:	e015      	b.n	8015e9e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015e72:	683b      	ldr	r3, [r7, #0]
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	697a      	ldr	r2, [r7, #20]
 8015e78:	429a      	cmp	r2, r3
 8015e7a:	d20b      	bcs.n	8015e94 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015e7c:	683b      	ldr	r3, [r7, #0]
 8015e7e:	681a      	ldr	r2, [r3, #0]
 8015e80:	697b      	ldr	r3, [r7, #20]
 8015e82:	1ad2      	subs	r2, r2, r3
 8015e84:	683b      	ldr	r3, [r7, #0]
 8015e86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015e88:	6878      	ldr	r0, [r7, #4]
 8015e8a:	f7ff ff9b 	bl	8015dc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015e8e:	2300      	movs	r3, #0
 8015e90:	61fb      	str	r3, [r7, #28]
 8015e92:	e004      	b.n	8015e9e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8015e94:	683b      	ldr	r3, [r7, #0]
 8015e96:	2200      	movs	r2, #0
 8015e98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015e9a:	2301      	movs	r3, #1
 8015e9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015e9e:	f000 fa5b 	bl	8016358 <vPortExitCritical>

	return xReturn;
 8015ea2:	69fb      	ldr	r3, [r7, #28]
}
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	3720      	adds	r7, #32
 8015ea8:	46bd      	mov	sp, r7
 8015eaa:	bd80      	pop	{r7, pc}
 8015eac:	20000b94 	.word	0x20000b94
 8015eb0:	20000ba8 	.word	0x20000ba8

08015eb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015eb4:	b480      	push	{r7}
 8015eb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015eb8:	4b03      	ldr	r3, [pc, #12]	; (8015ec8 <vTaskMissedYield+0x14>)
 8015eba:	2201      	movs	r2, #1
 8015ebc:	601a      	str	r2, [r3, #0]
}
 8015ebe:	bf00      	nop
 8015ec0:	46bd      	mov	sp, r7
 8015ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec6:	4770      	bx	lr
 8015ec8:	20000ba4 	.word	0x20000ba4

08015ecc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015ecc:	b480      	push	{r7}
 8015ece:	b083      	sub	sp, #12
 8015ed0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015ed2:	4b0c      	ldr	r3, [pc, #48]	; (8015f04 <prvResetNextTaskUnblockTime+0x38>)
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d104      	bne.n	8015ee6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015edc:	4b0a      	ldr	r3, [pc, #40]	; (8015f08 <prvResetNextTaskUnblockTime+0x3c>)
 8015ede:	f04f 32ff 	mov.w	r2, #4294967295
 8015ee2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015ee4:	e008      	b.n	8015ef8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015ee6:	4b07      	ldr	r3, [pc, #28]	; (8015f04 <prvResetNextTaskUnblockTime+0x38>)
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	68db      	ldr	r3, [r3, #12]
 8015eec:	68db      	ldr	r3, [r3, #12]
 8015eee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	685b      	ldr	r3, [r3, #4]
 8015ef4:	4a04      	ldr	r2, [pc, #16]	; (8015f08 <prvResetNextTaskUnblockTime+0x3c>)
 8015ef6:	6013      	str	r3, [r2, #0]
}
 8015ef8:	bf00      	nop
 8015efa:	370c      	adds	r7, #12
 8015efc:	46bd      	mov	sp, r7
 8015efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f02:	4770      	bx	lr
 8015f04:	20000b60 	.word	0x20000b60
 8015f08:	20000bac 	.word	0x20000bac

08015f0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015f0c:	b480      	push	{r7}
 8015f0e:	b083      	sub	sp, #12
 8015f10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015f12:	4b0b      	ldr	r3, [pc, #44]	; (8015f40 <xTaskGetSchedulerState+0x34>)
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d102      	bne.n	8015f20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015f1a:	2301      	movs	r3, #1
 8015f1c:	607b      	str	r3, [r7, #4]
 8015f1e:	e008      	b.n	8015f32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015f20:	4b08      	ldr	r3, [pc, #32]	; (8015f44 <xTaskGetSchedulerState+0x38>)
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d102      	bne.n	8015f2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015f28:	2302      	movs	r3, #2
 8015f2a:	607b      	str	r3, [r7, #4]
 8015f2c:	e001      	b.n	8015f32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015f2e:	2300      	movs	r3, #0
 8015f30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015f32:	687b      	ldr	r3, [r7, #4]
	}
 8015f34:	4618      	mov	r0, r3
 8015f36:	370c      	adds	r7, #12
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f3e:	4770      	bx	lr
 8015f40:	20000b9c 	.word	0x20000b9c
 8015f44:	20000bb0 	.word	0x20000bb0

08015f48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8015f48:	b580      	push	{r7, lr}
 8015f4a:	b084      	sub	sp, #16
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8015f54:	2300      	movs	r3, #0
 8015f56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d051      	beq.n	8016002 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8015f5e:	68bb      	ldr	r3, [r7, #8]
 8015f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f62:	4b2a      	ldr	r3, [pc, #168]	; (801600c <xTaskPriorityInherit+0xc4>)
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f68:	429a      	cmp	r2, r3
 8015f6a:	d241      	bcs.n	8015ff0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015f6c:	68bb      	ldr	r3, [r7, #8]
 8015f6e:	699b      	ldr	r3, [r3, #24]
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	db06      	blt.n	8015f82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015f74:	4b25      	ldr	r3, [pc, #148]	; (801600c <xTaskPriorityInherit+0xc4>)
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015f7e:	68bb      	ldr	r3, [r7, #8]
 8015f80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8015f82:	68bb      	ldr	r3, [r7, #8]
 8015f84:	6959      	ldr	r1, [r3, #20]
 8015f86:	68bb      	ldr	r3, [r7, #8]
 8015f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f8a:	4613      	mov	r3, r2
 8015f8c:	009b      	lsls	r3, r3, #2
 8015f8e:	4413      	add	r3, r2
 8015f90:	009b      	lsls	r3, r3, #2
 8015f92:	4a1f      	ldr	r2, [pc, #124]	; (8016010 <xTaskPriorityInherit+0xc8>)
 8015f94:	4413      	add	r3, r2
 8015f96:	4299      	cmp	r1, r3
 8015f98:	d122      	bne.n	8015fe0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015f9a:	68bb      	ldr	r3, [r7, #8]
 8015f9c:	3304      	adds	r3, #4
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	f7fe fdff 	bl	8014ba2 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015fa4:	4b19      	ldr	r3, [pc, #100]	; (801600c <xTaskPriorityInherit+0xc4>)
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015faa:	68bb      	ldr	r3, [r7, #8]
 8015fac:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8015fae:	68bb      	ldr	r3, [r7, #8]
 8015fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015fb2:	4b18      	ldr	r3, [pc, #96]	; (8016014 <xTaskPriorityInherit+0xcc>)
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	429a      	cmp	r2, r3
 8015fb8:	d903      	bls.n	8015fc2 <xTaskPriorityInherit+0x7a>
 8015fba:	68bb      	ldr	r3, [r7, #8]
 8015fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fbe:	4a15      	ldr	r2, [pc, #84]	; (8016014 <xTaskPriorityInherit+0xcc>)
 8015fc0:	6013      	str	r3, [r2, #0]
 8015fc2:	68bb      	ldr	r3, [r7, #8]
 8015fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015fc6:	4613      	mov	r3, r2
 8015fc8:	009b      	lsls	r3, r3, #2
 8015fca:	4413      	add	r3, r2
 8015fcc:	009b      	lsls	r3, r3, #2
 8015fce:	4a10      	ldr	r2, [pc, #64]	; (8016010 <xTaskPriorityInherit+0xc8>)
 8015fd0:	441a      	add	r2, r3
 8015fd2:	68bb      	ldr	r3, [r7, #8]
 8015fd4:	3304      	adds	r3, #4
 8015fd6:	4619      	mov	r1, r3
 8015fd8:	4610      	mov	r0, r2
 8015fda:	f7fe fd85 	bl	8014ae8 <vListInsertEnd>
 8015fde:	e004      	b.n	8015fea <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015fe0:	4b0a      	ldr	r3, [pc, #40]	; (801600c <xTaskPriorityInherit+0xc4>)
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015fe6:	68bb      	ldr	r3, [r7, #8]
 8015fe8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8015fea:	2301      	movs	r3, #1
 8015fec:	60fb      	str	r3, [r7, #12]
 8015fee:	e008      	b.n	8016002 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015ff0:	68bb      	ldr	r3, [r7, #8]
 8015ff2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015ff4:	4b05      	ldr	r3, [pc, #20]	; (801600c <xTaskPriorityInherit+0xc4>)
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ffa:	429a      	cmp	r2, r3
 8015ffc:	d201      	bcs.n	8016002 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8015ffe:	2301      	movs	r3, #1
 8016000:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016002:	68fb      	ldr	r3, [r7, #12]
	}
 8016004:	4618      	mov	r0, r3
 8016006:	3710      	adds	r7, #16
 8016008:	46bd      	mov	sp, r7
 801600a:	bd80      	pop	{r7, pc}
 801600c:	200006fc 	.word	0x200006fc
 8016010:	20000700 	.word	0x20000700
 8016014:	20000b98 	.word	0x20000b98

08016018 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016018:	b580      	push	{r7, lr}
 801601a:	b086      	sub	sp, #24
 801601c:	af00      	add	r7, sp, #0
 801601e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016024:	2300      	movs	r3, #0
 8016026:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d056      	beq.n	80160dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801602e:	4b2e      	ldr	r3, [pc, #184]	; (80160e8 <xTaskPriorityDisinherit+0xd0>)
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	693a      	ldr	r2, [r7, #16]
 8016034:	429a      	cmp	r2, r3
 8016036:	d00a      	beq.n	801604e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8016038:	f04f 0350 	mov.w	r3, #80	; 0x50
 801603c:	f383 8811 	msr	BASEPRI, r3
 8016040:	f3bf 8f6f 	isb	sy
 8016044:	f3bf 8f4f 	dsb	sy
 8016048:	60fb      	str	r3, [r7, #12]
}
 801604a:	bf00      	nop
 801604c:	e7fe      	b.n	801604c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801604e:	693b      	ldr	r3, [r7, #16]
 8016050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016052:	2b00      	cmp	r3, #0
 8016054:	d10a      	bne.n	801606c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8016056:	f04f 0350 	mov.w	r3, #80	; 0x50
 801605a:	f383 8811 	msr	BASEPRI, r3
 801605e:	f3bf 8f6f 	isb	sy
 8016062:	f3bf 8f4f 	dsb	sy
 8016066:	60bb      	str	r3, [r7, #8]
}
 8016068:	bf00      	nop
 801606a:	e7fe      	b.n	801606a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801606c:	693b      	ldr	r3, [r7, #16]
 801606e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016070:	1e5a      	subs	r2, r3, #1
 8016072:	693b      	ldr	r3, [r7, #16]
 8016074:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016076:	693b      	ldr	r3, [r7, #16]
 8016078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801607a:	693b      	ldr	r3, [r7, #16]
 801607c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801607e:	429a      	cmp	r2, r3
 8016080:	d02c      	beq.n	80160dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016082:	693b      	ldr	r3, [r7, #16]
 8016084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016086:	2b00      	cmp	r3, #0
 8016088:	d128      	bne.n	80160dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801608a:	693b      	ldr	r3, [r7, #16]
 801608c:	3304      	adds	r3, #4
 801608e:	4618      	mov	r0, r3
 8016090:	f7fe fd87 	bl	8014ba2 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016094:	693b      	ldr	r3, [r7, #16]
 8016096:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016098:	693b      	ldr	r3, [r7, #16]
 801609a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801609c:	693b      	ldr	r3, [r7, #16]
 801609e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80160a4:	693b      	ldr	r3, [r7, #16]
 80160a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80160a8:	693b      	ldr	r3, [r7, #16]
 80160aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80160ac:	4b0f      	ldr	r3, [pc, #60]	; (80160ec <xTaskPriorityDisinherit+0xd4>)
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	429a      	cmp	r2, r3
 80160b2:	d903      	bls.n	80160bc <xTaskPriorityDisinherit+0xa4>
 80160b4:	693b      	ldr	r3, [r7, #16]
 80160b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160b8:	4a0c      	ldr	r2, [pc, #48]	; (80160ec <xTaskPriorityDisinherit+0xd4>)
 80160ba:	6013      	str	r3, [r2, #0]
 80160bc:	693b      	ldr	r3, [r7, #16]
 80160be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80160c0:	4613      	mov	r3, r2
 80160c2:	009b      	lsls	r3, r3, #2
 80160c4:	4413      	add	r3, r2
 80160c6:	009b      	lsls	r3, r3, #2
 80160c8:	4a09      	ldr	r2, [pc, #36]	; (80160f0 <xTaskPriorityDisinherit+0xd8>)
 80160ca:	441a      	add	r2, r3
 80160cc:	693b      	ldr	r3, [r7, #16]
 80160ce:	3304      	adds	r3, #4
 80160d0:	4619      	mov	r1, r3
 80160d2:	4610      	mov	r0, r2
 80160d4:	f7fe fd08 	bl	8014ae8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80160d8:	2301      	movs	r3, #1
 80160da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80160dc:	697b      	ldr	r3, [r7, #20]
	}
 80160de:	4618      	mov	r0, r3
 80160e0:	3718      	adds	r7, #24
 80160e2:	46bd      	mov	sp, r7
 80160e4:	bd80      	pop	{r7, pc}
 80160e6:	bf00      	nop
 80160e8:	200006fc 	.word	0x200006fc
 80160ec:	20000b98 	.word	0x20000b98
 80160f0:	20000700 	.word	0x20000700

080160f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80160f4:	b580      	push	{r7, lr}
 80160f6:	b088      	sub	sp, #32
 80160f8:	af00      	add	r7, sp, #0
 80160fa:	6078      	str	r0, [r7, #4]
 80160fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8016102:	2301      	movs	r3, #1
 8016104:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	2b00      	cmp	r3, #0
 801610a:	d06a      	beq.n	80161e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801610c:	69bb      	ldr	r3, [r7, #24]
 801610e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016110:	2b00      	cmp	r3, #0
 8016112:	d10a      	bne.n	801612a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8016114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016118:	f383 8811 	msr	BASEPRI, r3
 801611c:	f3bf 8f6f 	isb	sy
 8016120:	f3bf 8f4f 	dsb	sy
 8016124:	60fb      	str	r3, [r7, #12]
}
 8016126:	bf00      	nop
 8016128:	e7fe      	b.n	8016128 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801612a:	69bb      	ldr	r3, [r7, #24]
 801612c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801612e:	683a      	ldr	r2, [r7, #0]
 8016130:	429a      	cmp	r2, r3
 8016132:	d902      	bls.n	801613a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8016134:	683b      	ldr	r3, [r7, #0]
 8016136:	61fb      	str	r3, [r7, #28]
 8016138:	e002      	b.n	8016140 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801613a:	69bb      	ldr	r3, [r7, #24]
 801613c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801613e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8016140:	69bb      	ldr	r3, [r7, #24]
 8016142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016144:	69fa      	ldr	r2, [r7, #28]
 8016146:	429a      	cmp	r2, r3
 8016148:	d04b      	beq.n	80161e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801614a:	69bb      	ldr	r3, [r7, #24]
 801614c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801614e:	697a      	ldr	r2, [r7, #20]
 8016150:	429a      	cmp	r2, r3
 8016152:	d146      	bne.n	80161e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8016154:	4b25      	ldr	r3, [pc, #148]	; (80161ec <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	69ba      	ldr	r2, [r7, #24]
 801615a:	429a      	cmp	r2, r3
 801615c:	d10a      	bne.n	8016174 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801615e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016162:	f383 8811 	msr	BASEPRI, r3
 8016166:	f3bf 8f6f 	isb	sy
 801616a:	f3bf 8f4f 	dsb	sy
 801616e:	60bb      	str	r3, [r7, #8]
}
 8016170:	bf00      	nop
 8016172:	e7fe      	b.n	8016172 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8016174:	69bb      	ldr	r3, [r7, #24]
 8016176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016178:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801617a:	69bb      	ldr	r3, [r7, #24]
 801617c:	69fa      	ldr	r2, [r7, #28]
 801617e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016180:	69bb      	ldr	r3, [r7, #24]
 8016182:	699b      	ldr	r3, [r3, #24]
 8016184:	2b00      	cmp	r3, #0
 8016186:	db04      	blt.n	8016192 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016188:	69fb      	ldr	r3, [r7, #28]
 801618a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801618e:	69bb      	ldr	r3, [r7, #24]
 8016190:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016192:	69bb      	ldr	r3, [r7, #24]
 8016194:	6959      	ldr	r1, [r3, #20]
 8016196:	693a      	ldr	r2, [r7, #16]
 8016198:	4613      	mov	r3, r2
 801619a:	009b      	lsls	r3, r3, #2
 801619c:	4413      	add	r3, r2
 801619e:	009b      	lsls	r3, r3, #2
 80161a0:	4a13      	ldr	r2, [pc, #76]	; (80161f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80161a2:	4413      	add	r3, r2
 80161a4:	4299      	cmp	r1, r3
 80161a6:	d11c      	bne.n	80161e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80161a8:	69bb      	ldr	r3, [r7, #24]
 80161aa:	3304      	adds	r3, #4
 80161ac:	4618      	mov	r0, r3
 80161ae:	f7fe fcf8 	bl	8014ba2 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80161b2:	69bb      	ldr	r3, [r7, #24]
 80161b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80161b6:	4b0f      	ldr	r3, [pc, #60]	; (80161f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	429a      	cmp	r2, r3
 80161bc:	d903      	bls.n	80161c6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80161be:	69bb      	ldr	r3, [r7, #24]
 80161c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161c2:	4a0c      	ldr	r2, [pc, #48]	; (80161f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80161c4:	6013      	str	r3, [r2, #0]
 80161c6:	69bb      	ldr	r3, [r7, #24]
 80161c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80161ca:	4613      	mov	r3, r2
 80161cc:	009b      	lsls	r3, r3, #2
 80161ce:	4413      	add	r3, r2
 80161d0:	009b      	lsls	r3, r3, #2
 80161d2:	4a07      	ldr	r2, [pc, #28]	; (80161f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80161d4:	441a      	add	r2, r3
 80161d6:	69bb      	ldr	r3, [r7, #24]
 80161d8:	3304      	adds	r3, #4
 80161da:	4619      	mov	r1, r3
 80161dc:	4610      	mov	r0, r2
 80161de:	f7fe fc83 	bl	8014ae8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80161e2:	bf00      	nop
 80161e4:	3720      	adds	r7, #32
 80161e6:	46bd      	mov	sp, r7
 80161e8:	bd80      	pop	{r7, pc}
 80161ea:	bf00      	nop
 80161ec:	200006fc 	.word	0x200006fc
 80161f0:	20000700 	.word	0x20000700
 80161f4:	20000b98 	.word	0x20000b98

080161f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80161f8:	b480      	push	{r7}
 80161fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80161fc:	4b07      	ldr	r3, [pc, #28]	; (801621c <pvTaskIncrementMutexHeldCount+0x24>)
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	2b00      	cmp	r3, #0
 8016202:	d004      	beq.n	801620e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8016204:	4b05      	ldr	r3, [pc, #20]	; (801621c <pvTaskIncrementMutexHeldCount+0x24>)
 8016206:	681b      	ldr	r3, [r3, #0]
 8016208:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801620a:	3201      	adds	r2, #1
 801620c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801620e:	4b03      	ldr	r3, [pc, #12]	; (801621c <pvTaskIncrementMutexHeldCount+0x24>)
 8016210:	681b      	ldr	r3, [r3, #0]
	}
 8016212:	4618      	mov	r0, r3
 8016214:	46bd      	mov	sp, r7
 8016216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801621a:	4770      	bx	lr
 801621c:	200006fc 	.word	0x200006fc

08016220 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016220:	b580      	push	{r7, lr}
 8016222:	b084      	sub	sp, #16
 8016224:	af00      	add	r7, sp, #0
 8016226:	6078      	str	r0, [r7, #4]
 8016228:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801622a:	4b21      	ldr	r3, [pc, #132]	; (80162b0 <prvAddCurrentTaskToDelayedList+0x90>)
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016230:	4b20      	ldr	r3, [pc, #128]	; (80162b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	3304      	adds	r3, #4
 8016236:	4618      	mov	r0, r3
 8016238:	f7fe fcb3 	bl	8014ba2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016242:	d10a      	bne.n	801625a <prvAddCurrentTaskToDelayedList+0x3a>
 8016244:	683b      	ldr	r3, [r7, #0]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d007      	beq.n	801625a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801624a:	4b1a      	ldr	r3, [pc, #104]	; (80162b4 <prvAddCurrentTaskToDelayedList+0x94>)
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	3304      	adds	r3, #4
 8016250:	4619      	mov	r1, r3
 8016252:	4819      	ldr	r0, [pc, #100]	; (80162b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8016254:	f7fe fc48 	bl	8014ae8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016258:	e026      	b.n	80162a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801625a:	68fa      	ldr	r2, [r7, #12]
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	4413      	add	r3, r2
 8016260:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016262:	4b14      	ldr	r3, [pc, #80]	; (80162b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	68ba      	ldr	r2, [r7, #8]
 8016268:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801626a:	68ba      	ldr	r2, [r7, #8]
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	429a      	cmp	r2, r3
 8016270:	d209      	bcs.n	8016286 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016272:	4b12      	ldr	r3, [pc, #72]	; (80162bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8016274:	681a      	ldr	r2, [r3, #0]
 8016276:	4b0f      	ldr	r3, [pc, #60]	; (80162b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	3304      	adds	r3, #4
 801627c:	4619      	mov	r1, r3
 801627e:	4610      	mov	r0, r2
 8016280:	f7fe fc56 	bl	8014b30 <vListInsert>
}
 8016284:	e010      	b.n	80162a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016286:	4b0e      	ldr	r3, [pc, #56]	; (80162c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8016288:	681a      	ldr	r2, [r3, #0]
 801628a:	4b0a      	ldr	r3, [pc, #40]	; (80162b4 <prvAddCurrentTaskToDelayedList+0x94>)
 801628c:	681b      	ldr	r3, [r3, #0]
 801628e:	3304      	adds	r3, #4
 8016290:	4619      	mov	r1, r3
 8016292:	4610      	mov	r0, r2
 8016294:	f7fe fc4c 	bl	8014b30 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016298:	4b0a      	ldr	r3, [pc, #40]	; (80162c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	68ba      	ldr	r2, [r7, #8]
 801629e:	429a      	cmp	r2, r3
 80162a0:	d202      	bcs.n	80162a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80162a2:	4a08      	ldr	r2, [pc, #32]	; (80162c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80162a4:	68bb      	ldr	r3, [r7, #8]
 80162a6:	6013      	str	r3, [r2, #0]
}
 80162a8:	bf00      	nop
 80162aa:	3710      	adds	r7, #16
 80162ac:	46bd      	mov	sp, r7
 80162ae:	bd80      	pop	{r7, pc}
 80162b0:	20000b94 	.word	0x20000b94
 80162b4:	200006fc 	.word	0x200006fc
 80162b8:	20000b7c 	.word	0x20000b7c
 80162bc:	20000b64 	.word	0x20000b64
 80162c0:	20000b60 	.word	0x20000b60
 80162c4:	20000bac 	.word	0x20000bac
	...

080162d0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80162d0:	4b07      	ldr	r3, [pc, #28]	; (80162f0 <pxCurrentTCBConst2>)
 80162d2:	6819      	ldr	r1, [r3, #0]
 80162d4:	6808      	ldr	r0, [r1, #0]
 80162d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162da:	f380 8809 	msr	PSP, r0
 80162de:	f3bf 8f6f 	isb	sy
 80162e2:	f04f 0000 	mov.w	r0, #0
 80162e6:	f380 8811 	msr	BASEPRI, r0
 80162ea:	4770      	bx	lr
 80162ec:	f3af 8000 	nop.w

080162f0 <pxCurrentTCBConst2>:
 80162f0:	200006fc 	.word	0x200006fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80162f4:	bf00      	nop
 80162f6:	bf00      	nop

080162f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80162f8:	b480      	push	{r7}
 80162fa:	b083      	sub	sp, #12
 80162fc:	af00      	add	r7, sp, #0
	__asm volatile
 80162fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016302:	f383 8811 	msr	BASEPRI, r3
 8016306:	f3bf 8f6f 	isb	sy
 801630a:	f3bf 8f4f 	dsb	sy
 801630e:	607b      	str	r3, [r7, #4]
}
 8016310:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016312:	4b0f      	ldr	r3, [pc, #60]	; (8016350 <vPortEnterCritical+0x58>)
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	3301      	adds	r3, #1
 8016318:	4a0d      	ldr	r2, [pc, #52]	; (8016350 <vPortEnterCritical+0x58>)
 801631a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801631c:	4b0c      	ldr	r3, [pc, #48]	; (8016350 <vPortEnterCritical+0x58>)
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	2b01      	cmp	r3, #1
 8016322:	d10f      	bne.n	8016344 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016324:	4b0b      	ldr	r3, [pc, #44]	; (8016354 <vPortEnterCritical+0x5c>)
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	b2db      	uxtb	r3, r3
 801632a:	2b00      	cmp	r3, #0
 801632c:	d00a      	beq.n	8016344 <vPortEnterCritical+0x4c>
	__asm volatile
 801632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016332:	f383 8811 	msr	BASEPRI, r3
 8016336:	f3bf 8f6f 	isb	sy
 801633a:	f3bf 8f4f 	dsb	sy
 801633e:	603b      	str	r3, [r7, #0]
}
 8016340:	bf00      	nop
 8016342:	e7fe      	b.n	8016342 <vPortEnterCritical+0x4a>
	}
}
 8016344:	bf00      	nop
 8016346:	370c      	adds	r7, #12
 8016348:	46bd      	mov	sp, r7
 801634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801634e:	4770      	bx	lr
 8016350:	2000007c 	.word	0x2000007c
 8016354:	e000ed04 	.word	0xe000ed04

08016358 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016358:	b480      	push	{r7}
 801635a:	b083      	sub	sp, #12
 801635c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801635e:	4b12      	ldr	r3, [pc, #72]	; (80163a8 <vPortExitCritical+0x50>)
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d10a      	bne.n	801637c <vPortExitCritical+0x24>
	__asm volatile
 8016366:	f04f 0350 	mov.w	r3, #80	; 0x50
 801636a:	f383 8811 	msr	BASEPRI, r3
 801636e:	f3bf 8f6f 	isb	sy
 8016372:	f3bf 8f4f 	dsb	sy
 8016376:	607b      	str	r3, [r7, #4]
}
 8016378:	bf00      	nop
 801637a:	e7fe      	b.n	801637a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801637c:	4b0a      	ldr	r3, [pc, #40]	; (80163a8 <vPortExitCritical+0x50>)
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	3b01      	subs	r3, #1
 8016382:	4a09      	ldr	r2, [pc, #36]	; (80163a8 <vPortExitCritical+0x50>)
 8016384:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016386:	4b08      	ldr	r3, [pc, #32]	; (80163a8 <vPortExitCritical+0x50>)
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	2b00      	cmp	r3, #0
 801638c:	d105      	bne.n	801639a <vPortExitCritical+0x42>
 801638e:	2300      	movs	r3, #0
 8016390:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016392:	683b      	ldr	r3, [r7, #0]
 8016394:	f383 8811 	msr	BASEPRI, r3
}
 8016398:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801639a:	bf00      	nop
 801639c:	370c      	adds	r7, #12
 801639e:	46bd      	mov	sp, r7
 80163a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163a4:	4770      	bx	lr
 80163a6:	bf00      	nop
 80163a8:	2000007c 	.word	0x2000007c
 80163ac:	00000000 	.word	0x00000000

080163b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80163b0:	f3ef 8009 	mrs	r0, PSP
 80163b4:	f3bf 8f6f 	isb	sy
 80163b8:	4b15      	ldr	r3, [pc, #84]	; (8016410 <pxCurrentTCBConst>)
 80163ba:	681a      	ldr	r2, [r3, #0]
 80163bc:	f01e 0f10 	tst.w	lr, #16
 80163c0:	bf08      	it	eq
 80163c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80163c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163ca:	6010      	str	r0, [r2, #0]
 80163cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80163d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80163d4:	f380 8811 	msr	BASEPRI, r0
 80163d8:	f3bf 8f4f 	dsb	sy
 80163dc:	f3bf 8f6f 	isb	sy
 80163e0:	f7ff fc04 	bl	8015bec <vTaskSwitchContext>
 80163e4:	f04f 0000 	mov.w	r0, #0
 80163e8:	f380 8811 	msr	BASEPRI, r0
 80163ec:	bc09      	pop	{r0, r3}
 80163ee:	6819      	ldr	r1, [r3, #0]
 80163f0:	6808      	ldr	r0, [r1, #0]
 80163f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163f6:	f01e 0f10 	tst.w	lr, #16
 80163fa:	bf08      	it	eq
 80163fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016400:	f380 8809 	msr	PSP, r0
 8016404:	f3bf 8f6f 	isb	sy
 8016408:	4770      	bx	lr
 801640a:	bf00      	nop
 801640c:	f3af 8000 	nop.w

08016410 <pxCurrentTCBConst>:
 8016410:	200006fc 	.word	0x200006fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016414:	bf00      	nop
 8016416:	bf00      	nop

08016418 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016418:	b580      	push	{r7, lr}
 801641a:	b082      	sub	sp, #8
 801641c:	af00      	add	r7, sp, #0
	__asm volatile
 801641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016422:	f383 8811 	msr	BASEPRI, r3
 8016426:	f3bf 8f6f 	isb	sy
 801642a:	f3bf 8f4f 	dsb	sy
 801642e:	607b      	str	r3, [r7, #4]
}
 8016430:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016432:	f7ff fb21 	bl	8015a78 <xTaskIncrementTick>
 8016436:	4603      	mov	r3, r0
 8016438:	2b00      	cmp	r3, #0
 801643a:	d003      	beq.n	8016444 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801643c:	4b06      	ldr	r3, [pc, #24]	; (8016458 <xPortSysTickHandler+0x40>)
 801643e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016442:	601a      	str	r2, [r3, #0]
 8016444:	2300      	movs	r3, #0
 8016446:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016448:	683b      	ldr	r3, [r7, #0]
 801644a:	f383 8811 	msr	BASEPRI, r3
}
 801644e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016450:	bf00      	nop
 8016452:	3708      	adds	r7, #8
 8016454:	46bd      	mov	sp, r7
 8016456:	bd80      	pop	{r7, pc}
 8016458:	e000ed04 	.word	0xe000ed04

0801645c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801645c:	b480      	push	{r7}
 801645e:	b085      	sub	sp, #20
 8016460:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016462:	f3ef 8305 	mrs	r3, IPSR
 8016466:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	2b0f      	cmp	r3, #15
 801646c:	d914      	bls.n	8016498 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801646e:	4a17      	ldr	r2, [pc, #92]	; (80164cc <vPortValidateInterruptPriority+0x70>)
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	4413      	add	r3, r2
 8016474:	781b      	ldrb	r3, [r3, #0]
 8016476:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016478:	4b15      	ldr	r3, [pc, #84]	; (80164d0 <vPortValidateInterruptPriority+0x74>)
 801647a:	781b      	ldrb	r3, [r3, #0]
 801647c:	7afa      	ldrb	r2, [r7, #11]
 801647e:	429a      	cmp	r2, r3
 8016480:	d20a      	bcs.n	8016498 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8016482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016486:	f383 8811 	msr	BASEPRI, r3
 801648a:	f3bf 8f6f 	isb	sy
 801648e:	f3bf 8f4f 	dsb	sy
 8016492:	607b      	str	r3, [r7, #4]
}
 8016494:	bf00      	nop
 8016496:	e7fe      	b.n	8016496 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016498:	4b0e      	ldr	r3, [pc, #56]	; (80164d4 <vPortValidateInterruptPriority+0x78>)
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80164a0:	4b0d      	ldr	r3, [pc, #52]	; (80164d8 <vPortValidateInterruptPriority+0x7c>)
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	429a      	cmp	r2, r3
 80164a6:	d90a      	bls.n	80164be <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80164a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164ac:	f383 8811 	msr	BASEPRI, r3
 80164b0:	f3bf 8f6f 	isb	sy
 80164b4:	f3bf 8f4f 	dsb	sy
 80164b8:	603b      	str	r3, [r7, #0]
}
 80164ba:	bf00      	nop
 80164bc:	e7fe      	b.n	80164bc <vPortValidateInterruptPriority+0x60>
	}
 80164be:	bf00      	nop
 80164c0:	3714      	adds	r7, #20
 80164c2:	46bd      	mov	sp, r7
 80164c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164c8:	4770      	bx	lr
 80164ca:	bf00      	nop
 80164cc:	e000e3f0 	.word	0xe000e3f0
 80164d0:	20000bb4 	.word	0x20000bb4
 80164d4:	e000ed0c 	.word	0xe000ed0c
 80164d8:	20000bb8 	.word	0x20000bb8

080164dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80164dc:	b580      	push	{r7, lr}
 80164de:	b08a      	sub	sp, #40	; 0x28
 80164e0:	af00      	add	r7, sp, #0
 80164e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80164e4:	2300      	movs	r3, #0
 80164e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80164e8:	f7ff fa1a 	bl	8015920 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80164ec:	4b5b      	ldr	r3, [pc, #364]	; (801665c <pvPortMalloc+0x180>)
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d101      	bne.n	80164f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80164f4:	f000 f920 	bl	8016738 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80164f8:	4b59      	ldr	r3, [pc, #356]	; (8016660 <pvPortMalloc+0x184>)
 80164fa:	681a      	ldr	r2, [r3, #0]
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	4013      	ands	r3, r2
 8016500:	2b00      	cmp	r3, #0
 8016502:	f040 8093 	bne.w	801662c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	2b00      	cmp	r3, #0
 801650a:	d01d      	beq.n	8016548 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801650c:	2208      	movs	r2, #8
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	4413      	add	r3, r2
 8016512:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	f003 0307 	and.w	r3, r3, #7
 801651a:	2b00      	cmp	r3, #0
 801651c:	d014      	beq.n	8016548 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	f023 0307 	bic.w	r3, r3, #7
 8016524:	3308      	adds	r3, #8
 8016526:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	f003 0307 	and.w	r3, r3, #7
 801652e:	2b00      	cmp	r3, #0
 8016530:	d00a      	beq.n	8016548 <pvPortMalloc+0x6c>
	__asm volatile
 8016532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016536:	f383 8811 	msr	BASEPRI, r3
 801653a:	f3bf 8f6f 	isb	sy
 801653e:	f3bf 8f4f 	dsb	sy
 8016542:	617b      	str	r3, [r7, #20]
}
 8016544:	bf00      	nop
 8016546:	e7fe      	b.n	8016546 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	2b00      	cmp	r3, #0
 801654c:	d06e      	beq.n	801662c <pvPortMalloc+0x150>
 801654e:	4b45      	ldr	r3, [pc, #276]	; (8016664 <pvPortMalloc+0x188>)
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	687a      	ldr	r2, [r7, #4]
 8016554:	429a      	cmp	r2, r3
 8016556:	d869      	bhi.n	801662c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016558:	4b43      	ldr	r3, [pc, #268]	; (8016668 <pvPortMalloc+0x18c>)
 801655a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801655c:	4b42      	ldr	r3, [pc, #264]	; (8016668 <pvPortMalloc+0x18c>)
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016562:	e004      	b.n	801656e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016566:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016570:	685b      	ldr	r3, [r3, #4]
 8016572:	687a      	ldr	r2, [r7, #4]
 8016574:	429a      	cmp	r2, r3
 8016576:	d903      	bls.n	8016580 <pvPortMalloc+0xa4>
 8016578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	2b00      	cmp	r3, #0
 801657e:	d1f1      	bne.n	8016564 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016580:	4b36      	ldr	r3, [pc, #216]	; (801665c <pvPortMalloc+0x180>)
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016586:	429a      	cmp	r2, r3
 8016588:	d050      	beq.n	801662c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801658a:	6a3b      	ldr	r3, [r7, #32]
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	2208      	movs	r2, #8
 8016590:	4413      	add	r3, r2
 8016592:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016596:	681a      	ldr	r2, [r3, #0]
 8016598:	6a3b      	ldr	r3, [r7, #32]
 801659a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801659e:	685a      	ldr	r2, [r3, #4]
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	1ad2      	subs	r2, r2, r3
 80165a4:	2308      	movs	r3, #8
 80165a6:	005b      	lsls	r3, r3, #1
 80165a8:	429a      	cmp	r2, r3
 80165aa:	d91f      	bls.n	80165ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80165ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	4413      	add	r3, r2
 80165b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80165b4:	69bb      	ldr	r3, [r7, #24]
 80165b6:	f003 0307 	and.w	r3, r3, #7
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d00a      	beq.n	80165d4 <pvPortMalloc+0xf8>
	__asm volatile
 80165be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165c2:	f383 8811 	msr	BASEPRI, r3
 80165c6:	f3bf 8f6f 	isb	sy
 80165ca:	f3bf 8f4f 	dsb	sy
 80165ce:	613b      	str	r3, [r7, #16]
}
 80165d0:	bf00      	nop
 80165d2:	e7fe      	b.n	80165d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80165d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165d6:	685a      	ldr	r2, [r3, #4]
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	1ad2      	subs	r2, r2, r3
 80165dc:	69bb      	ldr	r3, [r7, #24]
 80165de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80165e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165e2:	687a      	ldr	r2, [r7, #4]
 80165e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80165e6:	69b8      	ldr	r0, [r7, #24]
 80165e8:	f000 f908 	bl	80167fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80165ec:	4b1d      	ldr	r3, [pc, #116]	; (8016664 <pvPortMalloc+0x188>)
 80165ee:	681a      	ldr	r2, [r3, #0]
 80165f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165f2:	685b      	ldr	r3, [r3, #4]
 80165f4:	1ad3      	subs	r3, r2, r3
 80165f6:	4a1b      	ldr	r2, [pc, #108]	; (8016664 <pvPortMalloc+0x188>)
 80165f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80165fa:	4b1a      	ldr	r3, [pc, #104]	; (8016664 <pvPortMalloc+0x188>)
 80165fc:	681a      	ldr	r2, [r3, #0]
 80165fe:	4b1b      	ldr	r3, [pc, #108]	; (801666c <pvPortMalloc+0x190>)
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	429a      	cmp	r2, r3
 8016604:	d203      	bcs.n	801660e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016606:	4b17      	ldr	r3, [pc, #92]	; (8016664 <pvPortMalloc+0x188>)
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	4a18      	ldr	r2, [pc, #96]	; (801666c <pvPortMalloc+0x190>)
 801660c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016610:	685a      	ldr	r2, [r3, #4]
 8016612:	4b13      	ldr	r3, [pc, #76]	; (8016660 <pvPortMalloc+0x184>)
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	431a      	orrs	r2, r3
 8016618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801661a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801661e:	2200      	movs	r2, #0
 8016620:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016622:	4b13      	ldr	r3, [pc, #76]	; (8016670 <pvPortMalloc+0x194>)
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	3301      	adds	r3, #1
 8016628:	4a11      	ldr	r2, [pc, #68]	; (8016670 <pvPortMalloc+0x194>)
 801662a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801662c:	f7ff f986 	bl	801593c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016630:	69fb      	ldr	r3, [r7, #28]
 8016632:	f003 0307 	and.w	r3, r3, #7
 8016636:	2b00      	cmp	r3, #0
 8016638:	d00a      	beq.n	8016650 <pvPortMalloc+0x174>
	__asm volatile
 801663a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801663e:	f383 8811 	msr	BASEPRI, r3
 8016642:	f3bf 8f6f 	isb	sy
 8016646:	f3bf 8f4f 	dsb	sy
 801664a:	60fb      	str	r3, [r7, #12]
}
 801664c:	bf00      	nop
 801664e:	e7fe      	b.n	801664e <pvPortMalloc+0x172>
	return pvReturn;
 8016650:	69fb      	ldr	r3, [r7, #28]
}
 8016652:	4618      	mov	r0, r3
 8016654:	3728      	adds	r7, #40	; 0x28
 8016656:	46bd      	mov	sp, r7
 8016658:	bd80      	pop	{r7, pc}
 801665a:	bf00      	nop
 801665c:	20005214 	.word	0x20005214
 8016660:	20005228 	.word	0x20005228
 8016664:	20005218 	.word	0x20005218
 8016668:	2000520c 	.word	0x2000520c
 801666c:	2000521c 	.word	0x2000521c
 8016670:	20005220 	.word	0x20005220

08016674 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016674:	b580      	push	{r7, lr}
 8016676:	b086      	sub	sp, #24
 8016678:	af00      	add	r7, sp, #0
 801667a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	2b00      	cmp	r3, #0
 8016684:	d04d      	beq.n	8016722 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016686:	2308      	movs	r3, #8
 8016688:	425b      	negs	r3, r3
 801668a:	697a      	ldr	r2, [r7, #20]
 801668c:	4413      	add	r3, r2
 801668e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016690:	697b      	ldr	r3, [r7, #20]
 8016692:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016694:	693b      	ldr	r3, [r7, #16]
 8016696:	685a      	ldr	r2, [r3, #4]
 8016698:	4b24      	ldr	r3, [pc, #144]	; (801672c <vPortFree+0xb8>)
 801669a:	681b      	ldr	r3, [r3, #0]
 801669c:	4013      	ands	r3, r2
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d10a      	bne.n	80166b8 <vPortFree+0x44>
	__asm volatile
 80166a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166a6:	f383 8811 	msr	BASEPRI, r3
 80166aa:	f3bf 8f6f 	isb	sy
 80166ae:	f3bf 8f4f 	dsb	sy
 80166b2:	60fb      	str	r3, [r7, #12]
}
 80166b4:	bf00      	nop
 80166b6:	e7fe      	b.n	80166b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80166b8:	693b      	ldr	r3, [r7, #16]
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d00a      	beq.n	80166d6 <vPortFree+0x62>
	__asm volatile
 80166c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166c4:	f383 8811 	msr	BASEPRI, r3
 80166c8:	f3bf 8f6f 	isb	sy
 80166cc:	f3bf 8f4f 	dsb	sy
 80166d0:	60bb      	str	r3, [r7, #8]
}
 80166d2:	bf00      	nop
 80166d4:	e7fe      	b.n	80166d4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80166d6:	693b      	ldr	r3, [r7, #16]
 80166d8:	685a      	ldr	r2, [r3, #4]
 80166da:	4b14      	ldr	r3, [pc, #80]	; (801672c <vPortFree+0xb8>)
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	4013      	ands	r3, r2
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d01e      	beq.n	8016722 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80166e4:	693b      	ldr	r3, [r7, #16]
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d11a      	bne.n	8016722 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80166ec:	693b      	ldr	r3, [r7, #16]
 80166ee:	685a      	ldr	r2, [r3, #4]
 80166f0:	4b0e      	ldr	r3, [pc, #56]	; (801672c <vPortFree+0xb8>)
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	43db      	mvns	r3, r3
 80166f6:	401a      	ands	r2, r3
 80166f8:	693b      	ldr	r3, [r7, #16]
 80166fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80166fc:	f7ff f910 	bl	8015920 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016700:	693b      	ldr	r3, [r7, #16]
 8016702:	685a      	ldr	r2, [r3, #4]
 8016704:	4b0a      	ldr	r3, [pc, #40]	; (8016730 <vPortFree+0xbc>)
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	4413      	add	r3, r2
 801670a:	4a09      	ldr	r2, [pc, #36]	; (8016730 <vPortFree+0xbc>)
 801670c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801670e:	6938      	ldr	r0, [r7, #16]
 8016710:	f000 f874 	bl	80167fc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016714:	4b07      	ldr	r3, [pc, #28]	; (8016734 <vPortFree+0xc0>)
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	3301      	adds	r3, #1
 801671a:	4a06      	ldr	r2, [pc, #24]	; (8016734 <vPortFree+0xc0>)
 801671c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801671e:	f7ff f90d 	bl	801593c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016722:	bf00      	nop
 8016724:	3718      	adds	r7, #24
 8016726:	46bd      	mov	sp, r7
 8016728:	bd80      	pop	{r7, pc}
 801672a:	bf00      	nop
 801672c:	20005228 	.word	0x20005228
 8016730:	20005218 	.word	0x20005218
 8016734:	20005224 	.word	0x20005224

08016738 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016738:	b480      	push	{r7}
 801673a:	b085      	sub	sp, #20
 801673c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801673e:	f244 6350 	movw	r3, #18000	; 0x4650
 8016742:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016744:	4b27      	ldr	r3, [pc, #156]	; (80167e4 <prvHeapInit+0xac>)
 8016746:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	f003 0307 	and.w	r3, r3, #7
 801674e:	2b00      	cmp	r3, #0
 8016750:	d00c      	beq.n	801676c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	3307      	adds	r3, #7
 8016756:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	f023 0307 	bic.w	r3, r3, #7
 801675e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016760:	68ba      	ldr	r2, [r7, #8]
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	1ad3      	subs	r3, r2, r3
 8016766:	4a1f      	ldr	r2, [pc, #124]	; (80167e4 <prvHeapInit+0xac>)
 8016768:	4413      	add	r3, r2
 801676a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016770:	4a1d      	ldr	r2, [pc, #116]	; (80167e8 <prvHeapInit+0xb0>)
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016776:	4b1c      	ldr	r3, [pc, #112]	; (80167e8 <prvHeapInit+0xb0>)
 8016778:	2200      	movs	r2, #0
 801677a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	68ba      	ldr	r2, [r7, #8]
 8016780:	4413      	add	r3, r2
 8016782:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016784:	2208      	movs	r2, #8
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	1a9b      	subs	r3, r3, r2
 801678a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	f023 0307 	bic.w	r3, r3, #7
 8016792:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	4a15      	ldr	r2, [pc, #84]	; (80167ec <prvHeapInit+0xb4>)
 8016798:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801679a:	4b14      	ldr	r3, [pc, #80]	; (80167ec <prvHeapInit+0xb4>)
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	2200      	movs	r2, #0
 80167a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80167a2:	4b12      	ldr	r3, [pc, #72]	; (80167ec <prvHeapInit+0xb4>)
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	2200      	movs	r2, #0
 80167a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80167ae:	683b      	ldr	r3, [r7, #0]
 80167b0:	68fa      	ldr	r2, [r7, #12]
 80167b2:	1ad2      	subs	r2, r2, r3
 80167b4:	683b      	ldr	r3, [r7, #0]
 80167b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80167b8:	4b0c      	ldr	r3, [pc, #48]	; (80167ec <prvHeapInit+0xb4>)
 80167ba:	681a      	ldr	r2, [r3, #0]
 80167bc:	683b      	ldr	r3, [r7, #0]
 80167be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80167c0:	683b      	ldr	r3, [r7, #0]
 80167c2:	685b      	ldr	r3, [r3, #4]
 80167c4:	4a0a      	ldr	r2, [pc, #40]	; (80167f0 <prvHeapInit+0xb8>)
 80167c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80167c8:	683b      	ldr	r3, [r7, #0]
 80167ca:	685b      	ldr	r3, [r3, #4]
 80167cc:	4a09      	ldr	r2, [pc, #36]	; (80167f4 <prvHeapInit+0xbc>)
 80167ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80167d0:	4b09      	ldr	r3, [pc, #36]	; (80167f8 <prvHeapInit+0xc0>)
 80167d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80167d6:	601a      	str	r2, [r3, #0]
}
 80167d8:	bf00      	nop
 80167da:	3714      	adds	r7, #20
 80167dc:	46bd      	mov	sp, r7
 80167de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167e2:	4770      	bx	lr
 80167e4:	20000bbc 	.word	0x20000bbc
 80167e8:	2000520c 	.word	0x2000520c
 80167ec:	20005214 	.word	0x20005214
 80167f0:	2000521c 	.word	0x2000521c
 80167f4:	20005218 	.word	0x20005218
 80167f8:	20005228 	.word	0x20005228

080167fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80167fc:	b480      	push	{r7}
 80167fe:	b085      	sub	sp, #20
 8016800:	af00      	add	r7, sp, #0
 8016802:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016804:	4b28      	ldr	r3, [pc, #160]	; (80168a8 <prvInsertBlockIntoFreeList+0xac>)
 8016806:	60fb      	str	r3, [r7, #12]
 8016808:	e002      	b.n	8016810 <prvInsertBlockIntoFreeList+0x14>
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	60fb      	str	r3, [r7, #12]
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	681b      	ldr	r3, [r3, #0]
 8016814:	687a      	ldr	r2, [r7, #4]
 8016816:	429a      	cmp	r2, r3
 8016818:	d8f7      	bhi.n	801680a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801681a:	68fb      	ldr	r3, [r7, #12]
 801681c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	685b      	ldr	r3, [r3, #4]
 8016822:	68ba      	ldr	r2, [r7, #8]
 8016824:	4413      	add	r3, r2
 8016826:	687a      	ldr	r2, [r7, #4]
 8016828:	429a      	cmp	r2, r3
 801682a:	d108      	bne.n	801683e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	685a      	ldr	r2, [r3, #4]
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	685b      	ldr	r3, [r3, #4]
 8016834:	441a      	add	r2, r3
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	685b      	ldr	r3, [r3, #4]
 8016846:	68ba      	ldr	r2, [r7, #8]
 8016848:	441a      	add	r2, r3
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	429a      	cmp	r2, r3
 8016850:	d118      	bne.n	8016884 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016852:	68fb      	ldr	r3, [r7, #12]
 8016854:	681a      	ldr	r2, [r3, #0]
 8016856:	4b15      	ldr	r3, [pc, #84]	; (80168ac <prvInsertBlockIntoFreeList+0xb0>)
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	429a      	cmp	r2, r3
 801685c:	d00d      	beq.n	801687a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	685a      	ldr	r2, [r3, #4]
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	685b      	ldr	r3, [r3, #4]
 8016868:	441a      	add	r2, r3
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	681a      	ldr	r2, [r3, #0]
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	601a      	str	r2, [r3, #0]
 8016878:	e008      	b.n	801688c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801687a:	4b0c      	ldr	r3, [pc, #48]	; (80168ac <prvInsertBlockIntoFreeList+0xb0>)
 801687c:	681a      	ldr	r2, [r3, #0]
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	601a      	str	r2, [r3, #0]
 8016882:	e003      	b.n	801688c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	681a      	ldr	r2, [r3, #0]
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801688c:	68fa      	ldr	r2, [r7, #12]
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	429a      	cmp	r2, r3
 8016892:	d002      	beq.n	801689a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	687a      	ldr	r2, [r7, #4]
 8016898:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801689a:	bf00      	nop
 801689c:	3714      	adds	r7, #20
 801689e:	46bd      	mov	sp, r7
 80168a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168a4:	4770      	bx	lr
 80168a6:	bf00      	nop
 80168a8:	2000520c 	.word	0x2000520c
 80168ac:	20005214 	.word	0x20005214

080168b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b082      	sub	sp, #8
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80168c4:	4619      	mov	r1, r3
 80168c6:	4610      	mov	r0, r2
 80168c8:	f7fa f88e 	bl	80109e8 <USBD_LL_SetupStage>
}
 80168cc:	bf00      	nop
 80168ce:	3708      	adds	r7, #8
 80168d0:	46bd      	mov	sp, r7
 80168d2:	bd80      	pop	{r7, pc}

080168d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b082      	sub	sp, #8
 80168d8:	af00      	add	r7, sp, #0
 80168da:	6078      	str	r0, [r7, #4]
 80168dc:	460b      	mov	r3, r1
 80168de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80168e6:	78fa      	ldrb	r2, [r7, #3]
 80168e8:	6879      	ldr	r1, [r7, #4]
 80168ea:	4613      	mov	r3, r2
 80168ec:	00db      	lsls	r3, r3, #3
 80168ee:	1a9b      	subs	r3, r3, r2
 80168f0:	009b      	lsls	r3, r3, #2
 80168f2:	440b      	add	r3, r1
 80168f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80168f8:	681a      	ldr	r2, [r3, #0]
 80168fa:	78fb      	ldrb	r3, [r7, #3]
 80168fc:	4619      	mov	r1, r3
 80168fe:	f7fa f8c8 	bl	8010a92 <USBD_LL_DataOutStage>
}
 8016902:	bf00      	nop
 8016904:	3708      	adds	r7, #8
 8016906:	46bd      	mov	sp, r7
 8016908:	bd80      	pop	{r7, pc}

0801690a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801690a:	b580      	push	{r7, lr}
 801690c:	b082      	sub	sp, #8
 801690e:	af00      	add	r7, sp, #0
 8016910:	6078      	str	r0, [r7, #4]
 8016912:	460b      	mov	r3, r1
 8016914:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801691c:	78fa      	ldrb	r2, [r7, #3]
 801691e:	6879      	ldr	r1, [r7, #4]
 8016920:	4613      	mov	r3, r2
 8016922:	00db      	lsls	r3, r3, #3
 8016924:	1a9b      	subs	r3, r3, r2
 8016926:	009b      	lsls	r3, r3, #2
 8016928:	440b      	add	r3, r1
 801692a:	3348      	adds	r3, #72	; 0x48
 801692c:	681a      	ldr	r2, [r3, #0]
 801692e:	78fb      	ldrb	r3, [r7, #3]
 8016930:	4619      	mov	r1, r3
 8016932:	f7fa f911 	bl	8010b58 <USBD_LL_DataInStage>
}
 8016936:	bf00      	nop
 8016938:	3708      	adds	r7, #8
 801693a:	46bd      	mov	sp, r7
 801693c:	bd80      	pop	{r7, pc}

0801693e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801693e:	b580      	push	{r7, lr}
 8016940:	b082      	sub	sp, #8
 8016942:	af00      	add	r7, sp, #0
 8016944:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801694c:	4618      	mov	r0, r3
 801694e:	f7fa fa25 	bl	8010d9c <USBD_LL_SOF>
}
 8016952:	bf00      	nop
 8016954:	3708      	adds	r7, #8
 8016956:	46bd      	mov	sp, r7
 8016958:	bd80      	pop	{r7, pc}

0801695a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801695a:	b580      	push	{r7, lr}
 801695c:	b084      	sub	sp, #16
 801695e:	af00      	add	r7, sp, #0
 8016960:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016962:	2301      	movs	r3, #1
 8016964:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	68db      	ldr	r3, [r3, #12]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d102      	bne.n	8016974 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801696e:	2300      	movs	r3, #0
 8016970:	73fb      	strb	r3, [r7, #15]
 8016972:	e008      	b.n	8016986 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	68db      	ldr	r3, [r3, #12]
 8016978:	2b02      	cmp	r3, #2
 801697a:	d102      	bne.n	8016982 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801697c:	2301      	movs	r3, #1
 801697e:	73fb      	strb	r3, [r7, #15]
 8016980:	e001      	b.n	8016986 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016982:	f7eb fa95 	bl	8001eb0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801698c:	7bfa      	ldrb	r2, [r7, #15]
 801698e:	4611      	mov	r1, r2
 8016990:	4618      	mov	r0, r3
 8016992:	f7fa f9c5 	bl	8010d20 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801699c:	4618      	mov	r0, r3
 801699e:	f7fa f971 	bl	8010c84 <USBD_LL_Reset>
}
 80169a2:	bf00      	nop
 80169a4:	3710      	adds	r7, #16
 80169a6:	46bd      	mov	sp, r7
 80169a8:	bd80      	pop	{r7, pc}
	...

080169ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169ac:	b580      	push	{r7, lr}
 80169ae:	b082      	sub	sp, #8
 80169b0:	af00      	add	r7, sp, #0
 80169b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80169ba:	4618      	mov	r0, r3
 80169bc:	f7fa f9c0 	bl	8010d40 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	687a      	ldr	r2, [r7, #4]
 80169cc:	6812      	ldr	r2, [r2, #0]
 80169ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80169d2:	f043 0301 	orr.w	r3, r3, #1
 80169d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	6a1b      	ldr	r3, [r3, #32]
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d005      	beq.n	80169ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80169e0:	4b04      	ldr	r3, [pc, #16]	; (80169f4 <HAL_PCD_SuspendCallback+0x48>)
 80169e2:	691b      	ldr	r3, [r3, #16]
 80169e4:	4a03      	ldr	r2, [pc, #12]	; (80169f4 <HAL_PCD_SuspendCallback+0x48>)
 80169e6:	f043 0306 	orr.w	r3, r3, #6
 80169ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80169ec:	bf00      	nop
 80169ee:	3708      	adds	r7, #8
 80169f0:	46bd      	mov	sp, r7
 80169f2:	bd80      	pop	{r7, pc}
 80169f4:	e000ed00 	.word	0xe000ed00

080169f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169f8:	b580      	push	{r7, lr}
 80169fa:	b082      	sub	sp, #8
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016a06:	4618      	mov	r0, r3
 8016a08:	f7fa f9b0 	bl	8010d6c <USBD_LL_Resume>
}
 8016a0c:	bf00      	nop
 8016a0e:	3708      	adds	r7, #8
 8016a10:	46bd      	mov	sp, r7
 8016a12:	bd80      	pop	{r7, pc}

08016a14 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a14:	b580      	push	{r7, lr}
 8016a16:	b082      	sub	sp, #8
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	6078      	str	r0, [r7, #4]
 8016a1c:	460b      	mov	r3, r1
 8016a1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016a26:	78fa      	ldrb	r2, [r7, #3]
 8016a28:	4611      	mov	r1, r2
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	f7fa f9fe 	bl	8010e2c <USBD_LL_IsoOUTIncomplete>
}
 8016a30:	bf00      	nop
 8016a32:	3708      	adds	r7, #8
 8016a34:	46bd      	mov	sp, r7
 8016a36:	bd80      	pop	{r7, pc}

08016a38 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	b082      	sub	sp, #8
 8016a3c:	af00      	add	r7, sp, #0
 8016a3e:	6078      	str	r0, [r7, #4]
 8016a40:	460b      	mov	r3, r1
 8016a42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016a4a:	78fa      	ldrb	r2, [r7, #3]
 8016a4c:	4611      	mov	r1, r2
 8016a4e:	4618      	mov	r0, r3
 8016a50:	f7fa f9c6 	bl	8010de0 <USBD_LL_IsoINIncomplete>
}
 8016a54:	bf00      	nop
 8016a56:	3708      	adds	r7, #8
 8016a58:	46bd      	mov	sp, r7
 8016a5a:	bd80      	pop	{r7, pc}

08016a5c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	b082      	sub	sp, #8
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	f7fa fa04 	bl	8010e78 <USBD_LL_DevConnected>
}
 8016a70:	bf00      	nop
 8016a72:	3708      	adds	r7, #8
 8016a74:	46bd      	mov	sp, r7
 8016a76:	bd80      	pop	{r7, pc}

08016a78 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a78:	b580      	push	{r7, lr}
 8016a7a:	b082      	sub	sp, #8
 8016a7c:	af00      	add	r7, sp, #0
 8016a7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016a86:	4618      	mov	r0, r3
 8016a88:	f7fa fa01 	bl	8010e8e <USBD_LL_DevDisconnected>
}
 8016a8c:	bf00      	nop
 8016a8e:	3708      	adds	r7, #8
 8016a90:	46bd      	mov	sp, r7
 8016a92:	bd80      	pop	{r7, pc}

08016a94 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016a94:	b580      	push	{r7, lr}
 8016a96:	b084      	sub	sp, #16
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	6078      	str	r0, [r7, #4]
 8016a9c:	4608      	mov	r0, r1
 8016a9e:	4611      	mov	r1, r2
 8016aa0:	461a      	mov	r2, r3
 8016aa2:	4603      	mov	r3, r0
 8016aa4:	70fb      	strb	r3, [r7, #3]
 8016aa6:	460b      	mov	r3, r1
 8016aa8:	70bb      	strb	r3, [r7, #2]
 8016aaa:	4613      	mov	r3, r2
 8016aac:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016aae:	2300      	movs	r3, #0
 8016ab0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ab2:	2300      	movs	r3, #0
 8016ab4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016abc:	78bb      	ldrb	r3, [r7, #2]
 8016abe:	883a      	ldrh	r2, [r7, #0]
 8016ac0:	78f9      	ldrb	r1, [r7, #3]
 8016ac2:	f7f4 fdc4 	bl	800b64e <HAL_PCD_EP_Open>
 8016ac6:	4603      	mov	r3, r0
 8016ac8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016aca:	7bfb      	ldrb	r3, [r7, #15]
 8016acc:	4618      	mov	r0, r3
 8016ace:	f000 f8d3 	bl	8016c78 <USBD_Get_USB_Status>
 8016ad2:	4603      	mov	r3, r0
 8016ad4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ad6:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ad8:	4618      	mov	r0, r3
 8016ada:	3710      	adds	r7, #16
 8016adc:	46bd      	mov	sp, r7
 8016ade:	bd80      	pop	{r7, pc}

08016ae0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ae0:	b580      	push	{r7, lr}
 8016ae2:	b084      	sub	sp, #16
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	6078      	str	r0, [r7, #4]
 8016ae8:	460b      	mov	r3, r1
 8016aea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016aec:	2300      	movs	r3, #0
 8016aee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016af0:	2300      	movs	r3, #0
 8016af2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016afa:	78fa      	ldrb	r2, [r7, #3]
 8016afc:	4611      	mov	r1, r2
 8016afe:	4618      	mov	r0, r3
 8016b00:	f7f4 fea2 	bl	800b848 <HAL_PCD_EP_SetStall>
 8016b04:	4603      	mov	r3, r0
 8016b06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b08:	7bfb      	ldrb	r3, [r7, #15]
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	f000 f8b4 	bl	8016c78 <USBD_Get_USB_Status>
 8016b10:	4603      	mov	r3, r0
 8016b12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b14:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b16:	4618      	mov	r0, r3
 8016b18:	3710      	adds	r7, #16
 8016b1a:	46bd      	mov	sp, r7
 8016b1c:	bd80      	pop	{r7, pc}

08016b1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b1e:	b580      	push	{r7, lr}
 8016b20:	b084      	sub	sp, #16
 8016b22:	af00      	add	r7, sp, #0
 8016b24:	6078      	str	r0, [r7, #4]
 8016b26:	460b      	mov	r3, r1
 8016b28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b2a:	2300      	movs	r3, #0
 8016b2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b2e:	2300      	movs	r3, #0
 8016b30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016b38:	78fa      	ldrb	r2, [r7, #3]
 8016b3a:	4611      	mov	r1, r2
 8016b3c:	4618      	mov	r0, r3
 8016b3e:	f7f4 fee7 	bl	800b910 <HAL_PCD_EP_ClrStall>
 8016b42:	4603      	mov	r3, r0
 8016b44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b46:	7bfb      	ldrb	r3, [r7, #15]
 8016b48:	4618      	mov	r0, r3
 8016b4a:	f000 f895 	bl	8016c78 <USBD_Get_USB_Status>
 8016b4e:	4603      	mov	r3, r0
 8016b50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b52:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b54:	4618      	mov	r0, r3
 8016b56:	3710      	adds	r7, #16
 8016b58:	46bd      	mov	sp, r7
 8016b5a:	bd80      	pop	{r7, pc}

08016b5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b5c:	b480      	push	{r7}
 8016b5e:	b085      	sub	sp, #20
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	6078      	str	r0, [r7, #4]
 8016b64:	460b      	mov	r3, r1
 8016b66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016b6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016b70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	da0b      	bge.n	8016b90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016b78:	78fb      	ldrb	r3, [r7, #3]
 8016b7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016b7e:	68f9      	ldr	r1, [r7, #12]
 8016b80:	4613      	mov	r3, r2
 8016b82:	00db      	lsls	r3, r3, #3
 8016b84:	1a9b      	subs	r3, r3, r2
 8016b86:	009b      	lsls	r3, r3, #2
 8016b88:	440b      	add	r3, r1
 8016b8a:	333e      	adds	r3, #62	; 0x3e
 8016b8c:	781b      	ldrb	r3, [r3, #0]
 8016b8e:	e00b      	b.n	8016ba8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016b90:	78fb      	ldrb	r3, [r7, #3]
 8016b92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016b96:	68f9      	ldr	r1, [r7, #12]
 8016b98:	4613      	mov	r3, r2
 8016b9a:	00db      	lsls	r3, r3, #3
 8016b9c:	1a9b      	subs	r3, r3, r2
 8016b9e:	009b      	lsls	r3, r3, #2
 8016ba0:	440b      	add	r3, r1
 8016ba2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016ba6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016ba8:	4618      	mov	r0, r3
 8016baa:	3714      	adds	r7, #20
 8016bac:	46bd      	mov	sp, r7
 8016bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb2:	4770      	bx	lr

08016bb4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016bb4:	b580      	push	{r7, lr}
 8016bb6:	b084      	sub	sp, #16
 8016bb8:	af00      	add	r7, sp, #0
 8016bba:	6078      	str	r0, [r7, #4]
 8016bbc:	460b      	mov	r3, r1
 8016bbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bc4:	2300      	movs	r3, #0
 8016bc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016bce:	78fa      	ldrb	r2, [r7, #3]
 8016bd0:	4611      	mov	r1, r2
 8016bd2:	4618      	mov	r0, r3
 8016bd4:	f7f4 fd16 	bl	800b604 <HAL_PCD_SetAddress>
 8016bd8:	4603      	mov	r3, r0
 8016bda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016bdc:	7bfb      	ldrb	r3, [r7, #15]
 8016bde:	4618      	mov	r0, r3
 8016be0:	f000 f84a 	bl	8016c78 <USBD_Get_USB_Status>
 8016be4:	4603      	mov	r3, r0
 8016be6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016be8:	7bbb      	ldrb	r3, [r7, #14]
}
 8016bea:	4618      	mov	r0, r3
 8016bec:	3710      	adds	r7, #16
 8016bee:	46bd      	mov	sp, r7
 8016bf0:	bd80      	pop	{r7, pc}

08016bf2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016bf2:	b580      	push	{r7, lr}
 8016bf4:	b086      	sub	sp, #24
 8016bf6:	af00      	add	r7, sp, #0
 8016bf8:	60f8      	str	r0, [r7, #12]
 8016bfa:	607a      	str	r2, [r7, #4]
 8016bfc:	603b      	str	r3, [r7, #0]
 8016bfe:	460b      	mov	r3, r1
 8016c00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c02:	2300      	movs	r3, #0
 8016c04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c06:	2300      	movs	r3, #0
 8016c08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016c0a:	68fb      	ldr	r3, [r7, #12]
 8016c0c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016c10:	7af9      	ldrb	r1, [r7, #11]
 8016c12:	683b      	ldr	r3, [r7, #0]
 8016c14:	687a      	ldr	r2, [r7, #4]
 8016c16:	f7f4 fdcd 	bl	800b7b4 <HAL_PCD_EP_Transmit>
 8016c1a:	4603      	mov	r3, r0
 8016c1c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c1e:	7dfb      	ldrb	r3, [r7, #23]
 8016c20:	4618      	mov	r0, r3
 8016c22:	f000 f829 	bl	8016c78 <USBD_Get_USB_Status>
 8016c26:	4603      	mov	r3, r0
 8016c28:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016c2a:	7dbb      	ldrb	r3, [r7, #22]
}
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	3718      	adds	r7, #24
 8016c30:	46bd      	mov	sp, r7
 8016c32:	bd80      	pop	{r7, pc}

08016c34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016c34:	b580      	push	{r7, lr}
 8016c36:	b086      	sub	sp, #24
 8016c38:	af00      	add	r7, sp, #0
 8016c3a:	60f8      	str	r0, [r7, #12]
 8016c3c:	607a      	str	r2, [r7, #4]
 8016c3e:	603b      	str	r3, [r7, #0]
 8016c40:	460b      	mov	r3, r1
 8016c42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c44:	2300      	movs	r3, #0
 8016c46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c48:	2300      	movs	r3, #0
 8016c4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016c52:	7af9      	ldrb	r1, [r7, #11]
 8016c54:	683b      	ldr	r3, [r7, #0]
 8016c56:	687a      	ldr	r2, [r7, #4]
 8016c58:	f7f4 fd61 	bl	800b71e <HAL_PCD_EP_Receive>
 8016c5c:	4603      	mov	r3, r0
 8016c5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c60:	7dfb      	ldrb	r3, [r7, #23]
 8016c62:	4618      	mov	r0, r3
 8016c64:	f000 f808 	bl	8016c78 <USBD_Get_USB_Status>
 8016c68:	4603      	mov	r3, r0
 8016c6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016c6c:	7dbb      	ldrb	r3, [r7, #22]
}
 8016c6e:	4618      	mov	r0, r3
 8016c70:	3718      	adds	r7, #24
 8016c72:	46bd      	mov	sp, r7
 8016c74:	bd80      	pop	{r7, pc}
	...

08016c78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016c78:	b480      	push	{r7}
 8016c7a:	b085      	sub	sp, #20
 8016c7c:	af00      	add	r7, sp, #0
 8016c7e:	4603      	mov	r3, r0
 8016c80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c82:	2300      	movs	r3, #0
 8016c84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016c86:	79fb      	ldrb	r3, [r7, #7]
 8016c88:	2b03      	cmp	r3, #3
 8016c8a:	d817      	bhi.n	8016cbc <USBD_Get_USB_Status+0x44>
 8016c8c:	a201      	add	r2, pc, #4	; (adr r2, 8016c94 <USBD_Get_USB_Status+0x1c>)
 8016c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c92:	bf00      	nop
 8016c94:	08016ca5 	.word	0x08016ca5
 8016c98:	08016cab 	.word	0x08016cab
 8016c9c:	08016cb1 	.word	0x08016cb1
 8016ca0:	08016cb7 	.word	0x08016cb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016ca4:	2300      	movs	r3, #0
 8016ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8016ca8:	e00b      	b.n	8016cc2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016caa:	2303      	movs	r3, #3
 8016cac:	73fb      	strb	r3, [r7, #15]
    break;
 8016cae:	e008      	b.n	8016cc2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016cb0:	2301      	movs	r3, #1
 8016cb2:	73fb      	strb	r3, [r7, #15]
    break;
 8016cb4:	e005      	b.n	8016cc2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016cb6:	2303      	movs	r3, #3
 8016cb8:	73fb      	strb	r3, [r7, #15]
    break;
 8016cba:	e002      	b.n	8016cc2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016cbc:	2303      	movs	r3, #3
 8016cbe:	73fb      	strb	r3, [r7, #15]
    break;
 8016cc0:	bf00      	nop
  }
  return usb_status;
 8016cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016cc4:	4618      	mov	r0, r3
 8016cc6:	3714      	adds	r7, #20
 8016cc8:	46bd      	mov	sp, r7
 8016cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cce:	4770      	bx	lr

08016cd0 <_Znwj>:
 8016cd0:	2801      	cmp	r0, #1
 8016cd2:	bf38      	it	cc
 8016cd4:	2001      	movcc	r0, #1
 8016cd6:	b510      	push	{r4, lr}
 8016cd8:	4604      	mov	r4, r0
 8016cda:	4620      	mov	r0, r4
 8016cdc:	f000 fa82 	bl	80171e4 <malloc>
 8016ce0:	b930      	cbnz	r0, 8016cf0 <_Znwj+0x20>
 8016ce2:	f000 f81d 	bl	8016d20 <_ZSt15get_new_handlerv>
 8016ce6:	b908      	cbnz	r0, 8016cec <_Znwj+0x1c>
 8016ce8:	f000 f82a 	bl	8016d40 <abort>
 8016cec:	4780      	blx	r0
 8016cee:	e7f4      	b.n	8016cda <_Znwj+0xa>
 8016cf0:	bd10      	pop	{r4, pc}

08016cf2 <_Znaj>:
 8016cf2:	f7ff bfed 	b.w	8016cd0 <_Znwj>

08016cf6 <__cxa_pure_virtual>:
 8016cf6:	b508      	push	{r3, lr}
 8016cf8:	f000 f80c 	bl	8016d14 <_ZSt9terminatev>

08016cfc <_ZN10__cxxabiv111__terminateEPFvvE>:
 8016cfc:	b508      	push	{r3, lr}
 8016cfe:	4780      	blx	r0
 8016d00:	f000 f81e 	bl	8016d40 <abort>

08016d04 <_ZSt13get_terminatev>:
 8016d04:	4b02      	ldr	r3, [pc, #8]	; (8016d10 <_ZSt13get_terminatev+0xc>)
 8016d06:	6818      	ldr	r0, [r3, #0]
 8016d08:	f3bf 8f5b 	dmb	ish
 8016d0c:	4770      	bx	lr
 8016d0e:	bf00      	nop
 8016d10:	20000080 	.word	0x20000080

08016d14 <_ZSt9terminatev>:
 8016d14:	b508      	push	{r3, lr}
 8016d16:	f7ff fff5 	bl	8016d04 <_ZSt13get_terminatev>
 8016d1a:	f7ff ffef 	bl	8016cfc <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08016d20 <_ZSt15get_new_handlerv>:
 8016d20:	4b02      	ldr	r3, [pc, #8]	; (8016d2c <_ZSt15get_new_handlerv+0xc>)
 8016d22:	6818      	ldr	r0, [r3, #0]
 8016d24:	f3bf 8f5b 	dmb	ish
 8016d28:	4770      	bx	lr
 8016d2a:	bf00      	nop
 8016d2c:	2000522c 	.word	0x2000522c

08016d30 <nan>:
 8016d30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016d38 <nan+0x8>
 8016d34:	4770      	bx	lr
 8016d36:	bf00      	nop
 8016d38:	00000000 	.word	0x00000000
 8016d3c:	7ff80000 	.word	0x7ff80000

08016d40 <abort>:
 8016d40:	b508      	push	{r3, lr}
 8016d42:	2006      	movs	r0, #6
 8016d44:	f001 fcfc 	bl	8018740 <raise>
 8016d48:	2001      	movs	r0, #1
 8016d4a:	f006 f917 	bl	801cf7c <_exit>

08016d4e <atoi>:
 8016d4e:	220a      	movs	r2, #10
 8016d50:	2100      	movs	r1, #0
 8016d52:	f002 bcd7 	b.w	8019704 <strtol>

08016d56 <atol>:
 8016d56:	220a      	movs	r2, #10
 8016d58:	2100      	movs	r1, #0
 8016d5a:	f002 bcd3 	b.w	8019704 <strtol>
	...

08016d60 <__errno>:
 8016d60:	4b01      	ldr	r3, [pc, #4]	; (8016d68 <__errno+0x8>)
 8016d62:	6818      	ldr	r0, [r3, #0]
 8016d64:	4770      	bx	lr
 8016d66:	bf00      	nop
 8016d68:	20000084 	.word	0x20000084

08016d6c <std>:
 8016d6c:	2300      	movs	r3, #0
 8016d6e:	b510      	push	{r4, lr}
 8016d70:	4604      	mov	r4, r0
 8016d72:	e9c0 3300 	strd	r3, r3, [r0]
 8016d76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016d7a:	6083      	str	r3, [r0, #8]
 8016d7c:	8181      	strh	r1, [r0, #12]
 8016d7e:	6643      	str	r3, [r0, #100]	; 0x64
 8016d80:	81c2      	strh	r2, [r0, #14]
 8016d82:	6183      	str	r3, [r0, #24]
 8016d84:	4619      	mov	r1, r3
 8016d86:	2208      	movs	r2, #8
 8016d88:	305c      	adds	r0, #92	; 0x5c
 8016d8a:	f000 fa63 	bl	8017254 <memset>
 8016d8e:	4b05      	ldr	r3, [pc, #20]	; (8016da4 <std+0x38>)
 8016d90:	6263      	str	r3, [r4, #36]	; 0x24
 8016d92:	4b05      	ldr	r3, [pc, #20]	; (8016da8 <std+0x3c>)
 8016d94:	62a3      	str	r3, [r4, #40]	; 0x28
 8016d96:	4b05      	ldr	r3, [pc, #20]	; (8016dac <std+0x40>)
 8016d98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016d9a:	4b05      	ldr	r3, [pc, #20]	; (8016db0 <std+0x44>)
 8016d9c:	6224      	str	r4, [r4, #32]
 8016d9e:	6323      	str	r3, [r4, #48]	; 0x30
 8016da0:	bd10      	pop	{r4, pc}
 8016da2:	bf00      	nop
 8016da4:	08018811 	.word	0x08018811
 8016da8:	08018837 	.word	0x08018837
 8016dac:	0801886f 	.word	0x0801886f
 8016db0:	08018893 	.word	0x08018893

08016db4 <_cleanup_r>:
 8016db4:	4901      	ldr	r1, [pc, #4]	; (8016dbc <_cleanup_r+0x8>)
 8016db6:	f000 b8af 	b.w	8016f18 <_fwalk_reent>
 8016dba:	bf00      	nop
 8016dbc:	0801ad2d 	.word	0x0801ad2d

08016dc0 <__sfmoreglue>:
 8016dc0:	b570      	push	{r4, r5, r6, lr}
 8016dc2:	1e4a      	subs	r2, r1, #1
 8016dc4:	2568      	movs	r5, #104	; 0x68
 8016dc6:	4355      	muls	r5, r2
 8016dc8:	460e      	mov	r6, r1
 8016dca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016dce:	f000 fd17 	bl	8017800 <_malloc_r>
 8016dd2:	4604      	mov	r4, r0
 8016dd4:	b140      	cbz	r0, 8016de8 <__sfmoreglue+0x28>
 8016dd6:	2100      	movs	r1, #0
 8016dd8:	e9c0 1600 	strd	r1, r6, [r0]
 8016ddc:	300c      	adds	r0, #12
 8016dde:	60a0      	str	r0, [r4, #8]
 8016de0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016de4:	f000 fa36 	bl	8017254 <memset>
 8016de8:	4620      	mov	r0, r4
 8016dea:	bd70      	pop	{r4, r5, r6, pc}

08016dec <__sfp_lock_acquire>:
 8016dec:	4801      	ldr	r0, [pc, #4]	; (8016df4 <__sfp_lock_acquire+0x8>)
 8016dee:	f000 b9f5 	b.w	80171dc <__retarget_lock_acquire_recursive>
 8016df2:	bf00      	nop
 8016df4:	20006be4 	.word	0x20006be4

08016df8 <__sfp_lock_release>:
 8016df8:	4801      	ldr	r0, [pc, #4]	; (8016e00 <__sfp_lock_release+0x8>)
 8016dfa:	f000 b9f1 	b.w	80171e0 <__retarget_lock_release_recursive>
 8016dfe:	bf00      	nop
 8016e00:	20006be4 	.word	0x20006be4

08016e04 <__sinit_lock_acquire>:
 8016e04:	4801      	ldr	r0, [pc, #4]	; (8016e0c <__sinit_lock_acquire+0x8>)
 8016e06:	f000 b9e9 	b.w	80171dc <__retarget_lock_acquire_recursive>
 8016e0a:	bf00      	nop
 8016e0c:	20006bdf 	.word	0x20006bdf

08016e10 <__sinit_lock_release>:
 8016e10:	4801      	ldr	r0, [pc, #4]	; (8016e18 <__sinit_lock_release+0x8>)
 8016e12:	f000 b9e5 	b.w	80171e0 <__retarget_lock_release_recursive>
 8016e16:	bf00      	nop
 8016e18:	20006bdf 	.word	0x20006bdf

08016e1c <__sinit>:
 8016e1c:	b510      	push	{r4, lr}
 8016e1e:	4604      	mov	r4, r0
 8016e20:	f7ff fff0 	bl	8016e04 <__sinit_lock_acquire>
 8016e24:	69a3      	ldr	r3, [r4, #24]
 8016e26:	b11b      	cbz	r3, 8016e30 <__sinit+0x14>
 8016e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e2c:	f7ff bff0 	b.w	8016e10 <__sinit_lock_release>
 8016e30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016e34:	6523      	str	r3, [r4, #80]	; 0x50
 8016e36:	4b13      	ldr	r3, [pc, #76]	; (8016e84 <__sinit+0x68>)
 8016e38:	4a13      	ldr	r2, [pc, #76]	; (8016e88 <__sinit+0x6c>)
 8016e3a:	681b      	ldr	r3, [r3, #0]
 8016e3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8016e3e:	42a3      	cmp	r3, r4
 8016e40:	bf04      	itt	eq
 8016e42:	2301      	moveq	r3, #1
 8016e44:	61a3      	streq	r3, [r4, #24]
 8016e46:	4620      	mov	r0, r4
 8016e48:	f000 f820 	bl	8016e8c <__sfp>
 8016e4c:	6060      	str	r0, [r4, #4]
 8016e4e:	4620      	mov	r0, r4
 8016e50:	f000 f81c 	bl	8016e8c <__sfp>
 8016e54:	60a0      	str	r0, [r4, #8]
 8016e56:	4620      	mov	r0, r4
 8016e58:	f000 f818 	bl	8016e8c <__sfp>
 8016e5c:	2200      	movs	r2, #0
 8016e5e:	60e0      	str	r0, [r4, #12]
 8016e60:	2104      	movs	r1, #4
 8016e62:	6860      	ldr	r0, [r4, #4]
 8016e64:	f7ff ff82 	bl	8016d6c <std>
 8016e68:	68a0      	ldr	r0, [r4, #8]
 8016e6a:	2201      	movs	r2, #1
 8016e6c:	2109      	movs	r1, #9
 8016e6e:	f7ff ff7d 	bl	8016d6c <std>
 8016e72:	68e0      	ldr	r0, [r4, #12]
 8016e74:	2202      	movs	r2, #2
 8016e76:	2112      	movs	r1, #18
 8016e78:	f7ff ff78 	bl	8016d6c <std>
 8016e7c:	2301      	movs	r3, #1
 8016e7e:	61a3      	str	r3, [r4, #24]
 8016e80:	e7d2      	b.n	8016e28 <__sinit+0xc>
 8016e82:	bf00      	nop
 8016e84:	0801ee8c 	.word	0x0801ee8c
 8016e88:	08016db5 	.word	0x08016db5

08016e8c <__sfp>:
 8016e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e8e:	4607      	mov	r7, r0
 8016e90:	f7ff ffac 	bl	8016dec <__sfp_lock_acquire>
 8016e94:	4b1e      	ldr	r3, [pc, #120]	; (8016f10 <__sfp+0x84>)
 8016e96:	681e      	ldr	r6, [r3, #0]
 8016e98:	69b3      	ldr	r3, [r6, #24]
 8016e9a:	b913      	cbnz	r3, 8016ea2 <__sfp+0x16>
 8016e9c:	4630      	mov	r0, r6
 8016e9e:	f7ff ffbd 	bl	8016e1c <__sinit>
 8016ea2:	3648      	adds	r6, #72	; 0x48
 8016ea4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016ea8:	3b01      	subs	r3, #1
 8016eaa:	d503      	bpl.n	8016eb4 <__sfp+0x28>
 8016eac:	6833      	ldr	r3, [r6, #0]
 8016eae:	b30b      	cbz	r3, 8016ef4 <__sfp+0x68>
 8016eb0:	6836      	ldr	r6, [r6, #0]
 8016eb2:	e7f7      	b.n	8016ea4 <__sfp+0x18>
 8016eb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016eb8:	b9d5      	cbnz	r5, 8016ef0 <__sfp+0x64>
 8016eba:	4b16      	ldr	r3, [pc, #88]	; (8016f14 <__sfp+0x88>)
 8016ebc:	60e3      	str	r3, [r4, #12]
 8016ebe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016ec2:	6665      	str	r5, [r4, #100]	; 0x64
 8016ec4:	f000 f988 	bl	80171d8 <__retarget_lock_init_recursive>
 8016ec8:	f7ff ff96 	bl	8016df8 <__sfp_lock_release>
 8016ecc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016ed0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016ed4:	6025      	str	r5, [r4, #0]
 8016ed6:	61a5      	str	r5, [r4, #24]
 8016ed8:	2208      	movs	r2, #8
 8016eda:	4629      	mov	r1, r5
 8016edc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016ee0:	f000 f9b8 	bl	8017254 <memset>
 8016ee4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016ee8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016eec:	4620      	mov	r0, r4
 8016eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ef0:	3468      	adds	r4, #104	; 0x68
 8016ef2:	e7d9      	b.n	8016ea8 <__sfp+0x1c>
 8016ef4:	2104      	movs	r1, #4
 8016ef6:	4638      	mov	r0, r7
 8016ef8:	f7ff ff62 	bl	8016dc0 <__sfmoreglue>
 8016efc:	4604      	mov	r4, r0
 8016efe:	6030      	str	r0, [r6, #0]
 8016f00:	2800      	cmp	r0, #0
 8016f02:	d1d5      	bne.n	8016eb0 <__sfp+0x24>
 8016f04:	f7ff ff78 	bl	8016df8 <__sfp_lock_release>
 8016f08:	230c      	movs	r3, #12
 8016f0a:	603b      	str	r3, [r7, #0]
 8016f0c:	e7ee      	b.n	8016eec <__sfp+0x60>
 8016f0e:	bf00      	nop
 8016f10:	0801ee8c 	.word	0x0801ee8c
 8016f14:	ffff0001 	.word	0xffff0001

08016f18 <_fwalk_reent>:
 8016f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f1c:	4606      	mov	r6, r0
 8016f1e:	4688      	mov	r8, r1
 8016f20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016f24:	2700      	movs	r7, #0
 8016f26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016f2a:	f1b9 0901 	subs.w	r9, r9, #1
 8016f2e:	d505      	bpl.n	8016f3c <_fwalk_reent+0x24>
 8016f30:	6824      	ldr	r4, [r4, #0]
 8016f32:	2c00      	cmp	r4, #0
 8016f34:	d1f7      	bne.n	8016f26 <_fwalk_reent+0xe>
 8016f36:	4638      	mov	r0, r7
 8016f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f3c:	89ab      	ldrh	r3, [r5, #12]
 8016f3e:	2b01      	cmp	r3, #1
 8016f40:	d907      	bls.n	8016f52 <_fwalk_reent+0x3a>
 8016f42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016f46:	3301      	adds	r3, #1
 8016f48:	d003      	beq.n	8016f52 <_fwalk_reent+0x3a>
 8016f4a:	4629      	mov	r1, r5
 8016f4c:	4630      	mov	r0, r6
 8016f4e:	47c0      	blx	r8
 8016f50:	4307      	orrs	r7, r0
 8016f52:	3568      	adds	r5, #104	; 0x68
 8016f54:	e7e9      	b.n	8016f2a <_fwalk_reent+0x12>
	...

08016f58 <__libc_init_array>:
 8016f58:	b570      	push	{r4, r5, r6, lr}
 8016f5a:	4d0d      	ldr	r5, [pc, #52]	; (8016f90 <__libc_init_array+0x38>)
 8016f5c:	4c0d      	ldr	r4, [pc, #52]	; (8016f94 <__libc_init_array+0x3c>)
 8016f5e:	1b64      	subs	r4, r4, r5
 8016f60:	10a4      	asrs	r4, r4, #2
 8016f62:	2600      	movs	r6, #0
 8016f64:	42a6      	cmp	r6, r4
 8016f66:	d109      	bne.n	8016f7c <__libc_init_array+0x24>
 8016f68:	4d0b      	ldr	r5, [pc, #44]	; (8016f98 <__libc_init_array+0x40>)
 8016f6a:	4c0c      	ldr	r4, [pc, #48]	; (8016f9c <__libc_init_array+0x44>)
 8016f6c:	f006 f808 	bl	801cf80 <_init>
 8016f70:	1b64      	subs	r4, r4, r5
 8016f72:	10a4      	asrs	r4, r4, #2
 8016f74:	2600      	movs	r6, #0
 8016f76:	42a6      	cmp	r6, r4
 8016f78:	d105      	bne.n	8016f86 <__libc_init_array+0x2e>
 8016f7a:	bd70      	pop	{r4, r5, r6, pc}
 8016f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016f80:	4798      	blx	r3
 8016f82:	3601      	adds	r6, #1
 8016f84:	e7ee      	b.n	8016f64 <__libc_init_array+0xc>
 8016f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8016f8a:	4798      	blx	r3
 8016f8c:	3601      	adds	r6, #1
 8016f8e:	e7f2      	b.n	8016f76 <__libc_init_array+0x1e>
 8016f90:	0801f3b8 	.word	0x0801f3b8
 8016f94:	0801f3b8 	.word	0x0801f3b8
 8016f98:	0801f3b8 	.word	0x0801f3b8
 8016f9c:	0801f3c0 	.word	0x0801f3c0

08016fa0 <isxdigit>:
 8016fa0:	4b02      	ldr	r3, [pc, #8]	; (8016fac <isxdigit+0xc>)
 8016fa2:	4418      	add	r0, r3
 8016fa4:	7840      	ldrb	r0, [r0, #1]
 8016fa6:	f000 0044 	and.w	r0, r0, #68	; 0x44
 8016faa:	4770      	bx	lr
 8016fac:	0801ed28 	.word	0x0801ed28

08016fb0 <localtime>:
 8016fb0:	b538      	push	{r3, r4, r5, lr}
 8016fb2:	4b0b      	ldr	r3, [pc, #44]	; (8016fe0 <localtime+0x30>)
 8016fb4:	681d      	ldr	r5, [r3, #0]
 8016fb6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8016fb8:	4604      	mov	r4, r0
 8016fba:	b953      	cbnz	r3, 8016fd2 <localtime+0x22>
 8016fbc:	2024      	movs	r0, #36	; 0x24
 8016fbe:	f000 f911 	bl	80171e4 <malloc>
 8016fc2:	4602      	mov	r2, r0
 8016fc4:	63e8      	str	r0, [r5, #60]	; 0x3c
 8016fc6:	b920      	cbnz	r0, 8016fd2 <localtime+0x22>
 8016fc8:	4b06      	ldr	r3, [pc, #24]	; (8016fe4 <localtime+0x34>)
 8016fca:	4807      	ldr	r0, [pc, #28]	; (8016fe8 <localtime+0x38>)
 8016fcc:	2132      	movs	r1, #50	; 0x32
 8016fce:	f002 ff6d 	bl	8019eac <__assert_func>
 8016fd2:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8016fd4:	4620      	mov	r0, r4
 8016fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016fda:	f000 b807 	b.w	8016fec <localtime_r>
 8016fde:	bf00      	nop
 8016fe0:	20000084 	.word	0x20000084
 8016fe4:	0801ee90 	.word	0x0801ee90
 8016fe8:	0801eea7 	.word	0x0801eea7

08016fec <localtime_r>:
 8016fec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016ff0:	4607      	mov	r7, r0
 8016ff2:	9101      	str	r1, [sp, #4]
 8016ff4:	f004 fa9a 	bl	801b52c <__gettzinfo>
 8016ff8:	9901      	ldr	r1, [sp, #4]
 8016ffa:	4680      	mov	r8, r0
 8016ffc:	4638      	mov	r0, r7
 8016ffe:	f004 fa99 	bl	801b534 <gmtime_r>
 8017002:	6943      	ldr	r3, [r0, #20]
 8017004:	079a      	lsls	r2, r3, #30
 8017006:	4604      	mov	r4, r0
 8017008:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801700c:	d105      	bne.n	801701a <localtime_r+0x2e>
 801700e:	2264      	movs	r2, #100	; 0x64
 8017010:	fb96 f3f2 	sdiv	r3, r6, r2
 8017014:	fb02 6313 	mls	r3, r2, r3, r6
 8017018:	bb7b      	cbnz	r3, 801707a <localtime_r+0x8e>
 801701a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801701e:	fb96 f5f3 	sdiv	r5, r6, r3
 8017022:	fb03 6515 	mls	r5, r3, r5, r6
 8017026:	fab5 f585 	clz	r5, r5
 801702a:	096d      	lsrs	r5, r5, #5
 801702c:	4b68      	ldr	r3, [pc, #416]	; (80171d0 <localtime_r+0x1e4>)
 801702e:	2230      	movs	r2, #48	; 0x30
 8017030:	fb02 3505 	mla	r5, r2, r5, r3
 8017034:	f002 fca0 	bl	8019978 <__tz_lock>
 8017038:	f002 fcaa 	bl	8019990 <_tzset_unlocked>
 801703c:	4b65      	ldr	r3, [pc, #404]	; (80171d4 <localtime_r+0x1e8>)
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	b353      	cbz	r3, 8017098 <localtime_r+0xac>
 8017042:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017046:	42b3      	cmp	r3, r6
 8017048:	d119      	bne.n	801707e <localtime_r+0x92>
 801704a:	f8d8 1000 	ldr.w	r1, [r8]
 801704e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8017052:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8017056:	b9d1      	cbnz	r1, 801708e <localtime_r+0xa2>
 8017058:	4296      	cmp	r6, r2
 801705a:	eb77 0303 	sbcs.w	r3, r7, r3
 801705e:	da23      	bge.n	80170a8 <localtime_r+0xbc>
 8017060:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8017064:	4296      	cmp	r6, r2
 8017066:	eb77 0303 	sbcs.w	r3, r7, r3
 801706a:	bfb4      	ite	lt
 801706c:	2301      	movlt	r3, #1
 801706e:	2300      	movge	r3, #0
 8017070:	6223      	str	r3, [r4, #32]
 8017072:	db1b      	blt.n	80170ac <localtime_r+0xc0>
 8017074:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8017078:	e01a      	b.n	80170b0 <localtime_r+0xc4>
 801707a:	2501      	movs	r5, #1
 801707c:	e7d6      	b.n	801702c <localtime_r+0x40>
 801707e:	4630      	mov	r0, r6
 8017080:	f002 fbd2 	bl	8019828 <__tzcalc_limits>
 8017084:	2800      	cmp	r0, #0
 8017086:	d1e0      	bne.n	801704a <localtime_r+0x5e>
 8017088:	f04f 33ff 	mov.w	r3, #4294967295
 801708c:	e004      	b.n	8017098 <localtime_r+0xac>
 801708e:	4296      	cmp	r6, r2
 8017090:	eb77 0303 	sbcs.w	r3, r7, r3
 8017094:	da02      	bge.n	801709c <localtime_r+0xb0>
 8017096:	2300      	movs	r3, #0
 8017098:	6223      	str	r3, [r4, #32]
 801709a:	e7eb      	b.n	8017074 <localtime_r+0x88>
 801709c:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80170a0:	4296      	cmp	r6, r2
 80170a2:	eb77 0303 	sbcs.w	r3, r7, r3
 80170a6:	daf6      	bge.n	8017096 <localtime_r+0xaa>
 80170a8:	2301      	movs	r3, #1
 80170aa:	6223      	str	r3, [r4, #32]
 80170ac:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 80170b0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80170b4:	203c      	movs	r0, #60	; 0x3c
 80170b6:	fb91 f6f3 	sdiv	r6, r1, r3
 80170ba:	fb03 1316 	mls	r3, r3, r6, r1
 80170be:	6861      	ldr	r1, [r4, #4]
 80170c0:	fb93 f2f0 	sdiv	r2, r3, r0
 80170c4:	fb00 3012 	mls	r0, r0, r2, r3
 80170c8:	6823      	ldr	r3, [r4, #0]
 80170ca:	1a89      	subs	r1, r1, r2
 80170cc:	68a2      	ldr	r2, [r4, #8]
 80170ce:	6061      	str	r1, [r4, #4]
 80170d0:	1a1b      	subs	r3, r3, r0
 80170d2:	1b92      	subs	r2, r2, r6
 80170d4:	2b3b      	cmp	r3, #59	; 0x3b
 80170d6:	6023      	str	r3, [r4, #0]
 80170d8:	60a2      	str	r2, [r4, #8]
 80170da:	dd35      	ble.n	8017148 <localtime_r+0x15c>
 80170dc:	3101      	adds	r1, #1
 80170de:	6061      	str	r1, [r4, #4]
 80170e0:	3b3c      	subs	r3, #60	; 0x3c
 80170e2:	6023      	str	r3, [r4, #0]
 80170e4:	6863      	ldr	r3, [r4, #4]
 80170e6:	2b3b      	cmp	r3, #59	; 0x3b
 80170e8:	dd34      	ble.n	8017154 <localtime_r+0x168>
 80170ea:	3201      	adds	r2, #1
 80170ec:	60a2      	str	r2, [r4, #8]
 80170ee:	3b3c      	subs	r3, #60	; 0x3c
 80170f0:	6063      	str	r3, [r4, #4]
 80170f2:	68a3      	ldr	r3, [r4, #8]
 80170f4:	2b17      	cmp	r3, #23
 80170f6:	dd33      	ble.n	8017160 <localtime_r+0x174>
 80170f8:	69e2      	ldr	r2, [r4, #28]
 80170fa:	3201      	adds	r2, #1
 80170fc:	61e2      	str	r2, [r4, #28]
 80170fe:	69a2      	ldr	r2, [r4, #24]
 8017100:	3201      	adds	r2, #1
 8017102:	2a06      	cmp	r2, #6
 8017104:	bfc8      	it	gt
 8017106:	2200      	movgt	r2, #0
 8017108:	61a2      	str	r2, [r4, #24]
 801710a:	68e2      	ldr	r2, [r4, #12]
 801710c:	3b18      	subs	r3, #24
 801710e:	3201      	adds	r2, #1
 8017110:	60a3      	str	r3, [r4, #8]
 8017112:	6923      	ldr	r3, [r4, #16]
 8017114:	60e2      	str	r2, [r4, #12]
 8017116:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801711a:	428a      	cmp	r2, r1
 801711c:	dd0e      	ble.n	801713c <localtime_r+0x150>
 801711e:	2b0b      	cmp	r3, #11
 8017120:	eba2 0201 	sub.w	r2, r2, r1
 8017124:	60e2      	str	r2, [r4, #12]
 8017126:	f103 0201 	add.w	r2, r3, #1
 801712a:	bf09      	itett	eq
 801712c:	6963      	ldreq	r3, [r4, #20]
 801712e:	6122      	strne	r2, [r4, #16]
 8017130:	2200      	moveq	r2, #0
 8017132:	3301      	addeq	r3, #1
 8017134:	bf02      	ittt	eq
 8017136:	6122      	streq	r2, [r4, #16]
 8017138:	6163      	streq	r3, [r4, #20]
 801713a:	61e2      	streq	r2, [r4, #28]
 801713c:	f002 fc22 	bl	8019984 <__tz_unlock>
 8017140:	4620      	mov	r0, r4
 8017142:	b002      	add	sp, #8
 8017144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017148:	2b00      	cmp	r3, #0
 801714a:	dacb      	bge.n	80170e4 <localtime_r+0xf8>
 801714c:	3901      	subs	r1, #1
 801714e:	6061      	str	r1, [r4, #4]
 8017150:	333c      	adds	r3, #60	; 0x3c
 8017152:	e7c6      	b.n	80170e2 <localtime_r+0xf6>
 8017154:	2b00      	cmp	r3, #0
 8017156:	dacc      	bge.n	80170f2 <localtime_r+0x106>
 8017158:	3a01      	subs	r2, #1
 801715a:	60a2      	str	r2, [r4, #8]
 801715c:	333c      	adds	r3, #60	; 0x3c
 801715e:	e7c7      	b.n	80170f0 <localtime_r+0x104>
 8017160:	2b00      	cmp	r3, #0
 8017162:	daeb      	bge.n	801713c <localtime_r+0x150>
 8017164:	69e2      	ldr	r2, [r4, #28]
 8017166:	3a01      	subs	r2, #1
 8017168:	61e2      	str	r2, [r4, #28]
 801716a:	69a2      	ldr	r2, [r4, #24]
 801716c:	3a01      	subs	r2, #1
 801716e:	bf48      	it	mi
 8017170:	2206      	movmi	r2, #6
 8017172:	61a2      	str	r2, [r4, #24]
 8017174:	68e2      	ldr	r2, [r4, #12]
 8017176:	3318      	adds	r3, #24
 8017178:	3a01      	subs	r2, #1
 801717a:	60e2      	str	r2, [r4, #12]
 801717c:	60a3      	str	r3, [r4, #8]
 801717e:	2a00      	cmp	r2, #0
 8017180:	d1dc      	bne.n	801713c <localtime_r+0x150>
 8017182:	6923      	ldr	r3, [r4, #16]
 8017184:	3b01      	subs	r3, #1
 8017186:	d405      	bmi.n	8017194 <localtime_r+0x1a8>
 8017188:	6123      	str	r3, [r4, #16]
 801718a:	6923      	ldr	r3, [r4, #16]
 801718c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8017190:	60e3      	str	r3, [r4, #12]
 8017192:	e7d3      	b.n	801713c <localtime_r+0x150>
 8017194:	230b      	movs	r3, #11
 8017196:	6123      	str	r3, [r4, #16]
 8017198:	6963      	ldr	r3, [r4, #20]
 801719a:	1e5a      	subs	r2, r3, #1
 801719c:	6162      	str	r2, [r4, #20]
 801719e:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 80171a2:	0793      	lsls	r3, r2, #30
 80171a4:	d105      	bne.n	80171b2 <localtime_r+0x1c6>
 80171a6:	2164      	movs	r1, #100	; 0x64
 80171a8:	fb92 f3f1 	sdiv	r3, r2, r1
 80171ac:	fb01 2313 	mls	r3, r1, r3, r2
 80171b0:	b963      	cbnz	r3, 80171cc <localtime_r+0x1e0>
 80171b2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80171b6:	fb92 f3f1 	sdiv	r3, r2, r1
 80171ba:	fb01 2313 	mls	r3, r1, r3, r2
 80171be:	fab3 f383 	clz	r3, r3
 80171c2:	095b      	lsrs	r3, r3, #5
 80171c4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80171c8:	61e3      	str	r3, [r4, #28]
 80171ca:	e7de      	b.n	801718a <localtime_r+0x19e>
 80171cc:	2301      	movs	r3, #1
 80171ce:	e7f9      	b.n	80171c4 <localtime_r+0x1d8>
 80171d0:	0801ef68 	.word	0x0801ef68
 80171d4:	20005254 	.word	0x20005254

080171d8 <__retarget_lock_init_recursive>:
 80171d8:	4770      	bx	lr

080171da <__retarget_lock_acquire>:
 80171da:	4770      	bx	lr

080171dc <__retarget_lock_acquire_recursive>:
 80171dc:	4770      	bx	lr

080171de <__retarget_lock_release>:
 80171de:	4770      	bx	lr

080171e0 <__retarget_lock_release_recursive>:
 80171e0:	4770      	bx	lr
	...

080171e4 <malloc>:
 80171e4:	4b02      	ldr	r3, [pc, #8]	; (80171f0 <malloc+0xc>)
 80171e6:	4601      	mov	r1, r0
 80171e8:	6818      	ldr	r0, [r3, #0]
 80171ea:	f000 bb09 	b.w	8017800 <_malloc_r>
 80171ee:	bf00      	nop
 80171f0:	20000084 	.word	0x20000084

080171f4 <free>:
 80171f4:	4b02      	ldr	r3, [pc, #8]	; (8017200 <free+0xc>)
 80171f6:	4601      	mov	r1, r0
 80171f8:	6818      	ldr	r0, [r3, #0]
 80171fa:	f000 bab1 	b.w	8017760 <_free_r>
 80171fe:	bf00      	nop
 8017200:	20000084 	.word	0x20000084

08017204 <memcpy>:
 8017204:	440a      	add	r2, r1
 8017206:	4291      	cmp	r1, r2
 8017208:	f100 33ff 	add.w	r3, r0, #4294967295
 801720c:	d100      	bne.n	8017210 <memcpy+0xc>
 801720e:	4770      	bx	lr
 8017210:	b510      	push	{r4, lr}
 8017212:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017216:	f803 4f01 	strb.w	r4, [r3, #1]!
 801721a:	4291      	cmp	r1, r2
 801721c:	d1f9      	bne.n	8017212 <memcpy+0xe>
 801721e:	bd10      	pop	{r4, pc}

08017220 <memmove>:
 8017220:	4288      	cmp	r0, r1
 8017222:	b510      	push	{r4, lr}
 8017224:	eb01 0402 	add.w	r4, r1, r2
 8017228:	d902      	bls.n	8017230 <memmove+0x10>
 801722a:	4284      	cmp	r4, r0
 801722c:	4623      	mov	r3, r4
 801722e:	d807      	bhi.n	8017240 <memmove+0x20>
 8017230:	1e43      	subs	r3, r0, #1
 8017232:	42a1      	cmp	r1, r4
 8017234:	d008      	beq.n	8017248 <memmove+0x28>
 8017236:	f811 2b01 	ldrb.w	r2, [r1], #1
 801723a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801723e:	e7f8      	b.n	8017232 <memmove+0x12>
 8017240:	4402      	add	r2, r0
 8017242:	4601      	mov	r1, r0
 8017244:	428a      	cmp	r2, r1
 8017246:	d100      	bne.n	801724a <memmove+0x2a>
 8017248:	bd10      	pop	{r4, pc}
 801724a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801724e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017252:	e7f7      	b.n	8017244 <memmove+0x24>

08017254 <memset>:
 8017254:	4402      	add	r2, r0
 8017256:	4603      	mov	r3, r0
 8017258:	4293      	cmp	r3, r2
 801725a:	d100      	bne.n	801725e <memset+0xa>
 801725c:	4770      	bx	lr
 801725e:	f803 1b01 	strb.w	r1, [r3], #1
 8017262:	e7f9      	b.n	8017258 <memset+0x4>

08017264 <validate_structure>:
 8017264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017266:	6801      	ldr	r1, [r0, #0]
 8017268:	293b      	cmp	r1, #59	; 0x3b
 801726a:	4604      	mov	r4, r0
 801726c:	d911      	bls.n	8017292 <validate_structure+0x2e>
 801726e:	223c      	movs	r2, #60	; 0x3c
 8017270:	4668      	mov	r0, sp
 8017272:	f002 fe49 	bl	8019f08 <div>
 8017276:	9a01      	ldr	r2, [sp, #4]
 8017278:	6863      	ldr	r3, [r4, #4]
 801727a:	9900      	ldr	r1, [sp, #0]
 801727c:	2a00      	cmp	r2, #0
 801727e:	440b      	add	r3, r1
 8017280:	6063      	str	r3, [r4, #4]
 8017282:	bfbb      	ittet	lt
 8017284:	323c      	addlt	r2, #60	; 0x3c
 8017286:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801728a:	6022      	strge	r2, [r4, #0]
 801728c:	6022      	strlt	r2, [r4, #0]
 801728e:	bfb8      	it	lt
 8017290:	6063      	strlt	r3, [r4, #4]
 8017292:	6861      	ldr	r1, [r4, #4]
 8017294:	293b      	cmp	r1, #59	; 0x3b
 8017296:	d911      	bls.n	80172bc <validate_structure+0x58>
 8017298:	223c      	movs	r2, #60	; 0x3c
 801729a:	4668      	mov	r0, sp
 801729c:	f002 fe34 	bl	8019f08 <div>
 80172a0:	9a01      	ldr	r2, [sp, #4]
 80172a2:	68a3      	ldr	r3, [r4, #8]
 80172a4:	9900      	ldr	r1, [sp, #0]
 80172a6:	2a00      	cmp	r2, #0
 80172a8:	440b      	add	r3, r1
 80172aa:	60a3      	str	r3, [r4, #8]
 80172ac:	bfbb      	ittet	lt
 80172ae:	323c      	addlt	r2, #60	; 0x3c
 80172b0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80172b4:	6062      	strge	r2, [r4, #4]
 80172b6:	6062      	strlt	r2, [r4, #4]
 80172b8:	bfb8      	it	lt
 80172ba:	60a3      	strlt	r3, [r4, #8]
 80172bc:	68a1      	ldr	r1, [r4, #8]
 80172be:	2917      	cmp	r1, #23
 80172c0:	d911      	bls.n	80172e6 <validate_structure+0x82>
 80172c2:	2218      	movs	r2, #24
 80172c4:	4668      	mov	r0, sp
 80172c6:	f002 fe1f 	bl	8019f08 <div>
 80172ca:	9a01      	ldr	r2, [sp, #4]
 80172cc:	68e3      	ldr	r3, [r4, #12]
 80172ce:	9900      	ldr	r1, [sp, #0]
 80172d0:	2a00      	cmp	r2, #0
 80172d2:	440b      	add	r3, r1
 80172d4:	60e3      	str	r3, [r4, #12]
 80172d6:	bfbb      	ittet	lt
 80172d8:	3218      	addlt	r2, #24
 80172da:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80172de:	60a2      	strge	r2, [r4, #8]
 80172e0:	60a2      	strlt	r2, [r4, #8]
 80172e2:	bfb8      	it	lt
 80172e4:	60e3      	strlt	r3, [r4, #12]
 80172e6:	6921      	ldr	r1, [r4, #16]
 80172e8:	290b      	cmp	r1, #11
 80172ea:	d911      	bls.n	8017310 <validate_structure+0xac>
 80172ec:	220c      	movs	r2, #12
 80172ee:	4668      	mov	r0, sp
 80172f0:	f002 fe0a 	bl	8019f08 <div>
 80172f4:	9a01      	ldr	r2, [sp, #4]
 80172f6:	6963      	ldr	r3, [r4, #20]
 80172f8:	9900      	ldr	r1, [sp, #0]
 80172fa:	2a00      	cmp	r2, #0
 80172fc:	440b      	add	r3, r1
 80172fe:	6163      	str	r3, [r4, #20]
 8017300:	bfbb      	ittet	lt
 8017302:	320c      	addlt	r2, #12
 8017304:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8017308:	6122      	strge	r2, [r4, #16]
 801730a:	6122      	strlt	r2, [r4, #16]
 801730c:	bfb8      	it	lt
 801730e:	6163      	strlt	r3, [r4, #20]
 8017310:	6963      	ldr	r3, [r4, #20]
 8017312:	0799      	lsls	r1, r3, #30
 8017314:	d120      	bne.n	8017358 <validate_structure+0xf4>
 8017316:	2164      	movs	r1, #100	; 0x64
 8017318:	fb93 f2f1 	sdiv	r2, r3, r1
 801731c:	fb01 3212 	mls	r2, r1, r2, r3
 8017320:	b9e2      	cbnz	r2, 801735c <validate_structure+0xf8>
 8017322:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8017326:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801732a:	fb93 f2f1 	sdiv	r2, r3, r1
 801732e:	fb01 3312 	mls	r3, r1, r2, r3
 8017332:	2b00      	cmp	r3, #0
 8017334:	bf14      	ite	ne
 8017336:	231c      	movne	r3, #28
 8017338:	231d      	moveq	r3, #29
 801733a:	68e2      	ldr	r2, [r4, #12]
 801733c:	2a00      	cmp	r2, #0
 801733e:	dc0f      	bgt.n	8017360 <validate_structure+0xfc>
 8017340:	4f33      	ldr	r7, [pc, #204]	; (8017410 <validate_structure+0x1ac>)
 8017342:	260b      	movs	r6, #11
 8017344:	2064      	movs	r0, #100	; 0x64
 8017346:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801734a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801734e:	f1bc 0f00 	cmp.w	ip, #0
 8017352:	dd31      	ble.n	80173b8 <validate_structure+0x154>
 8017354:	b003      	add	sp, #12
 8017356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017358:	231c      	movs	r3, #28
 801735a:	e7ee      	b.n	801733a <validate_structure+0xd6>
 801735c:	231d      	movs	r3, #29
 801735e:	e7ec      	b.n	801733a <validate_structure+0xd6>
 8017360:	4f2b      	ldr	r7, [pc, #172]	; (8017410 <validate_structure+0x1ac>)
 8017362:	f04f 0c00 	mov.w	ip, #0
 8017366:	2564      	movs	r5, #100	; 0x64
 8017368:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801736c:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8017370:	2a01      	cmp	r2, #1
 8017372:	bf14      	ite	ne
 8017374:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 8017378:	4618      	moveq	r0, r3
 801737a:	4281      	cmp	r1, r0
 801737c:	ddea      	ble.n	8017354 <validate_structure+0xf0>
 801737e:	3201      	adds	r2, #1
 8017380:	1a09      	subs	r1, r1, r0
 8017382:	2a0c      	cmp	r2, #12
 8017384:	60e1      	str	r1, [r4, #12]
 8017386:	6122      	str	r2, [r4, #16]
 8017388:	d1f0      	bne.n	801736c <validate_structure+0x108>
 801738a:	6963      	ldr	r3, [r4, #20]
 801738c:	1c5a      	adds	r2, r3, #1
 801738e:	0791      	lsls	r1, r2, #30
 8017390:	e9c4 c204 	strd	ip, r2, [r4, #16]
 8017394:	d137      	bne.n	8017406 <validate_structure+0x1a2>
 8017396:	fb92 f1f5 	sdiv	r1, r2, r5
 801739a:	fb05 2211 	mls	r2, r5, r1, r2
 801739e:	2a00      	cmp	r2, #0
 80173a0:	d133      	bne.n	801740a <validate_structure+0x1a6>
 80173a2:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80173a6:	fb93 f2f6 	sdiv	r2, r3, r6
 80173aa:	fb06 3312 	mls	r3, r6, r2, r3
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	bf14      	ite	ne
 80173b2:	231c      	movne	r3, #28
 80173b4:	231d      	moveq	r3, #29
 80173b6:	e7d9      	b.n	801736c <validate_structure+0x108>
 80173b8:	6921      	ldr	r1, [r4, #16]
 80173ba:	3901      	subs	r1, #1
 80173bc:	6121      	str	r1, [r4, #16]
 80173be:	3101      	adds	r1, #1
 80173c0:	d114      	bne.n	80173ec <validate_structure+0x188>
 80173c2:	6963      	ldr	r3, [r4, #20]
 80173c4:	1e59      	subs	r1, r3, #1
 80173c6:	078a      	lsls	r2, r1, #30
 80173c8:	e9c4 6104 	strd	r6, r1, [r4, #16]
 80173cc:	d117      	bne.n	80173fe <validate_structure+0x19a>
 80173ce:	fb91 f2f0 	sdiv	r2, r1, r0
 80173d2:	fb00 1112 	mls	r1, r0, r2, r1
 80173d6:	b9a1      	cbnz	r1, 8017402 <validate_structure+0x19e>
 80173d8:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80173dc:	fb93 f2f5 	sdiv	r2, r3, r5
 80173e0:	fb05 3312 	mls	r3, r5, r2, r3
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	bf14      	ite	ne
 80173e8:	231c      	movne	r3, #28
 80173ea:	231d      	moveq	r3, #29
 80173ec:	6922      	ldr	r2, [r4, #16]
 80173ee:	2a01      	cmp	r2, #1
 80173f0:	bf14      	ite	ne
 80173f2:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80173f6:	461a      	moveq	r2, r3
 80173f8:	4462      	add	r2, ip
 80173fa:	60e2      	str	r2, [r4, #12]
 80173fc:	e7a5      	b.n	801734a <validate_structure+0xe6>
 80173fe:	231c      	movs	r3, #28
 8017400:	e7f4      	b.n	80173ec <validate_structure+0x188>
 8017402:	231d      	movs	r3, #29
 8017404:	e7f2      	b.n	80173ec <validate_structure+0x188>
 8017406:	231c      	movs	r3, #28
 8017408:	e7b0      	b.n	801736c <validate_structure+0x108>
 801740a:	231d      	movs	r3, #29
 801740c:	e7ae      	b.n	801736c <validate_structure+0x108>
 801740e:	bf00      	nop
 8017410:	0801ef08 	.word	0x0801ef08

08017414 <mktime>:
 8017414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017418:	b08b      	sub	sp, #44	; 0x2c
 801741a:	4605      	mov	r5, r0
 801741c:	f004 f886 	bl	801b52c <__gettzinfo>
 8017420:	4607      	mov	r7, r0
 8017422:	4628      	mov	r0, r5
 8017424:	f7ff ff1e 	bl	8017264 <validate_structure>
 8017428:	e9d5 2300 	ldrd	r2, r3, [r5]
 801742c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 8017430:	68a8      	ldr	r0, [r5, #8]
 8017432:	696e      	ldr	r6, [r5, #20]
 8017434:	fb0a 2303 	mla	r3, sl, r3, r2
 8017438:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 801743c:	fb0a 3a00 	mla	sl, sl, r0, r3
 8017440:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 8017444:	4ac3      	ldr	r2, [pc, #780]	; (8017754 <mktime+0x340>)
 8017446:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801744a:	3c01      	subs	r4, #1
 801744c:	2b01      	cmp	r3, #1
 801744e:	4414      	add	r4, r2
 8017450:	dd11      	ble.n	8017476 <mktime+0x62>
 8017452:	07b1      	lsls	r1, r6, #30
 8017454:	d10f      	bne.n	8017476 <mktime+0x62>
 8017456:	2264      	movs	r2, #100	; 0x64
 8017458:	fb96 f3f2 	sdiv	r3, r6, r2
 801745c:	fb02 6313 	mls	r3, r2, r3, r6
 8017460:	b943      	cbnz	r3, 8017474 <mktime+0x60>
 8017462:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8017466:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801746a:	fb91 f3f2 	sdiv	r3, r1, r2
 801746e:	fb02 1313 	mls	r3, r2, r3, r1
 8017472:	b903      	cbnz	r3, 8017476 <mktime+0x62>
 8017474:	3401      	adds	r4, #1
 8017476:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 801747a:	3310      	adds	r3, #16
 801747c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8017480:	4293      	cmp	r3, r2
 8017482:	61ec      	str	r4, [r5, #28]
 8017484:	f200 8161 	bhi.w	801774a <mktime+0x336>
 8017488:	2e46      	cmp	r6, #70	; 0x46
 801748a:	dd77      	ble.n	801757c <mktime+0x168>
 801748c:	2346      	movs	r3, #70	; 0x46
 801748e:	f240 1e6d 	movw	lr, #365	; 0x16d
 8017492:	2164      	movs	r1, #100	; 0x64
 8017494:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8017498:	079a      	lsls	r2, r3, #30
 801749a:	d169      	bne.n	8017570 <mktime+0x15c>
 801749c:	fb93 f2f1 	sdiv	r2, r3, r1
 80174a0:	fb01 3212 	mls	r2, r1, r2, r3
 80174a4:	2a00      	cmp	r2, #0
 80174a6:	d166      	bne.n	8017576 <mktime+0x162>
 80174a8:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 80174ac:	fb9c f2f0 	sdiv	r2, ip, r0
 80174b0:	fb00 c212 	mls	r2, r0, r2, ip
 80174b4:	2a00      	cmp	r2, #0
 80174b6:	bf14      	ite	ne
 80174b8:	4672      	movne	r2, lr
 80174ba:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80174be:	3301      	adds	r3, #1
 80174c0:	429e      	cmp	r6, r3
 80174c2:	4414      	add	r4, r2
 80174c4:	d1e8      	bne.n	8017498 <mktime+0x84>
 80174c6:	4ba4      	ldr	r3, [pc, #656]	; (8017758 <mktime+0x344>)
 80174c8:	ea4f 7bea 	mov.w	fp, sl, asr #31
 80174cc:	fbc3 ab04 	smlal	sl, fp, r3, r4
 80174d0:	f002 fa52 	bl	8019978 <__tz_lock>
 80174d4:	f002 fa5c 	bl	8019990 <_tzset_unlocked>
 80174d8:	4ba0      	ldr	r3, [pc, #640]	; (801775c <mktime+0x348>)
 80174da:	f8d3 9000 	ldr.w	r9, [r3]
 80174de:	f1b9 0f00 	cmp.w	r9, #0
 80174e2:	d03f      	beq.n	8017564 <mktime+0x150>
 80174e4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80174e8:	6968      	ldr	r0, [r5, #20]
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	f1b9 0f01 	cmp.w	r9, #1
 80174f0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80174f4:	46c8      	mov	r8, r9
 80174f6:	bfa8      	it	ge
 80174f8:	f04f 0801 	movge.w	r8, #1
 80174fc:	4283      	cmp	r3, r0
 80174fe:	d17f      	bne.n	8017600 <mktime+0x1ec>
 8017500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017502:	4619      	mov	r1, r3
 8017504:	17da      	asrs	r2, r3, #31
 8017506:	e9cd 1200 	strd	r1, r2, [sp]
 801750a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801750e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8017512:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017516:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017518:	1a80      	subs	r0, r0, r2
 801751a:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 801751e:	4582      	cmp	sl, r0
 8017520:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8017524:	eb7b 0101 	sbcs.w	r1, fp, r1
 8017528:	da71      	bge.n	801760e <mktime+0x1fa>
 801752a:	9800      	ldr	r0, [sp, #0]
 801752c:	6a39      	ldr	r1, [r7, #32]
 801752e:	1a09      	subs	r1, r1, r0
 8017530:	9104      	str	r1, [sp, #16]
 8017532:	9801      	ldr	r0, [sp, #4]
 8017534:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017536:	eb61 0100 	sbc.w	r1, r1, r0
 801753a:	9105      	str	r1, [sp, #20]
 801753c:	6839      	ldr	r1, [r7, #0]
 801753e:	2900      	cmp	r1, #0
 8017540:	d075      	beq.n	801762e <mktime+0x21a>
 8017542:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017546:	4582      	cmp	sl, r0
 8017548:	eb7b 0101 	sbcs.w	r1, fp, r1
 801754c:	db05      	blt.n	801755a <mktime+0x146>
 801754e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017552:	4582      	cmp	sl, r0
 8017554:	eb7b 0101 	sbcs.w	r1, fp, r1
 8017558:	db6f      	blt.n	801763a <mktime+0x226>
 801755a:	f1b9 0f00 	cmp.w	r9, #0
 801755e:	f04f 0900 	mov.w	r9, #0
 8017562:	da6f      	bge.n	8017644 <mktime+0x230>
 8017564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017566:	eb1a 0a03 	adds.w	sl, sl, r3
 801756a:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801756e:	e0ae      	b.n	80176ce <mktime+0x2ba>
 8017570:	f240 126d 	movw	r2, #365	; 0x16d
 8017574:	e7a3      	b.n	80174be <mktime+0xaa>
 8017576:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801757a:	e7a0      	b.n	80174be <mktime+0xaa>
 801757c:	d0a3      	beq.n	80174c6 <mktime+0xb2>
 801757e:	2345      	movs	r3, #69	; 0x45
 8017580:	f240 1e6d 	movw	lr, #365	; 0x16d
 8017584:	2164      	movs	r1, #100	; 0x64
 8017586:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801758a:	e012      	b.n	80175b2 <mktime+0x19e>
 801758c:	bb62      	cbnz	r2, 80175e8 <mktime+0x1d4>
 801758e:	fb93 f2f1 	sdiv	r2, r3, r1
 8017592:	fb01 3212 	mls	r2, r1, r2, r3
 8017596:	bb52      	cbnz	r2, 80175ee <mktime+0x1da>
 8017598:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801759c:	fb9c f2f0 	sdiv	r2, ip, r0
 80175a0:	fb00 c212 	mls	r2, r0, r2, ip
 80175a4:	2a00      	cmp	r2, #0
 80175a6:	bf14      	ite	ne
 80175a8:	4672      	movne	r2, lr
 80175aa:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80175ae:	1aa4      	subs	r4, r4, r2
 80175b0:	3b01      	subs	r3, #1
 80175b2:	429e      	cmp	r6, r3
 80175b4:	f003 0203 	and.w	r2, r3, #3
 80175b8:	dbe8      	blt.n	801758c <mktime+0x178>
 80175ba:	b9da      	cbnz	r2, 80175f4 <mktime+0x1e0>
 80175bc:	2264      	movs	r2, #100	; 0x64
 80175be:	fb96 f3f2 	sdiv	r3, r6, r2
 80175c2:	fb02 6313 	mls	r3, r2, r3, r6
 80175c6:	b9c3      	cbnz	r3, 80175fa <mktime+0x1e6>
 80175c8:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 80175cc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80175d0:	fb91 f3f2 	sdiv	r3, r1, r2
 80175d4:	fb02 1313 	mls	r3, r2, r3, r1
 80175d8:	2b00      	cmp	r3, #0
 80175da:	f240 136d 	movw	r3, #365	; 0x16d
 80175de:	bf08      	it	eq
 80175e0:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80175e4:	1ae4      	subs	r4, r4, r3
 80175e6:	e76e      	b.n	80174c6 <mktime+0xb2>
 80175e8:	f240 126d 	movw	r2, #365	; 0x16d
 80175ec:	e7df      	b.n	80175ae <mktime+0x19a>
 80175ee:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80175f2:	e7dc      	b.n	80175ae <mktime+0x19a>
 80175f4:	f240 136d 	movw	r3, #365	; 0x16d
 80175f8:	e7f4      	b.n	80175e4 <mktime+0x1d0>
 80175fa:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80175fe:	e7f1      	b.n	80175e4 <mktime+0x1d0>
 8017600:	f002 f912 	bl	8019828 <__tzcalc_limits>
 8017604:	2800      	cmp	r0, #0
 8017606:	f47f af7b 	bne.w	8017500 <mktime+0xec>
 801760a:	46c1      	mov	r9, r8
 801760c:	e054      	b.n	80176b8 <mktime+0x2a4>
 801760e:	9800      	ldr	r0, [sp, #0]
 8017610:	9902      	ldr	r1, [sp, #8]
 8017612:	1a09      	subs	r1, r1, r0
 8017614:	9108      	str	r1, [sp, #32]
 8017616:	9801      	ldr	r0, [sp, #4]
 8017618:	9903      	ldr	r1, [sp, #12]
 801761a:	eb61 0100 	sbc.w	r1, r1, r0
 801761e:	9109      	str	r1, [sp, #36]	; 0x24
 8017620:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017624:	4582      	cmp	sl, r0
 8017626:	eb7b 0101 	sbcs.w	r1, fp, r1
 801762a:	dbee      	blt.n	801760a <mktime+0x1f6>
 801762c:	e77d      	b.n	801752a <mktime+0x116>
 801762e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017632:	4582      	cmp	sl, r0
 8017634:	eb7b 0101 	sbcs.w	r1, fp, r1
 8017638:	db89      	blt.n	801754e <mktime+0x13a>
 801763a:	f1b9 0f00 	cmp.w	r9, #0
 801763e:	db3f      	blt.n	80176c0 <mktime+0x2ac>
 8017640:	f04f 0901 	mov.w	r9, #1
 8017644:	ea88 0809 	eor.w	r8, r8, r9
 8017648:	f1b8 0f01 	cmp.w	r8, #1
 801764c:	d134      	bne.n	80176b8 <mktime+0x2a4>
 801764e:	f1b9 0f00 	cmp.w	r9, #0
 8017652:	d04f      	beq.n	80176f4 <mktime+0x2e0>
 8017654:	1ad3      	subs	r3, r2, r3
 8017656:	682a      	ldr	r2, [r5, #0]
 8017658:	f8d5 800c 	ldr.w	r8, [r5, #12]
 801765c:	441a      	add	r2, r3
 801765e:	eb1a 0a03 	adds.w	sl, sl, r3
 8017662:	602a      	str	r2, [r5, #0]
 8017664:	4628      	mov	r0, r5
 8017666:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801766a:	f7ff fdfb 	bl	8017264 <validate_structure>
 801766e:	68ea      	ldr	r2, [r5, #12]
 8017670:	ebb2 0208 	subs.w	r2, r2, r8
 8017674:	d020      	beq.n	80176b8 <mktime+0x2a4>
 8017676:	2a01      	cmp	r2, #1
 8017678:	dc3e      	bgt.n	80176f8 <mktime+0x2e4>
 801767a:	1c90      	adds	r0, r2, #2
 801767c:	bfd8      	it	le
 801767e:	2201      	movle	r2, #1
 8017680:	69eb      	ldr	r3, [r5, #28]
 8017682:	18d3      	adds	r3, r2, r3
 8017684:	4414      	add	r4, r2
 8017686:	d540      	bpl.n	801770a <mktime+0x2f6>
 8017688:	1e72      	subs	r2, r6, #1
 801768a:	0791      	lsls	r1, r2, #30
 801768c:	d137      	bne.n	80176fe <mktime+0x2ea>
 801768e:	2164      	movs	r1, #100	; 0x64
 8017690:	fb92 f3f1 	sdiv	r3, r2, r1
 8017694:	fb01 2313 	mls	r3, r1, r3, r2
 8017698:	bba3      	cbnz	r3, 8017704 <mktime+0x2f0>
 801769a:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 801769e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80176a2:	fb96 f3f2 	sdiv	r3, r6, r2
 80176a6:	fb02 6613 	mls	r6, r2, r3, r6
 80176aa:	2e00      	cmp	r6, #0
 80176ac:	f240 136d 	movw	r3, #365	; 0x16d
 80176b0:	bf18      	it	ne
 80176b2:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 80176b6:	61eb      	str	r3, [r5, #28]
 80176b8:	f1b9 0f01 	cmp.w	r9, #1
 80176bc:	f47f af52 	bne.w	8017564 <mktime+0x150>
 80176c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80176c2:	eb1a 0a03 	adds.w	sl, sl, r3
 80176c6:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80176ca:	f04f 0901 	mov.w	r9, #1
 80176ce:	f002 f959 	bl	8019984 <__tz_unlock>
 80176d2:	3404      	adds	r4, #4
 80176d4:	2307      	movs	r3, #7
 80176d6:	fb94 f3f3 	sdiv	r3, r4, r3
 80176da:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80176de:	1ae4      	subs	r4, r4, r3
 80176e0:	bf48      	it	mi
 80176e2:	3407      	addmi	r4, #7
 80176e4:	f8c5 9020 	str.w	r9, [r5, #32]
 80176e8:	61ac      	str	r4, [r5, #24]
 80176ea:	4650      	mov	r0, sl
 80176ec:	4659      	mov	r1, fp
 80176ee:	b00b      	add	sp, #44	; 0x2c
 80176f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176f4:	1a9b      	subs	r3, r3, r2
 80176f6:	e7ae      	b.n	8017656 <mktime+0x242>
 80176f8:	f04f 32ff 	mov.w	r2, #4294967295
 80176fc:	e7c0      	b.n	8017680 <mktime+0x26c>
 80176fe:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8017702:	e7d8      	b.n	80176b6 <mktime+0x2a2>
 8017704:	f240 136d 	movw	r3, #365	; 0x16d
 8017708:	e7d5      	b.n	80176b6 <mktime+0x2a2>
 801770a:	07b2      	lsls	r2, r6, #30
 801770c:	d117      	bne.n	801773e <mktime+0x32a>
 801770e:	2164      	movs	r1, #100	; 0x64
 8017710:	fb96 f2f1 	sdiv	r2, r6, r1
 8017714:	fb01 6212 	mls	r2, r1, r2, r6
 8017718:	b9a2      	cbnz	r2, 8017744 <mktime+0x330>
 801771a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 801771e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8017722:	fb96 f2f1 	sdiv	r2, r6, r1
 8017726:	fb01 6612 	mls	r6, r1, r2, r6
 801772a:	2e00      	cmp	r6, #0
 801772c:	f240 126d 	movw	r2, #365	; 0x16d
 8017730:	bf08      	it	eq
 8017732:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8017736:	4293      	cmp	r3, r2
 8017738:	bfa8      	it	ge
 801773a:	1a9b      	subge	r3, r3, r2
 801773c:	e7bb      	b.n	80176b6 <mktime+0x2a2>
 801773e:	f240 126d 	movw	r2, #365	; 0x16d
 8017742:	e7f8      	b.n	8017736 <mktime+0x322>
 8017744:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8017748:	e7f5      	b.n	8017736 <mktime+0x322>
 801774a:	f04f 3aff 	mov.w	sl, #4294967295
 801774e:	f04f 3bff 	mov.w	fp, #4294967295
 8017752:	e7ca      	b.n	80176ea <mktime+0x2d6>
 8017754:	0801ef38 	.word	0x0801ef38
 8017758:	00015180 	.word	0x00015180
 801775c:	20005254 	.word	0x20005254

08017760 <_free_r>:
 8017760:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017762:	2900      	cmp	r1, #0
 8017764:	d048      	beq.n	80177f8 <_free_r+0x98>
 8017766:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801776a:	9001      	str	r0, [sp, #4]
 801776c:	2b00      	cmp	r3, #0
 801776e:	f1a1 0404 	sub.w	r4, r1, #4
 8017772:	bfb8      	it	lt
 8017774:	18e4      	addlt	r4, r4, r3
 8017776:	f004 f819 	bl	801b7ac <__malloc_lock>
 801777a:	4a20      	ldr	r2, [pc, #128]	; (80177fc <_free_r+0x9c>)
 801777c:	9801      	ldr	r0, [sp, #4]
 801777e:	6813      	ldr	r3, [r2, #0]
 8017780:	4615      	mov	r5, r2
 8017782:	b933      	cbnz	r3, 8017792 <_free_r+0x32>
 8017784:	6063      	str	r3, [r4, #4]
 8017786:	6014      	str	r4, [r2, #0]
 8017788:	b003      	add	sp, #12
 801778a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801778e:	f004 b813 	b.w	801b7b8 <__malloc_unlock>
 8017792:	42a3      	cmp	r3, r4
 8017794:	d90b      	bls.n	80177ae <_free_r+0x4e>
 8017796:	6821      	ldr	r1, [r4, #0]
 8017798:	1862      	adds	r2, r4, r1
 801779a:	4293      	cmp	r3, r2
 801779c:	bf04      	itt	eq
 801779e:	681a      	ldreq	r2, [r3, #0]
 80177a0:	685b      	ldreq	r3, [r3, #4]
 80177a2:	6063      	str	r3, [r4, #4]
 80177a4:	bf04      	itt	eq
 80177a6:	1852      	addeq	r2, r2, r1
 80177a8:	6022      	streq	r2, [r4, #0]
 80177aa:	602c      	str	r4, [r5, #0]
 80177ac:	e7ec      	b.n	8017788 <_free_r+0x28>
 80177ae:	461a      	mov	r2, r3
 80177b0:	685b      	ldr	r3, [r3, #4]
 80177b2:	b10b      	cbz	r3, 80177b8 <_free_r+0x58>
 80177b4:	42a3      	cmp	r3, r4
 80177b6:	d9fa      	bls.n	80177ae <_free_r+0x4e>
 80177b8:	6811      	ldr	r1, [r2, #0]
 80177ba:	1855      	adds	r5, r2, r1
 80177bc:	42a5      	cmp	r5, r4
 80177be:	d10b      	bne.n	80177d8 <_free_r+0x78>
 80177c0:	6824      	ldr	r4, [r4, #0]
 80177c2:	4421      	add	r1, r4
 80177c4:	1854      	adds	r4, r2, r1
 80177c6:	42a3      	cmp	r3, r4
 80177c8:	6011      	str	r1, [r2, #0]
 80177ca:	d1dd      	bne.n	8017788 <_free_r+0x28>
 80177cc:	681c      	ldr	r4, [r3, #0]
 80177ce:	685b      	ldr	r3, [r3, #4]
 80177d0:	6053      	str	r3, [r2, #4]
 80177d2:	4421      	add	r1, r4
 80177d4:	6011      	str	r1, [r2, #0]
 80177d6:	e7d7      	b.n	8017788 <_free_r+0x28>
 80177d8:	d902      	bls.n	80177e0 <_free_r+0x80>
 80177da:	230c      	movs	r3, #12
 80177dc:	6003      	str	r3, [r0, #0]
 80177de:	e7d3      	b.n	8017788 <_free_r+0x28>
 80177e0:	6825      	ldr	r5, [r4, #0]
 80177e2:	1961      	adds	r1, r4, r5
 80177e4:	428b      	cmp	r3, r1
 80177e6:	bf04      	itt	eq
 80177e8:	6819      	ldreq	r1, [r3, #0]
 80177ea:	685b      	ldreq	r3, [r3, #4]
 80177ec:	6063      	str	r3, [r4, #4]
 80177ee:	bf04      	itt	eq
 80177f0:	1949      	addeq	r1, r1, r5
 80177f2:	6021      	streq	r1, [r4, #0]
 80177f4:	6054      	str	r4, [r2, #4]
 80177f6:	e7c7      	b.n	8017788 <_free_r+0x28>
 80177f8:	b003      	add	sp, #12
 80177fa:	bd30      	pop	{r4, r5, pc}
 80177fc:	20005230 	.word	0x20005230

08017800 <_malloc_r>:
 8017800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017802:	1ccd      	adds	r5, r1, #3
 8017804:	f025 0503 	bic.w	r5, r5, #3
 8017808:	3508      	adds	r5, #8
 801780a:	2d0c      	cmp	r5, #12
 801780c:	bf38      	it	cc
 801780e:	250c      	movcc	r5, #12
 8017810:	2d00      	cmp	r5, #0
 8017812:	4606      	mov	r6, r0
 8017814:	db01      	blt.n	801781a <_malloc_r+0x1a>
 8017816:	42a9      	cmp	r1, r5
 8017818:	d903      	bls.n	8017822 <_malloc_r+0x22>
 801781a:	230c      	movs	r3, #12
 801781c:	6033      	str	r3, [r6, #0]
 801781e:	2000      	movs	r0, #0
 8017820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017822:	f003 ffc3 	bl	801b7ac <__malloc_lock>
 8017826:	4921      	ldr	r1, [pc, #132]	; (80178ac <_malloc_r+0xac>)
 8017828:	680a      	ldr	r2, [r1, #0]
 801782a:	4614      	mov	r4, r2
 801782c:	b99c      	cbnz	r4, 8017856 <_malloc_r+0x56>
 801782e:	4f20      	ldr	r7, [pc, #128]	; (80178b0 <_malloc_r+0xb0>)
 8017830:	683b      	ldr	r3, [r7, #0]
 8017832:	b923      	cbnz	r3, 801783e <_malloc_r+0x3e>
 8017834:	4621      	mov	r1, r4
 8017836:	4630      	mov	r0, r6
 8017838:	f000 ff44 	bl	80186c4 <_sbrk_r>
 801783c:	6038      	str	r0, [r7, #0]
 801783e:	4629      	mov	r1, r5
 8017840:	4630      	mov	r0, r6
 8017842:	f000 ff3f 	bl	80186c4 <_sbrk_r>
 8017846:	1c43      	adds	r3, r0, #1
 8017848:	d123      	bne.n	8017892 <_malloc_r+0x92>
 801784a:	230c      	movs	r3, #12
 801784c:	6033      	str	r3, [r6, #0]
 801784e:	4630      	mov	r0, r6
 8017850:	f003 ffb2 	bl	801b7b8 <__malloc_unlock>
 8017854:	e7e3      	b.n	801781e <_malloc_r+0x1e>
 8017856:	6823      	ldr	r3, [r4, #0]
 8017858:	1b5b      	subs	r3, r3, r5
 801785a:	d417      	bmi.n	801788c <_malloc_r+0x8c>
 801785c:	2b0b      	cmp	r3, #11
 801785e:	d903      	bls.n	8017868 <_malloc_r+0x68>
 8017860:	6023      	str	r3, [r4, #0]
 8017862:	441c      	add	r4, r3
 8017864:	6025      	str	r5, [r4, #0]
 8017866:	e004      	b.n	8017872 <_malloc_r+0x72>
 8017868:	6863      	ldr	r3, [r4, #4]
 801786a:	42a2      	cmp	r2, r4
 801786c:	bf0c      	ite	eq
 801786e:	600b      	streq	r3, [r1, #0]
 8017870:	6053      	strne	r3, [r2, #4]
 8017872:	4630      	mov	r0, r6
 8017874:	f003 ffa0 	bl	801b7b8 <__malloc_unlock>
 8017878:	f104 000b 	add.w	r0, r4, #11
 801787c:	1d23      	adds	r3, r4, #4
 801787e:	f020 0007 	bic.w	r0, r0, #7
 8017882:	1ac2      	subs	r2, r0, r3
 8017884:	d0cc      	beq.n	8017820 <_malloc_r+0x20>
 8017886:	1a1b      	subs	r3, r3, r0
 8017888:	50a3      	str	r3, [r4, r2]
 801788a:	e7c9      	b.n	8017820 <_malloc_r+0x20>
 801788c:	4622      	mov	r2, r4
 801788e:	6864      	ldr	r4, [r4, #4]
 8017890:	e7cc      	b.n	801782c <_malloc_r+0x2c>
 8017892:	1cc4      	adds	r4, r0, #3
 8017894:	f024 0403 	bic.w	r4, r4, #3
 8017898:	42a0      	cmp	r0, r4
 801789a:	d0e3      	beq.n	8017864 <_malloc_r+0x64>
 801789c:	1a21      	subs	r1, r4, r0
 801789e:	4630      	mov	r0, r6
 80178a0:	f000 ff10 	bl	80186c4 <_sbrk_r>
 80178a4:	3001      	adds	r0, #1
 80178a6:	d1dd      	bne.n	8017864 <_malloc_r+0x64>
 80178a8:	e7cf      	b.n	801784a <_malloc_r+0x4a>
 80178aa:	bf00      	nop
 80178ac:	20005230 	.word	0x20005230
 80178b0:	20005234 	.word	0x20005234

080178b4 <__cvt>:
 80178b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80178b8:	ec55 4b10 	vmov	r4, r5, d0
 80178bc:	2d00      	cmp	r5, #0
 80178be:	460e      	mov	r6, r1
 80178c0:	4619      	mov	r1, r3
 80178c2:	462b      	mov	r3, r5
 80178c4:	bfbb      	ittet	lt
 80178c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80178ca:	461d      	movlt	r5, r3
 80178cc:	2300      	movge	r3, #0
 80178ce:	232d      	movlt	r3, #45	; 0x2d
 80178d0:	700b      	strb	r3, [r1, #0]
 80178d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80178d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80178d8:	4691      	mov	r9, r2
 80178da:	f023 0820 	bic.w	r8, r3, #32
 80178de:	bfbc      	itt	lt
 80178e0:	4622      	movlt	r2, r4
 80178e2:	4614      	movlt	r4, r2
 80178e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80178e8:	d005      	beq.n	80178f6 <__cvt+0x42>
 80178ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80178ee:	d100      	bne.n	80178f2 <__cvt+0x3e>
 80178f0:	3601      	adds	r6, #1
 80178f2:	2102      	movs	r1, #2
 80178f4:	e000      	b.n	80178f8 <__cvt+0x44>
 80178f6:	2103      	movs	r1, #3
 80178f8:	ab03      	add	r3, sp, #12
 80178fa:	9301      	str	r3, [sp, #4]
 80178fc:	ab02      	add	r3, sp, #8
 80178fe:	9300      	str	r3, [sp, #0]
 8017900:	ec45 4b10 	vmov	d0, r4, r5
 8017904:	4653      	mov	r3, sl
 8017906:	4632      	mov	r2, r6
 8017908:	f002 fb9e 	bl	801a048 <_dtoa_r>
 801790c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8017910:	4607      	mov	r7, r0
 8017912:	d102      	bne.n	801791a <__cvt+0x66>
 8017914:	f019 0f01 	tst.w	r9, #1
 8017918:	d022      	beq.n	8017960 <__cvt+0xac>
 801791a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801791e:	eb07 0906 	add.w	r9, r7, r6
 8017922:	d110      	bne.n	8017946 <__cvt+0x92>
 8017924:	783b      	ldrb	r3, [r7, #0]
 8017926:	2b30      	cmp	r3, #48	; 0x30
 8017928:	d10a      	bne.n	8017940 <__cvt+0x8c>
 801792a:	2200      	movs	r2, #0
 801792c:	2300      	movs	r3, #0
 801792e:	4620      	mov	r0, r4
 8017930:	4629      	mov	r1, r5
 8017932:	f7e9 f8e9 	bl	8000b08 <__aeabi_dcmpeq>
 8017936:	b918      	cbnz	r0, 8017940 <__cvt+0x8c>
 8017938:	f1c6 0601 	rsb	r6, r6, #1
 801793c:	f8ca 6000 	str.w	r6, [sl]
 8017940:	f8da 3000 	ldr.w	r3, [sl]
 8017944:	4499      	add	r9, r3
 8017946:	2200      	movs	r2, #0
 8017948:	2300      	movs	r3, #0
 801794a:	4620      	mov	r0, r4
 801794c:	4629      	mov	r1, r5
 801794e:	f7e9 f8db 	bl	8000b08 <__aeabi_dcmpeq>
 8017952:	b108      	cbz	r0, 8017958 <__cvt+0xa4>
 8017954:	f8cd 900c 	str.w	r9, [sp, #12]
 8017958:	2230      	movs	r2, #48	; 0x30
 801795a:	9b03      	ldr	r3, [sp, #12]
 801795c:	454b      	cmp	r3, r9
 801795e:	d307      	bcc.n	8017970 <__cvt+0xbc>
 8017960:	9b03      	ldr	r3, [sp, #12]
 8017962:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017964:	1bdb      	subs	r3, r3, r7
 8017966:	4638      	mov	r0, r7
 8017968:	6013      	str	r3, [r2, #0]
 801796a:	b004      	add	sp, #16
 801796c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017970:	1c59      	adds	r1, r3, #1
 8017972:	9103      	str	r1, [sp, #12]
 8017974:	701a      	strb	r2, [r3, #0]
 8017976:	e7f0      	b.n	801795a <__cvt+0xa6>

08017978 <__exponent>:
 8017978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801797a:	4603      	mov	r3, r0
 801797c:	2900      	cmp	r1, #0
 801797e:	bfb8      	it	lt
 8017980:	4249      	neglt	r1, r1
 8017982:	f803 2b02 	strb.w	r2, [r3], #2
 8017986:	bfb4      	ite	lt
 8017988:	222d      	movlt	r2, #45	; 0x2d
 801798a:	222b      	movge	r2, #43	; 0x2b
 801798c:	2909      	cmp	r1, #9
 801798e:	7042      	strb	r2, [r0, #1]
 8017990:	dd2a      	ble.n	80179e8 <__exponent+0x70>
 8017992:	f10d 0407 	add.w	r4, sp, #7
 8017996:	46a4      	mov	ip, r4
 8017998:	270a      	movs	r7, #10
 801799a:	46a6      	mov	lr, r4
 801799c:	460a      	mov	r2, r1
 801799e:	fb91 f6f7 	sdiv	r6, r1, r7
 80179a2:	fb07 1516 	mls	r5, r7, r6, r1
 80179a6:	3530      	adds	r5, #48	; 0x30
 80179a8:	2a63      	cmp	r2, #99	; 0x63
 80179aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80179ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80179b2:	4631      	mov	r1, r6
 80179b4:	dcf1      	bgt.n	801799a <__exponent+0x22>
 80179b6:	3130      	adds	r1, #48	; 0x30
 80179b8:	f1ae 0502 	sub.w	r5, lr, #2
 80179bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80179c0:	1c44      	adds	r4, r0, #1
 80179c2:	4629      	mov	r1, r5
 80179c4:	4561      	cmp	r1, ip
 80179c6:	d30a      	bcc.n	80179de <__exponent+0x66>
 80179c8:	f10d 0209 	add.w	r2, sp, #9
 80179cc:	eba2 020e 	sub.w	r2, r2, lr
 80179d0:	4565      	cmp	r5, ip
 80179d2:	bf88      	it	hi
 80179d4:	2200      	movhi	r2, #0
 80179d6:	4413      	add	r3, r2
 80179d8:	1a18      	subs	r0, r3, r0
 80179da:	b003      	add	sp, #12
 80179dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80179e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80179e6:	e7ed      	b.n	80179c4 <__exponent+0x4c>
 80179e8:	2330      	movs	r3, #48	; 0x30
 80179ea:	3130      	adds	r1, #48	; 0x30
 80179ec:	7083      	strb	r3, [r0, #2]
 80179ee:	70c1      	strb	r1, [r0, #3]
 80179f0:	1d03      	adds	r3, r0, #4
 80179f2:	e7f1      	b.n	80179d8 <__exponent+0x60>

080179f4 <_printf_float>:
 80179f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179f8:	ed2d 8b02 	vpush	{d8}
 80179fc:	b08d      	sub	sp, #52	; 0x34
 80179fe:	460c      	mov	r4, r1
 8017a00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8017a04:	4616      	mov	r6, r2
 8017a06:	461f      	mov	r7, r3
 8017a08:	4605      	mov	r5, r0
 8017a0a:	f003 fe43 	bl	801b694 <_localeconv_r>
 8017a0e:	f8d0 a000 	ldr.w	sl, [r0]
 8017a12:	4650      	mov	r0, sl
 8017a14:	f7e8 fbf6 	bl	8000204 <strlen>
 8017a18:	2300      	movs	r3, #0
 8017a1a:	930a      	str	r3, [sp, #40]	; 0x28
 8017a1c:	6823      	ldr	r3, [r4, #0]
 8017a1e:	9305      	str	r3, [sp, #20]
 8017a20:	f8d8 3000 	ldr.w	r3, [r8]
 8017a24:	f894 b018 	ldrb.w	fp, [r4, #24]
 8017a28:	3307      	adds	r3, #7
 8017a2a:	f023 0307 	bic.w	r3, r3, #7
 8017a2e:	f103 0208 	add.w	r2, r3, #8
 8017a32:	f8c8 2000 	str.w	r2, [r8]
 8017a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a3a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8017a3e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8017a42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017a46:	9307      	str	r3, [sp, #28]
 8017a48:	f8cd 8018 	str.w	r8, [sp, #24]
 8017a4c:	ee08 0a10 	vmov	s16, r0
 8017a50:	4b9f      	ldr	r3, [pc, #636]	; (8017cd0 <_printf_float+0x2dc>)
 8017a52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017a56:	f04f 32ff 	mov.w	r2, #4294967295
 8017a5a:	f7e9 f887 	bl	8000b6c <__aeabi_dcmpun>
 8017a5e:	bb88      	cbnz	r0, 8017ac4 <_printf_float+0xd0>
 8017a60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017a64:	4b9a      	ldr	r3, [pc, #616]	; (8017cd0 <_printf_float+0x2dc>)
 8017a66:	f04f 32ff 	mov.w	r2, #4294967295
 8017a6a:	f7e9 f861 	bl	8000b30 <__aeabi_dcmple>
 8017a6e:	bb48      	cbnz	r0, 8017ac4 <_printf_float+0xd0>
 8017a70:	2200      	movs	r2, #0
 8017a72:	2300      	movs	r3, #0
 8017a74:	4640      	mov	r0, r8
 8017a76:	4649      	mov	r1, r9
 8017a78:	f7e9 f850 	bl	8000b1c <__aeabi_dcmplt>
 8017a7c:	b110      	cbz	r0, 8017a84 <_printf_float+0x90>
 8017a7e:	232d      	movs	r3, #45	; 0x2d
 8017a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017a84:	4b93      	ldr	r3, [pc, #588]	; (8017cd4 <_printf_float+0x2e0>)
 8017a86:	4894      	ldr	r0, [pc, #592]	; (8017cd8 <_printf_float+0x2e4>)
 8017a88:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8017a8c:	bf94      	ite	ls
 8017a8e:	4698      	movls	r8, r3
 8017a90:	4680      	movhi	r8, r0
 8017a92:	2303      	movs	r3, #3
 8017a94:	6123      	str	r3, [r4, #16]
 8017a96:	9b05      	ldr	r3, [sp, #20]
 8017a98:	f023 0204 	bic.w	r2, r3, #4
 8017a9c:	6022      	str	r2, [r4, #0]
 8017a9e:	f04f 0900 	mov.w	r9, #0
 8017aa2:	9700      	str	r7, [sp, #0]
 8017aa4:	4633      	mov	r3, r6
 8017aa6:	aa0b      	add	r2, sp, #44	; 0x2c
 8017aa8:	4621      	mov	r1, r4
 8017aaa:	4628      	mov	r0, r5
 8017aac:	f000 f9d8 	bl	8017e60 <_printf_common>
 8017ab0:	3001      	adds	r0, #1
 8017ab2:	f040 8090 	bne.w	8017bd6 <_printf_float+0x1e2>
 8017ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8017aba:	b00d      	add	sp, #52	; 0x34
 8017abc:	ecbd 8b02 	vpop	{d8}
 8017ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ac4:	4642      	mov	r2, r8
 8017ac6:	464b      	mov	r3, r9
 8017ac8:	4640      	mov	r0, r8
 8017aca:	4649      	mov	r1, r9
 8017acc:	f7e9 f84e 	bl	8000b6c <__aeabi_dcmpun>
 8017ad0:	b140      	cbz	r0, 8017ae4 <_printf_float+0xf0>
 8017ad2:	464b      	mov	r3, r9
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	bfbc      	itt	lt
 8017ad8:	232d      	movlt	r3, #45	; 0x2d
 8017ada:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8017ade:	487f      	ldr	r0, [pc, #508]	; (8017cdc <_printf_float+0x2e8>)
 8017ae0:	4b7f      	ldr	r3, [pc, #508]	; (8017ce0 <_printf_float+0x2ec>)
 8017ae2:	e7d1      	b.n	8017a88 <_printf_float+0x94>
 8017ae4:	6863      	ldr	r3, [r4, #4]
 8017ae6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8017aea:	9206      	str	r2, [sp, #24]
 8017aec:	1c5a      	adds	r2, r3, #1
 8017aee:	d13f      	bne.n	8017b70 <_printf_float+0x17c>
 8017af0:	2306      	movs	r3, #6
 8017af2:	6063      	str	r3, [r4, #4]
 8017af4:	9b05      	ldr	r3, [sp, #20]
 8017af6:	6861      	ldr	r1, [r4, #4]
 8017af8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8017afc:	2300      	movs	r3, #0
 8017afe:	9303      	str	r3, [sp, #12]
 8017b00:	ab0a      	add	r3, sp, #40	; 0x28
 8017b02:	e9cd b301 	strd	fp, r3, [sp, #4]
 8017b06:	ab09      	add	r3, sp, #36	; 0x24
 8017b08:	ec49 8b10 	vmov	d0, r8, r9
 8017b0c:	9300      	str	r3, [sp, #0]
 8017b0e:	6022      	str	r2, [r4, #0]
 8017b10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8017b14:	4628      	mov	r0, r5
 8017b16:	f7ff fecd 	bl	80178b4 <__cvt>
 8017b1a:	9b06      	ldr	r3, [sp, #24]
 8017b1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017b1e:	2b47      	cmp	r3, #71	; 0x47
 8017b20:	4680      	mov	r8, r0
 8017b22:	d108      	bne.n	8017b36 <_printf_float+0x142>
 8017b24:	1cc8      	adds	r0, r1, #3
 8017b26:	db02      	blt.n	8017b2e <_printf_float+0x13a>
 8017b28:	6863      	ldr	r3, [r4, #4]
 8017b2a:	4299      	cmp	r1, r3
 8017b2c:	dd41      	ble.n	8017bb2 <_printf_float+0x1be>
 8017b2e:	f1ab 0b02 	sub.w	fp, fp, #2
 8017b32:	fa5f fb8b 	uxtb.w	fp, fp
 8017b36:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017b3a:	d820      	bhi.n	8017b7e <_printf_float+0x18a>
 8017b3c:	3901      	subs	r1, #1
 8017b3e:	465a      	mov	r2, fp
 8017b40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017b44:	9109      	str	r1, [sp, #36]	; 0x24
 8017b46:	f7ff ff17 	bl	8017978 <__exponent>
 8017b4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017b4c:	1813      	adds	r3, r2, r0
 8017b4e:	2a01      	cmp	r2, #1
 8017b50:	4681      	mov	r9, r0
 8017b52:	6123      	str	r3, [r4, #16]
 8017b54:	dc02      	bgt.n	8017b5c <_printf_float+0x168>
 8017b56:	6822      	ldr	r2, [r4, #0]
 8017b58:	07d2      	lsls	r2, r2, #31
 8017b5a:	d501      	bpl.n	8017b60 <_printf_float+0x16c>
 8017b5c:	3301      	adds	r3, #1
 8017b5e:	6123      	str	r3, [r4, #16]
 8017b60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d09c      	beq.n	8017aa2 <_printf_float+0xae>
 8017b68:	232d      	movs	r3, #45	; 0x2d
 8017b6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017b6e:	e798      	b.n	8017aa2 <_printf_float+0xae>
 8017b70:	9a06      	ldr	r2, [sp, #24]
 8017b72:	2a47      	cmp	r2, #71	; 0x47
 8017b74:	d1be      	bne.n	8017af4 <_printf_float+0x100>
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d1bc      	bne.n	8017af4 <_printf_float+0x100>
 8017b7a:	2301      	movs	r3, #1
 8017b7c:	e7b9      	b.n	8017af2 <_printf_float+0xfe>
 8017b7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8017b82:	d118      	bne.n	8017bb6 <_printf_float+0x1c2>
 8017b84:	2900      	cmp	r1, #0
 8017b86:	6863      	ldr	r3, [r4, #4]
 8017b88:	dd0b      	ble.n	8017ba2 <_printf_float+0x1ae>
 8017b8a:	6121      	str	r1, [r4, #16]
 8017b8c:	b913      	cbnz	r3, 8017b94 <_printf_float+0x1a0>
 8017b8e:	6822      	ldr	r2, [r4, #0]
 8017b90:	07d0      	lsls	r0, r2, #31
 8017b92:	d502      	bpl.n	8017b9a <_printf_float+0x1a6>
 8017b94:	3301      	adds	r3, #1
 8017b96:	440b      	add	r3, r1
 8017b98:	6123      	str	r3, [r4, #16]
 8017b9a:	65a1      	str	r1, [r4, #88]	; 0x58
 8017b9c:	f04f 0900 	mov.w	r9, #0
 8017ba0:	e7de      	b.n	8017b60 <_printf_float+0x16c>
 8017ba2:	b913      	cbnz	r3, 8017baa <_printf_float+0x1b6>
 8017ba4:	6822      	ldr	r2, [r4, #0]
 8017ba6:	07d2      	lsls	r2, r2, #31
 8017ba8:	d501      	bpl.n	8017bae <_printf_float+0x1ba>
 8017baa:	3302      	adds	r3, #2
 8017bac:	e7f4      	b.n	8017b98 <_printf_float+0x1a4>
 8017bae:	2301      	movs	r3, #1
 8017bb0:	e7f2      	b.n	8017b98 <_printf_float+0x1a4>
 8017bb2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8017bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017bb8:	4299      	cmp	r1, r3
 8017bba:	db05      	blt.n	8017bc8 <_printf_float+0x1d4>
 8017bbc:	6823      	ldr	r3, [r4, #0]
 8017bbe:	6121      	str	r1, [r4, #16]
 8017bc0:	07d8      	lsls	r0, r3, #31
 8017bc2:	d5ea      	bpl.n	8017b9a <_printf_float+0x1a6>
 8017bc4:	1c4b      	adds	r3, r1, #1
 8017bc6:	e7e7      	b.n	8017b98 <_printf_float+0x1a4>
 8017bc8:	2900      	cmp	r1, #0
 8017bca:	bfd4      	ite	le
 8017bcc:	f1c1 0202 	rsble	r2, r1, #2
 8017bd0:	2201      	movgt	r2, #1
 8017bd2:	4413      	add	r3, r2
 8017bd4:	e7e0      	b.n	8017b98 <_printf_float+0x1a4>
 8017bd6:	6823      	ldr	r3, [r4, #0]
 8017bd8:	055a      	lsls	r2, r3, #21
 8017bda:	d407      	bmi.n	8017bec <_printf_float+0x1f8>
 8017bdc:	6923      	ldr	r3, [r4, #16]
 8017bde:	4642      	mov	r2, r8
 8017be0:	4631      	mov	r1, r6
 8017be2:	4628      	mov	r0, r5
 8017be4:	47b8      	blx	r7
 8017be6:	3001      	adds	r0, #1
 8017be8:	d12c      	bne.n	8017c44 <_printf_float+0x250>
 8017bea:	e764      	b.n	8017ab6 <_printf_float+0xc2>
 8017bec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017bf0:	f240 80e0 	bls.w	8017db4 <_printf_float+0x3c0>
 8017bf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017bf8:	2200      	movs	r2, #0
 8017bfa:	2300      	movs	r3, #0
 8017bfc:	f7e8 ff84 	bl	8000b08 <__aeabi_dcmpeq>
 8017c00:	2800      	cmp	r0, #0
 8017c02:	d034      	beq.n	8017c6e <_printf_float+0x27a>
 8017c04:	4a37      	ldr	r2, [pc, #220]	; (8017ce4 <_printf_float+0x2f0>)
 8017c06:	2301      	movs	r3, #1
 8017c08:	4631      	mov	r1, r6
 8017c0a:	4628      	mov	r0, r5
 8017c0c:	47b8      	blx	r7
 8017c0e:	3001      	adds	r0, #1
 8017c10:	f43f af51 	beq.w	8017ab6 <_printf_float+0xc2>
 8017c14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017c18:	429a      	cmp	r2, r3
 8017c1a:	db02      	blt.n	8017c22 <_printf_float+0x22e>
 8017c1c:	6823      	ldr	r3, [r4, #0]
 8017c1e:	07d8      	lsls	r0, r3, #31
 8017c20:	d510      	bpl.n	8017c44 <_printf_float+0x250>
 8017c22:	ee18 3a10 	vmov	r3, s16
 8017c26:	4652      	mov	r2, sl
 8017c28:	4631      	mov	r1, r6
 8017c2a:	4628      	mov	r0, r5
 8017c2c:	47b8      	blx	r7
 8017c2e:	3001      	adds	r0, #1
 8017c30:	f43f af41 	beq.w	8017ab6 <_printf_float+0xc2>
 8017c34:	f04f 0800 	mov.w	r8, #0
 8017c38:	f104 091a 	add.w	r9, r4, #26
 8017c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c3e:	3b01      	subs	r3, #1
 8017c40:	4543      	cmp	r3, r8
 8017c42:	dc09      	bgt.n	8017c58 <_printf_float+0x264>
 8017c44:	6823      	ldr	r3, [r4, #0]
 8017c46:	079b      	lsls	r3, r3, #30
 8017c48:	f100 8105 	bmi.w	8017e56 <_printf_float+0x462>
 8017c4c:	68e0      	ldr	r0, [r4, #12]
 8017c4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017c50:	4298      	cmp	r0, r3
 8017c52:	bfb8      	it	lt
 8017c54:	4618      	movlt	r0, r3
 8017c56:	e730      	b.n	8017aba <_printf_float+0xc6>
 8017c58:	2301      	movs	r3, #1
 8017c5a:	464a      	mov	r2, r9
 8017c5c:	4631      	mov	r1, r6
 8017c5e:	4628      	mov	r0, r5
 8017c60:	47b8      	blx	r7
 8017c62:	3001      	adds	r0, #1
 8017c64:	f43f af27 	beq.w	8017ab6 <_printf_float+0xc2>
 8017c68:	f108 0801 	add.w	r8, r8, #1
 8017c6c:	e7e6      	b.n	8017c3c <_printf_float+0x248>
 8017c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	dc39      	bgt.n	8017ce8 <_printf_float+0x2f4>
 8017c74:	4a1b      	ldr	r2, [pc, #108]	; (8017ce4 <_printf_float+0x2f0>)
 8017c76:	2301      	movs	r3, #1
 8017c78:	4631      	mov	r1, r6
 8017c7a:	4628      	mov	r0, r5
 8017c7c:	47b8      	blx	r7
 8017c7e:	3001      	adds	r0, #1
 8017c80:	f43f af19 	beq.w	8017ab6 <_printf_float+0xc2>
 8017c84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017c88:	4313      	orrs	r3, r2
 8017c8a:	d102      	bne.n	8017c92 <_printf_float+0x29e>
 8017c8c:	6823      	ldr	r3, [r4, #0]
 8017c8e:	07d9      	lsls	r1, r3, #31
 8017c90:	d5d8      	bpl.n	8017c44 <_printf_float+0x250>
 8017c92:	ee18 3a10 	vmov	r3, s16
 8017c96:	4652      	mov	r2, sl
 8017c98:	4631      	mov	r1, r6
 8017c9a:	4628      	mov	r0, r5
 8017c9c:	47b8      	blx	r7
 8017c9e:	3001      	adds	r0, #1
 8017ca0:	f43f af09 	beq.w	8017ab6 <_printf_float+0xc2>
 8017ca4:	f04f 0900 	mov.w	r9, #0
 8017ca8:	f104 0a1a 	add.w	sl, r4, #26
 8017cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cae:	425b      	negs	r3, r3
 8017cb0:	454b      	cmp	r3, r9
 8017cb2:	dc01      	bgt.n	8017cb8 <_printf_float+0x2c4>
 8017cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017cb6:	e792      	b.n	8017bde <_printf_float+0x1ea>
 8017cb8:	2301      	movs	r3, #1
 8017cba:	4652      	mov	r2, sl
 8017cbc:	4631      	mov	r1, r6
 8017cbe:	4628      	mov	r0, r5
 8017cc0:	47b8      	blx	r7
 8017cc2:	3001      	adds	r0, #1
 8017cc4:	f43f aef7 	beq.w	8017ab6 <_printf_float+0xc2>
 8017cc8:	f109 0901 	add.w	r9, r9, #1
 8017ccc:	e7ee      	b.n	8017cac <_printf_float+0x2b8>
 8017cce:	bf00      	nop
 8017cd0:	7fefffff 	.word	0x7fefffff
 8017cd4:	0801efc8 	.word	0x0801efc8
 8017cd8:	0801efcc 	.word	0x0801efcc
 8017cdc:	0801efd4 	.word	0x0801efd4
 8017ce0:	0801efd0 	.word	0x0801efd0
 8017ce4:	0801f399 	.word	0x0801f399
 8017ce8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017cea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017cec:	429a      	cmp	r2, r3
 8017cee:	bfa8      	it	ge
 8017cf0:	461a      	movge	r2, r3
 8017cf2:	2a00      	cmp	r2, #0
 8017cf4:	4691      	mov	r9, r2
 8017cf6:	dc37      	bgt.n	8017d68 <_printf_float+0x374>
 8017cf8:	f04f 0b00 	mov.w	fp, #0
 8017cfc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017d00:	f104 021a 	add.w	r2, r4, #26
 8017d04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017d06:	9305      	str	r3, [sp, #20]
 8017d08:	eba3 0309 	sub.w	r3, r3, r9
 8017d0c:	455b      	cmp	r3, fp
 8017d0e:	dc33      	bgt.n	8017d78 <_printf_float+0x384>
 8017d10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017d14:	429a      	cmp	r2, r3
 8017d16:	db3b      	blt.n	8017d90 <_printf_float+0x39c>
 8017d18:	6823      	ldr	r3, [r4, #0]
 8017d1a:	07da      	lsls	r2, r3, #31
 8017d1c:	d438      	bmi.n	8017d90 <_printf_float+0x39c>
 8017d1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017d20:	9b05      	ldr	r3, [sp, #20]
 8017d22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017d24:	1ad3      	subs	r3, r2, r3
 8017d26:	eba2 0901 	sub.w	r9, r2, r1
 8017d2a:	4599      	cmp	r9, r3
 8017d2c:	bfa8      	it	ge
 8017d2e:	4699      	movge	r9, r3
 8017d30:	f1b9 0f00 	cmp.w	r9, #0
 8017d34:	dc35      	bgt.n	8017da2 <_printf_float+0x3ae>
 8017d36:	f04f 0800 	mov.w	r8, #0
 8017d3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017d3e:	f104 0a1a 	add.w	sl, r4, #26
 8017d42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017d46:	1a9b      	subs	r3, r3, r2
 8017d48:	eba3 0309 	sub.w	r3, r3, r9
 8017d4c:	4543      	cmp	r3, r8
 8017d4e:	f77f af79 	ble.w	8017c44 <_printf_float+0x250>
 8017d52:	2301      	movs	r3, #1
 8017d54:	4652      	mov	r2, sl
 8017d56:	4631      	mov	r1, r6
 8017d58:	4628      	mov	r0, r5
 8017d5a:	47b8      	blx	r7
 8017d5c:	3001      	adds	r0, #1
 8017d5e:	f43f aeaa 	beq.w	8017ab6 <_printf_float+0xc2>
 8017d62:	f108 0801 	add.w	r8, r8, #1
 8017d66:	e7ec      	b.n	8017d42 <_printf_float+0x34e>
 8017d68:	4613      	mov	r3, r2
 8017d6a:	4631      	mov	r1, r6
 8017d6c:	4642      	mov	r2, r8
 8017d6e:	4628      	mov	r0, r5
 8017d70:	47b8      	blx	r7
 8017d72:	3001      	adds	r0, #1
 8017d74:	d1c0      	bne.n	8017cf8 <_printf_float+0x304>
 8017d76:	e69e      	b.n	8017ab6 <_printf_float+0xc2>
 8017d78:	2301      	movs	r3, #1
 8017d7a:	4631      	mov	r1, r6
 8017d7c:	4628      	mov	r0, r5
 8017d7e:	9205      	str	r2, [sp, #20]
 8017d80:	47b8      	blx	r7
 8017d82:	3001      	adds	r0, #1
 8017d84:	f43f ae97 	beq.w	8017ab6 <_printf_float+0xc2>
 8017d88:	9a05      	ldr	r2, [sp, #20]
 8017d8a:	f10b 0b01 	add.w	fp, fp, #1
 8017d8e:	e7b9      	b.n	8017d04 <_printf_float+0x310>
 8017d90:	ee18 3a10 	vmov	r3, s16
 8017d94:	4652      	mov	r2, sl
 8017d96:	4631      	mov	r1, r6
 8017d98:	4628      	mov	r0, r5
 8017d9a:	47b8      	blx	r7
 8017d9c:	3001      	adds	r0, #1
 8017d9e:	d1be      	bne.n	8017d1e <_printf_float+0x32a>
 8017da0:	e689      	b.n	8017ab6 <_printf_float+0xc2>
 8017da2:	9a05      	ldr	r2, [sp, #20]
 8017da4:	464b      	mov	r3, r9
 8017da6:	4442      	add	r2, r8
 8017da8:	4631      	mov	r1, r6
 8017daa:	4628      	mov	r0, r5
 8017dac:	47b8      	blx	r7
 8017dae:	3001      	adds	r0, #1
 8017db0:	d1c1      	bne.n	8017d36 <_printf_float+0x342>
 8017db2:	e680      	b.n	8017ab6 <_printf_float+0xc2>
 8017db4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017db6:	2a01      	cmp	r2, #1
 8017db8:	dc01      	bgt.n	8017dbe <_printf_float+0x3ca>
 8017dba:	07db      	lsls	r3, r3, #31
 8017dbc:	d538      	bpl.n	8017e30 <_printf_float+0x43c>
 8017dbe:	2301      	movs	r3, #1
 8017dc0:	4642      	mov	r2, r8
 8017dc2:	4631      	mov	r1, r6
 8017dc4:	4628      	mov	r0, r5
 8017dc6:	47b8      	blx	r7
 8017dc8:	3001      	adds	r0, #1
 8017dca:	f43f ae74 	beq.w	8017ab6 <_printf_float+0xc2>
 8017dce:	ee18 3a10 	vmov	r3, s16
 8017dd2:	4652      	mov	r2, sl
 8017dd4:	4631      	mov	r1, r6
 8017dd6:	4628      	mov	r0, r5
 8017dd8:	47b8      	blx	r7
 8017dda:	3001      	adds	r0, #1
 8017ddc:	f43f ae6b 	beq.w	8017ab6 <_printf_float+0xc2>
 8017de0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017de4:	2200      	movs	r2, #0
 8017de6:	2300      	movs	r3, #0
 8017de8:	f7e8 fe8e 	bl	8000b08 <__aeabi_dcmpeq>
 8017dec:	b9d8      	cbnz	r0, 8017e26 <_printf_float+0x432>
 8017dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017df0:	f108 0201 	add.w	r2, r8, #1
 8017df4:	3b01      	subs	r3, #1
 8017df6:	4631      	mov	r1, r6
 8017df8:	4628      	mov	r0, r5
 8017dfa:	47b8      	blx	r7
 8017dfc:	3001      	adds	r0, #1
 8017dfe:	d10e      	bne.n	8017e1e <_printf_float+0x42a>
 8017e00:	e659      	b.n	8017ab6 <_printf_float+0xc2>
 8017e02:	2301      	movs	r3, #1
 8017e04:	4652      	mov	r2, sl
 8017e06:	4631      	mov	r1, r6
 8017e08:	4628      	mov	r0, r5
 8017e0a:	47b8      	blx	r7
 8017e0c:	3001      	adds	r0, #1
 8017e0e:	f43f ae52 	beq.w	8017ab6 <_printf_float+0xc2>
 8017e12:	f108 0801 	add.w	r8, r8, #1
 8017e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e18:	3b01      	subs	r3, #1
 8017e1a:	4543      	cmp	r3, r8
 8017e1c:	dcf1      	bgt.n	8017e02 <_printf_float+0x40e>
 8017e1e:	464b      	mov	r3, r9
 8017e20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017e24:	e6dc      	b.n	8017be0 <_printf_float+0x1ec>
 8017e26:	f04f 0800 	mov.w	r8, #0
 8017e2a:	f104 0a1a 	add.w	sl, r4, #26
 8017e2e:	e7f2      	b.n	8017e16 <_printf_float+0x422>
 8017e30:	2301      	movs	r3, #1
 8017e32:	4642      	mov	r2, r8
 8017e34:	e7df      	b.n	8017df6 <_printf_float+0x402>
 8017e36:	2301      	movs	r3, #1
 8017e38:	464a      	mov	r2, r9
 8017e3a:	4631      	mov	r1, r6
 8017e3c:	4628      	mov	r0, r5
 8017e3e:	47b8      	blx	r7
 8017e40:	3001      	adds	r0, #1
 8017e42:	f43f ae38 	beq.w	8017ab6 <_printf_float+0xc2>
 8017e46:	f108 0801 	add.w	r8, r8, #1
 8017e4a:	68e3      	ldr	r3, [r4, #12]
 8017e4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017e4e:	1a5b      	subs	r3, r3, r1
 8017e50:	4543      	cmp	r3, r8
 8017e52:	dcf0      	bgt.n	8017e36 <_printf_float+0x442>
 8017e54:	e6fa      	b.n	8017c4c <_printf_float+0x258>
 8017e56:	f04f 0800 	mov.w	r8, #0
 8017e5a:	f104 0919 	add.w	r9, r4, #25
 8017e5e:	e7f4      	b.n	8017e4a <_printf_float+0x456>

08017e60 <_printf_common>:
 8017e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e64:	4616      	mov	r6, r2
 8017e66:	4699      	mov	r9, r3
 8017e68:	688a      	ldr	r2, [r1, #8]
 8017e6a:	690b      	ldr	r3, [r1, #16]
 8017e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017e70:	4293      	cmp	r3, r2
 8017e72:	bfb8      	it	lt
 8017e74:	4613      	movlt	r3, r2
 8017e76:	6033      	str	r3, [r6, #0]
 8017e78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017e7c:	4607      	mov	r7, r0
 8017e7e:	460c      	mov	r4, r1
 8017e80:	b10a      	cbz	r2, 8017e86 <_printf_common+0x26>
 8017e82:	3301      	adds	r3, #1
 8017e84:	6033      	str	r3, [r6, #0]
 8017e86:	6823      	ldr	r3, [r4, #0]
 8017e88:	0699      	lsls	r1, r3, #26
 8017e8a:	bf42      	ittt	mi
 8017e8c:	6833      	ldrmi	r3, [r6, #0]
 8017e8e:	3302      	addmi	r3, #2
 8017e90:	6033      	strmi	r3, [r6, #0]
 8017e92:	6825      	ldr	r5, [r4, #0]
 8017e94:	f015 0506 	ands.w	r5, r5, #6
 8017e98:	d106      	bne.n	8017ea8 <_printf_common+0x48>
 8017e9a:	f104 0a19 	add.w	sl, r4, #25
 8017e9e:	68e3      	ldr	r3, [r4, #12]
 8017ea0:	6832      	ldr	r2, [r6, #0]
 8017ea2:	1a9b      	subs	r3, r3, r2
 8017ea4:	42ab      	cmp	r3, r5
 8017ea6:	dc26      	bgt.n	8017ef6 <_printf_common+0x96>
 8017ea8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017eac:	1e13      	subs	r3, r2, #0
 8017eae:	6822      	ldr	r2, [r4, #0]
 8017eb0:	bf18      	it	ne
 8017eb2:	2301      	movne	r3, #1
 8017eb4:	0692      	lsls	r2, r2, #26
 8017eb6:	d42b      	bmi.n	8017f10 <_printf_common+0xb0>
 8017eb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017ebc:	4649      	mov	r1, r9
 8017ebe:	4638      	mov	r0, r7
 8017ec0:	47c0      	blx	r8
 8017ec2:	3001      	adds	r0, #1
 8017ec4:	d01e      	beq.n	8017f04 <_printf_common+0xa4>
 8017ec6:	6823      	ldr	r3, [r4, #0]
 8017ec8:	68e5      	ldr	r5, [r4, #12]
 8017eca:	6832      	ldr	r2, [r6, #0]
 8017ecc:	f003 0306 	and.w	r3, r3, #6
 8017ed0:	2b04      	cmp	r3, #4
 8017ed2:	bf08      	it	eq
 8017ed4:	1aad      	subeq	r5, r5, r2
 8017ed6:	68a3      	ldr	r3, [r4, #8]
 8017ed8:	6922      	ldr	r2, [r4, #16]
 8017eda:	bf0c      	ite	eq
 8017edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017ee0:	2500      	movne	r5, #0
 8017ee2:	4293      	cmp	r3, r2
 8017ee4:	bfc4      	itt	gt
 8017ee6:	1a9b      	subgt	r3, r3, r2
 8017ee8:	18ed      	addgt	r5, r5, r3
 8017eea:	2600      	movs	r6, #0
 8017eec:	341a      	adds	r4, #26
 8017eee:	42b5      	cmp	r5, r6
 8017ef0:	d11a      	bne.n	8017f28 <_printf_common+0xc8>
 8017ef2:	2000      	movs	r0, #0
 8017ef4:	e008      	b.n	8017f08 <_printf_common+0xa8>
 8017ef6:	2301      	movs	r3, #1
 8017ef8:	4652      	mov	r2, sl
 8017efa:	4649      	mov	r1, r9
 8017efc:	4638      	mov	r0, r7
 8017efe:	47c0      	blx	r8
 8017f00:	3001      	adds	r0, #1
 8017f02:	d103      	bne.n	8017f0c <_printf_common+0xac>
 8017f04:	f04f 30ff 	mov.w	r0, #4294967295
 8017f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f0c:	3501      	adds	r5, #1
 8017f0e:	e7c6      	b.n	8017e9e <_printf_common+0x3e>
 8017f10:	18e1      	adds	r1, r4, r3
 8017f12:	1c5a      	adds	r2, r3, #1
 8017f14:	2030      	movs	r0, #48	; 0x30
 8017f16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017f1a:	4422      	add	r2, r4
 8017f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017f20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017f24:	3302      	adds	r3, #2
 8017f26:	e7c7      	b.n	8017eb8 <_printf_common+0x58>
 8017f28:	2301      	movs	r3, #1
 8017f2a:	4622      	mov	r2, r4
 8017f2c:	4649      	mov	r1, r9
 8017f2e:	4638      	mov	r0, r7
 8017f30:	47c0      	blx	r8
 8017f32:	3001      	adds	r0, #1
 8017f34:	d0e6      	beq.n	8017f04 <_printf_common+0xa4>
 8017f36:	3601      	adds	r6, #1
 8017f38:	e7d9      	b.n	8017eee <_printf_common+0x8e>
	...

08017f3c <_printf_i>:
 8017f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017f40:	460c      	mov	r4, r1
 8017f42:	4691      	mov	r9, r2
 8017f44:	7e27      	ldrb	r7, [r4, #24]
 8017f46:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017f48:	2f78      	cmp	r7, #120	; 0x78
 8017f4a:	4680      	mov	r8, r0
 8017f4c:	469a      	mov	sl, r3
 8017f4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017f52:	d807      	bhi.n	8017f64 <_printf_i+0x28>
 8017f54:	2f62      	cmp	r7, #98	; 0x62
 8017f56:	d80a      	bhi.n	8017f6e <_printf_i+0x32>
 8017f58:	2f00      	cmp	r7, #0
 8017f5a:	f000 80d8 	beq.w	801810e <_printf_i+0x1d2>
 8017f5e:	2f58      	cmp	r7, #88	; 0x58
 8017f60:	f000 80a3 	beq.w	80180aa <_printf_i+0x16e>
 8017f64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017f68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017f6c:	e03a      	b.n	8017fe4 <_printf_i+0xa8>
 8017f6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017f72:	2b15      	cmp	r3, #21
 8017f74:	d8f6      	bhi.n	8017f64 <_printf_i+0x28>
 8017f76:	a001      	add	r0, pc, #4	; (adr r0, 8017f7c <_printf_i+0x40>)
 8017f78:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017f7c:	08017fd5 	.word	0x08017fd5
 8017f80:	08017fe9 	.word	0x08017fe9
 8017f84:	08017f65 	.word	0x08017f65
 8017f88:	08017f65 	.word	0x08017f65
 8017f8c:	08017f65 	.word	0x08017f65
 8017f90:	08017f65 	.word	0x08017f65
 8017f94:	08017fe9 	.word	0x08017fe9
 8017f98:	08017f65 	.word	0x08017f65
 8017f9c:	08017f65 	.word	0x08017f65
 8017fa0:	08017f65 	.word	0x08017f65
 8017fa4:	08017f65 	.word	0x08017f65
 8017fa8:	080180f5 	.word	0x080180f5
 8017fac:	08018019 	.word	0x08018019
 8017fb0:	080180d7 	.word	0x080180d7
 8017fb4:	08017f65 	.word	0x08017f65
 8017fb8:	08017f65 	.word	0x08017f65
 8017fbc:	08018117 	.word	0x08018117
 8017fc0:	08017f65 	.word	0x08017f65
 8017fc4:	08018019 	.word	0x08018019
 8017fc8:	08017f65 	.word	0x08017f65
 8017fcc:	08017f65 	.word	0x08017f65
 8017fd0:	080180df 	.word	0x080180df
 8017fd4:	680b      	ldr	r3, [r1, #0]
 8017fd6:	1d1a      	adds	r2, r3, #4
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	600a      	str	r2, [r1, #0]
 8017fdc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017fe4:	2301      	movs	r3, #1
 8017fe6:	e0a3      	b.n	8018130 <_printf_i+0x1f4>
 8017fe8:	6825      	ldr	r5, [r4, #0]
 8017fea:	6808      	ldr	r0, [r1, #0]
 8017fec:	062e      	lsls	r6, r5, #24
 8017fee:	f100 0304 	add.w	r3, r0, #4
 8017ff2:	d50a      	bpl.n	801800a <_printf_i+0xce>
 8017ff4:	6805      	ldr	r5, [r0, #0]
 8017ff6:	600b      	str	r3, [r1, #0]
 8017ff8:	2d00      	cmp	r5, #0
 8017ffa:	da03      	bge.n	8018004 <_printf_i+0xc8>
 8017ffc:	232d      	movs	r3, #45	; 0x2d
 8017ffe:	426d      	negs	r5, r5
 8018000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018004:	485e      	ldr	r0, [pc, #376]	; (8018180 <_printf_i+0x244>)
 8018006:	230a      	movs	r3, #10
 8018008:	e019      	b.n	801803e <_printf_i+0x102>
 801800a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801800e:	6805      	ldr	r5, [r0, #0]
 8018010:	600b      	str	r3, [r1, #0]
 8018012:	bf18      	it	ne
 8018014:	b22d      	sxthne	r5, r5
 8018016:	e7ef      	b.n	8017ff8 <_printf_i+0xbc>
 8018018:	680b      	ldr	r3, [r1, #0]
 801801a:	6825      	ldr	r5, [r4, #0]
 801801c:	1d18      	adds	r0, r3, #4
 801801e:	6008      	str	r0, [r1, #0]
 8018020:	0628      	lsls	r0, r5, #24
 8018022:	d501      	bpl.n	8018028 <_printf_i+0xec>
 8018024:	681d      	ldr	r5, [r3, #0]
 8018026:	e002      	b.n	801802e <_printf_i+0xf2>
 8018028:	0669      	lsls	r1, r5, #25
 801802a:	d5fb      	bpl.n	8018024 <_printf_i+0xe8>
 801802c:	881d      	ldrh	r5, [r3, #0]
 801802e:	4854      	ldr	r0, [pc, #336]	; (8018180 <_printf_i+0x244>)
 8018030:	2f6f      	cmp	r7, #111	; 0x6f
 8018032:	bf0c      	ite	eq
 8018034:	2308      	moveq	r3, #8
 8018036:	230a      	movne	r3, #10
 8018038:	2100      	movs	r1, #0
 801803a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801803e:	6866      	ldr	r6, [r4, #4]
 8018040:	60a6      	str	r6, [r4, #8]
 8018042:	2e00      	cmp	r6, #0
 8018044:	bfa2      	ittt	ge
 8018046:	6821      	ldrge	r1, [r4, #0]
 8018048:	f021 0104 	bicge.w	r1, r1, #4
 801804c:	6021      	strge	r1, [r4, #0]
 801804e:	b90d      	cbnz	r5, 8018054 <_printf_i+0x118>
 8018050:	2e00      	cmp	r6, #0
 8018052:	d04d      	beq.n	80180f0 <_printf_i+0x1b4>
 8018054:	4616      	mov	r6, r2
 8018056:	fbb5 f1f3 	udiv	r1, r5, r3
 801805a:	fb03 5711 	mls	r7, r3, r1, r5
 801805e:	5dc7      	ldrb	r7, [r0, r7]
 8018060:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018064:	462f      	mov	r7, r5
 8018066:	42bb      	cmp	r3, r7
 8018068:	460d      	mov	r5, r1
 801806a:	d9f4      	bls.n	8018056 <_printf_i+0x11a>
 801806c:	2b08      	cmp	r3, #8
 801806e:	d10b      	bne.n	8018088 <_printf_i+0x14c>
 8018070:	6823      	ldr	r3, [r4, #0]
 8018072:	07df      	lsls	r7, r3, #31
 8018074:	d508      	bpl.n	8018088 <_printf_i+0x14c>
 8018076:	6923      	ldr	r3, [r4, #16]
 8018078:	6861      	ldr	r1, [r4, #4]
 801807a:	4299      	cmp	r1, r3
 801807c:	bfde      	ittt	le
 801807e:	2330      	movle	r3, #48	; 0x30
 8018080:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018084:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018088:	1b92      	subs	r2, r2, r6
 801808a:	6122      	str	r2, [r4, #16]
 801808c:	f8cd a000 	str.w	sl, [sp]
 8018090:	464b      	mov	r3, r9
 8018092:	aa03      	add	r2, sp, #12
 8018094:	4621      	mov	r1, r4
 8018096:	4640      	mov	r0, r8
 8018098:	f7ff fee2 	bl	8017e60 <_printf_common>
 801809c:	3001      	adds	r0, #1
 801809e:	d14c      	bne.n	801813a <_printf_i+0x1fe>
 80180a0:	f04f 30ff 	mov.w	r0, #4294967295
 80180a4:	b004      	add	sp, #16
 80180a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180aa:	4835      	ldr	r0, [pc, #212]	; (8018180 <_printf_i+0x244>)
 80180ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80180b0:	6823      	ldr	r3, [r4, #0]
 80180b2:	680e      	ldr	r6, [r1, #0]
 80180b4:	061f      	lsls	r7, r3, #24
 80180b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80180ba:	600e      	str	r6, [r1, #0]
 80180bc:	d514      	bpl.n	80180e8 <_printf_i+0x1ac>
 80180be:	07d9      	lsls	r1, r3, #31
 80180c0:	bf44      	itt	mi
 80180c2:	f043 0320 	orrmi.w	r3, r3, #32
 80180c6:	6023      	strmi	r3, [r4, #0]
 80180c8:	b91d      	cbnz	r5, 80180d2 <_printf_i+0x196>
 80180ca:	6823      	ldr	r3, [r4, #0]
 80180cc:	f023 0320 	bic.w	r3, r3, #32
 80180d0:	6023      	str	r3, [r4, #0]
 80180d2:	2310      	movs	r3, #16
 80180d4:	e7b0      	b.n	8018038 <_printf_i+0xfc>
 80180d6:	6823      	ldr	r3, [r4, #0]
 80180d8:	f043 0320 	orr.w	r3, r3, #32
 80180dc:	6023      	str	r3, [r4, #0]
 80180de:	2378      	movs	r3, #120	; 0x78
 80180e0:	4828      	ldr	r0, [pc, #160]	; (8018184 <_printf_i+0x248>)
 80180e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80180e6:	e7e3      	b.n	80180b0 <_printf_i+0x174>
 80180e8:	065e      	lsls	r6, r3, #25
 80180ea:	bf48      	it	mi
 80180ec:	b2ad      	uxthmi	r5, r5
 80180ee:	e7e6      	b.n	80180be <_printf_i+0x182>
 80180f0:	4616      	mov	r6, r2
 80180f2:	e7bb      	b.n	801806c <_printf_i+0x130>
 80180f4:	680b      	ldr	r3, [r1, #0]
 80180f6:	6826      	ldr	r6, [r4, #0]
 80180f8:	6960      	ldr	r0, [r4, #20]
 80180fa:	1d1d      	adds	r5, r3, #4
 80180fc:	600d      	str	r5, [r1, #0]
 80180fe:	0635      	lsls	r5, r6, #24
 8018100:	681b      	ldr	r3, [r3, #0]
 8018102:	d501      	bpl.n	8018108 <_printf_i+0x1cc>
 8018104:	6018      	str	r0, [r3, #0]
 8018106:	e002      	b.n	801810e <_printf_i+0x1d2>
 8018108:	0671      	lsls	r1, r6, #25
 801810a:	d5fb      	bpl.n	8018104 <_printf_i+0x1c8>
 801810c:	8018      	strh	r0, [r3, #0]
 801810e:	2300      	movs	r3, #0
 8018110:	6123      	str	r3, [r4, #16]
 8018112:	4616      	mov	r6, r2
 8018114:	e7ba      	b.n	801808c <_printf_i+0x150>
 8018116:	680b      	ldr	r3, [r1, #0]
 8018118:	1d1a      	adds	r2, r3, #4
 801811a:	600a      	str	r2, [r1, #0]
 801811c:	681e      	ldr	r6, [r3, #0]
 801811e:	6862      	ldr	r2, [r4, #4]
 8018120:	2100      	movs	r1, #0
 8018122:	4630      	mov	r0, r6
 8018124:	f7e8 f87c 	bl	8000220 <memchr>
 8018128:	b108      	cbz	r0, 801812e <_printf_i+0x1f2>
 801812a:	1b80      	subs	r0, r0, r6
 801812c:	6060      	str	r0, [r4, #4]
 801812e:	6863      	ldr	r3, [r4, #4]
 8018130:	6123      	str	r3, [r4, #16]
 8018132:	2300      	movs	r3, #0
 8018134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018138:	e7a8      	b.n	801808c <_printf_i+0x150>
 801813a:	6923      	ldr	r3, [r4, #16]
 801813c:	4632      	mov	r2, r6
 801813e:	4649      	mov	r1, r9
 8018140:	4640      	mov	r0, r8
 8018142:	47d0      	blx	sl
 8018144:	3001      	adds	r0, #1
 8018146:	d0ab      	beq.n	80180a0 <_printf_i+0x164>
 8018148:	6823      	ldr	r3, [r4, #0]
 801814a:	079b      	lsls	r3, r3, #30
 801814c:	d413      	bmi.n	8018176 <_printf_i+0x23a>
 801814e:	68e0      	ldr	r0, [r4, #12]
 8018150:	9b03      	ldr	r3, [sp, #12]
 8018152:	4298      	cmp	r0, r3
 8018154:	bfb8      	it	lt
 8018156:	4618      	movlt	r0, r3
 8018158:	e7a4      	b.n	80180a4 <_printf_i+0x168>
 801815a:	2301      	movs	r3, #1
 801815c:	4632      	mov	r2, r6
 801815e:	4649      	mov	r1, r9
 8018160:	4640      	mov	r0, r8
 8018162:	47d0      	blx	sl
 8018164:	3001      	adds	r0, #1
 8018166:	d09b      	beq.n	80180a0 <_printf_i+0x164>
 8018168:	3501      	adds	r5, #1
 801816a:	68e3      	ldr	r3, [r4, #12]
 801816c:	9903      	ldr	r1, [sp, #12]
 801816e:	1a5b      	subs	r3, r3, r1
 8018170:	42ab      	cmp	r3, r5
 8018172:	dcf2      	bgt.n	801815a <_printf_i+0x21e>
 8018174:	e7eb      	b.n	801814e <_printf_i+0x212>
 8018176:	2500      	movs	r5, #0
 8018178:	f104 0619 	add.w	r6, r4, #25
 801817c:	e7f5      	b.n	801816a <_printf_i+0x22e>
 801817e:	bf00      	nop
 8018180:	0801efd8 	.word	0x0801efd8
 8018184:	0801efe9 	.word	0x0801efe9

08018188 <_scanf_float>:
 8018188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801818c:	b087      	sub	sp, #28
 801818e:	4617      	mov	r7, r2
 8018190:	9303      	str	r3, [sp, #12]
 8018192:	688b      	ldr	r3, [r1, #8]
 8018194:	1e5a      	subs	r2, r3, #1
 8018196:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801819a:	bf83      	ittte	hi
 801819c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80181a0:	195b      	addhi	r3, r3, r5
 80181a2:	9302      	strhi	r3, [sp, #8]
 80181a4:	2300      	movls	r3, #0
 80181a6:	bf86      	itte	hi
 80181a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80181ac:	608b      	strhi	r3, [r1, #8]
 80181ae:	9302      	strls	r3, [sp, #8]
 80181b0:	680b      	ldr	r3, [r1, #0]
 80181b2:	468b      	mov	fp, r1
 80181b4:	2500      	movs	r5, #0
 80181b6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80181ba:	f84b 3b1c 	str.w	r3, [fp], #28
 80181be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80181c2:	4680      	mov	r8, r0
 80181c4:	460c      	mov	r4, r1
 80181c6:	465e      	mov	r6, fp
 80181c8:	46aa      	mov	sl, r5
 80181ca:	46a9      	mov	r9, r5
 80181cc:	9501      	str	r5, [sp, #4]
 80181ce:	68a2      	ldr	r2, [r4, #8]
 80181d0:	b152      	cbz	r2, 80181e8 <_scanf_float+0x60>
 80181d2:	683b      	ldr	r3, [r7, #0]
 80181d4:	781b      	ldrb	r3, [r3, #0]
 80181d6:	2b4e      	cmp	r3, #78	; 0x4e
 80181d8:	d864      	bhi.n	80182a4 <_scanf_float+0x11c>
 80181da:	2b40      	cmp	r3, #64	; 0x40
 80181dc:	d83c      	bhi.n	8018258 <_scanf_float+0xd0>
 80181de:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80181e2:	b2c8      	uxtb	r0, r1
 80181e4:	280e      	cmp	r0, #14
 80181e6:	d93a      	bls.n	801825e <_scanf_float+0xd6>
 80181e8:	f1b9 0f00 	cmp.w	r9, #0
 80181ec:	d003      	beq.n	80181f6 <_scanf_float+0x6e>
 80181ee:	6823      	ldr	r3, [r4, #0]
 80181f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80181f4:	6023      	str	r3, [r4, #0]
 80181f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80181fa:	f1ba 0f01 	cmp.w	sl, #1
 80181fe:	f200 8113 	bhi.w	8018428 <_scanf_float+0x2a0>
 8018202:	455e      	cmp	r6, fp
 8018204:	f200 8105 	bhi.w	8018412 <_scanf_float+0x28a>
 8018208:	2501      	movs	r5, #1
 801820a:	4628      	mov	r0, r5
 801820c:	b007      	add	sp, #28
 801820e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018212:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8018216:	2a0d      	cmp	r2, #13
 8018218:	d8e6      	bhi.n	80181e8 <_scanf_float+0x60>
 801821a:	a101      	add	r1, pc, #4	; (adr r1, 8018220 <_scanf_float+0x98>)
 801821c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8018220:	0801835f 	.word	0x0801835f
 8018224:	080181e9 	.word	0x080181e9
 8018228:	080181e9 	.word	0x080181e9
 801822c:	080181e9 	.word	0x080181e9
 8018230:	080183bf 	.word	0x080183bf
 8018234:	08018397 	.word	0x08018397
 8018238:	080181e9 	.word	0x080181e9
 801823c:	080181e9 	.word	0x080181e9
 8018240:	0801836d 	.word	0x0801836d
 8018244:	080181e9 	.word	0x080181e9
 8018248:	080181e9 	.word	0x080181e9
 801824c:	080181e9 	.word	0x080181e9
 8018250:	080181e9 	.word	0x080181e9
 8018254:	08018325 	.word	0x08018325
 8018258:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801825c:	e7db      	b.n	8018216 <_scanf_float+0x8e>
 801825e:	290e      	cmp	r1, #14
 8018260:	d8c2      	bhi.n	80181e8 <_scanf_float+0x60>
 8018262:	a001      	add	r0, pc, #4	; (adr r0, 8018268 <_scanf_float+0xe0>)
 8018264:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8018268:	08018317 	.word	0x08018317
 801826c:	080181e9 	.word	0x080181e9
 8018270:	08018317 	.word	0x08018317
 8018274:	080183ab 	.word	0x080183ab
 8018278:	080181e9 	.word	0x080181e9
 801827c:	080182c5 	.word	0x080182c5
 8018280:	08018301 	.word	0x08018301
 8018284:	08018301 	.word	0x08018301
 8018288:	08018301 	.word	0x08018301
 801828c:	08018301 	.word	0x08018301
 8018290:	08018301 	.word	0x08018301
 8018294:	08018301 	.word	0x08018301
 8018298:	08018301 	.word	0x08018301
 801829c:	08018301 	.word	0x08018301
 80182a0:	08018301 	.word	0x08018301
 80182a4:	2b6e      	cmp	r3, #110	; 0x6e
 80182a6:	d809      	bhi.n	80182bc <_scanf_float+0x134>
 80182a8:	2b60      	cmp	r3, #96	; 0x60
 80182aa:	d8b2      	bhi.n	8018212 <_scanf_float+0x8a>
 80182ac:	2b54      	cmp	r3, #84	; 0x54
 80182ae:	d077      	beq.n	80183a0 <_scanf_float+0x218>
 80182b0:	2b59      	cmp	r3, #89	; 0x59
 80182b2:	d199      	bne.n	80181e8 <_scanf_float+0x60>
 80182b4:	2d07      	cmp	r5, #7
 80182b6:	d197      	bne.n	80181e8 <_scanf_float+0x60>
 80182b8:	2508      	movs	r5, #8
 80182ba:	e029      	b.n	8018310 <_scanf_float+0x188>
 80182bc:	2b74      	cmp	r3, #116	; 0x74
 80182be:	d06f      	beq.n	80183a0 <_scanf_float+0x218>
 80182c0:	2b79      	cmp	r3, #121	; 0x79
 80182c2:	e7f6      	b.n	80182b2 <_scanf_float+0x12a>
 80182c4:	6821      	ldr	r1, [r4, #0]
 80182c6:	05c8      	lsls	r0, r1, #23
 80182c8:	d51a      	bpl.n	8018300 <_scanf_float+0x178>
 80182ca:	9b02      	ldr	r3, [sp, #8]
 80182cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80182d0:	6021      	str	r1, [r4, #0]
 80182d2:	f109 0901 	add.w	r9, r9, #1
 80182d6:	b11b      	cbz	r3, 80182e0 <_scanf_float+0x158>
 80182d8:	3b01      	subs	r3, #1
 80182da:	3201      	adds	r2, #1
 80182dc:	9302      	str	r3, [sp, #8]
 80182de:	60a2      	str	r2, [r4, #8]
 80182e0:	68a3      	ldr	r3, [r4, #8]
 80182e2:	3b01      	subs	r3, #1
 80182e4:	60a3      	str	r3, [r4, #8]
 80182e6:	6923      	ldr	r3, [r4, #16]
 80182e8:	3301      	adds	r3, #1
 80182ea:	6123      	str	r3, [r4, #16]
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	3b01      	subs	r3, #1
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	607b      	str	r3, [r7, #4]
 80182f4:	f340 8084 	ble.w	8018400 <_scanf_float+0x278>
 80182f8:	683b      	ldr	r3, [r7, #0]
 80182fa:	3301      	adds	r3, #1
 80182fc:	603b      	str	r3, [r7, #0]
 80182fe:	e766      	b.n	80181ce <_scanf_float+0x46>
 8018300:	eb1a 0f05 	cmn.w	sl, r5
 8018304:	f47f af70 	bne.w	80181e8 <_scanf_float+0x60>
 8018308:	6822      	ldr	r2, [r4, #0]
 801830a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801830e:	6022      	str	r2, [r4, #0]
 8018310:	f806 3b01 	strb.w	r3, [r6], #1
 8018314:	e7e4      	b.n	80182e0 <_scanf_float+0x158>
 8018316:	6822      	ldr	r2, [r4, #0]
 8018318:	0610      	lsls	r0, r2, #24
 801831a:	f57f af65 	bpl.w	80181e8 <_scanf_float+0x60>
 801831e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018322:	e7f4      	b.n	801830e <_scanf_float+0x186>
 8018324:	f1ba 0f00 	cmp.w	sl, #0
 8018328:	d10e      	bne.n	8018348 <_scanf_float+0x1c0>
 801832a:	f1b9 0f00 	cmp.w	r9, #0
 801832e:	d10e      	bne.n	801834e <_scanf_float+0x1c6>
 8018330:	6822      	ldr	r2, [r4, #0]
 8018332:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8018336:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801833a:	d108      	bne.n	801834e <_scanf_float+0x1c6>
 801833c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8018340:	6022      	str	r2, [r4, #0]
 8018342:	f04f 0a01 	mov.w	sl, #1
 8018346:	e7e3      	b.n	8018310 <_scanf_float+0x188>
 8018348:	f1ba 0f02 	cmp.w	sl, #2
 801834c:	d055      	beq.n	80183fa <_scanf_float+0x272>
 801834e:	2d01      	cmp	r5, #1
 8018350:	d002      	beq.n	8018358 <_scanf_float+0x1d0>
 8018352:	2d04      	cmp	r5, #4
 8018354:	f47f af48 	bne.w	80181e8 <_scanf_float+0x60>
 8018358:	3501      	adds	r5, #1
 801835a:	b2ed      	uxtb	r5, r5
 801835c:	e7d8      	b.n	8018310 <_scanf_float+0x188>
 801835e:	f1ba 0f01 	cmp.w	sl, #1
 8018362:	f47f af41 	bne.w	80181e8 <_scanf_float+0x60>
 8018366:	f04f 0a02 	mov.w	sl, #2
 801836a:	e7d1      	b.n	8018310 <_scanf_float+0x188>
 801836c:	b97d      	cbnz	r5, 801838e <_scanf_float+0x206>
 801836e:	f1b9 0f00 	cmp.w	r9, #0
 8018372:	f47f af3c 	bne.w	80181ee <_scanf_float+0x66>
 8018376:	6822      	ldr	r2, [r4, #0]
 8018378:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801837c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8018380:	f47f af39 	bne.w	80181f6 <_scanf_float+0x6e>
 8018384:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8018388:	6022      	str	r2, [r4, #0]
 801838a:	2501      	movs	r5, #1
 801838c:	e7c0      	b.n	8018310 <_scanf_float+0x188>
 801838e:	2d03      	cmp	r5, #3
 8018390:	d0e2      	beq.n	8018358 <_scanf_float+0x1d0>
 8018392:	2d05      	cmp	r5, #5
 8018394:	e7de      	b.n	8018354 <_scanf_float+0x1cc>
 8018396:	2d02      	cmp	r5, #2
 8018398:	f47f af26 	bne.w	80181e8 <_scanf_float+0x60>
 801839c:	2503      	movs	r5, #3
 801839e:	e7b7      	b.n	8018310 <_scanf_float+0x188>
 80183a0:	2d06      	cmp	r5, #6
 80183a2:	f47f af21 	bne.w	80181e8 <_scanf_float+0x60>
 80183a6:	2507      	movs	r5, #7
 80183a8:	e7b2      	b.n	8018310 <_scanf_float+0x188>
 80183aa:	6822      	ldr	r2, [r4, #0]
 80183ac:	0591      	lsls	r1, r2, #22
 80183ae:	f57f af1b 	bpl.w	80181e8 <_scanf_float+0x60>
 80183b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80183b6:	6022      	str	r2, [r4, #0]
 80183b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80183bc:	e7a8      	b.n	8018310 <_scanf_float+0x188>
 80183be:	6822      	ldr	r2, [r4, #0]
 80183c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80183c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80183c8:	d006      	beq.n	80183d8 <_scanf_float+0x250>
 80183ca:	0550      	lsls	r0, r2, #21
 80183cc:	f57f af0c 	bpl.w	80181e8 <_scanf_float+0x60>
 80183d0:	f1b9 0f00 	cmp.w	r9, #0
 80183d4:	f43f af0f 	beq.w	80181f6 <_scanf_float+0x6e>
 80183d8:	0591      	lsls	r1, r2, #22
 80183da:	bf58      	it	pl
 80183dc:	9901      	ldrpl	r1, [sp, #4]
 80183de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80183e2:	bf58      	it	pl
 80183e4:	eba9 0101 	subpl.w	r1, r9, r1
 80183e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80183ec:	bf58      	it	pl
 80183ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80183f2:	6022      	str	r2, [r4, #0]
 80183f4:	f04f 0900 	mov.w	r9, #0
 80183f8:	e78a      	b.n	8018310 <_scanf_float+0x188>
 80183fa:	f04f 0a03 	mov.w	sl, #3
 80183fe:	e787      	b.n	8018310 <_scanf_float+0x188>
 8018400:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018404:	4639      	mov	r1, r7
 8018406:	4640      	mov	r0, r8
 8018408:	4798      	blx	r3
 801840a:	2800      	cmp	r0, #0
 801840c:	f43f aedf 	beq.w	80181ce <_scanf_float+0x46>
 8018410:	e6ea      	b.n	80181e8 <_scanf_float+0x60>
 8018412:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018416:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801841a:	463a      	mov	r2, r7
 801841c:	4640      	mov	r0, r8
 801841e:	4798      	blx	r3
 8018420:	6923      	ldr	r3, [r4, #16]
 8018422:	3b01      	subs	r3, #1
 8018424:	6123      	str	r3, [r4, #16]
 8018426:	e6ec      	b.n	8018202 <_scanf_float+0x7a>
 8018428:	1e6b      	subs	r3, r5, #1
 801842a:	2b06      	cmp	r3, #6
 801842c:	d825      	bhi.n	801847a <_scanf_float+0x2f2>
 801842e:	2d02      	cmp	r5, #2
 8018430:	d836      	bhi.n	80184a0 <_scanf_float+0x318>
 8018432:	455e      	cmp	r6, fp
 8018434:	f67f aee8 	bls.w	8018208 <_scanf_float+0x80>
 8018438:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801843c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018440:	463a      	mov	r2, r7
 8018442:	4640      	mov	r0, r8
 8018444:	4798      	blx	r3
 8018446:	6923      	ldr	r3, [r4, #16]
 8018448:	3b01      	subs	r3, #1
 801844a:	6123      	str	r3, [r4, #16]
 801844c:	e7f1      	b.n	8018432 <_scanf_float+0x2aa>
 801844e:	9802      	ldr	r0, [sp, #8]
 8018450:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018454:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8018458:	9002      	str	r0, [sp, #8]
 801845a:	463a      	mov	r2, r7
 801845c:	4640      	mov	r0, r8
 801845e:	4798      	blx	r3
 8018460:	6923      	ldr	r3, [r4, #16]
 8018462:	3b01      	subs	r3, #1
 8018464:	6123      	str	r3, [r4, #16]
 8018466:	f10a 3aff 	add.w	sl, sl, #4294967295
 801846a:	fa5f fa8a 	uxtb.w	sl, sl
 801846e:	f1ba 0f02 	cmp.w	sl, #2
 8018472:	d1ec      	bne.n	801844e <_scanf_float+0x2c6>
 8018474:	3d03      	subs	r5, #3
 8018476:	b2ed      	uxtb	r5, r5
 8018478:	1b76      	subs	r6, r6, r5
 801847a:	6823      	ldr	r3, [r4, #0]
 801847c:	05da      	lsls	r2, r3, #23
 801847e:	d52f      	bpl.n	80184e0 <_scanf_float+0x358>
 8018480:	055b      	lsls	r3, r3, #21
 8018482:	d510      	bpl.n	80184a6 <_scanf_float+0x31e>
 8018484:	455e      	cmp	r6, fp
 8018486:	f67f aebf 	bls.w	8018208 <_scanf_float+0x80>
 801848a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801848e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018492:	463a      	mov	r2, r7
 8018494:	4640      	mov	r0, r8
 8018496:	4798      	blx	r3
 8018498:	6923      	ldr	r3, [r4, #16]
 801849a:	3b01      	subs	r3, #1
 801849c:	6123      	str	r3, [r4, #16]
 801849e:	e7f1      	b.n	8018484 <_scanf_float+0x2fc>
 80184a0:	46aa      	mov	sl, r5
 80184a2:	9602      	str	r6, [sp, #8]
 80184a4:	e7df      	b.n	8018466 <_scanf_float+0x2de>
 80184a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80184aa:	6923      	ldr	r3, [r4, #16]
 80184ac:	2965      	cmp	r1, #101	; 0x65
 80184ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80184b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80184b6:	6123      	str	r3, [r4, #16]
 80184b8:	d00c      	beq.n	80184d4 <_scanf_float+0x34c>
 80184ba:	2945      	cmp	r1, #69	; 0x45
 80184bc:	d00a      	beq.n	80184d4 <_scanf_float+0x34c>
 80184be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80184c2:	463a      	mov	r2, r7
 80184c4:	4640      	mov	r0, r8
 80184c6:	4798      	blx	r3
 80184c8:	6923      	ldr	r3, [r4, #16]
 80184ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80184ce:	3b01      	subs	r3, #1
 80184d0:	1eb5      	subs	r5, r6, #2
 80184d2:	6123      	str	r3, [r4, #16]
 80184d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80184d8:	463a      	mov	r2, r7
 80184da:	4640      	mov	r0, r8
 80184dc:	4798      	blx	r3
 80184de:	462e      	mov	r6, r5
 80184e0:	6825      	ldr	r5, [r4, #0]
 80184e2:	f015 0510 	ands.w	r5, r5, #16
 80184e6:	d158      	bne.n	801859a <_scanf_float+0x412>
 80184e8:	7035      	strb	r5, [r6, #0]
 80184ea:	6823      	ldr	r3, [r4, #0]
 80184ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80184f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80184f4:	d11c      	bne.n	8018530 <_scanf_float+0x3a8>
 80184f6:	9b01      	ldr	r3, [sp, #4]
 80184f8:	454b      	cmp	r3, r9
 80184fa:	eba3 0209 	sub.w	r2, r3, r9
 80184fe:	d124      	bne.n	801854a <_scanf_float+0x3c2>
 8018500:	2200      	movs	r2, #0
 8018502:	4659      	mov	r1, fp
 8018504:	4640      	mov	r0, r8
 8018506:	f001 f815 	bl	8019534 <_strtod_r>
 801850a:	9b03      	ldr	r3, [sp, #12]
 801850c:	6821      	ldr	r1, [r4, #0]
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	f011 0f02 	tst.w	r1, #2
 8018514:	ec57 6b10 	vmov	r6, r7, d0
 8018518:	f103 0204 	add.w	r2, r3, #4
 801851c:	d020      	beq.n	8018560 <_scanf_float+0x3d8>
 801851e:	9903      	ldr	r1, [sp, #12]
 8018520:	600a      	str	r2, [r1, #0]
 8018522:	681b      	ldr	r3, [r3, #0]
 8018524:	e9c3 6700 	strd	r6, r7, [r3]
 8018528:	68e3      	ldr	r3, [r4, #12]
 801852a:	3301      	adds	r3, #1
 801852c:	60e3      	str	r3, [r4, #12]
 801852e:	e66c      	b.n	801820a <_scanf_float+0x82>
 8018530:	9b04      	ldr	r3, [sp, #16]
 8018532:	2b00      	cmp	r3, #0
 8018534:	d0e4      	beq.n	8018500 <_scanf_float+0x378>
 8018536:	9905      	ldr	r1, [sp, #20]
 8018538:	230a      	movs	r3, #10
 801853a:	462a      	mov	r2, r5
 801853c:	3101      	adds	r1, #1
 801853e:	4640      	mov	r0, r8
 8018540:	f001 f8de 	bl	8019700 <_strtol_r>
 8018544:	9b04      	ldr	r3, [sp, #16]
 8018546:	9e05      	ldr	r6, [sp, #20]
 8018548:	1ac2      	subs	r2, r0, r3
 801854a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801854e:	429e      	cmp	r6, r3
 8018550:	bf28      	it	cs
 8018552:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8018556:	4912      	ldr	r1, [pc, #72]	; (80185a0 <_scanf_float+0x418>)
 8018558:	4630      	mov	r0, r6
 801855a:	f000 f90d 	bl	8018778 <siprintf>
 801855e:	e7cf      	b.n	8018500 <_scanf_float+0x378>
 8018560:	f011 0f04 	tst.w	r1, #4
 8018564:	9903      	ldr	r1, [sp, #12]
 8018566:	600a      	str	r2, [r1, #0]
 8018568:	d1db      	bne.n	8018522 <_scanf_float+0x39a>
 801856a:	f8d3 8000 	ldr.w	r8, [r3]
 801856e:	ee10 2a10 	vmov	r2, s0
 8018572:	ee10 0a10 	vmov	r0, s0
 8018576:	463b      	mov	r3, r7
 8018578:	4639      	mov	r1, r7
 801857a:	f7e8 faf7 	bl	8000b6c <__aeabi_dcmpun>
 801857e:	b128      	cbz	r0, 801858c <_scanf_float+0x404>
 8018580:	4808      	ldr	r0, [pc, #32]	; (80185a4 <_scanf_float+0x41c>)
 8018582:	f000 f8af 	bl	80186e4 <nanf>
 8018586:	ed88 0a00 	vstr	s0, [r8]
 801858a:	e7cd      	b.n	8018528 <_scanf_float+0x3a0>
 801858c:	4630      	mov	r0, r6
 801858e:	4639      	mov	r1, r7
 8018590:	f7e8 fb4a 	bl	8000c28 <__aeabi_d2f>
 8018594:	f8c8 0000 	str.w	r0, [r8]
 8018598:	e7c6      	b.n	8018528 <_scanf_float+0x3a0>
 801859a:	2500      	movs	r5, #0
 801859c:	e635      	b.n	801820a <_scanf_float+0x82>
 801859e:	bf00      	nop
 80185a0:	0801effa 	.word	0x0801effa
 80185a4:	0801f128 	.word	0x0801f128

080185a8 <iprintf>:
 80185a8:	b40f      	push	{r0, r1, r2, r3}
 80185aa:	4b0a      	ldr	r3, [pc, #40]	; (80185d4 <iprintf+0x2c>)
 80185ac:	b513      	push	{r0, r1, r4, lr}
 80185ae:	681c      	ldr	r4, [r3, #0]
 80185b0:	b124      	cbz	r4, 80185bc <iprintf+0x14>
 80185b2:	69a3      	ldr	r3, [r4, #24]
 80185b4:	b913      	cbnz	r3, 80185bc <iprintf+0x14>
 80185b6:	4620      	mov	r0, r4
 80185b8:	f7fe fc30 	bl	8016e1c <__sinit>
 80185bc:	ab05      	add	r3, sp, #20
 80185be:	9a04      	ldr	r2, [sp, #16]
 80185c0:	68a1      	ldr	r1, [r4, #8]
 80185c2:	9301      	str	r3, [sp, #4]
 80185c4:	4620      	mov	r0, r4
 80185c6:	f004 f945 	bl	801c854 <_vfiprintf_r>
 80185ca:	b002      	add	sp, #8
 80185cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80185d0:	b004      	add	sp, #16
 80185d2:	4770      	bx	lr
 80185d4:	20000084 	.word	0x20000084

080185d8 <_puts_r>:
 80185d8:	b570      	push	{r4, r5, r6, lr}
 80185da:	460e      	mov	r6, r1
 80185dc:	4605      	mov	r5, r0
 80185de:	b118      	cbz	r0, 80185e8 <_puts_r+0x10>
 80185e0:	6983      	ldr	r3, [r0, #24]
 80185e2:	b90b      	cbnz	r3, 80185e8 <_puts_r+0x10>
 80185e4:	f7fe fc1a 	bl	8016e1c <__sinit>
 80185e8:	69ab      	ldr	r3, [r5, #24]
 80185ea:	68ac      	ldr	r4, [r5, #8]
 80185ec:	b913      	cbnz	r3, 80185f4 <_puts_r+0x1c>
 80185ee:	4628      	mov	r0, r5
 80185f0:	f7fe fc14 	bl	8016e1c <__sinit>
 80185f4:	4b2c      	ldr	r3, [pc, #176]	; (80186a8 <_puts_r+0xd0>)
 80185f6:	429c      	cmp	r4, r3
 80185f8:	d120      	bne.n	801863c <_puts_r+0x64>
 80185fa:	686c      	ldr	r4, [r5, #4]
 80185fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80185fe:	07db      	lsls	r3, r3, #31
 8018600:	d405      	bmi.n	801860e <_puts_r+0x36>
 8018602:	89a3      	ldrh	r3, [r4, #12]
 8018604:	0598      	lsls	r0, r3, #22
 8018606:	d402      	bmi.n	801860e <_puts_r+0x36>
 8018608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801860a:	f7fe fde7 	bl	80171dc <__retarget_lock_acquire_recursive>
 801860e:	89a3      	ldrh	r3, [r4, #12]
 8018610:	0719      	lsls	r1, r3, #28
 8018612:	d51d      	bpl.n	8018650 <_puts_r+0x78>
 8018614:	6923      	ldr	r3, [r4, #16]
 8018616:	b1db      	cbz	r3, 8018650 <_puts_r+0x78>
 8018618:	3e01      	subs	r6, #1
 801861a:	68a3      	ldr	r3, [r4, #8]
 801861c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018620:	3b01      	subs	r3, #1
 8018622:	60a3      	str	r3, [r4, #8]
 8018624:	bb39      	cbnz	r1, 8018676 <_puts_r+0x9e>
 8018626:	2b00      	cmp	r3, #0
 8018628:	da38      	bge.n	801869c <_puts_r+0xc4>
 801862a:	4622      	mov	r2, r4
 801862c:	210a      	movs	r1, #10
 801862e:	4628      	mov	r0, r5
 8018630:	f001 fb6a 	bl	8019d08 <__swbuf_r>
 8018634:	3001      	adds	r0, #1
 8018636:	d011      	beq.n	801865c <_puts_r+0x84>
 8018638:	250a      	movs	r5, #10
 801863a:	e011      	b.n	8018660 <_puts_r+0x88>
 801863c:	4b1b      	ldr	r3, [pc, #108]	; (80186ac <_puts_r+0xd4>)
 801863e:	429c      	cmp	r4, r3
 8018640:	d101      	bne.n	8018646 <_puts_r+0x6e>
 8018642:	68ac      	ldr	r4, [r5, #8]
 8018644:	e7da      	b.n	80185fc <_puts_r+0x24>
 8018646:	4b1a      	ldr	r3, [pc, #104]	; (80186b0 <_puts_r+0xd8>)
 8018648:	429c      	cmp	r4, r3
 801864a:	bf08      	it	eq
 801864c:	68ec      	ldreq	r4, [r5, #12]
 801864e:	e7d5      	b.n	80185fc <_puts_r+0x24>
 8018650:	4621      	mov	r1, r4
 8018652:	4628      	mov	r0, r5
 8018654:	f001 fbbc 	bl	8019dd0 <__swsetup_r>
 8018658:	2800      	cmp	r0, #0
 801865a:	d0dd      	beq.n	8018618 <_puts_r+0x40>
 801865c:	f04f 35ff 	mov.w	r5, #4294967295
 8018660:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018662:	07da      	lsls	r2, r3, #31
 8018664:	d405      	bmi.n	8018672 <_puts_r+0x9a>
 8018666:	89a3      	ldrh	r3, [r4, #12]
 8018668:	059b      	lsls	r3, r3, #22
 801866a:	d402      	bmi.n	8018672 <_puts_r+0x9a>
 801866c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801866e:	f7fe fdb7 	bl	80171e0 <__retarget_lock_release_recursive>
 8018672:	4628      	mov	r0, r5
 8018674:	bd70      	pop	{r4, r5, r6, pc}
 8018676:	2b00      	cmp	r3, #0
 8018678:	da04      	bge.n	8018684 <_puts_r+0xac>
 801867a:	69a2      	ldr	r2, [r4, #24]
 801867c:	429a      	cmp	r2, r3
 801867e:	dc06      	bgt.n	801868e <_puts_r+0xb6>
 8018680:	290a      	cmp	r1, #10
 8018682:	d004      	beq.n	801868e <_puts_r+0xb6>
 8018684:	6823      	ldr	r3, [r4, #0]
 8018686:	1c5a      	adds	r2, r3, #1
 8018688:	6022      	str	r2, [r4, #0]
 801868a:	7019      	strb	r1, [r3, #0]
 801868c:	e7c5      	b.n	801861a <_puts_r+0x42>
 801868e:	4622      	mov	r2, r4
 8018690:	4628      	mov	r0, r5
 8018692:	f001 fb39 	bl	8019d08 <__swbuf_r>
 8018696:	3001      	adds	r0, #1
 8018698:	d1bf      	bne.n	801861a <_puts_r+0x42>
 801869a:	e7df      	b.n	801865c <_puts_r+0x84>
 801869c:	6823      	ldr	r3, [r4, #0]
 801869e:	250a      	movs	r5, #10
 80186a0:	1c5a      	adds	r2, r3, #1
 80186a2:	6022      	str	r2, [r4, #0]
 80186a4:	701d      	strb	r5, [r3, #0]
 80186a6:	e7db      	b.n	8018660 <_puts_r+0x88>
 80186a8:	0801ee4c 	.word	0x0801ee4c
 80186ac:	0801ee6c 	.word	0x0801ee6c
 80186b0:	0801ee2c 	.word	0x0801ee2c

080186b4 <puts>:
 80186b4:	4b02      	ldr	r3, [pc, #8]	; (80186c0 <puts+0xc>)
 80186b6:	4601      	mov	r1, r0
 80186b8:	6818      	ldr	r0, [r3, #0]
 80186ba:	f7ff bf8d 	b.w	80185d8 <_puts_r>
 80186be:	bf00      	nop
 80186c0:	20000084 	.word	0x20000084

080186c4 <_sbrk_r>:
 80186c4:	b538      	push	{r3, r4, r5, lr}
 80186c6:	4d06      	ldr	r5, [pc, #24]	; (80186e0 <_sbrk_r+0x1c>)
 80186c8:	2300      	movs	r3, #0
 80186ca:	4604      	mov	r4, r0
 80186cc:	4608      	mov	r0, r1
 80186ce:	602b      	str	r3, [r5, #0]
 80186d0:	f004 fc3e 	bl	801cf50 <_sbrk>
 80186d4:	1c43      	adds	r3, r0, #1
 80186d6:	d102      	bne.n	80186de <_sbrk_r+0x1a>
 80186d8:	682b      	ldr	r3, [r5, #0]
 80186da:	b103      	cbz	r3, 80186de <_sbrk_r+0x1a>
 80186dc:	6023      	str	r3, [r4, #0]
 80186de:	bd38      	pop	{r3, r4, r5, pc}
 80186e0:	20006be8 	.word	0x20006be8

080186e4 <nanf>:
 80186e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80186ec <nanf+0x8>
 80186e8:	4770      	bx	lr
 80186ea:	bf00      	nop
 80186ec:	7fc00000 	.word	0x7fc00000

080186f0 <_raise_r>:
 80186f0:	291f      	cmp	r1, #31
 80186f2:	b538      	push	{r3, r4, r5, lr}
 80186f4:	4604      	mov	r4, r0
 80186f6:	460d      	mov	r5, r1
 80186f8:	d904      	bls.n	8018704 <_raise_r+0x14>
 80186fa:	2316      	movs	r3, #22
 80186fc:	6003      	str	r3, [r0, #0]
 80186fe:	f04f 30ff 	mov.w	r0, #4294967295
 8018702:	bd38      	pop	{r3, r4, r5, pc}
 8018704:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018706:	b112      	cbz	r2, 801870e <_raise_r+0x1e>
 8018708:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801870c:	b94b      	cbnz	r3, 8018722 <_raise_r+0x32>
 801870e:	4620      	mov	r0, r4
 8018710:	f000 f830 	bl	8018774 <_getpid_r>
 8018714:	462a      	mov	r2, r5
 8018716:	4601      	mov	r1, r0
 8018718:	4620      	mov	r0, r4
 801871a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801871e:	f000 b817 	b.w	8018750 <_kill_r>
 8018722:	2b01      	cmp	r3, #1
 8018724:	d00a      	beq.n	801873c <_raise_r+0x4c>
 8018726:	1c59      	adds	r1, r3, #1
 8018728:	d103      	bne.n	8018732 <_raise_r+0x42>
 801872a:	2316      	movs	r3, #22
 801872c:	6003      	str	r3, [r0, #0]
 801872e:	2001      	movs	r0, #1
 8018730:	e7e7      	b.n	8018702 <_raise_r+0x12>
 8018732:	2400      	movs	r4, #0
 8018734:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018738:	4628      	mov	r0, r5
 801873a:	4798      	blx	r3
 801873c:	2000      	movs	r0, #0
 801873e:	e7e0      	b.n	8018702 <_raise_r+0x12>

08018740 <raise>:
 8018740:	4b02      	ldr	r3, [pc, #8]	; (801874c <raise+0xc>)
 8018742:	4601      	mov	r1, r0
 8018744:	6818      	ldr	r0, [r3, #0]
 8018746:	f7ff bfd3 	b.w	80186f0 <_raise_r>
 801874a:	bf00      	nop
 801874c:	20000084 	.word	0x20000084

08018750 <_kill_r>:
 8018750:	b538      	push	{r3, r4, r5, lr}
 8018752:	4d07      	ldr	r5, [pc, #28]	; (8018770 <_kill_r+0x20>)
 8018754:	2300      	movs	r3, #0
 8018756:	4604      	mov	r4, r0
 8018758:	4608      	mov	r0, r1
 801875a:	4611      	mov	r1, r2
 801875c:	602b      	str	r3, [r5, #0]
 801875e:	f004 fbdf 	bl	801cf20 <_kill>
 8018762:	1c43      	adds	r3, r0, #1
 8018764:	d102      	bne.n	801876c <_kill_r+0x1c>
 8018766:	682b      	ldr	r3, [r5, #0]
 8018768:	b103      	cbz	r3, 801876c <_kill_r+0x1c>
 801876a:	6023      	str	r3, [r4, #0]
 801876c:	bd38      	pop	{r3, r4, r5, pc}
 801876e:	bf00      	nop
 8018770:	20006be8 	.word	0x20006be8

08018774 <_getpid_r>:
 8018774:	f004 bbc4 	b.w	801cf00 <_getpid>

08018778 <siprintf>:
 8018778:	b40e      	push	{r1, r2, r3}
 801877a:	b500      	push	{lr}
 801877c:	b09c      	sub	sp, #112	; 0x70
 801877e:	ab1d      	add	r3, sp, #116	; 0x74
 8018780:	9002      	str	r0, [sp, #8]
 8018782:	9006      	str	r0, [sp, #24]
 8018784:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018788:	4809      	ldr	r0, [pc, #36]	; (80187b0 <siprintf+0x38>)
 801878a:	9107      	str	r1, [sp, #28]
 801878c:	9104      	str	r1, [sp, #16]
 801878e:	4909      	ldr	r1, [pc, #36]	; (80187b4 <siprintf+0x3c>)
 8018790:	f853 2b04 	ldr.w	r2, [r3], #4
 8018794:	9105      	str	r1, [sp, #20]
 8018796:	6800      	ldr	r0, [r0, #0]
 8018798:	9301      	str	r3, [sp, #4]
 801879a:	a902      	add	r1, sp, #8
 801879c:	f003 fd5e 	bl	801c25c <_svfiprintf_r>
 80187a0:	9b02      	ldr	r3, [sp, #8]
 80187a2:	2200      	movs	r2, #0
 80187a4:	701a      	strb	r2, [r3, #0]
 80187a6:	b01c      	add	sp, #112	; 0x70
 80187a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80187ac:	b003      	add	sp, #12
 80187ae:	4770      	bx	lr
 80187b0:	20000084 	.word	0x20000084
 80187b4:	ffff0208 	.word	0xffff0208

080187b8 <siscanf>:
 80187b8:	b40e      	push	{r1, r2, r3}
 80187ba:	b510      	push	{r4, lr}
 80187bc:	b09f      	sub	sp, #124	; 0x7c
 80187be:	ac21      	add	r4, sp, #132	; 0x84
 80187c0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80187c4:	f854 2b04 	ldr.w	r2, [r4], #4
 80187c8:	9201      	str	r2, [sp, #4]
 80187ca:	f8ad 101c 	strh.w	r1, [sp, #28]
 80187ce:	9004      	str	r0, [sp, #16]
 80187d0:	9008      	str	r0, [sp, #32]
 80187d2:	f7e7 fd17 	bl	8000204 <strlen>
 80187d6:	4b0c      	ldr	r3, [pc, #48]	; (8018808 <siscanf+0x50>)
 80187d8:	9005      	str	r0, [sp, #20]
 80187da:	9009      	str	r0, [sp, #36]	; 0x24
 80187dc:	930d      	str	r3, [sp, #52]	; 0x34
 80187de:	480b      	ldr	r0, [pc, #44]	; (801880c <siscanf+0x54>)
 80187e0:	9a01      	ldr	r2, [sp, #4]
 80187e2:	6800      	ldr	r0, [r0, #0]
 80187e4:	9403      	str	r4, [sp, #12]
 80187e6:	2300      	movs	r3, #0
 80187e8:	9311      	str	r3, [sp, #68]	; 0x44
 80187ea:	9316      	str	r3, [sp, #88]	; 0x58
 80187ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80187f0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80187f4:	a904      	add	r1, sp, #16
 80187f6:	4623      	mov	r3, r4
 80187f8:	f003 fe8a 	bl	801c510 <__ssvfiscanf_r>
 80187fc:	b01f      	add	sp, #124	; 0x7c
 80187fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018802:	b003      	add	sp, #12
 8018804:	4770      	bx	lr
 8018806:	bf00      	nop
 8018808:	08018833 	.word	0x08018833
 801880c:	20000084 	.word	0x20000084

08018810 <__sread>:
 8018810:	b510      	push	{r4, lr}
 8018812:	460c      	mov	r4, r1
 8018814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018818:	f004 fa98 	bl	801cd4c <_read_r>
 801881c:	2800      	cmp	r0, #0
 801881e:	bfab      	itete	ge
 8018820:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018822:	89a3      	ldrhlt	r3, [r4, #12]
 8018824:	181b      	addge	r3, r3, r0
 8018826:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801882a:	bfac      	ite	ge
 801882c:	6563      	strge	r3, [r4, #84]	; 0x54
 801882e:	81a3      	strhlt	r3, [r4, #12]
 8018830:	bd10      	pop	{r4, pc}

08018832 <__seofread>:
 8018832:	2000      	movs	r0, #0
 8018834:	4770      	bx	lr

08018836 <__swrite>:
 8018836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801883a:	461f      	mov	r7, r3
 801883c:	898b      	ldrh	r3, [r1, #12]
 801883e:	05db      	lsls	r3, r3, #23
 8018840:	4605      	mov	r5, r0
 8018842:	460c      	mov	r4, r1
 8018844:	4616      	mov	r6, r2
 8018846:	d505      	bpl.n	8018854 <__swrite+0x1e>
 8018848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801884c:	2302      	movs	r3, #2
 801884e:	2200      	movs	r2, #0
 8018850:	f002 ff24 	bl	801b69c <_lseek_r>
 8018854:	89a3      	ldrh	r3, [r4, #12]
 8018856:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801885a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801885e:	81a3      	strh	r3, [r4, #12]
 8018860:	4632      	mov	r2, r6
 8018862:	463b      	mov	r3, r7
 8018864:	4628      	mov	r0, r5
 8018866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801886a:	f001 ba9f 	b.w	8019dac <_write_r>

0801886e <__sseek>:
 801886e:	b510      	push	{r4, lr}
 8018870:	460c      	mov	r4, r1
 8018872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018876:	f002 ff11 	bl	801b69c <_lseek_r>
 801887a:	1c43      	adds	r3, r0, #1
 801887c:	89a3      	ldrh	r3, [r4, #12]
 801887e:	bf15      	itete	ne
 8018880:	6560      	strne	r0, [r4, #84]	; 0x54
 8018882:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018886:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801888a:	81a3      	strheq	r3, [r4, #12]
 801888c:	bf18      	it	ne
 801888e:	81a3      	strhne	r3, [r4, #12]
 8018890:	bd10      	pop	{r4, pc}

08018892 <__sclose>:
 8018892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018896:	f001 bb27 	b.w	8019ee8 <_close_r>

0801889a <strchr>:
 801889a:	b2c9      	uxtb	r1, r1
 801889c:	4603      	mov	r3, r0
 801889e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80188a2:	b11a      	cbz	r2, 80188ac <strchr+0x12>
 80188a4:	428a      	cmp	r2, r1
 80188a6:	d1f9      	bne.n	801889c <strchr+0x2>
 80188a8:	4618      	mov	r0, r3
 80188aa:	4770      	bx	lr
 80188ac:	2900      	cmp	r1, #0
 80188ae:	bf18      	it	ne
 80188b0:	2300      	movne	r3, #0
 80188b2:	e7f9      	b.n	80188a8 <strchr+0xe>

080188b4 <strcpy>:
 80188b4:	4603      	mov	r3, r0
 80188b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80188ba:	f803 2b01 	strb.w	r2, [r3], #1
 80188be:	2a00      	cmp	r2, #0
 80188c0:	d1f9      	bne.n	80188b6 <strcpy+0x2>
 80188c2:	4770      	bx	lr

080188c4 <strncmp>:
 80188c4:	b510      	push	{r4, lr}
 80188c6:	b16a      	cbz	r2, 80188e4 <strncmp+0x20>
 80188c8:	3901      	subs	r1, #1
 80188ca:	1884      	adds	r4, r0, r2
 80188cc:	f810 3b01 	ldrb.w	r3, [r0], #1
 80188d0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80188d4:	4293      	cmp	r3, r2
 80188d6:	d103      	bne.n	80188e0 <strncmp+0x1c>
 80188d8:	42a0      	cmp	r0, r4
 80188da:	d001      	beq.n	80188e0 <strncmp+0x1c>
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d1f5      	bne.n	80188cc <strncmp+0x8>
 80188e0:	1a98      	subs	r0, r3, r2
 80188e2:	bd10      	pop	{r4, pc}
 80188e4:	4610      	mov	r0, r2
 80188e6:	e7fc      	b.n	80188e2 <strncmp+0x1e>

080188e8 <sulp>:
 80188e8:	b570      	push	{r4, r5, r6, lr}
 80188ea:	4604      	mov	r4, r0
 80188ec:	460d      	mov	r5, r1
 80188ee:	ec45 4b10 	vmov	d0, r4, r5
 80188f2:	4616      	mov	r6, r2
 80188f4:	f003 fad2 	bl	801be9c <__ulp>
 80188f8:	ec51 0b10 	vmov	r0, r1, d0
 80188fc:	b17e      	cbz	r6, 801891e <sulp+0x36>
 80188fe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8018902:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018906:	2b00      	cmp	r3, #0
 8018908:	dd09      	ble.n	801891e <sulp+0x36>
 801890a:	051b      	lsls	r3, r3, #20
 801890c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8018910:	2400      	movs	r4, #0
 8018912:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8018916:	4622      	mov	r2, r4
 8018918:	462b      	mov	r3, r5
 801891a:	f7e7 fe8d 	bl	8000638 <__aeabi_dmul>
 801891e:	bd70      	pop	{r4, r5, r6, pc}

08018920 <_strtod_l>:
 8018920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018924:	b0a3      	sub	sp, #140	; 0x8c
 8018926:	461f      	mov	r7, r3
 8018928:	2300      	movs	r3, #0
 801892a:	931e      	str	r3, [sp, #120]	; 0x78
 801892c:	4ba4      	ldr	r3, [pc, #656]	; (8018bc0 <_strtod_l+0x2a0>)
 801892e:	9219      	str	r2, [sp, #100]	; 0x64
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	9307      	str	r3, [sp, #28]
 8018934:	4604      	mov	r4, r0
 8018936:	4618      	mov	r0, r3
 8018938:	4688      	mov	r8, r1
 801893a:	f7e7 fc63 	bl	8000204 <strlen>
 801893e:	f04f 0a00 	mov.w	sl, #0
 8018942:	4605      	mov	r5, r0
 8018944:	f04f 0b00 	mov.w	fp, #0
 8018948:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801894c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801894e:	781a      	ldrb	r2, [r3, #0]
 8018950:	2a2b      	cmp	r2, #43	; 0x2b
 8018952:	d04c      	beq.n	80189ee <_strtod_l+0xce>
 8018954:	d839      	bhi.n	80189ca <_strtod_l+0xaa>
 8018956:	2a0d      	cmp	r2, #13
 8018958:	d832      	bhi.n	80189c0 <_strtod_l+0xa0>
 801895a:	2a08      	cmp	r2, #8
 801895c:	d832      	bhi.n	80189c4 <_strtod_l+0xa4>
 801895e:	2a00      	cmp	r2, #0
 8018960:	d03c      	beq.n	80189dc <_strtod_l+0xbc>
 8018962:	2300      	movs	r3, #0
 8018964:	930e      	str	r3, [sp, #56]	; 0x38
 8018966:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8018968:	7833      	ldrb	r3, [r6, #0]
 801896a:	2b30      	cmp	r3, #48	; 0x30
 801896c:	f040 80b4 	bne.w	8018ad8 <_strtod_l+0x1b8>
 8018970:	7873      	ldrb	r3, [r6, #1]
 8018972:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018976:	2b58      	cmp	r3, #88	; 0x58
 8018978:	d16c      	bne.n	8018a54 <_strtod_l+0x134>
 801897a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801897c:	9301      	str	r3, [sp, #4]
 801897e:	ab1e      	add	r3, sp, #120	; 0x78
 8018980:	9702      	str	r7, [sp, #8]
 8018982:	9300      	str	r3, [sp, #0]
 8018984:	4a8f      	ldr	r2, [pc, #572]	; (8018bc4 <_strtod_l+0x2a4>)
 8018986:	ab1f      	add	r3, sp, #124	; 0x7c
 8018988:	a91d      	add	r1, sp, #116	; 0x74
 801898a:	4620      	mov	r0, r4
 801898c:	f002 fa84 	bl	801ae98 <__gethex>
 8018990:	f010 0707 	ands.w	r7, r0, #7
 8018994:	4605      	mov	r5, r0
 8018996:	d005      	beq.n	80189a4 <_strtod_l+0x84>
 8018998:	2f06      	cmp	r7, #6
 801899a:	d12a      	bne.n	80189f2 <_strtod_l+0xd2>
 801899c:	3601      	adds	r6, #1
 801899e:	2300      	movs	r3, #0
 80189a0:	961d      	str	r6, [sp, #116]	; 0x74
 80189a2:	930e      	str	r3, [sp, #56]	; 0x38
 80189a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	f040 8596 	bne.w	80194d8 <_strtod_l+0xbb8>
 80189ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80189ae:	b1db      	cbz	r3, 80189e8 <_strtod_l+0xc8>
 80189b0:	4652      	mov	r2, sl
 80189b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80189b6:	ec43 2b10 	vmov	d0, r2, r3
 80189ba:	b023      	add	sp, #140	; 0x8c
 80189bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189c0:	2a20      	cmp	r2, #32
 80189c2:	d1ce      	bne.n	8018962 <_strtod_l+0x42>
 80189c4:	3301      	adds	r3, #1
 80189c6:	931d      	str	r3, [sp, #116]	; 0x74
 80189c8:	e7c0      	b.n	801894c <_strtod_l+0x2c>
 80189ca:	2a2d      	cmp	r2, #45	; 0x2d
 80189cc:	d1c9      	bne.n	8018962 <_strtod_l+0x42>
 80189ce:	2201      	movs	r2, #1
 80189d0:	920e      	str	r2, [sp, #56]	; 0x38
 80189d2:	1c5a      	adds	r2, r3, #1
 80189d4:	921d      	str	r2, [sp, #116]	; 0x74
 80189d6:	785b      	ldrb	r3, [r3, #1]
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d1c4      	bne.n	8018966 <_strtod_l+0x46>
 80189dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80189de:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	f040 8576 	bne.w	80194d4 <_strtod_l+0xbb4>
 80189e8:	4652      	mov	r2, sl
 80189ea:	465b      	mov	r3, fp
 80189ec:	e7e3      	b.n	80189b6 <_strtod_l+0x96>
 80189ee:	2200      	movs	r2, #0
 80189f0:	e7ee      	b.n	80189d0 <_strtod_l+0xb0>
 80189f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80189f4:	b13a      	cbz	r2, 8018a06 <_strtod_l+0xe6>
 80189f6:	2135      	movs	r1, #53	; 0x35
 80189f8:	a820      	add	r0, sp, #128	; 0x80
 80189fa:	f003 fb5a 	bl	801c0b2 <__copybits>
 80189fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018a00:	4620      	mov	r0, r4
 8018a02:	f002 ff1f 	bl	801b844 <_Bfree>
 8018a06:	3f01      	subs	r7, #1
 8018a08:	2f05      	cmp	r7, #5
 8018a0a:	d807      	bhi.n	8018a1c <_strtod_l+0xfc>
 8018a0c:	e8df f007 	tbb	[pc, r7]
 8018a10:	1d180b0e 	.word	0x1d180b0e
 8018a14:	030e      	.short	0x030e
 8018a16:	f04f 0b00 	mov.w	fp, #0
 8018a1a:	46da      	mov	sl, fp
 8018a1c:	0728      	lsls	r0, r5, #28
 8018a1e:	d5c1      	bpl.n	80189a4 <_strtod_l+0x84>
 8018a20:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8018a24:	e7be      	b.n	80189a4 <_strtod_l+0x84>
 8018a26:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8018a2a:	e7f7      	b.n	8018a1c <_strtod_l+0xfc>
 8018a2c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8018a30:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018a32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8018a36:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8018a3a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8018a3e:	e7ed      	b.n	8018a1c <_strtod_l+0xfc>
 8018a40:	f8df b184 	ldr.w	fp, [pc, #388]	; 8018bc8 <_strtod_l+0x2a8>
 8018a44:	f04f 0a00 	mov.w	sl, #0
 8018a48:	e7e8      	b.n	8018a1c <_strtod_l+0xfc>
 8018a4a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8018a4e:	f04f 3aff 	mov.w	sl, #4294967295
 8018a52:	e7e3      	b.n	8018a1c <_strtod_l+0xfc>
 8018a54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018a56:	1c5a      	adds	r2, r3, #1
 8018a58:	921d      	str	r2, [sp, #116]	; 0x74
 8018a5a:	785b      	ldrb	r3, [r3, #1]
 8018a5c:	2b30      	cmp	r3, #48	; 0x30
 8018a5e:	d0f9      	beq.n	8018a54 <_strtod_l+0x134>
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d09f      	beq.n	80189a4 <_strtod_l+0x84>
 8018a64:	2301      	movs	r3, #1
 8018a66:	f04f 0900 	mov.w	r9, #0
 8018a6a:	9304      	str	r3, [sp, #16]
 8018a6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018a6e:	930a      	str	r3, [sp, #40]	; 0x28
 8018a70:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8018a74:	464f      	mov	r7, r9
 8018a76:	220a      	movs	r2, #10
 8018a78:	981d      	ldr	r0, [sp, #116]	; 0x74
 8018a7a:	7806      	ldrb	r6, [r0, #0]
 8018a7c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8018a80:	b2d9      	uxtb	r1, r3
 8018a82:	2909      	cmp	r1, #9
 8018a84:	d92a      	bls.n	8018adc <_strtod_l+0x1bc>
 8018a86:	9907      	ldr	r1, [sp, #28]
 8018a88:	462a      	mov	r2, r5
 8018a8a:	f7ff ff1b 	bl	80188c4 <strncmp>
 8018a8e:	b398      	cbz	r0, 8018af8 <_strtod_l+0x1d8>
 8018a90:	2000      	movs	r0, #0
 8018a92:	4633      	mov	r3, r6
 8018a94:	463d      	mov	r5, r7
 8018a96:	9007      	str	r0, [sp, #28]
 8018a98:	4602      	mov	r2, r0
 8018a9a:	2b65      	cmp	r3, #101	; 0x65
 8018a9c:	d001      	beq.n	8018aa2 <_strtod_l+0x182>
 8018a9e:	2b45      	cmp	r3, #69	; 0x45
 8018aa0:	d118      	bne.n	8018ad4 <_strtod_l+0x1b4>
 8018aa2:	b91d      	cbnz	r5, 8018aac <_strtod_l+0x18c>
 8018aa4:	9b04      	ldr	r3, [sp, #16]
 8018aa6:	4303      	orrs	r3, r0
 8018aa8:	d098      	beq.n	80189dc <_strtod_l+0xbc>
 8018aaa:	2500      	movs	r5, #0
 8018aac:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8018ab0:	f108 0301 	add.w	r3, r8, #1
 8018ab4:	931d      	str	r3, [sp, #116]	; 0x74
 8018ab6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8018aba:	2b2b      	cmp	r3, #43	; 0x2b
 8018abc:	d075      	beq.n	8018baa <_strtod_l+0x28a>
 8018abe:	2b2d      	cmp	r3, #45	; 0x2d
 8018ac0:	d07b      	beq.n	8018bba <_strtod_l+0x29a>
 8018ac2:	f04f 0c00 	mov.w	ip, #0
 8018ac6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8018aca:	2909      	cmp	r1, #9
 8018acc:	f240 8082 	bls.w	8018bd4 <_strtod_l+0x2b4>
 8018ad0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8018ad4:	2600      	movs	r6, #0
 8018ad6:	e09d      	b.n	8018c14 <_strtod_l+0x2f4>
 8018ad8:	2300      	movs	r3, #0
 8018ada:	e7c4      	b.n	8018a66 <_strtod_l+0x146>
 8018adc:	2f08      	cmp	r7, #8
 8018ade:	bfd8      	it	le
 8018ae0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8018ae2:	f100 0001 	add.w	r0, r0, #1
 8018ae6:	bfda      	itte	le
 8018ae8:	fb02 3301 	mlale	r3, r2, r1, r3
 8018aec:	9309      	strle	r3, [sp, #36]	; 0x24
 8018aee:	fb02 3909 	mlagt	r9, r2, r9, r3
 8018af2:	3701      	adds	r7, #1
 8018af4:	901d      	str	r0, [sp, #116]	; 0x74
 8018af6:	e7bf      	b.n	8018a78 <_strtod_l+0x158>
 8018af8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018afa:	195a      	adds	r2, r3, r5
 8018afc:	921d      	str	r2, [sp, #116]	; 0x74
 8018afe:	5d5b      	ldrb	r3, [r3, r5]
 8018b00:	2f00      	cmp	r7, #0
 8018b02:	d037      	beq.n	8018b74 <_strtod_l+0x254>
 8018b04:	9007      	str	r0, [sp, #28]
 8018b06:	463d      	mov	r5, r7
 8018b08:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8018b0c:	2a09      	cmp	r2, #9
 8018b0e:	d912      	bls.n	8018b36 <_strtod_l+0x216>
 8018b10:	2201      	movs	r2, #1
 8018b12:	e7c2      	b.n	8018a9a <_strtod_l+0x17a>
 8018b14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018b16:	1c5a      	adds	r2, r3, #1
 8018b18:	921d      	str	r2, [sp, #116]	; 0x74
 8018b1a:	785b      	ldrb	r3, [r3, #1]
 8018b1c:	3001      	adds	r0, #1
 8018b1e:	2b30      	cmp	r3, #48	; 0x30
 8018b20:	d0f8      	beq.n	8018b14 <_strtod_l+0x1f4>
 8018b22:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8018b26:	2a08      	cmp	r2, #8
 8018b28:	f200 84db 	bhi.w	80194e2 <_strtod_l+0xbc2>
 8018b2c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018b2e:	9007      	str	r0, [sp, #28]
 8018b30:	2000      	movs	r0, #0
 8018b32:	920a      	str	r2, [sp, #40]	; 0x28
 8018b34:	4605      	mov	r5, r0
 8018b36:	3b30      	subs	r3, #48	; 0x30
 8018b38:	f100 0201 	add.w	r2, r0, #1
 8018b3c:	d014      	beq.n	8018b68 <_strtod_l+0x248>
 8018b3e:	9907      	ldr	r1, [sp, #28]
 8018b40:	4411      	add	r1, r2
 8018b42:	9107      	str	r1, [sp, #28]
 8018b44:	462a      	mov	r2, r5
 8018b46:	eb00 0e05 	add.w	lr, r0, r5
 8018b4a:	210a      	movs	r1, #10
 8018b4c:	4572      	cmp	r2, lr
 8018b4e:	d113      	bne.n	8018b78 <_strtod_l+0x258>
 8018b50:	182a      	adds	r2, r5, r0
 8018b52:	2a08      	cmp	r2, #8
 8018b54:	f105 0501 	add.w	r5, r5, #1
 8018b58:	4405      	add	r5, r0
 8018b5a:	dc1c      	bgt.n	8018b96 <_strtod_l+0x276>
 8018b5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018b5e:	220a      	movs	r2, #10
 8018b60:	fb02 3301 	mla	r3, r2, r1, r3
 8018b64:	9309      	str	r3, [sp, #36]	; 0x24
 8018b66:	2200      	movs	r2, #0
 8018b68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018b6a:	1c59      	adds	r1, r3, #1
 8018b6c:	911d      	str	r1, [sp, #116]	; 0x74
 8018b6e:	785b      	ldrb	r3, [r3, #1]
 8018b70:	4610      	mov	r0, r2
 8018b72:	e7c9      	b.n	8018b08 <_strtod_l+0x1e8>
 8018b74:	4638      	mov	r0, r7
 8018b76:	e7d2      	b.n	8018b1e <_strtod_l+0x1fe>
 8018b78:	2a08      	cmp	r2, #8
 8018b7a:	dc04      	bgt.n	8018b86 <_strtod_l+0x266>
 8018b7c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8018b7e:	434e      	muls	r6, r1
 8018b80:	9609      	str	r6, [sp, #36]	; 0x24
 8018b82:	3201      	adds	r2, #1
 8018b84:	e7e2      	b.n	8018b4c <_strtod_l+0x22c>
 8018b86:	f102 0c01 	add.w	ip, r2, #1
 8018b8a:	f1bc 0f10 	cmp.w	ip, #16
 8018b8e:	bfd8      	it	le
 8018b90:	fb01 f909 	mulle.w	r9, r1, r9
 8018b94:	e7f5      	b.n	8018b82 <_strtod_l+0x262>
 8018b96:	2d10      	cmp	r5, #16
 8018b98:	bfdc      	itt	le
 8018b9a:	220a      	movle	r2, #10
 8018b9c:	fb02 3909 	mlale	r9, r2, r9, r3
 8018ba0:	e7e1      	b.n	8018b66 <_strtod_l+0x246>
 8018ba2:	2300      	movs	r3, #0
 8018ba4:	9307      	str	r3, [sp, #28]
 8018ba6:	2201      	movs	r2, #1
 8018ba8:	e77c      	b.n	8018aa4 <_strtod_l+0x184>
 8018baa:	f04f 0c00 	mov.w	ip, #0
 8018bae:	f108 0302 	add.w	r3, r8, #2
 8018bb2:	931d      	str	r3, [sp, #116]	; 0x74
 8018bb4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8018bb8:	e785      	b.n	8018ac6 <_strtod_l+0x1a6>
 8018bba:	f04f 0c01 	mov.w	ip, #1
 8018bbe:	e7f6      	b.n	8018bae <_strtod_l+0x28e>
 8018bc0:	0801f210 	.word	0x0801f210
 8018bc4:	0801f000 	.word	0x0801f000
 8018bc8:	7ff00000 	.word	0x7ff00000
 8018bcc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018bce:	1c59      	adds	r1, r3, #1
 8018bd0:	911d      	str	r1, [sp, #116]	; 0x74
 8018bd2:	785b      	ldrb	r3, [r3, #1]
 8018bd4:	2b30      	cmp	r3, #48	; 0x30
 8018bd6:	d0f9      	beq.n	8018bcc <_strtod_l+0x2ac>
 8018bd8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8018bdc:	2908      	cmp	r1, #8
 8018bde:	f63f af79 	bhi.w	8018ad4 <_strtod_l+0x1b4>
 8018be2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8018be6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018be8:	9308      	str	r3, [sp, #32]
 8018bea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018bec:	1c59      	adds	r1, r3, #1
 8018bee:	911d      	str	r1, [sp, #116]	; 0x74
 8018bf0:	785b      	ldrb	r3, [r3, #1]
 8018bf2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8018bf6:	2e09      	cmp	r6, #9
 8018bf8:	d937      	bls.n	8018c6a <_strtod_l+0x34a>
 8018bfa:	9e08      	ldr	r6, [sp, #32]
 8018bfc:	1b89      	subs	r1, r1, r6
 8018bfe:	2908      	cmp	r1, #8
 8018c00:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8018c04:	dc02      	bgt.n	8018c0c <_strtod_l+0x2ec>
 8018c06:	4576      	cmp	r6, lr
 8018c08:	bfa8      	it	ge
 8018c0a:	4676      	movge	r6, lr
 8018c0c:	f1bc 0f00 	cmp.w	ip, #0
 8018c10:	d000      	beq.n	8018c14 <_strtod_l+0x2f4>
 8018c12:	4276      	negs	r6, r6
 8018c14:	2d00      	cmp	r5, #0
 8018c16:	d14f      	bne.n	8018cb8 <_strtod_l+0x398>
 8018c18:	9904      	ldr	r1, [sp, #16]
 8018c1a:	4301      	orrs	r1, r0
 8018c1c:	f47f aec2 	bne.w	80189a4 <_strtod_l+0x84>
 8018c20:	2a00      	cmp	r2, #0
 8018c22:	f47f aedb 	bne.w	80189dc <_strtod_l+0xbc>
 8018c26:	2b69      	cmp	r3, #105	; 0x69
 8018c28:	d027      	beq.n	8018c7a <_strtod_l+0x35a>
 8018c2a:	dc24      	bgt.n	8018c76 <_strtod_l+0x356>
 8018c2c:	2b49      	cmp	r3, #73	; 0x49
 8018c2e:	d024      	beq.n	8018c7a <_strtod_l+0x35a>
 8018c30:	2b4e      	cmp	r3, #78	; 0x4e
 8018c32:	f47f aed3 	bne.w	80189dc <_strtod_l+0xbc>
 8018c36:	499e      	ldr	r1, [pc, #632]	; (8018eb0 <_strtod_l+0x590>)
 8018c38:	a81d      	add	r0, sp, #116	; 0x74
 8018c3a:	f002 fb85 	bl	801b348 <__match>
 8018c3e:	2800      	cmp	r0, #0
 8018c40:	f43f aecc 	beq.w	80189dc <_strtod_l+0xbc>
 8018c44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018c46:	781b      	ldrb	r3, [r3, #0]
 8018c48:	2b28      	cmp	r3, #40	; 0x28
 8018c4a:	d12d      	bne.n	8018ca8 <_strtod_l+0x388>
 8018c4c:	4999      	ldr	r1, [pc, #612]	; (8018eb4 <_strtod_l+0x594>)
 8018c4e:	aa20      	add	r2, sp, #128	; 0x80
 8018c50:	a81d      	add	r0, sp, #116	; 0x74
 8018c52:	f002 fb8d 	bl	801b370 <__hexnan>
 8018c56:	2805      	cmp	r0, #5
 8018c58:	d126      	bne.n	8018ca8 <_strtod_l+0x388>
 8018c5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018c5c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8018c60:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8018c64:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8018c68:	e69c      	b.n	80189a4 <_strtod_l+0x84>
 8018c6a:	210a      	movs	r1, #10
 8018c6c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8018c70:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8018c74:	e7b9      	b.n	8018bea <_strtod_l+0x2ca>
 8018c76:	2b6e      	cmp	r3, #110	; 0x6e
 8018c78:	e7db      	b.n	8018c32 <_strtod_l+0x312>
 8018c7a:	498f      	ldr	r1, [pc, #572]	; (8018eb8 <_strtod_l+0x598>)
 8018c7c:	a81d      	add	r0, sp, #116	; 0x74
 8018c7e:	f002 fb63 	bl	801b348 <__match>
 8018c82:	2800      	cmp	r0, #0
 8018c84:	f43f aeaa 	beq.w	80189dc <_strtod_l+0xbc>
 8018c88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018c8a:	498c      	ldr	r1, [pc, #560]	; (8018ebc <_strtod_l+0x59c>)
 8018c8c:	3b01      	subs	r3, #1
 8018c8e:	a81d      	add	r0, sp, #116	; 0x74
 8018c90:	931d      	str	r3, [sp, #116]	; 0x74
 8018c92:	f002 fb59 	bl	801b348 <__match>
 8018c96:	b910      	cbnz	r0, 8018c9e <_strtod_l+0x37e>
 8018c98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018c9a:	3301      	adds	r3, #1
 8018c9c:	931d      	str	r3, [sp, #116]	; 0x74
 8018c9e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8018ecc <_strtod_l+0x5ac>
 8018ca2:	f04f 0a00 	mov.w	sl, #0
 8018ca6:	e67d      	b.n	80189a4 <_strtod_l+0x84>
 8018ca8:	4885      	ldr	r0, [pc, #532]	; (8018ec0 <_strtod_l+0x5a0>)
 8018caa:	f7fe f841 	bl	8016d30 <nan>
 8018cae:	ed8d 0b04 	vstr	d0, [sp, #16]
 8018cb2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8018cb6:	e675      	b.n	80189a4 <_strtod_l+0x84>
 8018cb8:	9b07      	ldr	r3, [sp, #28]
 8018cba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018cbc:	1af3      	subs	r3, r6, r3
 8018cbe:	2f00      	cmp	r7, #0
 8018cc0:	bf08      	it	eq
 8018cc2:	462f      	moveq	r7, r5
 8018cc4:	2d10      	cmp	r5, #16
 8018cc6:	9308      	str	r3, [sp, #32]
 8018cc8:	46a8      	mov	r8, r5
 8018cca:	bfa8      	it	ge
 8018ccc:	f04f 0810 	movge.w	r8, #16
 8018cd0:	f7e7 fc38 	bl	8000544 <__aeabi_ui2d>
 8018cd4:	2d09      	cmp	r5, #9
 8018cd6:	4682      	mov	sl, r0
 8018cd8:	468b      	mov	fp, r1
 8018cda:	dd13      	ble.n	8018d04 <_strtod_l+0x3e4>
 8018cdc:	4b79      	ldr	r3, [pc, #484]	; (8018ec4 <_strtod_l+0x5a4>)
 8018cde:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8018ce2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8018ce6:	f7e7 fca7 	bl	8000638 <__aeabi_dmul>
 8018cea:	4682      	mov	sl, r0
 8018cec:	4648      	mov	r0, r9
 8018cee:	468b      	mov	fp, r1
 8018cf0:	f7e7 fc28 	bl	8000544 <__aeabi_ui2d>
 8018cf4:	4602      	mov	r2, r0
 8018cf6:	460b      	mov	r3, r1
 8018cf8:	4650      	mov	r0, sl
 8018cfa:	4659      	mov	r1, fp
 8018cfc:	f7e7 fae6 	bl	80002cc <__adddf3>
 8018d00:	4682      	mov	sl, r0
 8018d02:	468b      	mov	fp, r1
 8018d04:	2d0f      	cmp	r5, #15
 8018d06:	dc38      	bgt.n	8018d7a <_strtod_l+0x45a>
 8018d08:	9b08      	ldr	r3, [sp, #32]
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	f43f ae4a 	beq.w	80189a4 <_strtod_l+0x84>
 8018d10:	dd24      	ble.n	8018d5c <_strtod_l+0x43c>
 8018d12:	2b16      	cmp	r3, #22
 8018d14:	dc0b      	bgt.n	8018d2e <_strtod_l+0x40e>
 8018d16:	4d6b      	ldr	r5, [pc, #428]	; (8018ec4 <_strtod_l+0x5a4>)
 8018d18:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8018d1c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8018d20:	4652      	mov	r2, sl
 8018d22:	465b      	mov	r3, fp
 8018d24:	f7e7 fc88 	bl	8000638 <__aeabi_dmul>
 8018d28:	4682      	mov	sl, r0
 8018d2a:	468b      	mov	fp, r1
 8018d2c:	e63a      	b.n	80189a4 <_strtod_l+0x84>
 8018d2e:	9a08      	ldr	r2, [sp, #32]
 8018d30:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8018d34:	4293      	cmp	r3, r2
 8018d36:	db20      	blt.n	8018d7a <_strtod_l+0x45a>
 8018d38:	4c62      	ldr	r4, [pc, #392]	; (8018ec4 <_strtod_l+0x5a4>)
 8018d3a:	f1c5 050f 	rsb	r5, r5, #15
 8018d3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8018d42:	4652      	mov	r2, sl
 8018d44:	465b      	mov	r3, fp
 8018d46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d4a:	f7e7 fc75 	bl	8000638 <__aeabi_dmul>
 8018d4e:	9b08      	ldr	r3, [sp, #32]
 8018d50:	1b5d      	subs	r5, r3, r5
 8018d52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8018d56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018d5a:	e7e3      	b.n	8018d24 <_strtod_l+0x404>
 8018d5c:	9b08      	ldr	r3, [sp, #32]
 8018d5e:	3316      	adds	r3, #22
 8018d60:	db0b      	blt.n	8018d7a <_strtod_l+0x45a>
 8018d62:	9b07      	ldr	r3, [sp, #28]
 8018d64:	4a57      	ldr	r2, [pc, #348]	; (8018ec4 <_strtod_l+0x5a4>)
 8018d66:	1b9e      	subs	r6, r3, r6
 8018d68:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8018d6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018d70:	4650      	mov	r0, sl
 8018d72:	4659      	mov	r1, fp
 8018d74:	f7e7 fd8a 	bl	800088c <__aeabi_ddiv>
 8018d78:	e7d6      	b.n	8018d28 <_strtod_l+0x408>
 8018d7a:	9b08      	ldr	r3, [sp, #32]
 8018d7c:	eba5 0808 	sub.w	r8, r5, r8
 8018d80:	4498      	add	r8, r3
 8018d82:	f1b8 0f00 	cmp.w	r8, #0
 8018d86:	dd71      	ble.n	8018e6c <_strtod_l+0x54c>
 8018d88:	f018 030f 	ands.w	r3, r8, #15
 8018d8c:	d00a      	beq.n	8018da4 <_strtod_l+0x484>
 8018d8e:	494d      	ldr	r1, [pc, #308]	; (8018ec4 <_strtod_l+0x5a4>)
 8018d90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8018d94:	4652      	mov	r2, sl
 8018d96:	465b      	mov	r3, fp
 8018d98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d9c:	f7e7 fc4c 	bl	8000638 <__aeabi_dmul>
 8018da0:	4682      	mov	sl, r0
 8018da2:	468b      	mov	fp, r1
 8018da4:	f038 080f 	bics.w	r8, r8, #15
 8018da8:	d04d      	beq.n	8018e46 <_strtod_l+0x526>
 8018daa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8018dae:	dd22      	ble.n	8018df6 <_strtod_l+0x4d6>
 8018db0:	2500      	movs	r5, #0
 8018db2:	462e      	mov	r6, r5
 8018db4:	9509      	str	r5, [sp, #36]	; 0x24
 8018db6:	9507      	str	r5, [sp, #28]
 8018db8:	2322      	movs	r3, #34	; 0x22
 8018dba:	f8df b110 	ldr.w	fp, [pc, #272]	; 8018ecc <_strtod_l+0x5ac>
 8018dbe:	6023      	str	r3, [r4, #0]
 8018dc0:	f04f 0a00 	mov.w	sl, #0
 8018dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	f43f adec 	beq.w	80189a4 <_strtod_l+0x84>
 8018dcc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018dce:	4620      	mov	r0, r4
 8018dd0:	f002 fd38 	bl	801b844 <_Bfree>
 8018dd4:	9907      	ldr	r1, [sp, #28]
 8018dd6:	4620      	mov	r0, r4
 8018dd8:	f002 fd34 	bl	801b844 <_Bfree>
 8018ddc:	4631      	mov	r1, r6
 8018dde:	4620      	mov	r0, r4
 8018de0:	f002 fd30 	bl	801b844 <_Bfree>
 8018de4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018de6:	4620      	mov	r0, r4
 8018de8:	f002 fd2c 	bl	801b844 <_Bfree>
 8018dec:	4629      	mov	r1, r5
 8018dee:	4620      	mov	r0, r4
 8018df0:	f002 fd28 	bl	801b844 <_Bfree>
 8018df4:	e5d6      	b.n	80189a4 <_strtod_l+0x84>
 8018df6:	2300      	movs	r3, #0
 8018df8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8018dfc:	4650      	mov	r0, sl
 8018dfe:	4659      	mov	r1, fp
 8018e00:	4699      	mov	r9, r3
 8018e02:	f1b8 0f01 	cmp.w	r8, #1
 8018e06:	dc21      	bgt.n	8018e4c <_strtod_l+0x52c>
 8018e08:	b10b      	cbz	r3, 8018e0e <_strtod_l+0x4ee>
 8018e0a:	4682      	mov	sl, r0
 8018e0c:	468b      	mov	fp, r1
 8018e0e:	4b2e      	ldr	r3, [pc, #184]	; (8018ec8 <_strtod_l+0x5a8>)
 8018e10:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8018e14:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8018e18:	4652      	mov	r2, sl
 8018e1a:	465b      	mov	r3, fp
 8018e1c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8018e20:	f7e7 fc0a 	bl	8000638 <__aeabi_dmul>
 8018e24:	4b29      	ldr	r3, [pc, #164]	; (8018ecc <_strtod_l+0x5ac>)
 8018e26:	460a      	mov	r2, r1
 8018e28:	400b      	ands	r3, r1
 8018e2a:	4929      	ldr	r1, [pc, #164]	; (8018ed0 <_strtod_l+0x5b0>)
 8018e2c:	428b      	cmp	r3, r1
 8018e2e:	4682      	mov	sl, r0
 8018e30:	d8be      	bhi.n	8018db0 <_strtod_l+0x490>
 8018e32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8018e36:	428b      	cmp	r3, r1
 8018e38:	bf86      	itte	hi
 8018e3a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8018ed4 <_strtod_l+0x5b4>
 8018e3e:	f04f 3aff 	movhi.w	sl, #4294967295
 8018e42:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8018e46:	2300      	movs	r3, #0
 8018e48:	9304      	str	r3, [sp, #16]
 8018e4a:	e081      	b.n	8018f50 <_strtod_l+0x630>
 8018e4c:	f018 0f01 	tst.w	r8, #1
 8018e50:	d007      	beq.n	8018e62 <_strtod_l+0x542>
 8018e52:	4b1d      	ldr	r3, [pc, #116]	; (8018ec8 <_strtod_l+0x5a8>)
 8018e54:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8018e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e5c:	f7e7 fbec 	bl	8000638 <__aeabi_dmul>
 8018e60:	2301      	movs	r3, #1
 8018e62:	f109 0901 	add.w	r9, r9, #1
 8018e66:	ea4f 0868 	mov.w	r8, r8, asr #1
 8018e6a:	e7ca      	b.n	8018e02 <_strtod_l+0x4e2>
 8018e6c:	d0eb      	beq.n	8018e46 <_strtod_l+0x526>
 8018e6e:	f1c8 0800 	rsb	r8, r8, #0
 8018e72:	f018 020f 	ands.w	r2, r8, #15
 8018e76:	d00a      	beq.n	8018e8e <_strtod_l+0x56e>
 8018e78:	4b12      	ldr	r3, [pc, #72]	; (8018ec4 <_strtod_l+0x5a4>)
 8018e7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018e7e:	4650      	mov	r0, sl
 8018e80:	4659      	mov	r1, fp
 8018e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e86:	f7e7 fd01 	bl	800088c <__aeabi_ddiv>
 8018e8a:	4682      	mov	sl, r0
 8018e8c:	468b      	mov	fp, r1
 8018e8e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8018e92:	d0d8      	beq.n	8018e46 <_strtod_l+0x526>
 8018e94:	f1b8 0f1f 	cmp.w	r8, #31
 8018e98:	dd1e      	ble.n	8018ed8 <_strtod_l+0x5b8>
 8018e9a:	2500      	movs	r5, #0
 8018e9c:	462e      	mov	r6, r5
 8018e9e:	9509      	str	r5, [sp, #36]	; 0x24
 8018ea0:	9507      	str	r5, [sp, #28]
 8018ea2:	2322      	movs	r3, #34	; 0x22
 8018ea4:	f04f 0a00 	mov.w	sl, #0
 8018ea8:	f04f 0b00 	mov.w	fp, #0
 8018eac:	6023      	str	r3, [r4, #0]
 8018eae:	e789      	b.n	8018dc4 <_strtod_l+0x4a4>
 8018eb0:	0801efd5 	.word	0x0801efd5
 8018eb4:	0801f014 	.word	0x0801f014
 8018eb8:	0801efcd 	.word	0x0801efcd
 8018ebc:	0801f12c 	.word	0x0801f12c
 8018ec0:	0801f128 	.word	0x0801f128
 8018ec4:	0801f2b0 	.word	0x0801f2b0
 8018ec8:	0801f288 	.word	0x0801f288
 8018ecc:	7ff00000 	.word	0x7ff00000
 8018ed0:	7ca00000 	.word	0x7ca00000
 8018ed4:	7fefffff 	.word	0x7fefffff
 8018ed8:	f018 0310 	ands.w	r3, r8, #16
 8018edc:	bf18      	it	ne
 8018ede:	236a      	movne	r3, #106	; 0x6a
 8018ee0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8019298 <_strtod_l+0x978>
 8018ee4:	9304      	str	r3, [sp, #16]
 8018ee6:	4650      	mov	r0, sl
 8018ee8:	4659      	mov	r1, fp
 8018eea:	2300      	movs	r3, #0
 8018eec:	f018 0f01 	tst.w	r8, #1
 8018ef0:	d004      	beq.n	8018efc <_strtod_l+0x5dc>
 8018ef2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8018ef6:	f7e7 fb9f 	bl	8000638 <__aeabi_dmul>
 8018efa:	2301      	movs	r3, #1
 8018efc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8018f00:	f109 0908 	add.w	r9, r9, #8
 8018f04:	d1f2      	bne.n	8018eec <_strtod_l+0x5cc>
 8018f06:	b10b      	cbz	r3, 8018f0c <_strtod_l+0x5ec>
 8018f08:	4682      	mov	sl, r0
 8018f0a:	468b      	mov	fp, r1
 8018f0c:	9b04      	ldr	r3, [sp, #16]
 8018f0e:	b1bb      	cbz	r3, 8018f40 <_strtod_l+0x620>
 8018f10:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8018f14:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	4659      	mov	r1, fp
 8018f1c:	dd10      	ble.n	8018f40 <_strtod_l+0x620>
 8018f1e:	2b1f      	cmp	r3, #31
 8018f20:	f340 8128 	ble.w	8019174 <_strtod_l+0x854>
 8018f24:	2b34      	cmp	r3, #52	; 0x34
 8018f26:	bfde      	ittt	le
 8018f28:	3b20      	suble	r3, #32
 8018f2a:	f04f 32ff 	movle.w	r2, #4294967295
 8018f2e:	fa02 f303 	lslle.w	r3, r2, r3
 8018f32:	f04f 0a00 	mov.w	sl, #0
 8018f36:	bfcc      	ite	gt
 8018f38:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8018f3c:	ea03 0b01 	andle.w	fp, r3, r1
 8018f40:	2200      	movs	r2, #0
 8018f42:	2300      	movs	r3, #0
 8018f44:	4650      	mov	r0, sl
 8018f46:	4659      	mov	r1, fp
 8018f48:	f7e7 fdde 	bl	8000b08 <__aeabi_dcmpeq>
 8018f4c:	2800      	cmp	r0, #0
 8018f4e:	d1a4      	bne.n	8018e9a <_strtod_l+0x57a>
 8018f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f52:	9300      	str	r3, [sp, #0]
 8018f54:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018f56:	462b      	mov	r3, r5
 8018f58:	463a      	mov	r2, r7
 8018f5a:	4620      	mov	r0, r4
 8018f5c:	f002 fcde 	bl	801b91c <__s2b>
 8018f60:	9009      	str	r0, [sp, #36]	; 0x24
 8018f62:	2800      	cmp	r0, #0
 8018f64:	f43f af24 	beq.w	8018db0 <_strtod_l+0x490>
 8018f68:	9b07      	ldr	r3, [sp, #28]
 8018f6a:	1b9e      	subs	r6, r3, r6
 8018f6c:	9b08      	ldr	r3, [sp, #32]
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	bfb4      	ite	lt
 8018f72:	4633      	movlt	r3, r6
 8018f74:	2300      	movge	r3, #0
 8018f76:	9310      	str	r3, [sp, #64]	; 0x40
 8018f78:	9b08      	ldr	r3, [sp, #32]
 8018f7a:	2500      	movs	r5, #0
 8018f7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018f80:	9318      	str	r3, [sp, #96]	; 0x60
 8018f82:	462e      	mov	r6, r5
 8018f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f86:	4620      	mov	r0, r4
 8018f88:	6859      	ldr	r1, [r3, #4]
 8018f8a:	f002 fc1b 	bl	801b7c4 <_Balloc>
 8018f8e:	9007      	str	r0, [sp, #28]
 8018f90:	2800      	cmp	r0, #0
 8018f92:	f43f af11 	beq.w	8018db8 <_strtod_l+0x498>
 8018f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f98:	691a      	ldr	r2, [r3, #16]
 8018f9a:	3202      	adds	r2, #2
 8018f9c:	f103 010c 	add.w	r1, r3, #12
 8018fa0:	0092      	lsls	r2, r2, #2
 8018fa2:	300c      	adds	r0, #12
 8018fa4:	f7fe f92e 	bl	8017204 <memcpy>
 8018fa8:	ec4b ab10 	vmov	d0, sl, fp
 8018fac:	aa20      	add	r2, sp, #128	; 0x80
 8018fae:	a91f      	add	r1, sp, #124	; 0x7c
 8018fb0:	4620      	mov	r0, r4
 8018fb2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8018fb6:	f002 ffed 	bl	801bf94 <__d2b>
 8018fba:	901e      	str	r0, [sp, #120]	; 0x78
 8018fbc:	2800      	cmp	r0, #0
 8018fbe:	f43f aefb 	beq.w	8018db8 <_strtod_l+0x498>
 8018fc2:	2101      	movs	r1, #1
 8018fc4:	4620      	mov	r0, r4
 8018fc6:	f002 fd43 	bl	801ba50 <__i2b>
 8018fca:	4606      	mov	r6, r0
 8018fcc:	2800      	cmp	r0, #0
 8018fce:	f43f aef3 	beq.w	8018db8 <_strtod_l+0x498>
 8018fd2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018fd4:	9904      	ldr	r1, [sp, #16]
 8018fd6:	2b00      	cmp	r3, #0
 8018fd8:	bfab      	itete	ge
 8018fda:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8018fdc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8018fde:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8018fe0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8018fe4:	bfac      	ite	ge
 8018fe6:	eb03 0902 	addge.w	r9, r3, r2
 8018fea:	1ad7      	sublt	r7, r2, r3
 8018fec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018fee:	eba3 0801 	sub.w	r8, r3, r1
 8018ff2:	4490      	add	r8, r2
 8018ff4:	4ba3      	ldr	r3, [pc, #652]	; (8019284 <_strtod_l+0x964>)
 8018ff6:	f108 38ff 	add.w	r8, r8, #4294967295
 8018ffa:	4598      	cmp	r8, r3
 8018ffc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8019000:	f280 80cc 	bge.w	801919c <_strtod_l+0x87c>
 8019004:	eba3 0308 	sub.w	r3, r3, r8
 8019008:	2b1f      	cmp	r3, #31
 801900a:	eba2 0203 	sub.w	r2, r2, r3
 801900e:	f04f 0101 	mov.w	r1, #1
 8019012:	f300 80b6 	bgt.w	8019182 <_strtod_l+0x862>
 8019016:	fa01 f303 	lsl.w	r3, r1, r3
 801901a:	9311      	str	r3, [sp, #68]	; 0x44
 801901c:	2300      	movs	r3, #0
 801901e:	930c      	str	r3, [sp, #48]	; 0x30
 8019020:	eb09 0802 	add.w	r8, r9, r2
 8019024:	9b04      	ldr	r3, [sp, #16]
 8019026:	45c1      	cmp	r9, r8
 8019028:	4417      	add	r7, r2
 801902a:	441f      	add	r7, r3
 801902c:	464b      	mov	r3, r9
 801902e:	bfa8      	it	ge
 8019030:	4643      	movge	r3, r8
 8019032:	42bb      	cmp	r3, r7
 8019034:	bfa8      	it	ge
 8019036:	463b      	movge	r3, r7
 8019038:	2b00      	cmp	r3, #0
 801903a:	bfc2      	ittt	gt
 801903c:	eba8 0803 	subgt.w	r8, r8, r3
 8019040:	1aff      	subgt	r7, r7, r3
 8019042:	eba9 0903 	subgt.w	r9, r9, r3
 8019046:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019048:	2b00      	cmp	r3, #0
 801904a:	dd17      	ble.n	801907c <_strtod_l+0x75c>
 801904c:	4631      	mov	r1, r6
 801904e:	461a      	mov	r2, r3
 8019050:	4620      	mov	r0, r4
 8019052:	f002 fdb9 	bl	801bbc8 <__pow5mult>
 8019056:	4606      	mov	r6, r0
 8019058:	2800      	cmp	r0, #0
 801905a:	f43f aead 	beq.w	8018db8 <_strtod_l+0x498>
 801905e:	4601      	mov	r1, r0
 8019060:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8019062:	4620      	mov	r0, r4
 8019064:	f002 fd0a 	bl	801ba7c <__multiply>
 8019068:	900f      	str	r0, [sp, #60]	; 0x3c
 801906a:	2800      	cmp	r0, #0
 801906c:	f43f aea4 	beq.w	8018db8 <_strtod_l+0x498>
 8019070:	991e      	ldr	r1, [sp, #120]	; 0x78
 8019072:	4620      	mov	r0, r4
 8019074:	f002 fbe6 	bl	801b844 <_Bfree>
 8019078:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801907a:	931e      	str	r3, [sp, #120]	; 0x78
 801907c:	f1b8 0f00 	cmp.w	r8, #0
 8019080:	f300 8091 	bgt.w	80191a6 <_strtod_l+0x886>
 8019084:	9b08      	ldr	r3, [sp, #32]
 8019086:	2b00      	cmp	r3, #0
 8019088:	dd08      	ble.n	801909c <_strtod_l+0x77c>
 801908a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801908c:	9907      	ldr	r1, [sp, #28]
 801908e:	4620      	mov	r0, r4
 8019090:	f002 fd9a 	bl	801bbc8 <__pow5mult>
 8019094:	9007      	str	r0, [sp, #28]
 8019096:	2800      	cmp	r0, #0
 8019098:	f43f ae8e 	beq.w	8018db8 <_strtod_l+0x498>
 801909c:	2f00      	cmp	r7, #0
 801909e:	dd08      	ble.n	80190b2 <_strtod_l+0x792>
 80190a0:	9907      	ldr	r1, [sp, #28]
 80190a2:	463a      	mov	r2, r7
 80190a4:	4620      	mov	r0, r4
 80190a6:	f002 fde9 	bl	801bc7c <__lshift>
 80190aa:	9007      	str	r0, [sp, #28]
 80190ac:	2800      	cmp	r0, #0
 80190ae:	f43f ae83 	beq.w	8018db8 <_strtod_l+0x498>
 80190b2:	f1b9 0f00 	cmp.w	r9, #0
 80190b6:	dd08      	ble.n	80190ca <_strtod_l+0x7aa>
 80190b8:	4631      	mov	r1, r6
 80190ba:	464a      	mov	r2, r9
 80190bc:	4620      	mov	r0, r4
 80190be:	f002 fddd 	bl	801bc7c <__lshift>
 80190c2:	4606      	mov	r6, r0
 80190c4:	2800      	cmp	r0, #0
 80190c6:	f43f ae77 	beq.w	8018db8 <_strtod_l+0x498>
 80190ca:	9a07      	ldr	r2, [sp, #28]
 80190cc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80190ce:	4620      	mov	r0, r4
 80190d0:	f002 fe5c 	bl	801bd8c <__mdiff>
 80190d4:	4605      	mov	r5, r0
 80190d6:	2800      	cmp	r0, #0
 80190d8:	f43f ae6e 	beq.w	8018db8 <_strtod_l+0x498>
 80190dc:	68c3      	ldr	r3, [r0, #12]
 80190de:	930f      	str	r3, [sp, #60]	; 0x3c
 80190e0:	2300      	movs	r3, #0
 80190e2:	60c3      	str	r3, [r0, #12]
 80190e4:	4631      	mov	r1, r6
 80190e6:	f002 fe35 	bl	801bd54 <__mcmp>
 80190ea:	2800      	cmp	r0, #0
 80190ec:	da65      	bge.n	80191ba <_strtod_l+0x89a>
 80190ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80190f0:	ea53 030a 	orrs.w	r3, r3, sl
 80190f4:	f040 8087 	bne.w	8019206 <_strtod_l+0x8e6>
 80190f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	f040 8082 	bne.w	8019206 <_strtod_l+0x8e6>
 8019102:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8019106:	0d1b      	lsrs	r3, r3, #20
 8019108:	051b      	lsls	r3, r3, #20
 801910a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801910e:	d97a      	bls.n	8019206 <_strtod_l+0x8e6>
 8019110:	696b      	ldr	r3, [r5, #20]
 8019112:	b913      	cbnz	r3, 801911a <_strtod_l+0x7fa>
 8019114:	692b      	ldr	r3, [r5, #16]
 8019116:	2b01      	cmp	r3, #1
 8019118:	dd75      	ble.n	8019206 <_strtod_l+0x8e6>
 801911a:	4629      	mov	r1, r5
 801911c:	2201      	movs	r2, #1
 801911e:	4620      	mov	r0, r4
 8019120:	f002 fdac 	bl	801bc7c <__lshift>
 8019124:	4631      	mov	r1, r6
 8019126:	4605      	mov	r5, r0
 8019128:	f002 fe14 	bl	801bd54 <__mcmp>
 801912c:	2800      	cmp	r0, #0
 801912e:	dd6a      	ble.n	8019206 <_strtod_l+0x8e6>
 8019130:	9904      	ldr	r1, [sp, #16]
 8019132:	4a55      	ldr	r2, [pc, #340]	; (8019288 <_strtod_l+0x968>)
 8019134:	465b      	mov	r3, fp
 8019136:	2900      	cmp	r1, #0
 8019138:	f000 8085 	beq.w	8019246 <_strtod_l+0x926>
 801913c:	ea02 010b 	and.w	r1, r2, fp
 8019140:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8019144:	dc7f      	bgt.n	8019246 <_strtod_l+0x926>
 8019146:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801914a:	f77f aeaa 	ble.w	8018ea2 <_strtod_l+0x582>
 801914e:	4a4f      	ldr	r2, [pc, #316]	; (801928c <_strtod_l+0x96c>)
 8019150:	2300      	movs	r3, #0
 8019152:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8019156:	4650      	mov	r0, sl
 8019158:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801915c:	4659      	mov	r1, fp
 801915e:	f7e7 fa6b 	bl	8000638 <__aeabi_dmul>
 8019162:	460b      	mov	r3, r1
 8019164:	4303      	orrs	r3, r0
 8019166:	bf08      	it	eq
 8019168:	2322      	moveq	r3, #34	; 0x22
 801916a:	4682      	mov	sl, r0
 801916c:	468b      	mov	fp, r1
 801916e:	bf08      	it	eq
 8019170:	6023      	streq	r3, [r4, #0]
 8019172:	e62b      	b.n	8018dcc <_strtod_l+0x4ac>
 8019174:	f04f 32ff 	mov.w	r2, #4294967295
 8019178:	fa02 f303 	lsl.w	r3, r2, r3
 801917c:	ea03 0a0a 	and.w	sl, r3, sl
 8019180:	e6de      	b.n	8018f40 <_strtod_l+0x620>
 8019182:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8019186:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801918a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801918e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8019192:	fa01 f308 	lsl.w	r3, r1, r8
 8019196:	930c      	str	r3, [sp, #48]	; 0x30
 8019198:	9111      	str	r1, [sp, #68]	; 0x44
 801919a:	e741      	b.n	8019020 <_strtod_l+0x700>
 801919c:	2300      	movs	r3, #0
 801919e:	930c      	str	r3, [sp, #48]	; 0x30
 80191a0:	2301      	movs	r3, #1
 80191a2:	9311      	str	r3, [sp, #68]	; 0x44
 80191a4:	e73c      	b.n	8019020 <_strtod_l+0x700>
 80191a6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80191a8:	4642      	mov	r2, r8
 80191aa:	4620      	mov	r0, r4
 80191ac:	f002 fd66 	bl	801bc7c <__lshift>
 80191b0:	901e      	str	r0, [sp, #120]	; 0x78
 80191b2:	2800      	cmp	r0, #0
 80191b4:	f47f af66 	bne.w	8019084 <_strtod_l+0x764>
 80191b8:	e5fe      	b.n	8018db8 <_strtod_l+0x498>
 80191ba:	465f      	mov	r7, fp
 80191bc:	d16e      	bne.n	801929c <_strtod_l+0x97c>
 80191be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80191c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80191c4:	b342      	cbz	r2, 8019218 <_strtod_l+0x8f8>
 80191c6:	4a32      	ldr	r2, [pc, #200]	; (8019290 <_strtod_l+0x970>)
 80191c8:	4293      	cmp	r3, r2
 80191ca:	d128      	bne.n	801921e <_strtod_l+0x8fe>
 80191cc:	9b04      	ldr	r3, [sp, #16]
 80191ce:	4650      	mov	r0, sl
 80191d0:	b1eb      	cbz	r3, 801920e <_strtod_l+0x8ee>
 80191d2:	4a2d      	ldr	r2, [pc, #180]	; (8019288 <_strtod_l+0x968>)
 80191d4:	403a      	ands	r2, r7
 80191d6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80191da:	f04f 31ff 	mov.w	r1, #4294967295
 80191de:	d819      	bhi.n	8019214 <_strtod_l+0x8f4>
 80191e0:	0d12      	lsrs	r2, r2, #20
 80191e2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80191e6:	fa01 f303 	lsl.w	r3, r1, r3
 80191ea:	4298      	cmp	r0, r3
 80191ec:	d117      	bne.n	801921e <_strtod_l+0x8fe>
 80191ee:	4b29      	ldr	r3, [pc, #164]	; (8019294 <_strtod_l+0x974>)
 80191f0:	429f      	cmp	r7, r3
 80191f2:	d102      	bne.n	80191fa <_strtod_l+0x8da>
 80191f4:	3001      	adds	r0, #1
 80191f6:	f43f addf 	beq.w	8018db8 <_strtod_l+0x498>
 80191fa:	4b23      	ldr	r3, [pc, #140]	; (8019288 <_strtod_l+0x968>)
 80191fc:	403b      	ands	r3, r7
 80191fe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8019202:	f04f 0a00 	mov.w	sl, #0
 8019206:	9b04      	ldr	r3, [sp, #16]
 8019208:	2b00      	cmp	r3, #0
 801920a:	d1a0      	bne.n	801914e <_strtod_l+0x82e>
 801920c:	e5de      	b.n	8018dcc <_strtod_l+0x4ac>
 801920e:	f04f 33ff 	mov.w	r3, #4294967295
 8019212:	e7ea      	b.n	80191ea <_strtod_l+0x8ca>
 8019214:	460b      	mov	r3, r1
 8019216:	e7e8      	b.n	80191ea <_strtod_l+0x8ca>
 8019218:	ea53 030a 	orrs.w	r3, r3, sl
 801921c:	d088      	beq.n	8019130 <_strtod_l+0x810>
 801921e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019220:	b1db      	cbz	r3, 801925a <_strtod_l+0x93a>
 8019222:	423b      	tst	r3, r7
 8019224:	d0ef      	beq.n	8019206 <_strtod_l+0x8e6>
 8019226:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019228:	9a04      	ldr	r2, [sp, #16]
 801922a:	4650      	mov	r0, sl
 801922c:	4659      	mov	r1, fp
 801922e:	b1c3      	cbz	r3, 8019262 <_strtod_l+0x942>
 8019230:	f7ff fb5a 	bl	80188e8 <sulp>
 8019234:	4602      	mov	r2, r0
 8019236:	460b      	mov	r3, r1
 8019238:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801923c:	f7e7 f846 	bl	80002cc <__adddf3>
 8019240:	4682      	mov	sl, r0
 8019242:	468b      	mov	fp, r1
 8019244:	e7df      	b.n	8019206 <_strtod_l+0x8e6>
 8019246:	4013      	ands	r3, r2
 8019248:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801924c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8019250:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8019254:	f04f 3aff 	mov.w	sl, #4294967295
 8019258:	e7d5      	b.n	8019206 <_strtod_l+0x8e6>
 801925a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801925c:	ea13 0f0a 	tst.w	r3, sl
 8019260:	e7e0      	b.n	8019224 <_strtod_l+0x904>
 8019262:	f7ff fb41 	bl	80188e8 <sulp>
 8019266:	4602      	mov	r2, r0
 8019268:	460b      	mov	r3, r1
 801926a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801926e:	f7e7 f82b 	bl	80002c8 <__aeabi_dsub>
 8019272:	2200      	movs	r2, #0
 8019274:	2300      	movs	r3, #0
 8019276:	4682      	mov	sl, r0
 8019278:	468b      	mov	fp, r1
 801927a:	f7e7 fc45 	bl	8000b08 <__aeabi_dcmpeq>
 801927e:	2800      	cmp	r0, #0
 8019280:	d0c1      	beq.n	8019206 <_strtod_l+0x8e6>
 8019282:	e60e      	b.n	8018ea2 <_strtod_l+0x582>
 8019284:	fffffc02 	.word	0xfffffc02
 8019288:	7ff00000 	.word	0x7ff00000
 801928c:	39500000 	.word	0x39500000
 8019290:	000fffff 	.word	0x000fffff
 8019294:	7fefffff 	.word	0x7fefffff
 8019298:	0801f028 	.word	0x0801f028
 801929c:	4631      	mov	r1, r6
 801929e:	4628      	mov	r0, r5
 80192a0:	f002 fed4 	bl	801c04c <__ratio>
 80192a4:	ec59 8b10 	vmov	r8, r9, d0
 80192a8:	ee10 0a10 	vmov	r0, s0
 80192ac:	2200      	movs	r2, #0
 80192ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80192b2:	4649      	mov	r1, r9
 80192b4:	f7e7 fc3c 	bl	8000b30 <__aeabi_dcmple>
 80192b8:	2800      	cmp	r0, #0
 80192ba:	d07c      	beq.n	80193b6 <_strtod_l+0xa96>
 80192bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80192be:	2b00      	cmp	r3, #0
 80192c0:	d04c      	beq.n	801935c <_strtod_l+0xa3c>
 80192c2:	4b95      	ldr	r3, [pc, #596]	; (8019518 <_strtod_l+0xbf8>)
 80192c4:	2200      	movs	r2, #0
 80192c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80192ca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8019518 <_strtod_l+0xbf8>
 80192ce:	f04f 0800 	mov.w	r8, #0
 80192d2:	4b92      	ldr	r3, [pc, #584]	; (801951c <_strtod_l+0xbfc>)
 80192d4:	403b      	ands	r3, r7
 80192d6:	9311      	str	r3, [sp, #68]	; 0x44
 80192d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80192da:	4b91      	ldr	r3, [pc, #580]	; (8019520 <_strtod_l+0xc00>)
 80192dc:	429a      	cmp	r2, r3
 80192de:	f040 80b2 	bne.w	8019446 <_strtod_l+0xb26>
 80192e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80192e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80192ea:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80192ee:	ec4b ab10 	vmov	d0, sl, fp
 80192f2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80192f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80192fa:	f002 fdcf 	bl	801be9c <__ulp>
 80192fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8019302:	ec53 2b10 	vmov	r2, r3, d0
 8019306:	f7e7 f997 	bl	8000638 <__aeabi_dmul>
 801930a:	4652      	mov	r2, sl
 801930c:	465b      	mov	r3, fp
 801930e:	f7e6 ffdd 	bl	80002cc <__adddf3>
 8019312:	460b      	mov	r3, r1
 8019314:	4981      	ldr	r1, [pc, #516]	; (801951c <_strtod_l+0xbfc>)
 8019316:	4a83      	ldr	r2, [pc, #524]	; (8019524 <_strtod_l+0xc04>)
 8019318:	4019      	ands	r1, r3
 801931a:	4291      	cmp	r1, r2
 801931c:	4682      	mov	sl, r0
 801931e:	d95e      	bls.n	80193de <_strtod_l+0xabe>
 8019320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019322:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8019326:	4293      	cmp	r3, r2
 8019328:	d103      	bne.n	8019332 <_strtod_l+0xa12>
 801932a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801932c:	3301      	adds	r3, #1
 801932e:	f43f ad43 	beq.w	8018db8 <_strtod_l+0x498>
 8019332:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8019530 <_strtod_l+0xc10>
 8019336:	f04f 3aff 	mov.w	sl, #4294967295
 801933a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801933c:	4620      	mov	r0, r4
 801933e:	f002 fa81 	bl	801b844 <_Bfree>
 8019342:	9907      	ldr	r1, [sp, #28]
 8019344:	4620      	mov	r0, r4
 8019346:	f002 fa7d 	bl	801b844 <_Bfree>
 801934a:	4631      	mov	r1, r6
 801934c:	4620      	mov	r0, r4
 801934e:	f002 fa79 	bl	801b844 <_Bfree>
 8019352:	4629      	mov	r1, r5
 8019354:	4620      	mov	r0, r4
 8019356:	f002 fa75 	bl	801b844 <_Bfree>
 801935a:	e613      	b.n	8018f84 <_strtod_l+0x664>
 801935c:	f1ba 0f00 	cmp.w	sl, #0
 8019360:	d11b      	bne.n	801939a <_strtod_l+0xa7a>
 8019362:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019366:	b9f3      	cbnz	r3, 80193a6 <_strtod_l+0xa86>
 8019368:	4b6b      	ldr	r3, [pc, #428]	; (8019518 <_strtod_l+0xbf8>)
 801936a:	2200      	movs	r2, #0
 801936c:	4640      	mov	r0, r8
 801936e:	4649      	mov	r1, r9
 8019370:	f7e7 fbd4 	bl	8000b1c <__aeabi_dcmplt>
 8019374:	b9d0      	cbnz	r0, 80193ac <_strtod_l+0xa8c>
 8019376:	4640      	mov	r0, r8
 8019378:	4649      	mov	r1, r9
 801937a:	4b6b      	ldr	r3, [pc, #428]	; (8019528 <_strtod_l+0xc08>)
 801937c:	2200      	movs	r2, #0
 801937e:	f7e7 f95b 	bl	8000638 <__aeabi_dmul>
 8019382:	4680      	mov	r8, r0
 8019384:	4689      	mov	r9, r1
 8019386:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801938a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801938e:	931b      	str	r3, [sp, #108]	; 0x6c
 8019390:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8019394:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8019398:	e79b      	b.n	80192d2 <_strtod_l+0x9b2>
 801939a:	f1ba 0f01 	cmp.w	sl, #1
 801939e:	d102      	bne.n	80193a6 <_strtod_l+0xa86>
 80193a0:	2f00      	cmp	r7, #0
 80193a2:	f43f ad7e 	beq.w	8018ea2 <_strtod_l+0x582>
 80193a6:	4b61      	ldr	r3, [pc, #388]	; (801952c <_strtod_l+0xc0c>)
 80193a8:	2200      	movs	r2, #0
 80193aa:	e78c      	b.n	80192c6 <_strtod_l+0x9a6>
 80193ac:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8019528 <_strtod_l+0xc08>
 80193b0:	f04f 0800 	mov.w	r8, #0
 80193b4:	e7e7      	b.n	8019386 <_strtod_l+0xa66>
 80193b6:	4b5c      	ldr	r3, [pc, #368]	; (8019528 <_strtod_l+0xc08>)
 80193b8:	4640      	mov	r0, r8
 80193ba:	4649      	mov	r1, r9
 80193bc:	2200      	movs	r2, #0
 80193be:	f7e7 f93b 	bl	8000638 <__aeabi_dmul>
 80193c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80193c4:	4680      	mov	r8, r0
 80193c6:	4689      	mov	r9, r1
 80193c8:	b933      	cbnz	r3, 80193d8 <_strtod_l+0xab8>
 80193ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80193ce:	9012      	str	r0, [sp, #72]	; 0x48
 80193d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80193d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80193d6:	e7dd      	b.n	8019394 <_strtod_l+0xa74>
 80193d8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80193dc:	e7f9      	b.n	80193d2 <_strtod_l+0xab2>
 80193de:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80193e2:	9b04      	ldr	r3, [sp, #16]
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d1a8      	bne.n	801933a <_strtod_l+0xa1a>
 80193e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80193ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80193ee:	0d1b      	lsrs	r3, r3, #20
 80193f0:	051b      	lsls	r3, r3, #20
 80193f2:	429a      	cmp	r2, r3
 80193f4:	d1a1      	bne.n	801933a <_strtod_l+0xa1a>
 80193f6:	4640      	mov	r0, r8
 80193f8:	4649      	mov	r1, r9
 80193fa:	f7e7 fccd 	bl	8000d98 <__aeabi_d2lz>
 80193fe:	f7e7 f8ed 	bl	80005dc <__aeabi_l2d>
 8019402:	4602      	mov	r2, r0
 8019404:	460b      	mov	r3, r1
 8019406:	4640      	mov	r0, r8
 8019408:	4649      	mov	r1, r9
 801940a:	f7e6 ff5d 	bl	80002c8 <__aeabi_dsub>
 801940e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019410:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019414:	ea43 030a 	orr.w	r3, r3, sl
 8019418:	4313      	orrs	r3, r2
 801941a:	4680      	mov	r8, r0
 801941c:	4689      	mov	r9, r1
 801941e:	d053      	beq.n	80194c8 <_strtod_l+0xba8>
 8019420:	a335      	add	r3, pc, #212	; (adr r3, 80194f8 <_strtod_l+0xbd8>)
 8019422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019426:	f7e7 fb79 	bl	8000b1c <__aeabi_dcmplt>
 801942a:	2800      	cmp	r0, #0
 801942c:	f47f acce 	bne.w	8018dcc <_strtod_l+0x4ac>
 8019430:	a333      	add	r3, pc, #204	; (adr r3, 8019500 <_strtod_l+0xbe0>)
 8019432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019436:	4640      	mov	r0, r8
 8019438:	4649      	mov	r1, r9
 801943a:	f7e7 fb8d 	bl	8000b58 <__aeabi_dcmpgt>
 801943e:	2800      	cmp	r0, #0
 8019440:	f43f af7b 	beq.w	801933a <_strtod_l+0xa1a>
 8019444:	e4c2      	b.n	8018dcc <_strtod_l+0x4ac>
 8019446:	9b04      	ldr	r3, [sp, #16]
 8019448:	b333      	cbz	r3, 8019498 <_strtod_l+0xb78>
 801944a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801944c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8019450:	d822      	bhi.n	8019498 <_strtod_l+0xb78>
 8019452:	a32d      	add	r3, pc, #180	; (adr r3, 8019508 <_strtod_l+0xbe8>)
 8019454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019458:	4640      	mov	r0, r8
 801945a:	4649      	mov	r1, r9
 801945c:	f7e7 fb68 	bl	8000b30 <__aeabi_dcmple>
 8019460:	b1a0      	cbz	r0, 801948c <_strtod_l+0xb6c>
 8019462:	4649      	mov	r1, r9
 8019464:	4640      	mov	r0, r8
 8019466:	f7e7 fbbf 	bl	8000be8 <__aeabi_d2uiz>
 801946a:	2801      	cmp	r0, #1
 801946c:	bf38      	it	cc
 801946e:	2001      	movcc	r0, #1
 8019470:	f7e7 f868 	bl	8000544 <__aeabi_ui2d>
 8019474:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019476:	4680      	mov	r8, r0
 8019478:	4689      	mov	r9, r1
 801947a:	bb13      	cbnz	r3, 80194c2 <_strtod_l+0xba2>
 801947c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019480:	9014      	str	r0, [sp, #80]	; 0x50
 8019482:	9315      	str	r3, [sp, #84]	; 0x54
 8019484:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8019488:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801948c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801948e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019490:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8019494:	1a9b      	subs	r3, r3, r2
 8019496:	930d      	str	r3, [sp, #52]	; 0x34
 8019498:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801949c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80194a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80194a4:	f002 fcfa 	bl	801be9c <__ulp>
 80194a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80194ac:	ec53 2b10 	vmov	r2, r3, d0
 80194b0:	f7e7 f8c2 	bl	8000638 <__aeabi_dmul>
 80194b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80194b8:	f7e6 ff08 	bl	80002cc <__adddf3>
 80194bc:	4682      	mov	sl, r0
 80194be:	468b      	mov	fp, r1
 80194c0:	e78f      	b.n	80193e2 <_strtod_l+0xac2>
 80194c2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80194c6:	e7dd      	b.n	8019484 <_strtod_l+0xb64>
 80194c8:	a311      	add	r3, pc, #68	; (adr r3, 8019510 <_strtod_l+0xbf0>)
 80194ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194ce:	f7e7 fb25 	bl	8000b1c <__aeabi_dcmplt>
 80194d2:	e7b4      	b.n	801943e <_strtod_l+0xb1e>
 80194d4:	2300      	movs	r3, #0
 80194d6:	930e      	str	r3, [sp, #56]	; 0x38
 80194d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80194da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80194dc:	6013      	str	r3, [r2, #0]
 80194de:	f7ff ba65 	b.w	80189ac <_strtod_l+0x8c>
 80194e2:	2b65      	cmp	r3, #101	; 0x65
 80194e4:	f43f ab5d 	beq.w	8018ba2 <_strtod_l+0x282>
 80194e8:	2b45      	cmp	r3, #69	; 0x45
 80194ea:	f43f ab5a 	beq.w	8018ba2 <_strtod_l+0x282>
 80194ee:	2201      	movs	r2, #1
 80194f0:	f7ff bb92 	b.w	8018c18 <_strtod_l+0x2f8>
 80194f4:	f3af 8000 	nop.w
 80194f8:	94a03595 	.word	0x94a03595
 80194fc:	3fdfffff 	.word	0x3fdfffff
 8019500:	35afe535 	.word	0x35afe535
 8019504:	3fe00000 	.word	0x3fe00000
 8019508:	ffc00000 	.word	0xffc00000
 801950c:	41dfffff 	.word	0x41dfffff
 8019510:	94a03595 	.word	0x94a03595
 8019514:	3fcfffff 	.word	0x3fcfffff
 8019518:	3ff00000 	.word	0x3ff00000
 801951c:	7ff00000 	.word	0x7ff00000
 8019520:	7fe00000 	.word	0x7fe00000
 8019524:	7c9fffff 	.word	0x7c9fffff
 8019528:	3fe00000 	.word	0x3fe00000
 801952c:	bff00000 	.word	0xbff00000
 8019530:	7fefffff 	.word	0x7fefffff

08019534 <_strtod_r>:
 8019534:	4b01      	ldr	r3, [pc, #4]	; (801953c <_strtod_r+0x8>)
 8019536:	f7ff b9f3 	b.w	8018920 <_strtod_l>
 801953a:	bf00      	nop
 801953c:	2000014c 	.word	0x2000014c

08019540 <strtok>:
 8019540:	4b16      	ldr	r3, [pc, #88]	; (801959c <strtok+0x5c>)
 8019542:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019544:	681e      	ldr	r6, [r3, #0]
 8019546:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8019548:	4605      	mov	r5, r0
 801954a:	b9fc      	cbnz	r4, 801958c <strtok+0x4c>
 801954c:	2050      	movs	r0, #80	; 0x50
 801954e:	9101      	str	r1, [sp, #4]
 8019550:	f7fd fe48 	bl	80171e4 <malloc>
 8019554:	9901      	ldr	r1, [sp, #4]
 8019556:	65b0      	str	r0, [r6, #88]	; 0x58
 8019558:	4602      	mov	r2, r0
 801955a:	b920      	cbnz	r0, 8019566 <strtok+0x26>
 801955c:	4b10      	ldr	r3, [pc, #64]	; (80195a0 <strtok+0x60>)
 801955e:	4811      	ldr	r0, [pc, #68]	; (80195a4 <strtok+0x64>)
 8019560:	2157      	movs	r1, #87	; 0x57
 8019562:	f000 fca3 	bl	8019eac <__assert_func>
 8019566:	e9c0 4400 	strd	r4, r4, [r0]
 801956a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801956e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8019572:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8019576:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801957a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801957e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8019582:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8019586:	6184      	str	r4, [r0, #24]
 8019588:	7704      	strb	r4, [r0, #28]
 801958a:	6244      	str	r4, [r0, #36]	; 0x24
 801958c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801958e:	2301      	movs	r3, #1
 8019590:	4628      	mov	r0, r5
 8019592:	b002      	add	sp, #8
 8019594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019598:	f000 b806 	b.w	80195a8 <__strtok_r>
 801959c:	20000084 	.word	0x20000084
 80195a0:	0801ee90 	.word	0x0801ee90
 80195a4:	0801f050 	.word	0x0801f050

080195a8 <__strtok_r>:
 80195a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80195aa:	b908      	cbnz	r0, 80195b0 <__strtok_r+0x8>
 80195ac:	6810      	ldr	r0, [r2, #0]
 80195ae:	b188      	cbz	r0, 80195d4 <__strtok_r+0x2c>
 80195b0:	4604      	mov	r4, r0
 80195b2:	4620      	mov	r0, r4
 80195b4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80195b8:	460f      	mov	r7, r1
 80195ba:	f817 6b01 	ldrb.w	r6, [r7], #1
 80195be:	b91e      	cbnz	r6, 80195c8 <__strtok_r+0x20>
 80195c0:	b965      	cbnz	r5, 80195dc <__strtok_r+0x34>
 80195c2:	6015      	str	r5, [r2, #0]
 80195c4:	4628      	mov	r0, r5
 80195c6:	e005      	b.n	80195d4 <__strtok_r+0x2c>
 80195c8:	42b5      	cmp	r5, r6
 80195ca:	d1f6      	bne.n	80195ba <__strtok_r+0x12>
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d1f0      	bne.n	80195b2 <__strtok_r+0xa>
 80195d0:	6014      	str	r4, [r2, #0]
 80195d2:	7003      	strb	r3, [r0, #0]
 80195d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195d6:	461c      	mov	r4, r3
 80195d8:	e00c      	b.n	80195f4 <__strtok_r+0x4c>
 80195da:	b915      	cbnz	r5, 80195e2 <__strtok_r+0x3a>
 80195dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80195e0:	460e      	mov	r6, r1
 80195e2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80195e6:	42ab      	cmp	r3, r5
 80195e8:	d1f7      	bne.n	80195da <__strtok_r+0x32>
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	d0f3      	beq.n	80195d6 <__strtok_r+0x2e>
 80195ee:	2300      	movs	r3, #0
 80195f0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80195f4:	6014      	str	r4, [r2, #0]
 80195f6:	e7ed      	b.n	80195d4 <__strtok_r+0x2c>

080195f8 <_strtol_l.isra.0>:
 80195f8:	2b01      	cmp	r3, #1
 80195fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80195fe:	d001      	beq.n	8019604 <_strtol_l.isra.0+0xc>
 8019600:	2b24      	cmp	r3, #36	; 0x24
 8019602:	d906      	bls.n	8019612 <_strtol_l.isra.0+0x1a>
 8019604:	f7fd fbac 	bl	8016d60 <__errno>
 8019608:	2316      	movs	r3, #22
 801960a:	6003      	str	r3, [r0, #0]
 801960c:	2000      	movs	r0, #0
 801960e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019612:	4f3a      	ldr	r7, [pc, #232]	; (80196fc <_strtol_l.isra.0+0x104>)
 8019614:	468e      	mov	lr, r1
 8019616:	4676      	mov	r6, lr
 8019618:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801961c:	5de5      	ldrb	r5, [r4, r7]
 801961e:	f015 0508 	ands.w	r5, r5, #8
 8019622:	d1f8      	bne.n	8019616 <_strtol_l.isra.0+0x1e>
 8019624:	2c2d      	cmp	r4, #45	; 0x2d
 8019626:	d134      	bne.n	8019692 <_strtol_l.isra.0+0x9a>
 8019628:	f89e 4000 	ldrb.w	r4, [lr]
 801962c:	f04f 0801 	mov.w	r8, #1
 8019630:	f106 0e02 	add.w	lr, r6, #2
 8019634:	2b00      	cmp	r3, #0
 8019636:	d05c      	beq.n	80196f2 <_strtol_l.isra.0+0xfa>
 8019638:	2b10      	cmp	r3, #16
 801963a:	d10c      	bne.n	8019656 <_strtol_l.isra.0+0x5e>
 801963c:	2c30      	cmp	r4, #48	; 0x30
 801963e:	d10a      	bne.n	8019656 <_strtol_l.isra.0+0x5e>
 8019640:	f89e 4000 	ldrb.w	r4, [lr]
 8019644:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8019648:	2c58      	cmp	r4, #88	; 0x58
 801964a:	d14d      	bne.n	80196e8 <_strtol_l.isra.0+0xf0>
 801964c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8019650:	2310      	movs	r3, #16
 8019652:	f10e 0e02 	add.w	lr, lr, #2
 8019656:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801965a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801965e:	2600      	movs	r6, #0
 8019660:	fbbc f9f3 	udiv	r9, ip, r3
 8019664:	4635      	mov	r5, r6
 8019666:	fb03 ca19 	mls	sl, r3, r9, ip
 801966a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801966e:	2f09      	cmp	r7, #9
 8019670:	d818      	bhi.n	80196a4 <_strtol_l.isra.0+0xac>
 8019672:	463c      	mov	r4, r7
 8019674:	42a3      	cmp	r3, r4
 8019676:	dd24      	ble.n	80196c2 <_strtol_l.isra.0+0xca>
 8019678:	2e00      	cmp	r6, #0
 801967a:	db1f      	blt.n	80196bc <_strtol_l.isra.0+0xc4>
 801967c:	45a9      	cmp	r9, r5
 801967e:	d31d      	bcc.n	80196bc <_strtol_l.isra.0+0xc4>
 8019680:	d101      	bne.n	8019686 <_strtol_l.isra.0+0x8e>
 8019682:	45a2      	cmp	sl, r4
 8019684:	db1a      	blt.n	80196bc <_strtol_l.isra.0+0xc4>
 8019686:	fb05 4503 	mla	r5, r5, r3, r4
 801968a:	2601      	movs	r6, #1
 801968c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8019690:	e7eb      	b.n	801966a <_strtol_l.isra.0+0x72>
 8019692:	2c2b      	cmp	r4, #43	; 0x2b
 8019694:	bf08      	it	eq
 8019696:	f89e 4000 	ldrbeq.w	r4, [lr]
 801969a:	46a8      	mov	r8, r5
 801969c:	bf08      	it	eq
 801969e:	f106 0e02 	addeq.w	lr, r6, #2
 80196a2:	e7c7      	b.n	8019634 <_strtol_l.isra.0+0x3c>
 80196a4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80196a8:	2f19      	cmp	r7, #25
 80196aa:	d801      	bhi.n	80196b0 <_strtol_l.isra.0+0xb8>
 80196ac:	3c37      	subs	r4, #55	; 0x37
 80196ae:	e7e1      	b.n	8019674 <_strtol_l.isra.0+0x7c>
 80196b0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80196b4:	2f19      	cmp	r7, #25
 80196b6:	d804      	bhi.n	80196c2 <_strtol_l.isra.0+0xca>
 80196b8:	3c57      	subs	r4, #87	; 0x57
 80196ba:	e7db      	b.n	8019674 <_strtol_l.isra.0+0x7c>
 80196bc:	f04f 36ff 	mov.w	r6, #4294967295
 80196c0:	e7e4      	b.n	801968c <_strtol_l.isra.0+0x94>
 80196c2:	2e00      	cmp	r6, #0
 80196c4:	da05      	bge.n	80196d2 <_strtol_l.isra.0+0xda>
 80196c6:	2322      	movs	r3, #34	; 0x22
 80196c8:	6003      	str	r3, [r0, #0]
 80196ca:	4665      	mov	r5, ip
 80196cc:	b942      	cbnz	r2, 80196e0 <_strtol_l.isra.0+0xe8>
 80196ce:	4628      	mov	r0, r5
 80196d0:	e79d      	b.n	801960e <_strtol_l.isra.0+0x16>
 80196d2:	f1b8 0f00 	cmp.w	r8, #0
 80196d6:	d000      	beq.n	80196da <_strtol_l.isra.0+0xe2>
 80196d8:	426d      	negs	r5, r5
 80196da:	2a00      	cmp	r2, #0
 80196dc:	d0f7      	beq.n	80196ce <_strtol_l.isra.0+0xd6>
 80196de:	b10e      	cbz	r6, 80196e4 <_strtol_l.isra.0+0xec>
 80196e0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80196e4:	6011      	str	r1, [r2, #0]
 80196e6:	e7f2      	b.n	80196ce <_strtol_l.isra.0+0xd6>
 80196e8:	2430      	movs	r4, #48	; 0x30
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d1b3      	bne.n	8019656 <_strtol_l.isra.0+0x5e>
 80196ee:	2308      	movs	r3, #8
 80196f0:	e7b1      	b.n	8019656 <_strtol_l.isra.0+0x5e>
 80196f2:	2c30      	cmp	r4, #48	; 0x30
 80196f4:	d0a4      	beq.n	8019640 <_strtol_l.isra.0+0x48>
 80196f6:	230a      	movs	r3, #10
 80196f8:	e7ad      	b.n	8019656 <_strtol_l.isra.0+0x5e>
 80196fa:	bf00      	nop
 80196fc:	0801ed29 	.word	0x0801ed29

08019700 <_strtol_r>:
 8019700:	f7ff bf7a 	b.w	80195f8 <_strtol_l.isra.0>

08019704 <strtol>:
 8019704:	4613      	mov	r3, r2
 8019706:	460a      	mov	r2, r1
 8019708:	4601      	mov	r1, r0
 801970a:	4802      	ldr	r0, [pc, #8]	; (8019714 <strtol+0x10>)
 801970c:	6800      	ldr	r0, [r0, #0]
 801970e:	f7ff bf73 	b.w	80195f8 <_strtol_l.isra.0>
 8019712:	bf00      	nop
 8019714:	20000084 	.word	0x20000084

08019718 <_strtoul_l.isra.0>:
 8019718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801971c:	4e3b      	ldr	r6, [pc, #236]	; (801980c <_strtoul_l.isra.0+0xf4>)
 801971e:	4686      	mov	lr, r0
 8019720:	468c      	mov	ip, r1
 8019722:	4660      	mov	r0, ip
 8019724:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8019728:	5da5      	ldrb	r5, [r4, r6]
 801972a:	f015 0508 	ands.w	r5, r5, #8
 801972e:	d1f8      	bne.n	8019722 <_strtoul_l.isra.0+0xa>
 8019730:	2c2d      	cmp	r4, #45	; 0x2d
 8019732:	d134      	bne.n	801979e <_strtoul_l.isra.0+0x86>
 8019734:	f89c 4000 	ldrb.w	r4, [ip]
 8019738:	f04f 0801 	mov.w	r8, #1
 801973c:	f100 0c02 	add.w	ip, r0, #2
 8019740:	2b00      	cmp	r3, #0
 8019742:	d05e      	beq.n	8019802 <_strtoul_l.isra.0+0xea>
 8019744:	2b10      	cmp	r3, #16
 8019746:	d10c      	bne.n	8019762 <_strtoul_l.isra.0+0x4a>
 8019748:	2c30      	cmp	r4, #48	; 0x30
 801974a:	d10a      	bne.n	8019762 <_strtoul_l.isra.0+0x4a>
 801974c:	f89c 0000 	ldrb.w	r0, [ip]
 8019750:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8019754:	2858      	cmp	r0, #88	; 0x58
 8019756:	d14f      	bne.n	80197f8 <_strtoul_l.isra.0+0xe0>
 8019758:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801975c:	2310      	movs	r3, #16
 801975e:	f10c 0c02 	add.w	ip, ip, #2
 8019762:	f04f 37ff 	mov.w	r7, #4294967295
 8019766:	2500      	movs	r5, #0
 8019768:	fbb7 f7f3 	udiv	r7, r7, r3
 801976c:	fb03 f907 	mul.w	r9, r3, r7
 8019770:	ea6f 0909 	mvn.w	r9, r9
 8019774:	4628      	mov	r0, r5
 8019776:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801977a:	2e09      	cmp	r6, #9
 801977c:	d818      	bhi.n	80197b0 <_strtoul_l.isra.0+0x98>
 801977e:	4634      	mov	r4, r6
 8019780:	42a3      	cmp	r3, r4
 8019782:	dd24      	ble.n	80197ce <_strtoul_l.isra.0+0xb6>
 8019784:	2d00      	cmp	r5, #0
 8019786:	db1f      	blt.n	80197c8 <_strtoul_l.isra.0+0xb0>
 8019788:	4287      	cmp	r7, r0
 801978a:	d31d      	bcc.n	80197c8 <_strtoul_l.isra.0+0xb0>
 801978c:	d101      	bne.n	8019792 <_strtoul_l.isra.0+0x7a>
 801978e:	45a1      	cmp	r9, r4
 8019790:	db1a      	blt.n	80197c8 <_strtoul_l.isra.0+0xb0>
 8019792:	fb00 4003 	mla	r0, r0, r3, r4
 8019796:	2501      	movs	r5, #1
 8019798:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801979c:	e7eb      	b.n	8019776 <_strtoul_l.isra.0+0x5e>
 801979e:	2c2b      	cmp	r4, #43	; 0x2b
 80197a0:	bf08      	it	eq
 80197a2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80197a6:	46a8      	mov	r8, r5
 80197a8:	bf08      	it	eq
 80197aa:	f100 0c02 	addeq.w	ip, r0, #2
 80197ae:	e7c7      	b.n	8019740 <_strtoul_l.isra.0+0x28>
 80197b0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80197b4:	2e19      	cmp	r6, #25
 80197b6:	d801      	bhi.n	80197bc <_strtoul_l.isra.0+0xa4>
 80197b8:	3c37      	subs	r4, #55	; 0x37
 80197ba:	e7e1      	b.n	8019780 <_strtoul_l.isra.0+0x68>
 80197bc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80197c0:	2e19      	cmp	r6, #25
 80197c2:	d804      	bhi.n	80197ce <_strtoul_l.isra.0+0xb6>
 80197c4:	3c57      	subs	r4, #87	; 0x57
 80197c6:	e7db      	b.n	8019780 <_strtoul_l.isra.0+0x68>
 80197c8:	f04f 35ff 	mov.w	r5, #4294967295
 80197cc:	e7e4      	b.n	8019798 <_strtoul_l.isra.0+0x80>
 80197ce:	2d00      	cmp	r5, #0
 80197d0:	da07      	bge.n	80197e2 <_strtoul_l.isra.0+0xca>
 80197d2:	2322      	movs	r3, #34	; 0x22
 80197d4:	f8ce 3000 	str.w	r3, [lr]
 80197d8:	f04f 30ff 	mov.w	r0, #4294967295
 80197dc:	b942      	cbnz	r2, 80197f0 <_strtoul_l.isra.0+0xd8>
 80197de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80197e2:	f1b8 0f00 	cmp.w	r8, #0
 80197e6:	d000      	beq.n	80197ea <_strtoul_l.isra.0+0xd2>
 80197e8:	4240      	negs	r0, r0
 80197ea:	2a00      	cmp	r2, #0
 80197ec:	d0f7      	beq.n	80197de <_strtoul_l.isra.0+0xc6>
 80197ee:	b10d      	cbz	r5, 80197f4 <_strtoul_l.isra.0+0xdc>
 80197f0:	f10c 31ff 	add.w	r1, ip, #4294967295
 80197f4:	6011      	str	r1, [r2, #0]
 80197f6:	e7f2      	b.n	80197de <_strtoul_l.isra.0+0xc6>
 80197f8:	2430      	movs	r4, #48	; 0x30
 80197fa:	2b00      	cmp	r3, #0
 80197fc:	d1b1      	bne.n	8019762 <_strtoul_l.isra.0+0x4a>
 80197fe:	2308      	movs	r3, #8
 8019800:	e7af      	b.n	8019762 <_strtoul_l.isra.0+0x4a>
 8019802:	2c30      	cmp	r4, #48	; 0x30
 8019804:	d0a2      	beq.n	801974c <_strtoul_l.isra.0+0x34>
 8019806:	230a      	movs	r3, #10
 8019808:	e7ab      	b.n	8019762 <_strtoul_l.isra.0+0x4a>
 801980a:	bf00      	nop
 801980c:	0801ed29 	.word	0x0801ed29

08019810 <_strtoul_r>:
 8019810:	f7ff bf82 	b.w	8019718 <_strtoul_l.isra.0>

08019814 <strtoul>:
 8019814:	4613      	mov	r3, r2
 8019816:	460a      	mov	r2, r1
 8019818:	4601      	mov	r1, r0
 801981a:	4802      	ldr	r0, [pc, #8]	; (8019824 <strtoul+0x10>)
 801981c:	6800      	ldr	r0, [r0, #0]
 801981e:	f7ff bf7b 	b.w	8019718 <_strtoul_l.isra.0>
 8019822:	bf00      	nop
 8019824:	20000084 	.word	0x20000084

08019828 <__tzcalc_limits>:
 8019828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801982c:	4680      	mov	r8, r0
 801982e:	f001 fe7d 	bl	801b52c <__gettzinfo>
 8019832:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8019836:	4598      	cmp	r8, r3
 8019838:	f340 8098 	ble.w	801996c <__tzcalc_limits+0x144>
 801983c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8019840:	4443      	add	r3, r8
 8019842:	109b      	asrs	r3, r3, #2
 8019844:	f240 126d 	movw	r2, #365	; 0x16d
 8019848:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801984c:	fb02 3505 	mla	r5, r2, r5, r3
 8019850:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8019854:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8019858:	fb93 f3f2 	sdiv	r3, r3, r2
 801985c:	441d      	add	r5, r3
 801985e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8019862:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8019866:	fb98 f7f3 	sdiv	r7, r8, r3
 801986a:	fb03 8717 	mls	r7, r3, r7, r8
 801986e:	4442      	add	r2, r8
 8019870:	fab7 fc87 	clz	ip, r7
 8019874:	fbb2 f2f3 	udiv	r2, r2, r3
 8019878:	f008 0303 	and.w	r3, r8, #3
 801987c:	4415      	add	r5, r2
 801987e:	2264      	movs	r2, #100	; 0x64
 8019880:	f8c0 8004 	str.w	r8, [r0, #4]
 8019884:	fb98 f6f2 	sdiv	r6, r8, r2
 8019888:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801988c:	fb02 8616 	mls	r6, r2, r6, r8
 8019890:	4604      	mov	r4, r0
 8019892:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8019896:	9300      	str	r3, [sp, #0]
 8019898:	f04f 0e07 	mov.w	lr, #7
 801989c:	7a22      	ldrb	r2, [r4, #8]
 801989e:	6963      	ldr	r3, [r4, #20]
 80198a0:	2a4a      	cmp	r2, #74	; 0x4a
 80198a2:	d128      	bne.n	80198f6 <__tzcalc_limits+0xce>
 80198a4:	9900      	ldr	r1, [sp, #0]
 80198a6:	18ea      	adds	r2, r5, r3
 80198a8:	b901      	cbnz	r1, 80198ac <__tzcalc_limits+0x84>
 80198aa:	b906      	cbnz	r6, 80198ae <__tzcalc_limits+0x86>
 80198ac:	bb0f      	cbnz	r7, 80198f2 <__tzcalc_limits+0xca>
 80198ae:	2b3b      	cmp	r3, #59	; 0x3b
 80198b0:	bfd4      	ite	le
 80198b2:	2300      	movle	r3, #0
 80198b4:	2301      	movgt	r3, #1
 80198b6:	4413      	add	r3, r2
 80198b8:	1e5a      	subs	r2, r3, #1
 80198ba:	69a3      	ldr	r3, [r4, #24]
 80198bc:	492c      	ldr	r1, [pc, #176]	; (8019970 <__tzcalc_limits+0x148>)
 80198be:	fb01 3202 	mla	r2, r1, r2, r3
 80198c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80198c4:	4413      	add	r3, r2
 80198c6:	461a      	mov	r2, r3
 80198c8:	17db      	asrs	r3, r3, #31
 80198ca:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80198ce:	3428      	adds	r4, #40	; 0x28
 80198d0:	45a3      	cmp	fp, r4
 80198d2:	d1e3      	bne.n	801989c <__tzcalc_limits+0x74>
 80198d4:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80198d8:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80198dc:	4294      	cmp	r4, r2
 80198de:	eb75 0303 	sbcs.w	r3, r5, r3
 80198e2:	bfb4      	ite	lt
 80198e4:	2301      	movlt	r3, #1
 80198e6:	2300      	movge	r3, #0
 80198e8:	6003      	str	r3, [r0, #0]
 80198ea:	2001      	movs	r0, #1
 80198ec:	b003      	add	sp, #12
 80198ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198f2:	2300      	movs	r3, #0
 80198f4:	e7df      	b.n	80198b6 <__tzcalc_limits+0x8e>
 80198f6:	2a44      	cmp	r2, #68	; 0x44
 80198f8:	d101      	bne.n	80198fe <__tzcalc_limits+0xd6>
 80198fa:	18ea      	adds	r2, r5, r3
 80198fc:	e7dd      	b.n	80198ba <__tzcalc_limits+0x92>
 80198fe:	9a00      	ldr	r2, [sp, #0]
 8019900:	bb72      	cbnz	r2, 8019960 <__tzcalc_limits+0x138>
 8019902:	2e00      	cmp	r6, #0
 8019904:	bf0c      	ite	eq
 8019906:	46e0      	moveq	r8, ip
 8019908:	f04f 0801 	movne.w	r8, #1
 801990c:	4919      	ldr	r1, [pc, #100]	; (8019974 <__tzcalc_limits+0x14c>)
 801990e:	68e2      	ldr	r2, [r4, #12]
 8019910:	9201      	str	r2, [sp, #4]
 8019912:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8019916:	fb0a 1808 	mla	r8, sl, r8, r1
 801991a:	462a      	mov	r2, r5
 801991c:	f04f 0900 	mov.w	r9, #0
 8019920:	f1a8 0804 	sub.w	r8, r8, #4
 8019924:	9901      	ldr	r1, [sp, #4]
 8019926:	f109 0901 	add.w	r9, r9, #1
 801992a:	4549      	cmp	r1, r9
 801992c:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8019930:	dc18      	bgt.n	8019964 <__tzcalc_limits+0x13c>
 8019932:	f102 0804 	add.w	r8, r2, #4
 8019936:	fb98 f9fe 	sdiv	r9, r8, lr
 801993a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801993e:	eba8 0909 	sub.w	r9, r8, r9
 8019942:	ebb3 0909 	subs.w	r9, r3, r9
 8019946:	6923      	ldr	r3, [r4, #16]
 8019948:	f103 33ff 	add.w	r3, r3, #4294967295
 801994c:	bf48      	it	mi
 801994e:	f109 0907 	addmi.w	r9, r9, #7
 8019952:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8019956:	444b      	add	r3, r9
 8019958:	4553      	cmp	r3, sl
 801995a:	da05      	bge.n	8019968 <__tzcalc_limits+0x140>
 801995c:	441a      	add	r2, r3
 801995e:	e7ac      	b.n	80198ba <__tzcalc_limits+0x92>
 8019960:	46e0      	mov	r8, ip
 8019962:	e7d3      	b.n	801990c <__tzcalc_limits+0xe4>
 8019964:	4452      	add	r2, sl
 8019966:	e7dd      	b.n	8019924 <__tzcalc_limits+0xfc>
 8019968:	3b07      	subs	r3, #7
 801996a:	e7f5      	b.n	8019958 <__tzcalc_limits+0x130>
 801996c:	2000      	movs	r0, #0
 801996e:	e7bd      	b.n	80198ec <__tzcalc_limits+0xc4>
 8019970:	00015180 	.word	0x00015180
 8019974:	0801ef68 	.word	0x0801ef68

08019978 <__tz_lock>:
 8019978:	4801      	ldr	r0, [pc, #4]	; (8019980 <__tz_lock+0x8>)
 801997a:	f7fd bc2e 	b.w	80171da <__retarget_lock_acquire>
 801997e:	bf00      	nop
 8019980:	20006be3 	.word	0x20006be3

08019984 <__tz_unlock>:
 8019984:	4801      	ldr	r0, [pc, #4]	; (801998c <__tz_unlock+0x8>)
 8019986:	f7fd bc2a 	b.w	80171de <__retarget_lock_release>
 801998a:	bf00      	nop
 801998c:	20006be3 	.word	0x20006be3

08019990 <_tzset_unlocked>:
 8019990:	4b01      	ldr	r3, [pc, #4]	; (8019998 <_tzset_unlocked+0x8>)
 8019992:	6818      	ldr	r0, [r3, #0]
 8019994:	f000 b802 	b.w	801999c <_tzset_unlocked_r>
 8019998:	20000084 	.word	0x20000084

0801999c <_tzset_unlocked_r>:
 801999c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199a0:	b08d      	sub	sp, #52	; 0x34
 80199a2:	4607      	mov	r7, r0
 80199a4:	f001 fdc2 	bl	801b52c <__gettzinfo>
 80199a8:	49ae      	ldr	r1, [pc, #696]	; (8019c64 <_tzset_unlocked_r+0x2c8>)
 80199aa:	4eaf      	ldr	r6, [pc, #700]	; (8019c68 <_tzset_unlocked_r+0x2cc>)
 80199ac:	4605      	mov	r5, r0
 80199ae:	4638      	mov	r0, r7
 80199b0:	f001 fdb4 	bl	801b51c <_getenv_r>
 80199b4:	4604      	mov	r4, r0
 80199b6:	b970      	cbnz	r0, 80199d6 <_tzset_unlocked_r+0x3a>
 80199b8:	4bac      	ldr	r3, [pc, #688]	; (8019c6c <_tzset_unlocked_r+0x2d0>)
 80199ba:	4aad      	ldr	r2, [pc, #692]	; (8019c70 <_tzset_unlocked_r+0x2d4>)
 80199bc:	6018      	str	r0, [r3, #0]
 80199be:	4bad      	ldr	r3, [pc, #692]	; (8019c74 <_tzset_unlocked_r+0x2d8>)
 80199c0:	6018      	str	r0, [r3, #0]
 80199c2:	4bad      	ldr	r3, [pc, #692]	; (8019c78 <_tzset_unlocked_r+0x2dc>)
 80199c4:	6830      	ldr	r0, [r6, #0]
 80199c6:	e9c3 2200 	strd	r2, r2, [r3]
 80199ca:	f7fd fc13 	bl	80171f4 <free>
 80199ce:	6034      	str	r4, [r6, #0]
 80199d0:	b00d      	add	sp, #52	; 0x34
 80199d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199d6:	6831      	ldr	r1, [r6, #0]
 80199d8:	2900      	cmp	r1, #0
 80199da:	d15f      	bne.n	8019a9c <_tzset_unlocked_r+0x100>
 80199dc:	6830      	ldr	r0, [r6, #0]
 80199de:	f7fd fc09 	bl	80171f4 <free>
 80199e2:	4620      	mov	r0, r4
 80199e4:	f7e6 fc0e 	bl	8000204 <strlen>
 80199e8:	1c41      	adds	r1, r0, #1
 80199ea:	4638      	mov	r0, r7
 80199ec:	f7fd ff08 	bl	8017800 <_malloc_r>
 80199f0:	6030      	str	r0, [r6, #0]
 80199f2:	2800      	cmp	r0, #0
 80199f4:	d157      	bne.n	8019aa6 <_tzset_unlocked_r+0x10a>
 80199f6:	7823      	ldrb	r3, [r4, #0]
 80199f8:	4aa0      	ldr	r2, [pc, #640]	; (8019c7c <_tzset_unlocked_r+0x2e0>)
 80199fa:	49a1      	ldr	r1, [pc, #644]	; (8019c80 <_tzset_unlocked_r+0x2e4>)
 80199fc:	2b3a      	cmp	r3, #58	; 0x3a
 80199fe:	bf08      	it	eq
 8019a00:	3401      	addeq	r4, #1
 8019a02:	ae0a      	add	r6, sp, #40	; 0x28
 8019a04:	4633      	mov	r3, r6
 8019a06:	4620      	mov	r0, r4
 8019a08:	f7fe fed6 	bl	80187b8 <siscanf>
 8019a0c:	2800      	cmp	r0, #0
 8019a0e:	dddf      	ble.n	80199d0 <_tzset_unlocked_r+0x34>
 8019a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019a12:	18e7      	adds	r7, r4, r3
 8019a14:	5ce3      	ldrb	r3, [r4, r3]
 8019a16:	2b2d      	cmp	r3, #45	; 0x2d
 8019a18:	d149      	bne.n	8019aae <_tzset_unlocked_r+0x112>
 8019a1a:	3701      	adds	r7, #1
 8019a1c:	f04f 34ff 	mov.w	r4, #4294967295
 8019a20:	f10d 0a20 	add.w	sl, sp, #32
 8019a24:	f10d 0b1e 	add.w	fp, sp, #30
 8019a28:	f04f 0800 	mov.w	r8, #0
 8019a2c:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8019a30:	4994      	ldr	r1, [pc, #592]	; (8019c84 <_tzset_unlocked_r+0x2e8>)
 8019a32:	9603      	str	r6, [sp, #12]
 8019a34:	f8cd b000 	str.w	fp, [sp]
 8019a38:	4633      	mov	r3, r6
 8019a3a:	aa07      	add	r2, sp, #28
 8019a3c:	4638      	mov	r0, r7
 8019a3e:	f8ad 801e 	strh.w	r8, [sp, #30]
 8019a42:	f8ad 8020 	strh.w	r8, [sp, #32]
 8019a46:	f7fe feb7 	bl	80187b8 <siscanf>
 8019a4a:	4540      	cmp	r0, r8
 8019a4c:	ddc0      	ble.n	80199d0 <_tzset_unlocked_r+0x34>
 8019a4e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8019a52:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8019a56:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8019c90 <_tzset_unlocked_r+0x2f4>
 8019a5a:	213c      	movs	r1, #60	; 0x3c
 8019a5c:	fb01 2203 	mla	r2, r1, r3, r2
 8019a60:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8019a64:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8019a68:	fb01 2303 	mla	r3, r1, r3, r2
 8019a6c:	435c      	muls	r4, r3
 8019a6e:	62ac      	str	r4, [r5, #40]	; 0x28
 8019a70:	4c81      	ldr	r4, [pc, #516]	; (8019c78 <_tzset_unlocked_r+0x2dc>)
 8019a72:	4b82      	ldr	r3, [pc, #520]	; (8019c7c <_tzset_unlocked_r+0x2e0>)
 8019a74:	6023      	str	r3, [r4, #0]
 8019a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019a78:	4981      	ldr	r1, [pc, #516]	; (8019c80 <_tzset_unlocked_r+0x2e4>)
 8019a7a:	441f      	add	r7, r3
 8019a7c:	464a      	mov	r2, r9
 8019a7e:	4633      	mov	r3, r6
 8019a80:	4638      	mov	r0, r7
 8019a82:	f7fe fe99 	bl	80187b8 <siscanf>
 8019a86:	4540      	cmp	r0, r8
 8019a88:	dc16      	bgt.n	8019ab8 <_tzset_unlocked_r+0x11c>
 8019a8a:	6823      	ldr	r3, [r4, #0]
 8019a8c:	6063      	str	r3, [r4, #4]
 8019a8e:	4b77      	ldr	r3, [pc, #476]	; (8019c6c <_tzset_unlocked_r+0x2d0>)
 8019a90:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8019a92:	601a      	str	r2, [r3, #0]
 8019a94:	4b77      	ldr	r3, [pc, #476]	; (8019c74 <_tzset_unlocked_r+0x2d8>)
 8019a96:	f8c3 8000 	str.w	r8, [r3]
 8019a9a:	e799      	b.n	80199d0 <_tzset_unlocked_r+0x34>
 8019a9c:	f7e6 fba8 	bl	80001f0 <strcmp>
 8019aa0:	2800      	cmp	r0, #0
 8019aa2:	d19b      	bne.n	80199dc <_tzset_unlocked_r+0x40>
 8019aa4:	e794      	b.n	80199d0 <_tzset_unlocked_r+0x34>
 8019aa6:	4621      	mov	r1, r4
 8019aa8:	f7fe ff04 	bl	80188b4 <strcpy>
 8019aac:	e7a3      	b.n	80199f6 <_tzset_unlocked_r+0x5a>
 8019aae:	2b2b      	cmp	r3, #43	; 0x2b
 8019ab0:	bf08      	it	eq
 8019ab2:	3701      	addeq	r7, #1
 8019ab4:	2401      	movs	r4, #1
 8019ab6:	e7b3      	b.n	8019a20 <_tzset_unlocked_r+0x84>
 8019ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019aba:	f8c4 9004 	str.w	r9, [r4, #4]
 8019abe:	18fc      	adds	r4, r7, r3
 8019ac0:	5cfb      	ldrb	r3, [r7, r3]
 8019ac2:	2b2d      	cmp	r3, #45	; 0x2d
 8019ac4:	f040 808b 	bne.w	8019bde <_tzset_unlocked_r+0x242>
 8019ac8:	3401      	adds	r4, #1
 8019aca:	f04f 37ff 	mov.w	r7, #4294967295
 8019ace:	2300      	movs	r3, #0
 8019ad0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019ad4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019ad8:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019adc:	930a      	str	r3, [sp, #40]	; 0x28
 8019ade:	e9cd a602 	strd	sl, r6, [sp, #8]
 8019ae2:	e9cd b600 	strd	fp, r6, [sp]
 8019ae6:	4967      	ldr	r1, [pc, #412]	; (8019c84 <_tzset_unlocked_r+0x2e8>)
 8019ae8:	4633      	mov	r3, r6
 8019aea:	aa07      	add	r2, sp, #28
 8019aec:	4620      	mov	r0, r4
 8019aee:	f7fe fe63 	bl	80187b8 <siscanf>
 8019af2:	2800      	cmp	r0, #0
 8019af4:	dc78      	bgt.n	8019be8 <_tzset_unlocked_r+0x24c>
 8019af6:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8019af8:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8019afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019afe:	652f      	str	r7, [r5, #80]	; 0x50
 8019b00:	441c      	add	r4, r3
 8019b02:	462f      	mov	r7, r5
 8019b04:	f04f 0900 	mov.w	r9, #0
 8019b08:	7823      	ldrb	r3, [r4, #0]
 8019b0a:	2b2c      	cmp	r3, #44	; 0x2c
 8019b0c:	bf08      	it	eq
 8019b0e:	3401      	addeq	r4, #1
 8019b10:	f894 8000 	ldrb.w	r8, [r4]
 8019b14:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8019b18:	d178      	bne.n	8019c0c <_tzset_unlocked_r+0x270>
 8019b1a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8019b1e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8019b22:	ab09      	add	r3, sp, #36	; 0x24
 8019b24:	9300      	str	r3, [sp, #0]
 8019b26:	4958      	ldr	r1, [pc, #352]	; (8019c88 <_tzset_unlocked_r+0x2ec>)
 8019b28:	9603      	str	r6, [sp, #12]
 8019b2a:	4633      	mov	r3, r6
 8019b2c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8019b30:	4620      	mov	r0, r4
 8019b32:	f7fe fe41 	bl	80187b8 <siscanf>
 8019b36:	2803      	cmp	r0, #3
 8019b38:	f47f af4a 	bne.w	80199d0 <_tzset_unlocked_r+0x34>
 8019b3c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8019b40:	1e4b      	subs	r3, r1, #1
 8019b42:	2b0b      	cmp	r3, #11
 8019b44:	f63f af44 	bhi.w	80199d0 <_tzset_unlocked_r+0x34>
 8019b48:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8019b4c:	1e53      	subs	r3, r2, #1
 8019b4e:	2b04      	cmp	r3, #4
 8019b50:	f63f af3e 	bhi.w	80199d0 <_tzset_unlocked_r+0x34>
 8019b54:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8019b58:	2b06      	cmp	r3, #6
 8019b5a:	f63f af39 	bhi.w	80199d0 <_tzset_unlocked_r+0x34>
 8019b5e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8019b62:	f887 8008 	strb.w	r8, [r7, #8]
 8019b66:	617b      	str	r3, [r7, #20]
 8019b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019b6a:	eb04 0803 	add.w	r8, r4, r3
 8019b6e:	2302      	movs	r3, #2
 8019b70:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019b74:	2300      	movs	r3, #0
 8019b76:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019b7a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019b7e:	930a      	str	r3, [sp, #40]	; 0x28
 8019b80:	f898 3000 	ldrb.w	r3, [r8]
 8019b84:	2b2f      	cmp	r3, #47	; 0x2f
 8019b86:	d109      	bne.n	8019b9c <_tzset_unlocked_r+0x200>
 8019b88:	e9cd a602 	strd	sl, r6, [sp, #8]
 8019b8c:	e9cd b600 	strd	fp, r6, [sp]
 8019b90:	493e      	ldr	r1, [pc, #248]	; (8019c8c <_tzset_unlocked_r+0x2f0>)
 8019b92:	4633      	mov	r3, r6
 8019b94:	aa07      	add	r2, sp, #28
 8019b96:	4640      	mov	r0, r8
 8019b98:	f7fe fe0e 	bl	80187b8 <siscanf>
 8019b9c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8019ba0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8019ba4:	213c      	movs	r1, #60	; 0x3c
 8019ba6:	fb01 2203 	mla	r2, r1, r3, r2
 8019baa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8019bae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8019bb2:	fb01 2303 	mla	r3, r1, r3, r2
 8019bb6:	61bb      	str	r3, [r7, #24]
 8019bb8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019bba:	3728      	adds	r7, #40	; 0x28
 8019bbc:	4444      	add	r4, r8
 8019bbe:	f1b9 0f00 	cmp.w	r9, #0
 8019bc2:	d020      	beq.n	8019c06 <_tzset_unlocked_r+0x26a>
 8019bc4:	6868      	ldr	r0, [r5, #4]
 8019bc6:	f7ff fe2f 	bl	8019828 <__tzcalc_limits>
 8019bca:	4b28      	ldr	r3, [pc, #160]	; (8019c6c <_tzset_unlocked_r+0x2d0>)
 8019bcc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8019bce:	601a      	str	r2, [r3, #0]
 8019bd0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8019bd2:	1a9b      	subs	r3, r3, r2
 8019bd4:	4a27      	ldr	r2, [pc, #156]	; (8019c74 <_tzset_unlocked_r+0x2d8>)
 8019bd6:	bf18      	it	ne
 8019bd8:	2301      	movne	r3, #1
 8019bda:	6013      	str	r3, [r2, #0]
 8019bdc:	e6f8      	b.n	80199d0 <_tzset_unlocked_r+0x34>
 8019bde:	2b2b      	cmp	r3, #43	; 0x2b
 8019be0:	bf08      	it	eq
 8019be2:	3401      	addeq	r4, #1
 8019be4:	2701      	movs	r7, #1
 8019be6:	e772      	b.n	8019ace <_tzset_unlocked_r+0x132>
 8019be8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8019bec:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8019bf0:	213c      	movs	r1, #60	; 0x3c
 8019bf2:	fb01 2203 	mla	r2, r1, r3, r2
 8019bf6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8019bfa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8019bfe:	fb01 2303 	mla	r3, r1, r3, r2
 8019c02:	435f      	muls	r7, r3
 8019c04:	e77a      	b.n	8019afc <_tzset_unlocked_r+0x160>
 8019c06:	f04f 0901 	mov.w	r9, #1
 8019c0a:	e77d      	b.n	8019b08 <_tzset_unlocked_r+0x16c>
 8019c0c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8019c10:	bf06      	itte	eq
 8019c12:	3401      	addeq	r4, #1
 8019c14:	4643      	moveq	r3, r8
 8019c16:	2344      	movne	r3, #68	; 0x44
 8019c18:	220a      	movs	r2, #10
 8019c1a:	a90b      	add	r1, sp, #44	; 0x2c
 8019c1c:	4620      	mov	r0, r4
 8019c1e:	9305      	str	r3, [sp, #20]
 8019c20:	f7ff fdf8 	bl	8019814 <strtoul>
 8019c24:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8019c28:	9b05      	ldr	r3, [sp, #20]
 8019c2a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8019c2e:	45a0      	cmp	r8, r4
 8019c30:	d114      	bne.n	8019c5c <_tzset_unlocked_r+0x2c0>
 8019c32:	234d      	movs	r3, #77	; 0x4d
 8019c34:	f1b9 0f00 	cmp.w	r9, #0
 8019c38:	d107      	bne.n	8019c4a <_tzset_unlocked_r+0x2ae>
 8019c3a:	722b      	strb	r3, [r5, #8]
 8019c3c:	2103      	movs	r1, #3
 8019c3e:	2302      	movs	r3, #2
 8019c40:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8019c44:	f8c5 9014 	str.w	r9, [r5, #20]
 8019c48:	e791      	b.n	8019b6e <_tzset_unlocked_r+0x1d2>
 8019c4a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8019c4e:	220b      	movs	r2, #11
 8019c50:	2301      	movs	r3, #1
 8019c52:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8019c56:	2300      	movs	r3, #0
 8019c58:	63eb      	str	r3, [r5, #60]	; 0x3c
 8019c5a:	e788      	b.n	8019b6e <_tzset_unlocked_r+0x1d2>
 8019c5c:	b280      	uxth	r0, r0
 8019c5e:	723b      	strb	r3, [r7, #8]
 8019c60:	6178      	str	r0, [r7, #20]
 8019c62:	e784      	b.n	8019b6e <_tzset_unlocked_r+0x1d2>
 8019c64:	0801f0b1 	.word	0x0801f0b1
 8019c68:	20005250 	.word	0x20005250
 8019c6c:	20005258 	.word	0x20005258
 8019c70:	0801f0b4 	.word	0x0801f0b4
 8019c74:	20005254 	.word	0x20005254
 8019c78:	200000e8 	.word	0x200000e8
 8019c7c:	20005243 	.word	0x20005243
 8019c80:	0801f0b8 	.word	0x0801f0b8
 8019c84:	0801f0db 	.word	0x0801f0db
 8019c88:	0801f0c7 	.word	0x0801f0c7
 8019c8c:	0801f0da 	.word	0x0801f0da
 8019c90:	20005238 	.word	0x20005238

08019c94 <_vsniprintf_r>:
 8019c94:	b530      	push	{r4, r5, lr}
 8019c96:	1e14      	subs	r4, r2, #0
 8019c98:	4605      	mov	r5, r0
 8019c9a:	b09b      	sub	sp, #108	; 0x6c
 8019c9c:	4618      	mov	r0, r3
 8019c9e:	da05      	bge.n	8019cac <_vsniprintf_r+0x18>
 8019ca0:	238b      	movs	r3, #139	; 0x8b
 8019ca2:	602b      	str	r3, [r5, #0]
 8019ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8019ca8:	b01b      	add	sp, #108	; 0x6c
 8019caa:	bd30      	pop	{r4, r5, pc}
 8019cac:	f44f 7302 	mov.w	r3, #520	; 0x208
 8019cb0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019cb4:	bf14      	ite	ne
 8019cb6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019cba:	4623      	moveq	r3, r4
 8019cbc:	9302      	str	r3, [sp, #8]
 8019cbe:	9305      	str	r3, [sp, #20]
 8019cc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019cc4:	9100      	str	r1, [sp, #0]
 8019cc6:	9104      	str	r1, [sp, #16]
 8019cc8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019ccc:	4602      	mov	r2, r0
 8019cce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019cd0:	4669      	mov	r1, sp
 8019cd2:	4628      	mov	r0, r5
 8019cd4:	f002 fac2 	bl	801c25c <_svfiprintf_r>
 8019cd8:	1c43      	adds	r3, r0, #1
 8019cda:	bfbc      	itt	lt
 8019cdc:	238b      	movlt	r3, #139	; 0x8b
 8019cde:	602b      	strlt	r3, [r5, #0]
 8019ce0:	2c00      	cmp	r4, #0
 8019ce2:	d0e1      	beq.n	8019ca8 <_vsniprintf_r+0x14>
 8019ce4:	9b00      	ldr	r3, [sp, #0]
 8019ce6:	2200      	movs	r2, #0
 8019ce8:	701a      	strb	r2, [r3, #0]
 8019cea:	e7dd      	b.n	8019ca8 <_vsniprintf_r+0x14>

08019cec <vsniprintf>:
 8019cec:	b507      	push	{r0, r1, r2, lr}
 8019cee:	9300      	str	r3, [sp, #0]
 8019cf0:	4613      	mov	r3, r2
 8019cf2:	460a      	mov	r2, r1
 8019cf4:	4601      	mov	r1, r0
 8019cf6:	4803      	ldr	r0, [pc, #12]	; (8019d04 <vsniprintf+0x18>)
 8019cf8:	6800      	ldr	r0, [r0, #0]
 8019cfa:	f7ff ffcb 	bl	8019c94 <_vsniprintf_r>
 8019cfe:	b003      	add	sp, #12
 8019d00:	f85d fb04 	ldr.w	pc, [sp], #4
 8019d04:	20000084 	.word	0x20000084

08019d08 <__swbuf_r>:
 8019d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d0a:	460e      	mov	r6, r1
 8019d0c:	4614      	mov	r4, r2
 8019d0e:	4605      	mov	r5, r0
 8019d10:	b118      	cbz	r0, 8019d1a <__swbuf_r+0x12>
 8019d12:	6983      	ldr	r3, [r0, #24]
 8019d14:	b90b      	cbnz	r3, 8019d1a <__swbuf_r+0x12>
 8019d16:	f7fd f881 	bl	8016e1c <__sinit>
 8019d1a:	4b21      	ldr	r3, [pc, #132]	; (8019da0 <__swbuf_r+0x98>)
 8019d1c:	429c      	cmp	r4, r3
 8019d1e:	d12b      	bne.n	8019d78 <__swbuf_r+0x70>
 8019d20:	686c      	ldr	r4, [r5, #4]
 8019d22:	69a3      	ldr	r3, [r4, #24]
 8019d24:	60a3      	str	r3, [r4, #8]
 8019d26:	89a3      	ldrh	r3, [r4, #12]
 8019d28:	071a      	lsls	r2, r3, #28
 8019d2a:	d52f      	bpl.n	8019d8c <__swbuf_r+0x84>
 8019d2c:	6923      	ldr	r3, [r4, #16]
 8019d2e:	b36b      	cbz	r3, 8019d8c <__swbuf_r+0x84>
 8019d30:	6923      	ldr	r3, [r4, #16]
 8019d32:	6820      	ldr	r0, [r4, #0]
 8019d34:	1ac0      	subs	r0, r0, r3
 8019d36:	6963      	ldr	r3, [r4, #20]
 8019d38:	b2f6      	uxtb	r6, r6
 8019d3a:	4283      	cmp	r3, r0
 8019d3c:	4637      	mov	r7, r6
 8019d3e:	dc04      	bgt.n	8019d4a <__swbuf_r+0x42>
 8019d40:	4621      	mov	r1, r4
 8019d42:	4628      	mov	r0, r5
 8019d44:	f000 fff2 	bl	801ad2c <_fflush_r>
 8019d48:	bb30      	cbnz	r0, 8019d98 <__swbuf_r+0x90>
 8019d4a:	68a3      	ldr	r3, [r4, #8]
 8019d4c:	3b01      	subs	r3, #1
 8019d4e:	60a3      	str	r3, [r4, #8]
 8019d50:	6823      	ldr	r3, [r4, #0]
 8019d52:	1c5a      	adds	r2, r3, #1
 8019d54:	6022      	str	r2, [r4, #0]
 8019d56:	701e      	strb	r6, [r3, #0]
 8019d58:	6963      	ldr	r3, [r4, #20]
 8019d5a:	3001      	adds	r0, #1
 8019d5c:	4283      	cmp	r3, r0
 8019d5e:	d004      	beq.n	8019d6a <__swbuf_r+0x62>
 8019d60:	89a3      	ldrh	r3, [r4, #12]
 8019d62:	07db      	lsls	r3, r3, #31
 8019d64:	d506      	bpl.n	8019d74 <__swbuf_r+0x6c>
 8019d66:	2e0a      	cmp	r6, #10
 8019d68:	d104      	bne.n	8019d74 <__swbuf_r+0x6c>
 8019d6a:	4621      	mov	r1, r4
 8019d6c:	4628      	mov	r0, r5
 8019d6e:	f000 ffdd 	bl	801ad2c <_fflush_r>
 8019d72:	b988      	cbnz	r0, 8019d98 <__swbuf_r+0x90>
 8019d74:	4638      	mov	r0, r7
 8019d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d78:	4b0a      	ldr	r3, [pc, #40]	; (8019da4 <__swbuf_r+0x9c>)
 8019d7a:	429c      	cmp	r4, r3
 8019d7c:	d101      	bne.n	8019d82 <__swbuf_r+0x7a>
 8019d7e:	68ac      	ldr	r4, [r5, #8]
 8019d80:	e7cf      	b.n	8019d22 <__swbuf_r+0x1a>
 8019d82:	4b09      	ldr	r3, [pc, #36]	; (8019da8 <__swbuf_r+0xa0>)
 8019d84:	429c      	cmp	r4, r3
 8019d86:	bf08      	it	eq
 8019d88:	68ec      	ldreq	r4, [r5, #12]
 8019d8a:	e7ca      	b.n	8019d22 <__swbuf_r+0x1a>
 8019d8c:	4621      	mov	r1, r4
 8019d8e:	4628      	mov	r0, r5
 8019d90:	f000 f81e 	bl	8019dd0 <__swsetup_r>
 8019d94:	2800      	cmp	r0, #0
 8019d96:	d0cb      	beq.n	8019d30 <__swbuf_r+0x28>
 8019d98:	f04f 37ff 	mov.w	r7, #4294967295
 8019d9c:	e7ea      	b.n	8019d74 <__swbuf_r+0x6c>
 8019d9e:	bf00      	nop
 8019da0:	0801ee4c 	.word	0x0801ee4c
 8019da4:	0801ee6c 	.word	0x0801ee6c
 8019da8:	0801ee2c 	.word	0x0801ee2c

08019dac <_write_r>:
 8019dac:	b538      	push	{r3, r4, r5, lr}
 8019dae:	4d07      	ldr	r5, [pc, #28]	; (8019dcc <_write_r+0x20>)
 8019db0:	4604      	mov	r4, r0
 8019db2:	4608      	mov	r0, r1
 8019db4:	4611      	mov	r1, r2
 8019db6:	2200      	movs	r2, #0
 8019db8:	602a      	str	r2, [r5, #0]
 8019dba:	461a      	mov	r2, r3
 8019dbc:	f003 f8d6 	bl	801cf6c <_write>
 8019dc0:	1c43      	adds	r3, r0, #1
 8019dc2:	d102      	bne.n	8019dca <_write_r+0x1e>
 8019dc4:	682b      	ldr	r3, [r5, #0]
 8019dc6:	b103      	cbz	r3, 8019dca <_write_r+0x1e>
 8019dc8:	6023      	str	r3, [r4, #0]
 8019dca:	bd38      	pop	{r3, r4, r5, pc}
 8019dcc:	20006be8 	.word	0x20006be8

08019dd0 <__swsetup_r>:
 8019dd0:	4b32      	ldr	r3, [pc, #200]	; (8019e9c <__swsetup_r+0xcc>)
 8019dd2:	b570      	push	{r4, r5, r6, lr}
 8019dd4:	681d      	ldr	r5, [r3, #0]
 8019dd6:	4606      	mov	r6, r0
 8019dd8:	460c      	mov	r4, r1
 8019dda:	b125      	cbz	r5, 8019de6 <__swsetup_r+0x16>
 8019ddc:	69ab      	ldr	r3, [r5, #24]
 8019dde:	b913      	cbnz	r3, 8019de6 <__swsetup_r+0x16>
 8019de0:	4628      	mov	r0, r5
 8019de2:	f7fd f81b 	bl	8016e1c <__sinit>
 8019de6:	4b2e      	ldr	r3, [pc, #184]	; (8019ea0 <__swsetup_r+0xd0>)
 8019de8:	429c      	cmp	r4, r3
 8019dea:	d10f      	bne.n	8019e0c <__swsetup_r+0x3c>
 8019dec:	686c      	ldr	r4, [r5, #4]
 8019dee:	89a3      	ldrh	r3, [r4, #12]
 8019df0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019df4:	0719      	lsls	r1, r3, #28
 8019df6:	d42c      	bmi.n	8019e52 <__swsetup_r+0x82>
 8019df8:	06dd      	lsls	r5, r3, #27
 8019dfa:	d411      	bmi.n	8019e20 <__swsetup_r+0x50>
 8019dfc:	2309      	movs	r3, #9
 8019dfe:	6033      	str	r3, [r6, #0]
 8019e00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019e04:	81a3      	strh	r3, [r4, #12]
 8019e06:	f04f 30ff 	mov.w	r0, #4294967295
 8019e0a:	e03e      	b.n	8019e8a <__swsetup_r+0xba>
 8019e0c:	4b25      	ldr	r3, [pc, #148]	; (8019ea4 <__swsetup_r+0xd4>)
 8019e0e:	429c      	cmp	r4, r3
 8019e10:	d101      	bne.n	8019e16 <__swsetup_r+0x46>
 8019e12:	68ac      	ldr	r4, [r5, #8]
 8019e14:	e7eb      	b.n	8019dee <__swsetup_r+0x1e>
 8019e16:	4b24      	ldr	r3, [pc, #144]	; (8019ea8 <__swsetup_r+0xd8>)
 8019e18:	429c      	cmp	r4, r3
 8019e1a:	bf08      	it	eq
 8019e1c:	68ec      	ldreq	r4, [r5, #12]
 8019e1e:	e7e6      	b.n	8019dee <__swsetup_r+0x1e>
 8019e20:	0758      	lsls	r0, r3, #29
 8019e22:	d512      	bpl.n	8019e4a <__swsetup_r+0x7a>
 8019e24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019e26:	b141      	cbz	r1, 8019e3a <__swsetup_r+0x6a>
 8019e28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019e2c:	4299      	cmp	r1, r3
 8019e2e:	d002      	beq.n	8019e36 <__swsetup_r+0x66>
 8019e30:	4630      	mov	r0, r6
 8019e32:	f7fd fc95 	bl	8017760 <_free_r>
 8019e36:	2300      	movs	r3, #0
 8019e38:	6363      	str	r3, [r4, #52]	; 0x34
 8019e3a:	89a3      	ldrh	r3, [r4, #12]
 8019e3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019e40:	81a3      	strh	r3, [r4, #12]
 8019e42:	2300      	movs	r3, #0
 8019e44:	6063      	str	r3, [r4, #4]
 8019e46:	6923      	ldr	r3, [r4, #16]
 8019e48:	6023      	str	r3, [r4, #0]
 8019e4a:	89a3      	ldrh	r3, [r4, #12]
 8019e4c:	f043 0308 	orr.w	r3, r3, #8
 8019e50:	81a3      	strh	r3, [r4, #12]
 8019e52:	6923      	ldr	r3, [r4, #16]
 8019e54:	b94b      	cbnz	r3, 8019e6a <__swsetup_r+0x9a>
 8019e56:	89a3      	ldrh	r3, [r4, #12]
 8019e58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019e60:	d003      	beq.n	8019e6a <__swsetup_r+0x9a>
 8019e62:	4621      	mov	r1, r4
 8019e64:	4630      	mov	r0, r6
 8019e66:	f001 fc4f 	bl	801b708 <__smakebuf_r>
 8019e6a:	89a0      	ldrh	r0, [r4, #12]
 8019e6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019e70:	f010 0301 	ands.w	r3, r0, #1
 8019e74:	d00a      	beq.n	8019e8c <__swsetup_r+0xbc>
 8019e76:	2300      	movs	r3, #0
 8019e78:	60a3      	str	r3, [r4, #8]
 8019e7a:	6963      	ldr	r3, [r4, #20]
 8019e7c:	425b      	negs	r3, r3
 8019e7e:	61a3      	str	r3, [r4, #24]
 8019e80:	6923      	ldr	r3, [r4, #16]
 8019e82:	b943      	cbnz	r3, 8019e96 <__swsetup_r+0xc6>
 8019e84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019e88:	d1ba      	bne.n	8019e00 <__swsetup_r+0x30>
 8019e8a:	bd70      	pop	{r4, r5, r6, pc}
 8019e8c:	0781      	lsls	r1, r0, #30
 8019e8e:	bf58      	it	pl
 8019e90:	6963      	ldrpl	r3, [r4, #20]
 8019e92:	60a3      	str	r3, [r4, #8]
 8019e94:	e7f4      	b.n	8019e80 <__swsetup_r+0xb0>
 8019e96:	2000      	movs	r0, #0
 8019e98:	e7f7      	b.n	8019e8a <__swsetup_r+0xba>
 8019e9a:	bf00      	nop
 8019e9c:	20000084 	.word	0x20000084
 8019ea0:	0801ee4c 	.word	0x0801ee4c
 8019ea4:	0801ee6c 	.word	0x0801ee6c
 8019ea8:	0801ee2c 	.word	0x0801ee2c

08019eac <__assert_func>:
 8019eac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019eae:	4614      	mov	r4, r2
 8019eb0:	461a      	mov	r2, r3
 8019eb2:	4b09      	ldr	r3, [pc, #36]	; (8019ed8 <__assert_func+0x2c>)
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	4605      	mov	r5, r0
 8019eb8:	68d8      	ldr	r0, [r3, #12]
 8019eba:	b14c      	cbz	r4, 8019ed0 <__assert_func+0x24>
 8019ebc:	4b07      	ldr	r3, [pc, #28]	; (8019edc <__assert_func+0x30>)
 8019ebe:	9100      	str	r1, [sp, #0]
 8019ec0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019ec4:	4906      	ldr	r1, [pc, #24]	; (8019ee0 <__assert_func+0x34>)
 8019ec6:	462b      	mov	r3, r5
 8019ec8:	f000 ff6c 	bl	801ada4 <fiprintf>
 8019ecc:	f7fc ff38 	bl	8016d40 <abort>
 8019ed0:	4b04      	ldr	r3, [pc, #16]	; (8019ee4 <__assert_func+0x38>)
 8019ed2:	461c      	mov	r4, r3
 8019ed4:	e7f3      	b.n	8019ebe <__assert_func+0x12>
 8019ed6:	bf00      	nop
 8019ed8:	20000084 	.word	0x20000084
 8019edc:	0801f0ed 	.word	0x0801f0ed
 8019ee0:	0801f0fa 	.word	0x0801f0fa
 8019ee4:	0801f128 	.word	0x0801f128

08019ee8 <_close_r>:
 8019ee8:	b538      	push	{r3, r4, r5, lr}
 8019eea:	4d06      	ldr	r5, [pc, #24]	; (8019f04 <_close_r+0x1c>)
 8019eec:	2300      	movs	r3, #0
 8019eee:	4604      	mov	r4, r0
 8019ef0:	4608      	mov	r0, r1
 8019ef2:	602b      	str	r3, [r5, #0]
 8019ef4:	f002 fff4 	bl	801cee0 <_close>
 8019ef8:	1c43      	adds	r3, r0, #1
 8019efa:	d102      	bne.n	8019f02 <_close_r+0x1a>
 8019efc:	682b      	ldr	r3, [r5, #0]
 8019efe:	b103      	cbz	r3, 8019f02 <_close_r+0x1a>
 8019f00:	6023      	str	r3, [r4, #0]
 8019f02:	bd38      	pop	{r3, r4, r5, pc}
 8019f04:	20006be8 	.word	0x20006be8

08019f08 <div>:
 8019f08:	2900      	cmp	r1, #0
 8019f0a:	b510      	push	{r4, lr}
 8019f0c:	fb91 f4f2 	sdiv	r4, r1, r2
 8019f10:	fb02 1314 	mls	r3, r2, r4, r1
 8019f14:	db06      	blt.n	8019f24 <div+0x1c>
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	da01      	bge.n	8019f1e <div+0x16>
 8019f1a:	3401      	adds	r4, #1
 8019f1c:	1a9b      	subs	r3, r3, r2
 8019f1e:	e9c0 4300 	strd	r4, r3, [r0]
 8019f22:	bd10      	pop	{r4, pc}
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	bfc4      	itt	gt
 8019f28:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8019f2c:	189b      	addgt	r3, r3, r2
 8019f2e:	e7f6      	b.n	8019f1e <div+0x16>

08019f30 <quorem>:
 8019f30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f34:	6903      	ldr	r3, [r0, #16]
 8019f36:	690c      	ldr	r4, [r1, #16]
 8019f38:	42a3      	cmp	r3, r4
 8019f3a:	4607      	mov	r7, r0
 8019f3c:	f2c0 8081 	blt.w	801a042 <quorem+0x112>
 8019f40:	3c01      	subs	r4, #1
 8019f42:	f101 0814 	add.w	r8, r1, #20
 8019f46:	f100 0514 	add.w	r5, r0, #20
 8019f4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019f4e:	9301      	str	r3, [sp, #4]
 8019f50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019f54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019f58:	3301      	adds	r3, #1
 8019f5a:	429a      	cmp	r2, r3
 8019f5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8019f60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019f64:	fbb2 f6f3 	udiv	r6, r2, r3
 8019f68:	d331      	bcc.n	8019fce <quorem+0x9e>
 8019f6a:	f04f 0e00 	mov.w	lr, #0
 8019f6e:	4640      	mov	r0, r8
 8019f70:	46ac      	mov	ip, r5
 8019f72:	46f2      	mov	sl, lr
 8019f74:	f850 2b04 	ldr.w	r2, [r0], #4
 8019f78:	b293      	uxth	r3, r2
 8019f7a:	fb06 e303 	mla	r3, r6, r3, lr
 8019f7e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8019f82:	b29b      	uxth	r3, r3
 8019f84:	ebaa 0303 	sub.w	r3, sl, r3
 8019f88:	0c12      	lsrs	r2, r2, #16
 8019f8a:	f8dc a000 	ldr.w	sl, [ip]
 8019f8e:	fb06 e202 	mla	r2, r6, r2, lr
 8019f92:	fa13 f38a 	uxtah	r3, r3, sl
 8019f96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8019f9a:	fa1f fa82 	uxth.w	sl, r2
 8019f9e:	f8dc 2000 	ldr.w	r2, [ip]
 8019fa2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8019fa6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019faa:	b29b      	uxth	r3, r3
 8019fac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019fb0:	4581      	cmp	r9, r0
 8019fb2:	f84c 3b04 	str.w	r3, [ip], #4
 8019fb6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8019fba:	d2db      	bcs.n	8019f74 <quorem+0x44>
 8019fbc:	f855 300b 	ldr.w	r3, [r5, fp]
 8019fc0:	b92b      	cbnz	r3, 8019fce <quorem+0x9e>
 8019fc2:	9b01      	ldr	r3, [sp, #4]
 8019fc4:	3b04      	subs	r3, #4
 8019fc6:	429d      	cmp	r5, r3
 8019fc8:	461a      	mov	r2, r3
 8019fca:	d32e      	bcc.n	801a02a <quorem+0xfa>
 8019fcc:	613c      	str	r4, [r7, #16]
 8019fce:	4638      	mov	r0, r7
 8019fd0:	f001 fec0 	bl	801bd54 <__mcmp>
 8019fd4:	2800      	cmp	r0, #0
 8019fd6:	db24      	blt.n	801a022 <quorem+0xf2>
 8019fd8:	3601      	adds	r6, #1
 8019fda:	4628      	mov	r0, r5
 8019fdc:	f04f 0c00 	mov.w	ip, #0
 8019fe0:	f858 2b04 	ldr.w	r2, [r8], #4
 8019fe4:	f8d0 e000 	ldr.w	lr, [r0]
 8019fe8:	b293      	uxth	r3, r2
 8019fea:	ebac 0303 	sub.w	r3, ip, r3
 8019fee:	0c12      	lsrs	r2, r2, #16
 8019ff0:	fa13 f38e 	uxtah	r3, r3, lr
 8019ff4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8019ff8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019ffc:	b29b      	uxth	r3, r3
 8019ffe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a002:	45c1      	cmp	r9, r8
 801a004:	f840 3b04 	str.w	r3, [r0], #4
 801a008:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801a00c:	d2e8      	bcs.n	8019fe0 <quorem+0xb0>
 801a00e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a012:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a016:	b922      	cbnz	r2, 801a022 <quorem+0xf2>
 801a018:	3b04      	subs	r3, #4
 801a01a:	429d      	cmp	r5, r3
 801a01c:	461a      	mov	r2, r3
 801a01e:	d30a      	bcc.n	801a036 <quorem+0x106>
 801a020:	613c      	str	r4, [r7, #16]
 801a022:	4630      	mov	r0, r6
 801a024:	b003      	add	sp, #12
 801a026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a02a:	6812      	ldr	r2, [r2, #0]
 801a02c:	3b04      	subs	r3, #4
 801a02e:	2a00      	cmp	r2, #0
 801a030:	d1cc      	bne.n	8019fcc <quorem+0x9c>
 801a032:	3c01      	subs	r4, #1
 801a034:	e7c7      	b.n	8019fc6 <quorem+0x96>
 801a036:	6812      	ldr	r2, [r2, #0]
 801a038:	3b04      	subs	r3, #4
 801a03a:	2a00      	cmp	r2, #0
 801a03c:	d1f0      	bne.n	801a020 <quorem+0xf0>
 801a03e:	3c01      	subs	r4, #1
 801a040:	e7eb      	b.n	801a01a <quorem+0xea>
 801a042:	2000      	movs	r0, #0
 801a044:	e7ee      	b.n	801a024 <quorem+0xf4>
	...

0801a048 <_dtoa_r>:
 801a048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a04c:	ed2d 8b02 	vpush	{d8}
 801a050:	ec57 6b10 	vmov	r6, r7, d0
 801a054:	b095      	sub	sp, #84	; 0x54
 801a056:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801a058:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801a05c:	9105      	str	r1, [sp, #20]
 801a05e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801a062:	4604      	mov	r4, r0
 801a064:	9209      	str	r2, [sp, #36]	; 0x24
 801a066:	930f      	str	r3, [sp, #60]	; 0x3c
 801a068:	b975      	cbnz	r5, 801a088 <_dtoa_r+0x40>
 801a06a:	2010      	movs	r0, #16
 801a06c:	f7fd f8ba 	bl	80171e4 <malloc>
 801a070:	4602      	mov	r2, r0
 801a072:	6260      	str	r0, [r4, #36]	; 0x24
 801a074:	b920      	cbnz	r0, 801a080 <_dtoa_r+0x38>
 801a076:	4bb2      	ldr	r3, [pc, #712]	; (801a340 <_dtoa_r+0x2f8>)
 801a078:	21ea      	movs	r1, #234	; 0xea
 801a07a:	48b2      	ldr	r0, [pc, #712]	; (801a344 <_dtoa_r+0x2fc>)
 801a07c:	f7ff ff16 	bl	8019eac <__assert_func>
 801a080:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a084:	6005      	str	r5, [r0, #0]
 801a086:	60c5      	str	r5, [r0, #12]
 801a088:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a08a:	6819      	ldr	r1, [r3, #0]
 801a08c:	b151      	cbz	r1, 801a0a4 <_dtoa_r+0x5c>
 801a08e:	685a      	ldr	r2, [r3, #4]
 801a090:	604a      	str	r2, [r1, #4]
 801a092:	2301      	movs	r3, #1
 801a094:	4093      	lsls	r3, r2
 801a096:	608b      	str	r3, [r1, #8]
 801a098:	4620      	mov	r0, r4
 801a09a:	f001 fbd3 	bl	801b844 <_Bfree>
 801a09e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a0a0:	2200      	movs	r2, #0
 801a0a2:	601a      	str	r2, [r3, #0]
 801a0a4:	1e3b      	subs	r3, r7, #0
 801a0a6:	bfb9      	ittee	lt
 801a0a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801a0ac:	9303      	strlt	r3, [sp, #12]
 801a0ae:	2300      	movge	r3, #0
 801a0b0:	f8c8 3000 	strge.w	r3, [r8]
 801a0b4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801a0b8:	4ba3      	ldr	r3, [pc, #652]	; (801a348 <_dtoa_r+0x300>)
 801a0ba:	bfbc      	itt	lt
 801a0bc:	2201      	movlt	r2, #1
 801a0be:	f8c8 2000 	strlt.w	r2, [r8]
 801a0c2:	ea33 0309 	bics.w	r3, r3, r9
 801a0c6:	d11b      	bne.n	801a100 <_dtoa_r+0xb8>
 801a0c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a0ca:	f242 730f 	movw	r3, #9999	; 0x270f
 801a0ce:	6013      	str	r3, [r2, #0]
 801a0d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a0d4:	4333      	orrs	r3, r6
 801a0d6:	f000 857a 	beq.w	801abce <_dtoa_r+0xb86>
 801a0da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a0dc:	b963      	cbnz	r3, 801a0f8 <_dtoa_r+0xb0>
 801a0de:	4b9b      	ldr	r3, [pc, #620]	; (801a34c <_dtoa_r+0x304>)
 801a0e0:	e024      	b.n	801a12c <_dtoa_r+0xe4>
 801a0e2:	4b9b      	ldr	r3, [pc, #620]	; (801a350 <_dtoa_r+0x308>)
 801a0e4:	9300      	str	r3, [sp, #0]
 801a0e6:	3308      	adds	r3, #8
 801a0e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a0ea:	6013      	str	r3, [r2, #0]
 801a0ec:	9800      	ldr	r0, [sp, #0]
 801a0ee:	b015      	add	sp, #84	; 0x54
 801a0f0:	ecbd 8b02 	vpop	{d8}
 801a0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0f8:	4b94      	ldr	r3, [pc, #592]	; (801a34c <_dtoa_r+0x304>)
 801a0fa:	9300      	str	r3, [sp, #0]
 801a0fc:	3303      	adds	r3, #3
 801a0fe:	e7f3      	b.n	801a0e8 <_dtoa_r+0xa0>
 801a100:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a104:	2200      	movs	r2, #0
 801a106:	ec51 0b17 	vmov	r0, r1, d7
 801a10a:	2300      	movs	r3, #0
 801a10c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801a110:	f7e6 fcfa 	bl	8000b08 <__aeabi_dcmpeq>
 801a114:	4680      	mov	r8, r0
 801a116:	b158      	cbz	r0, 801a130 <_dtoa_r+0xe8>
 801a118:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a11a:	2301      	movs	r3, #1
 801a11c:	6013      	str	r3, [r2, #0]
 801a11e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a120:	2b00      	cmp	r3, #0
 801a122:	f000 8551 	beq.w	801abc8 <_dtoa_r+0xb80>
 801a126:	488b      	ldr	r0, [pc, #556]	; (801a354 <_dtoa_r+0x30c>)
 801a128:	6018      	str	r0, [r3, #0]
 801a12a:	1e43      	subs	r3, r0, #1
 801a12c:	9300      	str	r3, [sp, #0]
 801a12e:	e7dd      	b.n	801a0ec <_dtoa_r+0xa4>
 801a130:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801a134:	aa12      	add	r2, sp, #72	; 0x48
 801a136:	a913      	add	r1, sp, #76	; 0x4c
 801a138:	4620      	mov	r0, r4
 801a13a:	f001 ff2b 	bl	801bf94 <__d2b>
 801a13e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801a142:	4683      	mov	fp, r0
 801a144:	2d00      	cmp	r5, #0
 801a146:	d07c      	beq.n	801a242 <_dtoa_r+0x1fa>
 801a148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a14a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801a14e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a152:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801a156:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801a15a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801a15e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801a162:	4b7d      	ldr	r3, [pc, #500]	; (801a358 <_dtoa_r+0x310>)
 801a164:	2200      	movs	r2, #0
 801a166:	4630      	mov	r0, r6
 801a168:	4639      	mov	r1, r7
 801a16a:	f7e6 f8ad 	bl	80002c8 <__aeabi_dsub>
 801a16e:	a36e      	add	r3, pc, #440	; (adr r3, 801a328 <_dtoa_r+0x2e0>)
 801a170:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a174:	f7e6 fa60 	bl	8000638 <__aeabi_dmul>
 801a178:	a36d      	add	r3, pc, #436	; (adr r3, 801a330 <_dtoa_r+0x2e8>)
 801a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a17e:	f7e6 f8a5 	bl	80002cc <__adddf3>
 801a182:	4606      	mov	r6, r0
 801a184:	4628      	mov	r0, r5
 801a186:	460f      	mov	r7, r1
 801a188:	f7e6 f9ec 	bl	8000564 <__aeabi_i2d>
 801a18c:	a36a      	add	r3, pc, #424	; (adr r3, 801a338 <_dtoa_r+0x2f0>)
 801a18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a192:	f7e6 fa51 	bl	8000638 <__aeabi_dmul>
 801a196:	4602      	mov	r2, r0
 801a198:	460b      	mov	r3, r1
 801a19a:	4630      	mov	r0, r6
 801a19c:	4639      	mov	r1, r7
 801a19e:	f7e6 f895 	bl	80002cc <__adddf3>
 801a1a2:	4606      	mov	r6, r0
 801a1a4:	460f      	mov	r7, r1
 801a1a6:	f7e6 fcf7 	bl	8000b98 <__aeabi_d2iz>
 801a1aa:	2200      	movs	r2, #0
 801a1ac:	4682      	mov	sl, r0
 801a1ae:	2300      	movs	r3, #0
 801a1b0:	4630      	mov	r0, r6
 801a1b2:	4639      	mov	r1, r7
 801a1b4:	f7e6 fcb2 	bl	8000b1c <__aeabi_dcmplt>
 801a1b8:	b148      	cbz	r0, 801a1ce <_dtoa_r+0x186>
 801a1ba:	4650      	mov	r0, sl
 801a1bc:	f7e6 f9d2 	bl	8000564 <__aeabi_i2d>
 801a1c0:	4632      	mov	r2, r6
 801a1c2:	463b      	mov	r3, r7
 801a1c4:	f7e6 fca0 	bl	8000b08 <__aeabi_dcmpeq>
 801a1c8:	b908      	cbnz	r0, 801a1ce <_dtoa_r+0x186>
 801a1ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a1ce:	f1ba 0f16 	cmp.w	sl, #22
 801a1d2:	d854      	bhi.n	801a27e <_dtoa_r+0x236>
 801a1d4:	4b61      	ldr	r3, [pc, #388]	; (801a35c <_dtoa_r+0x314>)
 801a1d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801a1e2:	f7e6 fc9b 	bl	8000b1c <__aeabi_dcmplt>
 801a1e6:	2800      	cmp	r0, #0
 801a1e8:	d04b      	beq.n	801a282 <_dtoa_r+0x23a>
 801a1ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a1ee:	2300      	movs	r3, #0
 801a1f0:	930e      	str	r3, [sp, #56]	; 0x38
 801a1f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a1f4:	1b5d      	subs	r5, r3, r5
 801a1f6:	1e6b      	subs	r3, r5, #1
 801a1f8:	9304      	str	r3, [sp, #16]
 801a1fa:	bf43      	ittte	mi
 801a1fc:	2300      	movmi	r3, #0
 801a1fe:	f1c5 0801 	rsbmi	r8, r5, #1
 801a202:	9304      	strmi	r3, [sp, #16]
 801a204:	f04f 0800 	movpl.w	r8, #0
 801a208:	f1ba 0f00 	cmp.w	sl, #0
 801a20c:	db3b      	blt.n	801a286 <_dtoa_r+0x23e>
 801a20e:	9b04      	ldr	r3, [sp, #16]
 801a210:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801a214:	4453      	add	r3, sl
 801a216:	9304      	str	r3, [sp, #16]
 801a218:	2300      	movs	r3, #0
 801a21a:	9306      	str	r3, [sp, #24]
 801a21c:	9b05      	ldr	r3, [sp, #20]
 801a21e:	2b09      	cmp	r3, #9
 801a220:	d869      	bhi.n	801a2f6 <_dtoa_r+0x2ae>
 801a222:	2b05      	cmp	r3, #5
 801a224:	bfc4      	itt	gt
 801a226:	3b04      	subgt	r3, #4
 801a228:	9305      	strgt	r3, [sp, #20]
 801a22a:	9b05      	ldr	r3, [sp, #20]
 801a22c:	f1a3 0302 	sub.w	r3, r3, #2
 801a230:	bfcc      	ite	gt
 801a232:	2500      	movgt	r5, #0
 801a234:	2501      	movle	r5, #1
 801a236:	2b03      	cmp	r3, #3
 801a238:	d869      	bhi.n	801a30e <_dtoa_r+0x2c6>
 801a23a:	e8df f003 	tbb	[pc, r3]
 801a23e:	4e2c      	.short	0x4e2c
 801a240:	5a4c      	.short	0x5a4c
 801a242:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801a246:	441d      	add	r5, r3
 801a248:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801a24c:	2b20      	cmp	r3, #32
 801a24e:	bfc1      	itttt	gt
 801a250:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801a254:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801a258:	fa09 f303 	lslgt.w	r3, r9, r3
 801a25c:	fa26 f000 	lsrgt.w	r0, r6, r0
 801a260:	bfda      	itte	le
 801a262:	f1c3 0320 	rsble	r3, r3, #32
 801a266:	fa06 f003 	lslle.w	r0, r6, r3
 801a26a:	4318      	orrgt	r0, r3
 801a26c:	f7e6 f96a 	bl	8000544 <__aeabi_ui2d>
 801a270:	2301      	movs	r3, #1
 801a272:	4606      	mov	r6, r0
 801a274:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801a278:	3d01      	subs	r5, #1
 801a27a:	9310      	str	r3, [sp, #64]	; 0x40
 801a27c:	e771      	b.n	801a162 <_dtoa_r+0x11a>
 801a27e:	2301      	movs	r3, #1
 801a280:	e7b6      	b.n	801a1f0 <_dtoa_r+0x1a8>
 801a282:	900e      	str	r0, [sp, #56]	; 0x38
 801a284:	e7b5      	b.n	801a1f2 <_dtoa_r+0x1aa>
 801a286:	f1ca 0300 	rsb	r3, sl, #0
 801a28a:	9306      	str	r3, [sp, #24]
 801a28c:	2300      	movs	r3, #0
 801a28e:	eba8 080a 	sub.w	r8, r8, sl
 801a292:	930d      	str	r3, [sp, #52]	; 0x34
 801a294:	e7c2      	b.n	801a21c <_dtoa_r+0x1d4>
 801a296:	2300      	movs	r3, #0
 801a298:	9308      	str	r3, [sp, #32]
 801a29a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	dc39      	bgt.n	801a314 <_dtoa_r+0x2cc>
 801a2a0:	f04f 0901 	mov.w	r9, #1
 801a2a4:	f8cd 9004 	str.w	r9, [sp, #4]
 801a2a8:	464b      	mov	r3, r9
 801a2aa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801a2ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801a2b0:	2200      	movs	r2, #0
 801a2b2:	6042      	str	r2, [r0, #4]
 801a2b4:	2204      	movs	r2, #4
 801a2b6:	f102 0614 	add.w	r6, r2, #20
 801a2ba:	429e      	cmp	r6, r3
 801a2bc:	6841      	ldr	r1, [r0, #4]
 801a2be:	d92f      	bls.n	801a320 <_dtoa_r+0x2d8>
 801a2c0:	4620      	mov	r0, r4
 801a2c2:	f001 fa7f 	bl	801b7c4 <_Balloc>
 801a2c6:	9000      	str	r0, [sp, #0]
 801a2c8:	2800      	cmp	r0, #0
 801a2ca:	d14b      	bne.n	801a364 <_dtoa_r+0x31c>
 801a2cc:	4b24      	ldr	r3, [pc, #144]	; (801a360 <_dtoa_r+0x318>)
 801a2ce:	4602      	mov	r2, r0
 801a2d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801a2d4:	e6d1      	b.n	801a07a <_dtoa_r+0x32>
 801a2d6:	2301      	movs	r3, #1
 801a2d8:	e7de      	b.n	801a298 <_dtoa_r+0x250>
 801a2da:	2300      	movs	r3, #0
 801a2dc:	9308      	str	r3, [sp, #32]
 801a2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a2e0:	eb0a 0903 	add.w	r9, sl, r3
 801a2e4:	f109 0301 	add.w	r3, r9, #1
 801a2e8:	2b01      	cmp	r3, #1
 801a2ea:	9301      	str	r3, [sp, #4]
 801a2ec:	bfb8      	it	lt
 801a2ee:	2301      	movlt	r3, #1
 801a2f0:	e7dd      	b.n	801a2ae <_dtoa_r+0x266>
 801a2f2:	2301      	movs	r3, #1
 801a2f4:	e7f2      	b.n	801a2dc <_dtoa_r+0x294>
 801a2f6:	2501      	movs	r5, #1
 801a2f8:	2300      	movs	r3, #0
 801a2fa:	9305      	str	r3, [sp, #20]
 801a2fc:	9508      	str	r5, [sp, #32]
 801a2fe:	f04f 39ff 	mov.w	r9, #4294967295
 801a302:	2200      	movs	r2, #0
 801a304:	f8cd 9004 	str.w	r9, [sp, #4]
 801a308:	2312      	movs	r3, #18
 801a30a:	9209      	str	r2, [sp, #36]	; 0x24
 801a30c:	e7cf      	b.n	801a2ae <_dtoa_r+0x266>
 801a30e:	2301      	movs	r3, #1
 801a310:	9308      	str	r3, [sp, #32]
 801a312:	e7f4      	b.n	801a2fe <_dtoa_r+0x2b6>
 801a314:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801a318:	f8cd 9004 	str.w	r9, [sp, #4]
 801a31c:	464b      	mov	r3, r9
 801a31e:	e7c6      	b.n	801a2ae <_dtoa_r+0x266>
 801a320:	3101      	adds	r1, #1
 801a322:	6041      	str	r1, [r0, #4]
 801a324:	0052      	lsls	r2, r2, #1
 801a326:	e7c6      	b.n	801a2b6 <_dtoa_r+0x26e>
 801a328:	636f4361 	.word	0x636f4361
 801a32c:	3fd287a7 	.word	0x3fd287a7
 801a330:	8b60c8b3 	.word	0x8b60c8b3
 801a334:	3fc68a28 	.word	0x3fc68a28
 801a338:	509f79fb 	.word	0x509f79fb
 801a33c:	3fd34413 	.word	0x3fd34413
 801a340:	0801ee90 	.word	0x0801ee90
 801a344:	0801f136 	.word	0x0801f136
 801a348:	7ff00000 	.word	0x7ff00000
 801a34c:	0801f132 	.word	0x0801f132
 801a350:	0801f129 	.word	0x0801f129
 801a354:	0801f39a 	.word	0x0801f39a
 801a358:	3ff80000 	.word	0x3ff80000
 801a35c:	0801f2b0 	.word	0x0801f2b0
 801a360:	0801f195 	.word	0x0801f195
 801a364:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a366:	9a00      	ldr	r2, [sp, #0]
 801a368:	601a      	str	r2, [r3, #0]
 801a36a:	9b01      	ldr	r3, [sp, #4]
 801a36c:	2b0e      	cmp	r3, #14
 801a36e:	f200 80ad 	bhi.w	801a4cc <_dtoa_r+0x484>
 801a372:	2d00      	cmp	r5, #0
 801a374:	f000 80aa 	beq.w	801a4cc <_dtoa_r+0x484>
 801a378:	f1ba 0f00 	cmp.w	sl, #0
 801a37c:	dd36      	ble.n	801a3ec <_dtoa_r+0x3a4>
 801a37e:	4ac3      	ldr	r2, [pc, #780]	; (801a68c <_dtoa_r+0x644>)
 801a380:	f00a 030f 	and.w	r3, sl, #15
 801a384:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801a388:	ed93 7b00 	vldr	d7, [r3]
 801a38c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801a390:	ea4f 172a 	mov.w	r7, sl, asr #4
 801a394:	eeb0 8a47 	vmov.f32	s16, s14
 801a398:	eef0 8a67 	vmov.f32	s17, s15
 801a39c:	d016      	beq.n	801a3cc <_dtoa_r+0x384>
 801a39e:	4bbc      	ldr	r3, [pc, #752]	; (801a690 <_dtoa_r+0x648>)
 801a3a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801a3a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a3a8:	f7e6 fa70 	bl	800088c <__aeabi_ddiv>
 801a3ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a3b0:	f007 070f 	and.w	r7, r7, #15
 801a3b4:	2503      	movs	r5, #3
 801a3b6:	4eb6      	ldr	r6, [pc, #728]	; (801a690 <_dtoa_r+0x648>)
 801a3b8:	b957      	cbnz	r7, 801a3d0 <_dtoa_r+0x388>
 801a3ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a3be:	ec53 2b18 	vmov	r2, r3, d8
 801a3c2:	f7e6 fa63 	bl	800088c <__aeabi_ddiv>
 801a3c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a3ca:	e029      	b.n	801a420 <_dtoa_r+0x3d8>
 801a3cc:	2502      	movs	r5, #2
 801a3ce:	e7f2      	b.n	801a3b6 <_dtoa_r+0x36e>
 801a3d0:	07f9      	lsls	r1, r7, #31
 801a3d2:	d508      	bpl.n	801a3e6 <_dtoa_r+0x39e>
 801a3d4:	ec51 0b18 	vmov	r0, r1, d8
 801a3d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a3dc:	f7e6 f92c 	bl	8000638 <__aeabi_dmul>
 801a3e0:	ec41 0b18 	vmov	d8, r0, r1
 801a3e4:	3501      	adds	r5, #1
 801a3e6:	107f      	asrs	r7, r7, #1
 801a3e8:	3608      	adds	r6, #8
 801a3ea:	e7e5      	b.n	801a3b8 <_dtoa_r+0x370>
 801a3ec:	f000 80a6 	beq.w	801a53c <_dtoa_r+0x4f4>
 801a3f0:	f1ca 0600 	rsb	r6, sl, #0
 801a3f4:	4ba5      	ldr	r3, [pc, #660]	; (801a68c <_dtoa_r+0x644>)
 801a3f6:	4fa6      	ldr	r7, [pc, #664]	; (801a690 <_dtoa_r+0x648>)
 801a3f8:	f006 020f 	and.w	r2, r6, #15
 801a3fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a400:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a404:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801a408:	f7e6 f916 	bl	8000638 <__aeabi_dmul>
 801a40c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a410:	1136      	asrs	r6, r6, #4
 801a412:	2300      	movs	r3, #0
 801a414:	2502      	movs	r5, #2
 801a416:	2e00      	cmp	r6, #0
 801a418:	f040 8085 	bne.w	801a526 <_dtoa_r+0x4de>
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	d1d2      	bne.n	801a3c6 <_dtoa_r+0x37e>
 801a420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a422:	2b00      	cmp	r3, #0
 801a424:	f000 808c 	beq.w	801a540 <_dtoa_r+0x4f8>
 801a428:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801a42c:	4b99      	ldr	r3, [pc, #612]	; (801a694 <_dtoa_r+0x64c>)
 801a42e:	2200      	movs	r2, #0
 801a430:	4630      	mov	r0, r6
 801a432:	4639      	mov	r1, r7
 801a434:	f7e6 fb72 	bl	8000b1c <__aeabi_dcmplt>
 801a438:	2800      	cmp	r0, #0
 801a43a:	f000 8081 	beq.w	801a540 <_dtoa_r+0x4f8>
 801a43e:	9b01      	ldr	r3, [sp, #4]
 801a440:	2b00      	cmp	r3, #0
 801a442:	d07d      	beq.n	801a540 <_dtoa_r+0x4f8>
 801a444:	f1b9 0f00 	cmp.w	r9, #0
 801a448:	dd3c      	ble.n	801a4c4 <_dtoa_r+0x47c>
 801a44a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801a44e:	9307      	str	r3, [sp, #28]
 801a450:	2200      	movs	r2, #0
 801a452:	4b91      	ldr	r3, [pc, #580]	; (801a698 <_dtoa_r+0x650>)
 801a454:	4630      	mov	r0, r6
 801a456:	4639      	mov	r1, r7
 801a458:	f7e6 f8ee 	bl	8000638 <__aeabi_dmul>
 801a45c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a460:	3501      	adds	r5, #1
 801a462:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801a466:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801a46a:	4628      	mov	r0, r5
 801a46c:	f7e6 f87a 	bl	8000564 <__aeabi_i2d>
 801a470:	4632      	mov	r2, r6
 801a472:	463b      	mov	r3, r7
 801a474:	f7e6 f8e0 	bl	8000638 <__aeabi_dmul>
 801a478:	4b88      	ldr	r3, [pc, #544]	; (801a69c <_dtoa_r+0x654>)
 801a47a:	2200      	movs	r2, #0
 801a47c:	f7e5 ff26 	bl	80002cc <__adddf3>
 801a480:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801a484:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a488:	9303      	str	r3, [sp, #12]
 801a48a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	d15c      	bne.n	801a54a <_dtoa_r+0x502>
 801a490:	4b83      	ldr	r3, [pc, #524]	; (801a6a0 <_dtoa_r+0x658>)
 801a492:	2200      	movs	r2, #0
 801a494:	4630      	mov	r0, r6
 801a496:	4639      	mov	r1, r7
 801a498:	f7e5 ff16 	bl	80002c8 <__aeabi_dsub>
 801a49c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a4a0:	4606      	mov	r6, r0
 801a4a2:	460f      	mov	r7, r1
 801a4a4:	f7e6 fb58 	bl	8000b58 <__aeabi_dcmpgt>
 801a4a8:	2800      	cmp	r0, #0
 801a4aa:	f040 8296 	bne.w	801a9da <_dtoa_r+0x992>
 801a4ae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801a4b2:	4630      	mov	r0, r6
 801a4b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a4b8:	4639      	mov	r1, r7
 801a4ba:	f7e6 fb2f 	bl	8000b1c <__aeabi_dcmplt>
 801a4be:	2800      	cmp	r0, #0
 801a4c0:	f040 8288 	bne.w	801a9d4 <_dtoa_r+0x98c>
 801a4c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a4c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a4cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	f2c0 8158 	blt.w	801a784 <_dtoa_r+0x73c>
 801a4d4:	f1ba 0f0e 	cmp.w	sl, #14
 801a4d8:	f300 8154 	bgt.w	801a784 <_dtoa_r+0x73c>
 801a4dc:	4b6b      	ldr	r3, [pc, #428]	; (801a68c <_dtoa_r+0x644>)
 801a4de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a4e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a4e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a4e8:	2b00      	cmp	r3, #0
 801a4ea:	f280 80e3 	bge.w	801a6b4 <_dtoa_r+0x66c>
 801a4ee:	9b01      	ldr	r3, [sp, #4]
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	f300 80df 	bgt.w	801a6b4 <_dtoa_r+0x66c>
 801a4f6:	f040 826d 	bne.w	801a9d4 <_dtoa_r+0x98c>
 801a4fa:	4b69      	ldr	r3, [pc, #420]	; (801a6a0 <_dtoa_r+0x658>)
 801a4fc:	2200      	movs	r2, #0
 801a4fe:	4640      	mov	r0, r8
 801a500:	4649      	mov	r1, r9
 801a502:	f7e6 f899 	bl	8000638 <__aeabi_dmul>
 801a506:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a50a:	f7e6 fb1b 	bl	8000b44 <__aeabi_dcmpge>
 801a50e:	9e01      	ldr	r6, [sp, #4]
 801a510:	4637      	mov	r7, r6
 801a512:	2800      	cmp	r0, #0
 801a514:	f040 8243 	bne.w	801a99e <_dtoa_r+0x956>
 801a518:	9d00      	ldr	r5, [sp, #0]
 801a51a:	2331      	movs	r3, #49	; 0x31
 801a51c:	f805 3b01 	strb.w	r3, [r5], #1
 801a520:	f10a 0a01 	add.w	sl, sl, #1
 801a524:	e23f      	b.n	801a9a6 <_dtoa_r+0x95e>
 801a526:	07f2      	lsls	r2, r6, #31
 801a528:	d505      	bpl.n	801a536 <_dtoa_r+0x4ee>
 801a52a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a52e:	f7e6 f883 	bl	8000638 <__aeabi_dmul>
 801a532:	3501      	adds	r5, #1
 801a534:	2301      	movs	r3, #1
 801a536:	1076      	asrs	r6, r6, #1
 801a538:	3708      	adds	r7, #8
 801a53a:	e76c      	b.n	801a416 <_dtoa_r+0x3ce>
 801a53c:	2502      	movs	r5, #2
 801a53e:	e76f      	b.n	801a420 <_dtoa_r+0x3d8>
 801a540:	9b01      	ldr	r3, [sp, #4]
 801a542:	f8cd a01c 	str.w	sl, [sp, #28]
 801a546:	930c      	str	r3, [sp, #48]	; 0x30
 801a548:	e78d      	b.n	801a466 <_dtoa_r+0x41e>
 801a54a:	9900      	ldr	r1, [sp, #0]
 801a54c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a54e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a550:	4b4e      	ldr	r3, [pc, #312]	; (801a68c <_dtoa_r+0x644>)
 801a552:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a556:	4401      	add	r1, r0
 801a558:	9102      	str	r1, [sp, #8]
 801a55a:	9908      	ldr	r1, [sp, #32]
 801a55c:	eeb0 8a47 	vmov.f32	s16, s14
 801a560:	eef0 8a67 	vmov.f32	s17, s15
 801a564:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a568:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801a56c:	2900      	cmp	r1, #0
 801a56e:	d045      	beq.n	801a5fc <_dtoa_r+0x5b4>
 801a570:	494c      	ldr	r1, [pc, #304]	; (801a6a4 <_dtoa_r+0x65c>)
 801a572:	2000      	movs	r0, #0
 801a574:	f7e6 f98a 	bl	800088c <__aeabi_ddiv>
 801a578:	ec53 2b18 	vmov	r2, r3, d8
 801a57c:	f7e5 fea4 	bl	80002c8 <__aeabi_dsub>
 801a580:	9d00      	ldr	r5, [sp, #0]
 801a582:	ec41 0b18 	vmov	d8, r0, r1
 801a586:	4639      	mov	r1, r7
 801a588:	4630      	mov	r0, r6
 801a58a:	f7e6 fb05 	bl	8000b98 <__aeabi_d2iz>
 801a58e:	900c      	str	r0, [sp, #48]	; 0x30
 801a590:	f7e5 ffe8 	bl	8000564 <__aeabi_i2d>
 801a594:	4602      	mov	r2, r0
 801a596:	460b      	mov	r3, r1
 801a598:	4630      	mov	r0, r6
 801a59a:	4639      	mov	r1, r7
 801a59c:	f7e5 fe94 	bl	80002c8 <__aeabi_dsub>
 801a5a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a5a2:	3330      	adds	r3, #48	; 0x30
 801a5a4:	f805 3b01 	strb.w	r3, [r5], #1
 801a5a8:	ec53 2b18 	vmov	r2, r3, d8
 801a5ac:	4606      	mov	r6, r0
 801a5ae:	460f      	mov	r7, r1
 801a5b0:	f7e6 fab4 	bl	8000b1c <__aeabi_dcmplt>
 801a5b4:	2800      	cmp	r0, #0
 801a5b6:	d165      	bne.n	801a684 <_dtoa_r+0x63c>
 801a5b8:	4632      	mov	r2, r6
 801a5ba:	463b      	mov	r3, r7
 801a5bc:	4935      	ldr	r1, [pc, #212]	; (801a694 <_dtoa_r+0x64c>)
 801a5be:	2000      	movs	r0, #0
 801a5c0:	f7e5 fe82 	bl	80002c8 <__aeabi_dsub>
 801a5c4:	ec53 2b18 	vmov	r2, r3, d8
 801a5c8:	f7e6 faa8 	bl	8000b1c <__aeabi_dcmplt>
 801a5cc:	2800      	cmp	r0, #0
 801a5ce:	f040 80b9 	bne.w	801a744 <_dtoa_r+0x6fc>
 801a5d2:	9b02      	ldr	r3, [sp, #8]
 801a5d4:	429d      	cmp	r5, r3
 801a5d6:	f43f af75 	beq.w	801a4c4 <_dtoa_r+0x47c>
 801a5da:	4b2f      	ldr	r3, [pc, #188]	; (801a698 <_dtoa_r+0x650>)
 801a5dc:	ec51 0b18 	vmov	r0, r1, d8
 801a5e0:	2200      	movs	r2, #0
 801a5e2:	f7e6 f829 	bl	8000638 <__aeabi_dmul>
 801a5e6:	4b2c      	ldr	r3, [pc, #176]	; (801a698 <_dtoa_r+0x650>)
 801a5e8:	ec41 0b18 	vmov	d8, r0, r1
 801a5ec:	2200      	movs	r2, #0
 801a5ee:	4630      	mov	r0, r6
 801a5f0:	4639      	mov	r1, r7
 801a5f2:	f7e6 f821 	bl	8000638 <__aeabi_dmul>
 801a5f6:	4606      	mov	r6, r0
 801a5f8:	460f      	mov	r7, r1
 801a5fa:	e7c4      	b.n	801a586 <_dtoa_r+0x53e>
 801a5fc:	ec51 0b17 	vmov	r0, r1, d7
 801a600:	f7e6 f81a 	bl	8000638 <__aeabi_dmul>
 801a604:	9b02      	ldr	r3, [sp, #8]
 801a606:	9d00      	ldr	r5, [sp, #0]
 801a608:	930c      	str	r3, [sp, #48]	; 0x30
 801a60a:	ec41 0b18 	vmov	d8, r0, r1
 801a60e:	4639      	mov	r1, r7
 801a610:	4630      	mov	r0, r6
 801a612:	f7e6 fac1 	bl	8000b98 <__aeabi_d2iz>
 801a616:	9011      	str	r0, [sp, #68]	; 0x44
 801a618:	f7e5 ffa4 	bl	8000564 <__aeabi_i2d>
 801a61c:	4602      	mov	r2, r0
 801a61e:	460b      	mov	r3, r1
 801a620:	4630      	mov	r0, r6
 801a622:	4639      	mov	r1, r7
 801a624:	f7e5 fe50 	bl	80002c8 <__aeabi_dsub>
 801a628:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a62a:	3330      	adds	r3, #48	; 0x30
 801a62c:	f805 3b01 	strb.w	r3, [r5], #1
 801a630:	9b02      	ldr	r3, [sp, #8]
 801a632:	429d      	cmp	r5, r3
 801a634:	4606      	mov	r6, r0
 801a636:	460f      	mov	r7, r1
 801a638:	f04f 0200 	mov.w	r2, #0
 801a63c:	d134      	bne.n	801a6a8 <_dtoa_r+0x660>
 801a63e:	4b19      	ldr	r3, [pc, #100]	; (801a6a4 <_dtoa_r+0x65c>)
 801a640:	ec51 0b18 	vmov	r0, r1, d8
 801a644:	f7e5 fe42 	bl	80002cc <__adddf3>
 801a648:	4602      	mov	r2, r0
 801a64a:	460b      	mov	r3, r1
 801a64c:	4630      	mov	r0, r6
 801a64e:	4639      	mov	r1, r7
 801a650:	f7e6 fa82 	bl	8000b58 <__aeabi_dcmpgt>
 801a654:	2800      	cmp	r0, #0
 801a656:	d175      	bne.n	801a744 <_dtoa_r+0x6fc>
 801a658:	ec53 2b18 	vmov	r2, r3, d8
 801a65c:	4911      	ldr	r1, [pc, #68]	; (801a6a4 <_dtoa_r+0x65c>)
 801a65e:	2000      	movs	r0, #0
 801a660:	f7e5 fe32 	bl	80002c8 <__aeabi_dsub>
 801a664:	4602      	mov	r2, r0
 801a666:	460b      	mov	r3, r1
 801a668:	4630      	mov	r0, r6
 801a66a:	4639      	mov	r1, r7
 801a66c:	f7e6 fa56 	bl	8000b1c <__aeabi_dcmplt>
 801a670:	2800      	cmp	r0, #0
 801a672:	f43f af27 	beq.w	801a4c4 <_dtoa_r+0x47c>
 801a676:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a678:	1e6b      	subs	r3, r5, #1
 801a67a:	930c      	str	r3, [sp, #48]	; 0x30
 801a67c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801a680:	2b30      	cmp	r3, #48	; 0x30
 801a682:	d0f8      	beq.n	801a676 <_dtoa_r+0x62e>
 801a684:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801a688:	e04a      	b.n	801a720 <_dtoa_r+0x6d8>
 801a68a:	bf00      	nop
 801a68c:	0801f2b0 	.word	0x0801f2b0
 801a690:	0801f288 	.word	0x0801f288
 801a694:	3ff00000 	.word	0x3ff00000
 801a698:	40240000 	.word	0x40240000
 801a69c:	401c0000 	.word	0x401c0000
 801a6a0:	40140000 	.word	0x40140000
 801a6a4:	3fe00000 	.word	0x3fe00000
 801a6a8:	4baf      	ldr	r3, [pc, #700]	; (801a968 <_dtoa_r+0x920>)
 801a6aa:	f7e5 ffc5 	bl	8000638 <__aeabi_dmul>
 801a6ae:	4606      	mov	r6, r0
 801a6b0:	460f      	mov	r7, r1
 801a6b2:	e7ac      	b.n	801a60e <_dtoa_r+0x5c6>
 801a6b4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801a6b8:	9d00      	ldr	r5, [sp, #0]
 801a6ba:	4642      	mov	r2, r8
 801a6bc:	464b      	mov	r3, r9
 801a6be:	4630      	mov	r0, r6
 801a6c0:	4639      	mov	r1, r7
 801a6c2:	f7e6 f8e3 	bl	800088c <__aeabi_ddiv>
 801a6c6:	f7e6 fa67 	bl	8000b98 <__aeabi_d2iz>
 801a6ca:	9002      	str	r0, [sp, #8]
 801a6cc:	f7e5 ff4a 	bl	8000564 <__aeabi_i2d>
 801a6d0:	4642      	mov	r2, r8
 801a6d2:	464b      	mov	r3, r9
 801a6d4:	f7e5 ffb0 	bl	8000638 <__aeabi_dmul>
 801a6d8:	4602      	mov	r2, r0
 801a6da:	460b      	mov	r3, r1
 801a6dc:	4630      	mov	r0, r6
 801a6de:	4639      	mov	r1, r7
 801a6e0:	f7e5 fdf2 	bl	80002c8 <__aeabi_dsub>
 801a6e4:	9e02      	ldr	r6, [sp, #8]
 801a6e6:	9f01      	ldr	r7, [sp, #4]
 801a6e8:	3630      	adds	r6, #48	; 0x30
 801a6ea:	f805 6b01 	strb.w	r6, [r5], #1
 801a6ee:	9e00      	ldr	r6, [sp, #0]
 801a6f0:	1bae      	subs	r6, r5, r6
 801a6f2:	42b7      	cmp	r7, r6
 801a6f4:	4602      	mov	r2, r0
 801a6f6:	460b      	mov	r3, r1
 801a6f8:	d137      	bne.n	801a76a <_dtoa_r+0x722>
 801a6fa:	f7e5 fde7 	bl	80002cc <__adddf3>
 801a6fe:	4642      	mov	r2, r8
 801a700:	464b      	mov	r3, r9
 801a702:	4606      	mov	r6, r0
 801a704:	460f      	mov	r7, r1
 801a706:	f7e6 fa27 	bl	8000b58 <__aeabi_dcmpgt>
 801a70a:	b9c8      	cbnz	r0, 801a740 <_dtoa_r+0x6f8>
 801a70c:	4642      	mov	r2, r8
 801a70e:	464b      	mov	r3, r9
 801a710:	4630      	mov	r0, r6
 801a712:	4639      	mov	r1, r7
 801a714:	f7e6 f9f8 	bl	8000b08 <__aeabi_dcmpeq>
 801a718:	b110      	cbz	r0, 801a720 <_dtoa_r+0x6d8>
 801a71a:	9b02      	ldr	r3, [sp, #8]
 801a71c:	07d9      	lsls	r1, r3, #31
 801a71e:	d40f      	bmi.n	801a740 <_dtoa_r+0x6f8>
 801a720:	4620      	mov	r0, r4
 801a722:	4659      	mov	r1, fp
 801a724:	f001 f88e 	bl	801b844 <_Bfree>
 801a728:	2300      	movs	r3, #0
 801a72a:	702b      	strb	r3, [r5, #0]
 801a72c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a72e:	f10a 0001 	add.w	r0, sl, #1
 801a732:	6018      	str	r0, [r3, #0]
 801a734:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a736:	2b00      	cmp	r3, #0
 801a738:	f43f acd8 	beq.w	801a0ec <_dtoa_r+0xa4>
 801a73c:	601d      	str	r5, [r3, #0]
 801a73e:	e4d5      	b.n	801a0ec <_dtoa_r+0xa4>
 801a740:	f8cd a01c 	str.w	sl, [sp, #28]
 801a744:	462b      	mov	r3, r5
 801a746:	461d      	mov	r5, r3
 801a748:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a74c:	2a39      	cmp	r2, #57	; 0x39
 801a74e:	d108      	bne.n	801a762 <_dtoa_r+0x71a>
 801a750:	9a00      	ldr	r2, [sp, #0]
 801a752:	429a      	cmp	r2, r3
 801a754:	d1f7      	bne.n	801a746 <_dtoa_r+0x6fe>
 801a756:	9a07      	ldr	r2, [sp, #28]
 801a758:	9900      	ldr	r1, [sp, #0]
 801a75a:	3201      	adds	r2, #1
 801a75c:	9207      	str	r2, [sp, #28]
 801a75e:	2230      	movs	r2, #48	; 0x30
 801a760:	700a      	strb	r2, [r1, #0]
 801a762:	781a      	ldrb	r2, [r3, #0]
 801a764:	3201      	adds	r2, #1
 801a766:	701a      	strb	r2, [r3, #0]
 801a768:	e78c      	b.n	801a684 <_dtoa_r+0x63c>
 801a76a:	4b7f      	ldr	r3, [pc, #508]	; (801a968 <_dtoa_r+0x920>)
 801a76c:	2200      	movs	r2, #0
 801a76e:	f7e5 ff63 	bl	8000638 <__aeabi_dmul>
 801a772:	2200      	movs	r2, #0
 801a774:	2300      	movs	r3, #0
 801a776:	4606      	mov	r6, r0
 801a778:	460f      	mov	r7, r1
 801a77a:	f7e6 f9c5 	bl	8000b08 <__aeabi_dcmpeq>
 801a77e:	2800      	cmp	r0, #0
 801a780:	d09b      	beq.n	801a6ba <_dtoa_r+0x672>
 801a782:	e7cd      	b.n	801a720 <_dtoa_r+0x6d8>
 801a784:	9a08      	ldr	r2, [sp, #32]
 801a786:	2a00      	cmp	r2, #0
 801a788:	f000 80c4 	beq.w	801a914 <_dtoa_r+0x8cc>
 801a78c:	9a05      	ldr	r2, [sp, #20]
 801a78e:	2a01      	cmp	r2, #1
 801a790:	f300 80a8 	bgt.w	801a8e4 <_dtoa_r+0x89c>
 801a794:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a796:	2a00      	cmp	r2, #0
 801a798:	f000 80a0 	beq.w	801a8dc <_dtoa_r+0x894>
 801a79c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801a7a0:	9e06      	ldr	r6, [sp, #24]
 801a7a2:	4645      	mov	r5, r8
 801a7a4:	9a04      	ldr	r2, [sp, #16]
 801a7a6:	2101      	movs	r1, #1
 801a7a8:	441a      	add	r2, r3
 801a7aa:	4620      	mov	r0, r4
 801a7ac:	4498      	add	r8, r3
 801a7ae:	9204      	str	r2, [sp, #16]
 801a7b0:	f001 f94e 	bl	801ba50 <__i2b>
 801a7b4:	4607      	mov	r7, r0
 801a7b6:	2d00      	cmp	r5, #0
 801a7b8:	dd0b      	ble.n	801a7d2 <_dtoa_r+0x78a>
 801a7ba:	9b04      	ldr	r3, [sp, #16]
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	dd08      	ble.n	801a7d2 <_dtoa_r+0x78a>
 801a7c0:	42ab      	cmp	r3, r5
 801a7c2:	9a04      	ldr	r2, [sp, #16]
 801a7c4:	bfa8      	it	ge
 801a7c6:	462b      	movge	r3, r5
 801a7c8:	eba8 0803 	sub.w	r8, r8, r3
 801a7cc:	1aed      	subs	r5, r5, r3
 801a7ce:	1ad3      	subs	r3, r2, r3
 801a7d0:	9304      	str	r3, [sp, #16]
 801a7d2:	9b06      	ldr	r3, [sp, #24]
 801a7d4:	b1fb      	cbz	r3, 801a816 <_dtoa_r+0x7ce>
 801a7d6:	9b08      	ldr	r3, [sp, #32]
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	f000 809f 	beq.w	801a91c <_dtoa_r+0x8d4>
 801a7de:	2e00      	cmp	r6, #0
 801a7e0:	dd11      	ble.n	801a806 <_dtoa_r+0x7be>
 801a7e2:	4639      	mov	r1, r7
 801a7e4:	4632      	mov	r2, r6
 801a7e6:	4620      	mov	r0, r4
 801a7e8:	f001 f9ee 	bl	801bbc8 <__pow5mult>
 801a7ec:	465a      	mov	r2, fp
 801a7ee:	4601      	mov	r1, r0
 801a7f0:	4607      	mov	r7, r0
 801a7f2:	4620      	mov	r0, r4
 801a7f4:	f001 f942 	bl	801ba7c <__multiply>
 801a7f8:	4659      	mov	r1, fp
 801a7fa:	9007      	str	r0, [sp, #28]
 801a7fc:	4620      	mov	r0, r4
 801a7fe:	f001 f821 	bl	801b844 <_Bfree>
 801a802:	9b07      	ldr	r3, [sp, #28]
 801a804:	469b      	mov	fp, r3
 801a806:	9b06      	ldr	r3, [sp, #24]
 801a808:	1b9a      	subs	r2, r3, r6
 801a80a:	d004      	beq.n	801a816 <_dtoa_r+0x7ce>
 801a80c:	4659      	mov	r1, fp
 801a80e:	4620      	mov	r0, r4
 801a810:	f001 f9da 	bl	801bbc8 <__pow5mult>
 801a814:	4683      	mov	fp, r0
 801a816:	2101      	movs	r1, #1
 801a818:	4620      	mov	r0, r4
 801a81a:	f001 f919 	bl	801ba50 <__i2b>
 801a81e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a820:	2b00      	cmp	r3, #0
 801a822:	4606      	mov	r6, r0
 801a824:	dd7c      	ble.n	801a920 <_dtoa_r+0x8d8>
 801a826:	461a      	mov	r2, r3
 801a828:	4601      	mov	r1, r0
 801a82a:	4620      	mov	r0, r4
 801a82c:	f001 f9cc 	bl	801bbc8 <__pow5mult>
 801a830:	9b05      	ldr	r3, [sp, #20]
 801a832:	2b01      	cmp	r3, #1
 801a834:	4606      	mov	r6, r0
 801a836:	dd76      	ble.n	801a926 <_dtoa_r+0x8de>
 801a838:	2300      	movs	r3, #0
 801a83a:	9306      	str	r3, [sp, #24]
 801a83c:	6933      	ldr	r3, [r6, #16]
 801a83e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801a842:	6918      	ldr	r0, [r3, #16]
 801a844:	f001 f8b4 	bl	801b9b0 <__hi0bits>
 801a848:	f1c0 0020 	rsb	r0, r0, #32
 801a84c:	9b04      	ldr	r3, [sp, #16]
 801a84e:	4418      	add	r0, r3
 801a850:	f010 001f 	ands.w	r0, r0, #31
 801a854:	f000 8086 	beq.w	801a964 <_dtoa_r+0x91c>
 801a858:	f1c0 0320 	rsb	r3, r0, #32
 801a85c:	2b04      	cmp	r3, #4
 801a85e:	dd7f      	ble.n	801a960 <_dtoa_r+0x918>
 801a860:	f1c0 001c 	rsb	r0, r0, #28
 801a864:	9b04      	ldr	r3, [sp, #16]
 801a866:	4403      	add	r3, r0
 801a868:	4480      	add	r8, r0
 801a86a:	4405      	add	r5, r0
 801a86c:	9304      	str	r3, [sp, #16]
 801a86e:	f1b8 0f00 	cmp.w	r8, #0
 801a872:	dd05      	ble.n	801a880 <_dtoa_r+0x838>
 801a874:	4659      	mov	r1, fp
 801a876:	4642      	mov	r2, r8
 801a878:	4620      	mov	r0, r4
 801a87a:	f001 f9ff 	bl	801bc7c <__lshift>
 801a87e:	4683      	mov	fp, r0
 801a880:	9b04      	ldr	r3, [sp, #16]
 801a882:	2b00      	cmp	r3, #0
 801a884:	dd05      	ble.n	801a892 <_dtoa_r+0x84a>
 801a886:	4631      	mov	r1, r6
 801a888:	461a      	mov	r2, r3
 801a88a:	4620      	mov	r0, r4
 801a88c:	f001 f9f6 	bl	801bc7c <__lshift>
 801a890:	4606      	mov	r6, r0
 801a892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a894:	2b00      	cmp	r3, #0
 801a896:	d069      	beq.n	801a96c <_dtoa_r+0x924>
 801a898:	4631      	mov	r1, r6
 801a89a:	4658      	mov	r0, fp
 801a89c:	f001 fa5a 	bl	801bd54 <__mcmp>
 801a8a0:	2800      	cmp	r0, #0
 801a8a2:	da63      	bge.n	801a96c <_dtoa_r+0x924>
 801a8a4:	2300      	movs	r3, #0
 801a8a6:	4659      	mov	r1, fp
 801a8a8:	220a      	movs	r2, #10
 801a8aa:	4620      	mov	r0, r4
 801a8ac:	f000 ffec 	bl	801b888 <__multadd>
 801a8b0:	9b08      	ldr	r3, [sp, #32]
 801a8b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a8b6:	4683      	mov	fp, r0
 801a8b8:	2b00      	cmp	r3, #0
 801a8ba:	f000 818f 	beq.w	801abdc <_dtoa_r+0xb94>
 801a8be:	4639      	mov	r1, r7
 801a8c0:	2300      	movs	r3, #0
 801a8c2:	220a      	movs	r2, #10
 801a8c4:	4620      	mov	r0, r4
 801a8c6:	f000 ffdf 	bl	801b888 <__multadd>
 801a8ca:	f1b9 0f00 	cmp.w	r9, #0
 801a8ce:	4607      	mov	r7, r0
 801a8d0:	f300 808e 	bgt.w	801a9f0 <_dtoa_r+0x9a8>
 801a8d4:	9b05      	ldr	r3, [sp, #20]
 801a8d6:	2b02      	cmp	r3, #2
 801a8d8:	dc50      	bgt.n	801a97c <_dtoa_r+0x934>
 801a8da:	e089      	b.n	801a9f0 <_dtoa_r+0x9a8>
 801a8dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a8de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801a8e2:	e75d      	b.n	801a7a0 <_dtoa_r+0x758>
 801a8e4:	9b01      	ldr	r3, [sp, #4]
 801a8e6:	1e5e      	subs	r6, r3, #1
 801a8e8:	9b06      	ldr	r3, [sp, #24]
 801a8ea:	42b3      	cmp	r3, r6
 801a8ec:	bfbf      	itttt	lt
 801a8ee:	9b06      	ldrlt	r3, [sp, #24]
 801a8f0:	9606      	strlt	r6, [sp, #24]
 801a8f2:	1af2      	sublt	r2, r6, r3
 801a8f4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801a8f6:	bfb6      	itet	lt
 801a8f8:	189b      	addlt	r3, r3, r2
 801a8fa:	1b9e      	subge	r6, r3, r6
 801a8fc:	930d      	strlt	r3, [sp, #52]	; 0x34
 801a8fe:	9b01      	ldr	r3, [sp, #4]
 801a900:	bfb8      	it	lt
 801a902:	2600      	movlt	r6, #0
 801a904:	2b00      	cmp	r3, #0
 801a906:	bfb5      	itete	lt
 801a908:	eba8 0503 	sublt.w	r5, r8, r3
 801a90c:	9b01      	ldrge	r3, [sp, #4]
 801a90e:	2300      	movlt	r3, #0
 801a910:	4645      	movge	r5, r8
 801a912:	e747      	b.n	801a7a4 <_dtoa_r+0x75c>
 801a914:	9e06      	ldr	r6, [sp, #24]
 801a916:	9f08      	ldr	r7, [sp, #32]
 801a918:	4645      	mov	r5, r8
 801a91a:	e74c      	b.n	801a7b6 <_dtoa_r+0x76e>
 801a91c:	9a06      	ldr	r2, [sp, #24]
 801a91e:	e775      	b.n	801a80c <_dtoa_r+0x7c4>
 801a920:	9b05      	ldr	r3, [sp, #20]
 801a922:	2b01      	cmp	r3, #1
 801a924:	dc18      	bgt.n	801a958 <_dtoa_r+0x910>
 801a926:	9b02      	ldr	r3, [sp, #8]
 801a928:	b9b3      	cbnz	r3, 801a958 <_dtoa_r+0x910>
 801a92a:	9b03      	ldr	r3, [sp, #12]
 801a92c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a930:	b9a3      	cbnz	r3, 801a95c <_dtoa_r+0x914>
 801a932:	9b03      	ldr	r3, [sp, #12]
 801a934:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a938:	0d1b      	lsrs	r3, r3, #20
 801a93a:	051b      	lsls	r3, r3, #20
 801a93c:	b12b      	cbz	r3, 801a94a <_dtoa_r+0x902>
 801a93e:	9b04      	ldr	r3, [sp, #16]
 801a940:	3301      	adds	r3, #1
 801a942:	9304      	str	r3, [sp, #16]
 801a944:	f108 0801 	add.w	r8, r8, #1
 801a948:	2301      	movs	r3, #1
 801a94a:	9306      	str	r3, [sp, #24]
 801a94c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a94e:	2b00      	cmp	r3, #0
 801a950:	f47f af74 	bne.w	801a83c <_dtoa_r+0x7f4>
 801a954:	2001      	movs	r0, #1
 801a956:	e779      	b.n	801a84c <_dtoa_r+0x804>
 801a958:	2300      	movs	r3, #0
 801a95a:	e7f6      	b.n	801a94a <_dtoa_r+0x902>
 801a95c:	9b02      	ldr	r3, [sp, #8]
 801a95e:	e7f4      	b.n	801a94a <_dtoa_r+0x902>
 801a960:	d085      	beq.n	801a86e <_dtoa_r+0x826>
 801a962:	4618      	mov	r0, r3
 801a964:	301c      	adds	r0, #28
 801a966:	e77d      	b.n	801a864 <_dtoa_r+0x81c>
 801a968:	40240000 	.word	0x40240000
 801a96c:	9b01      	ldr	r3, [sp, #4]
 801a96e:	2b00      	cmp	r3, #0
 801a970:	dc38      	bgt.n	801a9e4 <_dtoa_r+0x99c>
 801a972:	9b05      	ldr	r3, [sp, #20]
 801a974:	2b02      	cmp	r3, #2
 801a976:	dd35      	ble.n	801a9e4 <_dtoa_r+0x99c>
 801a978:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801a97c:	f1b9 0f00 	cmp.w	r9, #0
 801a980:	d10d      	bne.n	801a99e <_dtoa_r+0x956>
 801a982:	4631      	mov	r1, r6
 801a984:	464b      	mov	r3, r9
 801a986:	2205      	movs	r2, #5
 801a988:	4620      	mov	r0, r4
 801a98a:	f000 ff7d 	bl	801b888 <__multadd>
 801a98e:	4601      	mov	r1, r0
 801a990:	4606      	mov	r6, r0
 801a992:	4658      	mov	r0, fp
 801a994:	f001 f9de 	bl	801bd54 <__mcmp>
 801a998:	2800      	cmp	r0, #0
 801a99a:	f73f adbd 	bgt.w	801a518 <_dtoa_r+0x4d0>
 801a99e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9a0:	9d00      	ldr	r5, [sp, #0]
 801a9a2:	ea6f 0a03 	mvn.w	sl, r3
 801a9a6:	f04f 0800 	mov.w	r8, #0
 801a9aa:	4631      	mov	r1, r6
 801a9ac:	4620      	mov	r0, r4
 801a9ae:	f000 ff49 	bl	801b844 <_Bfree>
 801a9b2:	2f00      	cmp	r7, #0
 801a9b4:	f43f aeb4 	beq.w	801a720 <_dtoa_r+0x6d8>
 801a9b8:	f1b8 0f00 	cmp.w	r8, #0
 801a9bc:	d005      	beq.n	801a9ca <_dtoa_r+0x982>
 801a9be:	45b8      	cmp	r8, r7
 801a9c0:	d003      	beq.n	801a9ca <_dtoa_r+0x982>
 801a9c2:	4641      	mov	r1, r8
 801a9c4:	4620      	mov	r0, r4
 801a9c6:	f000 ff3d 	bl	801b844 <_Bfree>
 801a9ca:	4639      	mov	r1, r7
 801a9cc:	4620      	mov	r0, r4
 801a9ce:	f000 ff39 	bl	801b844 <_Bfree>
 801a9d2:	e6a5      	b.n	801a720 <_dtoa_r+0x6d8>
 801a9d4:	2600      	movs	r6, #0
 801a9d6:	4637      	mov	r7, r6
 801a9d8:	e7e1      	b.n	801a99e <_dtoa_r+0x956>
 801a9da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801a9dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801a9e0:	4637      	mov	r7, r6
 801a9e2:	e599      	b.n	801a518 <_dtoa_r+0x4d0>
 801a9e4:	9b08      	ldr	r3, [sp, #32]
 801a9e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	f000 80fd 	beq.w	801abea <_dtoa_r+0xba2>
 801a9f0:	2d00      	cmp	r5, #0
 801a9f2:	dd05      	ble.n	801aa00 <_dtoa_r+0x9b8>
 801a9f4:	4639      	mov	r1, r7
 801a9f6:	462a      	mov	r2, r5
 801a9f8:	4620      	mov	r0, r4
 801a9fa:	f001 f93f 	bl	801bc7c <__lshift>
 801a9fe:	4607      	mov	r7, r0
 801aa00:	9b06      	ldr	r3, [sp, #24]
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d05c      	beq.n	801aac0 <_dtoa_r+0xa78>
 801aa06:	6879      	ldr	r1, [r7, #4]
 801aa08:	4620      	mov	r0, r4
 801aa0a:	f000 fedb 	bl	801b7c4 <_Balloc>
 801aa0e:	4605      	mov	r5, r0
 801aa10:	b928      	cbnz	r0, 801aa1e <_dtoa_r+0x9d6>
 801aa12:	4b80      	ldr	r3, [pc, #512]	; (801ac14 <_dtoa_r+0xbcc>)
 801aa14:	4602      	mov	r2, r0
 801aa16:	f240 21ea 	movw	r1, #746	; 0x2ea
 801aa1a:	f7ff bb2e 	b.w	801a07a <_dtoa_r+0x32>
 801aa1e:	693a      	ldr	r2, [r7, #16]
 801aa20:	3202      	adds	r2, #2
 801aa22:	0092      	lsls	r2, r2, #2
 801aa24:	f107 010c 	add.w	r1, r7, #12
 801aa28:	300c      	adds	r0, #12
 801aa2a:	f7fc fbeb 	bl	8017204 <memcpy>
 801aa2e:	2201      	movs	r2, #1
 801aa30:	4629      	mov	r1, r5
 801aa32:	4620      	mov	r0, r4
 801aa34:	f001 f922 	bl	801bc7c <__lshift>
 801aa38:	9b00      	ldr	r3, [sp, #0]
 801aa3a:	3301      	adds	r3, #1
 801aa3c:	9301      	str	r3, [sp, #4]
 801aa3e:	9b00      	ldr	r3, [sp, #0]
 801aa40:	444b      	add	r3, r9
 801aa42:	9307      	str	r3, [sp, #28]
 801aa44:	9b02      	ldr	r3, [sp, #8]
 801aa46:	f003 0301 	and.w	r3, r3, #1
 801aa4a:	46b8      	mov	r8, r7
 801aa4c:	9306      	str	r3, [sp, #24]
 801aa4e:	4607      	mov	r7, r0
 801aa50:	9b01      	ldr	r3, [sp, #4]
 801aa52:	4631      	mov	r1, r6
 801aa54:	3b01      	subs	r3, #1
 801aa56:	4658      	mov	r0, fp
 801aa58:	9302      	str	r3, [sp, #8]
 801aa5a:	f7ff fa69 	bl	8019f30 <quorem>
 801aa5e:	4603      	mov	r3, r0
 801aa60:	3330      	adds	r3, #48	; 0x30
 801aa62:	9004      	str	r0, [sp, #16]
 801aa64:	4641      	mov	r1, r8
 801aa66:	4658      	mov	r0, fp
 801aa68:	9308      	str	r3, [sp, #32]
 801aa6a:	f001 f973 	bl	801bd54 <__mcmp>
 801aa6e:	463a      	mov	r2, r7
 801aa70:	4681      	mov	r9, r0
 801aa72:	4631      	mov	r1, r6
 801aa74:	4620      	mov	r0, r4
 801aa76:	f001 f989 	bl	801bd8c <__mdiff>
 801aa7a:	68c2      	ldr	r2, [r0, #12]
 801aa7c:	9b08      	ldr	r3, [sp, #32]
 801aa7e:	4605      	mov	r5, r0
 801aa80:	bb02      	cbnz	r2, 801aac4 <_dtoa_r+0xa7c>
 801aa82:	4601      	mov	r1, r0
 801aa84:	4658      	mov	r0, fp
 801aa86:	f001 f965 	bl	801bd54 <__mcmp>
 801aa8a:	9b08      	ldr	r3, [sp, #32]
 801aa8c:	4602      	mov	r2, r0
 801aa8e:	4629      	mov	r1, r5
 801aa90:	4620      	mov	r0, r4
 801aa92:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801aa96:	f000 fed5 	bl	801b844 <_Bfree>
 801aa9a:	9b05      	ldr	r3, [sp, #20]
 801aa9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aa9e:	9d01      	ldr	r5, [sp, #4]
 801aaa0:	ea43 0102 	orr.w	r1, r3, r2
 801aaa4:	9b06      	ldr	r3, [sp, #24]
 801aaa6:	430b      	orrs	r3, r1
 801aaa8:	9b08      	ldr	r3, [sp, #32]
 801aaaa:	d10d      	bne.n	801aac8 <_dtoa_r+0xa80>
 801aaac:	2b39      	cmp	r3, #57	; 0x39
 801aaae:	d029      	beq.n	801ab04 <_dtoa_r+0xabc>
 801aab0:	f1b9 0f00 	cmp.w	r9, #0
 801aab4:	dd01      	ble.n	801aaba <_dtoa_r+0xa72>
 801aab6:	9b04      	ldr	r3, [sp, #16]
 801aab8:	3331      	adds	r3, #49	; 0x31
 801aaba:	9a02      	ldr	r2, [sp, #8]
 801aabc:	7013      	strb	r3, [r2, #0]
 801aabe:	e774      	b.n	801a9aa <_dtoa_r+0x962>
 801aac0:	4638      	mov	r0, r7
 801aac2:	e7b9      	b.n	801aa38 <_dtoa_r+0x9f0>
 801aac4:	2201      	movs	r2, #1
 801aac6:	e7e2      	b.n	801aa8e <_dtoa_r+0xa46>
 801aac8:	f1b9 0f00 	cmp.w	r9, #0
 801aacc:	db06      	blt.n	801aadc <_dtoa_r+0xa94>
 801aace:	9905      	ldr	r1, [sp, #20]
 801aad0:	ea41 0909 	orr.w	r9, r1, r9
 801aad4:	9906      	ldr	r1, [sp, #24]
 801aad6:	ea59 0101 	orrs.w	r1, r9, r1
 801aada:	d120      	bne.n	801ab1e <_dtoa_r+0xad6>
 801aadc:	2a00      	cmp	r2, #0
 801aade:	ddec      	ble.n	801aaba <_dtoa_r+0xa72>
 801aae0:	4659      	mov	r1, fp
 801aae2:	2201      	movs	r2, #1
 801aae4:	4620      	mov	r0, r4
 801aae6:	9301      	str	r3, [sp, #4]
 801aae8:	f001 f8c8 	bl	801bc7c <__lshift>
 801aaec:	4631      	mov	r1, r6
 801aaee:	4683      	mov	fp, r0
 801aaf0:	f001 f930 	bl	801bd54 <__mcmp>
 801aaf4:	2800      	cmp	r0, #0
 801aaf6:	9b01      	ldr	r3, [sp, #4]
 801aaf8:	dc02      	bgt.n	801ab00 <_dtoa_r+0xab8>
 801aafa:	d1de      	bne.n	801aaba <_dtoa_r+0xa72>
 801aafc:	07da      	lsls	r2, r3, #31
 801aafe:	d5dc      	bpl.n	801aaba <_dtoa_r+0xa72>
 801ab00:	2b39      	cmp	r3, #57	; 0x39
 801ab02:	d1d8      	bne.n	801aab6 <_dtoa_r+0xa6e>
 801ab04:	9a02      	ldr	r2, [sp, #8]
 801ab06:	2339      	movs	r3, #57	; 0x39
 801ab08:	7013      	strb	r3, [r2, #0]
 801ab0a:	462b      	mov	r3, r5
 801ab0c:	461d      	mov	r5, r3
 801ab0e:	3b01      	subs	r3, #1
 801ab10:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801ab14:	2a39      	cmp	r2, #57	; 0x39
 801ab16:	d050      	beq.n	801abba <_dtoa_r+0xb72>
 801ab18:	3201      	adds	r2, #1
 801ab1a:	701a      	strb	r2, [r3, #0]
 801ab1c:	e745      	b.n	801a9aa <_dtoa_r+0x962>
 801ab1e:	2a00      	cmp	r2, #0
 801ab20:	dd03      	ble.n	801ab2a <_dtoa_r+0xae2>
 801ab22:	2b39      	cmp	r3, #57	; 0x39
 801ab24:	d0ee      	beq.n	801ab04 <_dtoa_r+0xabc>
 801ab26:	3301      	adds	r3, #1
 801ab28:	e7c7      	b.n	801aaba <_dtoa_r+0xa72>
 801ab2a:	9a01      	ldr	r2, [sp, #4]
 801ab2c:	9907      	ldr	r1, [sp, #28]
 801ab2e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ab32:	428a      	cmp	r2, r1
 801ab34:	d02a      	beq.n	801ab8c <_dtoa_r+0xb44>
 801ab36:	4659      	mov	r1, fp
 801ab38:	2300      	movs	r3, #0
 801ab3a:	220a      	movs	r2, #10
 801ab3c:	4620      	mov	r0, r4
 801ab3e:	f000 fea3 	bl	801b888 <__multadd>
 801ab42:	45b8      	cmp	r8, r7
 801ab44:	4683      	mov	fp, r0
 801ab46:	f04f 0300 	mov.w	r3, #0
 801ab4a:	f04f 020a 	mov.w	r2, #10
 801ab4e:	4641      	mov	r1, r8
 801ab50:	4620      	mov	r0, r4
 801ab52:	d107      	bne.n	801ab64 <_dtoa_r+0xb1c>
 801ab54:	f000 fe98 	bl	801b888 <__multadd>
 801ab58:	4680      	mov	r8, r0
 801ab5a:	4607      	mov	r7, r0
 801ab5c:	9b01      	ldr	r3, [sp, #4]
 801ab5e:	3301      	adds	r3, #1
 801ab60:	9301      	str	r3, [sp, #4]
 801ab62:	e775      	b.n	801aa50 <_dtoa_r+0xa08>
 801ab64:	f000 fe90 	bl	801b888 <__multadd>
 801ab68:	4639      	mov	r1, r7
 801ab6a:	4680      	mov	r8, r0
 801ab6c:	2300      	movs	r3, #0
 801ab6e:	220a      	movs	r2, #10
 801ab70:	4620      	mov	r0, r4
 801ab72:	f000 fe89 	bl	801b888 <__multadd>
 801ab76:	4607      	mov	r7, r0
 801ab78:	e7f0      	b.n	801ab5c <_dtoa_r+0xb14>
 801ab7a:	f1b9 0f00 	cmp.w	r9, #0
 801ab7e:	9a00      	ldr	r2, [sp, #0]
 801ab80:	bfcc      	ite	gt
 801ab82:	464d      	movgt	r5, r9
 801ab84:	2501      	movle	r5, #1
 801ab86:	4415      	add	r5, r2
 801ab88:	f04f 0800 	mov.w	r8, #0
 801ab8c:	4659      	mov	r1, fp
 801ab8e:	2201      	movs	r2, #1
 801ab90:	4620      	mov	r0, r4
 801ab92:	9301      	str	r3, [sp, #4]
 801ab94:	f001 f872 	bl	801bc7c <__lshift>
 801ab98:	4631      	mov	r1, r6
 801ab9a:	4683      	mov	fp, r0
 801ab9c:	f001 f8da 	bl	801bd54 <__mcmp>
 801aba0:	2800      	cmp	r0, #0
 801aba2:	dcb2      	bgt.n	801ab0a <_dtoa_r+0xac2>
 801aba4:	d102      	bne.n	801abac <_dtoa_r+0xb64>
 801aba6:	9b01      	ldr	r3, [sp, #4]
 801aba8:	07db      	lsls	r3, r3, #31
 801abaa:	d4ae      	bmi.n	801ab0a <_dtoa_r+0xac2>
 801abac:	462b      	mov	r3, r5
 801abae:	461d      	mov	r5, r3
 801abb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801abb4:	2a30      	cmp	r2, #48	; 0x30
 801abb6:	d0fa      	beq.n	801abae <_dtoa_r+0xb66>
 801abb8:	e6f7      	b.n	801a9aa <_dtoa_r+0x962>
 801abba:	9a00      	ldr	r2, [sp, #0]
 801abbc:	429a      	cmp	r2, r3
 801abbe:	d1a5      	bne.n	801ab0c <_dtoa_r+0xac4>
 801abc0:	f10a 0a01 	add.w	sl, sl, #1
 801abc4:	2331      	movs	r3, #49	; 0x31
 801abc6:	e779      	b.n	801aabc <_dtoa_r+0xa74>
 801abc8:	4b13      	ldr	r3, [pc, #76]	; (801ac18 <_dtoa_r+0xbd0>)
 801abca:	f7ff baaf 	b.w	801a12c <_dtoa_r+0xe4>
 801abce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801abd0:	2b00      	cmp	r3, #0
 801abd2:	f47f aa86 	bne.w	801a0e2 <_dtoa_r+0x9a>
 801abd6:	4b11      	ldr	r3, [pc, #68]	; (801ac1c <_dtoa_r+0xbd4>)
 801abd8:	f7ff baa8 	b.w	801a12c <_dtoa_r+0xe4>
 801abdc:	f1b9 0f00 	cmp.w	r9, #0
 801abe0:	dc03      	bgt.n	801abea <_dtoa_r+0xba2>
 801abe2:	9b05      	ldr	r3, [sp, #20]
 801abe4:	2b02      	cmp	r3, #2
 801abe6:	f73f aec9 	bgt.w	801a97c <_dtoa_r+0x934>
 801abea:	9d00      	ldr	r5, [sp, #0]
 801abec:	4631      	mov	r1, r6
 801abee:	4658      	mov	r0, fp
 801abf0:	f7ff f99e 	bl	8019f30 <quorem>
 801abf4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801abf8:	f805 3b01 	strb.w	r3, [r5], #1
 801abfc:	9a00      	ldr	r2, [sp, #0]
 801abfe:	1aaa      	subs	r2, r5, r2
 801ac00:	4591      	cmp	r9, r2
 801ac02:	ddba      	ble.n	801ab7a <_dtoa_r+0xb32>
 801ac04:	4659      	mov	r1, fp
 801ac06:	2300      	movs	r3, #0
 801ac08:	220a      	movs	r2, #10
 801ac0a:	4620      	mov	r0, r4
 801ac0c:	f000 fe3c 	bl	801b888 <__multadd>
 801ac10:	4683      	mov	fp, r0
 801ac12:	e7eb      	b.n	801abec <_dtoa_r+0xba4>
 801ac14:	0801f195 	.word	0x0801f195
 801ac18:	0801f399 	.word	0x0801f399
 801ac1c:	0801f129 	.word	0x0801f129

0801ac20 <__sflush_r>:
 801ac20:	898a      	ldrh	r2, [r1, #12]
 801ac22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac26:	4605      	mov	r5, r0
 801ac28:	0710      	lsls	r0, r2, #28
 801ac2a:	460c      	mov	r4, r1
 801ac2c:	d458      	bmi.n	801ace0 <__sflush_r+0xc0>
 801ac2e:	684b      	ldr	r3, [r1, #4]
 801ac30:	2b00      	cmp	r3, #0
 801ac32:	dc05      	bgt.n	801ac40 <__sflush_r+0x20>
 801ac34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ac36:	2b00      	cmp	r3, #0
 801ac38:	dc02      	bgt.n	801ac40 <__sflush_r+0x20>
 801ac3a:	2000      	movs	r0, #0
 801ac3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ac42:	2e00      	cmp	r6, #0
 801ac44:	d0f9      	beq.n	801ac3a <__sflush_r+0x1a>
 801ac46:	2300      	movs	r3, #0
 801ac48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ac4c:	682f      	ldr	r7, [r5, #0]
 801ac4e:	602b      	str	r3, [r5, #0]
 801ac50:	d032      	beq.n	801acb8 <__sflush_r+0x98>
 801ac52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ac54:	89a3      	ldrh	r3, [r4, #12]
 801ac56:	075a      	lsls	r2, r3, #29
 801ac58:	d505      	bpl.n	801ac66 <__sflush_r+0x46>
 801ac5a:	6863      	ldr	r3, [r4, #4]
 801ac5c:	1ac0      	subs	r0, r0, r3
 801ac5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ac60:	b10b      	cbz	r3, 801ac66 <__sflush_r+0x46>
 801ac62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ac64:	1ac0      	subs	r0, r0, r3
 801ac66:	2300      	movs	r3, #0
 801ac68:	4602      	mov	r2, r0
 801ac6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ac6c:	6a21      	ldr	r1, [r4, #32]
 801ac6e:	4628      	mov	r0, r5
 801ac70:	47b0      	blx	r6
 801ac72:	1c43      	adds	r3, r0, #1
 801ac74:	89a3      	ldrh	r3, [r4, #12]
 801ac76:	d106      	bne.n	801ac86 <__sflush_r+0x66>
 801ac78:	6829      	ldr	r1, [r5, #0]
 801ac7a:	291d      	cmp	r1, #29
 801ac7c:	d82c      	bhi.n	801acd8 <__sflush_r+0xb8>
 801ac7e:	4a2a      	ldr	r2, [pc, #168]	; (801ad28 <__sflush_r+0x108>)
 801ac80:	40ca      	lsrs	r2, r1
 801ac82:	07d6      	lsls	r6, r2, #31
 801ac84:	d528      	bpl.n	801acd8 <__sflush_r+0xb8>
 801ac86:	2200      	movs	r2, #0
 801ac88:	6062      	str	r2, [r4, #4]
 801ac8a:	04d9      	lsls	r1, r3, #19
 801ac8c:	6922      	ldr	r2, [r4, #16]
 801ac8e:	6022      	str	r2, [r4, #0]
 801ac90:	d504      	bpl.n	801ac9c <__sflush_r+0x7c>
 801ac92:	1c42      	adds	r2, r0, #1
 801ac94:	d101      	bne.n	801ac9a <__sflush_r+0x7a>
 801ac96:	682b      	ldr	r3, [r5, #0]
 801ac98:	b903      	cbnz	r3, 801ac9c <__sflush_r+0x7c>
 801ac9a:	6560      	str	r0, [r4, #84]	; 0x54
 801ac9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ac9e:	602f      	str	r7, [r5, #0]
 801aca0:	2900      	cmp	r1, #0
 801aca2:	d0ca      	beq.n	801ac3a <__sflush_r+0x1a>
 801aca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801aca8:	4299      	cmp	r1, r3
 801acaa:	d002      	beq.n	801acb2 <__sflush_r+0x92>
 801acac:	4628      	mov	r0, r5
 801acae:	f7fc fd57 	bl	8017760 <_free_r>
 801acb2:	2000      	movs	r0, #0
 801acb4:	6360      	str	r0, [r4, #52]	; 0x34
 801acb6:	e7c1      	b.n	801ac3c <__sflush_r+0x1c>
 801acb8:	6a21      	ldr	r1, [r4, #32]
 801acba:	2301      	movs	r3, #1
 801acbc:	4628      	mov	r0, r5
 801acbe:	47b0      	blx	r6
 801acc0:	1c41      	adds	r1, r0, #1
 801acc2:	d1c7      	bne.n	801ac54 <__sflush_r+0x34>
 801acc4:	682b      	ldr	r3, [r5, #0]
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	d0c4      	beq.n	801ac54 <__sflush_r+0x34>
 801acca:	2b1d      	cmp	r3, #29
 801accc:	d001      	beq.n	801acd2 <__sflush_r+0xb2>
 801acce:	2b16      	cmp	r3, #22
 801acd0:	d101      	bne.n	801acd6 <__sflush_r+0xb6>
 801acd2:	602f      	str	r7, [r5, #0]
 801acd4:	e7b1      	b.n	801ac3a <__sflush_r+0x1a>
 801acd6:	89a3      	ldrh	r3, [r4, #12]
 801acd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801acdc:	81a3      	strh	r3, [r4, #12]
 801acde:	e7ad      	b.n	801ac3c <__sflush_r+0x1c>
 801ace0:	690f      	ldr	r7, [r1, #16]
 801ace2:	2f00      	cmp	r7, #0
 801ace4:	d0a9      	beq.n	801ac3a <__sflush_r+0x1a>
 801ace6:	0793      	lsls	r3, r2, #30
 801ace8:	680e      	ldr	r6, [r1, #0]
 801acea:	bf08      	it	eq
 801acec:	694b      	ldreq	r3, [r1, #20]
 801acee:	600f      	str	r7, [r1, #0]
 801acf0:	bf18      	it	ne
 801acf2:	2300      	movne	r3, #0
 801acf4:	eba6 0807 	sub.w	r8, r6, r7
 801acf8:	608b      	str	r3, [r1, #8]
 801acfa:	f1b8 0f00 	cmp.w	r8, #0
 801acfe:	dd9c      	ble.n	801ac3a <__sflush_r+0x1a>
 801ad00:	6a21      	ldr	r1, [r4, #32]
 801ad02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ad04:	4643      	mov	r3, r8
 801ad06:	463a      	mov	r2, r7
 801ad08:	4628      	mov	r0, r5
 801ad0a:	47b0      	blx	r6
 801ad0c:	2800      	cmp	r0, #0
 801ad0e:	dc06      	bgt.n	801ad1e <__sflush_r+0xfe>
 801ad10:	89a3      	ldrh	r3, [r4, #12]
 801ad12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ad16:	81a3      	strh	r3, [r4, #12]
 801ad18:	f04f 30ff 	mov.w	r0, #4294967295
 801ad1c:	e78e      	b.n	801ac3c <__sflush_r+0x1c>
 801ad1e:	4407      	add	r7, r0
 801ad20:	eba8 0800 	sub.w	r8, r8, r0
 801ad24:	e7e9      	b.n	801acfa <__sflush_r+0xda>
 801ad26:	bf00      	nop
 801ad28:	20400001 	.word	0x20400001

0801ad2c <_fflush_r>:
 801ad2c:	b538      	push	{r3, r4, r5, lr}
 801ad2e:	690b      	ldr	r3, [r1, #16]
 801ad30:	4605      	mov	r5, r0
 801ad32:	460c      	mov	r4, r1
 801ad34:	b913      	cbnz	r3, 801ad3c <_fflush_r+0x10>
 801ad36:	2500      	movs	r5, #0
 801ad38:	4628      	mov	r0, r5
 801ad3a:	bd38      	pop	{r3, r4, r5, pc}
 801ad3c:	b118      	cbz	r0, 801ad46 <_fflush_r+0x1a>
 801ad3e:	6983      	ldr	r3, [r0, #24]
 801ad40:	b90b      	cbnz	r3, 801ad46 <_fflush_r+0x1a>
 801ad42:	f7fc f86b 	bl	8016e1c <__sinit>
 801ad46:	4b14      	ldr	r3, [pc, #80]	; (801ad98 <_fflush_r+0x6c>)
 801ad48:	429c      	cmp	r4, r3
 801ad4a:	d11b      	bne.n	801ad84 <_fflush_r+0x58>
 801ad4c:	686c      	ldr	r4, [r5, #4]
 801ad4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ad52:	2b00      	cmp	r3, #0
 801ad54:	d0ef      	beq.n	801ad36 <_fflush_r+0xa>
 801ad56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ad58:	07d0      	lsls	r0, r2, #31
 801ad5a:	d404      	bmi.n	801ad66 <_fflush_r+0x3a>
 801ad5c:	0599      	lsls	r1, r3, #22
 801ad5e:	d402      	bmi.n	801ad66 <_fflush_r+0x3a>
 801ad60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ad62:	f7fc fa3b 	bl	80171dc <__retarget_lock_acquire_recursive>
 801ad66:	4628      	mov	r0, r5
 801ad68:	4621      	mov	r1, r4
 801ad6a:	f7ff ff59 	bl	801ac20 <__sflush_r>
 801ad6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ad70:	07da      	lsls	r2, r3, #31
 801ad72:	4605      	mov	r5, r0
 801ad74:	d4e0      	bmi.n	801ad38 <_fflush_r+0xc>
 801ad76:	89a3      	ldrh	r3, [r4, #12]
 801ad78:	059b      	lsls	r3, r3, #22
 801ad7a:	d4dd      	bmi.n	801ad38 <_fflush_r+0xc>
 801ad7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ad7e:	f7fc fa2f 	bl	80171e0 <__retarget_lock_release_recursive>
 801ad82:	e7d9      	b.n	801ad38 <_fflush_r+0xc>
 801ad84:	4b05      	ldr	r3, [pc, #20]	; (801ad9c <_fflush_r+0x70>)
 801ad86:	429c      	cmp	r4, r3
 801ad88:	d101      	bne.n	801ad8e <_fflush_r+0x62>
 801ad8a:	68ac      	ldr	r4, [r5, #8]
 801ad8c:	e7df      	b.n	801ad4e <_fflush_r+0x22>
 801ad8e:	4b04      	ldr	r3, [pc, #16]	; (801ada0 <_fflush_r+0x74>)
 801ad90:	429c      	cmp	r4, r3
 801ad92:	bf08      	it	eq
 801ad94:	68ec      	ldreq	r4, [r5, #12]
 801ad96:	e7da      	b.n	801ad4e <_fflush_r+0x22>
 801ad98:	0801ee4c 	.word	0x0801ee4c
 801ad9c:	0801ee6c 	.word	0x0801ee6c
 801ada0:	0801ee2c 	.word	0x0801ee2c

0801ada4 <fiprintf>:
 801ada4:	b40e      	push	{r1, r2, r3}
 801ada6:	b503      	push	{r0, r1, lr}
 801ada8:	4601      	mov	r1, r0
 801adaa:	ab03      	add	r3, sp, #12
 801adac:	4805      	ldr	r0, [pc, #20]	; (801adc4 <fiprintf+0x20>)
 801adae:	f853 2b04 	ldr.w	r2, [r3], #4
 801adb2:	6800      	ldr	r0, [r0, #0]
 801adb4:	9301      	str	r3, [sp, #4]
 801adb6:	f001 fd4d 	bl	801c854 <_vfiprintf_r>
 801adba:	b002      	add	sp, #8
 801adbc:	f85d eb04 	ldr.w	lr, [sp], #4
 801adc0:	b003      	add	sp, #12
 801adc2:	4770      	bx	lr
 801adc4:	20000084 	.word	0x20000084

0801adc8 <rshift>:
 801adc8:	6903      	ldr	r3, [r0, #16]
 801adca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801adce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801add2:	ea4f 1261 	mov.w	r2, r1, asr #5
 801add6:	f100 0414 	add.w	r4, r0, #20
 801adda:	dd45      	ble.n	801ae68 <rshift+0xa0>
 801addc:	f011 011f 	ands.w	r1, r1, #31
 801ade0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801ade4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801ade8:	d10c      	bne.n	801ae04 <rshift+0x3c>
 801adea:	f100 0710 	add.w	r7, r0, #16
 801adee:	4629      	mov	r1, r5
 801adf0:	42b1      	cmp	r1, r6
 801adf2:	d334      	bcc.n	801ae5e <rshift+0x96>
 801adf4:	1a9b      	subs	r3, r3, r2
 801adf6:	009b      	lsls	r3, r3, #2
 801adf8:	1eea      	subs	r2, r5, #3
 801adfa:	4296      	cmp	r6, r2
 801adfc:	bf38      	it	cc
 801adfe:	2300      	movcc	r3, #0
 801ae00:	4423      	add	r3, r4
 801ae02:	e015      	b.n	801ae30 <rshift+0x68>
 801ae04:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801ae08:	f1c1 0820 	rsb	r8, r1, #32
 801ae0c:	40cf      	lsrs	r7, r1
 801ae0e:	f105 0e04 	add.w	lr, r5, #4
 801ae12:	46a1      	mov	r9, r4
 801ae14:	4576      	cmp	r6, lr
 801ae16:	46f4      	mov	ip, lr
 801ae18:	d815      	bhi.n	801ae46 <rshift+0x7e>
 801ae1a:	1a9b      	subs	r3, r3, r2
 801ae1c:	009a      	lsls	r2, r3, #2
 801ae1e:	3a04      	subs	r2, #4
 801ae20:	3501      	adds	r5, #1
 801ae22:	42ae      	cmp	r6, r5
 801ae24:	bf38      	it	cc
 801ae26:	2200      	movcc	r2, #0
 801ae28:	18a3      	adds	r3, r4, r2
 801ae2a:	50a7      	str	r7, [r4, r2]
 801ae2c:	b107      	cbz	r7, 801ae30 <rshift+0x68>
 801ae2e:	3304      	adds	r3, #4
 801ae30:	1b1a      	subs	r2, r3, r4
 801ae32:	42a3      	cmp	r3, r4
 801ae34:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801ae38:	bf08      	it	eq
 801ae3a:	2300      	moveq	r3, #0
 801ae3c:	6102      	str	r2, [r0, #16]
 801ae3e:	bf08      	it	eq
 801ae40:	6143      	streq	r3, [r0, #20]
 801ae42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ae46:	f8dc c000 	ldr.w	ip, [ip]
 801ae4a:	fa0c fc08 	lsl.w	ip, ip, r8
 801ae4e:	ea4c 0707 	orr.w	r7, ip, r7
 801ae52:	f849 7b04 	str.w	r7, [r9], #4
 801ae56:	f85e 7b04 	ldr.w	r7, [lr], #4
 801ae5a:	40cf      	lsrs	r7, r1
 801ae5c:	e7da      	b.n	801ae14 <rshift+0x4c>
 801ae5e:	f851 cb04 	ldr.w	ip, [r1], #4
 801ae62:	f847 cf04 	str.w	ip, [r7, #4]!
 801ae66:	e7c3      	b.n	801adf0 <rshift+0x28>
 801ae68:	4623      	mov	r3, r4
 801ae6a:	e7e1      	b.n	801ae30 <rshift+0x68>

0801ae6c <__hexdig_fun>:
 801ae6c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801ae70:	2b09      	cmp	r3, #9
 801ae72:	d802      	bhi.n	801ae7a <__hexdig_fun+0xe>
 801ae74:	3820      	subs	r0, #32
 801ae76:	b2c0      	uxtb	r0, r0
 801ae78:	4770      	bx	lr
 801ae7a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801ae7e:	2b05      	cmp	r3, #5
 801ae80:	d801      	bhi.n	801ae86 <__hexdig_fun+0x1a>
 801ae82:	3847      	subs	r0, #71	; 0x47
 801ae84:	e7f7      	b.n	801ae76 <__hexdig_fun+0xa>
 801ae86:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801ae8a:	2b05      	cmp	r3, #5
 801ae8c:	d801      	bhi.n	801ae92 <__hexdig_fun+0x26>
 801ae8e:	3827      	subs	r0, #39	; 0x27
 801ae90:	e7f1      	b.n	801ae76 <__hexdig_fun+0xa>
 801ae92:	2000      	movs	r0, #0
 801ae94:	4770      	bx	lr
	...

0801ae98 <__gethex>:
 801ae98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae9c:	ed2d 8b02 	vpush	{d8}
 801aea0:	b089      	sub	sp, #36	; 0x24
 801aea2:	ee08 0a10 	vmov	s16, r0
 801aea6:	9304      	str	r3, [sp, #16]
 801aea8:	4bbc      	ldr	r3, [pc, #752]	; (801b19c <__gethex+0x304>)
 801aeaa:	681b      	ldr	r3, [r3, #0]
 801aeac:	9301      	str	r3, [sp, #4]
 801aeae:	4618      	mov	r0, r3
 801aeb0:	468b      	mov	fp, r1
 801aeb2:	4690      	mov	r8, r2
 801aeb4:	f7e5 f9a6 	bl	8000204 <strlen>
 801aeb8:	9b01      	ldr	r3, [sp, #4]
 801aeba:	f8db 2000 	ldr.w	r2, [fp]
 801aebe:	4403      	add	r3, r0
 801aec0:	4682      	mov	sl, r0
 801aec2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801aec6:	9305      	str	r3, [sp, #20]
 801aec8:	1c93      	adds	r3, r2, #2
 801aeca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801aece:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801aed2:	32fe      	adds	r2, #254	; 0xfe
 801aed4:	18d1      	adds	r1, r2, r3
 801aed6:	461f      	mov	r7, r3
 801aed8:	f813 0b01 	ldrb.w	r0, [r3], #1
 801aedc:	9100      	str	r1, [sp, #0]
 801aede:	2830      	cmp	r0, #48	; 0x30
 801aee0:	d0f8      	beq.n	801aed4 <__gethex+0x3c>
 801aee2:	f7ff ffc3 	bl	801ae6c <__hexdig_fun>
 801aee6:	4604      	mov	r4, r0
 801aee8:	2800      	cmp	r0, #0
 801aeea:	d13a      	bne.n	801af62 <__gethex+0xca>
 801aeec:	9901      	ldr	r1, [sp, #4]
 801aeee:	4652      	mov	r2, sl
 801aef0:	4638      	mov	r0, r7
 801aef2:	f7fd fce7 	bl	80188c4 <strncmp>
 801aef6:	4605      	mov	r5, r0
 801aef8:	2800      	cmp	r0, #0
 801aefa:	d168      	bne.n	801afce <__gethex+0x136>
 801aefc:	f817 000a 	ldrb.w	r0, [r7, sl]
 801af00:	eb07 060a 	add.w	r6, r7, sl
 801af04:	f7ff ffb2 	bl	801ae6c <__hexdig_fun>
 801af08:	2800      	cmp	r0, #0
 801af0a:	d062      	beq.n	801afd2 <__gethex+0x13a>
 801af0c:	4633      	mov	r3, r6
 801af0e:	7818      	ldrb	r0, [r3, #0]
 801af10:	2830      	cmp	r0, #48	; 0x30
 801af12:	461f      	mov	r7, r3
 801af14:	f103 0301 	add.w	r3, r3, #1
 801af18:	d0f9      	beq.n	801af0e <__gethex+0x76>
 801af1a:	f7ff ffa7 	bl	801ae6c <__hexdig_fun>
 801af1e:	2301      	movs	r3, #1
 801af20:	fab0 f480 	clz	r4, r0
 801af24:	0964      	lsrs	r4, r4, #5
 801af26:	4635      	mov	r5, r6
 801af28:	9300      	str	r3, [sp, #0]
 801af2a:	463a      	mov	r2, r7
 801af2c:	4616      	mov	r6, r2
 801af2e:	3201      	adds	r2, #1
 801af30:	7830      	ldrb	r0, [r6, #0]
 801af32:	f7ff ff9b 	bl	801ae6c <__hexdig_fun>
 801af36:	2800      	cmp	r0, #0
 801af38:	d1f8      	bne.n	801af2c <__gethex+0x94>
 801af3a:	9901      	ldr	r1, [sp, #4]
 801af3c:	4652      	mov	r2, sl
 801af3e:	4630      	mov	r0, r6
 801af40:	f7fd fcc0 	bl	80188c4 <strncmp>
 801af44:	b980      	cbnz	r0, 801af68 <__gethex+0xd0>
 801af46:	b94d      	cbnz	r5, 801af5c <__gethex+0xc4>
 801af48:	eb06 050a 	add.w	r5, r6, sl
 801af4c:	462a      	mov	r2, r5
 801af4e:	4616      	mov	r6, r2
 801af50:	3201      	adds	r2, #1
 801af52:	7830      	ldrb	r0, [r6, #0]
 801af54:	f7ff ff8a 	bl	801ae6c <__hexdig_fun>
 801af58:	2800      	cmp	r0, #0
 801af5a:	d1f8      	bne.n	801af4e <__gethex+0xb6>
 801af5c:	1bad      	subs	r5, r5, r6
 801af5e:	00ad      	lsls	r5, r5, #2
 801af60:	e004      	b.n	801af6c <__gethex+0xd4>
 801af62:	2400      	movs	r4, #0
 801af64:	4625      	mov	r5, r4
 801af66:	e7e0      	b.n	801af2a <__gethex+0x92>
 801af68:	2d00      	cmp	r5, #0
 801af6a:	d1f7      	bne.n	801af5c <__gethex+0xc4>
 801af6c:	7833      	ldrb	r3, [r6, #0]
 801af6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801af72:	2b50      	cmp	r3, #80	; 0x50
 801af74:	d13b      	bne.n	801afee <__gethex+0x156>
 801af76:	7873      	ldrb	r3, [r6, #1]
 801af78:	2b2b      	cmp	r3, #43	; 0x2b
 801af7a:	d02c      	beq.n	801afd6 <__gethex+0x13e>
 801af7c:	2b2d      	cmp	r3, #45	; 0x2d
 801af7e:	d02e      	beq.n	801afde <__gethex+0x146>
 801af80:	1c71      	adds	r1, r6, #1
 801af82:	f04f 0900 	mov.w	r9, #0
 801af86:	7808      	ldrb	r0, [r1, #0]
 801af88:	f7ff ff70 	bl	801ae6c <__hexdig_fun>
 801af8c:	1e43      	subs	r3, r0, #1
 801af8e:	b2db      	uxtb	r3, r3
 801af90:	2b18      	cmp	r3, #24
 801af92:	d82c      	bhi.n	801afee <__gethex+0x156>
 801af94:	f1a0 0210 	sub.w	r2, r0, #16
 801af98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801af9c:	f7ff ff66 	bl	801ae6c <__hexdig_fun>
 801afa0:	1e43      	subs	r3, r0, #1
 801afa2:	b2db      	uxtb	r3, r3
 801afa4:	2b18      	cmp	r3, #24
 801afa6:	d91d      	bls.n	801afe4 <__gethex+0x14c>
 801afa8:	f1b9 0f00 	cmp.w	r9, #0
 801afac:	d000      	beq.n	801afb0 <__gethex+0x118>
 801afae:	4252      	negs	r2, r2
 801afb0:	4415      	add	r5, r2
 801afb2:	f8cb 1000 	str.w	r1, [fp]
 801afb6:	b1e4      	cbz	r4, 801aff2 <__gethex+0x15a>
 801afb8:	9b00      	ldr	r3, [sp, #0]
 801afba:	2b00      	cmp	r3, #0
 801afbc:	bf14      	ite	ne
 801afbe:	2700      	movne	r7, #0
 801afc0:	2706      	moveq	r7, #6
 801afc2:	4638      	mov	r0, r7
 801afc4:	b009      	add	sp, #36	; 0x24
 801afc6:	ecbd 8b02 	vpop	{d8}
 801afca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afce:	463e      	mov	r6, r7
 801afd0:	4625      	mov	r5, r4
 801afd2:	2401      	movs	r4, #1
 801afd4:	e7ca      	b.n	801af6c <__gethex+0xd4>
 801afd6:	f04f 0900 	mov.w	r9, #0
 801afda:	1cb1      	adds	r1, r6, #2
 801afdc:	e7d3      	b.n	801af86 <__gethex+0xee>
 801afde:	f04f 0901 	mov.w	r9, #1
 801afe2:	e7fa      	b.n	801afda <__gethex+0x142>
 801afe4:	230a      	movs	r3, #10
 801afe6:	fb03 0202 	mla	r2, r3, r2, r0
 801afea:	3a10      	subs	r2, #16
 801afec:	e7d4      	b.n	801af98 <__gethex+0x100>
 801afee:	4631      	mov	r1, r6
 801aff0:	e7df      	b.n	801afb2 <__gethex+0x11a>
 801aff2:	1bf3      	subs	r3, r6, r7
 801aff4:	3b01      	subs	r3, #1
 801aff6:	4621      	mov	r1, r4
 801aff8:	2b07      	cmp	r3, #7
 801affa:	dc0b      	bgt.n	801b014 <__gethex+0x17c>
 801affc:	ee18 0a10 	vmov	r0, s16
 801b000:	f000 fbe0 	bl	801b7c4 <_Balloc>
 801b004:	4604      	mov	r4, r0
 801b006:	b940      	cbnz	r0, 801b01a <__gethex+0x182>
 801b008:	4b65      	ldr	r3, [pc, #404]	; (801b1a0 <__gethex+0x308>)
 801b00a:	4602      	mov	r2, r0
 801b00c:	21de      	movs	r1, #222	; 0xde
 801b00e:	4865      	ldr	r0, [pc, #404]	; (801b1a4 <__gethex+0x30c>)
 801b010:	f7fe ff4c 	bl	8019eac <__assert_func>
 801b014:	3101      	adds	r1, #1
 801b016:	105b      	asrs	r3, r3, #1
 801b018:	e7ee      	b.n	801aff8 <__gethex+0x160>
 801b01a:	f100 0914 	add.w	r9, r0, #20
 801b01e:	f04f 0b00 	mov.w	fp, #0
 801b022:	f1ca 0301 	rsb	r3, sl, #1
 801b026:	f8cd 9008 	str.w	r9, [sp, #8]
 801b02a:	f8cd b000 	str.w	fp, [sp]
 801b02e:	9306      	str	r3, [sp, #24]
 801b030:	42b7      	cmp	r7, r6
 801b032:	d340      	bcc.n	801b0b6 <__gethex+0x21e>
 801b034:	9802      	ldr	r0, [sp, #8]
 801b036:	9b00      	ldr	r3, [sp, #0]
 801b038:	f840 3b04 	str.w	r3, [r0], #4
 801b03c:	eba0 0009 	sub.w	r0, r0, r9
 801b040:	1080      	asrs	r0, r0, #2
 801b042:	0146      	lsls	r6, r0, #5
 801b044:	6120      	str	r0, [r4, #16]
 801b046:	4618      	mov	r0, r3
 801b048:	f000 fcb2 	bl	801b9b0 <__hi0bits>
 801b04c:	1a30      	subs	r0, r6, r0
 801b04e:	f8d8 6000 	ldr.w	r6, [r8]
 801b052:	42b0      	cmp	r0, r6
 801b054:	dd63      	ble.n	801b11e <__gethex+0x286>
 801b056:	1b87      	subs	r7, r0, r6
 801b058:	4639      	mov	r1, r7
 801b05a:	4620      	mov	r0, r4
 801b05c:	f001 f84c 	bl	801c0f8 <__any_on>
 801b060:	4682      	mov	sl, r0
 801b062:	b1a8      	cbz	r0, 801b090 <__gethex+0x1f8>
 801b064:	1e7b      	subs	r3, r7, #1
 801b066:	1159      	asrs	r1, r3, #5
 801b068:	f003 021f 	and.w	r2, r3, #31
 801b06c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801b070:	f04f 0a01 	mov.w	sl, #1
 801b074:	fa0a f202 	lsl.w	r2, sl, r2
 801b078:	420a      	tst	r2, r1
 801b07a:	d009      	beq.n	801b090 <__gethex+0x1f8>
 801b07c:	4553      	cmp	r3, sl
 801b07e:	dd05      	ble.n	801b08c <__gethex+0x1f4>
 801b080:	1eb9      	subs	r1, r7, #2
 801b082:	4620      	mov	r0, r4
 801b084:	f001 f838 	bl	801c0f8 <__any_on>
 801b088:	2800      	cmp	r0, #0
 801b08a:	d145      	bne.n	801b118 <__gethex+0x280>
 801b08c:	f04f 0a02 	mov.w	sl, #2
 801b090:	4639      	mov	r1, r7
 801b092:	4620      	mov	r0, r4
 801b094:	f7ff fe98 	bl	801adc8 <rshift>
 801b098:	443d      	add	r5, r7
 801b09a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b09e:	42ab      	cmp	r3, r5
 801b0a0:	da4c      	bge.n	801b13c <__gethex+0x2a4>
 801b0a2:	ee18 0a10 	vmov	r0, s16
 801b0a6:	4621      	mov	r1, r4
 801b0a8:	f000 fbcc 	bl	801b844 <_Bfree>
 801b0ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b0ae:	2300      	movs	r3, #0
 801b0b0:	6013      	str	r3, [r2, #0]
 801b0b2:	27a3      	movs	r7, #163	; 0xa3
 801b0b4:	e785      	b.n	801afc2 <__gethex+0x12a>
 801b0b6:	1e73      	subs	r3, r6, #1
 801b0b8:	9a05      	ldr	r2, [sp, #20]
 801b0ba:	9303      	str	r3, [sp, #12]
 801b0bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801b0c0:	4293      	cmp	r3, r2
 801b0c2:	d019      	beq.n	801b0f8 <__gethex+0x260>
 801b0c4:	f1bb 0f20 	cmp.w	fp, #32
 801b0c8:	d107      	bne.n	801b0da <__gethex+0x242>
 801b0ca:	9b02      	ldr	r3, [sp, #8]
 801b0cc:	9a00      	ldr	r2, [sp, #0]
 801b0ce:	f843 2b04 	str.w	r2, [r3], #4
 801b0d2:	9302      	str	r3, [sp, #8]
 801b0d4:	2300      	movs	r3, #0
 801b0d6:	9300      	str	r3, [sp, #0]
 801b0d8:	469b      	mov	fp, r3
 801b0da:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801b0de:	f7ff fec5 	bl	801ae6c <__hexdig_fun>
 801b0e2:	9b00      	ldr	r3, [sp, #0]
 801b0e4:	f000 000f 	and.w	r0, r0, #15
 801b0e8:	fa00 f00b 	lsl.w	r0, r0, fp
 801b0ec:	4303      	orrs	r3, r0
 801b0ee:	9300      	str	r3, [sp, #0]
 801b0f0:	f10b 0b04 	add.w	fp, fp, #4
 801b0f4:	9b03      	ldr	r3, [sp, #12]
 801b0f6:	e00d      	b.n	801b114 <__gethex+0x27c>
 801b0f8:	9b03      	ldr	r3, [sp, #12]
 801b0fa:	9a06      	ldr	r2, [sp, #24]
 801b0fc:	4413      	add	r3, r2
 801b0fe:	42bb      	cmp	r3, r7
 801b100:	d3e0      	bcc.n	801b0c4 <__gethex+0x22c>
 801b102:	4618      	mov	r0, r3
 801b104:	9901      	ldr	r1, [sp, #4]
 801b106:	9307      	str	r3, [sp, #28]
 801b108:	4652      	mov	r2, sl
 801b10a:	f7fd fbdb 	bl	80188c4 <strncmp>
 801b10e:	9b07      	ldr	r3, [sp, #28]
 801b110:	2800      	cmp	r0, #0
 801b112:	d1d7      	bne.n	801b0c4 <__gethex+0x22c>
 801b114:	461e      	mov	r6, r3
 801b116:	e78b      	b.n	801b030 <__gethex+0x198>
 801b118:	f04f 0a03 	mov.w	sl, #3
 801b11c:	e7b8      	b.n	801b090 <__gethex+0x1f8>
 801b11e:	da0a      	bge.n	801b136 <__gethex+0x29e>
 801b120:	1a37      	subs	r7, r6, r0
 801b122:	4621      	mov	r1, r4
 801b124:	ee18 0a10 	vmov	r0, s16
 801b128:	463a      	mov	r2, r7
 801b12a:	f000 fda7 	bl	801bc7c <__lshift>
 801b12e:	1bed      	subs	r5, r5, r7
 801b130:	4604      	mov	r4, r0
 801b132:	f100 0914 	add.w	r9, r0, #20
 801b136:	f04f 0a00 	mov.w	sl, #0
 801b13a:	e7ae      	b.n	801b09a <__gethex+0x202>
 801b13c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801b140:	42a8      	cmp	r0, r5
 801b142:	dd72      	ble.n	801b22a <__gethex+0x392>
 801b144:	1b45      	subs	r5, r0, r5
 801b146:	42ae      	cmp	r6, r5
 801b148:	dc36      	bgt.n	801b1b8 <__gethex+0x320>
 801b14a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b14e:	2b02      	cmp	r3, #2
 801b150:	d02a      	beq.n	801b1a8 <__gethex+0x310>
 801b152:	2b03      	cmp	r3, #3
 801b154:	d02c      	beq.n	801b1b0 <__gethex+0x318>
 801b156:	2b01      	cmp	r3, #1
 801b158:	d115      	bne.n	801b186 <__gethex+0x2ee>
 801b15a:	42ae      	cmp	r6, r5
 801b15c:	d113      	bne.n	801b186 <__gethex+0x2ee>
 801b15e:	2e01      	cmp	r6, #1
 801b160:	d10b      	bne.n	801b17a <__gethex+0x2e2>
 801b162:	9a04      	ldr	r2, [sp, #16]
 801b164:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b168:	6013      	str	r3, [r2, #0]
 801b16a:	2301      	movs	r3, #1
 801b16c:	6123      	str	r3, [r4, #16]
 801b16e:	f8c9 3000 	str.w	r3, [r9]
 801b172:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b174:	2762      	movs	r7, #98	; 0x62
 801b176:	601c      	str	r4, [r3, #0]
 801b178:	e723      	b.n	801afc2 <__gethex+0x12a>
 801b17a:	1e71      	subs	r1, r6, #1
 801b17c:	4620      	mov	r0, r4
 801b17e:	f000 ffbb 	bl	801c0f8 <__any_on>
 801b182:	2800      	cmp	r0, #0
 801b184:	d1ed      	bne.n	801b162 <__gethex+0x2ca>
 801b186:	ee18 0a10 	vmov	r0, s16
 801b18a:	4621      	mov	r1, r4
 801b18c:	f000 fb5a 	bl	801b844 <_Bfree>
 801b190:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b192:	2300      	movs	r3, #0
 801b194:	6013      	str	r3, [r2, #0]
 801b196:	2750      	movs	r7, #80	; 0x50
 801b198:	e713      	b.n	801afc2 <__gethex+0x12a>
 801b19a:	bf00      	nop
 801b19c:	0801f210 	.word	0x0801f210
 801b1a0:	0801f195 	.word	0x0801f195
 801b1a4:	0801f1a6 	.word	0x0801f1a6
 801b1a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b1aa:	2b00      	cmp	r3, #0
 801b1ac:	d1eb      	bne.n	801b186 <__gethex+0x2ee>
 801b1ae:	e7d8      	b.n	801b162 <__gethex+0x2ca>
 801b1b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b1b2:	2b00      	cmp	r3, #0
 801b1b4:	d1d5      	bne.n	801b162 <__gethex+0x2ca>
 801b1b6:	e7e6      	b.n	801b186 <__gethex+0x2ee>
 801b1b8:	1e6f      	subs	r7, r5, #1
 801b1ba:	f1ba 0f00 	cmp.w	sl, #0
 801b1be:	d131      	bne.n	801b224 <__gethex+0x38c>
 801b1c0:	b127      	cbz	r7, 801b1cc <__gethex+0x334>
 801b1c2:	4639      	mov	r1, r7
 801b1c4:	4620      	mov	r0, r4
 801b1c6:	f000 ff97 	bl	801c0f8 <__any_on>
 801b1ca:	4682      	mov	sl, r0
 801b1cc:	117b      	asrs	r3, r7, #5
 801b1ce:	2101      	movs	r1, #1
 801b1d0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801b1d4:	f007 071f 	and.w	r7, r7, #31
 801b1d8:	fa01 f707 	lsl.w	r7, r1, r7
 801b1dc:	421f      	tst	r7, r3
 801b1de:	4629      	mov	r1, r5
 801b1e0:	4620      	mov	r0, r4
 801b1e2:	bf18      	it	ne
 801b1e4:	f04a 0a02 	orrne.w	sl, sl, #2
 801b1e8:	1b76      	subs	r6, r6, r5
 801b1ea:	f7ff fded 	bl	801adc8 <rshift>
 801b1ee:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b1f2:	2702      	movs	r7, #2
 801b1f4:	f1ba 0f00 	cmp.w	sl, #0
 801b1f8:	d048      	beq.n	801b28c <__gethex+0x3f4>
 801b1fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b1fe:	2b02      	cmp	r3, #2
 801b200:	d015      	beq.n	801b22e <__gethex+0x396>
 801b202:	2b03      	cmp	r3, #3
 801b204:	d017      	beq.n	801b236 <__gethex+0x39e>
 801b206:	2b01      	cmp	r3, #1
 801b208:	d109      	bne.n	801b21e <__gethex+0x386>
 801b20a:	f01a 0f02 	tst.w	sl, #2
 801b20e:	d006      	beq.n	801b21e <__gethex+0x386>
 801b210:	f8d9 0000 	ldr.w	r0, [r9]
 801b214:	ea4a 0a00 	orr.w	sl, sl, r0
 801b218:	f01a 0f01 	tst.w	sl, #1
 801b21c:	d10e      	bne.n	801b23c <__gethex+0x3a4>
 801b21e:	f047 0710 	orr.w	r7, r7, #16
 801b222:	e033      	b.n	801b28c <__gethex+0x3f4>
 801b224:	f04f 0a01 	mov.w	sl, #1
 801b228:	e7d0      	b.n	801b1cc <__gethex+0x334>
 801b22a:	2701      	movs	r7, #1
 801b22c:	e7e2      	b.n	801b1f4 <__gethex+0x35c>
 801b22e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b230:	f1c3 0301 	rsb	r3, r3, #1
 801b234:	9315      	str	r3, [sp, #84]	; 0x54
 801b236:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b238:	2b00      	cmp	r3, #0
 801b23a:	d0f0      	beq.n	801b21e <__gethex+0x386>
 801b23c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801b240:	f104 0314 	add.w	r3, r4, #20
 801b244:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801b248:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801b24c:	f04f 0c00 	mov.w	ip, #0
 801b250:	4618      	mov	r0, r3
 801b252:	f853 2b04 	ldr.w	r2, [r3], #4
 801b256:	f1b2 3fff 	cmp.w	r2, #4294967295
 801b25a:	d01c      	beq.n	801b296 <__gethex+0x3fe>
 801b25c:	3201      	adds	r2, #1
 801b25e:	6002      	str	r2, [r0, #0]
 801b260:	2f02      	cmp	r7, #2
 801b262:	f104 0314 	add.w	r3, r4, #20
 801b266:	d13f      	bne.n	801b2e8 <__gethex+0x450>
 801b268:	f8d8 2000 	ldr.w	r2, [r8]
 801b26c:	3a01      	subs	r2, #1
 801b26e:	42b2      	cmp	r2, r6
 801b270:	d10a      	bne.n	801b288 <__gethex+0x3f0>
 801b272:	1171      	asrs	r1, r6, #5
 801b274:	2201      	movs	r2, #1
 801b276:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b27a:	f006 061f 	and.w	r6, r6, #31
 801b27e:	fa02 f606 	lsl.w	r6, r2, r6
 801b282:	421e      	tst	r6, r3
 801b284:	bf18      	it	ne
 801b286:	4617      	movne	r7, r2
 801b288:	f047 0720 	orr.w	r7, r7, #32
 801b28c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b28e:	601c      	str	r4, [r3, #0]
 801b290:	9b04      	ldr	r3, [sp, #16]
 801b292:	601d      	str	r5, [r3, #0]
 801b294:	e695      	b.n	801afc2 <__gethex+0x12a>
 801b296:	4299      	cmp	r1, r3
 801b298:	f843 cc04 	str.w	ip, [r3, #-4]
 801b29c:	d8d8      	bhi.n	801b250 <__gethex+0x3b8>
 801b29e:	68a3      	ldr	r3, [r4, #8]
 801b2a0:	459b      	cmp	fp, r3
 801b2a2:	db19      	blt.n	801b2d8 <__gethex+0x440>
 801b2a4:	6861      	ldr	r1, [r4, #4]
 801b2a6:	ee18 0a10 	vmov	r0, s16
 801b2aa:	3101      	adds	r1, #1
 801b2ac:	f000 fa8a 	bl	801b7c4 <_Balloc>
 801b2b0:	4681      	mov	r9, r0
 801b2b2:	b918      	cbnz	r0, 801b2bc <__gethex+0x424>
 801b2b4:	4b1a      	ldr	r3, [pc, #104]	; (801b320 <__gethex+0x488>)
 801b2b6:	4602      	mov	r2, r0
 801b2b8:	2184      	movs	r1, #132	; 0x84
 801b2ba:	e6a8      	b.n	801b00e <__gethex+0x176>
 801b2bc:	6922      	ldr	r2, [r4, #16]
 801b2be:	3202      	adds	r2, #2
 801b2c0:	f104 010c 	add.w	r1, r4, #12
 801b2c4:	0092      	lsls	r2, r2, #2
 801b2c6:	300c      	adds	r0, #12
 801b2c8:	f7fb ff9c 	bl	8017204 <memcpy>
 801b2cc:	4621      	mov	r1, r4
 801b2ce:	ee18 0a10 	vmov	r0, s16
 801b2d2:	f000 fab7 	bl	801b844 <_Bfree>
 801b2d6:	464c      	mov	r4, r9
 801b2d8:	6923      	ldr	r3, [r4, #16]
 801b2da:	1c5a      	adds	r2, r3, #1
 801b2dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b2e0:	6122      	str	r2, [r4, #16]
 801b2e2:	2201      	movs	r2, #1
 801b2e4:	615a      	str	r2, [r3, #20]
 801b2e6:	e7bb      	b.n	801b260 <__gethex+0x3c8>
 801b2e8:	6922      	ldr	r2, [r4, #16]
 801b2ea:	455a      	cmp	r2, fp
 801b2ec:	dd0b      	ble.n	801b306 <__gethex+0x46e>
 801b2ee:	2101      	movs	r1, #1
 801b2f0:	4620      	mov	r0, r4
 801b2f2:	f7ff fd69 	bl	801adc8 <rshift>
 801b2f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b2fa:	3501      	adds	r5, #1
 801b2fc:	42ab      	cmp	r3, r5
 801b2fe:	f6ff aed0 	blt.w	801b0a2 <__gethex+0x20a>
 801b302:	2701      	movs	r7, #1
 801b304:	e7c0      	b.n	801b288 <__gethex+0x3f0>
 801b306:	f016 061f 	ands.w	r6, r6, #31
 801b30a:	d0fa      	beq.n	801b302 <__gethex+0x46a>
 801b30c:	449a      	add	sl, r3
 801b30e:	f1c6 0620 	rsb	r6, r6, #32
 801b312:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801b316:	f000 fb4b 	bl	801b9b0 <__hi0bits>
 801b31a:	42b0      	cmp	r0, r6
 801b31c:	dbe7      	blt.n	801b2ee <__gethex+0x456>
 801b31e:	e7f0      	b.n	801b302 <__gethex+0x46a>
 801b320:	0801f195 	.word	0x0801f195

0801b324 <L_shift>:
 801b324:	f1c2 0208 	rsb	r2, r2, #8
 801b328:	0092      	lsls	r2, r2, #2
 801b32a:	b570      	push	{r4, r5, r6, lr}
 801b32c:	f1c2 0620 	rsb	r6, r2, #32
 801b330:	6843      	ldr	r3, [r0, #4]
 801b332:	6804      	ldr	r4, [r0, #0]
 801b334:	fa03 f506 	lsl.w	r5, r3, r6
 801b338:	432c      	orrs	r4, r5
 801b33a:	40d3      	lsrs	r3, r2
 801b33c:	6004      	str	r4, [r0, #0]
 801b33e:	f840 3f04 	str.w	r3, [r0, #4]!
 801b342:	4288      	cmp	r0, r1
 801b344:	d3f4      	bcc.n	801b330 <L_shift+0xc>
 801b346:	bd70      	pop	{r4, r5, r6, pc}

0801b348 <__match>:
 801b348:	b530      	push	{r4, r5, lr}
 801b34a:	6803      	ldr	r3, [r0, #0]
 801b34c:	3301      	adds	r3, #1
 801b34e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b352:	b914      	cbnz	r4, 801b35a <__match+0x12>
 801b354:	6003      	str	r3, [r0, #0]
 801b356:	2001      	movs	r0, #1
 801b358:	bd30      	pop	{r4, r5, pc}
 801b35a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b35e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801b362:	2d19      	cmp	r5, #25
 801b364:	bf98      	it	ls
 801b366:	3220      	addls	r2, #32
 801b368:	42a2      	cmp	r2, r4
 801b36a:	d0f0      	beq.n	801b34e <__match+0x6>
 801b36c:	2000      	movs	r0, #0
 801b36e:	e7f3      	b.n	801b358 <__match+0x10>

0801b370 <__hexnan>:
 801b370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b374:	680b      	ldr	r3, [r1, #0]
 801b376:	6801      	ldr	r1, [r0, #0]
 801b378:	115e      	asrs	r6, r3, #5
 801b37a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801b37e:	f013 031f 	ands.w	r3, r3, #31
 801b382:	b087      	sub	sp, #28
 801b384:	bf18      	it	ne
 801b386:	3604      	addne	r6, #4
 801b388:	2500      	movs	r5, #0
 801b38a:	1f37      	subs	r7, r6, #4
 801b38c:	4682      	mov	sl, r0
 801b38e:	4690      	mov	r8, r2
 801b390:	9301      	str	r3, [sp, #4]
 801b392:	f846 5c04 	str.w	r5, [r6, #-4]
 801b396:	46b9      	mov	r9, r7
 801b398:	463c      	mov	r4, r7
 801b39a:	9502      	str	r5, [sp, #8]
 801b39c:	46ab      	mov	fp, r5
 801b39e:	784a      	ldrb	r2, [r1, #1]
 801b3a0:	1c4b      	adds	r3, r1, #1
 801b3a2:	9303      	str	r3, [sp, #12]
 801b3a4:	b342      	cbz	r2, 801b3f8 <__hexnan+0x88>
 801b3a6:	4610      	mov	r0, r2
 801b3a8:	9105      	str	r1, [sp, #20]
 801b3aa:	9204      	str	r2, [sp, #16]
 801b3ac:	f7ff fd5e 	bl	801ae6c <__hexdig_fun>
 801b3b0:	2800      	cmp	r0, #0
 801b3b2:	d14f      	bne.n	801b454 <__hexnan+0xe4>
 801b3b4:	9a04      	ldr	r2, [sp, #16]
 801b3b6:	9905      	ldr	r1, [sp, #20]
 801b3b8:	2a20      	cmp	r2, #32
 801b3ba:	d818      	bhi.n	801b3ee <__hexnan+0x7e>
 801b3bc:	9b02      	ldr	r3, [sp, #8]
 801b3be:	459b      	cmp	fp, r3
 801b3c0:	dd13      	ble.n	801b3ea <__hexnan+0x7a>
 801b3c2:	454c      	cmp	r4, r9
 801b3c4:	d206      	bcs.n	801b3d4 <__hexnan+0x64>
 801b3c6:	2d07      	cmp	r5, #7
 801b3c8:	dc04      	bgt.n	801b3d4 <__hexnan+0x64>
 801b3ca:	462a      	mov	r2, r5
 801b3cc:	4649      	mov	r1, r9
 801b3ce:	4620      	mov	r0, r4
 801b3d0:	f7ff ffa8 	bl	801b324 <L_shift>
 801b3d4:	4544      	cmp	r4, r8
 801b3d6:	d950      	bls.n	801b47a <__hexnan+0x10a>
 801b3d8:	2300      	movs	r3, #0
 801b3da:	f1a4 0904 	sub.w	r9, r4, #4
 801b3de:	f844 3c04 	str.w	r3, [r4, #-4]
 801b3e2:	f8cd b008 	str.w	fp, [sp, #8]
 801b3e6:	464c      	mov	r4, r9
 801b3e8:	461d      	mov	r5, r3
 801b3ea:	9903      	ldr	r1, [sp, #12]
 801b3ec:	e7d7      	b.n	801b39e <__hexnan+0x2e>
 801b3ee:	2a29      	cmp	r2, #41	; 0x29
 801b3f0:	d156      	bne.n	801b4a0 <__hexnan+0x130>
 801b3f2:	3102      	adds	r1, #2
 801b3f4:	f8ca 1000 	str.w	r1, [sl]
 801b3f8:	f1bb 0f00 	cmp.w	fp, #0
 801b3fc:	d050      	beq.n	801b4a0 <__hexnan+0x130>
 801b3fe:	454c      	cmp	r4, r9
 801b400:	d206      	bcs.n	801b410 <__hexnan+0xa0>
 801b402:	2d07      	cmp	r5, #7
 801b404:	dc04      	bgt.n	801b410 <__hexnan+0xa0>
 801b406:	462a      	mov	r2, r5
 801b408:	4649      	mov	r1, r9
 801b40a:	4620      	mov	r0, r4
 801b40c:	f7ff ff8a 	bl	801b324 <L_shift>
 801b410:	4544      	cmp	r4, r8
 801b412:	d934      	bls.n	801b47e <__hexnan+0x10e>
 801b414:	f1a8 0204 	sub.w	r2, r8, #4
 801b418:	4623      	mov	r3, r4
 801b41a:	f853 1b04 	ldr.w	r1, [r3], #4
 801b41e:	f842 1f04 	str.w	r1, [r2, #4]!
 801b422:	429f      	cmp	r7, r3
 801b424:	d2f9      	bcs.n	801b41a <__hexnan+0xaa>
 801b426:	1b3b      	subs	r3, r7, r4
 801b428:	f023 0303 	bic.w	r3, r3, #3
 801b42c:	3304      	adds	r3, #4
 801b42e:	3401      	adds	r4, #1
 801b430:	3e03      	subs	r6, #3
 801b432:	42b4      	cmp	r4, r6
 801b434:	bf88      	it	hi
 801b436:	2304      	movhi	r3, #4
 801b438:	4443      	add	r3, r8
 801b43a:	2200      	movs	r2, #0
 801b43c:	f843 2b04 	str.w	r2, [r3], #4
 801b440:	429f      	cmp	r7, r3
 801b442:	d2fb      	bcs.n	801b43c <__hexnan+0xcc>
 801b444:	683b      	ldr	r3, [r7, #0]
 801b446:	b91b      	cbnz	r3, 801b450 <__hexnan+0xe0>
 801b448:	4547      	cmp	r7, r8
 801b44a:	d127      	bne.n	801b49c <__hexnan+0x12c>
 801b44c:	2301      	movs	r3, #1
 801b44e:	603b      	str	r3, [r7, #0]
 801b450:	2005      	movs	r0, #5
 801b452:	e026      	b.n	801b4a2 <__hexnan+0x132>
 801b454:	3501      	adds	r5, #1
 801b456:	2d08      	cmp	r5, #8
 801b458:	f10b 0b01 	add.w	fp, fp, #1
 801b45c:	dd06      	ble.n	801b46c <__hexnan+0xfc>
 801b45e:	4544      	cmp	r4, r8
 801b460:	d9c3      	bls.n	801b3ea <__hexnan+0x7a>
 801b462:	2300      	movs	r3, #0
 801b464:	f844 3c04 	str.w	r3, [r4, #-4]
 801b468:	2501      	movs	r5, #1
 801b46a:	3c04      	subs	r4, #4
 801b46c:	6822      	ldr	r2, [r4, #0]
 801b46e:	f000 000f 	and.w	r0, r0, #15
 801b472:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801b476:	6022      	str	r2, [r4, #0]
 801b478:	e7b7      	b.n	801b3ea <__hexnan+0x7a>
 801b47a:	2508      	movs	r5, #8
 801b47c:	e7b5      	b.n	801b3ea <__hexnan+0x7a>
 801b47e:	9b01      	ldr	r3, [sp, #4]
 801b480:	2b00      	cmp	r3, #0
 801b482:	d0df      	beq.n	801b444 <__hexnan+0xd4>
 801b484:	f04f 32ff 	mov.w	r2, #4294967295
 801b488:	f1c3 0320 	rsb	r3, r3, #32
 801b48c:	fa22 f303 	lsr.w	r3, r2, r3
 801b490:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801b494:	401a      	ands	r2, r3
 801b496:	f846 2c04 	str.w	r2, [r6, #-4]
 801b49a:	e7d3      	b.n	801b444 <__hexnan+0xd4>
 801b49c:	3f04      	subs	r7, #4
 801b49e:	e7d1      	b.n	801b444 <__hexnan+0xd4>
 801b4a0:	2004      	movs	r0, #4
 801b4a2:	b007      	add	sp, #28
 801b4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b4a8 <_findenv_r>:
 801b4a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4ac:	4607      	mov	r7, r0
 801b4ae:	4689      	mov	r9, r1
 801b4b0:	4616      	mov	r6, r2
 801b4b2:	f001 fcdf 	bl	801ce74 <__env_lock>
 801b4b6:	4b18      	ldr	r3, [pc, #96]	; (801b518 <_findenv_r+0x70>)
 801b4b8:	681c      	ldr	r4, [r3, #0]
 801b4ba:	469a      	mov	sl, r3
 801b4bc:	b134      	cbz	r4, 801b4cc <_findenv_r+0x24>
 801b4be:	464b      	mov	r3, r9
 801b4c0:	4698      	mov	r8, r3
 801b4c2:	f813 1b01 	ldrb.w	r1, [r3], #1
 801b4c6:	b139      	cbz	r1, 801b4d8 <_findenv_r+0x30>
 801b4c8:	293d      	cmp	r1, #61	; 0x3d
 801b4ca:	d1f9      	bne.n	801b4c0 <_findenv_r+0x18>
 801b4cc:	4638      	mov	r0, r7
 801b4ce:	f001 fcd7 	bl	801ce80 <__env_unlock>
 801b4d2:	2000      	movs	r0, #0
 801b4d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4d8:	eba8 0809 	sub.w	r8, r8, r9
 801b4dc:	46a3      	mov	fp, r4
 801b4de:	f854 0b04 	ldr.w	r0, [r4], #4
 801b4e2:	2800      	cmp	r0, #0
 801b4e4:	d0f2      	beq.n	801b4cc <_findenv_r+0x24>
 801b4e6:	4642      	mov	r2, r8
 801b4e8:	4649      	mov	r1, r9
 801b4ea:	f7fd f9eb 	bl	80188c4 <strncmp>
 801b4ee:	2800      	cmp	r0, #0
 801b4f0:	d1f4      	bne.n	801b4dc <_findenv_r+0x34>
 801b4f2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801b4f6:	eb03 0508 	add.w	r5, r3, r8
 801b4fa:	f813 3008 	ldrb.w	r3, [r3, r8]
 801b4fe:	2b3d      	cmp	r3, #61	; 0x3d
 801b500:	d1ec      	bne.n	801b4dc <_findenv_r+0x34>
 801b502:	f8da 3000 	ldr.w	r3, [sl]
 801b506:	ebab 0303 	sub.w	r3, fp, r3
 801b50a:	109b      	asrs	r3, r3, #2
 801b50c:	4638      	mov	r0, r7
 801b50e:	6033      	str	r3, [r6, #0]
 801b510:	f001 fcb6 	bl	801ce80 <__env_unlock>
 801b514:	1c68      	adds	r0, r5, #1
 801b516:	e7dd      	b.n	801b4d4 <_findenv_r+0x2c>
 801b518:	200002b8 	.word	0x200002b8

0801b51c <_getenv_r>:
 801b51c:	b507      	push	{r0, r1, r2, lr}
 801b51e:	aa01      	add	r2, sp, #4
 801b520:	f7ff ffc2 	bl	801b4a8 <_findenv_r>
 801b524:	b003      	add	sp, #12
 801b526:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801b52c <__gettzinfo>:
 801b52c:	4800      	ldr	r0, [pc, #0]	; (801b530 <__gettzinfo+0x4>)
 801b52e:	4770      	bx	lr
 801b530:	200000f0 	.word	0x200000f0

0801b534 <gmtime_r>:
 801b534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b538:	e9d0 6700 	ldrd	r6, r7, [r0]
 801b53c:	460c      	mov	r4, r1
 801b53e:	4a51      	ldr	r2, [pc, #324]	; (801b684 <gmtime_r+0x150>)
 801b540:	2300      	movs	r3, #0
 801b542:	4630      	mov	r0, r6
 801b544:	4639      	mov	r1, r7
 801b546:	f7e5 fbbf 	bl	8000cc8 <__aeabi_ldivmod>
 801b54a:	4639      	mov	r1, r7
 801b54c:	4605      	mov	r5, r0
 801b54e:	4a4d      	ldr	r2, [pc, #308]	; (801b684 <gmtime_r+0x150>)
 801b550:	4630      	mov	r0, r6
 801b552:	2300      	movs	r3, #0
 801b554:	f7e5 fbb8 	bl	8000cc8 <__aeabi_ldivmod>
 801b558:	2a00      	cmp	r2, #0
 801b55a:	bfbc      	itt	lt
 801b55c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 801b560:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 801b564:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801b568:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 801b56c:	fbb2 f3f1 	udiv	r3, r2, r1
 801b570:	fb01 2213 	mls	r2, r1, r3, r2
 801b574:	f04f 013c 	mov.w	r1, #60	; 0x3c
 801b578:	bfac      	ite	ge
 801b57a:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 801b57e:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 801b582:	60a3      	str	r3, [r4, #8]
 801b584:	fbb2 f3f1 	udiv	r3, r2, r1
 801b588:	fb01 2213 	mls	r2, r1, r3, r2
 801b58c:	6063      	str	r3, [r4, #4]
 801b58e:	6022      	str	r2, [r4, #0]
 801b590:	1cc3      	adds	r3, r0, #3
 801b592:	2207      	movs	r2, #7
 801b594:	fb93 f2f2 	sdiv	r2, r3, r2
 801b598:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801b59c:	1a9b      	subs	r3, r3, r2
 801b59e:	bf48      	it	mi
 801b5a0:	3307      	addmi	r3, #7
 801b5a2:	2800      	cmp	r0, #0
 801b5a4:	61a3      	str	r3, [r4, #24]
 801b5a6:	bfb8      	it	lt
 801b5a8:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 801b5ac:	4936      	ldr	r1, [pc, #216]	; (801b688 <gmtime_r+0x154>)
 801b5ae:	bfae      	itee	ge
 801b5b0:	fb90 f1f1 	sdivge	r1, r0, r1
 801b5b4:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 801b5b8:	fb93 f1f1 	sdivlt	r1, r3, r1
 801b5bc:	4b33      	ldr	r3, [pc, #204]	; (801b68c <gmtime_r+0x158>)
 801b5be:	fb03 0001 	mla	r0, r3, r1, r0
 801b5c2:	f648 62ac 	movw	r2, #36524	; 0x8eac
 801b5c6:	fbb0 f2f2 	udiv	r2, r0, r2
 801b5ca:	4402      	add	r2, r0
 801b5cc:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 801b5d0:	fbb0 f3fc 	udiv	r3, r0, ip
 801b5d4:	1ad2      	subs	r2, r2, r3
 801b5d6:	f240 176d 	movw	r7, #365	; 0x16d
 801b5da:	4b2d      	ldr	r3, [pc, #180]	; (801b690 <gmtime_r+0x15c>)
 801b5dc:	fbb0 f3f3 	udiv	r3, r0, r3
 801b5e0:	2664      	movs	r6, #100	; 0x64
 801b5e2:	1ad3      	subs	r3, r2, r3
 801b5e4:	fbb3 f5f7 	udiv	r5, r3, r7
 801b5e8:	fbb3 f3fc 	udiv	r3, r3, ip
 801b5ec:	fbb5 f2f6 	udiv	r2, r5, r6
 801b5f0:	1ad3      	subs	r3, r2, r3
 801b5f2:	4403      	add	r3, r0
 801b5f4:	fb07 3315 	mls	r3, r7, r5, r3
 801b5f8:	2099      	movs	r0, #153	; 0x99
 801b5fa:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801b5fe:	f10c 0c02 	add.w	ip, ip, #2
 801b602:	f103 0e01 	add.w	lr, r3, #1
 801b606:	fbbc f7f0 	udiv	r7, ip, r0
 801b60a:	4378      	muls	r0, r7
 801b60c:	3002      	adds	r0, #2
 801b60e:	f04f 0805 	mov.w	r8, #5
 801b612:	fbb0 f0f8 	udiv	r0, r0, r8
 801b616:	ebae 0000 	sub.w	r0, lr, r0
 801b61a:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 801b61e:	45f4      	cmp	ip, lr
 801b620:	bf94      	ite	ls
 801b622:	f04f 0c02 	movls.w	ip, #2
 801b626:	f06f 0c09 	mvnhi.w	ip, #9
 801b62a:	4467      	add	r7, ip
 801b62c:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 801b630:	fb0c 5101 	mla	r1, ip, r1, r5
 801b634:	2f01      	cmp	r7, #1
 801b636:	bf98      	it	ls
 801b638:	3101      	addls	r1, #1
 801b63a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 801b63e:	d30c      	bcc.n	801b65a <gmtime_r+0x126>
 801b640:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801b644:	61e3      	str	r3, [r4, #28]
 801b646:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 801b64a:	2300      	movs	r3, #0
 801b64c:	60e0      	str	r0, [r4, #12]
 801b64e:	e9c4 7104 	strd	r7, r1, [r4, #16]
 801b652:	6223      	str	r3, [r4, #32]
 801b654:	4620      	mov	r0, r4
 801b656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b65a:	f015 0f03 	tst.w	r5, #3
 801b65e:	d102      	bne.n	801b666 <gmtime_r+0x132>
 801b660:	fb06 5212 	mls	r2, r6, r2, r5
 801b664:	b95a      	cbnz	r2, 801b67e <gmtime_r+0x14a>
 801b666:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801b66a:	fbb5 f2f6 	udiv	r2, r5, r6
 801b66e:	fb06 5212 	mls	r2, r6, r2, r5
 801b672:	fab2 f282 	clz	r2, r2
 801b676:	0952      	lsrs	r2, r2, #5
 801b678:	333b      	adds	r3, #59	; 0x3b
 801b67a:	4413      	add	r3, r2
 801b67c:	e7e2      	b.n	801b644 <gmtime_r+0x110>
 801b67e:	2201      	movs	r2, #1
 801b680:	e7fa      	b.n	801b678 <gmtime_r+0x144>
 801b682:	bf00      	nop
 801b684:	00015180 	.word	0x00015180
 801b688:	00023ab1 	.word	0x00023ab1
 801b68c:	fffdc54f 	.word	0xfffdc54f
 801b690:	00023ab0 	.word	0x00023ab0

0801b694 <_localeconv_r>:
 801b694:	4800      	ldr	r0, [pc, #0]	; (801b698 <_localeconv_r+0x4>)
 801b696:	4770      	bx	lr
 801b698:	2000023c 	.word	0x2000023c

0801b69c <_lseek_r>:
 801b69c:	b538      	push	{r3, r4, r5, lr}
 801b69e:	4d07      	ldr	r5, [pc, #28]	; (801b6bc <_lseek_r+0x20>)
 801b6a0:	4604      	mov	r4, r0
 801b6a2:	4608      	mov	r0, r1
 801b6a4:	4611      	mov	r1, r2
 801b6a6:	2200      	movs	r2, #0
 801b6a8:	602a      	str	r2, [r5, #0]
 801b6aa:	461a      	mov	r2, r3
 801b6ac:	f001 fc40 	bl	801cf30 <_lseek>
 801b6b0:	1c43      	adds	r3, r0, #1
 801b6b2:	d102      	bne.n	801b6ba <_lseek_r+0x1e>
 801b6b4:	682b      	ldr	r3, [r5, #0]
 801b6b6:	b103      	cbz	r3, 801b6ba <_lseek_r+0x1e>
 801b6b8:	6023      	str	r3, [r4, #0]
 801b6ba:	bd38      	pop	{r3, r4, r5, pc}
 801b6bc:	20006be8 	.word	0x20006be8

0801b6c0 <__swhatbuf_r>:
 801b6c0:	b570      	push	{r4, r5, r6, lr}
 801b6c2:	460e      	mov	r6, r1
 801b6c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b6c8:	2900      	cmp	r1, #0
 801b6ca:	b096      	sub	sp, #88	; 0x58
 801b6cc:	4614      	mov	r4, r2
 801b6ce:	461d      	mov	r5, r3
 801b6d0:	da07      	bge.n	801b6e2 <__swhatbuf_r+0x22>
 801b6d2:	2300      	movs	r3, #0
 801b6d4:	602b      	str	r3, [r5, #0]
 801b6d6:	89b3      	ldrh	r3, [r6, #12]
 801b6d8:	061a      	lsls	r2, r3, #24
 801b6da:	d410      	bmi.n	801b6fe <__swhatbuf_r+0x3e>
 801b6dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b6e0:	e00e      	b.n	801b700 <__swhatbuf_r+0x40>
 801b6e2:	466a      	mov	r2, sp
 801b6e4:	f001 fbd2 	bl	801ce8c <_fstat_r>
 801b6e8:	2800      	cmp	r0, #0
 801b6ea:	dbf2      	blt.n	801b6d2 <__swhatbuf_r+0x12>
 801b6ec:	9a01      	ldr	r2, [sp, #4]
 801b6ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b6f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b6f6:	425a      	negs	r2, r3
 801b6f8:	415a      	adcs	r2, r3
 801b6fa:	602a      	str	r2, [r5, #0]
 801b6fc:	e7ee      	b.n	801b6dc <__swhatbuf_r+0x1c>
 801b6fe:	2340      	movs	r3, #64	; 0x40
 801b700:	2000      	movs	r0, #0
 801b702:	6023      	str	r3, [r4, #0]
 801b704:	b016      	add	sp, #88	; 0x58
 801b706:	bd70      	pop	{r4, r5, r6, pc}

0801b708 <__smakebuf_r>:
 801b708:	898b      	ldrh	r3, [r1, #12]
 801b70a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b70c:	079d      	lsls	r5, r3, #30
 801b70e:	4606      	mov	r6, r0
 801b710:	460c      	mov	r4, r1
 801b712:	d507      	bpl.n	801b724 <__smakebuf_r+0x1c>
 801b714:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b718:	6023      	str	r3, [r4, #0]
 801b71a:	6123      	str	r3, [r4, #16]
 801b71c:	2301      	movs	r3, #1
 801b71e:	6163      	str	r3, [r4, #20]
 801b720:	b002      	add	sp, #8
 801b722:	bd70      	pop	{r4, r5, r6, pc}
 801b724:	ab01      	add	r3, sp, #4
 801b726:	466a      	mov	r2, sp
 801b728:	f7ff ffca 	bl	801b6c0 <__swhatbuf_r>
 801b72c:	9900      	ldr	r1, [sp, #0]
 801b72e:	4605      	mov	r5, r0
 801b730:	4630      	mov	r0, r6
 801b732:	f7fc f865 	bl	8017800 <_malloc_r>
 801b736:	b948      	cbnz	r0, 801b74c <__smakebuf_r+0x44>
 801b738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b73c:	059a      	lsls	r2, r3, #22
 801b73e:	d4ef      	bmi.n	801b720 <__smakebuf_r+0x18>
 801b740:	f023 0303 	bic.w	r3, r3, #3
 801b744:	f043 0302 	orr.w	r3, r3, #2
 801b748:	81a3      	strh	r3, [r4, #12]
 801b74a:	e7e3      	b.n	801b714 <__smakebuf_r+0xc>
 801b74c:	4b0d      	ldr	r3, [pc, #52]	; (801b784 <__smakebuf_r+0x7c>)
 801b74e:	62b3      	str	r3, [r6, #40]	; 0x28
 801b750:	89a3      	ldrh	r3, [r4, #12]
 801b752:	6020      	str	r0, [r4, #0]
 801b754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b758:	81a3      	strh	r3, [r4, #12]
 801b75a:	9b00      	ldr	r3, [sp, #0]
 801b75c:	6163      	str	r3, [r4, #20]
 801b75e:	9b01      	ldr	r3, [sp, #4]
 801b760:	6120      	str	r0, [r4, #16]
 801b762:	b15b      	cbz	r3, 801b77c <__smakebuf_r+0x74>
 801b764:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b768:	4630      	mov	r0, r6
 801b76a:	f001 fba1 	bl	801ceb0 <_isatty_r>
 801b76e:	b128      	cbz	r0, 801b77c <__smakebuf_r+0x74>
 801b770:	89a3      	ldrh	r3, [r4, #12]
 801b772:	f023 0303 	bic.w	r3, r3, #3
 801b776:	f043 0301 	orr.w	r3, r3, #1
 801b77a:	81a3      	strh	r3, [r4, #12]
 801b77c:	89a0      	ldrh	r0, [r4, #12]
 801b77e:	4305      	orrs	r5, r0
 801b780:	81a5      	strh	r5, [r4, #12]
 801b782:	e7cd      	b.n	801b720 <__smakebuf_r+0x18>
 801b784:	08016db5 	.word	0x08016db5

0801b788 <__ascii_mbtowc>:
 801b788:	b082      	sub	sp, #8
 801b78a:	b901      	cbnz	r1, 801b78e <__ascii_mbtowc+0x6>
 801b78c:	a901      	add	r1, sp, #4
 801b78e:	b142      	cbz	r2, 801b7a2 <__ascii_mbtowc+0x1a>
 801b790:	b14b      	cbz	r3, 801b7a6 <__ascii_mbtowc+0x1e>
 801b792:	7813      	ldrb	r3, [r2, #0]
 801b794:	600b      	str	r3, [r1, #0]
 801b796:	7812      	ldrb	r2, [r2, #0]
 801b798:	1e10      	subs	r0, r2, #0
 801b79a:	bf18      	it	ne
 801b79c:	2001      	movne	r0, #1
 801b79e:	b002      	add	sp, #8
 801b7a0:	4770      	bx	lr
 801b7a2:	4610      	mov	r0, r2
 801b7a4:	e7fb      	b.n	801b79e <__ascii_mbtowc+0x16>
 801b7a6:	f06f 0001 	mvn.w	r0, #1
 801b7aa:	e7f8      	b.n	801b79e <__ascii_mbtowc+0x16>

0801b7ac <__malloc_lock>:
 801b7ac:	4801      	ldr	r0, [pc, #4]	; (801b7b4 <__malloc_lock+0x8>)
 801b7ae:	f7fb bd15 	b.w	80171dc <__retarget_lock_acquire_recursive>
 801b7b2:	bf00      	nop
 801b7b4:	20006be0 	.word	0x20006be0

0801b7b8 <__malloc_unlock>:
 801b7b8:	4801      	ldr	r0, [pc, #4]	; (801b7c0 <__malloc_unlock+0x8>)
 801b7ba:	f7fb bd11 	b.w	80171e0 <__retarget_lock_release_recursive>
 801b7be:	bf00      	nop
 801b7c0:	20006be0 	.word	0x20006be0

0801b7c4 <_Balloc>:
 801b7c4:	b570      	push	{r4, r5, r6, lr}
 801b7c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b7c8:	4604      	mov	r4, r0
 801b7ca:	460d      	mov	r5, r1
 801b7cc:	b976      	cbnz	r6, 801b7ec <_Balloc+0x28>
 801b7ce:	2010      	movs	r0, #16
 801b7d0:	f7fb fd08 	bl	80171e4 <malloc>
 801b7d4:	4602      	mov	r2, r0
 801b7d6:	6260      	str	r0, [r4, #36]	; 0x24
 801b7d8:	b920      	cbnz	r0, 801b7e4 <_Balloc+0x20>
 801b7da:	4b18      	ldr	r3, [pc, #96]	; (801b83c <_Balloc+0x78>)
 801b7dc:	4818      	ldr	r0, [pc, #96]	; (801b840 <_Balloc+0x7c>)
 801b7de:	2166      	movs	r1, #102	; 0x66
 801b7e0:	f7fe fb64 	bl	8019eac <__assert_func>
 801b7e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b7e8:	6006      	str	r6, [r0, #0]
 801b7ea:	60c6      	str	r6, [r0, #12]
 801b7ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801b7ee:	68f3      	ldr	r3, [r6, #12]
 801b7f0:	b183      	cbz	r3, 801b814 <_Balloc+0x50>
 801b7f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b7f4:	68db      	ldr	r3, [r3, #12]
 801b7f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b7fa:	b9b8      	cbnz	r0, 801b82c <_Balloc+0x68>
 801b7fc:	2101      	movs	r1, #1
 801b7fe:	fa01 f605 	lsl.w	r6, r1, r5
 801b802:	1d72      	adds	r2, r6, #5
 801b804:	0092      	lsls	r2, r2, #2
 801b806:	4620      	mov	r0, r4
 801b808:	f000 fc97 	bl	801c13a <_calloc_r>
 801b80c:	b160      	cbz	r0, 801b828 <_Balloc+0x64>
 801b80e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b812:	e00e      	b.n	801b832 <_Balloc+0x6e>
 801b814:	2221      	movs	r2, #33	; 0x21
 801b816:	2104      	movs	r1, #4
 801b818:	4620      	mov	r0, r4
 801b81a:	f000 fc8e 	bl	801c13a <_calloc_r>
 801b81e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b820:	60f0      	str	r0, [r6, #12]
 801b822:	68db      	ldr	r3, [r3, #12]
 801b824:	2b00      	cmp	r3, #0
 801b826:	d1e4      	bne.n	801b7f2 <_Balloc+0x2e>
 801b828:	2000      	movs	r0, #0
 801b82a:	bd70      	pop	{r4, r5, r6, pc}
 801b82c:	6802      	ldr	r2, [r0, #0]
 801b82e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b832:	2300      	movs	r3, #0
 801b834:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b838:	e7f7      	b.n	801b82a <_Balloc+0x66>
 801b83a:	bf00      	nop
 801b83c:	0801ee90 	.word	0x0801ee90
 801b840:	0801f224 	.word	0x0801f224

0801b844 <_Bfree>:
 801b844:	b570      	push	{r4, r5, r6, lr}
 801b846:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b848:	4605      	mov	r5, r0
 801b84a:	460c      	mov	r4, r1
 801b84c:	b976      	cbnz	r6, 801b86c <_Bfree+0x28>
 801b84e:	2010      	movs	r0, #16
 801b850:	f7fb fcc8 	bl	80171e4 <malloc>
 801b854:	4602      	mov	r2, r0
 801b856:	6268      	str	r0, [r5, #36]	; 0x24
 801b858:	b920      	cbnz	r0, 801b864 <_Bfree+0x20>
 801b85a:	4b09      	ldr	r3, [pc, #36]	; (801b880 <_Bfree+0x3c>)
 801b85c:	4809      	ldr	r0, [pc, #36]	; (801b884 <_Bfree+0x40>)
 801b85e:	218a      	movs	r1, #138	; 0x8a
 801b860:	f7fe fb24 	bl	8019eac <__assert_func>
 801b864:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b868:	6006      	str	r6, [r0, #0]
 801b86a:	60c6      	str	r6, [r0, #12]
 801b86c:	b13c      	cbz	r4, 801b87e <_Bfree+0x3a>
 801b86e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b870:	6862      	ldr	r2, [r4, #4]
 801b872:	68db      	ldr	r3, [r3, #12]
 801b874:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b878:	6021      	str	r1, [r4, #0]
 801b87a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b87e:	bd70      	pop	{r4, r5, r6, pc}
 801b880:	0801ee90 	.word	0x0801ee90
 801b884:	0801f224 	.word	0x0801f224

0801b888 <__multadd>:
 801b888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b88c:	690e      	ldr	r6, [r1, #16]
 801b88e:	4607      	mov	r7, r0
 801b890:	4698      	mov	r8, r3
 801b892:	460c      	mov	r4, r1
 801b894:	f101 0014 	add.w	r0, r1, #20
 801b898:	2300      	movs	r3, #0
 801b89a:	6805      	ldr	r5, [r0, #0]
 801b89c:	b2a9      	uxth	r1, r5
 801b89e:	fb02 8101 	mla	r1, r2, r1, r8
 801b8a2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801b8a6:	0c2d      	lsrs	r5, r5, #16
 801b8a8:	fb02 c505 	mla	r5, r2, r5, ip
 801b8ac:	b289      	uxth	r1, r1
 801b8ae:	3301      	adds	r3, #1
 801b8b0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801b8b4:	429e      	cmp	r6, r3
 801b8b6:	f840 1b04 	str.w	r1, [r0], #4
 801b8ba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801b8be:	dcec      	bgt.n	801b89a <__multadd+0x12>
 801b8c0:	f1b8 0f00 	cmp.w	r8, #0
 801b8c4:	d022      	beq.n	801b90c <__multadd+0x84>
 801b8c6:	68a3      	ldr	r3, [r4, #8]
 801b8c8:	42b3      	cmp	r3, r6
 801b8ca:	dc19      	bgt.n	801b900 <__multadd+0x78>
 801b8cc:	6861      	ldr	r1, [r4, #4]
 801b8ce:	4638      	mov	r0, r7
 801b8d0:	3101      	adds	r1, #1
 801b8d2:	f7ff ff77 	bl	801b7c4 <_Balloc>
 801b8d6:	4605      	mov	r5, r0
 801b8d8:	b928      	cbnz	r0, 801b8e6 <__multadd+0x5e>
 801b8da:	4602      	mov	r2, r0
 801b8dc:	4b0d      	ldr	r3, [pc, #52]	; (801b914 <__multadd+0x8c>)
 801b8de:	480e      	ldr	r0, [pc, #56]	; (801b918 <__multadd+0x90>)
 801b8e0:	21b5      	movs	r1, #181	; 0xb5
 801b8e2:	f7fe fae3 	bl	8019eac <__assert_func>
 801b8e6:	6922      	ldr	r2, [r4, #16]
 801b8e8:	3202      	adds	r2, #2
 801b8ea:	f104 010c 	add.w	r1, r4, #12
 801b8ee:	0092      	lsls	r2, r2, #2
 801b8f0:	300c      	adds	r0, #12
 801b8f2:	f7fb fc87 	bl	8017204 <memcpy>
 801b8f6:	4621      	mov	r1, r4
 801b8f8:	4638      	mov	r0, r7
 801b8fa:	f7ff ffa3 	bl	801b844 <_Bfree>
 801b8fe:	462c      	mov	r4, r5
 801b900:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801b904:	3601      	adds	r6, #1
 801b906:	f8c3 8014 	str.w	r8, [r3, #20]
 801b90a:	6126      	str	r6, [r4, #16]
 801b90c:	4620      	mov	r0, r4
 801b90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b912:	bf00      	nop
 801b914:	0801f195 	.word	0x0801f195
 801b918:	0801f224 	.word	0x0801f224

0801b91c <__s2b>:
 801b91c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b920:	460c      	mov	r4, r1
 801b922:	4615      	mov	r5, r2
 801b924:	461f      	mov	r7, r3
 801b926:	2209      	movs	r2, #9
 801b928:	3308      	adds	r3, #8
 801b92a:	4606      	mov	r6, r0
 801b92c:	fb93 f3f2 	sdiv	r3, r3, r2
 801b930:	2100      	movs	r1, #0
 801b932:	2201      	movs	r2, #1
 801b934:	429a      	cmp	r2, r3
 801b936:	db09      	blt.n	801b94c <__s2b+0x30>
 801b938:	4630      	mov	r0, r6
 801b93a:	f7ff ff43 	bl	801b7c4 <_Balloc>
 801b93e:	b940      	cbnz	r0, 801b952 <__s2b+0x36>
 801b940:	4602      	mov	r2, r0
 801b942:	4b19      	ldr	r3, [pc, #100]	; (801b9a8 <__s2b+0x8c>)
 801b944:	4819      	ldr	r0, [pc, #100]	; (801b9ac <__s2b+0x90>)
 801b946:	21ce      	movs	r1, #206	; 0xce
 801b948:	f7fe fab0 	bl	8019eac <__assert_func>
 801b94c:	0052      	lsls	r2, r2, #1
 801b94e:	3101      	adds	r1, #1
 801b950:	e7f0      	b.n	801b934 <__s2b+0x18>
 801b952:	9b08      	ldr	r3, [sp, #32]
 801b954:	6143      	str	r3, [r0, #20]
 801b956:	2d09      	cmp	r5, #9
 801b958:	f04f 0301 	mov.w	r3, #1
 801b95c:	6103      	str	r3, [r0, #16]
 801b95e:	dd16      	ble.n	801b98e <__s2b+0x72>
 801b960:	f104 0909 	add.w	r9, r4, #9
 801b964:	46c8      	mov	r8, r9
 801b966:	442c      	add	r4, r5
 801b968:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b96c:	4601      	mov	r1, r0
 801b96e:	3b30      	subs	r3, #48	; 0x30
 801b970:	220a      	movs	r2, #10
 801b972:	4630      	mov	r0, r6
 801b974:	f7ff ff88 	bl	801b888 <__multadd>
 801b978:	45a0      	cmp	r8, r4
 801b97a:	d1f5      	bne.n	801b968 <__s2b+0x4c>
 801b97c:	f1a5 0408 	sub.w	r4, r5, #8
 801b980:	444c      	add	r4, r9
 801b982:	1b2d      	subs	r5, r5, r4
 801b984:	1963      	adds	r3, r4, r5
 801b986:	42bb      	cmp	r3, r7
 801b988:	db04      	blt.n	801b994 <__s2b+0x78>
 801b98a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b98e:	340a      	adds	r4, #10
 801b990:	2509      	movs	r5, #9
 801b992:	e7f6      	b.n	801b982 <__s2b+0x66>
 801b994:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b998:	4601      	mov	r1, r0
 801b99a:	3b30      	subs	r3, #48	; 0x30
 801b99c:	220a      	movs	r2, #10
 801b99e:	4630      	mov	r0, r6
 801b9a0:	f7ff ff72 	bl	801b888 <__multadd>
 801b9a4:	e7ee      	b.n	801b984 <__s2b+0x68>
 801b9a6:	bf00      	nop
 801b9a8:	0801f195 	.word	0x0801f195
 801b9ac:	0801f224 	.word	0x0801f224

0801b9b0 <__hi0bits>:
 801b9b0:	0c03      	lsrs	r3, r0, #16
 801b9b2:	041b      	lsls	r3, r3, #16
 801b9b4:	b9d3      	cbnz	r3, 801b9ec <__hi0bits+0x3c>
 801b9b6:	0400      	lsls	r0, r0, #16
 801b9b8:	2310      	movs	r3, #16
 801b9ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b9be:	bf04      	itt	eq
 801b9c0:	0200      	lsleq	r0, r0, #8
 801b9c2:	3308      	addeq	r3, #8
 801b9c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b9c8:	bf04      	itt	eq
 801b9ca:	0100      	lsleq	r0, r0, #4
 801b9cc:	3304      	addeq	r3, #4
 801b9ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b9d2:	bf04      	itt	eq
 801b9d4:	0080      	lsleq	r0, r0, #2
 801b9d6:	3302      	addeq	r3, #2
 801b9d8:	2800      	cmp	r0, #0
 801b9da:	db05      	blt.n	801b9e8 <__hi0bits+0x38>
 801b9dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801b9e0:	f103 0301 	add.w	r3, r3, #1
 801b9e4:	bf08      	it	eq
 801b9e6:	2320      	moveq	r3, #32
 801b9e8:	4618      	mov	r0, r3
 801b9ea:	4770      	bx	lr
 801b9ec:	2300      	movs	r3, #0
 801b9ee:	e7e4      	b.n	801b9ba <__hi0bits+0xa>

0801b9f0 <__lo0bits>:
 801b9f0:	6803      	ldr	r3, [r0, #0]
 801b9f2:	f013 0207 	ands.w	r2, r3, #7
 801b9f6:	4601      	mov	r1, r0
 801b9f8:	d00b      	beq.n	801ba12 <__lo0bits+0x22>
 801b9fa:	07da      	lsls	r2, r3, #31
 801b9fc:	d424      	bmi.n	801ba48 <__lo0bits+0x58>
 801b9fe:	0798      	lsls	r0, r3, #30
 801ba00:	bf49      	itett	mi
 801ba02:	085b      	lsrmi	r3, r3, #1
 801ba04:	089b      	lsrpl	r3, r3, #2
 801ba06:	2001      	movmi	r0, #1
 801ba08:	600b      	strmi	r3, [r1, #0]
 801ba0a:	bf5c      	itt	pl
 801ba0c:	600b      	strpl	r3, [r1, #0]
 801ba0e:	2002      	movpl	r0, #2
 801ba10:	4770      	bx	lr
 801ba12:	b298      	uxth	r0, r3
 801ba14:	b9b0      	cbnz	r0, 801ba44 <__lo0bits+0x54>
 801ba16:	0c1b      	lsrs	r3, r3, #16
 801ba18:	2010      	movs	r0, #16
 801ba1a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801ba1e:	bf04      	itt	eq
 801ba20:	0a1b      	lsreq	r3, r3, #8
 801ba22:	3008      	addeq	r0, #8
 801ba24:	071a      	lsls	r2, r3, #28
 801ba26:	bf04      	itt	eq
 801ba28:	091b      	lsreq	r3, r3, #4
 801ba2a:	3004      	addeq	r0, #4
 801ba2c:	079a      	lsls	r2, r3, #30
 801ba2e:	bf04      	itt	eq
 801ba30:	089b      	lsreq	r3, r3, #2
 801ba32:	3002      	addeq	r0, #2
 801ba34:	07da      	lsls	r2, r3, #31
 801ba36:	d403      	bmi.n	801ba40 <__lo0bits+0x50>
 801ba38:	085b      	lsrs	r3, r3, #1
 801ba3a:	f100 0001 	add.w	r0, r0, #1
 801ba3e:	d005      	beq.n	801ba4c <__lo0bits+0x5c>
 801ba40:	600b      	str	r3, [r1, #0]
 801ba42:	4770      	bx	lr
 801ba44:	4610      	mov	r0, r2
 801ba46:	e7e8      	b.n	801ba1a <__lo0bits+0x2a>
 801ba48:	2000      	movs	r0, #0
 801ba4a:	4770      	bx	lr
 801ba4c:	2020      	movs	r0, #32
 801ba4e:	4770      	bx	lr

0801ba50 <__i2b>:
 801ba50:	b510      	push	{r4, lr}
 801ba52:	460c      	mov	r4, r1
 801ba54:	2101      	movs	r1, #1
 801ba56:	f7ff feb5 	bl	801b7c4 <_Balloc>
 801ba5a:	4602      	mov	r2, r0
 801ba5c:	b928      	cbnz	r0, 801ba6a <__i2b+0x1a>
 801ba5e:	4b05      	ldr	r3, [pc, #20]	; (801ba74 <__i2b+0x24>)
 801ba60:	4805      	ldr	r0, [pc, #20]	; (801ba78 <__i2b+0x28>)
 801ba62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801ba66:	f7fe fa21 	bl	8019eac <__assert_func>
 801ba6a:	2301      	movs	r3, #1
 801ba6c:	6144      	str	r4, [r0, #20]
 801ba6e:	6103      	str	r3, [r0, #16]
 801ba70:	bd10      	pop	{r4, pc}
 801ba72:	bf00      	nop
 801ba74:	0801f195 	.word	0x0801f195
 801ba78:	0801f224 	.word	0x0801f224

0801ba7c <__multiply>:
 801ba7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba80:	4614      	mov	r4, r2
 801ba82:	690a      	ldr	r2, [r1, #16]
 801ba84:	6923      	ldr	r3, [r4, #16]
 801ba86:	429a      	cmp	r2, r3
 801ba88:	bfb8      	it	lt
 801ba8a:	460b      	movlt	r3, r1
 801ba8c:	460d      	mov	r5, r1
 801ba8e:	bfbc      	itt	lt
 801ba90:	4625      	movlt	r5, r4
 801ba92:	461c      	movlt	r4, r3
 801ba94:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801ba98:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801ba9c:	68ab      	ldr	r3, [r5, #8]
 801ba9e:	6869      	ldr	r1, [r5, #4]
 801baa0:	eb0a 0709 	add.w	r7, sl, r9
 801baa4:	42bb      	cmp	r3, r7
 801baa6:	b085      	sub	sp, #20
 801baa8:	bfb8      	it	lt
 801baaa:	3101      	addlt	r1, #1
 801baac:	f7ff fe8a 	bl	801b7c4 <_Balloc>
 801bab0:	b930      	cbnz	r0, 801bac0 <__multiply+0x44>
 801bab2:	4602      	mov	r2, r0
 801bab4:	4b42      	ldr	r3, [pc, #264]	; (801bbc0 <__multiply+0x144>)
 801bab6:	4843      	ldr	r0, [pc, #268]	; (801bbc4 <__multiply+0x148>)
 801bab8:	f240 115d 	movw	r1, #349	; 0x15d
 801babc:	f7fe f9f6 	bl	8019eac <__assert_func>
 801bac0:	f100 0614 	add.w	r6, r0, #20
 801bac4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801bac8:	4633      	mov	r3, r6
 801baca:	2200      	movs	r2, #0
 801bacc:	4543      	cmp	r3, r8
 801bace:	d31e      	bcc.n	801bb0e <__multiply+0x92>
 801bad0:	f105 0c14 	add.w	ip, r5, #20
 801bad4:	f104 0314 	add.w	r3, r4, #20
 801bad8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801badc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801bae0:	9202      	str	r2, [sp, #8]
 801bae2:	ebac 0205 	sub.w	r2, ip, r5
 801bae6:	3a15      	subs	r2, #21
 801bae8:	f022 0203 	bic.w	r2, r2, #3
 801baec:	3204      	adds	r2, #4
 801baee:	f105 0115 	add.w	r1, r5, #21
 801baf2:	458c      	cmp	ip, r1
 801baf4:	bf38      	it	cc
 801baf6:	2204      	movcc	r2, #4
 801baf8:	9201      	str	r2, [sp, #4]
 801bafa:	9a02      	ldr	r2, [sp, #8]
 801bafc:	9303      	str	r3, [sp, #12]
 801bafe:	429a      	cmp	r2, r3
 801bb00:	d808      	bhi.n	801bb14 <__multiply+0x98>
 801bb02:	2f00      	cmp	r7, #0
 801bb04:	dc55      	bgt.n	801bbb2 <__multiply+0x136>
 801bb06:	6107      	str	r7, [r0, #16]
 801bb08:	b005      	add	sp, #20
 801bb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb0e:	f843 2b04 	str.w	r2, [r3], #4
 801bb12:	e7db      	b.n	801bacc <__multiply+0x50>
 801bb14:	f8b3 a000 	ldrh.w	sl, [r3]
 801bb18:	f1ba 0f00 	cmp.w	sl, #0
 801bb1c:	d020      	beq.n	801bb60 <__multiply+0xe4>
 801bb1e:	f105 0e14 	add.w	lr, r5, #20
 801bb22:	46b1      	mov	r9, r6
 801bb24:	2200      	movs	r2, #0
 801bb26:	f85e 4b04 	ldr.w	r4, [lr], #4
 801bb2a:	f8d9 b000 	ldr.w	fp, [r9]
 801bb2e:	b2a1      	uxth	r1, r4
 801bb30:	fa1f fb8b 	uxth.w	fp, fp
 801bb34:	fb0a b101 	mla	r1, sl, r1, fp
 801bb38:	4411      	add	r1, r2
 801bb3a:	f8d9 2000 	ldr.w	r2, [r9]
 801bb3e:	0c24      	lsrs	r4, r4, #16
 801bb40:	0c12      	lsrs	r2, r2, #16
 801bb42:	fb0a 2404 	mla	r4, sl, r4, r2
 801bb46:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801bb4a:	b289      	uxth	r1, r1
 801bb4c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801bb50:	45f4      	cmp	ip, lr
 801bb52:	f849 1b04 	str.w	r1, [r9], #4
 801bb56:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801bb5a:	d8e4      	bhi.n	801bb26 <__multiply+0xaa>
 801bb5c:	9901      	ldr	r1, [sp, #4]
 801bb5e:	5072      	str	r2, [r6, r1]
 801bb60:	9a03      	ldr	r2, [sp, #12]
 801bb62:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801bb66:	3304      	adds	r3, #4
 801bb68:	f1b9 0f00 	cmp.w	r9, #0
 801bb6c:	d01f      	beq.n	801bbae <__multiply+0x132>
 801bb6e:	6834      	ldr	r4, [r6, #0]
 801bb70:	f105 0114 	add.w	r1, r5, #20
 801bb74:	46b6      	mov	lr, r6
 801bb76:	f04f 0a00 	mov.w	sl, #0
 801bb7a:	880a      	ldrh	r2, [r1, #0]
 801bb7c:	f8be b002 	ldrh.w	fp, [lr, #2]
 801bb80:	fb09 b202 	mla	r2, r9, r2, fp
 801bb84:	4492      	add	sl, r2
 801bb86:	b2a4      	uxth	r4, r4
 801bb88:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801bb8c:	f84e 4b04 	str.w	r4, [lr], #4
 801bb90:	f851 4b04 	ldr.w	r4, [r1], #4
 801bb94:	f8be 2000 	ldrh.w	r2, [lr]
 801bb98:	0c24      	lsrs	r4, r4, #16
 801bb9a:	fb09 2404 	mla	r4, r9, r4, r2
 801bb9e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801bba2:	458c      	cmp	ip, r1
 801bba4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801bba8:	d8e7      	bhi.n	801bb7a <__multiply+0xfe>
 801bbaa:	9a01      	ldr	r2, [sp, #4]
 801bbac:	50b4      	str	r4, [r6, r2]
 801bbae:	3604      	adds	r6, #4
 801bbb0:	e7a3      	b.n	801bafa <__multiply+0x7e>
 801bbb2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801bbb6:	2b00      	cmp	r3, #0
 801bbb8:	d1a5      	bne.n	801bb06 <__multiply+0x8a>
 801bbba:	3f01      	subs	r7, #1
 801bbbc:	e7a1      	b.n	801bb02 <__multiply+0x86>
 801bbbe:	bf00      	nop
 801bbc0:	0801f195 	.word	0x0801f195
 801bbc4:	0801f224 	.word	0x0801f224

0801bbc8 <__pow5mult>:
 801bbc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bbcc:	4615      	mov	r5, r2
 801bbce:	f012 0203 	ands.w	r2, r2, #3
 801bbd2:	4606      	mov	r6, r0
 801bbd4:	460f      	mov	r7, r1
 801bbd6:	d007      	beq.n	801bbe8 <__pow5mult+0x20>
 801bbd8:	4c25      	ldr	r4, [pc, #148]	; (801bc70 <__pow5mult+0xa8>)
 801bbda:	3a01      	subs	r2, #1
 801bbdc:	2300      	movs	r3, #0
 801bbde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801bbe2:	f7ff fe51 	bl	801b888 <__multadd>
 801bbe6:	4607      	mov	r7, r0
 801bbe8:	10ad      	asrs	r5, r5, #2
 801bbea:	d03d      	beq.n	801bc68 <__pow5mult+0xa0>
 801bbec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801bbee:	b97c      	cbnz	r4, 801bc10 <__pow5mult+0x48>
 801bbf0:	2010      	movs	r0, #16
 801bbf2:	f7fb faf7 	bl	80171e4 <malloc>
 801bbf6:	4602      	mov	r2, r0
 801bbf8:	6270      	str	r0, [r6, #36]	; 0x24
 801bbfa:	b928      	cbnz	r0, 801bc08 <__pow5mult+0x40>
 801bbfc:	4b1d      	ldr	r3, [pc, #116]	; (801bc74 <__pow5mult+0xac>)
 801bbfe:	481e      	ldr	r0, [pc, #120]	; (801bc78 <__pow5mult+0xb0>)
 801bc00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801bc04:	f7fe f952 	bl	8019eac <__assert_func>
 801bc08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801bc0c:	6004      	str	r4, [r0, #0]
 801bc0e:	60c4      	str	r4, [r0, #12]
 801bc10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801bc14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801bc18:	b94c      	cbnz	r4, 801bc2e <__pow5mult+0x66>
 801bc1a:	f240 2171 	movw	r1, #625	; 0x271
 801bc1e:	4630      	mov	r0, r6
 801bc20:	f7ff ff16 	bl	801ba50 <__i2b>
 801bc24:	2300      	movs	r3, #0
 801bc26:	f8c8 0008 	str.w	r0, [r8, #8]
 801bc2a:	4604      	mov	r4, r0
 801bc2c:	6003      	str	r3, [r0, #0]
 801bc2e:	f04f 0900 	mov.w	r9, #0
 801bc32:	07eb      	lsls	r3, r5, #31
 801bc34:	d50a      	bpl.n	801bc4c <__pow5mult+0x84>
 801bc36:	4639      	mov	r1, r7
 801bc38:	4622      	mov	r2, r4
 801bc3a:	4630      	mov	r0, r6
 801bc3c:	f7ff ff1e 	bl	801ba7c <__multiply>
 801bc40:	4639      	mov	r1, r7
 801bc42:	4680      	mov	r8, r0
 801bc44:	4630      	mov	r0, r6
 801bc46:	f7ff fdfd 	bl	801b844 <_Bfree>
 801bc4a:	4647      	mov	r7, r8
 801bc4c:	106d      	asrs	r5, r5, #1
 801bc4e:	d00b      	beq.n	801bc68 <__pow5mult+0xa0>
 801bc50:	6820      	ldr	r0, [r4, #0]
 801bc52:	b938      	cbnz	r0, 801bc64 <__pow5mult+0x9c>
 801bc54:	4622      	mov	r2, r4
 801bc56:	4621      	mov	r1, r4
 801bc58:	4630      	mov	r0, r6
 801bc5a:	f7ff ff0f 	bl	801ba7c <__multiply>
 801bc5e:	6020      	str	r0, [r4, #0]
 801bc60:	f8c0 9000 	str.w	r9, [r0]
 801bc64:	4604      	mov	r4, r0
 801bc66:	e7e4      	b.n	801bc32 <__pow5mult+0x6a>
 801bc68:	4638      	mov	r0, r7
 801bc6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bc6e:	bf00      	nop
 801bc70:	0801f378 	.word	0x0801f378
 801bc74:	0801ee90 	.word	0x0801ee90
 801bc78:	0801f224 	.word	0x0801f224

0801bc7c <__lshift>:
 801bc7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bc80:	460c      	mov	r4, r1
 801bc82:	6849      	ldr	r1, [r1, #4]
 801bc84:	6923      	ldr	r3, [r4, #16]
 801bc86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801bc8a:	68a3      	ldr	r3, [r4, #8]
 801bc8c:	4607      	mov	r7, r0
 801bc8e:	4691      	mov	r9, r2
 801bc90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801bc94:	f108 0601 	add.w	r6, r8, #1
 801bc98:	42b3      	cmp	r3, r6
 801bc9a:	db0b      	blt.n	801bcb4 <__lshift+0x38>
 801bc9c:	4638      	mov	r0, r7
 801bc9e:	f7ff fd91 	bl	801b7c4 <_Balloc>
 801bca2:	4605      	mov	r5, r0
 801bca4:	b948      	cbnz	r0, 801bcba <__lshift+0x3e>
 801bca6:	4602      	mov	r2, r0
 801bca8:	4b28      	ldr	r3, [pc, #160]	; (801bd4c <__lshift+0xd0>)
 801bcaa:	4829      	ldr	r0, [pc, #164]	; (801bd50 <__lshift+0xd4>)
 801bcac:	f240 11d9 	movw	r1, #473	; 0x1d9
 801bcb0:	f7fe f8fc 	bl	8019eac <__assert_func>
 801bcb4:	3101      	adds	r1, #1
 801bcb6:	005b      	lsls	r3, r3, #1
 801bcb8:	e7ee      	b.n	801bc98 <__lshift+0x1c>
 801bcba:	2300      	movs	r3, #0
 801bcbc:	f100 0114 	add.w	r1, r0, #20
 801bcc0:	f100 0210 	add.w	r2, r0, #16
 801bcc4:	4618      	mov	r0, r3
 801bcc6:	4553      	cmp	r3, sl
 801bcc8:	db33      	blt.n	801bd32 <__lshift+0xb6>
 801bcca:	6920      	ldr	r0, [r4, #16]
 801bccc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801bcd0:	f104 0314 	add.w	r3, r4, #20
 801bcd4:	f019 091f 	ands.w	r9, r9, #31
 801bcd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801bcdc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801bce0:	d02b      	beq.n	801bd3a <__lshift+0xbe>
 801bce2:	f1c9 0e20 	rsb	lr, r9, #32
 801bce6:	468a      	mov	sl, r1
 801bce8:	2200      	movs	r2, #0
 801bcea:	6818      	ldr	r0, [r3, #0]
 801bcec:	fa00 f009 	lsl.w	r0, r0, r9
 801bcf0:	4302      	orrs	r2, r0
 801bcf2:	f84a 2b04 	str.w	r2, [sl], #4
 801bcf6:	f853 2b04 	ldr.w	r2, [r3], #4
 801bcfa:	459c      	cmp	ip, r3
 801bcfc:	fa22 f20e 	lsr.w	r2, r2, lr
 801bd00:	d8f3      	bhi.n	801bcea <__lshift+0x6e>
 801bd02:	ebac 0304 	sub.w	r3, ip, r4
 801bd06:	3b15      	subs	r3, #21
 801bd08:	f023 0303 	bic.w	r3, r3, #3
 801bd0c:	3304      	adds	r3, #4
 801bd0e:	f104 0015 	add.w	r0, r4, #21
 801bd12:	4584      	cmp	ip, r0
 801bd14:	bf38      	it	cc
 801bd16:	2304      	movcc	r3, #4
 801bd18:	50ca      	str	r2, [r1, r3]
 801bd1a:	b10a      	cbz	r2, 801bd20 <__lshift+0xa4>
 801bd1c:	f108 0602 	add.w	r6, r8, #2
 801bd20:	3e01      	subs	r6, #1
 801bd22:	4638      	mov	r0, r7
 801bd24:	612e      	str	r6, [r5, #16]
 801bd26:	4621      	mov	r1, r4
 801bd28:	f7ff fd8c 	bl	801b844 <_Bfree>
 801bd2c:	4628      	mov	r0, r5
 801bd2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd32:	f842 0f04 	str.w	r0, [r2, #4]!
 801bd36:	3301      	adds	r3, #1
 801bd38:	e7c5      	b.n	801bcc6 <__lshift+0x4a>
 801bd3a:	3904      	subs	r1, #4
 801bd3c:	f853 2b04 	ldr.w	r2, [r3], #4
 801bd40:	f841 2f04 	str.w	r2, [r1, #4]!
 801bd44:	459c      	cmp	ip, r3
 801bd46:	d8f9      	bhi.n	801bd3c <__lshift+0xc0>
 801bd48:	e7ea      	b.n	801bd20 <__lshift+0xa4>
 801bd4a:	bf00      	nop
 801bd4c:	0801f195 	.word	0x0801f195
 801bd50:	0801f224 	.word	0x0801f224

0801bd54 <__mcmp>:
 801bd54:	b530      	push	{r4, r5, lr}
 801bd56:	6902      	ldr	r2, [r0, #16]
 801bd58:	690c      	ldr	r4, [r1, #16]
 801bd5a:	1b12      	subs	r2, r2, r4
 801bd5c:	d10e      	bne.n	801bd7c <__mcmp+0x28>
 801bd5e:	f100 0314 	add.w	r3, r0, #20
 801bd62:	3114      	adds	r1, #20
 801bd64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801bd68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801bd6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801bd70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801bd74:	42a5      	cmp	r5, r4
 801bd76:	d003      	beq.n	801bd80 <__mcmp+0x2c>
 801bd78:	d305      	bcc.n	801bd86 <__mcmp+0x32>
 801bd7a:	2201      	movs	r2, #1
 801bd7c:	4610      	mov	r0, r2
 801bd7e:	bd30      	pop	{r4, r5, pc}
 801bd80:	4283      	cmp	r3, r0
 801bd82:	d3f3      	bcc.n	801bd6c <__mcmp+0x18>
 801bd84:	e7fa      	b.n	801bd7c <__mcmp+0x28>
 801bd86:	f04f 32ff 	mov.w	r2, #4294967295
 801bd8a:	e7f7      	b.n	801bd7c <__mcmp+0x28>

0801bd8c <__mdiff>:
 801bd8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd90:	460c      	mov	r4, r1
 801bd92:	4606      	mov	r6, r0
 801bd94:	4611      	mov	r1, r2
 801bd96:	4620      	mov	r0, r4
 801bd98:	4617      	mov	r7, r2
 801bd9a:	f7ff ffdb 	bl	801bd54 <__mcmp>
 801bd9e:	1e05      	subs	r5, r0, #0
 801bda0:	d110      	bne.n	801bdc4 <__mdiff+0x38>
 801bda2:	4629      	mov	r1, r5
 801bda4:	4630      	mov	r0, r6
 801bda6:	f7ff fd0d 	bl	801b7c4 <_Balloc>
 801bdaa:	b930      	cbnz	r0, 801bdba <__mdiff+0x2e>
 801bdac:	4b39      	ldr	r3, [pc, #228]	; (801be94 <__mdiff+0x108>)
 801bdae:	4602      	mov	r2, r0
 801bdb0:	f240 2132 	movw	r1, #562	; 0x232
 801bdb4:	4838      	ldr	r0, [pc, #224]	; (801be98 <__mdiff+0x10c>)
 801bdb6:	f7fe f879 	bl	8019eac <__assert_func>
 801bdba:	2301      	movs	r3, #1
 801bdbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801bdc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdc4:	bfa4      	itt	ge
 801bdc6:	463b      	movge	r3, r7
 801bdc8:	4627      	movge	r7, r4
 801bdca:	4630      	mov	r0, r6
 801bdcc:	6879      	ldr	r1, [r7, #4]
 801bdce:	bfa6      	itte	ge
 801bdd0:	461c      	movge	r4, r3
 801bdd2:	2500      	movge	r5, #0
 801bdd4:	2501      	movlt	r5, #1
 801bdd6:	f7ff fcf5 	bl	801b7c4 <_Balloc>
 801bdda:	b920      	cbnz	r0, 801bde6 <__mdiff+0x5a>
 801bddc:	4b2d      	ldr	r3, [pc, #180]	; (801be94 <__mdiff+0x108>)
 801bdde:	4602      	mov	r2, r0
 801bde0:	f44f 7110 	mov.w	r1, #576	; 0x240
 801bde4:	e7e6      	b.n	801bdb4 <__mdiff+0x28>
 801bde6:	693e      	ldr	r6, [r7, #16]
 801bde8:	60c5      	str	r5, [r0, #12]
 801bdea:	6925      	ldr	r5, [r4, #16]
 801bdec:	f107 0114 	add.w	r1, r7, #20
 801bdf0:	f104 0914 	add.w	r9, r4, #20
 801bdf4:	f100 0e14 	add.w	lr, r0, #20
 801bdf8:	f107 0210 	add.w	r2, r7, #16
 801bdfc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801be00:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801be04:	46f2      	mov	sl, lr
 801be06:	2700      	movs	r7, #0
 801be08:	f859 3b04 	ldr.w	r3, [r9], #4
 801be0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801be10:	fa1f f883 	uxth.w	r8, r3
 801be14:	fa17 f78b 	uxtah	r7, r7, fp
 801be18:	0c1b      	lsrs	r3, r3, #16
 801be1a:	eba7 0808 	sub.w	r8, r7, r8
 801be1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801be22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801be26:	fa1f f888 	uxth.w	r8, r8
 801be2a:	141f      	asrs	r7, r3, #16
 801be2c:	454d      	cmp	r5, r9
 801be2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801be32:	f84a 3b04 	str.w	r3, [sl], #4
 801be36:	d8e7      	bhi.n	801be08 <__mdiff+0x7c>
 801be38:	1b2b      	subs	r3, r5, r4
 801be3a:	3b15      	subs	r3, #21
 801be3c:	f023 0303 	bic.w	r3, r3, #3
 801be40:	3304      	adds	r3, #4
 801be42:	3415      	adds	r4, #21
 801be44:	42a5      	cmp	r5, r4
 801be46:	bf38      	it	cc
 801be48:	2304      	movcc	r3, #4
 801be4a:	4419      	add	r1, r3
 801be4c:	4473      	add	r3, lr
 801be4e:	469e      	mov	lr, r3
 801be50:	460d      	mov	r5, r1
 801be52:	4565      	cmp	r5, ip
 801be54:	d30e      	bcc.n	801be74 <__mdiff+0xe8>
 801be56:	f10c 0203 	add.w	r2, ip, #3
 801be5a:	1a52      	subs	r2, r2, r1
 801be5c:	f022 0203 	bic.w	r2, r2, #3
 801be60:	3903      	subs	r1, #3
 801be62:	458c      	cmp	ip, r1
 801be64:	bf38      	it	cc
 801be66:	2200      	movcc	r2, #0
 801be68:	441a      	add	r2, r3
 801be6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801be6e:	b17b      	cbz	r3, 801be90 <__mdiff+0x104>
 801be70:	6106      	str	r6, [r0, #16]
 801be72:	e7a5      	b.n	801bdc0 <__mdiff+0x34>
 801be74:	f855 8b04 	ldr.w	r8, [r5], #4
 801be78:	fa17 f488 	uxtah	r4, r7, r8
 801be7c:	1422      	asrs	r2, r4, #16
 801be7e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801be82:	b2a4      	uxth	r4, r4
 801be84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801be88:	f84e 4b04 	str.w	r4, [lr], #4
 801be8c:	1417      	asrs	r7, r2, #16
 801be8e:	e7e0      	b.n	801be52 <__mdiff+0xc6>
 801be90:	3e01      	subs	r6, #1
 801be92:	e7ea      	b.n	801be6a <__mdiff+0xde>
 801be94:	0801f195 	.word	0x0801f195
 801be98:	0801f224 	.word	0x0801f224

0801be9c <__ulp>:
 801be9c:	b082      	sub	sp, #8
 801be9e:	ed8d 0b00 	vstr	d0, [sp]
 801bea2:	9b01      	ldr	r3, [sp, #4]
 801bea4:	4912      	ldr	r1, [pc, #72]	; (801bef0 <__ulp+0x54>)
 801bea6:	4019      	ands	r1, r3
 801bea8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801beac:	2900      	cmp	r1, #0
 801beae:	dd05      	ble.n	801bebc <__ulp+0x20>
 801beb0:	2200      	movs	r2, #0
 801beb2:	460b      	mov	r3, r1
 801beb4:	ec43 2b10 	vmov	d0, r2, r3
 801beb8:	b002      	add	sp, #8
 801beba:	4770      	bx	lr
 801bebc:	4249      	negs	r1, r1
 801bebe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801bec2:	ea4f 5021 	mov.w	r0, r1, asr #20
 801bec6:	f04f 0200 	mov.w	r2, #0
 801beca:	f04f 0300 	mov.w	r3, #0
 801bece:	da04      	bge.n	801beda <__ulp+0x3e>
 801bed0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801bed4:	fa41 f300 	asr.w	r3, r1, r0
 801bed8:	e7ec      	b.n	801beb4 <__ulp+0x18>
 801beda:	f1a0 0114 	sub.w	r1, r0, #20
 801bede:	291e      	cmp	r1, #30
 801bee0:	bfda      	itte	le
 801bee2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801bee6:	fa20 f101 	lsrle.w	r1, r0, r1
 801beea:	2101      	movgt	r1, #1
 801beec:	460a      	mov	r2, r1
 801beee:	e7e1      	b.n	801beb4 <__ulp+0x18>
 801bef0:	7ff00000 	.word	0x7ff00000

0801bef4 <__b2d>:
 801bef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bef6:	6905      	ldr	r5, [r0, #16]
 801bef8:	f100 0714 	add.w	r7, r0, #20
 801befc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801bf00:	1f2e      	subs	r6, r5, #4
 801bf02:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801bf06:	4620      	mov	r0, r4
 801bf08:	f7ff fd52 	bl	801b9b0 <__hi0bits>
 801bf0c:	f1c0 0320 	rsb	r3, r0, #32
 801bf10:	280a      	cmp	r0, #10
 801bf12:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801bf90 <__b2d+0x9c>
 801bf16:	600b      	str	r3, [r1, #0]
 801bf18:	dc14      	bgt.n	801bf44 <__b2d+0x50>
 801bf1a:	f1c0 0e0b 	rsb	lr, r0, #11
 801bf1e:	fa24 f10e 	lsr.w	r1, r4, lr
 801bf22:	42b7      	cmp	r7, r6
 801bf24:	ea41 030c 	orr.w	r3, r1, ip
 801bf28:	bf34      	ite	cc
 801bf2a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801bf2e:	2100      	movcs	r1, #0
 801bf30:	3015      	adds	r0, #21
 801bf32:	fa04 f000 	lsl.w	r0, r4, r0
 801bf36:	fa21 f10e 	lsr.w	r1, r1, lr
 801bf3a:	ea40 0201 	orr.w	r2, r0, r1
 801bf3e:	ec43 2b10 	vmov	d0, r2, r3
 801bf42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf44:	42b7      	cmp	r7, r6
 801bf46:	bf3a      	itte	cc
 801bf48:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801bf4c:	f1a5 0608 	subcc.w	r6, r5, #8
 801bf50:	2100      	movcs	r1, #0
 801bf52:	380b      	subs	r0, #11
 801bf54:	d017      	beq.n	801bf86 <__b2d+0x92>
 801bf56:	f1c0 0c20 	rsb	ip, r0, #32
 801bf5a:	fa04 f500 	lsl.w	r5, r4, r0
 801bf5e:	42be      	cmp	r6, r7
 801bf60:	fa21 f40c 	lsr.w	r4, r1, ip
 801bf64:	ea45 0504 	orr.w	r5, r5, r4
 801bf68:	bf8c      	ite	hi
 801bf6a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801bf6e:	2400      	movls	r4, #0
 801bf70:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801bf74:	fa01 f000 	lsl.w	r0, r1, r0
 801bf78:	fa24 f40c 	lsr.w	r4, r4, ip
 801bf7c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801bf80:	ea40 0204 	orr.w	r2, r0, r4
 801bf84:	e7db      	b.n	801bf3e <__b2d+0x4a>
 801bf86:	ea44 030c 	orr.w	r3, r4, ip
 801bf8a:	460a      	mov	r2, r1
 801bf8c:	e7d7      	b.n	801bf3e <__b2d+0x4a>
 801bf8e:	bf00      	nop
 801bf90:	3ff00000 	.word	0x3ff00000

0801bf94 <__d2b>:
 801bf94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801bf98:	4689      	mov	r9, r1
 801bf9a:	2101      	movs	r1, #1
 801bf9c:	ec57 6b10 	vmov	r6, r7, d0
 801bfa0:	4690      	mov	r8, r2
 801bfa2:	f7ff fc0f 	bl	801b7c4 <_Balloc>
 801bfa6:	4604      	mov	r4, r0
 801bfa8:	b930      	cbnz	r0, 801bfb8 <__d2b+0x24>
 801bfaa:	4602      	mov	r2, r0
 801bfac:	4b25      	ldr	r3, [pc, #148]	; (801c044 <__d2b+0xb0>)
 801bfae:	4826      	ldr	r0, [pc, #152]	; (801c048 <__d2b+0xb4>)
 801bfb0:	f240 310a 	movw	r1, #778	; 0x30a
 801bfb4:	f7fd ff7a 	bl	8019eac <__assert_func>
 801bfb8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801bfbc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801bfc0:	bb35      	cbnz	r5, 801c010 <__d2b+0x7c>
 801bfc2:	2e00      	cmp	r6, #0
 801bfc4:	9301      	str	r3, [sp, #4]
 801bfc6:	d028      	beq.n	801c01a <__d2b+0x86>
 801bfc8:	4668      	mov	r0, sp
 801bfca:	9600      	str	r6, [sp, #0]
 801bfcc:	f7ff fd10 	bl	801b9f0 <__lo0bits>
 801bfd0:	9900      	ldr	r1, [sp, #0]
 801bfd2:	b300      	cbz	r0, 801c016 <__d2b+0x82>
 801bfd4:	9a01      	ldr	r2, [sp, #4]
 801bfd6:	f1c0 0320 	rsb	r3, r0, #32
 801bfda:	fa02 f303 	lsl.w	r3, r2, r3
 801bfde:	430b      	orrs	r3, r1
 801bfe0:	40c2      	lsrs	r2, r0
 801bfe2:	6163      	str	r3, [r4, #20]
 801bfe4:	9201      	str	r2, [sp, #4]
 801bfe6:	9b01      	ldr	r3, [sp, #4]
 801bfe8:	61a3      	str	r3, [r4, #24]
 801bfea:	2b00      	cmp	r3, #0
 801bfec:	bf14      	ite	ne
 801bfee:	2202      	movne	r2, #2
 801bff0:	2201      	moveq	r2, #1
 801bff2:	6122      	str	r2, [r4, #16]
 801bff4:	b1d5      	cbz	r5, 801c02c <__d2b+0x98>
 801bff6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801bffa:	4405      	add	r5, r0
 801bffc:	f8c9 5000 	str.w	r5, [r9]
 801c000:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801c004:	f8c8 0000 	str.w	r0, [r8]
 801c008:	4620      	mov	r0, r4
 801c00a:	b003      	add	sp, #12
 801c00c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c010:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801c014:	e7d5      	b.n	801bfc2 <__d2b+0x2e>
 801c016:	6161      	str	r1, [r4, #20]
 801c018:	e7e5      	b.n	801bfe6 <__d2b+0x52>
 801c01a:	a801      	add	r0, sp, #4
 801c01c:	f7ff fce8 	bl	801b9f0 <__lo0bits>
 801c020:	9b01      	ldr	r3, [sp, #4]
 801c022:	6163      	str	r3, [r4, #20]
 801c024:	2201      	movs	r2, #1
 801c026:	6122      	str	r2, [r4, #16]
 801c028:	3020      	adds	r0, #32
 801c02a:	e7e3      	b.n	801bff4 <__d2b+0x60>
 801c02c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c030:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801c034:	f8c9 0000 	str.w	r0, [r9]
 801c038:	6918      	ldr	r0, [r3, #16]
 801c03a:	f7ff fcb9 	bl	801b9b0 <__hi0bits>
 801c03e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c042:	e7df      	b.n	801c004 <__d2b+0x70>
 801c044:	0801f195 	.word	0x0801f195
 801c048:	0801f224 	.word	0x0801f224

0801c04c <__ratio>:
 801c04c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c050:	4688      	mov	r8, r1
 801c052:	4669      	mov	r1, sp
 801c054:	4681      	mov	r9, r0
 801c056:	f7ff ff4d 	bl	801bef4 <__b2d>
 801c05a:	a901      	add	r1, sp, #4
 801c05c:	4640      	mov	r0, r8
 801c05e:	ec55 4b10 	vmov	r4, r5, d0
 801c062:	f7ff ff47 	bl	801bef4 <__b2d>
 801c066:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c06a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801c06e:	eba3 0c02 	sub.w	ip, r3, r2
 801c072:	e9dd 3200 	ldrd	r3, r2, [sp]
 801c076:	1a9b      	subs	r3, r3, r2
 801c078:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801c07c:	ec51 0b10 	vmov	r0, r1, d0
 801c080:	2b00      	cmp	r3, #0
 801c082:	bfd6      	itet	le
 801c084:	460a      	movle	r2, r1
 801c086:	462a      	movgt	r2, r5
 801c088:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801c08c:	468b      	mov	fp, r1
 801c08e:	462f      	mov	r7, r5
 801c090:	bfd4      	ite	le
 801c092:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801c096:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801c09a:	4620      	mov	r0, r4
 801c09c:	ee10 2a10 	vmov	r2, s0
 801c0a0:	465b      	mov	r3, fp
 801c0a2:	4639      	mov	r1, r7
 801c0a4:	f7e4 fbf2 	bl	800088c <__aeabi_ddiv>
 801c0a8:	ec41 0b10 	vmov	d0, r0, r1
 801c0ac:	b003      	add	sp, #12
 801c0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c0b2 <__copybits>:
 801c0b2:	3901      	subs	r1, #1
 801c0b4:	b570      	push	{r4, r5, r6, lr}
 801c0b6:	1149      	asrs	r1, r1, #5
 801c0b8:	6914      	ldr	r4, [r2, #16]
 801c0ba:	3101      	adds	r1, #1
 801c0bc:	f102 0314 	add.w	r3, r2, #20
 801c0c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801c0c4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801c0c8:	1f05      	subs	r5, r0, #4
 801c0ca:	42a3      	cmp	r3, r4
 801c0cc:	d30c      	bcc.n	801c0e8 <__copybits+0x36>
 801c0ce:	1aa3      	subs	r3, r4, r2
 801c0d0:	3b11      	subs	r3, #17
 801c0d2:	f023 0303 	bic.w	r3, r3, #3
 801c0d6:	3211      	adds	r2, #17
 801c0d8:	42a2      	cmp	r2, r4
 801c0da:	bf88      	it	hi
 801c0dc:	2300      	movhi	r3, #0
 801c0de:	4418      	add	r0, r3
 801c0e0:	2300      	movs	r3, #0
 801c0e2:	4288      	cmp	r0, r1
 801c0e4:	d305      	bcc.n	801c0f2 <__copybits+0x40>
 801c0e6:	bd70      	pop	{r4, r5, r6, pc}
 801c0e8:	f853 6b04 	ldr.w	r6, [r3], #4
 801c0ec:	f845 6f04 	str.w	r6, [r5, #4]!
 801c0f0:	e7eb      	b.n	801c0ca <__copybits+0x18>
 801c0f2:	f840 3b04 	str.w	r3, [r0], #4
 801c0f6:	e7f4      	b.n	801c0e2 <__copybits+0x30>

0801c0f8 <__any_on>:
 801c0f8:	f100 0214 	add.w	r2, r0, #20
 801c0fc:	6900      	ldr	r0, [r0, #16]
 801c0fe:	114b      	asrs	r3, r1, #5
 801c100:	4298      	cmp	r0, r3
 801c102:	b510      	push	{r4, lr}
 801c104:	db11      	blt.n	801c12a <__any_on+0x32>
 801c106:	dd0a      	ble.n	801c11e <__any_on+0x26>
 801c108:	f011 011f 	ands.w	r1, r1, #31
 801c10c:	d007      	beq.n	801c11e <__any_on+0x26>
 801c10e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801c112:	fa24 f001 	lsr.w	r0, r4, r1
 801c116:	fa00 f101 	lsl.w	r1, r0, r1
 801c11a:	428c      	cmp	r4, r1
 801c11c:	d10b      	bne.n	801c136 <__any_on+0x3e>
 801c11e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c122:	4293      	cmp	r3, r2
 801c124:	d803      	bhi.n	801c12e <__any_on+0x36>
 801c126:	2000      	movs	r0, #0
 801c128:	bd10      	pop	{r4, pc}
 801c12a:	4603      	mov	r3, r0
 801c12c:	e7f7      	b.n	801c11e <__any_on+0x26>
 801c12e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c132:	2900      	cmp	r1, #0
 801c134:	d0f5      	beq.n	801c122 <__any_on+0x2a>
 801c136:	2001      	movs	r0, #1
 801c138:	e7f6      	b.n	801c128 <__any_on+0x30>

0801c13a <_calloc_r>:
 801c13a:	b513      	push	{r0, r1, r4, lr}
 801c13c:	434a      	muls	r2, r1
 801c13e:	4611      	mov	r1, r2
 801c140:	9201      	str	r2, [sp, #4]
 801c142:	f7fb fb5d 	bl	8017800 <_malloc_r>
 801c146:	4604      	mov	r4, r0
 801c148:	b118      	cbz	r0, 801c152 <_calloc_r+0x18>
 801c14a:	9a01      	ldr	r2, [sp, #4]
 801c14c:	2100      	movs	r1, #0
 801c14e:	f7fb f881 	bl	8017254 <memset>
 801c152:	4620      	mov	r0, r4
 801c154:	b002      	add	sp, #8
 801c156:	bd10      	pop	{r4, pc}

0801c158 <_realloc_r>:
 801c158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c15a:	4607      	mov	r7, r0
 801c15c:	4614      	mov	r4, r2
 801c15e:	460e      	mov	r6, r1
 801c160:	b921      	cbnz	r1, 801c16c <_realloc_r+0x14>
 801c162:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801c166:	4611      	mov	r1, r2
 801c168:	f7fb bb4a 	b.w	8017800 <_malloc_r>
 801c16c:	b922      	cbnz	r2, 801c178 <_realloc_r+0x20>
 801c16e:	f7fb faf7 	bl	8017760 <_free_r>
 801c172:	4625      	mov	r5, r4
 801c174:	4628      	mov	r0, r5
 801c176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c178:	f000 feaa 	bl	801ced0 <_malloc_usable_size_r>
 801c17c:	42a0      	cmp	r0, r4
 801c17e:	d20f      	bcs.n	801c1a0 <_realloc_r+0x48>
 801c180:	4621      	mov	r1, r4
 801c182:	4638      	mov	r0, r7
 801c184:	f7fb fb3c 	bl	8017800 <_malloc_r>
 801c188:	4605      	mov	r5, r0
 801c18a:	2800      	cmp	r0, #0
 801c18c:	d0f2      	beq.n	801c174 <_realloc_r+0x1c>
 801c18e:	4631      	mov	r1, r6
 801c190:	4622      	mov	r2, r4
 801c192:	f7fb f837 	bl	8017204 <memcpy>
 801c196:	4631      	mov	r1, r6
 801c198:	4638      	mov	r0, r7
 801c19a:	f7fb fae1 	bl	8017760 <_free_r>
 801c19e:	e7e9      	b.n	801c174 <_realloc_r+0x1c>
 801c1a0:	4635      	mov	r5, r6
 801c1a2:	e7e7      	b.n	801c174 <_realloc_r+0x1c>

0801c1a4 <__ssputs_r>:
 801c1a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c1a8:	688e      	ldr	r6, [r1, #8]
 801c1aa:	429e      	cmp	r6, r3
 801c1ac:	4682      	mov	sl, r0
 801c1ae:	460c      	mov	r4, r1
 801c1b0:	4690      	mov	r8, r2
 801c1b2:	461f      	mov	r7, r3
 801c1b4:	d838      	bhi.n	801c228 <__ssputs_r+0x84>
 801c1b6:	898a      	ldrh	r2, [r1, #12]
 801c1b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801c1bc:	d032      	beq.n	801c224 <__ssputs_r+0x80>
 801c1be:	6825      	ldr	r5, [r4, #0]
 801c1c0:	6909      	ldr	r1, [r1, #16]
 801c1c2:	eba5 0901 	sub.w	r9, r5, r1
 801c1c6:	6965      	ldr	r5, [r4, #20]
 801c1c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c1cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c1d0:	3301      	adds	r3, #1
 801c1d2:	444b      	add	r3, r9
 801c1d4:	106d      	asrs	r5, r5, #1
 801c1d6:	429d      	cmp	r5, r3
 801c1d8:	bf38      	it	cc
 801c1da:	461d      	movcc	r5, r3
 801c1dc:	0553      	lsls	r3, r2, #21
 801c1de:	d531      	bpl.n	801c244 <__ssputs_r+0xa0>
 801c1e0:	4629      	mov	r1, r5
 801c1e2:	f7fb fb0d 	bl	8017800 <_malloc_r>
 801c1e6:	4606      	mov	r6, r0
 801c1e8:	b950      	cbnz	r0, 801c200 <__ssputs_r+0x5c>
 801c1ea:	230c      	movs	r3, #12
 801c1ec:	f8ca 3000 	str.w	r3, [sl]
 801c1f0:	89a3      	ldrh	r3, [r4, #12]
 801c1f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c1f6:	81a3      	strh	r3, [r4, #12]
 801c1f8:	f04f 30ff 	mov.w	r0, #4294967295
 801c1fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c200:	6921      	ldr	r1, [r4, #16]
 801c202:	464a      	mov	r2, r9
 801c204:	f7fa fffe 	bl	8017204 <memcpy>
 801c208:	89a3      	ldrh	r3, [r4, #12]
 801c20a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801c20e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c212:	81a3      	strh	r3, [r4, #12]
 801c214:	6126      	str	r6, [r4, #16]
 801c216:	6165      	str	r5, [r4, #20]
 801c218:	444e      	add	r6, r9
 801c21a:	eba5 0509 	sub.w	r5, r5, r9
 801c21e:	6026      	str	r6, [r4, #0]
 801c220:	60a5      	str	r5, [r4, #8]
 801c222:	463e      	mov	r6, r7
 801c224:	42be      	cmp	r6, r7
 801c226:	d900      	bls.n	801c22a <__ssputs_r+0x86>
 801c228:	463e      	mov	r6, r7
 801c22a:	4632      	mov	r2, r6
 801c22c:	6820      	ldr	r0, [r4, #0]
 801c22e:	4641      	mov	r1, r8
 801c230:	f7fa fff6 	bl	8017220 <memmove>
 801c234:	68a3      	ldr	r3, [r4, #8]
 801c236:	6822      	ldr	r2, [r4, #0]
 801c238:	1b9b      	subs	r3, r3, r6
 801c23a:	4432      	add	r2, r6
 801c23c:	60a3      	str	r3, [r4, #8]
 801c23e:	6022      	str	r2, [r4, #0]
 801c240:	2000      	movs	r0, #0
 801c242:	e7db      	b.n	801c1fc <__ssputs_r+0x58>
 801c244:	462a      	mov	r2, r5
 801c246:	f7ff ff87 	bl	801c158 <_realloc_r>
 801c24a:	4606      	mov	r6, r0
 801c24c:	2800      	cmp	r0, #0
 801c24e:	d1e1      	bne.n	801c214 <__ssputs_r+0x70>
 801c250:	6921      	ldr	r1, [r4, #16]
 801c252:	4650      	mov	r0, sl
 801c254:	f7fb fa84 	bl	8017760 <_free_r>
 801c258:	e7c7      	b.n	801c1ea <__ssputs_r+0x46>
	...

0801c25c <_svfiprintf_r>:
 801c25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c260:	4698      	mov	r8, r3
 801c262:	898b      	ldrh	r3, [r1, #12]
 801c264:	061b      	lsls	r3, r3, #24
 801c266:	b09d      	sub	sp, #116	; 0x74
 801c268:	4607      	mov	r7, r0
 801c26a:	460d      	mov	r5, r1
 801c26c:	4614      	mov	r4, r2
 801c26e:	d50e      	bpl.n	801c28e <_svfiprintf_r+0x32>
 801c270:	690b      	ldr	r3, [r1, #16]
 801c272:	b963      	cbnz	r3, 801c28e <_svfiprintf_r+0x32>
 801c274:	2140      	movs	r1, #64	; 0x40
 801c276:	f7fb fac3 	bl	8017800 <_malloc_r>
 801c27a:	6028      	str	r0, [r5, #0]
 801c27c:	6128      	str	r0, [r5, #16]
 801c27e:	b920      	cbnz	r0, 801c28a <_svfiprintf_r+0x2e>
 801c280:	230c      	movs	r3, #12
 801c282:	603b      	str	r3, [r7, #0]
 801c284:	f04f 30ff 	mov.w	r0, #4294967295
 801c288:	e0d1      	b.n	801c42e <_svfiprintf_r+0x1d2>
 801c28a:	2340      	movs	r3, #64	; 0x40
 801c28c:	616b      	str	r3, [r5, #20]
 801c28e:	2300      	movs	r3, #0
 801c290:	9309      	str	r3, [sp, #36]	; 0x24
 801c292:	2320      	movs	r3, #32
 801c294:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c298:	f8cd 800c 	str.w	r8, [sp, #12]
 801c29c:	2330      	movs	r3, #48	; 0x30
 801c29e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801c448 <_svfiprintf_r+0x1ec>
 801c2a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c2a6:	f04f 0901 	mov.w	r9, #1
 801c2aa:	4623      	mov	r3, r4
 801c2ac:	469a      	mov	sl, r3
 801c2ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c2b2:	b10a      	cbz	r2, 801c2b8 <_svfiprintf_r+0x5c>
 801c2b4:	2a25      	cmp	r2, #37	; 0x25
 801c2b6:	d1f9      	bne.n	801c2ac <_svfiprintf_r+0x50>
 801c2b8:	ebba 0b04 	subs.w	fp, sl, r4
 801c2bc:	d00b      	beq.n	801c2d6 <_svfiprintf_r+0x7a>
 801c2be:	465b      	mov	r3, fp
 801c2c0:	4622      	mov	r2, r4
 801c2c2:	4629      	mov	r1, r5
 801c2c4:	4638      	mov	r0, r7
 801c2c6:	f7ff ff6d 	bl	801c1a4 <__ssputs_r>
 801c2ca:	3001      	adds	r0, #1
 801c2cc:	f000 80aa 	beq.w	801c424 <_svfiprintf_r+0x1c8>
 801c2d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c2d2:	445a      	add	r2, fp
 801c2d4:	9209      	str	r2, [sp, #36]	; 0x24
 801c2d6:	f89a 3000 	ldrb.w	r3, [sl]
 801c2da:	2b00      	cmp	r3, #0
 801c2dc:	f000 80a2 	beq.w	801c424 <_svfiprintf_r+0x1c8>
 801c2e0:	2300      	movs	r3, #0
 801c2e2:	f04f 32ff 	mov.w	r2, #4294967295
 801c2e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c2ea:	f10a 0a01 	add.w	sl, sl, #1
 801c2ee:	9304      	str	r3, [sp, #16]
 801c2f0:	9307      	str	r3, [sp, #28]
 801c2f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c2f6:	931a      	str	r3, [sp, #104]	; 0x68
 801c2f8:	4654      	mov	r4, sl
 801c2fa:	2205      	movs	r2, #5
 801c2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c300:	4851      	ldr	r0, [pc, #324]	; (801c448 <_svfiprintf_r+0x1ec>)
 801c302:	f7e3 ff8d 	bl	8000220 <memchr>
 801c306:	9a04      	ldr	r2, [sp, #16]
 801c308:	b9d8      	cbnz	r0, 801c342 <_svfiprintf_r+0xe6>
 801c30a:	06d0      	lsls	r0, r2, #27
 801c30c:	bf44      	itt	mi
 801c30e:	2320      	movmi	r3, #32
 801c310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c314:	0711      	lsls	r1, r2, #28
 801c316:	bf44      	itt	mi
 801c318:	232b      	movmi	r3, #43	; 0x2b
 801c31a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c31e:	f89a 3000 	ldrb.w	r3, [sl]
 801c322:	2b2a      	cmp	r3, #42	; 0x2a
 801c324:	d015      	beq.n	801c352 <_svfiprintf_r+0xf6>
 801c326:	9a07      	ldr	r2, [sp, #28]
 801c328:	4654      	mov	r4, sl
 801c32a:	2000      	movs	r0, #0
 801c32c:	f04f 0c0a 	mov.w	ip, #10
 801c330:	4621      	mov	r1, r4
 801c332:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c336:	3b30      	subs	r3, #48	; 0x30
 801c338:	2b09      	cmp	r3, #9
 801c33a:	d94e      	bls.n	801c3da <_svfiprintf_r+0x17e>
 801c33c:	b1b0      	cbz	r0, 801c36c <_svfiprintf_r+0x110>
 801c33e:	9207      	str	r2, [sp, #28]
 801c340:	e014      	b.n	801c36c <_svfiprintf_r+0x110>
 801c342:	eba0 0308 	sub.w	r3, r0, r8
 801c346:	fa09 f303 	lsl.w	r3, r9, r3
 801c34a:	4313      	orrs	r3, r2
 801c34c:	9304      	str	r3, [sp, #16]
 801c34e:	46a2      	mov	sl, r4
 801c350:	e7d2      	b.n	801c2f8 <_svfiprintf_r+0x9c>
 801c352:	9b03      	ldr	r3, [sp, #12]
 801c354:	1d19      	adds	r1, r3, #4
 801c356:	681b      	ldr	r3, [r3, #0]
 801c358:	9103      	str	r1, [sp, #12]
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	bfbb      	ittet	lt
 801c35e:	425b      	neglt	r3, r3
 801c360:	f042 0202 	orrlt.w	r2, r2, #2
 801c364:	9307      	strge	r3, [sp, #28]
 801c366:	9307      	strlt	r3, [sp, #28]
 801c368:	bfb8      	it	lt
 801c36a:	9204      	strlt	r2, [sp, #16]
 801c36c:	7823      	ldrb	r3, [r4, #0]
 801c36e:	2b2e      	cmp	r3, #46	; 0x2e
 801c370:	d10c      	bne.n	801c38c <_svfiprintf_r+0x130>
 801c372:	7863      	ldrb	r3, [r4, #1]
 801c374:	2b2a      	cmp	r3, #42	; 0x2a
 801c376:	d135      	bne.n	801c3e4 <_svfiprintf_r+0x188>
 801c378:	9b03      	ldr	r3, [sp, #12]
 801c37a:	1d1a      	adds	r2, r3, #4
 801c37c:	681b      	ldr	r3, [r3, #0]
 801c37e:	9203      	str	r2, [sp, #12]
 801c380:	2b00      	cmp	r3, #0
 801c382:	bfb8      	it	lt
 801c384:	f04f 33ff 	movlt.w	r3, #4294967295
 801c388:	3402      	adds	r4, #2
 801c38a:	9305      	str	r3, [sp, #20]
 801c38c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801c458 <_svfiprintf_r+0x1fc>
 801c390:	7821      	ldrb	r1, [r4, #0]
 801c392:	2203      	movs	r2, #3
 801c394:	4650      	mov	r0, sl
 801c396:	f7e3 ff43 	bl	8000220 <memchr>
 801c39a:	b140      	cbz	r0, 801c3ae <_svfiprintf_r+0x152>
 801c39c:	2340      	movs	r3, #64	; 0x40
 801c39e:	eba0 000a 	sub.w	r0, r0, sl
 801c3a2:	fa03 f000 	lsl.w	r0, r3, r0
 801c3a6:	9b04      	ldr	r3, [sp, #16]
 801c3a8:	4303      	orrs	r3, r0
 801c3aa:	3401      	adds	r4, #1
 801c3ac:	9304      	str	r3, [sp, #16]
 801c3ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c3b2:	4826      	ldr	r0, [pc, #152]	; (801c44c <_svfiprintf_r+0x1f0>)
 801c3b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c3b8:	2206      	movs	r2, #6
 801c3ba:	f7e3 ff31 	bl	8000220 <memchr>
 801c3be:	2800      	cmp	r0, #0
 801c3c0:	d038      	beq.n	801c434 <_svfiprintf_r+0x1d8>
 801c3c2:	4b23      	ldr	r3, [pc, #140]	; (801c450 <_svfiprintf_r+0x1f4>)
 801c3c4:	bb1b      	cbnz	r3, 801c40e <_svfiprintf_r+0x1b2>
 801c3c6:	9b03      	ldr	r3, [sp, #12]
 801c3c8:	3307      	adds	r3, #7
 801c3ca:	f023 0307 	bic.w	r3, r3, #7
 801c3ce:	3308      	adds	r3, #8
 801c3d0:	9303      	str	r3, [sp, #12]
 801c3d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c3d4:	4433      	add	r3, r6
 801c3d6:	9309      	str	r3, [sp, #36]	; 0x24
 801c3d8:	e767      	b.n	801c2aa <_svfiprintf_r+0x4e>
 801c3da:	fb0c 3202 	mla	r2, ip, r2, r3
 801c3de:	460c      	mov	r4, r1
 801c3e0:	2001      	movs	r0, #1
 801c3e2:	e7a5      	b.n	801c330 <_svfiprintf_r+0xd4>
 801c3e4:	2300      	movs	r3, #0
 801c3e6:	3401      	adds	r4, #1
 801c3e8:	9305      	str	r3, [sp, #20]
 801c3ea:	4619      	mov	r1, r3
 801c3ec:	f04f 0c0a 	mov.w	ip, #10
 801c3f0:	4620      	mov	r0, r4
 801c3f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c3f6:	3a30      	subs	r2, #48	; 0x30
 801c3f8:	2a09      	cmp	r2, #9
 801c3fa:	d903      	bls.n	801c404 <_svfiprintf_r+0x1a8>
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	d0c5      	beq.n	801c38c <_svfiprintf_r+0x130>
 801c400:	9105      	str	r1, [sp, #20]
 801c402:	e7c3      	b.n	801c38c <_svfiprintf_r+0x130>
 801c404:	fb0c 2101 	mla	r1, ip, r1, r2
 801c408:	4604      	mov	r4, r0
 801c40a:	2301      	movs	r3, #1
 801c40c:	e7f0      	b.n	801c3f0 <_svfiprintf_r+0x194>
 801c40e:	ab03      	add	r3, sp, #12
 801c410:	9300      	str	r3, [sp, #0]
 801c412:	462a      	mov	r2, r5
 801c414:	4b0f      	ldr	r3, [pc, #60]	; (801c454 <_svfiprintf_r+0x1f8>)
 801c416:	a904      	add	r1, sp, #16
 801c418:	4638      	mov	r0, r7
 801c41a:	f7fb faeb 	bl	80179f4 <_printf_float>
 801c41e:	1c42      	adds	r2, r0, #1
 801c420:	4606      	mov	r6, r0
 801c422:	d1d6      	bne.n	801c3d2 <_svfiprintf_r+0x176>
 801c424:	89ab      	ldrh	r3, [r5, #12]
 801c426:	065b      	lsls	r3, r3, #25
 801c428:	f53f af2c 	bmi.w	801c284 <_svfiprintf_r+0x28>
 801c42c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c42e:	b01d      	add	sp, #116	; 0x74
 801c430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c434:	ab03      	add	r3, sp, #12
 801c436:	9300      	str	r3, [sp, #0]
 801c438:	462a      	mov	r2, r5
 801c43a:	4b06      	ldr	r3, [pc, #24]	; (801c454 <_svfiprintf_r+0x1f8>)
 801c43c:	a904      	add	r1, sp, #16
 801c43e:	4638      	mov	r0, r7
 801c440:	f7fb fd7c 	bl	8017f3c <_printf_i>
 801c444:	e7eb      	b.n	801c41e <_svfiprintf_r+0x1c2>
 801c446:	bf00      	nop
 801c448:	0801f384 	.word	0x0801f384
 801c44c:	0801f38e 	.word	0x0801f38e
 801c450:	080179f5 	.word	0x080179f5
 801c454:	0801c1a5 	.word	0x0801c1a5
 801c458:	0801f38a 	.word	0x0801f38a

0801c45c <_sungetc_r>:
 801c45c:	b538      	push	{r3, r4, r5, lr}
 801c45e:	1c4b      	adds	r3, r1, #1
 801c460:	4614      	mov	r4, r2
 801c462:	d103      	bne.n	801c46c <_sungetc_r+0x10>
 801c464:	f04f 35ff 	mov.w	r5, #4294967295
 801c468:	4628      	mov	r0, r5
 801c46a:	bd38      	pop	{r3, r4, r5, pc}
 801c46c:	8993      	ldrh	r3, [r2, #12]
 801c46e:	f023 0320 	bic.w	r3, r3, #32
 801c472:	8193      	strh	r3, [r2, #12]
 801c474:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c476:	6852      	ldr	r2, [r2, #4]
 801c478:	b2cd      	uxtb	r5, r1
 801c47a:	b18b      	cbz	r3, 801c4a0 <_sungetc_r+0x44>
 801c47c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c47e:	4293      	cmp	r3, r2
 801c480:	dd08      	ble.n	801c494 <_sungetc_r+0x38>
 801c482:	6823      	ldr	r3, [r4, #0]
 801c484:	1e5a      	subs	r2, r3, #1
 801c486:	6022      	str	r2, [r4, #0]
 801c488:	f803 5c01 	strb.w	r5, [r3, #-1]
 801c48c:	6863      	ldr	r3, [r4, #4]
 801c48e:	3301      	adds	r3, #1
 801c490:	6063      	str	r3, [r4, #4]
 801c492:	e7e9      	b.n	801c468 <_sungetc_r+0xc>
 801c494:	4621      	mov	r1, r4
 801c496:	f000 fca5 	bl	801cde4 <__submore>
 801c49a:	2800      	cmp	r0, #0
 801c49c:	d0f1      	beq.n	801c482 <_sungetc_r+0x26>
 801c49e:	e7e1      	b.n	801c464 <_sungetc_r+0x8>
 801c4a0:	6921      	ldr	r1, [r4, #16]
 801c4a2:	6823      	ldr	r3, [r4, #0]
 801c4a4:	b151      	cbz	r1, 801c4bc <_sungetc_r+0x60>
 801c4a6:	4299      	cmp	r1, r3
 801c4a8:	d208      	bcs.n	801c4bc <_sungetc_r+0x60>
 801c4aa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801c4ae:	42a9      	cmp	r1, r5
 801c4b0:	d104      	bne.n	801c4bc <_sungetc_r+0x60>
 801c4b2:	3b01      	subs	r3, #1
 801c4b4:	3201      	adds	r2, #1
 801c4b6:	6023      	str	r3, [r4, #0]
 801c4b8:	6062      	str	r2, [r4, #4]
 801c4ba:	e7d5      	b.n	801c468 <_sungetc_r+0xc>
 801c4bc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801c4c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c4c4:	6363      	str	r3, [r4, #52]	; 0x34
 801c4c6:	2303      	movs	r3, #3
 801c4c8:	63a3      	str	r3, [r4, #56]	; 0x38
 801c4ca:	4623      	mov	r3, r4
 801c4cc:	f803 5f46 	strb.w	r5, [r3, #70]!
 801c4d0:	6023      	str	r3, [r4, #0]
 801c4d2:	2301      	movs	r3, #1
 801c4d4:	e7dc      	b.n	801c490 <_sungetc_r+0x34>

0801c4d6 <__ssrefill_r>:
 801c4d6:	b510      	push	{r4, lr}
 801c4d8:	460c      	mov	r4, r1
 801c4da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801c4dc:	b169      	cbz	r1, 801c4fa <__ssrefill_r+0x24>
 801c4de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c4e2:	4299      	cmp	r1, r3
 801c4e4:	d001      	beq.n	801c4ea <__ssrefill_r+0x14>
 801c4e6:	f7fb f93b 	bl	8017760 <_free_r>
 801c4ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c4ec:	6063      	str	r3, [r4, #4]
 801c4ee:	2000      	movs	r0, #0
 801c4f0:	6360      	str	r0, [r4, #52]	; 0x34
 801c4f2:	b113      	cbz	r3, 801c4fa <__ssrefill_r+0x24>
 801c4f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801c4f6:	6023      	str	r3, [r4, #0]
 801c4f8:	bd10      	pop	{r4, pc}
 801c4fa:	6923      	ldr	r3, [r4, #16]
 801c4fc:	6023      	str	r3, [r4, #0]
 801c4fe:	2300      	movs	r3, #0
 801c500:	6063      	str	r3, [r4, #4]
 801c502:	89a3      	ldrh	r3, [r4, #12]
 801c504:	f043 0320 	orr.w	r3, r3, #32
 801c508:	81a3      	strh	r3, [r4, #12]
 801c50a:	f04f 30ff 	mov.w	r0, #4294967295
 801c50e:	e7f3      	b.n	801c4f8 <__ssrefill_r+0x22>

0801c510 <__ssvfiscanf_r>:
 801c510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c514:	460c      	mov	r4, r1
 801c516:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801c51a:	2100      	movs	r1, #0
 801c51c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801c520:	49b2      	ldr	r1, [pc, #712]	; (801c7ec <__ssvfiscanf_r+0x2dc>)
 801c522:	91a0      	str	r1, [sp, #640]	; 0x280
 801c524:	f10d 0804 	add.w	r8, sp, #4
 801c528:	49b1      	ldr	r1, [pc, #708]	; (801c7f0 <__ssvfiscanf_r+0x2e0>)
 801c52a:	4fb2      	ldr	r7, [pc, #712]	; (801c7f4 <__ssvfiscanf_r+0x2e4>)
 801c52c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801c7f8 <__ssvfiscanf_r+0x2e8>
 801c530:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801c534:	4606      	mov	r6, r0
 801c536:	91a1      	str	r1, [sp, #644]	; 0x284
 801c538:	9300      	str	r3, [sp, #0]
 801c53a:	f892 a000 	ldrb.w	sl, [r2]
 801c53e:	f1ba 0f00 	cmp.w	sl, #0
 801c542:	f000 8151 	beq.w	801c7e8 <__ssvfiscanf_r+0x2d8>
 801c546:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801c54a:	f013 0308 	ands.w	r3, r3, #8
 801c54e:	f102 0501 	add.w	r5, r2, #1
 801c552:	d019      	beq.n	801c588 <__ssvfiscanf_r+0x78>
 801c554:	6863      	ldr	r3, [r4, #4]
 801c556:	2b00      	cmp	r3, #0
 801c558:	dd0f      	ble.n	801c57a <__ssvfiscanf_r+0x6a>
 801c55a:	6823      	ldr	r3, [r4, #0]
 801c55c:	781a      	ldrb	r2, [r3, #0]
 801c55e:	5cba      	ldrb	r2, [r7, r2]
 801c560:	0712      	lsls	r2, r2, #28
 801c562:	d401      	bmi.n	801c568 <__ssvfiscanf_r+0x58>
 801c564:	462a      	mov	r2, r5
 801c566:	e7e8      	b.n	801c53a <__ssvfiscanf_r+0x2a>
 801c568:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801c56a:	3201      	adds	r2, #1
 801c56c:	9245      	str	r2, [sp, #276]	; 0x114
 801c56e:	6862      	ldr	r2, [r4, #4]
 801c570:	3301      	adds	r3, #1
 801c572:	3a01      	subs	r2, #1
 801c574:	6062      	str	r2, [r4, #4]
 801c576:	6023      	str	r3, [r4, #0]
 801c578:	e7ec      	b.n	801c554 <__ssvfiscanf_r+0x44>
 801c57a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801c57c:	4621      	mov	r1, r4
 801c57e:	4630      	mov	r0, r6
 801c580:	4798      	blx	r3
 801c582:	2800      	cmp	r0, #0
 801c584:	d0e9      	beq.n	801c55a <__ssvfiscanf_r+0x4a>
 801c586:	e7ed      	b.n	801c564 <__ssvfiscanf_r+0x54>
 801c588:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801c58c:	f040 8083 	bne.w	801c696 <__ssvfiscanf_r+0x186>
 801c590:	9341      	str	r3, [sp, #260]	; 0x104
 801c592:	9343      	str	r3, [sp, #268]	; 0x10c
 801c594:	7853      	ldrb	r3, [r2, #1]
 801c596:	2b2a      	cmp	r3, #42	; 0x2a
 801c598:	bf02      	ittt	eq
 801c59a:	2310      	moveq	r3, #16
 801c59c:	1c95      	addeq	r5, r2, #2
 801c59e:	9341      	streq	r3, [sp, #260]	; 0x104
 801c5a0:	220a      	movs	r2, #10
 801c5a2:	46ab      	mov	fp, r5
 801c5a4:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801c5a8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801c5ac:	2b09      	cmp	r3, #9
 801c5ae:	d91d      	bls.n	801c5ec <__ssvfiscanf_r+0xdc>
 801c5b0:	4891      	ldr	r0, [pc, #580]	; (801c7f8 <__ssvfiscanf_r+0x2e8>)
 801c5b2:	2203      	movs	r2, #3
 801c5b4:	f7e3 fe34 	bl	8000220 <memchr>
 801c5b8:	b140      	cbz	r0, 801c5cc <__ssvfiscanf_r+0xbc>
 801c5ba:	2301      	movs	r3, #1
 801c5bc:	eba0 0009 	sub.w	r0, r0, r9
 801c5c0:	fa03 f000 	lsl.w	r0, r3, r0
 801c5c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801c5c6:	4318      	orrs	r0, r3
 801c5c8:	9041      	str	r0, [sp, #260]	; 0x104
 801c5ca:	465d      	mov	r5, fp
 801c5cc:	f815 3b01 	ldrb.w	r3, [r5], #1
 801c5d0:	2b78      	cmp	r3, #120	; 0x78
 801c5d2:	d806      	bhi.n	801c5e2 <__ssvfiscanf_r+0xd2>
 801c5d4:	2b57      	cmp	r3, #87	; 0x57
 801c5d6:	d810      	bhi.n	801c5fa <__ssvfiscanf_r+0xea>
 801c5d8:	2b25      	cmp	r3, #37	; 0x25
 801c5da:	d05c      	beq.n	801c696 <__ssvfiscanf_r+0x186>
 801c5dc:	d856      	bhi.n	801c68c <__ssvfiscanf_r+0x17c>
 801c5de:	2b00      	cmp	r3, #0
 801c5e0:	d074      	beq.n	801c6cc <__ssvfiscanf_r+0x1bc>
 801c5e2:	2303      	movs	r3, #3
 801c5e4:	9347      	str	r3, [sp, #284]	; 0x11c
 801c5e6:	230a      	movs	r3, #10
 801c5e8:	9342      	str	r3, [sp, #264]	; 0x108
 801c5ea:	e081      	b.n	801c6f0 <__ssvfiscanf_r+0x1e0>
 801c5ec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801c5ee:	fb02 1303 	mla	r3, r2, r3, r1
 801c5f2:	3b30      	subs	r3, #48	; 0x30
 801c5f4:	9343      	str	r3, [sp, #268]	; 0x10c
 801c5f6:	465d      	mov	r5, fp
 801c5f8:	e7d3      	b.n	801c5a2 <__ssvfiscanf_r+0x92>
 801c5fa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801c5fe:	2a20      	cmp	r2, #32
 801c600:	d8ef      	bhi.n	801c5e2 <__ssvfiscanf_r+0xd2>
 801c602:	a101      	add	r1, pc, #4	; (adr r1, 801c608 <__ssvfiscanf_r+0xf8>)
 801c604:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801c608:	0801c6db 	.word	0x0801c6db
 801c60c:	0801c5e3 	.word	0x0801c5e3
 801c610:	0801c5e3 	.word	0x0801c5e3
 801c614:	0801c739 	.word	0x0801c739
 801c618:	0801c5e3 	.word	0x0801c5e3
 801c61c:	0801c5e3 	.word	0x0801c5e3
 801c620:	0801c5e3 	.word	0x0801c5e3
 801c624:	0801c5e3 	.word	0x0801c5e3
 801c628:	0801c5e3 	.word	0x0801c5e3
 801c62c:	0801c5e3 	.word	0x0801c5e3
 801c630:	0801c5e3 	.word	0x0801c5e3
 801c634:	0801c74f 	.word	0x0801c74f
 801c638:	0801c725 	.word	0x0801c725
 801c63c:	0801c693 	.word	0x0801c693
 801c640:	0801c693 	.word	0x0801c693
 801c644:	0801c693 	.word	0x0801c693
 801c648:	0801c5e3 	.word	0x0801c5e3
 801c64c:	0801c729 	.word	0x0801c729
 801c650:	0801c5e3 	.word	0x0801c5e3
 801c654:	0801c5e3 	.word	0x0801c5e3
 801c658:	0801c5e3 	.word	0x0801c5e3
 801c65c:	0801c5e3 	.word	0x0801c5e3
 801c660:	0801c75f 	.word	0x0801c75f
 801c664:	0801c731 	.word	0x0801c731
 801c668:	0801c6d3 	.word	0x0801c6d3
 801c66c:	0801c5e3 	.word	0x0801c5e3
 801c670:	0801c5e3 	.word	0x0801c5e3
 801c674:	0801c75b 	.word	0x0801c75b
 801c678:	0801c5e3 	.word	0x0801c5e3
 801c67c:	0801c725 	.word	0x0801c725
 801c680:	0801c5e3 	.word	0x0801c5e3
 801c684:	0801c5e3 	.word	0x0801c5e3
 801c688:	0801c6db 	.word	0x0801c6db
 801c68c:	3b45      	subs	r3, #69	; 0x45
 801c68e:	2b02      	cmp	r3, #2
 801c690:	d8a7      	bhi.n	801c5e2 <__ssvfiscanf_r+0xd2>
 801c692:	2305      	movs	r3, #5
 801c694:	e02b      	b.n	801c6ee <__ssvfiscanf_r+0x1de>
 801c696:	6863      	ldr	r3, [r4, #4]
 801c698:	2b00      	cmp	r3, #0
 801c69a:	dd0d      	ble.n	801c6b8 <__ssvfiscanf_r+0x1a8>
 801c69c:	6823      	ldr	r3, [r4, #0]
 801c69e:	781a      	ldrb	r2, [r3, #0]
 801c6a0:	4552      	cmp	r2, sl
 801c6a2:	f040 80a1 	bne.w	801c7e8 <__ssvfiscanf_r+0x2d8>
 801c6a6:	3301      	adds	r3, #1
 801c6a8:	6862      	ldr	r2, [r4, #4]
 801c6aa:	6023      	str	r3, [r4, #0]
 801c6ac:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801c6ae:	3a01      	subs	r2, #1
 801c6b0:	3301      	adds	r3, #1
 801c6b2:	6062      	str	r2, [r4, #4]
 801c6b4:	9345      	str	r3, [sp, #276]	; 0x114
 801c6b6:	e755      	b.n	801c564 <__ssvfiscanf_r+0x54>
 801c6b8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801c6ba:	4621      	mov	r1, r4
 801c6bc:	4630      	mov	r0, r6
 801c6be:	4798      	blx	r3
 801c6c0:	2800      	cmp	r0, #0
 801c6c2:	d0eb      	beq.n	801c69c <__ssvfiscanf_r+0x18c>
 801c6c4:	9844      	ldr	r0, [sp, #272]	; 0x110
 801c6c6:	2800      	cmp	r0, #0
 801c6c8:	f040 8084 	bne.w	801c7d4 <__ssvfiscanf_r+0x2c4>
 801c6cc:	f04f 30ff 	mov.w	r0, #4294967295
 801c6d0:	e086      	b.n	801c7e0 <__ssvfiscanf_r+0x2d0>
 801c6d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801c6d4:	f042 0220 	orr.w	r2, r2, #32
 801c6d8:	9241      	str	r2, [sp, #260]	; 0x104
 801c6da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801c6dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801c6e0:	9241      	str	r2, [sp, #260]	; 0x104
 801c6e2:	2210      	movs	r2, #16
 801c6e4:	2b6f      	cmp	r3, #111	; 0x6f
 801c6e6:	9242      	str	r2, [sp, #264]	; 0x108
 801c6e8:	bf34      	ite	cc
 801c6ea:	2303      	movcc	r3, #3
 801c6ec:	2304      	movcs	r3, #4
 801c6ee:	9347      	str	r3, [sp, #284]	; 0x11c
 801c6f0:	6863      	ldr	r3, [r4, #4]
 801c6f2:	2b00      	cmp	r3, #0
 801c6f4:	dd41      	ble.n	801c77a <__ssvfiscanf_r+0x26a>
 801c6f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801c6f8:	0659      	lsls	r1, r3, #25
 801c6fa:	d404      	bmi.n	801c706 <__ssvfiscanf_r+0x1f6>
 801c6fc:	6823      	ldr	r3, [r4, #0]
 801c6fe:	781a      	ldrb	r2, [r3, #0]
 801c700:	5cba      	ldrb	r2, [r7, r2]
 801c702:	0712      	lsls	r2, r2, #28
 801c704:	d440      	bmi.n	801c788 <__ssvfiscanf_r+0x278>
 801c706:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801c708:	2b02      	cmp	r3, #2
 801c70a:	dc4f      	bgt.n	801c7ac <__ssvfiscanf_r+0x29c>
 801c70c:	466b      	mov	r3, sp
 801c70e:	4622      	mov	r2, r4
 801c710:	a941      	add	r1, sp, #260	; 0x104
 801c712:	4630      	mov	r0, r6
 801c714:	f000 f9ce 	bl	801cab4 <_scanf_chars>
 801c718:	2801      	cmp	r0, #1
 801c71a:	d065      	beq.n	801c7e8 <__ssvfiscanf_r+0x2d8>
 801c71c:	2802      	cmp	r0, #2
 801c71e:	f47f af21 	bne.w	801c564 <__ssvfiscanf_r+0x54>
 801c722:	e7cf      	b.n	801c6c4 <__ssvfiscanf_r+0x1b4>
 801c724:	220a      	movs	r2, #10
 801c726:	e7dd      	b.n	801c6e4 <__ssvfiscanf_r+0x1d4>
 801c728:	2300      	movs	r3, #0
 801c72a:	9342      	str	r3, [sp, #264]	; 0x108
 801c72c:	2303      	movs	r3, #3
 801c72e:	e7de      	b.n	801c6ee <__ssvfiscanf_r+0x1de>
 801c730:	2308      	movs	r3, #8
 801c732:	9342      	str	r3, [sp, #264]	; 0x108
 801c734:	2304      	movs	r3, #4
 801c736:	e7da      	b.n	801c6ee <__ssvfiscanf_r+0x1de>
 801c738:	4629      	mov	r1, r5
 801c73a:	4640      	mov	r0, r8
 801c73c:	f000 fb18 	bl	801cd70 <__sccl>
 801c740:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801c742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c746:	9341      	str	r3, [sp, #260]	; 0x104
 801c748:	4605      	mov	r5, r0
 801c74a:	2301      	movs	r3, #1
 801c74c:	e7cf      	b.n	801c6ee <__ssvfiscanf_r+0x1de>
 801c74e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801c750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c754:	9341      	str	r3, [sp, #260]	; 0x104
 801c756:	2300      	movs	r3, #0
 801c758:	e7c9      	b.n	801c6ee <__ssvfiscanf_r+0x1de>
 801c75a:	2302      	movs	r3, #2
 801c75c:	e7c7      	b.n	801c6ee <__ssvfiscanf_r+0x1de>
 801c75e:	9841      	ldr	r0, [sp, #260]	; 0x104
 801c760:	06c3      	lsls	r3, r0, #27
 801c762:	f53f aeff 	bmi.w	801c564 <__ssvfiscanf_r+0x54>
 801c766:	9b00      	ldr	r3, [sp, #0]
 801c768:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801c76a:	1d19      	adds	r1, r3, #4
 801c76c:	9100      	str	r1, [sp, #0]
 801c76e:	681b      	ldr	r3, [r3, #0]
 801c770:	07c0      	lsls	r0, r0, #31
 801c772:	bf4c      	ite	mi
 801c774:	801a      	strhmi	r2, [r3, #0]
 801c776:	601a      	strpl	r2, [r3, #0]
 801c778:	e6f4      	b.n	801c564 <__ssvfiscanf_r+0x54>
 801c77a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801c77c:	4621      	mov	r1, r4
 801c77e:	4630      	mov	r0, r6
 801c780:	4798      	blx	r3
 801c782:	2800      	cmp	r0, #0
 801c784:	d0b7      	beq.n	801c6f6 <__ssvfiscanf_r+0x1e6>
 801c786:	e79d      	b.n	801c6c4 <__ssvfiscanf_r+0x1b4>
 801c788:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801c78a:	3201      	adds	r2, #1
 801c78c:	9245      	str	r2, [sp, #276]	; 0x114
 801c78e:	6862      	ldr	r2, [r4, #4]
 801c790:	3a01      	subs	r2, #1
 801c792:	2a00      	cmp	r2, #0
 801c794:	6062      	str	r2, [r4, #4]
 801c796:	dd02      	ble.n	801c79e <__ssvfiscanf_r+0x28e>
 801c798:	3301      	adds	r3, #1
 801c79a:	6023      	str	r3, [r4, #0]
 801c79c:	e7ae      	b.n	801c6fc <__ssvfiscanf_r+0x1ec>
 801c79e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801c7a0:	4621      	mov	r1, r4
 801c7a2:	4630      	mov	r0, r6
 801c7a4:	4798      	blx	r3
 801c7a6:	2800      	cmp	r0, #0
 801c7a8:	d0a8      	beq.n	801c6fc <__ssvfiscanf_r+0x1ec>
 801c7aa:	e78b      	b.n	801c6c4 <__ssvfiscanf_r+0x1b4>
 801c7ac:	2b04      	cmp	r3, #4
 801c7ae:	dc06      	bgt.n	801c7be <__ssvfiscanf_r+0x2ae>
 801c7b0:	466b      	mov	r3, sp
 801c7b2:	4622      	mov	r2, r4
 801c7b4:	a941      	add	r1, sp, #260	; 0x104
 801c7b6:	4630      	mov	r0, r6
 801c7b8:	f000 f9d4 	bl	801cb64 <_scanf_i>
 801c7bc:	e7ac      	b.n	801c718 <__ssvfiscanf_r+0x208>
 801c7be:	4b0f      	ldr	r3, [pc, #60]	; (801c7fc <__ssvfiscanf_r+0x2ec>)
 801c7c0:	2b00      	cmp	r3, #0
 801c7c2:	f43f aecf 	beq.w	801c564 <__ssvfiscanf_r+0x54>
 801c7c6:	466b      	mov	r3, sp
 801c7c8:	4622      	mov	r2, r4
 801c7ca:	a941      	add	r1, sp, #260	; 0x104
 801c7cc:	4630      	mov	r0, r6
 801c7ce:	f7fb fcdb 	bl	8018188 <_scanf_float>
 801c7d2:	e7a1      	b.n	801c718 <__ssvfiscanf_r+0x208>
 801c7d4:	89a3      	ldrh	r3, [r4, #12]
 801c7d6:	f013 0f40 	tst.w	r3, #64	; 0x40
 801c7da:	bf18      	it	ne
 801c7dc:	f04f 30ff 	movne.w	r0, #4294967295
 801c7e0:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801c7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7e8:	9844      	ldr	r0, [sp, #272]	; 0x110
 801c7ea:	e7f9      	b.n	801c7e0 <__ssvfiscanf_r+0x2d0>
 801c7ec:	0801c45d 	.word	0x0801c45d
 801c7f0:	0801c4d7 	.word	0x0801c4d7
 801c7f4:	0801ed29 	.word	0x0801ed29
 801c7f8:	0801f38a 	.word	0x0801f38a
 801c7fc:	08018189 	.word	0x08018189

0801c800 <__sfputc_r>:
 801c800:	6893      	ldr	r3, [r2, #8]
 801c802:	3b01      	subs	r3, #1
 801c804:	2b00      	cmp	r3, #0
 801c806:	b410      	push	{r4}
 801c808:	6093      	str	r3, [r2, #8]
 801c80a:	da08      	bge.n	801c81e <__sfputc_r+0x1e>
 801c80c:	6994      	ldr	r4, [r2, #24]
 801c80e:	42a3      	cmp	r3, r4
 801c810:	db01      	blt.n	801c816 <__sfputc_r+0x16>
 801c812:	290a      	cmp	r1, #10
 801c814:	d103      	bne.n	801c81e <__sfputc_r+0x1e>
 801c816:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c81a:	f7fd ba75 	b.w	8019d08 <__swbuf_r>
 801c81e:	6813      	ldr	r3, [r2, #0]
 801c820:	1c58      	adds	r0, r3, #1
 801c822:	6010      	str	r0, [r2, #0]
 801c824:	7019      	strb	r1, [r3, #0]
 801c826:	4608      	mov	r0, r1
 801c828:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c82c:	4770      	bx	lr

0801c82e <__sfputs_r>:
 801c82e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c830:	4606      	mov	r6, r0
 801c832:	460f      	mov	r7, r1
 801c834:	4614      	mov	r4, r2
 801c836:	18d5      	adds	r5, r2, r3
 801c838:	42ac      	cmp	r4, r5
 801c83a:	d101      	bne.n	801c840 <__sfputs_r+0x12>
 801c83c:	2000      	movs	r0, #0
 801c83e:	e007      	b.n	801c850 <__sfputs_r+0x22>
 801c840:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c844:	463a      	mov	r2, r7
 801c846:	4630      	mov	r0, r6
 801c848:	f7ff ffda 	bl	801c800 <__sfputc_r>
 801c84c:	1c43      	adds	r3, r0, #1
 801c84e:	d1f3      	bne.n	801c838 <__sfputs_r+0xa>
 801c850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c854 <_vfiprintf_r>:
 801c854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c858:	460d      	mov	r5, r1
 801c85a:	b09d      	sub	sp, #116	; 0x74
 801c85c:	4614      	mov	r4, r2
 801c85e:	4698      	mov	r8, r3
 801c860:	4606      	mov	r6, r0
 801c862:	b118      	cbz	r0, 801c86c <_vfiprintf_r+0x18>
 801c864:	6983      	ldr	r3, [r0, #24]
 801c866:	b90b      	cbnz	r3, 801c86c <_vfiprintf_r+0x18>
 801c868:	f7fa fad8 	bl	8016e1c <__sinit>
 801c86c:	4b89      	ldr	r3, [pc, #548]	; (801ca94 <_vfiprintf_r+0x240>)
 801c86e:	429d      	cmp	r5, r3
 801c870:	d11b      	bne.n	801c8aa <_vfiprintf_r+0x56>
 801c872:	6875      	ldr	r5, [r6, #4]
 801c874:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c876:	07d9      	lsls	r1, r3, #31
 801c878:	d405      	bmi.n	801c886 <_vfiprintf_r+0x32>
 801c87a:	89ab      	ldrh	r3, [r5, #12]
 801c87c:	059a      	lsls	r2, r3, #22
 801c87e:	d402      	bmi.n	801c886 <_vfiprintf_r+0x32>
 801c880:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c882:	f7fa fcab 	bl	80171dc <__retarget_lock_acquire_recursive>
 801c886:	89ab      	ldrh	r3, [r5, #12]
 801c888:	071b      	lsls	r3, r3, #28
 801c88a:	d501      	bpl.n	801c890 <_vfiprintf_r+0x3c>
 801c88c:	692b      	ldr	r3, [r5, #16]
 801c88e:	b9eb      	cbnz	r3, 801c8cc <_vfiprintf_r+0x78>
 801c890:	4629      	mov	r1, r5
 801c892:	4630      	mov	r0, r6
 801c894:	f7fd fa9c 	bl	8019dd0 <__swsetup_r>
 801c898:	b1c0      	cbz	r0, 801c8cc <_vfiprintf_r+0x78>
 801c89a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c89c:	07dc      	lsls	r4, r3, #31
 801c89e:	d50e      	bpl.n	801c8be <_vfiprintf_r+0x6a>
 801c8a0:	f04f 30ff 	mov.w	r0, #4294967295
 801c8a4:	b01d      	add	sp, #116	; 0x74
 801c8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8aa:	4b7b      	ldr	r3, [pc, #492]	; (801ca98 <_vfiprintf_r+0x244>)
 801c8ac:	429d      	cmp	r5, r3
 801c8ae:	d101      	bne.n	801c8b4 <_vfiprintf_r+0x60>
 801c8b0:	68b5      	ldr	r5, [r6, #8]
 801c8b2:	e7df      	b.n	801c874 <_vfiprintf_r+0x20>
 801c8b4:	4b79      	ldr	r3, [pc, #484]	; (801ca9c <_vfiprintf_r+0x248>)
 801c8b6:	429d      	cmp	r5, r3
 801c8b8:	bf08      	it	eq
 801c8ba:	68f5      	ldreq	r5, [r6, #12]
 801c8bc:	e7da      	b.n	801c874 <_vfiprintf_r+0x20>
 801c8be:	89ab      	ldrh	r3, [r5, #12]
 801c8c0:	0598      	lsls	r0, r3, #22
 801c8c2:	d4ed      	bmi.n	801c8a0 <_vfiprintf_r+0x4c>
 801c8c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c8c6:	f7fa fc8b 	bl	80171e0 <__retarget_lock_release_recursive>
 801c8ca:	e7e9      	b.n	801c8a0 <_vfiprintf_r+0x4c>
 801c8cc:	2300      	movs	r3, #0
 801c8ce:	9309      	str	r3, [sp, #36]	; 0x24
 801c8d0:	2320      	movs	r3, #32
 801c8d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c8d6:	f8cd 800c 	str.w	r8, [sp, #12]
 801c8da:	2330      	movs	r3, #48	; 0x30
 801c8dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801caa0 <_vfiprintf_r+0x24c>
 801c8e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c8e4:	f04f 0901 	mov.w	r9, #1
 801c8e8:	4623      	mov	r3, r4
 801c8ea:	469a      	mov	sl, r3
 801c8ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c8f0:	b10a      	cbz	r2, 801c8f6 <_vfiprintf_r+0xa2>
 801c8f2:	2a25      	cmp	r2, #37	; 0x25
 801c8f4:	d1f9      	bne.n	801c8ea <_vfiprintf_r+0x96>
 801c8f6:	ebba 0b04 	subs.w	fp, sl, r4
 801c8fa:	d00b      	beq.n	801c914 <_vfiprintf_r+0xc0>
 801c8fc:	465b      	mov	r3, fp
 801c8fe:	4622      	mov	r2, r4
 801c900:	4629      	mov	r1, r5
 801c902:	4630      	mov	r0, r6
 801c904:	f7ff ff93 	bl	801c82e <__sfputs_r>
 801c908:	3001      	adds	r0, #1
 801c90a:	f000 80aa 	beq.w	801ca62 <_vfiprintf_r+0x20e>
 801c90e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c910:	445a      	add	r2, fp
 801c912:	9209      	str	r2, [sp, #36]	; 0x24
 801c914:	f89a 3000 	ldrb.w	r3, [sl]
 801c918:	2b00      	cmp	r3, #0
 801c91a:	f000 80a2 	beq.w	801ca62 <_vfiprintf_r+0x20e>
 801c91e:	2300      	movs	r3, #0
 801c920:	f04f 32ff 	mov.w	r2, #4294967295
 801c924:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c928:	f10a 0a01 	add.w	sl, sl, #1
 801c92c:	9304      	str	r3, [sp, #16]
 801c92e:	9307      	str	r3, [sp, #28]
 801c930:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c934:	931a      	str	r3, [sp, #104]	; 0x68
 801c936:	4654      	mov	r4, sl
 801c938:	2205      	movs	r2, #5
 801c93a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c93e:	4858      	ldr	r0, [pc, #352]	; (801caa0 <_vfiprintf_r+0x24c>)
 801c940:	f7e3 fc6e 	bl	8000220 <memchr>
 801c944:	9a04      	ldr	r2, [sp, #16]
 801c946:	b9d8      	cbnz	r0, 801c980 <_vfiprintf_r+0x12c>
 801c948:	06d1      	lsls	r1, r2, #27
 801c94a:	bf44      	itt	mi
 801c94c:	2320      	movmi	r3, #32
 801c94e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c952:	0713      	lsls	r3, r2, #28
 801c954:	bf44      	itt	mi
 801c956:	232b      	movmi	r3, #43	; 0x2b
 801c958:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c95c:	f89a 3000 	ldrb.w	r3, [sl]
 801c960:	2b2a      	cmp	r3, #42	; 0x2a
 801c962:	d015      	beq.n	801c990 <_vfiprintf_r+0x13c>
 801c964:	9a07      	ldr	r2, [sp, #28]
 801c966:	4654      	mov	r4, sl
 801c968:	2000      	movs	r0, #0
 801c96a:	f04f 0c0a 	mov.w	ip, #10
 801c96e:	4621      	mov	r1, r4
 801c970:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c974:	3b30      	subs	r3, #48	; 0x30
 801c976:	2b09      	cmp	r3, #9
 801c978:	d94e      	bls.n	801ca18 <_vfiprintf_r+0x1c4>
 801c97a:	b1b0      	cbz	r0, 801c9aa <_vfiprintf_r+0x156>
 801c97c:	9207      	str	r2, [sp, #28]
 801c97e:	e014      	b.n	801c9aa <_vfiprintf_r+0x156>
 801c980:	eba0 0308 	sub.w	r3, r0, r8
 801c984:	fa09 f303 	lsl.w	r3, r9, r3
 801c988:	4313      	orrs	r3, r2
 801c98a:	9304      	str	r3, [sp, #16]
 801c98c:	46a2      	mov	sl, r4
 801c98e:	e7d2      	b.n	801c936 <_vfiprintf_r+0xe2>
 801c990:	9b03      	ldr	r3, [sp, #12]
 801c992:	1d19      	adds	r1, r3, #4
 801c994:	681b      	ldr	r3, [r3, #0]
 801c996:	9103      	str	r1, [sp, #12]
 801c998:	2b00      	cmp	r3, #0
 801c99a:	bfbb      	ittet	lt
 801c99c:	425b      	neglt	r3, r3
 801c99e:	f042 0202 	orrlt.w	r2, r2, #2
 801c9a2:	9307      	strge	r3, [sp, #28]
 801c9a4:	9307      	strlt	r3, [sp, #28]
 801c9a6:	bfb8      	it	lt
 801c9a8:	9204      	strlt	r2, [sp, #16]
 801c9aa:	7823      	ldrb	r3, [r4, #0]
 801c9ac:	2b2e      	cmp	r3, #46	; 0x2e
 801c9ae:	d10c      	bne.n	801c9ca <_vfiprintf_r+0x176>
 801c9b0:	7863      	ldrb	r3, [r4, #1]
 801c9b2:	2b2a      	cmp	r3, #42	; 0x2a
 801c9b4:	d135      	bne.n	801ca22 <_vfiprintf_r+0x1ce>
 801c9b6:	9b03      	ldr	r3, [sp, #12]
 801c9b8:	1d1a      	adds	r2, r3, #4
 801c9ba:	681b      	ldr	r3, [r3, #0]
 801c9bc:	9203      	str	r2, [sp, #12]
 801c9be:	2b00      	cmp	r3, #0
 801c9c0:	bfb8      	it	lt
 801c9c2:	f04f 33ff 	movlt.w	r3, #4294967295
 801c9c6:	3402      	adds	r4, #2
 801c9c8:	9305      	str	r3, [sp, #20]
 801c9ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801cab0 <_vfiprintf_r+0x25c>
 801c9ce:	7821      	ldrb	r1, [r4, #0]
 801c9d0:	2203      	movs	r2, #3
 801c9d2:	4650      	mov	r0, sl
 801c9d4:	f7e3 fc24 	bl	8000220 <memchr>
 801c9d8:	b140      	cbz	r0, 801c9ec <_vfiprintf_r+0x198>
 801c9da:	2340      	movs	r3, #64	; 0x40
 801c9dc:	eba0 000a 	sub.w	r0, r0, sl
 801c9e0:	fa03 f000 	lsl.w	r0, r3, r0
 801c9e4:	9b04      	ldr	r3, [sp, #16]
 801c9e6:	4303      	orrs	r3, r0
 801c9e8:	3401      	adds	r4, #1
 801c9ea:	9304      	str	r3, [sp, #16]
 801c9ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c9f0:	482c      	ldr	r0, [pc, #176]	; (801caa4 <_vfiprintf_r+0x250>)
 801c9f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c9f6:	2206      	movs	r2, #6
 801c9f8:	f7e3 fc12 	bl	8000220 <memchr>
 801c9fc:	2800      	cmp	r0, #0
 801c9fe:	d03f      	beq.n	801ca80 <_vfiprintf_r+0x22c>
 801ca00:	4b29      	ldr	r3, [pc, #164]	; (801caa8 <_vfiprintf_r+0x254>)
 801ca02:	bb1b      	cbnz	r3, 801ca4c <_vfiprintf_r+0x1f8>
 801ca04:	9b03      	ldr	r3, [sp, #12]
 801ca06:	3307      	adds	r3, #7
 801ca08:	f023 0307 	bic.w	r3, r3, #7
 801ca0c:	3308      	adds	r3, #8
 801ca0e:	9303      	str	r3, [sp, #12]
 801ca10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca12:	443b      	add	r3, r7
 801ca14:	9309      	str	r3, [sp, #36]	; 0x24
 801ca16:	e767      	b.n	801c8e8 <_vfiprintf_r+0x94>
 801ca18:	fb0c 3202 	mla	r2, ip, r2, r3
 801ca1c:	460c      	mov	r4, r1
 801ca1e:	2001      	movs	r0, #1
 801ca20:	e7a5      	b.n	801c96e <_vfiprintf_r+0x11a>
 801ca22:	2300      	movs	r3, #0
 801ca24:	3401      	adds	r4, #1
 801ca26:	9305      	str	r3, [sp, #20]
 801ca28:	4619      	mov	r1, r3
 801ca2a:	f04f 0c0a 	mov.w	ip, #10
 801ca2e:	4620      	mov	r0, r4
 801ca30:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ca34:	3a30      	subs	r2, #48	; 0x30
 801ca36:	2a09      	cmp	r2, #9
 801ca38:	d903      	bls.n	801ca42 <_vfiprintf_r+0x1ee>
 801ca3a:	2b00      	cmp	r3, #0
 801ca3c:	d0c5      	beq.n	801c9ca <_vfiprintf_r+0x176>
 801ca3e:	9105      	str	r1, [sp, #20]
 801ca40:	e7c3      	b.n	801c9ca <_vfiprintf_r+0x176>
 801ca42:	fb0c 2101 	mla	r1, ip, r1, r2
 801ca46:	4604      	mov	r4, r0
 801ca48:	2301      	movs	r3, #1
 801ca4a:	e7f0      	b.n	801ca2e <_vfiprintf_r+0x1da>
 801ca4c:	ab03      	add	r3, sp, #12
 801ca4e:	9300      	str	r3, [sp, #0]
 801ca50:	462a      	mov	r2, r5
 801ca52:	4b16      	ldr	r3, [pc, #88]	; (801caac <_vfiprintf_r+0x258>)
 801ca54:	a904      	add	r1, sp, #16
 801ca56:	4630      	mov	r0, r6
 801ca58:	f7fa ffcc 	bl	80179f4 <_printf_float>
 801ca5c:	4607      	mov	r7, r0
 801ca5e:	1c78      	adds	r0, r7, #1
 801ca60:	d1d6      	bne.n	801ca10 <_vfiprintf_r+0x1bc>
 801ca62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ca64:	07d9      	lsls	r1, r3, #31
 801ca66:	d405      	bmi.n	801ca74 <_vfiprintf_r+0x220>
 801ca68:	89ab      	ldrh	r3, [r5, #12]
 801ca6a:	059a      	lsls	r2, r3, #22
 801ca6c:	d402      	bmi.n	801ca74 <_vfiprintf_r+0x220>
 801ca6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ca70:	f7fa fbb6 	bl	80171e0 <__retarget_lock_release_recursive>
 801ca74:	89ab      	ldrh	r3, [r5, #12]
 801ca76:	065b      	lsls	r3, r3, #25
 801ca78:	f53f af12 	bmi.w	801c8a0 <_vfiprintf_r+0x4c>
 801ca7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ca7e:	e711      	b.n	801c8a4 <_vfiprintf_r+0x50>
 801ca80:	ab03      	add	r3, sp, #12
 801ca82:	9300      	str	r3, [sp, #0]
 801ca84:	462a      	mov	r2, r5
 801ca86:	4b09      	ldr	r3, [pc, #36]	; (801caac <_vfiprintf_r+0x258>)
 801ca88:	a904      	add	r1, sp, #16
 801ca8a:	4630      	mov	r0, r6
 801ca8c:	f7fb fa56 	bl	8017f3c <_printf_i>
 801ca90:	e7e4      	b.n	801ca5c <_vfiprintf_r+0x208>
 801ca92:	bf00      	nop
 801ca94:	0801ee4c 	.word	0x0801ee4c
 801ca98:	0801ee6c 	.word	0x0801ee6c
 801ca9c:	0801ee2c 	.word	0x0801ee2c
 801caa0:	0801f384 	.word	0x0801f384
 801caa4:	0801f38e 	.word	0x0801f38e
 801caa8:	080179f5 	.word	0x080179f5
 801caac:	0801c82f 	.word	0x0801c82f
 801cab0:	0801f38a 	.word	0x0801f38a

0801cab4 <_scanf_chars>:
 801cab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cab8:	4615      	mov	r5, r2
 801caba:	688a      	ldr	r2, [r1, #8]
 801cabc:	4680      	mov	r8, r0
 801cabe:	460c      	mov	r4, r1
 801cac0:	b932      	cbnz	r2, 801cad0 <_scanf_chars+0x1c>
 801cac2:	698a      	ldr	r2, [r1, #24]
 801cac4:	2a00      	cmp	r2, #0
 801cac6:	bf0c      	ite	eq
 801cac8:	2201      	moveq	r2, #1
 801caca:	f04f 32ff 	movne.w	r2, #4294967295
 801cace:	608a      	str	r2, [r1, #8]
 801cad0:	6822      	ldr	r2, [r4, #0]
 801cad2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801cb60 <_scanf_chars+0xac>
 801cad6:	06d1      	lsls	r1, r2, #27
 801cad8:	bf5f      	itttt	pl
 801cada:	681a      	ldrpl	r2, [r3, #0]
 801cadc:	1d11      	addpl	r1, r2, #4
 801cade:	6019      	strpl	r1, [r3, #0]
 801cae0:	6816      	ldrpl	r6, [r2, #0]
 801cae2:	2700      	movs	r7, #0
 801cae4:	69a0      	ldr	r0, [r4, #24]
 801cae6:	b188      	cbz	r0, 801cb0c <_scanf_chars+0x58>
 801cae8:	2801      	cmp	r0, #1
 801caea:	d107      	bne.n	801cafc <_scanf_chars+0x48>
 801caec:	682b      	ldr	r3, [r5, #0]
 801caee:	781a      	ldrb	r2, [r3, #0]
 801caf0:	6963      	ldr	r3, [r4, #20]
 801caf2:	5c9b      	ldrb	r3, [r3, r2]
 801caf4:	b953      	cbnz	r3, 801cb0c <_scanf_chars+0x58>
 801caf6:	bb27      	cbnz	r7, 801cb42 <_scanf_chars+0x8e>
 801caf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cafc:	2802      	cmp	r0, #2
 801cafe:	d120      	bne.n	801cb42 <_scanf_chars+0x8e>
 801cb00:	682b      	ldr	r3, [r5, #0]
 801cb02:	781b      	ldrb	r3, [r3, #0]
 801cb04:	f813 3009 	ldrb.w	r3, [r3, r9]
 801cb08:	071b      	lsls	r3, r3, #28
 801cb0a:	d41a      	bmi.n	801cb42 <_scanf_chars+0x8e>
 801cb0c:	6823      	ldr	r3, [r4, #0]
 801cb0e:	06da      	lsls	r2, r3, #27
 801cb10:	bf5e      	ittt	pl
 801cb12:	682b      	ldrpl	r3, [r5, #0]
 801cb14:	781b      	ldrbpl	r3, [r3, #0]
 801cb16:	f806 3b01 	strbpl.w	r3, [r6], #1
 801cb1a:	682a      	ldr	r2, [r5, #0]
 801cb1c:	686b      	ldr	r3, [r5, #4]
 801cb1e:	3201      	adds	r2, #1
 801cb20:	602a      	str	r2, [r5, #0]
 801cb22:	68a2      	ldr	r2, [r4, #8]
 801cb24:	3b01      	subs	r3, #1
 801cb26:	3a01      	subs	r2, #1
 801cb28:	606b      	str	r3, [r5, #4]
 801cb2a:	3701      	adds	r7, #1
 801cb2c:	60a2      	str	r2, [r4, #8]
 801cb2e:	b142      	cbz	r2, 801cb42 <_scanf_chars+0x8e>
 801cb30:	2b00      	cmp	r3, #0
 801cb32:	dcd7      	bgt.n	801cae4 <_scanf_chars+0x30>
 801cb34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801cb38:	4629      	mov	r1, r5
 801cb3a:	4640      	mov	r0, r8
 801cb3c:	4798      	blx	r3
 801cb3e:	2800      	cmp	r0, #0
 801cb40:	d0d0      	beq.n	801cae4 <_scanf_chars+0x30>
 801cb42:	6823      	ldr	r3, [r4, #0]
 801cb44:	f013 0310 	ands.w	r3, r3, #16
 801cb48:	d105      	bne.n	801cb56 <_scanf_chars+0xa2>
 801cb4a:	68e2      	ldr	r2, [r4, #12]
 801cb4c:	3201      	adds	r2, #1
 801cb4e:	60e2      	str	r2, [r4, #12]
 801cb50:	69a2      	ldr	r2, [r4, #24]
 801cb52:	b102      	cbz	r2, 801cb56 <_scanf_chars+0xa2>
 801cb54:	7033      	strb	r3, [r6, #0]
 801cb56:	6923      	ldr	r3, [r4, #16]
 801cb58:	441f      	add	r7, r3
 801cb5a:	6127      	str	r7, [r4, #16]
 801cb5c:	2000      	movs	r0, #0
 801cb5e:	e7cb      	b.n	801caf8 <_scanf_chars+0x44>
 801cb60:	0801ed29 	.word	0x0801ed29

0801cb64 <_scanf_i>:
 801cb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb68:	4698      	mov	r8, r3
 801cb6a:	4b74      	ldr	r3, [pc, #464]	; (801cd3c <_scanf_i+0x1d8>)
 801cb6c:	460c      	mov	r4, r1
 801cb6e:	4682      	mov	sl, r0
 801cb70:	4616      	mov	r6, r2
 801cb72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801cb76:	b087      	sub	sp, #28
 801cb78:	ab03      	add	r3, sp, #12
 801cb7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801cb7e:	4b70      	ldr	r3, [pc, #448]	; (801cd40 <_scanf_i+0x1dc>)
 801cb80:	69a1      	ldr	r1, [r4, #24]
 801cb82:	4a70      	ldr	r2, [pc, #448]	; (801cd44 <_scanf_i+0x1e0>)
 801cb84:	2903      	cmp	r1, #3
 801cb86:	bf18      	it	ne
 801cb88:	461a      	movne	r2, r3
 801cb8a:	68a3      	ldr	r3, [r4, #8]
 801cb8c:	9201      	str	r2, [sp, #4]
 801cb8e:	1e5a      	subs	r2, r3, #1
 801cb90:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801cb94:	bf88      	it	hi
 801cb96:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801cb9a:	4627      	mov	r7, r4
 801cb9c:	bf82      	ittt	hi
 801cb9e:	eb03 0905 	addhi.w	r9, r3, r5
 801cba2:	f240 135d 	movwhi	r3, #349	; 0x15d
 801cba6:	60a3      	strhi	r3, [r4, #8]
 801cba8:	f857 3b1c 	ldr.w	r3, [r7], #28
 801cbac:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801cbb0:	bf98      	it	ls
 801cbb2:	f04f 0900 	movls.w	r9, #0
 801cbb6:	6023      	str	r3, [r4, #0]
 801cbb8:	463d      	mov	r5, r7
 801cbba:	f04f 0b00 	mov.w	fp, #0
 801cbbe:	6831      	ldr	r1, [r6, #0]
 801cbc0:	ab03      	add	r3, sp, #12
 801cbc2:	7809      	ldrb	r1, [r1, #0]
 801cbc4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801cbc8:	2202      	movs	r2, #2
 801cbca:	f7e3 fb29 	bl	8000220 <memchr>
 801cbce:	b328      	cbz	r0, 801cc1c <_scanf_i+0xb8>
 801cbd0:	f1bb 0f01 	cmp.w	fp, #1
 801cbd4:	d159      	bne.n	801cc8a <_scanf_i+0x126>
 801cbd6:	6862      	ldr	r2, [r4, #4]
 801cbd8:	b92a      	cbnz	r2, 801cbe6 <_scanf_i+0x82>
 801cbda:	6822      	ldr	r2, [r4, #0]
 801cbdc:	2308      	movs	r3, #8
 801cbde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801cbe2:	6063      	str	r3, [r4, #4]
 801cbe4:	6022      	str	r2, [r4, #0]
 801cbe6:	6822      	ldr	r2, [r4, #0]
 801cbe8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801cbec:	6022      	str	r2, [r4, #0]
 801cbee:	68a2      	ldr	r2, [r4, #8]
 801cbf0:	1e51      	subs	r1, r2, #1
 801cbf2:	60a1      	str	r1, [r4, #8]
 801cbf4:	b192      	cbz	r2, 801cc1c <_scanf_i+0xb8>
 801cbf6:	6832      	ldr	r2, [r6, #0]
 801cbf8:	1c51      	adds	r1, r2, #1
 801cbfa:	6031      	str	r1, [r6, #0]
 801cbfc:	7812      	ldrb	r2, [r2, #0]
 801cbfe:	f805 2b01 	strb.w	r2, [r5], #1
 801cc02:	6872      	ldr	r2, [r6, #4]
 801cc04:	3a01      	subs	r2, #1
 801cc06:	2a00      	cmp	r2, #0
 801cc08:	6072      	str	r2, [r6, #4]
 801cc0a:	dc07      	bgt.n	801cc1c <_scanf_i+0xb8>
 801cc0c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801cc10:	4631      	mov	r1, r6
 801cc12:	4650      	mov	r0, sl
 801cc14:	4790      	blx	r2
 801cc16:	2800      	cmp	r0, #0
 801cc18:	f040 8085 	bne.w	801cd26 <_scanf_i+0x1c2>
 801cc1c:	f10b 0b01 	add.w	fp, fp, #1
 801cc20:	f1bb 0f03 	cmp.w	fp, #3
 801cc24:	d1cb      	bne.n	801cbbe <_scanf_i+0x5a>
 801cc26:	6863      	ldr	r3, [r4, #4]
 801cc28:	b90b      	cbnz	r3, 801cc2e <_scanf_i+0xca>
 801cc2a:	230a      	movs	r3, #10
 801cc2c:	6063      	str	r3, [r4, #4]
 801cc2e:	6863      	ldr	r3, [r4, #4]
 801cc30:	4945      	ldr	r1, [pc, #276]	; (801cd48 <_scanf_i+0x1e4>)
 801cc32:	6960      	ldr	r0, [r4, #20]
 801cc34:	1ac9      	subs	r1, r1, r3
 801cc36:	f000 f89b 	bl	801cd70 <__sccl>
 801cc3a:	f04f 0b00 	mov.w	fp, #0
 801cc3e:	68a3      	ldr	r3, [r4, #8]
 801cc40:	6822      	ldr	r2, [r4, #0]
 801cc42:	2b00      	cmp	r3, #0
 801cc44:	d03d      	beq.n	801ccc2 <_scanf_i+0x15e>
 801cc46:	6831      	ldr	r1, [r6, #0]
 801cc48:	6960      	ldr	r0, [r4, #20]
 801cc4a:	f891 c000 	ldrb.w	ip, [r1]
 801cc4e:	f810 000c 	ldrb.w	r0, [r0, ip]
 801cc52:	2800      	cmp	r0, #0
 801cc54:	d035      	beq.n	801ccc2 <_scanf_i+0x15e>
 801cc56:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801cc5a:	d124      	bne.n	801cca6 <_scanf_i+0x142>
 801cc5c:	0510      	lsls	r0, r2, #20
 801cc5e:	d522      	bpl.n	801cca6 <_scanf_i+0x142>
 801cc60:	f10b 0b01 	add.w	fp, fp, #1
 801cc64:	f1b9 0f00 	cmp.w	r9, #0
 801cc68:	d003      	beq.n	801cc72 <_scanf_i+0x10e>
 801cc6a:	3301      	adds	r3, #1
 801cc6c:	f109 39ff 	add.w	r9, r9, #4294967295
 801cc70:	60a3      	str	r3, [r4, #8]
 801cc72:	6873      	ldr	r3, [r6, #4]
 801cc74:	3b01      	subs	r3, #1
 801cc76:	2b00      	cmp	r3, #0
 801cc78:	6073      	str	r3, [r6, #4]
 801cc7a:	dd1b      	ble.n	801ccb4 <_scanf_i+0x150>
 801cc7c:	6833      	ldr	r3, [r6, #0]
 801cc7e:	3301      	adds	r3, #1
 801cc80:	6033      	str	r3, [r6, #0]
 801cc82:	68a3      	ldr	r3, [r4, #8]
 801cc84:	3b01      	subs	r3, #1
 801cc86:	60a3      	str	r3, [r4, #8]
 801cc88:	e7d9      	b.n	801cc3e <_scanf_i+0xda>
 801cc8a:	f1bb 0f02 	cmp.w	fp, #2
 801cc8e:	d1ae      	bne.n	801cbee <_scanf_i+0x8a>
 801cc90:	6822      	ldr	r2, [r4, #0]
 801cc92:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801cc96:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801cc9a:	d1bf      	bne.n	801cc1c <_scanf_i+0xb8>
 801cc9c:	2310      	movs	r3, #16
 801cc9e:	6063      	str	r3, [r4, #4]
 801cca0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801cca4:	e7a2      	b.n	801cbec <_scanf_i+0x88>
 801cca6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801ccaa:	6022      	str	r2, [r4, #0]
 801ccac:	780b      	ldrb	r3, [r1, #0]
 801ccae:	f805 3b01 	strb.w	r3, [r5], #1
 801ccb2:	e7de      	b.n	801cc72 <_scanf_i+0x10e>
 801ccb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801ccb8:	4631      	mov	r1, r6
 801ccba:	4650      	mov	r0, sl
 801ccbc:	4798      	blx	r3
 801ccbe:	2800      	cmp	r0, #0
 801ccc0:	d0df      	beq.n	801cc82 <_scanf_i+0x11e>
 801ccc2:	6823      	ldr	r3, [r4, #0]
 801ccc4:	05d9      	lsls	r1, r3, #23
 801ccc6:	d50d      	bpl.n	801cce4 <_scanf_i+0x180>
 801ccc8:	42bd      	cmp	r5, r7
 801ccca:	d909      	bls.n	801cce0 <_scanf_i+0x17c>
 801cccc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801ccd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ccd4:	4632      	mov	r2, r6
 801ccd6:	4650      	mov	r0, sl
 801ccd8:	4798      	blx	r3
 801ccda:	f105 39ff 	add.w	r9, r5, #4294967295
 801ccde:	464d      	mov	r5, r9
 801cce0:	42bd      	cmp	r5, r7
 801cce2:	d028      	beq.n	801cd36 <_scanf_i+0x1d2>
 801cce4:	6822      	ldr	r2, [r4, #0]
 801cce6:	f012 0210 	ands.w	r2, r2, #16
 801ccea:	d113      	bne.n	801cd14 <_scanf_i+0x1b0>
 801ccec:	702a      	strb	r2, [r5, #0]
 801ccee:	6863      	ldr	r3, [r4, #4]
 801ccf0:	9e01      	ldr	r6, [sp, #4]
 801ccf2:	4639      	mov	r1, r7
 801ccf4:	4650      	mov	r0, sl
 801ccf6:	47b0      	blx	r6
 801ccf8:	f8d8 3000 	ldr.w	r3, [r8]
 801ccfc:	6821      	ldr	r1, [r4, #0]
 801ccfe:	1d1a      	adds	r2, r3, #4
 801cd00:	f8c8 2000 	str.w	r2, [r8]
 801cd04:	f011 0f20 	tst.w	r1, #32
 801cd08:	681b      	ldr	r3, [r3, #0]
 801cd0a:	d00f      	beq.n	801cd2c <_scanf_i+0x1c8>
 801cd0c:	6018      	str	r0, [r3, #0]
 801cd0e:	68e3      	ldr	r3, [r4, #12]
 801cd10:	3301      	adds	r3, #1
 801cd12:	60e3      	str	r3, [r4, #12]
 801cd14:	1bed      	subs	r5, r5, r7
 801cd16:	44ab      	add	fp, r5
 801cd18:	6925      	ldr	r5, [r4, #16]
 801cd1a:	445d      	add	r5, fp
 801cd1c:	6125      	str	r5, [r4, #16]
 801cd1e:	2000      	movs	r0, #0
 801cd20:	b007      	add	sp, #28
 801cd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd26:	f04f 0b00 	mov.w	fp, #0
 801cd2a:	e7ca      	b.n	801ccc2 <_scanf_i+0x15e>
 801cd2c:	07ca      	lsls	r2, r1, #31
 801cd2e:	bf4c      	ite	mi
 801cd30:	8018      	strhmi	r0, [r3, #0]
 801cd32:	6018      	strpl	r0, [r3, #0]
 801cd34:	e7eb      	b.n	801cd0e <_scanf_i+0x1aa>
 801cd36:	2001      	movs	r0, #1
 801cd38:	e7f2      	b.n	801cd20 <_scanf_i+0x1bc>
 801cd3a:	bf00      	nop
 801cd3c:	0801ec28 	.word	0x0801ec28
 801cd40:	08019811 	.word	0x08019811
 801cd44:	08019701 	.word	0x08019701
 801cd48:	0801f3ae 	.word	0x0801f3ae

0801cd4c <_read_r>:
 801cd4c:	b538      	push	{r3, r4, r5, lr}
 801cd4e:	4d07      	ldr	r5, [pc, #28]	; (801cd6c <_read_r+0x20>)
 801cd50:	4604      	mov	r4, r0
 801cd52:	4608      	mov	r0, r1
 801cd54:	4611      	mov	r1, r2
 801cd56:	2200      	movs	r2, #0
 801cd58:	602a      	str	r2, [r5, #0]
 801cd5a:	461a      	mov	r2, r3
 801cd5c:	f000 f8f0 	bl	801cf40 <_read>
 801cd60:	1c43      	adds	r3, r0, #1
 801cd62:	d102      	bne.n	801cd6a <_read_r+0x1e>
 801cd64:	682b      	ldr	r3, [r5, #0]
 801cd66:	b103      	cbz	r3, 801cd6a <_read_r+0x1e>
 801cd68:	6023      	str	r3, [r4, #0]
 801cd6a:	bd38      	pop	{r3, r4, r5, pc}
 801cd6c:	20006be8 	.word	0x20006be8

0801cd70 <__sccl>:
 801cd70:	b570      	push	{r4, r5, r6, lr}
 801cd72:	780b      	ldrb	r3, [r1, #0]
 801cd74:	4604      	mov	r4, r0
 801cd76:	2b5e      	cmp	r3, #94	; 0x5e
 801cd78:	bf0b      	itete	eq
 801cd7a:	784b      	ldrbeq	r3, [r1, #1]
 801cd7c:	1c48      	addne	r0, r1, #1
 801cd7e:	1c88      	addeq	r0, r1, #2
 801cd80:	2200      	movne	r2, #0
 801cd82:	bf08      	it	eq
 801cd84:	2201      	moveq	r2, #1
 801cd86:	1e61      	subs	r1, r4, #1
 801cd88:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801cd8c:	f801 2f01 	strb.w	r2, [r1, #1]!
 801cd90:	42a9      	cmp	r1, r5
 801cd92:	d1fb      	bne.n	801cd8c <__sccl+0x1c>
 801cd94:	b90b      	cbnz	r3, 801cd9a <__sccl+0x2a>
 801cd96:	3801      	subs	r0, #1
 801cd98:	bd70      	pop	{r4, r5, r6, pc}
 801cd9a:	f082 0101 	eor.w	r1, r2, #1
 801cd9e:	54e1      	strb	r1, [r4, r3]
 801cda0:	1c42      	adds	r2, r0, #1
 801cda2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801cda6:	2d2d      	cmp	r5, #45	; 0x2d
 801cda8:	f102 36ff 	add.w	r6, r2, #4294967295
 801cdac:	4610      	mov	r0, r2
 801cdae:	d006      	beq.n	801cdbe <__sccl+0x4e>
 801cdb0:	2d5d      	cmp	r5, #93	; 0x5d
 801cdb2:	d0f1      	beq.n	801cd98 <__sccl+0x28>
 801cdb4:	b90d      	cbnz	r5, 801cdba <__sccl+0x4a>
 801cdb6:	4630      	mov	r0, r6
 801cdb8:	e7ee      	b.n	801cd98 <__sccl+0x28>
 801cdba:	462b      	mov	r3, r5
 801cdbc:	e7ef      	b.n	801cd9e <__sccl+0x2e>
 801cdbe:	7816      	ldrb	r6, [r2, #0]
 801cdc0:	2e5d      	cmp	r6, #93	; 0x5d
 801cdc2:	d0fa      	beq.n	801cdba <__sccl+0x4a>
 801cdc4:	42b3      	cmp	r3, r6
 801cdc6:	dcf8      	bgt.n	801cdba <__sccl+0x4a>
 801cdc8:	4618      	mov	r0, r3
 801cdca:	3001      	adds	r0, #1
 801cdcc:	4286      	cmp	r6, r0
 801cdce:	5421      	strb	r1, [r4, r0]
 801cdd0:	dcfb      	bgt.n	801cdca <__sccl+0x5a>
 801cdd2:	43d8      	mvns	r0, r3
 801cdd4:	4430      	add	r0, r6
 801cdd6:	1c5d      	adds	r5, r3, #1
 801cdd8:	42b3      	cmp	r3, r6
 801cdda:	bfa8      	it	ge
 801cddc:	2000      	movge	r0, #0
 801cdde:	182b      	adds	r3, r5, r0
 801cde0:	3202      	adds	r2, #2
 801cde2:	e7de      	b.n	801cda2 <__sccl+0x32>

0801cde4 <__submore>:
 801cde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cde8:	460c      	mov	r4, r1
 801cdea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801cdec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cdf0:	4299      	cmp	r1, r3
 801cdf2:	d11d      	bne.n	801ce30 <__submore+0x4c>
 801cdf4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801cdf8:	f7fa fd02 	bl	8017800 <_malloc_r>
 801cdfc:	b918      	cbnz	r0, 801ce06 <__submore+0x22>
 801cdfe:	f04f 30ff 	mov.w	r0, #4294967295
 801ce02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ce0a:	63a3      	str	r3, [r4, #56]	; 0x38
 801ce0c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801ce10:	6360      	str	r0, [r4, #52]	; 0x34
 801ce12:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801ce16:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801ce1a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801ce1e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801ce22:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801ce26:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801ce2a:	6020      	str	r0, [r4, #0]
 801ce2c:	2000      	movs	r0, #0
 801ce2e:	e7e8      	b.n	801ce02 <__submore+0x1e>
 801ce30:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801ce32:	0077      	lsls	r7, r6, #1
 801ce34:	463a      	mov	r2, r7
 801ce36:	f7ff f98f 	bl	801c158 <_realloc_r>
 801ce3a:	4605      	mov	r5, r0
 801ce3c:	2800      	cmp	r0, #0
 801ce3e:	d0de      	beq.n	801cdfe <__submore+0x1a>
 801ce40:	eb00 0806 	add.w	r8, r0, r6
 801ce44:	4601      	mov	r1, r0
 801ce46:	4632      	mov	r2, r6
 801ce48:	4640      	mov	r0, r8
 801ce4a:	f7fa f9db 	bl	8017204 <memcpy>
 801ce4e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801ce52:	f8c4 8000 	str.w	r8, [r4]
 801ce56:	e7e9      	b.n	801ce2c <__submore+0x48>

0801ce58 <__ascii_wctomb>:
 801ce58:	b149      	cbz	r1, 801ce6e <__ascii_wctomb+0x16>
 801ce5a:	2aff      	cmp	r2, #255	; 0xff
 801ce5c:	bf85      	ittet	hi
 801ce5e:	238a      	movhi	r3, #138	; 0x8a
 801ce60:	6003      	strhi	r3, [r0, #0]
 801ce62:	700a      	strbls	r2, [r1, #0]
 801ce64:	f04f 30ff 	movhi.w	r0, #4294967295
 801ce68:	bf98      	it	ls
 801ce6a:	2001      	movls	r0, #1
 801ce6c:	4770      	bx	lr
 801ce6e:	4608      	mov	r0, r1
 801ce70:	4770      	bx	lr
	...

0801ce74 <__env_lock>:
 801ce74:	4801      	ldr	r0, [pc, #4]	; (801ce7c <__env_lock+0x8>)
 801ce76:	f7fa b9b1 	b.w	80171dc <__retarget_lock_acquire_recursive>
 801ce7a:	bf00      	nop
 801ce7c:	20006bde 	.word	0x20006bde

0801ce80 <__env_unlock>:
 801ce80:	4801      	ldr	r0, [pc, #4]	; (801ce88 <__env_unlock+0x8>)
 801ce82:	f7fa b9ad 	b.w	80171e0 <__retarget_lock_release_recursive>
 801ce86:	bf00      	nop
 801ce88:	20006bde 	.word	0x20006bde

0801ce8c <_fstat_r>:
 801ce8c:	b538      	push	{r3, r4, r5, lr}
 801ce8e:	4d07      	ldr	r5, [pc, #28]	; (801ceac <_fstat_r+0x20>)
 801ce90:	2300      	movs	r3, #0
 801ce92:	4604      	mov	r4, r0
 801ce94:	4608      	mov	r0, r1
 801ce96:	4611      	mov	r1, r2
 801ce98:	602b      	str	r3, [r5, #0]
 801ce9a:	f000 f829 	bl	801cef0 <_fstat>
 801ce9e:	1c43      	adds	r3, r0, #1
 801cea0:	d102      	bne.n	801cea8 <_fstat_r+0x1c>
 801cea2:	682b      	ldr	r3, [r5, #0]
 801cea4:	b103      	cbz	r3, 801cea8 <_fstat_r+0x1c>
 801cea6:	6023      	str	r3, [r4, #0]
 801cea8:	bd38      	pop	{r3, r4, r5, pc}
 801ceaa:	bf00      	nop
 801ceac:	20006be8 	.word	0x20006be8

0801ceb0 <_isatty_r>:
 801ceb0:	b538      	push	{r3, r4, r5, lr}
 801ceb2:	4d06      	ldr	r5, [pc, #24]	; (801cecc <_isatty_r+0x1c>)
 801ceb4:	2300      	movs	r3, #0
 801ceb6:	4604      	mov	r4, r0
 801ceb8:	4608      	mov	r0, r1
 801ceba:	602b      	str	r3, [r5, #0]
 801cebc:	f000 f828 	bl	801cf10 <_isatty>
 801cec0:	1c43      	adds	r3, r0, #1
 801cec2:	d102      	bne.n	801ceca <_isatty_r+0x1a>
 801cec4:	682b      	ldr	r3, [r5, #0]
 801cec6:	b103      	cbz	r3, 801ceca <_isatty_r+0x1a>
 801cec8:	6023      	str	r3, [r4, #0]
 801ceca:	bd38      	pop	{r3, r4, r5, pc}
 801cecc:	20006be8 	.word	0x20006be8

0801ced0 <_malloc_usable_size_r>:
 801ced0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ced4:	1f18      	subs	r0, r3, #4
 801ced6:	2b00      	cmp	r3, #0
 801ced8:	bfbc      	itt	lt
 801ceda:	580b      	ldrlt	r3, [r1, r0]
 801cedc:	18c0      	addlt	r0, r0, r3
 801cede:	4770      	bx	lr

0801cee0 <_close>:
 801cee0:	4b02      	ldr	r3, [pc, #8]	; (801ceec <_close+0xc>)
 801cee2:	2258      	movs	r2, #88	; 0x58
 801cee4:	601a      	str	r2, [r3, #0]
 801cee6:	f04f 30ff 	mov.w	r0, #4294967295
 801ceea:	4770      	bx	lr
 801ceec:	20006be8 	.word	0x20006be8

0801cef0 <_fstat>:
 801cef0:	4b02      	ldr	r3, [pc, #8]	; (801cefc <_fstat+0xc>)
 801cef2:	2258      	movs	r2, #88	; 0x58
 801cef4:	601a      	str	r2, [r3, #0]
 801cef6:	f04f 30ff 	mov.w	r0, #4294967295
 801cefa:	4770      	bx	lr
 801cefc:	20006be8 	.word	0x20006be8

0801cf00 <_getpid>:
 801cf00:	4b02      	ldr	r3, [pc, #8]	; (801cf0c <_getpid+0xc>)
 801cf02:	2258      	movs	r2, #88	; 0x58
 801cf04:	601a      	str	r2, [r3, #0]
 801cf06:	f04f 30ff 	mov.w	r0, #4294967295
 801cf0a:	4770      	bx	lr
 801cf0c:	20006be8 	.word	0x20006be8

0801cf10 <_isatty>:
 801cf10:	4b02      	ldr	r3, [pc, #8]	; (801cf1c <_isatty+0xc>)
 801cf12:	2258      	movs	r2, #88	; 0x58
 801cf14:	601a      	str	r2, [r3, #0]
 801cf16:	2000      	movs	r0, #0
 801cf18:	4770      	bx	lr
 801cf1a:	bf00      	nop
 801cf1c:	20006be8 	.word	0x20006be8

0801cf20 <_kill>:
 801cf20:	4b02      	ldr	r3, [pc, #8]	; (801cf2c <_kill+0xc>)
 801cf22:	2258      	movs	r2, #88	; 0x58
 801cf24:	601a      	str	r2, [r3, #0]
 801cf26:	f04f 30ff 	mov.w	r0, #4294967295
 801cf2a:	4770      	bx	lr
 801cf2c:	20006be8 	.word	0x20006be8

0801cf30 <_lseek>:
 801cf30:	4b02      	ldr	r3, [pc, #8]	; (801cf3c <_lseek+0xc>)
 801cf32:	2258      	movs	r2, #88	; 0x58
 801cf34:	601a      	str	r2, [r3, #0]
 801cf36:	f04f 30ff 	mov.w	r0, #4294967295
 801cf3a:	4770      	bx	lr
 801cf3c:	20006be8 	.word	0x20006be8

0801cf40 <_read>:
 801cf40:	4b02      	ldr	r3, [pc, #8]	; (801cf4c <_read+0xc>)
 801cf42:	2258      	movs	r2, #88	; 0x58
 801cf44:	601a      	str	r2, [r3, #0]
 801cf46:	f04f 30ff 	mov.w	r0, #4294967295
 801cf4a:	4770      	bx	lr
 801cf4c:	20006be8 	.word	0x20006be8

0801cf50 <_sbrk>:
 801cf50:	4b04      	ldr	r3, [pc, #16]	; (801cf64 <_sbrk+0x14>)
 801cf52:	6819      	ldr	r1, [r3, #0]
 801cf54:	4602      	mov	r2, r0
 801cf56:	b909      	cbnz	r1, 801cf5c <_sbrk+0xc>
 801cf58:	4903      	ldr	r1, [pc, #12]	; (801cf68 <_sbrk+0x18>)
 801cf5a:	6019      	str	r1, [r3, #0]
 801cf5c:	6818      	ldr	r0, [r3, #0]
 801cf5e:	4402      	add	r2, r0
 801cf60:	601a      	str	r2, [r3, #0]
 801cf62:	4770      	bx	lr
 801cf64:	20005260 	.word	0x20005260
 801cf68:	20006bf0 	.word	0x20006bf0

0801cf6c <_write>:
 801cf6c:	4b02      	ldr	r3, [pc, #8]	; (801cf78 <_write+0xc>)
 801cf6e:	2258      	movs	r2, #88	; 0x58
 801cf70:	601a      	str	r2, [r3, #0]
 801cf72:	f04f 30ff 	mov.w	r0, #4294967295
 801cf76:	4770      	bx	lr
 801cf78:	20006be8 	.word	0x20006be8

0801cf7c <_exit>:
 801cf7c:	e7fe      	b.n	801cf7c <_exit>
	...

0801cf80 <_init>:
 801cf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf82:	bf00      	nop
 801cf84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cf86:	bc08      	pop	{r3}
 801cf88:	469e      	mov	lr, r3
 801cf8a:	4770      	bx	lr

0801cf8c <_fini>:
 801cf8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf8e:	bf00      	nop
 801cf90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cf92:	bc08      	pop	{r3}
 801cf94:	469e      	mov	lr, r3
 801cf96:	4770      	bx	lr
